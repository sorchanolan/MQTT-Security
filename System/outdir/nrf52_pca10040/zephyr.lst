
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return chr;
}

static void *lexer_string(struct lexer *lexer)
{
       0:	2000abb0 	.word	0x2000abb0
	ignore(lexer);
       4:	0002946d 	.word	0x0002946d
       8:	000294cd 	.word	0x000294cd

	while (true) {
		char chr = next(lexer);

		if (chr == '\0') {
			emit(lexer, JSON_TOK_ERROR);
       c:	00029301 	.word	0x00029301
      10:	00029301 	.word	0x00029301
			return NULL;
      14:	00029301 	.word	0x00029301
			case 'n':
			case 'r':
			case 't':
				continue;
			case 'u':
				if (!isxdigit(next(lexer))) {
      18:	00029301 	.word	0x00029301
      1c:	00029301 	.word	0x00029301
      20:	00029301 	.word	0x00029301
      24:	00029301 	.word	0x00029301
      28:	00029301 	.word	0x00029301
      2c:	00028e51 	.word	0x00028e51
					goto error;
				}

				if (!isxdigit(next(lexer))) {
      30:	00029301 	.word	0x00029301
      34:	00029301 	.word	0x00029301
      38:	00028e0d 	.word	0x00028e0d
      3c:	00029301 	.word	0x00029301

00000040 <_irq_vector_table>:
      40:	00029431 0001a96d 00029431 00029431     1...m...1...1...
					goto error;
				}

				if (!isxdigit(next(lexer))) {
      50:	00029431 00029431 00029431 00029431     1...1...1...1...
					goto error;
				}

				if (!isxdigit(next(lexer))) {
      60:	00029431 00029431 00029431 00029431     1...1...1...1...
      70:	00029431 00029431 00029431 00029431     1...1...1...1...
		char chr = next(lexer);
      80:	00029431 00029431 00029431 00029431     1...1...1...1...
			switch (next(lexer)) {
      90:	00029431 00029431 00029431 00029431     1...1...1...1...
      a0:	00029431 00029431 00029431 00029431     1...1...1...1...
      b0:	00029431 00029431 00029431 00029431     1...1...1...1...
      c0:	00029431 00029431 00029431 00029431     1...1...1...1...
      d0:	00029431 00029431 00029431              1...1...1...

000000dc <_sw_isr_table>:
      dc:	00000000 00002be5 00000000 0002926d     .....+......m...
      ec:	2000cfe8 0000251f 00000000 0002926d     ... .%......m...
      fc:	00000000 0002926d 00000000 0002926d     ....m.......m...
     10c:	2000d024 000028f3 00000000 0002926d     $.. .(......m...
     11c:	00000000 0002926d 00000000 0002926d     ....m.......m...
     12c:	00000000 0002926d 00000000 0001a98d     ....m...........
     13c:	00000000 0002926d 00000000 0001a9cf     ....m...........
     14c:	00000000 0002926d 00000000 0002926d     ....m.......m...
     15c:	00000000 0002926d 00000000 00002665     ....m.......e&..
     16c:	00000000 0002926d 00000000 0002926d     ....m.......m...
     17c:	00000000 0002926d 00000000 0002926d     ....m.......m...
     18c:	00000000 0002926d 00000000 0002926d     ....m.......m...
     19c:	00000000 0001a9c5 00000000 0002926d     ............m...
     1ac:	00000000 0002926d 00000000 0002926d     ....m.......m...
     1bc:	00000000 0002926d 00000000 0002926d     ....m.......m...
     1cc:	00000000 0002926d 00000000 0002926d     ....m.......m...
     1dc:	00000000 0002926d 00000000 0002926d     ....m.......m...
     1ec:	00000000 0002926d 00000000 0002926d     ....m.......m...
			}
		}

		if (chr == '"') {
			backup(lexer);
			emit(lexer, JSON_TOK_STRING);
     1fc:	00000000 0002926d 00000000 0002926d     ....m.......m...

			next(lexer);
			ignore(lexer);

			return lexer_json;
     20c:	00000000 0002926d                       ....m...

00000214 <_image_text_start>:
	...

00000220 <memchr>:
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3

	mult_row_column(t, s);
	mult_row_column(&t[Nb], s+Nb);
	mult_row_column(&t[2*Nb], s+(2*Nb));
	mult_row_column(&t[3*Nb], s+(3*Nb));
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
	printk("\n");
}

static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22fb      	movs	r2, #251	; 0xfb
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fe99 	bl	3190 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fe93 	bl	3190 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fe90 	bl	3190 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	00030064 	.word	0x00030064
    1488:	0003003c 	.word	0x0003003c
    148c:	0002ff24 	.word	0x0002ff24
    1490:	00030078 	.word	0x00030078
    1494:	00030094 	.word	0x00030094
    1498:	00033e00 	.word	0x00033e00
    149c:	00030058 	.word	0x00030058
    14a0:	00030048 	.word	0x00030048

000014a4 <subscribe_cb>:

static int subscribe_cb(struct mqtt_ctx *ctx, u16_t pkt_id,
		 u8_t items, enum mqtt_qos qos[])
{
    14a4:	b500      	push	{lr}
    14a6:	b083      	sub	sp, #12
	/* Successful subscription to MQTT topic */

	printk("[%s:%d] <%s> packet id: %u\n", __func__, __LINE__, "MQTT_SUBACK", pkt_id);
    14a8:	9100      	str	r1, [sp, #0]
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <subscribe_cb+0x1c>)
    14ac:	f44f 7286 	mov.w	r2, #268	; 0x10c
    14b0:	4904      	ldr	r1, [pc, #16]	; (14c4 <subscribe_cb+0x20>)
    14b2:	4805      	ldr	r0, [pc, #20]	; (14c8 <subscribe_cb+0x24>)
    14b4:	f001 fe6c 	bl	3190 <printk>
	return 0;
}
    14b8:	2000      	movs	r0, #0
    14ba:	b003      	add	sp, #12
    14bc:	f85d fb04 	ldr.w	pc, [sp], #4
    14c0:	00030414 	.word	0x00030414
    14c4:	0002ff30 	.word	0x0002ff30
    14c8:	00030420 	.word	0x00030420

000014cc <publish_rx_cb>:
	return rc;
}

static int publish_rx_cb(struct mqtt_ctx *ctx, struct mqtt_publish_msg *msg,
		  u16_t pkt_id, enum mqtt_packet type)
{
    14cc:	b570      	push	{r4, r5, r6, lr}
    14ce:	b084      	sub	sp, #16

	/* Received a MQTT message published to a topic to which
	 * we have subscribed. In this case, this will mean an RPC
	 * request originated from our thingsboard instance. */

	switch (type) {
    14d0:	2b03      	cmp	r3, #3
    14d2:	d113      	bne.n	14fc <publish_rx_cb+0x30>
	int rc = 0;
    14d4:	2400      	movs	r4, #0
	case MQTT_PUBLISH:
		str = "MQTT_PUBLISH";
    14d6:	4b0b      	ldr	r3, [pc, #44]	; (1504 <publish_rx_cb+0x38>)
	default:
		rc = -EINVAL;
		str = "Invalid or unsupported MQTT packet";
	}

	msg->msg[msg->msg_len] = 0;
    14d8:	690d      	ldr	r5, [r1, #16]
    14da:	8a88      	ldrh	r0, [r1, #20]
    14dc:	2600      	movs	r6, #0
    14de:	542e      	strb	r6, [r5, r0]

	printk("[%s:%d] <%s> packet id: %u\n    topic: %s\n    payload: %s\n",
    14e0:	6908      	ldr	r0, [r1, #16]
    14e2:	9002      	str	r0, [sp, #8]
    14e4:	6889      	ldr	r1, [r1, #8]
    14e6:	9101      	str	r1, [sp, #4]
    14e8:	9200      	str	r2, [sp, #0]
    14ea:	f44f 72a3 	mov.w	r2, #326	; 0x146
    14ee:	4906      	ldr	r1, [pc, #24]	; (1508 <publish_rx_cb+0x3c>)
    14f0:	4806      	ldr	r0, [pc, #24]	; (150c <publish_rx_cb+0x40>)
    14f2:	f001 fe4d 	bl	3190 <printk>
		__func__, __LINE__, str, pkt_id, msg->topic, msg->msg);

	

	return rc;
}
    14f6:	4620      	mov	r0, r4
    14f8:	b004      	add	sp, #16
    14fa:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
    14fc:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid or unsupported MQTT packet";
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <publish_rx_cb+0x44>)
    1502:	e7e9      	b.n	14d8 <publish_rx_cb+0xc>
    1504:	000300a4 	.word	0x000300a4
    1508:	0002ff40 	.word	0x0002ff40
    150c:	000300d8 	.word	0x000300d8
    1510:	000300b4 	.word	0x000300b4

00001514 <malformed_cb>:

static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    1514:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    1516:	460b      	mov	r3, r1
    1518:	f240 124f 	movw	r2, #335	; 0x14f
    151c:	4902      	ldr	r1, [pc, #8]	; (1528 <malformed_cb+0x14>)
    151e:	4803      	ldr	r0, [pc, #12]	; (152c <malformed_cb+0x18>)
    1520:	f001 fe36 	bl	3190 <printk>
    1524:	bd08      	pop	{r3, pc}
    1526:	bf00      	nop
    1528:	0002ff50 	.word	0x0002ff50
    152c:	0002ff8c 	.word	0x0002ff8c

00001530 <disconnect_cb>:
{
    1530:	b510      	push	{r4, lr}
    1532:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    1534:	22d9      	movs	r2, #217	; 0xd9
    1536:	4907      	ldr	r1, [pc, #28]	; (1554 <disconnect_cb+0x24>)
    1538:	4807      	ldr	r0, [pc, #28]	; (1558 <disconnect_cb+0x28>)
    153a:	f001 fe29 	bl	3190 <printk>
	if (client_ctx->disconnect_data) {
    153e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    1542:	b111      	cbz	r1, 154a <disconnect_cb+0x1a>
		printk(" user_data: %s",
    1544:	4805      	ldr	r0, [pc, #20]	; (155c <disconnect_cb+0x2c>)
    1546:	f001 fe23 	bl	3190 <printk>
	printk("\n");
    154a:	4805      	ldr	r0, [pc, #20]	; (1560 <disconnect_cb+0x30>)
    154c:	f001 fe20 	bl	3190 <printk>
    1550:	bd10      	pop	{r4, pc}
    1552:	bf00      	nop
    1554:	0002ff14 	.word	0x0002ff14
    1558:	0002ff74 	.word	0x0002ff74
    155c:	0002ff7c 	.word	0x0002ff7c
    1560:	00033e00 	.word	0x00033e00

00001564 <connect_cb>:
{
    1564:	b510      	push	{r4, lr}
    1566:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    1568:	22c9      	movs	r2, #201	; 0xc9
    156a:	4907      	ldr	r1, [pc, #28]	; (1588 <connect_cb+0x24>)
    156c:	4807      	ldr	r0, [pc, #28]	; (158c <connect_cb+0x28>)
    156e:	f001 fe0f 	bl	3190 <printk>
	if (client_ctx->connect_data) {
    1572:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1576:	b111      	cbz	r1, 157e <connect_cb+0x1a>
		printk(" user_data: %s",
    1578:	4805      	ldr	r0, [pc, #20]	; (1590 <connect_cb+0x2c>)
    157a:	f001 fe09 	bl	3190 <printk>
	printk("\n");
    157e:	4805      	ldr	r0, [pc, #20]	; (1594 <connect_cb+0x30>)
    1580:	f001 fe06 	bl	3190 <printk>
    1584:	bd10      	pop	{r4, pc}
    1586:	bf00      	nop
    1588:	0002ff08 	.word	0x0002ff08
    158c:	0002ff74 	.word	0x0002ff74
    1590:	0002ff7c 	.word	0x0002ff7c
    1594:	00033e00 	.word	0x00033e00

00001598 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos, unsigned char* payload) 
{
    1598:	b510      	push	{r4, lr}
    159a:	460c      	mov	r4, r1
	static char pl[PAYLOAD_SIZE];
	snprintf(pl, sizeof(pl), "%s\n", payload);
    159c:	460b      	mov	r3, r1
    159e:	4a03      	ldr	r2, [pc, #12]	; (15ac <get_message_payload+0x14>)
    15a0:	217c      	movs	r1, #124	; 0x7c
    15a2:	4803      	ldr	r0, [pc, #12]	; (15b0 <get_message_payload+0x18>)
    15a4:	f02a fdf6 	bl	2c194 <snprintf>
	return payload;
}
    15a8:	4620      	mov	r0, r4
    15aa:	bd10      	pop	{r4, pc}
    15ac:	000338b0 	.word	0x000338b0
    15b0:	200001a0 	.word	0x200001a0

000015b4 <rand_string>:
{
    15b4:	b570      	push	{r4, r5, r6, lr}
    15b6:	b092      	sub	sp, #72	; 0x48
    15b8:	4606      	mov	r6, r0
    15ba:	460d      	mov	r5, r1
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.-#'?!";
    15bc:	2246      	movs	r2, #70	; 0x46
    15be:	4911      	ldr	r1, [pc, #68]	; (1604 <rand_string+0x50>)
    15c0:	4668      	mov	r0, sp
    15c2:	f7fe fe7d 	bl	2c0 <memcpy>
    if (size) {
    15c6:	b1cd      	cbz	r5, 15fc <rand_string+0x48>
        --size;
    15c8:	3d01      	subs	r5, #1
        for (size_t n = 0; n < size; n++) {
    15ca:	2400      	movs	r4, #0
    15cc:	e012      	b.n	15f4 <rand_string+0x40>
            int key = rand() % (int) (sizeof charset - 1);
    15ce:	f02a fdaf 	bl	2c130 <rand>
    15d2:	4a0d      	ldr	r2, [pc, #52]	; (1608 <rand_string+0x54>)
    15d4:	fb82 3200 	smull	r3, r2, r2, r0
    15d8:	17c3      	asrs	r3, r0, #31
    15da:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    15de:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    15e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    15e6:	1ac3      	subs	r3, r0, r3
            str[n] = charset[key];
    15e8:	aa12      	add	r2, sp, #72	; 0x48
    15ea:	4413      	add	r3, r2
    15ec:	f813 3c48 	ldrb.w	r3, [r3, #-72]
    15f0:	5533      	strb	r3, [r6, r4]
        for (size_t n = 0; n < size; n++) {
    15f2:	3401      	adds	r4, #1
    15f4:	42ac      	cmp	r4, r5
    15f6:	d3ea      	bcc.n	15ce <rand_string+0x1a>
        str[size] = '\0';
    15f8:	2300      	movs	r3, #0
    15fa:	5573      	strb	r3, [r6, r5]
}
    15fc:	4630      	mov	r0, r6
    15fe:	b012      	add	sp, #72	; 0x48
    1600:	bd70      	pop	{r4, r5, r6, pc}
    1602:	bf00      	nop
    1604:	000301e8 	.word	0x000301e8
    1608:	76b981db 	.word	0x76b981db

0000160c <encrypt_aes_ctr>:
static void encrypt_aes_ctr(unsigned char* nonce, unsigned char* msg_to_send) {
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	b0cd      	sub	sp, #308	; 0x134
    1610:	af04      	add	r7, sp, #16
    1612:	4605      	mov	r5, r0
    1614:	460c      	mov	r4, r1
    size_t nc_offset = 0;
    1616:	2300      	movs	r3, #0
    1618:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    unsigned char stream_block[strlen(msg_to_send)];
    161c:	4608      	mov	r0, r1
    161e:	f7ff f86f 	bl	700 <strlen>
    1622:	3007      	adds	r0, #7
    1624:	f020 0007 	bic.w	r0, r0, #7
    1628:	ebad 0d00 	sub.w	sp, sp, r0
    162c:	ae04      	add	r6, sp, #16
    mbedtls_aes_init( &ctr );
    162e:	1d38      	adds	r0, r7, #4
    1630:	f002 fbad 	bl	3d8e <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &ctr, keys[2], 256 );
    1634:	f44f 7280 	mov.w	r2, #256	; 0x100
    1638:	4b0c      	ldr	r3, [pc, #48]	; (166c <encrypt_aes_ctr+0x60>)
    163a:	6899      	ldr	r1, [r3, #8]
    163c:	1d38      	adds	r0, r7, #4
    163e:	f002 fbb5 	bl	3dac <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ctr( &ctr, strlen(msg_to_send), &nc_offset, nonce, stream_block, msg_to_send, encrypted_msg );
    1642:	4620      	mov	r0, r4
    1644:	f7ff f85c 	bl	700 <strlen>
    1648:	4b09      	ldr	r3, [pc, #36]	; (1670 <encrypt_aes_ctr+0x64>)
    164a:	9302      	str	r3, [sp, #8]
    164c:	9401      	str	r4, [sp, #4]
    164e:	9600      	str	r6, [sp, #0]
    1650:	462b      	mov	r3, r5
    1652:	f507 728e 	add.w	r2, r7, #284	; 0x11c
    1656:	4601      	mov	r1, r0
    1658:	1d38      	adds	r0, r7, #4
    165a:	f003 f859 	bl	4710 <mbedtls_aes_crypt_ctr>
	mbedtls_aes_free( &ctr );
    165e:	1d38      	adds	r0, r7, #4
    1660:	f002 fb9c 	bl	3d9c <mbedtls_aes_free>
}
    1664:	f507 7792 	add.w	r7, r7, #292	; 0x124
    1668:	46bd      	mov	sp, r7
    166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166c:	2000b8f4 	.word	0x2000b8f4
    1670:	2000000c 	.word	0x2000000c

00001674 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos, unsigned char* topic, unsigned char* payload)
{
    1674:	b570      	push	{r4, r5, r6, lr}
    1676:	4604      	mov	r4, r0
    1678:	460e      	mov	r6, r1
    167a:	4615      	mov	r5, r2
	/* MQTT message payload may be anything, we use C strings */
	pub_msg->msg = get_message_payload(qos, payload);
    167c:	4619      	mov	r1, r3
    167e:	4630      	mov	r0, r6
    1680:	f7ff ff8a 	bl	1598 <get_message_payload>
    1684:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1686:	f7ff f83b 	bl	700 <strlen>
    168a:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    168c:	7066      	strb	r6, [r4, #1]
	/* Message's topic */
	pub_msg->topic = topic;
    168e:	60a5      	str	r5, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1690:	4628      	mov	r0, r5
    1692:	f7ff f835 	bl	700 <strlen>
    1696:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1698:	f000 fde0 	bl	225c <sys_rand32_get>
    169c:	80a0      	strh	r0, [r4, #4]
    169e:	bd70      	pop	{r4, r5, r6, pc}

000016a0 <message_thread>:
{
    16a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    16a4:	b0ac      	sub	sp, #176	; 0xb0
    16a6:	af02      	add	r7, sp, #8
	int index = 0;
    16a8:	2600      	movs	r6, #0
    16aa:	e04a      	b.n	1742 <message_thread+0xa2>
			index = 0;
    16ac:	2600      	movs	r6, #0
    16ae:	e070      	b.n	1792 <message_thread+0xf2>
				fragment_offset = 0xff;
    16b0:	23ff      	movs	r3, #255	; 0xff
    16b2:	e01b      	b.n	16ec <message_thread+0x4c>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    16b4:	4b4e      	ldr	r3, [pc, #312]	; (17f0 <message_thread+0x150>)
    16b6:	9301      	str	r3, [sp, #4]
    16b8:	f8cd 9000 	str.w	r9, [sp]
    16bc:	4b4d      	ldr	r3, [pc, #308]	; (17f4 <message_thread+0x154>)
    16be:	229e      	movs	r2, #158	; 0x9e
    16c0:	494d      	ldr	r1, [pc, #308]	; (17f8 <message_thread+0x158>)
    16c2:	484e      	ldr	r0, [pc, #312]	; (17fc <message_thread+0x15c>)
    16c4:	f001 fd64 	bl	3190 <printk>
		 	if (rc < 0) 
    16c8:	f1b9 0f00 	cmp.w	r9, #0
    16cc:	db2e      	blt.n	172c <message_thread+0x8c>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    16ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    16d2:	f029 f8e1 	bl	2a898 <_impl_k_sleep>
		for (i = 1; i <= num_fragments; i++) {
    16d6:	4a4a      	ldr	r2, [pc, #296]	; (1800 <message_thread+0x160>)
    16d8:	6813      	ldr	r3, [r2, #0]
    16da:	3301      	adds	r3, #1
    16dc:	6013      	str	r3, [r2, #0]
    16de:	4b48      	ldr	r3, [pc, #288]	; (1800 <message_thread+0x160>)
    16e0:	681a      	ldr	r2, [r3, #0]
    16e2:	4294      	cmp	r4, r2
    16e4:	db22      	blt.n	172c <message_thread+0x8c>
			char fragment_offset = (char) i;
    16e6:	b2d3      	uxtb	r3, r2
			if (i == num_fragments)
    16e8:	4294      	cmp	r4, r2
    16ea:	d0e1      	beq.n	16b0 <message_thread+0x10>
			snprintf(payload, sizeof(payload), "%c%s", fragment_offset, tmp + ((PAYLOAD_SIZE-2)*(i-1)));
    16ec:	3a01      	subs	r2, #1
    16ee:	217a      	movs	r1, #122	; 0x7a
    16f0:	fb01 5202 	mla	r2, r1, r2, r5
    16f4:	9200      	str	r2, [sp, #0]
    16f6:	4a43      	ldr	r2, [pc, #268]	; (1804 <message_thread+0x164>)
    16f8:	217c      	movs	r1, #124	; 0x7c
    16fa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    16fe:	f02a fd49 	bl	2c194 <snprintf>
			prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0, TOPIC, payload);
    1702:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1834 <message_thread+0x194>
    1706:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    170e:	4a3e      	ldr	r2, [pc, #248]	; (1808 <message_thread+0x168>)
    1710:	2100      	movs	r1, #0
    1712:	4650      	mov	r0, sl
    1714:	f7ff ffae 	bl	1674 <prepare_msg>
		 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    1718:	4651      	mov	r1, sl
    171a:	f109 0048 	add.w	r0, r9, #72	; 0x48
    171e:	f026 f861 	bl	277e4 <mqtt_tx_publish>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    1722:	4681      	mov	r9, r0
    1724:	2800      	cmp	r0, #0
    1726:	d1c5      	bne.n	16b4 <message_thread+0x14>
    1728:	4b38      	ldr	r3, [pc, #224]	; (180c <message_thread+0x16c>)
    172a:	e7c4      	b.n	16b6 <message_thread+0x16>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    172c:	4838      	ldr	r0, [pc, #224]	; (1810 <message_thread+0x170>)
    172e:	f028 fa39 	bl	29ba4 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1732:	4838      	ldr	r0, [pc, #224]	; (1814 <message_thread+0x174>)
    1734:	f029 f9ef 	bl	2ab16 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1738:	f242 7010 	movw	r0, #10000	; 0x2710
    173c:	f029 f8ac 	bl	2a898 <_impl_k_sleep>
    1740:	46c5      	mov	sp, r8
	while(true) {
    1742:	46e8      	mov	r8, sp
    1744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1748:	f029 f8a6 	bl	2a898 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    174c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1750:	482f      	ldr	r0, [pc, #188]	; (1810 <message_thread+0x170>)
    1752:	f028 f9bd 	bl	29ad0 <_impl_k_mutex_lock>
		memset(&encrypted_msg, 0x00, sizeof(encrypted_msg));
    1756:	f44f 72c8 	mov.w	r2, #400	; 0x190
    175a:	2100      	movs	r1, #0
    175c:	482e      	ldr	r0, [pc, #184]	; (1818 <message_thread+0x178>)
    175e:	f02a fc8d 	bl	2c07c <memset>
    	rand_string(nonce_to_be_used, sizeof(nonce_counter));
    1762:	2111      	movs	r1, #17
    1764:	1d38      	adds	r0, r7, #4
    1766:	f7ff ff25 	bl	15b4 <rand_string>
    	strncpy(nonce_counter, nonce_to_be_used, sizeof(nonce_counter));
    176a:	2211      	movs	r2, #17
    176c:	1d39      	adds	r1, r7, #4
    176e:	f107 0018 	add.w	r0, r7, #24
    1772:	f02a fe9f 	bl	2c4b4 <strncpy>
		printk("\nMessage to send: %s\n", msgs_to_send[index]);
    1776:	4b29      	ldr	r3, [pc, #164]	; (181c <message_thread+0x17c>)
    1778:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
    177c:	4621      	mov	r1, r4
    177e:	4828      	ldr	r0, [pc, #160]	; (1820 <message_thread+0x180>)
    1780:	f001 fd06 	bl	3190 <printk>
		encrypt_aes_ctr(nonce_to_be_used, msgs_to_send[index++]);
    1784:	3601      	adds	r6, #1
    1786:	4621      	mov	r1, r4
    1788:	1d38      	adds	r0, r7, #4
    178a:	f7ff ff3f 	bl	160c <encrypt_aes_ctr>
		if (index == NELEMENTS(msgs_to_send))
    178e:	2e06      	cmp	r6, #6
    1790:	d08c      	beq.n	16ac <message_thread+0xc>
		size_t msg_size = strlen(encrypted_msg);
    1792:	4c21      	ldr	r4, [pc, #132]	; (1818 <message_thread+0x178>)
    1794:	4620      	mov	r0, r4
    1796:	f7fe ffb3 	bl	700 <strlen>
		unsigned char tmp[msg_size + sizeof(nonce_counter) + 1];
    179a:	f100 0912 	add.w	r9, r0, #18
    179e:	3019      	adds	r0, #25
    17a0:	f020 0007 	bic.w	r0, r0, #7
    17a4:	ebad 0d00 	sub.w	sp, sp, r0
    17a8:	f10d 0a08 	add.w	sl, sp, #8
    17ac:	4655      	mov	r5, sl
		snprintf(tmp, sizeof(tmp), "%s%s", nonce_counter, encrypted_msg);
    17ae:	9400      	str	r4, [sp, #0]
    17b0:	f107 0318 	add.w	r3, r7, #24
    17b4:	4a1b      	ldr	r2, [pc, #108]	; (1824 <message_thread+0x184>)
    17b6:	4649      	mov	r1, r9
    17b8:	4650      	mov	r0, sl
    17ba:	f02a fceb 	bl	2c194 <snprintf>
	 	printk("\nEncrypted message with nonce: %s\n\n", tmp);
    17be:	4651      	mov	r1, sl
    17c0:	4819      	ldr	r0, [pc, #100]	; (1828 <message_thread+0x188>)
    17c2:	f001 fce5 	bl	3190 <printk>
		int num_fragments = sizeof(tmp) / (PAYLOAD_SIZE-2);
    17c6:	4c19      	ldr	r4, [pc, #100]	; (182c <message_thread+0x18c>)
    17c8:	fba4 3409 	umull	r3, r4, r4, r9
    17cc:	0964      	lsrs	r4, r4, #5
		if (sizeof(tmp) % PAYLOAD_SIZE != 0)
    17ce:	ea4f 0399 	mov.w	r3, r9, lsr #2
    17d2:	4a17      	ldr	r2, [pc, #92]	; (1830 <message_thread+0x190>)
    17d4:	fba2 2303 	umull	r2, r3, r2, r3
    17d8:	089b      	lsrs	r3, r3, #2
    17da:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    17de:	009a      	lsls	r2, r3, #2
    17e0:	4591      	cmp	r9, r2
    17e2:	d000      	beq.n	17e6 <message_thread+0x146>
			num_fragments++;
    17e4:	3401      	adds	r4, #1
		for (i = 1; i <= num_fragments; i++) {
    17e6:	2201      	movs	r2, #1
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <message_thread+0x160>)
    17ea:	601a      	str	r2, [r3, #0]
    17ec:	e777      	b.n	16de <message_thread+0x3e>
    17ee:	bf00      	nop
    17f0:	0002ffa8 	.word	0x0002ffa8
    17f4:	0002fffc 	.word	0x0002fffc
    17f8:	0002fee8 	.word	0x0002fee8
    17fc:	0003000c 	.word	0x0003000c
    1800:	20002964 	.word	0x20002964
    1804:	0002fff4 	.word	0x0002fff4
    1808:	00030174 	.word	0x00030174
    180c:	0002ffa4 	.word	0x0002ffa4
    1810:	2000d16c 	.word	0x2000d16c
    1814:	2000d0f8 	.word	0x2000d0f8
    1818:	2000000c 	.word	0x2000000c
    181c:	00030024 	.word	0x00030024
    1820:	0002ffb0 	.word	0x0002ffb0
    1824:	0002ffc8 	.word	0x0002ffc8
    1828:	0002ffd0 	.word	0x0002ffd0
    182c:	4325c53f 	.word	0x4325c53f
    1830:	21084211 	.word	0x21084211
    1834:	2000021c 	.word	0x2000021c

00001838 <register_device>:
static void register_device() {
    1838:	b530      	push	{r4, r5, lr}
    183a:	b0c7      	sub	sp, #284	; 0x11c
	mbedtls_sha1(PASSWORD, sizeof(PASSWORD), pwdhash);
    183c:	aa41      	add	r2, sp, #260	; 0x104
    183e:	2106      	movs	r1, #6
    1840:	481c      	ldr	r0, [pc, #112]	; (18b4 <register_device+0x7c>)
    1842:	f004 f93b 	bl	5abc <mbedtls_sha1>
	unsigned int olen = PAYLOAD_SIZE;
    1846:	247c      	movs	r4, #124	; 0x7c
    1848:	9402      	str	r4, [sp, #8]
	mbedtls_base64_encode( b64pwdhash, PAYLOAD_SIZE, &olen, pwdhash, sizeof(pwdhash) );
    184a:	ad22      	add	r5, sp, #136	; 0x88
    184c:	2314      	movs	r3, #20
    184e:	9300      	str	r3, [sp, #0]
    1850:	ab41      	add	r3, sp, #260	; 0x104
    1852:	aa02      	add	r2, sp, #8
    1854:	4621      	mov	r1, r4
    1856:	4628      	mov	r0, r5
    1858:	f002 ff8c 	bl	4774 <mbedtls_base64_encode>
	snprintf(register_payload, PAYLOAD_SIZE, "{\"u\":\"%s\",\"p\":\"%s\"}", USERNAME, b64pwdhash);
    185c:	9500      	str	r5, [sp, #0]
    185e:	4b16      	ldr	r3, [pc, #88]	; (18b8 <register_device+0x80>)
    1860:	4a16      	ldr	r2, [pc, #88]	; (18bc <register_device+0x84>)
    1862:	4621      	mov	r1, r4
    1864:	a803      	add	r0, sp, #12
    1866:	f02a fc95 	bl	2c194 <snprintf>
	printk("Register payload: %s\n", register_payload);
    186a:	a903      	add	r1, sp, #12
    186c:	4814      	ldr	r0, [pc, #80]	; (18c0 <register_device+0x88>)
    186e:	f001 fc8f 	bl	3190 <printk>
	prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0, REGISTER_TOPIC, register_payload);
    1872:	4c14      	ldr	r4, [pc, #80]	; (18c4 <register_device+0x8c>)
    1874:	f104 0530 	add.w	r5, r4, #48	; 0x30
    1878:	ab03      	add	r3, sp, #12
    187a:	4a13      	ldr	r2, [pc, #76]	; (18c8 <register_device+0x90>)
    187c:	2100      	movs	r1, #0
    187e:	4628      	mov	r0, r5
    1880:	f7ff fef8 	bl	1674 <prepare_msg>
 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    1884:	4629      	mov	r1, r5
    1886:	f104 0048 	add.w	r0, r4, #72	; 0x48
    188a:	f025 ffab 	bl	277e4 <mqtt_tx_publish>
 	PRINT_RESULT("mqtt_tx_publish", rc);
    188e:	4603      	mov	r3, r0
    1890:	b168      	cbz	r0, 18ae <register_device+0x76>
    1892:	4a0e      	ldr	r2, [pc, #56]	; (18cc <register_device+0x94>)
    1894:	9201      	str	r2, [sp, #4]
    1896:	9300      	str	r3, [sp, #0]
    1898:	4b0d      	ldr	r3, [pc, #52]	; (18d0 <register_device+0x98>)
    189a:	22b6      	movs	r2, #182	; 0xb6
    189c:	490d      	ldr	r1, [pc, #52]	; (18d4 <register_device+0x9c>)
    189e:	480e      	ldr	r0, [pc, #56]	; (18d8 <register_device+0xa0>)
    18a0:	f001 fc76 	bl	3190 <printk>
	registered = true;
    18a4:	2201      	movs	r2, #1
    18a6:	4b0d      	ldr	r3, [pc, #52]	; (18dc <register_device+0xa4>)
    18a8:	701a      	strb	r2, [r3, #0]
}
    18aa:	b047      	add	sp, #284	; 0x11c
    18ac:	bd30      	pop	{r4, r5, pc}
 	PRINT_RESULT("mqtt_tx_publish", rc);
    18ae:	4a0c      	ldr	r2, [pc, #48]	; (18e0 <register_device+0xa8>)
    18b0:	e7f0      	b.n	1894 <register_device+0x5c>
    18b2:	bf00      	nop
    18b4:	00030230 	.word	0x00030230
    18b8:	00030238 	.word	0x00030238
    18bc:	00030240 	.word	0x00030240
    18c0:	00030254 	.word	0x00030254
    18c4:	2000021c 	.word	0x2000021c
    18c8:	0003026c 	.word	0x0003026c
    18cc:	0002ffa8 	.word	0x0002ffa8
    18d0:	0002fffc 	.word	0x0002fffc
    18d4:	0002fef8 	.word	0x0002fef8
    18d8:	0003000c 	.word	0x0003000c
    18dc:	2000031c 	.word	0x2000031c
    18e0:	0002ffa4 	.word	0x0002ffa4

000018e4 <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    18e4:	b530      	push	{r4, r5, lr}
    18e6:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    18e8:	4c81      	ldr	r4, [pc, #516]	; (1af0 <publisher_thread+0x20c>)
    18ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    18ee:	2100      	movs	r1, #0
    18f0:	4620      	mov	r0, r4
    18f2:	f02a fbc3 	bl	2c07c <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    18f6:	4b7f      	ldr	r3, [pc, #508]	; (1af4 <publisher_thread+0x210>)
    18f8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    18fc:	4b7e      	ldr	r3, [pc, #504]	; (1af8 <publisher_thread+0x214>)
    18fe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    1902:	4b7e      	ldr	r3, [pc, #504]	; (1afc <publisher_thread+0x218>)
    1904:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	pub_ctx.mqtt_ctx.publish_tx = publish_tx_cb;
	pub_ctx.mqtt_ctx.publish_rx = publish_rx_cb;
    1908:	4b7d      	ldr	r3, [pc, #500]	; (1b00 <publisher_thread+0x21c>)
    190a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	pub_ctx.mqtt_ctx.subscribe = subscribe_cb;
    190e:	4b7d      	ldr	r3, [pc, #500]	; (1b04 <publisher_thread+0x220>)
    1910:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1914:	f242 7310 	movw	r3, #10000	; 0x2710
    1918:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    191c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1920:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    1924:	4b78      	ldr	r3, [pc, #480]	; (1b08 <publisher_thread+0x224>)
    1926:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    192a:	f240 735b 	movw	r3, #1883	; 0x75b
    192e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    1932:	4b76      	ldr	r3, [pc, #472]	; (1b0c <publisher_thread+0x228>)
    1934:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    1938:	4875      	ldr	r0, [pc, #468]	; (1b10 <publisher_thread+0x22c>)
    193a:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    193c:	f7fe fee0 	bl	700 <strlen>
    1940:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    1942:	7823      	ldrb	r3, [r4, #0]
    1944:	f043 0301 	orr.w	r3, r3, #1
    1948:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    194a:	4b72      	ldr	r3, [pc, #456]	; (1b14 <publisher_thread+0x230>)
    194c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    1950:	4b71      	ldr	r3, [pc, #452]	; (1b18 <publisher_thread+0x234>)
    1952:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1956:	4b71      	ldr	r3, [pc, #452]	; (1b1c <publisher_thread+0x238>)
    1958:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    195c:	e0a4      	b.n	1aa8 <publisher_thread+0x1c4>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER_SUBSCRIBER);
		PRINT_RESULT("mqtt_init", rc);
    195e:	4b70      	ldr	r3, [pc, #448]	; (1b20 <publisher_thread+0x23c>)
    1960:	e0b1      	b.n	1ac6 <publisher_thread+0x1e2>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    1962:	4b6f      	ldr	r3, [pc, #444]	; (1b20 <publisher_thread+0x23c>)
    1964:	9301      	str	r3, [sp, #4]
    1966:	9400      	str	r4, [sp, #0]
    1968:	4b6e      	ldr	r3, [pc, #440]	; (1b24 <publisher_thread+0x240>)
    196a:	f240 12a5 	movw	r2, #421	; 0x1a5
    196e:	496e      	ldr	r1, [pc, #440]	; (1b28 <publisher_thread+0x244>)
    1970:	486e      	ldr	r0, [pc, #440]	; (1b2c <publisher_thread+0x248>)
    1972:	f001 fc0d 	bl	3190 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    1976:	b15c      	cbz	r4, 1990 <publisher_thread+0xac>
    1978:	1c6b      	adds	r3, r5, #1
    197a:	2d63      	cmp	r5, #99	; 0x63
    197c:	dc08      	bgt.n	1990 <publisher_thread+0xac>
    197e:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    1980:	486b      	ldr	r0, [pc, #428]	; (1b30 <publisher_thread+0x24c>)
    1982:	f026 f8b9 	bl	27af8 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1986:	4604      	mov	r4, r0
    1988:	2800      	cmp	r0, #0
    198a:	d1ea      	bne.n	1962 <publisher_thread+0x7e>
    198c:	4b69      	ldr	r3, [pc, #420]	; (1b34 <publisher_thread+0x250>)
    198e:	e7e9      	b.n	1964 <publisher_thread+0x80>

		if (rc != 0) {
    1990:	b1cc      	cbz	r4, 19c6 <publisher_thread+0xe2>
    1992:	e0a4      	b.n	1ade <publisher_thread+0x1fa>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1994:	4b62      	ldr	r3, [pc, #392]	; (1b20 <publisher_thread+0x23c>)
    1996:	9301      	str	r3, [sp, #4]
    1998:	9500      	str	r5, [sp, #0]
    199a:	4b67      	ldr	r3, [pc, #412]	; (1b38 <publisher_thread+0x254>)
    199c:	f240 12af 	movw	r2, #431	; 0x1af
    19a0:	4961      	ldr	r1, [pc, #388]	; (1b28 <publisher_thread+0x244>)
    19a2:	4862      	ldr	r0, [pc, #392]	; (1b2c <publisher_thread+0x248>)
    19a4:	f001 fbf4 	bl	3190 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    19a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    19ac:	f028 ff74 	bl	2a898 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    19b0:	b99d      	cbnz	r5, 19da <publisher_thread+0xf6>
    19b2:	1c63      	adds	r3, r4, #1
    19b4:	2c13      	cmp	r4, #19
    19b6:	dc10      	bgt.n	19da <publisher_thread+0xf6>
    19b8:	4a4d      	ldr	r2, [pc, #308]	; (1af0 <publisher_thread+0x20c>)
    19ba:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    19be:	f012 0f02 	tst.w	r2, #2
    19c2:	d10a      	bne.n	19da <publisher_thread+0xf6>
    19c4:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    19c6:	484a      	ldr	r0, [pc, #296]	; (1af0 <publisher_thread+0x20c>)
    19c8:	4601      	mov	r1, r0
    19ca:	3048      	adds	r0, #72	; 0x48
    19cc:	f025 fe7e 	bl	276cc <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    19d0:	4605      	mov	r5, r0
    19d2:	2800      	cmp	r0, #0
    19d4:	d1de      	bne.n	1994 <publisher_thread+0xb0>
    19d6:	4b57      	ldr	r3, [pc, #348]	; (1b34 <publisher_thread+0x250>)
    19d8:	e7dd      	b.n	1996 <publisher_thread+0xb2>

		if (!pub_ctx.mqtt_ctx.connected) {
    19da:	4b45      	ldr	r3, [pc, #276]	; (1af0 <publisher_thread+0x20c>)
    19dc:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    19e0:	f013 0f02 	tst.w	r3, #2
    19e4:	d01c      	beq.n	1a20 <publisher_thread+0x13c>
			mqtt_close(&pub_ctx.mqtt_ctx);
			goto exit_pub;
		} 

		rc = mqtt_tx_subscribe(&pub_ctx.mqtt_ctx, sys_rand32_get(), 1,
    19e6:	f000 fc39 	bl	225c <sys_rand32_get>
    19ea:	4b54      	ldr	r3, [pc, #336]	; (1b3c <publisher_thread+0x258>)
    19ec:	9300      	str	r3, [sp, #0]
    19ee:	4b54      	ldr	r3, [pc, #336]	; (1b40 <publisher_thread+0x25c>)
    19f0:	2201      	movs	r2, #1
    19f2:	b281      	uxth	r1, r0
    19f4:	484e      	ldr	r0, [pc, #312]	; (1b30 <publisher_thread+0x24c>)
    19f6:	f025 ff31 	bl	2785c <mqtt_tx_subscribe>
		USERNAME_TOPIC, QOS);
		PRINT_RESULT("mqtt_tx_subscribe", rc);
    19fa:	4604      	mov	r4, r0
    19fc:	b9a0      	cbnz	r0, 1a28 <publisher_thread+0x144>
    19fe:	4b4d      	ldr	r3, [pc, #308]	; (1b34 <publisher_thread+0x250>)
    1a00:	9301      	str	r3, [sp, #4]
    1a02:	9400      	str	r4, [sp, #0]
    1a04:	4b4f      	ldr	r3, [pc, #316]	; (1b44 <publisher_thread+0x260>)
    1a06:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
    1a0a:	4947      	ldr	r1, [pc, #284]	; (1b28 <publisher_thread+0x244>)
    1a0c:	4847      	ldr	r0, [pc, #284]	; (1b2c <publisher_thread+0x248>)
    1a0e:	f001 fbbf 	bl	3190 <printk>
		if (rc == 0 && !registered) {
    1a12:	b9a4      	cbnz	r4, 1a3e <publisher_thread+0x15a>
    1a14:	4b4c      	ldr	r3, [pc, #304]	; (1b48 <publisher_thread+0x264>)
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	b98b      	cbnz	r3, 1a3e <publisher_thread+0x15a>
			register_device();
    1a1a:	f7ff ff0d 	bl	1838 <register_device>
    1a1e:	e00e      	b.n	1a3e <publisher_thread+0x15a>
			mqtt_close(&pub_ctx.mqtt_ctx);
    1a20:	4843      	ldr	r0, [pc, #268]	; (1b30 <publisher_thread+0x24c>)
    1a22:	f026 f8af 	bl	27b84 <mqtt_close>
			goto exit_pub;
    1a26:	e05a      	b.n	1ade <publisher_thread+0x1fa>
		PRINT_RESULT("mqtt_tx_subscribe", rc);
    1a28:	4b3d      	ldr	r3, [pc, #244]	; (1b20 <publisher_thread+0x23c>)
    1a2a:	e7e9      	b.n	1a00 <publisher_thread+0x11c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1a2c:	4847      	ldr	r0, [pc, #284]	; (1b4c <publisher_thread+0x268>)
    1a2e:	f028 f8b9 	bl	29ba4 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1a32:	f644 6120 	movw	r1, #20000	; 0x4e20
    1a36:	4846      	ldr	r0, [pc, #280]	; (1b50 <publisher_thread+0x26c>)
    1a38:	f029 f880 	bl	2ab3c <_impl_k_sem_take>

			if (data_changed) {
				//rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				//PRINT_RESULT("mqtt_tx_publish", rc);
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    1a3c:	b960      	cbnz	r0, 1a58 <publisher_thread+0x174>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1a3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a42:	4842      	ldr	r0, [pc, #264]	; (1b4c <publisher_thread+0x268>)
    1a44:	f028 f844 	bl	29ad0 <_impl_k_mutex_lock>
			if (message_changed) {
    1a48:	4b42      	ldr	r3, [pc, #264]	; (1b54 <publisher_thread+0x270>)
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d0ed      	beq.n	1a2c <publisher_thread+0x148>
				message_changed=false;
    1a50:	2200      	movs	r2, #0
    1a52:	4b40      	ldr	r3, [pc, #256]	; (1b54 <publisher_thread+0x270>)
    1a54:	701a      	strb	r2, [r3, #0]
    1a56:	e7e9      	b.n	1a2c <publisher_thread+0x148>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    1a58:	4835      	ldr	r0, [pc, #212]	; (1b30 <publisher_thread+0x24c>)
    1a5a:	f025 fe79 	bl	27750 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1a5e:	4603      	mov	r3, r0
    1a60:	2800      	cmp	r0, #0
    1a62:	d141      	bne.n	1ae8 <publisher_thread+0x204>
    1a64:	4a33      	ldr	r2, [pc, #204]	; (1b34 <publisher_thread+0x250>)
    1a66:	9201      	str	r2, [sp, #4]
    1a68:	9300      	str	r3, [sp, #0]
    1a6a:	4b3b      	ldr	r3, [pc, #236]	; (1b58 <publisher_thread+0x274>)
    1a6c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    1a70:	492d      	ldr	r1, [pc, #180]	; (1b28 <publisher_thread+0x244>)
    1a72:	482e      	ldr	r0, [pc, #184]	; (1b2c <publisher_thread+0x248>)
    1a74:	f001 fb8c 	bl	3190 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a7c:	f028 ff0c 	bl	2a898 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1a80:	482b      	ldr	r0, [pc, #172]	; (1b30 <publisher_thread+0x24c>)
    1a82:	f026 f87f 	bl	27b84 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    1a86:	4603      	mov	r3, r0
    1a88:	2800      	cmp	r0, #0
    1a8a:	d12f      	bne.n	1aec <publisher_thread+0x208>
    1a8c:	4a29      	ldr	r2, [pc, #164]	; (1b34 <publisher_thread+0x250>)
    1a8e:	9201      	str	r2, [sp, #4]
    1a90:	9300      	str	r3, [sp, #0]
    1a92:	4b32      	ldr	r3, [pc, #200]	; (1b5c <publisher_thread+0x278>)
    1a94:	f240 12d7 	movw	r2, #471	; 0x1d7
    1a98:	4923      	ldr	r1, [pc, #140]	; (1b28 <publisher_thread+0x244>)
    1a9a:	4824      	ldr	r0, [pc, #144]	; (1b2c <publisher_thread+0x248>)
    1a9c:	f001 fb78 	bl	3190 <printk>
    1aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1aa4:	f028 fef8 	bl	2a898 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1aac:	4828      	ldr	r0, [pc, #160]	; (1b50 <publisher_thread+0x26c>)
    1aae:	f029 f845 	bl	2ab3c <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1ab2:	b9a0      	cbnz	r0, 1ade <publisher_thread+0x1fa>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER_SUBSCRIBER);
    1ab4:	2100      	movs	r1, #0
    1ab6:	481e      	ldr	r0, [pc, #120]	; (1b30 <publisher_thread+0x24c>)
    1ab8:	f026 f852 	bl	27b60 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    1abc:	4605      	mov	r5, r0
    1abe:	2800      	cmp	r0, #0
    1ac0:	f47f af4d 	bne.w	195e <publisher_thread+0x7a>
    1ac4:	4b1b      	ldr	r3, [pc, #108]	; (1b34 <publisher_thread+0x250>)
    1ac6:	9301      	str	r3, [sp, #4]
    1ac8:	9500      	str	r5, [sp, #0]
    1aca:	4b25      	ldr	r3, [pc, #148]	; (1b60 <publisher_thread+0x27c>)
    1acc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
    1ad0:	4915      	ldr	r1, [pc, #84]	; (1b28 <publisher_thread+0x244>)
    1ad2:	4816      	ldr	r0, [pc, #88]	; (1b2c <publisher_thread+0x248>)
    1ad4:	f001 fb5c 	bl	3190 <printk>
		if (rc != 0) {
    1ad8:	2d00      	cmp	r5, #0
    1ada:	f43f af51 	beq.w	1980 <publisher_thread+0x9c>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    1ade:	4821      	ldr	r0, [pc, #132]	; (1b64 <publisher_thread+0x280>)
    1ae0:	f001 fb56 	bl	3190 <printk>
}
    1ae4:	b003      	add	sp, #12
    1ae6:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1ae8:	4a0d      	ldr	r2, [pc, #52]	; (1b20 <publisher_thread+0x23c>)
    1aea:	e7bc      	b.n	1a66 <publisher_thread+0x182>
		PRINT_RESULT("mqtt_close", rc);
    1aec:	4a0c      	ldr	r2, [pc, #48]	; (1b20 <publisher_thread+0x23c>)
    1aee:	e7ce      	b.n	1a8e <publisher_thread+0x1aa>
    1af0:	2000021c 	.word	0x2000021c
    1af4:	00001565 	.word	0x00001565
    1af8:	00001531 	.word	0x00001531
    1afc:	00001515 	.word	0x00001515
    1b00:	000014cd 	.word	0x000014cd
    1b04:	000014a5 	.word	0x000014a5
    1b08:	00030114 	.word	0x00030114
    1b0c:	00001435 	.word	0x00001435
    1b10:	00030130 	.word	0x00030130
    1b14:	00030148 	.word	0x00030148
    1b18:	00030154 	.word	0x00030154
    1b1c:	00030164 	.word	0x00030164
    1b20:	0002ffa8 	.word	0x0002ffa8
    1b24:	00030178 	.word	0x00030178
    1b28:	0002ff60 	.word	0x0002ff60
    1b2c:	0003000c 	.word	0x0003000c
    1b30:	20000264 	.word	0x20000264
    1b34:	0002ffa4 	.word	0x0002ffa4
    1b38:	00030188 	.word	0x00030188
    1b3c:	0002fee4 	.word	0x0002fee4
    1b40:	2000b8f0 	.word	0x2000b8f0
    1b44:	00030198 	.word	0x00030198
    1b48:	2000031c 	.word	0x2000031c
    1b4c:	2000d16c 	.word	0x2000d16c
    1b50:	2000d0f8 	.word	0x2000d0f8
    1b54:	2000019c 	.word	0x2000019c
    1b58:	000301ac 	.word	0x000301ac
    1b5c:	000301c0 	.word	0x000301c0
    1b60:	0003016c 	.word	0x0003016c
    1b64:	000301cc 	.word	0x000301cc

00001b68 <start_publisher>:


static void start_publisher()
{
    1b68:	b500      	push	{lr}
    1b6a:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1b6c:	2300      	movs	r3, #0
    1b6e:	9305      	str	r3, [sp, #20]
    1b70:	9304      	str	r3, [sp, #16]
    1b72:	2205      	movs	r2, #5
    1b74:	9203      	str	r2, [sp, #12]
    1b76:	9302      	str	r3, [sp, #8]
    1b78:	9301      	str	r3, [sp, #4]
    1b7a:	9300      	str	r3, [sp, #0]
    1b7c:	4b04      	ldr	r3, [pc, #16]	; (1b90 <start_publisher+0x28>)
    1b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1b82:	4904      	ldr	r1, [pc, #16]	; (1b94 <start_publisher+0x2c>)
    1b84:	4804      	ldr	r0, [pc, #16]	; (1b98 <start_publisher+0x30>)
    1b86:	f029 fa45 	bl	2b014 <_impl_k_thread_create>
	k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    1b8a:	b007      	add	sp, #28
    1b8c:	f85d fb04 	ldr.w	pc, [sp], #4
    1b90:	000018e5 	.word	0x000018e5
    1b94:	200034a0 	.word	0x200034a0
    1b98:	200029d0 	.word	0x200029d0

00001b9c <start_message_thread>:
{
    1b9c:	b500      	push	{lr}
    1b9e:	b087      	sub	sp, #28
    1ba0:	2300      	movs	r3, #0
    1ba2:	9305      	str	r3, [sp, #20]
    1ba4:	9304      	str	r3, [sp, #16]
    1ba6:	2205      	movs	r2, #5
    1ba8:	9203      	str	r2, [sp, #12]
    1baa:	9302      	str	r3, [sp, #8]
    1bac:	9301      	str	r3, [sp, #4]
    1bae:	9300      	str	r3, [sp, #0]
    1bb0:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <start_message_thread+0x28>)
    1bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1bb6:	4904      	ldr	r1, [pc, #16]	; (1bc8 <start_message_thread+0x2c>)
    1bb8:	4804      	ldr	r0, [pc, #16]	; (1bcc <start_message_thread+0x30>)
    1bba:	f029 fa2b 	bl	2b014 <_impl_k_thread_create>
}
    1bbe:	b007      	add	sp, #28
    1bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    1bc4:	000016a1 	.word	0x000016a1
    1bc8:	20002ca0 	.word	0x20002ca0
    1bcc:	20002968 	.word	0x20002968

00001bd0 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1bd0:	b508      	push	{r3, lr}
	start_publisher();
    1bd2:	f7ff ffc9 	bl	1b68 <start_publisher>
	start_message_thread();
    1bd6:	f7ff ffe1 	bl	1b9c <start_message_thread>
    1bda:	bd08      	pop	{r3, pc}

00001bdc <main>:
}


void main(void)
{
    1bdc:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    1bde:	f01a fed9 	bl	1c994 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1be2:	f3bf 8f5b 	dmb	ish
    1be6:	68c3      	ldr	r3, [r0, #12]
    1be8:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1bec:	f013 0f01 	tst.w	r3, #1
    1bf0:	d000      	beq.n	1bf4 <main+0x18>
    1bf2:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1bf4:	4803      	ldr	r0, [pc, #12]	; (1c04 <main+0x28>)
    1bf6:	4b04      	ldr	r3, [pc, #16]	; (1c08 <main+0x2c>)
    1bf8:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1bfa:	4b04      	ldr	r3, [pc, #16]	; (1c0c <main+0x30>)
    1bfc:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    1bfe:	f022 fd07 	bl	24610 <net_mgmt_add_event_callback>
	}
#else
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	return;
    1c02:	e7f6      	b.n	1bf2 <main+0x16>
    1c04:	20000000 	.word	0x20000000
    1c08:	00001bd1 	.word	0x00001bd1
    1c0c:	d0010002 	.word	0xd0010002

00001c10 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1c10:	4b08      	ldr	r3, [pc, #32]	; (1c34 <_sbrk+0x24>)
    1c12:	681a      	ldr	r2, [r3, #0]
    1c14:	4b08      	ldr	r3, [pc, #32]	; (1c38 <_sbrk+0x28>)
    1c16:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1c18:	4410      	add	r0, r2
    1c1a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1c1e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1c22:	4298      	cmp	r0, r3
    1c24:	d203      	bcs.n	1c2e <_sbrk+0x1e>
		heap_sz += count;
    1c26:	4b03      	ldr	r3, [pc, #12]	; (1c34 <_sbrk+0x24>)
    1c28:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    1c2a:	4608      	mov	r0, r1
    1c2c:	4770      	bx	lr
		return (void *)-1;
    1c2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1c32:	e7fa      	b.n	1c2a <_sbrk+0x1a>
    1c34:	20000320 	.word	0x20000320
    1c38:	2000d554 	.word	0x2000d554

00001c3c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1c3c:	b510      	push	{r4, lr}
    1c3e:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1c40:	280a      	cmp	r0, #10
    1c42:	d007      	beq.n	1c54 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1c44:	4b07      	ldr	r3, [pc, #28]	; (1c64 <console_out+0x28>)
    1c46:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1c48:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1c4a:	685b      	ldr	r3, [r3, #4]
    1c4c:	b2e1      	uxtb	r1, r4
    1c4e:	4798      	blx	r3

	return c;
}
    1c50:	4620      	mov	r0, r4
    1c52:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1c54:	4b03      	ldr	r3, [pc, #12]	; (1c64 <console_out+0x28>)
    1c56:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c58:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c5a:	685b      	ldr	r3, [r3, #4]
    1c5c:	210d      	movs	r1, #13
    1c5e:	4798      	blx	r3
    1c60:	e7f0      	b.n	1c44 <console_out+0x8>
    1c62:	bf00      	nop
    1c64:	20000344 	.word	0x20000344

00001c68 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1c68:	b510      	push	{r4, lr}
    1c6a:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1c6c:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1c6e:	691b      	ldr	r3, [r3, #16]
    1c70:	b11b      	cbz	r3, 1c7a <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1c72:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1c74:	2800      	cmp	r0, #0
    1c76:	db02      	blt.n	1c7e <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1c78:	bd10      	pop	{r4, pc}
	}

	return 0;
    1c7a:	2000      	movs	r0, #0
    1c7c:	e7fa      	b.n	1c74 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1c7e:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c82:	b123      	cbz	r3, 1c8e <read_uart+0x26>
		api->irq_rx_disable(dev);
    1c84:	4620      	mov	r0, r4
    1c86:	4798      	blx	r3
		return -EIO;
    1c88:	f06f 0004 	mvn.w	r0, #4
    1c8c:	bd10      	pop	{r4, pc}
    1c8e:	f06f 0004 	mvn.w	r0, #4
    1c92:	e7f1      	b.n	1c78 <read_uart+0x10>

00001c94 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1c94:	b500      	push	{lr}
    1c96:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1c98:	4b19      	ldr	r3, [pc, #100]	; (1d00 <console_input_init+0x6c>)
    1c9a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c9c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ca0:	b103      	cbz	r3, 1ca4 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1ca2:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1ca4:	4b16      	ldr	r3, [pc, #88]	; (1d00 <console_input_init+0x6c>)
    1ca6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ca8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1caa:	699b      	ldr	r3, [r3, #24]
    1cac:	b103      	cbz	r3, 1cb0 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1cae:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1cb0:	4b13      	ldr	r3, [pc, #76]	; (1d00 <console_input_init+0x6c>)
    1cb2:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1cb4:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1cb6:	b18b      	cbz	r3, 1cdc <console_input_init+0x48>
    1cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1cba:	b17b      	cbz	r3, 1cdc <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1cbc:	4911      	ldr	r1, [pc, #68]	; (1d04 <console_input_init+0x70>)
    1cbe:	4798      	blx	r3
    1cc0:	e00c      	b.n	1cdc <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1cc2:	2201      	movs	r2, #1
    1cc4:	f10d 0107 	add.w	r1, sp, #7
    1cc8:	4798      	blx	r3
    1cca:	e007      	b.n	1cdc <console_input_init+0x48>
	return 0;
    1ccc:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1cce:	b168      	cbz	r0, 1cec <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1cd0:	4b0b      	ldr	r3, [pc, #44]	; (1d00 <console_input_init+0x6c>)
    1cd2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1cd4:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1cd6:	691b      	ldr	r3, [r3, #16]
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d1f2      	bne.n	1cc2 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1cdc:	4b08      	ldr	r3, [pc, #32]	; (1d00 <console_input_init+0x6c>)
    1cde:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ce0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d0f1      	beq.n	1ccc <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1ce8:	4798      	blx	r3
    1cea:	e7f0      	b.n	1cce <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1cec:	4b04      	ldr	r3, [pc, #16]	; (1d00 <console_input_init+0x6c>)
    1cee:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1cf0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1cf2:	6a1b      	ldr	r3, [r3, #32]
    1cf4:	b103      	cbz	r3, 1cf8 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1cf6:	4798      	blx	r3
}
    1cf8:	b003      	add	sp, #12
    1cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    1cfe:	bf00      	nop
    1d00:	20000344 	.word	0x20000344
    1d04:	00002001 	.word	0x00002001

00001d08 <del_char>:
{
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	4606      	mov	r6, r0
    1d0c:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1d0e:	4b17      	ldr	r3, [pc, #92]	; (1d6c <del_char+0x64>)
    1d10:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d12:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d14:	685b      	ldr	r3, [r3, #4]
    1d16:	2108      	movs	r1, #8
    1d18:	4798      	blx	r3
	if (end == 0) {
    1d1a:	b11d      	cbz	r5, 1d24 <del_char+0x1c>
	printk("\x1b[s");
    1d1c:	4814      	ldr	r0, [pc, #80]	; (1d70 <del_char+0x68>)
    1d1e:	f001 fa37 	bl	3190 <printk>
    1d22:	e014      	b.n	1d4e <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1d24:	4c11      	ldr	r4, [pc, #68]	; (1d6c <del_char+0x64>)
    1d26:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d28:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d2a:	685b      	ldr	r3, [r3, #4]
    1d2c:	2120      	movs	r1, #32
    1d2e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1d30:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d32:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d34:	685b      	ldr	r3, [r3, #4]
    1d36:	2108      	movs	r1, #8
    1d38:	4798      	blx	r3
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1d3c:	7871      	ldrb	r1, [r6, #1]
    1d3e:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1d42:	4b0a      	ldr	r3, [pc, #40]	; (1d6c <del_char+0x64>)
    1d44:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d46:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d48:	685b      	ldr	r3, [r3, #4]
    1d4a:	4798      	blx	r3
	while (end-- > 0) {
    1d4c:	4625      	mov	r5, r4
    1d4e:	1e6b      	subs	r3, r5, #1
    1d50:	b2dc      	uxtb	r4, r3
    1d52:	2d00      	cmp	r5, #0
    1d54:	d1f2      	bne.n	1d3c <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <del_char+0x64>)
    1d58:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d5a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d5c:	685b      	ldr	r3, [r3, #4]
    1d5e:	2120      	movs	r1, #32
    1d60:	4798      	blx	r3
	printk("\x1b[u");
    1d62:	4804      	ldr	r0, [pc, #16]	; (1d74 <del_char+0x6c>)
    1d64:	f001 fa14 	bl	3190 <printk>
    1d68:	bd70      	pop	{r4, r5, r6, pc}
    1d6a:	bf00      	nop
    1d6c:	20000344 	.word	0x20000344
    1d70:	0003043c 	.word	0x0003043c
    1d74:	00030440 	.word	0x00030440

00001d78 <insert_char>:
{
    1d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d7c:	4605      	mov	r5, r0
    1d7e:	4688      	mov	r8, r1
    1d80:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1d82:	4b14      	ldr	r3, [pc, #80]	; (1dd4 <insert_char+0x5c>)
    1d84:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d86:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1d88:	685b      	ldr	r3, [r3, #4]
    1d8a:	4798      	blx	r3
	if (end == 0) {
    1d8c:	b91c      	cbnz	r4, 1d96 <insert_char+0x1e>
		*pos = c;
    1d8e:	f885 8000 	strb.w	r8, [r5]
		return;
    1d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1d96:	462e      	mov	r6, r5
    1d98:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1d9c:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1da0:	480d      	ldr	r0, [pc, #52]	; (1dd8 <insert_char+0x60>)
    1da2:	f001 f9f5 	bl	3190 <printk>
    1da6:	e00c      	b.n	1dc2 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1da8:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <insert_char+0x5c>)
    1daa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dac:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1dae:	685b      	ldr	r3, [r3, #4]
    1db0:	4639      	mov	r1, r7
    1db2:	4798      	blx	r3
		c = *pos;
    1db4:	4633      	mov	r3, r6
    1db6:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1dba:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1dbc:	4617      	mov	r7, r2
	while (end-- > 0) {
    1dbe:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1dc0:	461e      	mov	r6, r3
	while (end-- > 0) {
    1dc2:	1e63      	subs	r3, r4, #1
    1dc4:	b2dd      	uxtb	r5, r3
    1dc6:	2c00      	cmp	r4, #0
    1dc8:	d1ee      	bne.n	1da8 <insert_char+0x30>
	printk("\x1b[u");
    1dca:	4804      	ldr	r0, [pc, #16]	; (1ddc <insert_char+0x64>)
    1dcc:	f001 f9e0 	bl	3190 <printk>
    1dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1dd4:	20000344 	.word	0x20000344
    1dd8:	0003043c 	.word	0x0003043c
    1ddc:	00030440 	.word	0x00030440

00001de0 <handle_ansi>:
{
    1de0:	b538      	push	{r3, r4, r5, lr}
    1de2:	4604      	mov	r4, r0
    1de4:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1de6:	4b7f      	ldr	r3, [pc, #508]	; (1fe4 <handle_ansi+0x204>)
    1de8:	f3bf 8f5b 	dmb	ish
    1dec:	e853 2f00 	ldrex	r2, [r3]
    1df0:	f022 0104 	bic.w	r1, r2, #4
    1df4:	e843 1000 	strex	r0, r1, [r3]
    1df8:	2800      	cmp	r0, #0
    1dfa:	d1f7      	bne.n	1dec <handle_ansi+0xc>
    1dfc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1e00:	f012 0f04 	tst.w	r2, #4
    1e04:	d03c      	beq.n	1e80 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1e06:	f029 fdd1 	bl	2b9ac <__locale_ctype_ptr>
    1e0a:	4420      	add	r0, r4
    1e0c:	7843      	ldrb	r3, [r0, #1]
    1e0e:	f013 0f04 	tst.w	r3, #4
    1e12:	d121      	bne.n	1e58 <handle_ansi+0x78>
			ansi_val = 1;
    1e14:	2201      	movs	r2, #1
    1e16:	4b74      	ldr	r3, [pc, #464]	; (1fe8 <handle_ansi+0x208>)
    1e18:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1e1a:	2c46      	cmp	r4, #70	; 0x46
    1e1c:	f000 80d0 	beq.w	1fc0 <handle_ansi+0x1e0>
    1e20:	f200 8086 	bhi.w	1f30 <handle_ansi+0x150>
    1e24:	2c43      	cmp	r4, #67	; 0x43
    1e26:	f000 80a7 	beq.w	1f78 <handle_ansi+0x198>
    1e2a:	2c44      	cmp	r4, #68	; 0x44
    1e2c:	d106      	bne.n	1e3c <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1e2e:	4b6f      	ldr	r3, [pc, #444]	; (1fec <handle_ansi+0x20c>)
    1e30:	781b      	ldrb	r3, [r3, #0]
    1e32:	4a6d      	ldr	r2, [pc, #436]	; (1fe8 <handle_ansi+0x208>)
    1e34:	6811      	ldr	r1, [r2, #0]
    1e36:	428b      	cmp	r3, r1
    1e38:	f080 8092 	bcs.w	1f60 <handle_ansi+0x180>
    1e3c:	4b69      	ldr	r3, [pc, #420]	; (1fe4 <handle_ansi+0x204>)
    1e3e:	f3bf 8f5b 	dmb	ish
    1e42:	e853 2f00 	ldrex	r2, [r3]
    1e46:	f022 0202 	bic.w	r2, r2, #2
    1e4a:	e843 2100 	strex	r1, r2, [r3]
    1e4e:	2900      	cmp	r1, #0
    1e50:	d1f7      	bne.n	1e42 <handle_ansi+0x62>
    1e52:	f3bf 8f5b 	dmb	ish
    1e56:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e58:	4b62      	ldr	r3, [pc, #392]	; (1fe4 <handle_ansi+0x204>)
    1e5a:	f3bf 8f5b 	dmb	ish
    1e5e:	e853 2f00 	ldrex	r2, [r3]
    1e62:	f042 0208 	orr.w	r2, r2, #8
    1e66:	e843 2100 	strex	r1, r2, [r3]
    1e6a:	2900      	cmp	r1, #0
    1e6c:	d1f7      	bne.n	1e5e <handle_ansi+0x7e>
    1e6e:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1e72:	3c30      	subs	r4, #48	; 0x30
    1e74:	4b5c      	ldr	r3, [pc, #368]	; (1fe8 <handle_ansi+0x208>)
    1e76:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1e78:	2200      	movs	r2, #0
    1e7a:	4b5d      	ldr	r3, [pc, #372]	; (1ff0 <handle_ansi+0x210>)
    1e7c:	601a      	str	r2, [r3, #0]
		return;
    1e7e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e80:	f3bf 8f5b 	dmb	ish
    1e84:	4b57      	ldr	r3, [pc, #348]	; (1fe4 <handle_ansi+0x204>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1e8c:	f013 0f08 	tst.w	r3, #8
    1e90:	d0c3      	beq.n	1e1a <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1e92:	f029 fd8b 	bl	2b9ac <__locale_ctype_ptr>
    1e96:	4420      	add	r0, r4
    1e98:	7843      	ldrb	r3, [r0, #1]
    1e9a:	f013 0f04 	tst.w	r3, #4
    1e9e:	d11b      	bne.n	1ed8 <handle_ansi+0xf8>
		if (byte == ';' &&
    1ea0:	2c3b      	cmp	r4, #59	; 0x3b
    1ea2:	d034      	beq.n	1f0e <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ea4:	4b4f      	ldr	r3, [pc, #316]	; (1fe4 <handle_ansi+0x204>)
    1ea6:	f3bf 8f5b 	dmb	ish
    1eaa:	e853 2f00 	ldrex	r2, [r3]
    1eae:	f022 0208 	bic.w	r2, r2, #8
    1eb2:	e843 2100 	strex	r1, r2, [r3]
    1eb6:	2900      	cmp	r1, #0
    1eb8:	d1f7      	bne.n	1eaa <handle_ansi+0xca>
    1eba:	f3bf 8f5b 	dmb	ish
    1ebe:	f3bf 8f5b 	dmb	ish
    1ec2:	e853 2f00 	ldrex	r2, [r3]
    1ec6:	f022 0210 	bic.w	r2, r2, #16
    1eca:	e843 2100 	strex	r1, r2, [r3]
    1ece:	2900      	cmp	r1, #0
    1ed0:	d1f7      	bne.n	1ec2 <handle_ansi+0xe2>
    1ed2:	f3bf 8f5b 	dmb	ish
    1ed6:	e7a0      	b.n	1e1a <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ed8:	f3bf 8f5b 	dmb	ish
    1edc:	4b41      	ldr	r3, [pc, #260]	; (1fe4 <handle_ansi+0x204>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1ee4:	f013 0f10 	tst.w	r3, #16
    1ee8:	d008      	beq.n	1efc <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1eea:	4941      	ldr	r1, [pc, #260]	; (1ff0 <handle_ansi+0x210>)
    1eec:	680a      	ldr	r2, [r1, #0]
    1eee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1ef2:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1ef4:	4423      	add	r3, r4
    1ef6:	3b30      	subs	r3, #48	; 0x30
    1ef8:	600b      	str	r3, [r1, #0]
    1efa:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1efc:	493a      	ldr	r1, [pc, #232]	; (1fe8 <handle_ansi+0x208>)
    1efe:	680a      	ldr	r2, [r1, #0]
    1f00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1f04:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1f06:	4423      	add	r3, r4
    1f08:	3b30      	subs	r3, #48	; 0x30
    1f0a:	600b      	str	r3, [r1, #0]
    1f0c:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f0e:	4b35      	ldr	r3, [pc, #212]	; (1fe4 <handle_ansi+0x204>)
    1f10:	f3bf 8f5b 	dmb	ish
    1f14:	e853 2f00 	ldrex	r2, [r3]
    1f18:	f042 0110 	orr.w	r1, r2, #16
    1f1c:	e843 1000 	strex	r0, r1, [r3]
    1f20:	2800      	cmp	r0, #0
    1f22:	d1f7      	bne.n	1f14 <handle_ansi+0x134>
    1f24:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1f28:	f012 0f10 	tst.w	r2, #16
    1f2c:	d1ba      	bne.n	1ea4 <handle_ansi+0xc4>
    1f2e:	e792      	b.n	1e56 <handle_ansi+0x76>
	switch (byte) {
    1f30:	2c48      	cmp	r4, #72	; 0x48
    1f32:	d034      	beq.n	1f9e <handle_ansi+0x1be>
    1f34:	2c7e      	cmp	r4, #126	; 0x7e
    1f36:	d181      	bne.n	1e3c <handle_ansi+0x5c>
		if (!end) {
    1f38:	4b2e      	ldr	r3, [pc, #184]	; (1ff4 <handle_ansi+0x214>)
    1f3a:	781b      	ldrb	r3, [r3, #0]
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	f43f af7d 	beq.w	1e3c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1f42:	2101      	movs	r1, #1
    1f44:	482c      	ldr	r0, [pc, #176]	; (1ff8 <handle_ansi+0x218>)
    1f46:	f001 f923 	bl	3190 <printk>
		del_char(&line[cur], --end);
    1f4a:	4b28      	ldr	r3, [pc, #160]	; (1fec <handle_ansi+0x20c>)
    1f4c:	7818      	ldrb	r0, [r3, #0]
    1f4e:	4b29      	ldr	r3, [pc, #164]	; (1ff4 <handle_ansi+0x214>)
    1f50:	7819      	ldrb	r1, [r3, #0]
    1f52:	3901      	subs	r1, #1
    1f54:	b2c9      	uxtb	r1, r1
    1f56:	7019      	strb	r1, [r3, #0]
    1f58:	4428      	add	r0, r5
    1f5a:	f7ff fed5 	bl	1d08 <del_char>
		break;
    1f5e:	e76d      	b.n	1e3c <handle_ansi+0x5c>
		end += ansi_val;
    1f60:	b2c8      	uxtb	r0, r1
    1f62:	4c24      	ldr	r4, [pc, #144]	; (1ff4 <handle_ansi+0x214>)
    1f64:	7822      	ldrb	r2, [r4, #0]
    1f66:	4402      	add	r2, r0
    1f68:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1f6a:	1a1b      	subs	r3, r3, r0
    1f6c:	4a1f      	ldr	r2, [pc, #124]	; (1fec <handle_ansi+0x20c>)
    1f6e:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1f70:	4822      	ldr	r0, [pc, #136]	; (1ffc <handle_ansi+0x21c>)
    1f72:	f001 f90d 	bl	3190 <printk>
    1f76:	e761      	b.n	1e3c <handle_ansi+0x5c>
		if (ansi_val > end) {
    1f78:	4b1e      	ldr	r3, [pc, #120]	; (1ff4 <handle_ansi+0x214>)
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	4a1a      	ldr	r2, [pc, #104]	; (1fe8 <handle_ansi+0x208>)
    1f7e:	6811      	ldr	r1, [r2, #0]
    1f80:	428b      	cmp	r3, r1
    1f82:	f4ff af5b 	bcc.w	1e3c <handle_ansi+0x5c>
		end -= ansi_val;
    1f86:	b2ca      	uxtb	r2, r1
    1f88:	1a9b      	subs	r3, r3, r2
    1f8a:	481a      	ldr	r0, [pc, #104]	; (1ff4 <handle_ansi+0x214>)
    1f8c:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1f8e:	4b17      	ldr	r3, [pc, #92]	; (1fec <handle_ansi+0x20c>)
    1f90:	7818      	ldrb	r0, [r3, #0]
    1f92:	4402      	add	r2, r0
    1f94:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1f96:	4818      	ldr	r0, [pc, #96]	; (1ff8 <handle_ansi+0x218>)
    1f98:	f001 f8fa 	bl	3190 <printk>
    1f9c:	e74e      	b.n	1e3c <handle_ansi+0x5c>
		if (!cur) {
    1f9e:	4b13      	ldr	r3, [pc, #76]	; (1fec <handle_ansi+0x20c>)
    1fa0:	7819      	ldrb	r1, [r3, #0]
    1fa2:	2900      	cmp	r1, #0
    1fa4:	f43f af4a 	beq.w	1e3c <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1fa8:	4814      	ldr	r0, [pc, #80]	; (1ffc <handle_ansi+0x21c>)
    1faa:	f001 f8f1 	bl	3190 <printk>
		end += cur;
    1fae:	4911      	ldr	r1, [pc, #68]	; (1ff4 <handle_ansi+0x214>)
    1fb0:	4a0e      	ldr	r2, [pc, #56]	; (1fec <handle_ansi+0x20c>)
    1fb2:	780b      	ldrb	r3, [r1, #0]
    1fb4:	7810      	ldrb	r0, [r2, #0]
    1fb6:	4403      	add	r3, r0
    1fb8:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1fba:	2300      	movs	r3, #0
    1fbc:	7013      	strb	r3, [r2, #0]
		break;
    1fbe:	e73d      	b.n	1e3c <handle_ansi+0x5c>
		if (!end) {
    1fc0:	4b0c      	ldr	r3, [pc, #48]	; (1ff4 <handle_ansi+0x214>)
    1fc2:	7819      	ldrb	r1, [r3, #0]
    1fc4:	2900      	cmp	r1, #0
    1fc6:	f43f af39 	beq.w	1e3c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1fca:	480b      	ldr	r0, [pc, #44]	; (1ff8 <handle_ansi+0x218>)
    1fcc:	f001 f8e0 	bl	3190 <printk>
		cur += end;
    1fd0:	4906      	ldr	r1, [pc, #24]	; (1fec <handle_ansi+0x20c>)
    1fd2:	4a08      	ldr	r2, [pc, #32]	; (1ff4 <handle_ansi+0x214>)
    1fd4:	780b      	ldrb	r3, [r1, #0]
    1fd6:	7810      	ldrb	r0, [r2, #0]
    1fd8:	4403      	add	r3, r0
    1fda:	700b      	strb	r3, [r1, #0]
		end = 0;
    1fdc:	2300      	movs	r3, #0
    1fde:	7013      	strb	r3, [r2, #0]
		break;
    1fe0:	e72c      	b.n	1e3c <handle_ansi+0x5c>
    1fe2:	bf00      	nop
    1fe4:	2000033c 	.word	0x2000033c
    1fe8:	20000324 	.word	0x20000324
    1fec:	20000338 	.word	0x20000338
    1ff0:	20000328 	.word	0x20000328
    1ff4:	20000339 	.word	0x20000339
    1ff8:	0003044c 	.word	0x0003044c
    1ffc:	00030444 	.word	0x00030444

00002000 <uart_console_isr>:
{
    2000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2004:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    2006:	e001      	b.n	200c <uart_console_isr+0xc>
	return 0;
    2008:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    200a:	b9d8      	cbnz	r0, 2044 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    200c:	4b78      	ldr	r3, [pc, #480]	; (21f0 <uart_console_isr+0x1f0>)
    200e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    2010:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    2012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2014:	2b00      	cmp	r3, #0
    2016:	f000 80e7 	beq.w	21e8 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    201a:	4798      	blx	r3
    201c:	2800      	cmp	r0, #0
    201e:	d037      	beq.n	2090 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    2020:	4b73      	ldr	r3, [pc, #460]	; (21f0 <uart_console_isr+0x1f0>)
    2022:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    2024:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    2026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2028:	2b00      	cmp	r3, #0
    202a:	f000 80df 	beq.w	21ec <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    202e:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    2030:	2800      	cmp	r0, #0
    2032:	d02d      	beq.n	2090 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    2034:	4b6e      	ldr	r3, [pc, #440]	; (21f0 <uart_console_isr+0x1f0>)
    2036:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    2038:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    203c:	2b00      	cmp	r3, #0
    203e:	d0e3      	beq.n	2008 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    2040:	4798      	blx	r3
    2042:	e7e2      	b.n	200a <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    2044:	2201      	movs	r2, #1
    2046:	f10d 0107 	add.w	r1, sp, #7
    204a:	4b69      	ldr	r3, [pc, #420]	; (21f0 <uart_console_isr+0x1f0>)
    204c:	6818      	ldr	r0, [r3, #0]
    204e:	f7ff fe0b 	bl	1c68 <read_uart>
		if (rx < 0) {
    2052:	2800      	cmp	r0, #0
    2054:	db1c      	blt.n	2090 <uart_console_isr+0x90>
		if (!cmd) {
    2056:	4b67      	ldr	r3, [pc, #412]	; (21f4 <uart_console_isr+0x1f4>)
    2058:	681b      	ldr	r3, [r3, #0]
    205a:	b183      	cbz	r3, 207e <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    205c:	f3bf 8f5b 	dmb	ish
    2060:	4b65      	ldr	r3, [pc, #404]	; (21f8 <uart_console_isr+0x1f8>)
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    2068:	f013 0f02 	tst.w	r3, #2
    206c:	d013      	beq.n	2096 <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    206e:	4b61      	ldr	r3, [pc, #388]	; (21f4 <uart_console_isr+0x1f4>)
    2070:	6819      	ldr	r1, [r3, #0]
    2072:	3104      	adds	r1, #4
    2074:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2078:	f7ff feb2 	bl	1de0 <handle_ansi>
			continue;
    207c:	e7c6      	b.n	200c <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    207e:	2100      	movs	r1, #0
    2080:	4b5e      	ldr	r3, [pc, #376]	; (21fc <uart_console_isr+0x1fc>)
    2082:	6818      	ldr	r0, [r3, #0]
    2084:	f028 f9d8 	bl	2a438 <k_queue_get>
    2088:	4b5a      	ldr	r3, [pc, #360]	; (21f4 <uart_console_isr+0x1f4>)
    208a:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    208c:	2800      	cmp	r0, #0
    208e:	d1e5      	bne.n	205c <uart_console_isr+0x5c>
}
    2090:	b002      	add	sp, #8
    2092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2096:	4b58      	ldr	r3, [pc, #352]	; (21f8 <uart_console_isr+0x1f8>)
    2098:	f3bf 8f5b 	dmb	ish
    209c:	e853 2f00 	ldrex	r2, [r3]
    20a0:	f022 0101 	bic.w	r1, r2, #1
    20a4:	e843 1000 	strex	r0, r1, [r3]
    20a8:	2800      	cmp	r0, #0
    20aa:	d1f7      	bne.n	209c <uart_console_isr+0x9c>
    20ac:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    20b0:	f012 0f01 	tst.w	r2, #1
    20b4:	d01d      	beq.n	20f2 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    20b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    20ba:	2b5b      	cmp	r3, #91	; 0x5b
    20bc:	d1a6      	bne.n	200c <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    20be:	4b4e      	ldr	r3, [pc, #312]	; (21f8 <uart_console_isr+0x1f8>)
    20c0:	f3bf 8f5b 	dmb	ish
    20c4:	e853 2f00 	ldrex	r2, [r3]
    20c8:	f042 0202 	orr.w	r2, r2, #2
    20cc:	e843 2100 	strex	r1, r2, [r3]
    20d0:	2900      	cmp	r1, #0
    20d2:	d1f7      	bne.n	20c4 <uart_console_isr+0xc4>
    20d4:	f3bf 8f5b 	dmb	ish
    20d8:	f3bf 8f5b 	dmb	ish
    20dc:	e853 2f00 	ldrex	r2, [r3]
    20e0:	f042 0204 	orr.w	r2, r2, #4
    20e4:	e843 2100 	strex	r1, r2, [r3]
    20e8:	2900      	cmp	r1, #0
    20ea:	d1f7      	bne.n	20dc <uart_console_isr+0xdc>
    20ec:	f3bf 8f5b 	dmb	ish
			continue;
    20f0:	e78c      	b.n	200c <uart_console_isr+0xc>
		if (!isprint(byte)) {
    20f2:	f029 fc5b 	bl	2b9ac <__locale_ctype_ptr>
    20f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    20fa:	4408      	add	r0, r1
    20fc:	7843      	ldrb	r3, [r0, #1]
    20fe:	f013 0f97 	tst.w	r3, #151	; 0x97
    2102:	d15f      	bne.n	21c4 <uart_console_isr+0x1c4>
			switch (byte) {
    2104:	290d      	cmp	r1, #13
    2106:	d03c      	beq.n	2182 <uart_console_isr+0x182>
    2108:	d916      	bls.n	2138 <uart_console_isr+0x138>
    210a:	291b      	cmp	r1, #27
    210c:	d02b      	beq.n	2166 <uart_console_isr+0x166>
    210e:	297f      	cmp	r1, #127	; 0x7f
    2110:	f47f af7c 	bne.w	200c <uart_console_isr+0xc>
				if (cur > 0) {
    2114:	4b3a      	ldr	r3, [pc, #232]	; (2200 <uart_console_isr+0x200>)
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	2b00      	cmp	r3, #0
    211a:	f43f af77 	beq.w	200c <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    211e:	4a35      	ldr	r2, [pc, #212]	; (21f4 <uart_console_isr+0x1f4>)
    2120:	6812      	ldr	r2, [r2, #0]
    2122:	3b01      	subs	r3, #1
    2124:	b2db      	uxtb	r3, r3
    2126:	4936      	ldr	r1, [pc, #216]	; (2200 <uart_console_isr+0x200>)
    2128:	700b      	strb	r3, [r1, #0]
    212a:	4413      	add	r3, r2
    212c:	4a35      	ldr	r2, [pc, #212]	; (2204 <uart_console_isr+0x204>)
    212e:	7811      	ldrb	r1, [r2, #0]
    2130:	1d18      	adds	r0, r3, #4
    2132:	f7ff fde9 	bl	1d08 <del_char>
    2136:	e769      	b.n	200c <uart_console_isr+0xc>
			switch (byte) {
    2138:	2909      	cmp	r1, #9
    213a:	f47f af67 	bne.w	200c <uart_console_isr+0xc>
				if (completion_cb && !end) {
    213e:	4b32      	ldr	r3, [pc, #200]	; (2208 <uart_console_isr+0x208>)
    2140:	681b      	ldr	r3, [r3, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	f43f af62 	beq.w	200c <uart_console_isr+0xc>
    2148:	4a2e      	ldr	r2, [pc, #184]	; (2204 <uart_console_isr+0x204>)
    214a:	7812      	ldrb	r2, [r2, #0]
    214c:	2a00      	cmp	r2, #0
    214e:	f47f af5d 	bne.w	200c <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    2152:	4a28      	ldr	r2, [pc, #160]	; (21f4 <uart_console_isr+0x1f4>)
    2154:	6810      	ldr	r0, [r2, #0]
    2156:	4c2a      	ldr	r4, [pc, #168]	; (2200 <uart_console_isr+0x200>)
    2158:	7821      	ldrb	r1, [r4, #0]
    215a:	3004      	adds	r0, #4
    215c:	4798      	blx	r3
    215e:	7823      	ldrb	r3, [r4, #0]
    2160:	4403      	add	r3, r0
    2162:	7023      	strb	r3, [r4, #0]
			continue;
    2164:	e752      	b.n	200c <uart_console_isr+0xc>
    2166:	4b24      	ldr	r3, [pc, #144]	; (21f8 <uart_console_isr+0x1f8>)
    2168:	f3bf 8f5b 	dmb	ish
    216c:	e853 2f00 	ldrex	r2, [r3]
    2170:	f042 0201 	orr.w	r2, r2, #1
    2174:	e843 2100 	strex	r1, r2, [r3]
    2178:	2900      	cmp	r1, #0
    217a:	d1f7      	bne.n	216c <uart_console_isr+0x16c>
    217c:	f3bf 8f5b 	dmb	ish
    2180:	e744      	b.n	200c <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    2182:	4d1c      	ldr	r5, [pc, #112]	; (21f4 <uart_console_isr+0x1f4>)
    2184:	682b      	ldr	r3, [r5, #0]
    2186:	4f1e      	ldr	r7, [pc, #120]	; (2200 <uart_console_isr+0x200>)
    2188:	783a      	ldrb	r2, [r7, #0]
    218a:	4e1e      	ldr	r6, [pc, #120]	; (2204 <uart_console_isr+0x204>)
    218c:	7831      	ldrb	r1, [r6, #0]
    218e:	440a      	add	r2, r1
    2190:	4413      	add	r3, r2
    2192:	2400      	movs	r4, #0
    2194:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    2196:	f8df 8058 	ldr.w	r8, [pc, #88]	; 21f0 <uart_console_isr+0x1f0>
    219a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    219e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    21a0:	685b      	ldr	r3, [r3, #4]
    21a2:	210d      	movs	r1, #13
    21a4:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    21a6:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    21aa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    21ac:	685b      	ldr	r3, [r3, #4]
    21ae:	210a      	movs	r1, #10
    21b0:	4798      	blx	r3
				cur = 0;
    21b2:	703c      	strb	r4, [r7, #0]
				end = 0;
    21b4:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    21b6:	6829      	ldr	r1, [r5, #0]
    21b8:	4b14      	ldr	r3, [pc, #80]	; (220c <uart_console_isr+0x20c>)
    21ba:	6818      	ldr	r0, [r3, #0]
    21bc:	f028 f914 	bl	2a3e8 <k_queue_append>
				cmd = NULL;
    21c0:	602c      	str	r4, [r5, #0]
				break;
    21c2:	e723      	b.n	200c <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    21c4:	4b0e      	ldr	r3, [pc, #56]	; (2200 <uart_console_isr+0x200>)
    21c6:	781b      	ldrb	r3, [r3, #0]
    21c8:	4a0e      	ldr	r2, [pc, #56]	; (2204 <uart_console_isr+0x204>)
    21ca:	7812      	ldrb	r2, [r2, #0]
    21cc:	18d0      	adds	r0, r2, r3
    21ce:	287e      	cmp	r0, #126	; 0x7e
    21d0:	f63f af1c 	bhi.w	200c <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    21d4:	4807      	ldr	r0, [pc, #28]	; (21f4 <uart_console_isr+0x1f4>)
    21d6:	6800      	ldr	r0, [r0, #0]
    21d8:	1c5d      	adds	r5, r3, #1
    21da:	4c09      	ldr	r4, [pc, #36]	; (2200 <uart_console_isr+0x200>)
    21dc:	7025      	strb	r5, [r4, #0]
    21de:	4418      	add	r0, r3
    21e0:	3004      	adds	r0, #4
    21e2:	f7ff fdc9 	bl	1d78 <insert_char>
    21e6:	e711      	b.n	200c <uart_console_isr+0xc>
	return 0;
    21e8:	2000      	movs	r0, #0
    21ea:	e717      	b.n	201c <uart_console_isr+0x1c>
	return 0;
    21ec:	2000      	movs	r0, #0
    21ee:	e71f      	b.n	2030 <uart_console_isr+0x30>
    21f0:	20000344 	.word	0x20000344
    21f4:	20000330 	.word	0x20000330
    21f8:	2000033c 	.word	0x2000033c
    21fc:	2000032c 	.word	0x2000032c
    2200:	20000338 	.word	0x20000338
    2204:	20000339 	.word	0x20000339
    2208:	20000334 	.word	0x20000334
    220c:	20000340 	.word	0x20000340

00002210 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    2210:	b508      	push	{r3, lr}
	avail_queue = avail;
    2212:	4b04      	ldr	r3, [pc, #16]	; (2224 <uart_register_input+0x14>)
    2214:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    2216:	4b04      	ldr	r3, [pc, #16]	; (2228 <uart_register_input+0x18>)
    2218:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    221a:	4b04      	ldr	r3, [pc, #16]	; (222c <uart_register_input+0x1c>)
    221c:	601a      	str	r2, [r3, #0]

	console_input_init();
    221e:	f7ff fd39 	bl	1c94 <console_input_init>
    2222:	bd08      	pop	{r3, pc}
    2224:	2000032c 	.word	0x2000032c
    2228:	20000340 	.word	0x20000340
    222c:	20000334 	.word	0x20000334

00002230 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    2230:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2232:	4802      	ldr	r0, [pc, #8]	; (223c <uart_console_hook_install+0xc>)
    2234:	f000 fe70 	bl	2f18 <__printk_hook_install>
    2238:	bd08      	pop	{r3, pc}
    223a:	bf00      	nop
    223c:	00001c3d 	.word	0x00001c3d

00002240 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2240:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2242:	4804      	ldr	r0, [pc, #16]	; (2254 <uart_console_init+0x14>)
    2244:	f027 f9a0 	bl	29588 <device_get_binding>
    2248:	4b03      	ldr	r3, [pc, #12]	; (2258 <uart_console_init+0x18>)
    224a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    224c:	f7ff fff0 	bl	2230 <uart_console_hook_install>

	return 0;
}
    2250:	2000      	movs	r0, #0
    2252:	bd08      	pop	{r3, pc}
    2254:	00030454 	.word	0x00030454
    2258:	20000344 	.word	0x20000344

0000225c <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    225c:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    225e:	f000 fa73 	bl	2748 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2262:	4b08      	ldr	r3, [pc, #32]	; (2284 <sys_rand32_get+0x28>)
    2264:	f3bf 8f5b 	dmb	ish
    2268:	e853 2f00 	ldrex	r2, [r3]
    226c:	4906      	ldr	r1, [pc, #24]	; (2288 <sys_rand32_get+0x2c>)
    226e:	1851      	adds	r1, r2, r1
    2270:	e843 1e00 	strex	lr, r1, [r3]
    2274:	f1be 0f00 	cmp.w	lr, #0
    2278:	d1f6      	bne.n	2268 <sys_rand32_get+0xc>
    227a:	f3bf 8f5b 	dmb	ish
}
    227e:	4410      	add	r0, r2
    2280:	bd08      	pop	{r3, pc}
    2282:	bf00      	nop
    2284:	20000348 	.word	0x20000348
    2288:	3b9aca0d 	.word	0x3b9aca0d

0000228c <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    228c:	6803      	ldr	r3, [r0, #0]
    228e:	689b      	ldr	r3, [r3, #8]
    2290:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    2292:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2296:	d05b      	beq.n	2350 <baudrate_set+0xc4>
    2298:	d910      	bls.n	22bc <baudrate_set+0x30>
    229a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    229e:	d05e      	beq.n	235e <baudrate_set+0xd2>
    22a0:	d833      	bhi.n	230a <baudrate_set+0x7e>
    22a2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    22a6:	d055      	beq.n	2354 <baudrate_set+0xc8>
    22a8:	d929      	bls.n	22fe <baudrate_set+0x72>
    22aa:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    22ae:	d054      	beq.n	235a <baudrate_set+0xce>
    22b0:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    22b4:	d11b      	bne.n	22ee <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    22b6:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    22ba:	e03b      	b.n	2334 <baudrate_set+0xa8>
	switch (baudrate) {
    22bc:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    22c0:	d03f      	beq.n	2342 <baudrate_set+0xb6>
    22c2:	d90b      	bls.n	22dc <baudrate_set+0x50>
    22c4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    22c8:	d03e      	beq.n	2348 <baudrate_set+0xbc>
    22ca:	d913      	bls.n	22f4 <baudrate_set+0x68>
    22cc:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    22d0:	d03c      	beq.n	234c <baudrate_set+0xc0>
    22d2:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    22d6:	d10a      	bne.n	22ee <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    22d8:	4a27      	ldr	r2, [pc, #156]	; (2378 <baudrate_set+0xec>)
		break;
    22da:	e02b      	b.n	2334 <baudrate_set+0xa8>
	switch (baudrate) {
    22dc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    22e0:	d046      	beq.n	2370 <baudrate_set+0xe4>
    22e2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    22e6:	d029      	beq.n	233c <baudrate_set+0xb0>
    22e8:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    22ec:	d020      	beq.n	2330 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    22ee:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    22f2:	4770      	bx	lr
	switch (baudrate) {
    22f4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    22f8:	d1f9      	bne.n	22ee <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    22fa:	4a20      	ldr	r2, [pc, #128]	; (237c <baudrate_set+0xf0>)
		break;
    22fc:	e01a      	b.n	2334 <baudrate_set+0xa8>
	switch (baudrate) {
    22fe:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2302:	d1f4      	bne.n	22ee <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    2304:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    2308:	e014      	b.n	2334 <baudrate_set+0xa8>
	switch (baudrate) {
    230a:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    230e:	d029      	beq.n	2364 <baudrate_set+0xd8>
    2310:	d908      	bls.n	2324 <baudrate_set+0x98>
    2312:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2316:	d028      	beq.n	236a <baudrate_set+0xde>
    2318:	4a19      	ldr	r2, [pc, #100]	; (2380 <baudrate_set+0xf4>)
    231a:	4291      	cmp	r1, r2
    231c:	d1e7      	bne.n	22ee <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    2322:	e007      	b.n	2334 <baudrate_set+0xa8>
	switch (baudrate) {
    2324:	4a17      	ldr	r2, [pc, #92]	; (2384 <baudrate_set+0xf8>)
    2326:	4291      	cmp	r1, r2
    2328:	d1e1      	bne.n	22ee <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    232a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    232e:	e001      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2330:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2334:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    2338:	2000      	movs	r0, #0
    233a:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    233c:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2340:	e7f8      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    2342:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    2346:	e7f5      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2348:	4a0f      	ldr	r2, [pc, #60]	; (2388 <baudrate_set+0xfc>)
		break;
    234a:	e7f3      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    234c:	4a0f      	ldr	r2, [pc, #60]	; (238c <baudrate_set+0x100>)
		break;
    234e:	e7f1      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2350:	4a0f      	ldr	r2, [pc, #60]	; (2390 <baudrate_set+0x104>)
		break;
    2352:	e7ef      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    2354:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    2358:	e7ec      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    235a:	4a0e      	ldr	r2, [pc, #56]	; (2394 <baudrate_set+0x108>)
		break;
    235c:	e7ea      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    235e:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    2362:	e7e7      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    2364:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    2368:	e7e4      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    236a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    236e:	e7e1      	b.n	2334 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2370:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    2374:	e7de      	b.n	2334 <baudrate_set+0xa8>
    2376:	bf00      	nop
    2378:	004ea000 	.word	0x004ea000
    237c:	0013b000 	.word	0x0013b000
    2380:	000f4240 	.word	0x000f4240
    2384:	0003d090 	.word	0x0003d090
    2388:	00275000 	.word	0x00275000
    238c:	003af000 	.word	0x003af000
    2390:	0075c000 	.word	0x0075c000
    2394:	013a9000 	.word	0x013a9000

00002398 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2398:	6803      	ldr	r3, [r0, #0]
    239a:	689b      	ldr	r3, [r3, #8]
    239c:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    239e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    23a2:	b132      	cbz	r2, 23b2 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    23a4:	2000      	movs	r0, #0
    23a6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    23aa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    23ae:	700b      	strb	r3, [r1, #0]

	return 0;
    23b0:	4770      	bx	lr
		return -1;
    23b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    23b6:	4770      	bx	lr

000023b8 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    23b8:	6803      	ldr	r3, [r0, #0]
    23ba:	689b      	ldr	r3, [r3, #8]
    23bc:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    23be:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    23c2:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    23c6:	2b00      	cmp	r3, #0
    23c8:	d0fb      	beq.n	23c2 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    23ca:	2300      	movs	r3, #0
    23cc:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    23d0:	4608      	mov	r0, r1
    23d2:	4770      	bx	lr

000023d4 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    23d4:	6803      	ldr	r3, [r0, #0]
    23d6:	689b      	ldr	r3, [r3, #8]
    23d8:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    23da:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    23de:	b132      	cbz	r2, 23ee <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    23e0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    23e4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    23e8:	f000 000f 	and.w	r0, r0, #15
    23ec:	4770      	bx	lr
	u32_t error = 0;
    23ee:	2000      	movs	r0, #0
    23f0:	e7fa      	b.n	23e8 <uart_nrf5_err_check+0x14>

000023f2 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    23f2:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    23f4:	6803      	ldr	r3, [r0, #0]
    23f6:	689b      	ldr	r3, [r3, #8]
    23f8:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    23fa:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    23fc:	e007      	b.n	240e <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    23fe:	2000      	movs	r0, #0
    2400:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    2404:	1c58      	adds	r0, r3, #1
    2406:	5ccb      	ldrb	r3, [r1, r3]
    2408:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    240c:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    240e:	4618      	mov	r0, r3
    2410:	1ad5      	subs	r5, r2, r3
    2412:	2d00      	cmp	r5, #0
    2414:	dd03      	ble.n	241e <uart_nrf5_fifo_fill+0x2c>
    2416:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    241a:	2d00      	cmp	r5, #0
    241c:	d1ef      	bne.n	23fe <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    241e:	bc30      	pop	{r4, r5}
    2420:	4770      	bx	lr

00002422 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2422:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2424:	6803      	ldr	r3, [r0, #0]
    2426:	689b      	ldr	r3, [r3, #8]
    2428:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    242a:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    242c:	e007      	b.n	243e <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    242e:	2000      	movs	r0, #0
    2430:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2434:	1c58      	adds	r0, r3, #1
    2436:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    243a:	54cd      	strb	r5, [r1, r3]
    243c:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    243e:	4618      	mov	r0, r3
    2440:	1ad5      	subs	r5, r2, r3
    2442:	2d00      	cmp	r5, #0
    2444:	dd03      	ble.n	244e <uart_nrf5_fifo_read+0x2c>
    2446:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    244a:	2d00      	cmp	r5, #0
    244c:	d1ef      	bne.n	242e <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    244e:	bc30      	pop	{r4, r5}
    2450:	4770      	bx	lr

00002452 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2452:	6803      	ldr	r3, [r0, #0]
    2454:	689b      	ldr	r3, [r3, #8]
    2456:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2458:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    245c:	f043 0308 	orr.w	r3, r3, #8
    2460:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2464:	4770      	bx	lr

00002466 <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2466:	6803      	ldr	r3, [r0, #0]
    2468:	689b      	ldr	r3, [r3, #8]
    246a:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    246c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2470:	f043 0308 	orr.w	r3, r3, #8
    2474:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2478:	4770      	bx	lr

0000247a <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    247a:	6803      	ldr	r3, [r0, #0]
    247c:	689b      	ldr	r3, [r3, #8]
    247e:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2480:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2484:	4770      	bx	lr

00002486 <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2486:	6803      	ldr	r3, [r0, #0]
    2488:	689b      	ldr	r3, [r3, #8]
    248a:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    248c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2490:	f043 0304 	orr.w	r3, r3, #4
    2494:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2498:	4770      	bx	lr

0000249a <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    249a:	6803      	ldr	r3, [r0, #0]
    249c:	689b      	ldr	r3, [r3, #8]
    249e:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    24a0:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    24a4:	f043 0304 	orr.w	r3, r3, #4
    24a8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    24ac:	4770      	bx	lr

000024ae <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    24ae:	6803      	ldr	r3, [r0, #0]
    24b0:	689b      	ldr	r3, [r3, #8]
    24b2:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    24b4:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    24b8:	fab0 f080 	clz	r0, r0
    24bc:	0940      	lsrs	r0, r0, #5
    24be:	4770      	bx	lr

000024c0 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    24c0:	6803      	ldr	r3, [r0, #0]
    24c2:	689b      	ldr	r3, [r3, #8]
    24c4:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    24c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    24ca:	4770      	bx	lr

000024cc <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    24cc:	6803      	ldr	r3, [r0, #0]
    24ce:	689b      	ldr	r3, [r3, #8]
    24d0:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    24d2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    24d6:	f043 0310 	orr.w	r3, r3, #16
    24da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    24de:	4770      	bx	lr

000024e0 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    24e0:	6803      	ldr	r3, [r0, #0]
    24e2:	689b      	ldr	r3, [r3, #8]
    24e4:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    24e6:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    24ea:	f043 0310 	orr.w	r3, r3, #16
    24ee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    24f2:	4770      	bx	lr

000024f4 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    24f4:	b510      	push	{r4, lr}
    24f6:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    24f8:	f7ff ffbf 	bl	247a <uart_nrf5_irq_tx_ready>
    24fc:	b110      	cbz	r0, 2504 <uart_nrf5_irq_is_pending+0x10>
    24fe:	2301      	movs	r3, #1
}
    2500:	4618      	mov	r0, r3
    2502:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2504:	4620      	mov	r0, r4
    2506:	f7ff ffdb 	bl	24c0 <uart_nrf5_irq_rx_ready>
    250a:	4603      	mov	r3, r0
    250c:	2800      	cmp	r0, #0
    250e:	d0f7      	beq.n	2500 <uart_nrf5_irq_is_pending+0xc>
    2510:	2301      	movs	r3, #1
    2512:	e7f5      	b.n	2500 <uart_nrf5_irq_is_pending+0xc>

00002514 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2514:	2001      	movs	r0, #1
    2516:	4770      	bx	lr

00002518 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2518:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    251a:	6059      	str	r1, [r3, #4]
    251c:	4770      	bx	lr

0000251e <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    251e:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2520:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    2522:	685b      	ldr	r3, [r3, #4]
    2524:	b103      	cbz	r3, 2528 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    2526:	4798      	blx	r3
    2528:	bd08      	pop	{r3, pc}

0000252a <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    252a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    252c:	2200      	movs	r2, #0
    252e:	2101      	movs	r1, #1
    2530:	2002      	movs	r0, #2
    2532:	f026 fe85 	bl	29240 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    2536:	2002      	movs	r0, #2
    2538:	f026 fe58 	bl	291ec <_arch_irq_enable>
    253c:	bd08      	pop	{r3, pc}
	...

00002540 <uart_nrf5_init>:
{
    2540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2542:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    2544:	6803      	ldr	r3, [r0, #0]
    2546:	689b      	ldr	r3, [r3, #8]
    2548:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    254a:	481d      	ldr	r0, [pc, #116]	; (25c0 <uart_nrf5_init+0x80>)
    254c:	f027 f81c 	bl	29588 <device_get_binding>
    2550:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    2552:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2554:	681f      	ldr	r7, [r3, #0]
    2556:	f240 1301 	movw	r3, #257	; 0x101
    255a:	2206      	movs	r2, #6
    255c:	2100      	movs	r1, #0
    255e:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2560:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2562:	681f      	ldr	r7, [r3, #0]
    2564:	2300      	movs	r3, #0
    2566:	2208      	movs	r2, #8
    2568:	4619      	mov	r1, r3
    256a:	4630      	mov	r0, r6
    256c:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    256e:	2306      	movs	r3, #6
    2570:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2574:	2308      	movs	r3, #8
    2576:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    257a:	68a3      	ldr	r3, [r4, #8]
    257c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2580:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2582:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    2584:	6822      	ldr	r2, [r4, #0]
    2586:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2588:	6852      	ldr	r2, [r2, #4]
    258a:	6819      	ldr	r1, [r3, #0]
    258c:	4620      	mov	r0, r4
    258e:	f7ff fe7d 	bl	228c <baudrate_set>
	if (err) {
    2592:	4606      	mov	r6, r0
    2594:	b108      	cbz	r0, 259a <uart_nrf5_init+0x5a>
}
    2596:	4630      	mov	r0, r6
    2598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    259a:	2304      	movs	r3, #4
    259c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    25a0:	2300      	movs	r3, #0
    25a2:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    25a6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    25aa:	2301      	movs	r3, #1
    25ac:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    25ae:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    25b0:	4b04      	ldr	r3, [pc, #16]	; (25c4 <uart_nrf5_init+0x84>)
    25b2:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    25b4:	6823      	ldr	r3, [r4, #0]
    25b6:	689b      	ldr	r3, [r3, #8]
    25b8:	689b      	ldr	r3, [r3, #8]
    25ba:	4620      	mov	r0, r4
    25bc:	4798      	blx	r3
	return 0;
    25be:	e7ea      	b.n	2596 <uart_nrf5_init+0x56>
    25c0:	00030468 	.word	0x00030468
    25c4:	00030494 	.word	0x00030494

000025c8 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    25c8:	4b08      	ldr	r3, [pc, #32]	; (25ec <rtc_compare_set+0x24>)
    25ca:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    25ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    25d2:	1ac0      	subs	r0, r0, r3
    25d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25d8:	3802      	subs	r0, #2
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <rtc_compare_set+0x28>)
    25dc:	4298      	cmp	r0, r3
    25de:	d904      	bls.n	25ea <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    25e4:	4b03      	ldr	r3, [pc, #12]	; (25f4 <rtc_compare_set+0x2c>)
    25e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    25ea:	4770      	bx	lr
    25ec:	40011000 	.word	0x40011000
    25f0:	007ffffd 	.word	0x007ffffd
    25f4:	e000e100 	.word	0xe000e100

000025f8 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    25f8:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    25fa:	4b15      	ldr	r3, [pc, #84]	; (2650 <rtc_announce_set_next+0x58>)
    25fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2600:	4a14      	ldr	r2, [pc, #80]	; (2654 <rtc_announce_set_next+0x5c>)
    2602:	6811      	ldr	r1, [r2, #0]
    2604:	1a5b      	subs	r3, r3, r1
    2606:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    260a:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    260e:	d917      	bls.n	2640 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2610:	4a11      	ldr	r2, [pc, #68]	; (2658 <rtc_announce_set_next+0x60>)
    2612:	fba2 0203 	umull	r0, r2, r2, r3
    2616:	1a9b      	subs	r3, r3, r2
    2618:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    261c:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    261e:	4a0f      	ldr	r2, [pc, #60]	; (265c <rtc_announce_set_next+0x64>)
    2620:	6810      	ldr	r0, [r2, #0]
    2622:	4283      	cmp	r3, r0
    2624:	d800      	bhi.n	2628 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2626:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2628:	f240 1347 	movw	r3, #327	; 0x147
    262c:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2634:	4a07      	ldr	r2, [pc, #28]	; (2654 <rtc_announce_set_next+0x5c>)
    2636:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    2638:	4b09      	ldr	r3, [pc, #36]	; (2660 <rtc_announce_set_next+0x68>)
    263a:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    263c:	f028 faec 	bl	2ac18 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2640:	4b04      	ldr	r3, [pc, #16]	; (2654 <rtc_announce_set_next+0x5c>)
    2642:	6818      	ldr	r0, [r3, #0]
    2644:	f200 1047 	addw	r0, r0, #327	; 0x147
    2648:	f7ff ffbe 	bl	25c8 <rtc_compare_set>
    264c:	bd08      	pop	{r3, pc}
    264e:	bf00      	nop
    2650:	40011000 	.word	0x40011000
    2654:	20000350 	.word	0x20000350
    2658:	90d4f121 	.word	0x90d4f121
    265c:	2000034c 	.word	0x2000034c
    2660:	2000c610 	.word	0x2000c610

00002664 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    2664:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    2666:	2200      	movs	r2, #0
    2668:	4b02      	ldr	r3, [pc, #8]	; (2674 <rtc1_nrf5_isr+0x10>)
    266a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    266e:	f7ff ffc3 	bl	25f8 <rtc_announce_set_next>
    2672:	bd08      	pop	{r3, pc}
    2674:	40011000 	.word	0x40011000

00002678 <_timer_idle_enter>:
{
    2678:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    267a:	f246 4335 	movw	r3, #25653	; 0x6435
    267e:	4298      	cmp	r0, r3
    2680:	d900      	bls.n	2684 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    2682:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    2684:	4b05      	ldr	r3, [pc, #20]	; (269c <_timer_idle_enter+0x24>)
    2686:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    2688:	4b05      	ldr	r3, [pc, #20]	; (26a0 <_timer_idle_enter+0x28>)
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	f240 1247 	movw	r2, #327	; 0x147
    2690:	fb02 3000 	mla	r0, r2, r0, r3
    2694:	f7ff ff98 	bl	25c8 <rtc_compare_set>
    2698:	bd08      	pop	{r3, pc}
    269a:	bf00      	nop
    269c:	2000034c 	.word	0x2000034c
    26a0:	20000350 	.word	0x20000350

000026a4 <_timer_idle_exit>:
{
    26a4:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    26a6:	2200      	movs	r2, #0
    26a8:	4b06      	ldr	r3, [pc, #24]	; (26c4 <_timer_idle_exit+0x20>)
    26aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    26b2:	4b05      	ldr	r3, [pc, #20]	; (26c8 <_timer_idle_exit+0x24>)
    26b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    26b8:	f7ff ff9e 	bl	25f8 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    26bc:	2201      	movs	r2, #1
    26be:	4b03      	ldr	r3, [pc, #12]	; (26cc <_timer_idle_exit+0x28>)
    26c0:	601a      	str	r2, [r3, #0]
    26c2:	bd08      	pop	{r3, pc}
    26c4:	40011000 	.word	0x40011000
    26c8:	e000e100 	.word	0xe000e100
    26cc:	2000034c 	.word	0x2000034c

000026d0 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    26d0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    26d2:	4818      	ldr	r0, [pc, #96]	; (2734 <_sys_clock_driver_init+0x64>)
    26d4:	f026 ff58 	bl	29588 <device_get_binding>
	if (!clock) {
    26d8:	b348      	cbz	r0, 272e <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    26da:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    26dc:	6812      	ldr	r2, [r2, #0]
    26de:	2101      	movs	r1, #1
    26e0:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    26e2:	2400      	movs	r4, #0
    26e4:	4b14      	ldr	r3, [pc, #80]	; (2738 <_sys_clock_driver_init+0x68>)
    26e6:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    26e8:	2601      	movs	r6, #1
    26ea:	4b14      	ldr	r3, [pc, #80]	; (273c <_sys_clock_driver_init+0x6c>)
    26ec:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    26ee:	4d14      	ldr	r5, [pc, #80]	; (2740 <_sys_clock_driver_init+0x70>)
    26f0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    26f4:	f240 1347 	movw	r3, #327	; 0x147
    26f8:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    26fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2700:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    2704:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    2708:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    270c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2710:	4b0c      	ldr	r3, [pc, #48]	; (2744 <_sys_clock_driver_init+0x74>)
    2712:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    2716:	4622      	mov	r2, r4
    2718:	4631      	mov	r1, r6
    271a:	2011      	movs	r0, #17
    271c:	f026 fd90 	bl	29240 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    2720:	2011      	movs	r0, #17
    2722:	f026 fd63 	bl	291ec <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    2726:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    2728:	602e      	str	r6, [r5, #0]

	return 0;
    272a:	4620      	mov	r0, r4
    272c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    272e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2732:	bd70      	pop	{r4, r5, r6, pc}
    2734:	00030470 	.word	0x00030470
    2738:	20000350 	.word	0x20000350
    273c:	2000034c 	.word	0x2000034c
    2740:	40011000 	.word	0x40011000
    2744:	e000e100 	.word	0xe000e100

00002748 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2748:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    274a:	4b0d      	ldr	r3, [pc, #52]	; (2780 <_timer_cycle_get_32+0x38>)
    274c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2750:	e000      	b.n	2754 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    2752:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    2754:	4b0b      	ldr	r3, [pc, #44]	; (2784 <_timer_cycle_get_32+0x3c>)
    2756:	e9d3 2300 	ldrd	r2, r3, [r3]
    275a:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    275c:	f240 1047 	movw	r0, #327	; 0x147
    2760:	fb00 1212 	mls	r2, r0, r2, r1
    2764:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    2768:	4b05      	ldr	r3, [pc, #20]	; (2780 <_timer_cycle_get_32+0x38>)
    276a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    276e:	4299      	cmp	r1, r3
    2770:	d1ef      	bne.n	2752 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2772:	4b05      	ldr	r3, [pc, #20]	; (2788 <_timer_cycle_get_32+0x40>)
    2774:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    2776:	fb00 2004 	mla	r0, r0, r4, r2
    277a:	bc10      	pop	{r4}
    277c:	4770      	bx	lr
    277e:	bf00      	nop
    2780:	40011000 	.word	0x40011000
    2784:	20002bf8 	.word	0x20002bf8
    2788:	2000c614 	.word	0x2000c614

0000278c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    278c:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    278e:	6803      	ldr	r3, [r0, #0]
    2790:	689b      	ldr	r3, [r3, #8]
    2792:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2794:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2796:	2000      	movs	r0, #0
    2798:	e000      	b.n	279c <gpiote_find_channel+0x10>
    279a:	3001      	adds	r0, #1
    279c:	2807      	cmp	r0, #7
    279e:	dc0d      	bgt.n	27bc <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    27a0:	68d3      	ldr	r3, [r2, #12]
    27a2:	40c3      	lsrs	r3, r0
    27a4:	f013 0f01 	tst.w	r3, #1
    27a8:	d0f7      	beq.n	279a <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    27aa:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    27ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    27b2:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    27b6:	428b      	cmp	r3, r1
    27b8:	d1ef      	bne.n	279a <gpiote_find_channel+0xe>
    27ba:	e001      	b.n	27c0 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    27bc:	f06f 0012 	mvn.w	r0, #18
}
    27c0:	bc10      	pop	{r4}
    27c2:	4770      	bx	lr

000027c4 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    27c4:	6800      	ldr	r0, [r0, #0]
    27c6:	6880      	ldr	r0, [r0, #8]
    27c8:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    27ca:	b121      	cbz	r1, 27d6 <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    27cc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    27d0:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    27d2:	2000      	movs	r0, #0
    27d4:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    27d6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    27da:	fa21 f202 	lsr.w	r2, r1, r2
    27de:	f002 0201 	and.w	r2, r2, #1
    27e2:	601a      	str	r2, [r3, #0]
    27e4:	e7f5      	b.n	27d2 <gpio_nrf5_read+0xe>

000027e6 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    27e6:	6800      	ldr	r0, [r0, #0]
    27e8:	6880      	ldr	r0, [r0, #8]
    27ea:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    27ec:	b961      	cbnz	r1, 2808 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    27ee:	b12b      	cbz	r3, 27fc <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    27f0:	2301      	movs	r3, #1
    27f2:	fa03 f202 	lsl.w	r2, r3, r2
    27f6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    27fa:	e007      	b.n	280c <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    27fc:	2301      	movs	r3, #1
    27fe:	fa03 f202 	lsl.w	r2, r3, r2
    2802:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    2806:	e001      	b.n	280c <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    2808:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    280c:	2000      	movs	r0, #0
    280e:	4770      	bx	lr

00002810 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2810:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2812:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2814:	b14a      	cbz	r2, 282a <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2816:	6823      	ldr	r3, [r4, #0]
    2818:	600b      	str	r3, [r1, #0]
	list->head = node;
    281a:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    281c:	6863      	ldr	r3, [r4, #4]
    281e:	b113      	cbz	r3, 2826 <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2820:	2000      	movs	r0, #0
    2822:	bc10      	pop	{r4}
    2824:	4770      	bx	lr
		list->tail = list->head;
    2826:	6061      	str	r1, [r4, #4]
    2828:	e7fa      	b.n	2820 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    282a:	4608      	mov	r0, r1
	return list->head;
    282c:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    282e:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2830:	2b00      	cmp	r3, #0
    2832:	d0f5      	beq.n	2820 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    2834:	4298      	cmp	r0, r3
    2836:	d002      	beq.n	283e <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    2838:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    283a:	681b      	ldr	r3, [r3, #0]
    283c:	e7f8      	b.n	2830 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    283e:	b13a      	cbz	r2, 2850 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2840:	680b      	ldr	r3, [r1, #0]
    2842:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    2844:	6863      	ldr	r3, [r4, #4]
    2846:	4299      	cmp	r1, r3
    2848:	d009      	beq.n	285e <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    284a:	2300      	movs	r3, #0
    284c:	600b      	str	r3, [r1, #0]
    284e:	e7e7      	b.n	2820 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2850:	680b      	ldr	r3, [r1, #0]
    2852:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    2854:	6862      	ldr	r2, [r4, #4]
    2856:	4291      	cmp	r1, r2
    2858:	d1f7      	bne.n	284a <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    285a:	6063      	str	r3, [r4, #4]
    285c:	e7f5      	b.n	284a <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    285e:	6062      	str	r2, [r4, #4]
    2860:	e7f3      	b.n	284a <gpio_nrf5_manage_callback+0x3a>

00002862 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2864:	6803      	ldr	r3, [r0, #0]
    2866:	689b      	ldr	r3, [r3, #8]
    2868:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    286a:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    286c:	b9b9      	cbnz	r1, 289e <gpio_nrf5_enable_callback+0x3c>
    286e:	460d      	mov	r5, r1
    2870:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    2872:	4611      	mov	r1, r2
    2874:	f7ff ff8a 	bl	278c <gpiote_find_channel>
		if (i < 0) {
    2878:	2800      	cmp	r0, #0
    287a:	db12      	blt.n	28a2 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    287c:	2301      	movs	r3, #1
    287e:	fa03 f404 	lsl.w	r4, r3, r4
    2882:	68ba      	ldr	r2, [r7, #8]
    2884:	4314      	orrs	r4, r2
    2886:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2888:	f100 0240 	add.w	r2, r0, #64	; 0x40
    288c:	2100      	movs	r1, #0
    288e:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2892:	fa03 f000 	lsl.w	r0, r3, r0
    2896:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    289a:	4628      	mov	r0, r5
    289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    289e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    28a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028a4 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    28a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    28a6:	6803      	ldr	r3, [r0, #0]
    28a8:	689b      	ldr	r3, [r3, #8]
    28aa:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    28ac:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    28ae:	b991      	cbnz	r1, 28d6 <gpio_nrf5_disable_callback+0x32>
    28b0:	460d      	mov	r5, r1
    28b2:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    28b4:	4611      	mov	r1, r2
    28b6:	f7ff ff69 	bl	278c <gpiote_find_channel>
		if (i < 0) {
    28ba:	2800      	cmp	r0, #0
    28bc:	db0d      	blt.n	28da <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    28be:	2301      	movs	r3, #1
    28c0:	fa03 f404 	lsl.w	r4, r3, r4
    28c4:	68b2      	ldr	r2, [r6, #8]
    28c6:	ea22 0404 	bic.w	r4, r2, r4
    28ca:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    28cc:	4083      	lsls	r3, r0
    28ce:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    28d2:	4628      	mov	r0, r5
    28d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    28d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    28da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028dc <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    28dc:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    28de:	2200      	movs	r2, #0
    28e0:	2101      	movs	r1, #1
    28e2:	2006      	movs	r0, #6
    28e4:	f026 fcac 	bl	29240 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    28e8:	2006      	movs	r0, #6
    28ea:	f026 fc7f 	bl	291ec <_arch_irq_enable>

	return 0;
}
    28ee:	2000      	movs	r0, #0
    28f0:	bd08      	pop	{r3, pc}

000028f2 <gpio_nrf5_port_isr>:
{
    28f2:	b570      	push	{r4, r5, r6, lr}
    28f4:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    28f6:	6803      	ldr	r3, [r0, #0]
    28f8:	689b      	ldr	r3, [r3, #8]
    28fa:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    28fc:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    28fe:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    2900:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2902:	e000      	b.n	2906 <gpio_nrf5_port_isr+0x14>
    2904:	3301      	adds	r3, #1
    2906:	2b07      	cmp	r3, #7
    2908:	dc14      	bgt.n	2934 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    290a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    290e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2912:	2a00      	cmp	r2, #0
    2914:	d0f6      	beq.n	2904 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    2916:	f103 0240 	add.w	r2, r3, #64	; 0x40
    291a:	2000      	movs	r0, #0
    291c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2920:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2924:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2928:	f3c0 2004 	ubfx	r0, r0, #8, #5
    292c:	2201      	movs	r2, #1
    292e:	4082      	lsls	r2, r0
    2930:	4316      	orrs	r6, r2
    2932:	e7e7      	b.n	2904 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    2934:	68a3      	ldr	r3, [r4, #8]
    2936:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2938:	2006      	movs	r0, #6
    293a:	f026 fc65 	bl	29208 <_arch_irq_disable>
	return list->head;
    293e:	6824      	ldr	r4, [r4, #0]
    2940:	e005      	b.n	294e <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2942:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2944:	b16c      	cbz	r4, 2962 <gpio_nrf5_port_isr+0x70>
	return node->next;
    2946:	6823      	ldr	r3, [r4, #0]
    2948:	b16b      	cbz	r3, 2966 <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    294a:	b172      	cbz	r2, 296a <gpio_nrf5_port_isr+0x78>
	return node->next;
    294c:	6824      	ldr	r4, [r4, #0]
    294e:	b174      	cbz	r4, 296e <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2950:	68a3      	ldr	r3, [r4, #8]
    2952:	421e      	tst	r6, r3
    2954:	d0f5      	beq.n	2942 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2956:	6863      	ldr	r3, [r4, #4]
    2958:	4632      	mov	r2, r6
    295a:	4621      	mov	r1, r4
    295c:	4628      	mov	r0, r5
    295e:	4798      	blx	r3
    2960:	e7ef      	b.n	2942 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2962:	4623      	mov	r3, r4
    2964:	e7f0      	b.n	2948 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2966:	2400      	movs	r4, #0
    2968:	e7f1      	b.n	294e <gpio_nrf5_port_isr+0x5c>
    296a:	2400      	movs	r4, #0
    296c:	e7ef      	b.n	294e <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    296e:	2006      	movs	r0, #6
    2970:	f026 fc3c 	bl	291ec <_arch_irq_enable>
    2974:	bd70      	pop	{r4, r5, r6, pc}
	...

00002978 <gpio_nrf5_config>:
{
    2978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    297c:	6804      	ldr	r4, [r0, #0]
    297e:	68a5      	ldr	r5, [r4, #8]
    2980:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2982:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2984:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2986:	2900      	cmp	r1, #0
    2988:	d17f      	bne.n	2a8a <gpio_nrf5_config+0x112>
    298a:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    298c:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2990:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2994:	f403 7440 	and.w	r4, r3, #768	; 0x300
    2998:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    299c:	d025      	beq.n	29ea <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    299e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    29a2:	d024      	beq.n	29ee <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    29a4:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    29a6:	f013 0f01 	tst.w	r3, #1
    29aa:	d030      	beq.n	2a0e <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    29ac:	2c0c      	cmp	r4, #12
    29ae:	d020      	beq.n	29f2 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    29b0:	2c04      	cmp	r4, #4
    29b2:	d025      	beq.n	2a00 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    29b4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    29b8:	4938      	ldr	r1, [pc, #224]	; (2a9c <gpio_nrf5_config+0x124>)
    29ba:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    29be:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    29c0:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    29c4:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    29c8:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    29cc:	f013 0102 	ands.w	r1, r3, #2
    29d0:	d04a      	beq.n	2a68 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    29d2:	f013 0f20 	tst.w	r3, #32
    29d6:	d05b      	beq.n	2a90 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    29d8:	f013 0f40 	tst.w	r3, #64	; 0x40
    29dc:	d123      	bne.n	2a26 <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    29de:	f013 0f04 	tst.w	r3, #4
    29e2:	d044      	beq.n	2a6e <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    29e4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    29e8:	e01f      	b.n	2a2a <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    29ea:	240c      	movs	r4, #12
    29ec:	e7db      	b.n	29a6 <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    29ee:	2404      	movs	r4, #4
    29f0:	e7d9      	b.n	29a6 <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    29f2:	f04f 0c01 	mov.w	ip, #1
    29f6:	fa0c fc02 	lsl.w	ip, ip, r2
    29fa:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    29fe:	e7d9      	b.n	29b4 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    2a00:	f04f 0c01 	mov.w	ip, #1
    2a04:	fa0c fc02 	lsl.w	ip, ip, r2
    2a08:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    2a0c:	e7d2      	b.n	29b4 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    2a0e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2a12:	f8df e088 	ldr.w	lr, [pc, #136]	; 2a9c <gpio_nrf5_config+0x124>
    2a16:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    2a1a:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2a1c:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2a20:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    2a24:	e7d2      	b.n	29cc <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    2a26:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    2a2a:	4614      	mov	r4, r2
    2a2c:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2a2e:	68f8      	ldr	r0, [r7, #12]
    2a30:	f7fe fb7c 	bl	112c <__popcountsi2>
    2a34:	2808      	cmp	r0, #8
    2a36:	d02e      	beq.n	2a96 <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    2a38:	4621      	mov	r1, r4
    2a3a:	4628      	mov	r0, r5
    2a3c:	f7ff fea6 	bl	278c <gpiote_find_channel>
		if (i < 0) {
    2a40:	2800      	cmp	r0, #0
    2a42:	db17      	blt.n	2a74 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    2a44:	2301      	movs	r3, #1
    2a46:	fa03 f200 	lsl.w	r2, r3, r0
    2a4a:	68fb      	ldr	r3, [r7, #12]
    2a4c:	4313      	orrs	r3, r2
    2a4e:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2a50:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    2a54:	0224      	lsls	r4, r4, #8
    2a56:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    2a5a:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2a5e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2a62:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    2a66:	4641      	mov	r1, r8
}
    2a68:	4608      	mov	r0, r1
    2a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2a6e:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    2a72:	e7da      	b.n	2a2a <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	43db      	mvns	r3, r3
    2a78:	fa93 f0a3 	rbit	r0, r3
    2a7c:	fab0 f080 	clz	r0, r0
    2a80:	2b00      	cmp	r3, #0
    2a82:	d1df      	bne.n	2a44 <gpio_nrf5_config+0xcc>
    2a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a88:	e7dc      	b.n	2a44 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    2a8a:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2a8e:	e7eb      	b.n	2a68 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2a90:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2a94:	e7e8      	b.n	2a68 <gpio_nrf5_config+0xf0>
			return -EIO;
    2a96:	f06f 0104 	mvn.w	r1, #4
    2a9a:	e7e5      	b.n	2a68 <gpio_nrf5_config+0xf0>
    2a9c:	000304d8 	.word	0x000304d8

00002aa0 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2aa0:	f04f 0320 	mov.w	r3, #32
    2aa4:	f3ef 8111 	mrs	r1, BASEPRI
    2aa8:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2aac:	4b12      	ldr	r3, [pc, #72]	; (2af8 <_m16src_stop+0x58>)
    2aae:	781a      	ldrb	r2, [r3, #0]
    2ab0:	b192      	cbz	r2, 2ad8 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    2ab2:	1e53      	subs	r3, r2, #1
    2ab4:	b2db      	uxtb	r3, r3
    2ab6:	4810      	ldr	r0, [pc, #64]	; (2af8 <_m16src_stop+0x58>)
    2ab8:	7003      	strb	r3, [r0, #0]
    2aba:	b993      	cbnz	r3, 2ae2 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2abc:	4b0f      	ldr	r3, [pc, #60]	; (2afc <_m16src_stop+0x5c>)
    2abe:	781b      	ldrb	r3, [r3, #0]
    2ac0:	b99b      	cbnz	r3, 2aea <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    2ac2:	4b0e      	ldr	r3, [pc, #56]	; (2afc <_m16src_stop+0x5c>)
    2ac4:	2201      	movs	r2, #1
    2ac6:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2ac8:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2acc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2ad0:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    2ad2:	2000      	movs	r0, #0
    2ad4:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2ad6:	4770      	bx	lr
    2ad8:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2adc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2ae0:	4770      	bx	lr
    2ae2:	f381 8811 	msr	BASEPRI, r1
		return 0;
    2ae6:	2000      	movs	r0, #0
    2ae8:	4770      	bx	lr
		m16src_ref++;
    2aea:	4b03      	ldr	r3, [pc, #12]	; (2af8 <_m16src_stop+0x58>)
    2aec:	701a      	strb	r2, [r3, #0]
    2aee:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    2af2:	f06f 000a 	mvn.w	r0, #10
    2af6:	4770      	bx	lr
    2af8:	20000366 	.word	0x20000366
    2afc:	20000365 	.word	0x20000365

00002b00 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2b00:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2b02:	2200      	movs	r2, #0
    2b04:	2101      	movs	r1, #1
    2b06:	4610      	mov	r0, r2
    2b08:	f026 fb9a 	bl	29240 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2b0c:	2000      	movs	r0, #0
    2b0e:	f026 fb6d 	bl	291ec <_arch_irq_enable>

	return 0;
}
    2b12:	2000      	movs	r0, #0
    2b14:	bd08      	pop	{r3, pc}
	...

00002b18 <_m16src_start>:
{
    2b18:	b510      	push	{r4, lr}
	__asm__ volatile(
    2b1a:	f04f 0320 	mov.w	r3, #32
    2b1e:	f3ef 8411 	mrs	r4, BASEPRI
    2b22:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    2b26:	4a2c      	ldr	r2, [pc, #176]	; (2bd8 <_m16src_start+0xc0>)
    2b28:	7813      	ldrb	r3, [r2, #0]
    2b2a:	1c58      	adds	r0, r3, #1
    2b2c:	7010      	strb	r0, [r2, #0]
    2b2e:	b153      	cbz	r3, 2b46 <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2b30:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    2b3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b40:	d047      	beq.n	2bd2 <_m16src_start+0xba>
		return 0;
    2b42:	2000      	movs	r0, #0
    2b44:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    2b46:	4a25      	ldr	r2, [pc, #148]	; (2bdc <_m16src_start+0xc4>)
    2b48:	7812      	ldrb	r2, [r2, #0]
    2b4a:	b9a2      	cbnz	r2, 2b76 <_m16src_start+0x5e>
	m16src_grd = 1;
    2b4c:	2201      	movs	r2, #1
    2b4e:	4b23      	ldr	r3, [pc, #140]	; (2bdc <_m16src_start+0xc4>)
    2b50:	701a      	strb	r2, [r3, #0]
    2b52:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    2b56:	b3a1      	cbz	r1, 2bc2 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    2b58:	2000      	movs	r0, #0
    2b5a:	f026 fb55 	bl	29208 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b62:	2200      	movs	r2, #0
    2b64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2b68:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b6c:	2201      	movs	r2, #1
    2b6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2b72:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2b74:	e009      	b.n	2b8a <_m16src_start+0x72>
		m16src_ref--;
    2b76:	4a18      	ldr	r2, [pc, #96]	; (2bd8 <_m16src_start+0xc0>)
    2b78:	7013      	strb	r3, [r2, #0]
    2b7a:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    2b7e:	f06f 000a 	mvn.w	r0, #10
    2b82:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2b84:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    2b86:	bf40      	sev
  __ASM volatile ("wfe");
    2b88:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2b92:	2b00      	cmp	r3, #0
    2b94:	d0f6      	beq.n	2b84 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2b96:	2200      	movs	r2, #0
    2b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2ba0:	f011 0f01 	tst.w	r1, #1
    2ba4:	d102      	bne.n	2bac <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2ba6:	2201      	movs	r2, #1
    2ba8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2bac:	2201      	movs	r2, #1
    2bae:	4b0c      	ldr	r3, [pc, #48]	; (2be0 <_m16src_start+0xc8>)
    2bb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2bb4:	2000      	movs	r0, #0
    2bb6:	f026 fb19 	bl	291ec <_arch_irq_enable>
	m16src_grd = 0;
    2bba:	2200      	movs	r2, #0
    2bbc:	4b07      	ldr	r3, [pc, #28]	; (2bdc <_m16src_start+0xc4>)
    2bbe:	701a      	strb	r2, [r3, #0]
    2bc0:	e7b8      	b.n	2b34 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bc6:	2200      	movs	r2, #0
    2bc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2bcc:	2201      	movs	r2, #1
    2bce:	601a      	str	r2, [r3, #0]
    2bd0:	e7f3      	b.n	2bba <_m16src_start+0xa2>
		return -EINPROGRESS;
    2bd2:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2bd6:	bd10      	pop	{r4, pc}
    2bd8:	20000366 	.word	0x20000366
    2bdc:	20000365 	.word	0x20000365
    2be0:	e000e100 	.word	0xe000e100

00002be4 <_power_clock_isr>:
{
    2be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2be8:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bee:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2bf2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2bf6:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2bfa:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2bfe:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2c02:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2c06:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2c0a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2c0e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2c12:	b11d      	cbz	r5, 2c1c <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2c14:	f04f 0e00 	mov.w	lr, #0
    2c18:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2c1c:	b127      	cbz	r7, 2c28 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2c1e:	2700      	movs	r7, #0
    2c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c24:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2c28:	b132      	cbz	r2, 2c38 <_power_clock_isr+0x54>
    2c2a:	b129      	cbz	r1, 2c38 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c30:	2201      	movs	r2, #1
    2c32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2c36:	611a      	str	r2, [r3, #16]
	if (lf) {
    2c38:	b126      	cbz	r6, 2c44 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2c3a:	2200      	movs	r2, #0
    2c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2c44:	b910      	cbnz	r0, 2c4c <_power_clock_isr+0x68>
	if (ctto) {
    2c46:	b964      	cbnz	r4, 2c62 <_power_clock_isr+0x7e>
    2c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2c4c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2c50:	2100      	movs	r1, #0
    2c52:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2c56:	4640      	mov	r0, r8
    2c58:	f7ff ff22 	bl	2aa0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2c5c:	2301      	movs	r3, #1
    2c5e:	6173      	str	r3, [r6, #20]
    2c60:	e7f1      	b.n	2c46 <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c66:	2100      	movs	r1, #0
    2c68:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2c6c:	2201      	movs	r2, #1
    2c6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2c72:	4640      	mov	r0, r8
    2c74:	f7ff ff50 	bl	2b18 <_m16src_start>
		if (!err) {
    2c78:	2800      	cmp	r0, #0
    2c7a:	d1e5      	bne.n	2c48 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c7c:	2201      	movs	r2, #1
    2c7e:	4b02      	ldr	r3, [pc, #8]	; (2c88 <_power_clock_isr+0xa4>)
    2c80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2c84:	e7e0      	b.n	2c48 <_power_clock_isr+0x64>
    2c86:	bf00      	nop
    2c88:	e000e100 	.word	0xe000e100

00002c8c <_k32src_start>:
	__asm__ volatile(
    2c8c:	f04f 0220 	mov.w	r2, #32
    2c90:	f3ef 8311 	mrs	r3, BASEPRI
    2c94:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2c98:	4a38      	ldr	r2, [pc, #224]	; (2d7c <_k32src_start+0xf0>)
    2c9a:	7812      	ldrb	r2, [r2, #0]
    2c9c:	b152      	cbz	r2, 2cb4 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2c9e:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ca6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2caa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2cae:	d062      	beq.n	2d76 <_k32src_start+0xea>
		return 0;
    2cb0:	2000      	movs	r0, #0
    2cb2:	4770      	bx	lr
{
    2cb4:	b570      	push	{r4, r5, r6, lr}
    2cb6:	460d      	mov	r5, r1
    2cb8:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2cba:	2601      	movs	r6, #1
    2cbc:	4a2f      	ldr	r2, [pc, #188]	; (2d7c <_k32src_start+0xf0>)
    2cbe:	7016      	strb	r6, [r2, #0]
    2cc0:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2cc4:	2000      	movs	r0, #0
    2cc6:	f026 fa9f 	bl	29208 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cce:	2200      	movs	r2, #0
    2cd0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2cd4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2cd8:	2102      	movs	r1, #2
    2cda:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2cde:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2ce2:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2ce4:	e002      	b.n	2cec <_k32src_start+0x60>
    2ce6:	bf20      	wfe
  __ASM volatile ("sev");
    2ce8:	bf40      	sev
  __ASM volatile ("wfe");
    2cea:	bf20      	wfe
    2cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cf0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d0f6      	beq.n	2ce6 <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2cf8:	2100      	movs	r1, #0
    2cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cfe:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2d02:	f012 0f02 	tst.w	r2, #2
    2d06:	d102      	bne.n	2d0e <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2d08:	2202      	movs	r2, #2
    2d0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d0e:	2201      	movs	r2, #1
    2d10:	4b1b      	ldr	r3, [pc, #108]	; (2d80 <_k32src_start+0xf4>)
    2d12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2d16:	2000      	movs	r0, #0
    2d18:	f026 fa68 	bl	291ec <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d20:	2218      	movs	r2, #24
    2d22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2d26:	2200      	movs	r2, #0
    2d28:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2d2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2d30:	f015 0f03 	tst.w	r5, #3
    2d34:	d008      	beq.n	2d48 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d3a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2d3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2d42:	d015      	beq.n	2d70 <_k32src_start+0xe4>
		return 0;
    2d44:	2000      	movs	r0, #0
    2d46:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2d48:	2210      	movs	r2, #16
    2d4a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2d4e:	2218      	movs	r2, #24
    2d50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2d54:	2201      	movs	r2, #1
    2d56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2d5a:	2100      	movs	r1, #0
    2d5c:	4620      	mov	r0, r4
    2d5e:	f7ff fedb 	bl	2b18 <_m16src_start>
		if (!err) {
    2d62:	2800      	cmp	r0, #0
    2d64:	d1e7      	bne.n	2d36 <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2d66:	2201      	movs	r2, #1
    2d68:	4b05      	ldr	r3, [pc, #20]	; (2d80 <_k32src_start+0xf4>)
    2d6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2d6e:	e7e2      	b.n	2d36 <_k32src_start+0xaa>
		return -EINPROGRESS;
    2d70:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2d74:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2d76:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2d7a:	4770      	bx	lr
    2d7c:	20000364 	.word	0x20000364
    2d80:	e000e100 	.word	0xe000e100

00002d84 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2d84:	2000      	movs	r0, #0
    2d86:	4770      	bx	lr

00002d88 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2d88:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2d8a:	680b      	ldr	r3, [r1, #0]
    2d8c:	3301      	adds	r3, #1
    2d8e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2d90:	4b01      	ldr	r3, [pc, #4]	; (2d98 <char_out+0x10>)
    2d92:	681b      	ldr	r3, [r3, #0]
    2d94:	4798      	blx	r3
}
    2d96:	bd08      	pop	{r3, pc}
    2d98:	2000b908 	.word	0x2000b908

00002d9c <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2da0:	b083      	sub	sp, #12
    2da2:	4606      	mov	r6, r0
    2da4:	9101      	str	r1, [sp, #4]
    2da6:	4691      	mov	r9, r2
    2da8:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2daa:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2dac:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2db0:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2db2:	4653      	mov	r3, sl

	for (; size; size--) {
    2db4:	e009      	b.n	2dca <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2db6:	2809      	cmp	r0, #9
    2db8:	d91f      	bls.n	2dfa <_printk_hex_ulong+0x5e>
    2dba:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2dbc:	9901      	ldr	r1, [sp, #4]
    2dbe:	4418      	add	r0, r3
    2dc0:	47b0      	blx	r6
			digits++;
    2dc2:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2dc4:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2dc8:	462b      	mov	r3, r5
	for (; size; size--) {
    2dca:	b323      	cbz	r3, 2e16 <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2dcc:	1e5d      	subs	r5, r3, #1
    2dce:	00a8      	lsls	r0, r5, #2
    2dd0:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2dd4:	f010 000f 	ands.w	r0, r0, #15
    2dd8:	d1ed      	bne.n	2db6 <_printk_hex_ulong+0x1a>
    2dda:	f1b8 0f00 	cmp.w	r8, #0
    2dde:	d1ea      	bne.n	2db6 <_printk_hex_ulong+0x1a>
    2de0:	2b01      	cmp	r3, #1
    2de2:	d0e8      	beq.n	2db6 <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2de4:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2dea:	459a      	cmp	sl, r3
    2dec:	dc11      	bgt.n	2e12 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2dee:	2f01      	cmp	r7, #1
    2df0:	d005      	beq.n	2dfe <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2df2:	2f02      	cmp	r7, #2
    2df4:	d008      	beq.n	2e08 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2df6:	46da      	mov	sl, fp
    2df8:	e7e6      	b.n	2dc8 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2dfa:	2330      	movs	r3, #48	; 0x30
    2dfc:	e7de      	b.n	2dbc <_printk_hex_ulong+0x20>
				out('0', ctx);
    2dfe:	9901      	ldr	r1, [sp, #4]
    2e00:	2030      	movs	r0, #48	; 0x30
    2e02:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2e04:	46da      	mov	sl, fp
    2e06:	e7df      	b.n	2dc8 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2e08:	9901      	ldr	r1, [sp, #4]
    2e0a:	2020      	movs	r0, #32
    2e0c:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2e0e:	46da      	mov	sl, fp
    2e10:	e7da      	b.n	2dc8 <_printk_hex_ulong+0x2c>
    2e12:	46da      	mov	sl, fp
    2e14:	e7d8      	b.n	2dc8 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2e16:	2f03      	cmp	r7, #3
    2e18:	d002      	beq.n	2e20 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2e1a:	b003      	add	sp, #12
    2e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2e22:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2e26:	1e65      	subs	r5, r4, #1
    2e28:	2c00      	cmp	r4, #0
    2e2a:	ddf6      	ble.n	2e1a <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2e2c:	9901      	ldr	r1, [sp, #4]
    2e2e:	2020      	movs	r0, #32
    2e30:	47b0      	blx	r6
		while (remaining-- > 0) {
    2e32:	462c      	mov	r4, r5
    2e34:	e7f7      	b.n	2e26 <_printk_hex_ulong+0x8a>
	...

00002e38 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e3c:	b083      	sub	sp, #12
    2e3e:	4682      	mov	sl, r0
    2e40:	9101      	str	r1, [sp, #4]
    2e42:	469b      	mov	fp, r3
    2e44:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2e46:	2f00      	cmp	r7, #0
    2e48:	dd07      	ble.n	2e5a <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2e4a:	4615      	mov	r5, r2
    2e4c:	f04f 0901 	mov.w	r9, #1
    2e50:	260a      	movs	r6, #10
    2e52:	f04f 0800 	mov.w	r8, #0
    2e56:	4c22      	ldr	r4, [pc, #136]	; (2ee0 <_printk_dec_ulong+0xa8>)
    2e58:	e015      	b.n	2e86 <_printk_dec_ulong+0x4e>
		min_width = 1;
    2e5a:	2701      	movs	r7, #1
    2e5c:	e7f5      	b.n	2e4a <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2e5e:	1c60      	adds	r0, r4, #1
    2e60:	fbb5 f0f0 	udiv	r0, r5, r0
    2e64:	9901      	ldr	r1, [sp, #4]
    2e66:	3030      	adds	r0, #48	; 0x30
    2e68:	47d0      	blx	sl
			digits++;
    2e6a:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2e6e:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2e72:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2e74:	1c63      	adds	r3, r4, #1
    2e76:	fbb5 f2f3 	udiv	r2, r5, r3
    2e7a:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2e7e:	4b19      	ldr	r3, [pc, #100]	; (2ee4 <_printk_dec_ulong+0xac>)
    2e80:	fba3 3404 	umull	r3, r4, r3, r4
    2e84:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2e86:	2c08      	cmp	r4, #8
    2e88:	d914      	bls.n	2eb4 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2e8a:	f1b8 0f00 	cmp.w	r8, #0
    2e8e:	d1e6      	bne.n	2e5e <_printk_dec_ulong+0x26>
    2e90:	42ac      	cmp	r4, r5
    2e92:	d3e4      	bcc.n	2e5e <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2e94:	42be      	cmp	r6, r7
    2e96:	dcec      	bgt.n	2e72 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2e98:	f1bb 0f02 	cmp.w	fp, #2
    2e9c:	d8e9      	bhi.n	2e72 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2e9e:	f1bb 0f01 	cmp.w	fp, #1
    2ea2:	d005      	beq.n	2eb0 <_printk_dec_ulong+0x78>
    2ea4:	2020      	movs	r0, #32
    2ea6:	9901      	ldr	r1, [sp, #4]
    2ea8:	47d0      	blx	sl
			digits++;
    2eaa:	f109 0901 	add.w	r9, r9, #1
    2eae:	e7e0      	b.n	2e72 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2eb0:	2030      	movs	r0, #48	; 0x30
    2eb2:	e7f8      	b.n	2ea6 <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2eb4:	9901      	ldr	r1, [sp, #4]
    2eb6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2eba:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2ebc:	f1bb 0f03 	cmp.w	fp, #3
    2ec0:	d002      	beq.n	2ec8 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2ec2:	b003      	add	sp, #12
    2ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2ec8:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2ecc:	e003      	b.n	2ed6 <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2ece:	9901      	ldr	r1, [sp, #4]
    2ed0:	2020      	movs	r0, #32
    2ed2:	47d0      	blx	sl
		while (remaining-- > 0) {
    2ed4:	4627      	mov	r7, r4
    2ed6:	1e7c      	subs	r4, r7, #1
    2ed8:	2f00      	cmp	r7, #0
    2eda:	dcf8      	bgt.n	2ece <_printk_dec_ulong+0x96>
    2edc:	e7f1      	b.n	2ec2 <_printk_dec_ulong+0x8a>
    2ede:	bf00      	nop
    2ee0:	3b9ac9ff 	.word	0x3b9ac9ff
    2ee4:	cccccccd 	.word	0xcccccccd

00002ee8 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2ee8:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2eea:	680c      	ldr	r4, [r1, #0]
    2eec:	b154      	cbz	r4, 2f04 <str_out+0x1c>
    2eee:	688b      	ldr	r3, [r1, #8]
    2ef0:	684a      	ldr	r2, [r1, #4]
    2ef2:	4293      	cmp	r3, r2
    2ef4:	da06      	bge.n	2f04 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2ef6:	3a01      	subs	r2, #1
    2ef8:	4293      	cmp	r3, r2
    2efa:	d008      	beq.n	2f0e <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2efc:	1c5a      	adds	r2, r3, #1
    2efe:	608a      	str	r2, [r1, #8]
    2f00:	54e0      	strb	r0, [r4, r3]
    2f02:	e002      	b.n	2f0a <str_out+0x22>
		ctx->count++;
    2f04:	688b      	ldr	r3, [r1, #8]
    2f06:	3301      	adds	r3, #1
    2f08:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2f0a:	bc10      	pop	{r4}
    2f0c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2f0e:	1c5a      	adds	r2, r3, #1
    2f10:	608a      	str	r2, [r1, #8]
    2f12:	2200      	movs	r2, #0
    2f14:	54e2      	strb	r2, [r4, r3]
    2f16:	e7f8      	b.n	2f0a <str_out+0x22>

00002f18 <__printk_hook_install>:
	_char_out = fn;
    2f18:	4b01      	ldr	r3, [pc, #4]	; (2f20 <__printk_hook_install+0x8>)
    2f1a:	6018      	str	r0, [r3, #0]
    2f1c:	4770      	bx	lr
    2f1e:	bf00      	nop
    2f20:	2000b908 	.word	0x2000b908

00002f24 <_vprintk>:
{
    2f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f28:	b084      	sub	sp, #16
    2f2a:	4607      	mov	r7, r0
    2f2c:	460e      	mov	r6, r1
    2f2e:	4614      	mov	r4, r2
    2f30:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2f32:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2f36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2f3a:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2f3c:	4645      	mov	r5, r8
	while (*fmt) {
    2f3e:	e104      	b.n	314a <_vprintk+0x226>
			switch (*fmt) {
    2f40:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2f44:	2b55      	cmp	r3, #85	; 0x55
    2f46:	f200 80f1 	bhi.w	312c <_vprintk+0x208>
    2f4a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f4e:	00ea      	.short	0x00ea
    2f50:	00ef00ef 	.word	0x00ef00ef
    2f54:	00ef00ef 	.word	0x00ef00ef
    2f58:	00ef00ef 	.word	0x00ef00ef
    2f5c:	010800ef 	.word	0x010800ef
    2f60:	00ef00ef 	.word	0x00ef00ef
    2f64:	00590056 	.word	0x00590056
    2f68:	00590059 	.word	0x00590059
    2f6c:	00590059 	.word	0x00590059
    2f70:	00590059 	.word	0x00590059
    2f74:	00590059 	.word	0x00590059
    2f78:	00ef00ef 	.word	0x00ef00ef
    2f7c:	00ef00ef 	.word	0x00ef00ef
    2f80:	00ef00ef 	.word	0x00ef00ef
    2f84:	00ef00ef 	.word	0x00ef00ef
    2f88:	00ef00ef 	.word	0x00ef00ef
    2f8c:	00ef00ef 	.word	0x00ef00ef
    2f90:	00ef00ef 	.word	0x00ef00ef
    2f94:	00ef00ef 	.word	0x00ef00ef
    2f98:	00ef00ef 	.word	0x00ef00ef
    2f9c:	00ef00ef 	.word	0x00ef00ef
    2fa0:	00ef00ef 	.word	0x00ef00ef
    2fa4:	00ef00ef 	.word	0x00ef00ef
    2fa8:	00ef00ef 	.word	0x00ef00ef
    2fac:	00ef00ef 	.word	0x00ef00ef
    2fb0:	00ef00ef 	.word	0x00ef00ef
    2fb4:	00ef00bc 	.word	0x00ef00bc
    2fb8:	00ef00ef 	.word	0x00ef00ef
    2fbc:	00ef00ef 	.word	0x00ef00ef
    2fc0:	00ef00ef 	.word	0x00ef00ef
    2fc4:	00ef00ef 	.word	0x00ef00ef
    2fc8:	00e200ef 	.word	0x00e200ef
    2fcc:	00ef0076 	.word	0x00ef0076
    2fd0:	00ef00ef 	.word	0x00ef00ef
    2fd4:	007600fd 	.word	0x007600fd
    2fd8:	00ef00ef 	.word	0x00ef00ef
    2fdc:	00ef0073 	.word	0x00ef0073
    2fe0:	00ef00ef 	.word	0x00ef00ef
    2fe4:	00ef00b2 	.word	0x00ef00b2
    2fe8:	00d500ef 	.word	0x00d500ef
    2fec:	009900ef 	.word	0x009900ef
    2ff0:	00ef00ef 	.word	0x00ef00ef
    2ff4:	00ef00bc 	.word	0x00ef00bc
    2ff8:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2ffa:	f1ba 0f00 	cmp.w	sl, #0
    2ffe:	db10      	blt.n	3022 <_vprintk+0xfe>
				if (min_width < 0) {
    3000:	f1ba 0f00 	cmp.w	sl, #0
    3004:	db13      	blt.n	302e <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    3006:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    300a:	ea4f 034a 	mov.w	r3, sl, lsl #1
    300e:	4418      	add	r0, r3
    3010:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    3014:	f1b9 0f00 	cmp.w	r9, #0
    3018:	f040 8096 	bne.w	3148 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    301c:	f04f 0902 	mov.w	r9, #2
    3020:	e092      	b.n	3148 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    3022:	f1b9 0f00 	cmp.w	r9, #0
    3026:	d1eb      	bne.n	3000 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    3028:	f04f 0901 	mov.w	r9, #1
    302c:	e08c      	b.n	3148 <_vprintk+0x224>
					min_width = *fmt - '0';
    302e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    3032:	e7ef      	b.n	3014 <_vprintk+0xf0>
				long_ctr++;
    3034:	f108 0801 	add.w	r8, r8, #1
    3038:	e086      	b.n	3148 <_vprintk+0x224>
				if (long_ctr < 2) {
    303a:	f1b8 0f01 	cmp.w	r8, #1
    303e:	dd13      	ble.n	3068 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    3040:	9b03      	ldr	r3, [sp, #12]
    3042:	3307      	adds	r3, #7
    3044:	f023 0307 	bic.w	r3, r3, #7
    3048:	f103 0208 	add.w	r2, r3, #8
    304c:	9203      	str	r2, [sp, #12]
    304e:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    3050:	2d00      	cmp	r5, #0
    3052:	db0e      	blt.n	3072 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    3054:	f8cd a000 	str.w	sl, [sp]
    3058:	464b      	mov	r3, r9
    305a:	462a      	mov	r2, r5
    305c:	4631      	mov	r1, r6
    305e:	4638      	mov	r0, r7
    3060:	f7ff feea 	bl	2e38 <_printk_dec_ulong>
			might_format = 0;
    3064:	2500      	movs	r5, #0
				break;
    3066:	e06f      	b.n	3148 <_vprintk+0x224>
					d = va_arg(ap, long);
    3068:	9b03      	ldr	r3, [sp, #12]
    306a:	1d1a      	adds	r2, r3, #4
    306c:	9203      	str	r2, [sp, #12]
    306e:	681d      	ldr	r5, [r3, #0]
    3070:	e7ee      	b.n	3050 <_vprintk+0x12c>
					out((int)'-', ctx);
    3072:	4631      	mov	r1, r6
    3074:	202d      	movs	r0, #45	; 0x2d
    3076:	47b8      	blx	r7
					d = -d;
    3078:	426d      	negs	r5, r5
					min_width--;
    307a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    307e:	e7e9      	b.n	3054 <_vprintk+0x130>
				if (long_ctr < 2) {
    3080:	f1b8 0f01 	cmp.w	r8, #1
    3084:	dd10      	ble.n	30a8 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    3086:	9b03      	ldr	r3, [sp, #12]
    3088:	3307      	adds	r3, #7
    308a:	f023 0307 	bic.w	r3, r3, #7
    308e:	f103 0208 	add.w	r2, r3, #8
    3092:	9203      	str	r2, [sp, #12]
    3094:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    3096:	f8cd a000 	str.w	sl, [sp]
    309a:	464b      	mov	r3, r9
    309c:	4631      	mov	r1, r6
    309e:	4638      	mov	r0, r7
    30a0:	f7ff feca 	bl	2e38 <_printk_dec_ulong>
			might_format = 0;
    30a4:	2500      	movs	r5, #0
				break;
    30a6:	e04f      	b.n	3148 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    30a8:	9b03      	ldr	r3, [sp, #12]
    30aa:	1d1a      	adds	r2, r3, #4
    30ac:	9203      	str	r2, [sp, #12]
    30ae:	681a      	ldr	r2, [r3, #0]
    30b0:	e7f1      	b.n	3096 <_vprintk+0x172>
				  out('0', ctx);
    30b2:	4631      	mov	r1, r6
    30b4:	2030      	movs	r0, #48	; 0x30
    30b6:	47b8      	blx	r7
				  out('x', ctx);
    30b8:	4631      	mov	r1, r6
    30ba:	2078      	movs	r0, #120	; 0x78
    30bc:	47b8      	blx	r7
				  min_width = 8;
    30be:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    30c2:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    30c6:	f1b8 0f01 	cmp.w	r8, #1
    30ca:	dd10      	ble.n	30ee <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    30cc:	9b03      	ldr	r3, [sp, #12]
    30ce:	3307      	adds	r3, #7
    30d0:	f023 0307 	bic.w	r3, r3, #7
    30d4:	f103 0208 	add.w	r2, r3, #8
    30d8:	9203      	str	r2, [sp, #12]
    30da:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    30dc:	f8cd a000 	str.w	sl, [sp]
    30e0:	464b      	mov	r3, r9
    30e2:	4631      	mov	r1, r6
    30e4:	4638      	mov	r0, r7
    30e6:	f7ff fe59 	bl	2d9c <_printk_hex_ulong>
			might_format = 0;
    30ea:	2500      	movs	r5, #0
				break;
    30ec:	e02c      	b.n	3148 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    30ee:	9b03      	ldr	r3, [sp, #12]
    30f0:	1d1a      	adds	r2, r3, #4
    30f2:	9203      	str	r2, [sp, #12]
    30f4:	681a      	ldr	r2, [r3, #0]
    30f6:	e7f1      	b.n	30dc <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    30f8:	9b03      	ldr	r3, [sp, #12]
    30fa:	1d1a      	adds	r2, r3, #4
    30fc:	9203      	str	r2, [sp, #12]
    30fe:	681d      	ldr	r5, [r3, #0]
				while (*s)
    3100:	e002      	b.n	3108 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    3102:	3501      	adds	r5, #1
    3104:	4631      	mov	r1, r6
    3106:	47b8      	blx	r7
				while (*s)
    3108:	7828      	ldrb	r0, [r5, #0]
    310a:	2800      	cmp	r0, #0
    310c:	d1f9      	bne.n	3102 <_vprintk+0x1de>
			might_format = 0;
    310e:	2500      	movs	r5, #0
    3110:	e01a      	b.n	3148 <_vprintk+0x224>
				int c = va_arg(ap, int);
    3112:	9b03      	ldr	r3, [sp, #12]
    3114:	1d1a      	adds	r2, r3, #4
    3116:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    3118:	4631      	mov	r1, r6
    311a:	6818      	ldr	r0, [r3, #0]
    311c:	47b8      	blx	r7
			might_format = 0;
    311e:	2500      	movs	r5, #0
				break;
    3120:	e012      	b.n	3148 <_vprintk+0x224>
				out((int)'%', ctx);
    3122:	4631      	mov	r1, r6
    3124:	2025      	movs	r0, #37	; 0x25
    3126:	47b8      	blx	r7
			might_format = 0;
    3128:	2500      	movs	r5, #0
				break;
    312a:	e00d      	b.n	3148 <_vprintk+0x224>
				out((int)'%', ctx);
    312c:	4631      	mov	r1, r6
    312e:	2025      	movs	r0, #37	; 0x25
    3130:	47b8      	blx	r7
				out((int)*fmt, ctx);
    3132:	4631      	mov	r1, r6
    3134:	7820      	ldrb	r0, [r4, #0]
    3136:	47b8      	blx	r7
			might_format = 0;
    3138:	2500      	movs	r5, #0
				break;
    313a:	e005      	b.n	3148 <_vprintk+0x224>
				long_ctr = 0;
    313c:	46a8      	mov	r8, r5
				min_width = -1;
    313e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    3142:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    3146:	2501      	movs	r5, #1
		++fmt;
    3148:	3401      	adds	r4, #1
	while (*fmt) {
    314a:	7820      	ldrb	r0, [r4, #0]
    314c:	b150      	cbz	r0, 3164 <_vprintk+0x240>
		if (!might_format) {
    314e:	2d00      	cmp	r5, #0
    3150:	f47f aef6 	bne.w	2f40 <_vprintk+0x1c>
			if (*fmt != '%') {
    3154:	2825      	cmp	r0, #37	; 0x25
    3156:	d0f1      	beq.n	313c <_vprintk+0x218>
				out((int)*fmt, ctx);
    3158:	4631      	mov	r1, r6
    315a:	47b8      	blx	r7
    315c:	e7f4      	b.n	3148 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    315e:	f04f 0903 	mov.w	r9, #3
    3162:	e7f1      	b.n	3148 <_vprintk+0x224>
}
    3164:	b004      	add	sp, #16
    3166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000316c <vprintk>:
{
    316c:	b510      	push	{r4, lr}
    316e:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    3170:	ac02      	add	r4, sp, #8
    3172:	2300      	movs	r3, #0
    3174:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    3178:	460b      	mov	r3, r1
    317a:	4602      	mov	r2, r0
    317c:	4621      	mov	r1, r4
    317e:	4803      	ldr	r0, [pc, #12]	; (318c <vprintk+0x20>)
    3180:	f7ff fed0 	bl	2f24 <_vprintk>
}
    3184:	9801      	ldr	r0, [sp, #4]
    3186:	b002      	add	sp, #8
    3188:	bd10      	pop	{r4, pc}
    318a:	bf00      	nop
    318c:	00002d89 	.word	0x00002d89

00003190 <printk>:
{
    3190:	b40f      	push	{r0, r1, r2, r3}
    3192:	b500      	push	{lr}
    3194:	b083      	sub	sp, #12
    3196:	a904      	add	r1, sp, #16
    3198:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    319c:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    319e:	f7ff ffe5 	bl	316c <vprintk>
}
    31a2:	b003      	add	sp, #12
    31a4:	f85d eb04 	ldr.w	lr, [sp], #4
    31a8:	b004      	add	sp, #16
    31aa:	4770      	bx	lr

000031ac <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    31ac:	b40c      	push	{r2, r3}
    31ae:	b510      	push	{r4, lr}
    31b0:	b084      	sub	sp, #16
    31b2:	4604      	mov	r4, r0
    31b4:	ab06      	add	r3, sp, #24
    31b6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    31ba:	9001      	str	r0, [sp, #4]
    31bc:	9102      	str	r1, [sp, #8]
    31be:	2100      	movs	r1, #0
    31c0:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    31c2:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    31c4:	a901      	add	r1, sp, #4
    31c6:	4807      	ldr	r0, [pc, #28]	; (31e4 <snprintk+0x38>)
    31c8:	f7ff feac 	bl	2f24 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    31cc:	9b03      	ldr	r3, [sp, #12]
    31ce:	9a02      	ldr	r2, [sp, #8]
    31d0:	4293      	cmp	r3, r2
    31d2:	da01      	bge.n	31d8 <snprintk+0x2c>
		str[ctx.count] = '\0';
    31d4:	2200      	movs	r2, #0
    31d6:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    31d8:	9803      	ldr	r0, [sp, #12]
    31da:	b004      	add	sp, #16
    31dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    31e0:	b002      	add	sp, #8
    31e2:	4770      	bx	lr
    31e4:	00002ee9 	.word	0x00002ee9

000031e8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    31e8:	4770      	bx	lr

000031ea <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    31ea:	428b      	cmp	r3, r1
    31ec:	d901      	bls.n	31f2 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    31ee:	2000      	movs	r0, #0
    31f0:	4770      	bx	lr
{
    31f2:	b510      	push	{r4, lr}
    31f4:	461c      	mov	r4, r3
    31f6:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    31f8:	461a      	mov	r2, r3
    31fa:	f7fd f861 	bl	2c0 <memcpy>
		return from_len;
    31fe:	4620      	mov	r0, r4
    3200:	bd10      	pop	{r4, pc}

00003202 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    3202:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    3204:	f028 ff3a 	bl	2c07c <memset>
    3208:	bd08      	pop	{r3, pc}

0000320a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    320a:	09c3      	lsrs	r3, r0, #7
    320c:	005a      	lsls	r2, r3, #1
    320e:	4413      	add	r3, r2
    3210:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3214:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    3218:	b2c0      	uxtb	r0, r0
    321a:	4770      	bx	lr

0000321c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    321c:	b4f0      	push	{r4, r5, r6, r7}
    321e:	b08c      	sub	sp, #48	; 0x30
    3220:	4604      	mov	r4, r0
    3222:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    3224:	ad01      	add	r5, sp, #4
    3226:	4e2a      	ldr	r6, [pc, #168]	; (32d0 <tc_aes128_set_encrypt_key+0xb4>)
    3228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    322a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    322c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    322e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3230:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3234:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    3238:	2c00      	cmp	r4, #0
    323a:	d044      	beq.n	32c6 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    323c:	2f00      	cmp	r7, #0
    323e:	d044      	beq.n	32ca <tc_aes128_set_encrypt_key+0xae>
    3240:	2200      	movs	r2, #0
    3242:	e00f      	b.n	3264 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3244:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    3248:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    324c:	784b      	ldrb	r3, [r1, #1]
    324e:	041b      	lsls	r3, r3, #16
    3250:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3254:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3256:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    325a:	78c9      	ldrb	r1, [r1, #3]
    325c:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    325e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    3262:	3201      	adds	r2, #1
    3264:	2a03      	cmp	r2, #3
    3266:	d9ed      	bls.n	3244 <tc_aes128_set_encrypt_key+0x28>
    3268:	e006      	b.n	3278 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    326a:	1f11      	subs	r1, r2, #4
    326c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3270:	404b      	eors	r3, r1
    3272:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3276:	3201      	adds	r2, #1
    3278:	2a2b      	cmp	r2, #43	; 0x2b
    327a:	d820      	bhi.n	32be <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    327c:	1e53      	subs	r3, r2, #1
    327e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    3282:	f012 0f03 	tst.w	r2, #3
    3286:	d1f0      	bne.n	326a <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    3288:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    328c:	0e19      	lsrs	r1, r3, #24
    328e:	4811      	ldr	r0, [pc, #68]	; (32d4 <tc_aes128_set_encrypt_key+0xb8>)
    3290:	5c45      	ldrb	r5, [r0, r1]
    3292:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3296:	5c41      	ldrb	r1, [r0, r1]
    3298:	0409      	lsls	r1, r1, #16
    329a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    329e:	f3c3 2507 	ubfx	r5, r3, #8, #8
    32a2:	5d45      	ldrb	r5, [r0, r5]
    32a4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    32a8:	b2db      	uxtb	r3, r3
    32aa:	5cc3      	ldrb	r3, [r0, r3]
    32ac:	4319      	orrs	r1, r3
    32ae:	f022 0303 	bic.w	r3, r2, #3
    32b2:	a80c      	add	r0, sp, #48	; 0x30
    32b4:	4403      	add	r3, r0
    32b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    32ba:	404b      	eors	r3, r1
    32bc:	e7d5      	b.n	326a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    32be:	2001      	movs	r0, #1
}
    32c0:	b00c      	add	sp, #48	; 0x30
    32c2:	bcf0      	pop	{r4, r5, r6, r7}
    32c4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    32c6:	2000      	movs	r0, #0
    32c8:	e7fa      	b.n	32c0 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    32ca:	2000      	movs	r0, #0
    32cc:	e7f8      	b.n	32c0 <tc_aes128_set_encrypt_key+0xa4>
    32ce:	bf00      	nop
    32d0:	0002fe68 	.word	0x0002fe68
    32d4:	00030558 	.word	0x00030558

000032d8 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    32d8:	2800      	cmp	r0, #0
    32da:	f000 8367 	beq.w	39ac <tc_aes_encrypt+0x6d4>
{
    32de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32e2:	b088      	sub	sp, #32
    32e4:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    32e6:	2900      	cmp	r1, #0
    32e8:	f000 8362 	beq.w	39b0 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    32ec:	2a00      	cmp	r2, #0
    32ee:	f000 8361 	beq.w	39b4 <tc_aes_encrypt+0x6dc>
    32f2:	4617      	mov	r7, r2
    32f4:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    32f6:	2310      	movs	r3, #16
    32f8:	4619      	mov	r1, r3
    32fa:	eb0d 0003 	add.w	r0, sp, r3
    32fe:	f7ff ff74 	bl	31ea <_copy>
	add_round_key(state, s->words);
    3302:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3304:	683b      	ldr	r3, [r7, #0]
    3306:	f89d 2010 	ldrb.w	r2, [sp, #16]
    330a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    330e:	f88d 2010 	strb.w	r2, [sp, #16]
    3312:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3316:	f89d 1011 	ldrb.w	r1, [sp, #17]
    331a:	404a      	eors	r2, r1
    331c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3320:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3324:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3328:	404a      	eors	r2, r1
    332a:	f88d 2012 	strb.w	r2, [sp, #18]
    332e:	b2db      	uxtb	r3, r3
    3330:	f89d 2013 	ldrb.w	r2, [sp, #19]
    3334:	4053      	eors	r3, r2
    3336:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3340:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3344:	f88d 2014 	strb.w	r2, [sp, #20]
    3348:	f3c3 4207 	ubfx	r2, r3, #16, #8
    334c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3350:	404a      	eors	r2, r1
    3352:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3356:	f3c3 2207 	ubfx	r2, r3, #8, #8
    335a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    335e:	404a      	eors	r2, r1
    3360:	f88d 2016 	strb.w	r2, [sp, #22]
    3364:	b2db      	uxtb	r3, r3
    3366:	f89d 2017 	ldrb.w	r2, [sp, #23]
    336a:	4053      	eors	r3, r2
    336c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3370:	68bb      	ldr	r3, [r7, #8]
    3372:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3376:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    337a:	f88d 2018 	strb.w	r2, [sp, #24]
    337e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3382:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3386:	404a      	eors	r2, r1
    3388:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    338c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3390:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3394:	404a      	eors	r2, r1
    3396:	f88d 201a 	strb.w	r2, [sp, #26]
    339a:	b2db      	uxtb	r3, r3
    339c:	f89d 201b 	ldrb.w	r2, [sp, #27]
    33a0:	4053      	eors	r3, r2
    33a2:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    33a6:	68fb      	ldr	r3, [r7, #12]
    33a8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    33ac:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    33b0:	f88d 201c 	strb.w	r2, [sp, #28]
    33b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    33b8:	f89d 101d 	ldrb.w	r1, [sp, #29]
    33bc:	404a      	eors	r2, r1
    33be:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    33c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    33c6:	f89d 101e 	ldrb.w	r1, [sp, #30]
    33ca:	404a      	eors	r2, r1
    33cc:	f88d 201e 	strb.w	r2, [sp, #30]
    33d0:	b2db      	uxtb	r3, r3
    33d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    33d6:	4053      	eors	r3, r2
    33d8:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    33dc:	2500      	movs	r5, #0
    33de:	e210      	b.n	3802 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    33e0:	a904      	add	r1, sp, #16
    33e2:	5ccc      	ldrb	r4, [r1, r3]
    33e4:	4a02      	ldr	r2, [pc, #8]	; (33f0 <tc_aes_encrypt+0x118>)
    33e6:	5d14      	ldrb	r4, [r2, r4]
    33e8:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    33ea:	3301      	adds	r3, #1
    33ec:	e002      	b.n	33f4 <tc_aes_encrypt+0x11c>
    33ee:	bf00      	nop
    33f0:	00030558 	.word	0x00030558
    33f4:	2b0f      	cmp	r3, #15
    33f6:	d9f3      	bls.n	33e0 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    33f8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    33fc:	f88d 3000 	strb.w	r3, [sp]
    3400:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3404:	f88d 3001 	strb.w	r3, [sp, #1]
    3408:	f89d 301a 	ldrb.w	r3, [sp, #26]
    340c:	f88d 3002 	strb.w	r3, [sp, #2]
    3410:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3414:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3418:	f89d 3014 	ldrb.w	r3, [sp, #20]
    341c:	f88d 3004 	strb.w	r3, [sp, #4]
    3420:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3424:	f88d 3005 	strb.w	r3, [sp, #5]
    3428:	f89d 301e 	ldrb.w	r3, [sp, #30]
    342c:	f88d 3006 	strb.w	r3, [sp, #6]
    3430:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3434:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3438:	f89d 3018 	ldrb.w	r3, [sp, #24]
    343c:	f88d 3008 	strb.w	r3, [sp, #8]
    3440:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3444:	f88d 3009 	strb.w	r3, [sp, #9]
    3448:	f89d 3012 	ldrb.w	r3, [sp, #18]
    344c:	f88d 300a 	strb.w	r3, [sp, #10]
    3450:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3454:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3458:	f89d 301c 	ldrb.w	r3, [sp, #28]
    345c:	f88d 300c 	strb.w	r3, [sp, #12]
    3460:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3464:	f88d 300d 	strb.w	r3, [sp, #13]
    3468:	f89d 3016 	ldrb.w	r3, [sp, #22]
    346c:	f88d 300e 	strb.w	r3, [sp, #14]
    3470:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3474:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3478:	2310      	movs	r3, #16
    347a:	466a      	mov	r2, sp
    347c:	4619      	mov	r1, r3
    347e:	eb0d 0003 	add.w	r0, sp, r3
    3482:	f7ff feb2 	bl	31ea <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3486:	f89d 0010 	ldrb.w	r0, [sp, #16]
    348a:	f7ff febe 	bl	320a <_double_byte>
    348e:	4604      	mov	r4, r0
    3490:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3494:	f7ff feb9 	bl	320a <_double_byte>
    3498:	f89d 1011 	ldrb.w	r1, [sp, #17]
    349c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    34a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    34a4:	4048      	eors	r0, r1
    34a6:	4044      	eors	r4, r0
    34a8:	4062      	eors	r2, r4
    34aa:	4053      	eors	r3, r2
    34ac:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    34b0:	f89d 4010 	ldrb.w	r4, [sp, #16]
    34b4:	4608      	mov	r0, r1
    34b6:	f7ff fea8 	bl	320a <_double_byte>
    34ba:	4044      	eors	r4, r0
    34bc:	b2e4      	uxtb	r4, r4
    34be:	f89d 0012 	ldrb.w	r0, [sp, #18]
    34c2:	f7ff fea2 	bl	320a <_double_byte>
    34c6:	f89d 2012 	ldrb.w	r2, [sp, #18]
    34ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    34ce:	4050      	eors	r0, r2
    34d0:	4044      	eors	r4, r0
    34d2:	405c      	eors	r4, r3
    34d4:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    34d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
    34dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
    34e0:	4044      	eors	r4, r0
    34e2:	4610      	mov	r0, r2
    34e4:	f7ff fe91 	bl	320a <_double_byte>
    34e8:	4044      	eors	r4, r0
    34ea:	b2e4      	uxtb	r4, r4
    34ec:	f89d 0013 	ldrb.w	r0, [sp, #19]
    34f0:	f7ff fe8b 	bl	320a <_double_byte>
    34f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    34f8:	4058      	eors	r0, r3
    34fa:	4044      	eors	r4, r0
    34fc:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3500:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3504:	f7ff fe81 	bl	320a <_double_byte>
    3508:	f89d 2010 	ldrb.w	r2, [sp, #16]
    350c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3510:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3514:	4050      	eors	r0, r2
    3516:	4043      	eors	r3, r0
    3518:	405c      	eors	r4, r3
    351a:	b2e4      	uxtb	r4, r4
    351c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3520:	f7ff fe73 	bl	320a <_double_byte>
    3524:	4060      	eors	r0, r4
    3526:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    352a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    352e:	f7ff fe6c 	bl	320a <_double_byte>
    3532:	4604      	mov	r4, r0
    3534:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3538:	f7ff fe67 	bl	320a <_double_byte>
    353c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3540:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3544:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3548:	4048      	eors	r0, r1
    354a:	4044      	eors	r4, r0
    354c:	4062      	eors	r2, r4
    354e:	4053      	eors	r3, r2
    3550:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3554:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3558:	4608      	mov	r0, r1
    355a:	f7ff fe56 	bl	320a <_double_byte>
    355e:	4044      	eors	r4, r0
    3560:	b2e4      	uxtb	r4, r4
    3562:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3566:	f7ff fe50 	bl	320a <_double_byte>
    356a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    356e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3572:	4050      	eors	r0, r2
    3574:	4044      	eors	r4, r0
    3576:	405c      	eors	r4, r3
    3578:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    357c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3580:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3584:	4044      	eors	r4, r0
    3586:	4610      	mov	r0, r2
    3588:	f7ff fe3f 	bl	320a <_double_byte>
    358c:	4044      	eors	r4, r0
    358e:	b2e4      	uxtb	r4, r4
    3590:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3594:	f7ff fe39 	bl	320a <_double_byte>
    3598:	f89d 3017 	ldrb.w	r3, [sp, #23]
    359c:	4058      	eors	r0, r3
    359e:	4044      	eors	r4, r0
    35a0:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    35a4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    35a8:	f7ff fe2f 	bl	320a <_double_byte>
    35ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
    35b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    35b4:	f89d 4016 	ldrb.w	r4, [sp, #22]
    35b8:	4050      	eors	r0, r2
    35ba:	4043      	eors	r3, r0
    35bc:	405c      	eors	r4, r3
    35be:	b2e4      	uxtb	r4, r4
    35c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    35c4:	f7ff fe21 	bl	320a <_double_byte>
    35c8:	4060      	eors	r0, r4
    35ca:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    35ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
    35d2:	f7ff fe1a 	bl	320a <_double_byte>
    35d6:	4604      	mov	r4, r0
    35d8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    35dc:	f7ff fe15 	bl	320a <_double_byte>
    35e0:	f89d 1019 	ldrb.w	r1, [sp, #25]
    35e4:	f89d 201a 	ldrb.w	r2, [sp, #26]
    35e8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35ec:	4048      	eors	r0, r1
    35ee:	4044      	eors	r4, r0
    35f0:	4062      	eors	r2, r4
    35f2:	4053      	eors	r3, r2
    35f4:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    35f8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    35fc:	4608      	mov	r0, r1
    35fe:	f7ff fe04 	bl	320a <_double_byte>
    3602:	4044      	eors	r4, r0
    3604:	b2e4      	uxtb	r4, r4
    3606:	f89d 001a 	ldrb.w	r0, [sp, #26]
    360a:	f7ff fdfe 	bl	320a <_double_byte>
    360e:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3612:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3616:	4050      	eors	r0, r2
    3618:	4044      	eors	r4, r0
    361a:	405c      	eors	r4, r3
    361c:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3620:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3624:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3628:	4044      	eors	r4, r0
    362a:	4610      	mov	r0, r2
    362c:	f7ff fded 	bl	320a <_double_byte>
    3630:	4044      	eors	r4, r0
    3632:	b2e4      	uxtb	r4, r4
    3634:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3638:	f7ff fde7 	bl	320a <_double_byte>
    363c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3640:	4058      	eors	r0, r3
    3642:	4044      	eors	r4, r0
    3644:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3648:	f89d 0018 	ldrb.w	r0, [sp, #24]
    364c:	f7ff fddd 	bl	320a <_double_byte>
    3650:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3654:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3658:	f89d 401a 	ldrb.w	r4, [sp, #26]
    365c:	4050      	eors	r0, r2
    365e:	4043      	eors	r3, r0
    3660:	405c      	eors	r4, r3
    3662:	b2e4      	uxtb	r4, r4
    3664:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3668:	f7ff fdcf 	bl	320a <_double_byte>
    366c:	4060      	eors	r0, r4
    366e:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3672:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3676:	f7ff fdc8 	bl	320a <_double_byte>
    367a:	4604      	mov	r4, r0
    367c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3680:	f7ff fdc3 	bl	320a <_double_byte>
    3684:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3688:	f89d 201e 	ldrb.w	r2, [sp, #30]
    368c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3690:	4048      	eors	r0, r1
    3692:	4044      	eors	r4, r0
    3694:	4062      	eors	r2, r4
    3696:	4053      	eors	r3, r2
    3698:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    369c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    36a0:	4608      	mov	r0, r1
    36a2:	f7ff fdb2 	bl	320a <_double_byte>
    36a6:	4044      	eors	r4, r0
    36a8:	b2e4      	uxtb	r4, r4
    36aa:	f89d 001e 	ldrb.w	r0, [sp, #30]
    36ae:	f7ff fdac 	bl	320a <_double_byte>
    36b2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    36b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36ba:	4050      	eors	r0, r2
    36bc:	4044      	eors	r4, r0
    36be:	405c      	eors	r4, r3
    36c0:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    36c4:	f89d 401c 	ldrb.w	r4, [sp, #28]
    36c8:	f89d 001d 	ldrb.w	r0, [sp, #29]
    36cc:	4044      	eors	r4, r0
    36ce:	4610      	mov	r0, r2
    36d0:	f7ff fd9b 	bl	320a <_double_byte>
    36d4:	4044      	eors	r4, r0
    36d6:	b2e4      	uxtb	r4, r4
    36d8:	f89d 001f 	ldrb.w	r0, [sp, #31]
    36dc:	f7ff fd95 	bl	320a <_double_byte>
    36e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36e4:	4058      	eors	r0, r3
    36e6:	4044      	eors	r4, r0
    36e8:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    36ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
    36f0:	f7ff fd8b 	bl	320a <_double_byte>
    36f4:	f89d 201c 	ldrb.w	r2, [sp, #28]
    36f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    36fc:	f89d 401e 	ldrb.w	r4, [sp, #30]
    3700:	4050      	eors	r0, r2
    3702:	4043      	eors	r3, r0
    3704:	405c      	eors	r4, r3
    3706:	b2e4      	uxtb	r4, r4
    3708:	f89d 001f 	ldrb.w	r0, [sp, #31]
    370c:	f7ff fd7d 	bl	320a <_double_byte>
    3710:	4060      	eors	r0, r4
    3712:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3716:	2310      	movs	r3, #16
    3718:	466a      	mov	r2, sp
    371a:	4619      	mov	r1, r3
    371c:	eb0d 0003 	add.w	r0, sp, r3
    3720:	f7ff fd63 	bl	31ea <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3724:	3501      	adds	r5, #1
    3726:	012b      	lsls	r3, r5, #4
    3728:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    372a:	58f3      	ldr	r3, [r6, r3]
    372c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3730:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3734:	f88d 1010 	strb.w	r1, [sp, #16]
    3738:	f3c3 4107 	ubfx	r1, r3, #16, #8
    373c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3740:	4041      	eors	r1, r0
    3742:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3746:	f3c3 2107 	ubfx	r1, r3, #8, #8
    374a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    374e:	4041      	eors	r1, r0
    3750:	f88d 1012 	strb.w	r1, [sp, #18]
    3754:	b2db      	uxtb	r3, r3
    3756:	f89d 1013 	ldrb.w	r1, [sp, #19]
    375a:	404b      	eors	r3, r1
    375c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3760:	6853      	ldr	r3, [r2, #4]
    3762:	f89d 1014 	ldrb.w	r1, [sp, #20]
    3766:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    376a:	f88d 1014 	strb.w	r1, [sp, #20]
    376e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3772:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3776:	4041      	eors	r1, r0
    3778:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    377c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3780:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3784:	4041      	eors	r1, r0
    3786:	f88d 1016 	strb.w	r1, [sp, #22]
    378a:	b2db      	uxtb	r3, r3
    378c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3790:	404b      	eors	r3, r1
    3792:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3796:	6893      	ldr	r3, [r2, #8]
    3798:	f89d 1018 	ldrb.w	r1, [sp, #24]
    379c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    37a0:	f88d 1018 	strb.w	r1, [sp, #24]
    37a4:	f3c3 4107 	ubfx	r1, r3, #16, #8
    37a8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    37ac:	4041      	eors	r1, r0
    37ae:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    37b2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    37b6:	f89d 001a 	ldrb.w	r0, [sp, #26]
    37ba:	4041      	eors	r1, r0
    37bc:	f88d 101a 	strb.w	r1, [sp, #26]
    37c0:	b2db      	uxtb	r3, r3
    37c2:	f89d 101b 	ldrb.w	r1, [sp, #27]
    37c6:	404b      	eors	r3, r1
    37c8:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    37cc:	68d3      	ldr	r3, [r2, #12]
    37ce:	f89d 201c 	ldrb.w	r2, [sp, #28]
    37d2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    37d6:	f88d 201c 	strb.w	r2, [sp, #28]
    37da:	f3c3 4207 	ubfx	r2, r3, #16, #8
    37de:	f89d 101d 	ldrb.w	r1, [sp, #29]
    37e2:	404a      	eors	r2, r1
    37e4:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    37e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    37ec:	f89d 101e 	ldrb.w	r1, [sp, #30]
    37f0:	404a      	eors	r2, r1
    37f2:	f88d 201e 	strb.w	r2, [sp, #30]
    37f6:	b2db      	uxtb	r3, r3
    37f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    37fc:	4053      	eors	r3, r2
    37fe:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    3802:	2d08      	cmp	r5, #8
    3804:	d801      	bhi.n	380a <tc_aes_encrypt+0x532>
    3806:	2300      	movs	r3, #0
    3808:	e5f4      	b.n	33f4 <tc_aes_encrypt+0x11c>
    380a:	2300      	movs	r3, #0
    380c:	e005      	b.n	381a <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    380e:	aa04      	add	r2, sp, #16
    3810:	5cd1      	ldrb	r1, [r2, r3]
    3812:	4869      	ldr	r0, [pc, #420]	; (39b8 <tc_aes_encrypt+0x6e0>)
    3814:	5c41      	ldrb	r1, [r0, r1]
    3816:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3818:	3301      	adds	r3, #1
    381a:	2b0f      	cmp	r3, #15
    381c:	d9f7      	bls.n	380e <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    381e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3822:	f88d 3000 	strb.w	r3, [sp]
    3826:	f89d 3015 	ldrb.w	r3, [sp, #21]
    382a:	f88d 3001 	strb.w	r3, [sp, #1]
    382e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3832:	f88d 3002 	strb.w	r3, [sp, #2]
    3836:	f89d 301f 	ldrb.w	r3, [sp, #31]
    383a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    383e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3842:	f88d 3004 	strb.w	r3, [sp, #4]
    3846:	f89d 3019 	ldrb.w	r3, [sp, #25]
    384a:	f88d 3005 	strb.w	r3, [sp, #5]
    384e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3852:	f88d 3006 	strb.w	r3, [sp, #6]
    3856:	f89d 3013 	ldrb.w	r3, [sp, #19]
    385a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    385e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3862:	f88d 3008 	strb.w	r3, [sp, #8]
    3866:	f89d 301d 	ldrb.w	r3, [sp, #29]
    386a:	f88d 3009 	strb.w	r3, [sp, #9]
    386e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3872:	f88d 300a 	strb.w	r3, [sp, #10]
    3876:	f89d 3017 	ldrb.w	r3, [sp, #23]
    387a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    387e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3882:	f88d 300c 	strb.w	r3, [sp, #12]
    3886:	f89d 3011 	ldrb.w	r3, [sp, #17]
    388a:	f88d 300d 	strb.w	r3, [sp, #13]
    388e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3892:	f88d 300e 	strb.w	r3, [sp, #14]
    3896:	f89d 301b 	ldrb.w	r3, [sp, #27]
    389a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    389e:	2310      	movs	r3, #16
    38a0:	466a      	mov	r2, sp
    38a2:	4619      	mov	r1, r3
    38a4:	eb0d 0003 	add.w	r0, sp, r3
    38a8:	f7ff fc9f 	bl	31ea <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    38ac:	1c6b      	adds	r3, r5, #1
    38ae:	011b      	lsls	r3, r3, #4
    38b0:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    38b2:	58fb      	ldr	r3, [r7, r3]
    38b4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    38b8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    38bc:	f88d 1010 	strb.w	r1, [sp, #16]
    38c0:	f3c3 4107 	ubfx	r1, r3, #16, #8
    38c4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    38c8:	4041      	eors	r1, r0
    38ca:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    38ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
    38d2:	f89d 0012 	ldrb.w	r0, [sp, #18]
    38d6:	4041      	eors	r1, r0
    38d8:	f88d 1012 	strb.w	r1, [sp, #18]
    38dc:	b2db      	uxtb	r3, r3
    38de:	f89d 1013 	ldrb.w	r1, [sp, #19]
    38e2:	404b      	eors	r3, r1
    38e4:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    38e8:	6853      	ldr	r3, [r2, #4]
    38ea:	f89d 1014 	ldrb.w	r1, [sp, #20]
    38ee:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    38f2:	f88d 1014 	strb.w	r1, [sp, #20]
    38f6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    38fa:	f89d 0015 	ldrb.w	r0, [sp, #21]
    38fe:	4041      	eors	r1, r0
    3900:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3904:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3908:	f89d 0016 	ldrb.w	r0, [sp, #22]
    390c:	4041      	eors	r1, r0
    390e:	f88d 1016 	strb.w	r1, [sp, #22]
    3912:	b2db      	uxtb	r3, r3
    3914:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3918:	404b      	eors	r3, r1
    391a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    391e:	6893      	ldr	r3, [r2, #8]
    3920:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3924:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3928:	f88d 1018 	strb.w	r1, [sp, #24]
    392c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3930:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3934:	4041      	eors	r1, r0
    3936:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    393a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    393e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3942:	4041      	eors	r1, r0
    3944:	f88d 101a 	strb.w	r1, [sp, #26]
    3948:	b2db      	uxtb	r3, r3
    394a:	f89d 101b 	ldrb.w	r1, [sp, #27]
    394e:	404b      	eors	r3, r1
    3950:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3954:	68d3      	ldr	r3, [r2, #12]
    3956:	f89d 201c 	ldrb.w	r2, [sp, #28]
    395a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    395e:	f88d 201c 	strb.w	r2, [sp, #28]
    3962:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3966:	f89d 101d 	ldrb.w	r1, [sp, #29]
    396a:	404a      	eors	r2, r1
    396c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3970:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3974:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3978:	404a      	eors	r2, r1
    397a:	f88d 201e 	strb.w	r2, [sp, #30]
    397e:	b2db      	uxtb	r3, r3
    3980:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3984:	4053      	eors	r3, r2
    3986:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    398a:	2310      	movs	r3, #16
    398c:	eb0d 0203 	add.w	r2, sp, r3
    3990:	4619      	mov	r1, r3
    3992:	4640      	mov	r0, r8
    3994:	f7ff fc29 	bl	31ea <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3998:	2210      	movs	r2, #16
    399a:	2100      	movs	r1, #0
    399c:	eb0d 0002 	add.w	r0, sp, r2
    39a0:	f7ff fc2f 	bl	3202 <_set>

	return TC_CRYPTO_SUCCESS;
    39a4:	2001      	movs	r0, #1
}
    39a6:	b008      	add	sp, #32
    39a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    39ac:	2000      	movs	r0, #0
    39ae:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    39b0:	2000      	movs	r0, #0
    39b2:	e7f8      	b.n	39a6 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    39b4:	2000      	movs	r0, #0
    39b6:	e7f6      	b.n	39a6 <tc_aes_encrypt+0x6ce>
    39b8:	00030558 	.word	0x00030558

000039bc <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    39bc:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    39be:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    39c2:	f991 3000 	ldrsb.w	r3, [r1]
    39c6:	2b00      	cmp	r3, #0
    39c8:	db0d      	blt.n	39e6 <gf_double+0x2a>
    39ca:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    39cc:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    39ce:	1e45      	subs	r5, r0, #1
    39d0:	7814      	ldrb	r4, [r2, #0]
    39d2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    39d6:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    39d8:	428a      	cmp	r2, r1
    39da:	d006      	beq.n	39ea <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    39dc:	7813      	ldrb	r3, [r2, #0]
    39de:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    39e0:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    39e2:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    39e4:	e7f3      	b.n	39ce <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    39e6:	2387      	movs	r3, #135	; 0x87
    39e8:	e7f0      	b.n	39cc <gf_double+0x10>
	}
}
    39ea:	bc30      	pop	{r4, r5}
    39ec:	4770      	bx	lr

000039ee <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    39ee:	b130      	cbz	r0, 39fe <tc_cmac_erase+0x10>
{
    39f0:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    39f2:	2258      	movs	r2, #88	; 0x58
    39f4:	2100      	movs	r1, #0
    39f6:	f7ff fc04 	bl	3202 <_set>

	return TC_CRYPTO_SUCCESS;
    39fa:	2001      	movs	r0, #1
    39fc:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    39fe:	2000      	movs	r0, #0
    3a00:	4770      	bx	lr

00003a02 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3a02:	b1a0      	cbz	r0, 3a2e <tc_cmac_init+0x2c>
{
    3a04:	b510      	push	{r4, lr}
    3a06:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3a08:	2210      	movs	r2, #16
    3a0a:	2100      	movs	r1, #0
    3a0c:	f7ff fbf9 	bl	3202 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    3a10:	2210      	movs	r2, #16
    3a12:	2100      	movs	r1, #0
    3a14:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3a18:	f7ff fbf3 	bl	3202 <_set>
	s->leftover_offset = 0;
    3a1c:	2300      	movs	r3, #0
    3a1e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    3a20:	2200      	movs	r2, #0
    3a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a26:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    3a2a:	2001      	movs	r0, #1
    3a2c:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    3a2e:	2000      	movs	r0, #0
    3a30:	4770      	bx	lr

00003a32 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    3a32:	b338      	cbz	r0, 3a84 <tc_cmac_setup+0x52>
{
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    3a38:	b331      	cbz	r1, 3a88 <tc_cmac_setup+0x56>
    3a3a:	4616      	mov	r6, r2
    3a3c:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    3a3e:	2258      	movs	r2, #88	; 0x58
    3a40:	2100      	movs	r1, #0
    3a42:	f7ff fbde 	bl	3202 <_set>
	s->sched = sched;
    3a46:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3a48:	4629      	mov	r1, r5
    3a4a:	4630      	mov	r0, r6
    3a4c:	f7ff fbe6 	bl	321c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3a50:	2210      	movs	r2, #16
    3a52:	2100      	movs	r1, #0
    3a54:	4620      	mov	r0, r4
    3a56:	f7ff fbd4 	bl	3202 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    3a5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3a5c:	4621      	mov	r1, r4
    3a5e:	4620      	mov	r0, r4
    3a60:	f7ff fc3a 	bl	32d8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    3a64:	f104 0510 	add.w	r5, r4, #16
    3a68:	4621      	mov	r1, r4
    3a6a:	4628      	mov	r0, r5
    3a6c:	f7ff ffa6 	bl	39bc <gf_double>
	gf_double (s->K2, s->K1);
    3a70:	4629      	mov	r1, r5
    3a72:	f104 0020 	add.w	r0, r4, #32
    3a76:	f7ff ffa1 	bl	39bc <gf_double>
	tc_cmac_init(s);
    3a7a:	4620      	mov	r0, r4
    3a7c:	f7ff ffc1 	bl	3a02 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3a80:	2001      	movs	r0, #1
    3a82:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3a84:	2000      	movs	r0, #0
    3a86:	4770      	bx	lr
    3a88:	2000      	movs	r0, #0
}
    3a8a:	bd70      	pop	{r4, r5, r6, pc}

00003a8c <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d05f      	beq.n	3b50 <tc_cmac_update+0xc4>
{
    3a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a92:	460d      	mov	r5, r1
    3a94:	4616      	mov	r6, r2
    3a96:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    3a98:	2a00      	cmp	r2, #0
    3a9a:	d05b      	beq.n	3b54 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3a9c:	2900      	cmp	r1, #0
    3a9e:	d05b      	beq.n	3b58 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3aa0:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3aa4:	ea52 0103 	orrs.w	r1, r2, r3
    3aa8:	d058      	beq.n	3b5c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    3aaa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3aae:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    3ab2:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    3ab6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3ab8:	2800      	cmp	r0, #0
    3aba:	d038      	beq.n	3b2e <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3abc:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3ac0:	42be      	cmp	r6, r7
    3ac2:	d30b      	bcc.n	3adc <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3ac4:	3030      	adds	r0, #48	; 0x30
    3ac6:	463b      	mov	r3, r7
    3ac8:	462a      	mov	r2, r5
    3aca:	4639      	mov	r1, r7
    3acc:	4420      	add	r0, r4
    3ace:	f7ff fb8c 	bl	31ea <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    3ad2:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3ad4:	443d      	add	r5, r7
		s->leftover_offset = 0;
    3ad6:	2300      	movs	r3, #0
    3ad8:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3ada:	e012      	b.n	3b02 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3adc:	3030      	adds	r0, #48	; 0x30
    3ade:	4633      	mov	r3, r6
    3ae0:	462a      	mov	r2, r5
    3ae2:	4631      	mov	r1, r6
    3ae4:	4420      	add	r0, r4
    3ae6:	f7ff fb80 	bl	31ea <_copy>
			s->leftover_offset += data_length;
    3aea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3aec:	4433      	add	r3, r6
    3aee:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    3af0:	2001      	movs	r0, #1
    3af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    3af4:	18e2      	adds	r2, r4, r3
    3af6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3afa:	5ce1      	ldrb	r1, [r4, r3]
    3afc:	404a      	eors	r2, r1
    3afe:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3b00:	3301      	adds	r3, #1
    3b02:	2b0f      	cmp	r3, #15
    3b04:	d9f6      	bls.n	3af4 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3b06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3b08:	4621      	mov	r1, r4
    3b0a:	4620      	mov	r0, r4
    3b0c:	f7ff fbe4 	bl	32d8 <tc_aes_encrypt>
    3b10:	e00d      	b.n	3b2e <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    3b12:	5cea      	ldrb	r2, [r5, r3]
    3b14:	5ce1      	ldrb	r1, [r4, r3]
    3b16:	404a      	eors	r2, r1
    3b18:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3b1a:	3301      	adds	r3, #1
    3b1c:	2b0f      	cmp	r3, #15
    3b1e:	d9f8      	bls.n	3b12 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3b20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3b22:	4621      	mov	r1, r4
    3b24:	4620      	mov	r0, r4
    3b26:	f7ff fbd7 	bl	32d8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    3b2a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    3b2c:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    3b2e:	2e10      	cmp	r6, #16
    3b30:	d901      	bls.n	3b36 <tc_cmac_update+0xaa>
    3b32:	2300      	movs	r3, #0
    3b34:	e7f2      	b.n	3b1c <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    3b36:	b90e      	cbnz	r6, 3b3c <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    3b38:	2001      	movs	r0, #1
}
    3b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    3b3c:	4633      	mov	r3, r6
    3b3e:	462a      	mov	r2, r5
    3b40:	4631      	mov	r1, r6
    3b42:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3b46:	f7ff fb50 	bl	31ea <_copy>
		s->leftover_offset = data_length;
    3b4a:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3b4c:	2001      	movs	r0, #1
    3b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3b50:	2000      	movs	r0, #0
    3b52:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    3b54:	2001      	movs	r0, #1
    3b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3b58:	2000      	movs	r0, #0
    3b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3b5c:	2000      	movs	r0, #0
    3b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003b60 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3b60:	b370      	cbz	r0, 3bc0 <tc_cmac_final+0x60>
{
    3b62:	b570      	push	{r4, r5, r6, lr}
    3b64:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    3b66:	b369      	cbz	r1, 3bc4 <tc_cmac_final+0x64>
    3b68:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    3b6a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3b6c:	2a10      	cmp	r2, #16
    3b6e:	d010      	beq.n	3b92 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3b70:	f102 0030 	add.w	r0, r2, #48	; 0x30
    3b74:	f1c2 0210 	rsb	r2, r2, #16
    3b78:	2100      	movs	r1, #0
    3b7a:	4428      	add	r0, r5
    3b7c:	f7ff fb41 	bl	3202 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3b80:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3b82:	442b      	add	r3, r5
    3b84:	2280      	movs	r2, #128	; 0x80
    3b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    3b8a:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3b8e:	2300      	movs	r3, #0
    3b90:	e00a      	b.n	3ba8 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3b92:	3110      	adds	r1, #16
    3b94:	e7fb      	b.n	3b8e <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    3b96:	18ea      	adds	r2, r5, r3
    3b98:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3b9c:	5ccc      	ldrb	r4, [r1, r3]
    3b9e:	4054      	eors	r4, r2
    3ba0:	5cea      	ldrb	r2, [r5, r3]
    3ba2:	4062      	eors	r2, r4
    3ba4:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3ba6:	3301      	adds	r3, #1
    3ba8:	2b0f      	cmp	r3, #15
    3baa:	d9f4      	bls.n	3b96 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3bac:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3bae:	4629      	mov	r1, r5
    3bb0:	4630      	mov	r0, r6
    3bb2:	f7ff fb91 	bl	32d8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    3bb6:	4628      	mov	r0, r5
    3bb8:	f7ff ff19 	bl	39ee <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3bbc:	2001      	movs	r0, #1
    3bbe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3bc0:	2000      	movs	r0, #0
    3bc2:	4770      	bx	lr
    3bc4:	2000      	movs	r0, #0
}
    3bc6:	bd70      	pop	{r4, r5, r6, pc}

00003bc8 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    3bc8:	2000      	movs	r0, #0
    3bca:	4770      	bx	lr

00003bcc <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3bcc:	e003      	b.n	3bd6 <mbedtls_zeroize+0xa>
    3bce:	2200      	movs	r2, #0
    3bd0:	7002      	strb	r2, [r0, #0]
    3bd2:	3001      	adds	r0, #1
    3bd4:	4619      	mov	r1, r3
    3bd6:	1e4b      	subs	r3, r1, #1
    3bd8:	2900      	cmp	r1, #0
    3bda:	d1f8      	bne.n	3bce <mbedtls_zeroize+0x2>
}
    3bdc:	4770      	bx	lr

00003bde <mbedtls_zeroize>:

#if !defined(MBEDTLS_ARC4_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3bde:	e003      	b.n	3be8 <mbedtls_zeroize+0xa>
    3be0:	2200      	movs	r2, #0
    3be2:	7002      	strb	r2, [r0, #0]
    3be4:	3001      	adds	r0, #1
    3be6:	4619      	mov	r1, r3
    3be8:	1e4b      	subs	r3, r1, #1
    3bea:	2900      	cmp	r1, #0
    3bec:	d1f8      	bne.n	3be0 <mbedtls_zeroize+0x2>
}
    3bee:	4770      	bx	lr

00003bf0 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3bf0:	e003      	b.n	3bfa <mbedtls_zeroize+0xa>
    3bf2:	2200      	movs	r2, #0
    3bf4:	7002      	strb	r2, [r0, #0]
    3bf6:	3001      	adds	r0, #1
    3bf8:	4619      	mov	r1, r3
    3bfa:	1e4b      	subs	r3, r1, #1
    3bfc:	2900      	cmp	r1, #0
    3bfe:	d1f8      	bne.n	3bf2 <mbedtls_zeroize+0x2>
}
    3c00:	4770      	bx	lr

00003c02 <mbedtls_zeroize>:

#if !defined(MBEDTLS_BLOWFISH_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c02:	e003      	b.n	3c0c <mbedtls_zeroize+0xa>
    3c04:	2200      	movs	r2, #0
    3c06:	7002      	strb	r2, [r0, #0]
    3c08:	3001      	adds	r0, #1
    3c0a:	4619      	mov	r1, r3
    3c0c:	1e4b      	subs	r3, r1, #1
    3c0e:	2900      	cmp	r1, #0
    3c10:	d1f8      	bne.n	3c04 <mbedtls_zeroize+0x2>
}
    3c12:	4770      	bx	lr

00003c14 <mbedtls_zeroize>:

#if !defined(MBEDTLS_CAMELLIA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c14:	e003      	b.n	3c1e <mbedtls_zeroize+0xa>
    3c16:	2200      	movs	r2, #0
    3c18:	7002      	strb	r2, [r0, #0]
    3c1a:	3001      	adds	r0, #1
    3c1c:	4619      	mov	r1, r3
    3c1e:	1e4b      	subs	r3, r1, #1
    3c20:	2900      	cmp	r1, #0
    3c22:	d1f8      	bne.n	3c16 <mbedtls_zeroize+0x2>
}
    3c24:	4770      	bx	lr

00003c26 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c26:	e003      	b.n	3c30 <mbedtls_zeroize+0xa>
    3c28:	2200      	movs	r2, #0
    3c2a:	7002      	strb	r2, [r0, #0]
    3c2c:	3001      	adds	r0, #1
    3c2e:	4619      	mov	r1, r3
    3c30:	1e4b      	subs	r3, r1, #1
    3c32:	2900      	cmp	r1, #0
    3c34:	d1f8      	bne.n	3c28 <mbedtls_zeroize+0x2>
}
    3c36:	4770      	bx	lr

00003c38 <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c38:	e003      	b.n	3c42 <mbedtls_zeroize+0xa>
    3c3a:	2200      	movs	r2, #0
    3c3c:	7002      	strb	r2, [r0, #0]
    3c3e:	3001      	adds	r0, #1
    3c40:	4619      	mov	r1, r3
    3c42:	1e4b      	subs	r3, r1, #1
    3c44:	2900      	cmp	r1, #0
    3c46:	d1f8      	bne.n	3c3a <mbedtls_zeroize+0x2>
}
    3c48:	4770      	bx	lr

00003c4a <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c4a:	e003      	b.n	3c54 <mbedtls_zeroize+0xa>
    3c4c:	2200      	movs	r2, #0
    3c4e:	7002      	strb	r2, [r0, #0]
    3c50:	3001      	adds	r0, #1
    3c52:	4619      	mov	r1, r3
    3c54:	1e4b      	subs	r3, r1, #1
    3c56:	2900      	cmp	r1, #0
    3c58:	d1f8      	bne.n	3c4c <mbedtls_zeroize+0x2>
}
    3c5a:	4770      	bx	lr

00003c5c <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3c5c:	e003      	b.n	3c66 <mbedtls_zeroize+0xa>
    3c5e:	2200      	movs	r2, #0
    3c60:	7002      	strb	r2, [r0, #0]
    3c62:	3001      	adds	r0, #1
    3c64:	4619      	mov	r1, r3
    3c66:	1e4b      	subs	r3, r1, #1
    3c68:	2900      	cmp	r1, #0
    3c6a:	d1f8      	bne.n	3c5e <mbedtls_zeroize+0x2>
}
    3c6c:	4770      	bx	lr

00003c6e <mbedtls_zeroize>:

#if !defined(MBEDTLS_DES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3c6e:	e003      	b.n	3c78 <mbedtls_zeroize+0xa>
    3c70:	2200      	movs	r2, #0
    3c72:	7002      	strb	r2, [r0, #0]
    3c74:	3001      	adds	r0, #1
    3c76:	4619      	mov	r1, r3
    3c78:	1e4b      	subs	r3, r1, #1
    3c7a:	2900      	cmp	r1, #0
    3c7c:	d1f8      	bne.n	3c70 <mbedtls_zeroize+0x2>
}
    3c7e:	4770      	bx	lr

00003c80 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3c80:	e003      	b.n	3c8a <mbedtls_zeroize+0xa>
    3c82:	2200      	movs	r2, #0
    3c84:	7002      	strb	r2, [r0, #0]
    3c86:	3001      	adds	r0, #1
    3c88:	4619      	mov	r1, r3
    3c8a:	1e4b      	subs	r3, r1, #1
    3c8c:	2900      	cmp	r1, #0
    3c8e:	d1f8      	bne.n	3c82 <mbedtls_zeroize+0x2>
}
    3c90:	4770      	bx	lr

00003c92 <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3c92:	e003      	b.n	3c9c <mbedtls_zeroize+0xa>
    3c94:	2200      	movs	r2, #0
    3c96:	7002      	strb	r2, [r0, #0]
    3c98:	3001      	adds	r0, #1
    3c9a:	4619      	mov	r1, r3
    3c9c:	1e4b      	subs	r3, r1, #1
    3c9e:	2900      	cmp	r1, #0
    3ca0:	d1f8      	bne.n	3c94 <mbedtls_zeroize+0x2>
}
    3ca2:	4770      	bx	lr

00003ca4 <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ca4:	e003      	b.n	3cae <mbedtls_zeroize+0xa>
    3ca6:	2200      	movs	r2, #0
    3ca8:	7002      	strb	r2, [r0, #0]
    3caa:	3001      	adds	r0, #1
    3cac:	4619      	mov	r1, r3
    3cae:	1e4b      	subs	r3, r1, #1
    3cb0:	2900      	cmp	r1, #0
    3cb2:	d1f8      	bne.n	3ca6 <mbedtls_zeroize+0x2>
}
    3cb4:	4770      	bx	lr

00003cb6 <mbedtls_zeroize>:
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3cb6:	e003      	b.n	3cc0 <mbedtls_zeroize+0xa>
    3cb8:	2200      	movs	r2, #0
    3cba:	7002      	strb	r2, [r0, #0]
    3cbc:	3001      	adds	r0, #1
    3cbe:	4619      	mov	r1, r3
    3cc0:	1e4b      	subs	r3, r1, #1
    3cc2:	2900      	cmp	r1, #0
    3cc4:	d1f8      	bne.n	3cb8 <mbedtls_zeroize+0x2>
}
    3cc6:	4770      	bx	lr

00003cc8 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3cc8:	e003      	b.n	3cd2 <mbedtls_zeroize+0xa>
    3cca:	2200      	movs	r2, #0
    3ccc:	7002      	strb	r2, [r0, #0]
    3cce:	3001      	adds	r0, #1
    3cd0:	4619      	mov	r1, r3
    3cd2:	1e4b      	subs	r3, r1, #1
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d1f8      	bne.n	3cca <mbedtls_zeroize+0x2>
}
    3cd8:	4770      	bx	lr

00003cda <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3cda:	e003      	b.n	3ce4 <mbedtls_zeroize+0xa>
    3cdc:	2200      	movs	r2, #0
    3cde:	7002      	strb	r2, [r0, #0]
    3ce0:	3001      	adds	r0, #1
    3ce2:	4619      	mov	r1, r3
    3ce4:	1e4b      	subs	r3, r1, #1
    3ce6:	2900      	cmp	r1, #0
    3ce8:	d1f8      	bne.n	3cdc <mbedtls_zeroize+0x2>
}
    3cea:	4770      	bx	lr

00003cec <mbedtls_zeroize>:

#if !defined(MBEDTLS_MD5_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3cec:	e003      	b.n	3cf6 <mbedtls_zeroize+0xa>
    3cee:	2200      	movs	r2, #0
    3cf0:	7002      	strb	r2, [r0, #0]
    3cf2:	3001      	adds	r0, #1
    3cf4:	4619      	mov	r1, r3
    3cf6:	1e4b      	subs	r3, r1, #1
    3cf8:	2900      	cmp	r1, #0
    3cfa:	d1f8      	bne.n	3cee <mbedtls_zeroize+0x2>
}
    3cfc:	4770      	bx	lr

00003cfe <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3cfe:	e003      	b.n	3d08 <mbedtls_zeroize+0xa>
    3d00:	2200      	movs	r2, #0
    3d02:	7002      	strb	r2, [r0, #0]
    3d04:	3001      	adds	r0, #1
    3d06:	4619      	mov	r1, r3
    3d08:	1e4b      	subs	r3, r1, #1
    3d0a:	2900      	cmp	r1, #0
    3d0c:	d1f8      	bne.n	3d00 <mbedtls_zeroize+0x2>
}
    3d0e:	4770      	bx	lr

00003d10 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d10:	e003      	b.n	3d1a <mbedtls_zeroize+0xa>
    3d12:	2200      	movs	r2, #0
    3d14:	7002      	strb	r2, [r0, #0]
    3d16:	3001      	adds	r0, #1
    3d18:	4619      	mov	r1, r3
    3d1a:	1e4b      	subs	r3, r1, #1
    3d1c:	2900      	cmp	r1, #0
    3d1e:	d1f8      	bne.n	3d12 <mbedtls_zeroize+0x2>
}
    3d20:	4770      	bx	lr

00003d22 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3d22:	e003      	b.n	3d2c <mbedtls_zeroize+0xa>
    3d24:	2200      	movs	r2, #0
    3d26:	7002      	strb	r2, [r0, #0]
    3d28:	3001      	adds	r0, #1
    3d2a:	4619      	mov	r1, r3
    3d2c:	1e4b      	subs	r3, r1, #1
    3d2e:	2900      	cmp	r1, #0
    3d30:	d1f8      	bne.n	3d24 <mbedtls_zeroize+0x2>
}
    3d32:	4770      	bx	lr

00003d34 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d34:	e003      	b.n	3d3e <mbedtls_zeroize+0xa>
    3d36:	2200      	movs	r2, #0
    3d38:	7002      	strb	r2, [r0, #0]
    3d3a:	3001      	adds	r0, #1
    3d3c:	4619      	mov	r1, r3
    3d3e:	1e4b      	subs	r3, r1, #1
    3d40:	2900      	cmp	r1, #0
    3d42:	d1f8      	bne.n	3d36 <mbedtls_zeroize+0x2>
}
    3d44:	4770      	bx	lr

00003d46 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d46:	e003      	b.n	3d50 <mbedtls_zeroize+0xa>
    3d48:	2200      	movs	r2, #0
    3d4a:	7002      	strb	r2, [r0, #0]
    3d4c:	3001      	adds	r0, #1
    3d4e:	4619      	mov	r1, r3
    3d50:	1e4b      	subs	r3, r1, #1
    3d52:	2900      	cmp	r1, #0
    3d54:	d1f8      	bne.n	3d48 <mbedtls_zeroize+0x2>
}
    3d56:	4770      	bx	lr

00003d58 <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d58:	e003      	b.n	3d62 <mbedtls_zeroize+0xa>
    3d5a:	2200      	movs	r2, #0
    3d5c:	7002      	strb	r2, [r0, #0]
    3d5e:	3001      	adds	r0, #1
    3d60:	4619      	mov	r1, r3
    3d62:	1e4b      	subs	r3, r1, #1
    3d64:	2900      	cmp	r1, #0
    3d66:	d1f8      	bne.n	3d5a <mbedtls_zeroize+0x2>
}
    3d68:	4770      	bx	lr

00003d6a <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d6a:	e003      	b.n	3d74 <mbedtls_zeroize+0xa>
    3d6c:	2200      	movs	r2, #0
    3d6e:	7002      	strb	r2, [r0, #0]
    3d70:	3001      	adds	r0, #1
    3d72:	4619      	mov	r1, r3
    3d74:	1e4b      	subs	r3, r1, #1
    3d76:	2900      	cmp	r1, #0
    3d78:	d1f8      	bne.n	3d6c <mbedtls_zeroize+0x2>
}
    3d7a:	4770      	bx	lr

00003d7c <mbedtls_zeroize>:

#if !defined(MBEDTLS_XTEA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3d7c:	e003      	b.n	3d86 <mbedtls_zeroize+0xa>
    3d7e:	2200      	movs	r2, #0
    3d80:	7002      	strb	r2, [r0, #0]
    3d82:	3001      	adds	r0, #1
    3d84:	4619      	mov	r1, r3
    3d86:	1e4b      	subs	r3, r1, #1
    3d88:	2900      	cmp	r1, #0
    3d8a:	d1f8      	bne.n	3d7e <mbedtls_zeroize+0x2>
}
    3d8c:	4770      	bx	lr

00003d8e <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3d8e:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3d90:	f44f 728c 	mov.w	r2, #280	; 0x118
    3d94:	2100      	movs	r1, #0
    3d96:	f028 f971 	bl	2c07c <memset>
    3d9a:	bd08      	pop	{r3, pc}

00003d9c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3d9c:	b128      	cbz	r0, 3daa <mbedtls_aes_free+0xe>
{
    3d9e:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3da0:	f44f 718c 	mov.w	r1, #280	; 0x118
    3da4:	f7ff ff12 	bl	3bcc <mbedtls_zeroize>
    3da8:	bd08      	pop	{r3, pc}
    3daa:	4770      	bx	lr

00003dac <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3dac:	2ac0      	cmp	r2, #192	; 0xc0
    3dae:	d00f      	beq.n	3dd0 <mbedtls_aes_setkey_enc+0x24>
    3db0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3db4:	d00f      	beq.n	3dd6 <mbedtls_aes_setkey_enc+0x2a>
    3db6:	2a80      	cmp	r2, #128	; 0x80
    3db8:	d002      	beq.n	3dc0 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3dba:	f06f 001f 	mvn.w	r0, #31
    3dbe:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3dc0:	230a      	movs	r3, #10
    3dc2:	6003      	str	r3, [r0, #0]
{
    3dc4:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3dc6:	f100 0308 	add.w	r3, r0, #8
    3dca:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3dcc:	2500      	movs	r5, #0
    3dce:	e015      	b.n	3dfc <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3dd0:	230c      	movs	r3, #12
    3dd2:	6003      	str	r3, [r0, #0]
    3dd4:	e7f6      	b.n	3dc4 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3dd6:	230e      	movs	r3, #14
    3dd8:	6003      	str	r3, [r0, #0]
    3dda:	e7f3      	b.n	3dc4 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3ddc:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3de0:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3de4:	7877      	ldrb	r7, [r6, #1]
    3de6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3dea:	78b7      	ldrb	r7, [r6, #2]
    3dec:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3df0:	78f6      	ldrb	r6, [r6, #3]
    3df2:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3df6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3dfa:	3501      	adds	r5, #1
    3dfc:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3e00:	d3ec      	bcc.n	3ddc <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3e02:	6802      	ldr	r2, [r0, #0]
    3e04:	2a0c      	cmp	r2, #12
    3e06:	d05d      	beq.n	3ec4 <mbedtls_aes_setkey_enc+0x118>
    3e08:	2a0e      	cmp	r2, #14
    3e0a:	f000 80a0 	beq.w	3f4e <mbedtls_aes_setkey_enc+0x1a2>
    3e0e:	2a0a      	cmp	r2, #10
    3e10:	d029      	beq.n	3e66 <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3e12:	2000      	movs	r0, #0
    3e14:	e025      	b.n	3e62 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3e16:	681a      	ldr	r2, [r3, #0]
    3e18:	494e      	ldr	r1, [pc, #312]	; (3f54 <mbedtls_aes_setkey_enc+0x1a8>)
    3e1a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3e1e:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3e20:	68d9      	ldr	r1, [r3, #12]
    3e22:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3e26:	484c      	ldr	r0, [pc, #304]	; (3f58 <mbedtls_aes_setkey_enc+0x1ac>)
    3e28:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3e2a:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3e2c:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3e30:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3e32:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3e36:	0e0d      	lsrs	r5, r1, #24
    3e38:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3e3a:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3e3e:	b2cd      	uxtb	r5, r1
    3e40:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3e42:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3e46:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3e48:	6858      	ldr	r0, [r3, #4]
    3e4a:	4042      	eors	r2, r0
    3e4c:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3e4e:	6898      	ldr	r0, [r3, #8]
    3e50:	4042      	eors	r2, r0
    3e52:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3e54:	404a      	eors	r2, r1
    3e56:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3e58:	3401      	adds	r4, #1
    3e5a:	3310      	adds	r3, #16
    3e5c:	2c09      	cmp	r4, #9
    3e5e:	d9da      	bls.n	3e16 <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3e60:	2000      	movs	r0, #0
}
    3e62:	bcf0      	pop	{r4, r5, r6, r7}
    3e64:	4770      	bx	lr
    switch( ctx->nr )
    3e66:	2400      	movs	r4, #0
    3e68:	e7f8      	b.n	3e5c <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3e6a:	681a      	ldr	r2, [r3, #0]
    3e6c:	4939      	ldr	r1, [pc, #228]	; (3f54 <mbedtls_aes_setkey_enc+0x1a8>)
    3e6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3e72:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3e74:	6959      	ldr	r1, [r3, #20]
    3e76:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3e7a:	4c37      	ldr	r4, [pc, #220]	; (3f58 <mbedtls_aes_setkey_enc+0x1ac>)
    3e7c:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3e7e:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3e80:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3e84:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3e86:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3e8a:	0e0d      	lsrs	r5, r1, #24
    3e8c:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3e8e:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3e92:	b2cd      	uxtb	r5, r1
    3e94:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3e96:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3e9a:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3e9c:	685c      	ldr	r4, [r3, #4]
    3e9e:	4062      	eors	r2, r4
    3ea0:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3ea2:	689c      	ldr	r4, [r3, #8]
    3ea4:	4062      	eors	r2, r4
    3ea6:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3ea8:	68dc      	ldr	r4, [r3, #12]
    3eaa:	4062      	eors	r2, r4
    3eac:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3eae:	691c      	ldr	r4, [r3, #16]
    3eb0:	4062      	eors	r2, r4
    3eb2:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3eb4:	404a      	eors	r2, r1
    3eb6:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3eb8:	3001      	adds	r0, #1
    3eba:	3318      	adds	r3, #24
    3ebc:	2807      	cmp	r0, #7
    3ebe:	d9d4      	bls.n	3e6a <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3ec0:	2000      	movs	r0, #0
    3ec2:	e7ce      	b.n	3e62 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3ec4:	2000      	movs	r0, #0
    3ec6:	e7f9      	b.n	3ebc <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3ec8:	681a      	ldr	r2, [r3, #0]
    3eca:	4822      	ldr	r0, [pc, #136]	; (3f54 <mbedtls_aes_setkey_enc+0x1a8>)
    3ecc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3ed0:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3ed2:	69d8      	ldr	r0, [r3, #28]
    3ed4:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3ed8:	4d1f      	ldr	r5, [pc, #124]	; (3f58 <mbedtls_aes_setkey_enc+0x1ac>)
    3eda:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3edc:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3ede:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3ee2:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3ee4:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3ee8:	0e04      	lsrs	r4, r0, #24
    3eea:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3eec:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3ef0:	b2c4      	uxtb	r4, r0
    3ef2:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3ef4:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3ef8:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3efa:	685c      	ldr	r4, [r3, #4]
    3efc:	4062      	eors	r2, r4
    3efe:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3f00:	689c      	ldr	r4, [r3, #8]
    3f02:	4062      	eors	r2, r4
    3f04:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3f06:	68dc      	ldr	r4, [r3, #12]
    3f08:	4062      	eors	r2, r4
    3f0a:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3f0c:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3f0e:	b2d6      	uxtb	r6, r2
    3f10:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3f12:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3f14:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3f18:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3f1a:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3f1e:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3f22:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3f24:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3f28:	0e12      	lsrs	r2, r2, #24
    3f2a:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3f2c:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3f30:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3f32:	695c      	ldr	r4, [r3, #20]
    3f34:	4062      	eors	r2, r4
    3f36:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3f38:	699c      	ldr	r4, [r3, #24]
    3f3a:	4062      	eors	r2, r4
    3f3c:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3f3e:	4042      	eors	r2, r0
    3f40:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3f42:	3101      	adds	r1, #1
    3f44:	3320      	adds	r3, #32
    3f46:	2906      	cmp	r1, #6
    3f48:	d9be      	bls.n	3ec8 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3f4a:	2000      	movs	r0, #0
    3f4c:	e789      	b.n	3e62 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3f4e:	2100      	movs	r1, #0
    3f50:	e7f9      	b.n	3f46 <mbedtls_aes_setkey_enc+0x19a>
    3f52:	bf00      	nop
    3f54:	00031df8 	.word	0x00031df8
    3f58:	00030bf8 	.word	0x00030bf8

00003f5c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f60:	b083      	sub	sp, #12
    3f62:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3f64:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3f66:	f891 9000 	ldrb.w	r9, [r1]
    3f6a:	784b      	ldrb	r3, [r1, #1]
    3f6c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3f70:	788b      	ldrb	r3, [r1, #2]
    3f72:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3f76:	78cb      	ldrb	r3, [r1, #3]
    3f78:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3f7c:	6813      	ldr	r3, [r2, #0]
    3f7e:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3f82:	f891 a004 	ldrb.w	sl, [r1, #4]
    3f86:	794b      	ldrb	r3, [r1, #5]
    3f88:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3f8c:	798b      	ldrb	r3, [r1, #6]
    3f8e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3f92:	79cb      	ldrb	r3, [r1, #7]
    3f94:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3f98:	6853      	ldr	r3, [r2, #4]
    3f9a:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3f9e:	7a0c      	ldrb	r4, [r1, #8]
    3fa0:	7a4b      	ldrb	r3, [r1, #9]
    3fa2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3fa6:	7a8b      	ldrb	r3, [r1, #10]
    3fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3fac:	7acb      	ldrb	r3, [r1, #11]
    3fae:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3fb2:	6893      	ldr	r3, [r2, #8]
    3fb4:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3fb6:	7b0b      	ldrb	r3, [r1, #12]
    3fb8:	7b4d      	ldrb	r5, [r1, #13]
    3fba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3fbe:	7b8d      	ldrb	r5, [r1, #14]
    3fc0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3fc4:	7bc9      	ldrb	r1, [r1, #15]
    3fc6:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3fca:	f102 0610 	add.w	r6, r2, #16
    3fce:	68d3      	ldr	r3, [r2, #12]
    3fd0:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3fd2:	6803      	ldr	r3, [r0, #0]
    3fd4:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3fd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3fdc:	460b      	mov	r3, r1
    3fde:	e0bd      	b.n	415c <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3fe0:	6832      	ldr	r2, [r6, #0]
    3fe2:	fa5f f089 	uxtb.w	r0, r9
    3fe6:	49cb      	ldr	r1, [pc, #812]	; (4314 <mbedtls_internal_aes_encrypt+0x3b8>)
    3fe8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3fec:	ea82 0c00 	eor.w	ip, r2, r0
    3ff0:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3ff4:	4dc8      	ldr	r5, [pc, #800]	; (4318 <mbedtls_internal_aes_encrypt+0x3bc>)
    3ff6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3ffa:	ea8c 0c02 	eor.w	ip, ip, r2
    3ffe:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4002:	48c6      	ldr	r0, [pc, #792]	; (431c <mbedtls_internal_aes_encrypt+0x3c0>)
    4004:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4008:	ea8c 0c02 	eor.w	ip, ip, r2
    400c:	0e1f      	lsrs	r7, r3, #24
    400e:	4ac4      	ldr	r2, [pc, #784]	; (4320 <mbedtls_internal_aes_encrypt+0x3c4>)
    4010:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4014:	ea8c 0c07 	eor.w	ip, ip, r7
    4018:	fa5f fe8a 	uxtb.w	lr, sl
    401c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    4020:	6877      	ldr	r7, [r6, #4]
    4022:	ea87 080e 	eor.w	r8, r7, lr
    4026:	f3c4 2707 	ubfx	r7, r4, #8, #8
    402a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    402e:	ea88 0807 	eor.w	r8, r8, r7
    4032:	f3c3 4707 	ubfx	r7, r3, #16, #8
    4036:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    403a:	ea88 0807 	eor.w	r8, r8, r7
    403e:	ea4f 6719 	mov.w	r7, r9, lsr #24
    4042:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4046:	ea88 0807 	eor.w	r8, r8, r7
    404a:	fa5f fe84 	uxtb.w	lr, r4
    404e:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    4052:	68b7      	ldr	r7, [r6, #8]
    4054:	ea87 0e0e 	eor.w	lr, r7, lr
    4058:	f3c3 2707 	ubfx	r7, r3, #8, #8
    405c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4060:	ea8e 0e07 	eor.w	lr, lr, r7
    4064:	f3c9 4707 	ubfx	r7, r9, #16, #8
    4068:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    406c:	ea8e 0e07 	eor.w	lr, lr, r7
    4070:	ea4f 671a 	mov.w	r7, sl, lsr #24
    4074:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4078:	ea8e 0e07 	eor.w	lr, lr, r7
    407c:	68f7      	ldr	r7, [r6, #12]
    407e:	b2db      	uxtb	r3, r3
    4080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4084:	405f      	eors	r7, r3
    4086:	f3c9 2907 	ubfx	r9, r9, #8, #8
    408a:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    408e:	405f      	eors	r7, r3
    4090:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    4094:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    4098:	405f      	eors	r7, r3
    409a:	0e24      	lsrs	r4, r4, #24
    409c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    40a0:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    40a2:	6933      	ldr	r3, [r6, #16]
    40a4:	fa5f f48c 	uxtb.w	r4, ip
    40a8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    40ac:	ea83 0904 	eor.w	r9, r3, r4
    40b0:	f3c8 2307 	ubfx	r3, r8, #8, #8
    40b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    40b8:	ea89 0903 	eor.w	r9, r9, r3
    40bc:	f3ce 4307 	ubfx	r3, lr, #16, #8
    40c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    40c4:	ea89 0903 	eor.w	r9, r9, r3
    40c8:	0e3b      	lsrs	r3, r7, #24
    40ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    40ce:	ea89 0903 	eor.w	r9, r9, r3
    40d2:	6973      	ldr	r3, [r6, #20]
    40d4:	fa5f f488 	uxtb.w	r4, r8
    40d8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    40dc:	ea83 0a04 	eor.w	sl, r3, r4
    40e0:	f3ce 2307 	ubfx	r3, lr, #8, #8
    40e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    40e8:	ea8a 0a03 	eor.w	sl, sl, r3
    40ec:	f3c7 4307 	ubfx	r3, r7, #16, #8
    40f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    40f4:	ea8a 0a03 	eor.w	sl, sl, r3
    40f8:	ea4f 631c 	mov.w	r3, ip, lsr #24
    40fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4100:	ea8a 0a03 	eor.w	sl, sl, r3
    4104:	69b3      	ldr	r3, [r6, #24]
    4106:	fa5f f48e 	uxtb.w	r4, lr
    410a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    410e:	405c      	eors	r4, r3
    4110:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4114:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4118:	405c      	eors	r4, r3
    411a:	f3cc 4307 	ubfx	r3, ip, #16, #8
    411e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4122:	405c      	eors	r4, r3
    4124:	ea4f 6318 	mov.w	r3, r8, lsr #24
    4128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    412c:	405c      	eors	r4, r3
    412e:	69f3      	ldr	r3, [r6, #28]
    4130:	b2ff      	uxtb	r7, r7
    4132:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    4136:	404b      	eors	r3, r1
    4138:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    413c:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    4140:	404b      	eors	r3, r1
    4142:	f3c8 4807 	ubfx	r8, r8, #16, #8
    4146:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    414a:	404b      	eors	r3, r1
    414c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    4150:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    4154:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4156:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    415a:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    415c:	f1bb 0f00 	cmp.w	fp, #0
    4160:	f73f af3e 	bgt.w	3fe0 <mbedtls_internal_aes_encrypt+0x84>
    4164:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4166:	6833      	ldr	r3, [r6, #0]
    4168:	fa5f f289 	uxtb.w	r2, r9
    416c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4314 <mbedtls_internal_aes_encrypt+0x3b8>
    4170:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4174:	405a      	eors	r2, r3
    4176:	f3ca 2307 	ubfx	r3, sl, #8, #8
    417a:	4f67      	ldr	r7, [pc, #412]	; (4318 <mbedtls_internal_aes_encrypt+0x3bc>)
    417c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    4180:	405a      	eors	r2, r3
    4182:	f3c4 4307 	ubfx	r3, r4, #16, #8
    4186:	4d65      	ldr	r5, [pc, #404]	; (431c <mbedtls_internal_aes_encrypt+0x3c0>)
    4188:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    418c:	405a      	eors	r2, r3
    418e:	0e0b      	lsrs	r3, r1, #24
    4190:	4863      	ldr	r0, [pc, #396]	; (4320 <mbedtls_internal_aes_encrypt+0x3c4>)
    4192:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4196:	405a      	eors	r2, r3
    4198:	fa5f fc8a 	uxtb.w	ip, sl
    419c:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    41a0:	6873      	ldr	r3, [r6, #4]
    41a2:	ea83 0c0c 	eor.w	ip, r3, ip
    41a6:	f3c4 2307 	ubfx	r3, r4, #8, #8
    41aa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    41ae:	ea8c 0c03 	eor.w	ip, ip, r3
    41b2:	f3c1 4307 	ubfx	r3, r1, #16, #8
    41b6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    41ba:	ea8c 0c03 	eor.w	ip, ip, r3
    41be:	ea4f 6319 	mov.w	r3, r9, lsr #24
    41c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    41c6:	ea8c 0c03 	eor.w	ip, ip, r3
    41ca:	fa5f f884 	uxtb.w	r8, r4
    41ce:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    41d2:	68b3      	ldr	r3, [r6, #8]
    41d4:	ea83 0808 	eor.w	r8, r3, r8
    41d8:	f3c1 2307 	ubfx	r3, r1, #8, #8
    41dc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    41e0:	ea88 0803 	eor.w	r8, r8, r3
    41e4:	f3c9 4307 	ubfx	r3, r9, #16, #8
    41e8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    41ec:	ea88 0803 	eor.w	r8, r8, r3
    41f0:	ea4f 631a 	mov.w	r3, sl, lsr #24
    41f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    41f8:	ea88 0803 	eor.w	r8, r8, r3
    41fc:	68f3      	ldr	r3, [r6, #12]
    41fe:	b2c9      	uxtb	r1, r1
    4200:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    4204:	404b      	eors	r3, r1
    4206:	f3c9 2907 	ubfx	r9, r9, #8, #8
    420a:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    420e:	405f      	eors	r7, r3
    4210:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    4214:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    4218:	405f      	eors	r7, r3
    421a:	0e24      	lsrs	r4, r4, #24
    421c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    4220:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    4222:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    4224:	b2d0      	uxtb	r0, r2
    4226:	4b3f      	ldr	r3, [pc, #252]	; (4324 <mbedtls_internal_aes_encrypt+0x3c8>)
    4228:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    422a:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    422c:	f3cc 2107 	ubfx	r1, ip, #8, #8
    4230:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    4232:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    4236:	f3c8 4107 	ubfx	r1, r8, #16, #8
    423a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    423c:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    4240:	0e39      	lsrs	r1, r7, #24
    4242:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    4244:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    4248:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    424a:	fa5f f08c 	uxtb.w	r0, ip
    424e:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    4250:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4252:	f3c8 2107 	ubfx	r1, r8, #8, #8
    4256:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    4258:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    425c:	f3c7 4107 	ubfx	r1, r7, #16, #8
    4260:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4262:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4266:	0e11      	lsrs	r1, r2, #24
    4268:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    426a:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    426e:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    4270:	fa5f f588 	uxtb.w	r5, r8
    4274:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    4276:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4278:	f3c7 2107 	ubfx	r1, r7, #8, #8
    427c:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    427e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4282:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4286:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4288:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    428c:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4290:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    4292:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4296:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    4298:	b2ff      	uxtb	r7, r7
    429a:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    429c:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    429e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    42a2:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    42a4:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    42a8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    42ac:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    42b0:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    42b4:	ea4f 6818 	mov.w	r8, r8, lsr #24
    42b8:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    42bc:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    42c0:	9e01      	ldr	r6, [sp, #4]
    42c2:	7034      	strb	r4, [r6, #0]
    42c4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    42c8:	7072      	strb	r2, [r6, #1]
    42ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
    42ce:	70b2      	strb	r2, [r6, #2]
    42d0:	0e24      	lsrs	r4, r4, #24
    42d2:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    42d4:	7130      	strb	r0, [r6, #4]
    42d6:	f3c0 2207 	ubfx	r2, r0, #8, #8
    42da:	7172      	strb	r2, [r6, #5]
    42dc:	f3c0 4207 	ubfx	r2, r0, #16, #8
    42e0:	71b2      	strb	r2, [r6, #6]
    42e2:	0e00      	lsrs	r0, r0, #24
    42e4:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    42e6:	7235      	strb	r5, [r6, #8]
    42e8:	f3c5 2207 	ubfx	r2, r5, #8, #8
    42ec:	7272      	strb	r2, [r6, #9]
    42ee:	f3c5 4207 	ubfx	r2, r5, #16, #8
    42f2:	72b2      	strb	r2, [r6, #10]
    42f4:	0e2d      	lsrs	r5, r5, #24
    42f6:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    42f8:	7333      	strb	r3, [r6, #12]
    42fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
    42fe:	7372      	strb	r2, [r6, #13]
    4300:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4304:	73b2      	strb	r2, [r6, #14]
    4306:	0e1b      	lsrs	r3, r3, #24
    4308:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    430a:	2000      	movs	r0, #0
    430c:	b003      	add	sp, #12
    430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4312:	bf00      	nop
    4314:	00030df8 	.word	0x00030df8
    4318:	000311f8 	.word	0x000311f8
    431c:	000315f8 	.word	0x000315f8
    4320:	000319f8 	.word	0x000319f8
    4324:	00030bf8 	.word	0x00030bf8

00004328 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    4328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    432c:	b083      	sub	sp, #12
    432e:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    4330:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    4332:	f891 a000 	ldrb.w	sl, [r1]
    4336:	784b      	ldrb	r3, [r1, #1]
    4338:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    433c:	788b      	ldrb	r3, [r1, #2]
    433e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    4342:	78cb      	ldrb	r3, [r1, #3]
    4344:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    4348:	6813      	ldr	r3, [r2, #0]
    434a:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    434e:	f891 9004 	ldrb.w	r9, [r1, #4]
    4352:	794b      	ldrb	r3, [r1, #5]
    4354:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    4358:	798b      	ldrb	r3, [r1, #6]
    435a:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    435e:	79cb      	ldrb	r3, [r1, #7]
    4360:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    4364:	6853      	ldr	r3, [r2, #4]
    4366:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    436a:	7a0c      	ldrb	r4, [r1, #8]
    436c:	7a4b      	ldrb	r3, [r1, #9]
    436e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    4372:	7a8b      	ldrb	r3, [r1, #10]
    4374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4378:	7acb      	ldrb	r3, [r1, #11]
    437a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    437e:	6893      	ldr	r3, [r2, #8]
    4380:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    4382:	7b0b      	ldrb	r3, [r1, #12]
    4384:	7b4d      	ldrb	r5, [r1, #13]
    4386:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    438a:	7b8d      	ldrb	r5, [r1, #14]
    438c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    4390:	7bc9      	ldrb	r1, [r1, #15]
    4392:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    4396:	f102 0610 	add.w	r6, r2, #16
    439a:	68d3      	ldr	r3, [r2, #12]
    439c:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    439e:	6803      	ldr	r3, [r0, #0]
    43a0:	ea4f 0b63 	mov.w	fp, r3, asr #1
    43a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    43a8:	460b      	mov	r3, r1
    43aa:	e0bd      	b.n	4528 <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    43ac:	6832      	ldr	r2, [r6, #0]
    43ae:	fa5f f08a 	uxtb.w	r0, sl
    43b2:	49cb      	ldr	r1, [pc, #812]	; (46e0 <mbedtls_internal_aes_decrypt+0x3b8>)
    43b4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    43b8:	ea82 0800 	eor.w	r8, r2, r0
    43bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
    43c0:	4dc8      	ldr	r5, [pc, #800]	; (46e4 <mbedtls_internal_aes_decrypt+0x3bc>)
    43c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    43c6:	ea88 0802 	eor.w	r8, r8, r2
    43ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
    43ce:	48c6      	ldr	r0, [pc, #792]	; (46e8 <mbedtls_internal_aes_decrypt+0x3c0>)
    43d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    43d4:	ea88 0802 	eor.w	r8, r8, r2
    43d8:	ea4f 6719 	mov.w	r7, r9, lsr #24
    43dc:	4ac3      	ldr	r2, [pc, #780]	; (46ec <mbedtls_internal_aes_decrypt+0x3c4>)
    43de:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    43e2:	ea88 0807 	eor.w	r8, r8, r7
    43e6:	fa5f fe89 	uxtb.w	lr, r9
    43ea:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    43ee:	6877      	ldr	r7, [r6, #4]
    43f0:	ea87 0c0e 	eor.w	ip, r7, lr
    43f4:	f3ca 2707 	ubfx	r7, sl, #8, #8
    43f8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    43fc:	ea8c 0c07 	eor.w	ip, ip, r7
    4400:	f3c3 4707 	ubfx	r7, r3, #16, #8
    4404:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4408:	ea8c 0c07 	eor.w	ip, ip, r7
    440c:	0e27      	lsrs	r7, r4, #24
    440e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4412:	ea8c 0c07 	eor.w	ip, ip, r7
    4416:	fa5f fe84 	uxtb.w	lr, r4
    441a:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    441e:	68b7      	ldr	r7, [r6, #8]
    4420:	ea87 0e0e 	eor.w	lr, r7, lr
    4424:	f3c9 2707 	ubfx	r7, r9, #8, #8
    4428:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    442c:	ea8e 0e07 	eor.w	lr, lr, r7
    4430:	f3ca 4707 	ubfx	r7, sl, #16, #8
    4434:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4438:	ea8e 0e07 	eor.w	lr, lr, r7
    443c:	0e1f      	lsrs	r7, r3, #24
    443e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4442:	ea8e 0e07 	eor.w	lr, lr, r7
    4446:	68f7      	ldr	r7, [r6, #12]
    4448:	b2db      	uxtb	r3, r3
    444a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    444e:	405f      	eors	r7, r3
    4450:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4454:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4458:	405f      	eors	r7, r3
    445a:	f3c9 4907 	ubfx	r9, r9, #16, #8
    445e:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    4462:	405f      	eors	r7, r3
    4464:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4468:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    446c:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    446e:	6933      	ldr	r3, [r6, #16]
    4470:	fa5f f488 	uxtb.w	r4, r8
    4474:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4478:	ea83 0a04 	eor.w	sl, r3, r4
    447c:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4480:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4484:	ea8a 0a03 	eor.w	sl, sl, r3
    4488:	f3ce 4307 	ubfx	r3, lr, #16, #8
    448c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4490:	ea8a 0a03 	eor.w	sl, sl, r3
    4494:	ea4f 631c 	mov.w	r3, ip, lsr #24
    4498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    449c:	ea8a 0a03 	eor.w	sl, sl, r3
    44a0:	6973      	ldr	r3, [r6, #20]
    44a2:	fa5f f48c 	uxtb.w	r4, ip
    44a6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    44aa:	ea83 0904 	eor.w	r9, r3, r4
    44ae:	f3c8 2307 	ubfx	r3, r8, #8, #8
    44b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    44b6:	ea89 0903 	eor.w	r9, r9, r3
    44ba:	f3c7 4307 	ubfx	r3, r7, #16, #8
    44be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    44c2:	ea89 0903 	eor.w	r9, r9, r3
    44c6:	ea4f 631e 	mov.w	r3, lr, lsr #24
    44ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    44ce:	ea89 0903 	eor.w	r9, r9, r3
    44d2:	69b3      	ldr	r3, [r6, #24]
    44d4:	fa5f f48e 	uxtb.w	r4, lr
    44d8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    44dc:	405c      	eors	r4, r3
    44de:	f3cc 2307 	ubfx	r3, ip, #8, #8
    44e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    44e6:	405c      	eors	r4, r3
    44e8:	f3c8 4307 	ubfx	r3, r8, #16, #8
    44ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    44f0:	405c      	eors	r4, r3
    44f2:	0e3b      	lsrs	r3, r7, #24
    44f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    44f8:	405c      	eors	r4, r3
    44fa:	69f3      	ldr	r3, [r6, #28]
    44fc:	b2ff      	uxtb	r7, r7
    44fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    4502:	404b      	eors	r3, r1
    4504:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    4508:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    450c:	404b      	eors	r3, r1
    450e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4512:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    4516:	404b      	eors	r3, r1
    4518:	ea4f 6818 	mov.w	r8, r8, lsr #24
    451c:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4520:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4522:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    4526:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4528:	f1bb 0f00 	cmp.w	fp, #0
    452c:	f73f af3e 	bgt.w	43ac <mbedtls_internal_aes_decrypt+0x84>
    4530:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4532:	6833      	ldr	r3, [r6, #0]
    4534:	fa5f f28a 	uxtb.w	r2, sl
    4538:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 46e0 <mbedtls_internal_aes_decrypt+0x3b8>
    453c:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4540:	4053      	eors	r3, r2
    4542:	f3c1 2207 	ubfx	r2, r1, #8, #8
    4546:	4f67      	ldr	r7, [pc, #412]	; (46e4 <mbedtls_internal_aes_decrypt+0x3bc>)
    4548:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    454c:	4053      	eors	r3, r2
    454e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4552:	4d65      	ldr	r5, [pc, #404]	; (46e8 <mbedtls_internal_aes_decrypt+0x3c0>)
    4554:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4558:	4053      	eors	r3, r2
    455a:	ea4f 6219 	mov.w	r2, r9, lsr #24
    455e:	4863      	ldr	r0, [pc, #396]	; (46ec <mbedtls_internal_aes_decrypt+0x3c4>)
    4560:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4564:	4053      	eors	r3, r2
    4566:	fa5f fc89 	uxtb.w	ip, r9
    456a:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    456e:	6872      	ldr	r2, [r6, #4]
    4570:	ea82 0c0c 	eor.w	ip, r2, ip
    4574:	f3ca 2207 	ubfx	r2, sl, #8, #8
    4578:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    457c:	ea8c 0c02 	eor.w	ip, ip, r2
    4580:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4584:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4588:	ea8c 0c02 	eor.w	ip, ip, r2
    458c:	0e22      	lsrs	r2, r4, #24
    458e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4592:	ea8c 0c02 	eor.w	ip, ip, r2
    4596:	fa5f f884 	uxtb.w	r8, r4
    459a:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    459e:	68b2      	ldr	r2, [r6, #8]
    45a0:	ea82 0808 	eor.w	r8, r2, r8
    45a4:	f3c9 2207 	ubfx	r2, r9, #8, #8
    45a8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    45ac:	ea88 0802 	eor.w	r8, r8, r2
    45b0:	f3ca 4207 	ubfx	r2, sl, #16, #8
    45b4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    45b8:	ea88 0802 	eor.w	r8, r8, r2
    45bc:	0e0a      	lsrs	r2, r1, #24
    45be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    45c2:	ea88 0802 	eor.w	r8, r8, r2
    45c6:	68f2      	ldr	r2, [r6, #12]
    45c8:	b2c9      	uxtb	r1, r1
    45ca:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    45ce:	404a      	eors	r2, r1
    45d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
    45d4:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    45d8:	4057      	eors	r7, r2
    45da:	f3c9 4907 	ubfx	r9, r9, #16, #8
    45de:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    45e2:	4057      	eors	r7, r2
    45e4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    45e8:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    45ec:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    45ee:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    45f0:	b2d8      	uxtb	r0, r3
    45f2:	4a3f      	ldr	r2, [pc, #252]	; (46f0 <mbedtls_internal_aes_decrypt+0x3c8>)
    45f4:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    45f6:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    45f8:	f3c7 2107 	ubfx	r1, r7, #8, #8
    45fc:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    45fe:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    4602:	f3c8 4107 	ubfx	r1, r8, #16, #8
    4606:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4608:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    460c:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4610:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    4612:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    4616:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4618:	fa5f f08c 	uxtb.w	r0, ip
    461c:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    461e:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4620:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4624:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4626:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    462a:	f3c7 4107 	ubfx	r1, r7, #16, #8
    462e:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4630:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    4634:	ea4f 6118 	mov.w	r1, r8, lsr #24
    4638:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    463a:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    463e:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4640:	fa5f f588 	uxtb.w	r5, r8
    4644:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    4646:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4648:	f3cc 2107 	ubfx	r1, ip, #8, #8
    464c:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    464e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4652:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4656:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4658:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    465c:	0e39      	lsrs	r1, r7, #24
    465e:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4660:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4664:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4666:	b2ff      	uxtb	r7, r7
    4668:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    466a:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    466c:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4670:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4674:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    4678:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    467c:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4680:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4684:	0e1b      	lsrs	r3, r3, #24
    4686:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    4688:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    468c:	9e01      	ldr	r6, [sp, #4]
    468e:	7034      	strb	r4, [r6, #0]
    4690:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4694:	7072      	strb	r2, [r6, #1]
    4696:	f3c4 4207 	ubfx	r2, r4, #16, #8
    469a:	70b2      	strb	r2, [r6, #2]
    469c:	0e24      	lsrs	r4, r4, #24
    469e:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    46a0:	7130      	strb	r0, [r6, #4]
    46a2:	f3c0 2207 	ubfx	r2, r0, #8, #8
    46a6:	7172      	strb	r2, [r6, #5]
    46a8:	f3c0 4207 	ubfx	r2, r0, #16, #8
    46ac:	71b2      	strb	r2, [r6, #6]
    46ae:	0e00      	lsrs	r0, r0, #24
    46b0:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    46b2:	7235      	strb	r5, [r6, #8]
    46b4:	f3c5 2207 	ubfx	r2, r5, #8, #8
    46b8:	7272      	strb	r2, [r6, #9]
    46ba:	f3c5 4207 	ubfx	r2, r5, #16, #8
    46be:	72b2      	strb	r2, [r6, #10]
    46c0:	0e2d      	lsrs	r5, r5, #24
    46c2:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    46c4:	7333      	strb	r3, [r6, #12]
    46c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    46ca:	7372      	strb	r2, [r6, #13]
    46cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    46d0:	73b2      	strb	r2, [r6, #14]
    46d2:	0e1b      	lsrs	r3, r3, #24
    46d4:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    46d6:	2000      	movs	r0, #0
    46d8:	b003      	add	sp, #12
    46da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46de:	bf00      	nop
    46e0:	00031f20 	.word	0x00031f20
    46e4:	00032320 	.word	0x00032320
    46e8:	00032720 	.word	0x00032720
    46ec:	00032b20 	.word	0x00032b20
    46f0:	00031e20 	.word	0x00031e20

000046f4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    46f4:	b510      	push	{r4, lr}
    46f6:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    46f8:	2901      	cmp	r1, #1
    46fa:	d004      	beq.n	4706 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    46fc:	461a      	mov	r2, r3
    46fe:	4621      	mov	r1, r4
    4700:	f7ff fe12 	bl	4328 <mbedtls_internal_aes_decrypt>
}
    4704:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    4706:	461a      	mov	r2, r3
    4708:	4621      	mov	r1, r4
    470a:	f7ff fc27 	bl	3f5c <mbedtls_internal_aes_encrypt>
    470e:	bd10      	pop	{r4, pc}

00004710 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
    4710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4714:	4682      	mov	sl, r0
    4716:	4693      	mov	fp, r2
    4718:	461d      	mov	r5, r3
    471a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    471e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4720:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int c, i;
    size_t n = *nc_off;
    4722:	6814      	ldr	r4, [r2, #0]

    while( length-- )
    4724:	e00a      	b.n	473c <mbedtls_aes_crypt_ctr+0x2c>

            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
    4726:	783a      	ldrb	r2, [r7, #0]
        *output++ = (unsigned char)( c ^ stream_block[n] );
    4728:	f919 3004 	ldrsb.w	r3, [r9, r4]
    472c:	4053      	eors	r3, r2
    472e:	7033      	strb	r3, [r6, #0]

        n = ( n + 1 ) & 0x0F;
    4730:	3401      	adds	r4, #1
    4732:	f004 040f 	and.w	r4, r4, #15
        *output++ = (unsigned char)( c ^ stream_block[n] );
    4736:	3601      	adds	r6, #1
        c = *input++;
    4738:	3701      	adds	r7, #1
    while( length-- )
    473a:	4641      	mov	r1, r8
    473c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    4740:	b199      	cbz	r1, 476a <mbedtls_aes_crypt_ctr+0x5a>
        if( n == 0 ) {
    4742:	2c00      	cmp	r4, #0
    4744:	d1ef      	bne.n	4726 <mbedtls_aes_crypt_ctr+0x16>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
    4746:	464b      	mov	r3, r9
    4748:	462a      	mov	r2, r5
    474a:	2101      	movs	r1, #1
    474c:	4650      	mov	r0, sl
    474e:	f7ff ffd1 	bl	46f4 <mbedtls_aes_crypt_ecb>
            for( i = 16; i > 0; i-- )
    4752:	2210      	movs	r2, #16
    4754:	2a00      	cmp	r2, #0
    4756:	dde6      	ble.n	4726 <mbedtls_aes_crypt_ctr+0x16>
                if( ++nonce_counter[i - 1] != 0 )
    4758:	1e51      	subs	r1, r2, #1
    475a:	5c6b      	ldrb	r3, [r5, r1]
    475c:	3301      	adds	r3, #1
    475e:	b2db      	uxtb	r3, r3
    4760:	546b      	strb	r3, [r5, r1]
    4762:	2b00      	cmp	r3, #0
    4764:	d1df      	bne.n	4726 <mbedtls_aes_crypt_ctr+0x16>
            for( i = 16; i > 0; i-- )
    4766:	460a      	mov	r2, r1
    4768:	e7f4      	b.n	4754 <mbedtls_aes_crypt_ctr+0x44>
    }

    *nc_off = n;
    476a:	f8cb 4000 	str.w	r4, [fp]

    return( 0 );
}
    476e:	2000      	movs	r0, #0
    4770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004774 <mbedtls_base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
    4774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4778:	f8dd c01c 	ldr.w	ip, [sp, #28]
    size_t i, n;
    int C1, C2, C3;
    unsigned char *p;

    if( slen == 0 )
    477c:	f1bc 0f00 	cmp.w	ip, #0
    4780:	d018      	beq.n	47b4 <mbedtls_base64_encode+0x40>
    {
        *olen = 0;
        return( 0 );
    }

    n = slen / 3 + ( slen % 3 != 0 );
    4782:	4c3e      	ldr	r4, [pc, #248]	; (487c <mbedtls_base64_encode+0x108>)
    4784:	fba4 4e0c 	umull	r4, lr, r4, ip
    4788:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
    478c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    4790:	45a4      	cmp	ip, r4
    4792:	bf0c      	ite	eq
    4794:	4674      	moveq	r4, lr
    4796:	f10e 0401 	addne.w	r4, lr, #1

    if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )
    479a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    479e:	d20d      	bcs.n	47bc <mbedtls_base64_encode+0x48>
    {
        *olen = BASE64_SIZE_T_MAX;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

    n *= 4;
    47a0:	00a4      	lsls	r4, r4, #2

    if( ( dlen < n + 1 ) || ( NULL == dst ) )
    47a2:	3401      	adds	r4, #1
    47a4:	428c      	cmp	r4, r1
    47a6:	d810      	bhi.n	47ca <mbedtls_base64_encode+0x56>
    47a8:	b178      	cbz	r0, 47ca <mbedtls_base64_encode+0x56>
    {
        *olen = n + 1;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

    n = ( slen / 3 ) * 3;
    47aa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1

    for( i = 0, p = dst; i < n; i += 3 )
    47ae:	4604      	mov	r4, r0
    47b0:	2700      	movs	r7, #0
    47b2:	e036      	b.n	4822 <mbedtls_base64_encode+0xae>
        *olen = 0;
    47b4:	2000      	movs	r0, #0
    47b6:	6010      	str	r0, [r2, #0]
        return( 0 );
    47b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *olen = BASE64_SIZE_T_MAX;
    47bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    47c0:	6013      	str	r3, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    47c2:	f06f 0029 	mvn.w	r0, #41	; 0x29
    47c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *olen = n + 1;
    47ca:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    47cc:	f06f 0029 	mvn.w	r0, #41	; 0x29
    47d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
        C1 = *src++;
    47d4:	f893 8000 	ldrb.w	r8, [r3]
        C2 = *src++;
    47d8:	7859      	ldrb	r1, [r3, #1]
        C3 = *src++;
    47da:	789d      	ldrb	r5, [r3, #2]

        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    47dc:	4e28      	ldr	r6, [pc, #160]	; (4880 <mbedtls_base64_encode+0x10c>)
    47de:	ea4f 0998 	mov.w	r9, r8, lsr #2
    47e2:	f816 9009 	ldrb.w	r9, [r6, r9]
    47e6:	f884 9000 	strb.w	r9, [r4]
        *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    47ea:	ea4f 1808 	mov.w	r8, r8, lsl #4
    47ee:	f008 0830 	and.w	r8, r8, #48	; 0x30
    47f2:	eb08 1821 	add.w	r8, r8, r1, asr #4
    47f6:	f008 083f 	and.w	r8, r8, #63	; 0x3f
    47fa:	f816 8008 	ldrb.w	r8, [r6, r8]
    47fe:	f884 8001 	strb.w	r8, [r4, #1]
        *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    4802:	0089      	lsls	r1, r1, #2
    4804:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    4808:	eb01 11a5 	add.w	r1, r1, r5, asr #6
    480c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    4810:	5c71      	ldrb	r1, [r6, r1]
    4812:	70a1      	strb	r1, [r4, #2]
        *p++ = base64_enc_map[C3 & 0x3F];
    4814:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    4818:	5d71      	ldrb	r1, [r6, r5]
    481a:	70e1      	strb	r1, [r4, #3]
    for( i = 0, p = dst; i < n; i += 3 )
    481c:	3703      	adds	r7, #3
        *p++ = base64_enc_map[C3 & 0x3F];
    481e:	3404      	adds	r4, #4
        C3 = *src++;
    4820:	3303      	adds	r3, #3
    for( i = 0, p = dst; i < n; i += 3 )
    4822:	4577      	cmp	r7, lr
    4824:	d3d6      	bcc.n	47d4 <mbedtls_base64_encode+0x60>
    }

    if( i < slen )
    4826:	4567      	cmp	r7, ip
    4828:	d21c      	bcs.n	4864 <mbedtls_base64_encode+0xf0>
    {
        C1 = *src++;
    482a:	7819      	ldrb	r1, [r3, #0]
        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
    482c:	3701      	adds	r7, #1
    482e:	45bc      	cmp	ip, r7
    4830:	d91e      	bls.n	4870 <mbedtls_base64_encode+0xfc>
    4832:	785d      	ldrb	r5, [r3, #1]

        *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    4834:	4e12      	ldr	r6, [pc, #72]	; (4880 <mbedtls_base64_encode+0x10c>)
    4836:	088b      	lsrs	r3, r1, #2
    4838:	5cf3      	ldrb	r3, [r6, r3]
    483a:	7023      	strb	r3, [r4, #0]
        *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    483c:	010b      	lsls	r3, r1, #4
    483e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4842:	eb03 1325 	add.w	r3, r3, r5, asr #4
    4846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    484a:	5cf3      	ldrb	r3, [r6, r3]
    484c:	7063      	strb	r3, [r4, #1]

        if( ( i + 1 ) < slen )
    484e:	45bc      	cmp	ip, r7
    4850:	d910      	bls.n	4874 <mbedtls_base64_encode+0x100>
             *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    4852:	1ce3      	adds	r3, r4, #3
    4854:	00ad      	lsls	r5, r5, #2
    4856:	f005 053c 	and.w	r5, r5, #60	; 0x3c
    485a:	5d71      	ldrb	r1, [r6, r5]
    485c:	70a1      	strb	r1, [r4, #2]
        else *p++ = '=';

        *p++ = '=';
    485e:	1c5c      	adds	r4, r3, #1
    4860:	213d      	movs	r1, #61	; 0x3d
    4862:	7019      	strb	r1, [r3, #0]
    }

    *olen = p - dst;
    4864:	1a20      	subs	r0, r4, r0
    4866:	6010      	str	r0, [r2, #0]
    *p = 0;
    4868:	2000      	movs	r0, #0
    486a:	7020      	strb	r0, [r4, #0]

    return( 0 );
}
    486c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
    4870:	2500      	movs	r5, #0
    4872:	e7df      	b.n	4834 <mbedtls_base64_encode+0xc0>
        else *p++ = '=';
    4874:	1ce3      	adds	r3, r4, #3
    4876:	213d      	movs	r1, #61	; 0x3d
    4878:	70a1      	strb	r1, [r4, #2]
    487a:	e7f0      	b.n	485e <mbedtls_base64_encode+0xea>
    487c:	aaaaaaab 	.word	0xaaaaaaab
    4880:	00032f20 	.word	0x00032f20

00004884 <mbedtls_sha1_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    4884:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
    4886:	225c      	movs	r2, #92	; 0x5c
    4888:	2100      	movs	r1, #0
    488a:	f027 fbf7 	bl	2c07c <memset>
    488e:	bd08      	pop	{r3, pc}

00004890 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
    4890:	b120      	cbz	r0, 489c <mbedtls_sha1_free+0xc>
{
    4892:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
    4894:	215c      	movs	r1, #92	; 0x5c
    4896:	f7ff fa44 	bl	3d22 <mbedtls_zeroize>
    489a:	bd08      	pop	{r3, pc}
    489c:	4770      	bx	lr
	...

000048a0 <mbedtls_sha1_starts>:
/*
 * SHA-1 context setup
 */
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
    48a0:	2300      	movs	r3, #0
    48a2:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    48a4:	6043      	str	r3, [r0, #4]

    ctx->state[0] = 0x67452301;
    48a6:	4b09      	ldr	r3, [pc, #36]	; (48cc <mbedtls_sha1_starts+0x2c>)
    48a8:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
    48aa:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
    48ae:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
    48b0:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
    48b4:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
    48b8:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
    48bc:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
    48be:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
    48c2:	6143      	str	r3, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
    48c4:	4b02      	ldr	r3, [pc, #8]	; (48d0 <mbedtls_sha1_starts+0x30>)
    48c6:	6183      	str	r3, [r0, #24]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	67452301 	.word	0x67452301
    48d0:	c3d2e1f0 	.word	0xc3d2e1f0

000048d4 <mbedtls_sha1_process>:
}

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
void mbedtls_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[64] )
{
    48d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48d8:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    48da:	f891 9000 	ldrb.w	r9, [r1]
    48de:	f891 b001 	ldrb.w	fp, [r1, #1]
    48e2:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    48e6:	ea4b 6b09 	orr.w	fp, fp, r9, lsl #24
    48ea:	f891 9002 	ldrb.w	r9, [r1, #2]
    48ee:	ea4b 2b09 	orr.w	fp, fp, r9, lsl #8
    48f2:	f891 9003 	ldrb.w	r9, [r1, #3]
    48f6:	ea4b 0909 	orr.w	r9, fp, r9
    GET_UINT32_BE( W[ 1], data,  4 );
    48fa:	f891 c004 	ldrb.w	ip, [r1, #4]
    48fe:	f891 b005 	ldrb.w	fp, [r1, #5]
    4902:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4906:	ea4b 6b0c 	orr.w	fp, fp, ip, lsl #24
    490a:	f891 c006 	ldrb.w	ip, [r1, #6]
    490e:	ea4b 2b0c 	orr.w	fp, fp, ip, lsl #8
    4912:	f891 c007 	ldrb.w	ip, [r1, #7]
    4916:	ea4b 020c 	orr.w	r2, fp, ip
    491a:	9208      	str	r2, [sp, #32]
    GET_UINT32_BE( W[ 2], data,  8 );
    491c:	7a0b      	ldrb	r3, [r1, #8]
    491e:	f891 8009 	ldrb.w	r8, [r1, #9]
    4922:	ea4f 4808 	mov.w	r8, r8, lsl #16
    4926:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
    492a:	7a8b      	ldrb	r3, [r1, #10]
    492c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
    4930:	7acb      	ldrb	r3, [r1, #11]
    4932:	ea48 0803 	orr.w	r8, r8, r3
    GET_UINT32_BE( W[ 3], data, 12 );
    4936:	7b0b      	ldrb	r3, [r1, #12]
    4938:	f891 a00d 	ldrb.w	sl, [r1, #13]
    493c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
    4940:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    4944:	7b8b      	ldrb	r3, [r1, #14]
    4946:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    494a:	7bcb      	ldrb	r3, [r1, #15]
    494c:	ea4a 0c03 	orr.w	ip, sl, r3
    GET_UINT32_BE( W[ 4], data, 16 );
    4950:	7c0b      	ldrb	r3, [r1, #16]
    4952:	7c4f      	ldrb	r7, [r1, #17]
    4954:	043f      	lsls	r7, r7, #16
    4956:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
    495a:	7c8b      	ldrb	r3, [r1, #18]
    495c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    4960:	7ccb      	ldrb	r3, [r1, #19]
    4962:	431f      	orrs	r7, r3
    4964:	970a      	str	r7, [sp, #40]	; 0x28
    GET_UINT32_BE( W[ 5], data, 20 );
    4966:	7d0b      	ldrb	r3, [r1, #20]
    4968:	f891 e015 	ldrb.w	lr, [r1, #21]
    496c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    4970:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
    4974:	7d8b      	ldrb	r3, [r1, #22]
    4976:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
    497a:	7dcb      	ldrb	r3, [r1, #23]
    497c:	ea4e 0e03 	orr.w	lr, lr, r3
    GET_UINT32_BE( W[ 6], data, 24 );
    4980:	7e0a      	ldrb	r2, [r1, #24]
    4982:	7e4b      	ldrb	r3, [r1, #25]
    4984:	041b      	lsls	r3, r3, #16
    4986:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    498a:	7e8a      	ldrb	r2, [r1, #26]
    498c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4990:	7eca      	ldrb	r2, [r1, #27]
    4992:	431a      	orrs	r2, r3
    4994:	920b      	str	r2, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[ 7], data, 28 );
    4996:	7f0a      	ldrb	r2, [r1, #28]
    4998:	7f4b      	ldrb	r3, [r1, #29]
    499a:	041b      	lsls	r3, r3, #16
    499c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    49a0:	7f8a      	ldrb	r2, [r1, #30]
    49a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    49a6:	7fca      	ldrb	r2, [r1, #31]
    49a8:	ea43 0402 	orr.w	r4, r3, r2
    49ac:	940c      	str	r4, [sp, #48]	; 0x30
    GET_UINT32_BE( W[ 8], data, 32 );
    49ae:	f891 3020 	ldrb.w	r3, [r1, #32]
    49b2:	f891 6021 	ldrb.w	r6, [r1, #33]	; 0x21
    49b6:	0436      	lsls	r6, r6, #16
    49b8:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
    49bc:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
    49c0:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    49c4:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
    49c8:	ea46 0a03 	orr.w	sl, r6, r3
    GET_UINT32_BE( W[ 9], data, 36 );
    49cc:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
    49d0:	f891 b025 	ldrb.w	fp, [r1, #37]	; 0x25
    49d4:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    49d8:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    49dc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
    49e0:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    49e4:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
    49e8:	ea4b 0503 	orr.w	r5, fp, r3
    49ec:	9504      	str	r5, [sp, #16]
    GET_UINT32_BE( W[10], data, 40 );
    49ee:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    49f2:	f891 b029 	ldrb.w	fp, [r1, #41]	; 0x29
    49f6:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    49fa:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    49fe:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
    4a02:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4a06:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
    4a0a:	ea4b 0403 	orr.w	r4, fp, r3
    4a0e:	9405      	str	r4, [sp, #20]
    GET_UINT32_BE( W[11], data, 44 );
    4a10:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    4a14:	f891 b02d 	ldrb.w	fp, [r1, #45]	; 0x2d
    4a18:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4a1c:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    4a20:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    4a24:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4a28:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    4a2c:	ea4b 0503 	orr.w	r5, fp, r3
    4a30:	9506      	str	r5, [sp, #24]
    GET_UINT32_BE( W[12], data, 48 );
    4a32:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
    4a36:	f891 b031 	ldrb.w	fp, [r1, #49]	; 0x31
    4a3a:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4a3e:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    4a42:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
    4a46:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4a4a:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
    4a4e:	ea4b 0703 	orr.w	r7, fp, r3
    4a52:	9707      	str	r7, [sp, #28]
    GET_UINT32_BE( W[13], data, 52 );
    4a54:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    4a58:	f891 b035 	ldrb.w	fp, [r1, #53]	; 0x35
    4a5c:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4a60:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    4a64:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
    4a68:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4a6c:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
    4a70:	ea4b 0b03 	orr.w	fp, fp, r3
    4a74:	f8cd b004 	str.w	fp, [sp, #4]
    GET_UINT32_BE( W[14], data, 56 );
    4a78:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    4a7c:	f891 b039 	ldrb.w	fp, [r1, #57]	; 0x39
    4a80:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4a84:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    4a88:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
    4a8c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4a90:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
    4a94:	ea4b 0b03 	orr.w	fp, fp, r3
    4a98:	f8cd b008 	str.w	fp, [sp, #8]
    GET_UINT32_BE( W[15], data, 60 );
    4a9c:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    4aa0:	f891 b03d 	ldrb.w	fp, [r1, #61]	; 0x3d
    4aa4:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    4aa8:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
    4aac:	f891 303e 	ldrb.w	r3, [r1, #62]	; 0x3e
    4ab0:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
    4ab4:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
    4ab8:	ea4b 0103 	orr.w	r1, fp, r3
    4abc:	9103      	str	r1, [sp, #12]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
    4abe:	4602      	mov	r2, r0
    4ac0:	6880      	ldr	r0, [r0, #8]
    4ac2:	4605      	mov	r5, r0
    B = ctx->state[1];
    4ac4:	68d0      	ldr	r0, [r2, #12]
    4ac6:	4607      	mov	r7, r0
    C = ctx->state[2];
    4ac8:	6913      	ldr	r3, [r2, #16]
    4aca:	461c      	mov	r4, r3
    D = ctx->state[3];
    4acc:	6956      	ldr	r6, [r2, #20]
    E = ctx->state[4];
    4ace:	9215      	str	r2, [sp, #84]	; 0x54
    4ad0:	6991      	ldr	r1, [r2, #24]
    4ad2:	460a      	mov	r2, r1

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    4ad4:	4630      	mov	r0, r6
    4ad6:	ea84 0306 	eor.w	r3, r4, r6
    4ada:	463e      	mov	r6, r7
    4adc:	403b      	ands	r3, r7
    4ade:	4607      	mov	r7, r0
    4ae0:	4043      	eors	r3, r0
    4ae2:	4629      	mov	r1, r5
    4ae4:	eb03 63f5 	add.w	r3, r3, r5, ror #27
    4ae8:	444b      	add	r3, r9
    4aea:	9214      	str	r2, [sp, #80]	; 0x50
    4aec:	4413      	add	r3, r2
    4aee:	4de5      	ldr	r5, [pc, #916]	; (4e84 <mbedtls_sha1_process+0x5b0>)
    4af0:	442b      	add	r3, r5
    4af2:	9611      	str	r6, [sp, #68]	; 0x44
    4af4:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( E, A, B, C, D, W[1]  );
    4af8:	ea84 0206 	eor.w	r2, r4, r6
    4afc:	400a      	ands	r2, r1
    4afe:	4062      	eors	r2, r4
    4b00:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    4b04:	9808      	ldr	r0, [sp, #32]
    4b06:	4402      	add	r2, r0
    4b08:	9713      	str	r7, [sp, #76]	; 0x4c
    4b0a:	443a      	add	r2, r7
    4b0c:	442a      	add	r2, r5
    4b0e:	9110      	str	r1, [sp, #64]	; 0x40
    4b10:	ea4f 00b1 	mov.w	r0, r1, ror #2
    P( D, E, A, B, C, W[2]  );
    4b14:	ea86 0100 	eor.w	r1, r6, r0
    4b18:	4019      	ands	r1, r3
    4b1a:	4071      	eors	r1, r6
    4b1c:	eb01 61f2 	add.w	r1, r1, r2, ror #27
    4b20:	4441      	add	r1, r8
    4b22:	9412      	str	r4, [sp, #72]	; 0x48
    4b24:	4421      	add	r1, r4
    4b26:	4429      	add	r1, r5
    4b28:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, W[3]  );
    4b2c:	ea80 0403 	eor.w	r4, r0, r3
    4b30:	4014      	ands	r4, r2
    4b32:	4044      	eors	r4, r0
    4b34:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    4b38:	4464      	add	r4, ip
    4b3a:	4434      	add	r4, r6
    4b3c:	442c      	add	r4, r5
    4b3e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, W[4]  );
    4b42:	ea83 0602 	eor.w	r6, r3, r2
    4b46:	400e      	ands	r6, r1
    4b48:	405e      	eors	r6, r3
    4b4a:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    4b4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4b50:	443e      	add	r6, r7
    4b52:	4430      	add	r0, r6
    4b54:	4428      	add	r0, r5
    4b56:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, W[5]  );
    4b5a:	ea82 0601 	eor.w	r6, r2, r1
    4b5e:	4026      	ands	r6, r4
    4b60:	4056      	eors	r6, r2
    4b62:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    4b66:	4476      	add	r6, lr
    4b68:	4433      	add	r3, r6
    4b6a:	442b      	add	r3, r5
    4b6c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, W[6]  );
    4b70:	ea81 0604 	eor.w	r6, r1, r4
    4b74:	4006      	ands	r6, r0
    4b76:	404e      	eors	r6, r1
    4b78:	461f      	mov	r7, r3
    4b7a:	eb06 63f3 	add.w	r3, r6, r3, ror #27
    4b7e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    4b80:	199e      	adds	r6, r3, r6
    4b82:	4432      	add	r2, r6
    4b84:	442a      	add	r2, r5
    4b86:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, W[7]  );
    4b8a:	ea84 0600 	eor.w	r6, r4, r0
    4b8e:	403e      	ands	r6, r7
    4b90:	4066      	eors	r6, r4
    4b92:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    4b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b98:	441e      	add	r6, r3
    4b9a:	4431      	add	r1, r6
    4b9c:	4429      	add	r1, r5
    4b9e:	ea4f 03b7 	mov.w	r3, r7, ror #2
    P( C, D, E, A, B, W[8]  );
    4ba2:	461f      	mov	r7, r3
    4ba4:	ea80 0603 	eor.w	r6, r0, r3
    4ba8:	4016      	ands	r6, r2
    4baa:	4046      	eors	r6, r0
    4bac:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    4bb0:	4456      	add	r6, sl
    4bb2:	4434      	add	r4, r6
    4bb4:	442c      	add	r4, r5
    4bb6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, W[9]  );
    4bba:	461e      	mov	r6, r3
    4bbc:	4056      	eors	r6, r2
    4bbe:	400e      	ands	r6, r1
    4bc0:	405e      	eors	r6, r3
    4bc2:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    4bc6:	9b04      	ldr	r3, [sp, #16]
    4bc8:	441e      	add	r6, r3
    4bca:	4430      	add	r0, r6
    4bcc:	4428      	add	r0, r5
    4bce:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, W[10] );
    4bd2:	ea82 0601 	eor.w	r6, r2, r1
    4bd6:	4026      	ands	r6, r4
    4bd8:	4056      	eors	r6, r2
    4bda:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    4bde:	9b05      	ldr	r3, [sp, #20]
    4be0:	441e      	add	r6, r3
    4be2:	463b      	mov	r3, r7
    4be4:	4433      	add	r3, r6
    4be6:	442b      	add	r3, r5
    4be8:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, W[11] );
    4bec:	ea81 0604 	eor.w	r6, r1, r4
    4bf0:	4006      	ands	r6, r0
    4bf2:	404e      	eors	r6, r1
    4bf4:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    4bf8:	4637      	mov	r7, r6
    4bfa:	9e06      	ldr	r6, [sp, #24]
    4bfc:	46b3      	mov	fp, r6
    4bfe:	463e      	mov	r6, r7
    4c00:	445e      	add	r6, fp
    4c02:	4432      	add	r2, r6
    4c04:	442a      	add	r2, r5
    4c06:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, W[12] );
    4c0a:	ea84 0600 	eor.w	r6, r4, r0
    4c0e:	401e      	ands	r6, r3
    4c10:	4066      	eors	r6, r4
    4c12:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    4c16:	9f07      	ldr	r7, [sp, #28]
    4c18:	970d      	str	r7, [sp, #52]	; 0x34
    4c1a:	443e      	add	r6, r7
    4c1c:	4431      	add	r1, r6
    4c1e:	4429      	add	r1, r5
    4c20:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, W[13] );
    4c24:	ea80 0603 	eor.w	r6, r0, r3
    4c28:	4016      	ands	r6, r2
    4c2a:	4046      	eors	r6, r0
    4c2c:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    4c30:	9f01      	ldr	r7, [sp, #4]
    4c32:	443e      	add	r6, r7
    4c34:	4434      	add	r4, r6
    4c36:	442c      	add	r4, r5
    4c38:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, W[14] );
    4c3c:	ea83 0602 	eor.w	r6, r3, r2
    4c40:	400e      	ands	r6, r1
    4c42:	405e      	eors	r6, r3
    4c44:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    4c48:	9f02      	ldr	r7, [sp, #8]
    4c4a:	443e      	add	r6, r7
    4c4c:	4430      	add	r0, r6
    4c4e:	4428      	add	r0, r5
    4c50:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, W[15] );
    4c54:	ea82 0601 	eor.w	r6, r2, r1
    4c58:	4026      	ands	r6, r4
    4c5a:	4056      	eors	r6, r2
    4c5c:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    4c60:	9f03      	ldr	r7, [sp, #12]
    4c62:	443e      	add	r6, r7
    4c64:	4433      	add	r3, r6
    4c66:	442b      	add	r3, r5
    4c68:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(16) );
    4c6c:	9f01      	ldr	r7, [sp, #4]
    4c6e:	ea8a 0b07 	eor.w	fp, sl, r7
    4c72:	ea88 0b0b 	eor.w	fp, r8, fp
    4c76:	ea89 0b0b 	eor.w	fp, r9, fp
    4c7a:	ea81 0604 	eor.w	r6, r1, r4
    4c7e:	4006      	ands	r6, r0
    4c80:	404e      	eors	r6, r1
    4c82:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    4c86:	ea4f 79fb 	mov.w	r9, fp, ror #31
    4c8a:	f8cd 901c 	str.w	r9, [sp, #28]
    4c8e:	444e      	add	r6, r9
    4c90:	442e      	add	r6, r5
    4c92:	4432      	add	r2, r6
    4c94:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(17) );
    4c98:	9e04      	ldr	r6, [sp, #16]
    4c9a:	46b1      	mov	r9, r6
    4c9c:	9e02      	ldr	r6, [sp, #8]
    4c9e:	ea89 0b06 	eor.w	fp, r9, r6
    4ca2:	ea8c 0b0b 	eor.w	fp, ip, fp
    4ca6:	9e08      	ldr	r6, [sp, #32]
    4ca8:	ea86 0b0b 	eor.w	fp, r6, fp
    4cac:	ea84 0600 	eor.w	r6, r4, r0
    4cb0:	401e      	ands	r6, r3
    4cb2:	4066      	eors	r6, r4
    4cb4:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    4cb8:	ea4f 79fb 	mov.w	r9, fp, ror #31
    4cbc:	f8cd 9020 	str.w	r9, [sp, #32]
    4cc0:	444e      	add	r6, r9
    4cc2:	442e      	add	r6, r5
    4cc4:	4431      	add	r1, r6
    4cc6:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(18) );
    4cca:	9e05      	ldr	r6, [sp, #20]
    4ccc:	46b1      	mov	r9, r6
    4cce:	9e03      	ldr	r6, [sp, #12]
    4cd0:	ea89 0606 	eor.w	r6, r9, r6
    4cd4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4cd6:	407e      	eors	r6, r7
    4cd8:	ea88 0806 	eor.w	r8, r8, r6
    4cdc:	ea80 0603 	eor.w	r6, r0, r3
    4ce0:	4016      	ands	r6, r2
    4ce2:	4046      	eors	r6, r0
    4ce4:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    4ce8:	ea4f 78f8 	mov.w	r8, r8, ror #31
    4cec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    4cf0:	4446      	add	r6, r8
    4cf2:	442e      	add	r6, r5
    4cf4:	4434      	add	r4, r6
    4cf6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
    4cfa:	9e06      	ldr	r6, [sp, #24]
    4cfc:	46b0      	mov	r8, r6
    4cfe:	9e07      	ldr	r6, [sp, #28]
    4d00:	ea88 0906 	eor.w	r9, r8, r6
    4d04:	ea8e 0909 	eor.w	r9, lr, r9
    4d08:	ea8c 0909 	eor.w	r9, ip, r9
    4d0c:	ea83 0602 	eor.w	r6, r3, r2
    4d10:	400e      	ands	r6, r1
    4d12:	405e      	eors	r6, r3
    4d14:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    4d18:	ea4f 79f9 	mov.w	r9, r9, ror #31
    4d1c:	444e      	add	r6, r9
    4d1e:	4435      	add	r5, r6
    4d20:	4428      	add	r0, r5
    4d22:	ea4f 01b1 	mov.w	r1, r1, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    4d26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d28:	46ac      	mov	ip, r5
    4d2a:	9d08      	ldr	r5, [sp, #32]
    4d2c:	ea8c 0805 	eor.w	r8, ip, r5
    4d30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4d32:	ea85 0808 	eor.w	r8, r5, r8
    4d36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    4d38:	ea85 0808 	eor.w	r8, r5, r8
    4d3c:	ea84 0601 	eor.w	r6, r4, r1
    4d40:	4056      	eors	r6, r2
    4d42:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    4d46:	ea4f 78f8 	mov.w	r8, r8, ror #31
    4d4a:	4446      	add	r6, r8
    4d4c:	4d4e      	ldr	r5, [pc, #312]	; (4e88 <mbedtls_sha1_process+0x5b4>)
    4d4e:	442e      	add	r6, r5
    4d50:	4433      	add	r3, r6
    4d52:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
    4d56:	9f01      	ldr	r7, [sp, #4]
    4d58:	9e09      	ldr	r6, [sp, #36]	; 0x24
    4d5a:	ea87 0c06 	eor.w	ip, r7, r6
    4d5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4d60:	ea86 0c0c 	eor.w	ip, r6, ip
    4d64:	ea8e 0c0c 	eor.w	ip, lr, ip
    4d68:	ea80 0604 	eor.w	r6, r0, r4
    4d6c:	404e      	eors	r6, r1
    4d6e:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    4d72:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    4d76:	4466      	add	r6, ip
    4d78:	442e      	add	r6, r5
    4d7a:	4432      	add	r2, r6
    4d7c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(22) );
    4d80:	9e02      	ldr	r6, [sp, #8]
    4d82:	ea86 0e09 	eor.w	lr, r6, r9
    4d86:	ea8a 0e0e 	eor.w	lr, sl, lr
    4d8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    4d8c:	ea86 0e0e 	eor.w	lr, r6, lr
    4d90:	ea83 0600 	eor.w	r6, r3, r0
    4d94:	4066      	eors	r6, r4
    4d96:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    4d9a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    4d9e:	4476      	add	r6, lr
    4da0:	442e      	add	r6, r5
    4da2:	4431      	add	r1, r6
    4da4:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(23) );
    4da8:	9e03      	ldr	r6, [sp, #12]
    4daa:	ea86 0708 	eor.w	r7, r6, r8
    4dae:	9e04      	ldr	r6, [sp, #16]
    4db0:	4077      	eors	r7, r6
    4db2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4db4:	4077      	eors	r7, r6
    4db6:	ea82 0603 	eor.w	r6, r2, r3
    4dba:	4046      	eors	r6, r0
    4dbc:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    4dc0:	ea4f 77f7 	mov.w	r7, r7, ror #31
    4dc4:	970a      	str	r7, [sp, #40]	; 0x28
    4dc6:	443e      	add	r6, r7
    4dc8:	442e      	add	r6, r5
    4dca:	4434      	add	r4, r6
    4dcc:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(24) );
    4dd0:	9e07      	ldr	r6, [sp, #28]
    4dd2:	ea86 060c 	eor.w	r6, r6, ip
    4dd6:	9f05      	ldr	r7, [sp, #20]
    4dd8:	407e      	eors	r6, r7
    4dda:	ea8a 0606 	eor.w	r6, sl, r6
    4dde:	ea81 0a02 	eor.w	sl, r1, r2
    4de2:	ea83 0a0a 	eor.w	sl, r3, sl
    4de6:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    4dea:	ea4f 76f6 	mov.w	r6, r6, ror #31
    4dee:	44b2      	add	sl, r6
    4df0:	44aa      	add	sl, r5
    4df2:	4450      	add	r0, sl
    4df4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, R(25) );
    4df8:	9f08      	ldr	r7, [sp, #32]
    4dfa:	ea87 0b0e 	eor.w	fp, r7, lr
    4dfe:	9f06      	ldr	r7, [sp, #24]
    4e00:	ea87 0b0b 	eor.w	fp, r7, fp
    4e04:	9f04      	ldr	r7, [sp, #16]
    4e06:	ea87 0b0b 	eor.w	fp, r7, fp
    4e0a:	ea84 0a01 	eor.w	sl, r4, r1
    4e0e:	ea82 0a0a 	eor.w	sl, r2, sl
    4e12:	eb0a 6af0 	add.w	sl, sl, r0, ror #27
    4e16:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4e1a:	f8cd b010 	str.w	fp, [sp, #16]
    4e1e:	44da      	add	sl, fp
    4e20:	44aa      	add	sl, r5
    4e22:	4453      	add	r3, sl
    4e24:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(26) );
    4e28:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4e2a:	46ba      	mov	sl, r7
    4e2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4e2e:	ea8a 0b07 	eor.w	fp, sl, r7
    4e32:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4e34:	ea87 0b0b 	eor.w	fp, r7, fp
    4e38:	9f05      	ldr	r7, [sp, #20]
    4e3a:	ea87 0b0b 	eor.w	fp, r7, fp
    4e3e:	ea80 0a04 	eor.w	sl, r0, r4
    4e42:	ea81 0a0a 	eor.w	sl, r1, sl
    4e46:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    4e4a:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4e4e:	f8cd b014 	str.w	fp, [sp, #20]
    4e52:	44da      	add	sl, fp
    4e54:	44aa      	add	sl, r5
    4e56:	4452      	add	r2, sl
    4e58:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(27) );
    4e5c:	ea89 0b06 	eor.w	fp, r9, r6
    4e60:	9f01      	ldr	r7, [sp, #4]
    4e62:	ea87 0b0b 	eor.w	fp, r7, fp
    4e66:	9f06      	ldr	r7, [sp, #24]
    4e68:	ea87 0b0b 	eor.w	fp, r7, fp
    4e6c:	ea83 0a00 	eor.w	sl, r3, r0
    4e70:	ea84 0a0a 	eor.w	sl, r4, sl
    4e74:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    4e78:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4e7c:	f8cd b018 	str.w	fp, [sp, #24]
    4e80:	e004      	b.n	4e8c <mbedtls_sha1_process+0x5b8>
    4e82:	bf00      	nop
    4e84:	5a827999 	.word	0x5a827999
    4e88:	6ed9eba1 	.word	0x6ed9eba1
    4e8c:	44da      	add	sl, fp
    4e8e:	44aa      	add	sl, r5
    4e90:	4451      	add	r1, sl
    4e92:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(28) );
    4e96:	9f04      	ldr	r7, [sp, #16]
    4e98:	ea88 0b07 	eor.w	fp, r8, r7
    4e9c:	9f02      	ldr	r7, [sp, #8]
    4e9e:	ea87 0b0b 	eor.w	fp, r7, fp
    4ea2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4ea4:	ea87 0b0b 	eor.w	fp, r7, fp
    4ea8:	ea82 0a03 	eor.w	sl, r2, r3
    4eac:	ea80 0a0a 	eor.w	sl, r0, sl
    4eb0:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
    4eb4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4eb8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    4ebc:	44da      	add	sl, fp
    4ebe:	44aa      	add	sl, r5
    4ec0:	4454      	add	r4, sl
    4ec2:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(29) );
    4ec6:	9f05      	ldr	r7, [sp, #20]
    4ec8:	ea8c 0b07 	eor.w	fp, ip, r7
    4ecc:	9f03      	ldr	r7, [sp, #12]
    4ece:	ea87 0b0b 	eor.w	fp, r7, fp
    4ed2:	9f01      	ldr	r7, [sp, #4]
    4ed4:	ea87 0b0b 	eor.w	fp, r7, fp
    4ed8:	ea81 0a02 	eor.w	sl, r1, r2
    4edc:	ea83 0a0a 	eor.w	sl, r3, sl
    4ee0:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    4ee4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4ee8:	f8cd b004 	str.w	fp, [sp, #4]
    4eec:	44da      	add	sl, fp
    4eee:	44aa      	add	sl, r5
    4ef0:	4450      	add	r0, sl
    4ef2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, R(30) );
    4ef6:	9f06      	ldr	r7, [sp, #24]
    4ef8:	ea8e 0b07 	eor.w	fp, lr, r7
    4efc:	9f07      	ldr	r7, [sp, #28]
    4efe:	ea87 0b0b 	eor.w	fp, r7, fp
    4f02:	9f02      	ldr	r7, [sp, #8]
    4f04:	ea87 0b0b 	eor.w	fp, r7, fp
    4f08:	ea84 0a01 	eor.w	sl, r4, r1
    4f0c:	ea82 0a0a 	eor.w	sl, r2, sl
    4f10:	eb0a 6af0 	add.w	sl, sl, r0, ror #27
    4f14:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4f18:	f8cd b008 	str.w	fp, [sp, #8]
    4f1c:	44da      	add	sl, fp
    4f1e:	44aa      	add	sl, r5
    4f20:	4453      	add	r3, sl
    4f22:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(31) );
    4f26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4f28:	46ba      	mov	sl, r7
    4f2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4f2c:	ea87 0b0a 	eor.w	fp, r7, sl
    4f30:	9f08      	ldr	r7, [sp, #32]
    4f32:	ea87 0b0b 	eor.w	fp, r7, fp
    4f36:	9f03      	ldr	r7, [sp, #12]
    4f38:	ea87 0b0b 	eor.w	fp, r7, fp
    4f3c:	ea80 0a04 	eor.w	sl, r0, r4
    4f40:	ea81 0a0a 	eor.w	sl, r1, sl
    4f44:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    4f48:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4f4c:	f8cd b00c 	str.w	fp, [sp, #12]
    4f50:	44da      	add	sl, fp
    4f52:	44aa      	add	sl, r5
    4f54:	4452      	add	r2, sl
    4f56:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(32) );
    4f5a:	9f01      	ldr	r7, [sp, #4]
    4f5c:	ea86 0b07 	eor.w	fp, r6, r7
    4f60:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4f62:	ea87 0b0b 	eor.w	fp, r7, fp
    4f66:	9f07      	ldr	r7, [sp, #28]
    4f68:	ea87 0b0b 	eor.w	fp, r7, fp
    4f6c:	ea83 0a00 	eor.w	sl, r3, r0
    4f70:	ea84 0a0a 	eor.w	sl, r4, sl
    4f74:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    4f78:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4f7c:	f8cd b01c 	str.w	fp, [sp, #28]
    4f80:	44da      	add	sl, fp
    4f82:	44aa      	add	sl, r5
    4f84:	4451      	add	r1, sl
    4f86:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(33) );
    4f8a:	9f04      	ldr	r7, [sp, #16]
    4f8c:	46ba      	mov	sl, r7
    4f8e:	9f02      	ldr	r7, [sp, #8]
    4f90:	ea8a 0b07 	eor.w	fp, sl, r7
    4f94:	ea89 0b0b 	eor.w	fp, r9, fp
    4f98:	9f08      	ldr	r7, [sp, #32]
    4f9a:	ea87 0b0b 	eor.w	fp, r7, fp
    4f9e:	ea82 0a03 	eor.w	sl, r2, r3
    4fa2:	ea80 0a0a 	eor.w	sl, r0, sl
    4fa6:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
    4faa:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    4fae:	f8cd b020 	str.w	fp, [sp, #32]
    4fb2:	44da      	add	sl, fp
    4fb4:	44aa      	add	sl, r5
    4fb6:	4454      	add	r4, sl
    4fb8:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(34) );
    4fbc:	9f05      	ldr	r7, [sp, #20]
    4fbe:	46ba      	mov	sl, r7
    4fc0:	9f03      	ldr	r7, [sp, #12]
    4fc2:	ea8a 0a07 	eor.w	sl, sl, r7
    4fc6:	ea88 0a0a 	eor.w	sl, r8, sl
    4fca:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4fcc:	ea87 0a0a 	eor.w	sl, r7, sl
    4fd0:	ea81 0b02 	eor.w	fp, r1, r2
    4fd4:	ea83 0b0b 	eor.w	fp, r3, fp
    4fd8:	eb0b 6bf4 	add.w	fp, fp, r4, ror #27
    4fdc:	ea4f 7afa 	mov.w	sl, sl, ror #31
    4fe0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    4fe4:	44d3      	add	fp, sl
    4fe6:	44ab      	add	fp, r5
    4fe8:	4458      	add	r0, fp
    4fea:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, R(35) );
    4fee:	9f06      	ldr	r7, [sp, #24]
    4ff0:	46ba      	mov	sl, r7
    4ff2:	9f07      	ldr	r7, [sp, #28]
    4ff4:	46bb      	mov	fp, r7
    4ff6:	ea8a 0a07 	eor.w	sl, sl, r7
    4ffa:	ea8c 0a0a 	eor.w	sl, ip, sl
    4ffe:	ea89 090a 	eor.w	r9, r9, sl
    5002:	ea84 0a01 	eor.w	sl, r4, r1
    5006:	ea82 0a0a 	eor.w	sl, r2, sl
    500a:	eb0a 6af0 	add.w	sl, sl, r0, ror #27
    500e:	ea4f 79f9 	mov.w	r9, r9, ror #31
    5012:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    5016:	44ca      	add	sl, r9
    5018:	44aa      	add	sl, r5
    501a:	4453      	add	r3, sl
    501c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(36) );
    5020:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5022:	46b9      	mov	r9, r7
    5024:	9f08      	ldr	r7, [sp, #32]
    5026:	ea89 0907 	eor.w	r9, r9, r7
    502a:	ea8e 0909 	eor.w	r9, lr, r9
    502e:	ea88 0809 	eor.w	r8, r8, r9
    5032:	ea80 0904 	eor.w	r9, r0, r4
    5036:	ea81 0909 	eor.w	r9, r1, r9
    503a:	eb09 69f3 	add.w	r9, r9, r3, ror #27
    503e:	ea4f 78f8 	mov.w	r8, r8, ror #31
    5042:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5046:	44c1      	add	r9, r8
    5048:	44a9      	add	r9, r5
    504a:	444a      	add	r2, r9
    504c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
    5050:	9f01      	ldr	r7, [sp, #4]
    5052:	46b8      	mov	r8, r7
    5054:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5056:	46b9      	mov	r9, r7
    5058:	ea88 0807 	eor.w	r8, r8, r7
    505c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    505e:	ea87 0808 	eor.w	r8, r7, r8
    5062:	ea8c 0c08 	eor.w	ip, ip, r8
    5066:	ea83 0800 	eor.w	r8, r3, r0
    506a:	ea84 0808 	eor.w	r8, r4, r8
    506e:	eb08 68f2 	add.w	r8, r8, r2, ror #27
    5072:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    5076:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    507a:	44e0      	add	r8, ip
    507c:	44a8      	add	r8, r5
    507e:	4441      	add	r1, r8
    5080:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(38) );
    5084:	9f02      	ldr	r7, [sp, #8]
    5086:	46bc      	mov	ip, r7
    5088:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    508a:	ea8c 0807 	eor.w	r8, ip, r7
    508e:	ea86 0808 	eor.w	r8, r6, r8
    5092:	ea8e 0e08 	eor.w	lr, lr, r8
    5096:	ea82 0c03 	eor.w	ip, r2, r3
    509a:	ea80 0c0c 	eor.w	ip, r0, ip
    509e:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    50a2:	ea4f 7efe 	mov.w	lr, lr, ror #31
    50a6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    50aa:	44f4      	add	ip, lr
    50ac:	44ac      	add	ip, r5
    50ae:	4464      	add	r4, ip
    50b0:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(39) );
    50b4:	9f03      	ldr	r7, [sp, #12]
    50b6:	46be      	mov	lr, r7
    50b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    50ba:	ea8e 0a07 	eor.w	sl, lr, r7
    50be:	9f04      	ldr	r7, [sp, #16]
    50c0:	ea87 0a0a 	eor.w	sl, r7, sl
    50c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    50c6:	ea87 070a 	eor.w	r7, r7, sl
    50ca:	ea81 0e02 	eor.w	lr, r1, r2
    50ce:	ea83 0e0e 	eor.w	lr, r3, lr
    50d2:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    50d6:	ea4f 7af7 	mov.w	sl, r7, ror #31
    50da:	44d6      	add	lr, sl
    50dc:	44ae      	add	lr, r5
    50de:	4470      	add	r0, lr
    50e0:	ea4f 01b1 	mov.w	r1, r1, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    50e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    50e6:	ea8b 0505 	eor.w	r5, fp, r5
    50ea:	9f05      	ldr	r7, [sp, #20]
    50ec:	407d      	eors	r5, r7
    50ee:	406e      	eors	r6, r5
    50f0:	ea04 0501 	and.w	r5, r4, r1
    50f4:	ea44 0701 	orr.w	r7, r4, r1
    50f8:	4017      	ands	r7, r2
    50fa:	432f      	orrs	r7, r5
    50fc:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    5100:	ea4f 75f6 	mov.w	r5, r6, ror #31
    5104:	950a      	str	r5, [sp, #40]	; 0x28
    5106:	442f      	add	r7, r5
    5108:	4ddf      	ldr	r5, [pc, #892]	; (5488 <mbedtls_sha1_process+0xbb4>)
    510a:	442f      	add	r7, r5
    510c:	443b      	add	r3, r7
    510e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
    5112:	9e08      	ldr	r6, [sp, #32]
    5114:	46b6      	mov	lr, r6
    5116:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5118:	ea8e 0b06 	eor.w	fp, lr, r6
    511c:	9e06      	ldr	r6, [sp, #24]
    511e:	ea86 0b0b 	eor.w	fp, r6, fp
    5122:	9f04      	ldr	r7, [sp, #16]
    5124:	ea87 0b0b 	eor.w	fp, r7, fp
    5128:	ea00 0604 	and.w	r6, r0, r4
    512c:	ea40 0704 	orr.w	r7, r0, r4
    5130:	400f      	ands	r7, r1
    5132:	433e      	orrs	r6, r7
    5134:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    5138:	ea4f 7efb 	mov.w	lr, fp, ror #31
    513c:	f8cd e010 	str.w	lr, [sp, #16]
    5140:	4476      	add	r6, lr
    5142:	442e      	add	r6, r5
    5144:	4432      	add	r2, r6
    5146:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(42) );
    514a:	ea89 0b0a 	eor.w	fp, r9, sl
    514e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    5150:	ea86 0b0b 	eor.w	fp, r6, fp
    5154:	9f05      	ldr	r7, [sp, #20]
    5156:	ea87 0b0b 	eor.w	fp, r7, fp
    515a:	ea03 0600 	and.w	r6, r3, r0
    515e:	ea43 0700 	orr.w	r7, r3, r0
    5162:	4027      	ands	r7, r4
    5164:	433e      	orrs	r6, r7
    5166:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    516a:	ea4f 7efb 	mov.w	lr, fp, ror #31
    516e:	f8cd e014 	str.w	lr, [sp, #20]
    5172:	4476      	add	r6, lr
    5174:	442e      	add	r6, r5
    5176:	4431      	add	r1, r6
    5178:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(43) );
    517c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    517e:	46b6      	mov	lr, r6
    5180:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5182:	ea8e 0b06 	eor.w	fp, lr, r6
    5186:	9e01      	ldr	r6, [sp, #4]
    5188:	ea86 0b0b 	eor.w	fp, r6, fp
    518c:	9f06      	ldr	r7, [sp, #24]
    518e:	ea87 0b0b 	eor.w	fp, r7, fp
    5192:	ea02 0603 	and.w	r6, r2, r3
    5196:	ea42 0703 	orr.w	r7, r2, r3
    519a:	4007      	ands	r7, r0
    519c:	433e      	orrs	r6, r7
    519e:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    51a2:	ea4f 7efb 	mov.w	lr, fp, ror #31
    51a6:	f8cd e018 	str.w	lr, [sp, #24]
    51aa:	4476      	add	r6, lr
    51ac:	442e      	add	r6, r5
    51ae:	4434      	add	r4, r6
    51b0:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(44) );
    51b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    51b6:	46b6      	mov	lr, r6
    51b8:	9e04      	ldr	r6, [sp, #16]
    51ba:	ea8e 0b06 	eor.w	fp, lr, r6
    51be:	9e02      	ldr	r6, [sp, #8]
    51c0:	ea86 0b0b 	eor.w	fp, r6, fp
    51c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    51c6:	ea87 0b0b 	eor.w	fp, r7, fp
    51ca:	ea01 0702 	and.w	r7, r1, r2
    51ce:	ea41 0602 	orr.w	r6, r1, r2
    51d2:	401e      	ands	r6, r3
    51d4:	4337      	orrs	r7, r6
    51d6:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    51da:	ea4f 7efb 	mov.w	lr, fp, ror #31
    51de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    51e2:	4477      	add	r7, lr
    51e4:	442f      	add	r7, r5
    51e6:	4438      	add	r0, r7
    51e8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( A, B, C, D, E, R(45) );
    51ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    51ee:	46b6      	mov	lr, r6
    51f0:	9e05      	ldr	r6, [sp, #20]
    51f2:	ea8e 0b06 	eor.w	fp, lr, r6
    51f6:	9e03      	ldr	r6, [sp, #12]
    51f8:	ea86 0b0b 	eor.w	fp, r6, fp
    51fc:	9f01      	ldr	r7, [sp, #4]
    51fe:	ea87 0b0b 	eor.w	fp, r7, fp
    5202:	ea04 0601 	and.w	r6, r4, r1
    5206:	ea44 0701 	orr.w	r7, r4, r1
    520a:	4017      	ands	r7, r2
    520c:	433e      	orrs	r6, r7
    520e:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    5212:	ea4f 7efb 	mov.w	lr, fp, ror #31
    5216:	f8cd e004 	str.w	lr, [sp, #4]
    521a:	4476      	add	r6, lr
    521c:	442e      	add	r6, r5
    521e:	441e      	add	r6, r3
    5220:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(46) );
    5224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5226:	469e      	mov	lr, r3
    5228:	9b06      	ldr	r3, [sp, #24]
    522a:	ea8e 0b03 	eor.w	fp, lr, r3
    522e:	9b07      	ldr	r3, [sp, #28]
    5230:	ea83 0b0b 	eor.w	fp, r3, fp
    5234:	9f02      	ldr	r7, [sp, #8]
    5236:	ea87 0b0b 	eor.w	fp, r7, fp
    523a:	ea00 0304 	and.w	r3, r0, r4
    523e:	ea40 0704 	orr.w	r7, r0, r4
    5242:	400f      	ands	r7, r1
    5244:	433b      	orrs	r3, r7
    5246:	eb03 63f6 	add.w	r3, r3, r6, ror #27
    524a:	ea4f 7efb 	mov.w	lr, fp, ror #31
    524e:	f8cd e008 	str.w	lr, [sp, #8]
    5252:	4473      	add	r3, lr
    5254:	442b      	add	r3, r5
    5256:	4413      	add	r3, r2
    5258:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
    525c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    525e:	ea8a 0c02 	eor.w	ip, sl, r2
    5262:	9a08      	ldr	r2, [sp, #32]
    5264:	ea82 0c0c 	eor.w	ip, r2, ip
    5268:	9f03      	ldr	r7, [sp, #12]
    526a:	ea87 0c0c 	eor.w	ip, r7, ip
    526e:	ea06 0200 	and.w	r2, r6, r0
    5272:	ea46 0700 	orr.w	r7, r6, r0
    5276:	4027      	ands	r7, r4
    5278:	433a      	orrs	r2, r7
    527a:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    527e:	ea4f 7efc 	mov.w	lr, ip, ror #31
    5282:	f8cd e00c 	str.w	lr, [sp, #12]
    5286:	4472      	add	r2, lr
    5288:	442a      	add	r2, r5
    528a:	440a      	add	r2, r1
    528c:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(48) );
    5290:	990a      	ldr	r1, [sp, #40]	; 0x28
    5292:	468e      	mov	lr, r1
    5294:	9901      	ldr	r1, [sp, #4]
    5296:	ea8e 0701 	eor.w	r7, lr, r1
    529a:	4649      	mov	r1, r9
    529c:	404f      	eors	r7, r1
    529e:	9907      	ldr	r1, [sp, #28]
    52a0:	404f      	eors	r7, r1
    52a2:	ea03 0106 	and.w	r1, r3, r6
    52a6:	ea43 0e06 	orr.w	lr, r3, r6
    52aa:	ea00 0e0e 	and.w	lr, r0, lr
    52ae:	ea41 010e 	orr.w	r1, r1, lr
    52b2:	eb01 61f2 	add.w	r1, r1, r2, ror #27
    52b6:	ea4f 77f7 	mov.w	r7, r7, ror #31
    52ba:	9707      	str	r7, [sp, #28]
    52bc:	4439      	add	r1, r7
    52be:	4429      	add	r1, r5
    52c0:	4421      	add	r1, r4
    52c2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(49) );
    52c6:	9c04      	ldr	r4, [sp, #16]
    52c8:	46a6      	mov	lr, r4
    52ca:	9c02      	ldr	r4, [sp, #8]
    52cc:	ea8e 0c04 	eor.w	ip, lr, r4
    52d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    52d2:	ea87 0c0c 	eor.w	ip, r7, ip
    52d6:	9f08      	ldr	r7, [sp, #32]
    52d8:	ea87 0c0c 	eor.w	ip, r7, ip
    52dc:	ea02 0403 	and.w	r4, r2, r3
    52e0:	ea42 0703 	orr.w	r7, r2, r3
    52e4:	4037      	ands	r7, r6
    52e6:	433c      	orrs	r4, r7
    52e8:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    52ec:	ea4f 7efc 	mov.w	lr, ip, ror #31
    52f0:	f8cd e020 	str.w	lr, [sp, #32]
    52f4:	4474      	add	r4, lr
    52f6:	442c      	add	r4, r5
    52f8:	4404      	add	r4, r0
    52fa:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(50) );
    52fe:	9805      	ldr	r0, [sp, #20]
    5300:	4686      	mov	lr, r0
    5302:	9803      	ldr	r0, [sp, #12]
    5304:	ea8e 0e00 	eor.w	lr, lr, r0
    5308:	980d      	ldr	r0, [sp, #52]	; 0x34
    530a:	ea80 0e0e 	eor.w	lr, r0, lr
    530e:	ea89 0e0e 	eor.w	lr, r9, lr
    5312:	ea01 0002 	and.w	r0, r1, r2
    5316:	ea41 0702 	orr.w	r7, r1, r2
    531a:	401f      	ands	r7, r3
    531c:	4338      	orrs	r0, r7
    531e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    5322:	ea4f 7efe 	mov.w	lr, lr, ror #31
    5326:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
    532a:	4470      	add	r0, lr
    532c:	4428      	add	r0, r5
    532e:	4430      	add	r0, r6
    5330:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(51) );
    5334:	9f06      	ldr	r7, [sp, #24]
    5336:	9e07      	ldr	r6, [sp, #28]
    5338:	ea87 0906 	eor.w	r9, r7, r6
    533c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    533e:	ea86 0909 	eor.w	r9, r6, r9
    5342:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5344:	ea87 0909 	eor.w	r9, r7, r9
    5348:	ea04 0601 	and.w	r6, r4, r1
    534c:	ea44 0701 	orr.w	r7, r4, r1
    5350:	4017      	ands	r7, r2
    5352:	433e      	orrs	r6, r7
    5354:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    5358:	ea4f 7ef9 	mov.w	lr, r9, ror #31
    535c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    5360:	4476      	add	r6, lr
    5362:	442e      	add	r6, r5
    5364:	4433      	add	r3, r6
    5366:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(52) );
    536a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    536c:	9e08      	ldr	r6, [sp, #32]
    536e:	ea87 0806 	eor.w	r8, r7, r6
    5372:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5374:	ea87 0808 	eor.w	r8, r7, r8
    5378:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    537a:	ea87 0808 	eor.w	r8, r7, r8
    537e:	ea00 0704 	and.w	r7, r0, r4
    5382:	ea40 0604 	orr.w	r6, r0, r4
    5386:	400e      	ands	r6, r1
    5388:	4337      	orrs	r7, r6
    538a:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    538e:	ea4f 78f8 	mov.w	r8, r8, ror #31
    5392:	4447      	add	r7, r8
    5394:	442f      	add	r7, r5
    5396:	443a      	add	r2, r7
    5398:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(53) );
    539c:	9e01      	ldr	r6, [sp, #4]
    539e:	46b6      	mov	lr, r6
    53a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    53a2:	ea8e 0c06 	eor.w	ip, lr, r6
    53a6:	ea8a 0c0c 	eor.w	ip, sl, ip
    53aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    53ac:	ea87 0c0c 	eor.w	ip, r7, ip
    53b0:	ea03 0600 	and.w	r6, r3, r0
    53b4:	ea43 0700 	orr.w	r7, r3, r0
    53b8:	4027      	ands	r7, r4
    53ba:	433e      	orrs	r6, r7
    53bc:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    53c0:	ea4f 7efc 	mov.w	lr, ip, ror #31
    53c4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
    53c8:	4476      	add	r6, lr
    53ca:	442e      	add	r6, r5
    53cc:	4431      	add	r1, r6
    53ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(54) );
    53d2:	9e02      	ldr	r6, [sp, #8]
    53d4:	46b6      	mov	lr, r6
    53d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    53d8:	ea8e 0906 	eor.w	r9, lr, r6
    53dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    53de:	ea86 0909 	eor.w	r9, r6, r9
    53e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    53e4:	ea87 0909 	eor.w	r9, r7, r9
    53e8:	ea02 0603 	and.w	r6, r2, r3
    53ec:	ea42 0703 	orr.w	r7, r2, r3
    53f0:	4007      	ands	r7, r0
    53f2:	433e      	orrs	r6, r7
    53f4:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    53f8:	ea4f 79f9 	mov.w	r9, r9, ror #31
    53fc:	444e      	add	r6, r9
    53fe:	442e      	add	r6, r5
    5400:	4434      	add	r4, r6
    5402:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(55) );
    5406:	9f03      	ldr	r7, [sp, #12]
    5408:	ea87 0c08 	eor.w	ip, r7, r8
    540c:	9f04      	ldr	r7, [sp, #16]
    540e:	ea87 0c0c 	eor.w	ip, r7, ip
    5412:	ea8a 0c0c 	eor.w	ip, sl, ip
    5416:	ea01 0602 	and.w	r6, r1, r2
    541a:	ea41 0702 	orr.w	r7, r1, r2
    541e:	401f      	ands	r7, r3
    5420:	433e      	orrs	r6, r7
    5422:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    5426:	ea4f 7afc 	mov.w	sl, ip, ror #31
    542a:	4456      	add	r6, sl
    542c:	442e      	add	r6, r5
    542e:	4430      	add	r0, r6
    5430:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(56) );
    5434:	9e07      	ldr	r6, [sp, #28]
    5436:	46b6      	mov	lr, r6
    5438:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    543a:	ea8e 0606 	eor.w	r6, lr, r6
    543e:	9f05      	ldr	r7, [sp, #20]
    5440:	407e      	eors	r6, r7
    5442:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5444:	407e      	eors	r6, r7
    5446:	ea04 0701 	and.w	r7, r4, r1
    544a:	ea44 0e01 	orr.w	lr, r4, r1
    544e:	ea02 0e0e 	and.w	lr, r2, lr
    5452:	ea47 070e 	orr.w	r7, r7, lr
    5456:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    545a:	ea4f 76f6 	mov.w	r6, r6, ror #31
    545e:	960a      	str	r6, [sp, #40]	; 0x28
    5460:	4437      	add	r7, r6
    5462:	442f      	add	r7, r5
    5464:	443b      	add	r3, r7
    5466:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(57) );
    546a:	9e08      	ldr	r6, [sp, #32]
    546c:	ea86 0b09 	eor.w	fp, r6, r9
    5470:	9e06      	ldr	r6, [sp, #24]
    5472:	ea86 0b0b 	eor.w	fp, r6, fp
    5476:	9f04      	ldr	r7, [sp, #16]
    5478:	ea87 0b0b 	eor.w	fp, r7, fp
    547c:	ea00 0604 	and.w	r6, r0, r4
    5480:	ea40 0704 	orr.w	r7, r0, r4
    5484:	e002      	b.n	548c <mbedtls_sha1_process+0xbb8>
    5486:	bf00      	nop
    5488:	8f1bbcdc 	.word	0x8f1bbcdc
    548c:	400f      	ands	r7, r1
    548e:	433e      	orrs	r6, r7
    5490:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    5494:	ea4f 7bfb 	mov.w	fp, fp, ror #31
    5498:	445e      	add	r6, fp
    549a:	442e      	add	r6, r5
    549c:	4432      	add	r2, r6
    549e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(58) );
    54a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    54a4:	ea87 0e0a 	eor.w	lr, r7, sl
    54a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    54aa:	ea86 0e0e 	eor.w	lr, r6, lr
    54ae:	9f05      	ldr	r7, [sp, #20]
    54b0:	ea87 0e0e 	eor.w	lr, r7, lr
    54b4:	ea03 0600 	and.w	r6, r3, r0
    54b8:	ea43 0700 	orr.w	r7, r3, r0
    54bc:	4027      	ands	r7, r4
    54be:	433e      	orrs	r6, r7
    54c0:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    54c4:	ea4f 7efe 	mov.w	lr, lr, ror #31
    54c8:	f8cd e010 	str.w	lr, [sp, #16]
    54cc:	4476      	add	r6, lr
    54ce:	442e      	add	r6, r5
    54d0:	4431      	add	r1, r6
    54d2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(59) );
    54d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    54d8:	46ae      	mov	lr, r5
    54da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    54dc:	ea8e 0705 	eor.w	r7, lr, r5
    54e0:	9d01      	ldr	r5, [sp, #4]
    54e2:	406f      	eors	r7, r5
    54e4:	9d06      	ldr	r5, [sp, #24]
    54e6:	406f      	eors	r7, r5
    54e8:	ea02 0503 	and.w	r5, r2, r3
    54ec:	ea42 0603 	orr.w	r6, r2, r3
    54f0:	4006      	ands	r6, r0
    54f2:	4335      	orrs	r5, r6
    54f4:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    54f8:	ea4f 76f7 	mov.w	r6, r7, ror #31
    54fc:	9605      	str	r6, [sp, #20]
    54fe:	4435      	add	r5, r6
    5500:	4ee5      	ldr	r6, [pc, #916]	; (5898 <mbedtls_sha1_process+0xfc4>)
    5502:	442e      	add	r6, r5
    5504:	4434      	add	r4, r6
    5506:	ea4f 02b2 	mov.w	r2, r2, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    550a:	ea88 0c0b 	eor.w	ip, r8, fp
    550e:	9d02      	ldr	r5, [sp, #8]
    5510:	ea85 0c0c 	eor.w	ip, r5, ip
    5514:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5516:	ea87 0c0c 	eor.w	ip, r7, ip
    551a:	ea81 0602 	eor.w	r6, r1, r2
    551e:	405e      	eors	r6, r3
    5520:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    5524:	ea4f 7efc 	mov.w	lr, ip, ror #31
    5528:	f8cd e018 	str.w	lr, [sp, #24]
    552c:	4476      	add	r6, lr
    552e:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    5532:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    5536:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    553a:	3656      	adds	r6, #86	; 0x56
    553c:	4430      	add	r0, r6
    553e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(61) );
    5542:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5544:	9f04      	ldr	r7, [sp, #16]
    5546:	ea85 0e07 	eor.w	lr, r5, r7
    554a:	9f03      	ldr	r7, [sp, #12]
    554c:	ea87 0e0e 	eor.w	lr, r7, lr
    5550:	9f01      	ldr	r7, [sp, #4]
    5552:	ea87 0e0e 	eor.w	lr, r7, lr
    5556:	ea84 0601 	eor.w	r6, r4, r1
    555a:	4056      	eors	r6, r2
    555c:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    5560:	ea4f 7efe 	mov.w	lr, lr, ror #31
    5564:	f8cd e004 	str.w	lr, [sp, #4]
    5568:	4476      	add	r6, lr
    556a:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    556e:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    5572:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    5576:	3656      	adds	r6, #86	; 0x56
    5578:	4433      	add	r3, r6
    557a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(62) );
    557e:	9f05      	ldr	r7, [sp, #20]
    5580:	ea89 0707 	eor.w	r7, r9, r7
    5584:	9e07      	ldr	r6, [sp, #28]
    5586:	4077      	eors	r7, r6
    5588:	9e02      	ldr	r6, [sp, #8]
    558a:	4077      	eors	r7, r6
    558c:	ea80 0604 	eor.w	r6, r0, r4
    5590:	404e      	eors	r6, r1
    5592:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    5596:	ea4f 77f7 	mov.w	r7, r7, ror #31
    559a:	9702      	str	r7, [sp, #8]
    559c:	443e      	add	r6, r7
    559e:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    55a2:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    55a6:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    55aa:	3656      	adds	r6, #86	; 0x56
    55ac:	4432      	add	r2, r6
    55ae:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(63) );
    55b2:	9e06      	ldr	r6, [sp, #24]
    55b4:	ea8a 0c06 	eor.w	ip, sl, r6
    55b8:	9f08      	ldr	r7, [sp, #32]
    55ba:	ea87 0c0c 	eor.w	ip, r7, ip
    55be:	9f03      	ldr	r7, [sp, #12]
    55c0:	ea87 0c0c 	eor.w	ip, r7, ip
    55c4:	ea83 0600 	eor.w	r6, r3, r0
    55c8:	4066      	eors	r6, r4
    55ca:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    55ce:	ea4f 7efc 	mov.w	lr, ip, ror #31
    55d2:	f8cd e00c 	str.w	lr, [sp, #12]
    55d6:	4476      	add	r6, lr
    55d8:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    55dc:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    55e0:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    55e4:	3656      	adds	r6, #86	; 0x56
    55e6:	4431      	add	r1, r6
    55e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(64) );
    55ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    55ee:	9e01      	ldr	r6, [sp, #4]
    55f0:	4077      	eors	r7, r6
    55f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    55f4:	4077      	eors	r7, r6
    55f6:	9e07      	ldr	r6, [sp, #28]
    55f8:	4077      	eors	r7, r6
    55fa:	ea82 0603 	eor.w	r6, r2, r3
    55fe:	4046      	eors	r6, r0
    5600:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    5604:	ea4f 77f7 	mov.w	r7, r7, ror #31
    5608:	9707      	str	r7, [sp, #28]
    560a:	443e      	add	r6, r7
    560c:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    5610:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    5614:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    5618:	3656      	adds	r6, #86	; 0x56
    561a:	4434      	add	r4, r6
    561c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(65) );
    5620:	9e02      	ldr	r6, [sp, #8]
    5622:	ea8b 0c06 	eor.w	ip, fp, r6
    5626:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5628:	ea86 0c0c 	eor.w	ip, r6, ip
    562c:	9f08      	ldr	r7, [sp, #32]
    562e:	ea87 0c0c 	eor.w	ip, r7, ip
    5632:	ea81 0602 	eor.w	r6, r1, r2
    5636:	405e      	eors	r6, r3
    5638:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    563c:	ea4f 7efc 	mov.w	lr, ip, ror #31
    5640:	f8cd e020 	str.w	lr, [sp, #32]
    5644:	4476      	add	r6, lr
    5646:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    564a:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    564e:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    5652:	3656      	adds	r6, #86	; 0x56
    5654:	4430      	add	r0, r6
    5656:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(66) );
    565a:	9f04      	ldr	r7, [sp, #16]
    565c:	9e03      	ldr	r6, [sp, #12]
    565e:	ea87 0e06 	eor.w	lr, r7, r6
    5662:	ea88 0e0e 	eor.w	lr, r8, lr
    5666:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5668:	ea87 0e0e 	eor.w	lr, r7, lr
    566c:	ea84 0601 	eor.w	r6, r4, r1
    5670:	4056      	eors	r6, r2
    5672:	eb06 66f0 	add.w	r6, r6, r0, ror #27
    5676:	ea4f 7efe 	mov.w	lr, lr, ror #31
    567a:	4476      	add	r6, lr
    567c:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    5680:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    5684:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    5688:	3656      	adds	r6, #86	; 0x56
    568a:	4433      	add	r3, r6
    568c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(67) );
    5690:	9f05      	ldr	r7, [sp, #20]
    5692:	9e07      	ldr	r6, [sp, #28]
    5694:	4077      	eors	r7, r6
    5696:	406f      	eors	r7, r5
    5698:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    569a:	4077      	eors	r7, r6
    569c:	ea80 0604 	eor.w	r6, r0, r4
    56a0:	404e      	eors	r6, r1
    56a2:	eb06 66f3 	add.w	r6, r6, r3, ror #27
    56a6:	ea4f 77f7 	mov.w	r7, r7, ror #31
    56aa:	443e      	add	r6, r7
    56ac:	f106 464a 	add.w	r6, r6, #3388997632	; 0xca000000
    56b0:	f506 06c5 	add.w	r6, r6, #6455296	; 0x628000
    56b4:	f506 4683 	add.w	r6, r6, #16768	; 0x4180
    56b8:	3656      	adds	r6, #86	; 0x56
    56ba:	4432      	add	r2, r6
    56bc:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(68) );
    56c0:	9e06      	ldr	r6, [sp, #24]
    56c2:	46b4      	mov	ip, r6
    56c4:	9e08      	ldr	r6, [sp, #32]
    56c6:	ea8c 0606 	eor.w	r6, ip, r6
    56ca:	ea89 0606 	eor.w	r6, r9, r6
    56ce:	ea88 0606 	eor.w	r6, r8, r6
    56d2:	ea83 0c00 	eor.w	ip, r3, r0
    56d6:	ea84 0c0c 	eor.w	ip, r4, ip
    56da:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    56de:	ea4f 76f6 	mov.w	r6, r6, ror #31
    56e2:	44b4      	add	ip, r6
    56e4:	f10c 4c4a 	add.w	ip, ip, #3388997632	; 0xca000000
    56e8:	f50c 0cc5 	add.w	ip, ip, #6455296	; 0x628000
    56ec:	f50c 4c83 	add.w	ip, ip, #16768	; 0x4180
    56f0:	f10c 0c56 	add.w	ip, ip, #86	; 0x56
    56f4:	4461      	add	r1, ip
    56f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
    56fa:	9309      	str	r3, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    56fc:	9b01      	ldr	r3, [sp, #4]
    56fe:	ea83 080e 	eor.w	r8, r3, lr
    5702:	ea8a 0808 	eor.w	r8, sl, r8
    5706:	ea85 0808 	eor.w	r8, r5, r8
    570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    570c:	ea82 0c03 	eor.w	ip, r2, r3
    5710:	ea80 0c0c 	eor.w	ip, r0, ip
    5714:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    5718:	ea4f 73f8 	mov.w	r3, r8, ror #31
    571c:	930b      	str	r3, [sp, #44]	; 0x2c
    571e:	449c      	add	ip, r3
    5720:	f10c 4c4a 	add.w	ip, ip, #3388997632	; 0xca000000
    5724:	f50c 0cc5 	add.w	ip, ip, #6455296	; 0x628000
    5728:	f50c 4c83 	add.w	ip, ip, #16768	; 0x4180
    572c:	f10c 0c56 	add.w	ip, ip, #86	; 0x56
    5730:	4464      	add	r4, ip
    5732:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
    5736:	9b02      	ldr	r3, [sp, #8]
    5738:	ea83 0807 	eor.w	r8, r3, r7
    573c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    573e:	ea85 0808 	eor.w	r8, r5, r8
    5742:	ea89 0808 	eor.w	r8, r9, r8
    5746:	ea81 0c02 	eor.w	ip, r1, r2
    574a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    574c:	ea85 0c0c 	eor.w	ip, r5, ip
    5750:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    5754:	ea4f 78f8 	mov.w	r8, r8, ror #31
    5758:	44c4      	add	ip, r8
    575a:	f10c 4c4a 	add.w	ip, ip, #3388997632	; 0xca000000
    575e:	f50c 0cc5 	add.w	ip, ip, #6455296	; 0x628000
    5762:	f50c 4c83 	add.w	ip, ip, #16768	; 0x4180
    5766:	f10c 0c56 	add.w	ip, ip, #86	; 0x56
    576a:	4460      	add	r0, ip
    576c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(71) );
    5770:	9b03      	ldr	r3, [sp, #12]
    5772:	ea83 0c06 	eor.w	ip, r3, r6
    5776:	ea8b 0c0c 	eor.w	ip, fp, ip
    577a:	ea8a 0c0c 	eor.w	ip, sl, ip
    577e:	ea84 0901 	eor.w	r9, r4, r1
    5782:	ea82 0909 	eor.w	r9, r2, r9
    5786:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    578a:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    578e:	44e1      	add	r9, ip
    5790:	f109 494a 	add.w	r9, r9, #3388997632	; 0xca000000
    5794:	f509 09c5 	add.w	r9, r9, #6455296	; 0x628000
    5798:	f509 4983 	add.w	r9, r9, #16768	; 0x4180
    579c:	f109 0956 	add.w	r9, r9, #86	; 0x56
    57a0:	462b      	mov	r3, r5
    57a2:	444b      	add	r3, r9
    57a4:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(72) );
    57a8:	9d07      	ldr	r5, [sp, #28]
    57aa:	46a9      	mov	r9, r5
    57ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    57ae:	ea89 0a05 	eor.w	sl, r9, r5
    57b2:	9d04      	ldr	r5, [sp, #16]
    57b4:	ea85 0a0a 	eor.w	sl, r5, sl
    57b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    57ba:	ea85 0a0a 	eor.w	sl, r5, sl
    57be:	ea80 0904 	eor.w	r9, r0, r4
    57c2:	ea81 0909 	eor.w	r9, r1, r9
    57c6:	eb09 69f3 	add.w	r9, r9, r3, ror #27
    57ca:	ea4f 7afa 	mov.w	sl, sl, ror #31
    57ce:	44d1      	add	r9, sl
    57d0:	f109 494a 	add.w	r9, r9, #3388997632	; 0xca000000
    57d4:	f509 09c5 	add.w	r9, r9, #6455296	; 0x628000
    57d8:	f509 4983 	add.w	r9, r9, #16768	; 0x4180
    57dc:	f109 0956 	add.w	r9, r9, #86	; 0x56
    57e0:	444a      	add	r2, r9
    57e2:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(73) );
    57e6:	9d08      	ldr	r5, [sp, #32]
    57e8:	ea85 0908 	eor.w	r9, r5, r8
    57ec:	9d05      	ldr	r5, [sp, #20]
    57ee:	ea85 0909 	eor.w	r9, r5, r9
    57f2:	ea8b 0909 	eor.w	r9, fp, r9
    57f6:	ea83 0b00 	eor.w	fp, r3, r0
    57fa:	ea84 0b0b 	eor.w	fp, r4, fp
    57fe:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
    5802:	ea4f 79f9 	mov.w	r9, r9, ror #31
    5806:	44cb      	add	fp, r9
    5808:	f10b 4b4a 	add.w	fp, fp, #3388997632	; 0xca000000
    580c:	f50b 0bc5 	add.w	fp, fp, #6455296	; 0x628000
    5810:	f50b 4b83 	add.w	fp, fp, #16768	; 0x4180
    5814:	f10b 0b56 	add.w	fp, fp, #86	; 0x56
    5818:	4459      	add	r1, fp
    581a:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
    581e:	ea8e 0e0c 	eor.w	lr, lr, ip
    5822:	9d06      	ldr	r5, [sp, #24]
    5824:	ea85 0e0e 	eor.w	lr, r5, lr
    5828:	9d04      	ldr	r5, [sp, #16]
    582a:	ea85 0e0e 	eor.w	lr, r5, lr
    582e:	ea82 0b03 	eor.w	fp, r2, r3
    5832:	ea80 0b0b 	eor.w	fp, r0, fp
    5836:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    583a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    583e:	44f3      	add	fp, lr
    5840:	f10b 4b4a 	add.w	fp, fp, #3388997632	; 0xca000000
    5844:	f50b 0bc5 	add.w	fp, fp, #6455296	; 0x628000
    5848:	f50b 4b83 	add.w	fp, fp, #16768	; 0x4180
    584c:	f10b 0b56 	add.w	fp, fp, #86	; 0x56
    5850:	445c      	add	r4, fp
    5852:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(75) );
    5856:	ea87 070a 	eor.w	r7, r7, sl
    585a:	9d01      	ldr	r5, [sp, #4]
    585c:	406f      	eors	r7, r5
    585e:	9d05      	ldr	r5, [sp, #20]
    5860:	406f      	eors	r7, r5
    5862:	ea81 0b02 	eor.w	fp, r1, r2
    5866:	ea83 0b0b 	eor.w	fp, r3, fp
    586a:	eb0b 6bf4 	add.w	fp, fp, r4, ror #27
    586e:	ea4f 77f7 	mov.w	r7, r7, ror #31
    5872:	44bb      	add	fp, r7
    5874:	f10b 4b4a 	add.w	fp, fp, #3388997632	; 0xca000000
    5878:	f50b 0bc5 	add.w	fp, fp, #6455296	; 0x628000
    587c:	f50b 4b83 	add.w	fp, fp, #16768	; 0x4180
    5880:	f10b 0b56 	add.w	fp, fp, #86	; 0x56
    5884:	4458      	add	r0, fp
    5886:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(76) );
    588a:	ea86 0609 	eor.w	r6, r6, r9
    588e:	9d02      	ldr	r5, [sp, #8]
    5890:	406e      	eors	r6, r5
    5892:	9d06      	ldr	r5, [sp, #24]
    5894:	e002      	b.n	589c <mbedtls_sha1_process+0xfc8>
    5896:	bf00      	nop
    5898:	8f1bbcdc 	.word	0x8f1bbcdc
    589c:	406e      	eors	r6, r5
    589e:	ea84 0a01 	eor.w	sl, r4, r1
    58a2:	ea82 0a0a 	eor.w	sl, r2, sl
    58a6:	eb0a 6af0 	add.w	sl, sl, r0, ror #27
    58aa:	ea4f 76f6 	mov.w	r6, r6, ror #31
    58ae:	44b2      	add	sl, r6
    58b0:	f10a 4a4a 	add.w	sl, sl, #3388997632	; 0xca000000
    58b4:	f50a 0ac5 	add.w	sl, sl, #6455296	; 0x628000
    58b8:	f50a 4a83 	add.w	sl, sl, #16768	; 0x4180
    58bc:	f10a 0a56 	add.w	sl, sl, #86	; 0x56
    58c0:	4453      	add	r3, sl
    58c2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(77) );
    58c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    58c8:	ea85 0e0e 	eor.w	lr, r5, lr
    58cc:	9d03      	ldr	r5, [sp, #12]
    58ce:	ea85 0e0e 	eor.w	lr, r5, lr
    58d2:	9d01      	ldr	r5, [sp, #4]
    58d4:	ea85 0e0e 	eor.w	lr, r5, lr
    58d8:	ea80 0904 	eor.w	r9, r0, r4
    58dc:	ea81 0909 	eor.w	r9, r1, r9
    58e0:	eb09 69f3 	add.w	r9, r9, r3, ror #27
    58e4:	eb09 79fe 	add.w	r9, r9, lr, ror #31
    58e8:	f109 494a 	add.w	r9, r9, #3388997632	; 0xca000000
    58ec:	f509 09c5 	add.w	r9, r9, #6455296	; 0x628000
    58f0:	f509 4983 	add.w	r9, r9, #16768	; 0x4180
    58f4:	f109 0956 	add.w	r9, r9, #86	; 0x56
    58f8:	444a      	add	r2, r9
    58fa:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(78) );
    58fe:	ea88 0707 	eor.w	r7, r8, r7
    5902:	9d07      	ldr	r5, [sp, #28]
    5904:	406f      	eors	r7, r5
    5906:	9d02      	ldr	r5, [sp, #8]
    5908:	406f      	eors	r7, r5
    590a:	ea83 0e00 	eor.w	lr, r3, r0
    590e:	ea84 0e0e 	eor.w	lr, r4, lr
    5912:	eb0e 6ef2 	add.w	lr, lr, r2, ror #27
    5916:	eb0e 7ef7 	add.w	lr, lr, r7, ror #31
    591a:	f10e 4e4a 	add.w	lr, lr, #3388997632	; 0xca000000
    591e:	f50e 0ec5 	add.w	lr, lr, #6455296	; 0x628000
    5922:	f50e 4e83 	add.w	lr, lr, #16768	; 0x4180
    5926:	f10e 0e56 	add.w	lr, lr, #86	; 0x56
    592a:	4471      	add	r1, lr
    592c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(79) );
    5930:	ea8c 0c06 	eor.w	ip, ip, r6
    5934:	9f08      	ldr	r7, [sp, #32]
    5936:	ea87 0c0c 	eor.w	ip, r7, ip
    593a:	9d03      	ldr	r5, [sp, #12]
    593c:	ea85 060c 	eor.w	r6, r5, ip
    5940:	ea82 0c03 	eor.w	ip, r2, r3
    5944:	ea80 0c0c 	eor.w	ip, r0, ip
    5948:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    594c:	eb0c 7cf6 	add.w	ip, ip, r6, ror #31
    5950:	4d0b      	ldr	r5, [pc, #44]	; (5980 <mbedtls_sha1_process+0x10ac>)
    5952:	4465      	add	r5, ip
    5954:	442c      	add	r4, r5

#undef K
#undef F

    ctx->state[0] += A;
    5956:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5958:	442c      	add	r4, r5
    595a:	9e15      	ldr	r6, [sp, #84]	; 0x54
    595c:	60b4      	str	r4, [r6, #8]
    ctx->state[1] += B;
    595e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    5960:	4429      	add	r1, r5
    5962:	60f1      	str	r1, [r6, #12]
    ctx->state[2] += C;
    5964:	9c12      	ldr	r4, [sp, #72]	; 0x48
    5966:	eb04 02b2 	add.w	r2, r4, r2, ror #2
    596a:	6132      	str	r2, [r6, #16]
    ctx->state[3] += D;
    596c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    596e:	440b      	add	r3, r1
    5970:	6173      	str	r3, [r6, #20]
    ctx->state[4] += E;
    5972:	9d14      	ldr	r5, [sp, #80]	; 0x50
    5974:	4428      	add	r0, r5
    5976:	61b0      	str	r0, [r6, #24]
}
    5978:	b017      	add	sp, #92	; 0x5c
    597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    597e:	bf00      	nop
    5980:	ca62c1d6 	.word	0xca62c1d6

00005984 <mbedtls_sha1_update>:
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
{
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    5984:	b3ba      	cbz	r2, 59f6 <mbedtls_sha1_update+0x72>
{
    5986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    598a:	4606      	mov	r6, r0
    598c:	460d      	mov	r5, r1
    598e:	4614      	mov	r4, r2
        return;

    left = ctx->total[0] & 0x3F;
    5990:	6803      	ldr	r3, [r0, #0]
    5992:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    5996:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    599a:	4413      	add	r3, r2
    599c:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    599e:	429a      	cmp	r2, r3
    59a0:	d902      	bls.n	59a8 <mbedtls_sha1_update+0x24>
        ctx->total[1]++;
    59a2:	6843      	ldr	r3, [r0, #4]
    59a4:	3301      	adds	r3, #1
    59a6:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    59a8:	b1c7      	cbz	r7, 59dc <mbedtls_sha1_update+0x58>
    59aa:	4544      	cmp	r4, r8
    59ac:	d316      	bcc.n	59dc <mbedtls_sha1_update+0x58>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    59ae:	f106 091c 	add.w	r9, r6, #28
    59b2:	4642      	mov	r2, r8
    59b4:	4629      	mov	r1, r5
    59b6:	eb09 0007 	add.w	r0, r9, r7
    59ba:	f7fa fc81 	bl	2c0 <memcpy>
        mbedtls_sha1_process( ctx, ctx->buffer );
    59be:	4649      	mov	r1, r9
    59c0:	4630      	mov	r0, r6
    59c2:	f7fe ff87 	bl	48d4 <mbedtls_sha1_process>
        input += fill;
    59c6:	4445      	add	r5, r8
        ilen  -= fill;
    59c8:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    59cc:	2700      	movs	r7, #0
    59ce:	e005      	b.n	59dc <mbedtls_sha1_update+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha1_process( ctx, input );
    59d0:	4629      	mov	r1, r5
    59d2:	4630      	mov	r0, r6
    59d4:	f7fe ff7e 	bl	48d4 <mbedtls_sha1_process>
        input += 64;
    59d8:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    59da:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    59dc:	2c3f      	cmp	r4, #63	; 0x3f
    59de:	d8f7      	bhi.n	59d0 <mbedtls_sha1_update+0x4c>
    }

    if( ilen > 0 )
    59e0:	b90c      	cbnz	r4, 59e6 <mbedtls_sha1_update+0x62>
    59e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    59e6:	f106 001c 	add.w	r0, r6, #28
    59ea:	4622      	mov	r2, r4
    59ec:	4629      	mov	r1, r5
    59ee:	4438      	add	r0, r7
    59f0:	f7fa fc66 	bl	2c0 <memcpy>
    59f4:	e7f5      	b.n	59e2 <mbedtls_sha1_update+0x5e>
    59f6:	4770      	bx	lr

000059f8 <mbedtls_sha1_finish>:

/*
 * SHA-1 final digest
 */
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx, unsigned char output[20] )
{
    59f8:	b530      	push	{r4, r5, lr}
    59fa:	b083      	sub	sp, #12
    59fc:	4604      	mov	r4, r0
    59fe:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
    5a00:	6802      	ldr	r2, [r0, #0]
         | ( ctx->total[1] <<  3 );
    5a02:	6843      	ldr	r3, [r0, #4]
    5a04:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    5a06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    5a0a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, msglen, 0 );
    5a0c:	0e18      	lsrs	r0, r3, #24
    5a0e:	f88d 0000 	strb.w	r0, [sp]
    5a12:	f3c3 4007 	ubfx	r0, r3, #16, #8
    5a16:	f88d 0001 	strb.w	r0, [sp, #1]
    5a1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
    5a1e:	f88d 0002 	strb.w	r0, [sp, #2]
    5a22:	f88d 3003 	strb.w	r3, [sp, #3]
    PUT_UINT32_BE( low,  msglen, 4 );
    5a26:	0e0b      	lsrs	r3, r1, #24
    5a28:	f88d 3004 	strb.w	r3, [sp, #4]
    5a2c:	f3c1 4307 	ubfx	r3, r1, #16, #8
    5a30:	f88d 3005 	strb.w	r3, [sp, #5]
    5a34:	f3c1 2307 	ubfx	r3, r1, #8, #8
    5a38:	f88d 3006 	strb.w	r3, [sp, #6]
    5a3c:	f88d 1007 	strb.w	r1, [sp, #7]

    last = ctx->total[0] & 0x3F;
    5a40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    5a44:	2a37      	cmp	r2, #55	; 0x37
    5a46:	d934      	bls.n	5ab2 <mbedtls_sha1_finish+0xba>
    5a48:	f1c2 0278 	rsb	r2, r2, #120	; 0x78

    mbedtls_sha1_update( ctx, sha1_padding, padn );
    5a4c:	491a      	ldr	r1, [pc, #104]	; (5ab8 <mbedtls_sha1_finish+0xc0>)
    5a4e:	4620      	mov	r0, r4
    5a50:	f7ff ff98 	bl	5984 <mbedtls_sha1_update>
    mbedtls_sha1_update( ctx, msglen, 8 );
    5a54:	2208      	movs	r2, #8
    5a56:	4669      	mov	r1, sp
    5a58:	4620      	mov	r0, r4
    5a5a:	f7ff ff93 	bl	5984 <mbedtls_sha1_update>

    PUT_UINT32_BE( ctx->state[0], output,  0 );
    5a5e:	7ae3      	ldrb	r3, [r4, #11]
    5a60:	702b      	strb	r3, [r5, #0]
    5a62:	7aa3      	ldrb	r3, [r4, #10]
    5a64:	706b      	strb	r3, [r5, #1]
    5a66:	7a63      	ldrb	r3, [r4, #9]
    5a68:	70ab      	strb	r3, [r5, #2]
    5a6a:	7a23      	ldrb	r3, [r4, #8]
    5a6c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    5a6e:	7be3      	ldrb	r3, [r4, #15]
    5a70:	712b      	strb	r3, [r5, #4]
    5a72:	7ba3      	ldrb	r3, [r4, #14]
    5a74:	716b      	strb	r3, [r5, #5]
    5a76:	7b63      	ldrb	r3, [r4, #13]
    5a78:	71ab      	strb	r3, [r5, #6]
    5a7a:	7b23      	ldrb	r3, [r4, #12]
    5a7c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    5a7e:	7ce3      	ldrb	r3, [r4, #19]
    5a80:	722b      	strb	r3, [r5, #8]
    5a82:	7ca3      	ldrb	r3, [r4, #18]
    5a84:	726b      	strb	r3, [r5, #9]
    5a86:	7c63      	ldrb	r3, [r4, #17]
    5a88:	72ab      	strb	r3, [r5, #10]
    5a8a:	7c23      	ldrb	r3, [r4, #16]
    5a8c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    5a8e:	7de3      	ldrb	r3, [r4, #23]
    5a90:	732b      	strb	r3, [r5, #12]
    5a92:	7da3      	ldrb	r3, [r4, #22]
    5a94:	736b      	strb	r3, [r5, #13]
    5a96:	7d63      	ldrb	r3, [r4, #21]
    5a98:	73ab      	strb	r3, [r5, #14]
    5a9a:	7d23      	ldrb	r3, [r4, #20]
    5a9c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    5a9e:	7ee3      	ldrb	r3, [r4, #27]
    5aa0:	742b      	strb	r3, [r5, #16]
    5aa2:	7ea3      	ldrb	r3, [r4, #26]
    5aa4:	746b      	strb	r3, [r5, #17]
    5aa6:	7e63      	ldrb	r3, [r4, #25]
    5aa8:	74ab      	strb	r3, [r5, #18]
    5aaa:	7e23      	ldrb	r3, [r4, #24]
    5aac:	74eb      	strb	r3, [r5, #19]
}
    5aae:	b003      	add	sp, #12
    5ab0:	bd30      	pop	{r4, r5, pc}
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    5ab2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    5ab6:	e7c9      	b.n	5a4c <mbedtls_sha1_finish+0x54>
    5ab8:	00032f60 	.word	0x00032f60

00005abc <mbedtls_sha1>:

/*
 * output = SHA-1( input buffer )
 */
void mbedtls_sha1( const unsigned char *input, size_t ilen, unsigned char output[20] )
{
    5abc:	b570      	push	{r4, r5, r6, lr}
    5abe:	b098      	sub	sp, #96	; 0x60
    5ac0:	4605      	mov	r5, r0
    5ac2:	460e      	mov	r6, r1
    5ac4:	4614      	mov	r4, r2
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
    5ac6:	a801      	add	r0, sp, #4
    5ac8:	f7fe fedc 	bl	4884 <mbedtls_sha1_init>
    mbedtls_sha1_starts( &ctx );
    5acc:	a801      	add	r0, sp, #4
    5ace:	f7fe fee7 	bl	48a0 <mbedtls_sha1_starts>
    mbedtls_sha1_update( &ctx, input, ilen );
    5ad2:	4632      	mov	r2, r6
    5ad4:	4629      	mov	r1, r5
    5ad6:	a801      	add	r0, sp, #4
    5ad8:	f7ff ff54 	bl	5984 <mbedtls_sha1_update>
    mbedtls_sha1_finish( &ctx, output );
    5adc:	4621      	mov	r1, r4
    5ade:	a801      	add	r0, sp, #4
    5ae0:	f7ff ff8a 	bl	59f8 <mbedtls_sha1_finish>
    mbedtls_sha1_free( &ctx );
    5ae4:	a801      	add	r0, sp, #4
    5ae6:	f7fe fed3 	bl	4890 <mbedtls_sha1_free>
}
    5aea:	b018      	add	sp, #96	; 0x60
    5aec:	bd70      	pop	{r4, r5, r6, pc}

00005aee <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    5aee:	b530      	push	{r4, r5, lr}
    5af0:	b085      	sub	sp, #20
    5af2:	4604      	mov	r4, r0
    5af4:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    5af6:	2203      	movs	r2, #3
    5af8:	4668      	mov	r0, sp
    5afa:	f7fa fbe1 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    5afe:	220d      	movs	r2, #13
    5b00:	2100      	movs	r1, #0
    5b02:	f10d 0003 	add.w	r0, sp, #3
    5b06:	f026 fab9 	bl	2c07c <memset>

	err = bt_encrypt_le(irk, res, res);
    5b0a:	466a      	mov	r2, sp
    5b0c:	4669      	mov	r1, sp
    5b0e:	4620      	mov	r0, r4
    5b10:	f00d f8a2 	bl	12c58 <bt_encrypt_le>
	if (err) {
    5b14:	4604      	mov	r4, r0
    5b16:	b110      	cbz	r0, 5b1e <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    5b18:	4620      	mov	r0, r4
    5b1a:	b005      	add	sp, #20
    5b1c:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    5b1e:	2203      	movs	r2, #3
    5b20:	4669      	mov	r1, sp
    5b22:	4628      	mov	r0, r5
    5b24:	f7fa fbcc 	bl	2c0 <memcpy>
	return 0;
    5b28:	e7f6      	b.n	5b18 <ah+0x2a>

00005b2a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    5b2a:	b510      	push	{r4, lr}
    5b2c:	b082      	sub	sp, #8
    5b2e:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    5b30:	aa01      	add	r2, sp, #4
    5b32:	3103      	adds	r1, #3
    5b34:	f7ff ffdb 	bl	5aee <ah>
	if (err) {
    5b38:	b110      	cbz	r0, 5b40 <bt_rpa_irk_matches+0x16>
		return false;
    5b3a:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    5b3c:	b002      	add	sp, #8
    5b3e:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    5b40:	2203      	movs	r2, #3
    5b42:	a901      	add	r1, sp, #4
    5b44:	4620      	mov	r0, r4
    5b46:	f026 fa05 	bl	2bf54 <memcmp>
    5b4a:	fab0 f080 	clz	r0, r0
    5b4e:	0940      	lsrs	r0, r0, #5
    5b50:	e7f4      	b.n	5b3c <bt_rpa_irk_matches+0x12>

00005b52 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    5b52:	b570      	push	{r4, r5, r6, lr}
    5b54:	4606      	mov	r6, r0
    5b56:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    5b58:	1ccd      	adds	r5, r1, #3
    5b5a:	2103      	movs	r1, #3
    5b5c:	4628      	mov	r0, r5
    5b5e:	f00d f85f 	bl	12c20 <bt_rand>
	if (err) {
    5b62:	4603      	mov	r3, r0
    5b64:	b108      	cbz	r0, 5b6a <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    5b66:	4618      	mov	r0, r3
    5b68:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    5b6a:	f994 3005 	ldrsb.w	r3, [r4, #5]
    5b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5b76:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    5b78:	4622      	mov	r2, r4
    5b7a:	4629      	mov	r1, r5
    5b7c:	4630      	mov	r0, r6
    5b7e:	f7ff ffb6 	bl	5aee <ah>
    5b82:	4603      	mov	r3, r0
    5b84:	e7ef      	b.n	5b66 <bt_rpa_create+0x14>
	...

00005b88 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5b88:	b570      	push	{r4, r5, r6, lr}
    5b8a:	4605      	mov	r5, r0
    5b8c:	460c      	mov	r4, r1
	switch (src->type) {
    5b8e:	7803      	ldrb	r3, [r0, #0]
    5b90:	2b01      	cmp	r3, #1
    5b92:	d010      	beq.n	5bb6 <uuid_to_uuid128+0x2e>
    5b94:	b113      	cbz	r3, 5b9c <uuid_to_uuid128+0x14>
    5b96:	2b02      	cmp	r3, #2
    5b98:	d01f      	beq.n	5bda <uuid_to_uuid128+0x52>
    5b9a:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    5b9c:	4e12      	ldr	r6, [pc, #72]	; (5be8 <uuid_to_uuid128+0x60>)
    5b9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5ba0:	6020      	str	r0, [r4, #0]
    5ba2:	6061      	str	r1, [r4, #4]
    5ba4:	60a2      	str	r2, [r4, #8]
    5ba6:	60e3      	str	r3, [r4, #12]
    5ba8:	7833      	ldrb	r3, [r6, #0]
    5baa:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    5bac:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    5bae:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    5bb0:	0a1b      	lsrs	r3, r3, #8
    5bb2:	73a3      	strb	r3, [r4, #14]
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    5bb6:	4e0c      	ldr	r6, [pc, #48]	; (5be8 <uuid_to_uuid128+0x60>)
    5bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5bba:	6020      	str	r0, [r4, #0]
    5bbc:	6061      	str	r1, [r4, #4]
    5bbe:	60a2      	str	r2, [r4, #8]
    5bc0:	60e3      	str	r3, [r4, #12]
    5bc2:	7833      	ldrb	r3, [r6, #0]
    5bc4:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    5bc6:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    5bc8:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    5bca:	f3c3 2207 	ubfx	r2, r3, #8, #8
    5bce:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    5bd0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    5bd2:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    5bd4:	0a1b      	lsrs	r3, r3, #8
    5bd6:	7423      	strb	r3, [r4, #16]
    5bd8:	bd70      	pop	{r4, r5, r6, pc}
    5bda:	4608      	mov	r0, r1
    5bdc:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    5bde:	2211      	movs	r2, #17
    5be0:	f7fa fb6e 	bl	2c0 <memcpy>
    5be4:	bd70      	pop	{r4, r5, r6, pc}
    5be6:	bf00      	nop
    5be8:	00032fa0 	.word	0x00032fa0

00005bec <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    5bec:	b510      	push	{r4, lr}
    5bee:	b08a      	sub	sp, #40	; 0x28
    5bf0:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    5bf2:	a905      	add	r1, sp, #20
    5bf4:	f7ff ffc8 	bl	5b88 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    5bf8:	4669      	mov	r1, sp
    5bfa:	4620      	mov	r0, r4
    5bfc:	f7ff ffc4 	bl	5b88 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    5c00:	2210      	movs	r2, #16
    5c02:	f10d 0101 	add.w	r1, sp, #1
    5c06:	f10d 0015 	add.w	r0, sp, #21
    5c0a:	f026 f9a3 	bl	2bf54 <memcmp>
}
    5c0e:	b00a      	add	sp, #40	; 0x28
    5c10:	bd10      	pop	{r4, pc}

00005c12 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    5c12:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    5c14:	7803      	ldrb	r3, [r0, #0]
    5c16:	780a      	ldrb	r2, [r1, #0]
    5c18:	4293      	cmp	r3, r2
    5c1a:	d107      	bne.n	5c2c <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    5c1c:	2b01      	cmp	r3, #1
    5c1e:	d00c      	beq.n	5c3a <bt_uuid_cmp+0x28>
    5c20:	b13b      	cbz	r3, 5c32 <bt_uuid_cmp+0x20>
    5c22:	2b02      	cmp	r3, #2
    5c24:	d00d      	beq.n	5c42 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    5c26:	f06f 0015 	mvn.w	r0, #21
}
    5c2a:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    5c2c:	f7ff ffde 	bl	5bec <uuid128_cmp>
    5c30:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    5c32:	8840      	ldrh	r0, [r0, #2]
    5c34:	884b      	ldrh	r3, [r1, #2]
    5c36:	1ac0      	subs	r0, r0, r3
    5c38:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    5c3a:	6840      	ldr	r0, [r0, #4]
    5c3c:	684b      	ldr	r3, [r1, #4]
    5c3e:	1ac0      	subs	r0, r0, r3
    5c40:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    5c42:	2210      	movs	r2, #16
    5c44:	3101      	adds	r1, #1
    5c46:	3001      	adds	r0, #1
    5c48:	f026 f984 	bl	2bf54 <memcmp>
    5c4c:	bd08      	pop	{r3, pc}
	...

00005c50 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    5c50:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    5c52:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    5c54:	4b06      	ldr	r3, [pc, #24]	; (5c70 <le_dhkey_complete+0x20>)
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	b133      	cbz	r3, 5c68 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5c5a:	7802      	ldrb	r2, [r0, #0]
    5c5c:	b92a      	cbnz	r2, 5c6a <le_dhkey_complete+0x1a>
    5c5e:	3001      	adds	r0, #1
    5c60:	4798      	blx	r3
		dh_key_cb = NULL;
    5c62:	2200      	movs	r2, #0
    5c64:	4b02      	ldr	r3, [pc, #8]	; (5c70 <le_dhkey_complete+0x20>)
    5c66:	601a      	str	r2, [r3, #0]
    5c68:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5c6a:	2000      	movs	r0, #0
    5c6c:	e7f8      	b.n	5c60 <le_dhkey_complete+0x10>
    5c6e:	bf00      	nop
    5c70:	20000368 	.word	0x20000368

00005c74 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    5c74:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    5c76:	7851      	ldrb	r1, [r2, #1]
    5c78:	4b06      	ldr	r3, [pc, #24]	; (5c94 <read_local_ver_complete+0x20>)
    5c7a:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5c7c:	8851      	ldrh	r1, [r2, #2]
    5c7e:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    5c80:	7911      	ldrb	r1, [r2, #4]
    5c82:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5c84:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    5c88:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    5c8a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    5c8e:	829a      	strh	r2, [r3, #20]
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop
    5c94:	2000b910 	.word	0x2000b910

00005c98 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    5c98:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    5c9a:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    5c9c:	7a1a      	ldrb	r2, [r3, #8]
    5c9e:	79dc      	ldrb	r4, [r3, #7]
    5ca0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    5ca4:	7999      	ldrb	r1, [r3, #6]
    5ca6:	795a      	ldrb	r2, [r3, #5]
    5ca8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5cac:	2000      	movs	r0, #0
    5cae:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5cb2:	791c      	ldrb	r4, [r3, #4]
    5cb4:	78da      	ldrb	r2, [r3, #3]
    5cb6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    5cba:	789c      	ldrb	r4, [r3, #2]
    5cbc:	785b      	ldrb	r3, [r3, #1]
    5cbe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5cc6:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    5cc8:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <le_read_supp_states_complete+0x3c>)
    5cca:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    5cce:	bc10      	pop	{r4}
    5cd0:	4770      	bx	lr
    5cd2:	bf00      	nop
    5cd4:	2000b910 	.word	0x2000b910

00005cd8 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5cd8:	7803      	ldrb	r3, [r0, #0]
    5cda:	f013 0f01 	tst.w	r3, #1
    5cde:	d106      	bne.n	5cee <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5ce0:	4b0c      	ldr	r3, [pc, #48]	; (5d14 <valid_adv_param+0x3c>)
    5ce2:	7b9b      	ldrb	r3, [r3, #14]
    5ce4:	2b08      	cmp	r3, #8
    5ce6:	d802      	bhi.n	5cee <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    5ce8:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5cea:	2b9f      	cmp	r3, #159	; 0x9f
    5cec:	d90c      	bls.n	5d08 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    5cee:	8843      	ldrh	r3, [r0, #2]
    5cf0:	8882      	ldrh	r2, [r0, #4]
    5cf2:	4293      	cmp	r3, r2
    5cf4:	d80a      	bhi.n	5d0c <valid_adv_param+0x34>
    5cf6:	2b1f      	cmp	r3, #31
    5cf8:	d90a      	bls.n	5d10 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    5cfa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    5cfe:	d801      	bhi.n	5d04 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    5d00:	2001      	movs	r0, #1
}
    5d02:	4770      	bx	lr
		return false;
    5d04:	2000      	movs	r0, #0
    5d06:	4770      	bx	lr
			return false;
    5d08:	2000      	movs	r0, #0
    5d0a:	4770      	bx	lr
		return false;
    5d0c:	2000      	movs	r0, #0
    5d0e:	4770      	bx	lr
    5d10:	2000      	movs	r0, #0
    5d12:	4770      	bx	lr
    5d14:	2000b910 	.word	0x2000b910

00005d18 <hci_reset_complete>:
	u8_t status = buf->data[0];
    5d18:	6883      	ldr	r3, [r0, #8]
    5d1a:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    5d1c:	b103      	cbz	r3, 5d20 <hci_reset_complete+0x8>
    5d1e:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    5d20:	2200      	movs	r2, #0
    5d22:	4b07      	ldr	r3, [pc, #28]	; (5d40 <hci_reset_complete+0x28>)
    5d24:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5d26:	4b07      	ldr	r3, [pc, #28]	; (5d44 <hci_reset_complete+0x2c>)
    5d28:	2201      	movs	r2, #1
    5d2a:	f3bf 8f5b 	dmb	ish
    5d2e:	e853 1f00 	ldrex	r1, [r3]
    5d32:	e843 2000 	strex	r0, r2, [r3]
    5d36:	2800      	cmp	r0, #0
    5d38:	d1f9      	bne.n	5d2e <hci_reset_complete+0x16>
    5d3a:	f3bf 8f5b 	dmb	ish
    5d3e:	e7ee      	b.n	5d1e <hci_reset_complete+0x6>
    5d40:	200003b4 	.word	0x200003b4
    5d44:	2000b980 	.word	0x2000b980

00005d48 <read_local_features_complete>:
{
    5d48:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    5d4a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    5d4c:	2208      	movs	r2, #8
    5d4e:	3101      	adds	r1, #1
    5d50:	4801      	ldr	r0, [pc, #4]	; (5d58 <read_local_features_complete+0x10>)
    5d52:	f7fa fab5 	bl	2c0 <memcpy>
    5d56:	bd08      	pop	{r3, pc}
    5d58:	2000b926 	.word	0x2000b926

00005d5c <read_bdaddr_complete>:
{
    5d5c:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    5d5e:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    5d60:	4c04      	ldr	r4, [pc, #16]	; (5d74 <read_bdaddr_complete+0x18>)
    5d62:	2206      	movs	r2, #6
    5d64:	3101      	adds	r1, #1
    5d66:	1c60      	adds	r0, r4, #1
    5d68:	f7fa faaa 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    5d6c:	2300      	movs	r3, #0
    5d6e:	7023      	strb	r3, [r4, #0]
    5d70:	bd10      	pop	{r4, pc}
    5d72:	bf00      	nop
    5d74:	2000b910 	.word	0x2000b910

00005d78 <read_supported_commands_complete>:
{
    5d78:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    5d7a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    5d7c:	2240      	movs	r2, #64	; 0x40
    5d7e:	3101      	adds	r1, #1
    5d80:	4801      	ldr	r0, [pc, #4]	; (5d88 <read_supported_commands_complete+0x10>)
    5d82:	f7fa fa9d 	bl	2c0 <memcpy>
    5d86:	bd08      	pop	{r3, pc}
    5d88:	2000b92e 	.word	0x2000b92e

00005d8c <read_le_features_complete>:
{
    5d8c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    5d8e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5d90:	2208      	movs	r2, #8
    5d92:	3101      	adds	r1, #1
    5d94:	4801      	ldr	r0, [pc, #4]	; (5d9c <read_le_features_complete+0x10>)
    5d96:	f7fa fa93 	bl	2c0 <memcpy>
    5d9a:	bd08      	pop	{r3, pc}
    5d9c:	2000b988 	.word	0x2000b988

00005da0 <le_read_buffer_size_complete>:
{
    5da0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    5da2:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    5da4:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    5da8:	b299      	uxth	r1, r3
    5daa:	4807      	ldr	r0, [pc, #28]	; (5dc8 <le_read_buffer_size_complete+0x28>)
    5dac:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    5db0:	b901      	cbnz	r1, 5db4 <le_read_buffer_size_complete+0x14>
    5db2:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    5db4:	78d1      	ldrb	r1, [r2, #3]
    5db6:	2902      	cmp	r1, #2
    5db8:	bf28      	it	cs
    5dba:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    5dbc:	460a      	mov	r2, r1
    5dbe:	308c      	adds	r0, #140	; 0x8c
    5dc0:	f024 fea0 	bl	2ab04 <_impl_k_sem_init>
    5dc4:	e7f5      	b.n	5db2 <le_read_buffer_size_complete+0x12>
    5dc6:	bf00      	nop
    5dc8:	2000b910 	.word	0x2000b910

00005dcc <read_buffer_size_complete>:
{
    5dcc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    5dce:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    5dd0:	4b09      	ldr	r3, [pc, #36]	; (5df8 <read_buffer_size_complete+0x2c>)
    5dd2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    5dd6:	b103      	cbz	r3, 5dda <read_buffer_size_complete+0xe>
    5dd8:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    5dda:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    5dde:	4806      	ldr	r0, [pc, #24]	; (5df8 <read_buffer_size_complete+0x2c>)
    5de0:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    5de4:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    5de6:	2902      	cmp	r1, #2
    5de8:	bf28      	it	cs
    5dea:	2102      	movcs	r1, #2
    5dec:	460a      	mov	r2, r1
    5dee:	308c      	adds	r0, #140	; 0x8c
    5df0:	f024 fe88 	bl	2ab04 <_impl_k_sem_init>
    5df4:	e7f0      	b.n	5dd8 <read_buffer_size_complete+0xc>
    5df6:	bf00      	nop
    5df8:	2000b910 	.word	0x2000b910

00005dfc <le_pkey_complete>:
{
    5dfc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    5dfe:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e00:	4b17      	ldr	r3, [pc, #92]	; (5e60 <le_pkey_complete+0x64>)
    5e02:	f3bf 8f5b 	dmb	ish
    5e06:	e853 2f00 	ldrex	r2, [r3]
    5e0a:	f022 0210 	bic.w	r2, r2, #16
    5e0e:	e843 2100 	strex	r1, r2, [r3]
    5e12:	2900      	cmp	r1, #0
    5e14:	d1f7      	bne.n	5e06 <le_pkey_complete+0xa>
    5e16:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    5e1a:	782b      	ldrb	r3, [r5, #0]
    5e1c:	b113      	cbz	r3, 5e24 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5e1e:	4b11      	ldr	r3, [pc, #68]	; (5e64 <le_pkey_complete+0x68>)
    5e20:	681c      	ldr	r4, [r3, #0]
    5e22:	e015      	b.n	5e50 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    5e24:	2240      	movs	r2, #64	; 0x40
    5e26:	1c69      	adds	r1, r5, #1
    5e28:	480f      	ldr	r0, [pc, #60]	; (5e68 <le_pkey_complete+0x6c>)
    5e2a:	f7fa fa49 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e2e:	4b0c      	ldr	r3, [pc, #48]	; (5e60 <le_pkey_complete+0x64>)
    5e30:	f3bf 8f5b 	dmb	ish
    5e34:	e853 2f00 	ldrex	r2, [r3]
    5e38:	f042 0208 	orr.w	r2, r2, #8
    5e3c:	e843 2100 	strex	r1, r2, [r3]
    5e40:	2900      	cmp	r1, #0
    5e42:	d1f7      	bne.n	5e34 <le_pkey_complete+0x38>
    5e44:	f3bf 8f5b 	dmb	ish
    5e48:	e7e9      	b.n	5e1e <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    5e4a:	2000      	movs	r0, #0
    5e4c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5e4e:	6864      	ldr	r4, [r4, #4]
    5e50:	b12c      	cbz	r4, 5e5e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    5e52:	6823      	ldr	r3, [r4, #0]
    5e54:	782a      	ldrb	r2, [r5, #0]
    5e56:	2a00      	cmp	r2, #0
    5e58:	d1f7      	bne.n	5e4a <le_pkey_complete+0x4e>
    5e5a:	1c68      	adds	r0, r5, #1
    5e5c:	e7f6      	b.n	5e4c <le_pkey_complete+0x50>
}
    5e5e:	bd38      	pop	{r3, r4, r5, pc}
    5e60:	2000b980 	.word	0x2000b980
    5e64:	200003ac 	.word	0x200003ac
    5e68:	2000036c 	.word	0x2000036c

00005e6c <hci_acl>:
{
    5e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e6e:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    5e70:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    5e72:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5e74:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    5e76:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    5e78:	f100 0510 	add.w	r5, r0, #16
    5e7c:	89c3      	ldrh	r3, [r0, #14]
    5e7e:	442b      	add	r3, r5
    5e80:	3303      	adds	r3, #3
    5e82:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    5e86:	f3c2 020b 	ubfx	r2, r2, #0, #12
    5e8a:	805a      	strh	r2, [r3, #2]
    5e8c:	89c3      	ldrh	r3, [r0, #14]
    5e8e:	442b      	add	r3, r5
    5e90:	3303      	adds	r3, #3
    5e92:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    5e96:	22ff      	movs	r2, #255	; 0xff
    5e98:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    5e9a:	2104      	movs	r1, #4
    5e9c:	3008      	adds	r0, #8
    5e9e:	f016 fa82 	bl	1c3a6 <net_buf_simple_pull>
	if (buf->len != len) {
    5ea2:	89a3      	ldrh	r3, [r4, #12]
    5ea4:	429e      	cmp	r6, r3
    5ea6:	d003      	beq.n	5eb0 <hci_acl+0x44>
		net_buf_unref(buf);
    5ea8:	4620      	mov	r0, r4
    5eaa:	f016 f9e3 	bl	1c274 <net_buf_unref>
		return;
    5eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eb0:	89e3      	ldrh	r3, [r4, #14]
    5eb2:	442b      	add	r3, r5
    5eb4:	3303      	adds	r3, #3
    5eb6:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5eba:	8858      	ldrh	r0, [r3, #2]
    5ebc:	f002 fc7e 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    5ec0:	4606      	mov	r6, r0
    5ec2:	b180      	cbz	r0, 5ee6 <hci_acl+0x7a>
    5ec4:	89e3      	ldrh	r3, [r4, #14]
    5ec6:	441d      	add	r5, r3
    5ec8:	3503      	adds	r5, #3
    5eca:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    5ece:	f003 f83b 	bl	8f48 <bt_conn_get_id>
    5ed2:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    5ed4:	463a      	mov	r2, r7
    5ed6:	4621      	mov	r1, r4
    5ed8:	4630      	mov	r0, r6
    5eda:	f002 fb23 	bl	8524 <bt_conn_recv>
	bt_conn_unref(conn);
    5ede:	4630      	mov	r0, r6
    5ee0:	f002 fcf0 	bl	88c4 <bt_conn_unref>
    5ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    5ee6:	4620      	mov	r0, r4
    5ee8:	f016 f9c4 	bl	1c274 <net_buf_unref>
		return;
    5eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005eee <update_sec_level>:
{
    5eee:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    5ef0:	7a83      	ldrb	r3, [r0, #10]
    5ef2:	b18b      	cbz	r3, 5f18 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    5ef4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5ef6:	b1ab      	cbz	r3, 5f24 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ef8:	f3bf 8f5b 	dmb	ish
    5efc:	689b      	ldr	r3, [r3, #8]
    5efe:	f3bf 8f5b 	dmb	ish
    5f02:	f013 0f01 	tst.w	r3, #1
    5f06:	d00d      	beq.n	5f24 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    5f08:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5f0a:	899b      	ldrh	r3, [r3, #12]
    5f0c:	f013 0f20 	tst.w	r3, #32
    5f10:	d005      	beq.n	5f1e <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    5f12:	2304      	movs	r3, #4
    5f14:	7203      	strb	r3, [r0, #8]
    5f16:	e007      	b.n	5f28 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    5f18:	2301      	movs	r3, #1
    5f1a:	7203      	strb	r3, [r0, #8]
		return;
    5f1c:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    5f1e:	2303      	movs	r3, #3
    5f20:	7203      	strb	r3, [r0, #8]
    5f22:	e001      	b.n	5f28 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    5f24:	2302      	movs	r3, #2
    5f26:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    5f28:	7a42      	ldrb	r2, [r0, #9]
    5f2a:	7a03      	ldrb	r3, [r0, #8]
    5f2c:	429a      	cmp	r2, r3
    5f2e:	d800      	bhi.n	5f32 <update_sec_level+0x44>
    5f30:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    5f32:	2105      	movs	r1, #5
    5f34:	f002 fe8a 	bl	8c4c <bt_conn_disconnect>
    5f38:	e7fa      	b.n	5f30 <update_sec_level+0x42>

00005f3a <hci_encrypt_change>:
{
    5f3a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    5f3c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5f3e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5f42:	f002 fc3b 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    5f46:	b1e0      	cbz	r0, 5f82 <hci_encrypt_change+0x48>
    5f48:	4604      	mov	r4, r0
	if (evt->status) {
    5f4a:	782b      	ldrb	r3, [r5, #0]
    5f4c:	b13b      	cbz	r3, 5f5e <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    5f4e:	7883      	ldrb	r3, [r0, #2]
    5f50:	b90b      	cbnz	r3, 5f56 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    5f52:	7a03      	ldrb	r3, [r0, #8]
    5f54:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    5f56:	4620      	mov	r0, r4
    5f58:	f002 fcb4 	bl	88c4 <bt_conn_unref>
		return;
    5f5c:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    5f5e:	78eb      	ldrb	r3, [r5, #3]
    5f60:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    5f62:	7882      	ldrb	r2, [r0, #2]
    5f64:	b91a      	cbnz	r2, 5f6e <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    5f66:	b96b      	cbnz	r3, 5f84 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    5f68:	4620      	mov	r0, r4
    5f6a:	f7ff ffc0 	bl	5eee <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    5f6e:	7829      	ldrb	r1, [r5, #0]
    5f70:	4620      	mov	r0, r4
    5f72:	f003 fbcb 	bl	970c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    5f76:	4620      	mov	r0, r4
    5f78:	f002 fa9e 	bl	84b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    5f7c:	4620      	mov	r0, r4
    5f7e:	f002 fca1 	bl	88c4 <bt_conn_unref>
    5f82:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    5f84:	f008 fafe 	bl	e584 <bt_smp_update_keys>
    5f88:	e7ee      	b.n	5f68 <hci_encrypt_change+0x2e>

00005f8a <hci_encrypt_key_refresh_complete>:
{
    5f8a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    5f8c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5f8e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5f92:	f002 fc13 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    5f96:	b170      	cbz	r0, 5fb6 <hci_encrypt_key_refresh_complete+0x2c>
    5f98:	4604      	mov	r4, r0
	if (evt->status) {
    5f9a:	7829      	ldrb	r1, [r5, #0]
    5f9c:	b961      	cbnz	r1, 5fb8 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    5f9e:	7883      	ldrb	r3, [r0, #2]
    5fa0:	b16b      	cbz	r3, 5fbe <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    5fa2:	7829      	ldrb	r1, [r5, #0]
    5fa4:	4620      	mov	r0, r4
    5fa6:	f003 fbb1 	bl	970c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    5faa:	4620      	mov	r0, r4
    5fac:	f002 fa84 	bl	84b8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    5fb0:	4620      	mov	r0, r4
    5fb2:	f002 fc87 	bl	88c4 <bt_conn_unref>
    5fb6:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    5fb8:	f003 fba8 	bl	970c <bt_l2cap_encrypt_change>
		return;
    5fbc:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    5fbe:	f008 fae1 	bl	e584 <bt_smp_update_keys>
		update_sec_level(conn);
    5fc2:	4620      	mov	r0, r4
    5fc4:	f7ff ff93 	bl	5eee <update_sec_level>
    5fc8:	e7eb      	b.n	5fa2 <hci_encrypt_key_refresh_complete+0x18>

00005fca <find_id_addr>:
{
    5fca:	b510      	push	{r4, lr}
    5fcc:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    5fce:	f008 fbe3 	bl	e798 <bt_keys_find_irk>
		if (keys) {
    5fd2:	b100      	cbz	r0, 5fd6 <find_id_addr+0xc>
			return &keys->addr;
    5fd4:	bd10      	pop	{r4, pc}
	return addr;
    5fd6:	4620      	mov	r0, r4
}
    5fd8:	bd10      	pop	{r4, pc}
	...

00005fdc <update_conn_param>:
{
    5fdc:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    5fde:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    5fe2:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    5fe4:	b12b      	cbz	r3, 5ff2 <update_conn_param+0x16>
    5fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5fea:	4803      	ldr	r0, [pc, #12]	; (5ff8 <update_conn_param+0x1c>)
    5fec:	f025 fbdc 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    5ff0:	bd08      	pop	{r3, pc}
    5ff2:	2200      	movs	r2, #0
    5ff4:	e7f9      	b.n	5fea <update_conn_param+0xe>
    5ff6:	bf00      	nop
    5ff8:	20002c00 	.word	0x20002c00

00005ffc <le_data_len_change>:
{
    5ffc:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    5ffe:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6000:	8818      	ldrh	r0, [r3, #0]
    6002:	f002 fbdb 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    6006:	b198      	cbz	r0, 6030 <le_data_len_change+0x34>
    6008:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    600a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    600c:	f3bf 8f5b 	dmb	ish
    6010:	e853 2f00 	ldrex	r2, [r3]
    6014:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    6018:	e843 1000 	strex	r0, r1, [r3]
    601c:	2800      	cmp	r0, #0
    601e:	d1f7      	bne.n	6010 <le_data_len_change+0x14>
    6020:	f3bf 8f5b 	dmb	ish
    6024:	f412 7f80 	tst.w	r2, #256	; 0x100
    6028:	d103      	bne.n	6032 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    602a:	4620      	mov	r0, r4
    602c:	f002 fc4a 	bl	88c4 <bt_conn_unref>
    6030:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    6032:	4620      	mov	r0, r4
    6034:	f7ff ffd2 	bl	5fdc <update_conn_param>
    6038:	e7f7      	b.n	602a <le_data_len_change+0x2e>
	...

0000603c <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    603c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    603e:	4b12      	ldr	r3, [pc, #72]	; (6088 <le_data_len_change+0x4c>)
    6040:	e9d3 4500 	ldrd	r4, r5, [r3]
    6044:	2400      	movs	r4, #0
    6046:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    604a:	ea54 0305 	orrs.w	r3, r4, r5
    604e:	d008      	beq.n	6062 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    6050:	4b0e      	ldr	r3, [pc, #56]	; (608c <le_data_len_change+0x50>)
    6052:	e9d3 4500 	ldrd	r4, r5, [r3]
    6056:	f004 0440 	and.w	r4, r4, #64	; 0x40
    605a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    605c:	ea54 0305 	orrs.w	r3, r4, r5
    6060:	d100      	bne.n	6064 <le_data_len_change+0x28>
    6062:	bd38      	pop	{r3, r4, r5, pc}
    6064:	4613      	mov	r3, r2
    6066:	460d      	mov	r5, r1
    6068:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    606a:	220a      	movs	r2, #10
    606c:	2107      	movs	r1, #7
    606e:	4618      	mov	r0, r3
    6070:	f008 fcf0 	bl	ea54 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    6074:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    6076:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    6078:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    607a:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    607c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    607e:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    6080:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    6082:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    6084:	8103      	strh	r3, [r0, #8]
    6086:	e7ec      	b.n	6062 <le_data_len_change+0x26>
    6088:	2000bc00 	.word	0x2000bc00
    608c:	2000bc08 	.word	0x2000bc08

00006090 <le_conn_update_complete>:
{
    6090:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    6092:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6094:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6098:	f002 fb90 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    609c:	b128      	cbz	r0, 60aa <le_conn_update_complete+0x1a>
    609e:	4605      	mov	r5, r0
	if (!evt->status) {
    60a0:	7823      	ldrb	r3, [r4, #0]
    60a2:	b11b      	cbz	r3, 60ac <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    60a4:	4628      	mov	r0, r5
    60a6:	f002 fc0d 	bl	88c4 <bt_conn_unref>
    60aa:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    60ac:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    60b0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    60b4:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    60b8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    60bc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    60c0:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    60c4:	f002 f912 	bl	82ec <notify_le_param_updated>
    60c8:	e7ec      	b.n	60a4 <le_conn_update_complete+0x14>
	...

000060cc <le_conn_update_complete>:
{
    60cc:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    60ce:	4b14      	ldr	r3, [pc, #80]	; (6120 <le_conn_update_complete+0x54>)
    60d0:	e9d3 4500 	ldrd	r4, r5, [r3]
    60d4:	2400      	movs	r4, #0
    60d6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    60da:	ea54 0305 	orrs.w	r3, r4, r5
    60de:	d008      	beq.n	60f2 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    60e0:	4b10      	ldr	r3, [pc, #64]	; (6124 <le_conn_update_complete+0x58>)
    60e2:	e9d3 4500 	ldrd	r4, r5, [r3]
    60e6:	f004 0404 	and.w	r4, r4, #4
    60ea:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    60ec:	ea54 0305 	orrs.w	r3, r4, r5
    60f0:	d100      	bne.n	60f4 <le_conn_update_complete+0x28>
    60f2:	bd38      	pop	{r3, r4, r5, pc}
    60f4:	4613      	mov	r3, r2
    60f6:	460d      	mov	r5, r1
    60f8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    60fa:	2209      	movs	r2, #9
    60fc:	2103      	movs	r1, #3
    60fe:	4618      	mov	r0, r3
    6100:	f008 fca8 	bl	ea54 <meta_evt>
	sep->status = radio_cu->status;
    6104:	78e3      	ldrb	r3, [r4, #3]
    6106:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6108:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    610c:	88a3      	ldrh	r3, [r4, #4]
    610e:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    6112:	88e3      	ldrh	r3, [r4, #6]
    6114:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    6118:	8923      	ldrh	r3, [r4, #8]
    611a:	f8a0 3007 	strh.w	r3, [r0, #7]
    611e:	e7e8      	b.n	60f2 <le_conn_update_complete+0x26>
    6120:	2000bc00 	.word	0x2000bc00
    6124:	2000bc08 	.word	0x2000bc08

00006128 <hci_cmd_done>:
{
    6128:	b538      	push	{r3, r4, r5, lr}
    612a:	460d      	mov	r5, r1
    612c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    612e:	7990      	ldrb	r0, [r2, #6]
    6130:	f016 f826 	bl	1c180 <net_buf_pool_get>
    6134:	4b0b      	ldr	r3, [pc, #44]	; (6164 <hci_cmd_done+0x3c>)
    6136:	4283      	cmp	r3, r0
    6138:	d000      	beq.n	613c <hci_cmd_done+0x14>
    613a:	bd38      	pop	{r3, r4, r5, pc}
    613c:	f104 0210 	add.w	r2, r4, #16
    6140:	89e3      	ldrh	r3, [r4, #14]
    6142:	4413      	add	r3, r2
    6144:	3303      	adds	r3, #3
    6146:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    614a:	6859      	ldr	r1, [r3, #4]
    614c:	2900      	cmp	r1, #0
    614e:	d0f4      	beq.n	613a <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    6150:	705d      	strb	r5, [r3, #1]
    6152:	89e3      	ldrh	r3, [r4, #14]
    6154:	441a      	add	r2, r3
    6156:	3203      	adds	r2, #3
    6158:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    615c:	6850      	ldr	r0, [r2, #4]
    615e:	f024 fcda 	bl	2ab16 <_impl_k_sem_give>
    6162:	e7ea      	b.n	613a <hci_cmd_done+0x12>
    6164:	2000d1b0 	.word	0x2000d1b0

00006168 <hci_cmd_complete>:
{
    6168:	b570      	push	{r4, r5, r6, lr}
    616a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    616c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    6170:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    6174:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    6176:	2103      	movs	r1, #3
    6178:	f016 f915 	bl	1c3a6 <net_buf_simple_pull>
	status = buf->data[0];
    617c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    617e:	4622      	mov	r2, r4
    6180:	7819      	ldrb	r1, [r3, #0]
    6182:	4630      	mov	r0, r6
    6184:	f7ff ffd0 	bl	6128 <hci_cmd_done>
	if (ncmd) {
    6188:	b905      	cbnz	r5, 618c <hci_cmd_complete+0x24>
    618a:	bd70      	pop	{r4, r5, r6, pc}
    618c:	4801      	ldr	r0, [pc, #4]	; (6194 <hci_cmd_complete+0x2c>)
    618e:	f024 fcc2 	bl	2ab16 <_impl_k_sem_give>
}
    6192:	e7fa      	b.n	618a <hci_cmd_complete+0x22>
    6194:	2000b9b8 	.word	0x2000b9b8

00006198 <hci_cmd_status>:
{
    6198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    619a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    619c:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    61a0:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    61a2:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    61a4:	2104      	movs	r1, #4
    61a6:	f016 f8fe 	bl	1c3a6 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    61aa:	462a      	mov	r2, r5
    61ac:	7821      	ldrb	r1, [r4, #0]
    61ae:	4638      	mov	r0, r7
    61b0:	f7ff ffba 	bl	6128 <hci_cmd_done>
	if (ncmd) {
    61b4:	b906      	cbnz	r6, 61b8 <hci_cmd_status+0x20>
    61b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61b8:	4801      	ldr	r0, [pc, #4]	; (61c0 <hci_cmd_status+0x28>)
    61ba:	f024 fcac 	bl	2ab16 <_impl_k_sem_give>
}
    61be:	e7fa      	b.n	61b6 <hci_cmd_status+0x1e>
    61c0:	2000b9b8 	.word	0x2000b9b8

000061c4 <hci_num_completed_packets>:
{
    61c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    61c8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    61cc:	2700      	movs	r7, #0
    61ce:	e026      	b.n	621e <hci_num_completed_packets+0x5a>
    61d0:	f386 8811 	msr	BASEPRI, r6
			continue;
    61d4:	e022      	b.n	621c <hci_num_completed_packets+0x58>
    61d6:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    61da:	b1e1      	cbz	r1, 6216 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    61dc:	f104 001c 	add.w	r0, r4, #28
    61e0:	f024 f902 	bl	2a3e8 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    61e4:	4620      	mov	r0, r4
    61e6:	f002 f85f 	bl	82a8 <bt_conn_get_pkts>
    61ea:	f024 fc94 	bl	2ab16 <_impl_k_sem_give>
		while (count--) {
    61ee:	4635      	mov	r5, r6
    61f0:	1e6b      	subs	r3, r5, #1
    61f2:	b29e      	uxth	r6, r3
    61f4:	b17d      	cbz	r5, 6216 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    61f6:	f04f 0220 	mov.w	r2, #32
    61fa:	f3ef 8311 	mrs	r3, BASEPRI
    61fe:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6202:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6204:	2900      	cmp	r1, #0
    6206:	d0e6      	beq.n	61d6 <hci_num_completed_packets+0x12>
	list->head = node->next;
    6208:	680a      	ldr	r2, [r1, #0]
    620a:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    620c:	69a0      	ldr	r0, [r4, #24]
    620e:	4281      	cmp	r1, r0
    6210:	d1e1      	bne.n	61d6 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    6212:	61a2      	str	r2, [r4, #24]
    6214:	e7df      	b.n	61d6 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    6216:	4620      	mov	r0, r4
    6218:	f002 fb54 	bl	88c4 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    621c:	3701      	adds	r7, #1
    621e:	f898 3000 	ldrb.w	r3, [r8]
    6222:	429f      	cmp	r7, r3
    6224:	da13      	bge.n	624e <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6226:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    622a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    622e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    6232:	f04f 0320 	mov.w	r3, #32
    6236:	f3ef 8611 	mrs	r6, BASEPRI
    623a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    623e:	f002 fabd 	bl	87bc <bt_conn_lookup_handle>
		if (!conn) {
    6242:	4604      	mov	r4, r0
    6244:	2800      	cmp	r0, #0
    6246:	d0c3      	beq.n	61d0 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6248:	f386 8811 	msr	BASEPRI, r6
    624c:	e7d0      	b.n	61f0 <hci_num_completed_packets+0x2c>
}
    624e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00006254 <bt_hci_cmd_create>:
{
    6254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6256:	4607      	mov	r7, r0
    6258:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    625a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    625e:	4812      	ldr	r0, [pc, #72]	; (62a8 <bt_hci_cmd_create+0x54>)
    6260:	f015 ff9a 	bl	1c198 <net_buf_alloc>
    6264:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6266:	2100      	movs	r1, #0
    6268:	f015 fff1 	bl	1c24e <net_buf_reserve>
    626c:	f104 0310 	add.w	r3, r4, #16
    6270:	89e2      	ldrh	r2, [r4, #14]
    6272:	441a      	add	r2, r3
    6274:	3203      	adds	r2, #3
    6276:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    627a:	2100      	movs	r1, #0
    627c:	7011      	strb	r1, [r2, #0]
    627e:	89e2      	ldrh	r2, [r4, #14]
    6280:	441a      	add	r2, r3
    6282:	3203      	adds	r2, #3
    6284:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    6288:	8057      	strh	r7, [r2, #2]
    628a:	89e2      	ldrh	r2, [r4, #14]
    628c:	4413      	add	r3, r2
    628e:	3303      	adds	r3, #3
    6290:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    6294:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    6296:	2103      	movs	r1, #3
    6298:	f104 0008 	add.w	r0, r4, #8
    629c:	f016 f836 	bl	1c30c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    62a0:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    62a2:	7085      	strb	r5, [r0, #2]
}
    62a4:	4620      	mov	r0, r4
    62a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62a8:	2000d1b0 	.word	0x2000d1b0

000062ac <bt_hci_cmd_send_sync>:
{
    62ac:	b570      	push	{r4, r5, r6, lr}
    62ae:	b086      	sub	sp, #24
    62b0:	4616      	mov	r6, r2
	if (!buf) {
    62b2:	460d      	mov	r5, r1
    62b4:	b329      	cbz	r1, 6302 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    62b6:	2201      	movs	r2, #1
    62b8:	2100      	movs	r1, #0
    62ba:	4668      	mov	r0, sp
    62bc:	f024 fc22 	bl	2ab04 <_impl_k_sem_init>
    62c0:	f105 0410 	add.w	r4, r5, #16
    62c4:	89eb      	ldrh	r3, [r5, #14]
    62c6:	4423      	add	r3, r4
    62c8:	3303      	adds	r3, #3
    62ca:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    62ce:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    62d2:	4628      	mov	r0, r5
    62d4:	f015 ffea 	bl	1c2ac <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    62d8:	4629      	mov	r1, r5
    62da:	4813      	ldr	r0, [pc, #76]	; (6328 <bt_hci_cmd_send_sync+0x7c>)
    62dc:	f015 ffbc 	bl	1c258 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    62e0:	f242 7110 	movw	r1, #10000	; 0x2710
    62e4:	4668      	mov	r0, sp
    62e6:	f024 fc29 	bl	2ab3c <_impl_k_sem_take>
    62ea:	89eb      	ldrh	r3, [r5, #14]
    62ec:	441c      	add	r4, r3
    62ee:	3403      	adds	r4, #3
    62f0:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    62f4:	7863      	ldrb	r3, [r4, #1]
    62f6:	b963      	cbnz	r3, 6312 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    62f8:	b18e      	cbz	r6, 631e <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    62fa:	6035      	str	r5, [r6, #0]
		err = 0;
    62fc:	2000      	movs	r0, #0
}
    62fe:	b006      	add	sp, #24
    6300:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    6302:	f7ff ffa7 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    6306:	4605      	mov	r5, r0
    6308:	2800      	cmp	r0, #0
    630a:	d1d4      	bne.n	62b6 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    630c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6310:	e7f5      	b.n	62fe <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    6312:	4628      	mov	r0, r5
    6314:	f015 ffae 	bl	1c274 <net_buf_unref>
		err = -EIO;
    6318:	f06f 0004 	mvn.w	r0, #4
    631c:	e7ef      	b.n	62fe <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    631e:	4628      	mov	r0, r5
    6320:	f015 ffa8 	bl	1c274 <net_buf_unref>
		err = 0;
    6324:	2000      	movs	r0, #0
    6326:	e7ea      	b.n	62fe <bt_hci_cmd_send_sync+0x52>
    6328:	2000b9e4 	.word	0x2000b9e4

0000632c <common_init>:
{
    632c:	b510      	push	{r4, lr}
    632e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6330:	aa01      	add	r2, sp, #4
    6332:	2100      	movs	r1, #0
    6334:	f640 4003 	movw	r0, #3075	; 0xc03
    6338:	f7ff ffb8 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    633c:	4604      	mov	r4, r0
    633e:	b110      	cbz	r0, 6346 <common_init+0x1a>
}
    6340:	4620      	mov	r0, r4
    6342:	b002      	add	sp, #8
    6344:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    6346:	9801      	ldr	r0, [sp, #4]
    6348:	f7ff fce6 	bl	5d18 <hci_reset_complete>
	net_buf_unref(rsp);
    634c:	ac02      	add	r4, sp, #8
    634e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    6352:	f015 ff8f 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    6356:	4622      	mov	r2, r4
    6358:	2100      	movs	r1, #0
    635a:	f241 0003 	movw	r0, #4099	; 0x1003
    635e:	f7ff ffa5 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6362:	4604      	mov	r4, r0
    6364:	2800      	cmp	r0, #0
    6366:	d1eb      	bne.n	6340 <common_init+0x14>
	read_local_features_complete(rsp);
    6368:	9801      	ldr	r0, [sp, #4]
    636a:	f7ff fced 	bl	5d48 <read_local_features_complete>
	net_buf_unref(rsp);
    636e:	ac02      	add	r4, sp, #8
    6370:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    6374:	f015 ff7e 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6378:	4622      	mov	r2, r4
    637a:	2100      	movs	r1, #0
    637c:	f241 0001 	movw	r0, #4097	; 0x1001
    6380:	f7ff ff94 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6384:	4604      	mov	r4, r0
    6386:	2800      	cmp	r0, #0
    6388:	d1da      	bne.n	6340 <common_init+0x14>
	read_local_ver_complete(rsp);
    638a:	9801      	ldr	r0, [sp, #4]
    638c:	f7ff fc72 	bl	5c74 <read_local_ver_complete>
	net_buf_unref(rsp);
    6390:	ac02      	add	r4, sp, #8
    6392:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    6396:	f015 ff6d 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    639a:	4622      	mov	r2, r4
    639c:	2100      	movs	r1, #0
    639e:	f241 0009 	movw	r0, #4105	; 0x1009
    63a2:	f7ff ff83 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    63a6:	4604      	mov	r4, r0
    63a8:	2800      	cmp	r0, #0
    63aa:	d1c9      	bne.n	6340 <common_init+0x14>
	read_bdaddr_complete(rsp);
    63ac:	9801      	ldr	r0, [sp, #4]
    63ae:	f7ff fcd5 	bl	5d5c <read_bdaddr_complete>
	net_buf_unref(rsp);
    63b2:	ac02      	add	r4, sp, #8
    63b4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    63b8:	f015 ff5c 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    63bc:	4622      	mov	r2, r4
    63be:	2100      	movs	r1, #0
    63c0:	f241 0002 	movw	r0, #4098	; 0x1002
    63c4:	f7ff ff72 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    63c8:	4604      	mov	r4, r0
    63ca:	2800      	cmp	r0, #0
    63cc:	d1b8      	bne.n	6340 <common_init+0x14>
	read_supported_commands_complete(rsp);
    63ce:	9801      	ldr	r0, [sp, #4]
    63d0:	f7ff fcd2 	bl	5d78 <read_supported_commands_complete>
	net_buf_unref(rsp);
    63d4:	9801      	ldr	r0, [sp, #4]
    63d6:	f015 ff4d 	bl	1c274 <net_buf_unref>
	return 0;
    63da:	e7b1      	b.n	6340 <common_init+0x14>

000063dc <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    63dc:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    63de:	4b3a      	ldr	r3, [pc, #232]	; (64c8 <common_init+0xec>)
    63e0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    63e4:	2a00      	cmp	r2, #0
    63e6:	d15e      	bne.n	64a6 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    63e8:	2200      	movs	r2, #0
    63ea:	4b37      	ldr	r3, [pc, #220]	; (64c8 <common_init+0xec>)
    63ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    63f0:	4c35      	ldr	r4, [pc, #212]	; (64c8 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    63f2:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    63f6:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    63fa:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    63fe:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    6402:	f00a fa47 	bl	10894 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    6406:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    640a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    640e:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    6412:	462b      	mov	r3, r5
    6414:	440a      	add	r2, r1
    6416:	2108      	movs	r1, #8
    6418:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    641c:	f00a fa3a 	bl	10894 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    6420:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    6424:	2202      	movs	r2, #2
    6426:	2124      	movs	r1, #36	; 0x24
    6428:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    642c:	f00a fa32 	bl	10894 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    6430:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    6434:	3a01      	subs	r2, #1
    6436:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    643a:	b292      	uxth	r2, r2
    643c:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    6440:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    6444:	f00a fa26 	bl	10894 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    6448:	4628      	mov	r0, r5
    644a:	f00a fa48 	bl	108de <mem_acquire>
	LL_ASSERT(link);
    644e:	b3a0      	cbz	r0, 64ba <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    6450:	4c1d      	ldr	r4, [pc, #116]	; (64c8 <common_init+0xec>)
    6452:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    6456:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    645a:	f00a faa5 	bl	109a8 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    645e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    6462:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    6466:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    646a:	20ff      	movs	r0, #255	; 0xff
    646c:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    6470:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    6474:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    6478:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    647c:	231f      	movs	r3, #31
    647e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    6482:	2325      	movs	r3, #37	; 0x25
    6484:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    6488:	231b      	movs	r3, #27
    648a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    648e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6492:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    6496:	2303      	movs	r3, #3
    6498:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    649c:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    64a0:	f00c ff5a 	bl	13358 <packet_rx_allocate>
    64a4:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    64a6:	4618      	mov	r0, r3
    64a8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    64ac:	f44f 71aa 	mov.w	r1, #340	; 0x154
    64b0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    64b4:	f00a f9ee 	bl	10894 <mem_init>
    64b8:	e79a      	b.n	63f0 <common_init+0x14>
	LL_ASSERT(link);
    64ba:	4040      	eors	r0, r0
    64bc:	f380 8811 	msr	BASEPRI, r0
    64c0:	f04f 0004 	mov.w	r0, #4
    64c4:	df02      	svc	2
    64c6:	bf00      	nop
    64c8:	20000f7c 	.word	0x20000f7c

000064cc <le_set_event_mask>:
{
    64cc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    64ce:	2108      	movs	r1, #8
    64d0:	f242 0001 	movw	r0, #8193	; 0x2001
    64d4:	f7ff febe 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    64d8:	2800      	cmp	r0, #0
    64da:	d042      	beq.n	6562 <le_set_event_mask+0x96>
    64dc:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    64de:	2108      	movs	r1, #8
    64e0:	4408      	add	r0, r1
    64e2:	f015 ff13 	bl	1c30c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    64e6:	4b20      	ldr	r3, [pc, #128]	; (6568 <le_set_event_mask+0x9c>)
    64e8:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    64ec:	f011 0f02 	tst.w	r1, #2
    64f0:	d131      	bne.n	6556 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    64f2:	220f      	movs	r2, #15
    64f4:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    64f6:	f011 0f20 	tst.w	r1, #32
    64fa:	d001      	beq.n	6500 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    64fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    6500:	4d19      	ldr	r5, [pc, #100]	; (6568 <le_set_event_mask+0x9c>)
    6502:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    6506:	f015 0f09 	tst.w	r5, #9
    650a:	d001      	beq.n	6510 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    650c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    6510:	f011 0f01 	tst.w	r1, #1
    6514:	d001      	beq.n	651a <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    6516:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    651a:	4913      	ldr	r1, [pc, #76]	; (6568 <le_set_event_mask+0x9c>)
    651c:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    6520:	f001 0106 	and.w	r1, r1, #6
    6524:	2906      	cmp	r1, #6
    6526:	d019      	beq.n	655c <le_set_event_mask+0x90>
	dst[0] = val;
    6528:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    652a:	f3c2 2107 	ubfx	r1, r2, #8, #8
    652e:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    6530:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6532:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6534:	0a12      	lsrs	r2, r2, #8
    6536:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    6538:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    653a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    653e:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    6540:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    6542:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    6544:	0a1b      	lsrs	r3, r3, #8
    6546:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    6548:	2200      	movs	r2, #0
    654a:	4621      	mov	r1, r4
    654c:	f242 0001 	movw	r0, #8193	; 0x2001
    6550:	f7ff feac 	bl	62ac <bt_hci_cmd_send_sync>
    6554:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6556:	222f      	movs	r2, #47	; 0x2f
    6558:	2300      	movs	r3, #0
    655a:	e7cc      	b.n	64f6 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    655c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    6560:	e7e2      	b.n	6528 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    6562:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6566:	bd38      	pop	{r3, r4, r5, pc}
    6568:	2000b910 	.word	0x2000b910

0000656c <le_set_event_mask>:
{
    656c:	b570      	push	{r4, r5, r6, lr}
    656e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    6570:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    6572:	79da      	ldrb	r2, [r3, #7]
    6574:	7999      	ldrb	r1, [r3, #6]
    6576:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    657a:	7958      	ldrb	r0, [r3, #5]
    657c:	791a      	ldrb	r2, [r3, #4]
    657e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6582:	2400      	movs	r4, #0
    6584:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    6588:	78d9      	ldrb	r1, [r3, #3]
    658a:	789a      	ldrb	r2, [r3, #2]
    658c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6590:	7859      	ldrb	r1, [r3, #1]
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    6598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    659c:	ea44 0003 	orr.w	r0, r4, r3
    65a0:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    65a2:	4b04      	ldr	r3, [pc, #16]	; (65b4 <le_set_event_mask+0x48>)
    65a4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    65a8:	2101      	movs	r1, #1
    65aa:	4630      	mov	r0, r6
    65ac:	f008 f9b8 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    65b0:	7004      	strb	r4, [r0, #0]
    65b2:	bd70      	pop	{r4, r5, r6, pc}
    65b4:	2000bc08 	.word	0x2000bc08

000065b8 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    65b8:	4b4c      	ldr	r3, [pc, #304]	; (66ec <le_init+0x134>)
    65ba:	7e9b      	ldrb	r3, [r3, #26]
    65bc:	f013 0f40 	tst.w	r3, #64	; 0x40
    65c0:	f000 808c 	beq.w	66dc <le_init+0x124>
{
    65c4:	b570      	push	{r4, r5, r6, lr}
    65c6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    65c8:	aa01      	add	r2, sp, #4
    65ca:	2100      	movs	r1, #0
    65cc:	f242 0003 	movw	r0, #8195	; 0x2003
    65d0:	f7ff fe6c 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    65d4:	4603      	mov	r3, r0
    65d6:	b110      	cbz	r0, 65de <le_init+0x26>
}
    65d8:	4618      	mov	r0, r3
    65da:	b002      	add	sp, #8
    65dc:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    65de:	9801      	ldr	r0, [sp, #4]
    65e0:	f7ff fbd4 	bl	5d8c <read_le_features_complete>
	net_buf_unref(rsp);
    65e4:	ac02      	add	r4, sp, #8
    65e6:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    65ea:	f015 fe43 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    65ee:	4622      	mov	r2, r4
    65f0:	2100      	movs	r1, #0
    65f2:	f242 0002 	movw	r0, #8194	; 0x2002
    65f6:	f7ff fe59 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    65fa:	4603      	mov	r3, r0
    65fc:	2800      	cmp	r0, #0
    65fe:	d1eb      	bne.n	65d8 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    6600:	9801      	ldr	r0, [sp, #4]
    6602:	f7ff fbcd 	bl	5da0 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    6606:	9801      	ldr	r0, [sp, #4]
    6608:	f015 fe34 	bl	1c274 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    660c:	4b37      	ldr	r3, [pc, #220]	; (66ec <le_init+0x134>)
    660e:	7e9b      	ldrb	r3, [r3, #26]
    6610:	f013 0f20 	tst.w	r3, #32
    6614:	d037      	beq.n	6686 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    6616:	4b35      	ldr	r3, [pc, #212]	; (66ec <le_init+0x134>)
    6618:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    661c:	f013 0f08 	tst.w	r3, #8
    6620:	d149      	bne.n	66b6 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    6622:	4b32      	ldr	r3, [pc, #200]	; (66ec <le_init+0x134>)
    6624:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    6628:	f013 0f20 	tst.w	r3, #32
    662c:	d027      	beq.n	667e <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    662e:	466a      	mov	r2, sp
    6630:	2100      	movs	r1, #0
    6632:	f242 002f 	movw	r0, #8239	; 0x202f
    6636:	f7ff fe39 	bl	62ac <bt_hci_cmd_send_sync>
		if (err) {
    663a:	4603      	mov	r3, r0
    663c:	2800      	cmp	r0, #0
    663e:	d1cb      	bne.n	65d8 <le_init+0x20>
		rp = (void *)rsp->data;
    6640:	9800      	ldr	r0, [sp, #0]
    6642:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    6644:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    6648:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    664c:	f015 fe12 	bl	1c274 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    6650:	2104      	movs	r1, #4
    6652:	f242 0024 	movw	r0, #8228	; 0x2024
    6656:	f7ff fdfd 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    665a:	4604      	mov	r4, r0
    665c:	2800      	cmp	r0, #0
    665e:	d03a      	beq.n	66d6 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    6660:	2104      	movs	r1, #4
    6662:	3008      	adds	r0, #8
    6664:	f015 fe52 	bl	1c30c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    6668:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    666a:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    666c:	2200      	movs	r2, #0
    666e:	4621      	mov	r1, r4
    6670:	f242 0024 	movw	r0, #8228	; 0x2024
    6674:	f7ff fe1a 	bl	62ac <bt_hci_cmd_send_sync>
		if (err) {
    6678:	4603      	mov	r3, r0
    667a:	2800      	cmp	r0, #0
    667c:	d1ac      	bne.n	65d8 <le_init+0x20>
	return  le_set_event_mask();
    667e:	f7ff ff25 	bl	64cc <le_set_event_mask>
    6682:	4603      	mov	r3, r0
    6684:	e7a8      	b.n	65d8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6686:	2102      	movs	r1, #2
    6688:	f640 406d 	movw	r0, #3181	; 0xc6d
    668c:	f7ff fde2 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    6690:	4604      	mov	r4, r0
    6692:	b338      	cbz	r0, 66e4 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    6694:	2102      	movs	r1, #2
    6696:	3008      	adds	r0, #8
    6698:	f015 fe38 	bl	1c30c <net_buf_simple_add>
		cp_le->le = 0x01;
    669c:	2301      	movs	r3, #1
    669e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    66a0:	2200      	movs	r2, #0
    66a2:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    66a4:	4621      	mov	r1, r4
    66a6:	f640 406d 	movw	r0, #3181	; 0xc6d
    66aa:	f7ff fdff 	bl	62ac <bt_hci_cmd_send_sync>
		if (err) {
    66ae:	4603      	mov	r3, r0
    66b0:	2800      	cmp	r0, #0
    66b2:	d0b0      	beq.n	6616 <le_init+0x5e>
    66b4:	e790      	b.n	65d8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    66b6:	aa01      	add	r2, sp, #4
    66b8:	2100      	movs	r1, #0
    66ba:	f242 001c 	movw	r0, #8220	; 0x201c
    66be:	f7ff fdf5 	bl	62ac <bt_hci_cmd_send_sync>
		if (err) {
    66c2:	4603      	mov	r3, r0
    66c4:	2800      	cmp	r0, #0
    66c6:	d187      	bne.n	65d8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    66c8:	9801      	ldr	r0, [sp, #4]
    66ca:	f7ff fae5 	bl	5c98 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    66ce:	9801      	ldr	r0, [sp, #4]
    66d0:	f015 fdd0 	bl	1c274 <net_buf_unref>
    66d4:	e7a5      	b.n	6622 <le_init+0x6a>
			return -ENOBUFS;
    66d6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    66da:	e77d      	b.n	65d8 <le_init+0x20>
		return -ENODEV;
    66dc:	f06f 0312 	mvn.w	r3, #18
}
    66e0:	4618      	mov	r0, r3
    66e2:	4770      	bx	lr
			return -ENOBUFS;
    66e4:	f06f 0368 	mvn.w	r3, #104	; 0x68
    66e8:	e776      	b.n	65d8 <le_init+0x20>
    66ea:	bf00      	nop
    66ec:	2000b910 	.word	0x2000b910

000066f0 <br_init>:
{
    66f0:	b510      	push	{r4, lr}
    66f2:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    66f4:	4b0b      	ldr	r3, [pc, #44]	; (6724 <br_init+0x34>)
    66f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    66fa:	b11b      	cbz	r3, 6704 <br_init+0x14>
		return 0;
    66fc:	2400      	movs	r4, #0
}
    66fe:	4620      	mov	r0, r4
    6700:	b002      	add	sp, #8
    6702:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    6704:	aa01      	add	r2, sp, #4
    6706:	2100      	movs	r1, #0
    6708:	f241 0005 	movw	r0, #4101	; 0x1005
    670c:	f7ff fdce 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6710:	4604      	mov	r4, r0
    6712:	2800      	cmp	r0, #0
    6714:	d1f3      	bne.n	66fe <br_init+0xe>
	read_buffer_size_complete(rsp);
    6716:	9801      	ldr	r0, [sp, #4]
    6718:	f7ff fb58 	bl	5dcc <read_buffer_size_complete>
	net_buf_unref(rsp);
    671c:	9801      	ldr	r0, [sp, #4]
    671e:	f015 fda9 	bl	1c274 <net_buf_unref>
	return 0;
    6722:	e7ec      	b.n	66fe <br_init+0xe>
    6724:	2000b910 	.word	0x2000b910

00006728 <set_event_mask>:
{
    6728:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    672a:	2108      	movs	r1, #8
    672c:	f640 4001 	movw	r0, #3073	; 0xc01
    6730:	f7ff fd90 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6734:	b348      	cbz	r0, 678a <set_event_mask+0x62>
    6736:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    6738:	2108      	movs	r1, #8
    673a:	4408      	add	r0, r1
    673c:	f015 fde6 	bl	1c30c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    6740:	4b13      	ldr	r3, [pc, #76]	; (6790 <set_event_mask+0x68>)
    6742:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    6746:	f013 0f01 	tst.w	r3, #1
    674a:	d11b      	bne.n	6784 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    674c:	4a11      	ldr	r2, [pc, #68]	; (6794 <set_event_mask+0x6c>)
    674e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    6752:	b291      	uxth	r1, r2
	dst[0] = val;
    6754:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    6756:	0a09      	lsrs	r1, r1, #8
    6758:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    675a:	0c12      	lsrs	r2, r2, #16
    675c:	b291      	uxth	r1, r2
	dst[0] = val;
    675e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    6760:	0a0a      	lsrs	r2, r1, #8
    6762:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    6764:	b29a      	uxth	r2, r3
	dst[0] = val;
    6766:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    6768:	0a12      	lsrs	r2, r2, #8
    676a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    676c:	0c1b      	lsrs	r3, r3, #16
    676e:	b29a      	uxth	r2, r3
	dst[0] = val;
    6770:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    6772:	0a13      	lsrs	r3, r2, #8
    6774:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6776:	2200      	movs	r2, #0
    6778:	4621      	mov	r1, r4
    677a:	f640 4001 	movw	r0, #3073	; 0xc01
    677e:	f7ff fd95 	bl	62ac <bt_hci_cmd_send_sync>
    6782:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    6784:	4a04      	ldr	r2, [pc, #16]	; (6798 <set_event_mask+0x70>)
    6786:	4b05      	ldr	r3, [pc, #20]	; (679c <set_event_mask+0x74>)
    6788:	e7e3      	b.n	6752 <set_event_mask+0x2a>
		return -ENOBUFS;
    678a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    678e:	bd10      	pop	{r4, pc}
    6790:	2000b910 	.word	0x2000b910
    6794:	02008810 	.word	0x02008810
    6798:	02008890 	.word	0x02008890
    679c:	20008000 	.word	0x20008000

000067a0 <set_event_mask>:
{
    67a0:	b570      	push	{r4, r5, r6, lr}
    67a2:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    67a4:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    67a6:	79da      	ldrb	r2, [r3, #7]
    67a8:	7999      	ldrb	r1, [r3, #6]
    67aa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    67ae:	7958      	ldrb	r0, [r3, #5]
    67b0:	791a      	ldrb	r2, [r3, #4]
    67b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    67b6:	2400      	movs	r4, #0
    67b8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    67bc:	78d9      	ldrb	r1, [r3, #3]
    67be:	789a      	ldrb	r2, [r3, #2]
    67c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    67c4:	7859      	ldrb	r1, [r3, #1]
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    67cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    67d0:	ea44 0003 	orr.w	r0, r4, r3
    67d4:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    67d6:	4b04      	ldr	r3, [pc, #16]	; (67e8 <set_event_mask+0x48>)
    67d8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    67dc:	2101      	movs	r1, #1
    67de:	4630      	mov	r0, r6
    67e0:	f008 f89e 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    67e4:	7004      	strb	r4, [r0, #0]
    67e6:	bd70      	pop	{r4, r5, r6, pc}
    67e8:	2000bc00 	.word	0x2000bc00

000067ec <hci_vs_init>:
{
    67ec:	b510      	push	{r4, lr}
    67ee:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    67f0:	aa01      	add	r2, sp, #4
    67f2:	2100      	movs	r1, #0
    67f4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    67f8:	f7ff fd58 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    67fc:	b108      	cbz	r0, 6802 <hci_vs_init+0x16>
}
    67fe:	b002      	add	sp, #8
    6800:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    6802:	ac02      	add	r4, sp, #8
    6804:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    6808:	f015 fd34 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    680c:	4622      	mov	r2, r4
    680e:	2100      	movs	r1, #0
    6810:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6814:	f7ff fd4a 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6818:	2800      	cmp	r0, #0
    681a:	d1f0      	bne.n	67fe <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    6820:	2202      	movs	r2, #2
    6822:	3101      	adds	r1, #1
    6824:	480d      	ldr	r0, [pc, #52]	; (685c <hci_vs_init+0x70>)
    6826:	f7f9 fd4b 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    682a:	ac02      	add	r4, sp, #8
    682c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    6830:	f015 fd20 	bl	1c274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    6834:	4622      	mov	r2, r4
    6836:	2100      	movs	r1, #0
    6838:	f64f 4003 	movw	r0, #64515	; 0xfc03
    683c:	f7ff fd36 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6840:	2800      	cmp	r0, #0
    6842:	d1dc      	bne.n	67fe <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    6844:	9b01      	ldr	r3, [sp, #4]
    6846:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    6848:	2201      	movs	r2, #1
    684a:	4411      	add	r1, r2
    684c:	4804      	ldr	r0, [pc, #16]	; (6860 <hci_vs_init+0x74>)
    684e:	f7f9 fd37 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    6852:	9801      	ldr	r0, [sp, #4]
    6854:	f015 fd0e 	bl	1c274 <net_buf_unref>
    6858:	e7d1      	b.n	67fe <hci_vs_init+0x12>
    685a:	bf00      	nop
    685c:	2000b96f 	.word	0x2000b96f
    6860:	2000b96e 	.word	0x2000b96e

00006864 <set_random_address>:
{
    6864:	b570      	push	{r4, r5, r6, lr}
    6866:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    6868:	2206      	movs	r2, #6
    686a:	4914      	ldr	r1, [pc, #80]	; (68bc <set_random_address+0x58>)
    686c:	f025 fb72 	bl	2bf54 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    6870:	4604      	mov	r4, r0
    6872:	b908      	cbnz	r0, 6878 <set_random_address+0x14>
}
    6874:	4620      	mov	r0, r4
    6876:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    6878:	2106      	movs	r1, #6
    687a:	f242 0005 	movw	r0, #8197	; 0x2005
    687e:	f7ff fce9 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6882:	4604      	mov	r4, r0
    6884:	b1b8      	cbz	r0, 68b6 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    6886:	2206      	movs	r2, #6
    6888:	4629      	mov	r1, r5
    688a:	3008      	adds	r0, #8
    688c:	f015 fd44 	bl	1c318 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6890:	2200      	movs	r2, #0
    6892:	4621      	mov	r1, r4
    6894:	f242 0005 	movw	r0, #8197	; 0x2005
    6898:	f7ff fd08 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    689c:	4604      	mov	r4, r0
    689e:	2800      	cmp	r0, #0
    68a0:	d1e8      	bne.n	6874 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    68a2:	4e07      	ldr	r6, [pc, #28]	; (68c0 <set_random_address+0x5c>)
    68a4:	2206      	movs	r2, #6
    68a6:	4629      	mov	r1, r5
    68a8:	f106 0008 	add.w	r0, r6, #8
    68ac:	f7f9 fd08 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    68b0:	2301      	movs	r3, #1
    68b2:	71f3      	strb	r3, [r6, #7]
	return 0;
    68b4:	e7de      	b.n	6874 <set_random_address+0x10>
		return -ENOBUFS;
    68b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    68ba:	e7db      	b.n	6874 <set_random_address+0x10>
    68bc:	2000b918 	.word	0x2000b918
    68c0:	2000b910 	.word	0x2000b910

000068c4 <le_set_private_addr>:
{
    68c4:	b500      	push	{lr}
    68c6:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    68c8:	2106      	movs	r1, #6
    68ca:	4668      	mov	r0, sp
    68cc:	f00c f9a8 	bl	12c20 <bt_rand>
	if (err) {
    68d0:	4603      	mov	r3, r0
    68d2:	b118      	cbz	r0, 68dc <le_set_private_addr+0x18>
}
    68d4:	4618      	mov	r0, r3
    68d6:	b003      	add	sp, #12
    68d8:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    68dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    68e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68e4:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    68e8:	4668      	mov	r0, sp
    68ea:	f7ff ffbb 	bl	6864 <set_random_address>
    68ee:	4603      	mov	r3, r0
    68f0:	e7f0      	b.n	68d4 <le_set_private_addr+0x10>
	...

000068f4 <bt_hci_stop_scanning>:
{
    68f4:	b530      	push	{r4, r5, lr}
    68f6:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    68f8:	f3bf 8f5b 	dmb	ish
    68fc:	4b26      	ldr	r3, [pc, #152]	; (6998 <bt_hci_stop_scanning+0xa4>)
    68fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6900:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6904:	f013 0f80 	tst.w	r3, #128	; 0x80
    6908:	d03f      	beq.n	698a <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    690a:	2102      	movs	r1, #2
    690c:	f242 000c 	movw	r0, #8204	; 0x200c
    6910:	f7ff fca0 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6914:	4604      	mov	r4, r0
    6916:	2800      	cmp	r0, #0
    6918:	d03a      	beq.n	6990 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    691a:	2102      	movs	r1, #2
    691c:	3008      	adds	r0, #8
    691e:	f015 fcf5 	bl	1c30c <net_buf_simple_add>
    6922:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    6924:	2202      	movs	r2, #2
    6926:	2100      	movs	r1, #0
    6928:	f025 fba8 	bl	2c07c <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    692c:	2300      	movs	r3, #0
    692e:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    6930:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    6932:	aa01      	add	r2, sp, #4
    6934:	4621      	mov	r1, r4
    6936:	f242 000c 	movw	r0, #8204	; 0x200c
    693a:	f7ff fcb7 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    693e:	4604      	mov	r4, r0
    6940:	b930      	cbnz	r0, 6950 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    6942:	9b01      	ldr	r3, [sp, #4]
    6944:	689b      	ldr	r3, [r3, #8]
    6946:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    6948:	b12c      	cbz	r4, 6956 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    694a:	9801      	ldr	r0, [sp, #4]
    694c:	f015 fc92 	bl	1c274 <net_buf_unref>
}
    6950:	4620      	mov	r0, r4
    6952:	b003      	add	sp, #12
    6954:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6956:	4b11      	ldr	r3, [pc, #68]	; (699c <bt_hci_stop_scanning+0xa8>)
    6958:	f3bf 8f5b 	dmb	ish
    695c:	e853 2f00 	ldrex	r2, [r3]
    6960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6964:	e843 2100 	strex	r1, r2, [r3]
    6968:	2900      	cmp	r1, #0
    696a:	d1f7      	bne.n	695c <bt_hci_stop_scanning+0x68>
    696c:	f3bf 8f5b 	dmb	ish
    6970:	f3bf 8f5b 	dmb	ish
    6974:	e853 2f00 	ldrex	r2, [r3]
    6978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    697c:	e843 2100 	strex	r1, r2, [r3]
    6980:	2900      	cmp	r1, #0
    6982:	d1f7      	bne.n	6974 <bt_hci_stop_scanning+0x80>
    6984:	f3bf 8f5b 	dmb	ish
    6988:	e7df      	b.n	694a <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    698a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    698e:	e7df      	b.n	6950 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    6990:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6994:	e7dc      	b.n	6950 <bt_hci_stop_scanning+0x5c>
    6996:	bf00      	nop
    6998:	2000b910 	.word	0x2000b910
    699c:	2000b980 	.word	0x2000b980

000069a0 <set_advertise_enable>:
{
    69a0:	b538      	push	{r3, r4, r5, lr}
    69a2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    69a4:	2101      	movs	r1, #1
    69a6:	f242 000a 	movw	r0, #8202	; 0x200a
    69aa:	f7ff fc53 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    69ae:	b380      	cbz	r0, 6a12 <set_advertise_enable+0x72>
    69b0:	4604      	mov	r4, r0
	if (enable) {
    69b2:	b1dd      	cbz	r5, 69ec <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    69b4:	2101      	movs	r1, #1
    69b6:	3008      	adds	r0, #8
    69b8:	f015 fcb9 	bl	1c32e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    69bc:	2200      	movs	r2, #0
    69be:	4621      	mov	r1, r4
    69c0:	f242 000a 	movw	r0, #8202	; 0x200a
    69c4:	f7ff fc72 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    69c8:	4603      	mov	r3, r0
    69ca:	b968      	cbnz	r0, 69e8 <set_advertise_enable+0x48>
	if (enable) {
    69cc:	b99d      	cbnz	r5, 69f6 <set_advertise_enable+0x56>
    69ce:	4a12      	ldr	r2, [pc, #72]	; (6a18 <set_advertise_enable+0x78>)
    69d0:	f3bf 8f5b 	dmb	ish
    69d4:	e852 1f00 	ldrex	r1, [r2]
    69d8:	f021 0120 	bic.w	r1, r1, #32
    69dc:	e842 1000 	strex	r0, r1, [r2]
    69e0:	2800      	cmp	r0, #0
    69e2:	d1f7      	bne.n	69d4 <set_advertise_enable+0x34>
    69e4:	f3bf 8f5b 	dmb	ish
}
    69e8:	4618      	mov	r0, r3
    69ea:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    69ec:	2100      	movs	r1, #0
    69ee:	3008      	adds	r0, #8
    69f0:	f015 fc9d 	bl	1c32e <net_buf_simple_add_u8>
    69f4:	e7e2      	b.n	69bc <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    69f6:	4a08      	ldr	r2, [pc, #32]	; (6a18 <set_advertise_enable+0x78>)
    69f8:	f3bf 8f5b 	dmb	ish
    69fc:	e852 1f00 	ldrex	r1, [r2]
    6a00:	f041 0120 	orr.w	r1, r1, #32
    6a04:	e842 1000 	strex	r0, r1, [r2]
    6a08:	2800      	cmp	r0, #0
    6a0a:	d1f7      	bne.n	69fc <set_advertise_enable+0x5c>
    6a0c:	f3bf 8f5b 	dmb	ish
    6a10:	e7ea      	b.n	69e8 <set_advertise_enable+0x48>
		return -ENOBUFS;
    6a12:	f06f 0368 	mvn.w	r3, #104	; 0x68
    6a16:	e7e7      	b.n	69e8 <set_advertise_enable+0x48>
    6a18:	2000b980 	.word	0x2000b980

00006a1c <hci_le_create_conn>:
{
    6a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a1e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    6a20:	2119      	movs	r1, #25
    6a22:	f242 000d 	movw	r0, #8205	; 0x200d
    6a26:	f7ff fc15 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6a2a:	b378      	cbz	r0, 6a8c <hci_le_create_conn+0x70>
    6a2c:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6a2e:	2119      	movs	r1, #25
    6a30:	3008      	adds	r0, #8
    6a32:	f015 fc6b 	bl	1c30c <net_buf_simple_add>
    6a36:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    6a38:	2219      	movs	r2, #25
    6a3a:	2100      	movs	r1, #0
    6a3c:	f025 fb1e 	bl	2c07c <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    6a40:	2600      	movs	r6, #0
    6a42:	2360      	movs	r3, #96	; 0x60
    6a44:	7023      	strb	r3, [r4, #0]
    6a46:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    6a48:	70a3      	strb	r3, [r4, #2]
    6a4a:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6a4c:	2207      	movs	r2, #7
    6a4e:	f105 0156 	add.w	r1, r5, #86	; 0x56
    6a52:	1d60      	adds	r0, r4, #5
    6a54:	f7f9 fc34 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    6a58:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    6a5c:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    6a5e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    6a62:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    6a66:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    6a6a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    6a6e:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    6a72:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    6a76:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6a7a:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    6a7e:	4632      	mov	r2, r6
    6a80:	4639      	mov	r1, r7
    6a82:	f242 000d 	movw	r0, #8205	; 0x200d
    6a86:	f7ff fc11 	bl	62ac <bt_hci_cmd_send_sync>
    6a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6a8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006a92 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    6a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a96:	4682      	mov	sl, r0
    6a98:	460f      	mov	r7, r1
    6a9a:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6a9c:	2120      	movs	r1, #32
    6a9e:	f7ff fbd9 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6aa2:	2800      	cmp	r0, #0
    6aa4:	d03c      	beq.n	6b20 <set_ad+0x8e>
    6aa6:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    6aa8:	2120      	movs	r1, #32
    6aaa:	3008      	adds	r0, #8
    6aac:	f015 fc2e 	bl	1c30c <net_buf_simple_add>
    6ab0:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    6ab2:	2220      	movs	r2, #32
    6ab4:	2100      	movs	r1, #0
    6ab6:	f025 fae1 	bl	2c07c <memset>

	for (i = 0; i < ad_len; i++) {
    6aba:	2600      	movs	r6, #0
    6abc:	4546      	cmp	r6, r8
    6abe:	d228      	bcs.n	6b12 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    6ac0:	7822      	ldrb	r2, [r4, #0]
    6ac2:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    6ac6:	786b      	ldrb	r3, [r5, #1]
    6ac8:	4413      	add	r3, r2
    6aca:	3302      	adds	r3, #2
    6acc:	2b1f      	cmp	r3, #31
    6ace:	dc19      	bgt.n	6b04 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    6ad0:	1c53      	adds	r3, r2, #1
    6ad2:	b2db      	uxtb	r3, r3
    6ad4:	7023      	strb	r3, [r4, #0]
    6ad6:	7869      	ldrb	r1, [r5, #1]
    6ad8:	3101      	adds	r1, #1
    6ada:	4422      	add	r2, r4
    6adc:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    6ade:	1c58      	adds	r0, r3, #1
    6ae0:	b2c0      	uxtb	r0, r0
    6ae2:	7020      	strb	r0, [r4, #0]
    6ae4:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    6ae8:	4423      	add	r3, r4
    6aea:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    6aec:	4420      	add	r0, r4
    6aee:	786a      	ldrb	r2, [r5, #1]
    6af0:	6869      	ldr	r1, [r5, #4]
    6af2:	3001      	adds	r0, #1
    6af4:	f7f9 fbe4 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    6af8:	786b      	ldrb	r3, [r5, #1]
    6afa:	7822      	ldrb	r2, [r4, #0]
    6afc:	4413      	add	r3, r2
    6afe:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    6b00:	3601      	adds	r6, #1
    6b02:	e7db      	b.n	6abc <set_ad+0x2a>
			net_buf_unref(buf);
    6b04:	4648      	mov	r0, r9
    6b06:	f015 fbb5 	bl	1c274 <net_buf_unref>
			return -EINVAL;
    6b0a:	f06f 0015 	mvn.w	r0, #21
    6b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    6b12:	2200      	movs	r2, #0
    6b14:	4649      	mov	r1, r9
    6b16:	4650      	mov	r0, sl
    6b18:	f7ff fbc8 	bl	62ac <bt_hci_cmd_send_sync>
    6b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    6b20:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006b28 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    6b28:	8802      	ldrh	r2, [r0, #0]
    6b2a:	8843      	ldrh	r3, [r0, #2]
    6b2c:	429a      	cmp	r2, r3
    6b2e:	d81a      	bhi.n	6b66 <bt_le_conn_params_valid+0x3e>
    6b30:	2a05      	cmp	r2, #5
    6b32:	d91a      	bls.n	6b6a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    6b34:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6b38:	d819      	bhi.n	6b6e <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    6b3a:	8881      	ldrh	r1, [r0, #4]
    6b3c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    6b40:	d217      	bcs.n	6b72 <bt_le_conn_params_valid+0x4a>
{
    6b42:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    6b44:	88c0      	ldrh	r0, [r0, #6]
    6b46:	f1a0 020a 	sub.w	r2, r0, #10
    6b4a:	b292      	uxth	r2, r2
    6b4c:	f640 4476 	movw	r4, #3190	; 0xc76
    6b50:	42a2      	cmp	r2, r4
    6b52:	d810      	bhi.n	6b76 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    6b54:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    6b58:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    6b5c:	da01      	bge.n	6b62 <bt_le_conn_params_valid+0x3a>
	return true;
    6b5e:	2001      	movs	r0, #1
    6b60:	e00a      	b.n	6b78 <bt_le_conn_params_valid+0x50>
		return false;
    6b62:	2000      	movs	r0, #0
    6b64:	e008      	b.n	6b78 <bt_le_conn_params_valid+0x50>
		return false;
    6b66:	2000      	movs	r0, #0
    6b68:	4770      	bx	lr
    6b6a:	2000      	movs	r0, #0
    6b6c:	4770      	bx	lr
    6b6e:	2000      	movs	r0, #0
    6b70:	4770      	bx	lr
		return false;
    6b72:	2000      	movs	r0, #0
    6b74:	4770      	bx	lr
		return false;
    6b76:	2000      	movs	r0, #0
}
    6b78:	bc10      	pop	{r4}
    6b7a:	4770      	bx	lr

00006b7c <bt_addr_le_create_static>:
{
    6b7c:	b510      	push	{r4, lr}
    6b7e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    6b80:	2301      	movs	r3, #1
    6b82:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    6b86:	2106      	movs	r1, #6
    6b88:	f00c f84a 	bl	12c20 <bt_rand>
	if (err) {
    6b8c:	4602      	mov	r2, r0
    6b8e:	b918      	cbnz	r0, 6b98 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    6b90:	79a3      	ldrb	r3, [r4, #6]
    6b92:	f063 033f 	orn	r3, r3, #63	; 0x3f
    6b96:	71a3      	strb	r3, [r4, #6]
}
    6b98:	4610      	mov	r0, r2
    6b9a:	bd10      	pop	{r4, pc}

00006b9c <set_static_addr>:
{
    6b9c:	b510      	push	{r4, lr}
    6b9e:	b082      	sub	sp, #8
	if (bt_storage) {
    6ba0:	4b2e      	ldr	r3, [pc, #184]	; (6c5c <set_static_addr+0xc0>)
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	b13b      	cbz	r3, 6bb6 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    6ba6:	681c      	ldr	r4, [r3, #0]
    6ba8:	2307      	movs	r3, #7
    6baa:	4a2d      	ldr	r2, [pc, #180]	; (6c60 <set_static_addr+0xc4>)
    6bac:	2100      	movs	r1, #0
    6bae:	4608      	mov	r0, r1
    6bb0:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    6bb2:	2807      	cmp	r0, #7
    6bb4:	d02c      	beq.n	6c10 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    6bb6:	4b2a      	ldr	r3, [pc, #168]	; (6c60 <set_static_addr+0xc4>)
    6bb8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    6bbc:	f013 0f01 	tst.w	r3, #1
    6bc0:	d018      	beq.n	6bf4 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    6bc2:	aa01      	add	r2, sp, #4
    6bc4:	2100      	movs	r1, #0
    6bc6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6bca:	f7ff fb6f 	bl	62ac <bt_hci_cmd_send_sync>
		if (err) {
    6bce:	b988      	cbnz	r0, 6bf4 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    6bd0:	9801      	ldr	r0, [sp, #4]
    6bd2:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    6bd4:	784b      	ldrb	r3, [r1, #1]
    6bd6:	b15b      	cbz	r3, 6bf0 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    6bd8:	4821      	ldr	r0, [pc, #132]	; (6c60 <set_static_addr+0xc4>)
    6bda:	2301      	movs	r3, #1
    6bdc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    6be0:	2206      	movs	r2, #6
    6be2:	3102      	adds	r1, #2
    6be4:	f7f9 fb6c 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    6be8:	9801      	ldr	r0, [sp, #4]
    6bea:	f015 fb43 	bl	1c274 <net_buf_unref>
    6bee:	e00f      	b.n	6c10 <set_static_addr+0x74>
		net_buf_unref(rsp);
    6bf0:	f015 fb40 	bl	1c274 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    6bf4:	481a      	ldr	r0, [pc, #104]	; (6c60 <set_static_addr+0xc4>)
    6bf6:	f7ff ffc1 	bl	6b7c <bt_addr_le_create_static>
	if (err) {
    6bfa:	4603      	mov	r3, r0
    6bfc:	b9b8      	cbnz	r0, 6c2e <set_static_addr+0x92>
	if (bt_storage) {
    6bfe:	4b17      	ldr	r3, [pc, #92]	; (6c5c <set_static_addr+0xc0>)
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	b12b      	cbz	r3, 6c10 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    6c04:	685c      	ldr	r4, [r3, #4]
    6c06:	2307      	movs	r3, #7
    6c08:	4a15      	ldr	r2, [pc, #84]	; (6c60 <set_static_addr+0xc4>)
    6c0a:	2100      	movs	r1, #0
    6c0c:	4608      	mov	r0, r1
    6c0e:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    6c10:	4b13      	ldr	r3, [pc, #76]	; (6c60 <set_static_addr+0xc4>)
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	2b01      	cmp	r3, #1
    6c16:	d11b      	bne.n	6c50 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    6c18:	4b11      	ldr	r3, [pc, #68]	; (6c60 <set_static_addr+0xc4>)
    6c1a:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    6c1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6c20:	2bc0      	cmp	r3, #192	; 0xc0
    6c22:	d118      	bne.n	6c56 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    6c24:	480f      	ldr	r0, [pc, #60]	; (6c64 <set_static_addr+0xc8>)
    6c26:	f7ff fe1d 	bl	6864 <set_random_address>
	if (err) {
    6c2a:	4603      	mov	r3, r0
    6c2c:	b110      	cbz	r0, 6c34 <set_static_addr+0x98>
}
    6c2e:	4618      	mov	r0, r3
    6c30:	b002      	add	sp, #8
    6c32:	bd10      	pop	{r4, pc}
    6c34:	4a0c      	ldr	r2, [pc, #48]	; (6c68 <set_static_addr+0xcc>)
    6c36:	f3bf 8f5b 	dmb	ish
    6c3a:	e852 1f00 	ldrex	r1, [r2]
    6c3e:	f041 0104 	orr.w	r1, r1, #4
    6c42:	e842 1000 	strex	r0, r1, [r2]
    6c46:	2800      	cmp	r0, #0
    6c48:	d1f7      	bne.n	6c3a <set_static_addr+0x9e>
    6c4a:	f3bf 8f5b 	dmb	ish
	return 0;
    6c4e:	e7ee      	b.n	6c2e <set_static_addr+0x92>
		return -EINVAL;
    6c50:	f06f 0315 	mvn.w	r3, #21
    6c54:	e7eb      	b.n	6c2e <set_static_addr+0x92>
    6c56:	f06f 0315 	mvn.w	r3, #21
    6c5a:	e7e8      	b.n	6c2e <set_static_addr+0x92>
    6c5c:	20002a4c 	.word	0x20002a4c
    6c60:	2000b910 	.word	0x2000b910
    6c64:	2000b911 	.word	0x2000b911
    6c68:	2000b980 	.word	0x2000b980

00006c6c <hci_init>:
{
    6c6c:	b510      	push	{r4, lr}
    6c6e:	b084      	sub	sp, #16
	err = common_init();
    6c70:	f7ff fb5c 	bl	632c <common_init>
	if (err) {
    6c74:	4604      	mov	r4, r0
    6c76:	b110      	cbz	r0, 6c7e <hci_init+0x12>
}
    6c78:	4620      	mov	r0, r4
    6c7a:	b004      	add	sp, #16
    6c7c:	bd10      	pop	{r4, pc}
	err = le_init();
    6c7e:	f7ff fc9b 	bl	65b8 <le_init>
	if (err) {
    6c82:	4604      	mov	r4, r0
    6c84:	2800      	cmp	r0, #0
    6c86:	d1f7      	bne.n	6c78 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6c88:	4b17      	ldr	r3, [pc, #92]	; (6ce8 <hci_init+0x7c>)
    6c8a:	7e9b      	ldrb	r3, [r3, #26]
    6c8c:	f013 0f20 	tst.w	r3, #32
    6c90:	d104      	bne.n	6c9c <hci_init+0x30>
		err = br_init();
    6c92:	f7ff fd2d 	bl	66f0 <br_init>
		if (err) {
    6c96:	4604      	mov	r4, r0
    6c98:	2800      	cmp	r0, #0
    6c9a:	d1ed      	bne.n	6c78 <hci_init+0xc>
	err = set_event_mask();
    6c9c:	f7ff fd44 	bl	6728 <set_event_mask>
	if (err) {
    6ca0:	4604      	mov	r4, r0
    6ca2:	2800      	cmp	r0, #0
    6ca4:	d1e8      	bne.n	6c78 <hci_init+0xc>
	hci_vs_init();
    6ca6:	f7ff fda1 	bl	67ec <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    6caa:	2300      	movs	r3, #0
    6cac:	9300      	str	r3, [sp, #0]
    6cae:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    6cb2:	2207      	movs	r2, #7
    6cb4:	4669      	mov	r1, sp
    6cb6:	480c      	ldr	r0, [pc, #48]	; (6ce8 <hci_init+0x7c>)
    6cb8:	f025 f94c 	bl	2bf54 <memcmp>
    6cbc:	b178      	cbz	r0, 6cde <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    6cbe:	4b0b      	ldr	r3, [pc, #44]	; (6cec <hci_init+0x80>)
    6cc0:	e893 0003 	ldmia.w	r3, {r0, r1}
    6cc4:	9002      	str	r0, [sp, #8]
    6cc6:	f8ad 100c 	strh.w	r1, [sp, #12]
    6cca:	0c09      	lsrs	r1, r1, #16
    6ccc:	f88d 100e 	strb.w	r1, [sp, #14]
    6cd0:	2207      	movs	r2, #7
    6cd2:	a902      	add	r1, sp, #8
    6cd4:	4804      	ldr	r0, [pc, #16]	; (6ce8 <hci_init+0x7c>)
    6cd6:	f025 f93d 	bl	2bf54 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    6cda:	2800      	cmp	r0, #0
    6cdc:	d1cc      	bne.n	6c78 <hci_init+0xc>
		err = set_static_addr();
    6cde:	f7ff ff5d 	bl	6b9c <set_static_addr>
    6ce2:	4604      	mov	r4, r0
    6ce4:	e7c8      	b.n	6c78 <hci_init+0xc>
    6ce6:	bf00      	nop
    6ce8:	2000b910 	.word	0x2000b910
    6cec:	0002fe98 	.word	0x0002fe98

00006cf0 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    6cf0:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    6cf2:	2100      	movs	r1, #0
    6cf4:	4608      	mov	r0, r1
    6cf6:	f007 ffb1 	bl	ec5c <reset>
    6cfa:	bd08      	pop	{r3, pc}

00006cfc <bt_send>:
{
    6cfc:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    6cfe:	4b03      	ldr	r3, [pc, #12]	; (6d0c <bt_send+0x10>)
    6d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    6d04:	68db      	ldr	r3, [r3, #12]
    6d06:	4798      	blx	r3
}
    6d08:	bd08      	pop	{r3, pc}
    6d0a:	bf00      	nop
    6d0c:	2000b910 	.word	0x2000b910

00006d10 <bt_hci_cmd_send>:
{
    6d10:	b538      	push	{r3, r4, r5, lr}
    6d12:	4605      	mov	r5, r0
	if (!buf) {
    6d14:	460c      	mov	r4, r1
    6d16:	b151      	cbz	r1, 6d2e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6d18:	f640 4335 	movw	r3, #3125	; 0xc35
    6d1c:	429d      	cmp	r5, r3
    6d1e:	d00e      	beq.n	6d3e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6d20:	4621      	mov	r1, r4
    6d22:	480c      	ldr	r0, [pc, #48]	; (6d54 <bt_hci_cmd_send+0x44>)
    6d24:	f015 fa98 	bl	1c258 <net_buf_put>
	return 0;
    6d28:	2500      	movs	r5, #0
}
    6d2a:	4628      	mov	r0, r5
    6d2c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    6d2e:	f7ff fa91 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    6d32:	4604      	mov	r4, r0
    6d34:	2800      	cmp	r0, #0
    6d36:	d1ef      	bne.n	6d18 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    6d38:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6d3c:	e7f5      	b.n	6d2a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    6d3e:	4620      	mov	r0, r4
    6d40:	f7ff ffdc 	bl	6cfc <bt_send>
		if (err) {
    6d44:	4605      	mov	r5, r0
    6d46:	2800      	cmp	r0, #0
    6d48:	d0ef      	beq.n	6d2a <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    6d4a:	4620      	mov	r0, r4
    6d4c:	f015 fa92 	bl	1c274 <net_buf_unref>
    6d50:	e7eb      	b.n	6d2a <bt_hci_cmd_send+0x1a>
    6d52:	bf00      	nop
    6d54:	2000b9e4 	.word	0x2000b9e4

00006d58 <start_le_scan>:
{
    6d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6d5c:	b083      	sub	sp, #12
    6d5e:	4606      	mov	r6, r0
    6d60:	4689      	mov	r9, r1
    6d62:	4615      	mov	r5, r2
    6d64:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    6d66:	2107      	movs	r1, #7
    6d68:	f242 000b 	movw	r0, #8203	; 0x200b
    6d6c:	f7ff fa72 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6d70:	2800      	cmp	r0, #0
    6d72:	d072      	beq.n	6e5a <start_le_scan+0x102>
    6d74:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    6d76:	2107      	movs	r1, #7
    6d78:	3008      	adds	r0, #8
    6d7a:	f015 fac7 	bl	1c30c <net_buf_simple_add>
    6d7e:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    6d80:	2207      	movs	r2, #7
    6d82:	2100      	movs	r1, #0
    6d84:	f025 f97a 	bl	2c07c <memset>
	set_param->scan_type = scan_type;
    6d88:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    6d8a:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    6d8e:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    6d92:	2300      	movs	r3, #0
    6d94:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    6d96:	4b34      	ldr	r3, [pc, #208]	; (6e68 <start_le_scan+0x110>)
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    6d9c:	2e01      	cmp	r6, #1
    6d9e:	d02c      	beq.n	6dfa <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    6da0:	4639      	mov	r1, r7
    6da2:	f242 000b 	movw	r0, #8203	; 0x200b
    6da6:	f7ff ffb3 	bl	6d10 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    6daa:	2102      	movs	r1, #2
    6dac:	f242 000c 	movw	r0, #8204	; 0x200c
    6db0:	f7ff fa50 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    6db4:	4604      	mov	r4, r0
    6db6:	2800      	cmp	r0, #0
    6db8:	d052      	beq.n	6e60 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    6dba:	2102      	movs	r1, #2
    6dbc:	3008      	adds	r0, #8
    6dbe:	f015 faa5 	bl	1c30c <net_buf_simple_add>
    6dc2:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    6dc4:	2202      	movs	r2, #2
    6dc6:	2100      	movs	r1, #0
    6dc8:	f025 f958 	bl	2c07c <memset>
	scan_enable->filter_dup = filter_dup;
    6dcc:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    6dd0:	2301      	movs	r3, #1
    6dd2:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    6dd4:	aa01      	add	r2, sp, #4
    6dd6:	4621      	mov	r1, r4
    6dd8:	f242 000c 	movw	r0, #8204	; 0x200c
    6ddc:	f7ff fa66 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    6de0:	4605      	mov	r5, r0
    6de2:	b930      	cbnz	r0, 6df2 <start_le_scan+0x9a>
	err = rsp->data[0];
    6de4:	9b01      	ldr	r3, [sp, #4]
    6de6:	689b      	ldr	r3, [r3, #8]
    6de8:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    6dea:	b1d5      	cbz	r5, 6e22 <start_le_scan+0xca>
	net_buf_unref(rsp);
    6dec:	9801      	ldr	r0, [sp, #4]
    6dee:	f015 fa41 	bl	1c274 <net_buf_unref>
}
    6df2:	4628      	mov	r0, r5
    6df4:	b003      	add	sp, #12
    6df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6dfa:	f3bf 8f5b 	dmb	ish
    6dfe:	4b1a      	ldr	r3, [pc, #104]	; (6e68 <start_le_scan+0x110>)
    6e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6e02:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    6e06:	f013 0f20 	tst.w	r3, #32
    6e0a:	d1c9      	bne.n	6da0 <start_le_scan+0x48>
			err = le_set_private_addr();
    6e0c:	f7ff fd5a 	bl	68c4 <le_set_private_addr>
			if (err) {
    6e10:	4605      	mov	r5, r0
    6e12:	b910      	cbnz	r0, 6e1a <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    6e14:	2301      	movs	r3, #1
    6e16:	7163      	strb	r3, [r4, #5]
    6e18:	e7c2      	b.n	6da0 <start_le_scan+0x48>
				net_buf_unref(buf);
    6e1a:	4638      	mov	r0, r7
    6e1c:	f015 fa2a 	bl	1c274 <net_buf_unref>
				return err;
    6e20:	e7e7      	b.n	6df2 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e22:	4b12      	ldr	r3, [pc, #72]	; (6e6c <start_le_scan+0x114>)
    6e24:	f3bf 8f5b 	dmb	ish
    6e28:	e853 2f00 	ldrex	r2, [r3]
    6e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6e30:	e843 2100 	strex	r1, r2, [r3]
    6e34:	2900      	cmp	r1, #0
    6e36:	d1f7      	bne.n	6e28 <start_le_scan+0xd0>
    6e38:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    6e3c:	2e01      	cmp	r6, #1
    6e3e:	d1d5      	bne.n	6dec <start_le_scan+0x94>
    6e40:	f3bf 8f5b 	dmb	ish
    6e44:	e853 2f00 	ldrex	r2, [r3]
    6e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    6e4c:	e843 2100 	strex	r1, r2, [r3]
    6e50:	2900      	cmp	r1, #0
    6e52:	d1f7      	bne.n	6e44 <start_le_scan+0xec>
    6e54:	f3bf 8f5b 	dmb	ish
    6e58:	e7c8      	b.n	6dec <start_le_scan+0x94>
		return -ENOBUFS;
    6e5a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6e5e:	e7c8      	b.n	6df2 <start_le_scan+0x9a>
		return -ENOBUFS;
    6e60:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6e64:	e7c5      	b.n	6df2 <start_le_scan+0x9a>
    6e66:	bf00      	nop
    6e68:	2000b910 	.word	0x2000b910
    6e6c:	2000b980 	.word	0x2000b980

00006e70 <bt_le_scan_update>:
{
    6e70:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e72:	f3bf 8f5b 	dmb	ish
    6e76:	4b17      	ldr	r3, [pc, #92]	; (6ed4 <bt_le_scan_update+0x64>)
    6e78:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    6e7a:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6e7e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6e82:	b114      	cbz	r4, 6e8a <bt_le_scan_update+0x1a>
		return 0;
    6e84:	2300      	movs	r3, #0
}
    6e86:	4618      	mov	r0, r3
    6e88:	bd38      	pop	{r3, r4, r5, pc}
    6e8a:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e8c:	f3bf 8f5b 	dmb	ish
    6e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6e92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6e96:	f013 0f80 	tst.w	r3, #128	; 0x80
    6e9a:	d004      	beq.n	6ea6 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    6e9c:	f7ff fd2a 	bl	68f4 <bt_hci_stop_scanning>
		if (err) {
    6ea0:	4603      	mov	r3, r0
    6ea2:	2800      	cmp	r0, #0
    6ea4:	d1ef      	bne.n	6e86 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    6ea6:	2101      	movs	r1, #1
    6ea8:	2000      	movs	r0, #0
    6eaa:	f001 fcd9 	bl	8860 <bt_conn_lookup_state_le>
		if (!conn) {
    6eae:	b170      	cbz	r0, 6ece <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    6eb0:	f001 fd08 	bl	88c4 <bt_conn_unref>
		if (fast_scan) {
    6eb4:	b13d      	cbz	r5, 6ec6 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    6eb6:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    6eb8:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    6eba:	2301      	movs	r3, #1
    6ebc:	2000      	movs	r0, #0
    6ebe:	f7ff ff4b 	bl	6d58 <start_le_scan>
    6ec2:	4603      	mov	r3, r0
    6ec4:	e7df      	b.n	6e86 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    6ec6:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    6ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6ecc:	e7f5      	b.n	6eba <bt_le_scan_update+0x4a>
			return 0;
    6ece:	4623      	mov	r3, r4
    6ed0:	e7d9      	b.n	6e86 <bt_le_scan_update+0x16>
    6ed2:	bf00      	nop
    6ed4:	2000b910 	.word	0x2000b910

00006ed8 <bt_init>:
{
    6ed8:	b510      	push	{r4, lr}
	err = hci_init();
    6eda:	f7ff fec7 	bl	6c6c <hci_init>
	if (err) {
    6ede:	4604      	mov	r4, r0
    6ee0:	b108      	cbz	r0, 6ee6 <bt_init+0xe>
}
    6ee2:	4620      	mov	r0, r4
    6ee4:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    6ee6:	f002 f83b 	bl	8f60 <bt_conn_init>
		if (err) {
    6eea:	4604      	mov	r4, r0
    6eec:	2800      	cmp	r0, #0
    6eee:	d1f8      	bne.n	6ee2 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6ef0:	4b07      	ldr	r3, [pc, #28]	; (6f10 <bt_init+0x38>)
    6ef2:	f3bf 8f5b 	dmb	ish
    6ef6:	e853 2f00 	ldrex	r2, [r3]
    6efa:	f042 0202 	orr.w	r2, r2, #2
    6efe:	e843 2100 	strex	r1, r2, [r3]
    6f02:	2900      	cmp	r1, #0
    6f04:	d1f7      	bne.n	6ef6 <bt_init+0x1e>
    6f06:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    6f0a:	f7ff ffb1 	bl	6e70 <bt_le_scan_update>
	return 0;
    6f0e:	e7e8      	b.n	6ee2 <bt_init+0xa>
    6f10:	2000b980 	.word	0x2000b980

00006f14 <init_work>:
{
    6f14:	b508      	push	{r3, lr}
	err = bt_init();
    6f16:	f7ff ffdf 	bl	6ed8 <bt_init>
	if (ready_cb) {
    6f1a:	4b02      	ldr	r3, [pc, #8]	; (6f24 <init_work+0x10>)
    6f1c:	681b      	ldr	r3, [r3, #0]
    6f1e:	b103      	cbz	r3, 6f22 <init_work+0xe>
		ready_cb(err);
    6f20:	4798      	blx	r3
    6f22:	bd08      	pop	{r3, pc}
    6f24:	200003b0 	.word	0x200003b0

00006f28 <hci_disconn_complete>:
{
    6f28:	b530      	push	{r4, r5, lr}
    6f2a:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    6f2c:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    6f2e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    6f32:	7823      	ldrb	r3, [r4, #0]
    6f34:	b10b      	cbz	r3, 6f3a <hci_disconn_complete+0x12>
}
    6f36:	b005      	add	sp, #20
    6f38:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    6f3a:	f001 fc3f 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    6f3e:	4605      	mov	r5, r0
    6f40:	2800      	cmp	r0, #0
    6f42:	d034      	beq.n	6fae <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    6f44:	78e3      	ldrb	r3, [r4, #3]
    6f46:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    6f48:	f022 fc00 	bl	2974c <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    6f4c:	2200      	movs	r2, #0
	size_t unused = 0;
    6f4e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    6f50:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    6f54:	d206      	bcs.n	6f64 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    6f56:	4927      	ldr	r1, [pc, #156]	; (6ff4 <hci_disconn_complete+0xcc>)
    6f58:	5c89      	ldrb	r1, [r1, r2]
    6f5a:	29aa      	cmp	r1, #170	; 0xaa
    6f5c:	d102      	bne.n	6f64 <hci_disconn_complete+0x3c>
			unused++;
    6f5e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    6f60:	3201      	adds	r2, #1
    6f62:	e7f5      	b.n	6f50 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    6f64:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    6f68:	2264      	movs	r2, #100	; 0x64
    6f6a:	fb02 f201 	mul.w	r2, r2, r1
    6f6e:	4822      	ldr	r0, [pc, #136]	; (6ff8 <hci_disconn_complete+0xd0>)
    6f70:	fba0 0202 	umull	r0, r2, r0, r2
    6f74:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    6f76:	9202      	str	r2, [sp, #8]
    6f78:	f44f 7220 	mov.w	r2, #640	; 0x280
    6f7c:	9201      	str	r2, [sp, #4]
    6f7e:	9100      	str	r1, [sp, #0]
    6f80:	491e      	ldr	r1, [pc, #120]	; (6ffc <hci_disconn_complete+0xd4>)
    6f82:	481f      	ldr	r0, [pc, #124]	; (7000 <hci_disconn_complete+0xd8>)
    6f84:	f7fc f904 	bl	3190 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6f88:	2100      	movs	r1, #0
    6f8a:	4628      	mov	r0, r5
    6f8c:	f001 fd28 	bl	89e0 <bt_conn_set_state>
	conn->handle = 0;
    6f90:	2300      	movs	r3, #0
    6f92:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    6f94:	78ab      	ldrb	r3, [r5, #2]
    6f96:	bb03      	cbnz	r3, 6fda <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f98:	f3bf 8f5b 	dmb	ish
    6f9c:	686b      	ldr	r3, [r5, #4]
    6f9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    6fa2:	f013 0f01 	tst.w	r3, #1
    6fa6:	d11c      	bne.n	6fe2 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    6fa8:	4628      	mov	r0, r5
    6faa:	f001 fc8b 	bl	88c4 <bt_conn_unref>
    6fae:	f3bf 8f5b 	dmb	ish
    6fb2:	4b14      	ldr	r3, [pc, #80]	; (7004 <hci_disconn_complete+0xdc>)
    6fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6fb6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    6fba:	f013 0f40 	tst.w	r3, #64	; 0x40
    6fbe:	d0ba      	beq.n	6f36 <hci_disconn_complete+0xe>
    6fc0:	f3bf 8f5b 	dmb	ish
    6fc4:	4b0f      	ldr	r3, [pc, #60]	; (7004 <hci_disconn_complete+0xdc>)
    6fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6fc8:	f3bf 8f5b 	dmb	ish
    6fcc:	f013 0f20 	tst.w	r3, #32
    6fd0:	d1b1      	bne.n	6f36 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    6fd2:	2001      	movs	r0, #1
    6fd4:	f7ff fce4 	bl	69a0 <set_advertise_enable>
    6fd8:	e7ad      	b.n	6f36 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    6fda:	4628      	mov	r0, r5
    6fdc:	f001 fc72 	bl	88c4 <bt_conn_unref>
		return;
    6fe0:	e7a9      	b.n	6f36 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6fe2:	2101      	movs	r1, #1
    6fe4:	4628      	mov	r0, r5
    6fe6:	f001 fcfb 	bl	89e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    6fea:	2000      	movs	r0, #0
    6fec:	f7ff ff40 	bl	6e70 <bt_le_scan_update>
    6ff0:	e7da      	b.n	6fa8 <hci_disconn_complete+0x80>
    6ff2:	bf00      	nop
    6ff4:	20003ca0 	.word	0x20003ca0
    6ff8:	cccccccd 	.word	0xcccccccd
    6ffc:	00032fb4 	.word	0x00032fb4
    7000:	00032fc0 	.word	0x00032fc0
    7004:	2000b910 	.word	0x2000b910

00007008 <check_pending_conn>:
{
    7008:	b538      	push	{r3, r4, r5, lr}
    700a:	f3bf 8f5b 	dmb	ish
    700e:	4b23      	ldr	r3, [pc, #140]	; (709c <check_pending_conn+0x94>)
    7010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7012:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    7016:	f413 7f80 	tst.w	r3, #256	; 0x100
    701a:	d101      	bne.n	7020 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    701c:	2a01      	cmp	r2, #1
    701e:	d900      	bls.n	7022 <check_pending_conn+0x1a>
    7020:	bd38      	pop	{r3, r4, r5, pc}
    7022:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    7024:	2101      	movs	r1, #1
    7026:	f001 fc1b 	bl	8860 <bt_conn_lookup_state_le>
	if (!conn) {
    702a:	4605      	mov	r5, r0
    702c:	2800      	cmp	r0, #0
    702e:	d0f7      	beq.n	7020 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    7030:	f7ff fc60 	bl	68f4 <bt_hci_stop_scanning>
    7034:	b9c0      	cbnz	r0, 7068 <check_pending_conn+0x60>
    7036:	f3bf 8f5b 	dmb	ish
    703a:	4b18      	ldr	r3, [pc, #96]	; (709c <check_pending_conn+0x94>)
    703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    703e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    7042:	f013 0f04 	tst.w	r3, #4
    7046:	d11c      	bne.n	7082 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    7048:	2207      	movs	r2, #7
    704a:	4914      	ldr	r1, [pc, #80]	; (709c <check_pending_conn+0x94>)
    704c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    7050:	f7f9 f936 	bl	2c0 <memcpy>
    7054:	2207      	movs	r2, #7
    7056:	4621      	mov	r1, r4
    7058:	f105 0056 	add.w	r0, r5, #86	; 0x56
    705c:	f7f9 f930 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    7060:	4628      	mov	r0, r5
    7062:	f7ff fcdb 	bl	6a1c <hci_le_create_conn>
    7066:	b180      	cbz	r0, 708a <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    7068:	231f      	movs	r3, #31
    706a:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    706c:	2100      	movs	r1, #0
    706e:	4628      	mov	r0, r5
    7070:	f001 fcb6 	bl	89e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    7074:	4628      	mov	r0, r5
    7076:	f001 fc25 	bl	88c4 <bt_conn_unref>
	bt_le_scan_update(false);
    707a:	2000      	movs	r0, #0
    707c:	f7ff fef8 	bl	6e70 <bt_le_scan_update>
    7080:	e7ce      	b.n	7020 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    7082:	4807      	ldr	r0, [pc, #28]	; (70a0 <check_pending_conn+0x98>)
    7084:	f7ff fbee 	bl	6864 <set_random_address>
    7088:	e7de      	b.n	7048 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    708a:	2102      	movs	r1, #2
    708c:	4628      	mov	r0, r5
    708e:	f001 fca7 	bl	89e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    7092:	4628      	mov	r0, r5
    7094:	f001 fc16 	bl	88c4 <bt_conn_unref>
	return;
    7098:	bd38      	pop	{r3, r4, r5, pc}
    709a:	bf00      	nop
    709c:	2000b910 	.word	0x2000b910
    70a0:	2000b911 	.word	0x2000b911

000070a4 <le_adv_report>:
{
    70a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70a8:	b083      	sub	sp, #12
    70aa:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    70ac:	f100 0308 	add.w	r3, r0, #8
    70b0:	9300      	str	r3, [sp, #0]
    70b2:	4618      	mov	r0, r3
    70b4:	f015 f97f 	bl	1c3b6 <net_buf_simple_pull_u8>
	while (num_reports--) {
    70b8:	e00a      	b.n	70d0 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    70ba:	7822      	ldrb	r2, [r4, #0]
    70bc:	4631      	mov	r1, r6
    70be:	9801      	ldr	r0, [sp, #4]
    70c0:	f7ff ffa2 	bl	7008 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    70c4:	7a21      	ldrb	r1, [r4, #8]
    70c6:	3101      	adds	r1, #1
    70c8:	9800      	ldr	r0, [sp, #0]
    70ca:	f015 f96c 	bl	1c3a6 <net_buf_simple_pull>
	while (num_reports--) {
    70ce:	4638      	mov	r0, r7
    70d0:	1e43      	subs	r3, r0, #1
    70d2:	b2df      	uxtb	r7, r3
    70d4:	b368      	cbz	r0, 7132 <le_adv_report+0x8e>
		info = (void *)buf->data;
    70d6:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    70d8:	2109      	movs	r1, #9
    70da:	f8dd 9000 	ldr.w	r9, [sp]
    70de:	4648      	mov	r0, r9
    70e0:	f015 f961 	bl	1c3a6 <net_buf_simple_pull>
		rssi = info->data[info->length];
    70e4:	7a23      	ldrb	r3, [r4, #8]
    70e6:	4423      	add	r3, r4
    70e8:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    70ec:	1c66      	adds	r6, r4, #1
    70ee:	4630      	mov	r0, r6
    70f0:	f7fe ff6b 	bl	5fca <find_id_addr>
    70f4:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    70f6:	4b10      	ldr	r3, [pc, #64]	; (7138 <le_adv_report+0x94>)
    70f8:	681b      	ldr	r3, [r3, #0]
    70fa:	2b00      	cmp	r3, #0
    70fc:	d0dd      	beq.n	70ba <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    70fe:	f8cd 9000 	str.w	r9, [sp]
    7102:	4648      	mov	r0, r9
    7104:	f015 f967 	bl	1c3d6 <net_buf_simple_headroom>
    7108:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    710c:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    7110:	7a23      	ldrb	r3, [r4, #8]
    7112:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    7114:	4b08      	ldr	r3, [pc, #32]	; (7138 <le_adv_report+0x94>)
    7116:	f8d3 b000 	ldr.w	fp, [r3]
    711a:	9b00      	ldr	r3, [sp, #0]
    711c:	7822      	ldrb	r2, [r4, #0]
    711e:	4641      	mov	r1, r8
    7120:	9801      	ldr	r0, [sp, #4]
    7122:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    7124:	f105 0310 	add.w	r3, r5, #16
    7128:	4453      	add	r3, sl
    712a:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    712c:	f8a5 900c 	strh.w	r9, [r5, #12]
    7130:	e7c3      	b.n	70ba <le_adv_report+0x16>
}
    7132:	b003      	add	sp, #12
    7134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7138:	200003b4 	.word	0x200003b4

0000713c <hci_le_read_remote_features>:
{
    713c:	b538      	push	{r3, r4, r5, lr}
    713e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    7140:	2102      	movs	r1, #2
    7142:	f242 0016 	movw	r0, #8214	; 0x2016
    7146:	f7ff f885 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    714a:	b168      	cbz	r0, 7168 <hci_le_read_remote_features+0x2c>
    714c:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    714e:	2102      	movs	r1, #2
    7150:	3008      	adds	r0, #8
    7152:	f015 f8db 	bl	1c30c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7156:	882b      	ldrh	r3, [r5, #0]
    7158:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    715a:	4621      	mov	r1, r4
    715c:	f242 0016 	movw	r0, #8214	; 0x2016
    7160:	f7ff fdd6 	bl	6d10 <bt_hci_cmd_send>
	return 0;
    7164:	2000      	movs	r0, #0
    7166:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    7168:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    716c:	bd38      	pop	{r3, r4, r5, pc}

0000716e <hci_le_set_phy>:
{
    716e:	b538      	push	{r3, r4, r5, lr}
    7170:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    7172:	2107      	movs	r1, #7
    7174:	f242 0032 	movw	r0, #8242	; 0x2032
    7178:	f7ff f86c 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    717c:	b1a0      	cbz	r0, 71a8 <hci_le_set_phy+0x3a>
    717e:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    7180:	2107      	movs	r1, #7
    7182:	3008      	adds	r0, #8
    7184:	f015 f8c2 	bl	1c30c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7188:	8823      	ldrh	r3, [r4, #0]
    718a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    718c:	2400      	movs	r4, #0
    718e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    7190:	2302      	movs	r3, #2
    7192:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    7194:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    7196:	7144      	strb	r4, [r0, #5]
    7198:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    719a:	4629      	mov	r1, r5
    719c:	f242 0032 	movw	r0, #8242	; 0x2032
    71a0:	f7ff fdb6 	bl	6d10 <bt_hci_cmd_send>
	return 0;
    71a4:	4620      	mov	r0, r4
    71a6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    71a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    71ac:	bd38      	pop	{r3, r4, r5, pc}

000071ae <hci_le_set_data_len>:
{
    71ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    71b0:	b083      	sub	sp, #12
    71b2:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    71b4:	aa01      	add	r2, sp, #4
    71b6:	2100      	movs	r1, #0
    71b8:	f242 002f 	movw	r0, #8239	; 0x202f
    71bc:	f7ff f876 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    71c0:	4603      	mov	r3, r0
    71c2:	b110      	cbz	r0, 71ca <hci_le_set_data_len+0x1c>
}
    71c4:	4618      	mov	r0, r3
    71c6:	b003      	add	sp, #12
    71c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    71ca:	9801      	ldr	r0, [sp, #4]
    71cc:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    71ce:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    71d2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    71d6:	f015 f84d 	bl	1c274 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    71da:	2106      	movs	r1, #6
    71dc:	f242 0022 	movw	r0, #8226	; 0x2022
    71e0:	f7ff f838 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    71e4:	4605      	mov	r5, r0
    71e6:	b170      	cbz	r0, 7206 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    71e8:	2106      	movs	r1, #6
    71ea:	3008      	adds	r0, #8
    71ec:	f015 f88e 	bl	1c30c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    71f0:	8823      	ldrh	r3, [r4, #0]
    71f2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    71f4:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    71f6:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    71f8:	4629      	mov	r1, r5
    71fa:	f242 0022 	movw	r0, #8226	; 0x2022
    71fe:	f7ff fd87 	bl	6d10 <bt_hci_cmd_send>
    7202:	4603      	mov	r3, r0
    7204:	e7de      	b.n	71c4 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    7206:	f06f 0368 	mvn.w	r3, #104	; 0x68
    720a:	e7db      	b.n	71c4 <hci_le_set_data_len+0x16>

0000720c <le_conn_complete>:
{
    720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    7210:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    7212:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    7216:	7823      	ldrb	r3, [r4, #0]
    7218:	b17b      	cbz	r3, 723a <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    721a:	2102      	movs	r1, #2
    721c:	2000      	movs	r0, #0
    721e:	f001 fb1f 	bl	8860 <bt_conn_lookup_state_le>
		if (!conn) {
    7222:	4605      	mov	r5, r0
    7224:	b3d0      	cbz	r0, 729c <le_conn_complete+0x90>
		conn->err = evt->status;
    7226:	7823      	ldrb	r3, [r4, #0]
    7228:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    722a:	2100      	movs	r1, #0
    722c:	f001 fbd8 	bl	89e0 <bt_conn_set_state>
		bt_conn_unref(conn);
    7230:	4628      	mov	r0, r5
    7232:	f001 fb47 	bl	88c4 <bt_conn_unref>
		return;
    7236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    723a:	1d27      	adds	r7, r4, #4
    723c:	4638      	mov	r0, r7
    723e:	f7fe fec4 	bl	5fca <find_id_addr>
    7242:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    7244:	2102      	movs	r1, #2
    7246:	f001 fb0b 	bl	8860 <bt_conn_lookup_state_le>
    724a:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    724c:	78e3      	ldrb	r3, [r4, #3]
    724e:	2b01      	cmp	r3, #1
    7250:	d026      	beq.n	72a0 <le_conn_complete+0x94>
	if (!conn) {
    7252:	b31d      	cbz	r5, 729c <le_conn_complete+0x90>
	conn->handle   = handle;
    7254:	4628      	mov	r0, r5
    7256:	f820 6b48 	strh.w	r6, [r0], #72
    725a:	2207      	movs	r2, #7
    725c:	4641      	mov	r1, r8
    725e:	f7f9 f82f 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7262:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    7266:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    726a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    726e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7272:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    7276:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    727a:	78e3      	ldrb	r3, [r4, #3]
    727c:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    727e:	2b01      	cmp	r3, #1
    7280:	d022      	beq.n	72c8 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7282:	2103      	movs	r1, #3
    7284:	4628      	mov	r0, r5
    7286:	f001 fbab 	bl	89e0 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    728a:	7b2b      	ldrb	r3, [r5, #12]
    728c:	2b03      	cmp	r3, #3
    728e:	d03b      	beq.n	7308 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    7290:	4628      	mov	r0, r5
    7292:	f001 fb17 	bl	88c4 <bt_conn_unref>
	bt_le_scan_update(false);
    7296:	2000      	movs	r0, #0
    7298:	f7ff fdea 	bl	6e70 <bt_le_scan_update>
    729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72a0:	4b3a      	ldr	r3, [pc, #232]	; (738c <le_conn_complete+0x180>)
    72a2:	f3bf 8f5b 	dmb	ish
    72a6:	e853 2f00 	ldrex	r2, [r3]
    72aa:	f022 0220 	bic.w	r2, r2, #32
    72ae:	e843 2100 	strex	r1, r2, [r3]
    72b2:	2900      	cmp	r1, #0
    72b4:	d1f7      	bne.n	72a6 <le_conn_complete+0x9a>
    72b6:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    72ba:	2d00      	cmp	r5, #0
    72bc:	d1c9      	bne.n	7252 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    72be:	4640      	mov	r0, r8
    72c0:	f001 fa30 	bl	8724 <bt_conn_add_le>
    72c4:	4605      	mov	r5, r0
    72c6:	e7c4      	b.n	7252 <le_conn_complete+0x46>
    72c8:	2207      	movs	r2, #7
    72ca:	4639      	mov	r1, r7
    72cc:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    72d0:	f7f8 fff6 	bl	2c0 <memcpy>
    72d4:	4e2e      	ldr	r6, [pc, #184]	; (7390 <le_conn_complete+0x184>)
    72d6:	2207      	movs	r2, #7
    72d8:	4631      	mov	r1, r6
    72da:	f105 0056 	add.w	r0, r5, #86	; 0x56
    72de:	f7f8 ffef 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    72e2:	f3bf 8f5b 	dmb	ish
    72e6:	6f33      	ldr	r3, [r6, #112]	; 0x70
    72e8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    72ec:	f013 0f40 	tst.w	r3, #64	; 0x40
    72f0:	d0c7      	beq.n	7282 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    72f2:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    72f6:	2200      	movs	r2, #0
    72f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    72fc:	4313      	orrs	r3, r2
    72fe:	d0c0      	beq.n	7282 <le_conn_complete+0x76>
			set_advertise_enable(true);
    7300:	2001      	movs	r0, #1
    7302:	f7ff fb4d 	bl	69a0 <set_advertise_enable>
    7306:	e7bc      	b.n	7282 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7308:	78e3      	ldrb	r3, [r4, #3]
    730a:	b12b      	cbz	r3, 7318 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    730c:	4b20      	ldr	r3, [pc, #128]	; (7390 <le_conn_complete+0x184>)
    730e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    7312:	f013 0f08 	tst.w	r3, #8
    7316:	d004      	beq.n	7322 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    7318:	4628      	mov	r0, r5
    731a:	f7ff ff0f 	bl	713c <hci_le_read_remote_features>
		if (!err) {
    731e:	2800      	cmp	r0, #0
    7320:	d0b6      	beq.n	7290 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    7322:	4b1b      	ldr	r3, [pc, #108]	; (7390 <le_conn_complete+0x184>)
    7324:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    7328:	f013 0f01 	tst.w	r3, #1
    732c:	d10d      	bne.n	734a <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    732e:	4b18      	ldr	r3, [pc, #96]	; (7390 <le_conn_complete+0x184>)
    7330:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7334:	f013 0f20 	tst.w	r3, #32
    7338:	d003      	beq.n	7342 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    733a:	4628      	mov	r0, r5
    733c:	f7ff ff37 	bl	71ae <hci_le_set_data_len>
		if (!err) {
    7340:	b1b0      	cbz	r0, 7370 <le_conn_complete+0x164>
	update_conn_param(conn);
    7342:	4628      	mov	r0, r5
    7344:	f7fe fe4a 	bl	5fdc <update_conn_param>
    7348:	e7a2      	b.n	7290 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    734a:	4628      	mov	r0, r5
    734c:	f7ff ff0f 	bl	716e <hci_le_set_phy>
		if (!err) {
    7350:	2800      	cmp	r0, #0
    7352:	d1ec      	bne.n	732e <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    7354:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7356:	f3bf 8f5b 	dmb	ish
    735a:	e853 2f00 	ldrex	r2, [r3]
    735e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7362:	e843 2100 	strex	r1, r2, [r3]
    7366:	2900      	cmp	r1, #0
    7368:	d1f7      	bne.n	735a <le_conn_complete+0x14e>
    736a:	f3bf 8f5b 	dmb	ish
    736e:	e78f      	b.n	7290 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    7370:	1d2b      	adds	r3, r5, #4
    7372:	f3bf 8f5b 	dmb	ish
    7376:	e853 2f00 	ldrex	r2, [r3]
    737a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    737e:	e843 2100 	strex	r1, r2, [r3]
    7382:	2900      	cmp	r1, #0
    7384:	d1f7      	bne.n	7376 <le_conn_complete+0x16a>
    7386:	f3bf 8f5b 	dmb	ish
    738a:	e781      	b.n	7290 <le_conn_complete+0x84>
    738c:	2000b980 	.word	0x2000b980
    7390:	2000b910 	.word	0x2000b910

00007394 <le_conn_complete>:
{
    7394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7398:	4604      	mov	r4, r0
    739a:	460f      	mov	r7, r1
    739c:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    739e:	1d85      	adds	r5, r0, #6
    73a0:	f100 060c 	add.w	r6, r0, #12
    73a4:	4633      	mov	r3, r6
    73a6:	22ff      	movs	r2, #255	; 0xff
    73a8:	4629      	mov	r1, r5
    73aa:	7940      	ldrb	r0, [r0, #5]
    73ac:	f014 fafa 	bl	1b9a4 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    73b0:	4b40      	ldr	r3, [pc, #256]	; (74b4 <le_conn_complete+0x120>)
    73b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    73b6:	2200      	movs	r2, #0
    73b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    73bc:	4313      	orrs	r3, r2
    73be:	d077      	beq.n	74b0 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    73c0:	4b3d      	ldr	r3, [pc, #244]	; (74b8 <le_conn_complete+0x124>)
    73c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    73c6:	f002 0001 	and.w	r0, r2, #1
    73ca:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    73cc:	4301      	orrs	r1, r0
    73ce:	d104      	bne.n	73da <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    73d0:	f402 7000 	and.w	r0, r2, #512	; 0x200
    73d4:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    73d6:	4301      	orrs	r1, r0
    73d8:	d06a      	beq.n	74b0 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    73da:	78e1      	ldrb	r1, [r4, #3]
    73dc:	b919      	cbnz	r1, 73e6 <le_conn_complete+0x52>
		conn_count++;
    73de:	4837      	ldr	r0, [pc, #220]	; (74bc <le_conn_complete+0x128>)
    73e0:	6801      	ldr	r1, [r0, #0]
    73e2:	3101      	adds	r1, #1
    73e4:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    73e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
    73ea:	2300      	movs	r3, #0
    73ec:	4313      	orrs	r3, r2
    73ee:	d03e      	beq.n	746e <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    73f0:	221e      	movs	r2, #30
    73f2:	210a      	movs	r1, #10
    73f4:	4640      	mov	r0, r8
    73f6:	f007 fb2d 	bl	ea54 <meta_evt>
    73fa:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    73fc:	78e3      	ldrb	r3, [r4, #3]
    73fe:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    7400:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    7404:	7923      	ldrb	r3, [r4, #4]
    7406:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    7408:	7963      	ldrb	r3, [r4, #5]
    740a:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    740c:	2206      	movs	r2, #6
    740e:	4629      	mov	r1, r5
    7410:	3005      	adds	r0, #5
    7412:	f7f8 ff55 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    7416:	7ca3      	ldrb	r3, [r4, #18]
    7418:	b123      	cbz	r3, 7424 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    741a:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    741c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7420:	2b40      	cmp	r3, #64	; 0x40
    7422:	d01c      	beq.n	745e <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    7424:	2206      	movs	r2, #6
    7426:	2100      	movs	r1, #0
    7428:	f108 000b 	add.w	r0, r8, #11
    742c:	f024 fe26 	bl	2c07c <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    7430:	2206      	movs	r2, #6
    7432:	4631      	mov	r1, r6
    7434:	f108 0011 	add.w	r0, r8, #17
    7438:	f7f8 ff42 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    743c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    7440:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    7444:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    7448:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    744c:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    7450:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    7454:	7fe3      	ldrb	r3, [r4, #31]
    7456:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    745a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    745e:	2206      	movs	r2, #6
    7460:	f104 0113 	add.w	r1, r4, #19
    7464:	f108 000b 	add.w	r0, r8, #11
    7468:	f7f8 ff2a 	bl	2c0 <memcpy>
    746c:	e7e0      	b.n	7430 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    746e:	2212      	movs	r2, #18
    7470:	2101      	movs	r1, #1
    7472:	4640      	mov	r0, r8
    7474:	f007 faee 	bl	ea54 <meta_evt>
    7478:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    747a:	78e3      	ldrb	r3, [r4, #3]
    747c:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    747e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    7482:	7923      	ldrb	r3, [r4, #4]
    7484:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    7486:	7963      	ldrb	r3, [r4, #5]
    7488:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    748a:	2206      	movs	r2, #6
    748c:	4629      	mov	r1, r5
    748e:	3005      	adds	r0, #5
    7490:	f7f8 ff16 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    7494:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    7498:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    749c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    74a0:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    74a4:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    74a8:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    74ac:	7fe3      	ldrb	r3, [r4, #31]
    74ae:	7473      	strb	r3, [r6, #17]
    74b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74b4:	2000bc00 	.word	0x2000bc00
    74b8:	2000bc08 	.word	0x2000bc08
    74bc:	20000acc 	.word	0x20000acc

000074c0 <le_remote_feat_complete>:
{
    74c0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    74c2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    74c4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    74c8:	f001 f978 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    74cc:	b1f0      	cbz	r0, 750c <le_remote_feat_complete+0x4c>
    74ce:	4604      	mov	r4, r0
	if (!evt->status) {
    74d0:	782b      	ldrb	r3, [r5, #0]
    74d2:	b1e3      	cbz	r3, 750e <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    74d4:	4b24      	ldr	r3, [pc, #144]	; (7568 <le_remote_feat_complete+0xa8>)
    74d6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    74da:	f013 0f01 	tst.w	r3, #1
    74de:	d004      	beq.n	74ea <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    74e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    74e4:	f013 0f01 	tst.w	r3, #1
    74e8:	d117      	bne.n	751a <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    74ea:	4b1f      	ldr	r3, [pc, #124]	; (7568 <le_remote_feat_complete+0xa8>)
    74ec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    74f0:	f013 0f20 	tst.w	r3, #32
    74f4:	d004      	beq.n	7500 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    74f6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    74fa:	f013 0f20 	tst.w	r3, #32
    74fe:	d11f      	bne.n	7540 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    7500:	4620      	mov	r0, r4
    7502:	f7fe fd6b 	bl	5fdc <update_conn_param>
	bt_conn_unref(conn);
    7506:	4620      	mov	r0, r4
    7508:	f001 f9dc 	bl	88c4 <bt_conn_unref>
    750c:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    750e:	2208      	movs	r2, #8
    7510:	1ce9      	adds	r1, r5, #3
    7512:	3068      	adds	r0, #104	; 0x68
    7514:	f7f8 fed4 	bl	2c0 <memcpy>
    7518:	e7dc      	b.n	74d4 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    751a:	4620      	mov	r0, r4
    751c:	f7ff fe27 	bl	716e <hci_le_set_phy>
		if (!err) {
    7520:	2800      	cmp	r0, #0
    7522:	d1e2      	bne.n	74ea <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    7524:	1d23      	adds	r3, r4, #4
    7526:	f3bf 8f5b 	dmb	ish
    752a:	e853 2f00 	ldrex	r2, [r3]
    752e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    7532:	e843 2100 	strex	r1, r2, [r3]
    7536:	2900      	cmp	r1, #0
    7538:	d1f7      	bne.n	752a <le_remote_feat_complete+0x6a>
    753a:	f3bf 8f5b 	dmb	ish
    753e:	e7e2      	b.n	7506 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    7540:	4620      	mov	r0, r4
    7542:	f7ff fe34 	bl	71ae <hci_le_set_data_len>
		if (!err) {
    7546:	2800      	cmp	r0, #0
    7548:	d1da      	bne.n	7500 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    754a:	1d23      	adds	r3, r4, #4
    754c:	f3bf 8f5b 	dmb	ish
    7550:	e853 2f00 	ldrex	r2, [r3]
    7554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    7558:	e843 2100 	strex	r1, r2, [r3]
    755c:	2900      	cmp	r1, #0
    755e:	d1f7      	bne.n	7550 <le_remote_feat_complete+0x90>
    7560:	f3bf 8f5b 	dmb	ish
    7564:	e7cf      	b.n	7506 <le_remote_feat_complete+0x46>
    7566:	bf00      	nop
    7568:	2000b910 	.word	0x2000b910

0000756c <le_remote_feat_complete>:
{
    756c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    756e:	4c14      	ldr	r4, [pc, #80]	; (75c0 <le_remote_feat_complete+0x54>)
    7570:	e9d4 4500 	ldrd	r4, r5, [r4]
    7574:	2400      	movs	r4, #0
    7576:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    757a:	432c      	orrs	r4, r5
    757c:	d007      	beq.n	758e <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    757e:	4c11      	ldr	r4, [pc, #68]	; (75c4 <le_remote_feat_complete+0x58>)
    7580:	e9d4 4500 	ldrd	r4, r5, [r4]
    7584:	f004 0408 	and.w	r4, r4, #8
    7588:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    758a:	432c      	orrs	r4, r5
    758c:	d100      	bne.n	7590 <le_remote_feat_complete+0x24>
    758e:	bd70      	pop	{r4, r5, r6, pc}
    7590:	4615      	mov	r5, r2
    7592:	460e      	mov	r6, r1
    7594:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    7596:	220b      	movs	r2, #11
    7598:	2104      	movs	r1, #4
    759a:	4618      	mov	r0, r3
    759c:	f007 fa5a 	bl	ea54 <meta_evt>
	sep->status = status;
    75a0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    75a2:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    75a6:	b12c      	cbz	r4, 75b4 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    75a8:	2208      	movs	r2, #8
    75aa:	2100      	movs	r1, #0
    75ac:	3003      	adds	r0, #3
    75ae:	f024 fd65 	bl	2c07c <memset>
    75b2:	e7ec      	b.n	758e <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    75b4:	2208      	movs	r2, #8
    75b6:	1d31      	adds	r1, r6, #4
    75b8:	3003      	adds	r0, #3
    75ba:	f7f8 fe81 	bl	2c0 <memcpy>
    75be:	bd70      	pop	{r4, r5, r6, pc}
    75c0:	2000bc00 	.word	0x2000bc00
    75c4:	2000bc08 	.word	0x2000bc08

000075c8 <le_phy_update_complete>:
{
    75c8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    75ca:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    75cc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    75d0:	f001 f8f4 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    75d4:	b308      	cbz	r0, 761a <le_phy_update_complete+0x52>
    75d6:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    75d8:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    75da:	f3bf 8f5b 	dmb	ish
    75de:	e855 3f00 	ldrex	r3, [r5]
    75e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    75e6:	e845 2100 	strex	r1, r2, [r5]
    75ea:	2900      	cmp	r1, #0
    75ec:	d1f7      	bne.n	75de <le_phy_update_complete+0x16>
    75ee:	f3bf 8f5b 	dmb	ish
    75f2:	f013 0f80 	tst.w	r3, #128	; 0x80
    75f6:	d00d      	beq.n	7614 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    75f8:	4b11      	ldr	r3, [pc, #68]	; (7640 <le_phy_update_complete+0x78>)
    75fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    75fe:	f013 0f20 	tst.w	r3, #32
    7602:	d004      	beq.n	760e <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    7604:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    7608:	f013 0f20 	tst.w	r3, #32
    760c:	d106      	bne.n	761c <le_phy_update_complete+0x54>
	update_conn_param(conn);
    760e:	4620      	mov	r0, r4
    7610:	f7fe fce4 	bl	5fdc <update_conn_param>
	bt_conn_unref(conn);
    7614:	4620      	mov	r0, r4
    7616:	f001 f955 	bl	88c4 <bt_conn_unref>
    761a:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    761c:	4620      	mov	r0, r4
    761e:	f7ff fdc6 	bl	71ae <hci_le_set_data_len>
		if (!err) {
    7622:	2800      	cmp	r0, #0
    7624:	d1f3      	bne.n	760e <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7626:	f3bf 8f5b 	dmb	ish
    762a:	e855 3f00 	ldrex	r3, [r5]
    762e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7632:	e845 3200 	strex	r2, r3, [r5]
    7636:	2a00      	cmp	r2, #0
    7638:	d1f7      	bne.n	762a <le_phy_update_complete+0x62>
    763a:	f3bf 8f5b 	dmb	ish
    763e:	e7e9      	b.n	7614 <le_phy_update_complete+0x4c>
    7640:	2000b910 	.word	0x2000b910

00007644 <le_conn_param_neg_reply>:
{
    7644:	b570      	push	{r4, r5, r6, lr}
    7646:	4606      	mov	r6, r0
    7648:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    764a:	2103      	movs	r1, #3
    764c:	f242 0021 	movw	r0, #8225	; 0x2021
    7650:	f7fe fe00 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    7654:	b160      	cbz	r0, 7670 <le_conn_param_neg_reply+0x2c>
    7656:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    7658:	2103      	movs	r1, #3
    765a:	3008      	adds	r0, #8
    765c:	f014 fe56 	bl	1c30c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    7660:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    7662:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7664:	4621      	mov	r1, r4
    7666:	f242 0021 	movw	r0, #8225	; 0x2021
    766a:	f7ff fb51 	bl	6d10 <bt_hci_cmd_send>
    766e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    7670:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    7674:	bd70      	pop	{r4, r5, r6, pc}

00007676 <le_conn_param_req_reply>:
{
    7676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7678:	4607      	mov	r7, r0
    767a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    767c:	210e      	movs	r1, #14
    767e:	f242 0020 	movw	r0, #8224	; 0x2020
    7682:	f7fe fde7 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    7686:	b1c0      	cbz	r0, 76ba <le_conn_param_req_reply+0x44>
    7688:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    768a:	210e      	movs	r1, #14
    768c:	3008      	adds	r0, #8
    768e:	f014 fe3d 	bl	1c30c <net_buf_simple_add>
    7692:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    7694:	220e      	movs	r2, #14
    7696:	2100      	movs	r1, #0
    7698:	f024 fcf0 	bl	2c07c <memset>
	cp->handle = sys_cpu_to_le16(handle);
    769c:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    769e:	882b      	ldrh	r3, [r5, #0]
    76a0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    76a2:	886b      	ldrh	r3, [r5, #2]
    76a4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    76a6:	88ab      	ldrh	r3, [r5, #4]
    76a8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    76aa:	88eb      	ldrh	r3, [r5, #6]
    76ac:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    76ae:	4631      	mov	r1, r6
    76b0:	f242 0020 	movw	r0, #8224	; 0x2020
    76b4:	f7ff fb2c 	bl	6d10 <bt_hci_cmd_send>
    76b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    76ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    76be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000076c0 <le_conn_param_req_reply>:
{
    76c0:	b570      	push	{r4, r5, r6, lr}
    76c2:	b082      	sub	sp, #8
    76c4:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    76c6:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    76c8:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    76ca:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    76cc:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    76ce:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    76d0:	9201      	str	r2, [sp, #4]
    76d2:	9100      	str	r1, [sp, #0]
    76d4:	2200      	movs	r2, #0
    76d6:	2102      	movs	r1, #2
    76d8:	b2a0      	uxth	r0, r4
    76da:	f012 f929 	bl	19930 <ll_conn_update>
    76de:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    76e0:	2103      	movs	r1, #3
    76e2:	4630      	mov	r0, r6
    76e4:	f007 f91c 	bl	e920 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    76e8:	b12d      	cbz	r5, 76f6 <le_conn_param_req_reply+0x36>
    76ea:	230c      	movs	r3, #12
    76ec:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    76ee:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    76f2:	b002      	add	sp, #8
    76f4:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    76f6:	2300      	movs	r3, #0
    76f8:	e7f8      	b.n	76ec <le_conn_param_req_reply+0x2c>
	...

000076fc <le_conn_param_req>:
{
    76fc:	b530      	push	{r4, r5, lr}
    76fe:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    7700:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7702:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    7704:	885a      	ldrh	r2, [r3, #2]
    7706:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    770a:	889a      	ldrh	r2, [r3, #4]
    770c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    7710:	88da      	ldrh	r2, [r3, #6]
    7712:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7716:	891b      	ldrh	r3, [r3, #8]
    7718:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    771c:	4620      	mov	r0, r4
    771e:	f001 f84d 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    7722:	b178      	cbz	r0, 7744 <le_conn_param_req+0x48>
    7724:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    7726:	4669      	mov	r1, sp
    7728:	f000 fdf6 	bl	8318 <le_param_req>
    772c:	b980      	cbnz	r0, 7750 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    772e:	211e      	movs	r1, #30
    7730:	4620      	mov	r0, r4
    7732:	f7ff ff87 	bl	7644 <le_conn_param_neg_reply>
    7736:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    7738:	4628      	mov	r0, r5
    773a:	f001 f8c3 	bl	88c4 <bt_conn_unref>
}
    773e:	4620      	mov	r0, r4
    7740:	b003      	add	sp, #12
    7742:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    7744:	2102      	movs	r1, #2
    7746:	4620      	mov	r0, r4
    7748:	f7ff ff7c 	bl	7644 <le_conn_param_neg_reply>
    774c:	4604      	mov	r4, r0
    774e:	e7f6      	b.n	773e <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    7750:	4669      	mov	r1, sp
    7752:	4620      	mov	r0, r4
    7754:	f7ff ff8f 	bl	7676 <le_conn_param_req_reply>
    7758:	4604      	mov	r4, r0
    775a:	e7ed      	b.n	7738 <le_conn_param_req+0x3c>

0000775c <le_conn_param_req>:
{
    775c:	b530      	push	{r4, r5, lr}
    775e:	b083      	sub	sp, #12
    7760:	4604      	mov	r4, r0
    7762:	460d      	mov	r5, r1
    7764:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7766:	4b14      	ldr	r3, [pc, #80]	; (77b8 <le_conn_param_req+0x5c>)
    7768:	e9d3 2300 	ldrd	r2, r3, [r3]
    776c:	2200      	movs	r2, #0
    776e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    7772:	4313      	orrs	r3, r2
    7774:	d007      	beq.n	7786 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    7776:	4b11      	ldr	r3, [pc, #68]	; (77bc <le_conn_param_req+0x60>)
    7778:	e9d3 2300 	ldrd	r2, r3, [r3]
    777c:	f002 0220 	and.w	r2, r2, #32
    7780:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7782:	4313      	orrs	r3, r2
    7784:	d109      	bne.n	779a <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    7786:	2300      	movs	r3, #0
    7788:	9301      	str	r3, [sp, #4]
    778a:	9300      	str	r3, [sp, #0]
    778c:	221a      	movs	r2, #26
    778e:	2102      	movs	r1, #2
    7790:	4628      	mov	r0, r5
    7792:	f012 f8cd 	bl	19930 <ll_conn_update>
}
    7796:	b003      	add	sp, #12
    7798:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    779a:	220a      	movs	r2, #10
    779c:	2106      	movs	r1, #6
    779e:	f007 f959 	bl	ea54 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    77a2:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    77a4:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    77a6:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    77a8:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    77aa:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    77ac:	8923      	ldrh	r3, [r4, #8]
    77ae:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    77b0:	8963      	ldrh	r3, [r4, #10]
    77b2:	8103      	strh	r3, [r0, #8]
    77b4:	e7ef      	b.n	7796 <le_conn_param_req+0x3a>
    77b6:	bf00      	nop
    77b8:	2000bc00 	.word	0x2000bc00
    77bc:	2000bc08 	.word	0x2000bc08

000077c0 <le_ltk_request>:
{
    77c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    77c2:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    77c4:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    77c6:	8820      	ldrh	r0, [r4, #0]
    77c8:	f000 fff8 	bl	87bc <bt_conn_lookup_handle>
	if (!conn) {
    77cc:	2800      	cmp	r0, #0
    77ce:	d040      	beq.n	7852 <le_ltk_request+0x92>
    77d0:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    77d2:	f8d4 2002 	ldr.w	r2, [r4, #2]
    77d6:	f8d4 3006 	ldr.w	r3, [r4, #6]
    77da:	4313      	orrs	r3, r2
    77dc:	d102      	bne.n	77e4 <le_ltk_request+0x24>
    77de:	8963      	ldrh	r3, [r4, #10]
    77e0:	2b00      	cmp	r3, #0
    77e2:	d038      	beq.n	7856 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    77e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    77e6:	2b00      	cmp	r3, #0
    77e8:	d053      	beq.n	7892 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    77ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    77ec:	b16b      	cbz	r3, 780a <le_ltk_request+0x4a>
    77ee:	899a      	ldrh	r2, [r3, #12]
    77f0:	f012 0f20 	tst.w	r2, #32
    77f4:	d009      	beq.n	780a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    77f6:	f8d4 0002 	ldr.w	r0, [r4, #2]
    77fa:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    77fe:	ea50 0201 	orrs.w	r2, r0, r1
    7802:	d102      	bne.n	780a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    7804:	8962      	ldrh	r2, [r4, #10]
    7806:	2a00      	cmp	r2, #0
    7808:	d052      	beq.n	78b0 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    780a:	b16b      	cbz	r3, 7828 <le_ltk_request+0x68>
    780c:	899a      	ldrh	r2, [r3, #12]
    780e:	f012 0f01 	tst.w	r2, #1
    7812:	d009      	beq.n	7828 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    7814:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    7818:	f8d4 6002 	ldr.w	r6, [r4, #2]
    781c:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    7820:	42b9      	cmp	r1, r7
    7822:	bf08      	it	eq
    7824:	42b0      	cmpeq	r0, r6
    7826:	d06a      	beq.n	78fe <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    7828:	2102      	movs	r1, #2
    782a:	f242 001b 	movw	r0, #8219	; 0x201b
    782e:	f7fe fd11 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    7832:	4606      	mov	r6, r0
    7834:	b150      	cbz	r0, 784c <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    7836:	2102      	movs	r1, #2
    7838:	3008      	adds	r0, #8
    783a:	f014 fd67 	bl	1c30c <net_buf_simple_add>
	cp->handle = evt->handle;
    783e:	8823      	ldrh	r3, [r4, #0]
    7840:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    7842:	4631      	mov	r1, r6
    7844:	f242 001b 	movw	r0, #8219	; 0x201b
    7848:	f7ff fa62 	bl	6d10 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    784c:	4628      	mov	r0, r5
    784e:	f001 f839 	bl	88c4 <bt_conn_unref>
}
    7852:	b005      	add	sp, #20
    7854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    7856:	4669      	mov	r1, sp
    7858:	f006 ff14 	bl	e684 <bt_smp_get_tk>
    785c:	2800      	cmp	r0, #0
    785e:	d0c1      	beq.n	77e4 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7860:	2112      	movs	r1, #18
    7862:	f242 001a 	movw	r0, #8218	; 0x201a
    7866:	f7fe fcf5 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    786a:	4606      	mov	r6, r0
    786c:	2800      	cmp	r0, #0
    786e:	d0ed      	beq.n	784c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    7870:	2112      	movs	r1, #18
    7872:	3008      	adds	r0, #8
    7874:	f014 fd4a 	bl	1c30c <net_buf_simple_add>
		cp->handle = evt->handle;
    7878:	8823      	ldrh	r3, [r4, #0]
    787a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    787e:	2210      	movs	r2, #16
    7880:	4669      	mov	r1, sp
    7882:	f7f8 fd1d 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    7886:	4631      	mov	r1, r6
    7888:	f242 001a 	movw	r0, #8218	; 0x201a
    788c:	f7ff fa40 	bl	6d10 <bt_hci_cmd_send>
		goto done;
    7890:	e7dc      	b.n	784c <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    7892:	f105 0648 	add.w	r6, r5, #72	; 0x48
    7896:	4631      	mov	r1, r6
    7898:	2020      	movs	r0, #32
    789a:	f006 ff59 	bl	e750 <bt_keys_find>
    789e:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    78a0:	2800      	cmp	r0, #0
    78a2:	d1a2      	bne.n	77ea <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    78a4:	4631      	mov	r1, r6
    78a6:	2001      	movs	r0, #1
    78a8:	f006 ff52 	bl	e750 <bt_keys_find>
    78ac:	6728      	str	r0, [r5, #112]	; 0x70
    78ae:	e79c      	b.n	77ea <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    78b0:	2112      	movs	r1, #18
    78b2:	f242 001a 	movw	r0, #8218	; 0x201a
    78b6:	f7fe fccd 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    78ba:	4606      	mov	r6, r0
    78bc:	2800      	cmp	r0, #0
    78be:	d0c5      	beq.n	784c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    78c0:	2112      	movs	r1, #18
    78c2:	3008      	adds	r0, #8
    78c4:	f014 fd22 	bl	1c30c <net_buf_simple_add>
		cp->handle = evt->handle;
    78c8:	8823      	ldrh	r3, [r4, #0]
    78ca:	4604      	mov	r4, r0
    78cc:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    78d0:	6f29      	ldr	r1, [r5, #112]	; 0x70
    78d2:	79ca      	ldrb	r2, [r1, #7]
    78d4:	311a      	adds	r1, #26
    78d6:	4620      	mov	r0, r4
    78d8:	f7f8 fcf2 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    78dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    78de:	79d8      	ldrb	r0, [r3, #7]
    78e0:	280f      	cmp	r0, #15
    78e2:	d905      	bls.n	78f0 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    78e4:	4631      	mov	r1, r6
    78e6:	f242 001a 	movw	r0, #8218	; 0x201a
    78ea:	f7ff fa11 	bl	6d10 <bt_hci_cmd_send>
		goto done;
    78ee:	e7ad      	b.n	784c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    78f0:	f1c0 0210 	rsb	r2, r0, #16
    78f4:	2100      	movs	r1, #0
    78f6:	4420      	add	r0, r4
    78f8:	f024 fbc0 	bl	2c07c <memset>
    78fc:	e7f2      	b.n	78e4 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    78fe:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    7902:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    7904:	429a      	cmp	r2, r3
    7906:	d18f      	bne.n	7828 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7908:	2112      	movs	r1, #18
    790a:	f242 001a 	movw	r0, #8218	; 0x201a
    790e:	f7fe fca1 	bl	6254 <bt_hci_cmd_create>
		if (!buf) {
    7912:	4606      	mov	r6, r0
    7914:	2800      	cmp	r0, #0
    7916:	d099      	beq.n	784c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    7918:	2112      	movs	r1, #18
    791a:	3008      	adds	r0, #8
    791c:	f014 fcf6 	bl	1c30c <net_buf_simple_add>
		cp->handle = evt->handle;
    7920:	8823      	ldrh	r3, [r4, #0]
    7922:	4604      	mov	r4, r0
    7924:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    7928:	6f29      	ldr	r1, [r5, #112]	; 0x70
    792a:	79ca      	ldrb	r2, [r1, #7]
    792c:	317a      	adds	r1, #122	; 0x7a
    792e:	4620      	mov	r0, r4
    7930:	f7f8 fcc6 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    7934:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    7936:	79d8      	ldrb	r0, [r3, #7]
    7938:	280f      	cmp	r0, #15
    793a:	d905      	bls.n	7948 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    793c:	4631      	mov	r1, r6
    793e:	f242 001a 	movw	r0, #8218	; 0x201a
    7942:	f7ff f9e5 	bl	6d10 <bt_hci_cmd_send>
		goto done;
    7946:	e781      	b.n	784c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    7948:	f1c0 0210 	rsb	r2, r0, #16
    794c:	2100      	movs	r1, #0
    794e:	4420      	add	r0, r4
    7950:	f024 fb94 	bl	2c07c <memset>
    7954:	e7f2      	b.n	793c <le_ltk_request+0x17c>
	...

00007958 <le_ltk_request>:
{
    7958:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    795a:	4b15      	ldr	r3, [pc, #84]	; (79b0 <le_ltk_request+0x58>)
    795c:	e9d3 4500 	ldrd	r4, r5, [r3]
    7960:	2400      	movs	r4, #0
    7962:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    7966:	ea54 0305 	orrs.w	r3, r4, r5
    796a:	d008      	beq.n	797e <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    796c:	4b11      	ldr	r3, [pc, #68]	; (79b4 <le_ltk_request+0x5c>)
    796e:	e9d3 4500 	ldrd	r4, r5, [r3]
    7972:	f004 0410 	and.w	r4, r4, #16
    7976:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7978:	ea54 0305 	orrs.w	r3, r4, r5
    797c:	d100      	bne.n	7980 <le_ltk_request+0x28>
    797e:	bd70      	pop	{r4, r5, r6, pc}
    7980:	4613      	mov	r3, r2
    7982:	460d      	mov	r5, r1
    7984:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    7986:	220c      	movs	r2, #12
    7988:	2105      	movs	r1, #5
    798a:	4618      	mov	r0, r3
    798c:	f007 f862 	bl	ea54 <meta_evt>
    7990:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    7992:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    7996:	2208      	movs	r2, #8
    7998:	1d21      	adds	r1, r4, #4
    799a:	f7f8 fc91 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    799e:	2202      	movs	r2, #2
    79a0:	f104 010c 	add.w	r1, r4, #12
    79a4:	f106 000a 	add.w	r0, r6, #10
    79a8:	f7f8 fc8a 	bl	2c0 <memcpy>
    79ac:	e7e7      	b.n	797e <le_ltk_request+0x26>
    79ae:	bf00      	nop
    79b0:	2000bc00 	.word	0x2000bc00
    79b4:	2000bc08 	.word	0x2000bc08

000079b8 <hci_le_meta_event>:
{
    79b8:	b538      	push	{r3, r4, r5, lr}
    79ba:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    79bc:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    79c0:	2101      	movs	r1, #1
    79c2:	f014 fcf0 	bl	1c3a6 <net_buf_simple_pull>
	switch (evt->subevent) {
    79c6:	782b      	ldrb	r3, [r5, #0]
    79c8:	3b01      	subs	r3, #1
    79ca:	2b0b      	cmp	r3, #11
    79cc:	d82e      	bhi.n	7a2c <hci_le_meta_event+0x74>
    79ce:	e8df f003 	tbb	[pc, r3]
    79d2:	2a06      	.short	0x2a06
    79d4:	121e0e0a 	.word	0x121e0e0a
    79d8:	2d262216 	.word	0x2d262216
    79dc:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    79de:	4620      	mov	r0, r4
    79e0:	f7ff fc14 	bl	720c <le_conn_complete>
		break;
    79e4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    79e6:	4620      	mov	r0, r4
    79e8:	f7fe fb52 	bl	6090 <le_conn_update_complete>
		break;
    79ec:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    79ee:	4620      	mov	r0, r4
    79f0:	f7ff fd66 	bl	74c0 <le_remote_feat_complete>
		break;
    79f4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    79f6:	4620      	mov	r0, r4
    79f8:	f7ff fe80 	bl	76fc <le_conn_param_req>
		break;
    79fc:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    79fe:	4620      	mov	r0, r4
    7a00:	f7fe fafc 	bl	5ffc <le_data_len_change>
		break;
    7a04:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    7a06:	4620      	mov	r0, r4
    7a08:	f7ff fdde 	bl	75c8 <le_phy_update_complete>
		break;
    7a0c:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    7a0e:	4620      	mov	r0, r4
    7a10:	f7ff fed6 	bl	77c0 <le_ltk_request>
		break;
    7a14:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    7a16:	4620      	mov	r0, r4
    7a18:	f7fe f9f0 	bl	5dfc <le_pkey_complete>
		break;
    7a1c:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    7a1e:	4620      	mov	r0, r4
    7a20:	f7fe f916 	bl	5c50 <le_dhkey_complete>
		break;
    7a24:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    7a26:	4620      	mov	r0, r4
    7a28:	f7ff fb3c 	bl	70a4 <le_adv_report>
    7a2c:	bd38      	pop	{r3, r4, r5, pc}

00007a2e <hci_event>:
{
    7a2e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    7a30:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7a32:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    7a34:	2b0e      	cmp	r3, #14
    7a36:	d316      	bcc.n	7a66 <hci_event+0x38>
    7a38:	2b0f      	cmp	r3, #15
    7a3a:	d901      	bls.n	7a40 <hci_event+0x12>
    7a3c:	2b13      	cmp	r3, #19
    7a3e:	d112      	bne.n	7a66 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    7a40:	2301      	movs	r3, #1
    7a42:	b993      	cbnz	r3, 7a6a <hci_event+0x3c>
    7a44:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    7a46:	2102      	movs	r1, #2
    7a48:	3008      	adds	r0, #8
    7a4a:	f014 fcac 	bl	1c3a6 <net_buf_simple_pull>
	switch (hdr->evt) {
    7a4e:	782b      	ldrb	r3, [r5, #0]
    7a50:	2b08      	cmp	r3, #8
    7a52:	d019      	beq.n	7a88 <hci_event+0x5a>
    7a54:	d90f      	bls.n	7a76 <hci_event+0x48>
    7a56:	2b30      	cmp	r3, #48	; 0x30
    7a58:	d01a      	beq.n	7a90 <hci_event+0x62>
    7a5a:	2b3e      	cmp	r3, #62	; 0x3e
    7a5c:	d110      	bne.n	7a80 <hci_event+0x52>
		hci_le_meta_event(buf);
    7a5e:	4620      	mov	r0, r4
    7a60:	f7ff ffaa 	bl	79b8 <hci_le_meta_event>
		break;
    7a64:	e00c      	b.n	7a80 <hci_event+0x52>
	default:
		return false;
    7a66:	2300      	movs	r3, #0
    7a68:	e7eb      	b.n	7a42 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    7a6a:	4040      	eors	r0, r0
    7a6c:	f380 8811 	msr	BASEPRI, r0
    7a70:	f04f 0004 	mov.w	r0, #4
    7a74:	df02      	svc	2
	switch (hdr->evt) {
    7a76:	2b05      	cmp	r3, #5
    7a78:	d102      	bne.n	7a80 <hci_event+0x52>
		hci_disconn_complete(buf);
    7a7a:	4620      	mov	r0, r4
    7a7c:	f7ff fa54 	bl	6f28 <hci_disconn_complete>
	net_buf_unref(buf);
    7a80:	4620      	mov	r0, r4
    7a82:	f014 fbf7 	bl	1c274 <net_buf_unref>
    7a86:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    7a88:	4620      	mov	r0, r4
    7a8a:	f7fe fa56 	bl	5f3a <hci_encrypt_change>
		break;
    7a8e:	e7f7      	b.n	7a80 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    7a90:	4620      	mov	r0, r4
    7a92:	f7fe fa7a 	bl	5f8a <hci_encrypt_key_refresh_complete>
		break;
    7a96:	e7f3      	b.n	7a80 <hci_event+0x52>

00007a98 <send_cmd>:
{
    7a98:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7a9a:	2100      	movs	r1, #0
    7a9c:	4820      	ldr	r0, [pc, #128]	; (7b20 <send_cmd+0x88>)
    7a9e:	f014 fbbc 	bl	1c21a <net_buf_get>
	BT_ASSERT(buf);
    7aa2:	b1d0      	cbz	r0, 7ada <send_cmd+0x42>
    7aa4:	4604      	mov	r4, r0
    7aa6:	4d1f      	ldr	r5, [pc, #124]	; (7b24 <send_cmd+0x8c>)
    7aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7aac:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    7ab0:	f023 f844 	bl	2ab3c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7ab4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7ab8:	b120      	cbz	r0, 7ac4 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    7aba:	f014 fbdb 	bl	1c274 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7abe:	2200      	movs	r2, #0
    7ac0:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    7ac4:	4620      	mov	r0, r4
    7ac6:	f014 fbf1 	bl	1c2ac <net_buf_ref>
    7aca:	4b16      	ldr	r3, [pc, #88]	; (7b24 <send_cmd+0x8c>)
    7acc:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    7ad0:	4620      	mov	r0, r4
    7ad2:	f7ff f913 	bl	6cfc <bt_send>
	if (err) {
    7ad6:	b930      	cbnz	r0, 7ae6 <send_cmd+0x4e>
    7ad8:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    7ada:	4040      	eors	r0, r0
    7adc:	f380 8811 	msr	BASEPRI, r0
    7ae0:	f04f 0004 	mov.w	r0, #4
    7ae4:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7ae6:	4d0f      	ldr	r5, [pc, #60]	; (7b24 <send_cmd+0x8c>)
    7ae8:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    7aec:	f023 f813 	bl	2ab16 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    7af0:	f104 0310 	add.w	r3, r4, #16
    7af4:	89e2      	ldrh	r2, [r4, #14]
    7af6:	4413      	add	r3, r2
    7af8:	3303      	adds	r3, #3
    7afa:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    7afe:	2200      	movs	r2, #0
    7b00:	211f      	movs	r1, #31
    7b02:	8858      	ldrh	r0, [r3, #2]
    7b04:	f7fe fb10 	bl	6128 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7b08:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    7b0c:	f014 fbb2 	bl	1c274 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7b10:	2300      	movs	r3, #0
    7b12:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    7b16:	4620      	mov	r0, r4
    7b18:	f014 fbac 	bl	1c274 <net_buf_unref>
}
    7b1c:	e7dc      	b.n	7ad8 <send_cmd+0x40>
    7b1e:	bf00      	nop
    7b20:	2000b9e4 	.word	0x2000b9e4
    7b24:	2000b910 	.word	0x2000b910

00007b28 <process_events>:
{
    7b28:	b538      	push	{r3, r4, r5, lr}
    7b2a:	4604      	mov	r4, r0
    7b2c:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    7b2e:	e003      	b.n	7b38 <process_events+0x10>
				send_cmd();
    7b30:	f7ff ffb2 	bl	7a98 <send_cmd>
	for (; count; ev++, count--) {
    7b34:	3414      	adds	r4, #20
    7b36:	3d01      	subs	r5, #1
    7b38:	b1a5      	cbz	r5, 7b64 <process_events+0x3c>
		switch (ev->state) {
    7b3a:	7b63      	ldrb	r3, [r4, #13]
    7b3c:	091b      	lsrs	r3, r3, #4
    7b3e:	2b04      	cmp	r3, #4
    7b40:	d1f8      	bne.n	7b34 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7b42:	7b23      	ldrb	r3, [r4, #12]
    7b44:	2b00      	cmp	r3, #0
    7b46:	d0f3      	beq.n	7b30 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    7b48:	2b01      	cmp	r3, #1
    7b4a:	d006      	beq.n	7b5a <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7b4c:	2b02      	cmp	r3, #2
    7b4e:	d1f1      	bne.n	7b34 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    7b50:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    7b52:	382c      	subs	r0, #44	; 0x2c
    7b54:	f001 f9c8 	bl	8ee8 <bt_conn_process_tx>
    7b58:	e7ec      	b.n	7b34 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    7b5a:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    7b5c:	381c      	subs	r0, #28
    7b5e:	f000 fd65 	bl	862c <bt_conn_notify_tx>
    7b62:	e7e7      	b.n	7b34 <process_events+0xc>
}
    7b64:	bd38      	pop	{r3, r4, r5, pc}
	...

00007b68 <hci_tx_thread>:
{
    7b68:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    7b6a:	4c0f      	ldr	r4, [pc, #60]	; (7ba8 <hci_tx_thread+0x40>)
    7b6c:	7b63      	ldrb	r3, [r4, #13]
    7b6e:	f36f 1307 	bfc	r3, #4, #4
    7b72:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    7b74:	f104 0014 	add.w	r0, r4, #20
    7b78:	f000 feca 	bl	8910 <bt_conn_prepare_events>
    7b7c:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    7b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b82:	4629      	mov	r1, r5
    7b84:	4620      	mov	r0, r4
    7b86:	f022 f925 	bl	29dd4 <k_poll>
		BT_ASSERT(err == 0);
    7b8a:	b930      	cbnz	r0, 7b9a <hci_tx_thread+0x32>
		process_events(events, ev_count);
    7b8c:	4629      	mov	r1, r5
    7b8e:	4806      	ldr	r0, [pc, #24]	; (7ba8 <hci_tx_thread+0x40>)
    7b90:	f7ff ffca 	bl	7b28 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    7b94:	f022 fe66 	bl	2a864 <_impl_k_yield>
    7b98:	e7e7      	b.n	7b6a <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    7b9a:	4040      	eors	r0, r0
    7b9c:	f380 8811 	msr	BASEPRI, r0
    7ba0:	f04f 0004 	mov.w	r0, #4
    7ba4:	df02      	svc	2
    7ba6:	bf00      	nop
    7ba8:	2000b9f8 	.word	0x2000b9f8

00007bac <bt_recv>:
{
    7bac:	b510      	push	{r4, lr}
    7bae:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    7bb0:	7980      	ldrb	r0, [r0, #6]
    7bb2:	f014 fae5 	bl	1c180 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7bb6:	8ac3      	ldrh	r3, [r0, #22]
    7bb8:	2b03      	cmp	r3, #3
    7bba:	d910      	bls.n	7bde <bt_recv+0x32>
    7bbc:	f104 0310 	add.w	r3, r4, #16
    7bc0:	89e2      	ldrh	r2, [r4, #14]
    7bc2:	4413      	add	r3, r2
    7bc4:	3303      	adds	r3, #3
    7bc6:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    7bca:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    7bcc:	2b01      	cmp	r3, #1
    7bce:	d00c      	beq.n	7bea <bt_recv+0x3e>
    7bd0:	2b03      	cmp	r3, #3
    7bd2:	d10f      	bne.n	7bf4 <bt_recv+0x48>
		hci_acl(buf);
    7bd4:	4620      	mov	r0, r4
    7bd6:	f7fe f949 	bl	5e6c <hci_acl>
		return 0;
    7bda:	2000      	movs	r0, #0
    7bdc:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    7bde:	4620      	mov	r0, r4
    7be0:	f014 fb48 	bl	1c274 <net_buf_unref>
		return -EINVAL;
    7be4:	f06f 0015 	mvn.w	r0, #21
    7be8:	bd10      	pop	{r4, pc}
		hci_event(buf);
    7bea:	4620      	mov	r0, r4
    7bec:	f7ff ff1f 	bl	7a2e <hci_event>
		return 0;
    7bf0:	2000      	movs	r0, #0
    7bf2:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    7bf4:	4620      	mov	r0, r4
    7bf6:	f014 fb3d 	bl	1c274 <net_buf_unref>
		return -EINVAL;
    7bfa:	f06f 0015 	mvn.w	r0, #21
}
    7bfe:	bd10      	pop	{r4, pc}

00007c00 <bt_recv_prio>:
{
    7c00:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    7c02:	6885      	ldr	r5, [r0, #8]
    7c04:	f100 0310 	add.w	r3, r0, #16
    7c08:	89c2      	ldrh	r2, [r0, #14]
    7c0a:	4413      	add	r3, r2
    7c0c:	3303      	adds	r3, #3
    7c0e:	f023 0303 	bic.w	r3, r3, #3
    7c12:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7c14:	2b01      	cmp	r3, #1
    7c16:	d120      	bne.n	7c5a <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7c18:	8983      	ldrh	r3, [r0, #12]
    7c1a:	2b01      	cmp	r3, #1
    7c1c:	d923      	bls.n	7c66 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7c1e:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    7c20:	2b0e      	cmp	r3, #14
    7c22:	d326      	bcc.n	7c72 <bt_recv_prio+0x72>
    7c24:	2b0f      	cmp	r3, #15
    7c26:	d901      	bls.n	7c2c <bt_recv_prio+0x2c>
    7c28:	2b13      	cmp	r3, #19
    7c2a:	d122      	bne.n	7c72 <bt_recv_prio+0x72>
		return true;
    7c2c:	2301      	movs	r3, #1
    7c2e:	b313      	cbz	r3, 7c76 <bt_recv_prio+0x76>
    7c30:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    7c32:	2102      	movs	r1, #2
    7c34:	3008      	adds	r0, #8
    7c36:	f014 fbb6 	bl	1c3a6 <net_buf_simple_pull>
	switch (hdr->evt) {
    7c3a:	782b      	ldrb	r3, [r5, #0]
    7c3c:	2b0f      	cmp	r3, #15
    7c3e:	d028      	beq.n	7c92 <bt_recv_prio+0x92>
    7c40:	2b13      	cmp	r3, #19
    7c42:	d02a      	beq.n	7c9a <bt_recv_prio+0x9a>
    7c44:	2b0e      	cmp	r3, #14
    7c46:	d01c      	beq.n	7c82 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    7c48:	4620      	mov	r0, r4
    7c4a:	f014 fb13 	bl	1c274 <net_buf_unref>
		BT_ASSERT(0);
    7c4e:	4040      	eors	r0, r0
    7c50:	f380 8811 	msr	BASEPRI, r0
    7c54:	f04f 0004 	mov.w	r0, #4
    7c58:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    7c5a:	4040      	eors	r0, r0
    7c5c:	f380 8811 	msr	BASEPRI, r0
    7c60:	f04f 0004 	mov.w	r0, #4
    7c64:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    7c66:	4040      	eors	r0, r0
    7c68:	f380 8811 	msr	BASEPRI, r0
    7c6c:	f04f 0004 	mov.w	r0, #4
    7c70:	df02      	svc	2
		return false;
    7c72:	2300      	movs	r3, #0
    7c74:	e7db      	b.n	7c2e <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    7c76:	4040      	eors	r0, r0
    7c78:	f380 8811 	msr	BASEPRI, r0
    7c7c:	f04f 0004 	mov.w	r0, #4
    7c80:	df02      	svc	2
		hci_cmd_complete(buf);
    7c82:	4620      	mov	r0, r4
    7c84:	f7fe fa70 	bl	6168 <hci_cmd_complete>
	net_buf_unref(buf);
    7c88:	4620      	mov	r0, r4
    7c8a:	f014 faf3 	bl	1c274 <net_buf_unref>
}
    7c8e:	2000      	movs	r0, #0
    7c90:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    7c92:	4620      	mov	r0, r4
    7c94:	f7fe fa80 	bl	6198 <hci_cmd_status>
		break;
    7c98:	e7f6      	b.n	7c88 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    7c9a:	4620      	mov	r0, r4
    7c9c:	f7fe fa92 	bl	61c4 <hci_num_completed_packets>
		break;
    7ca0:	e7f2      	b.n	7c88 <bt_recv_prio+0x88>
	...

00007ca4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    7ca4:	4b0a      	ldr	r3, [pc, #40]	; (7cd0 <bt_hci_driver_register+0x2c>)
    7ca6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    7caa:	b943      	cbnz	r3, 7cbe <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    7cac:	6883      	ldr	r3, [r0, #8]
    7cae:	b14b      	cbz	r3, 7cc4 <bt_hci_driver_register+0x20>
    7cb0:	68c3      	ldr	r3, [r0, #12]
    7cb2:	b153      	cbz	r3, 7cca <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    7cb4:	4b06      	ldr	r3, [pc, #24]	; (7cd0 <bt_hci_driver_register+0x2c>)
    7cb6:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    7cba:	2000      	movs	r0, #0
    7cbc:	4770      	bx	lr
		return -EALREADY;
    7cbe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7cc2:	4770      	bx	lr
		return -EINVAL;
    7cc4:	f06f 0015 	mvn.w	r0, #21
    7cc8:	4770      	bx	lr
    7cca:	f06f 0015 	mvn.w	r0, #21
}
    7cce:	4770      	bx	lr
    7cd0:	2000b910 	.word	0x2000b910

00007cd4 <bt_enable>:
{
    7cd4:	b530      	push	{r4, r5, lr}
    7cd6:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    7cd8:	4b29      	ldr	r3, [pc, #164]	; (7d80 <bt_enable+0xac>)
    7cda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d047      	beq.n	7d72 <bt_enable+0x9e>
    7ce2:	4b28      	ldr	r3, [pc, #160]	; (7d84 <bt_enable+0xb0>)
    7ce4:	f3bf 8f5b 	dmb	ish
    7ce8:	e853 2f00 	ldrex	r2, [r3]
    7cec:	f042 0101 	orr.w	r1, r2, #1
    7cf0:	e843 1400 	strex	r4, r1, [r3]
    7cf4:	2c00      	cmp	r4, #0
    7cf6:	d1f7      	bne.n	7ce8 <bt_enable+0x14>
    7cf8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7cfc:	f012 0f01 	tst.w	r2, #1
    7d00:	d13a      	bne.n	7d78 <bt_enable+0xa4>
    7d02:	4604      	mov	r4, r0
	ready_cb = cb;
    7d04:	4b20      	ldr	r3, [pc, #128]	; (7d88 <bt_enable+0xb4>)
    7d06:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    7d08:	2300      	movs	r3, #0
    7d0a:	9305      	str	r3, [sp, #20]
    7d0c:	9304      	str	r3, [sp, #16]
    7d0e:	f06f 0208 	mvn.w	r2, #8
    7d12:	9203      	str	r2, [sp, #12]
    7d14:	9302      	str	r3, [sp, #8]
    7d16:	9301      	str	r3, [sp, #4]
    7d18:	9300      	str	r3, [sp, #0]
    7d1a:	4b1c      	ldr	r3, [pc, #112]	; (7d8c <bt_enable+0xb8>)
    7d1c:	f44f 7220 	mov.w	r2, #640	; 0x280
    7d20:	491b      	ldr	r1, [pc, #108]	; (7d90 <bt_enable+0xbc>)
    7d22:	481c      	ldr	r0, [pc, #112]	; (7d94 <bt_enable+0xc0>)
    7d24:	f023 f976 	bl	2b014 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    7d28:	4b15      	ldr	r3, [pc, #84]	; (7d80 <bt_enable+0xac>)
    7d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    7d2e:	689b      	ldr	r3, [r3, #8]
    7d30:	4798      	blx	r3
	if (err) {
    7d32:	4605      	mov	r5, r0
    7d34:	b980      	cbnz	r0, 7d58 <bt_enable+0x84>
	if (!cb) {
    7d36:	b194      	cbz	r4, 7d5e <bt_enable+0x8a>
    7d38:	4b17      	ldr	r3, [pc, #92]	; (7d98 <bt_enable+0xc4>)
    7d3a:	f3bf 8f5b 	dmb	ish
    7d3e:	e853 2f00 	ldrex	r2, [r3]
    7d42:	f042 0101 	orr.w	r1, r2, #1
    7d46:	e843 1000 	strex	r0, r1, [r3]
    7d4a:	2800      	cmp	r0, #0
    7d4c:	d1f7      	bne.n	7d3e <bt_enable+0x6a>
    7d4e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7d52:	f012 0f01 	tst.w	r2, #1
    7d56:	d006      	beq.n	7d66 <bt_enable+0x92>
}
    7d58:	4628      	mov	r0, r5
    7d5a:	b007      	add	sp, #28
    7d5c:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    7d5e:	f7ff f8bb 	bl	6ed8 <bt_init>
    7d62:	4605      	mov	r5, r0
    7d64:	e7f8      	b.n	7d58 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    7d66:	f1a3 0108 	sub.w	r1, r3, #8
    7d6a:	480c      	ldr	r0, [pc, #48]	; (7d9c <bt_enable+0xc8>)
    7d6c:	f022 fb3c 	bl	2a3e8 <k_queue_append>
    7d70:	e7f2      	b.n	7d58 <bt_enable+0x84>
		return -ENODEV;
    7d72:	f06f 0512 	mvn.w	r5, #18
    7d76:	e7ef      	b.n	7d58 <bt_enable+0x84>
		return -EALREADY;
    7d78:	f06f 0577 	mvn.w	r5, #119	; 0x77
    7d7c:	e7ec      	b.n	7d58 <bt_enable+0x84>
    7d7e:	bf00      	nop
    7d80:	2000b910 	.word	0x2000b910
    7d84:	2000b980 	.word	0x2000b980
    7d88:	200003b0 	.word	0x200003b0
    7d8c:	00007b69 	.word	0x00007b69
    7d90:	20003ca0 	.word	0x20003ca0
    7d94:	200003b8 	.word	0x200003b8
    7d98:	2000b97c 	.word	0x2000b97c
    7d9c:	20002c00 	.word	0x20002c00

00007da0 <bt_addr_le_is_bonded>:
{
    7da0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    7da2:	f006 fd51 	bl	e848 <bt_keys_find_addr>
		return keys && keys->keys;
    7da6:	b118      	cbz	r0, 7db0 <bt_addr_le_is_bonded+0x10>
    7da8:	8983      	ldrh	r3, [r0, #12]
    7daa:	b91b      	cbnz	r3, 7db4 <bt_addr_le_is_bonded+0x14>
    7dac:	2000      	movs	r0, #0
    7dae:	bd08      	pop	{r3, pc}
    7db0:	2000      	movs	r0, #0
    7db2:	bd08      	pop	{r3, pc}
    7db4:	2001      	movs	r0, #1
}
    7db6:	bd08      	pop	{r3, pc}

00007db8 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dbc:	4605      	mov	r5, r0
    7dbe:	460c      	mov	r4, r1
    7dc0:	4617      	mov	r7, r2
    7dc2:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    7dc4:	f7fd ff88 	bl	5cd8 <valid_adv_param>
    7dc8:	2800      	cmp	r0, #0
    7dca:	f000 808d 	beq.w	7ee8 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7dce:	f3bf 8f5b 	dmb	ish
    7dd2:	4b4b      	ldr	r3, [pc, #300]	; (7f00 <bt_le_adv_start+0x148>)
    7dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7dd6:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7dda:	f013 0f20 	tst.w	r3, #32
    7dde:	f040 8086 	bne.w	7eee <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    7de2:	463a      	mov	r2, r7
    7de4:	4621      	mov	r1, r4
    7de6:	f242 0008 	movw	r0, #8200	; 0x2008
    7dea:	f7fe fe52 	bl	6a92 <set_ad>
	if (err) {
    7dee:	4604      	mov	r4, r0
    7df0:	2800      	cmp	r0, #0
    7df2:	d13b      	bne.n	7e6c <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7df4:	2e00      	cmp	r6, #0
    7df6:	d03c      	beq.n	7e72 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    7df8:	9a06      	ldr	r2, [sp, #24]
    7dfa:	4631      	mov	r1, r6
    7dfc:	f242 0009 	movw	r0, #8201	; 0x2009
    7e00:	f7fe fe47 	bl	6a92 <set_ad>
		if (err) {
    7e04:	4604      	mov	r4, r0
    7e06:	bb88      	cbnz	r0, 7e6c <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    7e08:	210f      	movs	r1, #15
    7e0a:	f242 0006 	movw	r0, #8198	; 0x2006
    7e0e:	f7fe fa21 	bl	6254 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    7e12:	4680      	mov	r8, r0
    7e14:	2800      	cmp	r0, #0
    7e16:	d06d      	beq.n	7ef4 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    7e18:	210f      	movs	r1, #15
    7e1a:	3008      	adds	r0, #8
    7e1c:	f014 fa76 	bl	1c30c <net_buf_simple_add>
    7e20:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    7e22:	220f      	movs	r2, #15
    7e24:	2100      	movs	r1, #0
    7e26:	f024 f929 	bl	2c07c <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    7e2a:	886b      	ldrh	r3, [r5, #2]
    7e2c:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    7e2e:	88ab      	ldrh	r3, [r5, #4]
    7e30:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    7e32:	2307      	movs	r3, #7
    7e34:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7e36:	782b      	ldrb	r3, [r5, #0]
    7e38:	f013 0f01 	tst.w	r3, #1
    7e3c:	d11e      	bne.n	7e7c <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    7e3e:	68a8      	ldr	r0, [r5, #8]
    7e40:	b378      	cbz	r0, 7ea2 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    7e42:	7943      	ldrb	r3, [r0, #5]
    7e44:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7e48:	d157      	bne.n	7efa <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    7e4a:	f7fe fd0b 	bl	6864 <set_random_address>
    7e4e:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    7e50:	bb5c      	cbnz	r4, 7eaa <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    7e52:	2301      	movs	r3, #1
    7e54:	717b      	strb	r3, [r7, #5]

		if (sd) {
    7e56:	b366      	cbz	r6, 7eb2 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    7e58:	2302      	movs	r3, #2
    7e5a:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    7e5c:	2200      	movs	r2, #0
    7e5e:	4641      	mov	r1, r8
    7e60:	f242 0006 	movw	r0, #8198	; 0x2006
    7e64:	f7fe fa22 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    7e68:	4604      	mov	r4, r0
    7e6a:	b328      	cbz	r0, 7eb8 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    7e6c:	4620      	mov	r0, r4
    7e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7e72:	782b      	ldrb	r3, [r5, #0]
    7e74:	f013 0f01 	tst.w	r3, #1
    7e78:	d0c6      	beq.n	7e08 <bt_le_adv_start+0x50>
    7e7a:	e7bd      	b.n	7df8 <bt_le_adv_start+0x40>
    7e7c:	f3bf 8f5b 	dmb	ish
    7e80:	4b1f      	ldr	r3, [pc, #124]	; (7f00 <bt_le_adv_start+0x148>)
    7e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7e84:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    7e88:	f013 0f04 	tst.w	r3, #4
    7e8c:	d105      	bne.n	7e9a <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    7e8e:	4b1c      	ldr	r3, [pc, #112]	; (7f00 <bt_le_adv_start+0x148>)
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    7e94:	2300      	movs	r3, #0
    7e96:	713b      	strb	r3, [r7, #4]
    7e98:	e7e0      	b.n	7e5c <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    7e9a:	481a      	ldr	r0, [pc, #104]	; (7f04 <bt_le_adv_start+0x14c>)
    7e9c:	f7fe fce2 	bl	6864 <set_random_address>
    7ea0:	e7f5      	b.n	7e8e <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    7ea2:	f7fe fd0f 	bl	68c4 <le_set_private_addr>
    7ea6:	4604      	mov	r4, r0
    7ea8:	e7d2      	b.n	7e50 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    7eaa:	4640      	mov	r0, r8
    7eac:	f014 f9e2 	bl	1c274 <net_buf_unref>
			return err;
    7eb0:	e7dc      	b.n	7e6c <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    7eb2:	2303      	movs	r3, #3
    7eb4:	713b      	strb	r3, [r7, #4]
    7eb6:	e7d1      	b.n	7e5c <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    7eb8:	2001      	movs	r0, #1
    7eba:	f7fe fd71 	bl	69a0 <set_advertise_enable>
	if (err) {
    7ebe:	4604      	mov	r4, r0
    7ec0:	2800      	cmp	r0, #0
    7ec2:	d1d3      	bne.n	7e6c <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7ec4:	782b      	ldrb	r3, [r5, #0]
    7ec6:	f013 0f02 	tst.w	r3, #2
    7eca:	d1cf      	bne.n	7e6c <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ecc:	4b0e      	ldr	r3, [pc, #56]	; (7f08 <bt_le_adv_start+0x150>)
    7ece:	f3bf 8f5b 	dmb	ish
    7ed2:	e853 2f00 	ldrex	r2, [r3]
    7ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7eda:	e843 2100 	strex	r1, r2, [r3]
    7ede:	2900      	cmp	r1, #0
    7ee0:	d1f7      	bne.n	7ed2 <bt_le_adv_start+0x11a>
    7ee2:	f3bf 8f5b 	dmb	ish
    7ee6:	e7c1      	b.n	7e6c <bt_le_adv_start+0xb4>
		return -EINVAL;
    7ee8:	f06f 0415 	mvn.w	r4, #21
    7eec:	e7be      	b.n	7e6c <bt_le_adv_start+0xb4>
		return -EALREADY;
    7eee:	f06f 0477 	mvn.w	r4, #119	; 0x77
    7ef2:	e7bb      	b.n	7e6c <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    7ef4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7ef8:	e7b8      	b.n	7e6c <bt_le_adv_start+0xb4>
				return -EINVAL;
    7efa:	f06f 0415 	mvn.w	r4, #21
    7efe:	e7b5      	b.n	7e6c <bt_le_adv_start+0xb4>
    7f00:	2000b910 	.word	0x2000b910
    7f04:	2000b911 	.word	0x2000b911
    7f08:	2000b980 	.word	0x2000b980

00007f0c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7f0c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f0e:	4b16      	ldr	r3, [pc, #88]	; (7f68 <bt_le_adv_stop+0x5c>)
    7f10:	f103 0270 	add.w	r2, r3, #112	; 0x70
    7f14:	f3bf 8f5b 	dmb	ish
    7f18:	e852 1f00 	ldrex	r1, [r2]
    7f1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7f20:	e842 1000 	strex	r0, r1, [r2]
    7f24:	2800      	cmp	r0, #0
    7f26:	d1f7      	bne.n	7f18 <bt_le_adv_stop+0xc>
    7f28:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7f2c:	f3bf 8f5b 	dmb	ish
    7f30:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    7f32:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    7f36:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    7f3a:	b90c      	cbnz	r4, 7f40 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    7f3c:	4620      	mov	r0, r4
    7f3e:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    7f40:	2000      	movs	r0, #0
    7f42:	f7fe fd2d 	bl	69a0 <set_advertise_enable>
	if (err) {
    7f46:	4604      	mov	r4, r0
    7f48:	2800      	cmp	r0, #0
    7f4a:	d1f7      	bne.n	7f3c <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7f4c:	f3bf 8f5b 	dmb	ish
    7f50:	4b05      	ldr	r3, [pc, #20]	; (7f68 <bt_le_adv_stop+0x5c>)
    7f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7f54:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    7f58:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    7f5c:	b90b      	cbnz	r3, 7f62 <bt_le_adv_stop+0x56>
	return 0;
    7f5e:	461c      	mov	r4, r3
    7f60:	e7ec      	b.n	7f3c <bt_le_adv_stop+0x30>
			le_set_private_addr();
    7f62:	f7fe fcaf 	bl	68c4 <le_set_private_addr>
    7f66:	e7e9      	b.n	7f3c <bt_le_adv_stop+0x30>
    7f68:	2000b910 	.word	0x2000b910

00007f6c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    7f6c:	b538      	push	{r3, r4, r5, lr}
    7f6e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    7f70:	4808      	ldr	r0, [pc, #32]	; (7f94 <bt_buf_get_rx+0x28>)
    7f72:	f014 f911 	bl	1c198 <net_buf_alloc>
#endif

	if (buf) {
    7f76:	4604      	mov	r4, r0
    7f78:	b150      	cbz	r0, 7f90 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7f7a:	2100      	movs	r1, #0
    7f7c:	f014 f967 	bl	1c24e <net_buf_reserve>
    7f80:	f104 0310 	add.w	r3, r4, #16
    7f84:	89e2      	ldrh	r2, [r4, #14]
    7f86:	4413      	add	r3, r2
    7f88:	3303      	adds	r3, #3
    7f8a:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    7f8e:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7f90:	4620      	mov	r0, r4
    7f92:	bd38      	pop	{r3, r4, r5, pc}
    7f94:	2000d1d0 	.word	0x2000d1d0

00007f98 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    7f98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7f9a:	f04f 0320 	mov.w	r3, #32
    7f9e:	f3ef 8211 	mrs	r2, BASEPRI
    7fa2:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    7fa6:	4b0f      	ldr	r3, [pc, #60]	; (7fe4 <bt_buf_get_cmd_complete+0x4c>)
    7fa8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    7fac:	2500      	movs	r5, #0
    7fae:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    7fb2:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    7fb6:	b17c      	cbz	r4, 7fd8 <bt_buf_get_cmd_complete+0x40>
    7fb8:	f104 0310 	add.w	r3, r4, #16
    7fbc:	89e2      	ldrh	r2, [r4, #14]
    7fbe:	4413      	add	r3, r2
    7fc0:	3303      	adds	r3, #3
    7fc2:	f023 0303 	bic.w	r3, r3, #3
    7fc6:	2201      	movs	r2, #1
    7fc8:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    7fca:	4629      	mov	r1, r5
    7fcc:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    7fce:	4620      	mov	r0, r4
    7fd0:	f014 f93d 	bl	1c24e <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    7fd4:	4620      	mov	r0, r4
    7fd6:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7fd8:	4601      	mov	r1, r0
    7fda:	2001      	movs	r0, #1
    7fdc:	f7ff ffc6 	bl	7f6c <bt_buf_get_rx>
    7fe0:	4604      	mov	r4, r0
    7fe2:	e7f7      	b.n	7fd4 <bt_buf_get_cmd_complete+0x3c>
    7fe4:	2000b910 	.word	0x2000b910

00007fe8 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7fe8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    7fea:	4b29      	ldr	r3, [pc, #164]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    7fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    7ff0:	f003 0306 	and.w	r3, r3, #6
    7ff4:	2b06      	cmp	r3, #6
    7ff6:	d148      	bne.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    7ff8:	4b26      	ldr	r3, [pc, #152]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    7ffa:	681a      	ldr	r2, [r3, #0]
    7ffc:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    7ffe:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8000:	4b25      	ldr	r3, [pc, #148]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    8002:	f3bf 8f5b 	dmb	ish
    8006:	e853 2f00 	ldrex	r2, [r3]
    800a:	f042 0110 	orr.w	r1, r2, #16
    800e:	e843 1400 	strex	r4, r1, [r3]
    8012:	2c00      	cmp	r4, #0
    8014:	d1f7      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    8016:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    801a:	f012 0f10 	tst.w	r2, #16
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
		return 0;
    8020:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    8022:	4630      	mov	r0, r6
    8024:	bd70      	pop	{r4, r5, r6, pc}
    8026:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8028:	f3bf 8f5b 	dmb	ish
    802c:	e853 2f00 	ldrex	r2, [r3]
    8030:	f022 0208 	bic.w	r2, r2, #8
    8034:	e843 2100 	strex	r1, r2, [r3]
    8038:	2900      	cmp	r1, #0
    803a:	d1f7      	bne.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    803c:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    8040:	2200      	movs	r2, #0
    8042:	4611      	mov	r1, r2
    8044:	f242 0025 	movw	r0, #8229	; 0x2025
    8048:	f7fe f930 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    804c:	4606      	mov	r6, r0
    804e:	b910      	cbnz	r0, 8056 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x56>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8050:	4b10      	ldr	r3, [pc, #64]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    8052:	681c      	ldr	r4, [r3, #0]
    8054:	e011      	b.n	807a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a>
    8056:	4b10      	ldr	r3, [pc, #64]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    8058:	f3bf 8f5b 	dmb	ish
    805c:	e853 2f00 	ldrex	r2, [r3]
    8060:	f022 0210 	bic.w	r2, r2, #16
    8064:	e843 2100 	strex	r1, r2, [r3]
    8068:	2900      	cmp	r1, #0
    806a:	d1f7      	bne.n	805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>
    806c:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    8070:	2200      	movs	r2, #0
    8072:	4b08      	ldr	r3, [pc, #32]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    8074:	601a      	str	r2, [r3, #0]
		return err;
    8076:	e7d4      	b.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8078:	6864      	ldr	r4, [r4, #4]
    807a:	2c00      	cmp	r4, #0
    807c:	d0d1      	beq.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
		if (cb != new_cb) {
    807e:	42ac      	cmp	r4, r5
    8080:	d0fa      	beq.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
			cb->func(NULL);
    8082:	6823      	ldr	r3, [r4, #0]
    8084:	2000      	movs	r0, #0
    8086:	4798      	blx	r3
    8088:	e7f6      	b.n	8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
		return -ENOTSUP;
    808a:	f06f 0685 	mvn.w	r6, #133	; 0x85
    808e:	e7c8      	b.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
    8090:	2000b910 	.word	0x2000b910
    8094:	200003ac 	.word	0x200003ac
    8098:	2000b980 	.word	0x2000b980

0000809c <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    809c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    809e:	4b21      	ldr	r3, [pc, #132]	; (8124 <bt_dh_key_gen+0x88>)
    80a0:	681b      	ldr	r3, [r3, #0]
    80a2:	bbab      	cbnz	r3, 8110 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    80a4:	f3bf 8f5b 	dmb	ish
    80a8:	4b1f      	ldr	r3, [pc, #124]	; (8128 <bt_dh_key_gen+0x8c>)
    80aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    80ac:	f3bf 8f5b 	dmb	ish
    80b0:	f013 0f10 	tst.w	r3, #16
    80b4:	d130      	bne.n	8118 <bt_dh_key_gen+0x7c>
    80b6:	f3bf 8f5b 	dmb	ish
    80ba:	4b1b      	ldr	r3, [pc, #108]	; (8128 <bt_dh_key_gen+0x8c>)
    80bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    80be:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    80c2:	f013 0f08 	tst.w	r3, #8
    80c6:	d02a      	beq.n	811e <bt_dh_key_gen+0x82>
    80c8:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    80ca:	4b16      	ldr	r3, [pc, #88]	; (8124 <bt_dh_key_gen+0x88>)
    80cc:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    80ce:	2140      	movs	r1, #64	; 0x40
    80d0:	f242 0026 	movw	r0, #8230	; 0x2026
    80d4:	f7fe f8be 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    80d8:	4605      	mov	r5, r0
    80da:	b198      	cbz	r0, 8104 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    80dc:	2140      	movs	r1, #64	; 0x40
    80de:	3008      	adds	r0, #8
    80e0:	f014 f914 	bl	1c30c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    80e4:	2240      	movs	r2, #64	; 0x40
    80e6:	4621      	mov	r1, r4
    80e8:	f7f8 f8ea 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    80ec:	2200      	movs	r2, #0
    80ee:	4629      	mov	r1, r5
    80f0:	f242 0026 	movw	r0, #8230	; 0x2026
    80f4:	f7fe f8da 	bl	62ac <bt_hci_cmd_send_sync>
	if (err) {
    80f8:	4603      	mov	r3, r0
    80fa:	b158      	cbz	r0, 8114 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    80fc:	2100      	movs	r1, #0
    80fe:	4a09      	ldr	r2, [pc, #36]	; (8124 <bt_dh_key_gen+0x88>)
    8100:	6011      	str	r1, [r2, #0]
		return err;
    8102:	e007      	b.n	8114 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    8104:	2200      	movs	r2, #0
    8106:	4b07      	ldr	r3, [pc, #28]	; (8124 <bt_dh_key_gen+0x88>)
    8108:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    810a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    810e:	e001      	b.n	8114 <bt_dh_key_gen+0x78>
		return -EBUSY;
    8110:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    8114:	4618      	mov	r0, r3
    8116:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    8118:	f06f 030f 	mvn.w	r3, #15
    811c:	e7fa      	b.n	8114 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    811e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    8122:	e7f7      	b.n	8114 <bt_dh_key_gen+0x78>
    8124:	20000368 	.word	0x20000368
    8128:	2000b910 	.word	0x2000b910

0000812c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    812c:	b538      	push	{r3, r4, r5, lr}
    812e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    8130:	4b06      	ldr	r3, [pc, #24]	; (814c <notify_connected+0x20>)
    8132:	681c      	ldr	r4, [r3, #0]
    8134:	e000      	b.n	8138 <notify_connected+0xc>
    8136:	69a4      	ldr	r4, [r4, #24]
    8138:	b134      	cbz	r4, 8148 <notify_connected+0x1c>
		if (cb->connected) {
    813a:	6823      	ldr	r3, [r4, #0]
    813c:	2b00      	cmp	r3, #0
    813e:	d0fa      	beq.n	8136 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    8140:	7ae9      	ldrb	r1, [r5, #11]
    8142:	4628      	mov	r0, r5
    8144:	4798      	blx	r3
    8146:	e7f6      	b.n	8136 <notify_connected+0xa>
		}
	}
}
    8148:	bd38      	pop	{r3, r4, r5, pc}
    814a:	bf00      	nop
    814c:	20000488 	.word	0x20000488

00008150 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    8150:	b538      	push	{r3, r4, r5, lr}
    8152:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    8154:	4b06      	ldr	r3, [pc, #24]	; (8170 <notify_disconnected+0x20>)
    8156:	681c      	ldr	r4, [r3, #0]
    8158:	e000      	b.n	815c <notify_disconnected+0xc>
    815a:	69a4      	ldr	r4, [r4, #24]
    815c:	b134      	cbz	r4, 816c <notify_disconnected+0x1c>
		if (cb->disconnected) {
    815e:	6863      	ldr	r3, [r4, #4]
    8160:	2b00      	cmp	r3, #0
    8162:	d0fa      	beq.n	815a <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    8164:	7ae9      	ldrb	r1, [r5, #11]
    8166:	4628      	mov	r0, r5
    8168:	4798      	blx	r3
    816a:	e7f6      	b.n	815a <notify_disconnected+0xa>
		}
	}
}
    816c:	bd38      	pop	{r3, r4, r5, pc}
    816e:	bf00      	nop
    8170:	20000488 	.word	0x20000488

00008174 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8174:	2300      	movs	r3, #0
    8176:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    8178:	4b04      	ldr	r3, [pc, #16]	; (818c <tx_free+0x18>)
    817a:	681a      	ldr	r2, [r3, #0]
    817c:	6002      	str	r2, [r0, #0]
	list->head = node;
    817e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    8180:	685b      	ldr	r3, [r3, #4]
    8182:	b103      	cbz	r3, 8186 <tx_free+0x12>
    8184:	4770      	bx	lr
		list->tail = list->head;
    8186:	4b01      	ldr	r3, [pc, #4]	; (818c <tx_free+0x18>)
    8188:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    818a:	e7fb      	b.n	8184 <tx_free+0x10>
    818c:	20000628 	.word	0x20000628

00008190 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    8190:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    8192:	4a0f      	ldr	r2, [pc, #60]	; (81d0 <add_pending_tx+0x40>)
    8194:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    8196:	681c      	ldr	r4, [r3, #0]
    8198:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    819a:	6852      	ldr	r2, [r2, #4]
    819c:	4293      	cmp	r3, r2
    819e:	d011      	beq.n	81c4 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    81a0:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    81a2:	f04f 0220 	mov.w	r2, #32
    81a6:	f3ef 8111 	mrs	r1, BASEPRI
    81aa:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    81ae:	2200      	movs	r2, #0
    81b0:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    81b2:	6982      	ldr	r2, [r0, #24]
    81b4:	b14a      	cbz	r2, 81ca <add_pending_tx+0x3a>
		list->tail->next = node;
    81b6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    81b8:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    81ba:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    81be:	4618      	mov	r0, r3
    81c0:	bc10      	pop	{r4}
    81c2:	4770      	bx	lr
		list->tail = list->head;
    81c4:	4a02      	ldr	r2, [pc, #8]	; (81d0 <add_pending_tx+0x40>)
    81c6:	6054      	str	r4, [r2, #4]
    81c8:	e7ea      	b.n	81a0 <add_pending_tx+0x10>
		list->tail = node;
    81ca:	6183      	str	r3, [r0, #24]
		list->head = node;
    81cc:	6143      	str	r3, [r0, #20]
    81ce:	e7f4      	b.n	81ba <add_pending_tx+0x2a>
    81d0:	20000628 	.word	0x20000628

000081d4 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    81d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    81d6:	f04f 0320 	mov.w	r3, #32
    81da:	f3ef 8411 	mrs	r4, BASEPRI
    81de:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    81e2:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    81e4:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    81e6:	b163      	cbz	r3, 8202 <remove_pending_tx+0x2e>
		if (test == node) {
    81e8:	4299      	cmp	r1, r3
    81ea:	d002      	beq.n	81f2 <remove_pending_tx+0x1e>
		prev = test;
    81ec:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    81ee:	681b      	ldr	r3, [r3, #0]
    81f0:	e7f9      	b.n	81e6 <remove_pending_tx+0x12>
	if (!prev_node) {
    81f2:	b162      	cbz	r2, 820e <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    81f4:	680b      	ldr	r3, [r1, #0]
    81f6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    81f8:	6983      	ldr	r3, [r0, #24]
    81fa:	4299      	cmp	r1, r3
    81fc:	d00e      	beq.n	821c <remove_pending_tx+0x48>
	node->next = NULL;
    81fe:	2300      	movs	r3, #0
    8200:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    8202:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    8206:	4608      	mov	r0, r1
    8208:	f7ff ffb4 	bl	8174 <tx_free>
    820c:	bd10      	pop	{r4, pc}
		list->head = node->next;
    820e:	680b      	ldr	r3, [r1, #0]
    8210:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    8212:	6982      	ldr	r2, [r0, #24]
    8214:	4291      	cmp	r1, r2
    8216:	d1f2      	bne.n	81fe <remove_pending_tx+0x2a>
			list->tail = list->head;
    8218:	6183      	str	r3, [r0, #24]
    821a:	e7f0      	b.n	81fe <remove_pending_tx+0x2a>
			list->tail = prev_node;
    821c:	6182      	str	r2, [r0, #24]
    821e:	e7ee      	b.n	81fe <remove_pending_tx+0x2a>

00008220 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    8220:	884b      	ldrh	r3, [r1, #2]
    8222:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    8226:	888b      	ldrh	r3, [r1, #4]
    8228:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    822c:	88cb      	ldrh	r3, [r1, #6]
    822e:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    8232:	4770      	bx	lr

00008234 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    8234:	89c3      	ldrh	r3, [r0, #14]
    8236:	b903      	cbnz	r3, 823a <bt_conn_reset_rx_state+0x6>
    8238:	4770      	bx	lr
{
    823a:	b510      	push	{r4, lr}
    823c:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    823e:	6900      	ldr	r0, [r0, #16]
    8240:	f014 f818 	bl	1c274 <net_buf_unref>
	conn->rx = NULL;
    8244:	2300      	movs	r3, #0
    8246:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    8248:	81e3      	strh	r3, [r4, #14]
    824a:	bd10      	pop	{r4, pc}

0000824c <conn_new>:
{
    824c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    824e:	2300      	movs	r3, #0
    8250:	b1ab      	cbz	r3, 827e <conn_new+0x32>
	struct bt_conn *conn = NULL;
    8252:	2400      	movs	r4, #0
	if (!conn) {
    8254:	b18c      	cbz	r4, 827a <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    8256:	229c      	movs	r2, #156	; 0x9c
    8258:	2100      	movs	r1, #0
    825a:	4620      	mov	r0, r4
    825c:	f023 ff0e 	bl	2c07c <memset>
	atomic_set(&conn->ref, 1);
    8260:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8264:	2201      	movs	r2, #1
    8266:	f3bf 8f5b 	dmb	ish
    826a:	e853 1f00 	ldrex	r1, [r3]
    826e:	e843 2000 	strex	r0, r2, [r3]
    8272:	2800      	cmp	r0, #0
    8274:	d1f9      	bne.n	826a <conn_new+0x1e>
    8276:	f3bf 8f5b 	dmb	ish
}
    827a:	4620      	mov	r0, r4
    827c:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    827e:	229c      	movs	r2, #156	; 0x9c
    8280:	fb02 f203 	mul.w	r2, r2, r3
    8284:	3240      	adds	r2, #64	; 0x40
    8286:	4907      	ldr	r1, [pc, #28]	; (82a4 <conn_new+0x58>)
    8288:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    828a:	f3bf 8f5b 	dmb	ish
    828e:	6852      	ldr	r2, [r2, #4]
    8290:	f3bf 8f5b 	dmb	ish
    8294:	b10a      	cbz	r2, 829a <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8296:	3301      	adds	r3, #1
    8298:	e7da      	b.n	8250 <conn_new+0x4>
			conn = &conns[i];
    829a:	229c      	movs	r2, #156	; 0x9c
    829c:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    82a0:	e7d8      	b.n	8254 <conn_new+0x8>
    82a2:	bf00      	nop
    82a4:	2000049c 	.word	0x2000049c

000082a8 <bt_conn_get_pkts>:
}
    82a8:	4800      	ldr	r0, [pc, #0]	; (82ac <bt_conn_get_pkts+0x4>)
    82aa:	4770      	bx	lr
    82ac:	2000b99c 	.word	0x2000b99c

000082b0 <process_unack_tx>:
{
    82b0:	b510      	push	{r4, lr}
    82b2:	4604      	mov	r4, r0
    82b4:	e009      	b.n	82ca <process_unack_tx+0x1a>
    82b6:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    82ba:	b1b0      	cbz	r0, 82ea <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    82bc:	f7ff ff5a 	bl	8174 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    82c0:	4620      	mov	r0, r4
    82c2:	f7ff fff1 	bl	82a8 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    82c6:	f022 fc26 	bl	2ab16 <_impl_k_sem_give>
	__asm__ volatile(
    82ca:	f04f 0220 	mov.w	r2, #32
    82ce:	f3ef 8311 	mrs	r3, BASEPRI
    82d2:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    82d6:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    82d8:	2800      	cmp	r0, #0
    82da:	d0ec      	beq.n	82b6 <process_unack_tx+0x6>
	list->head = node->next;
    82dc:	6802      	ldr	r2, [r0, #0]
    82de:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    82e0:	69a1      	ldr	r1, [r4, #24]
    82e2:	4288      	cmp	r0, r1
    82e4:	d1e7      	bne.n	82b6 <process_unack_tx+0x6>
		list->tail = list->head;
    82e6:	61a2      	str	r2, [r4, #24]
    82e8:	e7e5      	b.n	82b6 <process_unack_tx+0x6>
    82ea:	bd10      	pop	{r4, pc}

000082ec <notify_le_param_updated>:
{
    82ec:	b570      	push	{r4, r5, r6, lr}
    82ee:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    82f0:	4b08      	ldr	r3, [pc, #32]	; (8314 <notify_le_param_updated+0x28>)
    82f2:	681c      	ldr	r4, [r3, #0]
    82f4:	e000      	b.n	82f8 <notify_le_param_updated+0xc>
    82f6:	69a4      	ldr	r4, [r4, #24]
    82f8:	b15c      	cbz	r4, 8312 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    82fa:	68e6      	ldr	r6, [r4, #12]
    82fc:	2e00      	cmp	r6, #0
    82fe:	d0fa      	beq.n	82f6 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    8300:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    8304:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    8308:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    830c:	4628      	mov	r0, r5
    830e:	47b0      	blx	r6
    8310:	e7f1      	b.n	82f6 <notify_le_param_updated+0xa>
}
    8312:	bd70      	pop	{r4, r5, r6, pc}
    8314:	20000488 	.word	0x20000488

00008318 <le_param_req>:
{
    8318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    831a:	4606      	mov	r6, r0
    831c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    831e:	4608      	mov	r0, r1
    8320:	f7fe fc02 	bl	6b28 <bt_le_conn_params_valid>
    8324:	4607      	mov	r7, r0
    8326:	b198      	cbz	r0, 8350 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    8328:	4b0a      	ldr	r3, [pc, #40]	; (8354 <le_param_req+0x3c>)
    832a:	681c      	ldr	r4, [r3, #0]
    832c:	e000      	b.n	8330 <le_param_req+0x18>
    832e:	69a4      	ldr	r4, [r4, #24]
    8330:	b174      	cbz	r4, 8350 <le_param_req+0x38>
		if (!cb->le_param_req) {
    8332:	68a3      	ldr	r3, [r4, #8]
    8334:	2b00      	cmp	r3, #0
    8336:	d0fa      	beq.n	832e <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    8338:	4629      	mov	r1, r5
    833a:	4630      	mov	r0, r6
    833c:	4798      	blx	r3
    833e:	b130      	cbz	r0, 834e <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    8340:	4628      	mov	r0, r5
    8342:	f7fe fbf1 	bl	6b28 <bt_le_conn_params_valid>
    8346:	2800      	cmp	r0, #0
    8348:	d1f1      	bne.n	832e <le_param_req+0x16>
			return false;
    834a:	4607      	mov	r7, r0
    834c:	e000      	b.n	8350 <le_param_req+0x38>
			return false;
    834e:	4607      	mov	r7, r0
}
    8350:	4638      	mov	r0, r7
    8352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8354:	20000488 	.word	0x20000488

00008358 <bt_conn_identity_resolved>:
{
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    835c:	78c3      	ldrb	r3, [r0, #3]
    835e:	b923      	cbnz	r3, 836a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    8360:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    8364:	4b08      	ldr	r3, [pc, #32]	; (8388 <bt_conn_identity_resolved+0x30>)
    8366:	681c      	ldr	r4, [r3, #0]
    8368:	e003      	b.n	8372 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    836a:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    836e:	e7f9      	b.n	8364 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    8370:	69a4      	ldr	r4, [r4, #24]
    8372:	b144      	cbz	r4, 8386 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    8374:	6923      	ldr	r3, [r4, #16]
    8376:	2b00      	cmp	r3, #0
    8378:	d0fa      	beq.n	8370 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    837a:	f105 0248 	add.w	r2, r5, #72	; 0x48
    837e:	4631      	mov	r1, r6
    8380:	4628      	mov	r0, r5
    8382:	4798      	blx	r3
    8384:	e7f4      	b.n	8370 <bt_conn_identity_resolved+0x18>
}
    8386:	bd70      	pop	{r4, r5, r6, pc}
    8388:	20000488 	.word	0x20000488

0000838c <bt_conn_le_start_encryption>:
{
    838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8390:	4680      	mov	r8, r0
    8392:	4617      	mov	r7, r2
    8394:	461c      	mov	r4, r3
    8396:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    8398:	211c      	movs	r1, #28
    839a:	f242 0019 	movw	r0, #8217	; 0x2019
    839e:	f7fd ff59 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    83a2:	b338      	cbz	r0, 83f4 <bt_conn_le_start_encryption+0x68>
    83a4:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    83a6:	211c      	movs	r1, #28
    83a8:	3008      	adds	r0, #8
    83aa:	f013 ffaf 	bl	1c30c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    83ae:	f8b8 2000 	ldrh.w	r2, [r8]
    83b2:	4603      	mov	r3, r0
    83b4:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    83b8:	f8c0 7002 	str.w	r7, [r0, #2]
    83bc:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    83be:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    83c2:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    83c4:	f100 040c 	add.w	r4, r0, #12
    83c8:	462a      	mov	r2, r5
    83ca:	9907      	ldr	r1, [sp, #28]
    83cc:	4620      	mov	r0, r4
    83ce:	f7f7 ff77 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    83d2:	2d0f      	cmp	r5, #15
    83d4:	d907      	bls.n	83e6 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    83d6:	2200      	movs	r2, #0
    83d8:	4631      	mov	r1, r6
    83da:	f242 0019 	movw	r0, #8217	; 0x2019
    83de:	f7fd ff65 	bl	62ac <bt_hci_cmd_send_sync>
    83e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    83e6:	f1c5 0210 	rsb	r2, r5, #16
    83ea:	2100      	movs	r1, #0
    83ec:	1960      	adds	r0, r4, r5
    83ee:	f023 fe45 	bl	2c07c <memset>
    83f2:	e7f0      	b.n	83d6 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    83f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    83f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000083fc <start_security>:
{
    83fc:	b530      	push	{r4, r5, lr}
    83fe:	b085      	sub	sp, #20
    8400:	4604      	mov	r4, r0
	switch (conn->role) {
    8402:	78c3      	ldrb	r3, [r0, #3]
    8404:	b123      	cbz	r3, 8410 <start_security+0x14>
    8406:	2b01      	cmp	r3, #1
    8408:	d052      	beq.n	84b0 <start_security+0xb4>
		return -EINVAL;
    840a:	f06f 0015 	mvn.w	r0, #21
    840e:	e051      	b.n	84b4 <start_security+0xb8>
		if (!conn->le.keys) {
    8410:	6f03      	ldr	r3, [r0, #112]	; 0x70
    8412:	b353      	cbz	r3, 846a <start_security+0x6e>
		if (!conn->le.keys ||
    8414:	6f23      	ldr	r3, [r4, #112]	; 0x70
    8416:	2b00      	cmp	r3, #0
    8418:	d036      	beq.n	8488 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    841a:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    841c:	f012 0f24 	tst.w	r2, #36	; 0x24
    8420:	d032      	beq.n	8488 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    8422:	7a62      	ldrb	r2, [r4, #9]
    8424:	2a02      	cmp	r2, #2
    8426:	d833      	bhi.n	8490 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    8428:	7a63      	ldrb	r3, [r4, #9]
    842a:	2b03      	cmp	r3, #3
    842c:	d90d      	bls.n	844a <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    842e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    8430:	f3bf 8f5b 	dmb	ish
    8434:	689b      	ldr	r3, [r3, #8]
    8436:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    843a:	f013 0f01 	tst.w	r3, #1
    843e:	d104      	bne.n	844a <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    8440:	6f23      	ldr	r3, [r4, #112]	; 0x70
    8442:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    8444:	f013 0f20 	tst.w	r3, #32
    8448:	d02e      	beq.n	84a8 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    844a:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    844c:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    8450:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    8452:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    8456:	9502      	str	r5, [sp, #8]
    8458:	9201      	str	r2, [sp, #4]
    845a:	8b1b      	ldrh	r3, [r3, #24]
    845c:	9300      	str	r3, [sp, #0]
    845e:	4602      	mov	r2, r0
    8460:	460b      	mov	r3, r1
    8462:	4620      	mov	r0, r4
    8464:	f7ff ff92 	bl	838c <bt_conn_le_start_encryption>
    8468:	e024      	b.n	84b4 <start_security+0xb8>
						     &conn->le.dst);
    846a:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    846e:	4629      	mov	r1, r5
    8470:	2020      	movs	r0, #32
    8472:	f006 f96d 	bl	e750 <bt_keys_find>
    8476:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    8478:	2800      	cmp	r0, #0
    847a:	d1cb      	bne.n	8414 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    847c:	4629      	mov	r1, r5
    847e:	2004      	movs	r0, #4
    8480:	f006 f966 	bl	e750 <bt_keys_find>
    8484:	6720      	str	r0, [r4, #112]	; 0x70
    8486:	e7c5      	b.n	8414 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    8488:	4620      	mov	r0, r4
    848a:	f005 ff14 	bl	e2b6 <bt_smp_send_pairing_req>
    848e:	e011      	b.n	84b4 <start_security+0xb8>
    8490:	f3bf 8f5b 	dmb	ish
    8494:	689b      	ldr	r3, [r3, #8]
    8496:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    849a:	f013 0f01 	tst.w	r3, #1
    849e:	d1c3      	bne.n	8428 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    84a0:	4620      	mov	r0, r4
    84a2:	f005 ff08 	bl	e2b6 <bt_smp_send_pairing_req>
    84a6:	e005      	b.n	84b4 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    84a8:	4620      	mov	r0, r4
    84aa:	f005 ff04 	bl	e2b6 <bt_smp_send_pairing_req>
    84ae:	e001      	b.n	84b4 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    84b0:	f005 feae 	bl	e210 <bt_smp_send_security_req>
}
    84b4:	b005      	add	sp, #20
    84b6:	bd30      	pop	{r4, r5, pc}

000084b8 <bt_conn_security_changed>:
{
    84b8:	b538      	push	{r3, r4, r5, lr}
    84ba:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    84bc:	4b06      	ldr	r3, [pc, #24]	; (84d8 <bt_conn_security_changed+0x20>)
    84be:	681c      	ldr	r4, [r3, #0]
    84c0:	e000      	b.n	84c4 <bt_conn_security_changed+0xc>
    84c2:	69a4      	ldr	r4, [r4, #24]
    84c4:	b134      	cbz	r4, 84d4 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    84c6:	6963      	ldr	r3, [r4, #20]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d0fa      	beq.n	84c2 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    84cc:	7a29      	ldrb	r1, [r5, #8]
    84ce:	4628      	mov	r0, r5
    84d0:	4798      	blx	r3
    84d2:	e7f6      	b.n	84c2 <bt_conn_security_changed+0xa>
}
    84d4:	bd38      	pop	{r3, r4, r5, pc}
    84d6:	bf00      	nop
    84d8:	20000488 	.word	0x20000488

000084dc <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    84dc:	7b03      	ldrb	r3, [r0, #12]
    84de:	2b03      	cmp	r3, #3
    84e0:	d112      	bne.n	8508 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    84e2:	7a03      	ldrb	r3, [r0, #8]
    84e4:	428b      	cmp	r3, r1
    84e6:	d212      	bcs.n	850e <bt_conn_security+0x32>
    84e8:	7a43      	ldrb	r3, [r0, #9]
    84ea:	4299      	cmp	r1, r3
    84ec:	d801      	bhi.n	84f2 <bt_conn_security+0x16>
		return 0;
    84ee:	2300      	movs	r3, #0
    84f0:	e00e      	b.n	8510 <bt_conn_security+0x34>
{
    84f2:	b510      	push	{r4, lr}
    84f4:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    84f6:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    84f8:	f7ff ff80 	bl	83fc <start_security>
	if (err) {
    84fc:	4603      	mov	r3, r0
    84fe:	b108      	cbz	r0, 8504 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    8500:	7a22      	ldrb	r2, [r4, #8]
    8502:	7262      	strb	r2, [r4, #9]
}
    8504:	4618      	mov	r0, r3
    8506:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    8508:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    850c:	e000      	b.n	8510 <bt_conn_security+0x34>
		return 0;
    850e:	2300      	movs	r3, #0
}
    8510:	4618      	mov	r0, r3
    8512:	4770      	bx	lr

00008514 <bt_conn_cb_register>:
	cb->_next = callback_list;
    8514:	4b02      	ldr	r3, [pc, #8]	; (8520 <bt_conn_cb_register+0xc>)
    8516:	681a      	ldr	r2, [r3, #0]
    8518:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    851a:	6018      	str	r0, [r3, #0]
    851c:	4770      	bx	lr
    851e:	bf00      	nop
    8520:	20000488 	.word	0x20000488

00008524 <bt_conn_recv>:
{
    8524:	b570      	push	{r4, r5, r6, lr}
    8526:	4605      	mov	r5, r0
    8528:	460c      	mov	r4, r1
	switch (flags) {
    852a:	2a01      	cmp	r2, #1
    852c:	d01a      	beq.n	8564 <bt_conn_recv+0x40>
    852e:	2a02      	cmp	r2, #2
    8530:	d149      	bne.n	85c6 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    8532:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    8534:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    8536:	89c3      	ldrh	r3, [r0, #14]
    8538:	b97b      	cbnz	r3, 855a <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    853a:	89a3      	ldrh	r3, [r4, #12]
    853c:	1af3      	subs	r3, r6, r3
    853e:	3304      	adds	r3, #4
    8540:	b29b      	uxth	r3, r3
    8542:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    8544:	b963      	cbnz	r3, 8560 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    8546:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    8548:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    854a:	3304      	adds	r3, #4
    854c:	89a2      	ldrh	r2, [r4, #12]
    854e:	4293      	cmp	r3, r2
    8550:	d03f      	beq.n	85d2 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    8552:	4620      	mov	r0, r4
    8554:	f013 fe8e 	bl	1c274 <net_buf_unref>
		return;
    8558:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    855a:	f7ff fe6b 	bl	8234 <bt_conn_reset_rx_state>
    855e:	e7ec      	b.n	853a <bt_conn_recv+0x16>
			conn->rx = buf;
    8560:	612c      	str	r4, [r5, #16]
			return;
    8562:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    8564:	89c3      	ldrh	r3, [r0, #14]
    8566:	b1db      	cbz	r3, 85a0 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    8568:	898e      	ldrh	r6, [r1, #12]
    856a:	42b3      	cmp	r3, r6
    856c:	d31e      	bcc.n	85ac <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    856e:	6900      	ldr	r0, [r0, #16]
    8570:	3008      	adds	r0, #8
    8572:	f013 ff34 	bl	1c3de <net_buf_simple_tailroom>
    8576:	4286      	cmp	r6, r0
    8578:	d81e      	bhi.n	85b8 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    857a:	6928      	ldr	r0, [r5, #16]
    857c:	89a2      	ldrh	r2, [r4, #12]
    857e:	68a1      	ldr	r1, [r4, #8]
    8580:	3008      	adds	r0, #8
    8582:	f013 fec9 	bl	1c318 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    8586:	89a2      	ldrh	r2, [r4, #12]
    8588:	89eb      	ldrh	r3, [r5, #14]
    858a:	1a9b      	subs	r3, r3, r2
    858c:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    858e:	4620      	mov	r0, r4
    8590:	f013 fe70 	bl	1c274 <net_buf_unref>
		if (conn->rx_len) {
    8594:	89eb      	ldrh	r3, [r5, #14]
    8596:	bb03      	cbnz	r3, 85da <bt_conn_recv+0xb6>
		buf = conn->rx;
    8598:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    859a:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    859c:	81eb      	strh	r3, [r5, #14]
		break;
    859e:	e7d2      	b.n	8546 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    85a0:	f7ff fe48 	bl	8234 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    85a4:	4620      	mov	r0, r4
    85a6:	f013 fe65 	bl	1c274 <net_buf_unref>
			return;
    85aa:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    85ac:	f7ff fe42 	bl	8234 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    85b0:	4620      	mov	r0, r4
    85b2:	f013 fe5f 	bl	1c274 <net_buf_unref>
			return;
    85b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    85b8:	4628      	mov	r0, r5
    85ba:	f7ff fe3b 	bl	8234 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    85be:	4620      	mov	r0, r4
    85c0:	f013 fe58 	bl	1c274 <net_buf_unref>
			return;
    85c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    85c6:	f7ff fe35 	bl	8234 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    85ca:	4620      	mov	r0, r4
    85cc:	f013 fe52 	bl	1c274 <net_buf_unref>
		return;
    85d0:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    85d2:	4621      	mov	r1, r4
    85d4:	4628      	mov	r0, r5
    85d6:	f001 fd06 	bl	9fe6 <bt_l2cap_recv>
    85da:	bd70      	pop	{r4, r5, r6, pc}

000085dc <bt_conn_send_cb>:
{
    85dc:	b570      	push	{r4, r5, r6, lr}
    85de:	4605      	mov	r5, r0
    85e0:	460c      	mov	r4, r1
    85e2:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    85e4:	7988      	ldrb	r0, [r1, #6]
    85e6:	f013 fdcb 	bl	1c180 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    85ea:	8ac3      	ldrh	r3, [r0, #22]
    85ec:	2b03      	cmp	r3, #3
    85ee:	d911      	bls.n	8614 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    85f0:	7b2b      	ldrb	r3, [r5, #12]
    85f2:	2b03      	cmp	r3, #3
    85f4:	d114      	bne.n	8620 <bt_conn_send_cb+0x44>
    85f6:	f104 0310 	add.w	r3, r4, #16
    85fa:	89e2      	ldrh	r2, [r4, #14]
    85fc:	4413      	add	r3, r2
    85fe:	3303      	adds	r3, #3
    8600:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    8604:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    8606:	4621      	mov	r1, r4
    8608:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    860c:	f013 fe24 	bl	1c258 <net_buf_put>
	return 0;
    8610:	2000      	movs	r0, #0
}
    8612:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8614:	4620      	mov	r0, r4
    8616:	f013 fe2d 	bl	1c274 <net_buf_unref>
		return -EINVAL;
    861a:	f06f 0015 	mvn.w	r0, #21
    861e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8620:	4620      	mov	r0, r4
    8622:	f013 fe27 	bl	1c274 <net_buf_unref>
		return -ENOTCONN;
    8626:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    862a:	bd70      	pop	{r4, r5, r6, pc}

0000862c <bt_conn_notify_tx>:
{
    862c:	b538      	push	{r3, r4, r5, lr}
    862e:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    8630:	e002      	b.n	8638 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    8632:	4620      	mov	r0, r4
    8634:	f7ff fd9e 	bl	8174 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    8638:	2100      	movs	r1, #0
    863a:	f105 001c 	add.w	r0, r5, #28
    863e:	f021 fefb 	bl	2a438 <k_queue_get>
    8642:	4604      	mov	r4, r0
    8644:	b128      	cbz	r0, 8652 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    8646:	6863      	ldr	r3, [r4, #4]
    8648:	2b00      	cmp	r3, #0
    864a:	d0f2      	beq.n	8632 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    864c:	4628      	mov	r0, r5
    864e:	4798      	blx	r3
    8650:	e7ef      	b.n	8632 <bt_conn_notify_tx+0x6>
}
    8652:	bd38      	pop	{r3, r4, r5, pc}

00008654 <notify_tx>:
{
    8654:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8656:	2400      	movs	r4, #0
    8658:	b104      	cbz	r4, 865c <notify_tx+0x8>
}
    865a:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    865c:	239c      	movs	r3, #156	; 0x9c
    865e:	fb03 f304 	mul.w	r3, r3, r4
    8662:	3340      	adds	r3, #64	; 0x40
    8664:	4a0b      	ldr	r2, [pc, #44]	; (8694 <notify_tx+0x40>)
    8666:	4413      	add	r3, r2
    8668:	f3bf 8f5b 	dmb	ish
    866c:	685b      	ldr	r3, [r3, #4]
    866e:	f3bf 8f5b 	dmb	ish
    8672:	b13b      	cbz	r3, 8684 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    8674:	239c      	movs	r3, #156	; 0x9c
    8676:	fb03 2304 	mla	r3, r3, r4, r2
    867a:	7b1b      	ldrb	r3, [r3, #12]
    867c:	3b03      	subs	r3, #3
    867e:	b2db      	uxtb	r3, r3
    8680:	2b01      	cmp	r3, #1
    8682:	d901      	bls.n	8688 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8684:	3401      	adds	r4, #1
    8686:	e7e7      	b.n	8658 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    8688:	209c      	movs	r0, #156	; 0x9c
    868a:	fb00 2004 	mla	r0, r0, r4, r2
    868e:	f7ff ffcd 	bl	862c <bt_conn_notify_tx>
    8692:	e7f7      	b.n	8684 <notify_tx+0x30>
    8694:	2000049c 	.word	0x2000049c

00008698 <send_frag>:
{
    8698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    869c:	4606      	mov	r6, r0
    869e:	460d      	mov	r5, r1
    86a0:	4690      	mov	r8, r2
    86a2:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    86a4:	f7ff fe00 	bl	82a8 <bt_conn_get_pkts>
    86a8:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    86aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    86ae:	f022 fa45 	bl	2ab3c <_impl_k_sem_take>
	notify_tx();
    86b2:	f7ff ffcf 	bl	8654 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    86b6:	7b33      	ldrb	r3, [r6, #12]
    86b8:	2b03      	cmp	r3, #3
    86ba:	d006      	beq.n	86ca <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    86bc:	4638      	mov	r0, r7
    86be:	f022 fa2a 	bl	2ab16 <_impl_k_sem_give>
	if (always_consume) {
    86c2:	bb4c      	cbnz	r4, 8718 <send_frag+0x80>
}
    86c4:	4620      	mov	r0, r4
    86c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    86ca:	2104      	movs	r1, #4
    86cc:	f105 0008 	add.w	r0, r5, #8
    86d0:	f013 fe53 	bl	1c37a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    86d4:	f9b6 3000 	ldrsh.w	r3, [r6]
    86d8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    86dc:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    86e0:	89ab      	ldrh	r3, [r5, #12]
    86e2:	3b04      	subs	r3, #4
    86e4:	8043      	strh	r3, [r0, #2]
    86e6:	f105 0310 	add.w	r3, r5, #16
    86ea:	89ea      	ldrh	r2, [r5, #14]
    86ec:	4413      	add	r3, r2
    86ee:	3303      	adds	r3, #3
    86f0:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    86f4:	6819      	ldr	r1, [r3, #0]
    86f6:	2202      	movs	r2, #2
    86f8:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    86fa:	4630      	mov	r0, r6
    86fc:	f7ff fd48 	bl	8190 <add_pending_tx>
    8700:	4680      	mov	r8, r0
	err = bt_send(buf);
    8702:	4628      	mov	r0, r5
    8704:	f7fe fafa 	bl	6cfc <bt_send>
	if (err) {
    8708:	b908      	cbnz	r0, 870e <send_frag+0x76>
	return true;
    870a:	2401      	movs	r4, #1
    870c:	e7da      	b.n	86c4 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    870e:	4641      	mov	r1, r8
    8710:	4630      	mov	r0, r6
    8712:	f7ff fd5f 	bl	81d4 <remove_pending_tx>
		goto fail;
    8716:	e7d1      	b.n	86bc <send_frag+0x24>
		net_buf_unref(buf);
    8718:	4628      	mov	r0, r5
    871a:	f013 fdab 	bl	1c274 <net_buf_unref>
	return false;
    871e:	2400      	movs	r4, #0
    8720:	e7d0      	b.n	86c4 <send_frag+0x2c>
	...

00008724 <bt_conn_add_le>:
{
    8724:	b538      	push	{r3, r4, r5, lr}
    8726:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    8728:	f7ff fd90 	bl	824c <conn_new>
	if (!conn) {
    872c:	4604      	mov	r4, r0
    872e:	b1a0      	cbz	r0, 875a <bt_conn_add_le+0x36>
    8730:	2207      	movs	r2, #7
    8732:	4629      	mov	r1, r5
    8734:	3048      	adds	r0, #72	; 0x48
    8736:	f7f7 fdc3 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    873a:	2301      	movs	r3, #1
    873c:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    873e:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    8740:	2300      	movs	r3, #0
    8742:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    8744:	2318      	movs	r3, #24
    8746:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    874a:	2328      	movs	r3, #40	; 0x28
    874c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    8750:	4903      	ldr	r1, [pc, #12]	; (8760 <bt_conn_add_le+0x3c>)
    8752:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8756:	f022 ffaf 	bl	2b6b8 <k_delayed_work_init>
}
    875a:	4620      	mov	r0, r4
    875c:	bd38      	pop	{r3, r4, r5, pc}
    875e:	bf00      	nop
    8760:	00008d61 	.word	0x00008d61

00008764 <bt_conn_addr_le_cmp>:
{
    8764:	b538      	push	{r3, r4, r5, lr}
    8766:	4604      	mov	r4, r0
    8768:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    876a:	2207      	movs	r2, #7
    876c:	f100 0148 	add.w	r1, r0, #72	; 0x48
    8770:	4628      	mov	r0, r5
    8772:	f023 fbef 	bl	2bf54 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    8776:	4603      	mov	r3, r0
    8778:	b140      	cbz	r0, 878c <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    877a:	78e3      	ldrb	r3, [r4, #3]
    877c:	b143      	cbz	r3, 8790 <bt_conn_addr_le_cmp+0x2c>
    877e:	2207      	movs	r2, #7
    8780:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    8784:	4628      	mov	r0, r5
    8786:	f023 fbe5 	bl	2bf54 <memcmp>
    878a:	4603      	mov	r3, r0
}
    878c:	4618      	mov	r0, r3
    878e:	bd38      	pop	{r3, r4, r5, pc}
    8790:	2207      	movs	r2, #7
    8792:	f104 0156 	add.w	r1, r4, #86	; 0x56
    8796:	4628      	mov	r0, r5
    8798:	f023 fbdc 	bl	2bf54 <memcmp>
    879c:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    879e:	e7f5      	b.n	878c <bt_conn_addr_le_cmp+0x28>

000087a0 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    87a0:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    87a4:	f3bf 8f5b 	dmb	ish
    87a8:	e853 2f00 	ldrex	r2, [r3]
    87ac:	3201      	adds	r2, #1
    87ae:	e843 2100 	strex	r1, r2, [r3]
    87b2:	2900      	cmp	r1, #0
    87b4:	d1f8      	bne.n	87a8 <bt_conn_ref+0x8>
    87b6:	f3bf 8f5b 	dmb	ish
}
    87ba:	4770      	bx	lr

000087bc <bt_conn_lookup_handle>:
{
    87bc:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    87be:	2300      	movs	r3, #0
    87c0:	b10b      	cbz	r3, 87c6 <bt_conn_lookup_handle+0xa>
	return NULL;
    87c2:	2000      	movs	r0, #0
}
    87c4:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    87c6:	229c      	movs	r2, #156	; 0x9c
    87c8:	fb02 f203 	mul.w	r2, r2, r3
    87cc:	3240      	adds	r2, #64	; 0x40
    87ce:	490f      	ldr	r1, [pc, #60]	; (880c <bt_conn_lookup_handle+0x50>)
    87d0:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    87d2:	f3bf 8f5b 	dmb	ish
    87d6:	6852      	ldr	r2, [r2, #4]
    87d8:	f3bf 8f5b 	dmb	ish
    87dc:	b13a      	cbz	r2, 87ee <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    87de:	229c      	movs	r2, #156	; 0x9c
    87e0:	fb02 1203 	mla	r2, r2, r3, r1
    87e4:	7b12      	ldrb	r2, [r2, #12]
    87e6:	3a03      	subs	r2, #3
    87e8:	b2d2      	uxtb	r2, r2
    87ea:	2a01      	cmp	r2, #1
    87ec:	d901      	bls.n	87f2 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    87ee:	3301      	adds	r3, #1
    87f0:	e7e6      	b.n	87c0 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    87f2:	229c      	movs	r2, #156	; 0x9c
    87f4:	fb02 f203 	mul.w	r2, r2, r3
    87f8:	5a8a      	ldrh	r2, [r1, r2]
    87fa:	4282      	cmp	r2, r0
    87fc:	d1f7      	bne.n	87ee <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    87fe:	209c      	movs	r0, #156	; 0x9c
    8800:	fb00 1003 	mla	r0, r0, r3, r1
    8804:	f7ff ffcc 	bl	87a0 <bt_conn_ref>
    8808:	bd08      	pop	{r3, pc}
    880a:	bf00      	nop
    880c:	2000049c 	.word	0x2000049c

00008810 <bt_conn_lookup_addr_le>:
{
    8810:	b570      	push	{r4, r5, r6, lr}
    8812:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8814:	2400      	movs	r4, #0
    8816:	b10c      	cbz	r4, 881c <bt_conn_lookup_addr_le+0xc>
	return NULL;
    8818:	2000      	movs	r0, #0
}
    881a:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    881c:	239c      	movs	r3, #156	; 0x9c
    881e:	fb03 f304 	mul.w	r3, r3, r4
    8822:	3340      	adds	r3, #64	; 0x40
    8824:	4a0d      	ldr	r2, [pc, #52]	; (885c <bt_conn_lookup_addr_le+0x4c>)
    8826:	4413      	add	r3, r2
    8828:	f3bf 8f5b 	dmb	ish
    882c:	685b      	ldr	r3, [r3, #4]
    882e:	f3bf 8f5b 	dmb	ish
    8832:	b123      	cbz	r3, 883e <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8834:	239c      	movs	r3, #156	; 0x9c
    8836:	fb03 2304 	mla	r3, r3, r4, r2
    883a:	789b      	ldrb	r3, [r3, #2]
    883c:	b10b      	cbz	r3, 8842 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    883e:	3401      	adds	r4, #1
    8840:	e7e9      	b.n	8816 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    8842:	269c      	movs	r6, #156	; 0x9c
    8844:	fb06 2604 	mla	r6, r6, r4, r2
    8848:	4629      	mov	r1, r5
    884a:	4630      	mov	r0, r6
    884c:	f7ff ff8a 	bl	8764 <bt_conn_addr_le_cmp>
    8850:	2800      	cmp	r0, #0
    8852:	d1f4      	bne.n	883e <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    8854:	4630      	mov	r0, r6
    8856:	f7ff ffa3 	bl	87a0 <bt_conn_ref>
    885a:	bd70      	pop	{r4, r5, r6, pc}
    885c:	2000049c 	.word	0x2000049c

00008860 <bt_conn_lookup_state_le>:
{
    8860:	b570      	push	{r4, r5, r6, lr}
    8862:	4605      	mov	r5, r0
    8864:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8866:	2400      	movs	r4, #0
    8868:	b10c      	cbz	r4, 886e <bt_conn_lookup_state_le+0xe>
	return NULL;
    886a:	2000      	movs	r0, #0
}
    886c:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    886e:	239c      	movs	r3, #156	; 0x9c
    8870:	fb03 f304 	mul.w	r3, r3, r4
    8874:	3340      	adds	r3, #64	; 0x40
    8876:	4a12      	ldr	r2, [pc, #72]	; (88c0 <bt_conn_lookup_state_le+0x60>)
    8878:	4413      	add	r3, r2
    887a:	f3bf 8f5b 	dmb	ish
    887e:	685b      	ldr	r3, [r3, #4]
    8880:	f3bf 8f5b 	dmb	ish
    8884:	b19b      	cbz	r3, 88ae <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    8886:	239c      	movs	r3, #156	; 0x9c
    8888:	fb03 2304 	mla	r3, r3, r4, r2
    888c:	789b      	ldrb	r3, [r3, #2]
    888e:	b973      	cbnz	r3, 88ae <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    8890:	b135      	cbz	r5, 88a0 <bt_conn_lookup_state_le+0x40>
    8892:	4629      	mov	r1, r5
    8894:	209c      	movs	r0, #156	; 0x9c
    8896:	fb00 2004 	mla	r0, r0, r4, r2
    889a:	f7ff ff63 	bl	8764 <bt_conn_addr_le_cmp>
    889e:	b930      	cbnz	r0, 88ae <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    88a0:	239c      	movs	r3, #156	; 0x9c
    88a2:	4a07      	ldr	r2, [pc, #28]	; (88c0 <bt_conn_lookup_state_le+0x60>)
    88a4:	fb03 2304 	mla	r3, r3, r4, r2
    88a8:	7b1b      	ldrb	r3, [r3, #12]
    88aa:	42b3      	cmp	r3, r6
    88ac:	d001      	beq.n	88b2 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    88ae:	3401      	adds	r4, #1
    88b0:	e7da      	b.n	8868 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    88b2:	209c      	movs	r0, #156	; 0x9c
    88b4:	fb00 2004 	mla	r0, r0, r4, r2
    88b8:	f7ff ff72 	bl	87a0 <bt_conn_ref>
    88bc:	bd70      	pop	{r4, r5, r6, pc}
    88be:	bf00      	nop
    88c0:	2000049c 	.word	0x2000049c

000088c4 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    88c4:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    88c6:	f3bf 8f5b 	dmb	ish
    88ca:	e850 3f00 	ldrex	r3, [r0]
    88ce:	3b01      	subs	r3, #1
    88d0:	e840 3200 	strex	r2, r3, [r0]
    88d4:	2a00      	cmp	r2, #0
    88d6:	d1f8      	bne.n	88ca <bt_conn_unref+0x6>
    88d8:	f3bf 8f5b 	dmb	ish
    88dc:	4770      	bx	lr

000088de <conn_cleanup>:
{
    88de:	b510      	push	{r4, lr}
    88e0:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    88e2:	e002      	b.n	88ea <conn_cleanup+0xc>
		net_buf_unref(buf);
    88e4:	4618      	mov	r0, r3
    88e6:	f013 fcc5 	bl	1c274 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    88ea:	2100      	movs	r1, #0
    88ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    88f0:	f013 fc93 	bl	1c21a <net_buf_get>
    88f4:	4603      	mov	r3, r0
    88f6:	2800      	cmp	r0, #0
    88f8:	d1f4      	bne.n	88e4 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    88fa:	4620      	mov	r0, r4
    88fc:	f7ff fe96 	bl	862c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    8900:	4620      	mov	r0, r4
    8902:	f7ff fc97 	bl	8234 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    8906:	4620      	mov	r0, r4
    8908:	f7ff ffdc 	bl	88c4 <bt_conn_unref>
    890c:	bd10      	pop	{r4, pc}
	...

00008910 <bt_conn_prepare_events>:
{
    8910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8914:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    8916:	4b30      	ldr	r3, [pc, #192]	; (89d8 <bt_conn_prepare_events+0xc8>)
    8918:	2400      	movs	r4, #0
    891a:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    891c:	4622      	mov	r2, r4
    891e:	2101      	movs	r1, #1
    8920:	f021 fa44 	bl	29dac <k_poll_event_init>
    8924:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8926:	b114      	cbz	r4, 892e <bt_conn_prepare_events+0x1e>
}
    8928:	4628      	mov	r0, r5
    892a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    892e:	4a2b      	ldr	r2, [pc, #172]	; (89dc <bt_conn_prepare_events+0xcc>)
    8930:	239c      	movs	r3, #156	; 0x9c
    8932:	fb03 f304 	mul.w	r3, r3, r4
    8936:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    8938:	3340      	adds	r3, #64	; 0x40
    893a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    893c:	f3bf 8f5b 	dmb	ish
    8940:	685b      	ldr	r3, [r3, #4]
    8942:	f3bf 8f5b 	dmb	ish
    8946:	b143      	cbz	r3, 895a <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    8948:	7b03      	ldrb	r3, [r0, #12]
    894a:	b143      	cbz	r3, 895e <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    894c:	239c      	movs	r3, #156	; 0x9c
    894e:	4a23      	ldr	r2, [pc, #140]	; (89dc <bt_conn_prepare_events+0xcc>)
    8950:	fb03 2304 	mla	r3, r3, r4, r2
    8954:	7b1b      	ldrb	r3, [r3, #12]
    8956:	2b03      	cmp	r3, #3
    8958:	d015      	beq.n	8986 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    895a:	3401      	adds	r4, #1
    895c:	e7e3      	b.n	8926 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    895e:	4603      	mov	r3, r0
    8960:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8962:	f3bf 8f5b 	dmb	ish
    8966:	e853 2f00 	ldrex	r2, [r3]
    896a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    896e:	e843 1700 	strex	r7, r1, [r3]
    8972:	2f00      	cmp	r7, #0
    8974:	d1f7      	bne.n	8966 <bt_conn_prepare_events+0x56>
    8976:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    897a:	f012 0f40 	tst.w	r2, #64	; 0x40
    897e:	d0e5      	beq.n	894c <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    8980:	f7ff ffad 	bl	88de <conn_cleanup>
			continue;
    8984:	e7e9      	b.n	895a <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    8986:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    898a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    898e:	44b0      	add	r8, r6
				  &conn->tx_notify);
    8990:	4691      	mov	r9, r2
    8992:	279c      	movs	r7, #156	; 0x9c
    8994:	fb07 f704 	mul.w	r7, r7, r4
    8998:	f107 0318 	add.w	r3, r7, #24
    899c:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    899e:	3304      	adds	r3, #4
    89a0:	2200      	movs	r2, #0
    89a2:	2104      	movs	r1, #4
    89a4:	4640      	mov	r0, r8
    89a6:	f021 fa01 	bl	29dac <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    89aa:	1c6b      	adds	r3, r5, #1
    89ac:	2201      	movs	r2, #1
    89ae:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    89b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    89b6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    89ba:	44b0      	add	r8, r6
				  &conn->tx_queue);
    89bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    89c0:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    89c2:	3304      	adds	r3, #4
    89c4:	2200      	movs	r2, #0
    89c6:	2104      	movs	r1, #4
    89c8:	4640      	mov	r0, r8
    89ca:	f021 f9ef 	bl	29dac <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    89ce:	3502      	adds	r5, #2
    89d0:	2302      	movs	r3, #2
    89d2:	f888 300c 	strb.w	r3, [r8, #12]
    89d6:	e7c0      	b.n	895a <bt_conn_prepare_events+0x4a>
    89d8:	2000ba48 	.word	0x2000ba48
    89dc:	2000049c 	.word	0x2000049c

000089e0 <bt_conn_set_state>:
{
    89e0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    89e2:	7b05      	ldrb	r5, [r0, #12]
    89e4:	428d      	cmp	r5, r1
    89e6:	d00a      	beq.n	89fe <bt_conn_set_state+0x1e>
    89e8:	4604      	mov	r4, r0
	conn->state = state;
    89ea:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    89ec:	b145      	cbz	r5, 8a00 <bt_conn_set_state+0x20>
    89ee:	2d02      	cmp	r5, #2
    89f0:	d009      	beq.n	8a06 <bt_conn_set_state+0x26>
	switch (conn->state) {
    89f2:	7b23      	ldrb	r3, [r4, #12]
    89f4:	2b02      	cmp	r3, #2
    89f6:	d068      	beq.n	8aca <bt_conn_set_state+0xea>
    89f8:	2b03      	cmp	r3, #3
    89fa:	d00b      	beq.n	8a14 <bt_conn_set_state+0x34>
    89fc:	b31b      	cbz	r3, 8a46 <bt_conn_set_state+0x66>
    89fe:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    8a00:	f7ff fece 	bl	87a0 <bt_conn_ref>
		break;
    8a04:	e7f5      	b.n	89f2 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    8a06:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d1f2      	bne.n	89f2 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    8a0c:	3074      	adds	r0, #116	; 0x74
    8a0e:	f022 fe71 	bl	2b6f4 <k_delayed_work_cancel>
    8a12:	e7ee      	b.n	89f2 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8a14:	78a3      	ldrb	r3, [r4, #2]
    8a16:	2b02      	cmp	r3, #2
    8a18:	d0f1      	beq.n	89fe <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    8a1a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a1e:	f021 fcb0 	bl	2a382 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    8a22:	f104 001c 	add.w	r0, r4, #28
    8a26:	f021 fcac 	bl	2a382 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    8a2a:	2100      	movs	r1, #0
    8a2c:	482d      	ldr	r0, [pc, #180]	; (8ae4 <bt_conn_set_state+0x104>)
    8a2e:	f021 fc49 	bl	2a2c4 <k_poll_signal>
	list->head = NULL;
    8a32:	2300      	movs	r3, #0
    8a34:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    8a36:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    8a38:	4620      	mov	r0, r4
    8a3a:	f001 f87d 	bl	9b38 <bt_l2cap_connected>
		notify_connected(conn);
    8a3e:	4620      	mov	r0, r4
    8a40:	f7ff fb74 	bl	812c <notify_connected>
		break;
    8a44:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    8a46:	78a3      	ldrb	r3, [r4, #2]
    8a48:	2b02      	cmp	r3, #2
    8a4a:	d00d      	beq.n	8a68 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    8a4c:	1eeb      	subs	r3, r5, #3
    8a4e:	b2db      	uxtb	r3, r3
    8a50:	2b01      	cmp	r3, #1
    8a52:	d90d      	bls.n	8a70 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    8a54:	2d02      	cmp	r5, #2
    8a56:	d02d      	beq.n	8ab4 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    8a58:	2d01      	cmp	r5, #1
    8a5a:	d1d0      	bne.n	89fe <bt_conn_set_state+0x1e>
			if (conn->err) {
    8a5c:	7ae3      	ldrb	r3, [r4, #11]
    8a5e:	bb83      	cbnz	r3, 8ac2 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    8a60:	4620      	mov	r0, r4
    8a62:	f7ff ff2f 	bl	88c4 <bt_conn_unref>
    8a66:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    8a68:	4620      	mov	r0, r4
    8a6a:	f7ff ff2b 	bl	88c4 <bt_conn_unref>
			break;
    8a6e:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    8a70:	4620      	mov	r0, r4
    8a72:	f000 fd21 	bl	94b8 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    8a76:	4620      	mov	r0, r4
    8a78:	f7ff fb6a 	bl	8150 <notify_disconnected>
			process_unack_tx(conn);
    8a7c:	4620      	mov	r0, r4
    8a7e:	f7ff fc17 	bl	82b0 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    8a82:	78a3      	ldrb	r3, [r4, #2]
    8a84:	b18b      	cbz	r3, 8aaa <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    8a86:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8a88:	f3bf 8f5b 	dmb	ish
    8a8c:	e854 3f00 	ldrex	r3, [r4]
    8a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a94:	e844 3200 	strex	r2, r3, [r4]
    8a98:	2a00      	cmp	r2, #0
    8a9a:	d1f7      	bne.n	8a8c <bt_conn_set_state+0xac>
    8a9c:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    8aa0:	2100      	movs	r1, #0
    8aa2:	4810      	ldr	r0, [pc, #64]	; (8ae4 <bt_conn_set_state+0x104>)
    8aa4:	f021 fc0e 	bl	2a2c4 <k_poll_signal>
    8aa8:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    8aaa:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8aae:	f022 fe21 	bl	2b6f4 <k_delayed_work_cancel>
    8ab2:	e7e8      	b.n	8a86 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    8ab4:	4620      	mov	r0, r4
    8ab6:	f7ff fb39 	bl	812c <notify_connected>
			bt_conn_unref(conn);
    8aba:	4620      	mov	r0, r4
    8abc:	f7ff ff02 	bl	88c4 <bt_conn_unref>
    8ac0:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    8ac2:	4620      	mov	r0, r4
    8ac4:	f7ff fb32 	bl	812c <notify_connected>
    8ac8:	e7ca      	b.n	8a60 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8aca:	78a3      	ldrb	r3, [r4, #2]
    8acc:	2b02      	cmp	r3, #2
    8ace:	d096      	beq.n	89fe <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	d194      	bne.n	89fe <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8ad4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    8ad8:	f104 0174 	add.w	r1, r4, #116	; 0x74
    8adc:	4802      	ldr	r0, [pc, #8]	; (8ae8 <bt_conn_set_state+0x108>)
    8ade:	f022 fe63 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    8ae2:	e78c      	b.n	89fe <bt_conn_set_state+0x1e>
    8ae4:	2000ba48 	.word	0x2000ba48
    8ae8:	20002c00 	.word	0x20002c00

00008aec <bt_hci_disconnect>:
{
    8aec:	b570      	push	{r4, r5, r6, lr}
    8aee:	4605      	mov	r5, r0
    8af0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    8af2:	2103      	movs	r1, #3
    8af4:	f240 4006 	movw	r0, #1030	; 0x406
    8af8:	f7fd fbac 	bl	6254 <bt_hci_cmd_create>
	if (!buf) {
    8afc:	b1a8      	cbz	r0, 8b2a <bt_hci_disconnect+0x3e>
    8afe:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    8b00:	2103      	movs	r1, #3
    8b02:	3008      	adds	r0, #8
    8b04:	f013 fc02 	bl	1c30c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    8b08:	882b      	ldrh	r3, [r5, #0]
    8b0a:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    8b0c:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    8b0e:	4621      	mov	r1, r4
    8b10:	f240 4006 	movw	r0, #1030	; 0x406
    8b14:	f7fe f8fc 	bl	6d10 <bt_hci_cmd_send>
	if (err) {
    8b18:	4604      	mov	r4, r0
    8b1a:	b108      	cbz	r0, 8b20 <bt_hci_disconnect+0x34>
}
    8b1c:	4620      	mov	r0, r4
    8b1e:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    8b20:	2104      	movs	r1, #4
    8b22:	4628      	mov	r0, r5
    8b24:	f7ff ff5c 	bl	89e0 <bt_conn_set_state>
	return 0;
    8b28:	e7f8      	b.n	8b1c <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    8b2a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    8b2e:	e7f5      	b.n	8b1c <bt_hci_disconnect+0x30>

00008b30 <bt_conn_get_info>:
	info->type = conn->type;
    8b30:	7883      	ldrb	r3, [r0, #2]
    8b32:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    8b34:	78c3      	ldrb	r3, [r0, #3]
    8b36:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    8b38:	7883      	ldrb	r3, [r0, #2]
    8b3a:	b9cb      	cbnz	r3, 8b70 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    8b3c:	78c3      	ldrb	r3, [r0, #3]
    8b3e:	b983      	cbnz	r3, 8b62 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    8b40:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    8b44:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    8b46:	f100 0356 	add.w	r3, r0, #86	; 0x56
    8b4a:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    8b4c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    8b50:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    8b52:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    8b56:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    8b58:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    8b5c:	820b      	strh	r3, [r1, #16]
		return 0;
    8b5e:	2000      	movs	r0, #0
    8b60:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    8b62:	f100 0356 	add.w	r3, r0, #86	; 0x56
    8b66:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    8b68:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    8b6c:	608b      	str	r3, [r1, #8]
    8b6e:	e7ed      	b.n	8b4c <bt_conn_get_info+0x1c>
	return -EINVAL;
    8b70:	f06f 0015 	mvn.w	r0, #21
}
    8b74:	4770      	bx	lr
	...

00008b78 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    8b78:	b570      	push	{r4, r5, r6, lr}
    8b7a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    8b7c:	460d      	mov	r5, r1
    8b7e:	b121      	cbz	r1, 8b8a <bt_le_set_auto_conn+0x12>
    8b80:	4608      	mov	r0, r1
    8b82:	f7fd ffd1 	bl	6b28 <bt_le_conn_params_valid>
    8b86:	2800      	cmp	r0, #0
    8b88:	d05a      	beq.n	8c40 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    8b8a:	4630      	mov	r0, r6
    8b8c:	f7ff fe40 	bl	8810 <bt_conn_lookup_addr_le>
	if (!conn) {
    8b90:	4604      	mov	r4, r0
    8b92:	b1d8      	cbz	r0, 8bcc <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    8b94:	b33d      	cbz	r5, 8be6 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    8b96:	4629      	mov	r1, r5
    8b98:	4620      	mov	r0, r4
    8b9a:	f7ff fb41 	bl	8220 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    8b9e:	1d23      	adds	r3, r4, #4
    8ba0:	f3bf 8f5b 	dmb	ish
    8ba4:	e853 2f00 	ldrex	r2, [r3]
    8ba8:	f042 0101 	orr.w	r1, r2, #1
    8bac:	e843 1000 	strex	r0, r1, [r3]
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d1f7      	bne.n	8ba4 <bt_le_set_auto_conn+0x2c>
    8bb4:	f3bf 8f5b 	dmb	ish
    8bb8:	f012 0f01 	tst.w	r2, #1
    8bbc:	d00f      	beq.n	8bde <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    8bbe:	7b23      	ldrb	r3, [r4, #12]
    8bc0:	b363      	cbz	r3, 8c1c <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    8bc2:	4620      	mov	r0, r4
    8bc4:	f7ff fe7e 	bl	88c4 <bt_conn_unref>

	return 0;
    8bc8:	2000      	movs	r0, #0
    8bca:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    8bcc:	4630      	mov	r0, r6
    8bce:	f7ff fda9 	bl	8724 <bt_conn_add_le>
		if (!conn) {
    8bd2:	4604      	mov	r4, r0
    8bd4:	2800      	cmp	r0, #0
    8bd6:	d1dd      	bne.n	8b94 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    8bd8:	f06f 000b 	mvn.w	r0, #11
}
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    8bde:	4620      	mov	r0, r4
    8be0:	f7ff fdde 	bl	87a0 <bt_conn_ref>
    8be4:	e7eb      	b.n	8bbe <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    8be6:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8be8:	f3bf 8f5b 	dmb	ish
    8bec:	e853 2f00 	ldrex	r2, [r3]
    8bf0:	f022 0101 	bic.w	r1, r2, #1
    8bf4:	e843 1000 	strex	r0, r1, [r3]
    8bf8:	2800      	cmp	r0, #0
    8bfa:	d1f7      	bne.n	8bec <bt_le_set_auto_conn+0x74>
    8bfc:	f3bf 8f5b 	dmb	ish
    8c00:	f012 0f01 	tst.w	r2, #1
    8c04:	d0db      	beq.n	8bbe <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    8c06:	4620      	mov	r0, r4
    8c08:	f7ff fe5c 	bl	88c4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    8c0c:	7b23      	ldrb	r3, [r4, #12]
    8c0e:	2b01      	cmp	r3, #1
    8c10:	d1d5      	bne.n	8bbe <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8c12:	2100      	movs	r1, #0
    8c14:	4620      	mov	r0, r4
    8c16:	f7ff fee3 	bl	89e0 <bt_conn_set_state>
    8c1a:	e7d0      	b.n	8bbe <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8c1c:	f3bf 8f5b 	dmb	ish
    8c20:	4b09      	ldr	r3, [pc, #36]	; (8c48 <bt_le_set_auto_conn+0xd0>)
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    8c28:	f013 0f02 	tst.w	r3, #2
    8c2c:	d0c9      	beq.n	8bc2 <bt_le_set_auto_conn+0x4a>
		if (param) {
    8c2e:	b11d      	cbz	r5, 8c38 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8c30:	2101      	movs	r1, #1
    8c32:	4620      	mov	r0, r4
    8c34:	f7ff fed4 	bl	89e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    8c38:	2000      	movs	r0, #0
    8c3a:	f7fe f919 	bl	6e70 <bt_le_scan_update>
    8c3e:	e7c0      	b.n	8bc2 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    8c40:	f06f 0015 	mvn.w	r0, #21
    8c44:	bd70      	pop	{r4, r5, r6, pc}
    8c46:	bf00      	nop
    8c48:	2000b980 	.word	0x2000b980

00008c4c <bt_conn_disconnect>:
{
    8c4c:	b538      	push	{r3, r4, r5, lr}
    8c4e:	4604      	mov	r4, r0
    8c50:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    8c52:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8c54:	b13b      	cbz	r3, 8c66 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    8c56:	7b23      	ldrb	r3, [r4, #12]
    8c58:	3b01      	subs	r3, #1
    8c5a:	2b03      	cmp	r3, #3
    8c5c:	d823      	bhi.n	8ca6 <bt_conn_disconnect+0x5a>
    8c5e:	e8df f003 	tbb	[pc, r3]
    8c62:	1309      	.short	0x1309
    8c64:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    8c66:	2100      	movs	r1, #0
    8c68:	3048      	adds	r0, #72	; 0x48
    8c6a:	f7ff ff85 	bl	8b78 <bt_le_set_auto_conn>
    8c6e:	e7f2      	b.n	8c56 <bt_conn_disconnect+0xa>
		return 0;
    8c70:	2000      	movs	r0, #0
    8c72:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    8c74:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8c76:	2100      	movs	r1, #0
    8c78:	4620      	mov	r0, r4
    8c7a:	f7ff feb1 	bl	89e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    8c7e:	2000      	movs	r0, #0
    8c80:	f7fe f8f6 	bl	6e70 <bt_le_scan_update>
		return 0;
    8c84:	2000      	movs	r0, #0
    8c86:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    8c88:	f104 0074 	add.w	r0, r4, #116	; 0x74
    8c8c:	f022 fd32 	bl	2b6f4 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    8c90:	2100      	movs	r1, #0
    8c92:	f242 000e 	movw	r0, #8206	; 0x200e
    8c96:	f7fe f83b 	bl	6d10 <bt_hci_cmd_send>
    8c9a:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    8c9c:	4629      	mov	r1, r5
    8c9e:	4620      	mov	r0, r4
    8ca0:	f7ff ff24 	bl	8aec <bt_hci_disconnect>
    8ca4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8ca6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    8caa:	bd38      	pop	{r3, r4, r5, pc}

00008cac <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    8cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cae:	4607      	mov	r7, r0
    8cb0:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    8cb2:	210e      	movs	r1, #14
    8cb4:	f242 0013 	movw	r0, #8211	; 0x2013
    8cb8:	f7fd facc 	bl	6254 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    8cbc:	b1c8      	cbz	r0, 8cf2 <bt_conn_le_conn_update+0x46>
    8cbe:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    8cc0:	210e      	movs	r1, #14
    8cc2:	3008      	adds	r0, #8
    8cc4:	f013 fb22 	bl	1c30c <net_buf_simple_add>
    8cc8:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    8cca:	220e      	movs	r2, #14
    8ccc:	2100      	movs	r1, #0
    8cce:	f023 f9d5 	bl	2c07c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    8cd2:	883b      	ldrh	r3, [r7, #0]
    8cd4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    8cd6:	882b      	ldrh	r3, [r5, #0]
    8cd8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    8cda:	886b      	ldrh	r3, [r5, #2]
    8cdc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    8cde:	88ab      	ldrh	r3, [r5, #4]
    8ce0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    8ce2:	88eb      	ldrh	r3, [r5, #6]
    8ce4:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    8ce6:	4631      	mov	r1, r6
    8ce8:	f242 0013 	movw	r0, #8211	; 0x2013
    8cec:	f7fe f810 	bl	6d10 <bt_hci_cmd_send>
    8cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    8cf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    8cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008cf8 <bt_conn_le_param_update>:
{
    8cf8:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    8cfa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    8cfe:	880a      	ldrh	r2, [r1, #0]
    8d00:	4293      	cmp	r3, r2
    8d02:	d307      	bcc.n	8d14 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    8d04:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    8d06:	4293      	cmp	r3, r2
    8d08:	d804      	bhi.n	8d14 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    8d0a:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    8d0e:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    8d10:	429a      	cmp	r2, r3
    8d12:	d016      	beq.n	8d42 <bt_conn_le_param_update+0x4a>
    8d14:	460d      	mov	r5, r1
    8d16:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    8d18:	3074      	adds	r0, #116	; 0x74
    8d1a:	f022 fceb 	bl	2b6f4 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8d1e:	4b0f      	ldr	r3, [pc, #60]	; (8d5c <bt_conn_le_param_update+0x64>)
    8d20:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    8d24:	f013 0f02 	tst.w	r3, #2
    8d28:	d004      	beq.n	8d34 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    8d2a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8d2e:	f013 0f02 	tst.w	r3, #2
    8d32:	d101      	bne.n	8d38 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    8d34:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    8d36:	b963      	cbnz	r3, 8d52 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    8d38:	4629      	mov	r1, r5
    8d3a:	4620      	mov	r0, r4
    8d3c:	f7ff ffb6 	bl	8cac <bt_conn_le_conn_update>
    8d40:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    8d42:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    8d46:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    8d48:	429a      	cmp	r2, r3
    8d4a:	d1e3      	bne.n	8d14 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    8d4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    8d50:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    8d52:	4629      	mov	r1, r5
    8d54:	4620      	mov	r0, r4
    8d56:	f001 f821 	bl	9d9c <bt_l2cap_update_conn_param>
    8d5a:	bd38      	pop	{r3, r4, r5, pc}
    8d5c:	2000b910 	.word	0x2000b910

00008d60 <le_conn_update>:
{
    8d60:	b500      	push	{lr}
    8d62:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    8d64:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    8d68:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8d6c:	2b02      	cmp	r3, #2
    8d6e:	d016      	beq.n	8d9e <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    8d70:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    8d74:	f8ad 3000 	strh.w	r3, [sp]
    8d78:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    8d7c:	f8ad 3002 	strh.w	r3, [sp, #2]
    8d80:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    8d84:	f8ad 3004 	strh.w	r3, [sp, #4]
    8d88:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    8d8c:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    8d90:	4669      	mov	r1, sp
    8d92:	4610      	mov	r0, r2
    8d94:	f7ff ffb0 	bl	8cf8 <bt_conn_le_param_update>
}
    8d98:	b003      	add	sp, #12
    8d9a:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8d9e:	2113      	movs	r1, #19
    8da0:	4610      	mov	r0, r2
    8da2:	f7ff ff53 	bl	8c4c <bt_conn_disconnect>
		return;
    8da6:	e7f7      	b.n	8d98 <le_conn_update+0x38>

00008da8 <le_conn_update>:
{
    8da8:	b510      	push	{r4, lr}
    8daa:	b082      	sub	sp, #8
    8dac:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    8dae:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8db0:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    8db2:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    8db4:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    8db6:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8db8:	9201      	str	r2, [sp, #4]
    8dba:	9100      	str	r1, [sp, #0]
    8dbc:	2200      	movs	r2, #0
    8dbe:	4611      	mov	r1, r2
    8dc0:	f010 fdb6 	bl	19930 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8dc4:	b100      	cbz	r0, 8dc8 <le_conn_update+0x20>
    8dc6:	200c      	movs	r0, #12
    8dc8:	f005 fd82 	bl	e8d0 <cmd_status>
    8dcc:	6020      	str	r0, [r4, #0]
}
    8dce:	b002      	add	sp, #8
    8dd0:	bd10      	pop	{r4, pc}
	...

00008dd4 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    8dd4:	b538      	push	{r3, r4, r5, lr}
    8dd6:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    8dd8:	4603      	mov	r3, r0
    8dda:	b150      	cbz	r0, 8df2 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    8ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8de0:	4618      	mov	r0, r3
    8de2:	f013 f9d9 	bl	1c198 <net_buf_alloc>
    8de6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    8de8:	1d29      	adds	r1, r5, #4
    8dea:	f013 fa30 	bl	1c24e <net_buf_reserve>

	return buf;
}
    8dee:	4620      	mov	r0, r4
    8df0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    8df2:	4b01      	ldr	r3, [pc, #4]	; (8df8 <bt_conn_create_pdu+0x24>)
    8df4:	e7f2      	b.n	8ddc <bt_conn_create_pdu+0x8>
    8df6:	bf00      	nop
    8df8:	2000d190 	.word	0x2000d190

00008dfc <create_frag>:
{
    8dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8dfe:	4606      	mov	r6, r0
    8e00:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    8e02:	2100      	movs	r1, #0
    8e04:	4608      	mov	r0, r1
    8e06:	f7ff ffe5 	bl	8dd4 <bt_conn_create_pdu>
    8e0a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8e0c:	7b33      	ldrb	r3, [r6, #12]
    8e0e:	2b03      	cmp	r3, #3
    8e10:	d121      	bne.n	8e56 <create_frag+0x5a>
    8e12:	f100 0310 	add.w	r3, r0, #16
    8e16:	89c2      	ldrh	r2, [r0, #14]
    8e18:	4413      	add	r3, r2
    8e1a:	3303      	adds	r3, #3
    8e1c:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    8e20:	2200      	movs	r2, #0
    8e22:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    8e24:	4b10      	ldr	r3, [pc, #64]	; (8e68 <create_frag+0x6c>)
    8e26:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    8e2a:	f100 0608 	add.w	r6, r0, #8
    8e2e:	4630      	mov	r0, r6
    8e30:	f013 fad5 	bl	1c3de <net_buf_simple_tailroom>
    8e34:	4287      	cmp	r7, r0
    8e36:	d212      	bcs.n	8e5e <create_frag+0x62>
	return bt_dev.le.mtu;
    8e38:	4b0b      	ldr	r3, [pc, #44]	; (8e68 <create_frag+0x6c>)
    8e3a:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    8e3e:	463a      	mov	r2, r7
    8e40:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8e44:	4630      	mov	r0, r6
    8e46:	f013 fa67 	bl	1c318 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    8e4a:	4639      	mov	r1, r7
    8e4c:	4620      	mov	r0, r4
    8e4e:	f013 faaa 	bl	1c3a6 <net_buf_simple_pull>
}
    8e52:	4628      	mov	r0, r5
    8e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    8e56:	f013 fa0d 	bl	1c274 <net_buf_unref>
		return NULL;
    8e5a:	2500      	movs	r5, #0
    8e5c:	e7f9      	b.n	8e52 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    8e5e:	4630      	mov	r0, r6
    8e60:	f013 fabd 	bl	1c3de <net_buf_simple_tailroom>
    8e64:	b287      	uxth	r7, r0
    8e66:	e7ea      	b.n	8e3e <create_frag+0x42>
    8e68:	2000b910 	.word	0x2000b910

00008e6c <send_buf>:
{
    8e6c:	b538      	push	{r3, r4, r5, lr}
    8e6e:	4605      	mov	r5, r0
    8e70:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    8e72:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    8e74:	4b1b      	ldr	r3, [pc, #108]	; (8ee4 <send_buf+0x78>)
    8e76:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    8e7a:	429a      	cmp	r2, r3
    8e7c:	d91f      	bls.n	8ebe <send_buf+0x52>
	frag = create_frag(conn, buf);
    8e7e:	f7ff ffbd 	bl	8dfc <create_frag>
	if (!frag) {
    8e82:	4601      	mov	r1, r0
    8e84:	b350      	cbz	r0, 8edc <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    8e86:	2301      	movs	r3, #1
    8e88:	2200      	movs	r2, #0
    8e8a:	4628      	mov	r0, r5
    8e8c:	f7ff fc04 	bl	8698 <send_frag>
    8e90:	4603      	mov	r3, r0
    8e92:	b1c8      	cbz	r0, 8ec8 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    8e94:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    8e96:	4a13      	ldr	r2, [pc, #76]	; (8ee4 <send_buf+0x78>)
    8e98:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    8e9c:	429a      	cmp	r2, r3
    8e9e:	d215      	bcs.n	8ecc <send_buf+0x60>
		frag = create_frag(conn, buf);
    8ea0:	4621      	mov	r1, r4
    8ea2:	4628      	mov	r0, r5
    8ea4:	f7ff ffaa 	bl	8dfc <create_frag>
		if (!frag) {
    8ea8:	4601      	mov	r1, r0
    8eaa:	b1c8      	cbz	r0, 8ee0 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    8eac:	2301      	movs	r3, #1
    8eae:	461a      	mov	r2, r3
    8eb0:	4628      	mov	r0, r5
    8eb2:	f7ff fbf1 	bl	8698 <send_frag>
    8eb6:	4603      	mov	r3, r0
    8eb8:	2800      	cmp	r0, #0
    8eba:	d1eb      	bne.n	8e94 <send_buf+0x28>
    8ebc:	e004      	b.n	8ec8 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    8ebe:	2300      	movs	r3, #0
    8ec0:	461a      	mov	r2, r3
    8ec2:	f7ff fbe9 	bl	8698 <send_frag>
    8ec6:	4603      	mov	r3, r0
}
    8ec8:	4618      	mov	r0, r3
    8eca:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    8ecc:	2300      	movs	r3, #0
    8ece:	2201      	movs	r2, #1
    8ed0:	4621      	mov	r1, r4
    8ed2:	4628      	mov	r0, r5
    8ed4:	f7ff fbe0 	bl	8698 <send_frag>
    8ed8:	4603      	mov	r3, r0
    8eda:	e7f5      	b.n	8ec8 <send_buf+0x5c>
		return false;
    8edc:	2300      	movs	r3, #0
    8ede:	e7f3      	b.n	8ec8 <send_buf+0x5c>
			return false;
    8ee0:	2300      	movs	r3, #0
    8ee2:	e7f1      	b.n	8ec8 <send_buf+0x5c>
    8ee4:	2000b910 	.word	0x2000b910

00008ee8 <bt_conn_process_tx>:
{
    8ee8:	b538      	push	{r3, r4, r5, lr}
    8eea:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    8eec:	7b03      	ldrb	r3, [r0, #12]
    8eee:	b97b      	cbnz	r3, 8f10 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    8ef0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8ef2:	f3bf 8f5b 	dmb	ish
    8ef6:	e853 2f00 	ldrex	r2, [r3]
    8efa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8efe:	e843 1000 	strex	r0, r1, [r3]
    8f02:	2800      	cmp	r0, #0
    8f04:	d1f7      	bne.n	8ef6 <bt_conn_process_tx+0xe>
    8f06:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    8f0a:	f012 0f40 	tst.w	r2, #64	; 0x40
    8f0e:	d10c      	bne.n	8f2a <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    8f10:	2100      	movs	r1, #0
    8f12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8f16:	f013 f980 	bl	1c21a <net_buf_get>
	BT_ASSERT(buf);
    8f1a:	4605      	mov	r5, r0
    8f1c:	b148      	cbz	r0, 8f32 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    8f1e:	4601      	mov	r1, r0
    8f20:	4620      	mov	r0, r4
    8f22:	f7ff ffa3 	bl	8e6c <send_buf>
    8f26:	b150      	cbz	r0, 8f3e <bt_conn_process_tx+0x56>
    8f28:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    8f2a:	4620      	mov	r0, r4
    8f2c:	f7ff fcd7 	bl	88de <conn_cleanup>
		return;
    8f30:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    8f32:	4040      	eors	r0, r0
    8f34:	f380 8811 	msr	BASEPRI, r0
    8f38:	f04f 0004 	mov.w	r0, #4
    8f3c:	df02      	svc	2
		net_buf_unref(buf);
    8f3e:	4628      	mov	r0, r5
    8f40:	f013 f998 	bl	1c274 <net_buf_unref>
    8f44:	e7f0      	b.n	8f28 <bt_conn_process_tx+0x40>
	...

00008f48 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    8f48:	4b03      	ldr	r3, [pc, #12]	; (8f58 <bt_conn_get_id+0x10>)
    8f4a:	1ac0      	subs	r0, r0, r3
    8f4c:	1080      	asrs	r0, r0, #2
    8f4e:	4b03      	ldr	r3, [pc, #12]	; (8f5c <bt_conn_get_id+0x14>)
    8f50:	fb03 f000 	mul.w	r0, r3, r0
}
    8f54:	b2c0      	uxtb	r0, r0
    8f56:	4770      	bx	lr
    8f58:	2000049c 	.word	0x2000049c
    8f5c:	96f96f97 	.word	0x96f96f97

00008f60 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    8f60:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    8f62:	2300      	movs	r3, #0
    8f64:	e000      	b.n	8f68 <bt_conn_init+0x8>
    8f66:	3301      	adds	r3, #1
    8f68:	2b01      	cmp	r3, #1
    8f6a:	d80d      	bhi.n	8f88 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    8f6c:	491a      	ldr	r1, [pc, #104]	; (8fd8 <bt_conn_init+0x78>)
    8f6e:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    8f72:	4a1a      	ldr	r2, [pc, #104]	; (8fdc <bt_conn_init+0x7c>)
    8f74:	6814      	ldr	r4, [r2, #0]
    8f76:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    8f7a:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    8f7c:	6852      	ldr	r2, [r2, #4]
    8f7e:	2a00      	cmp	r2, #0
    8f80:	d1f1      	bne.n	8f66 <bt_conn_init+0x6>
		list->tail = list->head;
    8f82:	4a16      	ldr	r2, [pc, #88]	; (8fdc <bt_conn_init+0x7c>)
    8f84:	6050      	str	r0, [r2, #4]
    8f86:	e7ee      	b.n	8f66 <bt_conn_init+0x6>
	}

	bt_att_init();
    8f88:	f002 fa68 	bl	b45c <bt_att_init>

	err = bt_smp_init();
    8f8c:	f005 fba2 	bl	e6d4 <bt_smp_init>
	if (err) {
    8f90:	4605      	mov	r5, r0
    8f92:	b108      	cbz	r0, 8f98 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    8f94:	4628      	mov	r0, r5
    8f96:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    8f98:	f000 ff20 	bl	9ddc <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8f9c:	462c      	mov	r4, r5
    8f9e:	2c00      	cmp	r4, #0
    8fa0:	d1f8      	bne.n	8f94 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    8fa2:	4a0f      	ldr	r2, [pc, #60]	; (8fe0 <bt_conn_init+0x80>)
    8fa4:	239c      	movs	r3, #156	; 0x9c
    8fa6:	fb03 f304 	mul.w	r3, r3, r4
    8faa:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    8fac:	3340      	adds	r3, #64	; 0x40
    8fae:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8fb0:	f3bf 8f5b 	dmb	ish
    8fb4:	685b      	ldr	r3, [r3, #4]
    8fb6:	f3bf 8f5b 	dmb	ish
    8fba:	b90b      	cbnz	r3, 8fc0 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    8fbc:	3401      	adds	r4, #1
    8fbe:	e7ee      	b.n	8f9e <bt_conn_init+0x3e>
    8fc0:	f3bf 8f5b 	dmb	ish
    8fc4:	6843      	ldr	r3, [r0, #4]
    8fc6:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    8fca:	f013 0f01 	tst.w	r3, #1
    8fce:	d0f5      	beq.n	8fbc <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8fd0:	2101      	movs	r1, #1
    8fd2:	f7ff fd05 	bl	89e0 <bt_conn_set_state>
    8fd6:	e7f1      	b.n	8fbc <bt_conn_init+0x5c>
    8fd8:	2000048c 	.word	0x2000048c
    8fdc:	20000628 	.word	0x20000628
    8fe0:	2000049c 	.word	0x2000049c

00008fe4 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    8fe4:	4a05      	ldr	r2, [pc, #20]	; (8ffc <get_ident+0x18>)
    8fe6:	7813      	ldrb	r3, [r2, #0]
    8fe8:	3301      	adds	r3, #1
    8fea:	b2db      	uxtb	r3, r3
    8fec:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    8fee:	b90b      	cbnz	r3, 8ff4 <get_ident+0x10>
		ident++;
    8ff0:	3301      	adds	r3, #1
    8ff2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    8ff4:	4b01      	ldr	r3, [pc, #4]	; (8ffc <get_ident+0x18>)
    8ff6:	7818      	ldrb	r0, [r3, #0]
    8ff8:	4770      	bx	lr
    8ffa:	bf00      	nop
    8ffc:	200006cc 	.word	0x200006cc

00009000 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    9000:	b430      	push	{r4, r5}
	return list->head;
    9002:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9004:	b113      	cbz	r3, 900c <__l2cap_lookup_ident+0xc>
    9006:	3b08      	subs	r3, #8
    9008:	2400      	movs	r4, #0
    900a:	e01b      	b.n	9044 <__l2cap_lookup_ident+0x44>
    900c:	2300      	movs	r3, #0
    900e:	e7fb      	b.n	9008 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    9010:	b35a      	cbz	r2, 906a <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    9012:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    9016:	b144      	cbz	r4, 902a <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    9018:	6899      	ldr	r1, [r3, #8]
    901a:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    901c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    901e:	428a      	cmp	r2, r1
    9020:	d00a      	beq.n	9038 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    9022:	2200      	movs	r2, #0
    9024:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    9026:	4618      	mov	r0, r3
    9028:	e01d      	b.n	9066 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    902a:	6899      	ldr	r1, [r3, #8]
    902c:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    902e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    9030:	4294      	cmp	r4, r2
    9032:	d1f6      	bne.n	9022 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    9034:	6401      	str	r1, [r0, #64]	; 0x40
    9036:	e7f4      	b.n	9022 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    9038:	6404      	str	r4, [r0, #64]	; 0x40
    903a:	e7f2      	b.n	9022 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    903c:	4625      	mov	r5, r4
    903e:	e00a      	b.n	9056 <__l2cap_lookup_ident+0x56>
    9040:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9042:	3b08      	subs	r3, #8
    9044:	b173      	cbz	r3, 9064 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    9046:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    904a:	428d      	cmp	r5, r1
    904c:	d0e0      	beq.n	9010 <__l2cap_lookup_ident+0x10>
    904e:	f113 0408 	adds.w	r4, r3, #8
    9052:	d0f3      	beq.n	903c <__l2cap_lookup_ident+0x3c>
	return node->next;
    9054:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9056:	b11d      	cbz	r5, 9060 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9058:	2c00      	cmp	r4, #0
    905a:	d0f1      	beq.n	9040 <__l2cap_lookup_ident+0x40>
	return node->next;
    905c:	689b      	ldr	r3, [r3, #8]
    905e:	e7f0      	b.n	9042 <__l2cap_lookup_ident+0x42>
    9060:	2300      	movs	r3, #0
    9062:	e7ef      	b.n	9044 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    9064:	2000      	movs	r0, #0
}
    9066:	bc30      	pop	{r4, r5}
    9068:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    906a:	4618      	mov	r0, r3
    906c:	e7fb      	b.n	9066 <__l2cap_lookup_ident+0x66>
	...

00009070 <l2cap_server_lookup_psm>:
	return list->head;
    9070:	4b0d      	ldr	r3, [pc, #52]	; (90a8 <l2cap_server_lookup_psm+0x38>)
    9072:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    9074:	b10b      	cbz	r3, 907a <l2cap_server_lookup_psm+0xa>
    9076:	3b08      	subs	r3, #8
    9078:	e006      	b.n	9088 <l2cap_server_lookup_psm+0x18>
    907a:	2300      	movs	r3, #0
    907c:	e004      	b.n	9088 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    907e:	4611      	mov	r1, r2
    9080:	e00a      	b.n	9098 <l2cap_server_lookup_psm+0x28>
	return node->next;
    9082:	689a      	ldr	r2, [r3, #8]
    9084:	f1a2 0308 	sub.w	r3, r2, #8
    9088:	b163      	cbz	r3, 90a4 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    908a:	881a      	ldrh	r2, [r3, #0]
    908c:	4282      	cmp	r2, r0
    908e:	d009      	beq.n	90a4 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9090:	f113 0208 	adds.w	r2, r3, #8
    9094:	d0f3      	beq.n	907e <l2cap_server_lookup_psm+0xe>
	return node->next;
    9096:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    9098:	b111      	cbz	r1, 90a0 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    909a:	2a00      	cmp	r2, #0
    909c:	d1f1      	bne.n	9082 <l2cap_server_lookup_psm+0x12>
    909e:	e7f1      	b.n	9084 <l2cap_server_lookup_psm+0x14>
    90a0:	2300      	movs	r3, #0
    90a2:	e7f1      	b.n	9088 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    90a4:	4618      	mov	r0, r3
    90a6:	4770      	bx	lr
    90a8:	200006d8 	.word	0x200006d8

000090ac <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    90ac:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    90b0:	b29b      	uxth	r3, r3
    90b2:	2b3f      	cmp	r3, #63	; 0x3f
    90b4:	d835      	bhi.n	9122 <l2cap_remove_tx_cid+0x76>
	return list->head;
    90b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    90b8:	b12b      	cbz	r3, 90c6 <l2cap_remove_tx_cid+0x1a>
    90ba:	3b08      	subs	r3, #8
    90bc:	2200      	movs	r2, #0
    90be:	2b00      	cmp	r3, #0
    90c0:	d031      	beq.n	9126 <l2cap_remove_tx_cid+0x7a>
{
    90c2:	b410      	push	{r4}
    90c4:	e01c      	b.n	9100 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    90c6:	2300      	movs	r3, #0
    90c8:	e7f8      	b.n	90bc <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    90ca:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    90ce:	b14a      	cbz	r2, 90e4 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    90d0:	689c      	ldr	r4, [r3, #8]
    90d2:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    90d4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    90d6:	42a1      	cmp	r1, r4
    90d8:	d00b      	beq.n	90f2 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    90da:	2200      	movs	r2, #0
    90dc:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    90de:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    90e0:	bc10      	pop	{r4}
    90e2:	4770      	bx	lr
		list->head = node->next;
    90e4:	689a      	ldr	r2, [r3, #8]
    90e6:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    90e8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    90ea:	428c      	cmp	r4, r1
    90ec:	d1f5      	bne.n	90da <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    90ee:	6402      	str	r2, [r0, #64]	; 0x40
    90f0:	e7f3      	b.n	90da <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    90f2:	6402      	str	r2, [r0, #64]	; 0x40
    90f4:	e7f1      	b.n	90da <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    90f6:	4614      	mov	r4, r2
    90f8:	e00a      	b.n	9110 <l2cap_remove_tx_cid+0x64>
    90fa:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    90fc:	3b08      	subs	r3, #8
    90fe:	b173      	cbz	r3, 911e <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    9100:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    9104:	42a1      	cmp	r1, r4
    9106:	d0e0      	beq.n	90ca <l2cap_remove_tx_cid+0x1e>
    9108:	f113 0208 	adds.w	r2, r3, #8
    910c:	d0f3      	beq.n	90f6 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    910e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9110:	b11c      	cbz	r4, 911a <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9112:	2a00      	cmp	r2, #0
    9114:	d0f1      	beq.n	90fa <l2cap_remove_tx_cid+0x4e>
	return node->next;
    9116:	689b      	ldr	r3, [r3, #8]
    9118:	e7f0      	b.n	90fc <l2cap_remove_tx_cid+0x50>
    911a:	2300      	movs	r3, #0
    911c:	e7ef      	b.n	90fe <l2cap_remove_tx_cid+0x52>
	return NULL;
    911e:	2000      	movs	r0, #0
    9120:	e7de      	b.n	90e0 <l2cap_remove_tx_cid+0x34>
		return NULL;
    9122:	2000      	movs	r0, #0
    9124:	4770      	bx	lr
	return NULL;
    9126:	2000      	movs	r0, #0
}
    9128:	4770      	bx	lr

0000912a <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    912a:	4770      	bx	lr

0000912c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    912c:	4770      	bx	lr
	...

00009130 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    9130:	2000      	movs	r0, #0
    9132:	b110      	cbz	r0, 913a <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    9134:	f06f 000b 	mvn.w	r0, #11
}
    9138:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    913a:	239c      	movs	r3, #156	; 0x9c
    913c:	fb03 f300 	mul.w	r3, r3, r0
    9140:	4a06      	ldr	r2, [pc, #24]	; (915c <l2cap_accept+0x2c>)
    9142:	58d3      	ldr	r3, [r2, r3]
    9144:	b10b      	cbz	r3, 914a <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    9146:	3001      	adds	r0, #1
    9148:	e7f3      	b.n	9132 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    914a:	239c      	movs	r3, #156	; 0x9c
    914c:	4a03      	ldr	r2, [pc, #12]	; (915c <l2cap_accept+0x2c>)
    914e:	fb03 2300 	mla	r3, r3, r0, r2
    9152:	4a03      	ldr	r2, [pc, #12]	; (9160 <l2cap_accept+0x30>)
    9154:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    9156:	600b      	str	r3, [r1, #0]
		return 0;
    9158:	4770      	bx	lr
    915a:	bf00      	nop
    915c:	20000630 	.word	0x20000630
    9160:	2000ba64 	.word	0x2000ba64

00009164 <l2cap_alloc_frag>:
{
    9164:	b538      	push	{r3, r4, r5, lr}
    9166:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    9168:	6843      	ldr	r3, [r0, #4]
    916a:	68db      	ldr	r3, [r3, #12]
    916c:	4798      	blx	r3
	if (!frag) {
    916e:	4604      	mov	r4, r0
    9170:	b120      	cbz	r0, 917c <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    9172:	4601      	mov	r1, r0
    9174:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    9178:	f013 f8ad 	bl	1c2d6 <net_buf_frag_add>
}
    917c:	4620      	mov	r0, r4
    917e:	bd38      	pop	{r3, r4, r5, pc}

00009180 <l2cap_chan_rx_give_credits>:
{
    9180:	b538      	push	{r3, r4, r5, lr}
    9182:	4605      	mov	r5, r0
	while (credits--) {
    9184:	e004      	b.n	9190 <l2cap_chan_rx_give_credits+0x10>
    9186:	f105 0048 	add.w	r0, r5, #72	; 0x48
    918a:	f021 fcc4 	bl	2ab16 <_impl_k_sem_give>
    918e:	4621      	mov	r1, r4
    9190:	1e4b      	subs	r3, r1, #1
    9192:	b29c      	uxth	r4, r3
    9194:	2900      	cmp	r1, #0
    9196:	d1f6      	bne.n	9186 <l2cap_chan_rx_give_credits+0x6>
}
    9198:	bd38      	pop	{r3, r4, r5, pc}

0000919a <l2cap_chan_tx_give_credits>:
{
    919a:	b538      	push	{r3, r4, r5, lr}
    919c:	4605      	mov	r5, r0
	while (credits--) {
    919e:	e004      	b.n	91aa <l2cap_chan_tx_give_credits+0x10>
    91a0:	f105 0068 	add.w	r0, r5, #104	; 0x68
    91a4:	f021 fcb7 	bl	2ab16 <_impl_k_sem_give>
    91a8:	4621      	mov	r1, r4
    91aa:	1e4b      	subs	r3, r1, #1
    91ac:	b29c      	uxth	r4, r3
    91ae:	2900      	cmp	r1, #0
    91b0:	d1f6      	bne.n	91a0 <l2cap_chan_tx_give_credits+0x6>
}
    91b2:	bd38      	pop	{r3, r4, r5, pc}

000091b4 <l2cap_chan_destroy>:
{
    91b4:	b510      	push	{r4, lr}
    91b6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    91b8:	3010      	adds	r0, #16
    91ba:	f022 fa9b 	bl	2b6f4 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    91be:	e002      	b.n	91c6 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    91c0:	4618      	mov	r0, r3
    91c2:	f013 f857 	bl	1c274 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    91c6:	2100      	movs	r1, #0
    91c8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    91cc:	f013 f825 	bl	1c21a <net_buf_get>
    91d0:	4603      	mov	r3, r0
    91d2:	2800      	cmp	r0, #0
    91d4:	d1f4      	bne.n	91c0 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    91d6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    91da:	b130      	cbz	r0, 91ea <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    91dc:	f013 f84a 	bl	1c274 <net_buf_unref>
		ch->_sdu = NULL;
    91e0:	2300      	movs	r3, #0
    91e2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    91e6:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    91ea:	bd10      	pop	{r4, pc}

000091ec <l2cap_chan_le_get_tx_buf>:
{
    91ec:	b508      	push	{r3, lr}
    91ee:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    91f0:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    91f4:	b118      	cbz	r0, 91fe <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    91f6:	2200      	movs	r2, #0
    91f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    91fc:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    91fe:	2100      	movs	r1, #0
    9200:	f103 0080 	add.w	r0, r3, #128	; 0x80
    9204:	f013 f809 	bl	1c21a <net_buf_get>
}
    9208:	bd08      	pop	{r3, pc}

0000920a <l2cap_chan_tx_init>:
{
    920a:	b510      	push	{r4, lr}
    920c:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    920e:	2220      	movs	r2, #32
    9210:	2100      	movs	r1, #0
    9212:	3060      	adds	r0, #96	; 0x60
    9214:	f022 ff32 	bl	2c07c <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    9218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    921c:	2100      	movs	r1, #0
    921e:	f104 0068 	add.w	r0, r4, #104	; 0x68
    9222:	f021 fc6f 	bl	2ab04 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    9226:	f104 0080 	add.w	r0, r4, #128	; 0x80
    922a:	f021 f8aa 	bl	2a382 <k_queue_init>
    922e:	bd10      	pop	{r4, pc}

00009230 <l2cap_chan_rx_init>:
{
    9230:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    9232:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    9236:	b913      	cbnz	r3, 923e <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    9238:	2342      	movs	r3, #66	; 0x42
    923a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    923e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    9242:	b96b      	cbnz	r3, 9260 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    9244:	6843      	ldr	r3, [r0, #4]
    9246:	68db      	ldr	r3, [r3, #12]
    9248:	b1cb      	cbz	r3, 927e <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    924a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    924e:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    9250:	4a0d      	ldr	r2, [pc, #52]	; (9288 <l2cap_chan_rx_init+0x58>)
    9252:	fb82 1203 	smull	r1, r2, r2, r3
    9256:	17db      	asrs	r3, r3, #31
    9258:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    925c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    9260:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    9264:	3302      	adds	r3, #2
    9266:	2b44      	cmp	r3, #68	; 0x44
    9268:	bfa8      	it	ge
    926a:	2344      	movge	r3, #68	; 0x44
    926c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    9270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9274:	2100      	movs	r1, #0
    9276:	3048      	adds	r0, #72	; 0x48
    9278:	f021 fc44 	bl	2ab04 <_impl_k_sem_init>
    927c:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    927e:	2302      	movs	r3, #2
    9280:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    9284:	e7ec      	b.n	9260 <l2cap_chan_rx_init+0x30>
    9286:	bf00      	nop
    9288:	78787879 	.word	0x78787879

0000928c <l2cap_change_security>:
{
    928c:	b508      	push	{r3, lr}
	switch (err) {
    928e:	2905      	cmp	r1, #5
    9290:	d00e      	beq.n	92b0 <l2cap_change_security+0x24>
    9292:	2908      	cmp	r1, #8
    9294:	d120      	bne.n	92d8 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    9296:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    929a:	2b01      	cmp	r3, #1
    929c:	d81f      	bhi.n	92de <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    929e:	2302      	movs	r3, #2
    92a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    92a4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    92a8:	6800      	ldr	r0, [r0, #0]
    92aa:	f7ff f917 	bl	84dc <bt_conn_security>
    92ae:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    92b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    92b4:	2b01      	cmp	r3, #1
    92b6:	d905      	bls.n	92c4 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    92b8:	2b02      	cmp	r3, #2
    92ba:	d807      	bhi.n	92cc <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    92bc:	2303      	movs	r3, #3
    92be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    92c2:	e7ef      	b.n	92a4 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    92c4:	2302      	movs	r3, #2
    92c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    92ca:	e7eb      	b.n	92a4 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    92cc:	2b03      	cmp	r3, #3
    92ce:	d809      	bhi.n	92e4 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    92d0:	2304      	movs	r3, #4
    92d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    92d6:	e7e5      	b.n	92a4 <l2cap_change_security+0x18>
		return -EINVAL;
    92d8:	f06f 0015 	mvn.w	r0, #21
    92dc:	bd08      	pop	{r3, pc}
			return -EALREADY;
    92de:	f06f 0077 	mvn.w	r0, #119	; 0x77
    92e2:	bd08      	pop	{r3, pc}
			return -EALREADY;
    92e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    92e8:	bd08      	pop	{r3, pc}
	...

000092ec <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    92ec:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    92f0:	2200      	movs	r2, #0
    92f2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    92f4:	4a05      	ldr	r2, [pc, #20]	; (930c <bt_l2cap_le_fixed_chan_register+0x20>)
    92f6:	6852      	ldr	r2, [r2, #4]
    92f8:	b11a      	cbz	r2, 9302 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    92fa:	6013      	str	r3, [r2, #0]
		list->tail = node;
    92fc:	4a03      	ldr	r2, [pc, #12]	; (930c <bt_l2cap_le_fixed_chan_register+0x20>)
    92fe:	6053      	str	r3, [r2, #4]
    9300:	4770      	bx	lr
		list->tail = node;
    9302:	4a02      	ldr	r2, [pc, #8]	; (930c <bt_l2cap_le_fixed_chan_register+0x20>)
    9304:	6053      	str	r3, [r2, #4]
		list->head = node;
    9306:	6013      	str	r3, [r2, #0]
    9308:	4770      	bx	lr
    930a:	bf00      	nop
    930c:	200006d0 	.word	0x200006d0

00009310 <bt_l2cap_chan_remove>:
	return list->head;
    9310:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9312:	b123      	cbz	r3, 931e <bt_l2cap_chan_remove+0xe>
    9314:	3b08      	subs	r3, #8
    9316:	2200      	movs	r2, #0
    9318:	b35b      	cbz	r3, 9372 <bt_l2cap_chan_remove+0x62>
{
    931a:	b410      	push	{r4}
    931c:	e01c      	b.n	9358 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    931e:	2300      	movs	r3, #0
    9320:	e7f9      	b.n	9316 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    9322:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    9326:	b142      	cbz	r2, 933a <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    9328:	689c      	ldr	r4, [r3, #8]
    932a:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    932c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    932e:	42a1      	cmp	r1, r4
    9330:	d00a      	beq.n	9348 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    9332:	2200      	movs	r2, #0
    9334:	609a      	str	r2, [r3, #8]
}
    9336:	bc10      	pop	{r4}
    9338:	4770      	bx	lr
		list->head = node->next;
    933a:	689a      	ldr	r2, [r3, #8]
    933c:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    933e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    9340:	428c      	cmp	r4, r1
    9342:	d1f6      	bne.n	9332 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    9344:	6402      	str	r2, [r0, #64]	; 0x40
    9346:	e7f4      	b.n	9332 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    9348:	6402      	str	r2, [r0, #64]	; 0x40
    934a:	e7f2      	b.n	9332 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    934c:	4614      	mov	r4, r2
    934e:	e009      	b.n	9364 <bt_l2cap_chan_remove+0x54>
    9350:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9352:	3b08      	subs	r3, #8
    9354:	2b00      	cmp	r3, #0
    9356:	d0ee      	beq.n	9336 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    9358:	428b      	cmp	r3, r1
    935a:	d0e2      	beq.n	9322 <bt_l2cap_chan_remove+0x12>
    935c:	f113 0208 	adds.w	r2, r3, #8
    9360:	d0f4      	beq.n	934c <bt_l2cap_chan_remove+0x3c>
	return node->next;
    9362:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9364:	b11c      	cbz	r4, 936e <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9366:	2a00      	cmp	r2, #0
    9368:	d0f2      	beq.n	9350 <bt_l2cap_chan_remove+0x40>
	return node->next;
    936a:	689b      	ldr	r3, [r3, #8]
    936c:	e7f1      	b.n	9352 <bt_l2cap_chan_remove+0x42>
    936e:	2300      	movs	r3, #0
    9370:	e7f0      	b.n	9354 <bt_l2cap_chan_remove+0x44>
    9372:	4770      	bx	lr

00009374 <bt_l2cap_chan_set_state>:
	chan->state = state;
    9374:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    9378:	4770      	bx	lr

0000937a <bt_l2cap_chan_del>:
{
    937a:	b510      	push	{r4, lr}
    937c:	4604      	mov	r4, r0
	if (!chan->conn) {
    937e:	6803      	ldr	r3, [r0, #0]
    9380:	b12b      	cbz	r3, 938e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    9382:	6843      	ldr	r3, [r0, #4]
    9384:	685b      	ldr	r3, [r3, #4]
    9386:	b103      	cbz	r3, 938a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    9388:	4798      	blx	r3
	chan->conn = NULL;
    938a:	2300      	movs	r3, #0
    938c:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    938e:	2100      	movs	r1, #0
    9390:	4620      	mov	r0, r4
    9392:	f7ff ffef 	bl	9374 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    9396:	2300      	movs	r3, #0
    9398:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    939a:	68e3      	ldr	r3, [r4, #12]
    939c:	b10b      	cbz	r3, 93a2 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    939e:	4620      	mov	r0, r4
    93a0:	4798      	blx	r3
    93a2:	bd10      	pop	{r4, pc}

000093a4 <l2cap_rtx_timeout>:
{
    93a4:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    93a6:	f1a0 0410 	sub.w	r4, r0, #16
    93aa:	4621      	mov	r1, r4
    93ac:	f850 0c10 	ldr.w	r0, [r0, #-16]
    93b0:	f7ff ffae 	bl	9310 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    93b4:	4620      	mov	r0, r4
    93b6:	f7ff ffe0 	bl	937a <bt_l2cap_chan_del>
    93ba:	bd10      	pop	{r4, pc}

000093bc <le_conn_rsp>:
{
    93bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    93c0:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    93c2:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    93c4:	8992      	ldrh	r2, [r2, #12]
    93c6:	2a09      	cmp	r2, #9
    93c8:	d927      	bls.n	941a <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    93ca:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    93ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    93d2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    93d6:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    93d8:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    93da:	b14d      	cbz	r5, 93f0 <le_conn_rsp+0x34>
    93dc:	2d05      	cmp	r5, #5
    93de:	d007      	beq.n	93f0 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    93e0:	2d08      	cmp	r5, #8
    93e2:	d005      	beq.n	93f0 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    93e4:	2201      	movs	r2, #1
    93e6:	4630      	mov	r0, r6
    93e8:	f7ff fe0a 	bl	9000 <__l2cap_lookup_ident>
    93ec:	4604      	mov	r4, r0
    93ee:	e004      	b.n	93fa <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    93f0:	2200      	movs	r2, #0
    93f2:	4630      	mov	r0, r6
    93f4:	f7ff fe04 	bl	9000 <__l2cap_lookup_ident>
    93f8:	4604      	mov	r4, r0
	if (!chan) {
    93fa:	b174      	cbz	r4, 941a <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    93fc:	f104 0010 	add.w	r0, r4, #16
    9400:	f022 f978 	bl	2b6f4 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    9404:	2300      	movs	r3, #0
    9406:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    940a:	2d05      	cmp	r5, #5
    940c:	d021      	beq.n	9452 <le_conn_rsp+0x96>
    940e:	2d08      	cmp	r5, #8
    9410:	d01f      	beq.n	9452 <le_conn_rsp+0x96>
    9412:	b125      	cbz	r5, 941e <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    9414:	4620      	mov	r0, r4
    9416:	f7ff ffb0 	bl	937a <bt_l2cap_chan_del>
    941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    941e:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    9422:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    9426:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    942a:	2103      	movs	r1, #3
    942c:	4620      	mov	r0, r4
    942e:	f7ff ffa1 	bl	9374 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    9432:	6863      	ldr	r3, [r4, #4]
    9434:	681b      	ldr	r3, [r3, #0]
    9436:	b10b      	cbz	r3, 943c <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    9438:	4620      	mov	r0, r4
    943a:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    943c:	4639      	mov	r1, r7
    943e:	4620      	mov	r0, r4
    9440:	f7ff feab 	bl	919a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    9444:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    9448:	4620      	mov	r0, r4
    944a:	f7ff fe99 	bl	9180 <l2cap_chan_rx_give_credits>
		break;
    944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    9452:	4629      	mov	r1, r5
    9454:	4620      	mov	r0, r4
    9456:	f7ff ff19 	bl	928c <l2cap_change_security>
    945a:	2800      	cmp	r0, #0
    945c:	d0dd      	beq.n	941a <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    945e:	4621      	mov	r1, r4
    9460:	4630      	mov	r0, r6
    9462:	f7ff ff55 	bl	9310 <bt_l2cap_chan_remove>
    9466:	e7d5      	b.n	9414 <le_conn_rsp+0x58>

00009468 <le_disconn_rsp>:
{
    9468:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    946a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    946c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    946e:	8993      	ldrh	r3, [r2, #12]
    9470:	2b03      	cmp	r3, #3
    9472:	d800      	bhi.n	9476 <le_disconn_rsp+0xe>
    9474:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    9476:	8809      	ldrh	r1, [r1, #0]
    9478:	f7ff fe18 	bl	90ac <l2cap_remove_tx_cid>
	if (!chan) {
    947c:	2800      	cmp	r0, #0
    947e:	d0f9      	beq.n	9474 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    9480:	f7ff ff7b 	bl	937a <bt_l2cap_chan_del>
    9484:	e7f6      	b.n	9474 <le_disconn_rsp+0xc>

00009486 <reject_cmd>:
{
    9486:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    9488:	2201      	movs	r2, #1
    948a:	6800      	ldr	r0, [r0, #0]
    948c:	f7ff fdb8 	bl	9000 <__l2cap_lookup_ident>
	if (!chan) {
    9490:	b108      	cbz	r0, 9496 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    9492:	f7ff ff72 	bl	937a <bt_l2cap_chan_del>
    9496:	bd08      	pop	{r3, pc}

00009498 <bt_l2cap_chan_add>:
{
    9498:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    949a:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    949e:	2400      	movs	r4, #0
    94a0:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    94a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    94a4:	b12c      	cbz	r4, 94b2 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    94a6:	6023      	str	r3, [r4, #0]
		list->tail = node;
    94a8:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    94aa:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    94ac:	60ca      	str	r2, [r1, #12]
}
    94ae:	bc10      	pop	{r4}
    94b0:	4770      	bx	lr
		list->tail = node;
    94b2:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    94b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    94b6:	e7f8      	b.n	94aa <bt_l2cap_chan_add+0x12>

000094b8 <bt_l2cap_disconnected>:
{
    94b8:	b510      	push	{r4, lr}
	return list->head;
    94ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    94bc:	b140      	cbz	r0, 94d0 <bt_l2cap_disconnected+0x18>
    94be:	3808      	subs	r0, #8
    94c0:	b140      	cbz	r0, 94d4 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94c2:	f110 0408 	adds.w	r4, r0, #8
    94c6:	d000      	beq.n	94ca <bt_l2cap_disconnected+0x12>
	return node->next;
    94c8:	6884      	ldr	r4, [r0, #8]
    94ca:	b12c      	cbz	r4, 94d8 <bt_l2cap_disconnected+0x20>
    94cc:	3c08      	subs	r4, #8
    94ce:	e00a      	b.n	94e6 <bt_l2cap_disconnected+0x2e>
    94d0:	2000      	movs	r0, #0
    94d2:	e7f5      	b.n	94c0 <bt_l2cap_disconnected+0x8>
    94d4:	4604      	mov	r4, r0
    94d6:	e006      	b.n	94e6 <bt_l2cap_disconnected+0x2e>
    94d8:	2400      	movs	r4, #0
    94da:	e004      	b.n	94e6 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94dc:	461a      	mov	r2, r3
    94de:	e00a      	b.n	94f6 <bt_l2cap_disconnected+0x3e>
    94e0:	3b08      	subs	r3, #8
    94e2:	4620      	mov	r0, r4
    94e4:	461c      	mov	r4, r3
    94e6:	b178      	cbz	r0, 9508 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    94e8:	f7ff ff47 	bl	937a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    94ec:	b144      	cbz	r4, 9500 <bt_l2cap_disconnected+0x48>
    94ee:	f114 0308 	adds.w	r3, r4, #8
    94f2:	d0f3      	beq.n	94dc <bt_l2cap_disconnected+0x24>
	return node->next;
    94f4:	68a2      	ldr	r2, [r4, #8]
    94f6:	b12a      	cbz	r2, 9504 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94f8:	2b00      	cmp	r3, #0
    94fa:	d0f1      	beq.n	94e0 <bt_l2cap_disconnected+0x28>
	return node->next;
    94fc:	68a3      	ldr	r3, [r4, #8]
    94fe:	e7ef      	b.n	94e0 <bt_l2cap_disconnected+0x28>
    9500:	4623      	mov	r3, r4
    9502:	e7ee      	b.n	94e2 <bt_l2cap_disconnected+0x2a>
    9504:	2300      	movs	r3, #0
    9506:	e7ec      	b.n	94e2 <bt_l2cap_disconnected+0x2a>
}
    9508:	bd10      	pop	{r4, pc}

0000950a <bt_l2cap_create_pdu>:
{
    950a:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    950c:	3104      	adds	r1, #4
    950e:	f7ff fc61 	bl	8dd4 <bt_conn_create_pdu>
}
    9512:	bd08      	pop	{r3, pc}

00009514 <l2cap_create_le_sig_pdu>:
{
    9514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9516:	460f      	mov	r7, r1
    9518:	4616      	mov	r6, r2
    951a:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    951c:	2100      	movs	r1, #0
    951e:	4608      	mov	r0, r1
    9520:	f7ff fff3 	bl	950a <bt_l2cap_create_pdu>
    9524:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9526:	2104      	movs	r1, #4
    9528:	3008      	adds	r0, #8
    952a:	f012 feef 	bl	1c30c <net_buf_simple_add>
	hdr->code = code;
    952e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    9530:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    9532:	8045      	strh	r5, [r0, #2]
}
    9534:	4620      	mov	r0, r4
    9536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009538 <l2cap_chan_create_seg>:
{
    9538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    953c:	4605      	mov	r5, r0
    953e:	460c      	mov	r4, r1
    9540:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9542:	7988      	ldrb	r0, [r1, #6]
    9544:	f012 fe1c 	bl	1c180 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    9548:	89a3      	ldrh	r3, [r4, #12]
    954a:	4443      	add	r3, r8
    954c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    9550:	4293      	cmp	r3, r2
    9552:	d802      	bhi.n	955a <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    9554:	8ac3      	ldrh	r3, [r0, #22]
    9556:	2b03      	cmp	r3, #3
    9558:	d815      	bhi.n	9586 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    955a:	79a0      	ldrb	r0, [r4, #6]
    955c:	f012 fe10 	bl	1c180 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    9560:	8ac3      	ldrh	r3, [r0, #22]
    9562:	2b03      	cmp	r3, #3
    9564:	d902      	bls.n	956c <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    9566:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    9568:	2b4b      	cmp	r3, #75	; 0x4b
    956a:	d82e      	bhi.n	95ca <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    956c:	2100      	movs	r1, #0
    956e:	4608      	mov	r0, r1
    9570:	f7ff ffcb 	bl	950a <bt_l2cap_create_pdu>
    9574:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    9576:	f1b8 0f00 	cmp.w	r8, #0
    957a:	d038      	beq.n	95ee <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    957c:	f106 0008 	add.w	r0, r6, #8
    9580:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    9582:	2100      	movs	r1, #0
    9584:	e02e      	b.n	95e4 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    9586:	fa1f f688 	uxth.w	r6, r8
    958a:	3608      	adds	r6, #8
    958c:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    958e:	f104 0708 	add.w	r7, r4, #8
    9592:	4638      	mov	r0, r7
    9594:	f012 ff1f 	bl	1c3d6 <net_buf_simple_headroom>
    9598:	42b0      	cmp	r0, r6
    959a:	d3de      	bcc.n	955a <l2cap_chan_create_seg+0x22>
    959c:	6823      	ldr	r3, [r4, #0]
    959e:	2b00      	cmp	r3, #0
    95a0:	d1db      	bne.n	955a <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    95a2:	f1b8 0f00 	cmp.w	r8, #0
    95a6:	d00b      	beq.n	95c0 <l2cap_chan_create_seg+0x88>
    95a8:	4623      	mov	r3, r4
    95aa:	2100      	movs	r1, #0
    95ac:	e002      	b.n	95b4 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    95ae:	899a      	ldrh	r2, [r3, #12]
    95b0:	4411      	add	r1, r2
		buf = buf->frags;
    95b2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    95b4:	2b00      	cmp	r3, #0
    95b6:	d1fa      	bne.n	95ae <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    95b8:	b289      	uxth	r1, r1
    95ba:	4638      	mov	r0, r7
    95bc:	f012 fee5 	bl	1c38a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    95c0:	4620      	mov	r0, r4
    95c2:	f012 fe73 	bl	1c2ac <net_buf_ref>
    95c6:	4606      	mov	r6, r0
    95c8:	e02f      	b.n	962a <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    95ca:	2100      	movs	r1, #0
    95cc:	f012 fde4 	bl	1c198 <net_buf_alloc>
		if (seg) {
    95d0:	4606      	mov	r6, r0
    95d2:	2800      	cmp	r0, #0
    95d4:	d0ca      	beq.n	956c <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    95d6:	2108      	movs	r1, #8
    95d8:	f012 fe39 	bl	1c24e <net_buf_reserve>
    95dc:	e7cb      	b.n	9576 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    95de:	899a      	ldrh	r2, [r3, #12]
    95e0:	4411      	add	r1, r2
		buf = buf->frags;
    95e2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    95e4:	2b00      	cmp	r3, #0
    95e6:	d1fa      	bne.n	95de <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    95e8:	b289      	uxth	r1, r1
    95ea:	f012 fea7 	bl	1c33c <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    95ee:	f106 0708 	add.w	r7, r6, #8
    95f2:	4638      	mov	r0, r7
    95f4:	f012 fef3 	bl	1c3de <net_buf_simple_tailroom>
    95f8:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    95fc:	eba5 0308 	sub.w	r3, r5, r8
    9600:	4298      	cmp	r0, r3
    9602:	d315      	bcc.n	9630 <l2cap_chan_create_seg+0xf8>
    9604:	fa1f f888 	uxth.w	r8, r8
    9608:	eba5 0508 	sub.w	r5, r5, r8
    960c:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    960e:	89a0      	ldrh	r0, [r4, #12]
    9610:	4285      	cmp	r5, r0
    9612:	bf28      	it	cs
    9614:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    9616:	462a      	mov	r2, r5
    9618:	f854 1f08 	ldr.w	r1, [r4, #8]!
    961c:	4638      	mov	r0, r7
    961e:	f012 fe7b 	bl	1c318 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    9622:	4629      	mov	r1, r5
    9624:	4620      	mov	r0, r4
    9626:	f012 febe 	bl	1c3a6 <net_buf_simple_pull>
}
    962a:	4630      	mov	r0, r6
    962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    9630:	4638      	mov	r0, r7
    9632:	f012 fed4 	bl	1c3de <net_buf_simple_tailroom>
    9636:	b285      	uxth	r5, r0
    9638:	e7e9      	b.n	960e <l2cap_chan_create_seg+0xd6>

0000963a <bt_l2cap_send_cb>:
{
    963a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    963c:	4605      	mov	r5, r0
    963e:	460f      	mov	r7, r1
    9640:	4614      	mov	r4, r2
    9642:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    9644:	2104      	movs	r1, #4
    9646:	f102 0008 	add.w	r0, r2, #8
    964a:	f012 fe96 	bl	1c37a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    964e:	89a3      	ldrh	r3, [r4, #12]
    9650:	3b04      	subs	r3, #4
    9652:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    9654:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    9656:	4632      	mov	r2, r6
    9658:	4621      	mov	r1, r4
    965a:	4628      	mov	r0, r5
    965c:	f7fe ffbe 	bl	85dc <bt_conn_send_cb>
    9660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009664 <l2cap_chan_send_req>:
{
    9664:	b538      	push	{r3, r4, r5, lr}
    9666:	4604      	mov	r4, r0
    9668:	460d      	mov	r5, r1
	if (timeout) {
    966a:	b94a      	cbnz	r2, 9680 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    966c:	3010      	adds	r0, #16
    966e:	f022 f841 	bl	2b6f4 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    9672:	2300      	movs	r3, #0
    9674:	462a      	mov	r2, r5
    9676:	2105      	movs	r1, #5
    9678:	6820      	ldr	r0, [r4, #0]
    967a:	f7ff ffde 	bl	963a <bt_l2cap_send_cb>
    967e:	bd38      	pop	{r3, r4, r5, pc}
    9680:	f100 0110 	add.w	r1, r0, #16
    9684:	4801      	ldr	r0, [pc, #4]	; (968c <l2cap_chan_send_req+0x28>)
    9686:	f022 f88f 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    968a:	e7f2      	b.n	9672 <l2cap_chan_send_req+0xe>
    968c:	20002c00 	.word	0x20002c00

00009690 <l2cap_le_conn_req>:
{
    9690:	b538      	push	{r3, r4, r5, lr}
    9692:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    9694:	f7ff fca6 	bl	8fe4 <get_ident>
    9698:	4602      	mov	r2, r0
    969a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    969e:	230a      	movs	r3, #10
    96a0:	2114      	movs	r1, #20
    96a2:	2000      	movs	r0, #0
    96a4:	f7ff ff36 	bl	9514 <l2cap_create_le_sig_pdu>
    96a8:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    96aa:	210a      	movs	r1, #10
    96ac:	3008      	adds	r0, #8
    96ae:	f012 fe2d 	bl	1c30c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    96b2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    96b4:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    96b6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    96ba:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    96bc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    96c0:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    96c2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    96c6:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    96c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    96cc:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    96ce:	f649 4240 	movw	r2, #40000	; 0x9c40
    96d2:	4629      	mov	r1, r5
    96d4:	4620      	mov	r0, r4
    96d6:	f7ff ffc5 	bl	9664 <l2cap_chan_send_req>
}
    96da:	2000      	movs	r0, #0
    96dc:	bd38      	pop	{r3, r4, r5, pc}

000096de <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    96de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    96e2:	2b01      	cmp	r3, #1
    96e4:	d000      	beq.n	96e8 <l2cap_le_encrypt_change+0xa>
    96e6:	4770      	bx	lr
    96e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    96ec:	2b00      	cmp	r3, #0
    96ee:	d1fa      	bne.n	96e6 <l2cap_le_encrypt_change+0x8>
{
    96f0:	b510      	push	{r4, lr}
    96f2:	4604      	mov	r4, r0
	if (status) {
    96f4:	b911      	cbnz	r1, 96fc <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    96f6:	f7ff ffcb 	bl	9690 <l2cap_le_conn_req>
    96fa:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    96fc:	4601      	mov	r1, r0
    96fe:	6800      	ldr	r0, [r0, #0]
    9700:	f7ff fe06 	bl	9310 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    9704:	4620      	mov	r0, r4
    9706:	f7ff fe38 	bl	937a <bt_l2cap_chan_del>
		return;
    970a:	bd10      	pop	{r4, pc}

0000970c <bt_l2cap_encrypt_change>:
{
    970c:	b538      	push	{r3, r4, r5, lr}
    970e:	460d      	mov	r5, r1
	return list->head;
    9710:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9712:	b10c      	cbz	r4, 9718 <bt_l2cap_encrypt_change+0xc>
    9714:	3c08      	subs	r4, #8
    9716:	e00a      	b.n	972e <bt_l2cap_encrypt_change+0x22>
    9718:	2400      	movs	r4, #0
    971a:	e008      	b.n	972e <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    971c:	f114 0308 	adds.w	r3, r4, #8
    9720:	d012      	beq.n	9748 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    9722:	68a2      	ldr	r2, [r4, #8]
    9724:	b192      	cbz	r2, 974c <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9726:	b103      	cbz	r3, 972a <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    9728:	68a3      	ldr	r3, [r4, #8]
    972a:	f1a3 0408 	sub.w	r4, r3, #8
    972e:	b17c      	cbz	r4, 9750 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    9730:	4629      	mov	r1, r5
    9732:	4620      	mov	r0, r4
    9734:	f7ff ffd3 	bl	96de <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    9738:	6863      	ldr	r3, [r4, #4]
    973a:	689b      	ldr	r3, [r3, #8]
    973c:	2b00      	cmp	r3, #0
    973e:	d0ed      	beq.n	971c <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    9740:	4629      	mov	r1, r5
    9742:	4620      	mov	r0, r4
    9744:	4798      	blx	r3
    9746:	e7e9      	b.n	971c <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9748:	461a      	mov	r2, r3
    974a:	e7eb      	b.n	9724 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    974c:	2400      	movs	r4, #0
    974e:	e7ee      	b.n	972e <bt_l2cap_encrypt_change+0x22>
}
    9750:	bd38      	pop	{r3, r4, r5, pc}

00009752 <l2cap_chan_update_credits>:
{
    9752:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    9754:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    9756:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    975a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    975e:	d900      	bls.n	9762 <l2cap_chan_update_credits+0x10>
    9760:	bd70      	pop	{r4, r5, r6, pc}
    9762:	460e      	mov	r6, r1
    9764:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    9766:	b2a4      	uxth	r4, r4
    9768:	1b1b      	subs	r3, r3, r4
    976a:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    976c:	4621      	mov	r1, r4
    976e:	f7ff fd07 	bl	9180 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    9772:	f7ff fc37 	bl	8fe4 <get_ident>
    9776:	2304      	movs	r3, #4
    9778:	4602      	mov	r2, r0
    977a:	2116      	movs	r1, #22
    977c:	4630      	mov	r0, r6
    977e:	f7ff fec9 	bl	9514 <l2cap_create_le_sig_pdu>
    9782:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    9784:	2104      	movs	r1, #4
    9786:	3008      	adds	r0, #8
    9788:	f012 fdc0 	bl	1c30c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    978c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    9790:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    9792:	8044      	strh	r4, [r0, #2]
    9794:	2300      	movs	r3, #0
    9796:	4632      	mov	r2, r6
    9798:	2105      	movs	r1, #5
    979a:	6828      	ldr	r0, [r5, #0]
    979c:	f7ff ff4d 	bl	963a <bt_l2cap_send_cb>
}
    97a0:	e7de      	b.n	9760 <l2cap_chan_update_credits+0xe>

000097a2 <l2cap_chan_le_send>:
{
    97a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97a4:	4604      	mov	r4, r0
    97a6:	460d      	mov	r5, r1
    97a8:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    97aa:	2100      	movs	r1, #0
    97ac:	3068      	adds	r0, #104	; 0x68
    97ae:	f021 f9c5 	bl	2ab3c <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    97b2:	b9b0      	cbnz	r0, 97e2 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    97b4:	4632      	mov	r2, r6
    97b6:	4629      	mov	r1, r5
    97b8:	4620      	mov	r0, r4
    97ba:	f7ff febd 	bl	9538 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    97be:	6827      	ldr	r7, [r4, #0]
    97c0:	b157      	cbz	r7, 97d8 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    97c2:	8985      	ldrh	r5, [r0, #12]
    97c4:	1bad      	subs	r5, r5, r6
    97c6:	2300      	movs	r3, #0
    97c8:	4602      	mov	r2, r0
    97ca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    97ce:	4638      	mov	r0, r7
    97d0:	f7ff ff33 	bl	963a <bt_l2cap_send_cb>
}
    97d4:	4628      	mov	r0, r5
    97d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    97d8:	f012 fd4c 	bl	1c274 <net_buf_unref>
		return -ECONNRESET;
    97dc:	f06f 0567 	mvn.w	r5, #103	; 0x67
    97e0:	e7f8      	b.n	97d4 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    97e2:	f06f 050a 	mvn.w	r5, #10
    97e6:	e7f5      	b.n	97d4 <l2cap_chan_le_send+0x32>

000097e8 <l2cap_chan_le_send_sdu>:
{
    97e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97ec:	b082      	sub	sp, #8
    97ee:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    97f0:	680d      	ldr	r5, [r1, #0]
    97f2:	462b      	mov	r3, r5
	size_t bytes = 0;
    97f4:	2200      	movs	r2, #0
    97f6:	e002      	b.n	97fe <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    97f8:	899c      	ldrh	r4, [r3, #12]
    97fa:	4422      	add	r2, r4
		buf = buf->frags;
    97fc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    97fe:	2b00      	cmp	r3, #0
    9800:	d1fa      	bne.n	97f8 <l2cap_chan_le_send_sdu+0x10>
    9802:	9b01      	ldr	r3, [sp, #4]
    9804:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    9806:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    980a:	4294      	cmp	r4, r2
    980c:	dc54      	bgt.n	98b8 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    980e:	89aa      	ldrh	r2, [r5, #12]
    9810:	b912      	cbnz	r2, 9818 <l2cap_chan_le_send_sdu+0x30>
    9812:	682a      	ldr	r2, [r5, #0]
    9814:	b102      	cbz	r2, 9818 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    9816:	4615      	mov	r5, r2
    9818:	4688      	mov	r8, r1
    981a:	4607      	mov	r7, r0
	if (!sent) {
    981c:	b10b      	cbz	r3, 9822 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    981e:	2600      	movs	r6, #0
    9820:	e024      	b.n	986c <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    9822:	2202      	movs	r2, #2
    9824:	4629      	mov	r1, r5
    9826:	f7ff ffbc 	bl	97a2 <l2cap_chan_le_send>
		if (ret < 0) {
    982a:	1e06      	subs	r6, r0, #0
    982c:	db01      	blt.n	9832 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    982e:	9601      	str	r6, [sp, #4]
    9830:	e7f5      	b.n	981e <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    9832:	f116 0f0b 	cmn.w	r6, #11
    9836:	d002      	beq.n	983e <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    9838:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    983c:	e038      	b.n	98b0 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    983e:	f105 0010 	add.w	r0, r5, #16
    9842:	89eb      	ldrh	r3, [r5, #14]
    9844:	4418      	add	r0, r3
    9846:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    9848:	2204      	movs	r2, #4
    984a:	eb0d 0102 	add.w	r1, sp, r2
    984e:	f020 0003 	bic.w	r0, r0, #3
    9852:	f7f6 fd35 	bl	2c0 <memcpy>
    9856:	e7ef      	b.n	9838 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    9858:	2200      	movs	r2, #0
    985a:	4629      	mov	r1, r5
    985c:	4638      	mov	r0, r7
    985e:	f7ff ffa0 	bl	97a2 <l2cap_chan_le_send>
		if (ret < 0) {
    9862:	1e06      	subs	r6, r0, #0
    9864:	db0e      	blt.n	9884 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    9866:	9b01      	ldr	r3, [sp, #4]
    9868:	4433      	add	r3, r6
    986a:	9301      	str	r3, [sp, #4]
    986c:	9b01      	ldr	r3, [sp, #4]
    986e:	429c      	cmp	r4, r3
    9870:	dd1b      	ble.n	98aa <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    9872:	89ab      	ldrh	r3, [r5, #12]
    9874:	2b00      	cmp	r3, #0
    9876:	d1ef      	bne.n	9858 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    9878:	4629      	mov	r1, r5
    987a:	2000      	movs	r0, #0
    987c:	f012 fd3a 	bl	1c2f4 <net_buf_frag_del>
    9880:	4605      	mov	r5, r0
    9882:	e7e9      	b.n	9858 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    9884:	f116 0f0b 	cmn.w	r6, #11
    9888:	d002      	beq.n	9890 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    988a:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    988e:	e00f      	b.n	98b0 <l2cap_chan_le_send_sdu+0xc8>
    9890:	f105 0010 	add.w	r0, r5, #16
    9894:	89eb      	ldrh	r3, [r5, #14]
    9896:	4418      	add	r0, r3
    9898:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    989a:	2204      	movs	r2, #4
    989c:	eb0d 0102 	add.w	r1, sp, r2
    98a0:	f020 0003 	bic.w	r0, r0, #3
    98a4:	f7f6 fd0c 	bl	2c0 <memcpy>
    98a8:	e7ef      	b.n	988a <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    98aa:	4628      	mov	r0, r5
    98ac:	f012 fce2 	bl	1c274 <net_buf_unref>
}
    98b0:	4630      	mov	r0, r6
    98b2:	b002      	add	sp, #8
    98b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    98b8:	f06f 0679 	mvn.w	r6, #121	; 0x79
    98bc:	e7f8      	b.n	98b0 <l2cap_chan_le_send_sdu+0xc8>

000098be <l2cap_chan_le_send_resume>:
{
    98be:	b510      	push	{r4, lr}
    98c0:	b082      	sub	sp, #8
    98c2:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    98c4:	4620      	mov	r0, r4
    98c6:	f7ff fc91 	bl	91ec <l2cap_chan_le_get_tx_buf>
    98ca:	9001      	str	r0, [sp, #4]
    98cc:	b180      	cbz	r0, 98f0 <l2cap_chan_le_send_resume+0x32>
    98ce:	f100 0310 	add.w	r3, r0, #16
    98d2:	89c2      	ldrh	r2, [r0, #14]
    98d4:	4413      	add	r3, r2
    98d6:	3303      	adds	r3, #3
    98d8:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    98dc:	681a      	ldr	r2, [r3, #0]
    98de:	a901      	add	r1, sp, #4
    98e0:	4620      	mov	r0, r4
    98e2:	f7ff ff81 	bl	97e8 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    98e6:	2800      	cmp	r0, #0
    98e8:	daec      	bge.n	98c4 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    98ea:	f110 0f0b 	cmn.w	r0, #11
    98ee:	d001      	beq.n	98f4 <l2cap_chan_le_send_resume+0x36>
}
    98f0:	b002      	add	sp, #8
    98f2:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    98f4:	9b01      	ldr	r3, [sp, #4]
    98f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    98fa:	e7f9      	b.n	98f0 <l2cap_chan_le_send_resume+0x32>

000098fc <l2cap_send_reject>:
{
    98fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9900:	4680      	mov	r8, r0
    9902:	4691      	mov	r9, r2
    9904:	461e      	mov	r6, r3
    9906:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    990a:	1cbb      	adds	r3, r7, #2
    990c:	460a      	mov	r2, r1
    990e:	2101      	movs	r1, #1
    9910:	2000      	movs	r0, #0
    9912:	f7ff fdff 	bl	9514 <l2cap_create_le_sig_pdu>
    9916:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    9918:	f100 0508 	add.w	r5, r0, #8
    991c:	2102      	movs	r1, #2
    991e:	4628      	mov	r0, r5
    9920:	f012 fcf4 	bl	1c30c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    9924:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    9928:	b126      	cbz	r6, 9934 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    992a:	463a      	mov	r2, r7
    992c:	4631      	mov	r1, r6
    992e:	4628      	mov	r0, r5
    9930:	f012 fcf2 	bl	1c318 <net_buf_simple_add_mem>
    9934:	2300      	movs	r3, #0
    9936:	4622      	mov	r2, r4
    9938:	2105      	movs	r1, #5
    993a:	4640      	mov	r0, r8
    993c:	f7ff fe7d 	bl	963a <bt_l2cap_send_cb>
    9940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009944 <le_conn_param_update_req>:
{
    9944:	b570      	push	{r4, r5, r6, lr}
    9946:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    9948:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    994a:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    994c:	8990      	ldrh	r0, [r2, #12]
    994e:	2807      	cmp	r0, #7
    9950:	d908      	bls.n	9964 <le_conn_param_update_req+0x20>
    9952:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    9954:	78e2      	ldrb	r2, [r4, #3]
    9956:	b13a      	cbz	r2, 9968 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    9958:	2200      	movs	r2, #0
    995a:	9200      	str	r2, [sp, #0]
    995c:	4613      	mov	r3, r2
    995e:	4620      	mov	r0, r4
    9960:	f7ff ffcc 	bl	98fc <l2cap_send_reject>
}
    9964:	b004      	add	sp, #16
    9966:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    9968:	881a      	ldrh	r2, [r3, #0]
    996a:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    996e:	885a      	ldrh	r2, [r3, #2]
    9970:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    9974:	889a      	ldrh	r2, [r3, #4]
    9976:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    997a:	88db      	ldrh	r3, [r3, #6]
    997c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    9980:	2302      	movs	r3, #2
    9982:	460a      	mov	r2, r1
    9984:	2113      	movs	r1, #19
    9986:	f7ff fdc5 	bl	9514 <l2cap_create_le_sig_pdu>
    998a:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    998c:	a902      	add	r1, sp, #8
    998e:	4620      	mov	r0, r4
    9990:	f7fe fcc2 	bl	8318 <le_param_req>
    9994:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    9996:	2102      	movs	r1, #2
    9998:	f106 0008 	add.w	r0, r6, #8
    999c:	f012 fcb6 	bl	1c30c <net_buf_simple_add>
	if (accepted) {
    99a0:	b17d      	cbz	r5, 99c2 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    99a2:	2300      	movs	r3, #0
    99a4:	7003      	strb	r3, [r0, #0]
    99a6:	7043      	strb	r3, [r0, #1]
    99a8:	2300      	movs	r3, #0
    99aa:	4632      	mov	r2, r6
    99ac:	2105      	movs	r1, #5
    99ae:	4620      	mov	r0, r4
    99b0:	f7ff fe43 	bl	963a <bt_l2cap_send_cb>
	if (accepted) {
    99b4:	2d00      	cmp	r5, #0
    99b6:	d0d5      	beq.n	9964 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    99b8:	a902      	add	r1, sp, #8
    99ba:	4620      	mov	r0, r4
    99bc:	f7ff f976 	bl	8cac <bt_conn_le_conn_update>
    99c0:	e7d0      	b.n	9964 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    99c2:	2301      	movs	r3, #1
    99c4:	7003      	strb	r3, [r0, #0]
    99c6:	2300      	movs	r3, #0
    99c8:	7043      	strb	r3, [r0, #1]
    99ca:	e7ed      	b.n	99a8 <le_conn_param_update_req+0x64>

000099cc <le_disconn_req>:
{
    99cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99d0:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    99d2:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    99d4:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    99d6:	8993      	ldrh	r3, [r2, #12]
    99d8:	2b03      	cmp	r3, #3
    99da:	d802      	bhi.n	99e2 <le_disconn_req+0x16>
}
    99dc:	b004      	add	sp, #16
    99de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99e2:	4614      	mov	r4, r2
    99e4:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    99e6:	8879      	ldrh	r1, [r7, #2]
    99e8:	4630      	mov	r0, r6
    99ea:	f7ff fb5f 	bl	90ac <l2cap_remove_tx_cid>
	if (!chan) {
    99ee:	4680      	mov	r8, r0
    99f0:	b1d0      	cbz	r0, 9a28 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    99f2:	2304      	movs	r3, #4
    99f4:	462a      	mov	r2, r5
    99f6:	2107      	movs	r1, #7
    99f8:	4620      	mov	r0, r4
    99fa:	f7ff fd8b 	bl	9514 <l2cap_create_le_sig_pdu>
    99fe:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    9a00:	2104      	movs	r1, #4
    9a02:	3008      	adds	r0, #8
    9a04:	f012 fc82 	bl	1c30c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    9a08:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    9a0c:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    9a0e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    9a12:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    9a14:	4640      	mov	r0, r8
    9a16:	f7ff fcb0 	bl	937a <bt_l2cap_chan_del>
    9a1a:	2300      	movs	r3, #0
    9a1c:	4622      	mov	r2, r4
    9a1e:	2105      	movs	r1, #5
    9a20:	4630      	mov	r0, r6
    9a22:	f7ff fe0a 	bl	963a <bt_l2cap_send_cb>
    9a26:	e7d9      	b.n	99dc <le_disconn_req+0x10>
		data.scid = req->scid;
    9a28:	887b      	ldrh	r3, [r7, #2]
    9a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    9a2e:	883b      	ldrh	r3, [r7, #0]
    9a30:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    9a34:	2304      	movs	r3, #4
    9a36:	9300      	str	r3, [sp, #0]
    9a38:	ab03      	add	r3, sp, #12
    9a3a:	2202      	movs	r2, #2
    9a3c:	4629      	mov	r1, r5
    9a3e:	4630      	mov	r0, r6
    9a40:	f7ff ff5c 	bl	98fc <l2cap_send_reject>
    9a44:	e7ca      	b.n	99dc <le_disconn_req+0x10>

00009a46 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    9a46:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9a48:	b108      	cbz	r0, 9a4e <bt_l2cap_le_lookup_tx_cid+0x8>
    9a4a:	3808      	subs	r0, #8
    9a4c:	e006      	b.n	9a5c <bt_l2cap_le_lookup_tx_cid+0x16>
    9a4e:	2000      	movs	r0, #0
    9a50:	e004      	b.n	9a5c <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9a52:	461a      	mov	r2, r3
    9a54:	e00b      	b.n	9a6e <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    9a56:	6883      	ldr	r3, [r0, #8]
    9a58:	f1a3 0008 	sub.w	r0, r3, #8
    9a5c:	b168      	cbz	r0, 9a7a <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    9a5e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    9a62:	428b      	cmp	r3, r1
    9a64:	d009      	beq.n	9a7a <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9a66:	f110 0308 	adds.w	r3, r0, #8
    9a6a:	d0f2      	beq.n	9a52 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    9a6c:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9a6e:	b112      	cbz	r2, 9a76 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9a70:	2b00      	cmp	r3, #0
    9a72:	d1f0      	bne.n	9a56 <bt_l2cap_le_lookup_tx_cid+0x10>
    9a74:	e7f0      	b.n	9a58 <bt_l2cap_le_lookup_tx_cid+0x12>
    9a76:	2000      	movs	r0, #0
    9a78:	e7f0      	b.n	9a5c <bt_l2cap_le_lookup_tx_cid+0x16>
}
    9a7a:	4770      	bx	lr

00009a7c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    9a7c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9a7e:	b108      	cbz	r0, 9a84 <bt_l2cap_le_lookup_rx_cid+0x8>
    9a80:	3808      	subs	r0, #8
    9a82:	e006      	b.n	9a92 <bt_l2cap_le_lookup_rx_cid+0x16>
    9a84:	2000      	movs	r0, #0
    9a86:	e004      	b.n	9a92 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9a88:	461a      	mov	r2, r3
    9a8a:	e00b      	b.n	9aa4 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    9a8c:	6883      	ldr	r3, [r0, #8]
    9a8e:	f1a3 0008 	sub.w	r0, r3, #8
    9a92:	b168      	cbz	r0, 9ab0 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    9a94:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    9a98:	428b      	cmp	r3, r1
    9a9a:	d009      	beq.n	9ab0 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9a9c:	f110 0308 	adds.w	r3, r0, #8
    9aa0:	d0f2      	beq.n	9a88 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    9aa2:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    9aa4:	b112      	cbz	r2, 9aac <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d1f0      	bne.n	9a8c <bt_l2cap_le_lookup_rx_cid+0x10>
    9aaa:	e7f0      	b.n	9a8e <bt_l2cap_le_lookup_rx_cid+0x12>
    9aac:	2000      	movs	r0, #0
    9aae:	e7f0      	b.n	9a92 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    9ab0:	4770      	bx	lr

00009ab2 <l2cap_chan_alloc_cid>:
{
    9ab2:	b570      	push	{r4, r5, r6, lr}
    9ab4:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    9ab6:	460d      	mov	r5, r1
    9ab8:	b1a1      	cbz	r1, 9ae4 <l2cap_chan_alloc_cid+0x32>
    9aba:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    9abe:	b9ab      	cbnz	r3, 9aec <l2cap_chan_alloc_cid+0x3a>
    9ac0:	2440      	movs	r4, #64	; 0x40
    9ac2:	e001      	b.n	9ac8 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    9ac4:	3401      	adds	r4, #1
    9ac6:	b2a4      	uxth	r4, r4
    9ac8:	2c7f      	cmp	r4, #127	; 0x7f
    9aca:	d80d      	bhi.n	9ae8 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    9acc:	2d00      	cmp	r5, #0
    9ace:	d0f9      	beq.n	9ac4 <l2cap_chan_alloc_cid+0x12>
    9ad0:	4621      	mov	r1, r4
    9ad2:	4630      	mov	r0, r6
    9ad4:	f7ff ffd2 	bl	9a7c <bt_l2cap_le_lookup_rx_cid>
    9ad8:	2800      	cmp	r0, #0
    9ada:	d1f3      	bne.n	9ac4 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    9adc:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    9ae0:	4628      	mov	r0, r5
    9ae2:	bd70      	pop	{r4, r5, r6, pc}
    9ae4:	2440      	movs	r4, #64	; 0x40
    9ae6:	e7ef      	b.n	9ac8 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    9ae8:	2000      	movs	r0, #0
    9aea:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    9aec:	4608      	mov	r0, r1
}
    9aee:	bd70      	pop	{r4, r5, r6, pc}

00009af0 <l2cap_chan_add>:
{
    9af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9af2:	4606      	mov	r6, r0
    9af4:	460c      	mov	r4, r1
    9af6:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    9af8:	f7ff ffdb 	bl	9ab2 <l2cap_chan_alloc_cid>
	if (!ch) {
    9afc:	b1c0      	cbz	r0, 9b30 <l2cap_chan_add+0x40>
    9afe:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    9b00:	490c      	ldr	r1, [pc, #48]	; (9b34 <l2cap_chan_add+0x44>)
    9b02:	f104 0010 	add.w	r0, r4, #16
    9b06:	f021 fdd7 	bl	2b6b8 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    9b0a:	463a      	mov	r2, r7
    9b0c:	4621      	mov	r1, r4
    9b0e:	4630      	mov	r0, r6
    9b10:	f7ff fcc2 	bl	9498 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    9b14:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    9b18:	3b40      	subs	r3, #64	; 0x40
    9b1a:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    9b1c:	2b3f      	cmp	r3, #63	; 0x3f
    9b1e:	d901      	bls.n	9b24 <l2cap_chan_add+0x34>
	return true;
    9b20:	2001      	movs	r0, #1
}
    9b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    9b24:	2101      	movs	r1, #1
    9b26:	4620      	mov	r0, r4
    9b28:	f7ff fc24 	bl	9374 <bt_l2cap_chan_set_state>
	return true;
    9b2c:	2001      	movs	r0, #1
    9b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    9b30:	2000      	movs	r0, #0
    9b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b34:	000093a5 	.word	0x000093a5

00009b38 <bt_l2cap_connected>:
{
    9b38:	b530      	push	{r4, r5, lr}
    9b3a:	b083      	sub	sp, #12
    9b3c:	4605      	mov	r5, r0
	return list->head;
    9b3e:	4b18      	ldr	r3, [pc, #96]	; (9ba0 <bt_l2cap_connected+0x68>)
    9b40:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    9b42:	b10c      	cbz	r4, 9b48 <bt_l2cap_connected+0x10>
    9b44:	3c08      	subs	r4, #8
    9b46:	e00a      	b.n	9b5e <bt_l2cap_connected+0x26>
    9b48:	2400      	movs	r4, #0
    9b4a:	e008      	b.n	9b5e <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b4c:	f114 0308 	adds.w	r3, r4, #8
    9b50:	d01f      	beq.n	9b92 <bt_l2cap_connected+0x5a>
	return node->next;
    9b52:	68a2      	ldr	r2, [r4, #8]
    9b54:	b1fa      	cbz	r2, 9b96 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b56:	b103      	cbz	r3, 9b5a <bt_l2cap_connected+0x22>
	return node->next;
    9b58:	68a3      	ldr	r3, [r4, #8]
    9b5a:	f1a3 0408 	sub.w	r4, r3, #8
    9b5e:	b1e4      	cbz	r4, 9b9a <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    9b60:	6863      	ldr	r3, [r4, #4]
    9b62:	a901      	add	r1, sp, #4
    9b64:	4628      	mov	r0, r5
    9b66:	4798      	blx	r3
    9b68:	2800      	cmp	r0, #0
    9b6a:	dbef      	blt.n	9b4c <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    9b6c:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    9b6e:	8823      	ldrh	r3, [r4, #0]
    9b70:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    9b74:	8823      	ldrh	r3, [r4, #0]
    9b76:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    9b7a:	2200      	movs	r2, #0
    9b7c:	4628      	mov	r0, r5
    9b7e:	f7ff ffb7 	bl	9af0 <l2cap_chan_add>
    9b82:	b150      	cbz	r0, 9b9a <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    9b84:	9801      	ldr	r0, [sp, #4]
    9b86:	6843      	ldr	r3, [r0, #4]
    9b88:	681b      	ldr	r3, [r3, #0]
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d0de      	beq.n	9b4c <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    9b8e:	4798      	blx	r3
    9b90:	e7dc      	b.n	9b4c <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b92:	461a      	mov	r2, r3
    9b94:	e7de      	b.n	9b54 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    9b96:	2400      	movs	r4, #0
    9b98:	e7e1      	b.n	9b5e <bt_l2cap_connected+0x26>
}
    9b9a:	b003      	add	sp, #12
    9b9c:	bd30      	pop	{r4, r5, pc}
    9b9e:	bf00      	nop
    9ba0:	200006d0 	.word	0x200006d0

00009ba4 <le_conn_req>:
{
    9ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ba8:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    9baa:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    9bac:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    9bae:	8990      	ldrh	r0, [r2, #12]
    9bb0:	2809      	cmp	r0, #9
    9bb2:	d912      	bls.n	9bda <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    9bb4:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    9bb8:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    9bbc:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    9bc0:	889e      	ldrh	r6, [r3, #4]
    9bc2:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    9bc4:	88df      	ldrh	r7, [r3, #6]
    9bc6:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    9bca:	891d      	ldrh	r5, [r3, #8]
    9bcc:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    9bd0:	2816      	cmp	r0, #22
    9bd2:	d902      	bls.n	9bda <le_conn_req+0x36>
    9bd4:	f1be 0f16 	cmp.w	lr, #22
    9bd8:	d802      	bhi.n	9be0 <le_conn_req+0x3c>
}
    9bda:	b005      	add	sp, #20
    9bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9be0:	4610      	mov	r0, r2
    9be2:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    9be4:	230a      	movs	r3, #10
    9be6:	2115      	movs	r1, #21
    9be8:	f7ff fc94 	bl	9514 <l2cap_create_le_sig_pdu>
    9bec:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    9bee:	210a      	movs	r1, #10
    9bf0:	3008      	adds	r0, #8
    9bf2:	f012 fb8b 	bl	1c30c <net_buf_simple_add>
    9bf6:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    9bf8:	220a      	movs	r2, #10
    9bfa:	2100      	movs	r1, #0
    9bfc:	f022 fa3e 	bl	2c07c <memset>
	server = l2cap_server_lookup_psm(psm);
    9c00:	4648      	mov	r0, r9
    9c02:	f7ff fa35 	bl	9070 <l2cap_server_lookup_psm>
	if (!server) {
    9c06:	4681      	mov	r9, r0
    9c08:	b168      	cbz	r0, 9c26 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    9c0a:	7a22      	ldrb	r2, [r4, #8]
    9c0c:	7883      	ldrb	r3, [r0, #2]
    9c0e:	429a      	cmp	r2, r3
    9c10:	d20d      	bcs.n	9c2e <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    9c12:	2305      	movs	r3, #5
    9c14:	9a01      	ldr	r2, [sp, #4]
    9c16:	8113      	strh	r3, [r2, #8]
    9c18:	2300      	movs	r3, #0
    9c1a:	9a00      	ldr	r2, [sp, #0]
    9c1c:	2105      	movs	r1, #5
    9c1e:	4620      	mov	r0, r4
    9c20:	f7ff fd0b 	bl	963a <bt_l2cap_send_cb>
    9c24:	e7d9      	b.n	9bda <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    9c26:	2302      	movs	r3, #2
    9c28:	9a01      	ldr	r2, [sp, #4]
    9c2a:	8113      	strh	r3, [r2, #8]
		goto rsp;
    9c2c:	e7f4      	b.n	9c18 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    9c2e:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    9c32:	b29b      	uxth	r3, r3
    9c34:	2b3f      	cmp	r3, #63	; 0x3f
    9c36:	d903      	bls.n	9c40 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    9c38:	2309      	movs	r3, #9
    9c3a:	9a01      	ldr	r2, [sp, #4]
    9c3c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    9c3e:	e7eb      	b.n	9c18 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    9c40:	4651      	mov	r1, sl
    9c42:	4620      	mov	r0, r4
    9c44:	f7ff feff 	bl	9a46 <bt_l2cap_le_lookup_tx_cid>
    9c48:	9003      	str	r0, [sp, #12]
	if (chan) {
    9c4a:	b118      	cbz	r0, 9c54 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    9c4c:	230a      	movs	r3, #10
    9c4e:	9a01      	ldr	r2, [sp, #4]
    9c50:	8113      	strh	r3, [r2, #8]
		goto rsp;
    9c52:	e7e1      	b.n	9c18 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    9c54:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9c58:	a903      	add	r1, sp, #12
    9c5a:	4620      	mov	r0, r4
    9c5c:	4798      	blx	r3
    9c5e:	2800      	cmp	r0, #0
    9c60:	da03      	bge.n	9c6a <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    9c62:	2304      	movs	r3, #4
    9c64:	9a01      	ldr	r2, [sp, #4]
    9c66:	8113      	strh	r3, [r2, #8]
		goto rsp;
    9c68:	e7d6      	b.n	9c18 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    9c6a:	9903      	ldr	r1, [sp, #12]
    9c6c:	f899 3002 	ldrb.w	r3, [r9, #2]
    9c70:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    9c74:	4a1e      	ldr	r2, [pc, #120]	; (9cf0 <le_conn_req+0x14c>)
    9c76:	4620      	mov	r0, r4
    9c78:	f7ff ff3a 	bl	9af0 <l2cap_chan_add>
    9c7c:	b918      	cbnz	r0, 9c86 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    9c7e:	2304      	movs	r3, #4
    9c80:	9a01      	ldr	r2, [sp, #4]
    9c82:	8113      	strh	r3, [r2, #8]
    9c84:	e7c8      	b.n	9c18 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    9c86:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    9c8a:	4650      	mov	r0, sl
    9c8c:	f7ff fabd 	bl	920a <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    9c90:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    9c94:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    9c98:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    9c9c:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    9ca0:	4659      	mov	r1, fp
    9ca2:	4650      	mov	r0, sl
    9ca4:	f7ff fa79 	bl	919a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    9ca8:	4650      	mov	r0, sl
    9caa:	f7ff fac1 	bl	9230 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    9cae:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    9cb2:	4650      	mov	r0, sl
    9cb4:	f7ff fa64 	bl	9180 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    9cb8:	9803      	ldr	r0, [sp, #12]
    9cba:	f8b9 3000 	ldrh.w	r3, [r9]
    9cbe:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    9cc0:	2103      	movs	r1, #3
    9cc2:	f7ff fb57 	bl	9374 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    9cc6:	9803      	ldr	r0, [sp, #12]
    9cc8:	6843      	ldr	r3, [r0, #4]
    9cca:	681b      	ldr	r3, [r3, #0]
    9ccc:	b103      	cbz	r3, 9cd0 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    9cce:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    9cd0:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    9cd4:	9901      	ldr	r1, [sp, #4]
    9cd6:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    9cd8:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    9cdc:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    9cde:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    9ce2:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    9ce4:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    9ce8:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    9cea:	2300      	movs	r3, #0
    9cec:	810b      	strh	r3, [r1, #8]
    9cee:	e793      	b.n	9c18 <le_conn_req+0x74>
    9cf0:	000091b5 	.word	0x000091b5

00009cf4 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    9cf4:	1e53      	subs	r3, r2, #1
    9cf6:	b29b      	uxth	r3, r3
    9cf8:	2bfe      	cmp	r3, #254	; 0xfe
    9cfa:	d814      	bhi.n	9d26 <l2cap_le_connect+0x32>
{
    9cfc:	b570      	push	{r4, r5, r6, lr}
    9cfe:	4615      	mov	r5, r2
    9d00:	460c      	mov	r4, r1
    9d02:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    9d04:	4608      	mov	r0, r1
    9d06:	f7ff fa80 	bl	920a <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    9d0a:	4620      	mov	r0, r4
    9d0c:	f7ff fa90 	bl	9230 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    9d10:	4a08      	ldr	r2, [pc, #32]	; (9d34 <l2cap_le_connect+0x40>)
    9d12:	4621      	mov	r1, r4
    9d14:	4630      	mov	r0, r6
    9d16:	f7ff feeb 	bl	9af0 <l2cap_chan_add>
    9d1a:	b138      	cbz	r0, 9d2c <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    9d1c:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    9d1e:	4620      	mov	r0, r4
    9d20:	f7ff fcb6 	bl	9690 <l2cap_le_conn_req>
    9d24:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    9d26:	f06f 0015 	mvn.w	r0, #21
    9d2a:	4770      	bx	lr
		return -ENOMEM;
    9d2c:	f06f 000b 	mvn.w	r0, #11
}
    9d30:	bd70      	pop	{r4, r5, r6, pc}
    9d32:	bf00      	nop
    9d34:	000091b5 	.word	0x000091b5

00009d38 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    9d38:	8802      	ldrh	r2, [r0, #0]
    9d3a:	1e53      	subs	r3, r2, #1
    9d3c:	b29b      	uxth	r3, r3
    9d3e:	2bfe      	cmp	r3, #254	; 0xfe
    9d40:	d81d      	bhi.n	9d7e <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    9d42:	6843      	ldr	r3, [r0, #4]
    9d44:	b1f3      	cbz	r3, 9d84 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    9d46:	7883      	ldrb	r3, [r0, #2]
    9d48:	2b04      	cmp	r3, #4
    9d4a:	d81e      	bhi.n	9d8a <bt_l2cap_server_register+0x52>
{
    9d4c:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    9d4e:	b90b      	cbnz	r3, 9d54 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    9d50:	2301      	movs	r3, #1
    9d52:	7083      	strb	r3, [r0, #2]
    9d54:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    9d56:	4610      	mov	r0, r2
    9d58:	f7ff f98a 	bl	9070 <l2cap_server_lookup_psm>
    9d5c:	b9c0      	cbnz	r0, 9d90 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    9d5e:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    9d62:	2200      	movs	r2, #0
    9d64:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    9d66:	4a0c      	ldr	r2, [pc, #48]	; (9d98 <bt_l2cap_server_register+0x60>)
    9d68:	6852      	ldr	r2, [r2, #4]
    9d6a:	b122      	cbz	r2, 9d76 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    9d6c:	6013      	str	r3, [r2, #0]
		list->tail = node;
    9d6e:	4a0a      	ldr	r2, [pc, #40]	; (9d98 <bt_l2cap_server_register+0x60>)
    9d70:	6053      	str	r3, [r2, #4]
	return 0;
    9d72:	2000      	movs	r0, #0
    9d74:	bd10      	pop	{r4, pc}
		list->tail = node;
    9d76:	4a08      	ldr	r2, [pc, #32]	; (9d98 <bt_l2cap_server_register+0x60>)
    9d78:	6053      	str	r3, [r2, #4]
		list->head = node;
    9d7a:	6013      	str	r3, [r2, #0]
    9d7c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9d7e:	f06f 0015 	mvn.w	r0, #21
    9d82:	4770      	bx	lr
    9d84:	f06f 0015 	mvn.w	r0, #21
    9d88:	4770      	bx	lr
		return -EINVAL;
    9d8a:	f06f 0015 	mvn.w	r0, #21
    9d8e:	4770      	bx	lr
		return -EADDRINUSE;
    9d90:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    9d94:	bd10      	pop	{r4, pc}
    9d96:	bf00      	nop
    9d98:	200006d8 	.word	0x200006d8

00009d9c <bt_l2cap_update_conn_param>:
{
    9d9c:	b570      	push	{r4, r5, r6, lr}
    9d9e:	4606      	mov	r6, r0
    9da0:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    9da2:	f7ff f91f 	bl	8fe4 <get_ident>
    9da6:	2308      	movs	r3, #8
    9da8:	4602      	mov	r2, r0
    9daa:	2112      	movs	r1, #18
    9dac:	2000      	movs	r0, #0
    9dae:	f7ff fbb1 	bl	9514 <l2cap_create_le_sig_pdu>
    9db2:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    9db4:	2108      	movs	r1, #8
    9db6:	4408      	add	r0, r1
    9db8:	f012 faa8 	bl	1c30c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9dbc:	8823      	ldrh	r3, [r4, #0]
    9dbe:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    9dc0:	8863      	ldrh	r3, [r4, #2]
    9dc2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    9dc4:	88a3      	ldrh	r3, [r4, #4]
    9dc6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    9dc8:	88e3      	ldrh	r3, [r4, #6]
    9dca:	80c3      	strh	r3, [r0, #6]
    9dcc:	2300      	movs	r3, #0
    9dce:	462a      	mov	r2, r5
    9dd0:	2105      	movs	r1, #5
    9dd2:	4630      	mov	r0, r6
    9dd4:	f7ff fc31 	bl	963a <bt_l2cap_send_cb>
}
    9dd8:	2000      	movs	r0, #0
    9dda:	bd70      	pop	{r4, r5, r6, pc}

00009ddc <bt_l2cap_init>:
{
    9ddc:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    9dde:	4802      	ldr	r0, [pc, #8]	; (9de8 <bt_l2cap_init+0xc>)
    9de0:	f7ff fa84 	bl	92ec <bt_l2cap_le_fixed_chan_register>
    9de4:	bd08      	pop	{r3, pc}
    9de6:	bf00      	nop
    9de8:	2000ba58 	.word	0x2000ba58

00009dec <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    9dec:	b188      	cbz	r0, 9e12 <bt_l2cap_chan_connect+0x26>
{
    9dee:	b508      	push	{r3, lr}
    9df0:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    9df2:	7b00      	ldrb	r0, [r0, #12]
    9df4:	2803      	cmp	r0, #3
    9df6:	d10f      	bne.n	9e18 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    9df8:	b189      	cbz	r1, 9e1e <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    9dfa:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    9dfe:	2804      	cmp	r0, #4
    9e00:	d810      	bhi.n	9e24 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    9e02:	b910      	cbnz	r0, 9e0a <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    9e04:	2001      	movs	r0, #1
    9e06:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    9e0a:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    9e0c:	f7ff ff72 	bl	9cf4 <l2cap_le_connect>
    9e10:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    9e12:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9e16:	4770      	bx	lr
    9e18:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9e1c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    9e1e:	f06f 0015 	mvn.w	r0, #21
    9e22:	bd08      	pop	{r3, pc}
		return -EINVAL;
    9e24:	f06f 0015 	mvn.w	r0, #21
}
    9e28:	bd08      	pop	{r3, pc}

00009e2a <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    9e2a:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    9e2c:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    9e2e:	b30b      	cbz	r3, 9e74 <bt_l2cap_chan_disconnect+0x4a>
    9e30:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    9e32:	f7ff f8d7 	bl	8fe4 <get_ident>
    9e36:	4602      	mov	r2, r0
    9e38:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    9e3c:	2304      	movs	r3, #4
    9e3e:	2106      	movs	r1, #6
    9e40:	2000      	movs	r0, #0
    9e42:	f7ff fb67 	bl	9514 <l2cap_create_le_sig_pdu>
    9e46:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    9e48:	2104      	movs	r1, #4
    9e4a:	3008      	adds	r0, #8
    9e4c:	f012 fa5e 	bl	1c30c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    9e50:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    9e54:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    9e56:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    9e5a:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    9e5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    9e60:	4629      	mov	r1, r5
    9e62:	4620      	mov	r0, r4
    9e64:	f7ff fbfe 	bl	9664 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    9e68:	2104      	movs	r1, #4
    9e6a:	4620      	mov	r0, r4
    9e6c:	f7ff fa82 	bl	9374 <bt_l2cap_chan_set_state>

	return 0;
    9e70:	2000      	movs	r0, #0
    9e72:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    9e74:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9e78:	bd38      	pop	{r3, r4, r5, pc}

00009e7a <l2cap_chan_le_recv_sdu>:
{
    9e7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e7e:	4681      	mov	r9, r0
    9e80:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    9e82:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    9e86:	4603      	mov	r3, r0
	size_t bytes = 0;
    9e88:	2200      	movs	r2, #0
    9e8a:	e002      	b.n	9e92 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    9e8c:	8999      	ldrh	r1, [r3, #12]
    9e8e:	440a      	add	r2, r1
		buf = buf->frags;
    9e90:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    9e92:	2b00      	cmp	r3, #0
    9e94:	d1fa      	bne.n	9e8c <l2cap_chan_le_recv_sdu+0x12>
    9e96:	89b3      	ldrh	r3, [r6, #12]
    9e98:	441a      	add	r2, r3
    9e9a:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    9e9e:	429a      	cmp	r2, r3
    9ea0:	d803      	bhi.n	9eaa <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    9ea2:	f012 fa07 	bl	1c2b4 <net_buf_frag_last>
    9ea6:	4680      	mov	r8, r0
	while (buf->len) {
    9ea8:	e017      	b.n	9eda <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    9eaa:	4648      	mov	r0, r9
    9eac:	f7ff ffbd 	bl	9e2a <bt_l2cap_chan_disconnect>
		return;
    9eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    9eb4:	f108 0708 	add.w	r7, r8, #8
    9eb8:	4638      	mov	r0, r7
    9eba:	f012 fa90 	bl	1c3de <net_buf_simple_tailroom>
    9ebe:	89b4      	ldrh	r4, [r6, #12]
    9ec0:	42a0      	cmp	r0, r4
    9ec2:	d31d      	bcc.n	9f00 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    9ec4:	4635      	mov	r5, r6
    9ec6:	4622      	mov	r2, r4
    9ec8:	f855 1f08 	ldr.w	r1, [r5, #8]!
    9ecc:	4638      	mov	r0, r7
    9ece:	f012 fa23 	bl	1c318 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    9ed2:	4621      	mov	r1, r4
    9ed4:	4628      	mov	r0, r5
    9ed6:	f012 fa66 	bl	1c3a6 <net_buf_simple_pull>
	while (buf->len) {
    9eda:	89b3      	ldrh	r3, [r6, #12]
    9edc:	b1ab      	cbz	r3, 9f0a <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    9ede:	f108 0008 	add.w	r0, r8, #8
    9ee2:	f012 fa7c 	bl	1c3de <net_buf_simple_tailroom>
    9ee6:	2800      	cmp	r0, #0
    9ee8:	d1e4      	bne.n	9eb4 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    9eea:	4648      	mov	r0, r9
    9eec:	f7ff f93a 	bl	9164 <l2cap_alloc_frag>
			if (!frag) {
    9ef0:	4680      	mov	r8, r0
    9ef2:	2800      	cmp	r0, #0
    9ef4:	d1de      	bne.n	9eb4 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    9ef6:	4648      	mov	r0, r9
    9ef8:	f7ff ff97 	bl	9e2a <bt_l2cap_chan_disconnect>
				return;
    9efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    9f00:	4638      	mov	r0, r7
    9f02:	f012 fa6c 	bl	1c3de <net_buf_simple_tailroom>
    9f06:	b284      	uxth	r4, r0
    9f08:	e7dc      	b.n	9ec4 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    9f0a:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    9f0e:	460b      	mov	r3, r1
	size_t bytes = 0;
    9f10:	2200      	movs	r2, #0
    9f12:	e002      	b.n	9f1a <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    9f14:	8998      	ldrh	r0, [r3, #12]
    9f16:	4402      	add	r2, r0
		buf = buf->frags;
    9f18:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d1fa      	bne.n	9f14 <l2cap_chan_le_recv_sdu+0x9a>
    9f1e:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    9f22:	4293      	cmp	r3, r2
    9f24:	d005      	beq.n	9f32 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    9f26:	4631      	mov	r1, r6
    9f28:	4648      	mov	r0, r9
    9f2a:	f7ff fc12 	bl	9752 <l2cap_chan_update_credits>
    9f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    9f32:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9f36:	691b      	ldr	r3, [r3, #16]
    9f38:	4648      	mov	r0, r9
    9f3a:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    9f3c:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    9f40:	f012 f998 	bl	1c274 <net_buf_unref>
		chan->_sdu = NULL;
    9f44:	2300      	movs	r3, #0
    9f46:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    9f4a:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    9f4e:	e7ea      	b.n	9f26 <l2cap_chan_le_recv_sdu+0xac>

00009f50 <l2cap_chan_le_recv>:
{
    9f50:	b570      	push	{r4, r5, r6, lr}
    9f52:	4604      	mov	r4, r0
    9f54:	460d      	mov	r5, r1
    9f56:	2100      	movs	r1, #0
    9f58:	3048      	adds	r0, #72	; 0x48
    9f5a:	f020 fdef 	bl	2ab3c <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    9f5e:	b938      	cbnz	r0, 9f70 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    9f60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    9f64:	b143      	cbz	r3, 9f78 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    9f66:	4629      	mov	r1, r5
    9f68:	4620      	mov	r0, r4
    9f6a:	f7ff ff86 	bl	9e7a <l2cap_chan_le_recv_sdu>
		return;
    9f6e:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    9f70:	4620      	mov	r0, r4
    9f72:	f7ff ff5a 	bl	9e2a <bt_l2cap_chan_disconnect>
		return;
    9f76:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    9f78:	f105 0008 	add.w	r0, r5, #8
    9f7c:	f012 fa23 	bl	1c3c6 <net_buf_simple_pull_le16>
    9f80:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    9f82:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    9f86:	4298      	cmp	r0, r3
    9f88:	d80e      	bhi.n	9fa8 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    9f8a:	6862      	ldr	r2, [r4, #4]
    9f8c:	68d3      	ldr	r3, [r2, #12]
    9f8e:	b19b      	cbz	r3, 9fb8 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    9f90:	4620      	mov	r0, r4
    9f92:	4798      	blx	r3
    9f94:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    9f98:	b150      	cbz	r0, 9fb0 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    9f9a:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    9f9e:	4629      	mov	r1, r5
    9fa0:	4620      	mov	r0, r4
    9fa2:	f7ff ff6a 	bl	9e7a <l2cap_chan_le_recv_sdu>
		return;
    9fa6:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    9fa8:	4620      	mov	r0, r4
    9faa:	f7ff ff3e 	bl	9e2a <bt_l2cap_chan_disconnect>
		return;
    9fae:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    9fb0:	4620      	mov	r0, r4
    9fb2:	f7ff ff3a 	bl	9e2a <bt_l2cap_chan_disconnect>
			return;
    9fb6:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    9fb8:	6913      	ldr	r3, [r2, #16]
    9fba:	4629      	mov	r1, r5
    9fbc:	4620      	mov	r0, r4
    9fbe:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    9fc0:	4629      	mov	r1, r5
    9fc2:	4620      	mov	r0, r4
    9fc4:	f7ff fbc5 	bl	9752 <l2cap_chan_update_credits>
    9fc8:	bd70      	pop	{r4, r5, r6, pc}

00009fca <l2cap_chan_recv>:
{
    9fca:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    9fcc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    9fd0:	3b40      	subs	r3, #64	; 0x40
    9fd2:	b29b      	uxth	r3, r3
    9fd4:	2b3f      	cmp	r3, #63	; 0x3f
    9fd6:	d903      	bls.n	9fe0 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    9fd8:	6843      	ldr	r3, [r0, #4]
    9fda:	691b      	ldr	r3, [r3, #16]
    9fdc:	4798      	blx	r3
    9fde:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    9fe0:	f7ff ffb6 	bl	9f50 <l2cap_chan_le_recv>
		return;
    9fe4:	bd08      	pop	{r3, pc}

00009fe6 <bt_l2cap_recv>:
{
    9fe6:	b570      	push	{r4, r5, r6, lr}
    9fe8:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    9fea:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9fec:	898b      	ldrh	r3, [r1, #12]
    9fee:	2b03      	cmp	r3, #3
    9ff0:	d912      	bls.n	a018 <bt_l2cap_recv+0x32>
    9ff2:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    9ff4:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    9ff6:	2104      	movs	r1, #4
    9ff8:	f104 0008 	add.w	r0, r4, #8
    9ffc:	f012 f9d3 	bl	1c3a6 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    a000:	4631      	mov	r1, r6
    a002:	4628      	mov	r0, r5
    a004:	f7ff fd3a 	bl	9a7c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a008:	b150      	cbz	r0, a020 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    a00a:	4621      	mov	r1, r4
    a00c:	f7ff ffdd 	bl	9fca <l2cap_chan_recv>
	net_buf_unref(buf);
    a010:	4620      	mov	r0, r4
    a012:	f012 f92f 	bl	1c274 <net_buf_unref>
    a016:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    a018:	4608      	mov	r0, r1
    a01a:	f012 f92b 	bl	1c274 <net_buf_unref>
		return;
    a01e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    a020:	4620      	mov	r0, r4
    a022:	f012 f927 	bl	1c274 <net_buf_unref>
		return;
    a026:	bd70      	pop	{r4, r5, r6, pc}

0000a028 <le_credits>:
{
    a028:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    a02a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    a02c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    a02e:	8993      	ldrh	r3, [r2, #12]
    a030:	2b03      	cmp	r3, #3
    a032:	d800      	bhi.n	a036 <le_credits+0xe>
    a034:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    a036:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    a038:	8809      	ldrh	r1, [r1, #0]
    a03a:	f7ff fd04 	bl	9a46 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    a03e:	4604      	mov	r4, r0
    a040:	2800      	cmp	r0, #0
    a042:	d0f7      	beq.n	a034 <le_credits+0xc>
    a044:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    a046:	442b      	add	r3, r5
    a048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a04c:	d206      	bcs.n	a05c <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    a04e:	4629      	mov	r1, r5
    a050:	f7ff f8a3 	bl	919a <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    a054:	4620      	mov	r0, r4
    a056:	f7ff fc32 	bl	98be <l2cap_chan_le_send_resume>
    a05a:	e7eb      	b.n	a034 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    a05c:	f7ff fee5 	bl	9e2a <bt_l2cap_chan_disconnect>
		return;
    a060:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a064 <l2cap_recv>:
{
    a064:	b5f0      	push	{r4, r5, r6, r7, lr}
    a066:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    a068:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    a06a:	898b      	ldrh	r3, [r1, #12]
    a06c:	2b03      	cmp	r3, #3
    a06e:	d801      	bhi.n	a074 <l2cap_recv+0x10>
}
    a070:	b003      	add	sp, #12
    a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a074:	460c      	mov	r4, r1
    a076:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    a078:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    a07a:	2104      	movs	r1, #4
    a07c:	f104 0008 	add.w	r0, r4, #8
    a080:	f012 f991 	bl	1c3a6 <net_buf_simple_pull>
	if (buf->len != len) {
    a084:	89a3      	ldrh	r3, [r4, #12]
    a086:	429f      	cmp	r7, r3
    a088:	d1f2      	bne.n	a070 <l2cap_recv+0xc>
	if (!hdr->ident) {
    a08a:	7871      	ldrb	r1, [r6, #1]
    a08c:	2900      	cmp	r1, #0
    a08e:	d0ef      	beq.n	a070 <l2cap_recv+0xc>
	switch (hdr->code) {
    a090:	7833      	ldrb	r3, [r6, #0]
    a092:	3b01      	subs	r3, #1
    a094:	2b15      	cmp	r3, #21
    a096:	d852      	bhi.n	a13e <l2cap_recv+0xda>
    a098:	a201      	add	r2, pc, #4	; (adr r2, a0a0 <l2cap_recv+0x3c>)
    a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a09e:	bf00      	nop
    a0a0:	0000a135 	.word	0x0000a135
    a0a4:	0000a13f 	.word	0x0000a13f
    a0a8:	0000a13f 	.word	0x0000a13f
    a0ac:	0000a13f 	.word	0x0000a13f
    a0b0:	0000a13f 	.word	0x0000a13f
    a0b4:	0000a117 	.word	0x0000a117
    a0b8:	0000a121 	.word	0x0000a121
    a0bc:	0000a13f 	.word	0x0000a13f
    a0c0:	0000a13f 	.word	0x0000a13f
    a0c4:	0000a13f 	.word	0x0000a13f
    a0c8:	0000a13f 	.word	0x0000a13f
    a0cc:	0000a13f 	.word	0x0000a13f
    a0d0:	0000a13f 	.word	0x0000a13f
    a0d4:	0000a13f 	.word	0x0000a13f
    a0d8:	0000a13f 	.word	0x0000a13f
    a0dc:	0000a13f 	.word	0x0000a13f
    a0e0:	0000a13f 	.word	0x0000a13f
    a0e4:	0000a0f9 	.word	0x0000a0f9
    a0e8:	0000a071 	.word	0x0000a071
    a0ec:	0000a103 	.word	0x0000a103
    a0f0:	0000a10d 	.word	0x0000a10d
    a0f4:	0000a12b 	.word	0x0000a12b
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    a0f8:	4622      	mov	r2, r4
    a0fa:	4628      	mov	r0, r5
    a0fc:	f7ff fc22 	bl	9944 <le_conn_param_update_req>
		break;
    a100:	e7b6      	b.n	a070 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    a102:	4622      	mov	r2, r4
    a104:	4628      	mov	r0, r5
    a106:	f7ff fd4d 	bl	9ba4 <le_conn_req>
		break;
    a10a:	e7b1      	b.n	a070 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    a10c:	4622      	mov	r2, r4
    a10e:	4628      	mov	r0, r5
    a110:	f7ff f954 	bl	93bc <le_conn_rsp>
		break;
    a114:	e7ac      	b.n	a070 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    a116:	4622      	mov	r2, r4
    a118:	4628      	mov	r0, r5
    a11a:	f7ff fc57 	bl	99cc <le_disconn_req>
		break;
    a11e:	e7a7      	b.n	a070 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    a120:	4622      	mov	r2, r4
    a122:	4628      	mov	r0, r5
    a124:	f7ff f9a0 	bl	9468 <le_disconn_rsp>
		break;
    a128:	e7a2      	b.n	a070 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    a12a:	4622      	mov	r2, r4
    a12c:	4628      	mov	r0, r5
    a12e:	f7ff ff7b 	bl	a028 <le_credits>
		break;
    a132:	e79d      	b.n	a070 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    a134:	4622      	mov	r2, r4
    a136:	4628      	mov	r0, r5
    a138:	f7ff f9a5 	bl	9486 <reject_cmd>
		break;
    a13c:	e798      	b.n	a070 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    a13e:	6828      	ldr	r0, [r5, #0]
    a140:	2200      	movs	r2, #0
    a142:	9200      	str	r2, [sp, #0]
    a144:	4613      	mov	r3, r2
    a146:	f7ff fbd9 	bl	98fc <l2cap_send_reject>
		break;
    a14a:	e791      	b.n	a070 <l2cap_recv+0xc>

0000a14c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    a14c:	b510      	push	{r4, lr}
    a14e:	b082      	sub	sp, #8
    a150:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    a152:	b1f9      	cbz	r1, a194 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    a154:	6803      	ldr	r3, [r0, #0]
    a156:	b303      	cbz	r3, a19a <bt_l2cap_chan_send+0x4e>
    a158:	7b1b      	ldrb	r3, [r3, #12]
    a15a:	2b03      	cmp	r3, #3
    a15c:	d120      	bne.n	a1a0 <bt_l2cap_chan_send+0x54>
    a15e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    a160:	2200      	movs	r2, #0
    a162:	a901      	add	r1, sp, #4
    a164:	f7ff fb40 	bl	97e8 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    a168:	2800      	cmp	r0, #0
    a16a:	db01      	blt.n	a170 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    a16c:	b002      	add	sp, #8
    a16e:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    a170:	f110 0f0b 	cmn.w	r0, #11
    a174:	d1fa      	bne.n	a16c <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    a176:	9901      	ldr	r1, [sp, #4]
    a178:	f104 0080 	add.w	r0, r4, #128	; 0x80
    a17c:	f012 f86c 	bl	1c258 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    a180:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    a182:	f102 0310 	add.w	r3, r2, #16
    a186:	89d2      	ldrh	r2, [r2, #14]
    a188:	4413      	add	r3, r2
    a18a:	3303      	adds	r3, #3
    a18c:	f023 0303 	bic.w	r3, r3, #3
    a190:	6818      	ldr	r0, [r3, #0]
    a192:	e7eb      	b.n	a16c <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    a194:	f06f 0015 	mvn.w	r0, #21
    a198:	e7e8      	b.n	a16c <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    a19a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a19e:	e7e5      	b.n	a16c <bt_l2cap_chan_send+0x20>
    a1a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a1a4:	e7e2      	b.n	a16c <bt_l2cap_chan_send+0x20>

0000a1a6 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    a1a6:	b100      	cbz	r0, a1aa <range_is_valid+0x4>
    a1a8:	b919      	cbnz	r1, a1b2 <range_is_valid+0xc>
		if (err) {
    a1aa:	b142      	cbz	r2, a1be <range_is_valid+0x18>
			*err = 0;
    a1ac:	2000      	movs	r0, #0
    a1ae:	8010      	strh	r0, [r2, #0]
    a1b0:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    a1b2:	4288      	cmp	r0, r1
    a1b4:	d905      	bls.n	a1c2 <range_is_valid+0x1c>
		if (err) {
    a1b6:	b132      	cbz	r2, a1c6 <range_is_valid+0x20>
			*err = start;
    a1b8:	8010      	strh	r0, [r2, #0]
		}
		return false;
    a1ba:	2000      	movs	r0, #0
    a1bc:	4770      	bx	lr
		return false;
    a1be:	2000      	movs	r0, #0
    a1c0:	4770      	bx	lr
	}

	return true;
    a1c2:	2001      	movs	r0, #1
    a1c4:	4770      	bx	lr
		return false;
    a1c6:	2000      	movs	r0, #0
}
    a1c8:	4770      	bx	lr

0000a1ca <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    a1ca:	f012 0f01 	tst.w	r2, #1
    a1ce:	d007      	beq.n	a1e0 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    a1d0:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    a1d2:	f013 0f15 	tst.w	r3, #21
    a1d6:	d101      	bne.n	a1dc <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    a1d8:	2002      	movs	r0, #2
    a1da:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    a1dc:	684b      	ldr	r3, [r1, #4]
    a1de:	b1eb      	cbz	r3, a21c <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    a1e0:	f012 0f02 	tst.w	r2, #2
    a1e4:	d007      	beq.n	a1f6 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    a1e6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    a1e8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    a1ec:	d101      	bne.n	a1f2 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    a1ee:	2003      	movs	r0, #3
    a1f0:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    a1f2:	688b      	ldr	r3, [r1, #8]
    a1f4:	b1a3      	cbz	r3, a220 <check_perm+0x56>
	}

	mask &= attr->perm;
    a1f6:	7c8b      	ldrb	r3, [r1, #18]
    a1f8:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    a1fa:	f012 0f30 	tst.w	r2, #48	; 0x30
    a1fe:	d004      	beq.n	a20a <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    a200:	7a03      	ldrb	r3, [r0, #8]
    a202:	2b02      	cmp	r3, #2
    a204:	d801      	bhi.n	a20a <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    a206:	2005      	movs	r0, #5
    a208:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    a20a:	f012 0f0c 	tst.w	r2, #12
    a20e:	d009      	beq.n	a224 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    a210:	7a83      	ldrb	r3, [r0, #10]
    a212:	b90b      	cbnz	r3, a218 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    a214:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    a216:	4770      	bx	lr
	return 0;
    a218:	2000      	movs	r0, #0
    a21a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    a21c:	2002      	movs	r0, #2
    a21e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    a220:	2003      	movs	r0, #3
    a222:	4770      	bx	lr
	return 0;
    a224:	2000      	movs	r0, #0
    a226:	4770      	bx	lr

0000a228 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    a228:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    a22c:	2bfe      	cmp	r3, #254	; 0xfe
    a22e:	d901      	bls.n	a234 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    a230:	200e      	movs	r0, #14
}
    a232:	4770      	bx	lr
		return -err;
    a234:	4240      	negs	r0, r0
    a236:	b2c0      	uxtb	r0, r0
    a238:	4770      	bx	lr

0000a23a <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a23e:	b082      	sub	sp, #8
    a240:	4606      	mov	r6, r0
    a242:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    a244:	680f      	ldr	r7, [r1, #0]
    a246:	222a      	movs	r2, #42	; 0x2a
    a248:	4601      	mov	r1, r0
    a24a:	4638      	mov	r0, r7
    a24c:	f7ff ffbd 	bl	a1ca <check_perm>
    a250:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    a252:	b120      	cbz	r0, a25e <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    a254:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    a256:	4628      	mov	r0, r5
    a258:	b002      	add	sp, #8
    a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a25e:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    a260:	f8d6 8008 	ldr.w	r8, [r6, #8]
    a264:	7c23      	ldrb	r3, [r4, #16]
    a266:	8a62      	ldrh	r2, [r4, #18]
    a268:	2100      	movs	r1, #0
    a26a:	9101      	str	r1, [sp, #4]
    a26c:	9200      	str	r2, [sp, #0]
    a26e:	68e2      	ldr	r2, [r4, #12]
    a270:	4631      	mov	r1, r6
    a272:	4638      	mov	r0, r7
    a274:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    a276:	2800      	cmp	r0, #0
    a278:	db02      	blt.n	a280 <write_cb+0x46>
    a27a:	7c23      	ldrb	r3, [r4, #16]
    a27c:	4298      	cmp	r0, r3
    a27e:	d003      	beq.n	a288 <write_cb+0x4e>
		data->err = err_to_att(write);
    a280:	f7ff ffd2 	bl	a228 <err_to_att>
    a284:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    a286:	e7e6      	b.n	a256 <write_cb+0x1c>
	data->err = 0;
    a288:	2300      	movs	r3, #0
    a28a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    a28c:	2501      	movs	r5, #1
    a28e:	e7e2      	b.n	a256 <write_cb+0x1c>

0000a290 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    a290:	2006      	movs	r0, #6
    a292:	4770      	bx	lr

0000a294 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    a294:	2006      	movs	r0, #6
    a296:	4770      	bx	lr

0000a298 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a298:	2300      	movs	r3, #0
    a29a:	2b1a      	cmp	r3, #26
    a29c:	d80b      	bhi.n	a2b6 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    a29e:	4a09      	ldr	r2, [pc, #36]	; (a2c4 <att_op_get_type+0x2c>)
    a2a0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    a2a4:	4282      	cmp	r2, r0
    a2a6:	d001      	beq.n	a2ac <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    a2a8:	3301      	adds	r3, #1
    a2aa:	e7f6      	b.n	a29a <att_op_get_type+0x2>
			return handlers[i].type;
    a2ac:	4a05      	ldr	r2, [pc, #20]	; (a2c4 <att_op_get_type+0x2c>)
    a2ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a2b2:	7898      	ldrb	r0, [r3, #2]
    a2b4:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    a2b6:	f010 0f40 	tst.w	r0, #64	; 0x40
    a2ba:	d101      	bne.n	a2c0 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    a2bc:	2006      	movs	r0, #6
}
    a2be:	4770      	bx	lr
		return ATT_COMMAND;
    a2c0:	2000      	movs	r0, #0
    a2c2:	4770      	bx	lr
    a2c4:	00032ff4 	.word	0x00032ff4

0000a2c8 <att_cb>:
{
    a2c8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    a2ca:	6883      	ldr	r3, [r0, #8]
    a2cc:	7818      	ldrb	r0, [r3, #0]
    a2ce:	f7ff ffe3 	bl	a298 <att_op_get_type>
    a2d2:	3801      	subs	r0, #1
    a2d4:	2804      	cmp	r0, #4
    a2d6:	d808      	bhi.n	a2ea <att_cb+0x22>
    a2d8:	e8df f000 	tbb	[pc, r0]
    a2dc:	09070305 	.word	0x09070305
    a2e0:	05          	.byte	0x05
    a2e1:	00          	.byte	0x00
		return att_rsp_sent;
    a2e2:	4804      	ldr	r0, [pc, #16]	; (a2f4 <att_cb+0x2c>)
    a2e4:	bd08      	pop	{r3, pc}
		return att_req_sent;
    a2e6:	4804      	ldr	r0, [pc, #16]	; (a2f8 <att_cb+0x30>)
    a2e8:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    a2ea:	4804      	ldr	r0, [pc, #16]	; (a2fc <att_cb+0x34>)
    a2ec:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    a2ee:	4804      	ldr	r0, [pc, #16]	; (a300 <att_cb+0x38>)
}
    a2f0:	bd08      	pop	{r3, pc}
    a2f2:	bf00      	nop
    a2f4:	0000a43b 	.word	0x0000a43b
    a2f8:	0000a4ad 	.word	0x0000a4ad
    a2fc:	0000a465 	.word	0x0000a465
    a300:	0000a473 	.word	0x0000a473

0000a304 <read_cb>:
{
    a304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a308:	b083      	sub	sp, #12
    a30a:	4606      	mov	r6, r0
    a30c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    a30e:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    a312:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    a316:	6888      	ldr	r0, [r1, #8]
    a318:	2100      	movs	r1, #0
    a31a:	3008      	adds	r0, #8
    a31c:	f011 fff6 	bl	1c30c <net_buf_simple_add>
    a320:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    a322:	2300      	movs	r3, #0
    a324:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    a326:	2215      	movs	r2, #21
    a328:	4631      	mov	r1, r6
    a32a:	4638      	mov	r0, r7
    a32c:	f7ff ff4d 	bl	a1ca <check_perm>
    a330:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    a332:	b120      	cbz	r0, a33e <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    a334:	2500      	movs	r5, #0
}
    a336:	4628      	mov	r0, r5
    a338:	b003      	add	sp, #12
    a33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a33e:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a340:	f8d6 9004 	ldr.w	r9, [r6, #4]
    a344:	68a3      	ldr	r3, [r4, #8]
    a346:	6899      	ldr	r1, [r3, #8]
    a348:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    a34a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a34e:	1a9b      	subs	r3, r3, r2
    a350:	88a0      	ldrh	r0, [r4, #4]
    a352:	9000      	str	r0, [sp, #0]
    a354:	b29b      	uxth	r3, r3
    a356:	440a      	add	r2, r1
    a358:	4631      	mov	r1, r6
    a35a:	4638      	mov	r0, r7
    a35c:	47c8      	blx	r9
	if (read < 0) {
    a35e:	1e01      	subs	r1, r0, #0
    a360:	db05      	blt.n	a36e <read_cb+0x6a>
	net_buf_add(data->buf, read);
    a362:	68a0      	ldr	r0, [r4, #8]
    a364:	3008      	adds	r0, #8
    a366:	f011 ffd1 	bl	1c30c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    a36a:	2501      	movs	r5, #1
    a36c:	e7e3      	b.n	a336 <read_cb+0x32>
		data->err = err_to_att(read);
    a36e:	4608      	mov	r0, r1
    a370:	f7ff ff5a 	bl	a228 <err_to_att>
    a374:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    a376:	e7de      	b.n	a336 <read_cb+0x32>

0000a378 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    a378:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    a37a:	7b03      	ldrb	r3, [r0, #12]
    a37c:	2b03      	cmp	r3, #3
    a37e:	d10f      	bne.n	a3a0 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    a380:	2104      	movs	r1, #4
    a382:	f7ff fb7b 	bl	9a7c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a386:	b168      	cbz	r0, a3a4 <att_chan_get+0x2c>
    a388:	f3bf 8f5b 	dmb	ish
    a38c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    a390:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    a394:	f012 0f04 	tst.w	r2, #4
    a398:	d100      	bne.n	a39c <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    a39a:	bd08      	pop	{r3, pc}
		return NULL;
    a39c:	2000      	movs	r0, #0
    a39e:	bd08      	pop	{r3, pc}
		return NULL;
    a3a0:	2000      	movs	r0, #0
    a3a2:	bd08      	pop	{r3, pc}
		return NULL;
    a3a4:	2000      	movs	r0, #0
    a3a6:	bd08      	pop	{r3, pc}

0000a3a8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    a3aa:	2400      	movs	r4, #0
    a3ac:	b11c      	cbz	r4, a3b6 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    a3ae:	f06f 040b 	mvn.w	r4, #11
}
    a3b2:	4620      	mov	r0, r4
    a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    a3b6:	23ec      	movs	r3, #236	; 0xec
    a3b8:	fb03 f304 	mul.w	r3, r3, r4
    a3bc:	4a12      	ldr	r2, [pc, #72]	; (a408 <bt_att_accept+0x60>)
    a3be:	58d3      	ldr	r3, [r2, r3]
    a3c0:	b10b      	cbz	r3, a3c6 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    a3c2:	3401      	adds	r4, #1
    a3c4:	e7f2      	b.n	a3ac <bt_att_accept+0x4>
    a3c6:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    a3c8:	480f      	ldr	r0, [pc, #60]	; (a408 <bt_att_accept+0x60>)
    a3ca:	23ec      	movs	r3, #236	; 0xec
    a3cc:	fb03 f304 	mul.w	r3, r3, r4
    a3d0:	18c6      	adds	r6, r0, r3
    a3d2:	4a0e      	ldr	r2, [pc, #56]	; (a40c <bt_att_accept+0x64>)
    a3d4:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    a3d6:	f103 0298 	add.w	r2, r3, #152	; 0x98
    a3da:	4402      	add	r2, r0
    a3dc:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a3de:	2100      	movs	r1, #0
    a3e0:	f3bf 8f5b 	dmb	ish
    a3e4:	e852 7f00 	ldrex	r7, [r2]
    a3e8:	e842 1e00 	strex	lr, r1, [r2]
    a3ec:	f1be 0f00 	cmp.w	lr, #0
    a3f0:	d1f8      	bne.n	a3e4 <bt_att_accept+0x3c>
    a3f2:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    a3f6:	33d0      	adds	r3, #208	; 0xd0
    a3f8:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    a3fa:	2202      	movs	r2, #2
    a3fc:	4611      	mov	r1, r2
    a3fe:	3004      	adds	r0, #4
    a400:	f020 fb80 	bl	2ab04 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    a404:	602e      	str	r6, [r5, #0]
		return 0;
    a406:	e7d4      	b.n	a3b2 <bt_att_accept+0xa>
    a408:	200006e0 	.word	0x200006e0
    a40c:	2000ba84 	.word	0x2000ba84

0000a410 <att_req_destroy>:
{
    a410:	b510      	push	{r4, lr}
    a412:	4604      	mov	r4, r0
	if (req->buf) {
    a414:	6900      	ldr	r0, [r0, #16]
    a416:	b108      	cbz	r0, a41c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    a418:	f011 ff2c 	bl	1c274 <net_buf_unref>
	if (req->destroy) {
    a41c:	68a3      	ldr	r3, [r4, #8]
    a41e:	b10b      	cbz	r3, a424 <att_req_destroy+0x14>
		req->destroy(req);
    a420:	4620      	mov	r0, r4
    a422:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    a424:	2218      	movs	r2, #24
    a426:	2100      	movs	r1, #0
    a428:	4620      	mov	r0, r4
    a42a:	f021 fe27 	bl	2c07c <memset>
    a42e:	bd10      	pop	{r4, pc}

0000a430 <att_get>:
{
    a430:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    a432:	2104      	movs	r1, #4
    a434:	f7ff fb07 	bl	9a46 <bt_l2cap_le_lookup_tx_cid>
}
    a438:	bd08      	pop	{r3, pc}

0000a43a <att_rsp_sent>:
{
    a43a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    a43c:	f7ff fff8 	bl	a430 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    a440:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a444:	f3bf 8f5b 	dmb	ish
    a448:	e853 2f00 	ldrex	r2, [r3]
    a44c:	f022 0201 	bic.w	r2, r2, #1
    a450:	e843 2100 	strex	r1, r2, [r3]
    a454:	2900      	cmp	r1, #0
    a456:	d1f7      	bne.n	a448 <att_rsp_sent+0xe>
    a458:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a45c:	30d4      	adds	r0, #212	; 0xd4
    a45e:	f020 fb5a 	bl	2ab16 <_impl_k_sem_give>
    a462:	bd08      	pop	{r3, pc}

0000a464 <att_pdu_sent>:
{
    a464:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    a466:	f7ff ffe3 	bl	a430 <att_get>
    a46a:	30d4      	adds	r0, #212	; 0xd4
    a46c:	f020 fb53 	bl	2ab16 <_impl_k_sem_give>
    a470:	bd08      	pop	{r3, pc}

0000a472 <att_cfm_sent>:
{
    a472:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    a474:	f7ff ffdc 	bl	a430 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    a478:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a47c:	f3bf 8f5b 	dmb	ish
    a480:	e853 2f00 	ldrex	r2, [r3]
    a484:	f022 0202 	bic.w	r2, r2, #2
    a488:	e843 2100 	strex	r1, r2, [r3]
    a48c:	2900      	cmp	r1, #0
    a48e:	d1f7      	bne.n	a480 <att_cfm_sent+0xe>
    a490:	f3bf 8f5b 	dmb	ish
    a494:	30d4      	adds	r0, #212	; 0xd4
    a496:	f020 fb3e 	bl	2ab16 <_impl_k_sem_give>
    a49a:	bd08      	pop	{r3, pc}

0000a49c <att_notify>:
{
    a49c:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    a49e:	f101 0008 	add.w	r0, r1, #8
    a4a2:	f011 ff90 	bl	1c3c6 <net_buf_simple_pull_le16>
}
    a4a6:	2000      	movs	r0, #0
    a4a8:	bd08      	pop	{r3, pc}
	...

0000a4ac <att_req_sent>:
{
    a4ac:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    a4ae:	f7ff ffbf 	bl	a430 <att_get>
    a4b2:	4604      	mov	r4, r0
    a4b4:	30d4      	adds	r0, #212	; 0xd4
    a4b6:	f020 fb2e 	bl	2ab16 <_impl_k_sem_give>
	if (att->req) {
    a4ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a4be:	b133      	cbz	r3, a4ce <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a4c0:	f247 5230 	movw	r2, #30000	; 0x7530
    a4c4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    a4c8:	4801      	ldr	r0, [pc, #4]	; (a4d0 <att_req_sent+0x24>)
    a4ca:	f021 f96d 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    a4ce:	bd10      	pop	{r4, pc}
    a4d0:	20002c00 	.word	0x20002c00

0000a4d4 <read_group_cb>:
{
    a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4d8:	b084      	sub	sp, #16
    a4da:	4605      	mov	r5, r0
    a4dc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    a4de:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    a4e0:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a4e2:	2300      	movs	r3, #0
    a4e4:	f88d 3008 	strb.w	r3, [sp, #8]
    a4e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a4ec:	f8ad 300a 	strh.w	r3, [sp, #10]
    a4f0:	a902      	add	r1, sp, #8
    a4f2:	6800      	ldr	r0, [r0, #0]
    a4f4:	f7fb fb8d 	bl	5c12 <bt_uuid_cmp>
    a4f8:	b1a8      	cbz	r0, a526 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a4fa:	2300      	movs	r3, #0
    a4fc:	f88d 300c 	strb.w	r3, [sp, #12]
    a500:	f642 0301 	movw	r3, #10241	; 0x2801
    a504:	f8ad 300e 	strh.w	r3, [sp, #14]
    a508:	a903      	add	r1, sp, #12
    a50a:	6828      	ldr	r0, [r5, #0]
    a50c:	f7fb fb81 	bl	5c12 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a510:	b148      	cbz	r0, a526 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    a512:	6923      	ldr	r3, [r4, #16]
    a514:	2b00      	cmp	r3, #0
    a516:	d04c      	beq.n	a5b2 <read_group_cb+0xde>
    a518:	8a2a      	ldrh	r2, [r5, #16]
    a51a:	8859      	ldrh	r1, [r3, #2]
    a51c:	428a      	cmp	r2, r1
    a51e:	d94a      	bls.n	a5b6 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a520:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    a522:	2001      	movs	r0, #1
    a524:	e039      	b.n	a59a <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a526:	6861      	ldr	r1, [r4, #4]
    a528:	6828      	ldr	r0, [r5, #0]
    a52a:	f7fb fb72 	bl	5c12 <bt_uuid_cmp>
    a52e:	2800      	cmp	r0, #0
    a530:	d130      	bne.n	a594 <read_group_cb+0xc0>
	if (data->rsp->len &&
    a532:	68e3      	ldr	r3, [r4, #12]
    a534:	781a      	ldrb	r2, [r3, #0]
    a536:	b132      	cbz	r2, a546 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    a538:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    a53c:	68a1      	ldr	r1, [r4, #8]
    a53e:	8989      	ldrh	r1, [r1, #12]
    a540:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    a542:	4293      	cmp	r3, r2
    a544:	db39      	blt.n	a5ba <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a546:	68a0      	ldr	r0, [r4, #8]
    a548:	2104      	movs	r1, #4
    a54a:	3008      	adds	r0, #8
    a54c:	f011 fede 	bl	1c30c <net_buf_simple_add>
    a550:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a552:	8a2b      	ldrh	r3, [r5, #16]
    a554:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a556:	6923      	ldr	r3, [r4, #16]
    a558:	8a2a      	ldrh	r2, [r5, #16]
    a55a:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a55c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    a560:	68a3      	ldr	r3, [r4, #8]
    a562:	6899      	ldr	r1, [r3, #8]
    a564:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    a566:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a56a:	1a9b      	subs	r3, r3, r2
    a56c:	2000      	movs	r0, #0
    a56e:	9000      	str	r0, [sp, #0]
    a570:	b29b      	uxth	r3, r3
    a572:	440a      	add	r2, r1
    a574:	4629      	mov	r1, r5
    a576:	4638      	mov	r0, r7
    a578:	47c0      	blx	r8
	if (read < 0) {
    a57a:	1e01      	subs	r1, r0, #0
    a57c:	db1f      	blt.n	a5be <read_group_cb+0xea>
	if (!data->rsp->len) {
    a57e:	68e2      	ldr	r2, [r4, #12]
    a580:	7813      	ldrb	r3, [r2, #0]
    a582:	b96b      	cbnz	r3, a5a0 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    a584:	1d0b      	adds	r3, r1, #4
    a586:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    a588:	68a0      	ldr	r0, [r4, #8]
    a58a:	3008      	adds	r0, #8
    a58c:	f011 febe 	bl	1c30c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    a590:	2001      	movs	r0, #1
    a592:	e002      	b.n	a59a <read_group_cb+0xc6>
		data->group = NULL;
    a594:	2300      	movs	r3, #0
    a596:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    a598:	2001      	movs	r0, #1
}
    a59a:	b004      	add	sp, #16
    a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    a5a0:	1d0a      	adds	r2, r1, #4
    a5a2:	4293      	cmp	r3, r2
    a5a4:	d0f0      	beq.n	a588 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    a5a6:	68a2      	ldr	r2, [r4, #8]
    a5a8:	8993      	ldrh	r3, [r2, #12]
    a5aa:	3b04      	subs	r3, #4
    a5ac:	8193      	strh	r3, [r2, #12]
		return false;
    a5ae:	2000      	movs	r0, #0
    a5b0:	e7f3      	b.n	a59a <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    a5b2:	2001      	movs	r0, #1
    a5b4:	e7f1      	b.n	a59a <read_group_cb+0xc6>
    a5b6:	2001      	movs	r0, #1
    a5b8:	e7ef      	b.n	a59a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    a5ba:	2000      	movs	r0, #0
    a5bc:	e7ed      	b.n	a59a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    a5be:	2000      	movs	r0, #0
    a5c0:	e7eb      	b.n	a59a <read_group_cb+0xc6>

0000a5c2 <read_type_cb>:
{
    a5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5c6:	b082      	sub	sp, #8
    a5c8:	4606      	mov	r6, r0
    a5ca:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    a5cc:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    a5ce:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a5d2:	6849      	ldr	r1, [r1, #4]
    a5d4:	6800      	ldr	r0, [r0, #0]
    a5d6:	f7fb fb1c 	bl	5c12 <bt_uuid_cmp>
    a5da:	2800      	cmp	r0, #0
    a5dc:	d14d      	bne.n	a67a <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    a5de:	2215      	movs	r2, #21
    a5e0:	4631      	mov	r1, r6
    a5e2:	4640      	mov	r0, r8
    a5e4:	f7ff fdf1 	bl	a1ca <check_perm>
    a5e8:	4605      	mov	r5, r0
    a5ea:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    a5ec:	b130      	cbz	r0, a5fc <read_type_cb+0x3a>
		if (data->rsp->len) {
    a5ee:	68e3      	ldr	r3, [r4, #12]
    a5f0:	781d      	ldrb	r5, [r3, #0]
    a5f2:	2d00      	cmp	r5, #0
    a5f4:	d042      	beq.n	a67c <read_type_cb+0xba>
			data->err = 0x00;
    a5f6:	2500      	movs	r5, #0
    a5f8:	7525      	strb	r5, [r4, #20]
    a5fa:	e03f      	b.n	a67c <read_type_cb+0xba>
	data->err = 0x00;
    a5fc:	f04f 0900 	mov.w	r9, #0
    a600:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    a604:	68a0      	ldr	r0, [r4, #8]
    a606:	2102      	movs	r1, #2
    a608:	3008      	adds	r0, #8
    a60a:	f011 fe7f 	bl	1c30c <net_buf_simple_add>
    a60e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    a610:	8a33      	ldrh	r3, [r6, #16]
    a612:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a614:	f8d6 a004 	ldr.w	sl, [r6, #4]
    a618:	68a3      	ldr	r3, [r4, #8]
    a61a:	6899      	ldr	r1, [r3, #8]
    a61c:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    a61e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    a622:	1a9b      	subs	r3, r3, r2
    a624:	f8cd 9000 	str.w	r9, [sp]
    a628:	b29b      	uxth	r3, r3
    a62a:	440a      	add	r2, r1
    a62c:	4631      	mov	r1, r6
    a62e:	4640      	mov	r0, r8
    a630:	47d0      	blx	sl
	if (read < 0) {
    a632:	1e01      	subs	r1, r0, #0
    a634:	db14      	blt.n	a660 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    a636:	68e2      	ldr	r2, [r4, #12]
    a638:	7813      	ldrb	r3, [r2, #0]
    a63a:	b9b3      	cbnz	r3, a66a <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    a63c:	1c8b      	adds	r3, r1, #2
    a63e:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    a640:	68a0      	ldr	r0, [r4, #8]
    a642:	3008      	adds	r0, #8
    a644:	f011 fe62 	bl	1c30c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    a648:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    a64c:	68a3      	ldr	r3, [r4, #8]
    a64e:	899b      	ldrh	r3, [r3, #12]
    a650:	1aed      	subs	r5, r5, r3
    a652:	68e3      	ldr	r3, [r4, #12]
    a654:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a656:	429d      	cmp	r5, r3
    a658:	bfd4      	ite	le
    a65a:	2500      	movle	r5, #0
    a65c:	2501      	movgt	r5, #1
    a65e:	e00d      	b.n	a67c <read_type_cb+0xba>
		data->err = err_to_att(read);
    a660:	4608      	mov	r0, r1
    a662:	f7ff fde1 	bl	a228 <err_to_att>
    a666:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    a668:	e008      	b.n	a67c <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    a66a:	1c8a      	adds	r2, r1, #2
    a66c:	4293      	cmp	r3, r2
    a66e:	d0e7      	beq.n	a640 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    a670:	68a2      	ldr	r2, [r4, #8]
    a672:	8993      	ldrh	r3, [r2, #12]
    a674:	3b02      	subs	r3, #2
    a676:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    a678:	e000      	b.n	a67c <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    a67a:	2501      	movs	r5, #1
}
    a67c:	4628      	mov	r0, r5
    a67e:	b002      	add	sp, #8
    a680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a684 <uuid_create>:
{
    a684:	b510      	push	{r4, lr}
    a686:	4604      	mov	r4, r0
	switch (buf->len) {
    a688:	898b      	ldrh	r3, [r1, #12]
    a68a:	2b02      	cmp	r3, #2
    a68c:	d003      	beq.n	a696 <uuid_create+0x12>
    a68e:	2b10      	cmp	r3, #16
    a690:	d00a      	beq.n	a6a8 <uuid_create+0x24>
	return false;
    a692:	2000      	movs	r0, #0
}
    a694:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    a696:	2300      	movs	r3, #0
    a698:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    a69a:	f101 0008 	add.w	r0, r1, #8
    a69e:	f011 fe92 	bl	1c3c6 <net_buf_simple_pull_le16>
    a6a2:	8060      	strh	r0, [r4, #2]
		return true;
    a6a4:	2001      	movs	r0, #1
    a6a6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    a6a8:	2302      	movs	r3, #2
    a6aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    a6ae:	898a      	ldrh	r2, [r1, #12]
    a6b0:	6889      	ldr	r1, [r1, #8]
    a6b2:	f7f5 fe05 	bl	2c0 <memcpy>
		return true;
    a6b6:	2001      	movs	r0, #1
    a6b8:	bd10      	pop	{r4, pc}

0000a6ba <find_info_cb>:
{
    a6ba:	b570      	push	{r4, r5, r6, lr}
    a6bc:	4605      	mov	r5, r0
    a6be:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    a6c0:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    a6c2:	688b      	ldr	r3, [r1, #8]
    a6c4:	b13b      	cbz	r3, a6d6 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    a6c6:	68a3      	ldr	r3, [r4, #8]
    a6c8:	781b      	ldrb	r3, [r3, #0]
    a6ca:	2b01      	cmp	r3, #1
    a6cc:	d011      	beq.n	a6f2 <find_info_cb+0x38>
    a6ce:	2b02      	cmp	r3, #2
    a6d0:	d02b      	beq.n	a72a <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    a6d2:	2000      	movs	r0, #0
    a6d4:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    a6d6:	6848      	ldr	r0, [r1, #4]
    a6d8:	2101      	movs	r1, #1
    a6da:	3008      	adds	r0, #8
    a6dc:	f011 fe16 	bl	1c30c <net_buf_simple_add>
    a6e0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    a6e2:	682b      	ldr	r3, [r5, #0]
    a6e4:	781b      	ldrb	r3, [r3, #0]
    a6e6:	b913      	cbnz	r3, a6ee <find_info_cb+0x34>
    a6e8:	2301      	movs	r3, #1
    a6ea:	7003      	strb	r3, [r0, #0]
    a6ec:	e7eb      	b.n	a6c6 <find_info_cb+0xc>
    a6ee:	2302      	movs	r3, #2
    a6f0:	e7fb      	b.n	a6ea <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    a6f2:	682b      	ldr	r3, [r5, #0]
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	b10b      	cbz	r3, a6fc <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    a6f8:	2000      	movs	r0, #0
    a6fa:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    a6fc:	6860      	ldr	r0, [r4, #4]
    a6fe:	2104      	movs	r1, #4
    a700:	3008      	adds	r0, #8
    a702:	f011 fe03 	bl	1c30c <net_buf_simple_add>
    a706:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    a708:	8a2b      	ldrh	r3, [r5, #16]
    a70a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    a70c:	68e3      	ldr	r3, [r4, #12]
    a70e:	682a      	ldr	r2, [r5, #0]
    a710:	8852      	ldrh	r2, [r2, #2]
    a712:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    a714:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    a718:	6862      	ldr	r2, [r4, #4]
    a71a:	8992      	ldrh	r2, [r2, #12]
    a71c:	1a9b      	subs	r3, r3, r2
    a71e:	2b04      	cmp	r3, #4
    a720:	d801      	bhi.n	a726 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    a722:	2000      	movs	r0, #0
    a724:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    a726:	2001      	movs	r0, #1
    a728:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    a72a:	682b      	ldr	r3, [r5, #0]
    a72c:	781b      	ldrb	r3, [r3, #0]
    a72e:	2b02      	cmp	r3, #2
    a730:	d001      	beq.n	a736 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    a732:	2000      	movs	r0, #0
    a734:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    a736:	6860      	ldr	r0, [r4, #4]
    a738:	2112      	movs	r1, #18
    a73a:	3008      	adds	r0, #8
    a73c:	f011 fde6 	bl	1c30c <net_buf_simple_add>
    a740:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    a742:	8a2b      	ldrh	r3, [r5, #16]
    a744:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    a746:	68e0      	ldr	r0, [r4, #12]
    a748:	6829      	ldr	r1, [r5, #0]
    a74a:	2210      	movs	r2, #16
    a74c:	3101      	adds	r1, #1
    a74e:	3002      	adds	r0, #2
    a750:	f7f5 fdb6 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    a754:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    a758:	6862      	ldr	r2, [r4, #4]
    a75a:	8992      	ldrh	r2, [r2, #12]
    a75c:	1a9b      	subs	r3, r3, r2
    a75e:	2b12      	cmp	r3, #18
    a760:	d901      	bls.n	a766 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    a762:	2001      	movs	r0, #1
    a764:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    a766:	2000      	movs	r0, #0
}
    a768:	bd70      	pop	{r4, r5, r6, pc}

0000a76a <find_type_cb>:
{
    a76a:	b5f0      	push	{r4, r5, r6, r7, lr}
    a76c:	b089      	sub	sp, #36	; 0x24
    a76e:	4605      	mov	r5, r0
    a770:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    a772:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    a774:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a776:	2300      	movs	r3, #0
    a778:	f88d 3018 	strb.w	r3, [sp, #24]
    a77c:	f642 0301 	movw	r3, #10241	; 0x2801
    a780:	f8ad 301a 	strh.w	r3, [sp, #26]
    a784:	a906      	add	r1, sp, #24
    a786:	6800      	ldr	r0, [r0, #0]
    a788:	f7fb fa43 	bl	5c12 <bt_uuid_cmp>
    a78c:	b920      	cbnz	r0, a798 <find_type_cb+0x2e>
		data->group = NULL;
    a78e:	2300      	movs	r3, #0
    a790:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    a792:	2001      	movs	r0, #1
}
    a794:	b009      	add	sp, #36	; 0x24
    a796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    a798:	2300      	movs	r3, #0
    a79a:	f88d 301c 	strb.w	r3, [sp, #28]
    a79e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a7a2:	f8ad 301e 	strh.w	r3, [sp, #30]
    a7a6:	a907      	add	r1, sp, #28
    a7a8:	6828      	ldr	r0, [r5, #0]
    a7aa:	f7fb fa32 	bl	5c12 <bt_uuid_cmp>
    a7ae:	b148      	cbz	r0, a7c4 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    a7b0:	68a3      	ldr	r3, [r4, #8]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d039      	beq.n	a82a <find_type_cb+0xc0>
    a7b6:	8a2a      	ldrh	r2, [r5, #16]
    a7b8:	8859      	ldrh	r1, [r3, #2]
    a7ba:	428a      	cmp	r2, r1
    a7bc:	d937      	bls.n	a82e <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a7be:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    a7c0:	2001      	movs	r0, #1
    a7c2:	e7e7      	b.n	a794 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    a7c4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    a7c8:	6862      	ldr	r2, [r4, #4]
    a7ca:	8992      	ldrh	r2, [r2, #12]
    a7cc:	1a9b      	subs	r3, r3, r2
    a7ce:	2b03      	cmp	r3, #3
    a7d0:	d801      	bhi.n	a7d6 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    a7d2:	2000      	movs	r0, #0
    a7d4:	e7de      	b.n	a794 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    a7d6:	686e      	ldr	r6, [r5, #4]
    a7d8:	2300      	movs	r3, #0
    a7da:	9300      	str	r3, [sp, #0]
    a7dc:	2310      	movs	r3, #16
    a7de:	aa02      	add	r2, sp, #8
    a7e0:	4629      	mov	r1, r5
    a7e2:	4638      	mov	r0, r7
    a7e4:	47b0      	blx	r6
	if (read < 0) {
    a7e6:	1e02      	subs	r2, r0, #0
    a7e8:	db06      	blt.n	a7f8 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    a7ea:	7c23      	ldrb	r3, [r4, #16]
    a7ec:	429a      	cmp	r2, r3
    a7ee:	d007      	beq.n	a800 <find_type_cb+0x96>
		data->group = NULL;
    a7f0:	2300      	movs	r3, #0
    a7f2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    a7f4:	2001      	movs	r0, #1
    a7f6:	e7cd      	b.n	a794 <find_type_cb+0x2a>
		data->group = NULL;
    a7f8:	2300      	movs	r3, #0
    a7fa:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    a7fc:	2001      	movs	r0, #1
    a7fe:	e7c9      	b.n	a794 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    a800:	a902      	add	r1, sp, #8
    a802:	68e0      	ldr	r0, [r4, #12]
    a804:	f021 fba6 	bl	2bf54 <memcmp>
    a808:	2800      	cmp	r0, #0
    a80a:	d1f1      	bne.n	a7f0 <find_type_cb+0x86>
	data->err = 0x00;
    a80c:	2300      	movs	r3, #0
    a80e:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a810:	6860      	ldr	r0, [r4, #4]
    a812:	2104      	movs	r1, #4
    a814:	3008      	adds	r0, #8
    a816:	f011 fd79 	bl	1c30c <net_buf_simple_add>
    a81a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a81c:	8a2b      	ldrh	r3, [r5, #16]
    a81e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a820:	68a3      	ldr	r3, [r4, #8]
    a822:	8a2a      	ldrh	r2, [r5, #16]
    a824:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    a826:	2001      	movs	r0, #1
    a828:	e7b4      	b.n	a794 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    a82a:	2001      	movs	r0, #1
    a82c:	e7b2      	b.n	a794 <find_type_cb+0x2a>
    a82e:	2001      	movs	r0, #1
    a830:	e7b0      	b.n	a794 <find_type_cb+0x2a>

0000a832 <att_change_security>:
{
    a832:	b508      	push	{r3, lr}
	switch (err) {
    a834:	2905      	cmp	r1, #5
    a836:	d008      	beq.n	a84a <att_change_security+0x18>
    a838:	290f      	cmp	r1, #15
    a83a:	d113      	bne.n	a864 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    a83c:	7a03      	ldrb	r3, [r0, #8]
    a83e:	2b01      	cmp	r3, #1
    a840:	d813      	bhi.n	a86a <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    a842:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    a844:	f7fd fe4a 	bl	84dc <bt_conn_security>
    a848:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    a84a:	7a03      	ldrb	r3, [r0, #8]
    a84c:	2b01      	cmp	r3, #1
    a84e:	d905      	bls.n	a85c <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    a850:	2b02      	cmp	r3, #2
    a852:	d905      	bls.n	a860 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    a854:	2b03      	cmp	r3, #3
    a856:	d80b      	bhi.n	a870 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    a858:	2104      	movs	r1, #4
    a85a:	e7f3      	b.n	a844 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    a85c:	2102      	movs	r1, #2
    a85e:	e7f1      	b.n	a844 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    a860:	2103      	movs	r1, #3
    a862:	e7ef      	b.n	a844 <att_change_security+0x12>
		return -EINVAL;
    a864:	f06f 0015 	mvn.w	r0, #21
    a868:	bd08      	pop	{r3, pc}
			return -EALREADY;
    a86a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a86e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    a870:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    a874:	bd08      	pop	{r3, pc}
	...

0000a878 <bt_att_connected>:
{
    a878:	b510      	push	{r4, lr}
    a87a:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a87c:	2317      	movs	r3, #23
    a87e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a882:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    a886:	4906      	ldr	r1, [pc, #24]	; (a8a0 <bt_att_connected+0x28>)
    a888:	30ac      	adds	r0, #172	; 0xac
    a88a:	f020 ff15 	bl	2b6b8 <k_delayed_work_init>
	list->head = NULL;
    a88e:	2300      	movs	r3, #0
    a890:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    a894:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    a898:	6820      	ldr	r0, [r4, #0]
    a89a:	f001 fadd 	bl	be58 <bt_gatt_connected>
    a89e:	bd10      	pop	{r4, pc}
    a8a0:	0000abff 	.word	0x0000abff

0000a8a4 <att_send_req>:
{
    a8a4:	b570      	push	{r4, r5, r6, lr}
    a8a6:	4605      	mov	r5, r0
    a8a8:	460c      	mov	r4, r1
	att->req = req;
    a8aa:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    a8ae:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    a8b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a8b6:	4630      	mov	r0, r6
    a8b8:	f020 f940 	bl	2ab3c <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    a8bc:	682b      	ldr	r3, [r5, #0]
    a8be:	7b1b      	ldrb	r3, [r3, #12]
    a8c0:	2b03      	cmp	r3, #3
    a8c2:	d019      	beq.n	a8f8 <att_send_req+0x54>
    a8c4:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    a8c6:	b323      	cbz	r3, a912 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    a8c8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    a8ca:	f106 0008 	add.w	r0, r6, #8
    a8ce:	f011 fd82 	bl	1c3d6 <net_buf_simple_headroom>
    a8d2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    a8d4:	89b3      	ldrh	r3, [r6, #12]
    a8d6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    a8d8:	682d      	ldr	r5, [r5, #0]
    a8da:	6920      	ldr	r0, [r4, #16]
    a8dc:	f011 fce6 	bl	1c2ac <net_buf_ref>
    a8e0:	4606      	mov	r6, r0
    a8e2:	6920      	ldr	r0, [r4, #16]
    a8e4:	f7ff fcf0 	bl	a2c8 <att_cb>
    a8e8:	4603      	mov	r3, r0
    a8ea:	4632      	mov	r2, r6
    a8ec:	2104      	movs	r1, #4
    a8ee:	4628      	mov	r0, r5
    a8f0:	f7fe fea3 	bl	963a <bt_l2cap_send_cb>
	return 0;
    a8f4:	2000      	movs	r0, #0
}
    a8f6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a8f8:	f3bf 8f5b 	dmb	ish
    a8fc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    a900:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    a904:	f013 0f04 	tst.w	r3, #4
    a908:	d101      	bne.n	a90e <att_send_req+0x6a>
    a90a:	2301      	movs	r3, #1
    a90c:	e7db      	b.n	a8c6 <att_send_req+0x22>
    a90e:	2300      	movs	r3, #0
    a910:	e7d9      	b.n	a8c6 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a912:	4630      	mov	r0, r6
    a914:	f020 f8ff 	bl	2ab16 <_impl_k_sem_give>
		return -ENOTCONN;
    a918:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a91c:	bd70      	pop	{r4, r5, r6, pc}

0000a91e <att_process>:
{
    a91e:	b508      	push	{r3, lr}
	return (!list->head);
    a920:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    a924:	b131      	cbz	r1, a934 <att_process+0x16>
	list->head = node->next;
    a926:	680b      	ldr	r3, [r1, #0]
    a928:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    a92c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    a930:	4291      	cmp	r1, r2
    a932:	d003      	beq.n	a93c <att_process+0x1e>
	if (!node) {
    a934:	b109      	cbz	r1, a93a <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    a936:	f7ff ffb5 	bl	a8a4 <att_send_req>
    a93a:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    a93c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    a940:	e7f8      	b.n	a934 <att_process+0x16>

0000a942 <att_handle_rsp>:
{
    a942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a946:	b082      	sub	sp, #8
    a948:	4604      	mov	r4, r0
    a94a:	460e      	mov	r6, r1
    a94c:	4617      	mov	r7, r2
    a94e:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    a950:	30ac      	adds	r0, #172	; 0xac
    a952:	f020 fecf 	bl	2b6f4 <k_delayed_work_cancel>
	if (!att->req) {
    a956:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a95a:	b1e3      	cbz	r3, a996 <att_handle_rsp+0x54>
	if (att->req->buf) {
    a95c:	6918      	ldr	r0, [r3, #16]
    a95e:	b128      	cbz	r0, a96c <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    a960:	f011 fc88 	bl	1c274 <net_buf_unref>
		att->req->buf = NULL;
    a964:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a968:	2200      	movs	r2, #0
    a96a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    a96c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a970:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    a974:	2200      	movs	r2, #0
    a976:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    a978:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a97c:	9300      	str	r3, [sp, #0]
    a97e:	463b      	mov	r3, r7
    a980:	4632      	mov	r2, r6
    a982:	4629      	mov	r1, r5
    a984:	6820      	ldr	r0, [r4, #0]
    a986:	47c0      	blx	r8
	if (!att->req->func) {
    a988:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    a98c:	6843      	ldr	r3, [r0, #4]
    a98e:	b14b      	cbz	r3, a9a4 <att_handle_rsp+0x62>
	att->req = NULL;
    a990:	2300      	movs	r3, #0
    a992:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    a996:	4620      	mov	r0, r4
    a998:	f7ff ffc1 	bl	a91e <att_process>
}
    a99c:	2000      	movs	r0, #0
    a99e:	b002      	add	sp, #8
    a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    a9a4:	f7ff fd34 	bl	a410 <att_req_destroy>
    a9a8:	e7f2      	b.n	a990 <att_handle_rsp+0x4e>

0000a9aa <att_confirm>:
{
    a9aa:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9ac:	2300      	movs	r3, #0
    a9ae:	898a      	ldrh	r2, [r1, #12]
    a9b0:	6889      	ldr	r1, [r1, #8]
    a9b2:	f7ff ffc6 	bl	a942 <att_handle_rsp>
}
    a9b6:	bd08      	pop	{r3, pc}

0000a9b8 <att_handle_exec_write_rsp>:
{
    a9b8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9ba:	2300      	movs	r3, #0
    a9bc:	898a      	ldrh	r2, [r1, #12]
    a9be:	6889      	ldr	r1, [r1, #8]
    a9c0:	f7ff ffbf 	bl	a942 <att_handle_rsp>
}
    a9c4:	bd08      	pop	{r3, pc}

0000a9c6 <att_handle_prepare_write_rsp>:
{
    a9c6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9c8:	2300      	movs	r3, #0
    a9ca:	898a      	ldrh	r2, [r1, #12]
    a9cc:	6889      	ldr	r1, [r1, #8]
    a9ce:	f7ff ffb8 	bl	a942 <att_handle_rsp>
}
    a9d2:	bd08      	pop	{r3, pc}

0000a9d4 <att_handle_write_rsp>:
{
    a9d4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9d6:	2300      	movs	r3, #0
    a9d8:	898a      	ldrh	r2, [r1, #12]
    a9da:	6889      	ldr	r1, [r1, #8]
    a9dc:	f7ff ffb1 	bl	a942 <att_handle_rsp>
}
    a9e0:	bd08      	pop	{r3, pc}

0000a9e2 <att_handle_read_mult_rsp>:
{
    a9e2:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9e4:	2300      	movs	r3, #0
    a9e6:	898a      	ldrh	r2, [r1, #12]
    a9e8:	6889      	ldr	r1, [r1, #8]
    a9ea:	f7ff ffaa 	bl	a942 <att_handle_rsp>
}
    a9ee:	bd08      	pop	{r3, pc}

0000a9f0 <att_handle_read_blob_rsp>:
{
    a9f0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    a9f2:	2300      	movs	r3, #0
    a9f4:	898a      	ldrh	r2, [r1, #12]
    a9f6:	6889      	ldr	r1, [r1, #8]
    a9f8:	f7ff ffa3 	bl	a942 <att_handle_rsp>
}
    a9fc:	bd08      	pop	{r3, pc}

0000a9fe <att_handle_read_rsp>:
{
    a9fe:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    aa00:	2300      	movs	r3, #0
    aa02:	898a      	ldrh	r2, [r1, #12]
    aa04:	6889      	ldr	r1, [r1, #8]
    aa06:	f7ff ff9c 	bl	a942 <att_handle_rsp>
}
    aa0a:	bd08      	pop	{r3, pc}

0000aa0c <att_handle_read_type_rsp>:
{
    aa0c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    aa0e:	2300      	movs	r3, #0
    aa10:	898a      	ldrh	r2, [r1, #12]
    aa12:	6889      	ldr	r1, [r1, #8]
    aa14:	f7ff ff95 	bl	a942 <att_handle_rsp>
}
    aa18:	bd08      	pop	{r3, pc}

0000aa1a <att_handle_find_type_rsp>:
{
    aa1a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    aa1c:	2300      	movs	r3, #0
    aa1e:	898a      	ldrh	r2, [r1, #12]
    aa20:	6889      	ldr	r1, [r1, #8]
    aa22:	f7ff ff8e 	bl	a942 <att_handle_rsp>
}
    aa26:	bd08      	pop	{r3, pc}

0000aa28 <att_handle_find_info_rsp>:
{
    aa28:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    aa2a:	2300      	movs	r3, #0
    aa2c:	898a      	ldrh	r2, [r1, #12]
    aa2e:	6889      	ldr	r1, [r1, #8]
    aa30:	f7ff ff87 	bl	a942 <att_handle_rsp>
}
    aa34:	bd08      	pop	{r3, pc}

0000aa36 <att_mtu_rsp>:
	if (!att) {
    aa36:	b1b8      	cbz	r0, aa68 <att_mtu_rsp+0x32>
{
    aa38:	b508      	push	{r3, lr}
    aa3a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    aa3c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    aa3e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    aa40:	2b16      	cmp	r3, #22
    aa42:	d90b      	bls.n	aa5c <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    aa44:	2b41      	cmp	r3, #65	; 0x41
    aa46:	bf28      	it	cs
    aa48:	2341      	movcs	r3, #65	; 0x41
    aa4a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    aa4e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    aa52:	2300      	movs	r3, #0
    aa54:	8992      	ldrh	r2, [r2, #12]
    aa56:	f7ff ff74 	bl	a942 <att_handle_rsp>
    aa5a:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    aa5c:	2304      	movs	r3, #4
    aa5e:	2200      	movs	r2, #0
    aa60:	4611      	mov	r1, r2
    aa62:	f7ff ff6e 	bl	a942 <att_handle_rsp>
    aa66:	bd08      	pop	{r3, pc}
		return 0;
    aa68:	2000      	movs	r0, #0
    aa6a:	4770      	bx	lr

0000aa6c <bt_att_encrypt_change>:
{
    aa6c:	b570      	push	{r4, r5, r6, lr}
    aa6e:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    aa70:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    aa72:	b941      	cbnz	r1, aa86 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    aa74:	7a2b      	ldrb	r3, [r5, #8]
    aa76:	2b01      	cmp	r3, #1
    aa78:	d004      	beq.n	aa84 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    aa7a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    aa7e:	b10b      	cbz	r3, aa84 <bt_att_encrypt_change+0x18>
    aa80:	7d1b      	ldrb	r3, [r3, #20]
    aa82:	b933      	cbnz	r3, aa92 <bt_att_encrypt_change+0x26>
    aa84:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    aa86:	2305      	movs	r3, #5
    aa88:	2200      	movs	r2, #0
    aa8a:	4611      	mov	r1, r2
    aa8c:	f7ff ff59 	bl	a942 <att_handle_rsp>
		return;
    aa90:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    aa92:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    aa96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa9a:	4630      	mov	r0, r6
    aa9c:	f020 f84e 	bl	2ab3c <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    aaa0:	6823      	ldr	r3, [r4, #0]
    aaa2:	7b1b      	ldrb	r3, [r3, #12]
    aaa4:	2b03      	cmp	r3, #3
    aaa6:	d012      	beq.n	aace <bt_att_encrypt_change+0x62>
    aaa8:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    aaaa:	b1eb      	cbz	r3, aae8 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    aaac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    aab0:	691e      	ldr	r6, [r3, #16]
    aab2:	4630      	mov	r0, r6
    aab4:	f7ff fc08 	bl	a2c8 <att_cb>
    aab8:	4603      	mov	r3, r0
    aaba:	4632      	mov	r2, r6
    aabc:	2104      	movs	r1, #4
    aabe:	4628      	mov	r0, r5
    aac0:	f7fe fdbb 	bl	963a <bt_l2cap_send_cb>
	att->req->buf = NULL;
    aac4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    aac8:	2200      	movs	r2, #0
    aaca:	611a      	str	r2, [r3, #16]
    aacc:	e7da      	b.n	aa84 <bt_att_encrypt_change+0x18>
    aace:	f3bf 8f5b 	dmb	ish
    aad2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    aad6:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    aada:	f013 0f04 	tst.w	r3, #4
    aade:	d101      	bne.n	aae4 <bt_att_encrypt_change+0x78>
    aae0:	2301      	movs	r3, #1
    aae2:	e7e2      	b.n	aaaa <bt_att_encrypt_change+0x3e>
    aae4:	2300      	movs	r3, #0
    aae6:	e7e0      	b.n	aaaa <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    aae8:	4630      	mov	r0, r6
    aaea:	f020 f814 	bl	2ab16 <_impl_k_sem_give>
    aaee:	bd70      	pop	{r4, r5, r6, pc}

0000aaf0 <att_error_rsp>:
{
    aaf0:	b538      	push	{r3, r4, r5, lr}
    aaf2:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    aaf4:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    aaf6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    aafa:	b1fb      	cbz	r3, ab3c <att_error_rsp+0x4c>
	if (att->req->buf) {
    aafc:	691a      	ldr	r2, [r3, #16]
    aafe:	b132      	cbz	r2, ab0e <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    ab00:	f102 0110 	add.w	r1, r2, #16
    ab04:	899d      	ldrh	r5, [r3, #12]
    ab06:	4429      	add	r1, r5
    ab08:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    ab0a:	89db      	ldrh	r3, [r3, #14]
    ab0c:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    ab0e:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    ab10:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ab14:	7d1b      	ldrb	r3, [r3, #20]
    ab16:	b133      	cbz	r3, ab26 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    ab18:	462b      	mov	r3, r5
    ab1a:	2200      	movs	r2, #0
    ab1c:	4611      	mov	r1, r2
    ab1e:	4620      	mov	r0, r4
    ab20:	f7ff ff0f 	bl	a942 <att_handle_rsp>
}
    ab24:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    ab26:	4629      	mov	r1, r5
    ab28:	6820      	ldr	r0, [r4, #0]
    ab2a:	f7ff fe82 	bl	a832 <att_change_security>
    ab2e:	2800      	cmp	r0, #0
    ab30:	d1f2      	bne.n	ab18 <att_error_rsp+0x28>
		att->req->retrying = true;
    ab32:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ab36:	2201      	movs	r2, #1
    ab38:	751a      	strb	r2, [r3, #20]
		return 0;
    ab3a:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    ab3c:	250e      	movs	r5, #14
    ab3e:	e7eb      	b.n	ab18 <att_error_rsp+0x28>

0000ab40 <att_reset>:
{
    ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab42:	b083      	sub	sp, #12
    ab44:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    ab46:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab4a:	f3bf 8f5b 	dmb	ish
    ab4e:	e853 2f00 	ldrex	r2, [r3]
    ab52:	f042 0204 	orr.w	r2, r2, #4
    ab56:	e843 2100 	strex	r1, r2, [r3]
    ab5a:	2900      	cmp	r1, #0
    ab5c:	d1f7      	bne.n	ab4e <att_reset+0xe>
    ab5e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    ab62:	2400      	movs	r4, #0
    ab64:	e004      	b.n	ab70 <att_reset+0x30>
    ab66:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    ab6a:	f01f ffd4 	bl	2ab16 <_impl_k_sem_give>
    ab6e:	3401      	adds	r4, #1
    ab70:	2c01      	cmp	r4, #1
    ab72:	ddf8      	ble.n	ab66 <att_reset+0x26>
	return list->head;
    ab74:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    ab78:	b11d      	cbz	r5, ab82 <att_reset+0x42>
    ab7a:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    ab7c:	b145      	cbz	r5, ab90 <att_reset+0x50>
	return node->next;
    ab7e:	682c      	ldr	r4, [r5, #0]
    ab80:	e006      	b.n	ab90 <att_reset+0x50>
    ab82:	462c      	mov	r4, r5
    ab84:	e004      	b.n	ab90 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    ab86:	4623      	mov	r3, r4
    ab88:	e014      	b.n	abb4 <att_reset+0x74>
    ab8a:	4623      	mov	r3, r4
    ab8c:	4625      	mov	r5, r4
    ab8e:	461c      	mov	r4, r3
    ab90:	b1c5      	cbz	r5, abc4 <att_reset+0x84>
		if (req->func) {
    ab92:	686e      	ldr	r6, [r5, #4]
    ab94:	b12e      	cbz	r6, aba2 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    ab96:	9500      	str	r5, [sp, #0]
    ab98:	2300      	movs	r3, #0
    ab9a:	461a      	mov	r2, r3
    ab9c:	210e      	movs	r1, #14
    ab9e:	4618      	mov	r0, r3
    aba0:	47b0      	blx	r6
		att_req_destroy(req);
    aba2:	4628      	mov	r0, r5
    aba4:	f7ff fc34 	bl	a410 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    aba8:	2c00      	cmp	r4, #0
    abaa:	d0ee      	beq.n	ab8a <att_reset+0x4a>
    abac:	4622      	mov	r2, r4
    abae:	2c00      	cmp	r4, #0
    abb0:	d0e9      	beq.n	ab86 <att_reset+0x46>
	return node->next;
    abb2:	6823      	ldr	r3, [r4, #0]
    abb4:	b113      	cbz	r3, abbc <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    abb6:	b11a      	cbz	r2, abc0 <att_reset+0x80>
	return node->next;
    abb8:	6823      	ldr	r3, [r4, #0]
    abba:	e7e7      	b.n	ab8c <att_reset+0x4c>
    abbc:	2300      	movs	r3, #0
    abbe:	e7e5      	b.n	ab8c <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    abc0:	2300      	movs	r3, #0
    abc2:	e7e3      	b.n	ab8c <att_reset+0x4c>
	list->head = NULL;
    abc4:	2300      	movs	r3, #0
    abc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    abca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    abce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    abd2:	b12b      	cbz	r3, abe0 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    abd4:	230e      	movs	r3, #14
    abd6:	2200      	movs	r2, #0
    abd8:	4611      	mov	r1, r2
    abda:	4638      	mov	r0, r7
    abdc:	f7ff feb1 	bl	a942 <att_handle_rsp>
}
    abe0:	b003      	add	sp, #12
    abe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000abe4 <bt_att_disconnected>:
{
    abe4:	b510      	push	{r4, lr}
    abe6:	4604      	mov	r4, r0
	att_reset(att);
    abe8:	f7ff ffaa 	bl	ab40 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    abec:	6820      	ldr	r0, [r4, #0]
    abee:	f001 f93f 	bl	be70 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    abf2:	22ec      	movs	r2, #236	; 0xec
    abf4:	2100      	movs	r1, #0
    abf6:	4620      	mov	r0, r4
    abf8:	f021 fa40 	bl	2c07c <memset>
    abfc:	bd10      	pop	{r4, pc}

0000abfe <att_timeout>:
{
    abfe:	b510      	push	{r4, lr}
    ac00:	4604      	mov	r4, r0
	att_reset(att);
    ac02:	38ac      	subs	r0, #172	; 0xac
    ac04:	f7ff ff9c 	bl	ab40 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    ac08:	f854 0cac 	ldr.w	r0, [r4, #-172]
    ac0c:	f001 f930 	bl	be70 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    ac10:	2300      	movs	r3, #0
    ac12:	f844 3cac 	str.w	r3, [r4, #-172]
    ac16:	bd10      	pop	{r4, pc}

0000ac18 <bt_att_create_pdu>:
{
    ac18:	b538      	push	{r3, r4, r5, lr}
    ac1a:	460d      	mov	r5, r1
    ac1c:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    ac1e:	f7ff fbab 	bl	a378 <att_chan_get>
	if (!att) {
    ac22:	b180      	cbz	r0, ac46 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    ac24:	3401      	adds	r4, #1
    ac26:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    ac2a:	429c      	cmp	r4, r3
    ac2c:	d80d      	bhi.n	ac4a <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    ac2e:	2100      	movs	r1, #0
    ac30:	4608      	mov	r0, r1
    ac32:	f7fe fc6a 	bl	950a <bt_l2cap_create_pdu>
    ac36:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    ac38:	2101      	movs	r1, #1
    ac3a:	3008      	adds	r0, #8
    ac3c:	f011 fb66 	bl	1c30c <net_buf_simple_add>
	hdr->code = op;
    ac40:	7005      	strb	r5, [r0, #0]
}
    ac42:	4620      	mov	r0, r4
    ac44:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    ac46:	2400      	movs	r4, #0
    ac48:	e7fb      	b.n	ac42 <bt_att_create_pdu+0x2a>
		return NULL;
    ac4a:	2400      	movs	r4, #0
    ac4c:	e7f9      	b.n	ac42 <bt_att_create_pdu+0x2a>
	...

0000ac50 <att_indicate>:
{
    ac50:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    ac52:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    ac54:	f101 0008 	add.w	r0, r1, #8
    ac58:	f011 fbb5 	bl	1c3c6 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    ac5c:	2200      	movs	r2, #0
    ac5e:	211e      	movs	r1, #30
    ac60:	4620      	mov	r0, r4
    ac62:	f7ff ffd9 	bl	ac18 <bt_att_create_pdu>
	if (!buf) {
    ac66:	b128      	cbz	r0, ac74 <att_indicate+0x24>
    ac68:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    ac6a:	4b03      	ldr	r3, [pc, #12]	; (ac78 <att_indicate+0x28>)
    ac6c:	2104      	movs	r1, #4
    ac6e:	4620      	mov	r0, r4
    ac70:	f7fe fce3 	bl	963a <bt_l2cap_send_cb>
}
    ac74:	2000      	movs	r0, #0
    ac76:	bd10      	pop	{r4, pc}
    ac78:	0000a473 	.word	0x0000a473

0000ac7c <att_mtu_req>:
{
    ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    ac80:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    ac82:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    ac84:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    ac86:	2d16      	cmp	r5, #22
    ac88:	d802      	bhi.n	ac90 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    ac8a:	2004      	movs	r0, #4
    ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac90:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    ac92:	2202      	movs	r2, #2
    ac94:	2103      	movs	r1, #3
    ac96:	4638      	mov	r0, r7
    ac98:	f7ff ffbe 	bl	ac18 <bt_att_create_pdu>
	if (!pdu) {
    ac9c:	4680      	mov	r8, r0
    ac9e:	b1b8      	cbz	r0, acd0 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    aca0:	2102      	movs	r1, #2
    aca2:	3008      	adds	r0, #8
    aca4:	f011 fb32 	bl	1c30c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    aca8:	2600      	movs	r6, #0
    acaa:	2341      	movs	r3, #65	; 0x41
    acac:	7003      	strb	r3, [r0, #0]
    acae:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    acb0:	4b09      	ldr	r3, [pc, #36]	; (acd8 <att_mtu_req+0x5c>)
    acb2:	4642      	mov	r2, r8
    acb4:	2104      	movs	r1, #4
    acb6:	4638      	mov	r0, r7
    acb8:	f7fe fcbf 	bl	963a <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    acbc:	2d41      	cmp	r5, #65	; 0x41
    acbe:	bf28      	it	cs
    acc0:	2541      	movcs	r5, #65	; 0x41
    acc2:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    acc6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    acca:	4630      	mov	r0, r6
    accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    acd0:	200e      	movs	r0, #14
}
    acd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acd6:	bf00      	nop
    acd8:	0000a43b 	.word	0x0000a43b

0000acdc <send_err_rsp>:
	if (!req) {
    acdc:	b901      	cbnz	r1, ace0 <send_err_rsp+0x4>
    acde:	4770      	bx	lr
{
    ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace4:	460f      	mov	r7, r1
    ace6:	461d      	mov	r5, r3
    ace8:	4616      	mov	r6, r2
    acea:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    acec:	2204      	movs	r2, #4
    acee:	2101      	movs	r1, #1
    acf0:	f7ff ff92 	bl	ac18 <bt_att_create_pdu>
	if (!buf) {
    acf4:	4680      	mov	r8, r0
    acf6:	b168      	cbz	r0, ad14 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    acf8:	2104      	movs	r1, #4
    acfa:	3008      	adds	r0, #8
    acfc:	f011 fb06 	bl	1c30c <net_buf_simple_add>
	rsp->request = req;
    ad00:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    ad02:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    ad06:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    ad08:	4b03      	ldr	r3, [pc, #12]	; (ad18 <send_err_rsp+0x3c>)
    ad0a:	4642      	mov	r2, r8
    ad0c:	2104      	movs	r1, #4
    ad0e:	4620      	mov	r0, r4
    ad10:	f7fe fc93 	bl	963a <bt_l2cap_send_cb>
    ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad18:	0000a43b 	.word	0x0000a43b

0000ad1c <bt_att_recv>:
{
    ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    ad1e:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    ad20:	898b      	ldrh	r3, [r1, #12]
    ad22:	b903      	cbnz	r3, ad26 <bt_att_recv+0xa>
    ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad26:	460e      	mov	r6, r1
    ad28:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    ad2a:	2101      	movs	r1, #1
    ad2c:	f106 0008 	add.w	r0, r6, #8
    ad30:	f011 fb39 	bl	1c3a6 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ad34:	2300      	movs	r3, #0
    ad36:	2b1a      	cmp	r3, #26
    ad38:	d822      	bhi.n	ad80 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    ad3a:	782c      	ldrb	r4, [r5, #0]
    ad3c:	4a2c      	ldr	r2, [pc, #176]	; (adf0 <bt_att_recv+0xd4>)
    ad3e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    ad42:	4294      	cmp	r4, r2
    ad44:	d001      	beq.n	ad4a <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ad46:	3301      	adds	r3, #1
    ad48:	e7f5      	b.n	ad36 <bt_att_recv+0x1a>
			handler = &handlers[i];
    ad4a:	4c29      	ldr	r4, [pc, #164]	; (adf0 <bt_att_recv+0xd4>)
    ad4c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    ad50:	b1c4      	cbz	r4, ad84 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    ad52:	78a3      	ldrb	r3, [r4, #2]
    ad54:	2b01      	cmp	r3, #1
    ad56:	d022      	beq.n	ad9e <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    ad58:	78a3      	ldrb	r3, [r4, #2]
    ad5a:	2b05      	cmp	r3, #5
    ad5c:	d031      	beq.n	adc2 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    ad5e:	89b2      	ldrh	r2, [r6, #12]
    ad60:	7863      	ldrb	r3, [r4, #1]
    ad62:	429a      	cmp	r2, r3
    ad64:	d23f      	bcs.n	ade6 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    ad66:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    ad68:	78a2      	ldrb	r2, [r4, #2]
    ad6a:	2a01      	cmp	r2, #1
    ad6c:	d1da      	bne.n	ad24 <bt_att_recv+0x8>
    ad6e:	2800      	cmp	r0, #0
    ad70:	d0d8      	beq.n	ad24 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    ad72:	4603      	mov	r3, r0
    ad74:	2200      	movs	r2, #0
    ad76:	7829      	ldrb	r1, [r5, #0]
    ad78:	6838      	ldr	r0, [r7, #0]
    ad7a:	f7ff ffaf 	bl	acdc <send_err_rsp>
    ad7e:	e7d1      	b.n	ad24 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ad80:	2400      	movs	r4, #0
    ad82:	e7e5      	b.n	ad50 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    ad84:	782c      	ldrb	r4, [r5, #0]
    ad86:	4620      	mov	r0, r4
    ad88:	f7ff fa86 	bl	a298 <att_op_get_type>
    ad8c:	2800      	cmp	r0, #0
    ad8e:	d0c9      	beq.n	ad24 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    ad90:	2306      	movs	r3, #6
    ad92:	2200      	movs	r2, #0
    ad94:	4621      	mov	r1, r4
    ad96:	6838      	ldr	r0, [r7, #0]
    ad98:	f7ff ffa0 	bl	acdc <send_err_rsp>
    ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    ad9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    ada2:	f3bf 8f5b 	dmb	ish
    ada6:	e853 2f00 	ldrex	r2, [r3]
    adaa:	f042 0101 	orr.w	r1, r2, #1
    adae:	e843 1000 	strex	r0, r1, [r3]
    adb2:	2800      	cmp	r0, #0
    adb4:	d1f7      	bne.n	ada6 <bt_att_recv+0x8a>
    adb6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    adba:	f012 0f01 	tst.w	r2, #1
    adbe:	d0cb      	beq.n	ad58 <bt_att_recv+0x3c>
    adc0:	e7b0      	b.n	ad24 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    adc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    adc6:	f3bf 8f5b 	dmb	ish
    adca:	e853 2f00 	ldrex	r2, [r3]
    adce:	f042 0102 	orr.w	r1, r2, #2
    add2:	e843 1000 	strex	r0, r1, [r3]
    add6:	2800      	cmp	r0, #0
    add8:	d1f7      	bne.n	adca <bt_att_recv+0xae>
    adda:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    adde:	f012 0f02 	tst.w	r2, #2
    ade2:	d0bc      	beq.n	ad5e <bt_att_recv+0x42>
    ade4:	e79e      	b.n	ad24 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    ade6:	6863      	ldr	r3, [r4, #4]
    ade8:	4631      	mov	r1, r6
    adea:	4638      	mov	r0, r7
    adec:	4798      	blx	r3
    adee:	e7bb      	b.n	ad68 <bt_att_recv+0x4c>
    adf0:	00032ff4 	.word	0x00032ff4

0000adf4 <att_write_rsp>:
{
    adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    adf8:	b086      	sub	sp, #24
	if (!handle) {
    adfa:	b923      	cbnz	r3, ae06 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    adfc:	2401      	movs	r4, #1
}
    adfe:	4620      	mov	r0, r4
    ae00:	b006      	add	sp, #24
    ae02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae06:	4698      	mov	r8, r3
    ae08:	4617      	mov	r7, r2
    ae0a:	460e      	mov	r6, r1
    ae0c:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    ae0e:	2218      	movs	r2, #24
    ae10:	2100      	movs	r1, #0
    ae12:	4668      	mov	r0, sp
    ae14:	f021 f932 	bl	2c07c <memset>
	if (rsp) {
    ae18:	b137      	cbz	r7, ae28 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    ae1a:	2200      	movs	r2, #0
    ae1c:	4639      	mov	r1, r7
    ae1e:	4628      	mov	r0, r5
    ae20:	f7ff fefa 	bl	ac18 <bt_att_create_pdu>
    ae24:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    ae26:	b3a0      	cbz	r0, ae92 <att_write_rsp+0x9e>
	data.conn = conn;
    ae28:	9500      	str	r5, [sp, #0]
	data.op = op;
    ae2a:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    ae2e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ae32:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    ae36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae38:	9303      	str	r3, [sp, #12]
	data.len = len;
    ae3a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    ae3e:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ae42:	2301      	movs	r3, #1
    ae44:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ae48:	466b      	mov	r3, sp
    ae4a:	4a13      	ldr	r2, [pc, #76]	; (ae98 <att_write_rsp+0xa4>)
    ae4c:	4641      	mov	r1, r8
    ae4e:	4640      	mov	r0, r8
    ae50:	f000 ff26 	bl	bca0 <bt_gatt_foreach_attr>
	if (data.err) {
    ae54:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ae58:	b194      	cbz	r4, ae80 <att_write_rsp+0x8c>
		if (rsp) {
    ae5a:	b91f      	cbnz	r7, ae64 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ae5c:	2e18      	cmp	r6, #24
    ae5e:	d00c      	beq.n	ae7a <att_write_rsp+0x86>
    ae60:	2400      	movs	r4, #0
    ae62:	e7cc      	b.n	adfe <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    ae64:	9801      	ldr	r0, [sp, #4]
    ae66:	f011 fa05 	bl	1c274 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    ae6a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae6e:	4642      	mov	r2, r8
    ae70:	4631      	mov	r1, r6
    ae72:	4628      	mov	r0, r5
    ae74:	f7ff ff32 	bl	acdc <send_err_rsp>
    ae78:	e7f0      	b.n	ae5c <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ae7a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ae7e:	e7be      	b.n	adfe <att_write_rsp+0xa>
	if (data.buf) {
    ae80:	9a01      	ldr	r2, [sp, #4]
    ae82:	2a00      	cmp	r2, #0
    ae84:	d0bb      	beq.n	adfe <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    ae86:	4b05      	ldr	r3, [pc, #20]	; (ae9c <att_write_rsp+0xa8>)
    ae88:	2104      	movs	r1, #4
    ae8a:	4628      	mov	r0, r5
    ae8c:	f7fe fbd5 	bl	963a <bt_l2cap_send_cb>
    ae90:	e7b5      	b.n	adfe <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    ae92:	240e      	movs	r4, #14
    ae94:	e7b3      	b.n	adfe <att_write_rsp+0xa>
    ae96:	bf00      	nop
    ae98:	0000a23b 	.word	0x0000a23b
    ae9c:	0000a43b 	.word	0x0000a43b

0000aea0 <att_signed_write_cmd>:
{
    aea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aea2:	b085      	sub	sp, #20
    aea4:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    aea6:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    aea8:	460c      	mov	r4, r1
    aeaa:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    aeae:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    aeb0:	2101      	movs	r1, #1
    aeb2:	4620      	mov	r0, r4
    aeb4:	f011 fa61 	bl	1c37a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    aeb8:	4629      	mov	r1, r5
    aeba:	4630      	mov	r0, r6
    aebc:	f003 faf2 	bl	e4a4 <bt_smp_sign_verify>
	if (err) {
    aec0:	b110      	cbz	r0, aec8 <att_signed_write_cmd+0x28>
		return 0;
    aec2:	2000      	movs	r0, #0
}
    aec4:	b005      	add	sp, #20
    aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    aec8:	2101      	movs	r1, #1
    aeca:	4620      	mov	r0, r4
    aecc:	f011 fa6b 	bl	1c3a6 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    aed0:	2102      	movs	r1, #2
    aed2:	4620      	mov	r0, r4
    aed4:	f011 fa67 	bl	1c3a6 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    aed8:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    aeda:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    aedc:	3b0c      	subs	r3, #12
    aede:	b2db      	uxtb	r3, r3
    aee0:	9302      	str	r3, [sp, #8]
    aee2:	9201      	str	r2, [sp, #4]
    aee4:	2100      	movs	r1, #0
    aee6:	9100      	str	r1, [sp, #0]
    aee8:	463b      	mov	r3, r7
    aeea:	460a      	mov	r2, r1
    aeec:	4630      	mov	r0, r6
    aeee:	f7ff ff81 	bl	adf4 <att_write_rsp>
    aef2:	e7e7      	b.n	aec4 <att_signed_write_cmd+0x24>

0000aef4 <att_write_cmd>:
{
    aef4:	b530      	push	{r4, r5, lr}
    aef6:	b085      	sub	sp, #20
    aef8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    aefa:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    aefc:	f101 0008 	add.w	r0, r1, #8
    af00:	f011 fa61 	bl	1c3c6 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    af04:	68a3      	ldr	r3, [r4, #8]
    af06:	7b22      	ldrb	r2, [r4, #12]
    af08:	9202      	str	r2, [sp, #8]
    af0a:	9301      	str	r3, [sp, #4]
    af0c:	2100      	movs	r1, #0
    af0e:	9100      	str	r1, [sp, #0]
    af10:	4603      	mov	r3, r0
    af12:	460a      	mov	r2, r1
    af14:	4628      	mov	r0, r5
    af16:	f7ff ff6d 	bl	adf4 <att_write_rsp>
}
    af1a:	b005      	add	sp, #20
    af1c:	bd30      	pop	{r4, r5, pc}

0000af1e <att_write_req>:
{
    af1e:	b530      	push	{r4, r5, lr}
    af20:	b085      	sub	sp, #20
    af22:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    af24:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    af26:	f101 0008 	add.w	r0, r1, #8
    af2a:	f011 fa4c 	bl	1c3c6 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    af2e:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    af30:	7b22      	ldrb	r2, [r4, #12]
    af32:	9202      	str	r2, [sp, #8]
    af34:	9301      	str	r3, [sp, #4]
    af36:	2300      	movs	r3, #0
    af38:	9300      	str	r3, [sp, #0]
    af3a:	4603      	mov	r3, r0
    af3c:	2213      	movs	r2, #19
    af3e:	2112      	movs	r1, #18
    af40:	4628      	mov	r0, r5
    af42:	f7ff ff57 	bl	adf4 <att_write_rsp>
}
    af46:	b005      	add	sp, #20
    af48:	bd30      	pop	{r4, r5, pc}
	...

0000af4c <att_read_group_rsp>:
{
    af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af50:	b086      	sub	sp, #24
    af52:	4604      	mov	r4, r0
    af54:	4688      	mov	r8, r1
    af56:	4616      	mov	r6, r2
    af58:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    af5a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    af5c:	2214      	movs	r2, #20
    af5e:	2100      	movs	r1, #0
    af60:	a801      	add	r0, sp, #4
    af62:	f021 f88b 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    af66:	2201      	movs	r2, #1
    af68:	2111      	movs	r1, #17
    af6a:	4628      	mov	r0, r5
    af6c:	f7ff fe54 	bl	ac18 <bt_att_create_pdu>
    af70:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    af72:	b328      	cbz	r0, afc0 <att_read_group_rsp+0x74>
	data.att = att;
    af74:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    af76:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    af7a:	2101      	movs	r1, #1
    af7c:	3008      	adds	r0, #8
    af7e:	f011 f9c5 	bl	1c30c <net_buf_simple_add>
    af82:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    af84:	2300      	movs	r3, #0
    af86:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    af88:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    af8a:	ab01      	add	r3, sp, #4
    af8c:	4a0f      	ldr	r2, [pc, #60]	; (afcc <att_read_group_rsp+0x80>)
    af8e:	4639      	mov	r1, r7
    af90:	4630      	mov	r0, r6
    af92:	f000 fe85 	bl	bca0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    af96:	9b04      	ldr	r3, [sp, #16]
    af98:	781c      	ldrb	r4, [r3, #0]
    af9a:	b13c      	cbz	r4, afac <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    af9c:	4b0c      	ldr	r3, [pc, #48]	; (afd0 <att_read_group_rsp+0x84>)
    af9e:	9a03      	ldr	r2, [sp, #12]
    afa0:	2104      	movs	r1, #4
    afa2:	4628      	mov	r0, r5
    afa4:	f7fe fb49 	bl	963a <bt_l2cap_send_cb>
	return 0;
    afa8:	2400      	movs	r4, #0
    afaa:	e00a      	b.n	afc2 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    afac:	9803      	ldr	r0, [sp, #12]
    afae:	f011 f961 	bl	1c274 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    afb2:	230a      	movs	r3, #10
    afb4:	4632      	mov	r2, r6
    afb6:	2110      	movs	r1, #16
    afb8:	4628      	mov	r0, r5
    afba:	f7ff fe8f 	bl	acdc <send_err_rsp>
		return 0;
    afbe:	e000      	b.n	afc2 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    afc0:	240e      	movs	r4, #14
}
    afc2:	4620      	mov	r0, r4
    afc4:	b006      	add	sp, #24
    afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afca:	bf00      	nop
    afcc:	0000a4d5 	.word	0x0000a4d5
    afd0:	0000a43b 	.word	0x0000a43b

0000afd4 <att_read_group_req>:
{
    afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afd8:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    afda:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    afdc:	898b      	ldrh	r3, [r1, #12]
    afde:	2b06      	cmp	r3, #6
    afe0:	d005      	beq.n	afee <att_read_group_req+0x1a>
    afe2:	2b14      	cmp	r3, #20
    afe4:	d003      	beq.n	afee <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    afe6:	2004      	movs	r0, #4
}
    afe8:	b008      	add	sp, #32
    afea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afee:	460c      	mov	r4, r1
    aff0:	4605      	mov	r5, r0
	req = (void *)buf->data;
    aff2:	4608      	mov	r0, r1
    aff4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    aff8:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    affa:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    affe:	2104      	movs	r1, #4
    b000:	f011 f9d1 	bl	1c3a6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    b004:	4621      	mov	r1, r4
    b006:	a801      	add	r0, sp, #4
    b008:	f7ff fb3c 	bl	a684 <uuid_create>
    b00c:	b908      	cbnz	r0, b012 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    b00e:	200e      	movs	r0, #14
    b010:	e7ea      	b.n	afe8 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    b012:	f10d 0216 	add.w	r2, sp, #22
    b016:	4641      	mov	r1, r8
    b018:	4638      	mov	r0, r7
    b01a:	f7ff f8c4 	bl	a1a6 <range_is_valid>
    b01e:	b1f0      	cbz	r0, b05e <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b020:	2300      	movs	r3, #0
    b022:	f88d 3018 	strb.w	r3, [sp, #24]
    b026:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b02a:	f8ad 301a 	strh.w	r3, [sp, #26]
    b02e:	a906      	add	r1, sp, #24
    b030:	a801      	add	r0, sp, #4
    b032:	f7fa fdee 	bl	5c12 <bt_uuid_cmp>
    b036:	b158      	cbz	r0, b050 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b038:	2300      	movs	r3, #0
    b03a:	f88d 301c 	strb.w	r3, [sp, #28]
    b03e:	f642 0301 	movw	r3, #10241	; 0x2801
    b042:	f8ad 301e 	strh.w	r3, [sp, #30]
    b046:	a907      	add	r1, sp, #28
    b048:	a801      	add	r0, sp, #4
    b04a:	f7fa fde2 	bl	5c12 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b04e:	b978      	cbnz	r0, b070 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    b050:	4643      	mov	r3, r8
    b052:	463a      	mov	r2, r7
    b054:	a901      	add	r1, sp, #4
    b056:	4628      	mov	r0, r5
    b058:	f7ff ff78 	bl	af4c <att_read_group_rsp>
    b05c:	e7c4      	b.n	afe8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    b05e:	2301      	movs	r3, #1
    b060:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    b064:	2110      	movs	r1, #16
    b066:	4630      	mov	r0, r6
    b068:	f7ff fe38 	bl	acdc <send_err_rsp>
		return 0;
    b06c:	2000      	movs	r0, #0
    b06e:	e7bb      	b.n	afe8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    b070:	2310      	movs	r3, #16
    b072:	463a      	mov	r2, r7
    b074:	4619      	mov	r1, r3
    b076:	4630      	mov	r0, r6
    b078:	f7ff fe30 	bl	acdc <send_err_rsp>
		return 0;
    b07c:	2000      	movs	r0, #0
    b07e:	e7b3      	b.n	afe8 <att_read_group_req+0x14>

0000b080 <att_read_mult_req>:
{
    b080:	b570      	push	{r4, r5, r6, lr}
    b082:	b086      	sub	sp, #24
    b084:	4605      	mov	r5, r0
    b086:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    b088:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    b08a:	2214      	movs	r2, #20
    b08c:	2100      	movs	r1, #0
    b08e:	a801      	add	r0, sp, #4
    b090:	f020 fff4 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b094:	2200      	movs	r2, #0
    b096:	210f      	movs	r1, #15
    b098:	4630      	mov	r0, r6
    b09a:	f7ff fdbd 	bl	ac18 <bt_att_create_pdu>
    b09e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    b0a0:	b348      	cbz	r0, b0f6 <att_read_mult_req+0x76>
	data.att = att;
    b0a2:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    b0a4:	89a3      	ldrh	r3, [r4, #12]
    b0a6:	2b01      	cmp	r3, #1
    b0a8:	d91c      	bls.n	b0e4 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    b0aa:	f104 0008 	add.w	r0, r4, #8
    b0ae:	f011 f98a 	bl	1c3c6 <net_buf_simple_pull_le16>
    b0b2:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b0b4:	2301      	movs	r3, #1
    b0b6:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b0ba:	ab01      	add	r3, sp, #4
    b0bc:	4a0f      	ldr	r2, [pc, #60]	; (b0fc <att_read_mult_req+0x7c>)
    b0be:	4601      	mov	r1, r0
    b0c0:	f000 fdee 	bl	bca0 <bt_gatt_foreach_attr>
		if (data.err) {
    b0c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d0eb      	beq.n	b0a4 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    b0cc:	9803      	ldr	r0, [sp, #12]
    b0ce:	f011 f8d1 	bl	1c274 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    b0d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b0d6:	462a      	mov	r2, r5
    b0d8:	210e      	movs	r1, #14
    b0da:	4630      	mov	r0, r6
    b0dc:	f7ff fdfe 	bl	acdc <send_err_rsp>
			return 0;
    b0e0:	2000      	movs	r0, #0
    b0e2:	e006      	b.n	b0f2 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b0e4:	4b06      	ldr	r3, [pc, #24]	; (b100 <att_read_mult_req+0x80>)
    b0e6:	9a03      	ldr	r2, [sp, #12]
    b0e8:	2104      	movs	r1, #4
    b0ea:	4630      	mov	r0, r6
    b0ec:	f7fe faa5 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b0f0:	2000      	movs	r0, #0
}
    b0f2:	b006      	add	sp, #24
    b0f4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    b0f6:	200e      	movs	r0, #14
    b0f8:	e7fb      	b.n	b0f2 <att_read_mult_req+0x72>
    b0fa:	bf00      	nop
    b0fc:	0000a305 	.word	0x0000a305
    b100:	0000a43b 	.word	0x0000a43b

0000b104 <att_read_rsp>:
{
    b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b108:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    b10a:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    b10c:	b923      	cbnz	r3, b118 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    b10e:	2401      	movs	r4, #1
}
    b110:	4620      	mov	r0, r4
    b112:	b006      	add	sp, #24
    b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b118:	461d      	mov	r5, r3
    b11a:	4616      	mov	r6, r2
    b11c:	4688      	mov	r8, r1
    b11e:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    b120:	2214      	movs	r2, #20
    b122:	2100      	movs	r1, #0
    b124:	a801      	add	r0, sp, #4
    b126:	f020 ffa9 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b12a:	2200      	movs	r2, #0
    b12c:	4631      	mov	r1, r6
    b12e:	4638      	mov	r0, r7
    b130:	f7ff fd72 	bl	ac18 <bt_att_create_pdu>
    b134:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    b136:	b318      	cbz	r0, b180 <att_read_rsp+0x7c>
	data.att = att;
    b138:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    b13a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b13e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b142:	2301      	movs	r3, #1
    b144:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b148:	ab01      	add	r3, sp, #4
    b14a:	4a0e      	ldr	r2, [pc, #56]	; (b184 <att_read_rsp+0x80>)
    b14c:	4629      	mov	r1, r5
    b14e:	4628      	mov	r0, r5
    b150:	f000 fda6 	bl	bca0 <bt_gatt_foreach_attr>
	if (data.err) {
    b154:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b158:	b934      	cbnz	r4, b168 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b15a:	4b0b      	ldr	r3, [pc, #44]	; (b188 <att_read_rsp+0x84>)
    b15c:	9a03      	ldr	r2, [sp, #12]
    b15e:	2104      	movs	r1, #4
    b160:	4638      	mov	r0, r7
    b162:	f7fe fa6a 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b166:	e7d3      	b.n	b110 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    b168:	9803      	ldr	r0, [sp, #12]
    b16a:	f011 f883 	bl	1c274 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    b16e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b172:	462a      	mov	r2, r5
    b174:	4641      	mov	r1, r8
    b176:	4638      	mov	r0, r7
    b178:	f7ff fdb0 	bl	acdc <send_err_rsp>
		return 0;
    b17c:	2400      	movs	r4, #0
    b17e:	e7c7      	b.n	b110 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    b180:	240e      	movs	r4, #14
    b182:	e7c5      	b.n	b110 <att_read_rsp+0xc>
    b184:	0000a305 	.word	0x0000a305
    b188:	0000a43b 	.word	0x0000a43b

0000b18c <att_read_blob_req>:
{
    b18c:	b500      	push	{lr}
    b18e:	b083      	sub	sp, #12
	req = (void *)buf->data;
    b190:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    b192:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    b194:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    b196:	9200      	str	r2, [sp, #0]
    b198:	220d      	movs	r2, #13
    b19a:	210c      	movs	r1, #12
    b19c:	f7ff ffb2 	bl	b104 <att_read_rsp>
}
    b1a0:	b003      	add	sp, #12
    b1a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000b1a6 <att_read_req>:
{
    b1a6:	b500      	push	{lr}
    b1a8:	b083      	sub	sp, #12
	req = (void *)buf->data;
    b1aa:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    b1ac:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    b1ae:	2200      	movs	r2, #0
    b1b0:	9200      	str	r2, [sp, #0]
    b1b2:	220b      	movs	r2, #11
    b1b4:	210a      	movs	r1, #10
    b1b6:	f7ff ffa5 	bl	b104 <att_read_rsp>
}
    b1ba:	b003      	add	sp, #12
    b1bc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b1c0 <att_read_type_rsp>:
{
    b1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1c4:	b086      	sub	sp, #24
    b1c6:	4604      	mov	r4, r0
    b1c8:	4688      	mov	r8, r1
    b1ca:	4616      	mov	r6, r2
    b1cc:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    b1ce:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    b1d0:	2218      	movs	r2, #24
    b1d2:	2100      	movs	r1, #0
    b1d4:	4668      	mov	r0, sp
    b1d6:	f020 ff51 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    b1da:	2201      	movs	r2, #1
    b1dc:	2109      	movs	r1, #9
    b1de:	4628      	mov	r0, r5
    b1e0:	f7ff fd1a 	bl	ac18 <bt_att_create_pdu>
    b1e4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b1e6:	b340      	cbz	r0, b23a <att_read_type_rsp+0x7a>
	data.att = att;
    b1e8:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    b1ea:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b1ee:	2101      	movs	r1, #1
    b1f0:	3008      	adds	r0, #8
    b1f2:	f011 f88b 	bl	1c30c <net_buf_simple_add>
    b1f6:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    b1f8:	2300      	movs	r3, #0
    b1fa:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b1fc:	230a      	movs	r3, #10
    b1fe:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b202:	466b      	mov	r3, sp
    b204:	4a0f      	ldr	r2, [pc, #60]	; (b244 <att_read_type_rsp+0x84>)
    b206:	4639      	mov	r1, r7
    b208:	4630      	mov	r0, r6
    b20a:	f000 fd49 	bl	bca0 <bt_gatt_foreach_attr>
	if (data.err) {
    b20e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b212:	b934      	cbnz	r4, b222 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b214:	4b0c      	ldr	r3, [pc, #48]	; (b248 <att_read_type_rsp+0x88>)
    b216:	9a02      	ldr	r2, [sp, #8]
    b218:	2104      	movs	r1, #4
    b21a:	4628      	mov	r0, r5
    b21c:	f7fe fa0d 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b220:	e00c      	b.n	b23c <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    b222:	9802      	ldr	r0, [sp, #8]
    b224:	f011 f826 	bl	1c274 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    b228:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b22c:	4632      	mov	r2, r6
    b22e:	2108      	movs	r1, #8
    b230:	4628      	mov	r0, r5
    b232:	f7ff fd53 	bl	acdc <send_err_rsp>
		return 0;
    b236:	2400      	movs	r4, #0
    b238:	e000      	b.n	b23c <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    b23a:	240e      	movs	r4, #14
}
    b23c:	4620      	mov	r0, r4
    b23e:	b006      	add	sp, #24
    b240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b244:	0000a5c3 	.word	0x0000a5c3
    b248:	0000a43b 	.word	0x0000a43b

0000b24c <att_read_type_req>:
{
    b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b250:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    b252:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    b254:	898b      	ldrh	r3, [r1, #12]
    b256:	2b06      	cmp	r3, #6
    b258:	d005      	beq.n	b266 <att_read_type_req+0x1a>
    b25a:	2b14      	cmp	r3, #20
    b25c:	d003      	beq.n	b266 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    b25e:	2004      	movs	r0, #4
}
    b260:	b006      	add	sp, #24
    b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b266:	460c      	mov	r4, r1
    b268:	4605      	mov	r5, r0
	req = (void *)buf->data;
    b26a:	4608      	mov	r0, r1
    b26c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    b270:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b272:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    b276:	2104      	movs	r1, #4
    b278:	f011 f895 	bl	1c3a6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    b27c:	4621      	mov	r1, r4
    b27e:	a801      	add	r0, sp, #4
    b280:	f7ff fa00 	bl	a684 <uuid_create>
    b284:	b908      	cbnz	r0, b28a <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    b286:	200e      	movs	r0, #14
    b288:	e7ea      	b.n	b260 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    b28a:	f10d 0216 	add.w	r2, sp, #22
    b28e:	4641      	mov	r1, r8
    b290:	4638      	mov	r0, r7
    b292:	f7fe ff88 	bl	a1a6 <range_is_valid>
    b296:	b130      	cbz	r0, b2a6 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    b298:	4643      	mov	r3, r8
    b29a:	463a      	mov	r2, r7
    b29c:	a901      	add	r1, sp, #4
    b29e:	4628      	mov	r0, r5
    b2a0:	f7ff ff8e 	bl	b1c0 <att_read_type_rsp>
    b2a4:	e7dc      	b.n	b260 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    b2a6:	2301      	movs	r3, #1
    b2a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    b2ac:	2108      	movs	r1, #8
    b2ae:	4630      	mov	r0, r6
    b2b0:	f7ff fd14 	bl	acdc <send_err_rsp>
		return 0;
    b2b4:	2000      	movs	r0, #0
    b2b6:	e7d3      	b.n	b260 <att_read_type_req+0x14>

0000b2b8 <att_find_type_rsp>:
{
    b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2bc:	b086      	sub	sp, #24
    b2be:	4604      	mov	r4, r0
    b2c0:	460e      	mov	r6, r1
    b2c2:	4617      	mov	r7, r2
    b2c4:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    b2c6:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    b2c8:	2214      	movs	r2, #20
    b2ca:	2100      	movs	r1, #0
    b2cc:	a801      	add	r0, sp, #4
    b2ce:	f020 fed5 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    b2d2:	2200      	movs	r2, #0
    b2d4:	2107      	movs	r1, #7
    b2d6:	4628      	mov	r0, r5
    b2d8:	f7ff fc9e 	bl	ac18 <bt_att_create_pdu>
    b2dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b2de:	b338      	cbz	r0, b330 <att_find_type_rsp+0x78>
	data.att = att;
    b2e0:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    b2e2:	2300      	movs	r3, #0
    b2e4:	9303      	str	r3, [sp, #12]
	data.value = value;
    b2e6:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    b2ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b2ee:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b2f2:	230a      	movs	r3, #10
    b2f4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b2f8:	ab01      	add	r3, sp, #4
    b2fa:	4a10      	ldr	r2, [pc, #64]	; (b33c <att_find_type_rsp+0x84>)
    b2fc:	4639      	mov	r1, r7
    b2fe:	4630      	mov	r0, r6
    b300:	f000 fcce 	bl	bca0 <bt_gatt_foreach_attr>
	if (data.err) {
    b304:	f89d 4015 	ldrb.w	r4, [sp, #21]
    b308:	b934      	cbnz	r4, b318 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b30a:	4b0d      	ldr	r3, [pc, #52]	; (b340 <att_find_type_rsp+0x88>)
    b30c:	9a02      	ldr	r2, [sp, #8]
    b30e:	2104      	movs	r1, #4
    b310:	4628      	mov	r0, r5
    b312:	f7fe f992 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b316:	e00c      	b.n	b332 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    b318:	9802      	ldr	r0, [sp, #8]
    b31a:	f010 ffab 	bl	1c274 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    b31e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b322:	4632      	mov	r2, r6
    b324:	2106      	movs	r1, #6
    b326:	4628      	mov	r0, r5
    b328:	f7ff fcd8 	bl	acdc <send_err_rsp>
		return 0;
    b32c:	2400      	movs	r4, #0
    b32e:	e000      	b.n	b332 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    b330:	240e      	movs	r4, #14
}
    b332:	4620      	mov	r0, r4
    b334:	b006      	add	sp, #24
    b336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33a:	bf00      	nop
    b33c:	0000a76b 	.word	0x0000a76b
    b340:	0000a43b 	.word	0x0000a43b

0000b344 <att_find_type_req>:
{
    b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b348:	b084      	sub	sp, #16
    b34a:	4605      	mov	r5, r0
    b34c:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    b34e:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    b352:	4608      	mov	r0, r1
    b354:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    b358:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b35a:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    b35c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    b360:	2106      	movs	r1, #6
    b362:	f011 f820 	bl	1c3a6 <net_buf_simple_pull>
    b366:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    b368:	f10d 020e 	add.w	r2, sp, #14
    b36c:	4631      	mov	r1, r6
    b36e:	4620      	mov	r0, r4
    b370:	f7fe ff19 	bl	a1a6 <range_is_valid>
    b374:	b160      	cbz	r0, b390 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    b376:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    b37a:	d012      	beq.n	b3a2 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    b37c:	230a      	movs	r3, #10
    b37e:	4622      	mov	r2, r4
    b380:	2106      	movs	r1, #6
    b382:	4648      	mov	r0, r9
    b384:	f7ff fcaa 	bl	acdc <send_err_rsp>
		return 0;
    b388:	2000      	movs	r0, #0
}
    b38a:	b004      	add	sp, #16
    b38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    b390:	2301      	movs	r3, #1
    b392:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b396:	2106      	movs	r1, #6
    b398:	4648      	mov	r0, r9
    b39a:	f7ff fc9f 	bl	acdc <send_err_rsp>
		return 0;
    b39e:	2000      	movs	r0, #0
    b3a0:	e7f3      	b.n	b38a <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    b3a2:	7b3b      	ldrb	r3, [r7, #12]
    b3a4:	9300      	str	r3, [sp, #0]
    b3a6:	4653      	mov	r3, sl
    b3a8:	4632      	mov	r2, r6
    b3aa:	4621      	mov	r1, r4
    b3ac:	4628      	mov	r0, r5
    b3ae:	f7ff ff83 	bl	b2b8 <att_find_type_rsp>
    b3b2:	e7ea      	b.n	b38a <att_find_type_req+0x46>

0000b3b4 <att_find_info_rsp>:
{
    b3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3b6:	b085      	sub	sp, #20
    b3b8:	4605      	mov	r5, r0
    b3ba:	460e      	mov	r6, r1
    b3bc:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    b3be:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    b3c0:	2210      	movs	r2, #16
    b3c2:	2100      	movs	r1, #0
    b3c4:	4668      	mov	r0, sp
    b3c6:	f020 fe59 	bl	2c07c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    b3ca:	2200      	movs	r2, #0
    b3cc:	2105      	movs	r1, #5
    b3ce:	4620      	mov	r0, r4
    b3d0:	f7ff fc22 	bl	ac18 <bt_att_create_pdu>
    b3d4:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    b3d6:	b1e8      	cbz	r0, b414 <att_find_info_rsp+0x60>
	data.att = att;
    b3d8:	ab04      	add	r3, sp, #16
    b3da:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b3de:	4a0e      	ldr	r2, [pc, #56]	; (b418 <att_find_info_rsp+0x64>)
    b3e0:	4639      	mov	r1, r7
    b3e2:	4630      	mov	r0, r6
    b3e4:	f000 fc5c 	bl	bca0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    b3e8:	9b02      	ldr	r3, [sp, #8]
    b3ea:	b143      	cbz	r3, b3fe <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    b3ec:	4b0b      	ldr	r3, [pc, #44]	; (b41c <att_find_info_rsp+0x68>)
    b3ee:	9a01      	ldr	r2, [sp, #4]
    b3f0:	2104      	movs	r1, #4
    b3f2:	4620      	mov	r0, r4
    b3f4:	f7fe f921 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b3f8:	2000      	movs	r0, #0
}
    b3fa:	b005      	add	sp, #20
    b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    b3fe:	9801      	ldr	r0, [sp, #4]
    b400:	f010 ff38 	bl	1c274 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    b404:	230a      	movs	r3, #10
    b406:	4632      	mov	r2, r6
    b408:	2104      	movs	r1, #4
    b40a:	4620      	mov	r0, r4
    b40c:	f7ff fc66 	bl	acdc <send_err_rsp>
		return 0;
    b410:	2000      	movs	r0, #0
    b412:	e7f2      	b.n	b3fa <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    b414:	200e      	movs	r0, #14
    b416:	e7f0      	b.n	b3fa <att_find_info_rsp+0x46>
    b418:	0000a6bb 	.word	0x0000a6bb
    b41c:	0000a43b 	.word	0x0000a43b

0000b420 <att_find_info_req>:
{
    b420:	b5f0      	push	{r4, r5, r6, r7, lr}
    b422:	b083      	sub	sp, #12
    b424:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    b426:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    b428:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    b42a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b42c:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    b42e:	f10d 0206 	add.w	r2, sp, #6
    b432:	4631      	mov	r1, r6
    b434:	4628      	mov	r0, r5
    b436:	f7fe feb6 	bl	a1a6 <range_is_valid>
    b43a:	b130      	cbz	r0, b44a <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    b43c:	4632      	mov	r2, r6
    b43e:	4629      	mov	r1, r5
    b440:	4620      	mov	r0, r4
    b442:	f7ff ffb7 	bl	b3b4 <att_find_info_rsp>
}
    b446:	b003      	add	sp, #12
    b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    b44a:	2301      	movs	r3, #1
    b44c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b450:	2104      	movs	r1, #4
    b452:	4638      	mov	r0, r7
    b454:	f7ff fc42 	bl	acdc <send_err_rsp>
		return 0;
    b458:	2000      	movs	r0, #0
    b45a:	e7f4      	b.n	b446 <att_find_info_req+0x26>

0000b45c <bt_att_init>:

void bt_att_init(void)
{
    b45c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    b45e:	4803      	ldr	r0, [pc, #12]	; (b46c <bt_att_init+0x10>)
    b460:	f7fd ff44 	bl	92ec <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    b464:	f000 fb3c 	bl	bae0 <bt_gatt_init>
    b468:	bd08      	pop	{r3, pc}
    b46a:	bf00      	nop
    b46c:	2000ba78 	.word	0x2000ba78

0000b470 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    b472:	2800      	cmp	r0, #0
    b474:	d043      	beq.n	b4fe <bt_att_send+0x8e>
    b476:	4606      	mov	r6, r0
    b478:	2900      	cmp	r1, #0
    b47a:	d043      	beq.n	b504 <bt_att_send+0x94>
    b47c:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    b47e:	f7fe ff7b 	bl	a378 <att_chan_get>
	if (!att) {
    b482:	4605      	mov	r5, r0
    b484:	2800      	cmp	r0, #0
    b486:	d040      	beq.n	b50a <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    b488:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    b48c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b490:	4638      	mov	r0, r7
    b492:	f01f fb53 	bl	2ab3c <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    b496:	682b      	ldr	r3, [r5, #0]
    b498:	7b1b      	ldrb	r3, [r3, #12]
    b49a:	2b03      	cmp	r3, #3
    b49c:	d011      	beq.n	b4c2 <bt_att_send+0x52>
    b49e:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    b4a0:	b1e3      	cbz	r3, b4dc <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    b4a2:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b4a4:	781b      	ldrb	r3, [r3, #0]
    b4a6:	2bd2      	cmp	r3, #210	; 0xd2
    b4a8:	d01e      	beq.n	b4e8 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    b4aa:	4620      	mov	r0, r4
    b4ac:	f7fe ff0c 	bl	a2c8 <att_cb>
    b4b0:	4603      	mov	r3, r0
    b4b2:	4622      	mov	r2, r4
    b4b4:	2104      	movs	r1, #4
    b4b6:	4630      	mov	r0, r6
    b4b8:	f7fe f8bf 	bl	963a <bt_l2cap_send_cb>

	return 0;
    b4bc:	2500      	movs	r5, #0
}
    b4be:	4628      	mov	r0, r5
    b4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4c2:	f3bf 8f5b 	dmb	ish
    b4c6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    b4ca:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    b4ce:	f013 0f04 	tst.w	r3, #4
    b4d2:	d101      	bne.n	b4d8 <bt_att_send+0x68>
    b4d4:	2301      	movs	r3, #1
    b4d6:	e7e3      	b.n	b4a0 <bt_att_send+0x30>
    b4d8:	2300      	movs	r3, #0
    b4da:	e7e1      	b.n	b4a0 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    b4dc:	4638      	mov	r0, r7
    b4de:	f01f fb1a 	bl	2ab16 <_impl_k_sem_give>
		return -ENOTCONN;
    b4e2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    b4e6:	e7ea      	b.n	b4be <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    b4e8:	4621      	mov	r1, r4
    b4ea:	4630      	mov	r0, r6
    b4ec:	f003 f81a 	bl	e524 <bt_smp_sign>
		if (err) {
    b4f0:	4605      	mov	r5, r0
    b4f2:	2800      	cmp	r0, #0
    b4f4:	d0d9      	beq.n	b4aa <bt_att_send+0x3a>
    b4f6:	4638      	mov	r0, r7
    b4f8:	f01f fb0d 	bl	2ab16 <_impl_k_sem_give>
			return err;
    b4fc:	e7df      	b.n	b4be <bt_att_send+0x4e>
		return -EINVAL;
    b4fe:	f06f 0515 	mvn.w	r5, #21
    b502:	e7dc      	b.n	b4be <bt_att_send+0x4e>
    b504:	f06f 0515 	mvn.w	r5, #21
    b508:	e7d9      	b.n	b4be <bt_att_send+0x4e>
		return -ENOTCONN;
    b50a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    b50e:	e7d6      	b.n	b4be <bt_att_send+0x4e>

0000b510 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    b510:	b1e0      	cbz	r0, b54c <bt_att_req_send+0x3c>
    b512:	b1f1      	cbz	r1, b552 <bt_att_req_send+0x42>
{
    b514:	b510      	push	{r4, lr}
    b516:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    b518:	f7fe ff2e 	bl	a378 <att_chan_get>
	if (!att) {
    b51c:	b1e0      	cbz	r0, b558 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    b51e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b522:	b17a      	cbz	r2, b544 <bt_att_req_send+0x34>
	node->next = NULL;
    b524:	2200      	movs	r2, #0
    b526:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    b528:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    b52c:	b122      	cbz	r2, b538 <bt_att_req_send+0x28>
		list->tail->next = node;
    b52e:	6014      	str	r4, [r2, #0]
		list->tail = node;
    b530:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    b534:	2000      	movs	r0, #0
    b536:	bd10      	pop	{r4, pc}
		list->tail = node;
    b538:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    b53c:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    b540:	2000      	movs	r0, #0
    b542:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    b544:	4621      	mov	r1, r4
    b546:	f7ff f9ad 	bl	a8a4 <att_send_req>
    b54a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b54c:	f06f 0015 	mvn.w	r0, #21
    b550:	4770      	bx	lr
    b552:	f06f 0015 	mvn.w	r0, #21
    b556:	4770      	bx	lr
		return -ENOTCONN;
    b558:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    b55c:	bd10      	pop	{r4, pc}

0000b55e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    b55e:	4770      	bx	lr

0000b560 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    b560:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    b562:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    b564:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    b566:	4a1c      	ldr	r2, [pc, #112]	; (b5d8 <gatt_register+0x78>)
    b568:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    b56a:	b172      	cbz	r2, b58a <gatt_register+0x2a>
	return list->tail;
    b56c:	4a1a      	ldr	r2, [pc, #104]	; (b5d8 <gatt_register+0x78>)
    b56e:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    b570:	b14a      	cbz	r2, b586 <gatt_register+0x26>
    b572:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    b574:	6815      	ldr	r5, [r2, #0]
    b576:	8892      	ldrh	r2, [r2, #4]
    b578:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b57c:	0091      	lsls	r1, r2, #2
    b57e:	3914      	subs	r1, #20
    b580:	4429      	add	r1, r5
    b582:	8a0a      	ldrh	r2, [r1, #16]
    b584:	e009      	b.n	b59a <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    b586:	2200      	movs	r2, #0
    b588:	e7f4      	b.n	b574 <gatt_register+0x14>
		handle = 0;
    b58a:	2200      	movs	r2, #0
    b58c:	e005      	b.n	b59a <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    b58e:	428a      	cmp	r2, r1
    b590:	d21e      	bcs.n	b5d0 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    b592:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    b594:	3414      	adds	r4, #20
    b596:	3b01      	subs	r3, #1
    b598:	b29b      	uxth	r3, r3
    b59a:	b13c      	cbz	r4, b5ac <gatt_register+0x4c>
    b59c:	b133      	cbz	r3, b5ac <gatt_register+0x4c>
		if (!attrs->handle) {
    b59e:	8a21      	ldrh	r1, [r4, #16]
    b5a0:	2900      	cmp	r1, #0
    b5a2:	d1f4      	bne.n	b58e <gatt_register+0x2e>
			attrs->handle = ++handle;
    b5a4:	3201      	adds	r2, #1
    b5a6:	b292      	uxth	r2, r2
    b5a8:	8222      	strh	r2, [r4, #16]
    b5aa:	e7f3      	b.n	b594 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    b5ac:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    b5b0:	2200      	movs	r2, #0
    b5b2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    b5b4:	4a08      	ldr	r2, [pc, #32]	; (b5d8 <gatt_register+0x78>)
    b5b6:	6852      	ldr	r2, [r2, #4]
    b5b8:	b12a      	cbz	r2, b5c6 <gatt_register+0x66>
		list->tail->next = node;
    b5ba:	6013      	str	r3, [r2, #0]
		list->tail = node;
    b5bc:	4a06      	ldr	r2, [pc, #24]	; (b5d8 <gatt_register+0x78>)
    b5be:	6053      	str	r3, [r2, #4]

	return 0;
    b5c0:	2000      	movs	r0, #0
}
    b5c2:	bc30      	pop	{r4, r5}
    b5c4:	4770      	bx	lr
		list->tail = node;
    b5c6:	4a04      	ldr	r2, [pc, #16]	; (b5d8 <gatt_register+0x78>)
    b5c8:	6053      	str	r3, [r2, #4]
		list->head = node;
    b5ca:	6013      	str	r3, [r2, #0]
	return 0;
    b5cc:	2000      	movs	r0, #0
    b5ce:	e7f8      	b.n	b5c2 <gatt_register+0x62>
			return -EINVAL;
    b5d0:	f06f 0015 	mvn.w	r0, #21
    b5d4:	e7f5      	b.n	b5c2 <gatt_register+0x62>
    b5d6:	bf00      	nop
    b5d8:	200007cc 	.word	0x200007cc

0000b5dc <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    b5dc:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    b5de:	8804      	ldrh	r4, [r0, #0]
    b5e0:	4294      	cmp	r4, r2
    b5e2:	d802      	bhi.n	b5ea <update_range+0xe>
    b5e4:	880d      	ldrh	r5, [r1, #0]
    b5e6:	429d      	cmp	r5, r3
    b5e8:	d209      	bcs.n	b5fe <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    b5ea:	4294      	cmp	r4, r2
    b5ec:	d900      	bls.n	b5f0 <update_range+0x14>
		*start = new_start;
    b5ee:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    b5f0:	880a      	ldrh	r2, [r1, #0]
    b5f2:	4293      	cmp	r3, r2
    b5f4:	d905      	bls.n	b602 <update_range+0x26>
		*end = new_end;
    b5f6:	800b      	strh	r3, [r1, #0]
	}

	return true;
    b5f8:	2001      	movs	r0, #1
}
    b5fa:	bc30      	pop	{r4, r5}
    b5fc:	4770      	bx	lr
		return false;
    b5fe:	2000      	movs	r0, #0
    b600:	e7fb      	b.n	b5fa <update_range+0x1e>
	return true;
    b602:	2001      	movs	r0, #1
    b604:	e7f9      	b.n	b5fa <update_range+0x1e>

0000b606 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    b606:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    b608:	2000      	movs	r0, #0
    b60a:	4770      	bx	lr

0000b60c <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    b60c:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    b60e:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    b610:	4623      	mov	r3, r4
    b612:	e000      	b.n	b616 <gatt_ccc_changed+0xa>
    b614:	3301      	adds	r3, #1
    b616:	684a      	ldr	r2, [r1, #4]
    b618:	429a      	cmp	r2, r3
    b61a:	d907      	bls.n	b62c <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    b61c:	680a      	ldr	r2, [r1, #0]
    b61e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    b622:	8912      	ldrh	r2, [r2, #8]
    b624:	4294      	cmp	r4, r2
    b626:	d2f5      	bcs.n	b614 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    b628:	4614      	mov	r4, r2
    b62a:	e7f3      	b.n	b614 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    b62c:	890b      	ldrh	r3, [r1, #8]
    b62e:	429c      	cmp	r4, r3
    b630:	d003      	beq.n	b63a <gatt_ccc_changed+0x2e>
		ccc->value = value;
    b632:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    b634:	68cb      	ldr	r3, [r1, #12]
    b636:	4621      	mov	r1, r4
    b638:	4798      	blx	r3
    b63a:	bd10      	pop	{r4, pc}

0000b63c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    b63c:	b510      	push	{r4, lr}
    b63e:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    b640:	69dc      	ldr	r4, [r3, #28]
    b642:	460a      	mov	r2, r1
    b644:	6999      	ldr	r1, [r3, #24]
    b646:	47a0      	blx	r4
    b648:	bd10      	pop	{r4, pc}
	...

0000b64c <sc_indicate_rsp>:
{
    b64c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b64e:	4b0f      	ldr	r3, [pc, #60]	; (b68c <sc_indicate_rsp+0x40>)
    b650:	f103 0254 	add.w	r2, r3, #84	; 0x54
    b654:	f3bf 8f5b 	dmb	ish
    b658:	e852 1f00 	ldrex	r1, [r2]
    b65c:	f021 0102 	bic.w	r1, r1, #2
    b660:	e842 1000 	strex	r0, r1, [r2]
    b664:	2800      	cmp	r0, #0
    b666:	d1f7      	bne.n	b658 <sc_indicate_rsp+0xc>
    b668:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b66c:	f3bf 8f5b 	dmb	ish
    b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b672:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    b676:	f013 0f01 	tst.w	r3, #1
    b67a:	d100      	bne.n	b67e <sc_indicate_rsp+0x32>
    b67c:	bd08      	pop	{r3, pc}
    b67e:	2200      	movs	r2, #0
    b680:	4903      	ldr	r1, [pc, #12]	; (b690 <sc_indicate_rsp+0x44>)
    b682:	4804      	ldr	r0, [pc, #16]	; (b694 <sc_indicate_rsp+0x48>)
    b684:	f020 f890 	bl	2b7a8 <k_delayed_work_submit_to_queue>
}
    b688:	e7f8      	b.n	b67c <sc_indicate_rsp+0x30>
    b68a:	bf00      	nop
    b68c:	200007d4 	.word	0x200007d4
    b690:	20000800 	.word	0x20000800
    b694:	20002c00 	.word	0x20002c00

0000b698 <sc_indicate>:
{
    b698:	b510      	push	{r4, lr}
    b69a:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    b69c:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b69e:	f3bf 8f5b 	dmb	ish
    b6a2:	e850 3f00 	ldrex	r3, [r0]
    b6a6:	f043 0e01 	orr.w	lr, r3, #1
    b6aa:	e840 ec00 	strex	ip, lr, [r0]
    b6ae:	f1bc 0f00 	cmp.w	ip, #0
    b6b2:	d1f6      	bne.n	b6a2 <sc_indicate+0xa>
    b6b4:	f3bf 8f5b 	dmb	ish
    b6b8:	f013 0f01 	tst.w	r3, #1
    b6bc:	d10a      	bne.n	b6d4 <sc_indicate+0x3c>
		sc->start = start;
    b6be:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    b6c0:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b6c2:	f3bf 8f5b 	dmb	ish
    b6c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b6c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    b6cc:	f013 0f02 	tst.w	r3, #2
    b6d0:	d00b      	beq.n	b6ea <sc_indicate+0x52>
    b6d2:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    b6d4:	4613      	mov	r3, r2
    b6d6:	460a      	mov	r2, r1
    b6d8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    b6dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b6e0:	f7ff ff7c 	bl	b5dc <update_range>
    b6e4:	2800      	cmp	r0, #0
    b6e6:	d1ec      	bne.n	b6c2 <sc_indicate+0x2a>
    b6e8:	e7f3      	b.n	b6d2 <sc_indicate+0x3a>
    b6ea:	220a      	movs	r2, #10
    b6ec:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    b6f0:	4801      	ldr	r0, [pc, #4]	; (b6f8 <sc_indicate+0x60>)
    b6f2:	f020 f859 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    b6f6:	e7ec      	b.n	b6d2 <sc_indicate+0x3a>
    b6f8:	20002c00 	.word	0x20002c00

0000b6fc <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    b6fc:	b510      	push	{r4, lr}
    b6fe:	b082      	sub	sp, #8
    b700:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    b702:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    b704:	6a09      	ldr	r1, [r1, #32]
    b706:	a801      	add	r0, sp, #4
    b708:	f7f4 fdda 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    b70c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    b710:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    b714:	89a1      	ldrh	r1, [r4, #12]
    b716:	b909      	cbnz	r1, b71c <sc_save+0x20>
    b718:	89e1      	ldrh	r1, [r4, #14]
    b71a:	b139      	cbz	r1, b72c <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    b71c:	f104 010e 	add.w	r1, r4, #14
    b720:	f104 000c 	add.w	r0, r4, #12
    b724:	f7ff ff5a 	bl	b5dc <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    b728:	b002      	add	sp, #8
    b72a:	bd10      	pop	{r4, pc}
		*stored = data;
    b72c:	9801      	ldr	r0, [sp, #4]
    b72e:	60e0      	str	r0, [r4, #12]
		goto done;
    b730:	e7fa      	b.n	b728 <sc_save+0x2c>

0000b732 <bt_gatt_attr_write_ccc>:
{
    b732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b736:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    b73a:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    b73c:	2c02      	cmp	r4, #2
    b73e:	d84f      	bhi.n	b7e0 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    b740:	4698      	mov	r8, r3
    b742:	441c      	add	r4, r3
    b744:	2c02      	cmp	r4, #2
    b746:	d84e      	bhi.n	b7e6 <bt_gatt_attr_write_ccc+0xb4>
    b748:	460f      	mov	r7, r1
    b74a:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    b74c:	7853      	ldrb	r3, [r2, #1]
    b74e:	7816      	ldrb	r6, [r2, #0]
    b750:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    b754:	2400      	movs	r4, #0
    b756:	686b      	ldr	r3, [r5, #4]
    b758:	429c      	cmp	r4, r3
    b75a:	d209      	bcs.n	b770 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    b75c:	6829      	ldr	r1, [r5, #0]
    b75e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    b762:	3101      	adds	r1, #1
    b764:	4648      	mov	r0, r9
    b766:	f7fc fffd 	bl	8764 <bt_conn_addr_le_cmp>
    b76a:	b108      	cbz	r0, b770 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    b76c:	3401      	adds	r4, #1
    b76e:	e7f2      	b.n	b756 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    b770:	686b      	ldr	r3, [r5, #4]
    b772:	429c      	cmp	r4, r3
    b774:	d026      	beq.n	b7c4 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    b776:	b91e      	cbnz	r6, b780 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    b778:	682a      	ldr	r2, [r5, #0]
    b77a:	0123      	lsls	r3, r4, #4
    b77c:	2100      	movs	r1, #0
    b77e:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    b780:	682b      	ldr	r3, [r5, #0]
    b782:	0124      	lsls	r4, r4, #4
    b784:	4423      	add	r3, r4
    b786:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    b788:	682b      	ldr	r3, [r5, #0]
    b78a:	441c      	add	r4, r3
    b78c:	8922      	ldrh	r2, [r4, #8]
    b78e:	892b      	ldrh	r3, [r5, #8]
    b790:	429a      	cmp	r2, r3
    b792:	d003      	beq.n	b79c <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    b794:	4629      	mov	r1, r5
    b796:	4638      	mov	r0, r7
    b798:	f7ff ff38 	bl	b60c <gatt_ccc_changed>
}
    b79c:	4640      	mov	r0, r8
    b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    b7a2:	2207      	movs	r2, #7
    b7a4:	f109 0148 	add.w	r1, r9, #72	; 0x48
    b7a8:	3001      	adds	r0, #1
    b7aa:	f7f4 fd89 	bl	2c0 <memcpy>
			if (value) {
    b7ae:	b11e      	cbz	r6, b7b8 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    b7b0:	682b      	ldr	r3, [r5, #0]
    b7b2:	2201      	movs	r2, #1
    b7b4:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    b7b8:	686b      	ldr	r3, [r5, #4]
    b7ba:	429c      	cmp	r4, r3
    b7bc:	d1e0      	bne.n	b780 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    b7be:	f06f 0810 	mvn.w	r8, #16
    b7c2:	e7eb      	b.n	b79c <bt_gatt_attr_write_ccc+0x6a>
    b7c4:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    b7c6:	429c      	cmp	r4, r3
    b7c8:	d2f6      	bcs.n	b7b8 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    b7ca:	682a      	ldr	r2, [r5, #0]
    b7cc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    b7d0:	eb02 000a 	add.w	r0, r2, sl
    b7d4:	f812 200a 	ldrb.w	r2, [r2, sl]
    b7d8:	2a00      	cmp	r2, #0
    b7da:	d0e2      	beq.n	b7a2 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    b7dc:	3401      	adds	r4, #1
    b7de:	e7f2      	b.n	b7c6 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b7e0:	f06f 0806 	mvn.w	r8, #6
    b7e4:	e7da      	b.n	b79c <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    b7e6:	f06f 080c 	mvn.w	r8, #12
    b7ea:	e7d7      	b.n	b79c <bt_gatt_attr_write_ccc+0x6a>

0000b7ec <gatt_send>:
{
    b7ec:	b538      	push	{r3, r4, r5, lr}
    b7ee:	460d      	mov	r5, r1
	if (params) {
    b7f0:	b153      	cbz	r3, b808 <gatt_send+0x1c>
    b7f2:	4619      	mov	r1, r3
		req->buf = buf;
    b7f4:	611d      	str	r5, [r3, #16]
		req->func = func;
    b7f6:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    b7f8:	9b04      	ldr	r3, [sp, #16]
    b7fa:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    b7fc:	f7ff fe88 	bl	b510 <bt_att_req_send>
    b800:	4604      	mov	r4, r0
	if (err) {
    b802:	b92c      	cbnz	r4, b810 <gatt_send+0x24>
}
    b804:	4620      	mov	r0, r4
    b806:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    b808:	f7ff fe32 	bl	b470 <bt_att_send>
    b80c:	4604      	mov	r4, r0
    b80e:	e7f8      	b.n	b802 <gatt_send+0x16>
		net_buf_unref(buf);
    b810:	4628      	mov	r0, r5
    b812:	f010 fd2f 	bl	1c274 <net_buf_unref>
	return err;
    b816:	e7f5      	b.n	b804 <gatt_send+0x18>

0000b818 <gatt_indicate>:
{
    b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b81c:	b082      	sub	sp, #8
    b81e:	4680      	mov	r8, r0
    b820:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    b822:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b824:	3202      	adds	r2, #2
    b826:	211d      	movs	r1, #29
    b828:	f7ff f9f6 	bl	ac18 <bt_att_create_pdu>
	if (!buf) {
    b82c:	b1f8      	cbz	r0, b86e <gatt_indicate+0x56>
    b82e:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    b830:	f100 0708 	add.w	r7, r0, #8
    b834:	2102      	movs	r1, #2
    b836:	4638      	mov	r0, r7
    b838:	f010 fd68 	bl	1c30c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    b83c:	69a3      	ldr	r3, [r4, #24]
    b83e:	8a1b      	ldrh	r3, [r3, #16]
    b840:	4605      	mov	r5, r0
    b842:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    b846:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    b848:	4638      	mov	r0, r7
    b84a:	f010 fd5f 	bl	1c30c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    b84e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    b850:	6a21      	ldr	r1, [r4, #32]
    b852:	4628      	mov	r0, r5
    b854:	f7f4 fd34 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    b858:	2300      	movs	r3, #0
    b85a:	9300      	str	r3, [sp, #0]
    b85c:	4623      	mov	r3, r4
    b85e:	4a05      	ldr	r2, [pc, #20]	; (b874 <gatt_indicate+0x5c>)
    b860:	4631      	mov	r1, r6
    b862:	4640      	mov	r0, r8
    b864:	f7ff ffc2 	bl	b7ec <gatt_send>
}
    b868:	b002      	add	sp, #8
    b86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    b86e:	f06f 000b 	mvn.w	r0, #11
    b872:	e7f9      	b.n	b868 <gatt_indicate+0x50>
    b874:	0000b63d 	.word	0x0000b63d

0000b878 <gatt_notify>:
{
    b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b87c:	4680      	mov	r8, r0
    b87e:	468a      	mov	sl, r1
    b880:	4691      	mov	r9, r2
    b882:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    b884:	1c9a      	adds	r2, r3, #2
    b886:	211b      	movs	r1, #27
    b888:	f7ff f9c6 	bl	ac18 <bt_att_create_pdu>
	if (!buf) {
    b88c:	b1d8      	cbz	r0, b8c6 <gatt_notify+0x4e>
    b88e:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    b890:	f100 0708 	add.w	r7, r0, #8
    b894:	2102      	movs	r1, #2
    b896:	4638      	mov	r0, r7
    b898:	f010 fd38 	bl	1c30c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    b89c:	4605      	mov	r5, r0
    b89e:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    b8a2:	4621      	mov	r1, r4
    b8a4:	4638      	mov	r0, r7
    b8a6:	f010 fd31 	bl	1c30c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    b8aa:	4622      	mov	r2, r4
    b8ac:	4649      	mov	r1, r9
    b8ae:	4628      	mov	r0, r5
    b8b0:	f7f4 fd06 	bl	2c0 <memcpy>
    b8b4:	2300      	movs	r3, #0
    b8b6:	4632      	mov	r2, r6
    b8b8:	2104      	movs	r1, #4
    b8ba:	4640      	mov	r0, r8
    b8bc:	f7fd febd 	bl	963a <bt_l2cap_send_cb>
	return 0;
    b8c0:	2000      	movs	r0, #0
    b8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    b8c6:	f06f 000b 	mvn.w	r0, #11
}
    b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000b8d0 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    b8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8d4:	b082      	sub	sp, #8
    b8d6:	4604      	mov	r4, r0
    b8d8:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    b8da:	2300      	movs	r3, #0
    b8dc:	f88d 3000 	strb.w	r3, [sp]
    b8e0:	f642 1302 	movw	r3, #10498	; 0x2902
    b8e4:	f8ad 3002 	strh.w	r3, [sp, #2]
    b8e8:	4669      	mov	r1, sp
    b8ea:	6800      	ldr	r0, [r0, #0]
    b8ec:	f7fa f991 	bl	5c12 <bt_uuid_cmp>
    b8f0:	b938      	cbnz	r0, b902 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b8f2:	68a2      	ldr	r2, [r4, #8]
    b8f4:	4b29      	ldr	r3, [pc, #164]	; (b99c <notify_cb+0xcc>)
    b8f6:	429a      	cmp	r2, r3
    b8f8:	d012      	beq.n	b920 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    b8fa:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    b8fc:	b002      	add	sp, #8
    b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    b902:	6820      	ldr	r0, [r4, #0]
    b904:	2300      	movs	r3, #0
    b906:	f88d 3004 	strb.w	r3, [sp, #4]
    b90a:	f642 0303 	movw	r3, #10243	; 0x2803
    b90e:	f8ad 3006 	strh.w	r3, [sp, #6]
    b912:	a901      	add	r1, sp, #4
    b914:	f7fa f97d 	bl	5c12 <bt_uuid_cmp>
    b918:	2800      	cmp	r0, #0
    b91a:	d0ef      	beq.n	b8fc <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    b91c:	2001      	movs	r0, #1
    b91e:	e7ed      	b.n	b8fc <notify_cb+0x2c>
	ccc = attr->user_data;
    b920:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    b922:	2400      	movs	r4, #0
    b924:	e01a      	b.n	b95c <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    b926:	6828      	ldr	r0, [r5, #0]
    b928:	4b1d      	ldr	r3, [pc, #116]	; (b9a0 <notify_cb+0xd0>)
    b92a:	4298      	cmp	r0, r3
    b92c:	d115      	bne.n	b95a <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    b92e:	6979      	ldr	r1, [r7, #20]
    b930:	4430      	add	r0, r6
    b932:	f7ff fee3 	bl	b6fc <sc_save>
			continue;
    b936:	e010      	b.n	b95a <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    b938:	88bb      	ldrh	r3, [r7, #4]
    b93a:	2b02      	cmp	r3, #2
    b93c:	d024      	beq.n	b988 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    b93e:	68b9      	ldr	r1, [r7, #8]
    b940:	8a3b      	ldrh	r3, [r7, #16]
    b942:	68fa      	ldr	r2, [r7, #12]
    b944:	8a09      	ldrh	r1, [r1, #16]
    b946:	f7ff ff97 	bl	b878 <gatt_notify>
    b94a:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    b94c:	4640      	mov	r0, r8
    b94e:	f7fc ffb9 	bl	88c4 <bt_conn_unref>
		if (err < 0) {
    b952:	2e00      	cmp	r6, #0
    b954:	db1f      	blt.n	b996 <notify_cb+0xc6>
		data->err = 0;
    b956:	2300      	movs	r3, #0
    b958:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    b95a:	3401      	adds	r4, #1
    b95c:	686b      	ldr	r3, [r5, #4]
    b95e:	429c      	cmp	r4, r3
    b960:	d217      	bcs.n	b992 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    b962:	6828      	ldr	r0, [r5, #0]
    b964:	0126      	lsls	r6, r4, #4
    b966:	4430      	add	r0, r6
    b968:	8902      	ldrh	r2, [r0, #8]
    b96a:	88bb      	ldrh	r3, [r7, #4]
    b96c:	429a      	cmp	r2, r3
    b96e:	d1f4      	bne.n	b95a <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    b970:	3001      	adds	r0, #1
    b972:	f7fc ff4d 	bl	8810 <bt_conn_lookup_addr_le>
		if (!conn) {
    b976:	4680      	mov	r8, r0
    b978:	2800      	cmp	r0, #0
    b97a:	d0d4      	beq.n	b926 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    b97c:	7b03      	ldrb	r3, [r0, #12]
    b97e:	2b03      	cmp	r3, #3
    b980:	d0da      	beq.n	b938 <notify_cb+0x68>
			bt_conn_unref(conn);
    b982:	f7fc ff9f 	bl	88c4 <bt_conn_unref>
			continue;
    b986:	e7e8      	b.n	b95a <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    b988:	6979      	ldr	r1, [r7, #20]
    b98a:	f7ff ff45 	bl	b818 <gatt_indicate>
    b98e:	4606      	mov	r6, r0
    b990:	e7dc      	b.n	b94c <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    b992:	2001      	movs	r0, #1
    b994:	e7b2      	b.n	b8fc <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    b996:	2000      	movs	r0, #0
    b998:	e7b0      	b.n	b8fc <notify_cb+0x2c>
    b99a:	bf00      	nop
    b99c:	0000b733 	.word	0x0000b733
    b9a0:	2000082c 	.word	0x2000082c

0000b9a4 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    b9a4:	8981      	ldrh	r1, [r0, #12]
    b9a6:	b909      	cbnz	r1, b9ac <sc_restore+0x8>
    b9a8:	89c3      	ldrh	r3, [r0, #14]
    b9aa:	b163      	cbz	r3, b9c6 <sc_restore+0x22>
{
    b9ac:	b510      	push	{r4, lr}
    b9ae:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    b9b0:	89c2      	ldrh	r2, [r0, #14]
    b9b2:	4805      	ldr	r0, [pc, #20]	; (b9c8 <sc_restore+0x24>)
    b9b4:	f7ff fe70 	bl	b698 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    b9b8:	2204      	movs	r2, #4
    b9ba:	2100      	movs	r1, #0
    b9bc:	f104 000c 	add.w	r0, r4, #12
    b9c0:	f020 fb5c 	bl	2c07c <memset>
    b9c4:	bd10      	pop	{r4, pc}
    b9c6:	4770      	bx	lr
    b9c8:	200007d4 	.word	0x200007d4

0000b9cc <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b9cc:	6882      	ldr	r2, [r0, #8]
    b9ce:	4b16      	ldr	r3, [pc, #88]	; (ba28 <connected_cb+0x5c>)
    b9d0:	429a      	cmp	r2, r3
    b9d2:	d001      	beq.n	b9d8 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    b9d4:	2001      	movs	r0, #1
    b9d6:	4770      	bx	lr
{
    b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9dc:	460f      	mov	r7, r1
    b9de:	4680      	mov	r8, r0
	ccc = attr->user_data;
    b9e0:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    b9e2:	2400      	movs	r4, #0
    b9e4:	e004      	b.n	b9f0 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    b9e6:	4430      	add	r0, r6
    b9e8:	f7ff ffdc 	bl	b9a4 <sc_restore>
    b9ec:	e019      	b.n	ba22 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    b9ee:	3401      	adds	r4, #1
    b9f0:	686b      	ldr	r3, [r5, #4]
    b9f2:	429c      	cmp	r4, r3
    b9f4:	d215      	bcs.n	ba22 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    b9f6:	6829      	ldr	r1, [r5, #0]
    b9f8:	0126      	lsls	r6, r4, #4
    b9fa:	4431      	add	r1, r6
    b9fc:	3101      	adds	r1, #1
    b9fe:	4638      	mov	r0, r7
    ba00:	f7fc feb0 	bl	8764 <bt_conn_addr_le_cmp>
    ba04:	2800      	cmp	r0, #0
    ba06:	d1f2      	bne.n	b9ee <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    ba08:	682b      	ldr	r3, [r5, #0]
    ba0a:	4433      	add	r3, r6
    ba0c:	891b      	ldrh	r3, [r3, #8]
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d0ed      	beq.n	b9ee <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    ba12:	4629      	mov	r1, r5
    ba14:	4640      	mov	r0, r8
    ba16:	f7ff fdf9 	bl	b60c <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    ba1a:	6828      	ldr	r0, [r5, #0]
    ba1c:	4b03      	ldr	r3, [pc, #12]	; (ba2c <connected_cb+0x60>)
    ba1e:	4298      	cmp	r0, r3
    ba20:	d0e1      	beq.n	b9e6 <connected_cb+0x1a>
}
    ba22:	2001      	movs	r0, #1
    ba24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba28:	0000b733 	.word	0x0000b733
    ba2c:	2000082c 	.word	0x2000082c

0000ba30 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba34:	6882      	ldr	r2, [r0, #8]
    ba36:	4b29      	ldr	r3, [pc, #164]	; (badc <disconnected_cb+0xac>)
    ba38:	429a      	cmp	r2, r3
    ba3a:	d002      	beq.n	ba42 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    ba3c:	2001      	movs	r0, #1
    ba3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    ba42:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    ba44:	892b      	ldrh	r3, [r5, #8]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d0f8      	beq.n	ba3c <disconnected_cb+0xc>
    ba4a:	4688      	mov	r8, r1
    ba4c:	4607      	mov	r7, r0
    ba4e:	2400      	movs	r4, #0
    ba50:	e012      	b.n	ba78 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    ba52:	f7fc ff37 	bl	88c4 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    ba56:	e7f1      	b.n	ba3c <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    ba58:	f108 0948 	add.w	r9, r8, #72	; 0x48
    ba5c:	4648      	mov	r0, r9
    ba5e:	f7fc f99f 	bl	7da0 <bt_addr_le_is_bonded>
    ba62:	bb28      	cbnz	r0, bab0 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    ba64:	682b      	ldr	r3, [r5, #0]
    ba66:	2100      	movs	r1, #0
    ba68:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    ba6a:	6828      	ldr	r0, [r5, #0]
    ba6c:	4430      	add	r0, r6
    ba6e:	2202      	movs	r2, #2
    ba70:	3008      	adds	r0, #8
    ba72:	f020 fb03 	bl	2c07c <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    ba76:	3401      	adds	r4, #1
    ba78:	686b      	ldr	r3, [r5, #4]
    ba7a:	429c      	cmp	r4, r3
    ba7c:	d220      	bcs.n	bac0 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    ba7e:	6829      	ldr	r1, [r5, #0]
    ba80:	0126      	lsls	r6, r4, #4
    ba82:	4431      	add	r1, r6
    ba84:	890b      	ldrh	r3, [r1, #8]
    ba86:	2b00      	cmp	r3, #0
    ba88:	d0f5      	beq.n	ba76 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    ba8a:	3101      	adds	r1, #1
    ba8c:	4640      	mov	r0, r8
    ba8e:	f7fc fe69 	bl	8764 <bt_conn_addr_le_cmp>
    ba92:	2800      	cmp	r0, #0
    ba94:	d0e0      	beq.n	ba58 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    ba96:	6828      	ldr	r0, [r5, #0]
    ba98:	4430      	add	r0, r6
    ba9a:	3001      	adds	r0, #1
    ba9c:	f7fc feb8 	bl	8810 <bt_conn_lookup_addr_le>
			if (tmp) {
    baa0:	2800      	cmp	r0, #0
    baa2:	d0e8      	beq.n	ba76 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    baa4:	7b02      	ldrb	r2, [r0, #12]
    baa6:	2a03      	cmp	r2, #3
    baa8:	d0d3      	beq.n	ba52 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    baaa:	f7fc ff0b 	bl	88c4 <bt_conn_unref>
    baae:	e7e2      	b.n	ba76 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    bab0:	6828      	ldr	r0, [r5, #0]
    bab2:	4430      	add	r0, r6
    bab4:	2207      	movs	r2, #7
    bab6:	4649      	mov	r1, r9
    bab8:	3001      	adds	r0, #1
    baba:	f7f4 fc01 	bl	2c0 <memcpy>
    babe:	e7da      	b.n	ba76 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    bac0:	2202      	movs	r2, #2
    bac2:	2100      	movs	r1, #0
    bac4:	f105 0008 	add.w	r0, r5, #8
    bac8:	f020 fad8 	bl	2c07c <memset>
	if (ccc->cfg_changed) {
    bacc:	68eb      	ldr	r3, [r5, #12]
    bace:	2b00      	cmp	r3, #0
    bad0:	d0b4      	beq.n	ba3c <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    bad2:	8929      	ldrh	r1, [r5, #8]
    bad4:	4638      	mov	r0, r7
    bad6:	4798      	blx	r3
    bad8:	e7b0      	b.n	ba3c <disconnected_cb+0xc>
    bada:	bf00      	nop
    badc:	0000b733 	.word	0x0000b733

0000bae0 <bt_gatt_init>:
{
    bae0:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    bae2:	4805      	ldr	r0, [pc, #20]	; (baf8 <bt_gatt_init+0x18>)
    bae4:	f7ff fd3c 	bl	b560 <gatt_register>
	gatt_register(&gatt_svc);
    bae8:	4804      	ldr	r0, [pc, #16]	; (bafc <bt_gatt_init+0x1c>)
    baea:	f7ff fd39 	bl	b560 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    baee:	4904      	ldr	r1, [pc, #16]	; (bb00 <bt_gatt_init+0x20>)
    baf0:	4804      	ldr	r0, [pc, #16]	; (bb04 <bt_gatt_init+0x24>)
    baf2:	f01f fde1 	bl	2b6b8 <k_delayed_work_init>
    baf6:	bd08      	pop	{r3, pc}
    baf8:	2000bb6c 	.word	0x2000bb6c
    bafc:	2000bbc8 	.word	0x2000bbc8
    bb00:	0000bdd5 	.word	0x0000bdd5
    bb04:	20000800 	.word	0x20000800

0000bb08 <bt_gatt_service_register>:
{
    bb08:	b510      	push	{r4, lr}
    bb0a:	b082      	sub	sp, #8
    bb0c:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    bb0e:	6803      	ldr	r3, [r0, #0]
    bb10:	6818      	ldr	r0, [r3, #0]
    bb12:	2300      	movs	r3, #0
    bb14:	f88d 3000 	strb.w	r3, [sp]
    bb18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    bb1c:	f8ad 3002 	strh.w	r3, [sp, #2]
    bb20:	4669      	mov	r1, sp
    bb22:	f7fa f876 	bl	5c12 <bt_uuid_cmp>
    bb26:	b300      	cbz	r0, bb6a <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    bb28:	6823      	ldr	r3, [r4, #0]
    bb2a:	6818      	ldr	r0, [r3, #0]
    bb2c:	2300      	movs	r3, #0
    bb2e:	f88d 3004 	strb.w	r3, [sp, #4]
    bb32:	f641 0301 	movw	r3, #6145	; 0x1801
    bb36:	f8ad 3006 	strh.w	r3, [sp, #6]
    bb3a:	a901      	add	r1, sp, #4
    bb3c:	f7fa f869 	bl	5c12 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    bb40:	b1b0      	cbz	r0, bb70 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    bb42:	4620      	mov	r0, r4
    bb44:	f7ff fd0c 	bl	b560 <gatt_register>
	if (err < 0) {
    bb48:	2800      	cmp	r0, #0
    bb4a:	db0c      	blt.n	bb66 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    bb4c:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    bb4e:	88a2      	ldrh	r2, [r4, #4]
    bb50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    bb54:	0093      	lsls	r3, r2, #2
    bb56:	3b14      	subs	r3, #20
    bb58:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    bb5a:	8a1a      	ldrh	r2, [r3, #16]
    bb5c:	8a09      	ldrh	r1, [r1, #16]
    bb5e:	4806      	ldr	r0, [pc, #24]	; (bb78 <bt_gatt_service_register+0x70>)
    bb60:	f7ff fd9a 	bl	b698 <sc_indicate>
	return 0;
    bb64:	2000      	movs	r0, #0
}
    bb66:	b002      	add	sp, #8
    bb68:	bd10      	pop	{r4, pc}
		return -EALREADY;
    bb6a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bb6e:	e7fa      	b.n	bb66 <bt_gatt_service_register+0x5e>
    bb70:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bb74:	e7f7      	b.n	bb66 <bt_gatt_service_register+0x5e>
    bb76:	bf00      	nop
    bb78:	200007d4 	.word	0x200007d4

0000bb7c <bt_gatt_attr_read>:
{
    bb7c:	b510      	push	{r4, lr}
    bb7e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bb82:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    bb86:	42a1      	cmp	r1, r4
    bb88:	d80c      	bhi.n	bba4 <bt_gatt_attr_read+0x28>
    bb8a:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    bb8c:	1a64      	subs	r4, r4, r1
    bb8e:	42a3      	cmp	r3, r4
    bb90:	bfa8      	it	ge
    bb92:	4623      	movge	r3, r4
    bb94:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    bb96:	4622      	mov	r2, r4
    bb98:	9b03      	ldr	r3, [sp, #12]
    bb9a:	4419      	add	r1, r3
    bb9c:	f7f4 fb90 	bl	2c0 <memcpy>
}
    bba0:	4620      	mov	r0, r4
    bba2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bba4:	f06f 0406 	mvn.w	r4, #6
    bba8:	e7fa      	b.n	bba0 <bt_gatt_attr_read+0x24>

0000bbaa <read_appearance>:
{
    bbaa:	b530      	push	{r4, r5, lr}
    bbac:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    bbae:	ac06      	add	r4, sp, #24
    bbb0:	2500      	movs	r5, #0
    bbb2:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    bbb6:	2502      	movs	r5, #2
    bbb8:	9502      	str	r5, [sp, #8]
    bbba:	9401      	str	r4, [sp, #4]
    bbbc:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    bbc0:	9400      	str	r4, [sp, #0]
    bbc2:	f7ff ffdb 	bl	bb7c <bt_gatt_attr_read>
}
    bbc6:	b007      	add	sp, #28
    bbc8:	bd30      	pop	{r4, r5, pc}
	...

0000bbcc <read_name>:
{
    bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbd0:	b084      	sub	sp, #16
    bbd2:	4605      	mov	r5, r0
    bbd4:	460e      	mov	r6, r1
    bbd6:	4617      	mov	r7, r2
    bbd8:	4698      	mov	r8, r3
				 strlen(gap_name));
    bbda:	4c09      	ldr	r4, [pc, #36]	; (bc00 <read_name+0x34>)
    bbdc:	4620      	mov	r0, r4
    bbde:	f7f4 fd8f 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    bbe2:	b280      	uxth	r0, r0
    bbe4:	9002      	str	r0, [sp, #8]
    bbe6:	9401      	str	r4, [sp, #4]
    bbe8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    bbec:	9300      	str	r3, [sp, #0]
    bbee:	4643      	mov	r3, r8
    bbf0:	463a      	mov	r2, r7
    bbf2:	4631      	mov	r1, r6
    bbf4:	4628      	mov	r0, r5
    bbf6:	f7ff ffc1 	bl	bb7c <bt_gatt_attr_read>
}
    bbfa:	b004      	add	sp, #16
    bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc00:	0003313c 	.word	0x0003313c

0000bc04 <bt_gatt_attr_read_service>:
{
    bc04:	b570      	push	{r4, r5, r6, lr}
    bc06:	b086      	sub	sp, #24
    bc08:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    bc0c:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    bc0e:	7826      	ldrb	r6, [r4, #0]
    bc10:	b146      	cbz	r6, bc24 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    bc12:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    bc14:	2610      	movs	r6, #16
    bc16:	9602      	str	r6, [sp, #8]
    bc18:	9401      	str	r4, [sp, #4]
    bc1a:	9500      	str	r5, [sp, #0]
    bc1c:	f7ff ffae 	bl	bb7c <bt_gatt_attr_read>
}
    bc20:	b006      	add	sp, #24
    bc22:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    bc24:	8866      	ldrh	r6, [r4, #2]
    bc26:	ac06      	add	r4, sp, #24
    bc28:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    bc2c:	2602      	movs	r6, #2
    bc2e:	9602      	str	r6, [sp, #8]
    bc30:	9401      	str	r4, [sp, #4]
    bc32:	9500      	str	r5, [sp, #0]
    bc34:	f7ff ffa2 	bl	bb7c <bt_gatt_attr_read>
    bc38:	e7f2      	b.n	bc20 <bt_gatt_attr_read_service+0x1c>

0000bc3a <bt_gatt_attr_read_ccc>:
{
    bc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc3e:	b086      	sub	sp, #24
    bc40:	4607      	mov	r7, r0
    bc42:	4688      	mov	r8, r1
    bc44:	4691      	mov	r9, r2
    bc46:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    bc48:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    bc4a:	2400      	movs	r4, #0
    bc4c:	686b      	ldr	r3, [r5, #4]
    bc4e:	429c      	cmp	r4, r3
    bc50:	d20e      	bcs.n	bc70 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    bc52:	6829      	ldr	r1, [r5, #0]
    bc54:	0126      	lsls	r6, r4, #4
    bc56:	4431      	add	r1, r6
    bc58:	3101      	adds	r1, #1
    bc5a:	4638      	mov	r0, r7
    bc5c:	f7fc fd82 	bl	8764 <bt_conn_addr_le_cmp>
    bc60:	b108      	cbz	r0, bc66 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    bc62:	3401      	adds	r4, #1
    bc64:	e7f2      	b.n	bc4c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    bc66:	682b      	ldr	r3, [r5, #0]
    bc68:	441e      	add	r6, r3
    bc6a:	8933      	ldrh	r3, [r6, #8]
    bc6c:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    bc70:	686b      	ldr	r3, [r5, #4]
    bc72:	429c      	cmp	r4, r3
    bc74:	d010      	beq.n	bc98 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    bc76:	2302      	movs	r3, #2
    bc78:	9302      	str	r3, [sp, #8]
    bc7a:	f10d 0316 	add.w	r3, sp, #22
    bc7e:	9301      	str	r3, [sp, #4]
    bc80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    bc84:	9300      	str	r3, [sp, #0]
    bc86:	4653      	mov	r3, sl
    bc88:	464a      	mov	r2, r9
    bc8a:	4641      	mov	r1, r8
    bc8c:	4638      	mov	r0, r7
    bc8e:	f7ff ff75 	bl	bb7c <bt_gatt_attr_read>
}
    bc92:	b006      	add	sp, #24
    bc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    bc98:	2300      	movs	r3, #0
    bc9a:	f8ad 3016 	strh.w	r3, [sp, #22]
    bc9e:	e7ea      	b.n	bc76 <bt_gatt_attr_read_ccc+0x3c>

0000bca0 <bt_gatt_foreach_attr>:
{
    bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bca4:	4606      	mov	r6, r0
    bca6:	460f      	mov	r7, r1
    bca8:	4690      	mov	r8, r2
    bcaa:	4699      	mov	r9, r3
	return list->head;
    bcac:	4b15      	ldr	r3, [pc, #84]	; (bd04 <bt_gatt_foreach_attr+0x64>)
    bcae:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    bcb0:	b10d      	cbz	r5, bcb6 <bt_gatt_foreach_attr+0x16>
    bcb2:	3d08      	subs	r5, #8
    bcb4:	e01e      	b.n	bcf4 <bt_gatt_foreach_attr+0x54>
    bcb6:	2500      	movs	r5, #0
    bcb8:	e01c      	b.n	bcf4 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    bcba:	3401      	adds	r4, #1
    bcbc:	88ab      	ldrh	r3, [r5, #4]
    bcbe:	429c      	cmp	r4, r3
    bcc0:	da0f      	bge.n	bce2 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    bcc2:	6828      	ldr	r0, [r5, #0]
    bcc4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    bcc8:	0093      	lsls	r3, r2, #2
    bcca:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    bccc:	8a03      	ldrh	r3, [r0, #16]
    bcce:	42b3      	cmp	r3, r6
    bcd0:	d3f3      	bcc.n	bcba <bt_gatt_foreach_attr+0x1a>
    bcd2:	42bb      	cmp	r3, r7
    bcd4:	d8f1      	bhi.n	bcba <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    bcd6:	4649      	mov	r1, r9
    bcd8:	47c0      	blx	r8
    bcda:	2800      	cmp	r0, #0
    bcdc:	d1ed      	bne.n	bcba <bt_gatt_foreach_attr+0x1a>
    bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    bce2:	f115 0308 	adds.w	r3, r5, #8
    bce6:	d009      	beq.n	bcfc <bt_gatt_foreach_attr+0x5c>
	return node->next;
    bce8:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    bcea:	b14a      	cbz	r2, bd00 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    bcec:	b103      	cbz	r3, bcf0 <bt_gatt_foreach_attr+0x50>
	return node->next;
    bcee:	68ab      	ldr	r3, [r5, #8]
    bcf0:	f1a3 0508 	sub.w	r5, r3, #8
    bcf4:	2d00      	cmp	r5, #0
    bcf6:	d0f2      	beq.n	bcde <bt_gatt_foreach_attr+0x3e>
    bcf8:	2400      	movs	r4, #0
    bcfa:	e7df      	b.n	bcbc <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    bcfc:	461a      	mov	r2, r3
    bcfe:	e7f4      	b.n	bcea <bt_gatt_foreach_attr+0x4a>
    bd00:	2500      	movs	r5, #0
    bd02:	e7f7      	b.n	bcf4 <bt_gatt_foreach_attr+0x54>
    bd04:	200007cc 	.word	0x200007cc

0000bd08 <bt_gatt_attr_next>:
{
    bd08:	b500      	push	{lr}
    bd0a:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    bd0c:	ab02      	add	r3, sp, #8
    bd0e:	2200      	movs	r2, #0
    bd10:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    bd14:	8a00      	ldrh	r0, [r0, #16]
    bd16:	3001      	adds	r0, #1
    bd18:	b280      	uxth	r0, r0
    bd1a:	4a04      	ldr	r2, [pc, #16]	; (bd2c <bt_gatt_attr_next+0x24>)
    bd1c:	4601      	mov	r1, r0
    bd1e:	f7ff ffbf 	bl	bca0 <bt_gatt_foreach_attr>
}
    bd22:	9801      	ldr	r0, [sp, #4]
    bd24:	b003      	add	sp, #12
    bd26:	f85d fb04 	ldr.w	pc, [sp], #4
    bd2a:	bf00      	nop
    bd2c:	0000b607 	.word	0x0000b607

0000bd30 <bt_gatt_attr_read_chrc>:
{
    bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd34:	b08a      	sub	sp, #40	; 0x28
    bd36:	4606      	mov	r6, r0
    bd38:	460c      	mov	r4, r1
    bd3a:	4617      	mov	r7, r2
    bd3c:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    bd3e:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    bd40:	792b      	ldrb	r3, [r5, #4]
    bd42:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    bd46:	4608      	mov	r0, r1
    bd48:	f7ff ffde 	bl	bd08 <bt_gatt_attr_next>
	if (!next) {
    bd4c:	b1c0      	cbz	r0, bd80 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    bd4e:	8a03      	ldrh	r3, [r0, #16]
    bd50:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    bd54:	6829      	ldr	r1, [r5, #0]
    bd56:	780b      	ldrb	r3, [r1, #0]
    bd58:	b9c3      	cbnz	r3, bd8c <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    bd5a:	884b      	ldrh	r3, [r1, #2]
    bd5c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    bd60:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    bd62:	9302      	str	r3, [sp, #8]
    bd64:	ab05      	add	r3, sp, #20
    bd66:	9301      	str	r3, [sp, #4]
    bd68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    bd6c:	9300      	str	r3, [sp, #0]
    bd6e:	4643      	mov	r3, r8
    bd70:	463a      	mov	r2, r7
    bd72:	4621      	mov	r1, r4
    bd74:	4630      	mov	r0, r6
    bd76:	f7ff ff01 	bl	bb7c <bt_gatt_attr_read>
}
    bd7a:	b00a      	add	sp, #40	; 0x28
    bd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    bd80:	2300      	movs	r3, #0
    bd82:	f88d 3015 	strb.w	r3, [sp, #21]
    bd86:	f88d 3016 	strb.w	r3, [sp, #22]
    bd8a:	e7e3      	b.n	bd54 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    bd8c:	2210      	movs	r2, #16
    bd8e:	3101      	adds	r1, #1
    bd90:	f10d 0017 	add.w	r0, sp, #23
    bd94:	f7f4 fa94 	bl	2c0 <memcpy>
		value_len += 16;
    bd98:	2313      	movs	r3, #19
    bd9a:	e7e2      	b.n	bd62 <bt_gatt_attr_read_chrc+0x32>

0000bd9c <bt_gatt_indicate>:
{
    bd9c:	b500      	push	{lr}
    bd9e:	b087      	sub	sp, #28
	if (conn) {
    bda0:	b120      	cbz	r0, bdac <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    bda2:	f7ff fd39 	bl	b818 <gatt_indicate>
}
    bda6:	b007      	add	sp, #28
    bda8:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    bdac:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    bdb0:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    bdb2:	2302      	movs	r3, #2
    bdb4:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    bdb8:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    bdba:	6988      	ldr	r0, [r1, #24]
    bdbc:	466b      	mov	r3, sp
    bdbe:	4a04      	ldr	r2, [pc, #16]	; (bdd0 <bt_gatt_indicate+0x34>)
    bdc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bdc4:	8a00      	ldrh	r0, [r0, #16]
    bdc6:	f7ff ff6b 	bl	bca0 <bt_gatt_foreach_attr>
	return nfy.err;
    bdca:	9800      	ldr	r0, [sp, #0]
    bdcc:	e7eb      	b.n	bda6 <bt_gatt_indicate+0xa>
    bdce:	bf00      	nop
    bdd0:	0000b8d1 	.word	0x0000b8d1

0000bdd4 <sc_process>:
{
    bdd4:	b510      	push	{r4, lr}
    bdd6:	b082      	sub	sp, #8
    bdd8:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    bdda:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    bdde:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    bde2:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    bde6:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    bdea:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    bdee:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bdf2:	f3bf 8f5b 	dmb	ish
    bdf6:	e854 2f00 	ldrex	r2, [r4]
    bdfa:	f022 0201 	bic.w	r2, r2, #1
    bdfe:	e844 2000 	strex	r0, r2, [r4]
    be02:	2800      	cmp	r0, #0
    be04:	d1f7      	bne.n	bdf6 <sc_process+0x22>
    be06:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    be0a:	2000      	movs	r0, #0
    be0c:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    be10:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    be14:	4a0e      	ldr	r2, [pc, #56]	; (be50 <sc_process+0x7c>)
    be16:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    be1a:	4a0e      	ldr	r2, [pc, #56]	; (be54 <sc_process+0x80>)
    be1c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    be20:	aa01      	add	r2, sp, #4
    be22:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    be26:	2204      	movs	r2, #4
    be28:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    be2c:	f7ff ffb6 	bl	bd9c <bt_gatt_indicate>
    be30:	b108      	cbz	r0, be36 <sc_process+0x62>
}
    be32:	b002      	add	sp, #8
    be34:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be36:	f3bf 8f5b 	dmb	ish
    be3a:	e854 3f00 	ldrex	r3, [r4]
    be3e:	f043 0302 	orr.w	r3, r3, #2
    be42:	e844 3200 	strex	r2, r3, [r4]
    be46:	2a00      	cmp	r2, #0
    be48:	d1f7      	bne.n	be3a <sc_process+0x66>
    be4a:	f3bf 8f5b 	dmb	ish
    be4e:	e7f0      	b.n	be32 <sc_process+0x5e>
    be50:	2000bba0 	.word	0x2000bba0
    be54:	0000b64d 	.word	0x0000b64d

0000be58 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    be58:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    be5a:	4603      	mov	r3, r0
    be5c:	4a03      	ldr	r2, [pc, #12]	; (be6c <bt_gatt_connected+0x14>)
    be5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    be62:	2001      	movs	r0, #1
    be64:	f7ff ff1c 	bl	bca0 <bt_gatt_foreach_attr>
    be68:	bd08      	pop	{r3, pc}
    be6a:	bf00      	nop
    be6c:	0000b9cd 	.word	0x0000b9cd

0000be70 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    be70:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    be72:	4603      	mov	r3, r0
    be74:	4a03      	ldr	r2, [pc, #12]	; (be84 <bt_gatt_disconnected+0x14>)
    be76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    be7a:	2001      	movs	r0, #1
    be7c:	f7ff ff10 	bl	bca0 <bt_gatt_foreach_attr>
    be80:	bd08      	pop	{r3, pc}
    be82:	bf00      	nop
    be84:	0000ba31 	.word	0x0000ba31

0000be88 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    be88:	4b11      	ldr	r3, [pc, #68]	; (bed0 <get_io_capa+0x48>)
    be8a:	681b      	ldr	r3, [r3, #0]
    be8c:	b1db      	cbz	r3, bec6 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    be8e:	681a      	ldr	r2, [r3, #0]
    be90:	b152      	cbz	r2, bea8 <get_io_capa+0x20>
    be92:	6859      	ldr	r1, [r3, #4]
    be94:	b141      	cbz	r1, bea8 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    be96:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    be98:	b109      	cbz	r1, be9e <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    be9a:	2004      	movs	r0, #4
    be9c:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    be9e:	490d      	ldr	r1, [pc, #52]	; (bed4 <get_io_capa+0x4c>)
    bea0:	7809      	ldrb	r1, [r1, #0]
    bea2:	b909      	cbnz	r1, bea8 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    bea4:	2004      	movs	r0, #4
    bea6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    bea8:	490a      	ldr	r1, [pc, #40]	; (bed4 <get_io_capa+0x4c>)
    beaa:	7809      	ldrb	r1, [r1, #0]
    beac:	b121      	cbz	r1, beb8 <get_io_capa+0x30>
    beae:	b11a      	cbz	r2, beb8 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    beb0:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    beb2:	b109      	cbz	r1, beb8 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    beb4:	2001      	movs	r0, #1
    beb6:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    beb8:	685b      	ldr	r3, [r3, #4]
    beba:	b10b      	cbz	r3, bec0 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    bebc:	2002      	movs	r0, #2
    bebe:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    bec0:	b11a      	cbz	r2, beca <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    bec2:	2000      	movs	r0, #0
    bec4:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    bec6:	2003      	movs	r0, #3
    bec8:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    beca:	2003      	movs	r0, #3
}
    becc:	4770      	bx	lr
    bece:	bf00      	nop
    bed0:	20002a38 	.word	0x20002a38
    bed4:	20000a34 	.word	0x20000a34

0000bed8 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    bed8:	2904      	cmp	r1, #4
    beda:	d811      	bhi.n	bf00 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bedc:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    bee0:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    bee4:	4313      	orrs	r3, r2
    bee6:	f013 0f04 	tst.w	r3, #4
    beea:	d00b      	beq.n	bf04 <get_pair_method+0x2c>
{
    beec:	b510      	push	{r4, lr}
    beee:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    bef0:	f7ff ffca 	bl	be88 <get_io_capa>
    bef4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    bef8:	4c03      	ldr	r4, [pc, #12]	; (bf08 <get_pair_method+0x30>)
    befa:	4421      	add	r1, r4
    befc:	5c08      	ldrb	r0, [r1, r0]
    befe:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    bf00:	2000      	movs	r0, #0
    bf02:	4770      	bx	lr
		return JUST_WORKS;
    bf04:	2000      	movs	r0, #0
    bf06:	4770      	bx	lr
    bf08:	00033160 	.word	0x00033160

0000bf0c <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    bf0c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    bf10:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    bf14:	4290      	cmp	r0, r2
    bf16:	bf28      	it	cs
    bf18:	4610      	movcs	r0, r2
    bf1a:	4770      	bx	lr

0000bf1c <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    bf1c:	b430      	push	{r4, r5}
	size_t len = 16;
    bf1e:	2310      	movs	r3, #16

	while (len--) {
    bf20:	e007      	b.n	bf32 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    bf22:	7803      	ldrb	r3, [r0, #0]
    bf24:	780d      	ldrb	r5, [r1, #0]
    bf26:	406b      	eors	r3, r5
    bf28:	7013      	strb	r3, [r2, #0]
	while (len--) {
    bf2a:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    bf2c:	3201      	adds	r2, #1
    bf2e:	3101      	adds	r1, #1
    bf30:	3001      	adds	r0, #1
	while (len--) {
    bf32:	1e5c      	subs	r4, r3, #1
    bf34:	2b00      	cmp	r3, #0
    bf36:	d1f4      	bne.n	bf22 <xor_128+0x6>
	}
}
    bf38:	bc30      	pop	{r4, r5}
    bf3a:	4770      	bx	lr

0000bf3c <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    bf3c:	2904      	cmp	r1, #4
    bf3e:	d819      	bhi.n	bf74 <legacy_get_pair_method+0x38>
{
    bf40:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    bf42:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    bf46:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    bf4a:	4313      	orrs	r3, r2
    bf4c:	f013 0f04 	tst.w	r3, #4
    bf50:	d012      	beq.n	bf78 <legacy_get_pair_method+0x3c>
    bf52:	460c      	mov	r4, r1
    bf54:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    bf56:	f7ff ff97 	bl	be88 <get_io_capa>
    bf5a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    bf5e:	4c08      	ldr	r4, [pc, #32]	; (bf80 <legacy_get_pair_method+0x44>)
    bf60:	4421      	add	r1, r4
    bf62:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    bf64:	2804      	cmp	r0, #4
    bf66:	d000      	beq.n	bf6a <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    bf68:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bf6a:	682b      	ldr	r3, [r5, #0]
    bf6c:	78db      	ldrb	r3, [r3, #3]
    bf6e:	b92b      	cbnz	r3, bf7c <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    bf70:	2002      	movs	r0, #2
    bf72:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    bf74:	2000      	movs	r0, #0
    bf76:	4770      	bx	lr
		return JUST_WORKS;
    bf78:	2000      	movs	r0, #0
    bf7a:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    bf7c:	2001      	movs	r0, #1
    bf7e:	e7f3      	b.n	bf68 <legacy_get_pair_method+0x2c>
    bf80:	00033144 	.word	0x00033144

0000bf84 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    bf84:	b510      	push	{r4, lr}
	if (sc_supported) {
    bf86:	4b09      	ldr	r3, [pc, #36]	; (bfac <get_auth+0x28>)
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	b143      	cbz	r3, bf9e <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    bf8c:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    bf90:	f7ff ff7a 	bl	be88 <get_io_capa>
    bf94:	2803      	cmp	r0, #3
    bf96:	d005      	beq.n	bfa4 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    bf98:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    bf9c:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    bf9e:	f000 0407 	and.w	r4, r0, #7
    bfa2:	e7f5      	b.n	bf90 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    bfa4:	f004 000b 	and.w	r0, r4, #11
    bfa8:	bd10      	pop	{r4, pc}
    bfaa:	bf00      	nop
    bfac:	20000a34 	.word	0x20000a34

0000bfb0 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    bfb0:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    bfb2:	7a43      	ldrb	r3, [r0, #9]
    bfb4:	3b01      	subs	r3, #1
    bfb6:	2b03      	cmp	r3, #3
    bfb8:	d818      	bhi.n	bfec <sec_level_reachable+0x3c>
    bfba:	e8df f003 	tbb	[pc, r3]
    bfbe:	0202      	.short	0x0202
    bfc0:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    bfc2:	2001      	movs	r0, #1
    bfc4:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    bfc6:	f7ff ff5f 	bl	be88 <get_io_capa>
    bfca:	3803      	subs	r0, #3
    bfcc:	bf18      	it	ne
    bfce:	2001      	movne	r0, #1
    bfd0:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    bfd2:	f7ff ff59 	bl	be88 <get_io_capa>
    bfd6:	2803      	cmp	r0, #3
    bfd8:	d004      	beq.n	bfe4 <sec_level_reachable+0x34>
    bfda:	4b05      	ldr	r3, [pc, #20]	; (bff0 <sec_level_reachable+0x40>)
    bfdc:	781b      	ldrb	r3, [r3, #0]
    bfde:	b91b      	cbnz	r3, bfe8 <sec_level_reachable+0x38>
    bfe0:	2000      	movs	r0, #0
    bfe2:	bd08      	pop	{r3, pc}
    bfe4:	2000      	movs	r0, #0
    bfe6:	bd08      	pop	{r3, pc}
    bfe8:	2001      	movs	r0, #1
    bfea:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    bfec:	2000      	movs	r0, #0
	}
}
    bfee:	bd08      	pop	{r3, pc}
    bff0:	20000a34 	.word	0x20000a34

0000bff4 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    bff4:	2000      	movs	r0, #0
    bff6:	b110      	cbz	r0, bffe <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    bff8:	f06f 000b 	mvn.w	r0, #11
}
    bffc:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    bffe:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c002:	fb03 f300 	mul.w	r3, r3, r0
    c006:	4a07      	ldr	r2, [pc, #28]	; (c024 <bt_smp_accept+0x30>)
    c008:	58d3      	ldr	r3, [r2, r3]
    c00a:	b10b      	cbz	r3, c010 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c00c:	3001      	adds	r0, #1
    c00e:	e7f2      	b.n	bff6 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    c010:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c014:	4a03      	ldr	r2, [pc, #12]	; (c024 <bt_smp_accept+0x30>)
    c016:	fb03 2300 	mla	r3, r3, r0, r2
    c01a:	4a03      	ldr	r2, [pc, #12]	; (c028 <bt_smp_accept+0x34>)
    c01c:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    c01e:	600b      	str	r3, [r1, #0]
		return 0;
    c020:	4770      	bx	lr
    c022:	bf00      	nop
    c024:	2000084c 	.word	0x2000084c
    c028:	2000bbe0 	.word	0x2000bbe0

0000c02c <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    c02c:	4b04      	ldr	r3, [pc, #16]	; (c040 <le_sc_supported+0x14>)
    c02e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    c032:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    c036:	2806      	cmp	r0, #6
    c038:	bf14      	ite	ne
    c03a:	2000      	movne	r0, #0
    c03c:	2001      	moveq	r0, #1
    c03e:	4770      	bx	lr
    c040:	2000b910 	.word	0x2000b910

0000c044 <smp_chan_get>:
{
    c044:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    c046:	2106      	movs	r1, #6
    c048:	f7fd fd18 	bl	9a7c <bt_l2cap_le_lookup_rx_cid>
}
    c04c:	bd08      	pop	{r3, pc}

0000c04e <smp_create_pdu>:
{
    c04e:	b538      	push	{r3, r4, r5, lr}
    c050:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    c052:	2100      	movs	r1, #0
    c054:	4608      	mov	r0, r1
    c056:	f7fd fa58 	bl	950a <bt_l2cap_create_pdu>
    c05a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    c05c:	2101      	movs	r1, #1
    c05e:	3008      	adds	r0, #8
    c060:	f010 f954 	bl	1c30c <net_buf_simple_add>
	hdr->code = op;
    c064:	7005      	strb	r5, [r0, #0]
}
    c066:	4620      	mov	r0, r4
    c068:	bd38      	pop	{r3, r4, r5, pc}

0000c06a <smp_init>:
{
    c06a:	b510      	push	{r4, lr}
    c06c:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    c06e:	22e0      	movs	r2, #224	; 0xe0
    c070:	2100      	movs	r1, #0
    c072:	309c      	adds	r0, #156	; 0x9c
    c074:	f020 f802 	bl	2c07c <memset>
	if (bt_rand(smp->prnd, 16)) {
    c078:	2110      	movs	r1, #16
    c07a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c07e:	f006 fdcf 	bl	12c20 <bt_rand>
    c082:	b110      	cbz	r0, c08a <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    c084:	2308      	movs	r3, #8
}
    c086:	4618      	mov	r0, r3
    c088:	bd10      	pop	{r4, pc}
    c08a:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    c08c:	349c      	adds	r4, #156	; 0x9c
    c08e:	f3bf 8f5b 	dmb	ish
    c092:	e854 2f00 	ldrex	r2, [r4]
    c096:	f042 0220 	orr.w	r2, r2, #32
    c09a:	e844 2100 	strex	r1, r2, [r4]
    c09e:	2900      	cmp	r1, #0
    c0a0:	d1f7      	bne.n	c092 <smp_init+0x28>
    c0a2:	f3bf 8f5b 	dmb	ish
	return 0;
    c0a6:	e7ee      	b.n	c086 <smp_init+0x1c>

0000c0a8 <display_passkey>:
{
    c0a8:	b538      	push	{r3, r4, r5, lr}
    c0aa:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    c0ac:	2104      	movs	r1, #4
    c0ae:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    c0b2:	f006 fdb5 	bl	12c20 <bt_rand>
    c0b6:	b108      	cbz	r0, c0bc <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    c0b8:	2008      	movs	r0, #8
}
    c0ba:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    c0bc:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    c0c0:	4909      	ldr	r1, [pc, #36]	; (c0e8 <display_passkey+0x40>)
    c0c2:	fba1 2103 	umull	r2, r1, r1, r3
    c0c6:	0c89      	lsrs	r1, r1, #18
    c0c8:	4a08      	ldr	r2, [pc, #32]	; (c0ec <display_passkey+0x44>)
    c0ca:	fb02 3111 	mls	r1, r2, r1, r3
    c0ce:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    c0d2:	2500      	movs	r5, #0
    c0d4:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    c0d8:	4b05      	ldr	r3, [pc, #20]	; (c0f0 <display_passkey+0x48>)
    c0da:	681b      	ldr	r3, [r3, #0]
    c0dc:	681b      	ldr	r3, [r3, #0]
    c0de:	6820      	ldr	r0, [r4, #0]
    c0e0:	4798      	blx	r3
	return 0;
    c0e2:	4628      	mov	r0, r5
    c0e4:	bd38      	pop	{r3, r4, r5, pc}
    c0e6:	bf00      	nop
    c0e8:	431bde83 	.word	0x431bde83
    c0ec:	000f4240 	.word	0x000f4240
    c0f0:	20002a38 	.word	0x20002a38

0000c0f4 <smp_send>:
{
    c0f4:	b510      	push	{r4, lr}
    c0f6:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    c0f8:	4613      	mov	r3, r2
    c0fa:	460a      	mov	r2, r1
    c0fc:	2106      	movs	r1, #6
    c0fe:	6800      	ldr	r0, [r0, #0]
    c100:	f7fd fa9b 	bl	963a <bt_l2cap_send_cb>
    c104:	f247 5230 	movw	r2, #30000	; 0x7530
    c108:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    c10c:	4801      	ldr	r0, [pc, #4]	; (c114 <smp_send+0x20>)
    c10e:	f01f fb4b 	bl	2b7a8 <k_delayed_work_submit_to_queue>
    c112:	bd10      	pop	{r4, pc}
    c114:	20002c00 	.word	0x20002c00

0000c118 <sc_smp_send_dhkey_check>:
{
    c118:	b570      	push	{r4, r5, r6, lr}
    c11a:	4604      	mov	r4, r0
    c11c:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    c11e:	2210      	movs	r2, #16
    c120:	210d      	movs	r1, #13
    c122:	6800      	ldr	r0, [r0, #0]
    c124:	f7ff ff93 	bl	c04e <smp_create_pdu>
	if (!buf) {
    c128:	b178      	cbz	r0, c14a <sc_smp_send_dhkey_check+0x32>
    c12a:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    c12c:	2110      	movs	r1, #16
    c12e:	3008      	adds	r0, #8
    c130:	f010 f8ec 	bl	1c30c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    c134:	2210      	movs	r2, #16
    c136:	4631      	mov	r1, r6
    c138:	f7f4 f8c2 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    c13c:	2200      	movs	r2, #0
    c13e:	4629      	mov	r1, r5
    c140:	4620      	mov	r0, r4
    c142:	f7ff ffd7 	bl	c0f4 <smp_send>
	return 0;
    c146:	2000      	movs	r0, #0
    c148:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c14a:	2008      	movs	r0, #8
}
    c14c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000c150 <sc_send_public_key>:
{
    c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c152:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    c154:	2240      	movs	r2, #64	; 0x40
    c156:	210c      	movs	r1, #12
    c158:	6800      	ldr	r0, [r0, #0]
    c15a:	f7ff ff78 	bl	c04e <smp_create_pdu>
	if (!req_buf) {
    c15e:	b1b0      	cbz	r0, c18e <sc_send_public_key+0x3e>
    c160:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    c162:	2140      	movs	r1, #64	; 0x40
    c164:	3008      	adds	r0, #8
    c166:	f010 f8d1 	bl	1c30c <net_buf_simple_add>
    c16a:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    c16c:	4e09      	ldr	r6, [pc, #36]	; (c194 <sc_send_public_key+0x44>)
    c16e:	2220      	movs	r2, #32
    c170:	4631      	mov	r1, r6
    c172:	f7f4 f8a5 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    c176:	2220      	movs	r2, #32
    c178:	18b1      	adds	r1, r6, r2
    c17a:	18b8      	adds	r0, r7, r2
    c17c:	f7f4 f8a0 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    c180:	2200      	movs	r2, #0
    c182:	4629      	mov	r1, r5
    c184:	4620      	mov	r0, r4
    c186:	f7ff ffb5 	bl	c0f4 <smp_send>
	return 0;
    c18a:	2000      	movs	r0, #0
    c18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c18e:	2008      	movs	r0, #8
}
    c190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c192:	bf00      	nop
    c194:	200009f4 	.word	0x200009f4

0000c198 <send_pairing_rsp>:
{
    c198:	b538      	push	{r3, r4, r5, lr}
    c19a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    c19c:	2206      	movs	r2, #6
    c19e:	2102      	movs	r1, #2
    c1a0:	6800      	ldr	r0, [r0, #0]
    c1a2:	f7ff ff54 	bl	c04e <smp_create_pdu>
	if (!rsp_buf) {
    c1a6:	b180      	cbz	r0, c1ca <send_pairing_rsp+0x32>
    c1a8:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    c1aa:	2106      	movs	r1, #6
    c1ac:	3008      	adds	r0, #8
    c1ae:	f010 f8ad 	bl	1c30c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    c1b2:	2206      	movs	r2, #6
    c1b4:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    c1b8:	f7f4 f882 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    c1bc:	2200      	movs	r2, #0
    c1be:	4629      	mov	r1, r5
    c1c0:	4620      	mov	r0, r4
    c1c2:	f7ff ff97 	bl	c0f4 <smp_send>
	return 0;
    c1c6:	2000      	movs	r0, #0
    c1c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c1ca:	2008      	movs	r0, #8
}
    c1cc:	bd38      	pop	{r3, r4, r5, pc}

0000c1ce <smp_send_pairing_random>:
{
    c1ce:	b538      	push	{r3, r4, r5, lr}
    c1d0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    c1d2:	2210      	movs	r2, #16
    c1d4:	2104      	movs	r1, #4
    c1d6:	6800      	ldr	r0, [r0, #0]
    c1d8:	f7ff ff39 	bl	c04e <smp_create_pdu>
	if (!rsp_buf) {
    c1dc:	b180      	cbz	r0, c200 <smp_send_pairing_random+0x32>
    c1de:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    c1e0:	2110      	movs	r1, #16
    c1e2:	3008      	adds	r0, #8
    c1e4:	f010 f892 	bl	1c30c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    c1e8:	2210      	movs	r2, #16
    c1ea:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    c1ee:	f7f4 f867 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    c1f2:	2200      	movs	r2, #0
    c1f4:	4629      	mov	r1, r5
    c1f6:	4620      	mov	r0, r4
    c1f8:	f7ff ff7c 	bl	c0f4 <smp_send>
	return 0;
    c1fc:	2000      	movs	r0, #0
    c1fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c200:	2008      	movs	r0, #8
}
    c202:	bd38      	pop	{r3, r4, r5, pc}

0000c204 <bt_smp_aes_cmac>:
{
    c204:	b570      	push	{r4, r5, r6, lr}
    c206:	b0c2      	sub	sp, #264	; 0x108
    c208:	460c      	mov	r4, r1
    c20a:	4615      	mov	r5, r2
    c20c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    c20e:	aa16      	add	r2, sp, #88	; 0x58
    c210:	4601      	mov	r1, r0
    c212:	4668      	mov	r0, sp
    c214:	f7f7 fc0d 	bl	3a32 <tc_cmac_setup>
    c218:	b180      	cbz	r0, c23c <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    c21a:	462a      	mov	r2, r5
    c21c:	4621      	mov	r1, r4
    c21e:	4668      	mov	r0, sp
    c220:	f7f7 fc34 	bl	3a8c <tc_cmac_update>
    c224:	b168      	cbz	r0, c242 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    c226:	4669      	mov	r1, sp
    c228:	4630      	mov	r0, r6
    c22a:	f7f7 fc99 	bl	3b60 <tc_cmac_final>
    c22e:	b110      	cbz	r0, c236 <bt_smp_aes_cmac+0x32>
	return 0;
    c230:	2000      	movs	r0, #0
}
    c232:	b042      	add	sp, #264	; 0x108
    c234:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    c236:	f06f 0004 	mvn.w	r0, #4
    c23a:	e7fa      	b.n	c232 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    c23c:	f06f 0004 	mvn.w	r0, #4
    c240:	e7f7      	b.n	c232 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    c242:	f06f 0004 	mvn.w	r0, #4
    c246:	e7f4      	b.n	c232 <bt_smp_aes_cmac+0x2e>

0000c248 <smp_sign_buf>:
{
    c248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c24c:	b08b      	sub	sp, #44	; 0x2c
    c24e:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    c250:	188f      	adds	r7, r1, r2
    c252:	683b      	ldr	r3, [r7, #0]
    c254:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    c256:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    c258:	2300      	movs	r3, #0
    c25a:	e006      	b.n	c26a <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    c25c:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c25e:	1af1      	subs	r1, r6, r3
    c260:	3901      	subs	r1, #1
    c262:	5c6c      	ldrb	r4, [r5, r1]
    c264:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c266:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    c268:	3301      	adds	r3, #1
    c26a:	ea4f 0856 	mov.w	r8, r6, lsr #1
    c26e:	4543      	cmp	r3, r8
    c270:	d3f4      	bcc.n	c25c <smp_sign_buf+0x14>
	src += length - 1;
    c272:	300f      	adds	r0, #15
    c274:	2410      	movs	r4, #16
    c276:	ab05      	add	r3, sp, #20
    c278:	e004      	b.n	c284 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c27a:	7802      	ldrb	r2, [r0, #0]
    c27c:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    c27e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c280:	3801      	subs	r0, #1
    c282:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    c284:	2c00      	cmp	r4, #0
    c286:	d1f8      	bne.n	c27a <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    c288:	ab01      	add	r3, sp, #4
    c28a:	4632      	mov	r2, r6
    c28c:	4629      	mov	r1, r5
    c28e:	a805      	add	r0, sp, #20
    c290:	f7ff ffb8 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c294:	4681      	mov	r9, r0
    c296:	bb08      	cbnz	r0, c2dc <smp_sign_buf+0x94>
    c298:	4623      	mov	r3, r4
    c29a:	e009      	b.n	c2b0 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    c29c:	aa01      	add	r2, sp, #4
    c29e:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c2a0:	f1c3 010f 	rsb	r1, r3, #15
    c2a4:	f812 e001 	ldrb.w	lr, [r2, r1]
    c2a8:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c2ac:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    c2ae:	3301      	adds	r3, #1
    c2b0:	2b07      	cmp	r3, #7
    c2b2:	d9f3      	bls.n	c29c <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    c2b4:	2204      	movs	r2, #4
    c2b6:	a909      	add	r1, sp, #36	; 0x24
    c2b8:	a802      	add	r0, sp, #8
    c2ba:	f7f4 f801 	bl	2c0 <memcpy>
    c2be:	e006      	b.n	c2ce <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    c2c0:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c2c2:	1b33      	subs	r3, r6, r4
    c2c4:	3b01      	subs	r3, #1
    c2c6:	5ce9      	ldrb	r1, [r5, r3]
    c2c8:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c2ca:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    c2cc:	3401      	adds	r4, #1
    c2ce:	45a0      	cmp	r8, r4
    c2d0:	d8f6      	bhi.n	c2c0 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    c2d2:	220c      	movs	r2, #12
    c2d4:	a902      	add	r1, sp, #8
    c2d6:	4638      	mov	r0, r7
    c2d8:	f7f3 fff2 	bl	2c0 <memcpy>
}
    c2dc:	4648      	mov	r0, r9
    c2de:	b00b      	add	sp, #44	; 0x2c
    c2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c2e4 <smp_f4>:
{
    c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2e6:	b097      	sub	sp, #92	; 0x5c
    c2e8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    c2ea:	301f      	adds	r0, #31
    c2ec:	2420      	movs	r4, #32
    c2ee:	ad01      	add	r5, sp, #4
    c2f0:	e004      	b.n	c2fc <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c2f2:	7807      	ldrb	r7, [r0, #0]
    c2f4:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    c2f6:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c2f8:	3801      	subs	r0, #1
    c2fa:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    c2fc:	2c00      	cmp	r4, #0
    c2fe:	d1f8      	bne.n	c2f2 <smp_f4+0xe>
	src += length - 1;
    c300:	311f      	adds	r1, #31
    c302:	2020      	movs	r0, #32
    c304:	ac09      	add	r4, sp, #36	; 0x24
    c306:	e004      	b.n	c312 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c308:	780d      	ldrb	r5, [r1, #0]
    c30a:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    c30c:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c30e:	3901      	subs	r1, #1
    c310:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    c312:	2800      	cmp	r0, #0
    c314:	d1f8      	bne.n	c308 <smp_f4+0x24>
	m[64] = z;
    c316:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    c31a:	320f      	adds	r2, #15
    c31c:	2410      	movs	r4, #16
    c31e:	ab12      	add	r3, sp, #72	; 0x48
    c320:	e004      	b.n	c32c <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c322:	7811      	ldrb	r1, [r2, #0]
    c324:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    c326:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c328:	3a01      	subs	r2, #1
    c32a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    c32c:	2c00      	cmp	r4, #0
    c32e:	d1f8      	bne.n	c322 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    c330:	4633      	mov	r3, r6
    c332:	2241      	movs	r2, #65	; 0x41
    c334:	a901      	add	r1, sp, #4
    c336:	a812      	add	r0, sp, #72	; 0x48
    c338:	f7ff ff64 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c33c:	4605      	mov	r5, r0
    c33e:	b138      	cbz	r0, c350 <smp_f4+0x6c>
    c340:	e008      	b.n	c354 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    c342:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c344:	f1c4 030f 	rsb	r3, r4, #15
    c348:	5cf1      	ldrb	r1, [r6, r3]
    c34a:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c34c:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    c34e:	3401      	adds	r4, #1
    c350:	2c07      	cmp	r4, #7
    c352:	d9f6      	bls.n	c342 <smp_f4+0x5e>
}
    c354:	4628      	mov	r0, r5
    c356:	b017      	add	sp, #92	; 0x5c
    c358:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c35c <sc_smp_check_confirm>:
	switch (smp->method) {
    c35c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    c360:	2b03      	cmp	r3, #3
    c362:	d827      	bhi.n	c3b4 <sc_smp_check_confirm+0x58>
    c364:	e8df f003 	tbb	[pc, r3]
    c368:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c36c:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    c370:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    c374:	40d3      	lsrs	r3, r2
    c376:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    c37a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c37e:	b2db      	uxtb	r3, r3
		break;
    c380:	e000      	b.n	c384 <sc_smp_check_confirm+0x28>
		r = 0;
    c382:	2300      	movs	r3, #0
{
    c384:	b510      	push	{r4, lr}
    c386:	b086      	sub	sp, #24
    c388:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c38a:	aa02      	add	r2, sp, #8
    c38c:	9200      	str	r2, [sp, #0]
    c38e:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    c392:	490a      	ldr	r1, [pc, #40]	; (c3bc <sc_smp_check_confirm+0x60>)
    c394:	30f3      	adds	r0, #243	; 0xf3
    c396:	f7ff ffa5 	bl	c2e4 <smp_f4>
    c39a:	b110      	cbz	r0, c3a2 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    c39c:	2008      	movs	r0, #8
}
    c39e:	b006      	add	sp, #24
    c3a0:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    c3a2:	2210      	movs	r2, #16
    c3a4:	a902      	add	r1, sp, #8
    c3a6:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    c3aa:	f01f fdd3 	bl	2bf54 <memcmp>
    c3ae:	b118      	cbz	r0, c3b8 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c3b0:	2004      	movs	r0, #4
    c3b2:	e7f4      	b.n	c39e <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c3b4:	2008      	movs	r0, #8
    c3b6:	4770      	bx	lr
	return 0;
    c3b8:	2000      	movs	r0, #0
    c3ba:	e7f0      	b.n	c39e <sc_smp_check_confirm+0x42>
    c3bc:	200009f4 	.word	0x200009f4

0000c3c0 <smp_f5>:
{
    c3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c3c4:	b09b      	sub	sp, #108	; 0x6c
    c3c6:	4604      	mov	r4, r0
    c3c8:	460e      	mov	r6, r1
    c3ca:	4615      	mov	r5, r2
    c3cc:	461f      	mov	r7, r3
    c3ce:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    c3d2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    c3d6:	2235      	movs	r2, #53	; 0x35
    c3d8:	2100      	movs	r1, #0
    c3da:	a80c      	add	r0, sp, #48	; 0x30
    c3dc:	f01f fe4e 	bl	2c07c <memset>
    c3e0:	2362      	movs	r3, #98	; 0x62
    c3e2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    c3e6:	2374      	movs	r3, #116	; 0x74
    c3e8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    c3ec:	236c      	movs	r3, #108	; 0x6c
    c3ee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    c3f2:	2365      	movs	r3, #101	; 0x65
    c3f4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    c3f8:	2301      	movs	r3, #1
    c3fa:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    c3fe:	f104 001f 	add.w	r0, r4, #31
    c402:	2320      	movs	r3, #32
    c404:	466a      	mov	r2, sp
    c406:	e004      	b.n	c412 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c408:	7801      	ldrb	r1, [r0, #0]
    c40a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c40c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c40e:	3801      	subs	r0, #1
    c410:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c412:	2b00      	cmp	r3, #0
    c414:	d1f8      	bne.n	c408 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    c416:	ab08      	add	r3, sp, #32
    c418:	2220      	movs	r2, #32
    c41a:	4669      	mov	r1, sp
    c41c:	4838      	ldr	r0, [pc, #224]	; (c500 <smp_f5+0x140>)
    c41e:	f7ff fef1 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c422:	4686      	mov	lr, r0
    c424:	2800      	cmp	r0, #0
    c426:	d166      	bne.n	c4f6 <smp_f5+0x136>
	src += length - 1;
    c428:	360f      	adds	r6, #15
    c42a:	2310      	movs	r3, #16
    c42c:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    c430:	e004      	b.n	c43c <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c432:	7831      	ldrb	r1, [r6, #0]
    c434:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c436:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c438:	3e01      	subs	r6, #1
    c43a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c43c:	2b00      	cmp	r3, #0
    c43e:	d1f8      	bne.n	c432 <smp_f5+0x72>
	src += length - 1;
    c440:	350f      	adds	r5, #15
    c442:	2310      	movs	r3, #16
    c444:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    c448:	e004      	b.n	c454 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c44a:	7829      	ldrb	r1, [r5, #0]
    c44c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c44e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c450:	3d01      	subs	r5, #1
    c452:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c454:	2b00      	cmp	r3, #0
    c456:	d1f8      	bne.n	c44a <smp_f5+0x8a>
	m[37] = a1->type;
    c458:	f817 3b06 	ldrb.w	r3, [r7], #6
    c45c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    c460:	2306      	movs	r3, #6
    c462:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    c466:	e004      	b.n	c472 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c468:	7839      	ldrb	r1, [r7, #0]
    c46a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c46c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c46e:	3f01      	subs	r7, #1
    c470:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c472:	2b00      	cmp	r3, #0
    c474:	d1f8      	bne.n	c468 <smp_f5+0xa8>
	m[44] = a2->type;
    c476:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c478:	f813 2b06 	ldrb.w	r2, [r3], #6
    c47c:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    c480:	2406      	movs	r4, #6
    c482:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    c486:	e004      	b.n	c492 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c488:	7819      	ldrb	r1, [r3, #0]
    c48a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c48c:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c48e:	3b01      	subs	r3, #1
    c490:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c492:	2c00      	cmp	r4, #0
    c494:	d1f8      	bne.n	c488 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    c496:	4643      	mov	r3, r8
    c498:	2235      	movs	r2, #53	; 0x35
    c49a:	a90c      	add	r1, sp, #48	; 0x30
    c49c:	a808      	add	r0, sp, #32
    c49e:	f7ff feb1 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c4a2:	4686      	mov	lr, r0
    c4a4:	bb38      	cbnz	r0, c4f6 <smp_f5+0x136>
    c4a6:	4623      	mov	r3, r4
    c4a8:	e00a      	b.n	c4c0 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    c4aa:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c4ae:	f1c3 020f 	rsb	r2, r3, #15
    c4b2:	f818 0002 	ldrb.w	r0, [r8, r2]
    c4b6:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c4ba:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    c4be:	3301      	adds	r3, #1
    c4c0:	2b07      	cmp	r3, #7
    c4c2:	d9f2      	bls.n	c4aa <smp_f5+0xea>
	m[0] = 0x01;
    c4c4:	a91a      	add	r1, sp, #104	; 0x68
    c4c6:	2301      	movs	r3, #1
    c4c8:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    c4cc:	464b      	mov	r3, r9
    c4ce:	2235      	movs	r2, #53	; 0x35
    c4d0:	a808      	add	r0, sp, #32
    c4d2:	f7ff fe97 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c4d6:	4686      	mov	lr, r0
    c4d8:	b158      	cbz	r0, c4f2 <smp_f5+0x132>
    c4da:	e00c      	b.n	c4f6 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    c4dc:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c4e0:	f1c4 030f 	rsb	r3, r4, #15
    c4e4:	f819 1003 	ldrb.w	r1, [r9, r3]
    c4e8:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c4ec:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    c4f0:	3401      	adds	r4, #1
    c4f2:	2c07      	cmp	r4, #7
    c4f4:	d9f2      	bls.n	c4dc <smp_f5+0x11c>
}
    c4f6:	4670      	mov	r0, lr
    c4f8:	b01b      	add	sp, #108	; 0x6c
    c4fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c4fe:	bf00      	nop
    c500:	0003317c 	.word	0x0003317c

0000c504 <smp_f6>:
{
    c504:	b5f0      	push	{r4, r5, r6, r7, lr}
    c506:	b097      	sub	sp, #92	; 0x5c
    c508:	4604      	mov	r4, r0
    c50a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    c50c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    c50e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    c510:	310f      	adds	r1, #15
    c512:	2010      	movs	r0, #16
    c514:	f10d 0e04 	add.w	lr, sp, #4
    c518:	e007      	b.n	c52a <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c51a:	f891 c000 	ldrb.w	ip, [r1]
    c51e:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    c522:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c524:	3901      	subs	r1, #1
    c526:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    c52a:	2800      	cmp	r0, #0
    c52c:	d1f5      	bne.n	c51a <smp_f6+0x16>
	src += length - 1;
    c52e:	320f      	adds	r2, #15
    c530:	2110      	movs	r1, #16
    c532:	a805      	add	r0, sp, #20
    c534:	e006      	b.n	c544 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c536:	f892 e000 	ldrb.w	lr, [r2]
    c53a:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    c53e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c540:	3a01      	subs	r2, #1
    c542:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    c544:	2900      	cmp	r1, #0
    c546:	d1f6      	bne.n	c536 <smp_f6+0x32>
	src += length - 1;
    c548:	330f      	adds	r3, #15
    c54a:	2210      	movs	r2, #16
    c54c:	a909      	add	r1, sp, #36	; 0x24
    c54e:	e004      	b.n	c55a <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c550:	7818      	ldrb	r0, [r3, #0]
    c552:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    c554:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c556:	3b01      	subs	r3, #1
    c558:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    c55a:	2a00      	cmp	r2, #0
    c55c:	d1f8      	bne.n	c550 <smp_f6+0x4c>
	src += length - 1;
    c55e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c560:	3302      	adds	r3, #2
    c562:	2203      	movs	r2, #3
    c564:	a90d      	add	r1, sp, #52	; 0x34
    c566:	e004      	b.n	c572 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c568:	7818      	ldrb	r0, [r3, #0]
    c56a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    c56c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c56e:	3b01      	subs	r3, #1
    c570:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    c572:	2a00      	cmp	r2, #0
    c574:	d1f8      	bne.n	c568 <smp_f6+0x64>
	m[51] = a1->type;
    c576:	4631      	mov	r1, r6
    c578:	f811 3b01 	ldrb.w	r3, [r1], #1
    c57c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    c580:	2206      	movs	r2, #6
    c582:	a80e      	add	r0, sp, #56	; 0x38
    c584:	f7f3 fe9c 	bl	2c0 <memcpy>
	src += length - 1;
    c588:	3606      	adds	r6, #6
    c58a:	2306      	movs	r3, #6
    c58c:	aa0e      	add	r2, sp, #56	; 0x38
    c58e:	e004      	b.n	c59a <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c590:	7831      	ldrb	r1, [r6, #0]
    c592:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c594:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c596:	3e01      	subs	r6, #1
    c598:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c59a:	2b00      	cmp	r3, #0
    c59c:	d1f8      	bne.n	c590 <smp_f6+0x8c>
	m[58] = a2->type;
    c59e:	4629      	mov	r1, r5
    c5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
    c5a4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    c5a8:	2206      	movs	r2, #6
    c5aa:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    c5ae:	f7f3 fe87 	bl	2c0 <memcpy>
	src += length - 1;
    c5b2:	3506      	adds	r5, #6
    c5b4:	2306      	movs	r3, #6
    c5b6:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    c5ba:	e004      	b.n	c5c6 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c5bc:	7829      	ldrb	r1, [r5, #0]
    c5be:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    c5c0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c5c2:	3d01      	subs	r5, #1
    c5c4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d1f8      	bne.n	c5bc <smp_f6+0xb8>
	src += length - 1;
    c5ca:	f104 000f 	add.w	r0, r4, #15
    c5ce:	2410      	movs	r4, #16
    c5d0:	ab12      	add	r3, sp, #72	; 0x48
    c5d2:	e004      	b.n	c5de <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c5d4:	7802      	ldrb	r2, [r0, #0]
    c5d6:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    c5d8:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c5da:	3801      	subs	r0, #1
    c5dc:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    c5de:	2c00      	cmp	r4, #0
    c5e0:	d1f8      	bne.n	c5d4 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    c5e2:	463b      	mov	r3, r7
    c5e4:	2241      	movs	r2, #65	; 0x41
    c5e6:	a901      	add	r1, sp, #4
    c5e8:	a812      	add	r0, sp, #72	; 0x48
    c5ea:	f7ff fe0b 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c5ee:	4605      	mov	r5, r0
    c5f0:	b138      	cbz	r0, c602 <smp_f6+0xfe>
    c5f2:	e008      	b.n	c606 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    c5f4:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    c5f6:	f1c4 030f 	rsb	r3, r4, #15
    c5fa:	5cf9      	ldrb	r1, [r7, r3]
    c5fc:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    c5fe:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    c600:	3401      	adds	r4, #1
    c602:	2c07      	cmp	r4, #7
    c604:	d9f6      	bls.n	c5f4 <smp_f6+0xf0>
}
    c606:	4628      	mov	r0, r5
    c608:	b017      	add	sp, #92	; 0x5c
    c60a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c60c <compute_and_send_master_dhcheck>:
{
    c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c60e:	b08d      	sub	sp, #52	; 0x34
    c610:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    c612:	2210      	movs	r2, #16
    c614:	2100      	movs	r1, #0
    c616:	eb0d 0002 	add.w	r0, sp, r2
    c61a:	f01f fd2f 	bl	2c07c <memset>
	switch (smp->method) {
    c61e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c622:	2b03      	cmp	r3, #3
    c624:	d84a      	bhi.n	c6bc <compute_and_send_master_dhcheck+0xb0>
    c626:	e8df f003 	tbb	[pc, r3]
    c62a:	0208      	.short	0x0208
    c62c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    c62e:	2204      	movs	r2, #4
    c630:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    c634:	a804      	add	r0, sp, #16
    c636:	f7f3 fe43 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    c63a:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    c63e:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    c642:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    c644:	f103 0256 	add.w	r2, r3, #86	; 0x56
    c648:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    c64c:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    c650:	9102      	str	r1, [sp, #8]
    c652:	9501      	str	r5, [sp, #4]
    c654:	9200      	str	r2, [sp, #0]
    c656:	334f      	adds	r3, #79	; 0x4f
    c658:	463a      	mov	r2, r7
    c65a:	4631      	mov	r1, r6
    c65c:	f204 1033 	addw	r0, r4, #307	; 0x133
    c660:	f7ff feae 	bl	c3c0 <smp_f5>
    c664:	b110      	cbz	r0, c66c <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    c666:	2008      	movs	r0, #8
}
    c668:	b00d      	add	sp, #52	; 0x34
    c66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    c66c:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    c670:	6823      	ldr	r3, [r4, #0]
    c672:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    c676:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    c678:	a808      	add	r0, sp, #32
    c67a:	9003      	str	r0, [sp, #12]
    c67c:	9302      	str	r3, [sp, #8]
    c67e:	9101      	str	r1, [sp, #4]
    c680:	9200      	str	r2, [sp, #0]
    c682:	ab04      	add	r3, sp, #16
    c684:	463a      	mov	r2, r7
    c686:	4631      	mov	r1, r6
    c688:	4628      	mov	r0, r5
    c68a:	f7ff ff3b 	bl	c504 <smp_f6>
    c68e:	b108      	cbz	r0, c694 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    c690:	2008      	movs	r0, #8
    c692:	e7e9      	b.n	c668 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c694:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c698:	f3bf 8f5b 	dmb	ish
    c69c:	e853 2f00 	ldrex	r2, [r3]
    c6a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c6a4:	e843 2100 	strex	r1, r2, [r3]
    c6a8:	2900      	cmp	r1, #0
    c6aa:	d1f7      	bne.n	c69c <compute_and_send_master_dhcheck+0x90>
    c6ac:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    c6b0:	a908      	add	r1, sp, #32
    c6b2:	4620      	mov	r0, r4
    c6b4:	f7ff fd30 	bl	c118 <sc_smp_send_dhkey_check>
	return 0;
    c6b8:	2000      	movs	r0, #0
    c6ba:	e7d5      	b.n	c668 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    c6bc:	2008      	movs	r0, #8
    c6be:	e7d3      	b.n	c668 <compute_and_send_master_dhcheck+0x5c>

0000c6c0 <compute_and_check_and_send_slave_dhcheck>:
{
    c6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6c2:	b091      	sub	sp, #68	; 0x44
    c6c4:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    c6c6:	2210      	movs	r2, #16
    c6c8:	2100      	movs	r1, #0
    c6ca:	eb0d 0002 	add.w	r0, sp, r2
    c6ce:	f01f fcd5 	bl	2c07c <memset>
	switch (smp->method) {
    c6d2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c6d6:	2b03      	cmp	r3, #3
    c6d8:	d866      	bhi.n	c7a8 <compute_and_check_and_send_slave_dhcheck+0xe8>
    c6da:	e8df f003 	tbb	[pc, r3]
    c6de:	0208      	.short	0x0208
    c6e0:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    c6e2:	2204      	movs	r2, #4
    c6e4:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    c6e8:	a804      	add	r0, sp, #16
    c6ea:	f7f3 fde9 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    c6ee:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    c6f2:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    c6f6:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    c6f8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    c6fc:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    c700:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    c704:	9102      	str	r1, [sp, #8]
    c706:	9501      	str	r5, [sp, #4]
    c708:	9200      	str	r2, [sp, #0]
    c70a:	334f      	adds	r3, #79	; 0x4f
    c70c:	463a      	mov	r2, r7
    c70e:	4631      	mov	r1, r6
    c710:	f204 1033 	addw	r0, r4, #307	; 0x133
    c714:	f7ff fe54 	bl	c3c0 <smp_f5>
    c718:	b110      	cbz	r0, c720 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    c71a:	2008      	movs	r0, #8
}
    c71c:	b011      	add	sp, #68	; 0x44
    c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    c720:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    c724:	6823      	ldr	r3, [r4, #0]
    c726:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    c72a:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    c72c:	a808      	add	r0, sp, #32
    c72e:	9003      	str	r0, [sp, #12]
    c730:	9302      	str	r3, [sp, #8]
    c732:	9101      	str	r1, [sp, #4]
    c734:	9200      	str	r2, [sp, #0]
    c736:	ab04      	add	r3, sp, #16
    c738:	4632      	mov	r2, r6
    c73a:	4639      	mov	r1, r7
    c73c:	4628      	mov	r0, r5
    c73e:	f7ff fee1 	bl	c504 <smp_f6>
    c742:	b108      	cbz	r0, c748 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    c744:	2008      	movs	r0, #8
    c746:	e7e9      	b.n	c71c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    c748:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    c74c:	6823      	ldr	r3, [r4, #0]
    c74e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    c752:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    c754:	a80c      	add	r0, sp, #48	; 0x30
    c756:	9003      	str	r0, [sp, #12]
    c758:	9302      	str	r3, [sp, #8]
    c75a:	9101      	str	r1, [sp, #4]
    c75c:	9200      	str	r2, [sp, #0]
    c75e:	ab04      	add	r3, sp, #16
    c760:	463a      	mov	r2, r7
    c762:	4631      	mov	r1, r6
    c764:	4628      	mov	r0, r5
    c766:	f7ff fecd 	bl	c504 <smp_f6>
    c76a:	b108      	cbz	r0, c770 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    c76c:	2008      	movs	r0, #8
    c76e:	e7d5      	b.n	c71c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    c770:	2210      	movs	r2, #16
    c772:	a90c      	add	r1, sp, #48	; 0x30
    c774:	f204 1053 	addw	r0, r4, #339	; 0x153
    c778:	f01f fbec 	bl	2bf54 <memcmp>
    c77c:	b108      	cbz	r0, c782 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    c77e:	200b      	movs	r0, #11
    c780:	e7cc      	b.n	c71c <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    c782:	a908      	add	r1, sp, #32
    c784:	4620      	mov	r0, r4
    c786:	f7ff fcc7 	bl	c118 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c78a:	34a0      	adds	r4, #160	; 0xa0
    c78c:	f3bf 8f5b 	dmb	ish
    c790:	e854 3f00 	ldrex	r3, [r4]
    c794:	f043 0302 	orr.w	r3, r3, #2
    c798:	e844 3200 	strex	r2, r3, [r4]
    c79c:	2a00      	cmp	r2, #0
    c79e:	d1f7      	bne.n	c790 <compute_and_check_and_send_slave_dhcheck+0xd0>
    c7a0:	f3bf 8f5b 	dmb	ish
	return 0;
    c7a4:	2000      	movs	r0, #0
    c7a6:	e7b9      	b.n	c71c <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    c7a8:	2008      	movs	r0, #8
    c7aa:	e7b7      	b.n	c71c <compute_and_check_and_send_slave_dhcheck+0x5c>

0000c7ac <smp_g2>:
{
    c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7ae:	b099      	sub	sp, #100	; 0x64
    c7b0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    c7b2:	301f      	adds	r0, #31
    c7b4:	2520      	movs	r5, #32
    c7b6:	ae04      	add	r6, sp, #16
    c7b8:	e004      	b.n	c7c4 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7ba:	7807      	ldrb	r7, [r0, #0]
    c7bc:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    c7be:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7c0:	3801      	subs	r0, #1
    c7c2:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    c7c4:	2d00      	cmp	r5, #0
    c7c6:	d1f8      	bne.n	c7ba <smp_g2+0xe>
	src += length - 1;
    c7c8:	311f      	adds	r1, #31
    c7ca:	2020      	movs	r0, #32
    c7cc:	ad0c      	add	r5, sp, #48	; 0x30
    c7ce:	e004      	b.n	c7da <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7d0:	780e      	ldrb	r6, [r1, #0]
    c7d2:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    c7d4:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7d6:	3901      	subs	r1, #1
    c7d8:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    c7da:	2800      	cmp	r0, #0
    c7dc:	d1f8      	bne.n	c7d0 <smp_g2+0x24>
	src += length - 1;
    c7de:	330f      	adds	r3, #15
    c7e0:	2110      	movs	r1, #16
    c7e2:	a814      	add	r0, sp, #80	; 0x50
    c7e4:	e004      	b.n	c7f0 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7e6:	781d      	ldrb	r5, [r3, #0]
    c7e8:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    c7ea:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7ec:	3b01      	subs	r3, #1
    c7ee:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    c7f0:	2900      	cmp	r1, #0
    c7f2:	d1f8      	bne.n	c7e6 <smp_g2+0x3a>
	src += length - 1;
    c7f4:	320f      	adds	r2, #15
    c7f6:	2310      	movs	r3, #16
    c7f8:	4669      	mov	r1, sp
    c7fa:	e004      	b.n	c806 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    c7fc:	7810      	ldrb	r0, [r2, #0]
    c7fe:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    c800:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    c802:	3a01      	subs	r2, #1
    c804:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    c806:	2b00      	cmp	r3, #0
    c808:	d1f8      	bne.n	c7fc <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c80a:	466b      	mov	r3, sp
    c80c:	2250      	movs	r2, #80	; 0x50
    c80e:	a904      	add	r1, sp, #16
    c810:	4668      	mov	r0, sp
    c812:	f7ff fcf7 	bl	c204 <bt_smp_aes_cmac>
	if (err) {
    c816:	4605      	mov	r5, r0
    c818:	b110      	cbz	r0, c820 <smp_g2+0x74>
}
    c81a:	4628      	mov	r0, r5
    c81c:	b019      	add	sp, #100	; 0x64
    c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    c820:	2204      	movs	r2, #4
    c822:	a903      	add	r1, sp, #12
    c824:	4620      	mov	r0, r4
    c826:	f7f3 fd4b 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c82a:	6822      	ldr	r2, [r4, #0]
    c82c:	0a13      	lsrs	r3, r2, #8
    c82e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c832:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c836:	0211      	lsls	r1, r2, #8
    c838:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    c83c:	430b      	orrs	r3, r1
    c83e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    c842:	4a04      	ldr	r2, [pc, #16]	; (c854 <smp_g2+0xa8>)
    c844:	fba2 1203 	umull	r1, r2, r2, r3
    c848:	0c92      	lsrs	r2, r2, #18
    c84a:	4903      	ldr	r1, [pc, #12]	; (c858 <smp_g2+0xac>)
    c84c:	fb01 3212 	mls	r2, r1, r2, r3
    c850:	6022      	str	r2, [r4, #0]
	return 0;
    c852:	e7e2      	b.n	c81a <smp_g2+0x6e>
    c854:	431bde83 	.word	0x431bde83
    c858:	000f4240 	.word	0x000f4240

0000c85c <smp_send_pairing_confirm>:
{
    c85c:	b570      	push	{r4, r5, r6, lr}
    c85e:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    c860:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    c862:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    c866:	2b03      	cmp	r3, #3
    c868:	d83f      	bhi.n	c8ea <smp_send_pairing_confirm+0x8e>
    c86a:	e8df f003 	tbb	[pc, r3]
    c86e:	020d      	.short	0x020d
    c870:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c872:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    c876:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    c87a:	40dd      	lsrs	r5, r3
    c87c:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    c880:	f065 057f 	orn	r5, r5, #127	; 0x7f
    c884:	b2ed      	uxtb	r5, r5
		break;
    c886:	e000      	b.n	c88a <smp_send_pairing_confirm+0x2e>
		r = 0;
    c888:	2500      	movs	r5, #0
    c88a:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    c88c:	2210      	movs	r2, #16
    c88e:	2103      	movs	r1, #3
    c890:	4630      	mov	r0, r6
    c892:	f7ff fbdc 	bl	c04e <smp_create_pdu>
	if (!buf) {
    c896:	4606      	mov	r6, r0
    c898:	b348      	cbz	r0, c8ee <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    c89a:	2110      	movs	r1, #16
    c89c:	3008      	adds	r0, #8
    c89e:	f00f fd35 	bl	1c30c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    c8a2:	9000      	str	r0, [sp, #0]
    c8a4:	462b      	mov	r3, r5
    c8a6:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    c8aa:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    c8ae:	4811      	ldr	r0, [pc, #68]	; (c8f4 <smp_send_pairing_confirm+0x98>)
    c8b0:	f7ff fd18 	bl	c2e4 <smp_f4>
    c8b4:	b120      	cbz	r0, c8c0 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    c8b6:	4630      	mov	r0, r6
    c8b8:	f00f fcdc 	bl	1c274 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    c8bc:	2008      	movs	r0, #8
    c8be:	e017      	b.n	c8f0 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    c8c0:	2200      	movs	r2, #0
    c8c2:	4631      	mov	r1, r6
    c8c4:	4620      	mov	r0, r4
    c8c6:	f7ff fc15 	bl	c0f4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c8ca:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c8ce:	f3bf 8f5b 	dmb	ish
    c8d2:	e850 3f00 	ldrex	r3, [r0]
    c8d6:	f023 0301 	bic.w	r3, r3, #1
    c8da:	e840 3200 	strex	r2, r3, [r0]
    c8de:	2a00      	cmp	r2, #0
    c8e0:	d1f7      	bne.n	c8d2 <smp_send_pairing_confirm+0x76>
    c8e2:	f3bf 8f5b 	dmb	ish
	return 0;
    c8e6:	2000      	movs	r0, #0
    c8e8:	e002      	b.n	c8f0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    c8ea:	2008      	movs	r0, #8
    c8ec:	e000      	b.n	c8f0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    c8ee:	2008      	movs	r0, #8
}
    c8f0:	b002      	add	sp, #8
    c8f2:	bd70      	pop	{r4, r5, r6, pc}
    c8f4:	200009f4 	.word	0x200009f4

0000c8f8 <smp_c1>:
{
    c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8fc:	b088      	sub	sp, #32
    c8fe:	4604      	mov	r4, r0
    c900:	460f      	mov	r7, r1
    c902:	4611      	mov	r1, r2
    c904:	4698      	mov	r8, r3
    c906:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    c908:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    c90a:	782b      	ldrb	r3, [r5, #0]
    c90c:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    c910:	7833      	ldrb	r3, [r6, #0]
    c912:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    c916:	2207      	movs	r2, #7
    c918:	f10d 0012 	add.w	r0, sp, #18
    c91c:	f7f3 fcd0 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    c920:	2207      	movs	r2, #7
    c922:	4641      	mov	r1, r8
    c924:	f10d 0019 	add.w	r0, sp, #25
    c928:	f7f3 fcca 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    c92c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c92e:	a904      	add	r1, sp, #16
    c930:	4638      	mov	r0, r7
    c932:	f7ff faf3 	bl	bf1c <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    c936:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c938:	4611      	mov	r1, r2
    c93a:	4620      	mov	r0, r4
    c93c:	f006 f98c 	bl	12c58 <bt_encrypt_le>
	if (err) {
    c940:	4603      	mov	r3, r0
    c942:	b118      	cbz	r0, c94c <smp_c1+0x54>
}
    c944:	4618      	mov	r0, r3
    c946:	b008      	add	sp, #32
    c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    c94c:	2206      	movs	r2, #6
    c94e:	1c71      	adds	r1, r6, #1
    c950:	4668      	mov	r0, sp
    c952:	f7f3 fcb5 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    c956:	2206      	movs	r2, #6
    c958:	1c69      	adds	r1, r5, #1
    c95a:	eb0d 0002 	add.w	r0, sp, r2
    c95e:	f7f3 fcaf 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    c962:	2204      	movs	r2, #4
    c964:	2100      	movs	r1, #0
    c966:	a803      	add	r0, sp, #12
    c968:	f01f fb88 	bl	2c07c <memset>
	xor_128(enc_data, p2, enc_data);
    c96c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c96e:	4669      	mov	r1, sp
    c970:	4610      	mov	r0, r2
    c972:	f7ff fad3 	bl	bf1c <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    c976:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c978:	4611      	mov	r1, r2
    c97a:	4620      	mov	r0, r4
    c97c:	f006 f96c 	bl	12c58 <bt_encrypt_le>
    c980:	4603      	mov	r3, r0
    c982:	e7df      	b.n	c944 <smp_c1+0x4c>

0000c984 <legacy_send_pairing_confirm>:
{
    c984:	b570      	push	{r4, r5, r6, lr}
    c986:	b084      	sub	sp, #16
    c988:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c98a:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    c98c:	2210      	movs	r2, #16
    c98e:	2103      	movs	r1, #3
    c990:	4628      	mov	r0, r5
    c992:	f7ff fb5c 	bl	c04e <smp_create_pdu>
	if (!buf) {
    c996:	b370      	cbz	r0, c9f6 <legacy_send_pairing_confirm+0x72>
    c998:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    c99a:	2110      	movs	r1, #16
    c99c:	3008      	adds	r0, #8
    c99e:	f00f fcb5 	bl	1c30c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    c9a2:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    c9a6:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    c9a8:	9002      	str	r0, [sp, #8]
    c9aa:	9501      	str	r5, [sp, #4]
    c9ac:	9300      	str	r3, [sp, #0]
    c9ae:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    c9b2:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    c9b6:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    c9ba:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c9be:	f7ff ff9b 	bl	c8f8 <smp_c1>
    c9c2:	b120      	cbz	r0, c9ce <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    c9c4:	4630      	mov	r0, r6
    c9c6:	f00f fc55 	bl	1c274 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    c9ca:	2008      	movs	r0, #8
    c9cc:	e014      	b.n	c9f8 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    c9ce:	2200      	movs	r2, #0
    c9d0:	4631      	mov	r1, r6
    c9d2:	4620      	mov	r0, r4
    c9d4:	f7ff fb8e 	bl	c0f4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    c9d8:	34a0      	adds	r4, #160	; 0xa0
    c9da:	f3bf 8f5b 	dmb	ish
    c9de:	e854 3f00 	ldrex	r3, [r4]
    c9e2:	f023 0301 	bic.w	r3, r3, #1
    c9e6:	e844 3200 	strex	r2, r3, [r4]
    c9ea:	2a00      	cmp	r2, #0
    c9ec:	d1f7      	bne.n	c9de <legacy_send_pairing_confirm+0x5a>
    c9ee:	f3bf 8f5b 	dmb	ish
	return 0;
    c9f2:	2000      	movs	r0, #0
    c9f4:	e000      	b.n	c9f8 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    c9f6:	2008      	movs	r0, #8
}
    c9f8:	b004      	add	sp, #16
    c9fa:	bd70      	pop	{r4, r5, r6, pc}

0000c9fc <legacy_pairing_confirm>:
{
    c9fc:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c9fe:	6803      	ldr	r3, [r0, #0]
    ca00:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ca02:	b1c3      	cbz	r3, ca36 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ca04:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca08:	f3bf 8f5b 	dmb	ish
    ca0c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    ca10:	f3bf 8f5b 	dmb	ish
    ca14:	f412 7f00 	tst.w	r2, #512	; 0x200
    ca18:	d01e      	beq.n	ca58 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca1a:	f3bf 8f5b 	dmb	ish
    ca1e:	e853 2f00 	ldrex	r2, [r3]
    ca22:	f042 0201 	orr.w	r2, r2, #1
    ca26:	e843 2100 	strex	r1, r2, [r3]
    ca2a:	2900      	cmp	r1, #0
    ca2c:	d1f7      	bne.n	ca1e <legacy_pairing_confirm+0x22>
    ca2e:	f3bf 8f5b 	dmb	ish
	return 0;
    ca32:	2000      	movs	r0, #0
}
    ca34:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ca36:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    ca3a:	f3bf 8f5b 	dmb	ish
    ca3e:	e853 2f00 	ldrex	r2, [r3]
    ca42:	f042 0208 	orr.w	r2, r2, #8
    ca46:	e843 2100 	strex	r1, r2, [r3]
    ca4a:	2900      	cmp	r1, #0
    ca4c:	d1f7      	bne.n	ca3e <legacy_pairing_confirm+0x42>
    ca4e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    ca52:	f7ff ff97 	bl	c984 <legacy_send_pairing_confirm>
    ca56:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    ca58:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    ca5c:	f3bf 8f5b 	dmb	ish
    ca60:	e853 2f00 	ldrex	r2, [r3]
    ca64:	f042 0210 	orr.w	r2, r2, #16
    ca68:	e843 2100 	strex	r1, r2, [r3]
    ca6c:	2900      	cmp	r1, #0
    ca6e:	d1f7      	bne.n	ca60 <legacy_pairing_confirm+0x64>
    ca70:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    ca74:	f7ff ff86 	bl	c984 <legacy_send_pairing_confirm>
    ca78:	bd08      	pop	{r3, pc}

0000ca7a <smp_pairing_confirm>:
{
    ca7a:	b510      	push	{r4, lr}
    ca7c:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    ca7e:	2210      	movs	r2, #16
    ca80:	6889      	ldr	r1, [r1, #8]
    ca82:	30b3      	adds	r0, #179	; 0xb3
    ca84:	f7f3 fc1c 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ca88:	6823      	ldr	r3, [r4, #0]
    ca8a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ca8c:	b313      	cbz	r3, cad4 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ca8e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca92:	f3bf 8f5b 	dmb	ish
    ca96:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ca9a:	f3bf 8f5b 	dmb	ish
    ca9e:	f013 0f20 	tst.w	r3, #32
    caa2:	d029      	beq.n	caf8 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    caa4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    caa8:	2b01      	cmp	r3, #1
    caaa:	d029      	beq.n	cb00 <smp_pairing_confirm+0x86>
    caac:	2b02      	cmp	r3, #2
    caae:	d150      	bne.n	cb52 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cab0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cab4:	f3bf 8f5b 	dmb	ish
    cab8:	e853 2f00 	ldrex	r2, [r3]
    cabc:	f042 0210 	orr.w	r2, r2, #16
    cac0:	e843 2100 	strex	r1, r2, [r3]
    cac4:	2900      	cmp	r1, #0
    cac6:	d1f7      	bne.n	cab8 <smp_pairing_confirm+0x3e>
    cac8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    cacc:	4620      	mov	r0, r4
    cace:	f7ff fec5 	bl	c85c <smp_send_pairing_confirm>
    cad2:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cad4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    cad8:	f3bf 8f5b 	dmb	ish
    cadc:	e853 2f00 	ldrex	r2, [r3]
    cae0:	f042 0210 	orr.w	r2, r2, #16
    cae4:	e843 2100 	strex	r1, r2, [r3]
    cae8:	2900      	cmp	r1, #0
    caea:	d1f7      	bne.n	cadc <smp_pairing_confirm+0x62>
    caec:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    caf0:	4620      	mov	r0, r4
    caf2:	f7ff fb6c 	bl	c1ce <smp_send_pairing_random>
    caf6:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    caf8:	4620      	mov	r0, r4
    cafa:	f7ff ff7f 	bl	c9fc <legacy_pairing_confirm>
    cafe:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb00:	f3bf 8f5b 	dmb	ish
    cb04:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cb08:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    cb0c:	f413 7f00 	tst.w	r3, #512	; 0x200
    cb10:	d111      	bne.n	cb36 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cb12:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb16:	f3bf 8f5b 	dmb	ish
    cb1a:	e853 2f00 	ldrex	r2, [r3]
    cb1e:	f042 0210 	orr.w	r2, r2, #16
    cb22:	e843 2100 	strex	r1, r2, [r3]
    cb26:	2900      	cmp	r1, #0
    cb28:	d1f7      	bne.n	cb1a <smp_pairing_confirm+0xa0>
    cb2a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    cb2e:	4620      	mov	r0, r4
    cb30:	f7ff fe94 	bl	c85c <smp_send_pairing_confirm>
    cb34:	bd10      	pop	{r4, pc}
    cb36:	f3bf 8f5b 	dmb	ish
    cb3a:	e852 3f00 	ldrex	r3, [r2]
    cb3e:	f043 0301 	orr.w	r3, r3, #1
    cb42:	e842 3100 	strex	r1, r3, [r2]
    cb46:	2900      	cmp	r1, #0
    cb48:	d1f7      	bne.n	cb3a <smp_pairing_confirm+0xc0>
    cb4a:	f3bf 8f5b 	dmb	ish
			return 0;
    cb4e:	2000      	movs	r0, #0
    cb50:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    cb52:	2008      	movs	r0, #8
}
    cb54:	bd10      	pop	{r4, pc}

0000cb56 <smp_s1>:
{
    cb56:	b570      	push	{r4, r5, r6, lr}
    cb58:	4605      	mov	r5, r0
    cb5a:	460e      	mov	r6, r1
    cb5c:	4611      	mov	r1, r2
    cb5e:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    cb60:	2208      	movs	r2, #8
    cb62:	4618      	mov	r0, r3
    cb64:	f7f3 fbac 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    cb68:	2208      	movs	r2, #8
    cb6a:	4631      	mov	r1, r6
    cb6c:	18a0      	adds	r0, r4, r2
    cb6e:	f7f3 fba7 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    cb72:	4622      	mov	r2, r4
    cb74:	4621      	mov	r1, r4
    cb76:	4628      	mov	r0, r5
    cb78:	f006 f86e 	bl	12c58 <bt_encrypt_le>
}
    cb7c:	bd70      	pop	{r4, r5, r6, pc}

0000cb7e <smp_reset>:
{
    cb7e:	b538      	push	{r3, r4, r5, lr}
    cb80:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cb82:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    cb84:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    cb88:	f01e fdb4 	bl	2b6f4 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    cb8c:	2200      	movs	r2, #0
    cb8e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    cb92:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cb96:	f3bf 8f5b 	dmb	ish
    cb9a:	e853 1f00 	ldrex	r1, [r3]
    cb9e:	e843 2000 	strex	r0, r2, [r3]
    cba2:	2800      	cmp	r0, #0
    cba4:	d1f9      	bne.n	cb9a <smp_reset+0x1c>
    cba6:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    cbaa:	34a0      	adds	r4, #160	; 0xa0
    cbac:	f3bf 8f5b 	dmb	ish
    cbb0:	e854 1f00 	ldrex	r1, [r4]
    cbb4:	e844 2000 	strex	r0, r2, [r4]
    cbb8:	2800      	cmp	r0, #0
    cbba:	d1f9      	bne.n	cbb0 <smp_reset+0x32>
    cbbc:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    cbc0:	7a69      	ldrb	r1, [r5, #9]
    cbc2:	7a2a      	ldrb	r2, [r5, #8]
    cbc4:	4291      	cmp	r1, r2
    cbc6:	d000      	beq.n	cbca <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    cbc8:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    cbca:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    cbcc:	b162      	cbz	r2, cbe8 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cbce:	f3bf 8f5b 	dmb	ish
    cbd2:	e853 2f00 	ldrex	r2, [r3]
    cbd6:	f042 0202 	orr.w	r2, r2, #2
    cbda:	e843 2100 	strex	r1, r2, [r3]
    cbde:	2900      	cmp	r1, #0
    cbe0:	d1f7      	bne.n	cbd2 <smp_reset+0x54>
    cbe2:	f3bf 8f5b 	dmb	ish
    cbe6:	bd38      	pop	{r3, r4, r5, pc}
    cbe8:	f3bf 8f5b 	dmb	ish
    cbec:	e853 2f00 	ldrex	r2, [r3]
    cbf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    cbf4:	e843 2100 	strex	r1, r2, [r3]
    cbf8:	2900      	cmp	r1, #0
    cbfa:	d1f7      	bne.n	cbec <smp_reset+0x6e>
    cbfc:	f3bf 8f5b 	dmb	ish
    cc00:	bd38      	pop	{r3, r4, r5, pc}

0000cc02 <smp_pairing_complete>:
{
    cc02:	b508      	push	{r3, lr}
	smp_reset(smp);
    cc04:	f7ff ffbb 	bl	cb7e <smp_reset>
    cc08:	bd08      	pop	{r3, pc}

0000cc0a <smp_error>:
{
    cc0a:	b570      	push	{r4, r5, r6, lr}
    cc0c:	4604      	mov	r4, r0
    cc0e:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    cc10:	f7ff fff7 	bl	cc02 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    cc14:	2201      	movs	r2, #1
    cc16:	2105      	movs	r1, #5
    cc18:	6820      	ldr	r0, [r4, #0]
    cc1a:	f7ff fa18 	bl	c04e <smp_create_pdu>
	if (!buf) {
    cc1e:	b168      	cbz	r0, cc3c <smp_error+0x32>
    cc20:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    cc22:	2101      	movs	r1, #1
    cc24:	3008      	adds	r0, #8
    cc26:	f00f fb71 	bl	1c30c <net_buf_simple_add>
	rsp->reason = reason;
    cc2a:	7006      	strb	r6, [r0, #0]
    cc2c:	2300      	movs	r3, #0
    cc2e:	462a      	mov	r2, r5
    cc30:	2106      	movs	r1, #6
    cc32:	6820      	ldr	r0, [r4, #0]
    cc34:	f7fc fd01 	bl	963a <bt_l2cap_send_cb>
	return 0;
    cc38:	2000      	movs	r0, #0
    cc3a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    cc3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    cc40:	bd70      	pop	{r4, r5, r6, pc}
	...

0000cc44 <bt_smp_dhkey_ready>:
{
    cc44:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    cc46:	2400      	movs	r4, #0
    cc48:	b384      	cbz	r4, ccac <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    cc4a:	2400      	movs	r4, #0
	if (!smp) {
    cc4c:	b36c      	cbz	r4, ccaa <bt_smp_dhkey_ready+0x66>
    cc4e:	4601      	mov	r1, r0
	if (!dhkey) {
    cc50:	2800      	cmp	r0, #0
    cc52:	d04b      	beq.n	ccec <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    cc54:	2220      	movs	r2, #32
    cc56:	f204 1033 	addw	r0, r4, #307	; 0x133
    cc5a:	f7f3 fb31 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    cc5e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cc62:	f3bf 8f5b 	dmb	ish
    cc66:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    cc6a:	f3bf 8f5b 	dmb	ish
    cc6e:	f412 7f00 	tst.w	r2, #512	; 0x200
    cc72:	d140      	bne.n	ccf6 <bt_smp_dhkey_ready+0xb2>
    cc74:	f3bf 8f5b 	dmb	ish
    cc78:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    cc7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    cc80:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    cc84:	d144      	bne.n	cd10 <bt_smp_dhkey_ready+0xcc>
    cc86:	f3bf 8f5b 	dmb	ish
    cc8a:	681b      	ldr	r3, [r3, #0]
    cc8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    cc90:	f413 7f80 	tst.w	r3, #256	; 0x100
    cc94:	d009      	beq.n	ccaa <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    cc96:	6823      	ldr	r3, [r4, #0]
    cc98:	78db      	ldrb	r3, [r3, #3]
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d149      	bne.n	cd32 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    cc9e:	4620      	mov	r0, r4
    cca0:	f7ff fcb4 	bl	c60c <compute_and_send_master_dhcheck>
			if (err) {
    cca4:	4601      	mov	r1, r0
    cca6:	2800      	cmp	r0, #0
    cca8:	d13f      	bne.n	cd2a <bt_smp_dhkey_ready+0xe6>
    ccaa:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ccac:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ccb0:	fb03 f304 	mul.w	r3, r3, r4
    ccb4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    ccb8:	4b23      	ldr	r3, [pc, #140]	; (cd48 <bt_smp_dhkey_ready+0x104>)
    ccba:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ccbc:	f3bf 8f5b 	dmb	ish
    ccc0:	e853 2f00 	ldrex	r2, [r3]
    ccc4:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    ccc8:	e843 1e00 	strex	lr, r1, [r3]
    cccc:	f1be 0f00 	cmp.w	lr, #0
    ccd0:	d1f6      	bne.n	ccc0 <bt_smp_dhkey_ready+0x7c>
    ccd2:	f3bf 8f5b 	dmb	ish
    ccd6:	f012 0f80 	tst.w	r2, #128	; 0x80
    ccda:	d101      	bne.n	cce0 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ccdc:	3401      	adds	r4, #1
    ccde:	e7b3      	b.n	cc48 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    cce0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    cce4:	4b18      	ldr	r3, [pc, #96]	; (cd48 <bt_smp_dhkey_ready+0x104>)
    cce6:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    ccea:	e7af      	b.n	cc4c <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    ccec:	210b      	movs	r1, #11
    ccee:	4620      	mov	r0, r4
    ccf0:	f7ff ff8b 	bl	cc0a <smp_error>
		return;
    ccf4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccf6:	f3bf 8f5b 	dmb	ish
    ccfa:	e853 2f00 	ldrex	r2, [r3]
    ccfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    cd02:	e843 2100 	strex	r1, r2, [r3]
    cd06:	2900      	cmp	r1, #0
    cd08:	d1f7      	bne.n	ccfa <bt_smp_dhkey_ready+0xb6>
    cd0a:	f3bf 8f5b 	dmb	ish
    cd0e:	bd10      	pop	{r4, pc}
    cd10:	f3bf 8f5b 	dmb	ish
    cd14:	e853 2f00 	ldrex	r2, [r3]
    cd18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    cd1c:	e843 2100 	strex	r1, r2, [r3]
    cd20:	2900      	cmp	r1, #0
    cd22:	d1f7      	bne.n	cd14 <bt_smp_dhkey_ready+0xd0>
    cd24:	f3bf 8f5b 	dmb	ish
    cd28:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    cd2a:	4620      	mov	r0, r4
    cd2c:	f7ff ff6d 	bl	cc0a <smp_error>
    cd30:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    cd32:	4620      	mov	r0, r4
    cd34:	f7ff fcc4 	bl	c6c0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    cd38:	4601      	mov	r1, r0
    cd3a:	2800      	cmp	r0, #0
    cd3c:	d0b5      	beq.n	ccaa <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    cd3e:	4620      	mov	r0, r4
    cd40:	f7ff ff63 	bl	cc0a <smp_error>
    cd44:	e7b1      	b.n	ccaa <bt_smp_dhkey_ready+0x66>
    cd46:	bf00      	nop
    cd48:	2000084c 	.word	0x2000084c

0000cd4c <smp_pairing_failed>:
{
    cd4c:	b538      	push	{r3, r4, r5, lr}
    cd4e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cd50:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    cd52:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    cd54:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    cd58:	3b01      	subs	r3, #1
    cd5a:	2b02      	cmp	r3, #2
    cd5c:	d913      	bls.n	cd86 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd5e:	f3bf 8f5b 	dmb	ish
    cd62:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cd66:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    cd6a:	f013 0f04 	tst.w	r3, #4
    cd6e:	d004      	beq.n	cd7a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    cd70:	6823      	ldr	r3, [r4, #0]
    cd72:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    cd74:	b108      	cbz	r0, cd7a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    cd76:	f001 fd98 	bl	e8aa <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    cd7a:	7829      	ldrb	r1, [r5, #0]
    cd7c:	4620      	mov	r0, r4
    cd7e:	f7ff ff40 	bl	cc02 <smp_pairing_complete>
}
    cd82:	2000      	movs	r0, #0
    cd84:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    cd86:	4b02      	ldr	r3, [pc, #8]	; (cd90 <smp_pairing_failed+0x44>)
    cd88:	681b      	ldr	r3, [r3, #0]
    cd8a:	68db      	ldr	r3, [r3, #12]
    cd8c:	4798      	blx	r3
		break;
    cd8e:	e7e6      	b.n	cd5e <smp_pairing_failed+0x12>
    cd90:	20002a38 	.word	0x20002a38

0000cd94 <bt_smp_disconnected>:
{
    cd94:	b538      	push	{r3, r4, r5, lr}
    cd96:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    cd98:	6803      	ldr	r3, [r0, #0]
    cd9a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    cd9c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    cda0:	f01e fca8 	bl	2b6f4 <k_delayed_work_cancel>
	if (keys) {
    cda4:	b164      	cbz	r4, cdc0 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    cda6:	89a3      	ldrh	r3, [r4, #12]
    cda8:	b13b      	cbz	r3, cdba <bt_smp_disconnected+0x26>
    cdaa:	f3bf 8f5b 	dmb	ish
    cdae:	68a3      	ldr	r3, [r4, #8]
    cdb0:	f3bf 8f5b 	dmb	ish
    cdb4:	f013 0f02 	tst.w	r3, #2
    cdb8:	d002      	beq.n	cdc0 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    cdba:	4620      	mov	r0, r4
    cdbc:	f001 fd75 	bl	e8aa <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    cdc0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    cdc4:	2100      	movs	r1, #0
    cdc6:	4628      	mov	r0, r5
    cdc8:	f01f f958 	bl	2c07c <memset>
    cdcc:	bd38      	pop	{r3, r4, r5, pc}

0000cdce <smp_timeout>:
{
    cdce:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    cdd0:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    cdd4:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    cdd8:	f3bf 8f5b 	dmb	ish
    cddc:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    cde0:	f3bf 8f5b 	dmb	ish
    cde4:	f013 0f04 	tst.w	r3, #4
    cde8:	d004      	beq.n	cdf4 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    cdea:	682b      	ldr	r3, [r5, #0]
    cdec:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    cdee:	b108      	cbz	r0, cdf4 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    cdf0:	f001 fd5b 	bl	e8aa <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    cdf4:	2108      	movs	r1, #8
    cdf6:	4628      	mov	r0, r5
    cdf8:	f7ff ff03 	bl	cc02 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdfc:	f3bf 8f5b 	dmb	ish
    ce00:	e854 3f00 	ldrex	r3, [r4]
    ce04:	f043 0310 	orr.w	r3, r3, #16
    ce08:	e844 3200 	strex	r2, r3, [r4]
    ce0c:	2a00      	cmp	r2, #0
    ce0e:	d1f7      	bne.n	ce00 <smp_timeout+0x32>
    ce10:	f3bf 8f5b 	dmb	ish
    ce14:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ce18 <legacy_distribute_keys>:
{
    ce18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce1c:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    ce1e:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    ce20:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ce22:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    ce26:	f013 0f01 	tst.w	r3, #1
    ce2a:	d102      	bne.n	ce32 <legacy_distribute_keys+0x1a>
}
    ce2c:	b008      	add	sp, #32
    ce2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce32:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    ce34:	2110      	movs	r1, #16
    ce36:	eb0d 0001 	add.w	r0, sp, r1
    ce3a:	f005 fef1 	bl	12c20 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    ce3e:	2108      	movs	r1, #8
    ce40:	eb0d 0001 	add.w	r0, sp, r1
    ce44:	f005 feec 	bl	12c20 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    ce48:	2102      	movs	r1, #2
    ce4a:	f10d 0006 	add.w	r0, sp, #6
    ce4e:	f005 fee7 	bl	12c20 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    ce52:	2210      	movs	r2, #16
    ce54:	2106      	movs	r1, #6
    ce56:	4628      	mov	r0, r5
    ce58:	f7ff f8f9 	bl	c04e <smp_create_pdu>
		if (!buf) {
    ce5c:	4607      	mov	r7, r0
    ce5e:	2800      	cmp	r0, #0
    ce60:	d0e4      	beq.n	ce2c <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    ce62:	2110      	movs	r1, #16
    ce64:	3008      	adds	r0, #8
    ce66:	f00f fa51 	bl	1c30c <net_buf_simple_add>
    ce6a:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    ce6c:	79f2      	ldrb	r2, [r6, #7]
    ce6e:	a904      	add	r1, sp, #16
    ce70:	f7f3 fa26 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ce74:	79f0      	ldrb	r0, [r6, #7]
    ce76:	280f      	cmp	r0, #15
    ce78:	d93b      	bls.n	cef2 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    ce7a:	2200      	movs	r2, #0
    ce7c:	4639      	mov	r1, r7
    ce7e:	4620      	mov	r0, r4
    ce80:	f7ff f938 	bl	c0f4 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    ce84:	220a      	movs	r2, #10
    ce86:	2107      	movs	r1, #7
    ce88:	4628      	mov	r0, r5
    ce8a:	f7ff f8e0 	bl	c04e <smp_create_pdu>
		if (!buf) {
    ce8e:	4605      	mov	r5, r0
    ce90:	2800      	cmp	r0, #0
    ce92:	d0cb      	beq.n	ce2c <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    ce94:	210a      	movs	r1, #10
    ce96:	3008      	adds	r0, #8
    ce98:	f00f fa38 	bl	1c30c <net_buf_simple_add>
		ident->rand = rand;
    ce9c:	9b03      	ldr	r3, [sp, #12]
    ce9e:	9a02      	ldr	r2, [sp, #8]
    cea0:	f8c0 2002 	str.w	r2, [r0, #2]
    cea4:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    cea8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ceac:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    ceae:	4a14      	ldr	r2, [pc, #80]	; (cf00 <legacy_distribute_keys+0xe8>)
    ceb0:	4629      	mov	r1, r5
    ceb2:	4620      	mov	r0, r4
    ceb4:	f7ff f91e 	bl	c0f4 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ceb8:	f3bf 8f5b 	dmb	ish
    cebc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cec0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cec4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cec8:	d0b0      	beq.n	ce2c <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ceca:	2101      	movs	r1, #1
    cecc:	4630      	mov	r0, r6
    cece:	f001 fcd5 	bl	e87c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    ced2:	2210      	movs	r2, #16
    ced4:	eb0d 0102 	add.w	r1, sp, r2
    ced8:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    cedc:	f7f3 f9f0 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    cee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cee4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    cee8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ceec:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    cef0:	e79c      	b.n	ce2c <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    cef2:	f1c0 0210 	rsb	r2, r0, #16
    cef6:	2100      	movs	r1, #0
    cef8:	4440      	add	r0, r8
    cefa:	f01f f8bf 	bl	2c07c <memset>
    cefe:	e7bc      	b.n	ce7a <legacy_distribute_keys+0x62>
    cf00:	0000db33 	.word	0x0000db33

0000cf04 <bt_smp_distribute_keys>:
{
    cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    cf06:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    cf08:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    cf0a:	b176      	cbz	r6, cf2a <bt_smp_distribute_keys+0x26>
    cf0c:	4604      	mov	r4, r0
    cf0e:	f3bf 8f5b 	dmb	ish
    cf12:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cf16:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cf1a:	f013 0f20 	tst.w	r3, #32
    cf1e:	d005      	beq.n	cf2c <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    cf20:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    cf24:	f013 0f04 	tst.w	r3, #4
    cf28:	d103      	bne.n	cf32 <bt_smp_distribute_keys+0x2e>
    cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    cf2c:	f7ff ff74 	bl	ce18 <legacy_distribute_keys>
    cf30:	e7f6      	b.n	cf20 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    cf32:	2210      	movs	r2, #16
    cf34:	210a      	movs	r1, #10
    cf36:	4628      	mov	r0, r5
    cf38:	f7ff f889 	bl	c04e <smp_create_pdu>
		if (!buf) {
    cf3c:	4605      	mov	r5, r0
    cf3e:	2800      	cmp	r0, #0
    cf40:	d0f3      	beq.n	cf2a <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    cf42:	2110      	movs	r1, #16
    cf44:	3008      	adds	r0, #8
    cf46:	f00f f9e1 	bl	1c30c <net_buf_simple_add>
    cf4a:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    cf4c:	2110      	movs	r1, #16
    cf4e:	f005 fe67 	bl	12c20 <bt_rand>
    cf52:	f3bf 8f5b 	dmb	ish
    cf56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cf5a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    cf5e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cf62:	d105      	bne.n	cf70 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    cf64:	4a09      	ldr	r2, [pc, #36]	; (cf8c <bt_smp_distribute_keys+0x88>)
    cf66:	4629      	mov	r1, r5
    cf68:	4620      	mov	r0, r4
    cf6a:	f7ff f8c3 	bl	c0f4 <smp_send>
    cf6e:	e7dc      	b.n	cf2a <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    cf70:	2108      	movs	r1, #8
    cf72:	4630      	mov	r0, r6
    cf74:	f001 fc82 	bl	e87c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    cf78:	2210      	movs	r2, #16
    cf7a:	4639      	mov	r1, r7
    cf7c:	f106 0048 	add.w	r0, r6, #72	; 0x48
    cf80:	f7f3 f99e 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    cf84:	2300      	movs	r3, #0
    cf86:	65b3      	str	r3, [r6, #88]	; 0x58
    cf88:	e7ec      	b.n	cf64 <bt_smp_distribute_keys+0x60>
    cf8a:	bf00      	nop
    cf8c:	0000db29 	.word	0x0000db29

0000cf90 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    cf90:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    cf92:	b911      	cbnz	r1, cf9a <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    cf94:	b108      	cbz	r0, cf9a <bt_smp_encrypt_change+0xa>
    cf96:	7a9a      	ldrb	r2, [r3, #10]
    cf98:	b902      	cbnz	r2, cf9c <bt_smp_encrypt_change+0xc>
    cf9a:	4770      	bx	lr
{
    cf9c:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    cf9e:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cfa2:	f3bf 8f5b 	dmb	ish
    cfa6:	e852 1f00 	ldrex	r1, [r2]
    cfaa:	f021 0402 	bic.w	r4, r1, #2
    cfae:	e842 4e00 	strex	lr, r4, [r2]
    cfb2:	f1be 0f00 	cmp.w	lr, #0
    cfb6:	d1f6      	bne.n	cfa6 <bt_smp_encrypt_change+0x16>
    cfb8:	f3bf 8f5b 	dmb	ish
    cfbc:	f011 0f02 	tst.w	r1, #2
    cfc0:	d100      	bne.n	cfc4 <bt_smp_encrypt_change+0x34>
    cfc2:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cfc4:	f3bf 8f5b 	dmb	ish
    cfc8:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    cfcc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cfd0:	f011 0f08 	tst.w	r1, #8
    cfd4:	d04b      	beq.n	d06e <bt_smp_encrypt_change+0xde>
    cfd6:	f3bf 8f5b 	dmb	ish
    cfda:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    cfde:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cfe2:	f011 0f20 	tst.w	r1, #32
    cfe6:	d015      	beq.n	d014 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    cfe8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    cfec:	f011 0f08 	tst.w	r1, #8
    cff0:	d004      	beq.n	cffc <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    cff2:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    cff6:	f011 0f08 	tst.w	r1, #8
    cffa:	d146      	bne.n	d08a <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    cffc:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    d000:	f021 0108 	bic.w	r1, r1, #8
    d004:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    d008:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    d00c:	f021 0108 	bic.w	r1, r1, #8
    d010:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    d014:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    d018:	f011 0f01 	tst.w	r1, #1
    d01c:	d142      	bne.n	d0a4 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    d01e:	f011 0f02 	tst.w	r1, #2
    d022:	d14f      	bne.n	d0c4 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    d024:	f011 0f04 	tst.w	r1, #4
    d028:	d15c      	bne.n	d0e4 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d02a:	f3bf 8f5b 	dmb	ish
    d02e:	e852 1f00 	ldrex	r1, [r2]
    d032:	f041 0104 	orr.w	r1, r1, #4
    d036:	e842 1400 	strex	r4, r1, [r2]
    d03a:	2c00      	cmp	r4, #0
    d03c:	d1f7      	bne.n	d02e <bt_smp_encrypt_change+0x9e>
    d03e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    d042:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d044:	b91b      	cbnz	r3, d04e <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    d046:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    d04a:	2b00      	cmp	r3, #0
    d04c:	d1b9      	bne.n	cfc2 <bt_smp_encrypt_change+0x32>
    d04e:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    d050:	f7ff ff58 	bl	cf04 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    d054:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    d058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d05c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d060:	2b00      	cmp	r3, #0
    d062:	d1ae      	bne.n	cfc2 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    d064:	2100      	movs	r1, #0
    d066:	4620      	mov	r0, r4
    d068:	f7ff fdcb 	bl	cc02 <smp_pairing_complete>
    d06c:	e7a9      	b.n	cfc2 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    d06e:	309c      	adds	r0, #156	; 0x9c
    d070:	f3bf 8f5b 	dmb	ish
    d074:	e850 3f00 	ldrex	r3, [r0]
    d078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    d07c:	e840 3200 	strex	r2, r3, [r0]
    d080:	2a00      	cmp	r2, #0
    d082:	d1f7      	bne.n	d074 <bt_smp_encrypt_change+0xe4>
    d084:	f3bf 8f5b 	dmb	ish
    d088:	bd10      	pop	{r4, pc}
    d08a:	f3bf 8f5b 	dmb	ish
    d08e:	e852 1f00 	ldrex	r1, [r2]
    d092:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    d096:	e842 1400 	strex	r4, r1, [r2]
    d09a:	2c00      	cmp	r4, #0
    d09c:	d1f7      	bne.n	d08e <bt_smp_encrypt_change+0xfe>
    d09e:	f3bf 8f5b 	dmb	ish
    d0a2:	e7ab      	b.n	cffc <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    d0a4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    d0a8:	f3bf 8f5b 	dmb	ish
    d0ac:	e851 4f00 	ldrex	r4, [r1]
    d0b0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    d0b4:	e841 4e00 	strex	lr, r4, [r1]
    d0b8:	f1be 0f00 	cmp.w	lr, #0
    d0bc:	d1f6      	bne.n	d0ac <bt_smp_encrypt_change+0x11c>
    d0be:	f3bf 8f5b 	dmb	ish
    d0c2:	e7b2      	b.n	d02a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    d0c4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    d0c8:	f3bf 8f5b 	dmb	ish
    d0cc:	e851 4f00 	ldrex	r4, [r1]
    d0d0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    d0d4:	e841 4e00 	strex	lr, r4, [r1]
    d0d8:	f1be 0f00 	cmp.w	lr, #0
    d0dc:	d1f6      	bne.n	d0cc <bt_smp_encrypt_change+0x13c>
    d0de:	f3bf 8f5b 	dmb	ish
    d0e2:	e7a2      	b.n	d02a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    d0e4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    d0e8:	f3bf 8f5b 	dmb	ish
    d0ec:	e851 4f00 	ldrex	r4, [r1]
    d0f0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    d0f4:	e841 4e00 	strex	lr, r4, [r1]
    d0f8:	f1be 0f00 	cmp.w	lr, #0
    d0fc:	d1f6      	bne.n	d0ec <bt_smp_encrypt_change+0x15c>
    d0fe:	f3bf 8f5b 	dmb	ish
    d102:	e792      	b.n	d02a <bt_smp_encrypt_change+0x9a>

0000d104 <bt_smp_recv>:
{
    d104:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    d106:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    d108:	898b      	ldrh	r3, [r1, #12]
    d10a:	b903      	cbnz	r3, d10e <bt_smp_recv+0xa>
    d10c:	bd70      	pop	{r4, r5, r6, pc}
    d10e:	460c      	mov	r4, r1
    d110:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    d112:	2101      	movs	r1, #1
    d114:	f104 0008 	add.w	r0, r4, #8
    d118:	f00f f945 	bl	1c3a6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d11c:	f3bf 8f5b 	dmb	ish
    d120:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d124:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d128:	f013 0f10 	tst.w	r3, #16
    d12c:	d1ee      	bne.n	d10c <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    d12e:	7833      	ldrb	r3, [r6, #0]
    d130:	2b0d      	cmp	r3, #13
    d132:	d824      	bhi.n	d17e <bt_smp_recv+0x7a>
    d134:	4a21      	ldr	r2, [pc, #132]	; (d1bc <bt_smp_recv+0xb8>)
    d136:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    d13a:	b302      	cbz	r2, d17e <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    d13c:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d140:	f003 001f 	and.w	r0, r3, #31
    d144:	2101      	movs	r1, #1
    d146:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d148:	095b      	lsrs	r3, r3, #5
    d14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d14e:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d150:	f3bf 8f5b 	dmb	ish
    d154:	e853 2f00 	ldrex	r2, [r3]
    d158:	ea02 0e00 	and.w	lr, r2, r0
    d15c:	e843 ec00 	strex	ip, lr, [r3]
    d160:	f1bc 0f00 	cmp.w	ip, #0
    d164:	d1f6      	bne.n	d154 <bt_smp_recv+0x50>
    d166:	f3bf 8f5b 	dmb	ish
    d16a:	4211      	tst	r1, r2
    d16c:	d10c      	bne.n	d188 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    d16e:	7833      	ldrb	r3, [r6, #0]
    d170:	2b05      	cmp	r3, #5
    d172:	d0cb      	beq.n	d10c <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    d174:	2108      	movs	r1, #8
    d176:	4628      	mov	r0, r5
    d178:	f7ff fd47 	bl	cc0a <smp_error>
    d17c:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    d17e:	2107      	movs	r1, #7
    d180:	4628      	mov	r0, r5
    d182:	f7ff fd42 	bl	cc0a <smp_error>
		return;
    d186:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    d188:	89a1      	ldrh	r1, [r4, #12]
    d18a:	7832      	ldrb	r2, [r6, #0]
    d18c:	4b0b      	ldr	r3, [pc, #44]	; (d1bc <bt_smp_recv+0xb8>)
    d18e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d192:	791b      	ldrb	r3, [r3, #4]
    d194:	4299      	cmp	r1, r3
    d196:	d004      	beq.n	d1a2 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    d198:	210a      	movs	r1, #10
    d19a:	4628      	mov	r0, r5
    d19c:	f7ff fd35 	bl	cc0a <smp_error>
		return;
    d1a0:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    d1a2:	4b06      	ldr	r3, [pc, #24]	; (d1bc <bt_smp_recv+0xb8>)
    d1a4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    d1a8:	4621      	mov	r1, r4
    d1aa:	4628      	mov	r0, r5
    d1ac:	4798      	blx	r3
	if (err) {
    d1ae:	4601      	mov	r1, r0
    d1b0:	2800      	cmp	r0, #0
    d1b2:	d0ab      	beq.n	d10c <bt_smp_recv+0x8>
		smp_error(smp, err);
    d1b4:	4628      	mov	r0, r5
    d1b6:	f7ff fd28 	bl	cc0a <smp_error>
    d1ba:	e7a7      	b.n	d10c <bt_smp_recv+0x8>
    d1bc:	000330cc 	.word	0x000330cc

0000d1c0 <smp_dhkey_check>:
{
    d1c0:	b570      	push	{r4, r5, r6, lr}
    d1c2:	b08c      	sub	sp, #48	; 0x30
    d1c4:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    d1c6:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d1c8:	6803      	ldr	r3, [r0, #0]
    d1ca:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d1cc:	b12c      	cbz	r4, d1da <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    d1ce:	2c01      	cmp	r4, #1
    d1d0:	d058      	beq.n	d284 <smp_dhkey_check+0xc4>
	return 0;
    d1d2:	2400      	movs	r4, #0
}
    d1d4:	4620      	mov	r0, r4
    d1d6:	b00c      	add	sp, #48	; 0x30
    d1d8:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    d1da:	2210      	movs	r2, #16
    d1dc:	2100      	movs	r1, #0
    d1de:	a808      	add	r0, sp, #32
    d1e0:	f01e ff4c 	bl	2c07c <memset>
		switch (smp->method) {
    d1e4:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    d1e8:	2b03      	cmp	r3, #3
    d1ea:	d847      	bhi.n	d27c <smp_dhkey_check+0xbc>
    d1ec:	e8df f003 	tbb	[pc, r3]
    d1f0:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    d1f4:	2204      	movs	r2, #4
    d1f6:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    d1fa:	a808      	add	r0, sp, #32
    d1fc:	f7f3 f860 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    d200:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    d204:	682b      	ldr	r3, [r5, #0]
    d206:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    d20a:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    d20c:	a804      	add	r0, sp, #16
    d20e:	9003      	str	r0, [sp, #12]
    d210:	9302      	str	r3, [sp, #8]
    d212:	9101      	str	r1, [sp, #4]
    d214:	9200      	str	r2, [sp, #0]
    d216:	ab08      	add	r3, sp, #32
    d218:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    d21c:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    d220:	f205 1063 	addw	r0, r5, #355	; 0x163
    d224:	f7ff f96e 	bl	c504 <smp_f6>
    d228:	b108      	cbz	r0, d22e <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    d22a:	2408      	movs	r4, #8
    d22c:	e7d2      	b.n	d1d4 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    d22e:	2210      	movs	r2, #16
    d230:	4631      	mov	r1, r6
    d232:	eb0d 0002 	add.w	r0, sp, r2
    d236:	f01e fe8d 	bl	2bf54 <memcmp>
    d23a:	b108      	cbz	r0, d240 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d23c:	240b      	movs	r4, #11
    d23e:	e7c9      	b.n	d1d4 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    d240:	4628      	mov	r0, r5
    d242:	f7fe fe63 	bl	bf0c <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    d246:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    d24a:	9002      	str	r0, [sp, #8]
    d24c:	9301      	str	r3, [sp, #4]
    d24e:	2300      	movs	r3, #0
    d250:	9300      	str	r3, [sp, #0]
    d252:	2200      	movs	r2, #0
    d254:	2300      	movs	r3, #0
    d256:	6828      	ldr	r0, [r5, #0]
    d258:	f7fb f898 	bl	838c <bt_conn_le_start_encryption>
    d25c:	2800      	cmp	r0, #0
    d25e:	db0f      	blt.n	d280 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d260:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d262:	f3bf 8f5b 	dmb	ish
    d266:	e855 3f00 	ldrex	r3, [r5]
    d26a:	f043 0302 	orr.w	r3, r3, #2
    d26e:	e845 3200 	strex	r2, r3, [r5]
    d272:	2a00      	cmp	r2, #0
    d274:	d1f7      	bne.n	d266 <smp_dhkey_check+0xa6>
    d276:	f3bf 8f5b 	dmb	ish
		return 0;
    d27a:	e7ab      	b.n	d1d4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    d27c:	2408      	movs	r4, #8
    d27e:	e7a9      	b.n	d1d4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    d280:	2408      	movs	r4, #8
    d282:	e7a7      	b.n	d1d4 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    d284:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d288:	f3bf 8f5b 	dmb	ish
    d28c:	e854 3f00 	ldrex	r3, [r4]
    d290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    d294:	e844 3200 	strex	r2, r3, [r4]
    d298:	2a00      	cmp	r2, #0
    d29a:	d1f7      	bne.n	d28c <smp_dhkey_check+0xcc>
    d29c:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    d2a0:	2210      	movs	r2, #16
    d2a2:	4631      	mov	r1, r6
    d2a4:	f205 1053 	addw	r0, r5, #339	; 0x153
    d2a8:	f7f3 f80a 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d2ac:	f3bf 8f5b 	dmb	ish
    d2b0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d2b4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    d2b8:	f013 0f80 	tst.w	r3, #128	; 0x80
    d2bc:	d10d      	bne.n	d2da <smp_dhkey_check+0x11a>
    d2be:	f3bf 8f5b 	dmb	ish
    d2c2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d2c6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    d2ca:	f413 7f00 	tst.w	r3, #512	; 0x200
    d2ce:	d112      	bne.n	d2f6 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    d2d0:	4628      	mov	r0, r5
    d2d2:	f7ff f9f5 	bl	c6c0 <compute_and_check_and_send_slave_dhcheck>
    d2d6:	4604      	mov	r4, r0
    d2d8:	e77c      	b.n	d1d4 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d2da:	f3bf 8f5b 	dmb	ish
    d2de:	e854 3f00 	ldrex	r3, [r4]
    d2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d2e6:	e844 3200 	strex	r2, r3, [r4]
    d2ea:	2a00      	cmp	r2, #0
    d2ec:	d1f7      	bne.n	d2de <smp_dhkey_check+0x11e>
    d2ee:	f3bf 8f5b 	dmb	ish
			return 0;
    d2f2:	2400      	movs	r4, #0
    d2f4:	e76e      	b.n	d1d4 <smp_dhkey_check+0x14>
    d2f6:	f3bf 8f5b 	dmb	ish
    d2fa:	e854 3f00 	ldrex	r3, [r4]
    d2fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d302:	e844 3200 	strex	r2, r3, [r4]
    d306:	2a00      	cmp	r2, #0
    d308:	d1f7      	bne.n	d2fa <smp_dhkey_check+0x13a>
    d30a:	f3bf 8f5b 	dmb	ish
			return 0;
    d30e:	2400      	movs	r4, #0
    d310:	e760      	b.n	d1d4 <smp_dhkey_check+0x14>

0000d312 <legacy_pairing_random>:
{
    d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d316:	b088      	sub	sp, #32
    d318:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    d31a:	4605      	mov	r5, r0
    d31c:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    d320:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    d324:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    d328:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    d32c:	a904      	add	r1, sp, #16
    d32e:	9102      	str	r1, [sp, #8]
    d330:	9201      	str	r2, [sp, #4]
    d332:	9300      	str	r3, [sp, #0]
    d334:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    d338:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    d33c:	4641      	mov	r1, r8
    d33e:	4628      	mov	r0, r5
    d340:	f7ff fada 	bl	c8f8 <smp_c1>
	if (err) {
    d344:	b120      	cbz	r0, d350 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    d346:	2708      	movs	r7, #8
}
    d348:	4638      	mov	r0, r7
    d34a:	b008      	add	sp, #32
    d34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    d350:	2210      	movs	r2, #16
    d352:	eb0d 0102 	add.w	r1, sp, r2
    d356:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    d35a:	f01e fdfb 	bl	2bf54 <memcmp>
    d35e:	b108      	cbz	r0, d364 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    d360:	2704      	movs	r7, #4
    d362:	e7f1      	b.n	d348 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    d364:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d366:	bb3f      	cbnz	r7, d3b8 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    d368:	ab04      	add	r3, sp, #16
    d36a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    d36e:	4641      	mov	r1, r8
    d370:	4628      	mov	r0, r5
    d372:	f7ff fbf0 	bl	cb56 <smp_s1>
		if (err) {
    d376:	b108      	cbz	r0, d37c <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    d378:	2708      	movs	r7, #8
    d37a:	e7e5      	b.n	d348 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    d37c:	4620      	mov	r0, r4
    d37e:	f7fe fdc5 	bl	bf0c <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    d382:	9002      	str	r0, [sp, #8]
    d384:	ab04      	add	r3, sp, #16
    d386:	9301      	str	r3, [sp, #4]
    d388:	2300      	movs	r3, #0
    d38a:	9300      	str	r3, [sp, #0]
    d38c:	2200      	movs	r2, #0
    d38e:	2300      	movs	r3, #0
    d390:	4630      	mov	r0, r6
    d392:	f7fa fffb 	bl	838c <bt_conn_le_start_encryption>
    d396:	b108      	cbz	r0, d39c <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    d398:	2708      	movs	r7, #8
    d39a:	e7d5      	b.n	d348 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d39c:	34a0      	adds	r4, #160	; 0xa0
    d39e:	f3bf 8f5b 	dmb	ish
    d3a2:	e854 3f00 	ldrex	r3, [r4]
    d3a6:	f043 0302 	orr.w	r3, r3, #2
    d3aa:	e844 3200 	strex	r2, r3, [r4]
    d3ae:	2a00      	cmp	r2, #0
    d3b0:	d1f7      	bne.n	d3a2 <legacy_pairing_random+0x90>
    d3b2:	f3bf 8f5b 	dmb	ish
		return 0;
    d3b6:	e7c7      	b.n	d348 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    d3b8:	ab04      	add	r3, sp, #16
    d3ba:	4642      	mov	r2, r8
    d3bc:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    d3c0:	4628      	mov	r0, r5
    d3c2:	f7ff fbc8 	bl	cb56 <smp_s1>
		if (err) {
    d3c6:	b108      	cbz	r0, d3cc <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    d3c8:	2708      	movs	r7, #8
    d3ca:	e7bd      	b.n	d348 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    d3cc:	2210      	movs	r2, #16
    d3ce:	eb0d 0102 	add.w	r1, sp, r2
    d3d2:	4628      	mov	r0, r5
    d3d4:	f7f2 ff74 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d3d8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d3dc:	f3bf 8f5b 	dmb	ish
    d3e0:	e853 2f00 	ldrex	r2, [r3]
    d3e4:	f042 0202 	orr.w	r2, r2, #2
    d3e8:	e843 2100 	strex	r1, r2, [r3]
    d3ec:	2900      	cmp	r1, #0
    d3ee:	d1f7      	bne.n	d3e0 <legacy_pairing_random+0xce>
    d3f0:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7fe feea 	bl	c1ce <smp_send_pairing_random>
	return 0;
    d3fa:	2700      	movs	r7, #0
    d3fc:	e7a4      	b.n	d348 <legacy_pairing_random+0x36>
	...

0000d400 <smp_pairing_random>:
{
    d400:	b5f0      	push	{r4, r5, r6, r7, lr}
    d402:	b085      	sub	sp, #20
    d404:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    d406:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    d40a:	2210      	movs	r2, #16
    d40c:	6889      	ldr	r1, [r1, #8]
    d40e:	4628      	mov	r0, r5
    d410:	f7f2 ff56 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d414:	f3bf 8f5b 	dmb	ish
    d418:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    d41c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d420:	f013 0f20 	tst.w	r3, #32
    d424:	d00d      	beq.n	d442 <smp_pairing_random+0x42>
    d426:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d42a:	6823      	ldr	r3, [r4, #0]
    d42c:	78db      	ldrb	r3, [r3, #3]
    d42e:	b17b      	cbz	r3, d450 <smp_pairing_random+0x50>
	switch (smp->method) {
    d430:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d434:	2b03      	cmp	r3, #3
    d436:	f200 8106 	bhi.w	d646 <smp_pairing_random+0x246>
    d43a:	e8df f003 	tbb	[pc, r3]
    d43e:	bfa0      	.short	0xbfa0
    d440:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    d442:	4620      	mov	r0, r4
    d444:	f7ff ff65 	bl	d312 <legacy_pairing_random>
    d448:	4606      	mov	r6, r0
}
    d44a:	4630      	mov	r0, r6
    d44c:	b005      	add	sp, #20
    d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    d450:	4620      	mov	r0, r4
    d452:	f7fe ff83 	bl	c35c <sc_smp_check_confirm>
		if (err) {
    d456:	4606      	mov	r6, r0
    d458:	2800      	cmp	r0, #0
    d45a:	d1f6      	bne.n	d44a <smp_pairing_random+0x4a>
		switch (smp->method) {
    d45c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d460:	2b03      	cmp	r3, #3
    d462:	f200 80ee 	bhi.w	d642 <smp_pairing_random+0x242>
    d466:	e8df f003 	tbb	[pc, r3]
    d46a:	2e50      	.short	0x2e50
    d46c:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    d46e:	ab03      	add	r3, sp, #12
    d470:	9300      	str	r3, [sp, #0]
    d472:	462b      	mov	r3, r5
    d474:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    d478:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    d47c:	4873      	ldr	r0, [pc, #460]	; (d64c <smp_pairing_random+0x24c>)
    d47e:	f7ff f995 	bl	c7ac <smp_g2>
    d482:	b108      	cbz	r0, d488 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    d484:	2608      	movs	r6, #8
    d486:	e7e0      	b.n	d44a <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d488:	f3bf 8f5b 	dmb	ish
    d48c:	e857 3f00 	ldrex	r3, [r7]
    d490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d494:	e847 3200 	strex	r2, r3, [r7]
    d498:	2a00      	cmp	r2, #0
    d49a:	d1f7      	bne.n	d48c <smp_pairing_random+0x8c>
    d49c:	f3bf 8f5b 	dmb	ish
    d4a0:	f3bf 8f5b 	dmb	ish
    d4a4:	e857 3f00 	ldrex	r3, [r7]
    d4a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d4ac:	e847 3200 	strex	r2, r3, [r7]
    d4b0:	2a00      	cmp	r2, #0
    d4b2:	d1f7      	bne.n	d4a4 <smp_pairing_random+0xa4>
    d4b4:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    d4b8:	4b65      	ldr	r3, [pc, #404]	; (d650 <smp_pairing_random+0x250>)
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	689b      	ldr	r3, [r3, #8]
    d4be:	9903      	ldr	r1, [sp, #12]
    d4c0:	6820      	ldr	r0, [r4, #0]
    d4c2:	4798      	blx	r3
			return 0;
    d4c4:	e7c1      	b.n	d44a <smp_pairing_random+0x4a>
			smp->passkey_round++;
    d4c6:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    d4ca:	3301      	adds	r3, #1
    d4cc:	b2db      	uxtb	r3, r3
    d4ce:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    d4d2:	2b14      	cmp	r3, #20
    d4d4:	d019      	beq.n	d50a <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    d4d6:	2110      	movs	r1, #16
    d4d8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    d4dc:	f005 fba0 	bl	12c20 <bt_rand>
    d4e0:	b108      	cbz	r0, d4e6 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    d4e2:	2608      	movs	r6, #8
    d4e4:	e7b1      	b.n	d44a <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    d4e6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d4ea:	f3bf 8f5b 	dmb	ish
    d4ee:	e853 2f00 	ldrex	r2, [r3]
    d4f2:	f042 0208 	orr.w	r2, r2, #8
    d4f6:	e843 2100 	strex	r1, r2, [r3]
    d4fa:	2900      	cmp	r1, #0
    d4fc:	d1f7      	bne.n	d4ee <smp_pairing_random+0xee>
    d4fe:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    d502:	4620      	mov	r0, r4
    d504:	f7ff f9aa 	bl	c85c <smp_send_pairing_confirm>
			return 0;
    d508:	e79f      	b.n	d44a <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d50a:	f3bf 8f5b 	dmb	ish
    d50e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    d512:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    d516:	f013 0f80 	tst.w	r3, #128	; 0x80
    d51a:	d00c      	beq.n	d536 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d51c:	f3bf 8f5b 	dmb	ish
    d520:	e857 3f00 	ldrex	r3, [r7]
    d524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d528:	e847 3200 	strex	r2, r3, [r7]
    d52c:	2a00      	cmp	r2, #0
    d52e:	d1f7      	bne.n	d520 <smp_pairing_random+0x120>
    d530:	f3bf 8f5b 	dmb	ish
			return 0;
    d534:	e789      	b.n	d44a <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    d536:	4620      	mov	r0, r4
    d538:	f7ff f868 	bl	c60c <compute_and_send_master_dhcheck>
    d53c:	4606      	mov	r6, r0
    d53e:	e784      	b.n	d44a <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    d540:	ab03      	add	r3, sp, #12
    d542:	9300      	str	r3, [sp, #0]
    d544:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    d548:	462a      	mov	r2, r5
    d54a:	4940      	ldr	r1, [pc, #256]	; (d64c <smp_pairing_random+0x24c>)
    d54c:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    d550:	f7ff f92c 	bl	c7ac <smp_g2>
    d554:	b108      	cbz	r0, d55a <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    d556:	2608      	movs	r6, #8
    d558:	e777      	b.n	d44a <smp_pairing_random+0x4a>
    d55a:	f3bf 8f5b 	dmb	ish
    d55e:	e857 3f00 	ldrex	r3, [r7]
    d562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d566:	e847 3200 	strex	r2, r3, [r7]
    d56a:	2a00      	cmp	r2, #0
    d56c:	d1f7      	bne.n	d55e <smp_pairing_random+0x15e>
    d56e:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    d572:	4b37      	ldr	r3, [pc, #220]	; (d650 <smp_pairing_random+0x250>)
    d574:	681b      	ldr	r3, [r3, #0]
    d576:	689b      	ldr	r3, [r3, #8]
    d578:	9903      	ldr	r1, [sp, #12]
    d57a:	6820      	ldr	r0, [r4, #0]
    d57c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    d57e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d582:	f3bf 8f5b 	dmb	ish
    d586:	e853 2f00 	ldrex	r2, [r3]
    d58a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d58e:	e843 2100 	strex	r1, r2, [r3]
    d592:	2900      	cmp	r1, #0
    d594:	d1f7      	bne.n	d586 <smp_pairing_random+0x186>
    d596:	f3bf 8f5b 	dmb	ish
    d59a:	f3bf 8f5b 	dmb	ish
    d59e:	e857 3f00 	ldrex	r3, [r7]
    d5a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d5a6:	e847 3200 	strex	r2, r3, [r7]
    d5aa:	2a00      	cmp	r2, #0
    d5ac:	d1f7      	bne.n	d59e <smp_pairing_random+0x19e>
    d5ae:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    d5b2:	4620      	mov	r0, r4
    d5b4:	f7fe fe0b 	bl	c1ce <smp_send_pairing_random>
	return 0;
    d5b8:	2600      	movs	r6, #0
    d5ba:	e746      	b.n	d44a <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    d5bc:	4620      	mov	r0, r4
    d5be:	f7fe fecd 	bl	c35c <sc_smp_check_confirm>
		if (err) {
    d5c2:	4606      	mov	r6, r0
    d5c4:	2800      	cmp	r0, #0
    d5c6:	f47f af40 	bne.w	d44a <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    d5ca:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    d5ce:	f3bf 8f5b 	dmb	ish
    d5d2:	e855 3f00 	ldrex	r3, [r5]
    d5d6:	f043 0308 	orr.w	r3, r3, #8
    d5da:	e845 3200 	strex	r2, r3, [r5]
    d5de:	2a00      	cmp	r2, #0
    d5e0:	d1f7      	bne.n	d5d2 <smp_pairing_random+0x1d2>
    d5e2:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    d5e6:	4620      	mov	r0, r4
    d5e8:	f7fe fdf1 	bl	c1ce <smp_send_pairing_random>
		smp->passkey_round++;
    d5ec:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    d5f0:	3301      	adds	r3, #1
    d5f2:	b2db      	uxtb	r3, r3
    d5f4:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    d5f8:	2b14      	cmp	r3, #20
    d5fa:	d009      	beq.n	d610 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    d5fc:	2110      	movs	r1, #16
    d5fe:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    d602:	f005 fb0d 	bl	12c20 <bt_rand>
    d606:	2800      	cmp	r0, #0
    d608:	f43f af1f 	beq.w	d44a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    d60c:	2608      	movs	r6, #8
    d60e:	e71c      	b.n	d44a <smp_pairing_random+0x4a>
    d610:	f3bf 8f5b 	dmb	ish
    d614:	e855 3f00 	ldrex	r3, [r5]
    d618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d61c:	e845 3200 	strex	r2, r3, [r5]
    d620:	2a00      	cmp	r2, #0
    d622:	d1f7      	bne.n	d614 <smp_pairing_random+0x214>
    d624:	f3bf 8f5b 	dmb	ish
    d628:	f3bf 8f5b 	dmb	ish
    d62c:	e857 3f00 	ldrex	r3, [r7]
    d630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d634:	e847 3200 	strex	r2, r3, [r7]
    d638:	2a00      	cmp	r2, #0
    d63a:	d1f7      	bne.n	d62c <smp_pairing_random+0x22c>
    d63c:	f3bf 8f5b 	dmb	ish
			return 0;
    d640:	e703      	b.n	d44a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    d642:	2608      	movs	r6, #8
    d644:	e701      	b.n	d44a <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    d646:	2608      	movs	r6, #8
    d648:	e6ff      	b.n	d44a <smp_pairing_random+0x4a>
    d64a:	bf00      	nop
    d64c:	200009f4 	.word	0x200009f4
    d650:	20002a38 	.word	0x20002a38

0000d654 <generate_dhkey>:
{
    d654:	b510      	push	{r4, lr}
    d656:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    d658:	490a      	ldr	r1, [pc, #40]	; (d684 <generate_dhkey+0x30>)
    d65a:	30f3      	adds	r0, #243	; 0xf3
    d65c:	f7fa fd1e 	bl	809c <bt_dh_key_gen>
    d660:	b108      	cbz	r0, d666 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    d662:	2008      	movs	r0, #8
}
    d664:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    d666:	34a0      	adds	r4, #160	; 0xa0
    d668:	f3bf 8f5b 	dmb	ish
    d66c:	e854 3f00 	ldrex	r3, [r4]
    d670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d674:	e844 3200 	strex	r2, r3, [r4]
    d678:	2a00      	cmp	r2, #0
    d67a:	d1f7      	bne.n	d66c <generate_dhkey+0x18>
    d67c:	f3bf 8f5b 	dmb	ish
	return 0;
    d680:	bd10      	pop	{r4, pc}
    d682:	bf00      	nop
    d684:	0000cc45 	.word	0x0000cc45

0000d688 <smp_public_key_slave>:
{
    d688:	b510      	push	{r4, lr}
    d68a:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    d68c:	f7fe fd60 	bl	c150 <sc_send_public_key>
	if (err) {
    d690:	4603      	mov	r3, r0
    d692:	2800      	cmp	r0, #0
    d694:	d154      	bne.n	d740 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    d696:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d69a:	2b03      	cmp	r3, #3
    d69c:	d852      	bhi.n	d744 <smp_public_key_slave+0xbc>
    d69e:	e8df f003 	tbb	[pc, r3]
    d6a2:	2a02      	.short	0x2a02
    d6a4:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    d6a6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d6aa:	f3bf 8f5b 	dmb	ish
    d6ae:	e853 2f00 	ldrex	r2, [r3]
    d6b2:	f042 0210 	orr.w	r2, r2, #16
    d6b6:	e843 2100 	strex	r1, r2, [r3]
    d6ba:	2900      	cmp	r1, #0
    d6bc:	d1f7      	bne.n	d6ae <smp_public_key_slave+0x26>
    d6be:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    d6c2:	4620      	mov	r0, r4
    d6c4:	f7ff f8ca 	bl	c85c <smp_send_pairing_confirm>
		if (err) {
    d6c8:	4603      	mov	r3, r0
    d6ca:	b3a8      	cbz	r0, d738 <smp_public_key_slave+0xb0>
    d6cc:	e038      	b.n	d740 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    d6ce:	4620      	mov	r0, r4
    d6d0:	f7fe fcea 	bl	c0a8 <display_passkey>
		if (err) {
    d6d4:	4603      	mov	r3, r0
    d6d6:	bb98      	cbnz	r0, d740 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d6d8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d6dc:	f3bf 8f5b 	dmb	ish
    d6e0:	e853 2f00 	ldrex	r2, [r3]
    d6e4:	f042 0208 	orr.w	r2, r2, #8
    d6e8:	e843 2100 	strex	r1, r2, [r3]
    d6ec:	2900      	cmp	r1, #0
    d6ee:	d1f7      	bne.n	d6e0 <smp_public_key_slave+0x58>
    d6f0:	f3bf 8f5b 	dmb	ish
    d6f4:	e020      	b.n	d738 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d6f6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d6fa:	f3bf 8f5b 	dmb	ish
    d6fe:	e853 2f00 	ldrex	r2, [r3]
    d702:	f042 0208 	orr.w	r2, r2, #8
    d706:	e843 2100 	strex	r1, r2, [r3]
    d70a:	2900      	cmp	r1, #0
    d70c:	d1f7      	bne.n	d6fe <smp_public_key_slave+0x76>
    d70e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d712:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d716:	f3bf 8f5b 	dmb	ish
    d71a:	e853 2f00 	ldrex	r2, [r3]
    d71e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d722:	e843 2100 	strex	r1, r2, [r3]
    d726:	2900      	cmp	r1, #0
    d728:	d1f7      	bne.n	d71a <smp_public_key_slave+0x92>
    d72a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    d72e:	4b06      	ldr	r3, [pc, #24]	; (d748 <smp_public_key_slave+0xc0>)
    d730:	681b      	ldr	r3, [r3, #0]
    d732:	685b      	ldr	r3, [r3, #4]
    d734:	6820      	ldr	r0, [r4, #0]
    d736:	4798      	blx	r3
	return generate_dhkey(smp);
    d738:	4620      	mov	r0, r4
    d73a:	f7ff ff8b 	bl	d654 <generate_dhkey>
    d73e:	4603      	mov	r3, r0
}
    d740:	4618      	mov	r0, r3
    d742:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    d744:	2308      	movs	r3, #8
    d746:	e7fb      	b.n	d740 <smp_public_key_slave+0xb8>
    d748:	20002a38 	.word	0x20002a38

0000d74c <bt_smp_pkey_ready>:
{
    d74c:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    d74e:	b150      	cbz	r0, d766 <bt_smp_pkey_ready+0x1a>
    d750:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    d752:	2240      	movs	r2, #64	; 0x40
    d754:	4826      	ldr	r0, [pc, #152]	; (d7f0 <bt_smp_pkey_ready+0xa4>)
    d756:	f7f2 fdb3 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    d75a:	2201      	movs	r2, #1
    d75c:	4b25      	ldr	r3, [pc, #148]	; (d7f4 <bt_smp_pkey_ready+0xa8>)
    d75e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    d760:	2400      	movs	r4, #0
    d762:	b124      	cbz	r4, d76e <bt_smp_pkey_ready+0x22>
    d764:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    d766:	2200      	movs	r2, #0
    d768:	4b22      	ldr	r3, [pc, #136]	; (d7f4 <bt_smp_pkey_ready+0xa8>)
    d76a:	701a      	strb	r2, [r3, #0]
		return;
    d76c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    d76e:	4a22      	ldr	r2, [pc, #136]	; (d7f8 <bt_smp_pkey_ready+0xac>)
    d770:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    d774:	fb03 f304 	mul.w	r3, r3, r4
    d778:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    d77a:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d77c:	f3bf 8f5b 	dmb	ish
    d780:	58d3      	ldr	r3, [r2, r3]
    d782:	f3bf 8f5b 	dmb	ish
    d786:	f013 0f40 	tst.w	r3, #64	; 0x40
    d78a:	d020      	beq.n	d7ce <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d78c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    d790:	fb03 f304 	mul.w	r3, r3, r4
    d794:	58d3      	ldr	r3, [r2, r3]
    d796:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d798:	b9fb      	cbnz	r3, d7da <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    d79a:	4628      	mov	r0, r5
    d79c:	f7fe fcd8 	bl	c150 <sc_send_public_key>
			if (err) {
    d7a0:	4601      	mov	r1, r0
    d7a2:	b9b0      	cbnz	r0, d7d2 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    d7a4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    d7a8:	fb03 f304 	mul.w	r3, r3, r4
    d7ac:	f103 0298 	add.w	r2, r3, #152	; 0x98
    d7b0:	4b11      	ldr	r3, [pc, #68]	; (d7f8 <bt_smp_pkey_ready+0xac>)
    d7b2:	4413      	add	r3, r2
    d7b4:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d7b6:	f3bf 8f5b 	dmb	ish
    d7ba:	e853 2f00 	ldrex	r2, [r3]
    d7be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    d7c2:	e843 2100 	strex	r1, r2, [r3]
    d7c6:	2900      	cmp	r1, #0
    d7c8:	d1f7      	bne.n	d7ba <bt_smp_pkey_ready+0x6e>
    d7ca:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    d7ce:	3401      	adds	r4, #1
    d7d0:	e7c7      	b.n	d762 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    d7d2:	4628      	mov	r0, r5
    d7d4:	f7ff fa19 	bl	cc0a <smp_error>
    d7d8:	e7e4      	b.n	d7a4 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    d7da:	4628      	mov	r0, r5
    d7dc:	f7ff ff54 	bl	d688 <smp_public_key_slave>
		if (err) {
    d7e0:	4601      	mov	r1, r0
    d7e2:	2800      	cmp	r0, #0
    d7e4:	d0f3      	beq.n	d7ce <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    d7e6:	4628      	mov	r0, r5
    d7e8:	f7ff fa0f 	bl	cc0a <smp_error>
    d7ec:	e7ef      	b.n	d7ce <bt_smp_pkey_ready+0x82>
    d7ee:	bf00      	nop
    d7f0:	200009f4 	.word	0x200009f4
    d7f4:	200009f0 	.word	0x200009f0
    d7f8:	2000084c 	.word	0x2000084c

0000d7fc <smp_public_key>:
{
    d7fc:	b570      	push	{r4, r5, r6, lr}
    d7fe:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    d800:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    d802:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    d806:	2220      	movs	r2, #32
    d808:	4631      	mov	r1, r6
    d80a:	4628      	mov	r0, r5
    d80c:	f7f2 fd58 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    d810:	2220      	movs	r2, #32
    d812:	18b1      	adds	r1, r6, r2
    d814:	f204 1013 	addw	r0, r4, #275	; 0x113
    d818:	f7f2 fd52 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    d81c:	2240      	movs	r2, #64	; 0x40
    d81e:	493d      	ldr	r1, [pc, #244]	; (d914 <smp_public_key+0x118>)
    d820:	4628      	mov	r0, r5
    d822:	f01e fb97 	bl	2bf54 <memcmp>
    d826:	b158      	cbz	r0, d840 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d828:	6823      	ldr	r3, [r4, #0]
    d82a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d82c:	2b00      	cmp	r3, #0
    d82e:	d156      	bne.n	d8de <smp_public_key+0xe2>
		switch (smp->method) {
    d830:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    d834:	2b03      	cmp	r3, #3
    d836:	d86a      	bhi.n	d90e <smp_public_key+0x112>
    d838:	e8df f003 	tbb	[pc, r3]
    d83c:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    d840:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d844:	f3bf 8f5b 	dmb	ish
    d848:	e853 2f00 	ldrex	r2, [r3]
    d84c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    d850:	e843 2100 	strex	r1, r2, [r3]
    d854:	2900      	cmp	r1, #0
    d856:	d1f7      	bne.n	d848 <smp_public_key+0x4c>
    d858:	f3bf 8f5b 	dmb	ish
    d85c:	e7e4      	b.n	d828 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    d85e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d862:	f3bf 8f5b 	dmb	ish
    d866:	e853 2f00 	ldrex	r2, [r3]
    d86a:	f042 0208 	orr.w	r2, r2, #8
    d86e:	e843 2100 	strex	r1, r2, [r3]
    d872:	2900      	cmp	r1, #0
    d874:	d1f7      	bne.n	d866 <smp_public_key+0x6a>
    d876:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    d87a:	4620      	mov	r0, r4
    d87c:	f7ff feea 	bl	d654 <generate_dhkey>
    d880:	4603      	mov	r3, r0
    d882:	e033      	b.n	d8ec <smp_public_key+0xf0>
			err = display_passkey(smp);
    d884:	4620      	mov	r0, r4
    d886:	f7fe fc0f 	bl	c0a8 <display_passkey>
			if (err) {
    d88a:	4603      	mov	r3, r0
    d88c:	bb70      	cbnz	r0, d8ec <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    d88e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    d892:	f3bf 8f5b 	dmb	ish
    d896:	e853 2f00 	ldrex	r2, [r3]
    d89a:	f042 0208 	orr.w	r2, r2, #8
    d89e:	e843 2100 	strex	r1, r2, [r3]
    d8a2:	2900      	cmp	r1, #0
    d8a4:	d1f7      	bne.n	d896 <smp_public_key+0x9a>
    d8a6:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    d8aa:	4620      	mov	r0, r4
    d8ac:	f7fe ffd6 	bl	c85c <smp_send_pairing_confirm>
			if (err) {
    d8b0:	4603      	mov	r3, r0
    d8b2:	b9d8      	cbnz	r0, d8ec <smp_public_key+0xf0>
    d8b4:	e7e1      	b.n	d87a <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d8b6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    d8ba:	f3bf 8f5b 	dmb	ish
    d8be:	e853 2f00 	ldrex	r2, [r3]
    d8c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d8c6:	e843 2100 	strex	r1, r2, [r3]
    d8ca:	2900      	cmp	r1, #0
    d8cc:	d1f7      	bne.n	d8be <smp_public_key+0xc2>
    d8ce:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    d8d2:	4b11      	ldr	r3, [pc, #68]	; (d918 <smp_public_key+0x11c>)
    d8d4:	681b      	ldr	r3, [r3, #0]
    d8d6:	685b      	ldr	r3, [r3, #4]
    d8d8:	6820      	ldr	r0, [r4, #0]
    d8da:	4798      	blx	r3
			break;
    d8dc:	e7cd      	b.n	d87a <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    d8de:	4b0f      	ldr	r3, [pc, #60]	; (d91c <smp_public_key+0x120>)
    d8e0:	781b      	ldrb	r3, [r3, #0]
    d8e2:	b12b      	cbz	r3, d8f0 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    d8e4:	4620      	mov	r0, r4
    d8e6:	f7ff fecf 	bl	d688 <smp_public_key_slave>
    d8ea:	4603      	mov	r3, r0
}
    d8ec:	4618      	mov	r0, r3
    d8ee:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    d8f0:	34a0      	adds	r4, #160	; 0xa0
    d8f2:	f3bf 8f5b 	dmb	ish
    d8f6:	e854 3f00 	ldrex	r3, [r4]
    d8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d8fe:	e844 3200 	strex	r2, r3, [r4]
    d902:	2a00      	cmp	r2, #0
    d904:	d1f7      	bne.n	d8f6 <smp_public_key+0xfa>
    d906:	f3bf 8f5b 	dmb	ish
		return 0;
    d90a:	2300      	movs	r3, #0
    d90c:	e7ee      	b.n	d8ec <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    d90e:	2308      	movs	r3, #8
    d910:	e7ec      	b.n	d8ec <smp_public_key+0xf0>
    d912:	bf00      	nop
    d914:	0003318c 	.word	0x0003318c
    d918:	20002a38 	.word	0x20002a38
    d91c:	200009f0 	.word	0x200009f0

0000d920 <smp_signing_info>:
{
    d920:	b570      	push	{r4, r5, r6, lr}
    d922:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    d924:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d926:	f3bf 8f5b 	dmb	ish
    d92a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d92e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d932:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d936:	d111      	bne.n	d95c <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    d938:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    d93c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d940:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    d944:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d946:	b902      	cbnz	r2, d94a <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    d948:	b1ab      	cbz	r3, d976 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    d94a:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    d94e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d956:	b193      	cbz	r3, d97e <smp_signing_info+0x5e>
	return 0;
    d958:	2000      	movs	r0, #0
}
    d95a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    d95c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    d95e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    d962:	2010      	movs	r0, #16
    d964:	f000 ff8e 	bl	e884 <bt_keys_get_type>
		if (!keys) {
    d968:	b178      	cbz	r0, d98a <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    d96a:	2210      	movs	r2, #16
    d96c:	4631      	mov	r1, r6
    d96e:	305c      	adds	r0, #92	; 0x5c
    d970:	f7f2 fca6 	bl	2c0 <memcpy>
    d974:	e7e0      	b.n	d938 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    d976:	4620      	mov	r0, r4
    d978:	f7ff fac4 	bl	cf04 <bt_smp_distribute_keys>
    d97c:	e7e5      	b.n	d94a <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    d97e:	2100      	movs	r1, #0
    d980:	4620      	mov	r0, r4
    d982:	f7ff f93e 	bl	cc02 <smp_pairing_complete>
	return 0;
    d986:	2000      	movs	r0, #0
    d988:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    d98a:	2008      	movs	r0, #8
    d98c:	bd70      	pop	{r4, r5, r6, pc}

0000d98e <smp_ident_info>:
{
    d98e:	b538      	push	{r3, r4, r5, lr}
    d990:	4604      	mov	r4, r0
    d992:	f3bf 8f5b 	dmb	ish
    d996:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d99a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d99e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d9a2:	d00b      	beq.n	d9bc <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    d9a4:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    d9a6:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    d9a8:	3148      	adds	r1, #72	; 0x48
    d9aa:	2002      	movs	r0, #2
    d9ac:	f000 ff6a 	bl	e884 <bt_keys_get_type>
		if (!keys) {
    d9b0:	b198      	cbz	r0, d9da <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    d9b2:	2210      	movs	r2, #16
    d9b4:	4629      	mov	r1, r5
    d9b6:	3030      	adds	r0, #48	; 0x30
    d9b8:	f7f2 fc82 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    d9bc:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d9be:	f3bf 8f5b 	dmb	ish
    d9c2:	e854 3f00 	ldrex	r3, [r4]
    d9c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d9ca:	e844 3200 	strex	r2, r3, [r4]
    d9ce:	2a00      	cmp	r2, #0
    d9d0:	d1f7      	bne.n	d9c2 <smp_ident_info+0x34>
    d9d2:	f3bf 8f5b 	dmb	ish
	return 0;
    d9d6:	2000      	movs	r0, #0
    d9d8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    d9da:	2008      	movs	r0, #8
}
    d9dc:	bd38      	pop	{r3, r4, r5, pc}

0000d9de <smp_master_ident>:
{
    d9de:	b570      	push	{r4, r5, r6, lr}
    d9e0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    d9e2:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9e4:	f3bf 8f5b 	dmb	ish
    d9e8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d9ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d9f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d9f4:	d116      	bne.n	da24 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    d9f6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    d9fa:	f013 0f02 	tst.w	r3, #2
    d9fe:	d127      	bne.n	da50 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    da00:	f013 0f04 	tst.w	r3, #4
    da04:	d133      	bne.n	da6e <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    da06:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    da08:	b91b      	cbnz	r3, da12 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    da0a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    da0e:	2b00      	cmp	r3, #0
    da10:	d03c      	beq.n	da8c <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    da12:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    da16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    da1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    da1e:	b3cb      	cbz	r3, da94 <smp_master_ident+0xb6>
	return 0;
    da20:	2000      	movs	r0, #0
}
    da22:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    da24:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    da26:	f105 0148 	add.w	r1, r5, #72	; 0x48
    da2a:	2004      	movs	r0, #4
    da2c:	f000 ff2a 	bl	e884 <bt_keys_get_type>
		if (!keys) {
    da30:	b3b0      	cbz	r0, daa0 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    da32:	8832      	ldrh	r2, [r6, #0]
    da34:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    da36:	f8d6 1002 	ldr.w	r1, [r6, #2]
    da3a:	f8d6 2006 	ldr.w	r2, [r6, #6]
    da3e:	6101      	str	r1, [r0, #16]
    da40:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    da42:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    da46:	f023 0301 	bic.w	r3, r3, #1
    da4a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    da4e:	e7d2      	b.n	d9f6 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    da50:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da54:	f3bf 8f5b 	dmb	ish
    da58:	e853 2f00 	ldrex	r2, [r3]
    da5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    da60:	e843 2100 	strex	r1, r2, [r3]
    da64:	2900      	cmp	r1, #0
    da66:	d1f7      	bne.n	da58 <smp_master_ident+0x7a>
    da68:	f3bf 8f5b 	dmb	ish
    da6c:	e7cb      	b.n	da06 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    da6e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    da72:	f3bf 8f5b 	dmb	ish
    da76:	e853 2f00 	ldrex	r2, [r3]
    da7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    da7e:	e843 2100 	strex	r1, r2, [r3]
    da82:	2900      	cmp	r1, #0
    da84:	d1f7      	bne.n	da76 <smp_master_ident+0x98>
    da86:	f3bf 8f5b 	dmb	ish
    da8a:	e7bc      	b.n	da06 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    da8c:	4620      	mov	r0, r4
    da8e:	f7ff fa39 	bl	cf04 <bt_smp_distribute_keys>
    da92:	e7be      	b.n	da12 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    da94:	2100      	movs	r1, #0
    da96:	4620      	mov	r0, r4
    da98:	f7ff f8b3 	bl	cc02 <smp_pairing_complete>
	return 0;
    da9c:	2000      	movs	r0, #0
    da9e:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    daa0:	2008      	movs	r0, #8
    daa2:	bd70      	pop	{r4, r5, r6, pc}

0000daa4 <smp_encrypt_info>:
{
    daa4:	b538      	push	{r3, r4, r5, lr}
    daa6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    daa8:	f3bf 8f5b 	dmb	ish
    daac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    dab0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dab4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    dab8:	d00b      	beq.n	dad2 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    daba:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    dabc:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    dabe:	3148      	adds	r1, #72	; 0x48
    dac0:	2004      	movs	r0, #4
    dac2:	f000 fedf 	bl	e884 <bt_keys_get_type>
		if (!keys) {
    dac6:	b198      	cbz	r0, daf0 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    dac8:	2210      	movs	r2, #16
    daca:	4629      	mov	r1, r5
    dacc:	301a      	adds	r0, #26
    dace:	f7f2 fbf7 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    dad2:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dad4:	f3bf 8f5b 	dmb	ish
    dad8:	e854 3f00 	ldrex	r3, [r4]
    dadc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dae0:	e844 3200 	strex	r2, r3, [r4]
    dae4:	2a00      	cmp	r2, #0
    dae6:	d1f7      	bne.n	dad8 <smp_encrypt_info+0x34>
    dae8:	f3bf 8f5b 	dmb	ish
	return 0;
    daec:	2000      	movs	r0, #0
    daee:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    daf0:	2008      	movs	r0, #8
}
    daf2:	bd38      	pop	{r3, r4, r5, pc}

0000daf4 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    daf4:	7883      	ldrb	r3, [r0, #2]
    daf6:	b103      	cbz	r3, dafa <smp_check_complete+0x6>
    daf8:	4770      	bx	lr
{
    dafa:	b510      	push	{r4, lr}
    dafc:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    dafe:	2106      	movs	r1, #6
    db00:	f7fb ffa1 	bl	9a46 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    db04:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    db08:	ea21 0104 	bic.w	r1, r1, r4
    db0c:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    db10:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    db14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    db18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    db1c:	b103      	cbz	r3, db20 <smp_check_complete+0x2c>
    db1e:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    db20:	2100      	movs	r1, #0
    db22:	f7ff f86e 	bl	cc02 <smp_pairing_complete>
    db26:	e7fa      	b.n	db1e <smp_check_complete+0x2a>

0000db28 <sign_info_sent>:
{
    db28:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    db2a:	2104      	movs	r1, #4
    db2c:	f7ff ffe2 	bl	daf4 <smp_check_complete>
    db30:	bd08      	pop	{r3, pc}

0000db32 <ident_sent>:
{
    db32:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    db34:	2101      	movs	r1, #1
    db36:	f7ff ffdd 	bl	daf4 <smp_check_complete>
    db3a:	bd08      	pop	{r3, pc}

0000db3c <smp_ident_addr_info>:
{
    db3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    db40:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    db42:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    db44:	782b      	ldrb	r3, [r5, #0]
    db46:	b153      	cbz	r3, db5e <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    db48:	79ab      	ldrb	r3, [r5, #6]
    db4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    db4e:	2bc0      	cmp	r3, #192	; 0xc0
    db50:	bf14      	ite	ne
    db52:	2300      	movne	r3, #0
    db54:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    db56:	b923      	cbnz	r3, db62 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    db58:	200a      	movs	r0, #10
    db5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    db5e:	2301      	movs	r3, #1
    db60:	e7f9      	b.n	db56 <smp_ident_addr_info+0x1a>
    db62:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db64:	f3bf 8f5b 	dmb	ish
    db68:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    db6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    db70:	f413 6f80 	tst.w	r3, #1024	; 0x400
    db74:	d119      	bne.n	dbaa <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    db76:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    db7a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    db7e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    db82:	f013 0f04 	tst.w	r3, #4
    db86:	d14f      	bne.n	dc28 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    db88:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    db8a:	b91b      	cbnz	r3, db94 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    db8c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    db90:	2b00      	cmp	r3, #0
    db92:	d058      	beq.n	dc46 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    db94:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    db98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    db9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    dba0:	2b00      	cmp	r3, #0
    dba2:	d054      	beq.n	dc4e <smp_ident_addr_info+0x112>
	return 0;
    dba4:	2000      	movs	r0, #0
}
    dba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    dbaa:	f106 0848 	add.w	r8, r6, #72	; 0x48
    dbae:	4641      	mov	r1, r8
    dbb0:	2002      	movs	r0, #2
    dbb2:	f000 fe67 	bl	e884 <bt_keys_get_type>
		if (!keys) {
    dbb6:	4681      	mov	r9, r0
    dbb8:	2800      	cmp	r0, #0
    dbba:	d04f      	beq.n	dc5c <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    dbbc:	78f3      	ldrb	r3, [r6, #3]
    dbbe:	bb43      	cbnz	r3, dc12 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    dbc0:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    dbc4:	780b      	ldrb	r3, [r1, #0]
    dbc6:	2b01      	cmp	r3, #1
    dbc8:	d026      	beq.n	dc18 <smp_ident_addr_info+0xdc>
		return false;
    dbca:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    dbcc:	2f00      	cmp	r7, #0
    dbce:	d0d2      	beq.n	db76 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    dbd0:	2206      	movs	r2, #6
    dbd2:	3101      	adds	r1, #1
    dbd4:	f109 0040 	add.w	r0, r9, #64	; 0x40
    dbd8:	f7f2 fb72 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    dbdc:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    dbe0:	b13b      	cbz	r3, dbf2 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    dbe2:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    dbe6:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    dbea:	2fc0      	cmp	r7, #192	; 0xc0
    dbec:	bf14      	ite	ne
    dbee:	2700      	movne	r7, #0
    dbf0:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    dbf2:	2f00      	cmp	r7, #0
    dbf4:	d1bf      	bne.n	db76 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    dbf6:	2207      	movs	r2, #7
    dbf8:	4629      	mov	r1, r5
    dbfa:	4648      	mov	r0, r9
    dbfc:	f7f2 fb60 	bl	2c0 <memcpy>
    dc00:	2207      	movs	r2, #7
    dc02:	4629      	mov	r1, r5
    dc04:	4640      	mov	r0, r8
    dc06:	f7f2 fb5b 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    dc0a:	4630      	mov	r0, r6
    dc0c:	f7fa fba4 	bl	8358 <bt_conn_identity_resolved>
    dc10:	e7b1      	b.n	db76 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    dc12:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    dc16:	e7d5      	b.n	dbc4 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    dc18:	798f      	ldrb	r7, [r1, #6]
    dc1a:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    dc1e:	2f40      	cmp	r7, #64	; 0x40
    dc20:	bf14      	ite	ne
    dc22:	2700      	movne	r7, #0
    dc24:	2701      	moveq	r7, #1
    dc26:	e7d1      	b.n	dbcc <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    dc28:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dc2c:	f3bf 8f5b 	dmb	ish
    dc30:	e853 2f00 	ldrex	r2, [r3]
    dc34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dc38:	e843 2100 	strex	r1, r2, [r3]
    dc3c:	2900      	cmp	r1, #0
    dc3e:	d1f7      	bne.n	dc30 <smp_ident_addr_info+0xf4>
    dc40:	f3bf 8f5b 	dmb	ish
    dc44:	e7a0      	b.n	db88 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    dc46:	4620      	mov	r0, r4
    dc48:	f7ff f95c 	bl	cf04 <bt_smp_distribute_keys>
    dc4c:	e7a2      	b.n	db94 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    dc4e:	2100      	movs	r1, #0
    dc50:	4620      	mov	r0, r4
    dc52:	f7fe ffd6 	bl	cc02 <smp_pairing_complete>
	return 0;
    dc56:	2000      	movs	r0, #0
    dc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    dc5c:	2008      	movs	r0, #8
    dc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000dc64 <legacy_request_tk>:
{
    dc64:	b570      	push	{r4, r5, r6, lr}
    dc66:	b082      	sub	sp, #8
    dc68:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    dc6a:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    dc6c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    dc70:	f000 fdea 	bl	e848 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    dc74:	b168      	cbz	r0, dc92 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dc76:	f3bf 8f5b 	dmb	ish
    dc7a:	6883      	ldr	r3, [r0, #8]
    dc7c:	f3bf 8f5b 	dmb	ish
    dc80:	f013 0f01 	tst.w	r3, #1
    dc84:	d005      	beq.n	dc92 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    dc86:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    dc8a:	b913      	cbnz	r3, dc92 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    dc8c:	2008      	movs	r0, #8
}
    dc8e:	b002      	add	sp, #8
    dc90:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    dc92:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    dc96:	2b01      	cmp	r3, #1
    dc98:	d025      	beq.n	dce6 <legacy_request_tk+0x82>
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d037      	beq.n	dd0e <legacy_request_tk+0xaa>
    dc9e:	2b02      	cmp	r3, #2
    dca0:	d001      	beq.n	dca6 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    dca2:	2008      	movs	r0, #8
    dca4:	e7f3      	b.n	dc8e <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    dca6:	2104      	movs	r1, #4
    dca8:	eb0d 0001 	add.w	r0, sp, r1
    dcac:	f004 ffb8 	bl	12c20 <bt_rand>
    dcb0:	b108      	cbz	r0, dcb6 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    dcb2:	2008      	movs	r0, #8
    dcb4:	e7eb      	b.n	dc8e <legacy_request_tk+0x2a>
		passkey %= 1000000;
    dcb6:	9b01      	ldr	r3, [sp, #4]
    dcb8:	4916      	ldr	r1, [pc, #88]	; (dd14 <legacy_request_tk+0xb0>)
    dcba:	fba1 2103 	umull	r2, r1, r1, r3
    dcbe:	0c89      	lsrs	r1, r1, #18
    dcc0:	4a15      	ldr	r2, [pc, #84]	; (dd18 <legacy_request_tk+0xb4>)
    dcc2:	fb02 3111 	mls	r1, r2, r1, r3
    dcc6:	ae02      	add	r6, sp, #8
    dcc8:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    dccc:	4b13      	ldr	r3, [pc, #76]	; (dd1c <legacy_request_tk+0xb8>)
    dcce:	681b      	ldr	r3, [r3, #0]
    dcd0:	681b      	ldr	r3, [r3, #0]
    dcd2:	4628      	mov	r0, r5
    dcd4:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    dcd6:	2204      	movs	r2, #4
    dcd8:	4631      	mov	r1, r6
    dcda:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    dcde:	f7f2 faef 	bl	2c0 <memcpy>
	return 0;
    dce2:	2000      	movs	r0, #0
		break;
    dce4:	e7d3      	b.n	dc8e <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dce6:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dce8:	f3bf 8f5b 	dmb	ish
    dcec:	e854 3f00 	ldrex	r3, [r4]
    dcf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dcf4:	e844 3200 	strex	r2, r3, [r4]
    dcf8:	2a00      	cmp	r2, #0
    dcfa:	d1f7      	bne.n	dcec <legacy_request_tk+0x88>
    dcfc:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    dd00:	4b06      	ldr	r3, [pc, #24]	; (dd1c <legacy_request_tk+0xb8>)
    dd02:	681b      	ldr	r3, [r3, #0]
    dd04:	685b      	ldr	r3, [r3, #4]
    dd06:	4628      	mov	r0, r5
    dd08:	4798      	blx	r3
	return 0;
    dd0a:	2000      	movs	r0, #0
		break;
    dd0c:	e7bf      	b.n	dc8e <legacy_request_tk+0x2a>
	return 0;
    dd0e:	2000      	movs	r0, #0
    dd10:	e7bd      	b.n	dc8e <legacy_request_tk+0x2a>
    dd12:	bf00      	nop
    dd14:	431bde83 	.word	0x431bde83
    dd18:	000f4240 	.word	0x000f4240
    dd1c:	20002a38 	.word	0x20002a38

0000dd20 <legacy_pairing_rsp>:
{
    dd20:	b538      	push	{r3, r4, r5, lr}
    dd22:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    dd24:	f7fe f90a 	bl	bf3c <legacy_get_pair_method>
    dd28:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    dd2c:	bb10      	cbnz	r0, dd74 <legacy_pairing_rsp+0x54>
    dd2e:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dd30:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dd34:	f3bf 8f5b 	dmb	ish
    dd38:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    dd3c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    dd40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    dd44:	d016      	beq.n	dd74 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dd46:	4b24      	ldr	r3, [pc, #144]	; (ddd8 <legacy_pairing_rsp+0xb8>)
    dd48:	681b      	ldr	r3, [r3, #0]
    dd4a:	b19b      	cbz	r3, dd74 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    dd4c:	691b      	ldr	r3, [r3, #16]
    dd4e:	b18b      	cbz	r3, dd74 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dd50:	f3bf 8f5b 	dmb	ish
    dd54:	e852 3f00 	ldrex	r3, [r2]
    dd58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dd5c:	e842 3100 	strex	r1, r3, [r2]
    dd60:	2900      	cmp	r1, #0
    dd62:	d1f7      	bne.n	dd54 <legacy_pairing_rsp+0x34>
    dd64:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    dd68:	4b1b      	ldr	r3, [pc, #108]	; (ddd8 <legacy_pairing_rsp+0xb8>)
    dd6a:	681b      	ldr	r3, [r3, #0]
    dd6c:	691b      	ldr	r3, [r3, #16]
    dd6e:	6828      	ldr	r0, [r5, #0]
    dd70:	4798      	blx	r3
		return 0;
    dd72:	e004      	b.n	dd7e <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    dd74:	4628      	mov	r0, r5
    dd76:	f7ff ff75 	bl	dc64 <legacy_request_tk>
	if (ret) {
    dd7a:	4604      	mov	r4, r0
    dd7c:	b108      	cbz	r0, dd82 <legacy_pairing_rsp+0x62>
}
    dd7e:	4620      	mov	r0, r4
    dd80:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    dd82:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dd86:	f3bf 8f5b 	dmb	ish
    dd8a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    dd8e:	f3bf 8f5b 	dmb	ish
    dd92:	f412 7f00 	tst.w	r2, #512	; 0x200
    dd96:	d00c      	beq.n	ddb2 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dd98:	f3bf 8f5b 	dmb	ish
    dd9c:	e853 2f00 	ldrex	r2, [r3]
    dda0:	f042 0201 	orr.w	r2, r2, #1
    dda4:	e843 2100 	strex	r1, r2, [r3]
    dda8:	2900      	cmp	r1, #0
    ddaa:	d1f7      	bne.n	dd9c <legacy_pairing_rsp+0x7c>
    ddac:	f3bf 8f5b 	dmb	ish
	return 0;
    ddb0:	e7e5      	b.n	dd7e <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ddb2:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    ddb6:	f3bf 8f5b 	dmb	ish
    ddba:	e853 2f00 	ldrex	r2, [r3]
    ddbe:	f042 0208 	orr.w	r2, r2, #8
    ddc2:	e843 2100 	strex	r1, r2, [r3]
    ddc6:	2900      	cmp	r1, #0
    ddc8:	d1f7      	bne.n	ddba <legacy_pairing_rsp+0x9a>
    ddca:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    ddce:	4628      	mov	r0, r5
    ddd0:	f7fe fdd8 	bl	c984 <legacy_send_pairing_confirm>
    ddd4:	4604      	mov	r4, r0
    ddd6:	e7d2      	b.n	dd7e <legacy_pairing_rsp+0x5e>
    ddd8:	20002a38 	.word	0x20002a38

0000dddc <smp_pairing_rsp>:
{
    dddc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ddde:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    dde0:	78eb      	ldrb	r3, [r5, #3]
    dde2:	3b07      	subs	r3, #7
    dde4:	b2db      	uxtb	r3, r3
    dde6:	2b09      	cmp	r3, #9
    dde8:	d902      	bls.n	ddf0 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    ddea:	2506      	movs	r5, #6
}
    ddec:	4628      	mov	r0, r5
    ddee:	bd70      	pop	{r4, r5, r6, pc}
    ddf0:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    ddf2:	792b      	ldrb	r3, [r5, #4]
    ddf4:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    ddf8:	4013      	ands	r3, r2
    ddfa:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    ddfe:	796b      	ldrb	r3, [r5, #5]
    de00:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    de04:	4013      	ands	r3, r2
    de06:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    de0a:	2302      	movs	r3, #2
    de0c:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    de10:	2206      	movs	r2, #6
    de12:	4629      	mov	r1, r5
    de14:	30ad      	adds	r0, #173	; 0xad
    de16:	f7f2 fa53 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    de1a:	78ab      	ldrb	r3, [r5, #2]
    de1c:	f013 0f08 	tst.w	r3, #8
    de20:	d004      	beq.n	de2c <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    de22:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    de26:	f013 0f08 	tst.w	r3, #8
    de2a:	d148      	bne.n	debe <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    de2c:	78ab      	ldrb	r3, [r5, #2]
    de2e:	f013 0f20 	tst.w	r3, #32
    de32:	d004      	beq.n	de3e <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    de34:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    de38:	f013 0f20 	tst.w	r3, #32
    de3c:	d14e      	bne.n	dedc <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    de3e:	78ab      	ldrb	r3, [r5, #2]
    de40:	f013 0f01 	tst.w	r3, #1
    de44:	d004      	beq.n	de50 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    de46:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    de4a:	f013 0f01 	tst.w	r3, #1
    de4e:	d154      	bne.n	defa <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    de50:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    de54:	f3bf 8f5b 	dmb	ish
    de58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    de5c:	f3bf 8f5b 	dmb	ish
    de60:	f013 0f20 	tst.w	r3, #32
    de64:	d058      	beq.n	df18 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    de66:	7829      	ldrb	r1, [r5, #0]
    de68:	4620      	mov	r0, r4
    de6a:	f7fe f835 	bl	bed8 <get_pair_method>
    de6e:	4605      	mov	r5, r0
    de70:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    de74:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    de78:	f003 0304 	and.w	r3, r3, #4
    de7c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    de80:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    de84:	f003 0306 	and.w	r3, r3, #6
    de88:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    de8c:	2800      	cmp	r0, #0
    de8e:	d049      	beq.n	df24 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    de90:	4b3c      	ldr	r3, [pc, #240]	; (df84 <smp_pairing_rsp+0x1a8>)
    de92:	781b      	ldrb	r3, [r3, #0]
    de94:	2b00      	cmp	r3, #0
    de96:	d067      	beq.n	df68 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    de98:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    de9c:	f3bf 8f5b 	dmb	ish
    dea0:	e853 2f00 	ldrex	r2, [r3]
    dea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    dea8:	e843 2100 	strex	r1, r2, [r3]
    deac:	2900      	cmp	r1, #0
    deae:	d1f7      	bne.n	dea0 <smp_pairing_rsp+0xc4>
    deb0:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    deb4:	4620      	mov	r0, r4
    deb6:	f7fe f94b 	bl	c150 <sc_send_public_key>
    deba:	4605      	mov	r5, r0
    debc:	e796      	b.n	ddec <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    debe:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    dec2:	f3bf 8f5b 	dmb	ish
    dec6:	e853 2f00 	ldrex	r2, [r3]
    deca:	f042 0220 	orr.w	r2, r2, #32
    dece:	e843 2100 	strex	r1, r2, [r3]
    ded2:	2900      	cmp	r1, #0
    ded4:	d1f7      	bne.n	dec6 <smp_pairing_rsp+0xea>
    ded6:	f3bf 8f5b 	dmb	ish
    deda:	e7a7      	b.n	de2c <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    dedc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    dee0:	f3bf 8f5b 	dmb	ish
    dee4:	e853 2f00 	ldrex	r2, [r3]
    dee8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    deec:	e843 2100 	strex	r1, r2, [r3]
    def0:	2900      	cmp	r1, #0
    def2:	d1f7      	bne.n	dee4 <smp_pairing_rsp+0x108>
    def4:	f3bf 8f5b 	dmb	ish
    def8:	e7a1      	b.n	de3e <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    defa:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    defe:	f3bf 8f5b 	dmb	ish
    df02:	e853 2f00 	ldrex	r2, [r3]
    df06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    df0a:	e843 2100 	strex	r1, r2, [r3]
    df0e:	2900      	cmp	r1, #0
    df10:	d1f7      	bne.n	df02 <smp_pairing_rsp+0x126>
    df12:	f3bf 8f5b 	dmb	ish
    df16:	e79b      	b.n	de50 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    df18:	7829      	ldrb	r1, [r5, #0]
    df1a:	4620      	mov	r0, r4
    df1c:	f7ff ff00 	bl	dd20 <legacy_pairing_rsp>
    df20:	4605      	mov	r5, r0
    df22:	e763      	b.n	ddec <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    df24:	f3bf 8f5b 	dmb	ish
    df28:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    df2c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    df30:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    df34:	d0ac      	beq.n	de90 <smp_pairing_rsp+0xb4>
    df36:	4b14      	ldr	r3, [pc, #80]	; (df88 <smp_pairing_rsp+0x1ac>)
    df38:	681b      	ldr	r3, [r3, #0]
    df3a:	2b00      	cmp	r3, #0
    df3c:	d0a8      	beq.n	de90 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    df3e:	691b      	ldr	r3, [r3, #16]
    df40:	2b00      	cmp	r3, #0
    df42:	d0a5      	beq.n	de90 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    df44:	f3bf 8f5b 	dmb	ish
    df48:	e856 3f00 	ldrex	r3, [r6]
    df4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    df50:	e846 3200 	strex	r2, r3, [r6]
    df54:	2a00      	cmp	r2, #0
    df56:	d1f7      	bne.n	df48 <smp_pairing_rsp+0x16c>
    df58:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    df5c:	4b0a      	ldr	r3, [pc, #40]	; (df88 <smp_pairing_rsp+0x1ac>)
    df5e:	681b      	ldr	r3, [r3, #0]
    df60:	691b      	ldr	r3, [r3, #16]
    df62:	6820      	ldr	r0, [r4, #0]
    df64:	4798      	blx	r3
			return 0;
    df66:	e741      	b.n	ddec <smp_pairing_rsp+0x10>
    df68:	f3bf 8f5b 	dmb	ish
    df6c:	e856 3f00 	ldrex	r3, [r6]
    df70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    df74:	e846 3200 	strex	r2, r3, [r6]
    df78:	2a00      	cmp	r2, #0
    df7a:	d1f7      	bne.n	df6c <smp_pairing_rsp+0x190>
    df7c:	f3bf 8f5b 	dmb	ish
		return 0;
    df80:	2500      	movs	r5, #0
    df82:	e733      	b.n	ddec <smp_pairing_rsp+0x10>
    df84:	200009f0 	.word	0x200009f0
    df88:	20002a38 	.word	0x20002a38

0000df8c <legacy_pairing_req>:
{
    df8c:	b538      	push	{r3, r4, r5, lr}
    df8e:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    df90:	f7fd ffd4 	bl	bf3c <legacy_get_pair_method>
    df94:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    df98:	bb10      	cbnz	r0, dfe0 <legacy_pairing_req+0x54>
    df9a:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    df9c:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dfa0:	f3bf 8f5b 	dmb	ish
    dfa4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    dfa8:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    dfac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    dfb0:	d116      	bne.n	dfe0 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    dfb2:	4b18      	ldr	r3, [pc, #96]	; (e014 <legacy_pairing_req+0x88>)
    dfb4:	681b      	ldr	r3, [r3, #0]
    dfb6:	b19b      	cbz	r3, dfe0 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    dfb8:	691b      	ldr	r3, [r3, #16]
    dfba:	b18b      	cbz	r3, dfe0 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dfbc:	f3bf 8f5b 	dmb	ish
    dfc0:	e852 3f00 	ldrex	r3, [r2]
    dfc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dfc8:	e842 3100 	strex	r1, r3, [r2]
    dfcc:	2900      	cmp	r1, #0
    dfce:	d1f7      	bne.n	dfc0 <legacy_pairing_req+0x34>
    dfd0:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    dfd4:	4b0f      	ldr	r3, [pc, #60]	; (e014 <legacy_pairing_req+0x88>)
    dfd6:	681b      	ldr	r3, [r3, #0]
    dfd8:	691b      	ldr	r3, [r3, #16]
    dfda:	6828      	ldr	r0, [r5, #0]
    dfdc:	4798      	blx	r3
		return 0;
    dfde:	e004      	b.n	dfea <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    dfe0:	4628      	mov	r0, r5
    dfe2:	f7fe f8d9 	bl	c198 <send_pairing_rsp>
	if (ret) {
    dfe6:	4604      	mov	r4, r0
    dfe8:	b108      	cbz	r0, dfee <legacy_pairing_req+0x62>
}
    dfea:	4620      	mov	r0, r4
    dfec:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    dfee:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    dff2:	f3bf 8f5b 	dmb	ish
    dff6:	e853 2f00 	ldrex	r2, [r3]
    dffa:	f042 0208 	orr.w	r2, r2, #8
    dffe:	e843 2100 	strex	r1, r2, [r3]
    e002:	2900      	cmp	r1, #0
    e004:	d1f7      	bne.n	dff6 <legacy_pairing_req+0x6a>
    e006:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    e00a:	4628      	mov	r0, r5
    e00c:	f7ff fe2a 	bl	dc64 <legacy_request_tk>
    e010:	4604      	mov	r4, r0
    e012:	e7ea      	b.n	dfea <legacy_pairing_req+0x5e>
    e014:	20002a38 	.word	0x20002a38

0000e018 <smp_pairing_req>:
{
    e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e01a:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e01c:	78f3      	ldrb	r3, [r6, #3]
    e01e:	3b07      	subs	r3, #7
    e020:	b2db      	uxtb	r3, r3
    e022:	2b09      	cmp	r3, #9
    e024:	d902      	bls.n	e02c <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e026:	2506      	movs	r5, #6
}
    e028:	4628      	mov	r0, r5
    e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e02c:	4604      	mov	r4, r0
	ret = smp_init(smp);
    e02e:	f7fe f81c 	bl	c06a <smp_init>
	if (ret) {
    e032:	b108      	cbz	r0, e038 <smp_pairing_req+0x20>
		return ret;
    e034:	b2c5      	uxtb	r5, r0
    e036:	e7f7      	b.n	e028 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e038:	2301      	movs	r3, #1
    e03a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    e03e:	2206      	movs	r2, #6
    e040:	4631      	mov	r1, r6
    e042:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    e046:	f7f2 f93b 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e04a:	2302      	movs	r3, #2
    e04c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    e050:	78b0      	ldrb	r0, [r6, #2]
    e052:	f7fd ff97 	bl	bf84 <get_auth>
    e056:	4605      	mov	r5, r0
    e058:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    e05c:	f7fd ff14 	bl	be88 <get_io_capa>
    e060:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    e064:	2300      	movs	r3, #0
    e066:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e06a:	2310      	movs	r3, #16
    e06c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e070:	7933      	ldrb	r3, [r6, #4]
    e072:	f003 0307 	and.w	r3, r3, #7
    e076:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e07a:	7973      	ldrb	r3, [r6, #5]
    e07c:	f003 0305 	and.w	r3, r3, #5
    e080:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e084:	f015 0f08 	tst.w	r5, #8
    e088:	d003      	beq.n	e092 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    e08a:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e08c:	f013 0f08 	tst.w	r3, #8
    e090:	d15b      	bne.n	e14a <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e092:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    e096:	f013 0f20 	tst.w	r3, #32
    e09a:	d003      	beq.n	e0a4 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    e09c:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e09e:	f013 0f20 	tst.w	r3, #32
    e0a2:	d16d      	bne.n	e180 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    e0a4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    e0a8:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    e0ac:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    e0b0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e0b4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    e0b8:	f013 0f01 	tst.w	r3, #1
    e0bc:	d003      	beq.n	e0c6 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    e0be:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e0c0:	f013 0f01 	tst.w	r3, #1
    e0c4:	d16b      	bne.n	e19e <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e0c6:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    e0ca:	f3bf 8f5b 	dmb	ish
    e0ce:	e857 3f00 	ldrex	r3, [r7]
    e0d2:	f043 0308 	orr.w	r3, r3, #8
    e0d6:	e847 3200 	strex	r2, r3, [r7]
    e0da:	2a00      	cmp	r2, #0
    e0dc:	d1f7      	bne.n	e0ce <smp_pairing_req+0xb6>
    e0de:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e0e2:	f3bf 8f5b 	dmb	ish
    e0e6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    e0ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e0ee:	f013 0f20 	tst.w	r3, #32
    e0f2:	d063      	beq.n	e1bc <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    e0f4:	7831      	ldrb	r1, [r6, #0]
    e0f6:	4620      	mov	r0, r4
    e0f8:	f7fd feee 	bl	bed8 <get_pair_method>
    e0fc:	4605      	mov	r5, r0
    e0fe:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    e102:	2800      	cmp	r0, #0
    e104:	d160      	bne.n	e1c8 <smp_pairing_req+0x1b0>
    e106:	f3bf 8f5b 	dmb	ish
    e10a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    e10e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e112:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    e116:	d157      	bne.n	e1c8 <smp_pairing_req+0x1b0>
    e118:	4b35      	ldr	r3, [pc, #212]	; (e1f0 <smp_pairing_req+0x1d8>)
    e11a:	681b      	ldr	r3, [r3, #0]
    e11c:	2b00      	cmp	r3, #0
    e11e:	d053      	beq.n	e1c8 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    e120:	691b      	ldr	r3, [r3, #16]
    e122:	2b00      	cmp	r3, #0
    e124:	d050      	beq.n	e1c8 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e126:	f3bf 8f5b 	dmb	ish
    e12a:	e857 3f00 	ldrex	r3, [r7]
    e12e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e132:	e847 3200 	strex	r2, r3, [r7]
    e136:	2a00      	cmp	r2, #0
    e138:	d1f7      	bne.n	e12a <smp_pairing_req+0x112>
    e13a:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    e13e:	4b2c      	ldr	r3, [pc, #176]	; (e1f0 <smp_pairing_req+0x1d8>)
    e140:	681b      	ldr	r3, [r3, #0]
    e142:	691b      	ldr	r3, [r3, #16]
    e144:	6820      	ldr	r0, [r4, #0]
    e146:	4798      	blx	r3
			return 0;
    e148:	e76e      	b.n	e028 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e14a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    e14e:	f3bf 8f5b 	dmb	ish
    e152:	e853 2f00 	ldrex	r2, [r3]
    e156:	f042 0220 	orr.w	r2, r2, #32
    e15a:	e843 2100 	strex	r1, r2, [r3]
    e15e:	2900      	cmp	r1, #0
    e160:	d1f7      	bne.n	e152 <smp_pairing_req+0x13a>
    e162:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    e166:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    e16a:	f003 0306 	and.w	r3, r3, #6
    e16e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e172:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    e176:	f003 0304 	and.w	r3, r3, #4
    e17a:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    e17e:	e788      	b.n	e092 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e180:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    e184:	f3bf 8f5b 	dmb	ish
    e188:	e853 2f00 	ldrex	r2, [r3]
    e18c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    e190:	e843 2100 	strex	r1, r2, [r3]
    e194:	2900      	cmp	r1, #0
    e196:	d1f7      	bne.n	e188 <smp_pairing_req+0x170>
    e198:	f3bf 8f5b 	dmb	ish
    e19c:	e782      	b.n	e0a4 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e19e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    e1a2:	f3bf 8f5b 	dmb	ish
    e1a6:	e853 2f00 	ldrex	r2, [r3]
    e1aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e1ae:	e843 2100 	strex	r1, r2, [r3]
    e1b2:	2900      	cmp	r1, #0
    e1b4:	d1f7      	bne.n	e1a6 <smp_pairing_req+0x18e>
    e1b6:	f3bf 8f5b 	dmb	ish
    e1ba:	e784      	b.n	e0c6 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    e1bc:	7831      	ldrb	r1, [r6, #0]
    e1be:	4620      	mov	r0, r4
    e1c0:	f7ff fee4 	bl	df8c <legacy_pairing_req>
    e1c4:	4605      	mov	r5, r0
    e1c6:	e72f      	b.n	e028 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e1c8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    e1cc:	f3bf 8f5b 	dmb	ish
    e1d0:	e853 2f00 	ldrex	r2, [r3]
    e1d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    e1d8:	e843 2100 	strex	r1, r2, [r3]
    e1dc:	2900      	cmp	r1, #0
    e1de:	d1f7      	bne.n	e1d0 <smp_pairing_req+0x1b8>
    e1e0:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    e1e4:	4620      	mov	r0, r4
    e1e6:	f7fd ffd7 	bl	c198 <send_pairing_rsp>
    e1ea:	4605      	mov	r5, r0
    e1ec:	e71c      	b.n	e028 <smp_pairing_req+0x10>
    e1ee:	bf00      	nop
    e1f0:	20002a38 	.word	0x20002a38

0000e1f4 <bt_smp_connected>:
{
    e1f4:	b510      	push	{r4, lr}
    e1f6:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    e1f8:	4904      	ldr	r1, [pc, #16]	; (e20c <bt_smp_connected+0x18>)
    e1fa:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    e1fe:	f01d fa5b 	bl	2b6b8 <k_delayed_work_init>
	smp_reset(smp);
    e202:	4620      	mov	r0, r4
    e204:	f7fe fcbb 	bl	cb7e <smp_reset>
    e208:	bd10      	pop	{r4, pc}
    e20a:	bf00      	nop
    e20c:	0000cdcf 	.word	0x0000cdcf

0000e210 <bt_smp_send_security_req>:
{
    e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e214:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    e216:	f7fd ff15 	bl	c044 <smp_chan_get>
	if (!smp) {
    e21a:	b3e8      	cbz	r0, e298 <bt_smp_send_security_req+0x88>
    e21c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e21e:	f3bf 8f5b 	dmb	ish
    e222:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    e226:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e22a:	f013 0f10 	tst.w	r3, #16
    e22e:	d136      	bne.n	e29e <bt_smp_send_security_req+0x8e>
    e230:	f3bf 8f5b 	dmb	ish
    e234:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    e238:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    e23c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e240:	bb85      	cbnz	r5, e2a4 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    e242:	4630      	mov	r0, r6
    e244:	f7fd feb4 	bl	bfb0 <sec_level_reachable>
    e248:	b378      	cbz	r0, e2aa <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    e24a:	2201      	movs	r2, #1
    e24c:	210b      	movs	r1, #11
    e24e:	4630      	mov	r0, r6
    e250:	f7fd fefd 	bl	c04e <smp_create_pdu>
	if (!req_buf) {
    e254:	4607      	mov	r7, r0
    e256:	b358      	cbz	r0, e2b0 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    e258:	2101      	movs	r1, #1
    e25a:	3008      	adds	r0, #8
    e25c:	f00e f856 	bl	1c30c <net_buf_simple_add>
    e260:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    e262:	2009      	movs	r0, #9
    e264:	f7fd fe8e 	bl	bf84 <get_auth>
    e268:	f888 0000 	strb.w	r0, [r8]
    e26c:	2300      	movs	r3, #0
    e26e:	463a      	mov	r2, r7
    e270:	2106      	movs	r1, #6
    e272:	4630      	mov	r0, r6
    e274:	f7fb f9e1 	bl	963a <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e278:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e27a:	f3bf 8f5b 	dmb	ish
    e27e:	e854 3f00 	ldrex	r3, [r4]
    e282:	f043 0320 	orr.w	r3, r3, #32
    e286:	e844 3200 	strex	r2, r3, [r4]
    e28a:	2a00      	cmp	r2, #0
    e28c:	d1f7      	bne.n	e27e <bt_smp_send_security_req+0x6e>
    e28e:	f3bf 8f5b 	dmb	ish
}
    e292:	4628      	mov	r0, r5
    e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    e298:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    e29c:	e7f9      	b.n	e292 <bt_smp_send_security_req+0x82>
		return -EIO;
    e29e:	f06f 0504 	mvn.w	r5, #4
    e2a2:	e7f6      	b.n	e292 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    e2a4:	f06f 050f 	mvn.w	r5, #15
    e2a8:	e7f3      	b.n	e292 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    e2aa:	f06f 0515 	mvn.w	r5, #21
    e2ae:	e7f0      	b.n	e292 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    e2b0:	f06f 0568 	mvn.w	r5, #104	; 0x68
    e2b4:	e7ed      	b.n	e292 <bt_smp_send_security_req+0x82>

0000e2b6 <bt_smp_send_pairing_req>:
{
    e2b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e2ba:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    e2bc:	f7fd fec2 	bl	c044 <smp_chan_get>
	if (!smp) {
    e2c0:	2800      	cmp	r0, #0
    e2c2:	d06b      	beq.n	e39c <bt_smp_send_pairing_req+0xe6>
    e2c4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e2c6:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e2ca:	f3bf 8f5b 	dmb	ish
    e2ce:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    e2d2:	f3bf 8f5b 	dmb	ish
    e2d6:	f013 0f10 	tst.w	r3, #16
    e2da:	d162      	bne.n	e3a2 <bt_smp_send_pairing_req+0xec>
    e2dc:	f3bf 8f5b 	dmb	ish
    e2e0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    e2e4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e2e8:	f013 0f08 	tst.w	r3, #8
    e2ec:	d15c      	bne.n	e3a8 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    e2ee:	4628      	mov	r0, r5
    e2f0:	f7fd fe5e 	bl	bfb0 <sec_level_reachable>
    e2f4:	2800      	cmp	r0, #0
    e2f6:	d05a      	beq.n	e3ae <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    e2f8:	4620      	mov	r0, r4
    e2fa:	f7fd feb6 	bl	c06a <smp_init>
    e2fe:	4680      	mov	r8, r0
    e300:	2800      	cmp	r0, #0
    e302:	d157      	bne.n	e3b4 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    e304:	2206      	movs	r2, #6
    e306:	2101      	movs	r1, #1
    e308:	4628      	mov	r0, r5
    e30a:	f7fd fea0 	bl	c04e <smp_create_pdu>
	if (!req_buf) {
    e30e:	4607      	mov	r7, r0
    e310:	2800      	cmp	r0, #0
    e312:	d052      	beq.n	e3ba <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    e314:	2106      	movs	r1, #6
    e316:	3008      	adds	r0, #8
    e318:	f00d fff8 	bl	1c30c <net_buf_simple_add>
    e31c:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    e31e:	2009      	movs	r0, #9
    e320:	f7fd fe30 	bl	bf84 <get_auth>
    e324:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    e326:	f7fd fdaf 	bl	be88 <get_io_capa>
    e32a:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    e32c:	f04f 0900 	mov.w	r9, #0
    e330:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e334:	2310      	movs	r3, #16
    e336:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    e338:	2205      	movs	r2, #5
    e33a:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    e33c:	2307      	movs	r3, #7
    e33e:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    e340:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    e344:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e348:	2301      	movs	r3, #1
    e34a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    e34e:	2206      	movs	r2, #6
    e350:	4629      	mov	r1, r5
    e352:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    e356:	f7f1 ffb3 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    e35a:	464a      	mov	r2, r9
    e35c:	4639      	mov	r1, r7
    e35e:	4620      	mov	r0, r4
    e360:	f7fd fec8 	bl	c0f4 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    e364:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e366:	f3bf 8f5b 	dmb	ish
    e36a:	e854 3f00 	ldrex	r3, [r4]
    e36e:	f043 0304 	orr.w	r3, r3, #4
    e372:	e844 3200 	strex	r2, r3, [r4]
    e376:	2a00      	cmp	r2, #0
    e378:	d1f7      	bne.n	e36a <bt_smp_send_pairing_req+0xb4>
    e37a:	f3bf 8f5b 	dmb	ish
    e37e:	f3bf 8f5b 	dmb	ish
    e382:	e856 3f00 	ldrex	r3, [r6]
    e386:	f043 0308 	orr.w	r3, r3, #8
    e38a:	e846 3200 	strex	r2, r3, [r6]
    e38e:	2a00      	cmp	r2, #0
    e390:	d1f7      	bne.n	e382 <bt_smp_send_pairing_req+0xcc>
    e392:	f3bf 8f5b 	dmb	ish
}
    e396:	4640      	mov	r0, r8
    e398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    e39c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    e3a0:	e7f9      	b.n	e396 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    e3a2:	f06f 0804 	mvn.w	r8, #4
    e3a6:	e7f6      	b.n	e396 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    e3a8:	f06f 080f 	mvn.w	r8, #15
    e3ac:	e7f3      	b.n	e396 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    e3ae:	f06f 0815 	mvn.w	r8, #21
    e3b2:	e7f0      	b.n	e396 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    e3b4:	f06f 0868 	mvn.w	r8, #104	; 0x68
    e3b8:	e7ed      	b.n	e396 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    e3ba:	f06f 0868 	mvn.w	r8, #104	; 0x68
    e3be:	e7ea      	b.n	e396 <bt_smp_send_pairing_req+0xe0>

0000e3c0 <smp_security_request>:
{
    e3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3c2:	b085      	sub	sp, #20
    e3c4:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    e3c6:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    e3c8:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    e3ca:	4a35      	ldr	r2, [pc, #212]	; (e4a0 <smp_security_request+0xe0>)
    e3cc:	7812      	ldrb	r2, [r2, #0]
    e3ce:	b332      	cbz	r2, e41e <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e3d0:	781d      	ldrb	r5, [r3, #0]
    e3d2:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    e3d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e3d8:	b32b      	cbz	r3, e426 <smp_security_request+0x66>
	if (!conn->le.keys) {
    e3da:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d039      	beq.n	e454 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    e3e0:	f015 0f04 	tst.w	r5, #4
    e3e4:	d12e      	bne.n	e444 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    e3e6:	f015 0f08 	tst.w	r5, #8
    e3ea:	d004      	beq.n	e3f6 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    e3ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e3ee:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    e3f0:	f013 0f20 	tst.w	r3, #32
    e3f4:	d02e      	beq.n	e454 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    e3f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    e3f8:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    e3fc:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    e3fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    e402:	9502      	str	r5, [sp, #8]
    e404:	9201      	str	r2, [sp, #4]
    e406:	8b1b      	ldrh	r3, [r3, #24]
    e408:	9300      	str	r3, [sp, #0]
    e40a:	4602      	mov	r2, r0
    e40c:	460b      	mov	r3, r1
    e40e:	4620      	mov	r0, r4
    e410:	f7f9 ffbc 	bl	838c <bt_conn_le_start_encryption>
    e414:	2800      	cmp	r0, #0
    e416:	da24      	bge.n	e462 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    e418:	2008      	movs	r0, #8
}
    e41a:	b005      	add	sp, #20
    e41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    e41e:	781d      	ldrb	r5, [r3, #0]
    e420:	f005 0507 	and.w	r5, r5, #7
    e424:	e7d7      	b.n	e3d6 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    e426:	f104 0748 	add.w	r7, r4, #72	; 0x48
    e42a:	4639      	mov	r1, r7
    e42c:	2020      	movs	r0, #32
    e42e:	f000 f98f 	bl	e750 <bt_keys_find>
    e432:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    e434:	2800      	cmp	r0, #0
    e436:	d1d0      	bne.n	e3da <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    e438:	4639      	mov	r1, r7
    e43a:	2004      	movs	r0, #4
    e43c:	f000 f988 	bl	e750 <bt_keys_find>
    e440:	6720      	str	r0, [r4, #112]	; 0x70
    e442:	e7ca      	b.n	e3da <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e444:	f3bf 8f5b 	dmb	ish
    e448:	689b      	ldr	r3, [r3, #8]
    e44a:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    e44e:	f013 0f01 	tst.w	r3, #1
    e452:	d1c8      	bne.n	e3e6 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    e454:	4620      	mov	r0, r4
    e456:	f7ff ff2e 	bl	e2b6 <bt_smp_send_pairing_req>
    e45a:	2800      	cmp	r0, #0
    e45c:	da10      	bge.n	e480 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    e45e:	2008      	movs	r0, #8
    e460:	e7db      	b.n	e41a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e462:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e464:	f3bf 8f5b 	dmb	ish
    e468:	e856 3f00 	ldrex	r3, [r6]
    e46c:	f043 0302 	orr.w	r3, r3, #2
    e470:	e846 3200 	strex	r2, r3, [r6]
    e474:	2a00      	cmp	r2, #0
    e476:	d1f7      	bne.n	e468 <smp_security_request+0xa8>
    e478:	f3bf 8f5b 	dmb	ish
	return 0;
    e47c:	2000      	movs	r0, #0
    e47e:	e7cc      	b.n	e41a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e480:	36a0      	adds	r6, #160	; 0xa0
    e482:	f3bf 8f5b 	dmb	ish
    e486:	e856 3f00 	ldrex	r3, [r6]
    e48a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e48e:	e846 3200 	strex	r2, r3, [r6]
    e492:	2a00      	cmp	r2, #0
    e494:	d1f7      	bne.n	e486 <smp_security_request+0xc6>
    e496:	f3bf 8f5b 	dmb	ish
	return 0;
    e49a:	2000      	movs	r0, #0
    e49c:	e7bd      	b.n	e41a <smp_security_request+0x5a>
    e49e:	bf00      	nop
    e4a0:	20000a34 	.word	0x20000a34

0000e4a4 <bt_smp_sign_verify>:
{
    e4a4:	b530      	push	{r4, r5, lr}
    e4a6:	b085      	sub	sp, #20
    e4a8:	4605      	mov	r5, r0
    e4aa:	460c      	mov	r4, r1
	return buf->data + buf->len;
    e4ac:	6889      	ldr	r1, [r1, #8]
    e4ae:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e4b0:	3b0c      	subs	r3, #12
    e4b2:	220c      	movs	r2, #12
    e4b4:	4419      	add	r1, r3
    e4b6:	a801      	add	r0, sp, #4
    e4b8:	f7f1 ff02 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    e4bc:	f105 0148 	add.w	r1, r5, #72	; 0x48
    e4c0:	2010      	movs	r0, #16
    e4c2:	f000 f945 	bl	e750 <bt_keys_find>
	if (!keys) {
    e4c6:	b320      	cbz	r0, e512 <bt_smp_sign_verify+0x6e>
    e4c8:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    e4ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    e4cc:	a904      	add	r1, sp, #16
    e4ce:	f841 3d10 	str.w	r3, [r1, #-16]!
    e4d2:	68a0      	ldr	r0, [r4, #8]
    e4d4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    e4d6:	3b0c      	subs	r3, #12
    e4d8:	2204      	movs	r2, #4
    e4da:	4418      	add	r0, r3
    e4dc:	f7f1 fef0 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    e4e0:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    e4e2:	3a0c      	subs	r2, #12
    e4e4:	b292      	uxth	r2, r2
    e4e6:	68a1      	ldr	r1, [r4, #8]
    e4e8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    e4ec:	f7fd feac 	bl	c248 <smp_sign_buf>
	if (err) {
    e4f0:	b990      	cbnz	r0, e518 <bt_smp_sign_verify+0x74>
    e4f2:	68a1      	ldr	r1, [r4, #8]
    e4f4:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    e4f6:	3b0c      	subs	r3, #12
    e4f8:	220c      	movs	r2, #12
    e4fa:	4419      	add	r1, r3
    e4fc:	a801      	add	r0, sp, #4
    e4fe:	f01d fd29 	bl	2bf54 <memcmp>
    e502:	4602      	mov	r2, r0
    e504:	b958      	cbnz	r0, e51e <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    e506:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    e508:	3301      	adds	r3, #1
    e50a:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    e50c:	4610      	mov	r0, r2
    e50e:	b005      	add	sp, #20
    e510:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    e512:	f06f 0201 	mvn.w	r2, #1
    e516:	e7f9      	b.n	e50c <bt_smp_sign_verify+0x68>
		return -EIO;
    e518:	f06f 0204 	mvn.w	r2, #4
    e51c:	e7f6      	b.n	e50c <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    e51e:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    e522:	e7f3      	b.n	e50c <bt_smp_sign_verify+0x68>

0000e524 <bt_smp_sign>:
{
    e524:	b530      	push	{r4, r5, lr}
    e526:	b083      	sub	sp, #12
    e528:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    e52a:	f100 0148 	add.w	r1, r0, #72	; 0x48
    e52e:	2008      	movs	r0, #8
    e530:	f000 f90e 	bl	e750 <bt_keys_find>
	if (!keys) {
    e534:	b300      	cbz	r0, e578 <bt_smp_sign+0x54>
    e536:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    e538:	210c      	movs	r1, #12
    e53a:	f104 0008 	add.w	r0, r4, #8
    e53e:	f00d fee5 	bl	1c30c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    e542:	6dab      	ldr	r3, [r5, #88]	; 0x58
    e544:	a902      	add	r1, sp, #8
    e546:	f841 3d04 	str.w	r3, [r1, #-4]!
    e54a:	68a0      	ldr	r0, [r4, #8]
    e54c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    e54e:	3b0c      	subs	r3, #12
    e550:	2204      	movs	r2, #4
    e552:	4418      	add	r0, r3
    e554:	f7f1 feb4 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    e558:	89a2      	ldrh	r2, [r4, #12]
    e55a:	3a0c      	subs	r2, #12
    e55c:	b292      	uxth	r2, r2
    e55e:	68a1      	ldr	r1, [r4, #8]
    e560:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e564:	f7fd fe70 	bl	c248 <smp_sign_buf>
	if (err) {
    e568:	4602      	mov	r2, r0
    e56a:	b940      	cbnz	r0, e57e <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    e56c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    e56e:	3301      	adds	r3, #1
    e570:	65ab      	str	r3, [r5, #88]	; 0x58
}
    e572:	4610      	mov	r0, r2
    e574:	b003      	add	sp, #12
    e576:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    e578:	f06f 0201 	mvn.w	r2, #1
    e57c:	e7f9      	b.n	e572 <bt_smp_sign+0x4e>
		return -EIO;
    e57e:	f06f 0204 	mvn.w	r2, #4
    e582:	e7f6      	b.n	e572 <bt_smp_sign+0x4e>

0000e584 <bt_smp_update_keys>:
{
    e584:	b570      	push	{r4, r5, r6, lr}
    e586:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    e588:	f7fd fd5c 	bl	c044 <smp_chan_get>
	if (!smp) {
    e58c:	2800      	cmp	r0, #0
    e58e:	d03d      	beq.n	e60c <bt_smp_update_keys+0x88>
    e590:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e592:	f3bf 8f5b 	dmb	ish
    e596:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    e59a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e59e:	f013 0f08 	tst.w	r3, #8
    e5a2:	d033      	beq.n	e60c <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    e5a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    e5a6:	b108      	cbz	r0, e5ac <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    e5a8:	f000 f97f 	bl	e8aa <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    e5ac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e5b0:	f000 f8a4 	bl	e6fc <bt_keys_get_addr>
    e5b4:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    e5b6:	b348      	cbz	r0, e60c <bt_smp_update_keys+0x88>
    e5b8:	f3bf 8f5b 	dmb	ish
    e5bc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e5c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    e5c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    e5c8:	d121      	bne.n	e60e <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    e5ca:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    e5ce:	3b01      	subs	r3, #1
    e5d0:	2b02      	cmp	r3, #2
    e5d2:	d82b      	bhi.n	e62c <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    e5d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e5d6:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e5d8:	f3bf 8f5b 	dmb	ish
    e5dc:	e853 2f00 	ldrex	r2, [r3]
    e5e0:	f042 0201 	orr.w	r2, r2, #1
    e5e4:	e843 2100 	strex	r1, r2, [r3]
    e5e8:	2900      	cmp	r1, #0
    e5ea:	d1f7      	bne.n	e5dc <bt_smp_update_keys+0x58>
    e5ec:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    e5f0:	6f26      	ldr	r6, [r4, #112]	; 0x70
    e5f2:	4628      	mov	r0, r5
    e5f4:	f7fd fc8a 	bl	bf0c <get_encryption_key_size>
    e5f8:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e5fa:	f3bf 8f5b 	dmb	ish
    e5fe:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e602:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    e606:	f013 0f20 	tst.w	r3, #32
    e60a:	d11e      	bne.n	e64a <bt_smp_update_keys+0xc6>
    e60c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    e60e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e610:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e612:	f3bf 8f5b 	dmb	ish
    e616:	e853 2f00 	ldrex	r2, [r3]
    e61a:	f042 0202 	orr.w	r2, r2, #2
    e61e:	e843 2100 	strex	r1, r2, [r3]
    e622:	2900      	cmp	r1, #0
    e624:	d1f7      	bne.n	e616 <bt_smp_update_keys+0x92>
    e626:	f3bf 8f5b 	dmb	ish
    e62a:	e7ce      	b.n	e5ca <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    e62c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e62e:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e630:	f3bf 8f5b 	dmb	ish
    e634:	e853 2f00 	ldrex	r2, [r3]
    e638:	f022 0201 	bic.w	r2, r2, #1
    e63c:	e843 2100 	strex	r1, r2, [r3]
    e640:	2900      	cmp	r1, #0
    e642:	d1f7      	bne.n	e634 <bt_smp_update_keys+0xb0>
    e644:	f3bf 8f5b 	dmb	ish
    e648:	e7d2      	b.n	e5f0 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e64a:	f3bf 8f5b 	dmb	ish
    e64e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e652:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    e656:	f413 6f80 	tst.w	r3, #1024	; 0x400
    e65a:	d0d7      	beq.n	e60c <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    e65c:	2120      	movs	r1, #32
    e65e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    e660:	f000 f90c 	bl	e87c <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    e664:	6f20      	ldr	r0, [r4, #112]	; 0x70
    e666:	2210      	movs	r2, #16
    e668:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    e66c:	301a      	adds	r0, #26
    e66e:	f7f1 fe27 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    e672:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e674:	2000      	movs	r0, #0
    e676:	2100      	movs	r1, #0
    e678:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    e67c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    e67e:	2200      	movs	r2, #0
    e680:	831a      	strh	r2, [r3, #24]
    e682:	e7c3      	b.n	e60c <bt_smp_update_keys+0x88>

0000e684 <bt_smp_get_tk>:
{
    e684:	b570      	push	{r4, r5, r6, lr}
    e686:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    e688:	f7fd fcdc 	bl	c044 <smp_chan_get>
	if (!smp) {
    e68c:	b300      	cbz	r0, e6d0 <bt_smp_get_tk+0x4c>
    e68e:	4604      	mov	r4, r0
    e690:	f3bf 8f5b 	dmb	ish
    e694:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    e698:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e69c:	f013 0f08 	tst.w	r3, #8
    e6a0:	d101      	bne.n	e6a6 <bt_smp_get_tk+0x22>
		return false;
    e6a2:	2000      	movs	r0, #0
    e6a4:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    e6a6:	f7fd fc31 	bl	bf0c <get_encryption_key_size>
    e6aa:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    e6ac:	4602      	mov	r2, r0
    e6ae:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    e6b2:	4628      	mov	r0, r5
    e6b4:	f7f1 fe04 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    e6b8:	2e0f      	cmp	r6, #15
    e6ba:	d901      	bls.n	e6c0 <bt_smp_get_tk+0x3c>
	return true;
    e6bc:	2001      	movs	r0, #1
}
    e6be:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    e6c0:	f1c6 0210 	rsb	r2, r6, #16
    e6c4:	2100      	movs	r1, #0
    e6c6:	19a8      	adds	r0, r5, r6
    e6c8:	f01d fcd8 	bl	2c07c <memset>
	return true;
    e6cc:	2001      	movs	r0, #1
    e6ce:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    e6d0:	2000      	movs	r0, #0
    e6d2:	bd70      	pop	{r4, r5, r6, pc}

0000e6d4 <bt_smp_init>:

int bt_smp_init(void)
{
    e6d4:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    e6d6:	f7fd fca9 	bl	c02c <le_sc_supported>
    e6da:	4b05      	ldr	r3, [pc, #20]	; (e6f0 <bt_smp_init+0x1c>)
    e6dc:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    e6de:	4805      	ldr	r0, [pc, #20]	; (e6f4 <bt_smp_init+0x20>)
    e6e0:	f7fa fe04 	bl	92ec <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    e6e4:	4804      	ldr	r0, [pc, #16]	; (e6f8 <bt_smp_init+0x24>)
    e6e6:	f7f9 fc7f 	bl	7fe8 <bt_pub_key_gen>

	return smp_self_test();
}
    e6ea:	2000      	movs	r0, #0
    e6ec:	bd08      	pop	{r3, pc}
    e6ee:	bf00      	nop
    e6f0:	20000a34 	.word	0x20000a34
    e6f4:	2000bbd4 	.word	0x2000bbd4
    e6f8:	2000bbf4 	.word	0x2000bbf4

0000e6fc <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    e6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6fe:	b083      	sub	sp, #12
    e700:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e702:	2500      	movs	r5, #0
    e704:	b11d      	cbz	r5, e70e <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    e706:	2400      	movs	r4, #0
}
    e708:	4620      	mov	r0, r4
    e70a:	b003      	add	sp, #12
    e70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    e70e:	00eb      	lsls	r3, r5, #3
    e710:	442b      	add	r3, r5
    e712:	011a      	lsls	r2, r3, #4
    e714:	4c0d      	ldr	r4, [pc, #52]	; (e74c <bt_keys_get_addr+0x50>)
    e716:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    e718:	2207      	movs	r2, #7
    e71a:	4631      	mov	r1, r6
    e71c:	4620      	mov	r0, r4
    e71e:	f01d fc19 	bl	2bf54 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    e722:	2800      	cmp	r0, #0
    e724:	d0f0      	beq.n	e708 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    e726:	2300      	movs	r3, #0
    e728:	9300      	str	r3, [sp, #0]
    e72a:	f8cd 3003 	str.w	r3, [sp, #3]
    e72e:	2207      	movs	r2, #7
    e730:	4669      	mov	r1, sp
    e732:	4620      	mov	r0, r4
    e734:	f01d fc0e 	bl	2bf54 <memcmp>
    e738:	b108      	cbz	r0, e73e <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e73a:	3501      	adds	r5, #1
    e73c:	e7e2      	b.n	e704 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    e73e:	2207      	movs	r2, #7
    e740:	4631      	mov	r1, r6
    e742:	4620      	mov	r0, r4
    e744:	f7f1 fdbc 	bl	2c0 <memcpy>
			return keys;
    e748:	e7de      	b.n	e708 <bt_keys_get_addr+0xc>
    e74a:	bf00      	nop
    e74c:	20000a38 	.word	0x20000a38

0000e750 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    e750:	b570      	push	{r4, r5, r6, lr}
    e752:	4605      	mov	r5, r0
    e754:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e756:	2400      	movs	r4, #0
    e758:	b10c      	cbz	r4, e75e <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    e75a:	2000      	movs	r0, #0
}
    e75c:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    e75e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    e762:	011a      	lsls	r2, r3, #4
    e764:	4b0b      	ldr	r3, [pc, #44]	; (e794 <bt_keys_find+0x44>)
    e766:	4413      	add	r3, r2
    e768:	899b      	ldrh	r3, [r3, #12]
    e76a:	422b      	tst	r3, r5
    e76c:	d101      	bne.n	e772 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e76e:	3401      	adds	r4, #1
    e770:	e7f2      	b.n	e758 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    e772:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    e776:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    e778:	2207      	movs	r2, #7
    e77a:	4631      	mov	r1, r6
    e77c:	4805      	ldr	r0, [pc, #20]	; (e794 <bt_keys_find+0x44>)
    e77e:	4418      	add	r0, r3
    e780:	f01d fbe8 	bl	2bf54 <memcmp>
		if ((key_pool[i].keys & type) &&
    e784:	2800      	cmp	r0, #0
    e786:	d1f2      	bne.n	e76e <bt_keys_find+0x1e>
			return &key_pool[i];
    e788:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    e78c:	0123      	lsls	r3, r4, #4
    e78e:	4801      	ldr	r0, [pc, #4]	; (e794 <bt_keys_find+0x44>)
    e790:	4418      	add	r0, r3
    e792:	bd70      	pop	{r4, r5, r6, pc}
    e794:	20000a38 	.word	0x20000a38

0000e798 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e79a:	7803      	ldrb	r3, [r0, #0]
    e79c:	2b01      	cmp	r3, #1
    e79e:	d004      	beq.n	e7aa <bt_keys_find_irk+0x12>
		return false;
    e7a0:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    e7a2:	b153      	cbz	r3, e7ba <bt_keys_find_irk+0x22>
    e7a4:	4605      	mov	r5, r0
    e7a6:	2400      	movs	r4, #0
    e7a8:	e00a      	b.n	e7c0 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    e7aa:	7983      	ldrb	r3, [r0, #6]
    e7ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e7b0:	2b40      	cmp	r3, #64	; 0x40
    e7b2:	bf14      	ite	ne
    e7b4:	2300      	movne	r3, #0
    e7b6:	2301      	moveq	r3, #1
    e7b8:	e7f3      	b.n	e7a2 <bt_keys_find_irk+0xa>
		return NULL;
    e7ba:	2000      	movs	r0, #0
    e7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e7be:	3401      	adds	r4, #1
    e7c0:	b9c4      	cbnz	r4, e7f4 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e7c2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    e7c6:	011a      	lsls	r2, r3, #4
    e7c8:	4b1e      	ldr	r3, [pc, #120]	; (e844 <bt_keys_find_irk+0xac>)
    e7ca:	4413      	add	r3, r2
    e7cc:	899b      	ldrh	r3, [r3, #12]
    e7ce:	f013 0f02 	tst.w	r3, #2
    e7d2:	d0f4      	beq.n	e7be <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    e7d4:	4611      	mov	r1, r2
    e7d6:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    e7d8:	2206      	movs	r2, #6
    e7da:	4b1a      	ldr	r3, [pc, #104]	; (e844 <bt_keys_find_irk+0xac>)
    e7dc:	4419      	add	r1, r3
    e7de:	1c68      	adds	r0, r5, #1
    e7e0:	f01d fbb8 	bl	2bf54 <memcmp>
    e7e4:	2800      	cmp	r0, #0
    e7e6:	d1ea      	bne.n	e7be <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    e7e8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    e7ec:	0123      	lsls	r3, r4, #4
    e7ee:	4815      	ldr	r0, [pc, #84]	; (e844 <bt_keys_find_irk+0xac>)
    e7f0:	4418      	add	r0, r3
    e7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e7f4:	2400      	movs	r4, #0
    e7f6:	e000      	b.n	e7fa <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e7f8:	3401      	adds	r4, #1
    e7fa:	bb04      	cbnz	r4, e83e <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e7fc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    e800:	011a      	lsls	r2, r3, #4
    e802:	4b10      	ldr	r3, [pc, #64]	; (e844 <bt_keys_find_irk+0xac>)
    e804:	4413      	add	r3, r2
    e806:	899b      	ldrh	r3, [r3, #12]
    e808:	f013 0f02 	tst.w	r3, #2
    e80c:	d0f4      	beq.n	e7f8 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    e80e:	4610      	mov	r0, r2
    e810:	3030      	adds	r0, #48	; 0x30
    e812:	1c6e      	adds	r6, r5, #1
    e814:	4631      	mov	r1, r6
    e816:	4b0b      	ldr	r3, [pc, #44]	; (e844 <bt_keys_find_irk+0xac>)
    e818:	4418      	add	r0, r3
    e81a:	f7f7 f986 	bl	5b2a <bt_rpa_irk_matches>
    e81e:	2800      	cmp	r0, #0
    e820:	d0ea      	beq.n	e7f8 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    e822:	4d08      	ldr	r5, [pc, #32]	; (e844 <bt_keys_find_irk+0xac>)
    e824:	00e7      	lsls	r7, r4, #3
    e826:	193a      	adds	r2, r7, r4
    e828:	0113      	lsls	r3, r2, #4
    e82a:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    e82c:	2206      	movs	r2, #6
    e82e:	4631      	mov	r1, r6
    e830:	18e8      	adds	r0, r5, r3
    e832:	f7f1 fd45 	bl	2c0 <memcpy>

			return &key_pool[i];
    e836:	443c      	add	r4, r7
    e838:	0120      	lsls	r0, r4, #4
    e83a:	4428      	add	r0, r5
    e83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    e83e:	2000      	movs	r0, #0
}
    e840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e842:	bf00      	nop
    e844:	20000a38 	.word	0x20000a38

0000e848 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    e848:	b538      	push	{r3, r4, r5, lr}
    e84a:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e84c:	2400      	movs	r4, #0
    e84e:	b10c      	cbz	r4, e854 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    e850:	2000      	movs	r0, #0
}
    e852:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    e854:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    e858:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    e85a:	2207      	movs	r2, #7
    e85c:	4629      	mov	r1, r5
    e85e:	4806      	ldr	r0, [pc, #24]	; (e878 <bt_keys_find_addr+0x30>)
    e860:	4418      	add	r0, r3
    e862:	f01d fb77 	bl	2bf54 <memcmp>
    e866:	b108      	cbz	r0, e86c <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    e868:	3401      	adds	r4, #1
    e86a:	e7f0      	b.n	e84e <bt_keys_find_addr+0x6>
			return &key_pool[i];
    e86c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    e870:	0123      	lsls	r3, r4, #4
    e872:	4801      	ldr	r0, [pc, #4]	; (e878 <bt_keys_find_addr+0x30>)
    e874:	4418      	add	r0, r3
    e876:	bd38      	pop	{r3, r4, r5, pc}
    e878:	20000a38 	.word	0x20000a38

0000e87c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    e87c:	8983      	ldrh	r3, [r0, #12]
    e87e:	4319      	orrs	r1, r3
    e880:	8181      	strh	r1, [r0, #12]
    e882:	4770      	bx	lr

0000e884 <bt_keys_get_type>:
{
    e884:	b570      	push	{r4, r5, r6, lr}
    e886:	4606      	mov	r6, r0
    e888:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    e88a:	f7ff ff61 	bl	e750 <bt_keys_find>
	if (keys) {
    e88e:	4604      	mov	r4, r0
    e890:	b108      	cbz	r0, e896 <bt_keys_get_type+0x12>
}
    e892:	4620      	mov	r0, r4
    e894:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    e896:	4628      	mov	r0, r5
    e898:	f7ff ff30 	bl	e6fc <bt_keys_get_addr>
	if (!keys) {
    e89c:	4604      	mov	r4, r0
    e89e:	2800      	cmp	r0, #0
    e8a0:	d0f7      	beq.n	e892 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    e8a2:	4631      	mov	r1, r6
    e8a4:	f7ff ffea 	bl	e87c <bt_keys_add_type>
	return keys;
    e8a8:	e7f3      	b.n	e892 <bt_keys_get_type+0xe>

0000e8aa <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    e8aa:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    e8ac:	2290      	movs	r2, #144	; 0x90
    e8ae:	2100      	movs	r1, #0
    e8b0:	f01d fbe4 	bl	2c07c <memset>
    e8b4:	bd08      	pop	{r3, pc}

0000e8b6 <status_cmd_handle>:
}
    e8b6:	f06f 0015 	mvn.w	r0, #21
    e8ba:	4770      	bx	lr

0000e8bc <evt_create>:
{
    e8bc:	b538      	push	{r3, r4, r5, lr}
    e8be:	460d      	mov	r5, r1
    e8c0:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    e8c2:	2102      	movs	r1, #2
    e8c4:	3008      	adds	r0, #8
    e8c6:	f00d fd21 	bl	1c30c <net_buf_simple_add>
	hdr->evt = evt;
    e8ca:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    e8cc:	7044      	strb	r4, [r0, #1]
    e8ce:	bd38      	pop	{r3, r4, r5, pc}

0000e8d0 <cmd_status>:
{
    e8d0:	b538      	push	{r3, r4, r5, lr}
    e8d2:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    e8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e8d8:	f7f9 fb5e 	bl	7f98 <bt_buf_get_cmd_complete>
    e8dc:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    e8de:	2204      	movs	r2, #4
    e8e0:	210f      	movs	r1, #15
    e8e2:	f7ff ffeb 	bl	e8bc <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    e8e6:	2104      	movs	r1, #4
    e8e8:	f104 0008 	add.w	r0, r4, #8
    e8ec:	f00d fd0e 	bl	1c30c <net_buf_simple_add>
	cs->status = status;
    e8f0:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    e8f2:	2301      	movs	r3, #1
    e8f4:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    e8f6:	4b02      	ldr	r3, [pc, #8]	; (e900 <cmd_status+0x30>)
    e8f8:	881b      	ldrh	r3, [r3, #0]
    e8fa:	8043      	strh	r3, [r0, #2]
}
    e8fc:	4620      	mov	r0, r4
    e8fe:	bd38      	pop	{r3, r4, r5, pc}
    e900:	20000ac8 	.word	0x20000ac8

0000e904 <disconnect>:
{
    e904:	b510      	push	{r4, lr}
    e906:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    e908:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    e90a:	7899      	ldrb	r1, [r3, #2]
    e90c:	8818      	ldrh	r0, [r3, #0]
    e90e:	f00b f966 	bl	19bde <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e912:	b100      	cbz	r0, e916 <disconnect+0x12>
    e914:	200c      	movs	r0, #12
    e916:	f7ff ffdb 	bl	e8d0 <cmd_status>
    e91a:	6020      	str	r0, [r4, #0]
    e91c:	bd10      	pop	{r4, pc}
	...

0000e920 <cmd_complete>:
{
    e920:	b538      	push	{r3, r4, r5, lr}
    e922:	4604      	mov	r4, r0
    e924:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    e926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e92a:	f7f9 fb35 	bl	7f98 <bt_buf_get_cmd_complete>
    e92e:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    e930:	1cea      	adds	r2, r5, #3
    e932:	b2d2      	uxtb	r2, r2
    e934:	210e      	movs	r1, #14
    e936:	f7ff ffc1 	bl	e8bc <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    e93a:	6820      	ldr	r0, [r4, #0]
    e93c:	2103      	movs	r1, #3
    e93e:	3008      	adds	r0, #8
    e940:	f00d fce4 	bl	1c30c <net_buf_simple_add>
	cc->ncmd = 1;
    e944:	2301      	movs	r3, #1
    e946:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    e948:	4b04      	ldr	r3, [pc, #16]	; (e95c <cmd_complete+0x3c>)
    e94a:	881b      	ldrh	r3, [r3, #0]
    e94c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    e950:	6820      	ldr	r0, [r4, #0]
    e952:	4629      	mov	r1, r5
    e954:	3008      	adds	r0, #8
    e956:	f00d fcd9 	bl	1c30c <net_buf_simple_add>
}
    e95a:	bd38      	pop	{r3, r4, r5, pc}
    e95c:	20000ac8 	.word	0x20000ac8

0000e960 <set_event_mask_page_2>:
{
    e960:	b570      	push	{r4, r5, r6, lr}
    e962:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    e964:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    e966:	79da      	ldrb	r2, [r3, #7]
    e968:	7999      	ldrb	r1, [r3, #6]
    e96a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    e96e:	7958      	ldrb	r0, [r3, #5]
    e970:	791a      	ldrb	r2, [r3, #4]
    e972:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e976:	2400      	movs	r4, #0
    e978:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    e97c:	78d9      	ldrb	r1, [r3, #3]
    e97e:	789a      	ldrb	r2, [r3, #2]
    e980:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e984:	7859      	ldrb	r1, [r3, #1]
    e986:	781b      	ldrb	r3, [r3, #0]
    e988:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    e98c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    e990:	ea44 0003 	orr.w	r0, r4, r3
    e994:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    e996:	4b04      	ldr	r3, [pc, #16]	; (e9a8 <set_event_mask_page_2+0x48>)
    e998:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e99c:	2101      	movs	r1, #1
    e99e:	4630      	mov	r0, r6
    e9a0:	f7ff ffbe 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    e9a4:	7004      	strb	r4, [r0, #0]
    e9a6:	bd70      	pop	{r4, r5, r6, pc}
    e9a8:	20000b58 	.word	0x20000b58

0000e9ac <read_local_version_info>:
{
    e9ac:	b508      	push	{r3, lr}
    e9ae:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e9b0:	2109      	movs	r1, #9
    e9b2:	f7ff ffb5 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    e9b6:	2300      	movs	r3, #0
    e9b8:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    e9ba:	2209      	movs	r2, #9
    e9bc:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    e9be:	7083      	strb	r3, [r0, #2]
    e9c0:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    e9c2:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    e9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e9c8:	7143      	strb	r3, [r0, #5]
    e9ca:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    e9cc:	71c3      	strb	r3, [r0, #7]
    e9ce:	7203      	strb	r3, [r0, #8]
    e9d0:	bd08      	pop	{r3, pc}

0000e9d2 <le_read_buffer_size>:
{
    e9d2:	b508      	push	{r3, lr}
    e9d4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e9d6:	2104      	movs	r1, #4
    e9d8:	f7ff ffa2 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    e9dc:	2300      	movs	r3, #0
    e9de:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    e9e0:	221b      	movs	r2, #27
    e9e2:	7042      	strb	r2, [r0, #1]
    e9e4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    e9e6:	2302      	movs	r3, #2
    e9e8:	70c3      	strb	r3, [r0, #3]
    e9ea:	bd08      	pop	{r3, pc}

0000e9ec <le_read_supp_states>:
{
    e9ec:	b508      	push	{r3, lr}
    e9ee:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e9f0:	2109      	movs	r1, #9
    e9f2:	f7ff ff95 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    e9f6:	2200      	movs	r2, #0
    e9f8:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    e9fa:	23ff      	movs	r3, #255	; 0xff
    e9fc:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    e9fe:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    ea00:	213f      	movs	r1, #63	; 0x3f
    ea02:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    ea04:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    ea06:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    ea08:	2303      	movs	r3, #3
    ea0a:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    ea0c:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    ea0e:	7202      	strb	r2, [r0, #8]
    ea10:	bd08      	pop	{r3, pc}

0000ea12 <le_read_adv_chan_tx_power>:
{
    ea12:	b508      	push	{r3, lr}
    ea14:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ea16:	2102      	movs	r1, #2
    ea18:	f7ff ff82 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    ea1c:	2300      	movs	r3, #0
    ea1e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    ea20:	7043      	strb	r3, [r0, #1]
    ea22:	bd08      	pop	{r3, pc}

0000ea24 <vs_read_version_info>:
{
    ea24:	b508      	push	{r3, lr}
    ea26:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ea28:	210d      	movs	r1, #13
    ea2a:	f7ff ff79 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    ea2e:	2300      	movs	r3, #0
    ea30:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    ea32:	2202      	movs	r2, #2
    ea34:	7042      	strb	r2, [r0, #1]
    ea36:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    ea38:	70c2      	strb	r2, [r0, #3]
    ea3a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    ea3c:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    ea3e:	2201      	movs	r2, #1
    ea40:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    ea42:	2209      	movs	r2, #9
    ea44:	71c2      	strb	r2, [r0, #7]
    ea46:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    ea48:	2263      	movs	r2, #99	; 0x63
    ea4a:	7242      	strb	r2, [r0, #9]
    ea4c:	7283      	strb	r3, [r0, #10]
    ea4e:	72c3      	strb	r3, [r0, #11]
    ea50:	7303      	strb	r3, [r0, #12]
    ea52:	bd08      	pop	{r3, pc}

0000ea54 <meta_evt>:
{
    ea54:	b570      	push	{r4, r5, r6, lr}
    ea56:	4604      	mov	r4, r0
    ea58:	460e      	mov	r6, r1
    ea5a:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    ea5c:	3201      	adds	r2, #1
    ea5e:	b2d2      	uxtb	r2, r2
    ea60:	213e      	movs	r1, #62	; 0x3e
    ea62:	f7ff ff2b 	bl	e8bc <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    ea66:	3408      	adds	r4, #8
    ea68:	2101      	movs	r1, #1
    ea6a:	4620      	mov	r0, r4
    ea6c:	f00d fc4e 	bl	1c30c <net_buf_simple_add>
	me->subevent = subevt;
    ea70:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    ea72:	4629      	mov	r1, r5
    ea74:	4620      	mov	r0, r4
    ea76:	f00d fc49 	bl	1c30c <net_buf_simple_add>
}
    ea7a:	bd70      	pop	{r4, r5, r6, pc}

0000ea7c <le_chan_sel_algo>:
{
    ea7c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ea7e:	4b0f      	ldr	r3, [pc, #60]	; (eabc <le_chan_sel_algo+0x40>)
    ea80:	e9d3 4500 	ldrd	r4, r5, [r3]
    ea84:	2400      	movs	r4, #0
    ea86:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    ea8a:	ea54 0305 	orrs.w	r3, r4, r5
    ea8e:	d008      	beq.n	eaa2 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    ea90:	4b0b      	ldr	r3, [pc, #44]	; (eac0 <le_chan_sel_algo+0x44>)
    ea92:	e9d3 4500 	ldrd	r4, r5, [r3]
    ea96:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    ea9a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ea9c:	ea54 0305 	orrs.w	r3, r4, r5
    eaa0:	d100      	bne.n	eaa4 <le_chan_sel_algo+0x28>
    eaa2:	bd38      	pop	{r3, r4, r5, pc}
    eaa4:	4613      	mov	r3, r2
    eaa6:	460d      	mov	r5, r1
    eaa8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    eaaa:	2203      	movs	r2, #3
    eaac:	2114      	movs	r1, #20
    eaae:	4618      	mov	r0, r3
    eab0:	f7ff ffd0 	bl	ea54 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    eab4:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    eab6:	78e3      	ldrb	r3, [r4, #3]
    eab8:	7083      	strb	r3, [r0, #2]
    eaba:	e7f2      	b.n	eaa2 <le_chan_sel_algo+0x26>
    eabc:	2000bc00 	.word	0x2000bc00
    eac0:	2000bc08 	.word	0x2000bc08

0000eac4 <disconn_complete>:
{
    eac4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    eac6:	4b11      	ldr	r3, [pc, #68]	; (eb0c <disconn_complete+0x48>)
    eac8:	e9d3 4500 	ldrd	r4, r5, [r3]
    eacc:	f004 0410 	and.w	r4, r4, #16
    ead0:	2500      	movs	r5, #0
    ead2:	ea54 0305 	orrs.w	r3, r4, r5
    ead6:	d100      	bne.n	eada <disconn_complete+0x16>
    ead8:	bd70      	pop	{r4, r5, r6, pc}
    eada:	4614      	mov	r4, r2
    eadc:	460e      	mov	r6, r1
    eade:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    eae0:	2204      	movs	r2, #4
    eae2:	2105      	movs	r1, #5
    eae4:	4620      	mov	r0, r4
    eae6:	f7ff fee9 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    eaea:	2104      	movs	r1, #4
    eaec:	f104 0008 	add.w	r0, r4, #8
    eaf0:	f00d fc0c 	bl	1c30c <net_buf_simple_add>
	ep->status = 0x00;
    eaf4:	2300      	movs	r3, #0
    eaf6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    eaf8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    eafc:	782b      	ldrb	r3, [r5, #0]
    eafe:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    eb00:	4a03      	ldr	r2, [pc, #12]	; (eb10 <disconn_complete+0x4c>)
    eb02:	6813      	ldr	r3, [r2, #0]
    eb04:	3b01      	subs	r3, #1
    eb06:	6013      	str	r3, [r2, #0]
    eb08:	e7e6      	b.n	ead8 <disconn_complete+0x14>
    eb0a:	bf00      	nop
    eb0c:	2000bc00 	.word	0x2000bc00
    eb10:	20000acc 	.word	0x20000acc

0000eb14 <enc_refresh_complete>:
{
    eb14:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    eb16:	4b0d      	ldr	r3, [pc, #52]	; (eb4c <enc_refresh_complete+0x38>)
    eb18:	e9d3 4500 	ldrd	r4, r5, [r3]
    eb1c:	2400      	movs	r4, #0
    eb1e:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    eb22:	ea54 0305 	orrs.w	r3, r4, r5
    eb26:	d100      	bne.n	eb2a <enc_refresh_complete+0x16>
    eb28:	bd38      	pop	{r3, r4, r5, pc}
    eb2a:	4614      	mov	r4, r2
    eb2c:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    eb2e:	2203      	movs	r2, #3
    eb30:	2130      	movs	r1, #48	; 0x30
    eb32:	4620      	mov	r0, r4
    eb34:	f7ff fec2 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    eb38:	2103      	movs	r1, #3
    eb3a:	f104 0008 	add.w	r0, r4, #8
    eb3e:	f00d fbe5 	bl	1c30c <net_buf_simple_add>
	ep->status = 0x00;
    eb42:	2300      	movs	r3, #0
    eb44:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    eb46:	f8a0 5001 	strh.w	r5, [r0, #1]
    eb4a:	e7ed      	b.n	eb28 <enc_refresh_complete+0x14>
    eb4c:	2000bc00 	.word	0x2000bc00

0000eb50 <auth_payload_timeout_exp>:
{
    eb50:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    eb52:	4b0c      	ldr	r3, [pc, #48]	; (eb84 <auth_payload_timeout_exp+0x34>)
    eb54:	e9d3 4500 	ldrd	r4, r5, [r3]
    eb58:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    eb5c:	2500      	movs	r5, #0
    eb5e:	ea54 0305 	orrs.w	r3, r4, r5
    eb62:	d100      	bne.n	eb66 <auth_payload_timeout_exp+0x16>
    eb64:	bd38      	pop	{r3, r4, r5, pc}
    eb66:	4614      	mov	r4, r2
    eb68:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    eb6a:	2202      	movs	r2, #2
    eb6c:	2157      	movs	r1, #87	; 0x57
    eb6e:	4620      	mov	r0, r4
    eb70:	f7ff fea4 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    eb74:	2102      	movs	r1, #2
    eb76:	f104 0008 	add.w	r0, r4, #8
    eb7a:	f00d fbc7 	bl	1c30c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    eb7e:	8005      	strh	r5, [r0, #0]
    eb80:	e7f0      	b.n	eb64 <auth_payload_timeout_exp+0x14>
    eb82:	bf00      	nop
    eb84:	20000b58 	.word	0x20000b58

0000eb88 <remote_version_info>:
{
    eb88:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    eb8a:	4b11      	ldr	r3, [pc, #68]	; (ebd0 <remote_version_info+0x48>)
    eb8c:	e9d3 4500 	ldrd	r4, r5, [r3]
    eb90:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    eb94:	2500      	movs	r5, #0
    eb96:	ea54 0305 	orrs.w	r3, r4, r5
    eb9a:	d100      	bne.n	eb9e <remote_version_info+0x16>
    eb9c:	bd70      	pop	{r4, r5, r6, pc}
    eb9e:	4615      	mov	r5, r2
    eba0:	460e      	mov	r6, r1
    eba2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    eba4:	2208      	movs	r2, #8
    eba6:	210c      	movs	r1, #12
    eba8:	4628      	mov	r0, r5
    ebaa:	f7ff fe87 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ebae:	2108      	movs	r1, #8
    ebb0:	1868      	adds	r0, r5, r1
    ebb2:	f00d fbab 	bl	1c30c <net_buf_simple_add>
	ep->status = 0x00;
    ebb6:	2300      	movs	r3, #0
    ebb8:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ebba:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    ebbe:	7923      	ldrb	r3, [r4, #4]
    ebc0:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    ebc2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    ebc6:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    ebc8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ebcc:	80c3      	strh	r3, [r0, #6]
    ebce:	e7e5      	b.n	eb9c <remote_version_info+0x14>
    ebd0:	2000bc00 	.word	0x2000bc00

0000ebd4 <encrypt_change>:
{
    ebd4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ebd6:	4b0f      	ldr	r3, [pc, #60]	; (ec14 <encrypt_change+0x40>)
    ebd8:	e9d3 4500 	ldrd	r4, r5, [r3]
    ebdc:	f004 0480 	and.w	r4, r4, #128	; 0x80
    ebe0:	2500      	movs	r5, #0
    ebe2:	ea54 0305 	orrs.w	r3, r4, r5
    ebe6:	d100      	bne.n	ebea <encrypt_change+0x16>
    ebe8:	bd70      	pop	{r4, r5, r6, pc}
    ebea:	4615      	mov	r5, r2
    ebec:	460e      	mov	r6, r1
    ebee:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    ebf0:	2204      	movs	r2, #4
    ebf2:	2108      	movs	r1, #8
    ebf4:	4628      	mov	r0, r5
    ebf6:	f7ff fe61 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ebfa:	2104      	movs	r1, #4
    ebfc:	f105 0008 	add.w	r0, r5, #8
    ec00:	f00d fb84 	bl	1c30c <net_buf_simple_add>
	ep->status = err;
    ec04:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ec06:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ec0a:	fab4 f384 	clz	r3, r4
    ec0e:	095b      	lsrs	r3, r3, #5
    ec10:	70c3      	strb	r3, [r0, #3]
    ec12:	e7e9      	b.n	ebe8 <encrypt_change+0x14>
    ec14:	2000bc00 	.word	0x2000bc00

0000ec18 <read_remote_ver_info>:
{
    ec18:	b510      	push	{r4, lr}
    ec1a:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    ec1c:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    ec1e:	8818      	ldrh	r0, [r3, #0]
    ec20:	f00a ffc7 	bl	19bb2 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    ec24:	b100      	cbz	r0, ec28 <read_remote_ver_info+0x10>
    ec26:	200c      	movs	r0, #12
    ec28:	f7ff fe52 	bl	e8d0 <cmd_status>
    ec2c:	6020      	str	r0, [r4, #0]
    ec2e:	bd10      	pop	{r4, pc}

0000ec30 <link_control_cmd_handle>:
{
    ec30:	b508      	push	{r3, lr}
    ec32:	460b      	mov	r3, r1
	switch (ocf) {
    ec34:	2806      	cmp	r0, #6
    ec36:	d004      	beq.n	ec42 <link_control_cmd_handle+0x12>
    ec38:	281d      	cmp	r0, #29
    ec3a:	d008      	beq.n	ec4e <link_control_cmd_handle+0x1e>
		return -EINVAL;
    ec3c:	f06f 0015 	mvn.w	r0, #21
}
    ec40:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    ec42:	4611      	mov	r1, r2
    ec44:	4618      	mov	r0, r3
    ec46:	f7ff fe5d 	bl	e904 <disconnect>
	return 0;
    ec4a:	2000      	movs	r0, #0
		break;
    ec4c:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    ec4e:	4611      	mov	r1, r2
    ec50:	4618      	mov	r0, r3
    ec52:	f7ff ffe1 	bl	ec18 <read_remote_ver_info>
	return 0;
    ec56:	2000      	movs	r0, #0
		break;
    ec58:	bd08      	pop	{r3, pc}
	...

0000ec5c <reset>:
{
    ec5c:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    ec5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ec62:	4b0f      	ldr	r3, [pc, #60]	; (eca0 <reset+0x44>)
    ec64:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    ec66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ec6a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ec6e:	4b0d      	ldr	r3, [pc, #52]	; (eca4 <reset+0x48>)
    ec70:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    ec74:	2400      	movs	r4, #0
    ec76:	2500      	movs	r5, #0
    ec78:	4b0b      	ldr	r3, [pc, #44]	; (eca8 <reset+0x4c>)
    ec7a:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    ec7e:	241f      	movs	r4, #31
    ec80:	2500      	movs	r5, #0
    ec82:	4b0a      	ldr	r3, [pc, #40]	; (ecac <reset+0x50>)
    ec84:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    ec88:	b140      	cbz	r0, ec9c <reset+0x40>
    ec8a:	460c      	mov	r4, r1
		ll_reset();
    ec8c:	f00a fc8c 	bl	195a8 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    ec90:	2101      	movs	r1, #1
    ec92:	4620      	mov	r0, r4
    ec94:	f7ff fe44 	bl	e920 <cmd_complete>
		ccst->status = 0x00;
    ec98:	2300      	movs	r3, #0
    ec9a:	7003      	strb	r3, [r0, #0]
    ec9c:	bd38      	pop	{r3, r4, r5, pc}
    ec9e:	bf00      	nop
    eca0:	20000ad0 	.word	0x20000ad0
    eca4:	2000bc00 	.word	0x2000bc00
    eca8:	20000b58 	.word	0x20000b58
    ecac:	2000bc08 	.word	0x2000bc08

0000ecb0 <read_tx_power_level>:
{
    ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecb2:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    ecb4:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ecb6:	881d      	ldrh	r5, [r3, #0]
    ecb8:	b2ae      	uxth	r6, r5
	type = cmd->type;
    ecba:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    ecbc:	2104      	movs	r1, #4
    ecbe:	4610      	mov	r0, r2
    ecc0:	f7ff fe2e 	bl	e920 <cmd_complete>
    ecc4:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    ecc6:	1cc2      	adds	r2, r0, #3
    ecc8:	4639      	mov	r1, r7
    ecca:	4630      	mov	r0, r6
    eccc:	f00a ff9d 	bl	19c0a <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    ecd0:	b120      	cbz	r0, ecdc <read_tx_power_level+0x2c>
    ecd2:	2302      	movs	r3, #2
    ecd4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ecd6:	f8a4 5001 	strh.w	r5, [r4, #1]
    ecda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    ecdc:	2300      	movs	r3, #0
    ecde:	e7f9      	b.n	ecd4 <read_tx_power_level+0x24>

0000ece0 <read_auth_payload_timeout>:
{
    ece0:	b570      	push	{r4, r5, r6, lr}
    ece2:	b082      	sub	sp, #8
    ece4:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    ece6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ece8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    ecea:	f10d 0106 	add.w	r1, sp, #6
    ecee:	b2a0      	uxth	r0, r4
    ecf0:	f00a ff9a 	bl	19c28 <ll_apto_get>
    ecf4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ecf6:	2105      	movs	r1, #5
    ecf8:	4630      	mov	r0, r6
    ecfa:	f7ff fe11 	bl	e920 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ecfe:	b14d      	cbz	r5, ed14 <read_auth_payload_timeout+0x34>
    ed00:	230c      	movs	r3, #12
    ed02:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ed04:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    ed08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ed0c:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    ed10:	b002      	add	sp, #8
    ed12:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ed14:	2300      	movs	r3, #0
    ed16:	e7f4      	b.n	ed02 <read_auth_payload_timeout+0x22>

0000ed18 <write_auth_payload_timeout>:
{
    ed18:	b570      	push	{r4, r5, r6, lr}
    ed1a:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    ed1c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ed1e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    ed20:	8859      	ldrh	r1, [r3, #2]
    ed22:	b2a0      	uxth	r0, r4
    ed24:	f00a ff9c 	bl	19c60 <ll_apto_set>
    ed28:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ed2a:	2103      	movs	r1, #3
    ed2c:	4630      	mov	r0, r6
    ed2e:	f7ff fdf7 	bl	e920 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ed32:	b125      	cbz	r5, ed3e <write_auth_payload_timeout+0x26>
    ed34:	230c      	movs	r3, #12
    ed36:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ed38:	f8a0 4001 	strh.w	r4, [r0, #1]
    ed3c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ed3e:	2300      	movs	r3, #0
    ed40:	e7f9      	b.n	ed36 <write_auth_payload_timeout+0x1e>

0000ed42 <ctrl_bb_cmd_handle>:
{
    ed42:	b508      	push	{r3, lr}
    ed44:	460b      	mov	r3, r1
	switch (ocf) {
    ed46:	282d      	cmp	r0, #45	; 0x2d
    ed48:	d01f      	beq.n	ed8a <ctrl_bb_cmd_handle+0x48>
    ed4a:	d908      	bls.n	ed5e <ctrl_bb_cmd_handle+0x1c>
    ed4c:	287b      	cmp	r0, #123	; 0x7b
    ed4e:	d022      	beq.n	ed96 <ctrl_bb_cmd_handle+0x54>
    ed50:	287c      	cmp	r0, #124	; 0x7c
    ed52:	d026      	beq.n	eda2 <ctrl_bb_cmd_handle+0x60>
    ed54:	2863      	cmp	r0, #99	; 0x63
    ed56:	d012      	beq.n	ed7e <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    ed58:	f06f 0015 	mvn.w	r0, #21
}
    ed5c:	bd08      	pop	{r3, pc}
	switch (ocf) {
    ed5e:	2801      	cmp	r0, #1
    ed60:	d007      	beq.n	ed72 <ctrl_bb_cmd_handle+0x30>
    ed62:	2803      	cmp	r0, #3
    ed64:	d1f8      	bne.n	ed58 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    ed66:	4611      	mov	r1, r2
    ed68:	4618      	mov	r0, r3
    ed6a:	f7ff ff77 	bl	ec5c <reset>
	return 0;
    ed6e:	2000      	movs	r0, #0
		break;
    ed70:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    ed72:	4611      	mov	r1, r2
    ed74:	4618      	mov	r0, r3
    ed76:	f7f7 fd13 	bl	67a0 <set_event_mask>
	return 0;
    ed7a:	2000      	movs	r0, #0
		break;
    ed7c:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    ed7e:	4611      	mov	r1, r2
    ed80:	4618      	mov	r0, r3
    ed82:	f7ff fded 	bl	e960 <set_event_mask_page_2>
	return 0;
    ed86:	2000      	movs	r0, #0
		break;
    ed88:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    ed8a:	4611      	mov	r1, r2
    ed8c:	4618      	mov	r0, r3
    ed8e:	f7ff ff8f 	bl	ecb0 <read_tx_power_level>
	return 0;
    ed92:	2000      	movs	r0, #0
		break;
    ed94:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    ed96:	4611      	mov	r1, r2
    ed98:	4618      	mov	r0, r3
    ed9a:	f7ff ffa1 	bl	ece0 <read_auth_payload_timeout>
	return 0;
    ed9e:	2000      	movs	r0, #0
		break;
    eda0:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    eda2:	4611      	mov	r1, r2
    eda4:	4618      	mov	r0, r3
    eda6:	f7ff ffb7 	bl	ed18 <write_auth_payload_timeout>
	return 0;
    edaa:	2000      	movs	r0, #0
		break;
    edac:	bd08      	pop	{r3, pc}

0000edae <read_supported_commands>:
{
    edae:	b510      	push	{r4, lr}
    edb0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    edb2:	2141      	movs	r1, #65	; 0x41
    edb4:	f7ff fdb4 	bl	e920 <cmd_complete>
    edb8:	4604      	mov	r4, r0
	rp->status = 0x00;
    edba:	2100      	movs	r1, #0
    edbc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    edc0:	2240      	movs	r2, #64	; 0x40
    edc2:	f01d f95b 	bl	2c07c <memset>
	rp->commands[2] |= BIT(7);
    edc6:	78e3      	ldrb	r3, [r4, #3]
    edc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    edcc:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    edce:	79a3      	ldrb	r3, [r4, #6]
    edd0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    edd4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    edd6:	7ae3      	ldrb	r3, [r4, #11]
    edd8:	f043 0304 	orr.w	r3, r3, #4
    eddc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    edde:	7be3      	ldrb	r3, [r4, #15]
    ede0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    ede4:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    ede6:	7c23      	ldrb	r3, [r4, #16]
    ede8:	f043 0302 	orr.w	r3, r3, #2
    edec:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    edee:	7de3      	ldrb	r3, [r4, #23]
    edf0:	f043 0304 	orr.w	r3, r3, #4
    edf4:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    edf6:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    edf8:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    edfa:	f062 0208 	orn	r2, r2, #8
    edfe:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    ee00:	22ff      	movs	r2, #255	; 0xff
    ee02:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    ee04:	f043 030f 	orr.w	r3, r3, #15
    ee08:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    ee0a:	7863      	ldrb	r3, [r4, #1]
    ee0c:	f043 0320 	orr.w	r3, r3, #32
    ee10:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    ee12:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    ee14:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    ee18:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ee1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ee20:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ee24:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ee28:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    ee2c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ee30:	f040 0004 	orr.w	r0, r0, #4
    ee34:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    ee38:	f061 010f 	orn	r1, r1, #15
    ee3c:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    ee40:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    ee44:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    ee48:	f043 030f 	orr.w	r3, r3, #15
    ee4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    ee50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    ee54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee58:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    ee5c:	bd10      	pop	{r4, pc}

0000ee5e <read_local_features>:
{
    ee5e:	b510      	push	{r4, lr}
    ee60:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ee62:	2109      	movs	r1, #9
    ee64:	f7ff fd5c 	bl	e920 <cmd_complete>
    ee68:	4604      	mov	r4, r0
	rp->status = 0x00;
    ee6a:	2100      	movs	r1, #0
    ee6c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    ee70:	2208      	movs	r2, #8
    ee72:	f01d f903 	bl	2c07c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    ee76:	2360      	movs	r3, #96	; 0x60
    ee78:	7163      	strb	r3, [r4, #5]
    ee7a:	bd10      	pop	{r4, pc}

0000ee7c <le_read_local_features>:
{
    ee7c:	b510      	push	{r4, lr}
    ee7e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ee80:	2109      	movs	r1, #9
    ee82:	f7ff fd4d 	bl	e920 <cmd_complete>
    ee86:	4604      	mov	r4, r0
	rp->status = 0x00;
    ee88:	2100      	movs	r1, #0
    ee8a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    ee8e:	2208      	movs	r2, #8
    ee90:	f01d f8f4 	bl	2c07c <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    ee94:	23ff      	movs	r3, #255	; 0xff
    ee96:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    ee98:	2341      	movs	r3, #65	; 0x41
    ee9a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    ee9c:	2301      	movs	r3, #1
    ee9e:	70e3      	strb	r3, [r4, #3]
    eea0:	bd10      	pop	{r4, pc}

0000eea2 <vs_read_supported_commands>:
{
    eea2:	b510      	push	{r4, lr}
    eea4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    eea6:	2141      	movs	r1, #65	; 0x41
    eea8:	f7ff fd3a 	bl	e920 <cmd_complete>
    eeac:	4604      	mov	r4, r0
	rp->status = 0x00;
    eeae:	2100      	movs	r1, #0
    eeb0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    eeb4:	2240      	movs	r2, #64	; 0x40
    eeb6:	f01d f8e1 	bl	2c07c <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    eeba:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    eebc:	f063 0358 	orn	r3, r3, #88	; 0x58
    eec0:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    eec2:	78a3      	ldrb	r3, [r4, #2]
    eec4:	f043 0303 	orr.w	r3, r3, #3
    eec8:	70a3      	strb	r3, [r4, #2]
    eeca:	bd10      	pop	{r4, pc}

0000eecc <vs_read_supported_features>:
{
    eecc:	b508      	push	{r3, lr}
    eece:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    eed0:	2109      	movs	r1, #9
    eed2:	f7ff fd25 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    eed6:	2100      	movs	r1, #0
    eed8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    eedc:	2208      	movs	r2, #8
    eede:	f01d f8cd 	bl	2c07c <memset>
    eee2:	bd08      	pop	{r3, pc}

0000eee4 <vs_read_static_addrs>:
{
    eee4:	b510      	push	{r4, lr}
    eee6:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    eee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eeec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    eef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eef4:	d00d      	beq.n	ef12 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    eef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    eefa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    eefe:	f013 0f01 	tst.w	r3, #1
    ef02:	d110      	bne.n	ef26 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    ef04:	2102      	movs	r1, #2
    ef06:	f7ff fd0b 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    ef0a:	2300      	movs	r3, #0
    ef0c:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    ef0e:	7043      	strb	r3, [r0, #1]
    ef10:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    ef12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    ef1a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    ef1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef20:	4293      	cmp	r3, r2
    ef22:	d1e8      	bne.n	eef6 <vs_read_static_addrs+0x12>
    ef24:	e7ee      	b.n	ef04 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    ef26:	2118      	movs	r1, #24
    ef28:	f7ff fcfa 	bl	e920 <cmd_complete>
		rp->status = 0x00;
    ef2c:	2100      	movs	r1, #0
    ef2e:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    ef30:	2301      	movs	r3, #1
    ef32:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    ef34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ef38:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    ef3c:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    ef3e:	f3c3 2407 	ubfx	r4, r3, #8, #8
    ef42:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    ef44:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ef46:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    ef48:	0a1b      	lsrs	r3, r3, #8
    ef4a:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    ef4c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    ef50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ef54:	b29b      	uxth	r3, r3
	dst[0] = val;
    ef56:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    ef58:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    ef5a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    ef5e:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    ef60:	2210      	movs	r2, #16
    ef62:	3008      	adds	r0, #8
    ef64:	f01d f88a 	bl	2c07c <memset>
		return;
    ef68:	bd10      	pop	{r4, pc}

0000ef6a <vs_read_key_hierarchy_roots>:
{
    ef6a:	b510      	push	{r4, lr}
    ef6c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ef6e:	2121      	movs	r1, #33	; 0x21
    ef70:	f7ff fcd6 	bl	e920 <cmd_complete>
    ef74:	4604      	mov	r4, r0
	rp->status = 0x00;
    ef76:	2300      	movs	r3, #0
    ef78:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ef7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ef82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ef86:	d03f      	beq.n	f008 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ef88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ef90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ef94:	d038      	beq.n	f008 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ef96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ef9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ef9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    efa2:	d031      	beq.n	f008 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    efa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    efa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    efac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    efb0:	d02a      	beq.n	f008 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    efb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    efb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    efba:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    efbc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    efc0:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    efc2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    efc4:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    efc6:	0a1b      	lsrs	r3, r3, #8
    efc8:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    efca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    efce:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    efd0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    efd4:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    efd6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    efd8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    efda:	0a1b      	lsrs	r3, r3, #8
    efdc:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    efde:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    efe2:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    efe4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    efe8:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    efea:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    efec:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    efee:	0a1b      	lsrs	r3, r3, #8
    eff0:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    eff2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    eff6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    eff8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    effc:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    effe:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f000:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    f002:	0a1b      	lsrs	r3, r3, #8
    f004:	7403      	strb	r3, [r0, #16]
    f006:	e004      	b.n	f012 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    f008:	2210      	movs	r2, #16
    f00a:	2100      	movs	r1, #0
    f00c:	1c60      	adds	r0, r4, #1
    f00e:	f01d f835 	bl	2c07c <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    f012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f01e:	d040      	beq.n	f0a2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    f020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    f028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f02c:	d039      	beq.n	f0a2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    f02e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    f036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f03a:	d032      	beq.n	f0a2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    f03c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    f044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f048:	d02b      	beq.n	f0a2 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    f04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    f04e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    f052:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    f054:	f3c3 2107 	ubfx	r1, r3, #8, #8
    f058:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    f05a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f05c:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    f05e:	0a1b      	lsrs	r3, r3, #8
    f060:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    f062:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    f066:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    f068:	f3c3 2107 	ubfx	r1, r3, #8, #8
    f06c:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    f06e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f070:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    f072:	0a1b      	lsrs	r3, r3, #8
    f074:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    f076:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    f07a:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    f07c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    f080:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    f082:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f084:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    f086:	0a1b      	lsrs	r3, r3, #8
    f088:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    f08a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    f08e:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    f090:	f3c3 2207 	ubfx	r2, r3, #8, #8
    f094:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    f096:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f098:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    f09a:	0a1b      	lsrs	r3, r3, #8
    f09c:	f884 3020 	strb.w	r3, [r4, #32]
    f0a0:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    f0a2:	2210      	movs	r2, #16
    f0a4:	2100      	movs	r1, #0
    f0a6:	f104 0011 	add.w	r0, r4, #17
    f0aa:	f01c ffe7 	bl	2c07c <memset>
    f0ae:	bd10      	pop	{r4, pc}

0000f0b0 <read_bd_addr>:
{
    f0b0:	b508      	push	{r3, lr}
    f0b2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f0b4:	2107      	movs	r1, #7
    f0b6:	f7ff fc33 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    f0ba:	2300      	movs	r3, #0
    f0bc:	4601      	mov	r1, r0
    f0be:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    f0c2:	4618      	mov	r0, r3
    f0c4:	f00b fd64 	bl	1ab90 <ll_addr_get>
    f0c8:	bd08      	pop	{r3, pc}

0000f0ca <info_cmd_handle>:
{
    f0ca:	b508      	push	{r3, lr}
    f0cc:	460b      	mov	r3, r1
	switch (ocf) {
    f0ce:	3801      	subs	r0, #1
    f0d0:	2808      	cmp	r0, #8
    f0d2:	d81e      	bhi.n	f112 <info_cmd_handle+0x48>
    f0d4:	e8df f000 	tbb	[pc, r0]
    f0d8:	1d110b05 	.word	0x1d110b05
    f0dc:	1d1d1d1d 	.word	0x1d1d1d1d
    f0e0:	17          	.byte	0x17
    f0e1:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    f0e2:	4611      	mov	r1, r2
    f0e4:	4618      	mov	r0, r3
    f0e6:	f7ff fc61 	bl	e9ac <read_local_version_info>
	return 0;
    f0ea:	2000      	movs	r0, #0
		break;
    f0ec:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    f0ee:	4611      	mov	r1, r2
    f0f0:	4618      	mov	r0, r3
    f0f2:	f7ff fe5c 	bl	edae <read_supported_commands>
	return 0;
    f0f6:	2000      	movs	r0, #0
		break;
    f0f8:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    f0fa:	4611      	mov	r1, r2
    f0fc:	4618      	mov	r0, r3
    f0fe:	f7ff feae 	bl	ee5e <read_local_features>
	return 0;
    f102:	2000      	movs	r0, #0
		break;
    f104:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    f106:	4611      	mov	r1, r2
    f108:	4618      	mov	r0, r3
    f10a:	f7ff ffd1 	bl	f0b0 <read_bd_addr>
	return 0;
    f10e:	2000      	movs	r0, #0
		break;
    f110:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f112:	f06f 0015 	mvn.w	r0, #21
}
    f116:	bd08      	pop	{r3, pc}

0000f118 <le_set_random_address>:
{
    f118:	b510      	push	{r4, lr}
    f11a:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    f11c:	6881      	ldr	r1, [r0, #8]
    f11e:	2001      	movs	r0, #1
    f120:	f00b fd58 	bl	1abd4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    f124:	2101      	movs	r1, #1
    f126:	4620      	mov	r0, r4
    f128:	f7ff fbfa 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    f12c:	2300      	movs	r3, #0
    f12e:	7003      	strb	r3, [r0, #0]
    f130:	bd10      	pop	{r4, pc}

0000f132 <vs_write_bd_addr>:
{
    f132:	b510      	push	{r4, lr}
    f134:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    f136:	6881      	ldr	r1, [r0, #8]
    f138:	2000      	movs	r0, #0
    f13a:	f00b fd4b 	bl	1abd4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    f13e:	2101      	movs	r1, #1
    f140:	4620      	mov	r0, r4
    f142:	f7ff fbed 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    f146:	2300      	movs	r3, #0
    f148:	7003      	strb	r3, [r0, #0]
    f14a:	bd10      	pop	{r4, pc}

0000f14c <le_read_wl_size>:
{
    f14c:	b510      	push	{r4, lr}
    f14e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f150:	2102      	movs	r1, #2
    f152:	f7ff fbe5 	bl	e920 <cmd_complete>
    f156:	4604      	mov	r4, r0
	rp->status = 0x00;
    f158:	2300      	movs	r3, #0
    f15a:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    f15c:	f00b ff3a 	bl	1afd4 <ll_wl_size_get>
    f160:	7060      	strb	r0, [r4, #1]
    f162:	bd10      	pop	{r4, pc}

0000f164 <le_clear_wl>:
{
    f164:	b510      	push	{r4, lr}
    f166:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    f168:	2101      	movs	r1, #1
    f16a:	f7ff fbd9 	bl	e920 <cmd_complete>
    f16e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    f170:	f00b ff32 	bl	1afd8 <ll_wl_clear>
    f174:	7020      	strb	r0, [r4, #0]
    f176:	bd10      	pop	{r4, pc}

0000f178 <le_add_dev_to_wl>:
{
    f178:	b538      	push	{r3, r4, r5, lr}
    f17a:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    f17c:	6880      	ldr	r0, [r0, #8]
    f17e:	f00c f81d 	bl	1b1bc <ll_wl_add>
    f182:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f184:	2101      	movs	r1, #1
    f186:	4628      	mov	r0, r5
    f188:	f7ff fbca 	bl	e920 <cmd_complete>
	ccst->status = status;
    f18c:	7004      	strb	r4, [r0, #0]
    f18e:	bd38      	pop	{r3, r4, r5, pc}

0000f190 <le_rem_dev_from_wl>:
{
    f190:	b538      	push	{r3, r4, r5, lr}
    f192:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    f194:	6880      	ldr	r0, [r0, #8]
    f196:	f00b ff35 	bl	1b004 <ll_wl_remove>
    f19a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f19c:	2101      	movs	r1, #1
    f19e:	4628      	mov	r0, r5
    f1a0:	f7ff fbbe 	bl	e920 <cmd_complete>
	ccst->status = status;
    f1a4:	7004      	strb	r4, [r0, #0]
    f1a6:	bd38      	pop	{r3, r4, r5, pc}

0000f1a8 <le_encrypt>:
{
    f1a8:	b510      	push	{r4, lr}
    f1aa:	b084      	sub	sp, #16
    f1ac:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    f1ae:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    f1b0:	2300      	movs	r3, #0
    f1b2:	466a      	mov	r2, sp
    f1b4:	f100 0110 	add.w	r1, r0, #16
    f1b8:	f001 fc9e 	bl	10af8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    f1bc:	2111      	movs	r1, #17
    f1be:	4620      	mov	r0, r4
    f1c0:	f7ff fbae 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    f1c4:	2300      	movs	r3, #0
    f1c6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    f1ca:	2210      	movs	r2, #16
    f1cc:	4669      	mov	r1, sp
    f1ce:	f7f1 f877 	bl	2c0 <memcpy>
}
    f1d2:	b004      	add	sp, #16
    f1d4:	bd10      	pop	{r4, pc}
	...

0000f1d8 <vs_read_build_info>:
{
    f1d8:	b570      	push	{r4, r5, r6, lr}
    f1da:	b08a      	sub	sp, #40	; 0x28
    f1dc:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    f1de:	466c      	mov	r4, sp
    f1e0:	4d0c      	ldr	r5, [pc, #48]	; (f214 <vs_read_build_info+0x3c>)
    f1e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f1e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f1e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f1e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f1ea:	e895 0003 	ldmia.w	r5, {r0, r1}
    f1ee:	f844 0b04 	str.w	r0, [r4], #4
    f1f2:	f824 1b02 	strh.w	r1, [r4], #2
    f1f6:	0c09      	lsrs	r1, r1, #16
    f1f8:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    f1fa:	2128      	movs	r1, #40	; 0x28
    f1fc:	4630      	mov	r0, r6
    f1fe:	f7ff fb8f 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    f202:	2300      	movs	r3, #0
    f204:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    f208:	2227      	movs	r2, #39	; 0x27
    f20a:	4669      	mov	r1, sp
    f20c:	f7f1 f858 	bl	2c0 <memcpy>
}
    f210:	b00a      	add	sp, #40	; 0x28
    f212:	bd70      	pop	{r4, r5, r6, pc}
    f214:	00033220 	.word	0x00033220

0000f218 <vendor_cmd_handle>:
{
    f218:	b508      	push	{r3, lr}
    f21a:	460b      	mov	r3, r1
	switch (ocf) {
    f21c:	3801      	subs	r0, #1
    f21e:	2809      	cmp	r0, #9
    f220:	d830      	bhi.n	f284 <vendor_cmd_handle+0x6c>
    f222:	e8df f000 	tbb	[pc, r0]
    f226:	0b05      	.short	0x0b05
    f228:	1d2f2f11 	.word	0x1d2f2f11
    f22c:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    f230:	4611      	mov	r1, r2
    f232:	4618      	mov	r0, r3
    f234:	f7ff fbf6 	bl	ea24 <vs_read_version_info>
	return 0;
    f238:	2000      	movs	r0, #0
		break;
    f23a:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    f23c:	4611      	mov	r1, r2
    f23e:	4618      	mov	r0, r3
    f240:	f7ff fe2f 	bl	eea2 <vs_read_supported_commands>
	return 0;
    f244:	2000      	movs	r0, #0
		break;
    f246:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    f248:	4611      	mov	r1, r2
    f24a:	4618      	mov	r0, r3
    f24c:	f7ff fe3e 	bl	eecc <vs_read_supported_features>
	return 0;
    f250:	2000      	movs	r0, #0
		break;
    f252:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    f254:	4611      	mov	r1, r2
    f256:	4618      	mov	r0, r3
    f258:	f7ff ffbe 	bl	f1d8 <vs_read_build_info>
	return 0;
    f25c:	2000      	movs	r0, #0
		break;
    f25e:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    f260:	4611      	mov	r1, r2
    f262:	4618      	mov	r0, r3
    f264:	f7ff ff65 	bl	f132 <vs_write_bd_addr>
	return 0;
    f268:	2000      	movs	r0, #0
		break;
    f26a:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    f26c:	4611      	mov	r1, r2
    f26e:	4618      	mov	r0, r3
    f270:	f7ff fe38 	bl	eee4 <vs_read_static_addrs>
	return 0;
    f274:	2000      	movs	r0, #0
		break;
    f276:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    f278:	4611      	mov	r1, r2
    f27a:	4618      	mov	r0, r3
    f27c:	f7ff fe75 	bl	ef6a <vs_read_key_hierarchy_roots>
	return 0;
    f280:	2000      	movs	r0, #0
		break;
    f282:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f284:	f06f 0015 	mvn.w	r0, #21
}
    f288:	bd08      	pop	{r3, pc}

0000f28a <le_unknown_rsp>:
{
    f28a:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    f28c:	7903      	ldrb	r3, [r0, #4]
    f28e:	2b0e      	cmp	r3, #14
    f290:	d000      	beq.n	f294 <le_unknown_rsp+0xa>
    f292:	bd08      	pop	{r3, pc}
    f294:	4613      	mov	r3, r2
    f296:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    f298:	2100      	movs	r1, #0
    f29a:	201a      	movs	r0, #26
    f29c:	f7f8 f966 	bl	756c <le_remote_feat_complete>
}
    f2a0:	e7f7      	b.n	f292 <le_unknown_rsp+0x8>

0000f2a2 <le_rand>:
{
    f2a2:	b508      	push	{r3, lr}
    f2a4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f2a6:	2109      	movs	r1, #9
    f2a8:	f7ff fb3a 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    f2ac:	2300      	movs	r3, #0
    f2ae:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    f2b2:	2108      	movs	r1, #8
    f2b4:	f003 fcb4 	bl	12c20 <bt_rand>
    f2b8:	bd08      	pop	{r3, pc}

0000f2ba <le_set_adv_param>:
{
    f2ba:	b570      	push	{r4, r5, r6, lr}
    f2bc:	b08c      	sub	sp, #48	; 0x30
    f2be:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    f2c0:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    f2c2:	460c      	mov	r4, r1
    f2c4:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    f2c8:	790b      	ldrb	r3, [r1, #4]
    f2ca:	2000      	movs	r0, #0
    f2cc:	900a      	str	r0, [sp, #40]	; 0x28
    f2ce:	9009      	str	r0, [sp, #36]	; 0x24
    f2d0:	9008      	str	r0, [sp, #32]
    f2d2:	9007      	str	r0, [sp, #28]
    f2d4:	9006      	str	r0, [sp, #24]
    f2d6:	9005      	str	r0, [sp, #20]
    f2d8:	7b8e      	ldrb	r6, [r1, #14]
    f2da:	9604      	str	r6, [sp, #16]
    f2dc:	7b4e      	ldrb	r6, [r1, #13]
    f2de:	9603      	str	r6, [sp, #12]
    f2e0:	9402      	str	r4, [sp, #8]
    f2e2:	798c      	ldrb	r4, [r1, #6]
    f2e4:	9401      	str	r4, [sp, #4]
    f2e6:	7949      	ldrb	r1, [r1, #5]
    f2e8:	9100      	str	r1, [sp, #0]
    f2ea:	4601      	mov	r1, r0
    f2ec:	f00c fc42 	bl	1bb74 <ll_adv_params_set>
    f2f0:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f2f2:	2101      	movs	r1, #1
    f2f4:	4628      	mov	r0, r5
    f2f6:	f7ff fb13 	bl	e920 <cmd_complete>
	ccst->status = status;
    f2fa:	7004      	strb	r4, [r0, #0]
}
    f2fc:	b00c      	add	sp, #48	; 0x30
    f2fe:	bd70      	pop	{r4, r5, r6, pc}

0000f300 <le_set_adv_data>:
{
    f300:	b510      	push	{r4, lr}
    f302:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    f304:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    f306:	1c59      	adds	r1, r3, #1
    f308:	7818      	ldrb	r0, [r3, #0]
    f30a:	f00c fd57 	bl	1bdbc <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    f30e:	2101      	movs	r1, #1
    f310:	4620      	mov	r0, r4
    f312:	f7ff fb05 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    f316:	2300      	movs	r3, #0
    f318:	7003      	strb	r3, [r0, #0]
    f31a:	bd10      	pop	{r4, pc}

0000f31c <le_set_scan_rsp_data>:
{
    f31c:	b510      	push	{r4, lr}
    f31e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    f320:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    f322:	1c59      	adds	r1, r3, #1
    f324:	7818      	ldrb	r0, [r3, #0]
    f326:	f00c fda2 	bl	1be6e <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    f32a:	2101      	movs	r1, #1
    f32c:	4620      	mov	r0, r4
    f32e:	f7ff faf7 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    f332:	2300      	movs	r3, #0
    f334:	7003      	strb	r3, [r0, #0]
    f336:	bd10      	pop	{r4, pc}

0000f338 <le_set_adv_enable>:
{
    f338:	b538      	push	{r3, r4, r5, lr}
    f33a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    f33c:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    f33e:	7818      	ldrb	r0, [r3, #0]
    f340:	f00c fdda 	bl	1bef8 <ll_adv_enable>
    f344:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f346:	2101      	movs	r1, #1
    f348:	4628      	mov	r0, r5
    f34a:	f7ff fae9 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f34e:	b114      	cbz	r4, f356 <le_set_adv_enable+0x1e>
    f350:	230c      	movs	r3, #12
    f352:	7003      	strb	r3, [r0, #0]
    f354:	bd38      	pop	{r3, r4, r5, pc}
    f356:	2300      	movs	r3, #0
    f358:	e7fb      	b.n	f352 <le_set_adv_enable+0x1a>

0000f35a <le_set_scan_param>:
{
    f35a:	b530      	push	{r4, r5, lr}
    f35c:	b083      	sub	sp, #12
    f35e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    f360:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    f362:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    f366:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    f36a:	7820      	ldrb	r0, [r4, #0]
    f36c:	7963      	ldrb	r3, [r4, #5]
    f36e:	79a4      	ldrb	r4, [r4, #6]
    f370:	9400      	str	r4, [sp, #0]
    f372:	f00c fe53 	bl	1c01c <ll_scan_params_set>
    f376:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f378:	2101      	movs	r1, #1
    f37a:	4628      	mov	r0, r5
    f37c:	f7ff fad0 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f380:	b11c      	cbz	r4, f38a <le_set_scan_param+0x30>
    f382:	230c      	movs	r3, #12
    f384:	7003      	strb	r3, [r0, #0]
}
    f386:	b003      	add	sp, #12
    f388:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f38a:	2300      	movs	r3, #0
    f38c:	e7fa      	b.n	f384 <le_set_scan_param+0x2a>
	...

0000f390 <le_set_scan_enable>:
{
    f390:	b538      	push	{r3, r4, r5, lr}
    f392:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    f394:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    f396:	781a      	ldrb	r2, [r3, #0]
    f398:	b13a      	cbz	r2, f3aa <le_set_scan_enable+0x1a>
    f39a:	785a      	ldrb	r2, [r3, #1]
    f39c:	b12a      	cbz	r2, f3aa <le_set_scan_enable+0x1a>
		dup_count = 0;
    f39e:	2200      	movs	r2, #0
    f3a0:	490b      	ldr	r1, [pc, #44]	; (f3d0 <le_set_scan_enable+0x40>)
    f3a2:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    f3a4:	490b      	ldr	r1, [pc, #44]	; (f3d4 <le_set_scan_enable+0x44>)
    f3a6:	600a      	str	r2, [r1, #0]
    f3a8:	e003      	b.n	f3b2 <le_set_scan_enable+0x22>
		dup_count = -1;
    f3aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f3ae:	4a08      	ldr	r2, [pc, #32]	; (f3d0 <le_set_scan_enable+0x40>)
    f3b0:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    f3b2:	7818      	ldrb	r0, [r3, #0]
    f3b4:	f00c fe4e 	bl	1c054 <ll_scan_enable>
    f3b8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f3ba:	2101      	movs	r1, #1
    f3bc:	4628      	mov	r0, r5
    f3be:	f7ff faaf 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f3c2:	b114      	cbz	r4, f3ca <le_set_scan_enable+0x3a>
    f3c4:	230c      	movs	r3, #12
    f3c6:	7003      	strb	r3, [r0, #0]
    f3c8:	bd38      	pop	{r3, r4, r5, pc}
    f3ca:	2300      	movs	r3, #0
    f3cc:	e7fb      	b.n	f3c6 <le_set_scan_enable+0x36>
    f3ce:	bf00      	nop
    f3d0:	20000ad0 	.word	0x20000ad0
    f3d4:	20000ad4 	.word	0x20000ad4

0000f3d8 <le_create_connection>:
{
    f3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3da:	b087      	sub	sp, #28
    f3dc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    f3de:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    f3e0:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    f3e2:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    f3e4:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    f3e8:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    f3ec:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    f3f0:	7922      	ldrb	r2, [r4, #4]
    f3f2:	7963      	ldrb	r3, [r4, #5]
    f3f4:	1da6      	adds	r6, r4, #6
    f3f6:	7b24      	ldrb	r4, [r4, #12]
    f3f8:	f8cd c010 	str.w	ip, [sp, #16]
    f3fc:	f8cd e00c 	str.w	lr, [sp, #12]
    f400:	9702      	str	r7, [sp, #8]
    f402:	9401      	str	r4, [sp, #4]
    f404:	9600      	str	r6, [sp, #0]
    f406:	f00c fe65 	bl	1c0d4 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    f40a:	b100      	cbz	r0, f40e <le_create_connection+0x36>
    f40c:	200c      	movs	r0, #12
    f40e:	f7ff fa5f 	bl	e8d0 <cmd_status>
    f412:	6028      	str	r0, [r5, #0]
}
    f414:	b007      	add	sp, #28
    f416:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f418 <le_create_conn_cancel>:
{
    f418:	b538      	push	{r3, r4, r5, lr}
    f41a:	460d      	mov	r5, r1
	status = ll_connect_disable();
    f41c:	f00b fa00 	bl	1a820 <ll_connect_disable>
    f420:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f422:	2101      	movs	r1, #1
    f424:	4628      	mov	r0, r5
    f426:	f7ff fa7b 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f42a:	b114      	cbz	r4, f432 <le_create_conn_cancel+0x1a>
    f42c:	230c      	movs	r3, #12
    f42e:	7003      	strb	r3, [r0, #0]
    f430:	bd38      	pop	{r3, r4, r5, pc}
    f432:	2300      	movs	r3, #0
    f434:	e7fb      	b.n	f42e <le_create_conn_cancel+0x16>

0000f436 <le_set_host_chan_classif>:
{
    f436:	b538      	push	{r3, r4, r5, lr}
    f438:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    f43a:	6880      	ldr	r0, [r0, #8]
    f43c:	f00a fb08 	bl	19a50 <ll_chm_update>
    f440:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f442:	2101      	movs	r1, #1
    f444:	4628      	mov	r0, r5
    f446:	f7ff fa6b 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f44a:	b114      	cbz	r4, f452 <le_set_host_chan_classif+0x1c>
    f44c:	230c      	movs	r3, #12
    f44e:	7003      	strb	r3, [r0, #0]
    f450:	bd38      	pop	{r3, r4, r5, pc}
    f452:	2300      	movs	r3, #0
    f454:	e7fb      	b.n	f44e <le_set_host_chan_classif+0x18>

0000f456 <le_start_encryption>:
{
    f456:	b510      	push	{r4, lr}
    f458:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    f45a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f45c:	4611      	mov	r1, r2
    f45e:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    f462:	f102 030c 	add.w	r3, r2, #12
    f466:	320a      	adds	r2, #10
    f468:	f00a fe2c 	bl	1a0c4 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    f46c:	b100      	cbz	r0, f470 <le_start_encryption+0x1a>
    f46e:	200c      	movs	r0, #12
    f470:	f7ff fa2e 	bl	e8d0 <cmd_status>
    f474:	6020      	str	r0, [r4, #0]
    f476:	bd10      	pop	{r4, pc}

0000f478 <le_ltk_req_reply>:
{
    f478:	b570      	push	{r4, r5, r6, lr}
    f47a:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    f47c:	6882      	ldr	r2, [r0, #8]
    f47e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    f482:	2100      	movs	r1, #0
    f484:	b2a0      	uxth	r0, r4
    f486:	f00a fb36 	bl	19af6 <ll_start_enc_req_send>
    f48a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    f48c:	2103      	movs	r1, #3
    f48e:	4630      	mov	r0, r6
    f490:	f7ff fa46 	bl	e920 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f494:	b125      	cbz	r5, f4a0 <le_ltk_req_reply+0x28>
    f496:	230c      	movs	r3, #12
    f498:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f49a:	f8a0 4001 	strh.w	r4, [r0, #1]
    f49e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f4a0:	2300      	movs	r3, #0
    f4a2:	e7f9      	b.n	f498 <le_ltk_req_reply+0x20>

0000f4a4 <le_ltk_req_neg_reply>:
{
    f4a4:	b570      	push	{r4, r5, r6, lr}
    f4a6:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    f4a8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f4aa:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    f4ac:	2200      	movs	r2, #0
    f4ae:	2106      	movs	r1, #6
    f4b0:	b2a0      	uxth	r0, r4
    f4b2:	f00a fb20 	bl	19af6 <ll_start_enc_req_send>
    f4b6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    f4b8:	2103      	movs	r1, #3
    f4ba:	4630      	mov	r0, r6
    f4bc:	f7ff fa30 	bl	e920 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f4c0:	b125      	cbz	r5, f4cc <le_ltk_req_neg_reply+0x28>
    f4c2:	230c      	movs	r3, #12
    f4c4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    f4c6:	f8a0 4001 	strh.w	r4, [r0, #1]
    f4ca:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f4cc:	2300      	movs	r3, #0
    f4ce:	e7f9      	b.n	f4c4 <le_ltk_req_neg_reply+0x20>

0000f4d0 <le_read_chan_map>:
{
    f4d0:	b570      	push	{r4, r5, r6, lr}
    f4d2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    f4d4:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f4d6:	8815      	ldrh	r5, [r2, #0]
    f4d8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    f4da:	2108      	movs	r1, #8
    f4dc:	4618      	mov	r0, r3
    f4de:	f7ff fa1f 	bl	e920 <cmd_complete>
    f4e2:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    f4e4:	1cc1      	adds	r1, r0, #3
    f4e6:	4630      	mov	r0, r6
    f4e8:	f00a faf0 	bl	19acc <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    f4ec:	b120      	cbz	r0, f4f8 <le_read_chan_map+0x28>
    f4ee:	2302      	movs	r3, #2
    f4f0:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    f4f2:	f8a4 5001 	strh.w	r5, [r4, #1]
    f4f6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    f4f8:	2300      	movs	r3, #0
    f4fa:	e7f9      	b.n	f4f0 <le_read_chan_map+0x20>

0000f4fc <le_read_remote_features>:
{
    f4fc:	b510      	push	{r4, lr}
    f4fe:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    f500:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    f502:	8818      	ldrh	r0, [r3, #0]
    f504:	f00a fb3f 	bl	19b86 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    f508:	b100      	cbz	r0, f50c <le_read_remote_features+0x10>
    f50a:	200c      	movs	r0, #12
    f50c:	f7ff f9e0 	bl	e8d0 <cmd_status>
    f510:	6020      	str	r0, [r4, #0]
    f512:	bd10      	pop	{r4, pc}

0000f514 <le_conn_param_req_neg_reply>:
{
    f514:	b570      	push	{r4, r5, r6, lr}
    f516:	b082      	sub	sp, #8
    f518:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    f51a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f51c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    f51e:	789a      	ldrb	r2, [r3, #2]
    f520:	2300      	movs	r3, #0
    f522:	9301      	str	r3, [sp, #4]
    f524:	9300      	str	r3, [sp, #0]
    f526:	2102      	movs	r1, #2
    f528:	b2a0      	uxth	r0, r4
    f52a:	f00a fa01 	bl	19930 <ll_conn_update>
    f52e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    f530:	2103      	movs	r1, #3
    f532:	4630      	mov	r0, r6
    f534:	f7ff f9f4 	bl	e920 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f538:	b12d      	cbz	r5, f546 <le_conn_param_req_neg_reply+0x32>
    f53a:	230c      	movs	r3, #12
    f53c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f53e:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    f542:	b002      	add	sp, #8
    f544:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f546:	2300      	movs	r3, #0
    f548:	e7f8      	b.n	f53c <le_conn_param_req_neg_reply+0x28>

0000f54a <le_set_data_len>:
{
    f54a:	b570      	push	{r4, r5, r6, lr}
    f54c:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    f54e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f550:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    f552:	889a      	ldrh	r2, [r3, #4]
    f554:	8859      	ldrh	r1, [r3, #2]
    f556:	b2a0      	uxth	r0, r4
    f558:	f00a fb99 	bl	19c8e <ll_length_req_send>
    f55c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    f55e:	2103      	movs	r1, #3
    f560:	4630      	mov	r0, r6
    f562:	f7ff f9dd 	bl	e920 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f566:	b125      	cbz	r5, f572 <le_set_data_len+0x28>
    f568:	230c      	movs	r3, #12
    f56a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f56c:	f8a0 4001 	strh.w	r4, [r0, #1]
    f570:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f572:	2300      	movs	r3, #0
    f574:	e7f9      	b.n	f56a <le_set_data_len+0x20>

0000f576 <le_read_default_data_len>:
{
    f576:	b510      	push	{r4, lr}
    f578:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f57a:	2105      	movs	r1, #5
    f57c:	f7ff f9d0 	bl	e920 <cmd_complete>
    f580:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    f582:	1cc1      	adds	r1, r0, #3
    f584:	3001      	adds	r0, #1
    f586:	f00a fba9 	bl	19cdc <ll_length_default_get>
	rp->status = 0x00;
    f58a:	2300      	movs	r3, #0
    f58c:	7023      	strb	r3, [r4, #0]
    f58e:	bd10      	pop	{r4, pc}

0000f590 <le_write_default_data_len>:
{
    f590:	b538      	push	{r3, r4, r5, lr}
    f592:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    f594:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    f596:	8859      	ldrh	r1, [r3, #2]
    f598:	8818      	ldrh	r0, [r3, #0]
    f59a:	f00a fba9 	bl	19cf0 <ll_length_default_set>
    f59e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f5a0:	2101      	movs	r1, #1
    f5a2:	4628      	mov	r0, r5
    f5a4:	f7ff f9bc 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    f5a8:	b114      	cbz	r4, f5b0 <le_write_default_data_len+0x20>
    f5aa:	231e      	movs	r3, #30
    f5ac:	7003      	strb	r3, [r0, #0]
    f5ae:	bd38      	pop	{r3, r4, r5, pc}
    f5b0:	2300      	movs	r3, #0
    f5b2:	e7fb      	b.n	f5ac <le_write_default_data_len+0x1c>

0000f5b4 <le_read_max_data_len>:
{
    f5b4:	b510      	push	{r4, lr}
    f5b6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f5b8:	2109      	movs	r1, #9
    f5ba:	f7ff f9b1 	bl	e920 <cmd_complete>
    f5be:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    f5c0:	1dc3      	adds	r3, r0, #7
    f5c2:	1d42      	adds	r2, r0, #5
    f5c4:	1cc1      	adds	r1, r0, #3
    f5c6:	3001      	adds	r0, #1
    f5c8:	f00a fb9c 	bl	19d04 <ll_length_max_get>
	rp->status = 0x00;
    f5cc:	2300      	movs	r3, #0
    f5ce:	7023      	strb	r3, [r4, #0]
    f5d0:	bd10      	pop	{r4, pc}
	...

0000f5d4 <le_phy_upd_complete>:
{
    f5d4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5d6:	4b1a      	ldr	r3, [pc, #104]	; (f640 <le_phy_upd_complete+0x6c>)
    f5d8:	e9d3 4500 	ldrd	r4, r5, [r3]
    f5dc:	2400      	movs	r4, #0
    f5de:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    f5e2:	ea54 0305 	orrs.w	r3, r4, r5
    f5e6:	d008      	beq.n	f5fa <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    f5e8:	4b16      	ldr	r3, [pc, #88]	; (f644 <le_phy_upd_complete+0x70>)
    f5ea:	e9d3 4500 	ldrd	r4, r5, [r3]
    f5ee:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    f5f2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    f5f4:	ea54 0305 	orrs.w	r3, r4, r5
    f5f8:	d100      	bne.n	f5fc <le_phy_upd_complete+0x28>
    f5fa:	bd38      	pop	{r3, r4, r5, pc}
    f5fc:	4613      	mov	r3, r2
    f5fe:	460c      	mov	r4, r1
    f600:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    f602:	2205      	movs	r2, #5
    f604:	210c      	movs	r1, #12
    f606:	4618      	mov	r0, r3
    f608:	f7ff fa24 	bl	ea54 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    f60c:	78eb      	ldrb	r3, [r5, #3]
    f60e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    f610:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    f614:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    f616:	fa92 f3a2 	rbit	r3, r2
    f61a:	fab3 f383 	clz	r3, r3
    f61e:	b90a      	cbnz	r2, f624 <le_phy_upd_complete+0x50>
    f620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f624:	3301      	adds	r3, #1
    f626:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    f628:	796a      	ldrb	r2, [r5, #5]
    f62a:	fa92 f3a2 	rbit	r3, r2
    f62e:	fab3 f383 	clz	r3, r3
    f632:	b90a      	cbnz	r2, f638 <le_phy_upd_complete+0x64>
    f634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f638:	3301      	adds	r3, #1
    f63a:	7103      	strb	r3, [r0, #4]
    f63c:	e7dd      	b.n	f5fa <le_phy_upd_complete+0x26>
    f63e:	bf00      	nop
    f640:	2000bc00 	.word	0x2000bc00
    f644:	2000bc08 	.word	0x2000bc08

0000f648 <le_read_phy>:
{
    f648:	b570      	push	{r4, r5, r6, lr}
    f64a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    f64c:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f64e:	8815      	ldrh	r5, [r2, #0]
    f650:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    f652:	2105      	movs	r1, #5
    f654:	4618      	mov	r0, r3
    f656:	f7ff f963 	bl	e920 <cmd_complete>
    f65a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    f65c:	1d02      	adds	r2, r0, #4
    f65e:	1cc1      	adds	r1, r0, #3
    f660:	4630      	mov	r0, r6
    f662:	f00a fb59 	bl	19d18 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f666:	b1c0      	cbz	r0, f69a <le_read_phy+0x52>
    f668:	230c      	movs	r3, #12
    f66a:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    f66c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    f670:	78e2      	ldrb	r2, [r4, #3]
    f672:	fa92 f3a2 	rbit	r3, r2
    f676:	fab3 f383 	clz	r3, r3
    f67a:	b90a      	cbnz	r2, f680 <le_read_phy+0x38>
    f67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f680:	3301      	adds	r3, #1
    f682:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    f684:	7922      	ldrb	r2, [r4, #4]
    f686:	fa92 f3a2 	rbit	r3, r2
    f68a:	fab3 f383 	clz	r3, r3
    f68e:	b90a      	cbnz	r2, f694 <le_read_phy+0x4c>
    f690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f694:	3301      	adds	r3, #1
    f696:	7123      	strb	r3, [r4, #4]
    f698:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    f69a:	2300      	movs	r3, #0
    f69c:	e7e5      	b.n	f66a <le_read_phy+0x22>

0000f69e <le_set_default_phy>:
{
    f69e:	b538      	push	{r3, r4, r5, lr}
    f6a0:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    f6a2:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    f6a4:	781a      	ldrb	r2, [r3, #0]
    f6a6:	f012 0f01 	tst.w	r2, #1
    f6aa:	d001      	beq.n	f6b0 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    f6ac:	2107      	movs	r1, #7
    f6ae:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    f6b0:	f012 0f02 	tst.w	r2, #2
    f6b4:	d001      	beq.n	f6ba <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    f6b6:	2207      	movs	r2, #7
    f6b8:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    f6ba:	7899      	ldrb	r1, [r3, #2]
    f6bc:	7858      	ldrb	r0, [r3, #1]
    f6be:	f00a fb3f 	bl	19d40 <ll_phy_default_set>
    f6c2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f6c4:	2101      	movs	r1, #1
    f6c6:	4628      	mov	r0, r5
    f6c8:	f7ff f92a 	bl	e920 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    f6cc:	b114      	cbz	r4, f6d4 <le_set_default_phy+0x36>
    f6ce:	231e      	movs	r3, #30
    f6d0:	7003      	strb	r3, [r0, #0]
    f6d2:	bd38      	pop	{r3, r4, r5, pc}
    f6d4:	2300      	movs	r3, #0
    f6d6:	e7fb      	b.n	f6d0 <le_set_default_phy+0x32>

0000f6d8 <le_set_phy>:
{
    f6d8:	b538      	push	{r3, r4, r5, lr}
    f6da:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    f6dc:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    f6de:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    f6e0:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    f6e4:	788b      	ldrb	r3, [r1, #2]
    f6e6:	f013 0f01 	tst.w	r3, #1
    f6ea:	d001      	beq.n	f6f0 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    f6ec:	2507      	movs	r5, #7
    f6ee:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    f6f0:	f013 0f02 	tst.w	r3, #2
    f6f4:	d001      	beq.n	f6fa <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    f6f6:	2307      	movs	r3, #7
    f6f8:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    f6fa:	f012 0f03 	tst.w	r2, #3
    f6fe:	d00c      	beq.n	f71a <le_set_phy+0x42>
		phy_opts -= 1;
    f700:	3a01      	subs	r2, #1
		phy_opts &= 1;
    f702:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    f706:	790b      	ldrb	r3, [r1, #4]
    f708:	78c9      	ldrb	r1, [r1, #3]
    f70a:	f00a fb23 	bl	19d54 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    f70e:	b100      	cbz	r0, f712 <le_set_phy+0x3a>
    f710:	200c      	movs	r0, #12
    f712:	f7ff f8dd 	bl	e8d0 <cmd_status>
    f716:	6020      	str	r0, [r4, #0]
    f718:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    f71a:	2200      	movs	r2, #0
    f71c:	e7f3      	b.n	f706 <le_set_phy+0x2e>

0000f71e <le_add_dev_to_rl>:
{
    f71e:	b538      	push	{r3, r4, r5, lr}
    f720:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    f722:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    f724:	f100 0217 	add.w	r2, r0, #23
    f728:	1dc1      	adds	r1, r0, #7
    f72a:	f00b fffd 	bl	1b728 <ll_rl_add>
    f72e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f730:	2101      	movs	r1, #1
    f732:	4628      	mov	r0, r5
    f734:	f7ff f8f4 	bl	e920 <cmd_complete>
	ccst->status = status;
    f738:	7004      	strb	r4, [r0, #0]
    f73a:	bd38      	pop	{r3, r4, r5, pc}

0000f73c <le_rem_dev_from_rl>:
{
    f73c:	b538      	push	{r3, r4, r5, lr}
    f73e:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    f740:	6880      	ldr	r0, [r0, #8]
    f742:	f00c f8af 	bl	1b8a4 <ll_rl_remove>
    f746:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f748:	2101      	movs	r1, #1
    f74a:	4628      	mov	r0, r5
    f74c:	f7ff f8e8 	bl	e920 <cmd_complete>
	ccst->status = status;
    f750:	7004      	strb	r4, [r0, #0]
    f752:	bd38      	pop	{r3, r4, r5, pc}

0000f754 <le_clear_rl>:
{
    f754:	b510      	push	{r4, lr}
    f756:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    f758:	2101      	movs	r1, #1
    f75a:	f7ff f8e1 	bl	e920 <cmd_complete>
    f75e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    f760:	f00b ffd6 	bl	1b710 <ll_rl_clear>
    f764:	7020      	strb	r0, [r4, #0]
    f766:	bd10      	pop	{r4, pc}

0000f768 <le_read_rl_size>:
{
    f768:	b510      	push	{r4, lr}
    f76a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f76c:	2102      	movs	r1, #2
    f76e:	f7ff f8d7 	bl	e920 <cmd_complete>
    f772:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    f774:	f00b ffca 	bl	1b70c <ll_rl_size_get>
    f778:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    f77a:	2300      	movs	r3, #0
    f77c:	7023      	strb	r3, [r4, #0]
    f77e:	bd10      	pop	{r4, pc}

0000f780 <le_read_peer_rpa>:
{
    f780:	b510      	push	{r4, lr}
    f782:	b082      	sub	sp, #8
    f784:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    f786:	2207      	movs	r2, #7
    f788:	6881      	ldr	r1, [r0, #8]
    f78a:	4668      	mov	r0, sp
    f78c:	f7f0 fd98 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    f790:	2107      	movs	r1, #7
    f792:	4620      	mov	r0, r4
    f794:	f7ff f8c4 	bl	e920 <cmd_complete>
    f798:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    f79a:	1c41      	adds	r1, r0, #1
    f79c:	4668      	mov	r0, sp
    f79e:	f00c f925 	bl	1b9ec <ll_rl_crpa_get>
    f7a2:	7020      	strb	r0, [r4, #0]
}
    f7a4:	b002      	add	sp, #8
    f7a6:	bd10      	pop	{r4, pc}

0000f7a8 <le_read_local_rpa>:
{
    f7a8:	b510      	push	{r4, lr}
    f7aa:	b082      	sub	sp, #8
    f7ac:	460c      	mov	r4, r1
    f7ae:	2207      	movs	r2, #7
    f7b0:	6881      	ldr	r1, [r0, #8]
    f7b2:	4668      	mov	r0, sp
    f7b4:	f7f0 fd84 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    f7b8:	2107      	movs	r1, #7
    f7ba:	4620      	mov	r0, r4
    f7bc:	f7ff f8b0 	bl	e920 <cmd_complete>
    f7c0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    f7c2:	1c41      	adds	r1, r0, #1
    f7c4:	4668      	mov	r0, sp
    f7c6:	f00c f939 	bl	1ba3c <ll_rl_lrpa_get>
    f7ca:	7020      	strb	r0, [r4, #0]
}
    f7cc:	b002      	add	sp, #8
    f7ce:	bd10      	pop	{r4, pc}

0000f7d0 <le_set_addr_res_enable>:
{
    f7d0:	b538      	push	{r3, r4, r5, lr}
    f7d2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    f7d4:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    f7d6:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    f7d8:	2101      	movs	r1, #1
    f7da:	4618      	mov	r0, r3
    f7dc:	f7ff f8a0 	bl	e920 <cmd_complete>
    f7e0:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    f7e2:	4628      	mov	r0, r5
    f7e4:	f00c f944 	bl	1ba70 <ll_rl_enable>
    f7e8:	7020      	strb	r0, [r4, #0]
    f7ea:	bd38      	pop	{r3, r4, r5, pc}

0000f7ec <le_set_rpa_timeout>:
{
    f7ec:	b510      	push	{r4, lr}
    f7ee:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    f7f0:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    f7f2:	8818      	ldrh	r0, [r3, #0]
    f7f4:	f00c f954 	bl	1baa0 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    f7f8:	2101      	movs	r1, #1
    f7fa:	4620      	mov	r0, r4
    f7fc:	f7ff f890 	bl	e920 <cmd_complete>
	ccst->status = 0x00;
    f800:	2300      	movs	r3, #0
    f802:	7003      	strb	r3, [r0, #0]
    f804:	bd10      	pop	{r4, pc}

0000f806 <le_set_privacy_mode>:
{
    f806:	b538      	push	{r3, r4, r5, lr}
    f808:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    f80a:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    f80c:	79c1      	ldrb	r1, [r0, #7]
    f80e:	f00c f951 	bl	1bab4 <ll_priv_mode_set>
    f812:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    f814:	2101      	movs	r1, #1
    f816:	4628      	mov	r0, r5
    f818:	f7ff f882 	bl	e920 <cmd_complete>
	ccst->status = status;
    f81c:	7004      	strb	r4, [r0, #0]
    f81e:	bd38      	pop	{r3, r4, r5, pc}

0000f820 <le_read_tx_power>:
{
    f820:	b508      	push	{r3, lr}
    f822:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    f824:	2103      	movs	r1, #3
    f826:	f7ff f87b 	bl	e920 <cmd_complete>
	rp->status = 0x00;
    f82a:	4601      	mov	r1, r0
    f82c:	2300      	movs	r3, #0
    f82e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    f832:	3001      	adds	r0, #1
    f834:	f00a f9f3 	bl	19c1e <ll_tx_power_get>
    f838:	bd08      	pop	{r3, pc}

0000f83a <controller_cmd_handle>:
{
    f83a:	b508      	push	{r3, lr}
    f83c:	460b      	mov	r3, r1
	switch (ocf) {
    f83e:	3801      	subs	r0, #1
    f840:	284d      	cmp	r0, #77	; 0x4d
    f842:	f200 8164 	bhi.w	fb0e <controller_cmd_handle+0x2d4>
    f846:	e8df f010 	tbh	[pc, r0, lsl #1]
    f84a:	004e      	.short	0x004e
    f84c:	005a0054 	.word	0x005a0054
    f850:	00600162 	.word	0x00600162
    f854:	00960090 	.word	0x00960090
    f858:	00a2009c 	.word	0x00a2009c
    f85c:	00ae00a8 	.word	0x00ae00a8
    f860:	00ba00b4 	.word	0x00ba00b4
    f864:	006600c0 	.word	0x006600c0
    f868:	0072006c 	.word	0x0072006c
    f86c:	00ea0078 	.word	0x00ea0078
    f870:	00de00c6 	.word	0x00de00c6
    f874:	007e00e4 	.word	0x007e00e4
    f878:	00cc0084 	.word	0x00cc0084
    f87c:	00d800d2 	.word	0x00d800d2
    f880:	0162008a 	.word	0x0162008a
    f884:	01620162 	.word	0x01620162
    f888:	00f600f0 	.word	0x00f600f0
    f88c:	010200fc 	.word	0x010200fc
    f890:	01620108 	.word	0x01620108
    f894:	01260162 	.word	0x01260162
    f898:	0132012c 	.word	0x0132012c
    f89c:	013e0138 	.word	0x013e0138
    f8a0:	014a0144 	.word	0x014a0144
    f8a4:	010e0150 	.word	0x010e0150
    f8a8:	011a0114 	.word	0x011a0114
    f8ac:	01620120 	.word	0x01620120
    f8b0:	01620162 	.word	0x01620162
    f8b4:	01620162 	.word	0x01620162
    f8b8:	01620162 	.word	0x01620162
    f8bc:	01620162 	.word	0x01620162
    f8c0:	01620162 	.word	0x01620162
    f8c4:	01620162 	.word	0x01620162
    f8c8:	01620162 	.word	0x01620162
    f8cc:	01620162 	.word	0x01620162
    f8d0:	01620162 	.word	0x01620162
    f8d4:	01620162 	.word	0x01620162
    f8d8:	01620162 	.word	0x01620162
    f8dc:	015c0162 	.word	0x015c0162
    f8e0:	01620162 	.word	0x01620162
    f8e4:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    f8e6:	4611      	mov	r1, r2
    f8e8:	4618      	mov	r0, r3
    f8ea:	f7f6 fe3f 	bl	656c <le_set_event_mask>
	return 0;
    f8ee:	2000      	movs	r0, #0
		break;
    f8f0:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    f8f2:	4611      	mov	r1, r2
    f8f4:	4618      	mov	r0, r3
    f8f6:	f7ff f86c 	bl	e9d2 <le_read_buffer_size>
	return 0;
    f8fa:	2000      	movs	r0, #0
		break;
    f8fc:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    f8fe:	4611      	mov	r1, r2
    f900:	4618      	mov	r0, r3
    f902:	f7ff fabb 	bl	ee7c <le_read_local_features>
	return 0;
    f906:	2000      	movs	r0, #0
		break;
    f908:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    f90a:	4611      	mov	r1, r2
    f90c:	4618      	mov	r0, r3
    f90e:	f7ff fc03 	bl	f118 <le_set_random_address>
	return 0;
    f912:	2000      	movs	r0, #0
		break;
    f914:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    f916:	4611      	mov	r1, r2
    f918:	4618      	mov	r0, r3
    f91a:	f7ff fc17 	bl	f14c <le_read_wl_size>
	return 0;
    f91e:	2000      	movs	r0, #0
		break;
    f920:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    f922:	4611      	mov	r1, r2
    f924:	4618      	mov	r0, r3
    f926:	f7ff fc1d 	bl	f164 <le_clear_wl>
	return 0;
    f92a:	2000      	movs	r0, #0
		break;
    f92c:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    f92e:	4611      	mov	r1, r2
    f930:	4618      	mov	r0, r3
    f932:	f7ff fc21 	bl	f178 <le_add_dev_to_wl>
	return 0;
    f936:	2000      	movs	r0, #0
		break;
    f938:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    f93a:	4611      	mov	r1, r2
    f93c:	4618      	mov	r0, r3
    f93e:	f7ff fc27 	bl	f190 <le_rem_dev_from_wl>
	return 0;
    f942:	2000      	movs	r0, #0
		break;
    f944:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    f946:	4611      	mov	r1, r2
    f948:	4618      	mov	r0, r3
    f94a:	f7ff fc2d 	bl	f1a8 <le_encrypt>
	return 0;
    f94e:	2000      	movs	r0, #0
		break;
    f950:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    f952:	4611      	mov	r1, r2
    f954:	4618      	mov	r0, r3
    f956:	f7ff fca4 	bl	f2a2 <le_rand>
	return 0;
    f95a:	2000      	movs	r0, #0
		break;
    f95c:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    f95e:	4611      	mov	r1, r2
    f960:	4618      	mov	r0, r3
    f962:	f7ff f843 	bl	e9ec <le_read_supp_states>
	return 0;
    f966:	2000      	movs	r0, #0
		break;
    f968:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    f96a:	4611      	mov	r1, r2
    f96c:	4618      	mov	r0, r3
    f96e:	f7ff fca4 	bl	f2ba <le_set_adv_param>
	return 0;
    f972:	2000      	movs	r0, #0
		break;
    f974:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    f976:	4611      	mov	r1, r2
    f978:	4618      	mov	r0, r3
    f97a:	f7ff f84a 	bl	ea12 <le_read_adv_chan_tx_power>
	return 0;
    f97e:	2000      	movs	r0, #0
		break;
    f980:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    f982:	4611      	mov	r1, r2
    f984:	4618      	mov	r0, r3
    f986:	f7ff fcbb 	bl	f300 <le_set_adv_data>
	return 0;
    f98a:	2000      	movs	r0, #0
		break;
    f98c:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    f98e:	4611      	mov	r1, r2
    f990:	4618      	mov	r0, r3
    f992:	f7ff fcc3 	bl	f31c <le_set_scan_rsp_data>
	return 0;
    f996:	2000      	movs	r0, #0
		break;
    f998:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    f99a:	4611      	mov	r1, r2
    f99c:	4618      	mov	r0, r3
    f99e:	f7ff fccb 	bl	f338 <le_set_adv_enable>
	return 0;
    f9a2:	2000      	movs	r0, #0
		break;
    f9a4:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    f9a6:	4611      	mov	r1, r2
    f9a8:	4618      	mov	r0, r3
    f9aa:	f7ff fcd6 	bl	f35a <le_set_scan_param>
	return 0;
    f9ae:	2000      	movs	r0, #0
		break;
    f9b0:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    f9b2:	4611      	mov	r1, r2
    f9b4:	4618      	mov	r0, r3
    f9b6:	f7ff fceb 	bl	f390 <le_set_scan_enable>
	return 0;
    f9ba:	2000      	movs	r0, #0
		break;
    f9bc:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    f9be:	4611      	mov	r1, r2
    f9c0:	4618      	mov	r0, r3
    f9c2:	f7ff fd09 	bl	f3d8 <le_create_connection>
	return 0;
    f9c6:	2000      	movs	r0, #0
		break;
    f9c8:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    f9ca:	4611      	mov	r1, r2
    f9cc:	4618      	mov	r0, r3
    f9ce:	f7ff fd23 	bl	f418 <le_create_conn_cancel>
	return 0;
    f9d2:	2000      	movs	r0, #0
		break;
    f9d4:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    f9d6:	4611      	mov	r1, r2
    f9d8:	4618      	mov	r0, r3
    f9da:	f7ff fd2c 	bl	f436 <le_set_host_chan_classif>
	return 0;
    f9de:	2000      	movs	r0, #0
		break;
    f9e0:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    f9e2:	4611      	mov	r1, r2
    f9e4:	4618      	mov	r0, r3
    f9e6:	f7ff fd36 	bl	f456 <le_start_encryption>
	return 0;
    f9ea:	2000      	movs	r0, #0
		break;
    f9ec:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    f9ee:	4611      	mov	r1, r2
    f9f0:	4618      	mov	r0, r3
    f9f2:	f7ff fd41 	bl	f478 <le_ltk_req_reply>
	return 0;
    f9f6:	2000      	movs	r0, #0
		break;
    f9f8:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    f9fa:	4611      	mov	r1, r2
    f9fc:	4618      	mov	r0, r3
    f9fe:	f7ff fd51 	bl	f4a4 <le_ltk_req_neg_reply>
	return 0;
    fa02:	2000      	movs	r0, #0
		break;
    fa04:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    fa06:	4611      	mov	r1, r2
    fa08:	4618      	mov	r0, r3
    fa0a:	f7ff fd61 	bl	f4d0 <le_read_chan_map>
	return 0;
    fa0e:	2000      	movs	r0, #0
		break;
    fa10:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    fa12:	4611      	mov	r1, r2
    fa14:	4618      	mov	r0, r3
    fa16:	f7ff fd71 	bl	f4fc <le_read_remote_features>
	return 0;
    fa1a:	2000      	movs	r0, #0
		break;
    fa1c:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    fa1e:	4611      	mov	r1, r2
    fa20:	4618      	mov	r0, r3
    fa22:	f7f9 f9c1 	bl	8da8 <le_conn_update>
	return 0;
    fa26:	2000      	movs	r0, #0
		break;
    fa28:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    fa2a:	4611      	mov	r1, r2
    fa2c:	4618      	mov	r0, r3
    fa2e:	f7f7 fe47 	bl	76c0 <le_conn_param_req_reply>
	return 0;
    fa32:	2000      	movs	r0, #0
		break;
    fa34:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    fa36:	4611      	mov	r1, r2
    fa38:	4618      	mov	r0, r3
    fa3a:	f7ff fd6b 	bl	f514 <le_conn_param_req_neg_reply>
	return 0;
    fa3e:	2000      	movs	r0, #0
		break;
    fa40:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    fa42:	4611      	mov	r1, r2
    fa44:	4618      	mov	r0, r3
    fa46:	f7ff fd80 	bl	f54a <le_set_data_len>
	return 0;
    fa4a:	2000      	movs	r0, #0
		break;
    fa4c:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    fa4e:	4611      	mov	r1, r2
    fa50:	4618      	mov	r0, r3
    fa52:	f7ff fd90 	bl	f576 <le_read_default_data_len>
	return 0;
    fa56:	2000      	movs	r0, #0
		break;
    fa58:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    fa5a:	4611      	mov	r1, r2
    fa5c:	4618      	mov	r0, r3
    fa5e:	f7ff fd97 	bl	f590 <le_write_default_data_len>
	return 0;
    fa62:	2000      	movs	r0, #0
		break;
    fa64:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    fa66:	4611      	mov	r1, r2
    fa68:	4618      	mov	r0, r3
    fa6a:	f7ff fda3 	bl	f5b4 <le_read_max_data_len>
	return 0;
    fa6e:	2000      	movs	r0, #0
		break;
    fa70:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    fa72:	4611      	mov	r1, r2
    fa74:	4618      	mov	r0, r3
    fa76:	f7ff fde7 	bl	f648 <le_read_phy>
	return 0;
    fa7a:	2000      	movs	r0, #0
		break;
    fa7c:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    fa7e:	4611      	mov	r1, r2
    fa80:	4618      	mov	r0, r3
    fa82:	f7ff fe0c 	bl	f69e <le_set_default_phy>
	return 0;
    fa86:	2000      	movs	r0, #0
		break;
    fa88:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    fa8a:	4611      	mov	r1, r2
    fa8c:	4618      	mov	r0, r3
    fa8e:	f7ff fe23 	bl	f6d8 <le_set_phy>
	return 0;
    fa92:	2000      	movs	r0, #0
		break;
    fa94:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    fa96:	4611      	mov	r1, r2
    fa98:	4618      	mov	r0, r3
    fa9a:	f7ff fe40 	bl	f71e <le_add_dev_to_rl>
	return 0;
    fa9e:	2000      	movs	r0, #0
		break;
    faa0:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    faa2:	4611      	mov	r1, r2
    faa4:	4618      	mov	r0, r3
    faa6:	f7ff fe49 	bl	f73c <le_rem_dev_from_rl>
	return 0;
    faaa:	2000      	movs	r0, #0
		break;
    faac:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    faae:	4611      	mov	r1, r2
    fab0:	4618      	mov	r0, r3
    fab2:	f7ff fe4f 	bl	f754 <le_clear_rl>
	return 0;
    fab6:	2000      	movs	r0, #0
		break;
    fab8:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    faba:	4611      	mov	r1, r2
    fabc:	4618      	mov	r0, r3
    fabe:	f7ff fe53 	bl	f768 <le_read_rl_size>
	return 0;
    fac2:	2000      	movs	r0, #0
		break;
    fac4:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    fac6:	4611      	mov	r1, r2
    fac8:	4618      	mov	r0, r3
    faca:	f7ff fe59 	bl	f780 <le_read_peer_rpa>
	return 0;
    face:	2000      	movs	r0, #0
		break;
    fad0:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    fad2:	4611      	mov	r1, r2
    fad4:	4618      	mov	r0, r3
    fad6:	f7ff fe67 	bl	f7a8 <le_read_local_rpa>
	return 0;
    fada:	2000      	movs	r0, #0
		break;
    fadc:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    fade:	4611      	mov	r1, r2
    fae0:	4618      	mov	r0, r3
    fae2:	f7ff fe75 	bl	f7d0 <le_set_addr_res_enable>
	return 0;
    fae6:	2000      	movs	r0, #0
		break;
    fae8:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    faea:	4611      	mov	r1, r2
    faec:	4618      	mov	r0, r3
    faee:	f7ff fe7d 	bl	f7ec <le_set_rpa_timeout>
	return 0;
    faf2:	2000      	movs	r0, #0
		break;
    faf4:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    faf6:	4611      	mov	r1, r2
    faf8:	4618      	mov	r0, r3
    fafa:	f7ff fe84 	bl	f806 <le_set_privacy_mode>
	return 0;
    fafe:	2000      	movs	r0, #0
		break;
    fb00:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    fb02:	4611      	mov	r1, r2
    fb04:	4618      	mov	r0, r3
    fb06:	f7ff fe8b 	bl	f820 <le_read_tx_power>
	return 0;
    fb0a:	2000      	movs	r0, #0
		break;
    fb0c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    fb0e:	f06f 0015 	mvn.w	r0, #21
}
    fb12:	bd08      	pop	{r3, pc}

0000fb14 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    fb14:	4b0e      	ldr	r3, [pc, #56]	; (fb50 <data_buf_overflow+0x3c>)
    fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb1a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    fb1e:	2300      	movs	r3, #0
    fb20:	4313      	orrs	r3, r2
    fb22:	d100      	bne.n	fb26 <data_buf_overflow+0x12>
    fb24:	4770      	bx	lr
{
    fb26:	b510      	push	{r4, lr}
    fb28:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    fb2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fb2e:	2001      	movs	r0, #1
    fb30:	f7f8 fa1c 	bl	7f6c <bt_buf_get_rx>
    fb34:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    fb36:	2201      	movs	r2, #1
    fb38:	211a      	movs	r1, #26
    fb3a:	f7fe febf 	bl	e8bc <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    fb3e:	6820      	ldr	r0, [r4, #0]
    fb40:	2101      	movs	r1, #1
    fb42:	3008      	adds	r0, #8
    fb44:	f00c fbe2 	bl	1c30c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    fb48:	2301      	movs	r3, #1
    fb4a:	7003      	strb	r3, [r0, #0]
    fb4c:	bd10      	pop	{r4, pc}
    fb4e:	bf00      	nop
    fb50:	2000bc00 	.word	0x2000bc00

0000fb54 <encode_data_ctrl>:
{
    fb54:	b510      	push	{r4, lr}
    fb56:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    fb58:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    fb5a:	78e0      	ldrb	r0, [r4, #3]
    fb5c:	3803      	subs	r0, #3
    fb5e:	2812      	cmp	r0, #18
    fb60:	d82e      	bhi.n	fbc0 <encode_data_ctrl+0x6c>
    fb62:	e8df f000 	tbb	[pc, r0]
    fb66:	2d0a      	.short	0x2d0a
    fb68:	2d290e2d 	.word	0x2d290e2d
    fb6c:	192d2d12 	.word	0x192d2d12
    fb70:	2d212d1d 	.word	0x2d212d1d
    fb74:	252d2d2d 	.word	0x252d2d2d
    fb78:	25          	.byte	0x25
    fb79:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    fb7a:	4620      	mov	r0, r4
    fb7c:	f7f7 feec 	bl	7958 <le_ltk_request>
		break;
    fb80:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    fb82:	2000      	movs	r0, #0
    fb84:	f7ff f826 	bl	ebd4 <encrypt_change>
		break;
    fb88:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    fb8a:	4613      	mov	r3, r2
    fb8c:	460a      	mov	r2, r1
    fb8e:	4621      	mov	r1, r4
    fb90:	2000      	movs	r0, #0
    fb92:	f7f7 fceb 	bl	756c <le_remote_feat_complete>
		break;
    fb96:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    fb98:	4620      	mov	r0, r4
    fb9a:	f7fe fff5 	bl	eb88 <remote_version_info>
		break;
    fb9e:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    fba0:	7920      	ldrb	r0, [r4, #4]
    fba2:	f7ff f817 	bl	ebd4 <encrypt_change>
		break;
    fba6:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    fba8:	4620      	mov	r0, r4
    fbaa:	f7f7 fdd7 	bl	775c <le_conn_param_req>
		break;
    fbae:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    fbb0:	4620      	mov	r0, r4
    fbb2:	f7f6 fa43 	bl	603c <le_data_len_change>
		break;
    fbb6:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    fbb8:	4620      	mov	r0, r4
    fbba:	f7ff fb66 	bl	f28a <le_unknown_rsp>
		break;
    fbbe:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    fbc0:	4040      	eors	r0, r0
    fbc2:	f380 8811 	msr	BASEPRI, r0
    fbc6:	f04f 0004 	mov.w	r0, #4
    fbca:	df02      	svc	2

0000fbcc <le_advertising_report>:
{
    fbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbd0:	b082      	sub	sp, #8
    fbd2:	4605      	mov	r5, r0
    fbd4:	460e      	mov	r6, r1
    fbd6:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    fbd8:	4b90      	ldr	r3, [pc, #576]	; (fe1c <le_advertising_report+0x250>)
    fbda:	e893 0003 	ldmia.w	r3, {r0, r1}
    fbde:	9000      	str	r0, [sp, #0]
    fbe0:	f8ad 1004 	strh.w	r1, [sp, #4]
    fbe4:	0c09      	lsrs	r1, r1, #16
    fbe6:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    fbea:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    fbec:	330b      	adds	r3, #11
    fbee:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    fbf2:	782b      	ldrb	r3, [r5, #0]
    fbf4:	f013 0f40 	tst.w	r3, #64	; 0x40
    fbf8:	d125      	bne.n	fc46 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    fbfa:	4b89      	ldr	r3, [pc, #548]	; (fe20 <le_advertising_report+0x254>)
    fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc00:	2200      	movs	r2, #0
    fc02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    fc06:	4313      	orrs	r3, r2
    fc08:	f000 80b0 	beq.w	fd6c <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    fc0c:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    fc0e:	330c      	adds	r3, #12
    fc10:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    fc12:	b947      	cbnz	r7, fc26 <le_advertising_report+0x5a>
    fc14:	4b83      	ldr	r3, [pc, #524]	; (fe24 <le_advertising_report+0x258>)
    fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc1a:	f002 0202 	and.w	r2, r2, #2
    fc1e:	2300      	movs	r3, #0
    fc20:	4313      	orrs	r3, r2
    fc22:	f000 80a3 	beq.w	fd6c <le_advertising_report+0x1a0>
    fc26:	b147      	cbz	r7, fc3a <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    fc28:	4b7e      	ldr	r3, [pc, #504]	; (fe24 <le_advertising_report+0x258>)
    fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc2e:	f002 020b 	and.w	r2, r2, #11
    fc32:	2300      	movs	r3, #0
    fc34:	4313      	orrs	r3, r2
    fc36:	f000 8099 	beq.w	fd6c <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    fc3a:	4b7b      	ldr	r3, [pc, #492]	; (fe28 <le_advertising_report+0x25c>)
    fc3c:	681b      	ldr	r3, [r3, #0]
    fc3e:	2b00      	cmp	r3, #0
    fc40:	db08      	blt.n	fc54 <le_advertising_report+0x88>
    fc42:	2400      	movs	r4, #0
    fc44:	e009      	b.n	fc5a <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    fc46:	1cab      	adds	r3, r5, #2
    fc48:	4642      	mov	r2, r8
    fc4a:	2100      	movs	r1, #0
    fc4c:	4608      	mov	r0, r1
    fc4e:	f00b fea9 	bl	1b9a4 <ll_rl_crpa_set>
    fc52:	e7d2      	b.n	fbfa <le_advertising_report+0x2e>
	return false;
    fc54:	2300      	movs	r3, #0
    fc56:	e054      	b.n	fd02 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    fc58:	3401      	adds	r4, #1
    fc5a:	4b73      	ldr	r3, [pc, #460]	; (fe28 <le_advertising_report+0x25c>)
    fc5c:	681b      	ldr	r3, [r3, #0]
    fc5e:	429c      	cmp	r4, r3
    fc60:	da26      	bge.n	fcb0 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    fc62:	4972      	ldr	r1, [pc, #456]	; (fe2c <le_advertising_report+0x260>)
    fc64:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    fc68:	2206      	movs	r2, #6
    fc6a:	3102      	adds	r1, #2
    fc6c:	1ca8      	adds	r0, r5, #2
    fc6e:	f01c f971 	bl	2bf54 <memcmp>
    fc72:	2800      	cmp	r0, #0
    fc74:	d1f0      	bne.n	fc58 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    fc76:	782b      	ldrb	r3, [r5, #0]
    fc78:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fc7c:	4a6b      	ldr	r2, [pc, #428]	; (fe2c <le_advertising_report+0x260>)
    fc7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    fc82:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    fc84:	4293      	cmp	r3, r2
    fc86:	d1e7      	bne.n	fc58 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    fc88:	4b68      	ldr	r3, [pc, #416]	; (fe2c <le_advertising_report+0x260>)
    fc8a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    fc8e:	782b      	ldrb	r3, [r5, #0]
    fc90:	f003 030f 	and.w	r3, r3, #15
    fc94:	fa22 f103 	lsr.w	r1, r2, r3
    fc98:	f011 0f01 	tst.w	r1, #1
    fc9c:	d171      	bne.n	fd82 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    fc9e:	2101      	movs	r1, #1
    fca0:	fa01 f303 	lsl.w	r3, r1, r3
    fca4:	431a      	orrs	r2, r3
    fca6:	4b61      	ldr	r3, [pc, #388]	; (fe2c <le_advertising_report+0x260>)
    fca8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    fcac:	2300      	movs	r3, #0
    fcae:	e028      	b.n	fd02 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    fcb0:	f8df a17c 	ldr.w	sl, [pc, #380]	; fe30 <le_advertising_report+0x264>
    fcb4:	f8da 0000 	ldr.w	r0, [sl]
    fcb8:	4c5c      	ldr	r4, [pc, #368]	; (fe2c <le_advertising_report+0x260>)
    fcba:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    fcbe:	2206      	movs	r2, #6
    fcc0:	1ca9      	adds	r1, r5, #2
    fcc2:	3002      	adds	r0, #2
    fcc4:	f7f0 fafc 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    fcc8:	f8da 3000 	ldr.w	r3, [sl]
    fccc:	782a      	ldrb	r2, [r5, #0]
    fcce:	f3c2 1280 	ubfx	r2, r2, #6, #1
    fcd2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    fcd6:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    fcd8:	782a      	ldrb	r2, [r5, #0]
    fcda:	f002 010f 	and.w	r1, r2, #15
    fcde:	2201      	movs	r2, #1
    fce0:	408a      	lsls	r2, r1
    fce2:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    fce6:	4a50      	ldr	r2, [pc, #320]	; (fe28 <le_advertising_report+0x25c>)
    fce8:	6812      	ldr	r2, [r2, #0]
    fcea:	2a0f      	cmp	r2, #15
    fcec:	dc41      	bgt.n	fd72 <le_advertising_report+0x1a6>
			dup_count++;
    fcee:	3201      	adds	r2, #1
    fcf0:	4b4d      	ldr	r3, [pc, #308]	; (fe28 <le_advertising_report+0x25c>)
    fcf2:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    fcf4:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    fcf8:	4b4d      	ldr	r3, [pc, #308]	; (fe30 <le_advertising_report+0x264>)
    fcfa:	681b      	ldr	r3, [r3, #0]
    fcfc:	2b10      	cmp	r3, #16
    fcfe:	d03c      	beq.n	fd7a <le_advertising_report+0x1ae>
	return false;
    fd00:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    fd02:	bb9b      	cbnz	r3, fd6c <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    fd04:	782b      	ldrb	r3, [r5, #0]
    fd06:	f003 030f 	and.w	r3, r3, #15
    fd0a:	2b01      	cmp	r3, #1
    fd0c:	d03b      	beq.n	fd86 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    fd0e:	786c      	ldrb	r4, [r5, #1]
    fd10:	3c06      	subs	r4, #6
    fd12:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    fd14:	786a      	ldrb	r2, [r5, #1]
    fd16:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    fd18:	f816 a002 	ldrb.w	sl, [r6, r2]
    fd1c:	f1ca 0a00 	rsb	sl, sl, #0
    fd20:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    fd24:	2f00      	cmp	r7, #0
    fd26:	d041      	beq.n	fdac <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    fd28:	2b01      	cmp	r3, #1
    fd2a:	d12e      	bne.n	fd8a <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    fd2c:	2211      	movs	r2, #17
    fd2e:	210b      	movs	r1, #11
    fd30:	4648      	mov	r0, r9
    fd32:	f7fe fe8f 	bl	ea54 <meta_evt>
    fd36:	4604      	mov	r4, r0
		drp->num_reports = 1;
    fd38:	2301      	movs	r3, #1
    fd3a:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    fd3c:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    fd3e:	f00b fce5 	bl	1b70c <ll_rl_size_get>
    fd42:	4580      	cmp	r8, r0
    fd44:	d227      	bcs.n	fd96 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    fd46:	1ce2      	adds	r2, r4, #3
    fd48:	1ca1      	adds	r1, r4, #2
    fd4a:	4640      	mov	r0, r8
    fd4c:	f00b fa86 	bl	1b25c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    fd50:	78a3      	ldrb	r3, [r4, #2]
    fd52:	3302      	adds	r3, #2
    fd54:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    fd56:	2301      	movs	r3, #1
    fd58:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    fd5a:	2206      	movs	r2, #6
    fd5c:	f105 0108 	add.w	r1, r5, #8
    fd60:	f104 000a 	add.w	r0, r4, #10
    fd64:	f7f0 faac 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    fd68:	f884 a010 	strb.w	sl, [r4, #16]
}
    fd6c:	b002      	add	sp, #8
    fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    fd72:	3301      	adds	r3, #1
    fd74:	4a2e      	ldr	r2, [pc, #184]	; (fe30 <le_advertising_report+0x264>)
    fd76:	6013      	str	r3, [r2, #0]
    fd78:	e7be      	b.n	fcf8 <le_advertising_report+0x12c>
			dup_curr = 0;
    fd7a:	2300      	movs	r3, #0
    fd7c:	4a2c      	ldr	r2, [pc, #176]	; (fe30 <le_advertising_report+0x264>)
    fd7e:	6013      	str	r3, [r2, #0]
    fd80:	e7bf      	b.n	fd02 <le_advertising_report+0x136>
					return true;
    fd82:	2301      	movs	r3, #1
    fd84:	e7bd      	b.n	fd02 <le_advertising_report+0x136>
		data_len = 0;
    fd86:	2400      	movs	r4, #0
    fd88:	e7c4      	b.n	fd14 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    fd8a:	4040      	eors	r0, r0
    fd8c:	f380 8811 	msr	BASEPRI, r0
    fd90:	f04f 0004 	mov.w	r0, #4
    fd94:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    fd96:	4629      	mov	r1, r5
    fd98:	f811 3b02 	ldrb.w	r3, [r1], #2
    fd9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fda0:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    fda2:	2206      	movs	r2, #6
    fda4:	1ce0      	adds	r0, r4, #3
    fda6:	f7f0 fa8b 	bl	2c0 <memcpy>
    fdaa:	e7d4      	b.n	fd56 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    fdac:	f104 020b 	add.w	r2, r4, #11
    fdb0:	b2d2      	uxtb	r2, r2
    fdb2:	2102      	movs	r1, #2
    fdb4:	4648      	mov	r0, r9
    fdb6:	f7fe fe4d 	bl	ea54 <meta_evt>
    fdba:	4607      	mov	r7, r0
	sep->num_reports = 1;
    fdbc:	2301      	movs	r3, #1
    fdbe:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    fdc0:	782b      	ldrb	r3, [r5, #0]
    fdc2:	f003 030f 	and.w	r3, r3, #15
    fdc6:	aa02      	add	r2, sp, #8
    fdc8:	4413      	add	r3, r2
    fdca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    fdce:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    fdd0:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    fdd2:	330b      	adds	r3, #11
    fdd4:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    fdd6:	f00b fc99 	bl	1b70c <ll_rl_size_get>
    fdda:	4286      	cmp	r6, r0
    fddc:	d212      	bcs.n	fe04 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    fdde:	1cfa      	adds	r2, r7, #3
    fde0:	1cb9      	adds	r1, r7, #2
    fde2:	4630      	mov	r0, r6
    fde4:	f00b fa3a 	bl	1b25c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    fde8:	78bb      	ldrb	r3, [r7, #2]
    fdea:	3302      	adds	r3, #2
    fdec:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    fdee:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    fdf0:	370a      	adds	r7, #10
    fdf2:	4622      	mov	r2, r4
    fdf4:	f105 0108 	add.w	r1, r5, #8
    fdf8:	4638      	mov	r0, r7
    fdfa:	f7f0 fa61 	bl	2c0 <memcpy>
	*prssi = rssi;
    fdfe:	f807 a004 	strb.w	sl, [r7, r4]
    fe02:	e7b3      	b.n	fd6c <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    fe04:	4629      	mov	r1, r5
    fe06:	f811 3b02 	ldrb.w	r3, [r1], #2
    fe0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fe0e:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    fe10:	2206      	movs	r2, #6
    fe12:	1cf8      	adds	r0, r7, #3
    fe14:	f7f0 fa54 	bl	2c0 <memcpy>
    fe18:	e7e9      	b.n	fdee <le_advertising_report+0x222>
    fe1a:	bf00      	nop
    fe1c:	0002fea0 	.word	0x0002fea0
    fe20:	2000bc00 	.word	0x2000bc00
    fe24:	2000bc08 	.word	0x2000bc08
    fe28:	20000ad0 	.word	0x20000ad0
    fe2c:	20000ad8 	.word	0x20000ad8
    fe30:	20000ad4 	.word	0x20000ad4

0000fe34 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    fe34:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    fe36:	7803      	ldrb	r3, [r0, #0]
    fe38:	f003 030f 	and.w	r3, r3, #15
    fe3c:	2b07      	cmp	r3, #7
    fe3e:	d000      	beq.n	fe42 <le_adv_ext_report+0xe>
    fe40:	4770      	bx	lr
    fe42:	2a00      	cmp	r2, #0
    fe44:	d0fc      	beq.n	fe40 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    fe46:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    fe48:	7883      	ldrb	r3, [r0, #2]
    fe4a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    fe4e:	d0f7      	beq.n	fe40 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    fe50:	78c3      	ldrb	r3, [r0, #3]
    fe52:	f013 0f01 	tst.w	r3, #1
    fe56:	d0f3      	beq.n	fe40 <le_adv_ext_report+0xc>
{
    fe58:	b570      	push	{r4, r5, r6, lr}
    fe5a:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    fe5c:	7803      	ldrb	r3, [r0, #0]
    fe5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fe62:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    fe66:	2206      	movs	r2, #6
    fe68:	f10d 0019 	add.w	r0, sp, #25
    fe6c:	f7f0 fa28 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fe70:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fe74:	2b03      	cmp	r3, #3
    fe76:	d830      	bhi.n	feda <le_adv_ext_report+0xa6>
    fe78:	e8df f003 	tbb	[pc, r3]
    fe7c:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fe80:	4919      	ldr	r1, [pc, #100]	; (fee8 <le_adv_ext_report+0xb4>)
    fe82:	a808      	add	r0, sp, #32
    fe84:	f01c fa66 	bl	2c354 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fe88:	f89d 301e 	ldrb.w	r3, [sp, #30]
    fe8c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    fe90:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fe94:	f89d 001b 	ldrb.w	r0, [sp, #27]
    fe98:	f89d 401a 	ldrb.w	r4, [sp, #26]
    fe9c:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fea0:	ae08      	add	r6, sp, #32
    fea2:	9605      	str	r6, [sp, #20]
    fea4:	9504      	str	r5, [sp, #16]
    fea6:	9403      	str	r4, [sp, #12]
    fea8:	9002      	str	r0, [sp, #8]
    feaa:	9101      	str	r1, [sp, #4]
    feac:	9200      	str	r2, [sp, #0]
    feae:	4a0f      	ldr	r2, [pc, #60]	; (feec <le_adv_ext_report+0xb8>)
    feb0:	211b      	movs	r1, #27
    feb2:	a80b      	add	r0, sp, #44	; 0x2c
    feb4:	f7f3 f97a 	bl	31ac <snprintk>
}
    feb8:	b012      	add	sp, #72	; 0x48
    feba:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    febc:	490c      	ldr	r1, [pc, #48]	; (fef0 <le_adv_ext_report+0xbc>)
    febe:	a808      	add	r0, sp, #32
    fec0:	f01c fa48 	bl	2c354 <strcpy>
    fec4:	e7e0      	b.n	fe88 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    fec6:	490b      	ldr	r1, [pc, #44]	; (fef4 <le_adv_ext_report+0xc0>)
    fec8:	a808      	add	r0, sp, #32
    feca:	f01c fa43 	bl	2c354 <strcpy>
    fece:	e7db      	b.n	fe88 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    fed0:	4909      	ldr	r1, [pc, #36]	; (fef8 <le_adv_ext_report+0xc4>)
    fed2:	a808      	add	r0, sp, #32
    fed4:	f01c fa3e 	bl	2c354 <strcpy>
    fed8:	e7d6      	b.n	fe88 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    feda:	4a08      	ldr	r2, [pc, #32]	; (fefc <le_adv_ext_report+0xc8>)
    fedc:	210a      	movs	r1, #10
    fede:	a808      	add	r0, sp, #32
    fee0:	f7f3 f964 	bl	31ac <snprintk>
    fee4:	e7d0      	b.n	fe88 <le_adv_ext_report+0x54>
    fee6:	bf00      	nop
    fee8:	000331cc 	.word	0x000331cc
    feec:	000331fc 	.word	0x000331fc
    fef0:	000331d4 	.word	0x000331d4
    fef4:	000331dc 	.word	0x000331dc
    fef8:	000331e8 	.word	0x000331e8
    fefc:	000331f4 	.word	0x000331f4

0000ff00 <le_adv_ext_1M_report>:
{
    ff00:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    ff02:	2301      	movs	r3, #1
    ff04:	f7ff ff96 	bl	fe34 <le_adv_ext_report>
    ff08:	bd08      	pop	{r3, pc}

0000ff0a <le_adv_ext_coded_report>:
{
    ff0a:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    ff0c:	2304      	movs	r3, #4
    ff0e:	f7ff ff91 	bl	fe34 <le_adv_ext_report>
    ff12:	bd08      	pop	{r3, pc}

0000ff14 <le_scan_req_received>:
{
    ff14:	b570      	push	{r4, r5, r6, lr}
    ff16:	b092      	sub	sp, #72	; 0x48
    ff18:	4604      	mov	r4, r0
    ff1a:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ff1c:	4b33      	ldr	r3, [pc, #204]	; (ffec <le_scan_req_received+0xd8>)
    ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff22:	2200      	movs	r2, #0
    ff24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ff28:	4313      	orrs	r3, r2
    ff2a:	d007      	beq.n	ff3c <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    ff2c:	4b30      	ldr	r3, [pc, #192]	; (fff0 <le_scan_req_received+0xdc>)
    ff2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff32:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    ff36:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ff38:	4313      	orrs	r3, r2
    ff3a:	d146      	bne.n	ffca <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    ff3c:	4621      	mov	r1, r4
    ff3e:	f811 3b02 	ldrb.w	r3, [r1], #2
    ff42:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ff46:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ff4a:	2206      	movs	r2, #6
    ff4c:	f10d 0019 	add.w	r0, sp, #25
    ff50:	f7f0 f9b6 	bl	2c0 <memcpy>
	switch (addr->type) {
    ff54:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ff58:	2b03      	cmp	r3, #3
    ff5a:	d830      	bhi.n	ffbe <le_scan_req_received+0xaa>
    ff5c:	e8df f003 	tbb	[pc, r3]
    ff60:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    ff64:	4923      	ldr	r1, [pc, #140]	; (fff4 <le_scan_req_received+0xe0>)
    ff66:	a808      	add	r0, sp, #32
    ff68:	f01c f9f4 	bl	2c354 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ff6c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    ff70:	f89d 201d 	ldrb.w	r2, [sp, #29]
    ff74:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ff78:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ff7c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    ff80:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ff84:	ae08      	add	r6, sp, #32
    ff86:	9605      	str	r6, [sp, #20]
    ff88:	9504      	str	r5, [sp, #16]
    ff8a:	9403      	str	r4, [sp, #12]
    ff8c:	9002      	str	r0, [sp, #8]
    ff8e:	9101      	str	r1, [sp, #4]
    ff90:	9200      	str	r2, [sp, #0]
    ff92:	4a19      	ldr	r2, [pc, #100]	; (fff8 <le_scan_req_received+0xe4>)
    ff94:	211b      	movs	r1, #27
    ff96:	a80b      	add	r0, sp, #44	; 0x2c
    ff98:	f7f3 f908 	bl	31ac <snprintk>
}
    ff9c:	b012      	add	sp, #72	; 0x48
    ff9e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ffa0:	4916      	ldr	r1, [pc, #88]	; (fffc <le_scan_req_received+0xe8>)
    ffa2:	a808      	add	r0, sp, #32
    ffa4:	f01c f9d6 	bl	2c354 <strcpy>
    ffa8:	e7e0      	b.n	ff6c <le_scan_req_received+0x58>
		strcpy(type, "public id");
    ffaa:	4915      	ldr	r1, [pc, #84]	; (10000 <__kernel_ram_size>)
    ffac:	a808      	add	r0, sp, #32
    ffae:	f01c f9d1 	bl	2c354 <strcpy>
    ffb2:	e7db      	b.n	ff6c <le_scan_req_received+0x58>
		strcpy(type, "random id");
    ffb4:	4913      	ldr	r1, [pc, #76]	; (10004 <__kernel_ram_size+0x4>)
    ffb6:	a808      	add	r0, sp, #32
    ffb8:	f01c f9cc 	bl	2c354 <strcpy>
    ffbc:	e7d6      	b.n	ff6c <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ffbe:	4a12      	ldr	r2, [pc, #72]	; (10008 <__kernel_ram_size+0x8>)
    ffc0:	210a      	movs	r1, #10
    ffc2:	a808      	add	r0, sp, #32
    ffc4:	f7f3 f8f2 	bl	31ac <snprintk>
    ffc8:	e7d0      	b.n	ff6c <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    ffca:	2208      	movs	r2, #8
    ffcc:	2113      	movs	r1, #19
    ffce:	f7fe fd41 	bl	ea54 <meta_evt>
	sep->handle = 0;
    ffd2:	2300      	movs	r3, #0
    ffd4:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    ffd6:	4621      	mov	r1, r4
    ffd8:	f811 3b02 	ldrb.w	r3, [r1], #2
    ffdc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ffe0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ffe2:	2206      	movs	r2, #6
    ffe4:	3002      	adds	r0, #2
    ffe6:	f7f0 f96b 	bl	2c0 <memcpy>
    ffea:	e7d7      	b.n	ff9c <le_scan_req_received+0x88>
    ffec:	2000bc00 	.word	0x2000bc00
    fff0:	2000bc08 	.word	0x2000bc08
    fff4:	000331cc 	.word	0x000331cc
    fff8:	000331fc 	.word	0x000331fc
    fffc:	000331d4 	.word	0x000331d4
   10000:	000331dc 	.word	0x000331dc
   10004:	000331e8 	.word	0x000331e8
   10008:	000331f4 	.word	0x000331f4

0001000c <encode_control>:
{
   1000c:	b510      	push	{r4, lr}
   1000e:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
   10010:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
   10012:	7903      	ldrb	r3, [r0, #4]
   10014:	3b02      	subs	r3, #2
   10016:	2b0a      	cmp	r3, #10
   10018:	d837      	bhi.n	1008a <encode_control+0x7e>
   1001a:	e8df f003 	tbb	[pc, r3]
   1001e:	0b06      	.short	0x0b06
   10020:	1e1a1510 	.word	0x1e1a1510
   10024:	2e2a2622 	.word	0x2e2a2622
   10028:	32          	.byte	0x32
   10029:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
   1002a:	4601      	mov	r1, r0
   1002c:	4620      	mov	r0, r4
   1002e:	f7ff fdcd 	bl	fbcc <le_advertising_report>
		break;
   10032:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
   10034:	4601      	mov	r1, r0
   10036:	4620      	mov	r0, r4
   10038:	f7ff ff62 	bl	ff00 <le_adv_ext_1M_report>
		break;
   1003c:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
   1003e:	4601      	mov	r1, r0
   10040:	4620      	mov	r0, r4
   10042:	f7ff ff62 	bl	ff0a <le_adv_ext_coded_report>
		break;
   10046:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
   10048:	4601      	mov	r1, r0
   1004a:	4620      	mov	r0, r4
   1004c:	f7ff ff62 	bl	ff14 <le_scan_req_received>
		break;
   10050:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
   10052:	4620      	mov	r0, r4
   10054:	f7f7 f99e 	bl	7394 <le_conn_complete>
		break;
   10058:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
   1005a:	4620      	mov	r0, r4
   1005c:	f7fe fd32 	bl	eac4 <disconn_complete>
		break;
   10060:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
   10062:	4620      	mov	r0, r4
   10064:	f7f6 f832 	bl	60cc <le_conn_update_complete>
		break;
   10068:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
   1006a:	4620      	mov	r0, r4
   1006c:	f7fe fd52 	bl	eb14 <enc_refresh_complete>
		break;
   10070:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
   10072:	4620      	mov	r0, r4
   10074:	f7fe fd6c 	bl	eb50 <auth_payload_timeout_exp>
		break;
   10078:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
   1007a:	4620      	mov	r0, r4
   1007c:	f7fe fcfe 	bl	ea7c <le_chan_sel_algo>
		break;
   10080:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
   10082:	4620      	mov	r0, r4
   10084:	f7ff faa6 	bl	f5d4 <le_phy_upd_complete>
		return;
   10088:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
   1008a:	4040      	eors	r0, r0
   1008c:	f380 8811 	msr	BASEPRI, r0
   10090:	f04f 0004 	mov.w	r0, #4
   10094:	df02      	svc	2
	...

00010098 <hci_cmd_handle>:
{
   10098:	b510      	push	{r4, lr}
   1009a:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
   1009c:	2300      	movs	r3, #0
   1009e:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
   100a0:	8983      	ldrh	r3, [r0, #12]
   100a2:	2b02      	cmp	r3, #2
   100a4:	d94a      	bls.n	1013c <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
   100a6:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
   100a8:	8814      	ldrh	r4, [r2, #0]
   100aa:	4926      	ldr	r1, [pc, #152]	; (10144 <hci_cmd_handle+0xac>)
   100ac:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
   100ae:	7892      	ldrb	r2, [r2, #2]
   100b0:	4293      	cmp	r3, r2
   100b2:	d345      	bcc.n	10140 <hci_cmd_handle+0xa8>
   100b4:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
   100b6:	2103      	movs	r1, #3
   100b8:	3008      	adds	r0, #8
   100ba:	f00c f974 	bl	1c3a6 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
   100be:	4b21      	ldr	r3, [pc, #132]	; (10144 <hci_cmd_handle+0xac>)
   100c0:	881b      	ldrh	r3, [r3, #0]
   100c2:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   100c6:	0a9b      	lsrs	r3, r3, #10
   100c8:	2b04      	cmp	r3, #4
   100ca:	d01c      	beq.n	10106 <hci_cmd_handle+0x6e>
   100cc:	d908      	bls.n	100e0 <hci_cmd_handle+0x48>
   100ce:	2b08      	cmp	r3, #8
   100d0:	d023      	beq.n	1011a <hci_cmd_handle+0x82>
   100d2:	2b3f      	cmp	r3, #63	; 0x3f
   100d4:	d026      	beq.n	10124 <hci_cmd_handle+0x8c>
   100d6:	2b05      	cmp	r3, #5
   100d8:	d01a      	beq.n	10110 <hci_cmd_handle+0x78>
		err = -EINVAL;
   100da:	f06f 0015 	mvn.w	r0, #21
   100de:	e00c      	b.n	100fa <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
   100e0:	2b01      	cmp	r3, #1
   100e2:	d006      	beq.n	100f2 <hci_cmd_handle+0x5a>
   100e4:	2b03      	cmp	r3, #3
   100e6:	d1f8      	bne.n	100da <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
   100e8:	aa01      	add	r2, sp, #4
   100ea:	4621      	mov	r1, r4
   100ec:	f7fe fe29 	bl	ed42 <ctrl_bb_cmd_handle>
		break;
   100f0:	e003      	b.n	100fa <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
   100f2:	aa01      	add	r2, sp, #4
   100f4:	4621      	mov	r1, r4
   100f6:	f7fe fd9b 	bl	ec30 <link_control_cmd_handle>
	if (err == -EINVAL) {
   100fa:	f110 0f16 	cmn.w	r0, #22
   100fe:	d016      	beq.n	1012e <hci_cmd_handle+0x96>
	return evt;
   10100:	9801      	ldr	r0, [sp, #4]
}
   10102:	b002      	add	sp, #8
   10104:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
   10106:	aa01      	add	r2, sp, #4
   10108:	4621      	mov	r1, r4
   1010a:	f7fe ffde 	bl	f0ca <info_cmd_handle>
		break;
   1010e:	e7f4      	b.n	100fa <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
   10110:	aa01      	add	r2, sp, #4
   10112:	4621      	mov	r1, r4
   10114:	f7fe fbcf 	bl	e8b6 <status_cmd_handle>
		break;
   10118:	e7ef      	b.n	100fa <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
   1011a:	aa01      	add	r2, sp, #4
   1011c:	4621      	mov	r1, r4
   1011e:	f7ff fb8c 	bl	f83a <controller_cmd_handle>
		break;
   10122:	e7ea      	b.n	100fa <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
   10124:	aa01      	add	r2, sp, #4
   10126:	4621      	mov	r1, r4
   10128:	f7ff f876 	bl	f218 <vendor_cmd_handle>
		break;
   1012c:	e7e5      	b.n	100fa <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
   1012e:	2101      	movs	r1, #1
   10130:	a801      	add	r0, sp, #4
   10132:	f7fe fbf5 	bl	e920 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
   10136:	2301      	movs	r3, #1
   10138:	7003      	strb	r3, [r0, #0]
   1013a:	e7e1      	b.n	10100 <hci_cmd_handle+0x68>
		return NULL;
   1013c:	2000      	movs	r0, #0
   1013e:	e7e0      	b.n	10102 <hci_cmd_handle+0x6a>
		return NULL;
   10140:	2000      	movs	r0, #0
   10142:	e7de      	b.n	10102 <hci_cmd_handle+0x6a>
   10144:	20000ac8 	.word	0x20000ac8

00010148 <hci_acl_handle>:
{
   10148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   1014c:	2300      	movs	r3, #0
   1014e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   10150:	8983      	ldrh	r3, [r0, #12]
   10152:	2b03      	cmp	r3, #3
   10154:	d93e      	bls.n	101d4 <hci_acl_handle+0x8c>
   10156:	4689      	mov	r9, r1
   10158:	4604      	mov	r4, r0
	acl = (void *)buf->data;
   1015a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
   1015e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
   10162:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
   10164:	2104      	movs	r1, #4
   10166:	f00c f91e 	bl	1c3a6 <net_buf_simple_pull>
	if (buf->len < len) {
   1016a:	89a3      	ldrh	r3, [r4, #12]
   1016c:	4598      	cmp	r8, r3
   1016e:	d835      	bhi.n	101dc <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
   10170:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
   10172:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
   10176:	f009 ff1f 	bl	19fb8 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
   1017a:	4605      	mov	r5, r0
   1017c:	b140      	cbz	r0, 10190 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
   1017e:	b177      	cbz	r7, 1019e <hci_acl_handle+0x56>
   10180:	2f02      	cmp	r7, #2
   10182:	d00c      	beq.n	1019e <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10184:	7903      	ldrb	r3, [r0, #4]
   10186:	2201      	movs	r2, #1
   10188:	f362 0301 	bfi	r3, r2, #0, #2
   1018c:	7103      	strb	r3, [r0, #4]
   1018e:	e00b      	b.n	101a8 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
   10190:	4648      	mov	r0, r9
   10192:	f7ff fcbf 	bl	fb14 <data_buf_overflow>
		return -ENOBUFS;
   10196:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1019a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1019e:	792b      	ldrb	r3, [r5, #4]
   101a0:	2202      	movs	r2, #2
   101a2:	f362 0301 	bfi	r3, r2, #0, #2
   101a6:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
   101a8:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
   101ac:	4642      	mov	r2, r8
   101ae:	68a1      	ldr	r1, [r4, #8]
   101b0:	1de8      	adds	r0, r5, #7
   101b2:	f7f0 f885 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
   101b6:	4629      	mov	r1, r5
   101b8:	4630      	mov	r0, r6
   101ba:	f009 ff0d 	bl	19fd8 <radio_tx_mem_enqueue>
   101be:	b910      	cbnz	r0, 101c6 <hci_acl_handle+0x7e>
	return 0;
   101c0:	2000      	movs	r0, #0
}
   101c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
   101c6:	4628      	mov	r0, r5
   101c8:	f009 fefe 	bl	19fc8 <radio_tx_mem_release>
		return -EINVAL;
   101cc:	f06f 0015 	mvn.w	r0, #21
   101d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   101d4:	f06f 0015 	mvn.w	r0, #21
   101d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   101dc:	f06f 0015 	mvn.w	r0, #21
   101e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000101e4 <hci_acl_encode>:
{
   101e4:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   101e6:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   101e8:	7a03      	ldrb	r3, [r0, #8]
   101ea:	f003 0303 	and.w	r3, r3, #3
   101ee:	3b01      	subs	r3, #1
   101f0:	2b01      	cmp	r3, #1
   101f2:	d81d      	bhi.n	10230 <hci_acl_encode+0x4c>
   101f4:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   101f6:	f101 0508 	add.w	r5, r1, #8
   101fa:	2104      	movs	r1, #4
   101fc:	4628      	mov	r0, r5
   101fe:	f00c f885 	bl	1c30c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   10202:	7a23      	ldrb	r3, [r4, #8]
   10204:	f003 0303 	and.w	r3, r3, #3
   10208:	2b02      	cmp	r3, #2
   1020a:	d00e      	beq.n	1022a <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1020c:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   10210:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   10212:	7a63      	ldrb	r3, [r4, #9]
   10214:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   10216:	7a61      	ldrb	r1, [r4, #9]
   10218:	4628      	mov	r0, r5
   1021a:	f00c f877 	bl	1c30c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
   1021e:	7a62      	ldrb	r2, [r4, #9]
   10220:	f104 010b 	add.w	r1, r4, #11
   10224:	f7f0 f84c 	bl	2c0 <memcpy>
}
   10228:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1022a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
   1022e:	e7ef      	b.n	10210 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
   10230:	4040      	eors	r0, r0
   10232:	f380 8811 	msr	BASEPRI, r0
   10236:	f04f 0004 	mov.w	r0, #4
   1023a:	df02      	svc	2

0001023c <hci_evt_encode>:
{
   1023c:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
   1023e:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10242:	7903      	ldrb	r3, [r0, #4]
   10244:	2b01      	cmp	r3, #1
   10246:	d004      	beq.n	10252 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
   10248:	460a      	mov	r2, r1
   1024a:	4621      	mov	r1, r4
   1024c:	f7ff fede 	bl	1000c <encode_control>
   10250:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
   10252:	460a      	mov	r2, r1
   10254:	4621      	mov	r1, r4
   10256:	f7ff fc7d 	bl	fb54 <encode_data_ctrl>
   1025a:	bd10      	pop	{r4, pc}

0001025c <hci_num_cmplt_encode>:
{
   1025c:	b570      	push	{r4, r5, r6, lr}
   1025e:	4606      	mov	r6, r0
   10260:	460d      	mov	r5, r1
   10262:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
   10264:	2205      	movs	r2, #5
   10266:	2113      	movs	r1, #19
   10268:	f7fe fb28 	bl	e8bc <evt_create>
	ep = net_buf_add(buf, len);
   1026c:	2105      	movs	r1, #5
   1026e:	f106 0008 	add.w	r0, r6, #8
   10272:	f00c f84b 	bl	1c30c <net_buf_simple_add>
	ep->num_handles = num_handles;
   10276:	2301      	movs	r3, #1
   10278:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   1027a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1027e:	f8a0 4003 	strh.w	r4, [r0, #3]
   10282:	bd70      	pop	{r4, r5, r6, pc}

00010284 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   10284:	7903      	ldrb	r3, [r0, #4]
   10286:	2b01      	cmp	r3, #1
   10288:	d011      	beq.n	102ae <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
   1028a:	3b02      	subs	r3, #2
   1028c:	2b0a      	cmp	r3, #10
   1028e:	d80b      	bhi.n	102a8 <hci_get_class+0x24>
   10290:	e8df f003 	tbb	[pc, r3]
   10294:	06060606 	.word	0x06060606
   10298:	08080816 	.word	0x08080816
   1029c:	0808      	.short	0x0808
   1029e:	08          	.byte	0x08
   1029f:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
   102a0:	2001      	movs	r0, #1
   102a2:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   102a4:	2002      	movs	r0, #2
   102a6:	4770      	bx	lr
			return -1;
   102a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102ac:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   102ae:	7a03      	ldrb	r3, [r0, #8]
   102b0:	f003 0303 	and.w	r3, r3, #3
   102b4:	2b03      	cmp	r3, #3
   102b6:	d001      	beq.n	102bc <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
   102b8:	2003      	movs	r0, #3
}
   102ba:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
   102bc:	2002      	movs	r0, #2
   102be:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   102c0:	2000      	movs	r0, #0
   102c2:	4770      	bx	lr

000102c4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
   102c4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   102c6:	4802      	ldr	r0, [pc, #8]	; (102d0 <_hci_driver_init+0xc>)
   102c8:	f7f7 fcec 	bl	7ca4 <bt_hci_driver_register>

	return 0;
}
   102cc:	2000      	movs	r0, #0
   102ce:	bd08      	pop	{r3, pc}
   102d0:	00033248 	.word	0x00033248

000102d4 <acl_handle>:
{
   102d4:	b510      	push	{r4, lr}
   102d6:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
   102d8:	a901      	add	r1, sp, #4
   102da:	f7ff ff35 	bl	10148 <hci_acl_handle>
   102de:	4604      	mov	r4, r0
	if (evt) {
   102e0:	9801      	ldr	r0, [sp, #4]
   102e2:	b108      	cbz	r0, 102e8 <acl_handle+0x14>
		bt_recv_prio(evt);
   102e4:	f7f7 fc8c 	bl	7c00 <bt_recv_prio>
}
   102e8:	4620      	mov	r0, r4
   102ea:	b002      	add	sp, #8
   102ec:	bd10      	pop	{r4, pc}

000102ee <cmd_handle>:
{
   102ee:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
   102f0:	f7ff fed2 	bl	10098 <hci_cmd_handle>
	if (evt) {
   102f4:	b108      	cbz	r0, 102fa <cmd_handle+0xc>
		bt_recv_prio(evt);
   102f6:	f7f7 fc83 	bl	7c00 <bt_recv_prio>
}
   102fa:	2000      	movs	r0, #0
   102fc:	bd08      	pop	{r3, pc}

000102fe <hci_driver_send>:
{
   102fe:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   10300:	8983      	ldrh	r3, [r0, #12]
   10302:	b1cb      	cbz	r3, 10338 <hci_driver_send+0x3a>
   10304:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
   10306:	f100 0310 	add.w	r3, r0, #16
   1030a:	89c2      	ldrh	r2, [r0, #14]
   1030c:	4413      	add	r3, r2
   1030e:	3303      	adds	r3, #3
   10310:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
   10314:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
   10316:	b13b      	cbz	r3, 10328 <hci_driver_send+0x2a>
   10318:	2b02      	cmp	r3, #2
   1031a:	d110      	bne.n	1033e <hci_driver_send+0x40>
		err = acl_handle(buf);
   1031c:	f7ff ffda 	bl	102d4 <acl_handle>
   10320:	4605      	mov	r5, r0
	if (!err) {
   10322:	b12d      	cbz	r5, 10330 <hci_driver_send+0x32>
}
   10324:	4628      	mov	r0, r5
   10326:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
   10328:	f7ff ffe1 	bl	102ee <cmd_handle>
   1032c:	4605      	mov	r5, r0
		break;
   1032e:	e7f8      	b.n	10322 <hci_driver_send+0x24>
		net_buf_unref(buf);
   10330:	4620      	mov	r0, r4
   10332:	f00b ff9f 	bl	1c274 <net_buf_unref>
   10336:	e7f5      	b.n	10324 <hci_driver_send+0x26>
		return -EINVAL;
   10338:	f06f 0515 	mvn.w	r5, #21
   1033c:	e7f2      	b.n	10324 <hci_driver_send+0x26>
		return -EINVAL;
   1033e:	f06f 0515 	mvn.w	r5, #21
   10342:	e7ef      	b.n	10324 <hci_driver_send+0x26>

00010344 <prio_recv_thread>:
{
   10344:	b530      	push	{r4, r5, lr}
   10346:	b087      	sub	sp, #28
   10348:	e00f      	b.n	1036a <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1034a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1034e:	2001      	movs	r0, #1
   10350:	f7f7 fe0c 	bl	7f6c <bt_buf_get_rx>
   10354:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10356:	4622      	mov	r2, r4
   10358:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1035c:	f7ff ff7e 	bl	1025c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   10360:	4628      	mov	r0, r5
   10362:	f7f7 fc4d 	bl	7c00 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   10366:	f01a fa7d 	bl	2a864 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
   1036a:	f10d 0112 	add.w	r1, sp, #18
   1036e:	a805      	add	r0, sp, #20
   10370:	f009 fd22 	bl	19db8 <radio_rx_get>
   10374:	4604      	mov	r4, r0
   10376:	2800      	cmp	r0, #0
   10378:	d1e7      	bne.n	1034a <prio_recv_thread+0x6>
		if (node_rx) {
   1037a:	9b05      	ldr	r3, [sp, #20]
   1037c:	b133      	cbz	r3, 1038c <prio_recv_thread+0x48>
			radio_rx_dequeue();
   1037e:	f00a fa5b 	bl	1a838 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
   10382:	9905      	ldr	r1, [sp, #20]
   10384:	481a      	ldr	r0, [pc, #104]	; (103f0 <prio_recv_thread+0xac>)
   10386:	f01a f82f 	bl	2a3e8 <k_queue_append>
   1038a:	e7ee      	b.n	1036a <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1038c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10390:	4818      	ldr	r0, [pc, #96]	; (103f4 <prio_recv_thread+0xb0>)
   10392:	f01a fbd3 	bl	2ab3c <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   10396:	f01a fc1d 	bl	2abd4 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
   1039a:	4b17      	ldr	r3, [pc, #92]	; (103f8 <prio_recv_thread+0xb4>)
   1039c:	681b      	ldr	r3, [r3, #0]
   1039e:	1ac3      	subs	r3, r0, r3
   103a0:	f241 3288 	movw	r2, #5000	; 0x1388
   103a4:	4293      	cmp	r3, r2
   103a6:	d9e0      	bls.n	1036a <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
   103a8:	2200      	movs	r2, #0
	size_t unused = 0;
   103aa:	4613      	mov	r3, r2
   103ac:	e001      	b.n	103b2 <prio_recv_thread+0x6e>
			unused++;
   103ae:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   103b0:	3201      	adds	r2, #1
   103b2:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
   103b6:	d203      	bcs.n	103c0 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
   103b8:	4910      	ldr	r1, [pc, #64]	; (103fc <prio_recv_thread+0xb8>)
   103ba:	5c89      	ldrb	r1, [r1, r2]
   103bc:	29aa      	cmp	r1, #170	; 0xaa
   103be:	d0f6      	beq.n	103ae <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
   103c0:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
   103c4:	2264      	movs	r2, #100	; 0x64
   103c6:	fb02 f201 	mul.w	r2, r2, r1
   103ca:	0992      	lsrs	r2, r2, #6
   103cc:	480c      	ldr	r0, [pc, #48]	; (10400 <prio_recv_thread+0xbc>)
   103ce:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   103d2:	9202      	str	r2, [sp, #8]
   103d4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   103d8:	9201      	str	r2, [sp, #4]
   103da:	9100      	str	r1, [sp, #0]
   103dc:	4909      	ldr	r1, [pc, #36]	; (10404 <prio_recv_thread+0xc0>)
   103de:	480a      	ldr	r0, [pc, #40]	; (10408 <prio_recv_thread+0xc4>)
   103e0:	f7f2 fed6 	bl	3190 <printk>
   103e4:	f01a fbf6 	bl	2abd4 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
   103e8:	4b03      	ldr	r3, [pc, #12]	; (103f8 <prio_recv_thread+0xb4>)
   103ea:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
   103ec:	e7bd      	b.n	1036a <prio_recv_thread+0x26>
   103ee:	bf00      	nop
   103f0:	2000d180 	.word	0x2000d180
   103f4:	2000d110 	.word	0x2000d110
   103f8:	20000b60 	.word	0x20000b60
   103fc:	20004228 	.word	0x20004228
   10400:	2492492d 	.word	0x2492492d
   10404:	00033258 	.word	0x00033258
   10408:	00032fc0 	.word	0x00032fc0

0001040c <hci_driver_open>:
{
   1040c:	b530      	push	{r4, r5, lr}
   1040e:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
   10410:	4814      	ldr	r0, [pc, #80]	; (10464 <hci_driver_open+0x58>)
   10412:	f00a fb39 	bl	1aa88 <ll_init>
	if (err) {
   10416:	4605      	mov	r5, r0
   10418:	b110      	cbz	r0, 10420 <hci_driver_open+0x14>
}
   1041a:	4628      	mov	r0, r5
   1041c:	b007      	add	sp, #28
   1041e:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
   10420:	f7f6 fc66 	bl	6cf0 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   10424:	2400      	movs	r4, #0
   10426:	9405      	str	r4, [sp, #20]
   10428:	9404      	str	r4, [sp, #16]
   1042a:	f06f 0309 	mvn.w	r3, #9
   1042e:	9303      	str	r3, [sp, #12]
   10430:	9402      	str	r4, [sp, #8]
   10432:	9401      	str	r4, [sp, #4]
   10434:	9400      	str	r4, [sp, #0]
   10436:	4b0c      	ldr	r3, [pc, #48]	; (10468 <hci_driver_open+0x5c>)
   10438:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1043c:	490b      	ldr	r1, [pc, #44]	; (1046c <hci_driver_open+0x60>)
   1043e:	480c      	ldr	r0, [pc, #48]	; (10470 <hci_driver_open+0x64>)
   10440:	f01a fde8 	bl	2b014 <_impl_k_thread_create>
   10444:	9405      	str	r4, [sp, #20]
   10446:	9404      	str	r4, [sp, #16]
   10448:	f06f 0307 	mvn.w	r3, #7
   1044c:	9303      	str	r3, [sp, #12]
   1044e:	9402      	str	r4, [sp, #8]
   10450:	9401      	str	r4, [sp, #4]
   10452:	9400      	str	r4, [sp, #0]
   10454:	4b07      	ldr	r3, [pc, #28]	; (10474 <hci_driver_open+0x68>)
   10456:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1045a:	4907      	ldr	r1, [pc, #28]	; (10478 <hci_driver_open+0x6c>)
   1045c:	4807      	ldr	r0, [pc, #28]	; (1047c <hci_driver_open+0x70>)
   1045e:	f01a fdd9 	bl	2b014 <_impl_k_thread_create>
	return 0;
   10462:	e7da      	b.n	1041a <hci_driver_open+0xe>
   10464:	2000d110 	.word	0x2000d110
   10468:	00010345 	.word	0x00010345
   1046c:	20004228 	.word	0x20004228
   10470:	20002b84 	.word	0x20002b84
   10474:	00010481 	.word	0x00010481
   10478:	200043e8 	.word	0x200043e8
   1047c:	20002a50 	.word	0x20002a50

00010480 <recv_thread>:
{
   10480:	b510      	push	{r4, lr}
   10482:	b086      	sub	sp, #24
   10484:	e029      	b.n	104da <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10486:	2801      	cmp	r0, #1
   10488:	d042      	beq.n	10510 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1048a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1048e:	2001      	movs	r0, #1
   10490:	f7f7 fd6c 	bl	7f6c <bt_buf_get_rx>
   10494:	4604      	mov	r4, r0
		if (buf) {
   10496:	b11c      	cbz	r4, 104a0 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
   10498:	4621      	mov	r1, r4
   1049a:	9805      	ldr	r0, [sp, #20]
   1049c:	f7ff fece 	bl	1023c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
   104a0:	2100      	movs	r1, #0
   104a2:	9b05      	ldr	r3, [sp, #20]
   104a4:	88d8      	ldrh	r0, [r3, #6]
   104a6:	f009 fd4b 	bl	19f40 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
   104aa:	a806      	add	r0, sp, #24
   104ac:	f850 3d04 	ldr.w	r3, [r0, #-4]!
   104b0:	2200      	movs	r2, #0
   104b2:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
   104b4:	f009 fcc0 	bl	19e38 <radio_rx_mem_release>
		if (buf) {
   104b8:	b124      	cbz	r4, 104c4 <recv_thread+0x44>
			if (buf->len) {
   104ba:	89a3      	ldrh	r3, [r4, #12]
   104bc:	b3ab      	cbz	r3, 1052a <recv_thread+0xaa>
				bt_recv(buf);
   104be:	4620      	mov	r0, r4
   104c0:	f7f7 fb74 	bl	7bac <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   104c4:	f01a f9ce 	bl	2a864 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   104c8:	f01a fb84 	bl	2abd4 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
   104cc:	4b29      	ldr	r3, [pc, #164]	; (10574 <recv_thread+0xf4>)
   104ce:	681b      	ldr	r3, [r3, #0]
   104d0:	1ac0      	subs	r0, r0, r3
   104d2:	f241 3388 	movw	r3, #5000	; 0x1388
   104d6:	4298      	cmp	r0, r3
   104d8:	d82b      	bhi.n	10532 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
   104da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   104de:	4826      	ldr	r0, [pc, #152]	; (10578 <recv_thread+0xf8>)
   104e0:	f019 ffaa 	bl	2a438 <k_queue_get>
		if (node_rx && !buf) {
   104e4:	b1f8      	cbz	r0, 10526 <recv_thread+0xa6>
   104e6:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
   104e8:	f7ff fecc 	bl	10284 <hci_get_class>
   104ec:	9405      	str	r4, [sp, #20]
	switch (class) {
   104ee:	2800      	cmp	r0, #0
   104f0:	db13      	blt.n	1051a <recv_thread+0x9a>
   104f2:	2802      	cmp	r0, #2
   104f4:	ddc7      	ble.n	10486 <recv_thread+0x6>
   104f6:	2803      	cmp	r0, #3
   104f8:	d10f      	bne.n	1051a <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   104fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   104fe:	2003      	movs	r0, #3
   10500:	f7f7 fd34 	bl	7f6c <bt_buf_get_rx>
   10504:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   10506:	4601      	mov	r1, r0
   10508:	9805      	ldr	r0, [sp, #20]
   1050a:	f7ff fe6b 	bl	101e4 <hci_acl_encode>
   1050e:	e7c7      	b.n	104a0 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
   10510:	2100      	movs	r1, #0
   10512:	f7f7 fd2b 	bl	7f6c <bt_buf_get_rx>
   10516:	4604      	mov	r4, r0
   10518:	e7bd      	b.n	10496 <recv_thread+0x16>
		LL_ASSERT(0);
   1051a:	4040      	eors	r0, r0
   1051c:	f380 8811 	msr	BASEPRI, r0
   10520:	f04f 0004 	mov.w	r0, #4
   10524:	df02      	svc	2
		struct net_buf *buf = NULL;
   10526:	2400      	movs	r4, #0
   10528:	e7c6      	b.n	104b8 <recv_thread+0x38>
				net_buf_unref(buf);
   1052a:	4620      	mov	r0, r4
   1052c:	f00b fea2 	bl	1c274 <net_buf_unref>
   10530:	e7c8      	b.n	104c4 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
   10532:	2200      	movs	r2, #0
	size_t unused = 0;
   10534:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   10536:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1053a:	d206      	bcs.n	1054a <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   1053c:	490f      	ldr	r1, [pc, #60]	; (1057c <recv_thread+0xfc>)
   1053e:	5c89      	ldrb	r1, [r1, r2]
   10540:	29aa      	cmp	r1, #170	; 0xaa
   10542:	d102      	bne.n	1054a <recv_thread+0xca>
			unused++;
   10544:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   10546:	3201      	adds	r2, #1
   10548:	e7f5      	b.n	10536 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
   1054a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   1054e:	2264      	movs	r2, #100	; 0x64
   10550:	fb02 f201 	mul.w	r2, r2, r1
   10554:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   10556:	9202      	str	r2, [sp, #8]
   10558:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1055c:	9201      	str	r2, [sp, #4]
   1055e:	9100      	str	r1, [sp, #0]
   10560:	4907      	ldr	r1, [pc, #28]	; (10580 <recv_thread+0x100>)
   10562:	4808      	ldr	r0, [pc, #32]	; (10584 <recv_thread+0x104>)
   10564:	f7f2 fe14 	bl	3190 <printk>
   10568:	f01a fb34 	bl	2abd4 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
   1056c:	4b01      	ldr	r3, [pc, #4]	; (10574 <recv_thread+0xf4>)
   1056e:	6018      	str	r0, [r3, #0]
   10570:	e7b3      	b.n	104da <recv_thread+0x5a>
   10572:	bf00      	nop
   10574:	20000b64 	.word	0x20000b64
   10578:	2000d180 	.word	0x2000d180
   1057c:	200043e8 	.word	0x200043e8
   10580:	00033270 	.word	0x00033270
   10584:	00032fc0 	.word	0x00032fc0

00010588 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
   10588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
   1058a:	2304      	movs	r3, #4
	while (callee_id--) {
   1058c:	e01d      	b.n	105ca <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
   1058e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
   10592:	4911      	ldr	r1, [pc, #68]	; (105d8 <mayfly_init+0x50>)
   10594:	0065      	lsls	r5, r4, #1
   10596:	192b      	adds	r3, r5, r4
   10598:	009a      	lsls	r2, r3, #2
   1059a:	0073      	lsls	r3, r6, #1
   1059c:	eb03 0e06 	add.w	lr, r3, r6
   105a0:	ea4f 170e 	mov.w	r7, lr, lsl #4
   105a4:	46be      	mov	lr, r7
   105a6:	443a      	add	r2, r7
   105a8:	440a      	add	r2, r1
   105aa:	4425      	add	r5, r4
   105ac:	00af      	lsls	r7, r5, #2
   105ae:	4477      	add	r7, lr
   105b0:	3204      	adds	r2, #4
   105b2:	4439      	add	r1, r7
   105b4:	4b09      	ldr	r3, [pc, #36]	; (105dc <mayfly_init+0x54>)
   105b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   105ba:	f000 f9f5 	bl	109a8 <memq_init>
		while (caller_id--) {
   105be:	4623      	mov	r3, r4
   105c0:	1e5c      	subs	r4, r3, #1
   105c2:	b2e4      	uxtb	r4, r4
   105c4:	2b00      	cmp	r3, #0
   105c6:	d1e2      	bne.n	1058e <mayfly_init+0x6>
	while (callee_id--) {
   105c8:	4633      	mov	r3, r6
   105ca:	1e5e      	subs	r6, r3, #1
   105cc:	b2f6      	uxtb	r6, r6
   105ce:	b10b      	cbz	r3, 105d4 <mayfly_init+0x4c>
   105d0:	2304      	movs	r3, #4
   105d2:	e7f5      	b.n	105c0 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   105d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   105d6:	bf00      	nop
   105d8:	20000be8 	.word	0x20000be8
   105dc:	20000b68 	.word	0x20000b68

000105e0 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   105e0:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
   105e2:	b1ea      	cbz	r2, 10620 <mayfly_enable+0x40>
   105e4:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
   105e6:	0042      	lsls	r2, r0, #1
   105e8:	4402      	add	r2, r0
   105ea:	0093      	lsls	r3, r2, #2
   105ec:	004c      	lsls	r4, r1, #1
   105ee:	440c      	add	r4, r1
   105f0:	0122      	lsls	r2, r4, #4
   105f2:	441a      	add	r2, r3
   105f4:	4b18      	ldr	r3, [pc, #96]	; (10658 <mayfly_enable+0x78>)
   105f6:	4413      	add	r3, r2
   105f8:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
   105fa:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
   105fc:	429a      	cmp	r2, r3
   105fe:	d003      	beq.n	10608 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   10600:	462a      	mov	r2, r5
   10602:	f00a f9e8 	bl	1a9d6 <mayfly_enable_cb>
   10606:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
   10608:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   1060c:	00a3      	lsls	r3, r4, #2
   1060e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
   10612:	0134      	lsls	r4, r6, #4
   10614:	4423      	add	r3, r4
   10616:	4c10      	ldr	r4, [pc, #64]	; (10658 <mayfly_enable+0x78>)
   10618:	4423      	add	r3, r4
   1061a:	3201      	adds	r2, #1
   1061c:	721a      	strb	r2, [r3, #8]
   1061e:	e7ef      	b.n	10600 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
   10620:	0042      	lsls	r2, r0, #1
   10622:	4402      	add	r2, r0
   10624:	0093      	lsls	r3, r2, #2
   10626:	004c      	lsls	r4, r1, #1
   10628:	440c      	add	r4, r1
   1062a:	0122      	lsls	r2, r4, #4
   1062c:	441a      	add	r2, r3
   1062e:	4b0a      	ldr	r3, [pc, #40]	; (10658 <mayfly_enable+0x78>)
   10630:	4413      	add	r3, r2
   10632:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
   10634:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
   10636:	429a      	cmp	r2, r3
   10638:	d000      	beq.n	1063c <mayfly_enable+0x5c>
   1063a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
   1063c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   10640:	00a3      	lsls	r3, r4, #2
   10642:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   10646:	012c      	lsls	r4, r5, #4
   10648:	4423      	add	r3, r4
   1064a:	4c03      	ldr	r4, [pc, #12]	; (10658 <mayfly_enable+0x78>)
   1064c:	4423      	add	r3, r4
   1064e:	3201      	adds	r2, #1
   10650:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
   10652:	f00a f9f7 	bl	1aa44 <mayfly_pend>
		}
	}
}
   10656:	e7f0      	b.n	1063a <mayfly_enable+0x5a>
   10658:	20000be8 	.word	0x20000be8

0001065c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
   1065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1065e:	4605      	mov	r5, r0
   10660:	460e      	mov	r6, r1
   10662:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10664:	b19a      	cbz	r2, 1068e <mayfly_enqueue+0x32>
   10666:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10668:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   1066a:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1066c:	7823      	ldrb	r3, [r4, #0]
   1066e:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
   10670:	f013 0303 	ands.w	r3, r3, #3
   10674:	d032      	beq.n	106dc <mayfly_enqueue+0x80>
		if (chain) {
   10676:	b371      	cbz	r1, 106d6 <mayfly_enqueue+0x7a>
			if (state != 1) {
   10678:	2b01      	cmp	r3, #1
   1067a:	d04c      	beq.n	10716 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1067c:	3201      	adds	r2, #1
   1067e:	b2d2      	uxtb	r2, r2
   10680:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
   10682:	4631      	mov	r1, r6
   10684:	4628      	mov	r0, r5
   10686:	f00a f9dd 	bl	1aa44 <mayfly_pend>

				return 0;
   1068a:	2000      	movs	r0, #0
   1068c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1068e:	f00a f9c6 	bl	1aa1e <mayfly_prio_is_equal>
   10692:	b908      	cbnz	r0, 10698 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10694:	2101      	movs	r1, #1
   10696:	e7e7      	b.n	10668 <mayfly_enqueue+0xc>
   10698:	4631      	mov	r1, r6
   1069a:	4628      	mov	r0, r5
   1069c:	f00a f9ad 	bl	1a9fa <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   106a0:	b1b8      	cbz	r0, 106d2 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
   106a2:	481e      	ldr	r0, [pc, #120]	; (1071c <mayfly_enqueue+0xc0>)
   106a4:	0069      	lsls	r1, r5, #1
   106a6:	194a      	adds	r2, r1, r5
   106a8:	0093      	lsls	r3, r2, #2
   106aa:	0072      	lsls	r2, r6, #1
   106ac:	eb02 0e06 	add.w	lr, r2, r6
   106b0:	ea4f 170e 	mov.w	r7, lr, lsl #4
   106b4:	46be      	mov	lr, r7
   106b6:	443b      	add	r3, r7
   106b8:	4403      	add	r3, r0
   106ba:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
   106bc:	194b      	adds	r3, r1, r5
   106be:	0099      	lsls	r1, r3, #2
   106c0:	4471      	add	r1, lr
   106c2:	4408      	add	r0, r1
   106c4:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
   106c6:	429f      	cmp	r7, r3
   106c8:	d001      	beq.n	106ce <mayfly_enqueue+0x72>
   106ca:	2101      	movs	r1, #1
   106cc:	e7cc      	b.n	10668 <mayfly_enqueue+0xc>
   106ce:	2100      	movs	r1, #0
   106d0:	e7ca      	b.n	10668 <mayfly_enqueue+0xc>
   106d2:	2101      	movs	r1, #1
   106d4:	e7c8      	b.n	10668 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
   106d6:	1c93      	adds	r3, r2, #2
   106d8:	b2db      	uxtb	r3, r3
   106da:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
   106dc:	b1b1      	cbz	r1, 1070c <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   106de:	3201      	adds	r2, #1
   106e0:	b2d2      	uxtb	r2, r2
   106e2:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
   106e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   106e8:	009a      	lsls	r2, r3, #2
   106ea:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   106ee:	010b      	lsls	r3, r1, #4
   106f0:	441a      	add	r2, r3
   106f2:	4b0a      	ldr	r3, [pc, #40]	; (1071c <mayfly_enqueue+0xc0>)
   106f4:	441a      	add	r2, r3
   106f6:	3204      	adds	r2, #4
   106f8:	6861      	ldr	r1, [r4, #4]
   106fa:	4620      	mov	r0, r4
   106fc:	f000 f957 	bl	109ae <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10700:	4631      	mov	r1, r6
   10702:	4628      	mov	r0, r5
   10704:	f00a f99e 	bl	1aa44 <mayfly_pend>

	return 0;
   10708:	2000      	movs	r0, #0
   1070a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
   1070c:	68e3      	ldr	r3, [r4, #12]
   1070e:	68a0      	ldr	r0, [r4, #8]
   10710:	4798      	blx	r3
		return 0;
   10712:	2000      	movs	r0, #0
   10714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
   10716:	2001      	movs	r0, #1
}
   10718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1071a:	bf00      	nop
   1071c:	20000be8 	.word	0x20000be8

00010720 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
   10720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10724:	b085      	sub	sp, #20
   10726:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
   10728:	2304      	movs	r3, #4
	u8_t enable = 0;
   1072a:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
   1072e:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
   10732:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   10736:	fa5f f989 	uxtb.w	r9, r9
   1073a:	2b00      	cmp	r3, #0
   1073c:	f000 809b 	beq.w	10876 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
   10740:	aa04      	add	r2, sp, #16
   10742:	2300      	movs	r3, #0
   10744:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
   10748:	4657      	mov	r7, sl
   1074a:	464e      	mov	r6, r9
   1074c:	4850      	ldr	r0, [pc, #320]	; (10890 <mayfly_run+0x170>)
   1074e:	ea4f 0149 	mov.w	r1, r9, lsl #1
   10752:	4449      	add	r1, r9
   10754:	008b      	lsls	r3, r1, #2
   10756:	ea4f 014a 	mov.w	r1, sl, lsl #1
   1075a:	4451      	add	r1, sl
   1075c:	010c      	lsls	r4, r1, #4
   1075e:	4423      	add	r3, r4
   10760:	18c4      	adds	r4, r0, r3
   10762:	58c1      	ldr	r1, [r0, r3]
   10764:	6860      	ldr	r0, [r4, #4]
   10766:	f000 f929 	bl	109bc <memq_peek>
   1076a:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
   1076c:	e017      	b.n	1079e <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
   1076e:	3a01      	subs	r2, #1
   10770:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10772:	9b03      	ldr	r3, [sp, #12]
   10774:	68da      	ldr	r2, [r3, #12]
   10776:	6898      	ldr	r0, [r3, #8]
   10778:	4790      	blx	r2
   1077a:	e01b      	b.n	107b4 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
   1077c:	4944      	ldr	r1, [pc, #272]	; (10890 <mayfly_run+0x170>)
   1077e:	0072      	lsls	r2, r6, #1
   10780:	4432      	add	r2, r6
   10782:	0093      	lsls	r3, r2, #2
   10784:	007a      	lsls	r2, r7, #1
   10786:	443a      	add	r2, r7
   10788:	0110      	lsls	r0, r2, #4
   1078a:	4403      	add	r3, r0
   1078c:	18c8      	adds	r0, r1, r3
   1078e:	aa03      	add	r2, sp, #12
   10790:	58c9      	ldr	r1, [r1, r3]
   10792:	6840      	ldr	r0, [r0, #4]
   10794:	f000 f912 	bl	109bc <memq_peek>
   10798:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
   1079a:	2c01      	cmp	r4, #1
   1079c:	d026      	beq.n	107ec <mayfly_run+0xcc>
		while (link) {
   1079e:	f1b8 0f00 	cmp.w	r8, #0
   107a2:	d030      	beq.n	10806 <mayfly_run+0xe6>
			req = m->_req;
   107a4:	9b03      	ldr	r3, [sp, #12]
   107a6:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
   107a8:	785a      	ldrb	r2, [r3, #1]
   107aa:	1aa4      	subs	r4, r4, r2
   107ac:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
   107b0:	2c01      	cmp	r4, #1
   107b2:	d0dc      	beq.n	1076e <mayfly_run+0x4e>
			req = m->_req;
   107b4:	9b03      	ldr	r3, [sp, #12]
   107b6:	781d      	ldrb	r5, [r3, #0]
   107b8:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
   107ba:	785b      	ldrb	r3, [r3, #1]
   107bc:	1aeb      	subs	r3, r5, r3
   107be:	f003 0303 	and.w	r3, r3, #3
   107c2:	2b01      	cmp	r3, #1
   107c4:	d0da      	beq.n	1077c <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
   107c6:	0072      	lsls	r2, r6, #1
   107c8:	4432      	add	r2, r6
   107ca:	0093      	lsls	r3, r2, #2
   107cc:	0079      	lsls	r1, r7, #1
   107ce:	4439      	add	r1, r7
   107d0:	010a      	lsls	r2, r1, #4
   107d2:	441a      	add	r2, r3
   107d4:	4b2e      	ldr	r3, [pc, #184]	; (10890 <mayfly_run+0x170>)
   107d6:	4413      	add	r3, r2
   107d8:	2200      	movs	r2, #0
   107da:	4619      	mov	r1, r3
   107dc:	6858      	ldr	r0, [r3, #4]
   107de:	f000 f8f6 	bl	109ce <memq_dequeue>
				m->_link = link;
   107e2:	9b03      	ldr	r3, [sp, #12]
   107e4:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
   107e8:	705d      	strb	r5, [r3, #1]
   107ea:	e7c7      	b.n	1077c <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   107ec:	f1b9 0f00 	cmp.w	r9, #0
   107f0:	d006      	beq.n	10800 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
   107f2:	4651      	mov	r1, sl
   107f4:	4650      	mov	r0, sl
   107f6:	f00a f925 	bl	1aa44 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   107fa:	b005      	add	sp, #20
   107fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
   10800:	2800      	cmp	r0, #0
   10802:	d0cc      	beq.n	1079e <mayfly_run+0x7e>
   10804:	e7f5      	b.n	107f2 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
   10806:	ea4f 0249 	mov.w	r2, r9, lsl #1
   1080a:	444a      	add	r2, r9
   1080c:	0093      	lsls	r3, r2, #2
   1080e:	ea4f 014a 	mov.w	r1, sl, lsl #1
   10812:	4451      	add	r1, sl
   10814:	010a      	lsls	r2, r1, #4
   10816:	441a      	add	r2, r3
   10818:	4b1d      	ldr	r3, [pc, #116]	; (10890 <mayfly_run+0x170>)
   1081a:	4413      	add	r3, r2
   1081c:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
   1081e:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
   10820:	4299      	cmp	r1, r3
   10822:	d00b      	beq.n	1083c <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
   10824:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   10828:	0093      	lsls	r3, r2, #2
   1082a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
   1082e:	0102      	lsls	r2, r0, #4
   10830:	4413      	add	r3, r2
   10832:	4a17      	ldr	r2, [pc, #92]	; (10890 <mayfly_run+0x170>)
   10834:	4413      	add	r3, r2
   10836:	72d9      	strb	r1, [r3, #11]
			disable = 1;
   10838:	2301      	movs	r3, #1
   1083a:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
   1083c:	ea4f 0249 	mov.w	r2, r9, lsl #1
   10840:	444a      	add	r2, r9
   10842:	0093      	lsls	r3, r2, #2
   10844:	ea4f 014a 	mov.w	r1, sl, lsl #1
   10848:	4451      	add	r1, sl
   1084a:	010a      	lsls	r2, r1, #4
   1084c:	441a      	add	r2, r3
   1084e:	4b10      	ldr	r3, [pc, #64]	; (10890 <mayfly_run+0x170>)
   10850:	4413      	add	r3, r2
   10852:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
   10854:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
   10856:	4299      	cmp	r1, r3
   10858:	d00b      	beq.n	10872 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
   1085a:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   1085e:	0093      	lsls	r3, r2, #2
   10860:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
   10864:	0102      	lsls	r2, r0, #4
   10866:	4413      	add	r3, r2
   10868:	4a09      	ldr	r2, [pc, #36]	; (10890 <mayfly_run+0x170>)
   1086a:	4413      	add	r3, r2
   1086c:	7259      	strb	r1, [r3, #9]
			enable = 1;
   1086e:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
   10872:	464b      	mov	r3, r9
   10874:	e75d      	b.n	10732 <mayfly_run+0x12>
	if (disable && !enable) {
   10876:	9b01      	ldr	r3, [sp, #4]
   10878:	2b00      	cmp	r3, #0
   1087a:	d0be      	beq.n	107fa <mayfly_run+0xda>
   1087c:	f1bb 0f00 	cmp.w	fp, #0
   10880:	d1bb      	bne.n	107fa <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10882:	2200      	movs	r2, #0
   10884:	4651      	mov	r1, sl
   10886:	4650      	mov	r0, sl
   10888:	f00a f8a5 	bl	1a9d6 <mayfly_enable_cb>
   1088c:	e7b5      	b.n	107fa <mayfly_run+0xda>
   1088e:	bf00      	nop
   10890:	20000be8 	.word	0x20000be8

00010894 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
   10894:	b5f0      	push	{r4, r5, r6, r7, lr}
   10896:	b083      	sub	sp, #12
   10898:	4607      	mov	r7, r0
   1089a:	4608      	mov	r0, r1
	*mem_head = mem_pool;
   1089c:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1089e:	1dfb      	adds	r3, r7, #7
   108a0:	f023 0303 	bic.w	r3, r3, #3
   108a4:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   108a6:	460e      	mov	r6, r1
   108a8:	3a01      	subs	r2, #1
   108aa:	b295      	uxth	r5, r2
   108ac:	2204      	movs	r2, #4
   108ae:	2100      	movs	r1, #0
   108b0:	fb05 7000 	mla	r0, r5, r0, r7
   108b4:	f01b fbe2 	bl	2c07c <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
   108b8:	e00b      	b.n	108d2 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
   108ba:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
   108be:	443b      	add	r3, r7
   108c0:	a902      	add	r1, sp, #8
   108c2:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
   108c6:	2204      	movs	r2, #4
   108c8:	fb04 7006 	mla	r0, r4, r6, r7
   108cc:	f7ef fcf8 	bl	2c0 <memcpy>
	while (mem_count--) {
   108d0:	4625      	mov	r5, r4
   108d2:	1e6c      	subs	r4, r5, #1
   108d4:	b2a4      	uxth	r4, r4
   108d6:	2d00      	cmp	r5, #0
   108d8:	d1ef      	bne.n	108ba <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
   108da:	b003      	add	sp, #12
   108dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000108de <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   108de:	b570      	push	{r4, r5, r6, lr}
   108e0:	b082      	sub	sp, #8
	if (*mem_head) {
   108e2:	6805      	ldr	r5, [r0, #0]
   108e4:	b1a5      	cbz	r5, 10910 <mem_acquire+0x32>
   108e6:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   108e8:	1deb      	adds	r3, r5, #7
   108ea:	f023 0303 	bic.w	r3, r3, #3
   108ee:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
   108f0:	3b01      	subs	r3, #1
   108f2:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   108f4:	2204      	movs	r2, #4
   108f6:	4629      	mov	r1, r5
   108f8:	eb0d 0002 	add.w	r0, sp, r2
   108fc:	f7ef fce0 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10900:	9b01      	ldr	r3, [sp, #4]
   10902:	b11b      	cbz	r3, 1090c <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
   10904:	3307      	adds	r3, #7
   10906:	f023 0303 	bic.w	r3, r3, #3
   1090a:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
   1090c:	9b01      	ldr	r3, [sp, #4]
   1090e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   10910:	4628      	mov	r0, r5
   10912:	b002      	add	sp, #8
   10914:	bd70      	pop	{r4, r5, r6, pc}

00010916 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   10916:	b570      	push	{r4, r5, r6, lr}
   10918:	4606      	mov	r6, r0
   1091a:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1091c:	680b      	ldr	r3, [r1, #0]
   1091e:	b183      	cbz	r3, 10942 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
   10920:	3307      	adds	r3, #7
   10922:	f023 0303 	bic.w	r3, r3, #3
   10926:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
   10928:	3401      	adds	r4, #1
   1092a:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
   1092c:	2204      	movs	r2, #4
   1092e:	4629      	mov	r1, r5
   10930:	4630      	mov	r0, r6
   10932:	f7ef fcc5 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
   10936:	1df3      	adds	r3, r6, #7
   10938:	f023 0303 	bic.w	r3, r3, #3
   1093c:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
   1093e:	602e      	str	r6, [r5, #0]
   10940:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
   10942:	2400      	movs	r4, #0
   10944:	e7f0      	b.n	10928 <mem_release+0x12>

00010946 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
   10946:	4603      	mov	r3, r0
   10948:	b120      	cbz	r0, 10954 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
   1094a:	3307      	adds	r3, #7
   1094c:	f023 0303 	bic.w	r3, r3, #3
   10950:	8818      	ldrh	r0, [r3, #0]
   10952:	4770      	bx	lr
	u16_t free_count = 0;
   10954:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
   10956:	4770      	bx	lr

00010958 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
   10958:	fb02 0001 	mla	r0, r2, r1, r0
   1095c:	4770      	bx	lr

0001095e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
   1095e:	1a40      	subs	r0, r0, r1
   10960:	b280      	uxth	r0, r0
}
   10962:	fbb0 f0f2 	udiv	r0, r0, r2
   10966:	4770      	bx	lr

00010968 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
   10968:	4411      	add	r1, r2
	while (len--) {
   1096a:	e004      	b.n	10976 <mem_rcopy+0xe>
		*dst++ = *--src;
   1096c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   10970:	7002      	strb	r2, [r0, #0]
	while (len--) {
   10972:	461a      	mov	r2, r3
		*dst++ = *--src;
   10974:	3001      	adds	r0, #1
	while (len--) {
   10976:	1e53      	subs	r3, r2, #1
   10978:	b29b      	uxth	r3, r3
   1097a:	2a00      	cmp	r2, #0
   1097c:	d1f6      	bne.n	1096c <mem_rcopy+0x4>
	}
}
   1097e:	4770      	bx	lr

00010980 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
   10980:	1e4b      	subs	r3, r1, #1
   10982:	b29b      	uxth	r3, r3
   10984:	b171      	cbz	r1, 109a4 <mem_nz+0x24>
{
   10986:	b410      	push	{r4}
		if (*src++) {
   10988:	1c44      	adds	r4, r0, #1
   1098a:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
   1098c:	4619      	mov	r1, r3
		if (*src++) {
   1098e:	b93a      	cbnz	r2, 109a0 <mem_nz+0x20>
   10990:	4620      	mov	r0, r4
	while (len--) {
   10992:	3b01      	subs	r3, #1
   10994:	b29b      	uxth	r3, r3
   10996:	2900      	cmp	r1, #0
   10998:	d1f6      	bne.n	10988 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
   1099a:	2000      	movs	r0, #0
}
   1099c:	bc10      	pop	{r4}
   1099e:	4770      	bx	lr
			return 1;
   109a0:	2001      	movs	r0, #1
   109a2:	e7fb      	b.n	1099c <mem_nz+0x1c>
	return 0;
   109a4:	2000      	movs	r0, #0
}
   109a6:	4770      	bx	lr

000109a8 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
   109a8:	6010      	str	r0, [r2, #0]
   109aa:	6008      	str	r0, [r1, #0]

	return link;
}
   109ac:	4770      	bx	lr

000109ae <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
   109ae:	6813      	ldr	r3, [r2, #0]
   109b0:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
   109b2:	6813      	ldr	r3, [r2, #0]
   109b4:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
   109b6:	6011      	str	r1, [r2, #0]

	return link;
}
   109b8:	4608      	mov	r0, r1
   109ba:	4770      	bx	lr

000109bc <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
   109bc:	4281      	cmp	r1, r0
   109be:	d004      	beq.n	109ca <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
   109c0:	b10a      	cbz	r2, 109c6 <memq_peek+0xa>
		*mem = *((void **)link + 1);
   109c2:	684b      	ldr	r3, [r1, #4]
   109c4:	6013      	str	r3, [r2, #0]
	}

	return link;
}
   109c6:	4608      	mov	r0, r1
   109c8:	4770      	bx	lr
		return 0;
   109ca:	2100      	movs	r1, #0
   109cc:	e7fb      	b.n	109c6 <memq_peek+0xa>

000109ce <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
   109ce:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   109d0:	4283      	cmp	r3, r0
   109d2:	d006      	beq.n	109e2 <memq_dequeue+0x14>
	if (mem) {
   109d4:	b10a      	cbz	r2, 109da <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
   109d6:	6858      	ldr	r0, [r3, #4]
   109d8:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
   109da:	681a      	ldr	r2, [r3, #0]
   109dc:	600a      	str	r2, [r1, #0]

	return link;
}
   109de:	4618      	mov	r0, r3
   109e0:	4770      	bx	lr
		return 0;
   109e2:	2300      	movs	r3, #0
   109e4:	e7f9      	b.n	109da <memq_dequeue+0xc>

000109e6 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
   109e6:	b410      	push	{r4}
	u8_t one_count = 0;
   109e8:	2200      	movs	r2, #0

	while (octets_len--) {
   109ea:	e008      	b.n	109fe <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
   109ec:	1e59      	subs	r1, r3, #1
   109ee:	b249      	sxtb	r1, r1
   109f0:	400b      	ands	r3, r1
			one_count++;
   109f2:	3201      	adds	r2, #1
   109f4:	b2d2      	uxtb	r2, r2
		while (bite) {
   109f6:	2b00      	cmp	r3, #0
   109f8:	d1f8      	bne.n	109ec <util_ones_count_get+0x6>
		}
		octets++;
   109fa:	3001      	adds	r0, #1
	while (octets_len--) {
   109fc:	4621      	mov	r1, r4
   109fe:	1e4b      	subs	r3, r1, #1
   10a00:	b2dc      	uxtb	r4, r3
   10a02:	b109      	cbz	r1, 10a08 <util_ones_count_get+0x22>
		bite = *octets;
   10a04:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
   10a06:	e7f6      	b.n	109f6 <util_ones_count_get+0x10>
	}

	return one_count;
}
   10a08:	4610      	mov	r0, r2
   10a0a:	bc10      	pop	{r4}
   10a0c:	4770      	bx	lr
	...

00010a10 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   10a10:	4b05      	ldr	r3, [pc, #20]	; (10a28 <cntr_init+0x18>)
   10a12:	2200      	movs	r2, #0
   10a14:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   10a18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   10a1c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   10a20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   10a24:	4770      	bx	lr
   10a26:	bf00      	nop
   10a28:	4000b000 	.word	0x4000b000

00010a2c <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   10a2c:	4a05      	ldr	r2, [pc, #20]	; (10a44 <cntr_start+0x18>)
   10a2e:	7813      	ldrb	r3, [r2, #0]
   10a30:	1c59      	adds	r1, r3, #1
   10a32:	7011      	strb	r1, [r2, #0]
   10a34:	b923      	cbnz	r3, 10a40 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   10a36:	2201      	movs	r2, #1
   10a38:	4b03      	ldr	r3, [pc, #12]	; (10a48 <cntr_start+0x1c>)
   10a3a:	601a      	str	r2, [r3, #0]

	return 0;
   10a3c:	2000      	movs	r0, #0
   10a3e:	4770      	bx	lr
		return 1;
   10a40:	2001      	movs	r0, #1
}
   10a42:	4770      	bx	lr
   10a44:	20000ca8 	.word	0x20000ca8
   10a48:	4000b000 	.word	0x4000b000

00010a4c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   10a4c:	4b0a      	ldr	r3, [pc, #40]	; (10a78 <cntr_stop+0x2c>)
   10a4e:	781b      	ldrb	r3, [r3, #0]
   10a50:	b14b      	cbz	r3, 10a66 <cntr_stop+0x1a>

	if (--_refcount) {
   10a52:	3b01      	subs	r3, #1
   10a54:	b2db      	uxtb	r3, r3
   10a56:	4a08      	ldr	r2, [pc, #32]	; (10a78 <cntr_stop+0x2c>)
   10a58:	7013      	strb	r3, [r2, #0]
   10a5a:	b953      	cbnz	r3, 10a72 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   10a5c:	2201      	movs	r2, #1
   10a5e:	4b07      	ldr	r3, [pc, #28]	; (10a7c <cntr_stop+0x30>)
   10a60:	605a      	str	r2, [r3, #4]

	return 0;
   10a62:	2000      	movs	r0, #0
   10a64:	4770      	bx	lr
	LL_ASSERT(_refcount);
   10a66:	4040      	eors	r0, r0
   10a68:	f380 8811 	msr	BASEPRI, r0
   10a6c:	f04f 0004 	mov.w	r0, #4
   10a70:	df02      	svc	2
		return 1;
   10a72:	2001      	movs	r0, #1
}
   10a74:	4770      	bx	lr
   10a76:	bf00      	nop
   10a78:	20000ca8 	.word	0x20000ca8
   10a7c:	4000b000 	.word	0x4000b000

00010a80 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   10a80:	4b01      	ldr	r3, [pc, #4]	; (10a88 <cntr_cnt_get+0x8>)
   10a82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   10a86:	4770      	bx	lr
   10a88:	4000b000 	.word	0x4000b000

00010a8c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   10a8c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   10a90:	4b01      	ldr	r3, [pc, #4]	; (10a98 <cntr_cmp_set+0xc>)
   10a92:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   10a96:	4770      	bx	lr
   10a98:	4000b000 	.word	0x4000b000

00010a9c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   10a9c:	e009      	b.n	10ab2 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
   10a9e:	4b15      	ldr	r3, [pc, #84]	; (10af4 <do_ecb+0x58>)
   10aa0:	2201      	movs	r2, #1
   10aa2:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   10aa4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   10aa8:	b91b      	cbnz	r3, 10ab2 <do_ecb+0x16>
   10aaa:	4b12      	ldr	r3, [pc, #72]	; (10af4 <do_ecb+0x58>)
   10aac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   10ab0:	b9d3      	cbnz	r3, 10ae8 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
   10ab2:	4b10      	ldr	r3, [pc, #64]	; (10af4 <do_ecb+0x58>)
   10ab4:	2201      	movs	r2, #1
   10ab6:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   10ab8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   10abc:	2100      	movs	r1, #0
   10abe:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   10ac2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   10ac6:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   10ac8:	4b0a      	ldr	r3, [pc, #40]	; (10af4 <do_ecb+0x58>)
   10aca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10ace:	2b00      	cmp	r3, #0
   10ad0:	d1e5      	bne.n	10a9e <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   10ad2:	4b08      	ldr	r3, [pc, #32]	; (10af4 <do_ecb+0x58>)
   10ad4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d1e0      	bne.n	10a9e <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   10adc:	4b05      	ldr	r3, [pc, #20]	; (10af4 <do_ecb+0x58>)
   10ade:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   10ae2:	2b00      	cmp	r3, #0
   10ae4:	d1f0      	bne.n	10ac8 <do_ecb+0x2c>
   10ae6:	e7da      	b.n	10a9e <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
   10ae8:	2200      	movs	r2, #0
   10aea:	4b02      	ldr	r3, [pc, #8]	; (10af4 <do_ecb+0x58>)
   10aec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10af0:	4770      	bx	lr
   10af2:	bf00      	nop
   10af4:	4000e000 	.word	0x4000e000

00010af8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   10af8:	b570      	push	{r4, r5, r6, lr}
   10afa:	b08c      	sub	sp, #48	; 0x30
   10afc:	460e      	mov	r6, r1
   10afe:	4615      	mov	r5, r2
   10b00:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   10b02:	2210      	movs	r2, #16
   10b04:	4601      	mov	r1, r0
   10b06:	4668      	mov	r0, sp
   10b08:	f7ff ff2e 	bl	10968 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   10b0c:	2210      	movs	r2, #16
   10b0e:	4631      	mov	r1, r6
   10b10:	eb0d 0002 	add.w	r0, sp, r2
   10b14:	f7ff ff28 	bl	10968 <mem_rcopy>

	do_ecb(&ecb);
   10b18:	4668      	mov	r0, sp
   10b1a:	f7ff ffbf 	bl	10a9c <do_ecb>

	if (cipher_text_le) {
   10b1e:	b125      	cbz	r5, 10b2a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   10b20:	2210      	movs	r2, #16
   10b22:	a908      	add	r1, sp, #32
   10b24:	4628      	mov	r0, r5
   10b26:	f7ff ff1f 	bl	10968 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   10b2a:	b124      	cbz	r4, 10b36 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   10b2c:	2210      	movs	r2, #16
   10b2e:	a908      	add	r1, sp, #32
   10b30:	4620      	mov	r0, r4
   10b32:	f7ef fbc5 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   10b36:	b00c      	add	sp, #48	; 0x30
   10b38:	bd70      	pop	{r4, r5, r6, pc}
	...

00010b3c <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
   10b3c:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
   10b3e:	4b02      	ldr	r3, [pc, #8]	; (10b48 <isr_radio+0xc>)
   10b40:	681b      	ldr	r3, [r3, #0]
   10b42:	b103      	cbz	r3, 10b46 <isr_radio+0xa>
		sfp_radio_isr();
   10b44:	4798      	blx	r3
   10b46:	bd08      	pop	{r3, pc}
   10b48:	20000ec8 	.word	0x20000ec8

00010b4c <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
   10b4c:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   10b4e:	4b07      	ldr	r3, [pc, #28]	; (10b6c <radio_isr_set+0x20>)
   10b50:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
   10b52:	2210      	movs	r2, #16
   10b54:	4b06      	ldr	r3, [pc, #24]	; (10b70 <radio_isr_set+0x24>)
   10b56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10b5a:	2202      	movs	r2, #2
   10b5c:	4b05      	ldr	r3, [pc, #20]	; (10b74 <radio_isr_set+0x28>)
   10b5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
   10b62:	2001      	movs	r0, #1
   10b64:	f018 fb42 	bl	291ec <_arch_irq_enable>
   10b68:	bd08      	pop	{r3, pc}
   10b6a:	bf00      	nop
   10b6c:	20000ec8 	.word	0x20000ec8
   10b70:	40001000 	.word	0x40001000
   10b74:	e000e100 	.word	0xe000e100

00010b78 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   10b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10b80:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   10b84:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   10b88:	2100      	movs	r1, #0
   10b8a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   10b8e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   10b92:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   10b96:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   10b9a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   10b9e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   10ba2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   10ba6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   10baa:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   10bae:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   10bb2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   10bb6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   10bba:	4770      	bx	lr

00010bbc <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
   10bbc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   10bbe:	2001      	movs	r0, #1
   10bc0:	f018 fb22 	bl	29208 <_arch_irq_disable>

	NRF_RADIO->POWER =
   10bc4:	4b03      	ldr	r3, [pc, #12]	; (10bd4 <radio_reset+0x18>)
   10bc6:	2200      	movs	r2, #0
   10bc8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
   10bcc:	2201      	movs	r2, #1
   10bce:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   10bd2:	bd08      	pop	{r3, pc}
   10bd4:	40001000 	.word	0x40001000

00010bd8 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
   10bd8:	2802      	cmp	r0, #2
   10bda:	d106      	bne.n	10bea <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   10bdc:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   10bde:	f003 030f 	and.w	r3, r3, #15
   10be2:	4a03      	ldr	r2, [pc, #12]	; (10bf0 <radio_phy_set+0x18>)
   10be4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   10be8:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   10bea:	2303      	movs	r3, #3
   10bec:	e7f7      	b.n	10bde <radio_phy_set+0x6>
   10bee:	bf00      	nop
   10bf0:	40001000 	.word	0x40001000

00010bf4 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
   10bf4:	4b01      	ldr	r3, [pc, #4]	; (10bfc <radio_tx_power_set+0x8>)
   10bf6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   10bfa:	4770      	bx	lr
   10bfc:	40001000 	.word	0x40001000

00010c00 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
   10c00:	4b01      	ldr	r3, [pc, #4]	; (10c08 <radio_freq_chan_set+0x8>)
   10c02:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   10c06:	4770      	bx	lr
   10c08:	40001000 	.word	0x40001000

00010c0c <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
   10c0c:	4b07      	ldr	r3, [pc, #28]	; (10c2c <radio_whiten_iv_set+0x20>)
   10c0e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   10c12:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   10c16:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   10c1a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   10c1e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   10c22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   10c26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   10c2a:	4770      	bx	lr
   10c2c:	40001000 	.word	0x40001000

00010c30 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
   10c30:	4a0a      	ldr	r2, [pc, #40]	; (10c5c <radio_aa_set+0x2c>)
   10c32:	2300      	movs	r3, #0
   10c34:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
   10c38:	2301      	movs	r3, #1
   10c3a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
   10c3e:	78c3      	ldrb	r3, [r0, #3]
   10c40:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   10c44:	7881      	ldrb	r1, [r0, #2]
   10c46:	7843      	ldrb	r3, [r0, #1]
   10c48:	041b      	lsls	r3, r3, #16
   10c4a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   10c4e:	7801      	ldrb	r1, [r0, #0]
   10c50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   10c54:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   10c58:	4770      	bx	lr
   10c5a:	bf00      	nop
   10c5c:	40001000 	.word	0x40001000

00010c60 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
   10c60:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   10c62:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
   10c66:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
   10c6a:	2a02      	cmp	r2, #2
   10c6c:	d020      	beq.n	10cb0 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   10c6e:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
   10c70:	b10c      	cbz	r4, 10c76 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   10c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   10c76:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   10c7a:	f1c0 0008 	rsb	r0, r0, #8
   10c7e:	0400      	lsls	r0, r0, #16
   10c80:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
   10c84:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
   10c86:	4303      	orrs	r3, r0
   10c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   10c8c:	4a0a      	ldr	r2, [pc, #40]	; (10cb8 <radio_pkt_configure+0x58>)
   10c8e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   10c92:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   10c96:	4b09      	ldr	r3, [pc, #36]	; (10cbc <radio_pkt_configure+0x5c>)
   10c98:	4003      	ands	r3, r0
   10c9a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   10c9e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   10ca2:	4319      	orrs	r1, r3
   10ca4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   10ca8:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
   10cac:	bc10      	pop	{r4}
   10cae:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   10cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10cb4:	e7dc      	b.n	10c70 <radio_pkt_configure+0x10>
   10cb6:	bf00      	nop
   10cb8:	40001000 	.word	0x40001000
   10cbc:	fef80000 	.word	0xfef80000

00010cc0 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   10cc0:	4b01      	ldr	r3, [pc, #4]	; (10cc8 <radio_pkt_rx_set+0x8>)
   10cc2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   10cc6:	4770      	bx	lr
   10cc8:	40001000 	.word	0x40001000

00010ccc <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   10ccc:	4b01      	ldr	r3, [pc, #4]	; (10cd4 <radio_pkt_tx_set+0x8>)
   10cce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   10cd2:	4770      	bx	lr
   10cd4:	40001000 	.word	0x40001000

00010cd8 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
   10cd8:	208c      	movs	r0, #140	; 0x8c
   10cda:	4770      	bx	lr

00010cdc <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
   10cdc:	2001      	movs	r0, #1
   10cde:	4770      	bx	lr

00010ce0 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
   10ce0:	208c      	movs	r0, #140	; 0x8c
   10ce2:	4770      	bx	lr

00010ce4 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
   10ce4:	2802      	cmp	r0, #2
   10ce6:	d101      	bne.n	10cec <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
   10ce8:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
   10cea:	4770      	bx	lr
		return 10; /* ceil(9.4) */
   10cec:	200a      	movs	r0, #10
   10cee:	4770      	bx	lr

00010cf0 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
   10cf0:	2201      	movs	r2, #1
   10cf2:	4b01      	ldr	r3, [pc, #4]	; (10cf8 <radio_rx_enable+0x8>)
   10cf4:	605a      	str	r2, [r3, #4]
   10cf6:	4770      	bx	lr
   10cf8:	40001000 	.word	0x40001000

00010cfc <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
   10cfc:	2201      	movs	r2, #1
   10cfe:	4b01      	ldr	r3, [pc, #4]	; (10d04 <radio_tx_enable+0x8>)
   10d00:	601a      	str	r2, [r3, #0]
   10d02:	4770      	bx	lr
   10d04:	40001000 	.word	0x40001000

00010d08 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
   10d08:	4b03      	ldr	r3, [pc, #12]	; (10d18 <radio_disable+0x10>)
   10d0a:	2200      	movs	r2, #0
   10d0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   10d10:	2201      	movs	r2, #1
   10d12:	611a      	str	r2, [r3, #16]
   10d14:	4770      	bx	lr
   10d16:	bf00      	nop
   10d18:	40001000 	.word	0x40001000

00010d1c <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
   10d1c:	4b06      	ldr	r3, [pc, #24]	; (10d38 <radio_status_reset+0x1c>)
   10d1e:	2200      	movs	r2, #0
   10d20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
   10d24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
   10d28:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
   10d2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   10d30:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   10d34:	4770      	bx	lr
   10d36:	bf00      	nop
   10d38:	40001000 	.word	0x40001000

00010d3c <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
   10d3c:	4b03      	ldr	r3, [pc, #12]	; (10d4c <radio_is_ready+0x10>)
   10d3e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   10d42:	3000      	adds	r0, #0
   10d44:	bf18      	it	ne
   10d46:	2001      	movne	r0, #1
   10d48:	4770      	bx	lr
   10d4a:	bf00      	nop
   10d4c:	40001000 	.word	0x40001000

00010d50 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
   10d50:	4b03      	ldr	r3, [pc, #12]	; (10d60 <radio_is_done+0x10>)
   10d52:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   10d56:	3000      	adds	r0, #0
   10d58:	bf18      	it	ne
   10d5a:	2001      	movne	r0, #1
   10d5c:	4770      	bx	lr
   10d5e:	bf00      	nop
   10d60:	40001000 	.word	0x40001000

00010d64 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   10d64:	4b03      	ldr	r3, [pc, #12]	; (10d74 <radio_is_idle+0x10>)
   10d66:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   10d6a:	fab0 f080 	clz	r0, r0
   10d6e:	0940      	lsrs	r0, r0, #5
   10d70:	4770      	bx	lr
   10d72:	bf00      	nop
   10d74:	40001000 	.word	0x40001000

00010d78 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
   10d78:	4b04      	ldr	r3, [pc, #16]	; (10d8c <radio_crc_configure+0x14>)
   10d7a:	f240 1203 	movw	r2, #259	; 0x103
   10d7e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   10d82:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   10d86:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   10d8a:	4770      	bx	lr
   10d8c:	40001000 	.word	0x40001000

00010d90 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   10d90:	4b03      	ldr	r3, [pc, #12]	; (10da0 <radio_crc_is_valid+0x10>)
   10d92:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   10d96:	3000      	adds	r0, #0
   10d98:	bf18      	it	ne
   10d9a:	2001      	movne	r0, #1
   10d9c:	4770      	bx	lr
   10d9e:	bf00      	nop
   10da0:	40001000 	.word	0x40001000

00010da4 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   10da4:	4800      	ldr	r0, [pc, #0]	; (10da8 <radio_pkt_empty_get+0x4>)
   10da6:	4770      	bx	lr
   10da8:	20000dbc 	.word	0x20000dbc

00010dac <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   10dac:	4800      	ldr	r0, [pc, #0]	; (10db0 <radio_pkt_scratch_get+0x4>)
   10dae:	4770      	bx	lr
   10db0:	20000dc0 	.word	0x20000dc0

00010db4 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   10db4:	220b      	movs	r2, #11
   10db6:	4b02      	ldr	r3, [pc, #8]	; (10dc0 <radio_switch_complete_and_rx+0xc>)
   10db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10dbc:	4770      	bx	lr
   10dbe:	bf00      	nop
   10dc0:	40001000 	.word	0x40001000

00010dc4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   10dc4:	2207      	movs	r2, #7
   10dc6:	4b02      	ldr	r3, [pc, #8]	; (10dd0 <radio_switch_complete_and_tx+0xc>)
   10dc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10dcc:	4770      	bx	lr
   10dce:	bf00      	nop
   10dd0:	40001000 	.word	0x40001000

00010dd4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   10dd4:	2203      	movs	r2, #3
   10dd6:	4b02      	ldr	r3, [pc, #8]	; (10de0 <radio_switch_complete_and_disable+0xc>)
   10dd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10ddc:	4770      	bx	lr
   10dde:	bf00      	nop
   10de0:	40001000 	.word	0x40001000

00010de4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   10de4:	4a03      	ldr	r2, [pc, #12]	; (10df4 <radio_rssi_measure+0x10>)
   10de6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   10dea:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   10dee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   10df2:	4770      	bx	lr
   10df4:	40001000 	.word	0x40001000

00010df8 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   10df8:	4b01      	ldr	r3, [pc, #4]	; (10e00 <radio_rssi_get+0x8>)
   10dfa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   10dfe:	4770      	bx	lr
   10e00:	40001000 	.word	0x40001000

00010e04 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   10e04:	2200      	movs	r2, #0
   10e06:	4b02      	ldr	r3, [pc, #8]	; (10e10 <radio_rssi_status_reset+0xc>)
   10e08:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   10e0c:	4770      	bx	lr
   10e0e:	bf00      	nop
   10e10:	40001000 	.word	0x40001000

00010e14 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   10e14:	4b03      	ldr	r3, [pc, #12]	; (10e24 <radio_rssi_is_ready+0x10>)
   10e16:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   10e1a:	3000      	adds	r0, #0
   10e1c:	bf18      	it	ne
   10e1e:	2001      	movne	r0, #1
   10e20:	4770      	bx	lr
   10e22:	bf00      	nop
   10e24:	40001000 	.word	0x40001000

00010e28 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   10e28:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
   10e2a:	2400      	movs	r4, #0
   10e2c:	e019      	b.n	10e62 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   10e2e:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
   10e30:	7893      	ldrb	r3, [r2, #2]
   10e32:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   10e34:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
   10e38:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
   10e3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
   10e3e:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
   10e40:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   10e42:	4d0c      	ldr	r5, [pc, #48]	; (10e74 <radio_filter_configure+0x4c>)
   10e44:	f504 76c0 	add.w	r6, r4, #384	; 0x180
   10e48:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   10e4c:	7956      	ldrb	r6, [r2, #5]
   10e4e:	7913      	ldrb	r3, [r2, #4]
   10e50:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   10e54:	f504 76c4 	add.w	r6, r4, #392	; 0x188
   10e58:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
   10e5c:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
   10e5e:	3401      	adds	r4, #1
   10e60:	b2e4      	uxtb	r4, r4
   10e62:	2c07      	cmp	r4, #7
   10e64:	d9e3      	bls.n	10e2e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   10e66:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   10e6a:	4b02      	ldr	r3, [pc, #8]	; (10e74 <radio_filter_configure+0x4c>)
   10e6c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   10e70:	bc70      	pop	{r4, r5, r6}
   10e72:	4770      	bx	lr
   10e74:	40001000 	.word	0x40001000

00010e78 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   10e78:	4a03      	ldr	r2, [pc, #12]	; (10e88 <radio_filter_disable+0x10>)
   10e7a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   10e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   10e82:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   10e86:	4770      	bx	lr
   10e88:	40001000 	.word	0x40001000

00010e8c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   10e8c:	4b03      	ldr	r3, [pc, #12]	; (10e9c <radio_filter_status_reset+0x10>)
   10e8e:	2200      	movs	r2, #0
   10e90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
   10e94:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop
   10e9c:	40001000 	.word	0x40001000

00010ea0 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   10ea0:	4b03      	ldr	r3, [pc, #12]	; (10eb0 <radio_filter_has_match+0x10>)
   10ea2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   10ea6:	3000      	adds	r0, #0
   10ea8:	bf18      	it	ne
   10eaa:	2001      	movne	r0, #1
   10eac:	4770      	bx	lr
   10eae:	bf00      	nop
   10eb0:	40001000 	.word	0x40001000

00010eb4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   10eb4:	4b01      	ldr	r3, [pc, #4]	; (10ebc <radio_filter_match_get+0x8>)
   10eb6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   10eba:	4770      	bx	lr
   10ebc:	40001000 	.word	0x40001000

00010ec0 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   10ec0:	4b04      	ldr	r3, [pc, #16]	; (10ed4 <radio_bc_configure+0x14>)
   10ec2:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   10ec6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   10eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ece:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   10ed2:	4770      	bx	lr
   10ed4:	40001000 	.word	0x40001000

00010ed8 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
   10ed8:	2200      	movs	r2, #0
   10eda:	4b02      	ldr	r3, [pc, #8]	; (10ee4 <radio_bc_status_reset+0xc>)
   10edc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
   10ee0:	4770      	bx	lr
   10ee2:	bf00      	nop
   10ee4:	40001000 	.word	0x40001000

00010ee8 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   10ee8:	4b03      	ldr	r3, [pc, #12]	; (10ef8 <radio_bc_has_match+0x10>)
   10eea:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
   10eee:	3000      	adds	r0, #0
   10ef0:	bf18      	it	ne
   10ef2:	2001      	movne	r0, #1
   10ef4:	4770      	bx	lr
   10ef6:	bf00      	nop
   10ef8:	40001000 	.word	0x40001000

00010efc <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   10efc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   10f00:	4b04      	ldr	r3, [pc, #16]	; (10f14 <radio_tmr_status_reset+0x18>)
   10f02:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
   10f06:	f248 027f 	movw	r2, #32895	; 0x807f
   10f0a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   10f0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   10f12:	4770      	bx	lr
   10f14:	4000b000 	.word	0x4000b000

00010f18 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
   10f18:	4b01      	ldr	r3, [pc, #4]	; (10f20 <radio_tmr_tifs_set+0x8>)
   10f1a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   10f1e:	4770      	bx	lr
   10f20:	40001000 	.word	0x40001000

00010f24 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   10f24:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   10f26:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   10f2a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   10f2e:	4c21      	ldr	r4, [pc, #132]	; (10fb4 <radio_tmr_start+0x90>)
   10f30:	42a3      	cmp	r3, r4
   10f32:	d906      	bls.n	10f42 <radio_tmr_start+0x1e>
		ticks_start--;
   10f34:	3901      	subs	r1, #1
		remainder += 30517578UL;
   10f36:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   10f3a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   10f3e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
   10f42:	4b1d      	ldr	r3, [pc, #116]	; (10fb8 <radio_tmr_start+0x94>)
   10f44:	fba3 3202 	umull	r3, r2, r3, r2
   10f48:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
   10f4a:	4b1c      	ldr	r3, [pc, #112]	; (10fbc <radio_tmr_start+0x98>)
   10f4c:	2401      	movs	r4, #1
   10f4e:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
   10f50:	2500      	movs	r5, #0
   10f52:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
   10f56:	2404      	movs	r4, #4
   10f58:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
   10f5c:	2602      	movs	r6, #2
   10f5e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
   10f62:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   10f66:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
   10f6a:	4c15      	ldr	r4, [pc, #84]	; (10fc0 <radio_tmr_start+0x9c>)
   10f6c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   10f70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   10f74:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
   10f78:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
   10f7c:	4911      	ldr	r1, [pc, #68]	; (10fc4 <radio_tmr_start+0xa0>)
   10f7e:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   10f82:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
   10f86:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
   10f8a:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
   10f8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   10f92:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
   10f96:	b948      	cbnz	r0, 10fac <radio_tmr_start+0x88>
   10f98:	490b      	ldr	r1, [pc, #44]	; (10fc8 <radio_tmr_start+0xa4>)
   10f9a:	4b0a      	ldr	r3, [pc, #40]	; (10fc4 <radio_tmr_start+0xa0>)
   10f9c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
   10fa0:	2101      	movs	r1, #1
   10fa2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   10fa6:	4610      	mov	r0, r2
   10fa8:	bc70      	pop	{r4, r5, r6}
   10faa:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
   10fac:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
   10fb0:	e7f3      	b.n	10f9a <radio_tmr_start+0x76>
   10fb2:	bf00      	nop
   10fb4:	7ff0bdbf 	.word	0x7ff0bdbf
   10fb8:	431bde83 	.word	0x431bde83
   10fbc:	40008000 	.word	0x40008000
   10fc0:	4000b000 	.word	0x4000b000
   10fc4:	4001f000 	.word	0x4001f000
   10fc8:	40001004 	.word	0x40001004

00010fcc <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
   10fcc:	4b02      	ldr	r3, [pc, #8]	; (10fd8 <radio_tmr_stop+0xc>)
   10fce:	2201      	movs	r2, #1
   10fd0:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
   10fd2:	611a      	str	r2, [r3, #16]
   10fd4:	4770      	bx	lr
   10fd6:	bf00      	nop
   10fd8:	40008000 	.word	0x40008000

00010fdc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
   10fdc:	4b0e      	ldr	r3, [pc, #56]	; (11018 <radio_tmr_hcto_configure+0x3c>)
   10fde:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
   10fe2:	2200      	movs	r2, #0
   10fe4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   10fe8:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   10fec:	4a0b      	ldr	r2, [pc, #44]	; (1101c <radio_tmr_hcto_configure+0x40>)
   10fee:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
   10ff2:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   10ff6:	3240      	adds	r2, #64	; 0x40
   10ff8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
   10ffc:	f502 7280 	add.w	r2, r2, #256	; 0x100
   11000:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
   11004:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   11008:	3a34      	subs	r2, #52	; 0x34
   1100a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
   1100e:	2218      	movs	r2, #24
   11010:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   11014:	4770      	bx	lr
   11016:	bf00      	nop
   11018:	40008000 	.word	0x40008000
   1101c:	40001104 	.word	0x40001104

00011020 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
   11020:	4b0b      	ldr	r3, [pc, #44]	; (11050 <radio_tmr_aa_capture+0x30>)
   11022:	4a0c      	ldr	r2, [pc, #48]	; (11054 <radio_tmr_aa_capture+0x34>)
   11024:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
   11028:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1102c:	3240      	adds	r2, #64	; 0x40
   1102e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   11032:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   11036:	3a3c      	subs	r2, #60	; 0x3c
   11038:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
   1103c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   11040:	3240      	adds	r2, #64	; 0x40
   11042:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
   11046:	220c      	movs	r2, #12
   11048:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1104c:	4770      	bx	lr
   1104e:	bf00      	nop
   11050:	4001f000 	.word	0x4001f000
   11054:	40001100 	.word	0x40001100

00011058 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
   11058:	4b01      	ldr	r3, [pc, #4]	; (11060 <radio_tmr_aa_get+0x8>)
   1105a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1105e:	4770      	bx	lr
   11060:	40008000 	.word	0x40008000

00011064 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   11064:	4b01      	ldr	r3, [pc, #4]	; (1106c <radio_tmr_aa_save+0x8>)
   11066:	6018      	str	r0, [r3, #0]
   11068:	4770      	bx	lr
   1106a:	bf00      	nop
   1106c:	20000ec4 	.word	0x20000ec4

00011070 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   11070:	4b01      	ldr	r3, [pc, #4]	; (11078 <radio_tmr_aa_restore+0x8>)
   11072:	6818      	ldr	r0, [r3, #0]
   11074:	4770      	bx	lr
   11076:	bf00      	nop
   11078:	20000ec4 	.word	0x20000ec4

0001107c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
   1107c:	4b01      	ldr	r3, [pc, #4]	; (11084 <radio_tmr_ready_get+0x8>)
   1107e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   11082:	4770      	bx	lr
   11084:	40008000 	.word	0x40008000

00011088 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
   11088:	4b06      	ldr	r3, [pc, #24]	; (110a4 <radio_tmr_end_capture+0x1c>)
   1108a:	4a07      	ldr	r2, [pc, #28]	; (110a8 <radio_tmr_end_capture+0x20>)
   1108c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
   11090:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   11094:	323c      	adds	r2, #60	; 0x3c
   11096:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
   1109a:	2220      	movs	r2, #32
   1109c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   110a0:	4770      	bx	lr
   110a2:	bf00      	nop
   110a4:	4001f000 	.word	0x4001f000
   110a8:	4000110c 	.word	0x4000110c

000110ac <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
   110ac:	4b01      	ldr	r3, [pc, #4]	; (110b4 <radio_tmr_end_get+0x8>)
   110ae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   110b2:	4770      	bx	lr
   110b4:	40008000 	.word	0x40008000

000110b8 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
   110b8:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   110ba:	4b18      	ldr	r3, [pc, #96]	; (1111c <radio_ccm_rx_pkt_set+0x64>)
   110bc:	2400      	movs	r4, #0
   110be:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   110c2:	2402      	movs	r4, #2
   110c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   110c8:	42a1      	cmp	r1, r4
   110ca:	d125      	bne.n	11118 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   110cc:	4914      	ldr	r1, [pc, #80]	; (11120 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
   110ce:	4b13      	ldr	r3, [pc, #76]	; (1111c <radio_ccm_rx_pkt_set+0x64>)
   110d0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   110d4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   110d8:	4812      	ldr	r0, [pc, #72]	; (11124 <radio_ccm_rx_pkt_set+0x6c>)
   110da:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   110de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   110e2:	4a11      	ldr	r2, [pc, #68]	; (11128 <radio_ccm_rx_pkt_set+0x70>)
   110e4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   110e8:	2200      	movs	r2, #0
   110ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   110ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   110f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   110f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   110fa:	4a0c      	ldr	r2, [pc, #48]	; (1112c <radio_ccm_rx_pkt_set+0x74>)
   110fc:	490c      	ldr	r1, [pc, #48]	; (11130 <radio_ccm_rx_pkt_set+0x78>)
   110fe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
   11102:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   11106:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
   1110a:	2140      	movs	r1, #64	; 0x40
   1110c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
   11110:	2201      	movs	r2, #1
   11112:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
   11114:	bc10      	pop	{r4}
   11116:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   11118:	4906      	ldr	r1, [pc, #24]	; (11134 <radio_ccm_rx_pkt_set+0x7c>)
   1111a:	e7d8      	b.n	110ce <radio_ccm_rx_pkt_set+0x16>
   1111c:	4000f000 	.word	0x4000f000
   11120:	01010001 	.word	0x01010001
   11124:	20000dc0 	.word	0x20000dc0
   11128:	20000cb0 	.word	0x20000cb0
   1112c:	4001f000 	.word	0x4001f000
   11130:	40001104 	.word	0x40001104
   11134:	01000001 	.word	0x01000001

00011138 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   11138:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1113a:	4b10      	ldr	r3, [pc, #64]	; (1117c <radio_ccm_tx_pkt_set+0x44>)
   1113c:	2200      	movs	r2, #0
   1113e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   11142:	2402      	movs	r4, #2
   11144:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   11148:	4c0d      	ldr	r4, [pc, #52]	; (11180 <radio_ccm_tx_pkt_set+0x48>)
   1114a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1114e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   11152:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   11156:	480b      	ldr	r0, [pc, #44]	; (11184 <radio_ccm_tx_pkt_set+0x4c>)
   11158:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1115c:	490a      	ldr	r1, [pc, #40]	; (11188 <radio_ccm_tx_pkt_set+0x50>)
   1115e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   11162:	2101      	movs	r1, #1
   11164:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   11168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1116c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   11170:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   11174:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
   11176:	bc10      	pop	{r4}
   11178:	4770      	bx	lr
   1117a:	bf00      	nop
   1117c:	4000f000 	.word	0x4000f000
   11180:	01010000 	.word	0x01010000
   11184:	20000dc0 	.word	0x20000dc0
   11188:	20000cb0 	.word	0x20000cb0

0001118c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   1118c:	2202      	movs	r2, #2
   1118e:	4b0d      	ldr	r3, [pc, #52]	; (111c4 <radio_ccm_is_done+0x38>)
   11190:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   11194:	e002      	b.n	1119c <radio_ccm_is_done+0x10>
   11196:	bf20      	wfe
  __ASM volatile ("sev");
   11198:	bf40      	sev
  __ASM volatile ("wfe");
   1119a:	bf20      	wfe
   1119c:	4b09      	ldr	r3, [pc, #36]	; (111c4 <radio_ccm_is_done+0x38>)
   1119e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   111a2:	2b00      	cmp	r3, #0
   111a4:	d0f7      	beq.n	11196 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   111a6:	4b07      	ldr	r3, [pc, #28]	; (111c4 <radio_ccm_is_done+0x38>)
   111a8:	2202      	movs	r2, #2
   111aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   111ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   111b2:	4a05      	ldr	r2, [pc, #20]	; (111c8 <radio_ccm_is_done+0x3c>)
   111b4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   111b8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   111bc:	fab0 f080 	clz	r0, r0
   111c0:	0940      	lsrs	r0, r0, #5
   111c2:	4770      	bx	lr
   111c4:	4000f000 	.word	0x4000f000
   111c8:	e000e100 	.word	0xe000e100

000111cc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   111cc:	4b03      	ldr	r3, [pc, #12]	; (111dc <radio_ccm_mic_is_valid+0x10>)
   111ce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   111d2:	3000      	adds	r0, #0
   111d4:	bf18      	it	ne
   111d6:	2001      	movne	r0, #1
   111d8:	4770      	bx	lr
   111da:	bf00      	nop
   111dc:	4000f000 	.word	0x4000f000

000111e0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   111e0:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   111e2:	4c13      	ldr	r4, [pc, #76]	; (11230 <radio_ar_configure+0x50>)
   111e4:	2303      	movs	r3, #3
   111e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
   111ea:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   111ee:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   111f2:	4b10      	ldr	r3, [pc, #64]	; (11234 <radio_ar_configure+0x54>)
   111f4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   111f8:	3b01      	subs	r3, #1
   111fa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   111fe:	4b0e      	ldr	r3, [pc, #56]	; (11238 <radio_ar_configure+0x58>)
   11200:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
   11204:	2300      	movs	r3, #0
   11206:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1120a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1120e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
   11212:	2040      	movs	r0, #64	; 0x40
   11214:	f7ff fe54 	bl	10ec0 <radio_bc_configure>
	radio_bc_status_reset();
   11218:	f7ff fe5e 	bl	10ed8 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
   1121c:	4b07      	ldr	r3, [pc, #28]	; (1123c <radio_ar_configure+0x5c>)
   1121e:	4a08      	ldr	r2, [pc, #32]	; (11240 <radio_ar_configure+0x60>)
   11220:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
   11224:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
   11228:	2240      	movs	r2, #64	; 0x40
   1122a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1122e:	bd10      	pop	{r4, pc}
   11230:	4000f000 	.word	0x4000f000
   11234:	40001000 	.word	0x40001000
   11238:	20000cac 	.word	0x20000cac
   1123c:	4001f000 	.word	0x4001f000
   11240:	40001128 	.word	0x40001128

00011244 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   11244:	4b01      	ldr	r3, [pc, #4]	; (1124c <radio_ar_match_get+0x8>)
   11246:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1124a:	4770      	bx	lr
   1124c:	4000f000 	.word	0x4000f000

00011250 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   11250:	b508      	push	{r3, lr}
	radio_bc_status_reset();
   11252:	f7ff fe41 	bl	10ed8 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   11256:	2200      	movs	r2, #0
   11258:	4b01      	ldr	r3, [pc, #4]	; (11260 <radio_ar_status_reset+0x10>)
   1125a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1125e:	bd08      	pop	{r3, pc}
   11260:	4000f000 	.word	0x4000f000

00011264 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
   11264:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
   11266:	f7ff fe3f 	bl	10ee8 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1126a:	b168      	cbz	r0, 11288 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
   1126c:	4b0a      	ldr	r3, [pc, #40]	; (11298 <radio_ar_has_match+0x34>)
   1126e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   11272:	b15b      	cbz	r3, 1128c <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
   11274:	4b08      	ldr	r3, [pc, #32]	; (11298 <radio_ar_has_match+0x34>)
   11276:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1127a:	b14b      	cbz	r3, 11290 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1127c:	4b06      	ldr	r3, [pc, #24]	; (11298 <radio_ar_has_match+0x34>)
   1127e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   11282:	b13b      	cbz	r3, 11294 <radio_ar_has_match+0x30>
   11284:	2000      	movs	r0, #0
   11286:	bd08      	pop	{r3, pc}
   11288:	2000      	movs	r0, #0
   1128a:	bd08      	pop	{r3, pc}
   1128c:	2000      	movs	r0, #0
   1128e:	bd08      	pop	{r3, pc}
   11290:	2000      	movs	r0, #0
   11292:	bd08      	pop	{r3, pc}
   11294:	2001      	movs	r0, #1
}
   11296:	bd08      	pop	{r3, pc}
   11298:	4000f000 	.word	0x4000f000
   1129c:	00000000 	.word	0x00000000

000112a0 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
   112a0:	b1f0      	cbz	r0, 112e0 <isr+0x40>
{
   112a2:	b430      	push	{r4, r5}
   112a4:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
   112a6:	78c0      	ldrb	r0, [r0, #3]
   112a8:	1c43      	adds	r3, r0, #1
   112aa:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
   112ac:	7815      	ldrb	r5, [r2, #0]
   112ae:	42ab      	cmp	r3, r5
   112b0:	d012      	beq.n	112d8 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
   112b2:	7894      	ldrb	r4, [r2, #2]
   112b4:	42a3      	cmp	r3, r4
   112b6:	d016      	beq.n	112e6 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
   112b8:	b1c1      	cbz	r1, 112ec <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
   112ba:	490f      	ldr	r1, [pc, #60]	; (112f8 <isr+0x58>)
   112bc:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
   112c0:	4410      	add	r0, r2
   112c2:	7101      	strb	r1, [r0, #4]
	rng->last = last;
   112c4:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
   112c6:	3301      	adds	r3, #1
   112c8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
   112ca:	429d      	cmp	r5, r3
   112cc:	d006      	beq.n	112dc <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
   112ce:	42a3      	cmp	r3, r4
   112d0:	d10f      	bne.n	112f2 <isr+0x52>
		return 0;
   112d2:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
   112d4:	bc30      	pop	{r4, r5}
   112d6:	4770      	bx	lr
		last = 0;
   112d8:	2300      	movs	r3, #0
   112da:	e7ea      	b.n	112b2 <isr+0x12>
		last = 0;
   112dc:	2300      	movs	r3, #0
   112de:	e7f6      	b.n	112ce <isr+0x2e>
		return -ENOBUFS;
   112e0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   112e4:	4770      	bx	lr
		return -ENOBUFS;
   112e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   112ea:	e7f3      	b.n	112d4 <isr+0x34>
		return -EBUSY;
   112ec:	f06f 000f 	mvn.w	r0, #15
   112f0:	e7f0      	b.n	112d4 <isr+0x34>
	return -EBUSY;
   112f2:	f06f 000f 	mvn.w	r0, #15
   112f6:	e7ed      	b.n	112d4 <isr+0x34>
   112f8:	4000d000 	.word	0x4000d000
   112fc:	00000000 	.word	0x00000000

00011300 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
   11300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11304:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
   11306:	f7ff fd23 	bl	10d50 <radio_is_done>
   1130a:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1130c:	b9e4      	cbnz	r4, 11348 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   1130e:	46a0      	mov	r8, r4
   11310:	46a1      	mov	r9, r4
   11312:	4627      	mov	r7, r4
   11314:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
   11316:	25ff      	movs	r5, #255	; 0xff
   11318:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
   1131a:	f7ff fcff 	bl	10d1c <radio_status_reset>
	radio_tmr_status_reset();
   1131e:	f7ff fded 	bl	10efc <radio_tmr_status_reset>
	radio_filter_status_reset();
   11322:	f7ff fdb3 	bl	10e8c <radio_filter_status_reset>
	radio_ar_status_reset();
   11326:	f7ff ff93 	bl	11250 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1132a:	f7ff fd6b 	bl	10e04 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
   1132e:	4bb6      	ldr	r3, [pc, #728]	; (11608 <isr+0x308>)
   11330:	7c1b      	ldrb	r3, [r3, #16]
   11332:	2b05      	cmp	r3, #5
   11334:	f200 8456 	bhi.w	11be4 <isr+0x8e4>
   11338:	e8df f013 	tbh	[pc, r3, lsl #1]
   1133c:	00e801f3 	.word	0x00e801f3
   11340:	016e001c 	.word	0x016e001c
   11344:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
   11348:	f7ff fd22 	bl	10d90 <radio_crc_is_valid>
   1134c:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1134e:	f7ff fda7 	bl	10ea0 <radio_filter_has_match>
   11352:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   11354:	f7ff fdae 	bl	10eb4 <radio_filter_match_get>
   11358:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
   1135c:	f7ff ff82 	bl	11264 <radio_ar_has_match>
   11360:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
   11364:	f7ff ff6e 	bl	11244 <radio_ar_match_get>
   11368:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1136a:	f7ff fd53 	bl	10e14 <radio_rssi_is_ready>
   1136e:	fa5f f880 	uxtb.w	r8, r0
   11372:	e7d2      	b.n	1131a <isr+0x1a>
	_radio.state = STATE_RX;
   11374:	4da4      	ldr	r5, [pc, #656]	; (11608 <isr+0x308>)
   11376:	2301      	movs	r3, #1
   11378:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
   1137a:	f7ff fe97 	bl	110ac <radio_tmr_end_get>
   1137e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
   11382:	2096      	movs	r0, #150	; 0x96
   11384:	f7ff fdc8 	bl	10f18 <radio_tmr_tifs_set>
	switch (_radio.role) {
   11388:	7beb      	ldrb	r3, [r5, #15]
   1138a:	3b01      	subs	r3, #1
   1138c:	2b03      	cmp	r3, #3
   1138e:	f200 80b7 	bhi.w	11500 <isr+0x200>
   11392:	e8df f003 	tbb	[pc, r3]
   11396:	3202      	.short	0x3202
   11398:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1139a:	2300      	movs	r3, #0
   1139c:	461a      	mov	r2, r3
   1139e:	4619      	mov	r1, r3
   113a0:	4618      	mov	r0, r3
   113a2:	f7ff fd0f 	bl	10dc4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   113a6:	f7ff fd01 	bl	10dac <radio_pkt_scratch_get>
   113aa:	f7ff fc89 	bl	10cc0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   113ae:	f7ff fcc5 	bl	10d3c <radio_is_ready>
   113b2:	b990      	cbnz	r0, 113da <isr+0xda>
		if (ctrl_rl_enabled()) {
   113b4:	f00a f802 	bl	1b3bc <ctrl_rl_enabled>
   113b8:	b9a8      	cbnz	r0, 113e6 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
   113ba:	2100      	movs	r1, #0
   113bc:	4608      	mov	r0, r1
   113be:	f7ff fc91 	bl	10ce4 <radio_rx_chain_delay_get>
   113c2:	4404      	add	r4, r0
		hcto += addr_us_get(0);
   113c4:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
   113c6:	2100      	movs	r1, #0
   113c8:	4608      	mov	r0, r1
   113ca:	f7ff fc87 	bl	10cdc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   113ce:	1a20      	subs	r0, r4, r0
   113d0:	f7ff fe04 	bl	10fdc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   113d4:	f7ff fe58 	bl	11088 <radio_tmr_end_capture>
   113d8:	e1a3      	b.n	11722 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   113da:	4040      	eors	r0, r0
   113dc:	f380 8811 	msr	BASEPRI, r0
   113e0:	f04f 0004 	mov.w	r0, #4
   113e4:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
   113e6:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   113ea:	f009 fd63 	bl	1aeb4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   113ee:	4601      	mov	r1, r0
   113f0:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   113f4:	f7ff fef4 	bl	111e0 <radio_ar_configure>
   113f8:	e7df      	b.n	113ba <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   113fa:	2300      	movs	r3, #0
   113fc:	461a      	mov	r2, r3
   113fe:	4619      	mov	r1, r3
   11400:	4618      	mov	r0, r3
   11402:	f7ff fcdf 	bl	10dc4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   11406:	4b80      	ldr	r3, [pc, #512]	; (11608 <isr+0x308>)
   11408:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1140c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11410:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   11414:	3008      	adds	r0, #8
   11416:	f7ff fc53 	bl	10cc0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1141a:	f7ff fc8f 	bl	10d3c <radio_is_ready>
   1141e:	b990      	cbnz	r0, 11446 <isr+0x146>
		if (ctrl_rl_enabled()) {
   11420:	f009 ffcc 	bl	1b3bc <ctrl_rl_enabled>
   11424:	b9a8      	cbnz	r0, 11452 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
   11426:	2100      	movs	r1, #0
   11428:	4608      	mov	r0, r1
   1142a:	f7ff fc5b 	bl	10ce4 <radio_rx_chain_delay_get>
   1142e:	4404      	add	r4, r0
		hcto += addr_us_get(0);
   11430:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
   11432:	2100      	movs	r1, #0
   11434:	4608      	mov	r0, r1
   11436:	f7ff fc51 	bl	10cdc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1143a:	1a20      	subs	r0, r4, r0
   1143c:	f7ff fdce 	bl	10fdc <radio_tmr_hcto_configure>
		radio_rssi_measure();
   11440:	f7ff fcd0 	bl	10de4 <radio_rssi_measure>
   11444:	e16d      	b.n	11722 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   11446:	4040      	eors	r0, r0
   11448:	f380 8811 	msr	BASEPRI, r0
   1144c:	f04f 0004 	mov.w	r0, #4
   11450:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
   11452:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   11456:	f009 fd2d 	bl	1aeb4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1145a:	4601      	mov	r1, r0
   1145c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   11460:	f7ff febe 	bl	111e0 <radio_ar_configure>
   11464:	e7df      	b.n	11426 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   11466:	4d68      	ldr	r5, [pc, #416]	; (11608 <isr+0x308>)
   11468:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1146c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
   11470:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   11474:	09d3      	lsrs	r3, r2, #7
   11476:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1147a:	2100      	movs	r1, #0
   1147c:	f000 0007 	and.w	r0, r0, #7
   11480:	f7ff fca0 	bl	10dc4 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
   11484:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
   11488:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   1148c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
   11490:	3108      	adds	r1, #8
   11492:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   11496:	f002 fad3 	bl	13a40 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   1149a:	f7ff fc4f 	bl	10d3c <radio_is_ready>
   1149e:	bb20      	cbnz	r0, 114ea <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   114a0:	4d59      	ldr	r5, [pc, #356]	; (11608 <isr+0x308>)
   114a2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   114a6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   114aa:	2101      	movs	r1, #1
   114ac:	f000 0007 	and.w	r0, r0, #7
   114b0:	f7ff fc18 	bl	10ce4 <radio_rx_chain_delay_get>
   114b4:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   114b6:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   114ba:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
   114be:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   114c2:	2b02      	cmp	r3, #2
   114c4:	d01a      	beq.n	114fc <isr+0x1fc>
   114c6:	2b04      	cmp	r3, #4
   114c8:	d015      	beq.n	114f6 <isr+0x1f6>
		return 40;
   114ca:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   114cc:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   114ce:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
   114d2:	09c1      	lsrs	r1, r0, #7
   114d4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   114d8:	f7ff fc00 	bl	10cdc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   114dc:	1a20      	subs	r0, r4, r0
   114de:	f7ff fd7d 	bl	10fdc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   114e2:	2001      	movs	r0, #1
   114e4:	f002 fb0a 	bl	13afc <packet_tx_enqueue>
   114e8:	e11b      	b.n	11722 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
   114ea:	4040      	eors	r0, r0
   114ec:	f380 8811 	msr	BASEPRI, r0
   114f0:	f04f 0004 	mov.w	r0, #4
   114f4:	df02      	svc	2
		return 376;
   114f6:	f44f 74bc 	mov.w	r4, #376	; 0x178
   114fa:	e7e7      	b.n	114cc <isr+0x1cc>
		return 24;
   114fc:	2418      	movs	r4, #24
   114fe:	e7e5      	b.n	114cc <isr+0x1cc>
		LL_ASSERT(0);
   11500:	4040      	eors	r0, r0
   11502:	f380 8811 	msr	BASEPRI, r0
   11506:	f04f 0004 	mov.w	r0, #4
   1150a:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   1150c:	b144      	cbz	r4, 11520 <isr+0x220>
	switch (_radio.role) {
   1150e:	4b3e      	ldr	r3, [pc, #248]	; (11608 <isr+0x308>)
   11510:	7bdb      	ldrb	r3, [r3, #15]
   11512:	3b01      	subs	r3, #1
   11514:	2b03      	cmp	r3, #3
   11516:	d879      	bhi.n	1160c <isr+0x30c>
   11518:	e8df f003 	tbb	[pc, r3]
   1151c:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
   11520:	2203      	movs	r2, #3
   11522:	4b39      	ldr	r3, [pc, #228]	; (11608 <isr+0x308>)
   11524:	741a      	strb	r2, [r3, #16]
		radio_disable();
   11526:	f7ff fbef 	bl	10d08 <radio_disable>
   1152a:	e0fa      	b.n	11722 <isr+0x422>
		if (crc_ok) {
   1152c:	b94e      	cbnz	r6, 11542 <isr+0x242>
			err = 1;
   1152e:	2001      	movs	r0, #1
		if (err) {
   11530:	2800      	cmp	r0, #0
   11532:	f000 80f6 	beq.w	11722 <isr+0x422>
			_radio.state = STATE_CLOSE;
   11536:	2203      	movs	r2, #3
   11538:	4b33      	ldr	r3, [pc, #204]	; (11608 <isr+0x308>)
   1153a:	741a      	strb	r2, [r3, #16]
			radio_disable();
   1153c:	f7ff fbe4 	bl	10d08 <radio_disable>
   11540:	e0ef      	b.n	11722 <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
   11542:	f8cd 8000 	str.w	r8, [sp]
   11546:	462b      	mov	r3, r5
   11548:	464a      	mov	r2, r9
   1154a:	4651      	mov	r1, sl
   1154c:	4638      	mov	r0, r7
   1154e:	f007 fc37 	bl	18dc0 <isr_rx_adv>
   11552:	e7ed      	b.n	11530 <isr+0x230>
		rl_idx = devmatch_ok ?
   11554:	b9a7      	cbnz	r7, 11580 <isr+0x280>
   11556:	f1b9 0f00 	cmp.w	r9, #0
   1155a:	d11b      	bne.n	11594 <isr+0x294>
   1155c:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
   1155e:	b9f6      	cbnz	r6, 1159e <isr+0x29e>
			err = 1;
   11560:	2001      	movs	r0, #1
		if (err) {
   11562:	2800      	cmp	r0, #0
   11564:	f000 80dd 	beq.w	11722 <isr+0x422>
			_radio.state = STATE_CLOSE;
   11568:	4c27      	ldr	r4, [pc, #156]	; (11608 <isr+0x308>)
   1156a:	2303      	movs	r3, #3
   1156c:	7423      	strb	r3, [r4, #16]
			radio_disable();
   1156e:	f7ff fbcb 	bl	10d08 <radio_disable>
			_radio.scanner.state = 0;
   11572:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   11576:	f36f 0341 	bfc	r3, #1, #1
   1157a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   1157e:	e0d0      	b.n	11722 <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   11580:	4b21      	ldr	r3, [pc, #132]	; (11608 <isr+0x308>)
   11582:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
   11586:	4651      	mov	r1, sl
   11588:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1158c:	f009 fc9c 	bl	1aec8 <ctrl_rl_idx>
   11590:	4604      	mov	r4, r0
   11592:	e7e4      	b.n	1155e <isr+0x25e>
   11594:	4628      	mov	r0, r5
   11596:	f009 fccd 	bl	1af34 <ctrl_rl_irk_idx>
   1159a:	4604      	mov	r4, r0
   1159c:	e7df      	b.n	1155e <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   1159e:	4b1a      	ldr	r3, [pc, #104]	; (11608 <isr+0x308>)
   115a0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115a4:	f013 0f10 	tst.w	r3, #16
   115a8:	d109      	bne.n	115be <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   115aa:	b91f      	cbnz	r7, 115b4 <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115ac:	2301      	movs	r3, #1
		if (crc_ok &&
   115ae:	b9db      	cbnz	r3, 115e8 <isr+0x2e8>
			err = 1;
   115b0:	2001      	movs	r0, #1
   115b2:	e7d6      	b.n	11562 <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115b4:	4621      	mov	r1, r4
   115b6:	4648      	mov	r0, r9
   115b8:	f009 fe1c 	bl	1b1f4 <ctrl_rl_idx_allowed>
   115bc:	b980      	cbnz	r0, 115e0 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   115be:	4b12      	ldr	r3, [pc, #72]	; (11608 <isr+0x308>)
   115c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115c4:	f013 0f10 	tst.w	r3, #16
   115c8:	d00c      	beq.n	115e4 <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   115ca:	b10f      	cbz	r7, 115d0 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115cc:	2301      	movs	r3, #1
   115ce:	e7ee      	b.n	115ae <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   115d0:	4620      	mov	r0, r4
   115d2:	f009 fcd9 	bl	1af88 <ctrl_irk_whitelisted>
   115d6:	b108      	cbz	r0, 115dc <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   115d8:	2301      	movs	r3, #1
   115da:	e7e8      	b.n	115ae <isr+0x2ae>
   115dc:	2300      	movs	r3, #0
   115de:	e7e6      	b.n	115ae <isr+0x2ae>
   115e0:	2301      	movs	r3, #1
   115e2:	e7e4      	b.n	115ae <isr+0x2ae>
   115e4:	2300      	movs	r3, #0
   115e6:	e7e2      	b.n	115ae <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
   115e8:	f8cd 8004 	str.w	r8, [sp, #4]
   115ec:	9400      	str	r4, [sp, #0]
   115ee:	462b      	mov	r3, r5
   115f0:	464a      	mov	r2, r9
   115f2:	4651      	mov	r1, sl
   115f4:	4638      	mov	r0, r7
   115f6:	f006 ffb7 	bl	18568 <isr_rx_scan>
   115fa:	e7b2      	b.n	11562 <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
   115fc:	4642      	mov	r2, r8
   115fe:	4621      	mov	r1, r4
   11600:	4630      	mov	r0, r6
   11602:	f004 fabb 	bl	15b7c <isr_rx_conn>
   11606:	e08c      	b.n	11722 <isr+0x422>
   11608:	20000f7c 	.word	0x20000f7c
		LL_ASSERT(0);
   1160c:	4040      	eors	r0, r0
   1160e:	f380 8811 	msr	BASEPRI, r0
   11612:	f04f 0004 	mov.w	r0, #4
   11616:	df02      	svc	2
	switch (_radio.role) {
   11618:	4bb3      	ldr	r3, [pc, #716]	; (118e8 <isr+0x5e8>)
   1161a:	7bdb      	ldrb	r3, [r3, #15]
   1161c:	b2db      	uxtb	r3, r3
   1161e:	2b04      	cmp	r3, #4
   11620:	f200 82b2 	bhi.w	11b88 <isr+0x888>
   11624:	e8df f013 	tbh	[pc, r3, lsl #1]
   11628:	000502a0 	.word	0x000502a0
   1162c:	00b5006f 	.word	0x00b5006f
   11630:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
   11632:	4bad      	ldr	r3, [pc, #692]	; (118e8 <isr+0x5e8>)
   11634:	7c1b      	ldrb	r3, [r3, #16]
   11636:	2b03      	cmp	r3, #3
   11638:	d00f      	beq.n	1165a <isr+0x35a>
		radio_filter_disable();
   1163a:	f7ff fc1d 	bl	10e78 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   1163e:	4aaa      	ldr	r2, [pc, #680]	; (118e8 <isr+0x5e8>)
   11640:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
   11644:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   11648:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
   1164c:	3320      	adds	r3, #32
   1164e:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
   11650:	7c12      	ldrb	r2, [r2, #16]
   11652:	2a03      	cmp	r2, #3
   11654:	d00f      	beq.n	11676 <isr+0x376>
	u32_t dont_close = 0;
   11656:	2300      	movs	r3, #0
   11658:	e060      	b.n	1171c <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
   1165a:	4ba3      	ldr	r3, [pc, #652]	; (118e8 <isr+0x5e8>)
   1165c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   11660:	f013 0f0e 	tst.w	r3, #14
   11664:	d0e9      	beq.n	1163a <isr+0x33a>
		adv_setup();
   11666:	f002 fca5 	bl	13fb4 <adv_setup>
		radio_tx_enable();
   1166a:	f7ff fb47 	bl	10cfc <radio_tx_enable>
		radio_tmr_end_capture();
   1166e:	f7ff fd0b 	bl	11088 <radio_tmr_end_capture>
		dont_close = 1;
   11672:	2301      	movs	r3, #1
   11674:	e052      	b.n	1171c <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   11676:	79db      	ldrb	r3, [r3, #7]
   11678:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
   1167c:	2b01      	cmp	r3, #1
   1167e:	d040      	beq.n	11702 <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
   11680:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   11684:	2001      	movs	r0, #1
   11686:	f000 fb7d 	bl	11d84 <rand_isr_get>
			random_delay %= 10;
   1168a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1168e:	4a97      	ldr	r2, [pc, #604]	; (118ec <isr+0x5ec>)
   11690:	fba2 1203 	umull	r1, r2, r2, r3
   11694:	08d2      	lsrs	r2, r2, #3
   11696:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1169a:	0051      	lsls	r1, r2, #1
   1169c:	1a5a      	subs	r2, r3, r1
   1169e:	b2d2      	uxtb	r2, r2
			random_delay += 1;
   116a0:	3201      	adds	r2, #1
   116a2:	b2d2      	uxtb	r2, r2
   116a4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
   116a8:	b2d2      	uxtb	r2, r2
   116aa:	4891      	ldr	r0, [pc, #580]	; (118f0 <isr+0x5f0>)
   116ac:	fba2 0100 	umull	r0, r1, r2, r0
   116b0:	23e8      	movs	r3, #232	; 0xe8
   116b2:	fb03 1102 	mla	r1, r3, r2, r1
   116b6:	a38a      	add	r3, pc, #552	; (adr r3, 118e0 <isr+0x5e0>)
   116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   116bc:	f7ef fd1e 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
   116c0:	f640 63a2 	movw	r3, #3746	; 0xea2
   116c4:	9306      	str	r3, [sp, #24]
   116c6:	4b8b      	ldr	r3, [pc, #556]	; (118f4 <isr+0x5f4>)
   116c8:	9305      	str	r3, [sp, #20]
   116ca:	2400      	movs	r4, #0
   116cc:	9404      	str	r4, [sp, #16]
   116ce:	9403      	str	r4, [sp, #12]
   116d0:	9402      	str	r4, [sp, #8]
   116d2:	9401      	str	r4, [sp, #4]
   116d4:	9400      	str	r4, [sp, #0]
   116d6:	b283      	uxth	r3, r0
   116d8:	2205      	movs	r2, #5
   116da:	4621      	mov	r1, r4
   116dc:	4620      	mov	r0, r4
   116de:	f000 fe1d 	bl	1231c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   116e2:	b130      	cbz	r0, 116f2 <isr+0x3f2>
   116e4:	2802      	cmp	r0, #2
   116e6:	d004      	beq.n	116f2 <isr+0x3f2>
   116e8:	4b7f      	ldr	r3, [pc, #508]	; (118e8 <isr+0x5e8>)
   116ea:	7b9b      	ldrb	r3, [r3, #14]
   116ec:	b2db      	uxtb	r3, r3
   116ee:	2b05      	cmp	r3, #5
   116f0:	d101      	bne.n	116f6 <isr+0x3f6>
	u32_t dont_close = 0;
   116f2:	2300      	movs	r3, #0
   116f4:	e012      	b.n	1171c <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   116f6:	4040      	eors	r0, r0
   116f8:	f380 8811 	msr	BASEPRI, r0
   116fc:	f04f 0004 	mov.w	r0, #4
   11700:	df02      	svc	2
	u32_t dont_close = 0;
   11702:	2300      	movs	r3, #0
   11704:	e00a      	b.n	1171c <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
   11706:	4b78      	ldr	r3, [pc, #480]	; (118e8 <isr+0x5e8>)
   11708:	7c1b      	ldrb	r3, [r3, #16]
   1170a:	2b03      	cmp	r3, #3
   1170c:	d00c      	beq.n	11728 <isr+0x428>
		radio_filter_disable();
   1170e:	f7ff fbb3 	bl	10e78 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   11712:	4b75      	ldr	r3, [pc, #468]	; (118e8 <isr+0x5e8>)
   11714:	7c1b      	ldrb	r3, [r3, #16]
   11716:	2b05      	cmp	r3, #5
   11718:	d031      	beq.n	1177e <isr+0x47e>
	u32_t dont_close = 0;
   1171a:	2300      	movs	r3, #0
	if (dont_close) {
   1171c:	2b00      	cmp	r3, #0
   1171e:	f000 8249 	beq.w	11bb4 <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   11722:	b00a      	add	sp, #40	; 0x28
   11724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   11728:	2096      	movs	r0, #150	; 0x96
   1172a:	f7ff fbf5 	bl	10f18 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1172e:	2300      	movs	r3, #0
   11730:	461a      	mov	r2, r3
   11732:	4619      	mov	r1, r3
   11734:	4618      	mov	r0, r3
   11736:	f7ff fb45 	bl	10dc4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   1173a:	4b6b      	ldr	r3, [pc, #428]	; (118e8 <isr+0x5e8>)
   1173c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   11740:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11744:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   11748:	3008      	adds	r0, #8
   1174a:	f7ff fab9 	bl	10cc0 <radio_pkt_rx_set>
		radio_rssi_measure();
   1174e:	f7ff fb49 	bl	10de4 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   11752:	f009 fe33 	bl	1b3bc <ctrl_rl_enabled>
   11756:	b940      	cbnz	r0, 1176a <isr+0x46a>
		_radio.state = STATE_RX;
   11758:	2401      	movs	r4, #1
   1175a:	4b63      	ldr	r3, [pc, #396]	; (118e8 <isr+0x5e8>)
   1175c:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   1175e:	f7ff fac7 	bl	10cf0 <radio_rx_enable>
		radio_tmr_end_capture();
   11762:	f7ff fc91 	bl	11088 <radio_tmr_end_capture>
		dont_close = 1;
   11766:	4623      	mov	r3, r4
   11768:	e7d8      	b.n	1171c <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
   1176a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1176e:	f009 fba1 	bl	1aeb4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   11772:	4601      	mov	r1, r0
   11774:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   11778:	f7ff fd32 	bl	111e0 <radio_ar_configure>
   1177c:	e7ec      	b.n	11758 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1177e:	2400      	movs	r4, #0
   11780:	9400      	str	r4, [sp, #0]
   11782:	4623      	mov	r3, r4
   11784:	2204      	movs	r2, #4
   11786:	4621      	mov	r1, r4
   11788:	4620      	mov	r0, r4
   1178a:	f000 fe15 	bl	123b8 <ticker_stop>
	u32_t dont_close = 0;
   1178e:	4623      	mov	r3, r4
   11790:	e7c4      	b.n	1171c <isr+0x41c>
	if (_radio.conn_curr == 0) {
   11792:	4b55      	ldr	r3, [pc, #340]	; (118e8 <isr+0x5e8>)
   11794:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   11798:	2800      	cmp	r0, #0
   1179a:	f000 81fb 	beq.w	11b94 <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1179e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   117a2:	b141      	cbz	r1, 117b6 <isr+0x4b6>
   117a4:	7bdb      	ldrb	r3, [r3, #15]
   117a6:	b2db      	uxtb	r3, r3
   117a8:	2b03      	cmp	r3, #3
   117aa:	d046      	beq.n	1183a <isr+0x53a>
   117ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   117b0:	f013 0f01 	tst.w	r3, #1
   117b4:	d141      	bne.n	1183a <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
   117b6:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   117ba:	f108 0401 	add.w	r4, r8, #1
   117be:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   117c0:	4b49      	ldr	r3, [pc, #292]	; (118e8 <isr+0x5e8>)
   117c2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   117c6:	2b00      	cmp	r3, #0
   117c8:	f000 80b8 	beq.w	1193c <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
   117cc:	4b46      	ldr	r3, [pc, #280]	; (118e8 <isr+0x5e8>)
   117ce:	7bdb      	ldrb	r3, [r3, #15]
   117d0:	b2db      	uxtb	r3, r3
   117d2:	2b03      	cmp	r3, #3
   117d4:	d03c      	beq.n	11850 <isr+0x550>
		} else if (reason_peer) {
   117d6:	2900      	cmp	r1, #0
   117d8:	f000 80ad 	beq.w	11936 <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
   117dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   117e0:	f043 0301 	orr.w	r3, r3, #1
   117e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   117e8:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   117ea:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   117ec:	4b3e      	ldr	r3, [pc, #248]	; (118e8 <isr+0x5e8>)
   117ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   117f2:	2200      	movs	r2, #0
   117f4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   117f6:	4b3c      	ldr	r3, [pc, #240]	; (118e8 <isr+0x5e8>)
   117f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   117fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   11800:	2b00      	cmp	r3, #0
   11802:	f000 80d8 	beq.w	119b6 <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   11806:	429c      	cmp	r4, r3
   11808:	f080 80c9 	bcs.w	1199e <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1180c:	1b1b      	subs	r3, r3, r4
   1180e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   11812:	4b35      	ldr	r3, [pc, #212]	; (118e8 <isr+0x5e8>)
   11814:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   11818:	2100      	movs	r1, #0
   1181a:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1181c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   11820:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   11824:	2a06      	cmp	r2, #6
   11826:	f240 8130 	bls.w	11a8a <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
   1182a:	4a2f      	ldr	r2, [pc, #188]	; (118e8 <isr+0x5e8>)
   1182c:	7bd2      	ldrb	r2, [r2, #15]
   1182e:	b2d2      	uxtb	r2, r2
   11830:	2a03      	cmp	r2, #3
   11832:	f000 80a2 	beq.w	1197a <isr+0x67a>
	force = 0;
   11836:	2700      	movs	r7, #0
   11838:	e0be      	b.n	119b8 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   1183a:	f004 f90b 	bl	15a54 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   1183e:	4c2a      	ldr	r4, [pc, #168]	; (118e8 <isr+0x5e8>)
   11840:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   11844:	f002 f9b2 	bl	13bac <connection_release>
		_radio.conn_curr = NULL;
   11848:	2300      	movs	r3, #0
   1184a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1184e:	e765      	b.n	1171c <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   11850:	f7ff fc0e 	bl	11070 <radio_tmr_aa_restore>
   11854:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   11856:	f7ff fc11 	bl	1107c <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1185a:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   1185e:	4b22      	ldr	r3, [pc, #136]	; (118e8 <isr+0x5e8>)
   11860:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   11864:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   11868:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   1186c:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   11870:	2b02      	cmp	r3, #2
   11872:	d031      	beq.n	118d8 <isr+0x5d8>
   11874:	2b04      	cmp	r3, #4
   11876:	d02c      	beq.n	118d2 <isr+0x5d2>
		return 40;
   11878:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   1187a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1187c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   1187e:	45ba      	cmp	sl, r7
   11880:	d83c      	bhi.n	118fc <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
   11882:	4e1d      	ldr	r6, [pc, #116]	; (118f8 <isr+0x5f8>)
   11884:	a316      	add	r3, pc, #88	; (adr r3, 118e0 <isr+0x5e0>)
   11886:	e9d3 2300 	ldrd	r2, r3, [r3]
   1188a:	fba0 0106 	umull	r0, r1, r0, r6
   1188e:	f7ef fc35 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   11892:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   11894:	eba7 000a 	sub.w	r0, r7, sl
   11898:	a311      	add	r3, pc, #68	; (adr r3, 118e0 <isr+0x5e0>)
   1189a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1189e:	fba0 0106 	umull	r0, r1, r0, r6
   118a2:	f7ef fc2b 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   118a6:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   118a8:	2200      	movs	r2, #0
   118aa:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   118ae:	4b0e      	ldr	r3, [pc, #56]	; (118e8 <isr+0x5e8>)
   118b0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   118b4:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   118b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   118ba:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   118be:	b38a      	cbz	r2, 11924 <isr+0x624>
				if (pdu_data_tx->len ||
   118c0:	7952      	ldrb	r2, [r2, #5]
   118c2:	b91a      	cbnz	r2, 118cc <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
   118c4:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   118c8:	2a00      	cmp	r2, #0
   118ca:	d08f      	beq.n	117ec <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
   118cc:	2200      	movs	r2, #0
   118ce:	855a      	strh	r2, [r3, #42]	; 0x2a
   118d0:	e78c      	b.n	117ec <isr+0x4ec>
		return 376;
   118d2:	f44f 76bc 	mov.w	r6, #376	; 0x178
   118d6:	e7d0      	b.n	1187a <isr+0x57a>
		return 24;
   118d8:	2618      	movs	r6, #24
   118da:	e7ce      	b.n	1187a <isr+0x57a>
   118dc:	f3af 8000 	nop.w
   118e0:	1afd498d 	.word	0x1afd498d
   118e4:	00000007 	.word	0x00000007
   118e8:	20000f7c 	.word	0x20000f7c
   118ec:	cccccccd 	.word	0xcccccccd
   118f0:	d4a51000 	.word	0xd4a51000
   118f4:	000132fd 	.word	0x000132fd
   118f8:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   118fc:	4faa      	ldr	r7, [pc, #680]	; (11ba8 <isr+0x8a8>)
   118fe:	a3a8      	add	r3, pc, #672	; (adr r3, 11ba0 <isr+0x8a0>)
   11900:	e9d3 2300 	ldrd	r2, r3, [r3]
   11904:	fbaa 0107 	umull	r0, r1, sl, r7
   11908:	f7ef fbf8 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   1190c:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   1190e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   11912:	a3a3      	add	r3, pc, #652	; (adr r3, 11ba0 <isr+0x8a0>)
   11914:	e9d3 2300 	ldrd	r2, r3, [r3]
   11918:	fba0 0107 	umull	r0, r1, r0, r7
   1191c:	f7ef fbee 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   11920:	b286      	uxth	r6, r0
   11922:	e7c1      	b.n	118a8 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   11924:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   11928:	f012 0f01 	tst.w	r2, #1
   1192c:	f43f af5e 	beq.w	117ec <isr+0x4ec>
					_radio.conn_curr->latency;
   11930:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   11932:	855a      	strh	r2, [r3, #42]	; 0x2a
   11934:	e75a      	b.n	117ec <isr+0x4ec>
	ticks_drift_minus = 0;
   11936:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   11938:	4635      	mov	r5, r6
   1193a:	e757      	b.n	117ec <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
   1193c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1193e:	b195      	cbz	r5, 11966 <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   11940:	42ac      	cmp	r4, r5
   11942:	d204      	bcs.n	1194e <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
   11944:	1b2d      	subs	r5, r5, r4
   11946:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   11948:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   1194a:	462e      	mov	r6, r5
   1194c:	e753      	b.n	117f6 <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1194e:	213e      	movs	r1, #62	; 0x3e
   11950:	f004 f880 	bl	15a54 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   11954:	4c95      	ldr	r4, [pc, #596]	; (11bac <isr+0x8ac>)
   11956:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1195a:	f002 f927 	bl	13bac <connection_release>
			_radio.conn_curr = NULL;
   1195e:	2300      	movs	r3, #0
   11960:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   11964:	e6da      	b.n	1171c <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
   11966:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   1196a:	b926      	cbnz	r6, 11976 <isr+0x676>
				_radio.conn_curr->supervision_reload;
   1196c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   1196e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   11972:	4635      	mov	r5, r6
   11974:	e73f      	b.n	117f6 <isr+0x4f6>
	ticks_drift_minus = 0;
   11976:	462e      	mov	r6, r5
   11978:	e73d      	b.n	117f6 <isr+0x4f6>
				if (latency_event != 0) {
   1197a:	f1b8 0f00 	cmp.w	r8, #0
   1197e:	f040 8086 	bne.w	11a8e <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
   11982:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   11984:	087a      	lsrs	r2, r7, #1
   11986:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   11988:	f017 0701 	ands.w	r7, r7, #1
   1198c:	d014      	beq.n	119b8 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
   1198e:	4b87      	ldr	r3, [pc, #540]	; (11bac <isr+0x8ac>)
   11990:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   11994:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   11996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1199a:	66d3      	str	r3, [r2, #108]	; 0x6c
   1199c:	e00c      	b.n	119b8 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1199e:	2108      	movs	r1, #8
   119a0:	f004 f858 	bl	15a54 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   119a4:	4c81      	ldr	r4, [pc, #516]	; (11bac <isr+0x8ac>)
   119a6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   119aa:	f002 f8ff 	bl	13bac <connection_release>
			_radio.conn_curr = NULL;
   119ae:	2300      	movs	r3, #0
   119b0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   119b4:	e6b2      	b.n	1171c <isr+0x41c>
	force = 0;
   119b6:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   119b8:	4b7c      	ldr	r3, [pc, #496]	; (11bac <isr+0x8ac>)
   119ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   119be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   119c2:	b123      	cbz	r3, 119ce <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   119c4:	429c      	cmp	r4, r3
   119c6:	d264      	bcs.n	11a92 <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   119c8:	1b1b      	subs	r3, r3, r4
   119ca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   119ce:	4b77      	ldr	r3, [pc, #476]	; (11bac <isr+0x8ac>)
   119d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   119d4:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   119d8:	b123      	cbz	r3, 119e4 <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   119da:	429c      	cmp	r4, r3
   119dc:	d265      	bcs.n	11aaa <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
   119de:	1b1b      	subs	r3, r3, r4
   119e0:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   119e4:	4b71      	ldr	r3, [pc, #452]	; (11bac <isr+0x8ac>)
   119e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   119ea:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   119ee:	b12b      	cbz	r3, 119fc <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   119f0:	429c      	cmp	r4, r3
   119f2:	f080 8090 	bcs.w	11b16 <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
   119f6:	1b1b      	subs	r3, r3, r4
   119f8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   119fc:	4b6b      	ldr	r3, [pc, #428]	; (11bac <isr+0x8ac>)
   119fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   11a02:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   11a06:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   11a0a:	4299      	cmp	r1, r3
   11a0c:	d006      	beq.n	11a1c <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   11a0e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   11a12:	3b01      	subs	r3, #1
   11a14:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   11a16:	2b01      	cmp	r3, #1
   11a18:	f240 809b 	bls.w	11b52 <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   11a1c:	b937      	cbnz	r7, 11a2c <isr+0x72c>
   11a1e:	4b63      	ldr	r3, [pc, #396]	; (11bac <isr+0x8ac>)
   11a20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   11a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   11a26:	4598      	cmp	r8, r3
   11a28:	f000 8096 	beq.w	11b58 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
   11a2c:	4b5f      	ldr	r3, [pc, #380]	; (11bac <isr+0x8ac>)
   11a2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   11a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   11a34:	3301      	adds	r3, #1
   11a36:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   11a38:	b925      	cbnz	r5, 11a44 <isr+0x744>
   11a3a:	b91e      	cbnz	r6, 11a44 <isr+0x744>
   11a3c:	b913      	cbnz	r3, 11a44 <isr+0x744>
	    (lazy != 0) || (force != 0)) {
   11a3e:	2f00      	cmp	r7, #0
   11a40:	f000 80aa 	beq.w	11b98 <isr+0x898>
				    _radio.conn_curr->handle;
   11a44:	4a59      	ldr	r2, [pc, #356]	; (11bac <isr+0x8ac>)
   11a46:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   11a4a:	f892 4020 	ldrb.w	r4, [r2, #32]
   11a4e:	3407      	adds	r4, #7
   11a50:	b2e4      	uxtb	r4, r4
		ticker_status =
   11a52:	9406      	str	r4, [sp, #24]
   11a54:	4a56      	ldr	r2, [pc, #344]	; (11bb0 <isr+0x8b0>)
   11a56:	9205      	str	r2, [sp, #20]
   11a58:	9704      	str	r7, [sp, #16]
   11a5a:	9303      	str	r3, [sp, #12]
   11a5c:	2000      	movs	r0, #0
   11a5e:	9002      	str	r0, [sp, #8]
   11a60:	9001      	str	r0, [sp, #4]
   11a62:	9600      	str	r6, [sp, #0]
   11a64:	462b      	mov	r3, r5
   11a66:	4622      	mov	r2, r4
   11a68:	4601      	mov	r1, r0
   11a6a:	f000 fc57 	bl	1231c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a6e:	4603      	mov	r3, r0
   11a70:	2800      	cmp	r0, #0
   11a72:	f43f ae53 	beq.w	1171c <isr+0x41c>
   11a76:	2802      	cmp	r0, #2
   11a78:	f000 8090 	beq.w	11b9c <isr+0x89c>
   11a7c:	4b4b      	ldr	r3, [pc, #300]	; (11bac <isr+0x8ac>)
   11a7e:	7b9b      	ldrb	r3, [r3, #14]
   11a80:	b2db      	uxtb	r3, r3
   11a82:	429c      	cmp	r4, r3
   11a84:	d16a      	bne.n	11b5c <isr+0x85c>
	u32_t dont_close = 0;
   11a86:	2300      	movs	r3, #0
   11a88:	e648      	b.n	1171c <isr+0x41c>
				force = 1;
   11a8a:	2701      	movs	r7, #1
   11a8c:	e794      	b.n	119b8 <isr+0x6b8>
					force = 1;
   11a8e:	2701      	movs	r7, #1
   11a90:	e792      	b.n	119b8 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   11a92:	2122      	movs	r1, #34	; 0x22
   11a94:	f003 ffde 	bl	15a54 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   11a98:	4c44      	ldr	r4, [pc, #272]	; (11bac <isr+0x8ac>)
   11a9a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   11a9e:	f002 f885 	bl	13bac <connection_release>
			_radio.conn_curr = NULL;
   11aa2:	2300      	movs	r3, #0
   11aa4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   11aa8:	e638      	b.n	1171c <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
   11aaa:	2300      	movs	r3, #0
   11aac:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   11ab0:	4b3e      	ldr	r3, [pc, #248]	; (11bac <isr+0x8ac>)
   11ab2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   11ab6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11aba:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   11abc:	429a      	cmp	r2, r3
   11abe:	d318      	bcc.n	11af2 <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   11ac0:	4b3a      	ldr	r3, [pc, #232]	; (11bac <isr+0x8ac>)
   11ac2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   11ac6:	1ad3      	subs	r3, r2, r3
   11ac8:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   11aca:	2b01      	cmp	r3, #1
   11acc:	d91b      	bls.n	11b06 <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   11ace:	4b37      	ldr	r3, [pc, #220]	; (11bac <isr+0x8ac>)
   11ad0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   11ad4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   11adc:	b1ab      	cbz	r3, 11b0a <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   11ade:	4a33      	ldr	r2, [pc, #204]	; (11bac <isr+0x8ac>)
   11ae0:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   11ae4:	8c12      	ldrh	r2, [r2, #32]
   11ae6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   11ae8:	220a      	movs	r2, #10
   11aea:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   11aec:	f003 ff3e 	bl	1596c <packet_rx_enqueue>
   11af0:	e778      	b.n	119e4 <isr+0x6e4>
		return (_radio.packet_rx_count -
   11af2:	492e      	ldr	r1, [pc, #184]	; (11bac <isr+0x8ac>)
   11af4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   11af8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   11afc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   11afe:	fa52 f383 	uxtab	r3, r2, r3
   11b02:	b2db      	uxtb	r3, r3
   11b04:	e7e1      	b.n	11aca <isr+0x7ca>
		return 0;
   11b06:	2300      	movs	r3, #0
   11b08:	e7e8      	b.n	11adc <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
   11b0a:	4040      	eors	r0, r0
   11b0c:	f380 8811 	msr	BASEPRI, r0
   11b10:	f04f 0004 	mov.w	r0, #4
   11b14:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   11b16:	2300      	movs	r3, #0
   11b18:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   11b1c:	4b23      	ldr	r3, [pc, #140]	; (11bac <isr+0x8ac>)
   11b1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   11b22:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   11b26:	2a00      	cmp	r2, #0
   11b28:	f47f af68 	bne.w	119fc <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
   11b2c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   11b30:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   11b34:	4291      	cmp	r1, r2
   11b36:	f47f af61 	bne.w	119fc <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
   11b3a:	2207      	movs	r2, #7
   11b3c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   11b40:	4b1a      	ldr	r3, [pc, #104]	; (11bac <isr+0x8ac>)
   11b42:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   11b46:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   11b4a:	3b01      	subs	r3, #1
   11b4c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   11b50:	e754      	b.n	119fc <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
   11b52:	2300      	movs	r3, #0
   11b54:	8553      	strh	r3, [r2, #42]	; 0x2a
   11b56:	e761      	b.n	11a1c <isr+0x71c>
	lazy = 0;
   11b58:	2300      	movs	r3, #0
   11b5a:	e76d      	b.n	11a38 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b5c:	4040      	eors	r0, r0
   11b5e:	f380 8811 	msr	BASEPRI, r0
   11b62:	f04f 0004 	mov.w	r0, #4
   11b66:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   11b68:	4b10      	ldr	r3, [pc, #64]	; (11bac <isr+0x8ac>)
   11b6a:	7c1b      	ldrb	r3, [r3, #16]
   11b6c:	3b04      	subs	r3, #4
   11b6e:	b2db      	uxtb	r3, r3
   11b70:	2b01      	cmp	r3, #1
   11b72:	d803      	bhi.n	11b7c <isr+0x87c>
		_radio.state = STATE_NONE;
   11b74:	2200      	movs	r2, #0
   11b76:	4b0d      	ldr	r3, [pc, #52]	; (11bac <isr+0x8ac>)
   11b78:	741a      	strb	r2, [r3, #16]
   11b7a:	e5d2      	b.n	11722 <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   11b7c:	4040      	eors	r0, r0
   11b7e:	f380 8811 	msr	BASEPRI, r0
   11b82:	f04f 0004 	mov.w	r0, #4
   11b86:	df02      	svc	2
		LL_ASSERT(0);
   11b88:	4040      	eors	r0, r0
   11b8a:	f380 8811 	msr	BASEPRI, r0
   11b8e:	f04f 0004 	mov.w	r0, #4
   11b92:	df02      	svc	2
	u32_t dont_close = 0;
   11b94:	2300      	movs	r3, #0
   11b96:	e5c1      	b.n	1171c <isr+0x41c>
   11b98:	2300      	movs	r3, #0
   11b9a:	e5bf      	b.n	1171c <isr+0x41c>
   11b9c:	2300      	movs	r3, #0
   11b9e:	e5bd      	b.n	1171c <isr+0x41c>
   11ba0:	1afd498d 	.word	0x1afd498d
   11ba4:	00000007 	.word	0x00000007
   11ba8:	3b9aca00 	.word	0x3b9aca00
   11bac:	20000f7c 	.word	0x20000f7c
   11bb0:	0001331d 	.word	0x0001331d
	_radio.role = ROLE_NONE;
   11bb4:	4d0e      	ldr	r5, [pc, #56]	; (11bf0 <isr+0x8f0>)
   11bb6:	2400      	movs	r4, #0
   11bb8:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   11bba:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   11bbc:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   11bbe:	f7ff fa05 	bl	10fcc <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   11bc2:	4623      	mov	r3, r4
   11bc4:	4622      	mov	r2, r4
   11bc6:	4621      	mov	r1, r4
   11bc8:	4620      	mov	r0, r4
   11bca:	f001 fe29 	bl	13820 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   11bce:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   11bd0:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   11bd2:	685b      	ldr	r3, [r3, #4]
   11bd4:	4621      	mov	r1, r4
   11bd6:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11bd8:	2201      	movs	r2, #1
   11bda:	4611      	mov	r1, r2
   11bdc:	4620      	mov	r0, r4
   11bde:	f7fe fcff 	bl	105e0 <mayfly_enable>
   11be2:	e59e      	b.n	11722 <isr+0x422>
		LL_ASSERT(0);
   11be4:	4040      	eors	r0, r0
   11be6:	f380 8811 	msr	BASEPRI, r0
   11bea:	f04f 0004 	mov.w	r0, #4
   11bee:	df02      	svc	2
   11bf0:	20000f7c 	.word	0x20000f7c

00011bf4 <init>:
{
   11bf4:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   11bf6:	1d1c      	adds	r4, r3, #4
   11bf8:	42a2      	cmp	r2, r4
   11bfa:	d90e      	bls.n	11c1a <init+0x26>
	*rng = (struct rand *)context;
   11bfc:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   11bfe:	3a04      	subs	r2, #4
   11c00:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   11c02:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   11c04:	2300      	movs	r3, #0
   11c06:	70cb      	strb	r3, [r1, #3]
   11c08:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   11c0a:	4b0c      	ldr	r3, [pc, #48]	; (11c3c <init+0x48>)
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	b153      	cbz	r3, 11c26 <init+0x32>
   11c10:	4b0b      	ldr	r3, [pc, #44]	; (11c40 <init+0x4c>)
   11c12:	681b      	ldr	r3, [r3, #0]
   11c14:	b13b      	cbz	r3, 11c26 <init+0x32>
}
   11c16:	bc10      	pop	{r4}
   11c18:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   11c1a:	4040      	eors	r0, r0
   11c1c:	f380 8811 	msr	BASEPRI, r0
   11c20:	f04f 0004 	mov.w	r0, #4
   11c24:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   11c26:	4b07      	ldr	r3, [pc, #28]	; (11c44 <init+0x50>)
   11c28:	2201      	movs	r2, #1
   11c2a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   11c2e:	2100      	movs	r1, #0
   11c30:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   11c34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   11c38:	601a      	str	r2, [r3, #0]
}
   11c3a:	e7ec      	b.n	11c16 <init+0x22>
   11c3c:	20000ecc 	.word	0x20000ecc
   11c40:	20000ed0 	.word	0x20000ed0
   11c44:	4000d000 	.word	0x4000d000

00011c48 <get>:
	LL_ASSERT(rng);
   11c48:	b1d0      	cbz	r0, 11c80 <get+0x38>
{
   11c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c4e:	4607      	mov	r7, r0
	first = rng->first;
   11c50:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   11c54:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   11c56:	45ae      	cmp	lr, r5
   11c58:	d82e      	bhi.n	11cb8 <get+0x70>
		d = &rand[octets];
   11c5a:	440a      	add	r2, r1
		s = &rng->rand[first];
   11c5c:	eb00 060e 	add.w	r6, r0, lr
   11c60:	3604      	adds	r6, #4
		avail = last - first;
   11c62:	eba5 040e 	sub.w	r4, r5, lr
   11c66:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   11c68:	42a1      	cmp	r1, r4
   11c6a:	d20f      	bcs.n	11c8c <get+0x44>
			remaining = avail - octets;
   11c6c:	b2cb      	uxtb	r3, r1
   11c6e:	1ae4      	subs	r4, r4, r3
   11c70:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   11c74:	461c      	mov	r4, r3
		first += avail;
   11c76:	44a6      	add	lr, r4
   11c78:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   11c7c:	1b08      	subs	r0, r1, r4
		while (avail--) {
   11c7e:	e00d      	b.n	11c9c <get+0x54>
	LL_ASSERT(rng);
   11c80:	4040      	eors	r0, r0
   11c82:	f380 8811 	msr	BASEPRI, r0
   11c86:	f04f 0004 	mov.w	r0, #4
   11c8a:	df02      	svc	2
			remaining = 0;
   11c8c:	f04f 0c00 	mov.w	ip, #0
   11c90:	e7f1      	b.n	11c76 <get+0x2e>
			*(--d) = *s++;
   11c92:	7835      	ldrb	r5, [r6, #0]
   11c94:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   11c98:	461c      	mov	r4, r3
			*(--d) = *s++;
   11c9a:	3601      	adds	r6, #1
		while (avail--) {
   11c9c:	1e63      	subs	r3, r4, #1
   11c9e:	b2db      	uxtb	r3, r3
   11ca0:	2c00      	cmp	r4, #0
   11ca2:	d1f6      	bne.n	11c92 <get+0x4a>
		rng->first = first;
   11ca4:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   11ca8:	787b      	ldrb	r3, [r7, #1]
   11caa:	459c      	cmp	ip, r3
   11cac:	d202      	bcs.n	11cb4 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   11cae:	2201      	movs	r2, #1
   11cb0:	4b24      	ldr	r3, [pc, #144]	; (11d44 <get+0xfc>)
   11cb2:	601a      	str	r2, [r3, #0]
}
   11cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   11cb8:	440a      	add	r2, r1
		s = &rng->rand[first];
   11cba:	eb00 080e 	add.w	r8, r0, lr
   11cbe:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   11cc2:	7804      	ldrb	r4, [r0, #0]
   11cc4:	eba4 040e 	sub.w	r4, r4, lr
   11cc8:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   11cca:	42a1      	cmp	r1, r4
   11ccc:	d20d      	bcs.n	11cea <get+0xa2>
			remaining = avail + last - octets;
   11cce:	eb05 0c04 	add.w	ip, r5, r4
   11cd2:	fa5f fc8c 	uxtb.w	ip, ip
   11cd6:	b2cc      	uxtb	r4, r1
   11cd8:	ebac 0c04 	sub.w	ip, ip, r4
   11cdc:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   11ce0:	44a6      	add	lr, r4
   11ce2:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   11ce6:	1b08      	subs	r0, r1, r4
		while (avail--) {
   11ce8:	e00a      	b.n	11d00 <get+0xb8>
			remaining = last;
   11cea:	46ac      	mov	ip, r5
			first = 0;
   11cec:	f04f 0e00 	mov.w	lr, #0
   11cf0:	e7f9      	b.n	11ce6 <get+0x9e>
			*(--d) = *s++;
   11cf2:	f898 6000 	ldrb.w	r6, [r8]
   11cf6:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   11cfa:	461c      	mov	r4, r3
			*(--d) = *s++;
   11cfc:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   11d00:	1e63      	subs	r3, r4, #1
   11d02:	b2db      	uxtb	r3, r3
   11d04:	2c00      	cmp	r4, #0
   11d06:	d1f4      	bne.n	11cf2 <get+0xaa>
		if (octets && last) {
   11d08:	b1c8      	cbz	r0, 11d3e <get+0xf6>
   11d0a:	b1c5      	cbz	r5, 11d3e <get+0xf6>
			s = &rng->rand[0];
   11d0c:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   11d0e:	42a8      	cmp	r0, r5
   11d10:	d206      	bcs.n	11d20 <get+0xd8>
				remaining = last - octets;
   11d12:	fa5f fe80 	uxtb.w	lr, r0
   11d16:	eba5 040e 	sub.w	r4, r5, lr
   11d1a:	fa5f fc84 	uxtb.w	ip, r4
   11d1e:	e001      	b.n	11d24 <get+0xdc>
				remaining = 0;
   11d20:	46a4      	mov	ip, r4
	last = rng->last;
   11d22:	46ae      	mov	lr, r5
			octets -= last;
   11d24:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   11d28:	4671      	mov	r1, lr
   11d2a:	e004      	b.n	11d36 <get+0xee>
				*(--d) = *s++;
   11d2c:	7831      	ldrb	r1, [r6, #0]
   11d2e:	f802 1d01 	strb.w	r1, [r2, #-1]!
   11d32:	3601      	adds	r6, #1
			while (last--) {
   11d34:	4619      	mov	r1, r3
   11d36:	1e4b      	subs	r3, r1, #1
   11d38:	b2db      	uxtb	r3, r3
   11d3a:	2900      	cmp	r1, #0
   11d3c:	d1f6      	bne.n	11d2c <get+0xe4>
		rng->first = first;
   11d3e:	f887 e002 	strb.w	lr, [r7, #2]
   11d42:	e7b1      	b.n	11ca8 <get+0x60>
   11d44:	4000d000 	.word	0x4000d000

00011d48 <rand_init>:
{
   11d48:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   11d4a:	4613      	mov	r3, r2
   11d4c:	460a      	mov	r2, r1
   11d4e:	4601      	mov	r1, r0
   11d50:	4801      	ldr	r0, [pc, #4]	; (11d58 <rand_init+0x10>)
   11d52:	f7ff ff4f 	bl	11bf4 <init>
   11d56:	bd08      	pop	{r3, pc}
   11d58:	20000ed0 	.word	0x20000ed0

00011d5c <rand_isr_init>:
{
   11d5c:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   11d5e:	4613      	mov	r3, r2
   11d60:	460a      	mov	r2, r1
   11d62:	4601      	mov	r1, r0
   11d64:	4801      	ldr	r0, [pc, #4]	; (11d6c <rand_isr_init+0x10>)
   11d66:	f7ff ff45 	bl	11bf4 <init>
   11d6a:	bd08      	pop	{r3, pc}
   11d6c:	20000ecc 	.word	0x20000ecc

00011d70 <rand_get>:
{
   11d70:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   11d72:	460a      	mov	r2, r1
   11d74:	4601      	mov	r1, r0
   11d76:	4b02      	ldr	r3, [pc, #8]	; (11d80 <rand_get+0x10>)
   11d78:	6818      	ldr	r0, [r3, #0]
   11d7a:	f7ff ff65 	bl	11c48 <get>
}
   11d7e:	bd08      	pop	{r3, pc}
   11d80:	20000ed0 	.word	0x20000ed0

00011d84 <rand_isr_get>:
{
   11d84:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   11d86:	460a      	mov	r2, r1
   11d88:	4601      	mov	r1, r0
   11d8a:	4b02      	ldr	r3, [pc, #8]	; (11d94 <rand_isr_get+0x10>)
   11d8c:	6818      	ldr	r0, [r3, #0]
   11d8e:	f7ff ff5b 	bl	11c48 <get>
}
   11d92:	bd08      	pop	{r3, pc}
   11d94:	20000ecc 	.word	0x20000ecc

00011d98 <isr_rand>:

void isr_rand(void *param)
{
   11d98:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   11d9a:	4b10      	ldr	r3, [pc, #64]	; (11ddc <isr_rand+0x44>)
   11d9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   11da0:	b903      	cbnz	r3, 11da4 <isr_rand+0xc>
   11da2:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   11da4:	2101      	movs	r1, #1
   11da6:	4b0e      	ldr	r3, [pc, #56]	; (11de0 <isr_rand+0x48>)
   11da8:	6818      	ldr	r0, [r3, #0]
   11daa:	f7ff fa79 	bl	112a0 <isr>
		if (ret != -EBUSY) {
   11dae:	f110 0f10 	cmn.w	r0, #16
   11db2:	d008      	beq.n	11dc6 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   11db4:	f110 0f69 	cmn.w	r0, #105	; 0x69
   11db8:	bf14      	ite	ne
   11dba:	2100      	movne	r1, #0
   11dbc:	2101      	moveq	r1, #1
   11dbe:	4b09      	ldr	r3, [pc, #36]	; (11de4 <isr_rand+0x4c>)
   11dc0:	6818      	ldr	r0, [r3, #0]
   11dc2:	f7ff fa6d 	bl	112a0 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   11dc6:	2200      	movs	r2, #0
   11dc8:	4b04      	ldr	r3, [pc, #16]	; (11ddc <isr_rand+0x44>)
   11dca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   11dce:	f110 0f10 	cmn.w	r0, #16
   11dd2:	d0e6      	beq.n	11da2 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   11dd4:	2201      	movs	r2, #1
   11dd6:	605a      	str	r2, [r3, #4]
		}
	}
}
   11dd8:	e7e3      	b.n	11da2 <isr_rand+0xa>
   11dda:	bf00      	nop
   11ddc:	4000d000 	.word	0x4000d000
   11de0:	20000ecc 	.word	0x20000ecc
   11de4:	20000ed0 	.word	0x20000ed0

00011de8 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   11de8:	29ff      	cmp	r1, #255	; 0xff
   11dea:	d012      	beq.n	11e12 <ticker_by_slot_get+0x2a>
{
   11dec:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   11dee:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   11df2:	00a3      	lsls	r3, r4, #2
   11df4:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   11df6:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   11df8:	42aa      	cmp	r2, r5
   11dfa:	d906      	bls.n	11e0a <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   11dfc:	8ae4      	ldrh	r4, [r4, #22]
   11dfe:	b92c      	cbnz	r4, 11e0c <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   11e00:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   11e02:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   11e04:	29ff      	cmp	r1, #255	; 0xff
   11e06:	d1f2      	bne.n	11dee <ticker_by_slot_get+0x6>
   11e08:	e000      	b.n	11e0c <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   11e0a:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   11e0c:	4608      	mov	r0, r1
   11e0e:	bc30      	pop	{r4, r5}
   11e10:	4770      	bx	lr
   11e12:	4608      	mov	r0, r1
   11e14:	4770      	bx	lr

00011e16 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   11e16:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e18:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   11e1a:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   11e1c:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   11e20:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   11e22:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   11e26:	d004      	beq.n	11e32 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   11e28:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11e2a:	f8dc 4000 	ldr.w	r4, [ip]
   11e2e:	4294      	cmp	r4, r2
   11e30:	d005      	beq.n	11e3e <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   11e32:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   11e34:	6940      	ldr	r0, [r0, #20]
   11e36:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   11e3a:	2600      	movs	r6, #0
   11e3c:	e00a      	b.n	11e54 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   11e3e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   11e42:	ea4f 028e 	mov.w	r2, lr, lsl #2
   11e46:	4696      	mov	lr, r2
   11e48:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   11e4a:	5cbc      	ldrb	r4, [r7, r2]
   11e4c:	e002      	b.n	11e54 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   11e4e:	68a8      	ldr	r0, [r5, #8]
   11e50:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   11e52:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   11e54:	2cff      	cmp	r4, #255	; 0xff
   11e56:	d006      	beq.n	11e66 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   11e58:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   11e5c:	0082      	lsls	r2, r0, #2
   11e5e:	18bd      	adds	r5, r7, r2
   11e60:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   11e62:	2800      	cmp	r0, #0
   11e64:	d0f3      	beq.n	11e4e <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   11e66:	2cff      	cmp	r4, #255	; 0xff
   11e68:	d001      	beq.n	11e6e <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   11e6a:	68aa      	ldr	r2, [r5, #8]
   11e6c:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   11e6e:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   11e70:	601e      	str	r6, [r3, #0]
   11e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011e74 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   11e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e78:	b085      	sub	sp, #20
   11e7a:	4681      	mov	r9, r0
   11e7c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   11e7e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   11e80:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   11e84:	009b      	lsls	r3, r3, #2
   11e86:	9303      	str	r3, [sp, #12]
   11e88:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   11e8c:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   11e90:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   11e94:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   11e96:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   11e98:	23ff      	movs	r3, #255	; 0xff
   11e9a:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   11e9c:	e004      	b.n	11ea8 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   11e9e:	4297      	cmp	r7, r2
   11ea0:	d912      	bls.n	11ec8 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   11ea2:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   11ea4:	46a0      	mov	r8, r4
		current = ticker_current->next;
   11ea6:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   11ea8:	2cff      	cmp	r4, #255	; 0xff
   11eaa:	d00f      	beq.n	11ecc <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   11eac:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   11eb0:	0093      	lsls	r3, r2, #2
   11eb2:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   11eb4:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   11eb6:	4295      	cmp	r5, r2
   11eb8:	d908      	bls.n	11ecc <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   11eba:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   11ebc:	8ac9      	ldrh	r1, [r1, #22]
   11ebe:	2900      	cmp	r1, #0
   11ec0:	d0ed      	beq.n	11e9e <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   11ec2:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   11ec4:	9401      	str	r4, [sp, #4]
   11ec6:	e7ed      	b.n	11ea4 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   11ec8:	2700      	movs	r7, #0
   11eca:	e7eb      	b.n	11ea4 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   11ecc:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   11ed0:	eb05 020b 	add.w	r2, r5, fp
   11ed4:	4621      	mov	r1, r4
   11ed6:	4630      	mov	r0, r6
   11ed8:	f7ff ff86 	bl	11de8 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   11edc:	f1bb 0f00 	cmp.w	fp, #0
   11ee0:	d007      	beq.n	11ef2 <ticker_enqueue+0x7e>
   11ee2:	42af      	cmp	r7, r5
   11ee4:	d801      	bhi.n	11eea <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   11ee6:	28ff      	cmp	r0, #255	; 0xff
   11ee8:	d003      	beq.n	11ef2 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   11eea:	42af      	cmp	r7, r5
   11eec:	d918      	bls.n	11f20 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   11eee:	9801      	ldr	r0, [sp, #4]
   11ef0:	e016      	b.n	11f20 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   11ef2:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   11ef6:	9b03      	ldr	r3, [sp, #12]
   11ef8:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   11efa:	45a0      	cmp	r8, r4
   11efc:	d013      	beq.n	11f26 <ticker_enqueue+0xb2>
			node[previous].next = id;
   11efe:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   11f02:	ea4f 0388 	mov.w	r3, r8, lsl #2
   11f06:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11f0a:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   11f0c:	2cff      	cmp	r4, #255	; 0xff
   11f0e:	d00f      	beq.n	11f30 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   11f10:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11f14:	00a3      	lsls	r3, r4, #2
   11f16:	441e      	add	r6, r3
   11f18:	68b3      	ldr	r3, [r6, #8]
   11f1a:	1b5d      	subs	r5, r3, r5
   11f1c:	60b5      	str	r5, [r6, #8]
   11f1e:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   11f20:	b005      	add	sp, #20
   11f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   11f26:	f89d 3008 	ldrb.w	r3, [sp, #8]
   11f2a:	f889 3018 	strb.w	r3, [r9, #24]
   11f2e:	e7ed      	b.n	11f0c <ticker_enqueue+0x98>
   11f30:	9802      	ldr	r0, [sp, #8]
   11f32:	e7f5      	b.n	11f20 <ticker_enqueue+0xac>

00011f34 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   11f34:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   11f36:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   11f38:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   11f3a:	463b      	mov	r3, r7
	total = 0;
   11f3c:	2500      	movs	r5, #0
	ticker_current = 0;
   11f3e:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   11f40:	2bff      	cmp	r3, #255	; 0xff
   11f42:	d00a      	beq.n	11f5a <ticker_dequeue+0x26>

		ticker_current = &node[current];
   11f44:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   11f48:	00a2      	lsls	r2, r4, #2
   11f4a:	18b4      	adds	r4, r6, r2

		if (current == id) {
   11f4c:	428b      	cmp	r3, r1
   11f4e:	d004      	beq.n	11f5a <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   11f50:	68a7      	ldr	r7, [r4, #8]
   11f52:	443d      	add	r5, r7
		previous = current;
   11f54:	461f      	mov	r7, r3
		current = ticker_current->next;
   11f56:	5cb3      	ldrb	r3, [r6, r2]
   11f58:	e7f2      	b.n	11f40 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   11f5a:	2bff      	cmp	r3, #255	; 0xff
   11f5c:	d017      	beq.n	11f8e <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   11f5e:	429f      	cmp	r7, r3
   11f60:	d012      	beq.n	11f88 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   11f62:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   11f64:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   11f68:	00bb      	lsls	r3, r7, #2
   11f6a:	7822      	ldrb	r2, [r4, #0]
   11f6c:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   11f6e:	7823      	ldrb	r3, [r4, #0]
   11f70:	2bff      	cmp	r3, #255	; 0xff
   11f72:	d006      	beq.n	11f82 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   11f74:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11f78:	009a      	lsls	r2, r3, #2
   11f7a:	4416      	add	r6, r2
   11f7c:	68b3      	ldr	r3, [r6, #8]
   11f7e:	4403      	add	r3, r0
   11f80:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   11f82:	4428      	add	r0, r5
}
   11f84:	bcf0      	pop	{r4, r5, r6, r7}
   11f86:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   11f88:	7823      	ldrb	r3, [r4, #0]
   11f8a:	7603      	strb	r3, [r0, #24]
   11f8c:	e7e9      	b.n	11f62 <ticker_dequeue+0x2e>
		return 0;
   11f8e:	2000      	movs	r0, #0
   11f90:	e7f8      	b.n	11f84 <ticker_dequeue+0x50>
	...

00011f94 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   11f94:	69c3      	ldr	r3, [r0, #28]
   11f96:	6a02      	ldr	r2, [r0, #32]
   11f98:	4413      	add	r3, r2
   11f9a:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   11f9c:	4a05      	ldr	r2, [pc, #20]	; (11fb4 <ticker_remainder_inc+0x20>)
   11f9e:	441a      	add	r2, r3
   11fa0:	4905      	ldr	r1, [pc, #20]	; (11fb8 <ticker_remainder_inc+0x24>)
   11fa2:	428a      	cmp	r2, r1
   11fa4:	d804      	bhi.n	11fb0 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   11fa6:	4a05      	ldr	r2, [pc, #20]	; (11fbc <ticker_remainder_inc+0x28>)
   11fa8:	441a      	add	r2, r3
   11faa:	6202      	str	r2, [r0, #32]
		return 1;
   11fac:	2001      	movs	r0, #1
   11fae:	4770      	bx	lr
	}
	return 0;
   11fb0:	2000      	movs	r0, #0
}
   11fb2:	4770      	bx	lr
   11fb4:	ff172b5a 	.word	0xff172b5a
   11fb8:	7f172b59 	.word	0x7f172b59
   11fbc:	fe2e56b6 	.word	0xfe2e56b6

00011fc0 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   11fc0:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   11fc2:	6a01      	ldr	r1, [r0, #32]
   11fc4:	4a07      	ldr	r2, [pc, #28]	; (11fe4 <ticker_remainder_dec+0x24>)
   11fc6:	440a      	add	r2, r1
   11fc8:	4807      	ldr	r0, [pc, #28]	; (11fe8 <ticker_remainder_dec+0x28>)
   11fca:	4282      	cmp	r2, r0
   11fcc:	d908      	bls.n	11fe0 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   11fce:	4a07      	ldr	r2, [pc, #28]	; (11fec <ticker_remainder_dec+0x2c>)
   11fd0:	440a      	add	r2, r1
   11fd2:	621a      	str	r2, [r3, #32]
		decrement++;
   11fd4:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   11fd6:	69d9      	ldr	r1, [r3, #28]
   11fd8:	6a1a      	ldr	r2, [r3, #32]
   11fda:	1a52      	subs	r2, r2, r1
   11fdc:	621a      	str	r2, [r3, #32]

	return decrement;
}
   11fde:	4770      	bx	lr
	u8_t decrement = 0;
   11fe0:	2000      	movs	r0, #0
   11fe2:	e7f8      	b.n	11fd6 <ticker_remainder_dec+0x16>
   11fe4:	ff172b5a 	.word	0xff172b5a
   11fe8:	7f172b59 	.word	0x7f172b59
   11fec:	01d1a94a 	.word	0x01d1a94a

00011ff0 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   11ff0:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11ff2:	2300      	movs	r3, #0
   11ff4:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   11ff6:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   11ff8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   11ffa:	b11c      	cbz	r4, 12004 <ticker_job_op_cb+0x14>
   11ffc:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11ffe:	6a81      	ldr	r1, [r0, #40]	; 0x28
   12000:	4610      	mov	r0, r2
   12002:	47a0      	blx	r4
   12004:	bd10      	pop	{r4, pc}

00012006 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   12006:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   12008:	4601      	mov	r1, r0
   1200a:	2001      	movs	r0, #1
   1200c:	f7fe fd3e 	bl	10a8c <cntr_cmp_set>
   12010:	bd08      	pop	{r3, pc}

00012012 <ticker_instance0_cmp_set>:
{
   12012:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   12014:	4601      	mov	r1, r0
   12016:	2000      	movs	r0, #0
   12018:	f7fe fd38 	bl	10a8c <cntr_cmp_set>
   1201c:	bd08      	pop	{r3, pc}
	...

00012020 <ticker_instance1_sched>:
{
   12020:	b508      	push	{r3, lr}
	switch (caller_id) {
   12022:	2803      	cmp	r0, #3
   12024:	d841      	bhi.n	120aa <ticker_instance1_sched+0x8a>
   12026:	e8df f000 	tbb	[pc, r0]
   1202a:	1002      	.short	0x1002
   1202c:	331d      	.short	0x331d
		switch (callee_id) {
   1202e:	2901      	cmp	r1, #1
   12030:	d105      	bne.n	1203e <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   12032:	4b21      	ldr	r3, [pc, #132]	; (120b8 <ticker_instance1_sched+0x98>)
   12034:	2102      	movs	r1, #2
   12036:	2000      	movs	r0, #0
   12038:	f7fe fb10 	bl	1065c <mayfly_enqueue>
		break;
   1203c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1203e:	4040      	eors	r0, r0
   12040:	f380 8811 	msr	BASEPRI, r0
   12044:	f04f 0004 	mov.w	r0, #4
   12048:	df02      	svc	2
		switch (callee_id) {
   1204a:	2902      	cmp	r1, #2
   1204c:	d104      	bne.n	12058 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1204e:	4b1b      	ldr	r3, [pc, #108]	; (120bc <ticker_instance1_sched+0x9c>)
   12050:	4608      	mov	r0, r1
   12052:	f7fe fb03 	bl	1065c <mayfly_enqueue>
		break;
   12056:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   12058:	4040      	eors	r0, r0
   1205a:	f380 8811 	msr	BASEPRI, r0
   1205e:	f04f 0004 	mov.w	r0, #4
   12062:	df02      	svc	2
		switch (callee_id) {
   12064:	2901      	cmp	r1, #1
   12066:	d007      	beq.n	12078 <ticker_instance1_sched+0x58>
   12068:	2902      	cmp	r1, #2
   1206a:	d00b      	beq.n	12084 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   1206c:	4040      	eors	r0, r0
   1206e:	f380 8811 	msr	BASEPRI, r0
   12072:	f04f 0004 	mov.w	r0, #4
   12076:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   12078:	4b11      	ldr	r3, [pc, #68]	; (120c0 <ticker_instance1_sched+0xa0>)
   1207a:	2102      	movs	r1, #2
   1207c:	4608      	mov	r0, r1
   1207e:	f7fe faed 	bl	1065c <mayfly_enqueue>
		break;
   12082:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   12084:	4b0f      	ldr	r3, [pc, #60]	; (120c4 <ticker_instance1_sched+0xa4>)
   12086:	2102      	movs	r1, #2
   12088:	4608      	mov	r0, r1
   1208a:	f7fe fae7 	bl	1065c <mayfly_enqueue>
		break;
   1208e:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   12090:	2902      	cmp	r1, #2
   12092:	d104      	bne.n	1209e <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   12094:	4b0c      	ldr	r3, [pc, #48]	; (120c8 <ticker_instance1_sched+0xa8>)
   12096:	2003      	movs	r0, #3
   12098:	f7fe fae0 	bl	1065c <mayfly_enqueue>
		break;
   1209c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1209e:	4040      	eors	r0, r0
   120a0:	f380 8811 	msr	BASEPRI, r0
   120a4:	f04f 0004 	mov.w	r0, #4
   120a8:	df02      	svc	2
		LL_ASSERT(0);
   120aa:	4040      	eors	r0, r0
   120ac:	f380 8811 	msr	BASEPRI, r0
   120b0:	f04f 0004 	mov.w	r0, #4
   120b4:	df02      	svc	2
   120b6:	bf00      	nop
   120b8:	2000bc60 	.word	0x2000bc60
   120bc:	2000bc70 	.word	0x2000bc70
   120c0:	2000bc80 	.word	0x2000bc80
   120c4:	2000bc90 	.word	0x2000bc90
   120c8:	2000bca0 	.word	0x2000bca0

000120cc <ticker_instance1_caller_id_get>:
	switch (user_id) {
   120cc:	1e83      	subs	r3, r0, #2
   120ce:	2b01      	cmp	r3, #1
   120d0:	d800      	bhi.n	120d4 <ticker_instance1_caller_id_get+0x8>
}
   120d2:	4770      	bx	lr
		LL_ASSERT(0);
   120d4:	4040      	eors	r0, r0
   120d6:	f380 8811 	msr	BASEPRI, r0
   120da:	f04f 0004 	mov.w	r0, #4
   120de:	df02      	svc	2

000120e0 <ticker_instance0_sched>:
{
   120e0:	b508      	push	{r3, lr}
	switch (caller_id) {
   120e2:	2803      	cmp	r0, #3
   120e4:	d843      	bhi.n	1216e <ticker_instance0_sched+0x8e>
   120e6:	e8df f000 	tbb	[pc, r0]
   120ea:	1002      	.short	0x1002
   120ec:	341e      	.short	0x341e
		switch (callee_id) {
   120ee:	2901      	cmp	r1, #1
   120f0:	d105      	bne.n	120fe <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   120f2:	4b22      	ldr	r3, [pc, #136]	; (1217c <ticker_instance0_sched+0x9c>)
   120f4:	2100      	movs	r1, #0
   120f6:	4608      	mov	r0, r1
   120f8:	f7fe fab0 	bl	1065c <mayfly_enqueue>
		break;
   120fc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   120fe:	4040      	eors	r0, r0
   12100:	f380 8811 	msr	BASEPRI, r0
   12104:	f04f 0004 	mov.w	r0, #4
   12108:	df02      	svc	2
		switch (callee_id) {
   1210a:	2902      	cmp	r1, #2
   1210c:	d105      	bne.n	1211a <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   1210e:	4b1c      	ldr	r3, [pc, #112]	; (12180 <ticker_instance0_sched+0xa0>)
   12110:	2101      	movs	r1, #1
   12112:	2000      	movs	r0, #0
   12114:	f7fe faa2 	bl	1065c <mayfly_enqueue>
		break;
   12118:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1211a:	4040      	eors	r0, r0
   1211c:	f380 8811 	msr	BASEPRI, r0
   12120:	f04f 0004 	mov.w	r0, #4
   12124:	df02      	svc	2
		switch (callee_id) {
   12126:	2901      	cmp	r1, #1
   12128:	d007      	beq.n	1213a <ticker_instance0_sched+0x5a>
   1212a:	2902      	cmp	r1, #2
   1212c:	d00b      	beq.n	12146 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1212e:	4040      	eors	r0, r0
   12130:	f380 8811 	msr	BASEPRI, r0
   12134:	f04f 0004 	mov.w	r0, #4
   12138:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   1213a:	4b12      	ldr	r3, [pc, #72]	; (12184 <ticker_instance0_sched+0xa4>)
   1213c:	2100      	movs	r1, #0
   1213e:	2001      	movs	r0, #1
   12140:	f7fe fa8c 	bl	1065c <mayfly_enqueue>
		break;
   12144:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   12146:	4b10      	ldr	r3, [pc, #64]	; (12188 <ticker_instance0_sched+0xa8>)
   12148:	2101      	movs	r1, #1
   1214a:	4608      	mov	r0, r1
   1214c:	f7fe fa86 	bl	1065c <mayfly_enqueue>
		break;
   12150:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   12152:	2902      	cmp	r1, #2
   12154:	d105      	bne.n	12162 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   12156:	4b0d      	ldr	r3, [pc, #52]	; (1218c <ticker_instance0_sched+0xac>)
   12158:	2101      	movs	r1, #1
   1215a:	2003      	movs	r0, #3
   1215c:	f7fe fa7e 	bl	1065c <mayfly_enqueue>
		break;
   12160:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   12162:	4040      	eors	r0, r0
   12164:	f380 8811 	msr	BASEPRI, r0
   12168:	f04f 0004 	mov.w	r0, #4
   1216c:	df02      	svc	2
		LL_ASSERT(0);
   1216e:	4040      	eors	r0, r0
   12170:	f380 8811 	msr	BASEPRI, r0
   12174:	f04f 0004 	mov.w	r0, #4
   12178:	df02      	svc	2
   1217a:	bf00      	nop
   1217c:	2000bc10 	.word	0x2000bc10
   12180:	2000bc20 	.word	0x2000bc20
   12184:	2000bc30 	.word	0x2000bc30
   12188:	2000bc40 	.word	0x2000bc40
   1218c:	2000bc50 	.word	0x2000bc50

00012190 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   12190:	2801      	cmp	r0, #1
   12192:	d00a      	beq.n	121aa <ticker_instance0_caller_id_get+0x1a>
   12194:	b138      	cbz	r0, 121a6 <ticker_instance0_caller_id_get+0x16>
   12196:	2803      	cmp	r0, #3
   12198:	d008      	beq.n	121ac <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   1219a:	4040      	eors	r0, r0
   1219c:	f380 8811 	msr	BASEPRI, r0
   121a0:	f04f 0004 	mov.w	r0, #4
   121a4:	df02      	svc	2
		return CALL_ID_WORKER;
   121a6:	2001      	movs	r0, #1
   121a8:	4770      	bx	lr
		return CALL_ID_JOB;
   121aa:	2002      	movs	r0, #2
}
   121ac:	4770      	bx	lr
	...

000121b0 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   121b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   121b2:	9d05      	ldr	r5, [sp, #20]
   121b4:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   121b8:	4606      	mov	r6, r0
   121ba:	b118      	cbz	r0, 121c4 <ticker_init+0x14>
   121bc:	2801      	cmp	r0, #1
   121be:	d019      	beq.n	121f4 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   121c0:	2001      	movs	r0, #1
   121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   121c4:	202c      	movs	r0, #44	; 0x2c
   121c6:	4f20      	ldr	r7, [pc, #128]	; (12248 <ticker_init+0x98>)
   121c8:	fb00 7006 	mla	r0, r0, r6, r7
   121cc:	4f1f      	ldr	r7, [pc, #124]	; (1224c <ticker_init+0x9c>)
   121ce:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   121d0:	4f1f      	ldr	r7, [pc, #124]	; (12250 <ticker_init+0xa0>)
   121d2:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   121d4:	4f1f      	ldr	r7, [pc, #124]	; (12254 <ticker_init+0xa4>)
   121d6:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   121d8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 12248 <ticker_init+0x98>
   121dc:	202c      	movs	r0, #44	; 0x2c
   121de:	fb00 f006 	mul.w	r0, r0, r6
   121e2:	eb0e 0700 	add.w	r7, lr, r0
   121e6:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   121e8:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   121ec:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   121ee:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   121f0:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   121f2:	e015      	b.n	12220 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   121f4:	202c      	movs	r0, #44	; 0x2c
   121f6:	4f14      	ldr	r7, [pc, #80]	; (12248 <ticker_init+0x98>)
   121f8:	fb00 7006 	mla	r0, r0, r6, r7
   121fc:	4f16      	ldr	r7, [pc, #88]	; (12258 <ticker_init+0xa8>)
   121fe:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   12200:	4f16      	ldr	r7, [pc, #88]	; (1225c <ticker_init+0xac>)
   12202:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   12204:	4f16      	ldr	r7, [pc, #88]	; (12260 <ticker_init+0xb0>)
   12206:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   12208:	e7e6      	b.n	121d8 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   1220a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   1220e:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   12210:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   12214:	202c      	movs	r0, #44	; 0x2c
   12216:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   1221a:	1ae3      	subs	r3, r4, r3
   1221c:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   1221e:	4613      	mov	r3, r2
   12220:	1e5a      	subs	r2, r3, #1
   12222:	b2d2      	uxtb	r2, r2
   12224:	2b00      	cmp	r3, #0
   12226:	d1f0      	bne.n	1220a <ticker_init+0x5a>
	}

	if (count_op) {
   12228:	b964      	cbnz	r4, 12244 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   1222a:	222c      	movs	r2, #44	; 0x2c
   1222c:	4b06      	ldr	r3, [pc, #24]	; (12248 <ticker_init+0x98>)
   1222e:	fb02 3606 	mla	r6, r2, r6, r3
   12232:	23ff      	movs	r3, #255	; 0xff
   12234:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   12236:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   12238:	2000      	movs	r0, #0
   1223a:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   1223c:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   1223e:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   12240:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   12242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   12244:	2001      	movs	r0, #1
}
   12246:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12248:	20000ed4 	.word	0x20000ed4
   1224c:	00012191 	.word	0x00012191
   12250:	000120e1 	.word	0x000120e1
   12254:	00012013 	.word	0x00012013
   12258:	000120cd 	.word	0x000120cd
   1225c:	00012021 	.word	0x00012021
   12260:	00012007 	.word	0x00012007

00012264 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   12264:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   12266:	232c      	movs	r3, #44	; 0x2c
   12268:	4a04      	ldr	r2, [pc, #16]	; (1227c <ticker_trigger+0x18>)
   1226a:	fb03 2000 	mla	r0, r3, r0, r2
   1226e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   12270:	b11b      	cbz	r3, 1227a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   12272:	2201      	movs	r2, #1
   12274:	4611      	mov	r1, r2
   12276:	2000      	movs	r0, #0
   12278:	4798      	blx	r3
   1227a:	bd08      	pop	{r3, pc}
   1227c:	20000ed4 	.word	0x20000ed4

00012280 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   12280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   12284:	242c      	movs	r4, #44	; 0x2c
   12286:	4d24      	ldr	r5, [pc, #144]	; (12318 <ticker_start+0x98>)
   12288:	fb04 5400 	mla	r4, r4, r0, r5
   1228c:	6866      	ldr	r6, [r4, #4]
   1228e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   12292:	f89e 4003 	ldrb.w	r4, [lr, #3]
   12296:	1c65      	adds	r5, r4, #1
   12298:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   1229a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1229e:	42b5      	cmp	r5, r6
   122a0:	d300      	bcc.n	122a4 <ticker_start+0x24>
		last = 0;
   122a2:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   122a4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   122a8:	42b5      	cmp	r5, r6
   122aa:	d032      	beq.n	12312 <ticker_start+0x92>
   122ac:	469c      	mov	ip, r3
   122ae:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   122b0:	f8de 3004 	ldr.w	r3, [lr, #4]
   122b4:	f04f 082c 	mov.w	r8, #44	; 0x2c
   122b8:	fb08 f604 	mul.w	r6, r8, r4
   122bc:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   122be:	2003      	movs	r0, #3
   122c0:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   122c2:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   122c4:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   122c8:	9b06      	ldr	r3, [sp, #24]
   122ca:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   122cc:	9b07      	ldr	r3, [sp, #28]
   122ce:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   122d0:	9b08      	ldr	r3, [sp, #32]
   122d2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   122d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   122d8:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   122da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   122de:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   122e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122e2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   122e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   122e6:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   122e8:	2602      	movs	r6, #2
   122ea:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   122ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122ee:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   122f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   122f2:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   122f4:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   122f8:	4b07      	ldr	r3, [pc, #28]	; (12318 <ticker_start+0x98>)
   122fa:	fb08 3307 	mla	r3, r8, r7, r3
   122fe:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   12300:	6a1b      	ldr	r3, [r3, #32]
   12302:	4608      	mov	r0, r1
   12304:	4798      	blx	r3
   12306:	2200      	movs	r2, #0
   12308:	4631      	mov	r1, r6
   1230a:	47a8      	blx	r5

	return user_op->status;
   1230c:	6a20      	ldr	r0, [r4, #32]
   1230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12312:	2001      	movs	r0, #1
}
   12314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12318:	20000ed4 	.word	0x20000ed4

0001231c <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   1231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   12320:	242c      	movs	r4, #44	; 0x2c
   12322:	4d24      	ldr	r5, [pc, #144]	; (123b4 <ticker_update+0x98>)
   12324:	fb04 5400 	mla	r4, r4, r0, r5
   12328:	6866      	ldr	r6, [r4, #4]
   1232a:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1232e:	f89e 4003 	ldrb.w	r4, [lr, #3]
   12332:	1c65      	adds	r5, r4, #1
   12334:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   12336:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1233a:	42b5      	cmp	r5, r6
   1233c:	d300      	bcc.n	12340 <ticker_update+0x24>
		last = 0;
   1233e:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   12340:	f89e 6001 	ldrb.w	r6, [lr, #1]
   12344:	42b5      	cmp	r5, r6
   12346:	d031      	beq.n	123ac <ticker_update+0x90>
   12348:	469c      	mov	ip, r3
   1234a:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   1234c:	f8de 3004 	ldr.w	r3, [lr, #4]
   12350:	f04f 082c 	mov.w	r8, #44	; 0x2c
   12354:	fb08 f604 	mul.w	r6, r8, r4
   12358:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   1235a:	2004      	movs	r0, #4
   1235c:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   1235e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   12360:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   12364:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12368:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1236a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1236e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   12370:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12374:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   12376:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1237a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   1237c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   12380:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   12382:	2602      	movs	r6, #2
   12384:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   12386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12388:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   1238a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1238c:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   1238e:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   12392:	4b08      	ldr	r3, [pc, #32]	; (123b4 <ticker_update+0x98>)
   12394:	fb08 3307 	mla	r3, r8, r7, r3
   12398:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   1239a:	6a1b      	ldr	r3, [r3, #32]
   1239c:	4608      	mov	r0, r1
   1239e:	4798      	blx	r3
   123a0:	2200      	movs	r2, #0
   123a2:	4631      	mov	r1, r6
   123a4:	47a8      	blx	r5

	return user_op->status;
   123a6:	6a20      	ldr	r0, [r4, #32]
   123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   123ac:	2001      	movs	r0, #1
}
   123ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123b2:	bf00      	nop
   123b4:	20000ed4 	.word	0x20000ed4

000123b8 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   123bc:	242c      	movs	r4, #44	; 0x2c
   123be:	4d1b      	ldr	r5, [pc, #108]	; (1242c <ticker_stop+0x74>)
   123c0:	fb04 5400 	mla	r4, r4, r0, r5
   123c4:	6866      	ldr	r6, [r4, #4]
   123c6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   123ca:	f89e 5003 	ldrb.w	r5, [lr, #3]
   123ce:	1c6c      	adds	r4, r5, #1
   123d0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   123d2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   123d6:	42b4      	cmp	r4, r6
   123d8:	d300      	bcc.n	123dc <ticker_stop+0x24>
		last = 0;
   123da:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   123dc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   123e0:	42b4      	cmp	r4, r6
   123e2:	d020      	beq.n	12426 <ticker_stop+0x6e>
   123e4:	4698      	mov	r8, r3
   123e6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   123e8:	f8de 3004 	ldr.w	r3, [lr, #4]
   123ec:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   123f0:	fb0c f505 	mul.w	r5, ip, r5
   123f4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   123f6:	2005      	movs	r0, #5
   123f8:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   123fa:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   123fc:	2502      	movs	r5, #2
   123fe:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   12400:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   12404:	9b06      	ldr	r3, [sp, #24]
   12406:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   12408:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1240c:	4b07      	ldr	r3, [pc, #28]	; (1242c <ticker_stop+0x74>)
   1240e:	fb0c 3307 	mla	r3, ip, r7, r3
   12412:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   12414:	6a1b      	ldr	r3, [r3, #32]
   12416:	4608      	mov	r0, r1
   12418:	4798      	blx	r3
   1241a:	2200      	movs	r2, #0
   1241c:	4629      	mov	r1, r5
   1241e:	47a0      	blx	r4

	return user_op->status;
   12420:	6a30      	ldr	r0, [r6, #32]
   12422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12426:	2001      	movs	r0, #1
}
   12428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1242c:	20000ed4 	.word	0x20000ed4

00012430 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   12430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   12434:	242c      	movs	r4, #44	; 0x2c
   12436:	4d1f      	ldr	r5, [pc, #124]	; (124b4 <ticker_next_slot_get+0x84>)
   12438:	fb04 5400 	mla	r4, r4, r0, r5
   1243c:	6866      	ldr	r6, [r4, #4]
   1243e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   12442:	f89e 5003 	ldrb.w	r5, [lr, #3]
   12446:	1c6c      	adds	r4, r5, #1
   12448:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   1244a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1244e:	42b4      	cmp	r4, r6
   12450:	d300      	bcc.n	12454 <ticker_next_slot_get+0x24>
		last = 0;
   12452:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   12454:	f89e 6001 	ldrb.w	r6, [lr, #1]
   12458:	42b4      	cmp	r4, r6
   1245a:	d027      	beq.n	124ac <ticker_next_slot_get+0x7c>
   1245c:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   1245e:	f8de 3004 	ldr.w	r3, [lr, #4]
   12462:	f04f 092c 	mov.w	r9, #44	; 0x2c
   12466:	fb09 f605 	mul.w	r6, r9, r5
   1246a:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   1246c:	f04f 0802 	mov.w	r8, #2
   12470:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   12474:	23ff      	movs	r3, #255	; 0xff
   12476:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   12478:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   1247a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   1247e:	9b08      	ldr	r3, [sp, #32]
   12480:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   12482:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   12486:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12488:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   1248a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1248c:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   1248e:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   12492:	4b08      	ldr	r3, [pc, #32]	; (124b4 <ticker_next_slot_get+0x84>)
   12494:	fb09 3300 	mla	r3, r9, r0, r3
   12498:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1249a:	6a1b      	ldr	r3, [r3, #32]
   1249c:	4608      	mov	r0, r1
   1249e:	4798      	blx	r3
   124a0:	2200      	movs	r2, #0
   124a2:	4641      	mov	r1, r8
   124a4:	47a0      	blx	r4

	return user_op->status;
   124a6:	6a28      	ldr	r0, [r5, #32]
   124a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   124ac:	2001      	movs	r0, #1
}
   124ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   124b2:	bf00      	nop
   124b4:	20000ed4 	.word	0x20000ed4

000124b8 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   124b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   124bc:	242c      	movs	r4, #44	; 0x2c
   124be:	4d1b      	ldr	r5, [pc, #108]	; (1252c <ticker_job_idle_get+0x74>)
   124c0:	fb04 5400 	mla	r4, r4, r0, r5
   124c4:	6866      	ldr	r6, [r4, #4]
   124c6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   124ca:	f89e 5003 	ldrb.w	r5, [lr, #3]
   124ce:	1c6c      	adds	r4, r5, #1
   124d0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   124d2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   124d6:	42b4      	cmp	r4, r6
   124d8:	d300      	bcc.n	124dc <ticker_job_idle_get+0x24>
		last = 0;
   124da:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   124dc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   124e0:	42b4      	cmp	r4, r6
   124e2:	d020      	beq.n	12526 <ticker_job_idle_get+0x6e>
   124e4:	4698      	mov	r8, r3
   124e6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   124e8:	f8de 3004 	ldr.w	r3, [lr, #4]
   124ec:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   124f0:	fb0c f505 	mul.w	r5, ip, r5
   124f4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   124f6:	2001      	movs	r0, #1
   124f8:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   124fa:	23ff      	movs	r3, #255	; 0xff
   124fc:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   124fe:	2502      	movs	r5, #2
   12500:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   12502:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   12504:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   12508:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1250c:	4b07      	ldr	r3, [pc, #28]	; (1252c <ticker_job_idle_get+0x74>)
   1250e:	fb0c 3307 	mla	r3, ip, r7, r3
   12512:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   12514:	6a1b      	ldr	r3, [r3, #32]
   12516:	4608      	mov	r0, r1
   12518:	4798      	blx	r3
   1251a:	2200      	movs	r2, #0
   1251c:	4629      	mov	r1, r5
   1251e:	47a0      	blx	r4

	return user_op->status;
   12520:	6a30      	ldr	r0, [r6, #32]
   12522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   12526:	2001      	movs	r0, #1
}
   12528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1252c:	20000ed4 	.word	0x20000ed4

00012530 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   12530:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   12532:	232c      	movs	r3, #44	; 0x2c
   12534:	4a05      	ldr	r2, [pc, #20]	; (1254c <ticker_job_sched+0x1c>)
   12536:	fb03 2000 	mla	r0, r3, r0, r2
   1253a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1253c:	6a03      	ldr	r3, [r0, #32]
   1253e:	4608      	mov	r0, r1
   12540:	4798      	blx	r3
   12542:	2200      	movs	r2, #0
   12544:	2102      	movs	r1, #2
   12546:	47a0      	blx	r4
   12548:	bd10      	pop	{r4, pc}
   1254a:	bf00      	nop
   1254c:	20000ed4 	.word	0x20000ed4

00012550 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   12550:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   12552:	f7fe fa95 	bl	10a80 <cntr_cnt_get>
}
   12556:	bd08      	pop	{r3, pc}

00012558 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   12558:	1a40      	subs	r0, r0, r1
}
   1255a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1255e:	4770      	bx	lr

00012560 <ticker_worker>:
{
   12560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   12564:	2301      	movs	r3, #1
   12566:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   12568:	f890 901c 	ldrb.w	r9, [r0, #28]
   1256c:	f1b9 0f00 	cmp.w	r9, #0
   12570:	d147      	bne.n	12602 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   12572:	7e03      	ldrb	r3, [r0, #24]
   12574:	2bff      	cmp	r3, #255	; 0xff
   12576:	d030      	beq.n	125da <ticker_worker+0x7a>
   12578:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1257a:	f7fe fa81 	bl	10a80 <cntr_cnt_get>
   1257e:	6979      	ldr	r1, [r7, #20]
   12580:	f7ff ffea 	bl	12558 <ticker_ticks_diff_get>
   12584:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   12586:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   12588:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   1258c:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   1258e:	2cff      	cmp	r4, #255	; 0xff
   12590:	d027      	beq.n	125e2 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   12592:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   12596:	00a3      	lsls	r3, r4, #2
   12598:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1259c:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1259e:	4295      	cmp	r5, r2
   125a0:	d31f      	bcc.n	125e2 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   125a2:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   125a4:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   125a6:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   125aa:	784b      	ldrb	r3, [r1, #1]
   125ac:	788a      	ldrb	r2, [r1, #2]
   125ae:	1a9b      	subs	r3, r3, r2
   125b0:	b2db      	uxtb	r3, r3
   125b2:	2b01      	cmp	r3, #1
   125b4:	d1eb      	bne.n	1258e <ticker_worker+0x2e>
		ticker->ack--;
   125b6:	3a01      	subs	r2, #1
   125b8:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   125ba:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   125be:	f1ba 0f00 	cmp.w	sl, #0
   125c2:	d0e4      	beq.n	1258e <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   125c4:	6978      	ldr	r0, [r7, #20]
   125c6:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   125c8:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   125ca:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   125cc:	690b      	ldr	r3, [r1, #16]
   125ce:	8b4a      	ldrh	r2, [r1, #26]
   125d0:	6a09      	ldr	r1, [r1, #32]
   125d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   125d6:	47d0      	blx	sl
   125d8:	e7d9      	b.n	1258e <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   125da:	2300      	movs	r3, #0
   125dc:	7743      	strb	r3, [r0, #29]
		return;
   125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   125e2:	7aba      	ldrb	r2, [r7, #10]
   125e4:	7afb      	ldrb	r3, [r7, #11]
   125e6:	429a      	cmp	r2, r3
   125e8:	d00d      	beq.n	12606 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   125ea:	7afb      	ldrb	r3, [r7, #11]
   125ec:	3302      	adds	r3, #2
   125ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   125f2:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   125f4:	2300      	movs	r3, #0
   125f6:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   125f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   125fa:	2201      	movs	r2, #1
   125fc:	2102      	movs	r1, #2
   125fe:	4610      	mov	r0, r2
   12600:	4798      	blx	r3
   12602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   12606:	3301      	adds	r3, #1
   12608:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1260a:	2b02      	cmp	r3, #2
   1260c:	d001      	beq.n	12612 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   1260e:	72fb      	strb	r3, [r7, #11]
   12610:	e7eb      	b.n	125ea <ticker_worker+0x8a>
			last = 0;
   12612:	464b      	mov	r3, r9
   12614:	e7fb      	b.n	1260e <ticker_worker+0xae>

00012616 <ticks_to_expire_prep>:
{
   12616:	b570      	push	{r4, r5, r6, lr}
   12618:	4606      	mov	r6, r0
   1261a:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1261c:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1261e:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   12620:	1a51      	subs	r1, r2, r1
   12622:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   12626:	d10c      	bne.n	12642 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   12628:	4601      	mov	r1, r0
   1262a:	4610      	mov	r0, r2
   1262c:	f7ff ff94 	bl	12558 <ticker_ticks_diff_get>
   12630:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   12632:	42a8      	cmp	r0, r5
   12634:	d812      	bhi.n	1265c <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   12636:	1a28      	subs	r0, r5, r0
   12638:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   1263a:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1263c:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1263e:	82b5      	strh	r5, [r6, #20]
   12640:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   12642:	4611      	mov	r1, r2
   12644:	f7ff ff88 	bl	12558 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   12648:	4284      	cmp	r4, r0
   1264a:	d901      	bls.n	12650 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   1264c:	1a20      	subs	r0, r4, r0
   1264e:	e7f0      	b.n	12632 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   12650:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   12652:	fa15 f080 	uxtah	r0, r5, r0
   12656:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   12658:	2000      	movs	r0, #0
   1265a:	e7ea      	b.n	12632 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   1265c:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   1265e:	2500      	movs	r5, #0
   12660:	e7ec      	b.n	1263c <ticks_to_expire_prep+0x26>

00012662 <ticker_job>:
{
   12662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12666:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   12668:	7f43      	ldrb	r3, [r0, #29]
   1266a:	9301      	str	r3, [sp, #4]
   1266c:	2b00      	cmp	r3, #0
   1266e:	f040 8254 	bne.w	12b1a <ticker_job+0x4b8>
	instance->job_guard = 1;
   12672:	2301      	movs	r3, #1
   12674:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   12676:	6943      	ldr	r3, [r0, #20]
   12678:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1267a:	7a83      	ldrb	r3, [r0, #10]
   1267c:	7ac2      	ldrb	r2, [r0, #11]
   1267e:	4293      	cmp	r3, r2
   12680:	d021      	beq.n	126c6 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   12682:	3301      	adds	r3, #1
   12684:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12686:	2b02      	cmp	r3, #2
   12688:	d100      	bne.n	1268c <ticker_job+0x2a>
			first = 0;
   1268a:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   1268c:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   1268e:	3302      	adds	r3, #2
   12690:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12694:	685b      	ldr	r3, [r3, #4]
   12696:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   12698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1269a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   1269c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   126a0:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   126a2:	2301      	movs	r3, #1
   126a4:	9304      	str	r3, [sp, #16]
   126a6:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   126a8:	7e03      	ldrb	r3, [r0, #24]
   126aa:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   126ac:	6803      	ldr	r3, [r0, #0]
   126ae:	4619      	mov	r1, r3
	users = &instance->user[0];
   126b0:	6843      	ldr	r3, [r0, #4]
   126b2:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   126b4:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   126b6:	9a01      	ldr	r2, [sp, #4]
   126b8:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   126ba:	f04f 0bff 	mov.w	fp, #255	; 0xff
   126be:	f8cd b01c 	str.w	fp, [sp, #28]
   126c2:	468b      	mov	fp, r1
   126c4:	e0cc      	b.n	12860 <ticker_job+0x1fe>
		flag_elapsed = 0;
   126c6:	9b01      	ldr	r3, [sp, #4]
   126c8:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   126ca:	2300      	movs	r3, #0
   126cc:	9303      	str	r3, [sp, #12]
   126ce:	e7ea      	b.n	126a6 <ticker_job+0x44>
				middle = 0;
   126d0:	9b01      	ldr	r3, [sp, #4]
   126d2:	e01d      	b.n	12710 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   126d4:	6872      	ldr	r2, [r6, #4]
   126d6:	bb82      	cbnz	r2, 1273a <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   126d8:	68b2      	ldr	r2, [r6, #8]
   126da:	bb72      	cbnz	r2, 1273a <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   126dc:	68f2      	ldr	r2, [r6, #12]
   126de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   126e2:	d12a      	bne.n	1273a <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   126e4:	2101      	movs	r1, #1
   126e6:	4630      	mov	r0, r6
   126e8:	f7ff fc82 	bl	11ff0 <ticker_job_op_cb>
		while (user->middle != user->last) {
   126ec:	f894 a002 	ldrb.w	sl, [r4, #2]
   126f0:	78e3      	ldrb	r3, [r4, #3]
   126f2:	459a      	cmp	sl, r3
   126f4:	f000 80b3 	beq.w	1285e <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   126f8:	f04f 092c 	mov.w	r9, #44	; 0x2c
   126fc:	fb09 f90a 	mul.w	r9, r9, sl
   12700:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   12704:	f10a 0301 	add.w	r3, sl, #1
   12708:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1270a:	7822      	ldrb	r2, [r4, #0]
   1270c:	4293      	cmp	r3, r2
   1270e:	d0df      	beq.n	126d0 <ticker_job+0x6e>
			user->middle = middle;
   12710:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   12712:	7873      	ldrb	r3, [r6, #1]
   12714:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   12718:	009f      	lsls	r7, r3, #2
   1271a:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1271e:	f818 2009 	ldrb.w	r2, [r8, r9]
   12722:	2a03      	cmp	r2, #3
   12724:	d9e2      	bls.n	126ec <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   12726:	786b      	ldrb	r3, [r5, #1]
   12728:	78a9      	ldrb	r1, [r5, #2]
   1272a:	1a5b      	subs	r3, r3, r1
   1272c:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   1272e:	2a05      	cmp	r2, #5
   12730:	d8d8      	bhi.n	126e4 <ticker_job+0x82>
   12732:	2b00      	cmp	r3, #0
   12734:	d0d6      	beq.n	126e4 <ticker_job+0x82>
			    (state == 0) ||
   12736:	2a04      	cmp	r2, #4
   12738:	d0cc      	beq.n	126d4 <ticker_job+0x72>
			if (state == 1) {
   1273a:	2b01      	cmp	r3, #1
   1273c:	f040 8085 	bne.w	1284a <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   12740:	7871      	ldrb	r1, [r6, #1]
   12742:	9800      	ldr	r0, [sp, #0]
   12744:	f7ff fbf6 	bl	11f34 <ticker_dequeue>
   12748:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1274a:	f818 3009 	ldrb.w	r3, [r8, r9]
   1274e:	2b04      	cmp	r3, #4
   12750:	d00b      	beq.n	1276a <ticker_job+0x108>
		ticker->req = ticker->ack;
   12752:	78ab      	ldrb	r3, [r5, #2]
   12754:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   12756:	9b00      	ldr	r3, [sp, #0]
   12758:	7e5a      	ldrb	r2, [r3, #25]
   1275a:	7873      	ldrb	r3, [r6, #1]
   1275c:	429a      	cmp	r2, r3
   1275e:	d06e      	beq.n	1283e <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   12760:	2100      	movs	r1, #0
   12762:	4630      	mov	r0, r6
   12764:	f7ff fc44 	bl	11ff0 <ticker_job_op_cb>
   12768:	e7c0      	b.n	126ec <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1276a:	9b00      	ldr	r3, [sp, #0]
   1276c:	695b      	ldr	r3, [r3, #20]
   1276e:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   12770:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   12772:	f7fe f985 	bl	10a80 <cntr_cnt_get>
   12776:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   12778:	9906      	ldr	r1, [sp, #24]
   1277a:	f7ff feed 	bl	12558 <ticker_ticks_diff_get>
   1277e:	9b03      	ldr	r3, [sp, #12]
   12780:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   12782:	4581      	cmp	r9, r0
   12784:	d909      	bls.n	1279a <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   12786:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   1278a:	686b      	ldr	r3, [r5, #4]
   1278c:	b37b      	cbz	r3, 127ee <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   1278e:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   12790:	b36b      	cbz	r3, 127ee <ticker_job+0x18c>
		user_op->params.update.lazy--;
   12792:	3b01      	subs	r3, #1
   12794:	81b3      	strh	r3, [r6, #12]
   12796:	46a2      	mov	sl, r4
   12798:	e011      	b.n	127be <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1279a:	eba0 0909 	sub.w	r9, r0, r9
   1279e:	8aab      	ldrh	r3, [r5, #20]
   127a0:	fa13 f389 	uxtah	r3, r3, r9
   127a4:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   127a6:	f04f 0900 	mov.w	r9, #0
   127aa:	e7ee      	b.n	1278a <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   127ac:	4628      	mov	r0, r5
   127ae:	f7ff fc07 	bl	11fc0 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   127b2:	4420      	add	r0, r4
   127b4:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   127b8:	8b6b      	ldrh	r3, [r5, #26]
   127ba:	3b01      	subs	r3, #1
   127bc:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   127be:	686c      	ldr	r4, [r5, #4]
   127c0:	454c      	cmp	r4, r9
   127c2:	d237      	bcs.n	12834 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   127c4:	8b6a      	ldrh	r2, [r5, #26]
   127c6:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   127c8:	429a      	cmp	r2, r3
   127ca:	d8ef      	bhi.n	127ac <ticker_job+0x14a>
   127cc:	4654      	mov	r4, sl
   127ce:	e009      	b.n	127e4 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   127d0:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   127d4:	4628      	mov	r0, r5
   127d6:	f7ff fbdd 	bl	11f94 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   127da:	4450      	add	r0, sl
   127dc:	4481      	add	r9, r0
			ticker->lazy_current++;
   127de:	8b6b      	ldrh	r3, [r5, #26]
   127e0:	3301      	adds	r3, #1
   127e2:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   127e4:	8b6a      	ldrh	r2, [r5, #26]
   127e6:	89b3      	ldrh	r3, [r6, #12]
   127e8:	429a      	cmp	r2, r3
   127ea:	d3f1      	bcc.n	127d0 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   127ec:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   127ee:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   127f0:	444b      	add	r3, r9
   127f2:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   127f4:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   127f6:	8aaa      	ldrh	r2, [r5, #20]
   127f8:	4413      	add	r3, r2
   127fa:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   127fc:	9a08      	ldr	r2, [sp, #32]
   127fe:	9906      	ldr	r1, [sp, #24]
   12800:	4628      	mov	r0, r5
   12802:	f7ff ff08 	bl	12616 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   12806:	8933      	ldrh	r3, [r6, #8]
   12808:	8aea      	ldrh	r2, [r5, #22]
   1280a:	4413      	add	r3, r2
   1280c:	b29b      	uxth	r3, r3
   1280e:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   12810:	8972      	ldrh	r2, [r6, #10]
   12812:	4293      	cmp	r3, r2
   12814:	d910      	bls.n	12838 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   12816:	1a9b      	subs	r3, r3, r2
   12818:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   1281a:	7bb3      	ldrb	r3, [r6, #14]
   1281c:	b103      	cbz	r3, 12820 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   1281e:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   12820:	f89d 301c 	ldrb.w	r3, [sp, #28]
   12824:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   12828:	7873      	ldrb	r3, [r6, #1]
   1282a:	9307      	str	r3, [sp, #28]
		ticker->req++;
   1282c:	786b      	ldrb	r3, [r5, #1]
   1282e:	3301      	adds	r3, #1
   12830:	706b      	strb	r3, [r5, #1]
   12832:	e795      	b.n	12760 <ticker_job+0xfe>
   12834:	4654      	mov	r4, sl
   12836:	e7d5      	b.n	127e4 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   12838:	2300      	movs	r3, #0
   1283a:	82eb      	strh	r3, [r5, #22]
   1283c:	e7ed      	b.n	1281a <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1283e:	23ff      	movs	r3, #255	; 0xff
   12840:	9900      	ldr	r1, [sp, #0]
   12842:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   12844:	2300      	movs	r3, #0
   12846:	834b      	strh	r3, [r1, #26]
   12848:	e78a      	b.n	12760 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   1284a:	9b00      	ldr	r3, [sp, #0]
   1284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1284e:	2201      	movs	r2, #1
   12850:	2102      	movs	r1, #2
   12852:	4608      	mov	r0, r1
   12854:	4798      	blx	r3
				user->middle = prev;
   12856:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   1285a:	2301      	movs	r3, #1
   1285c:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1285e:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   12860:	1e5a      	subs	r2, r3, #1
   12862:	b2d2      	uxtb	r2, r2
   12864:	9202      	str	r2, [sp, #8]
   12866:	b133      	cbz	r3, 12876 <ticker_job+0x214>
		user = &users[count_user];
   12868:	9b05      	ldr	r3, [sp, #20]
   1286a:	9a02      	ldr	r2, [sp, #8]
   1286c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   12870:	f8d4 8004 	ldr.w	r8, [r4, #4]
   12874:	e73a      	b.n	126ec <ticker_job+0x8a>
   12876:	9306      	str	r3, [sp, #24]
   12878:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1287c:	9b00      	ldr	r3, [sp, #0]
   1287e:	7e1b      	ldrb	r3, [r3, #24]
   12880:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12882:	429a      	cmp	r2, r3
   12884:	d00a      	beq.n	1289c <ticker_job+0x23a>
		flag_compare_update = 1;
   12886:	2301      	movs	r3, #1
   12888:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1288a:	9b04      	ldr	r3, [sp, #16]
   1288c:	b94b      	cbnz	r3, 128a2 <ticker_job+0x240>
	node = &instance->node[0];
   1288e:	9a00      	ldr	r2, [sp, #0]
   12890:	6813      	ldr	r3, [r2, #0]
   12892:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   12894:	6853      	ldr	r3, [r2, #4]
   12896:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   12898:	7a53      	ldrb	r3, [r2, #9]
   1289a:	e117      	b.n	12acc <ticker_job+0x46a>
	flag_compare_update = 0;
   1289c:	9b06      	ldr	r3, [sp, #24]
   1289e:	9308      	str	r3, [sp, #32]
   128a0:	e7f3      	b.n	1288a <ticker_job+0x228>
	node = &instance->node[0];
   128a2:	9e00      	ldr	r6, [sp, #0]
   128a4:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   128a8:	f04f 0a00 	mov.w	sl, #0
   128ac:	f8cd b004 	str.w	fp, [sp, #4]
   128b0:	e02f      	b.n	12912 <ticker_job+0x2b0>
   128b2:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   128b6:	1a9b      	subs	r3, r3, r2
   128b8:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   128ba:	9b00      	ldr	r3, [sp, #0]
   128bc:	7e1b      	ldrb	r3, [r3, #24]
   128be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   128c0:	429a      	cmp	r2, r3
   128c2:	d0e4      	beq.n	1288e <ticker_job+0x22c>
			flag_compare_update = 1;
   128c4:	9b04      	ldr	r3, [sp, #16]
   128c6:	9308      	str	r3, [sp, #32]
   128c8:	e7e1      	b.n	1288e <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   128ca:	23ff      	movs	r3, #255	; 0xff
   128cc:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   128ce:	2300      	movs	r3, #0
   128d0:	8373      	strh	r3, [r6, #26]
   128d2:	e036      	b.n	12942 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   128d4:	686c      	ldr	r4, [r5, #4]
   128d6:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   128d8:	4628      	mov	r0, r5
   128da:	f7ff fb5b 	bl	11f94 <ticker_remainder_inc>
   128de:	4420      	add	r0, r4
			while (count--) {
   128e0:	463b      	mov	r3, r7
   128e2:	1e5f      	subs	r7, r3, #1
   128e4:	2b00      	cmp	r3, #0
   128e6:	d1f5      	bne.n	128d4 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   128e8:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   128ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   128ec:	eb03 020a 	add.w	r2, r3, sl
   128f0:	6971      	ldr	r1, [r6, #20]
   128f2:	4628      	mov	r0, r5
   128f4:	f7ff fe8f 	bl	12616 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   128f8:	8b2b      	ldrh	r3, [r5, #24]
   128fa:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   128fc:	2300      	movs	r3, #0
   128fe:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   12900:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12904:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   12908:	786b      	ldrb	r3, [r5, #1]
   1290a:	3301      	adds	r3, #1
   1290c:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   1290e:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   12912:	f896 8018 	ldrb.w	r8, [r6, #24]
   12916:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1291a:	d026      	beq.n	1296a <ticker_job+0x308>
		ticker = &node[id_expired];
   1291c:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   12920:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   12924:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   12928:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1292a:	9a03      	ldr	r2, [sp, #12]
   1292c:	4293      	cmp	r3, r2
   1292e:	d8c0      	bhi.n	128b2 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   12930:	9a03      	ldr	r2, [sp, #12]
   12932:	1ad2      	subs	r2, r2, r3
   12934:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   12936:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   12938:	8b72      	ldrh	r2, [r6, #26]
   1293a:	4293      	cmp	r3, r2
   1293c:	d2c5      	bcs.n	128ca <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   12942:	8aeb      	ldrh	r3, [r5, #22]
   12944:	b11b      	cbz	r3, 1294e <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   12946:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1294a:	8aeb      	ldrh	r3, [r5, #22]
   1294c:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   1294e:	2300      	movs	r3, #0
   12950:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   12952:	f819 300b 	ldrb.w	r3, [r9, fp]
   12956:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   12958:	686b      	ldr	r3, [r5, #4]
   1295a:	b11b      	cbz	r3, 12964 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   1295c:	8b2b      	ldrh	r3, [r5, #24]
   1295e:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   12960:	2000      	movs	r0, #0
   12962:	e7be      	b.n	128e2 <ticker_job+0x280>
			ticker->req = ticker->ack;
   12964:	78ab      	ldrb	r3, [r5, #2]
   12966:	706b      	strb	r3, [r5, #1]
   12968:	e7d3      	b.n	12912 <ticker_job+0x2b0>
   1296a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1296e:	e7a4      	b.n	128ba <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   12970:	232c      	movs	r3, #44	; 0x2c
   12972:	9a03      	ldr	r2, [sp, #12]
   12974:	fb03 f302 	mul.w	r3, r3, r2
   12978:	9905      	ldr	r1, [sp, #20]
   1297a:	4419      	add	r1, r3
   1297c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   1297e:	3201      	adds	r2, #1
   12980:	b2d2      	uxtb	r2, r2
   12982:	4611      	mov	r1, r2
   12984:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   12986:	9a04      	ldr	r2, [sp, #16]
   12988:	7812      	ldrb	r2, [r2, #0]
   1298a:	4291      	cmp	r1, r2
   1298c:	d013      	beq.n	129b6 <ticker_job+0x354>
				id_insert = user_op->id;
   1298e:	9a01      	ldr	r2, [sp, #4]
   12990:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   12992:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   12996:	0094      	lsls	r4, r2, #2
   12998:	9a02      	ldr	r2, [sp, #8]
   1299a:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1299c:	9a05      	ldr	r2, [sp, #20]
   1299e:	5cd3      	ldrb	r3, [r2, r3]
   129a0:	2b03      	cmp	r3, #3
   129a2:	d16b      	bne.n	12a7c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   129a4:	7862      	ldrb	r2, [r4, #1]
   129a6:	78a3      	ldrb	r3, [r4, #2]
   129a8:	429a      	cmp	r2, r3
   129aa:	d007      	beq.n	129bc <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   129ac:	2101      	movs	r1, #1
   129ae:	9801      	ldr	r0, [sp, #4]
   129b0:	f7ff fb1e 	bl	11ff0 <ticker_job_op_cb>
   129b4:	e062      	b.n	12a7c <ticker_job+0x41a>
					first = 0;
   129b6:	9a06      	ldr	r2, [sp, #24]
   129b8:	9203      	str	r2, [sp, #12]
   129ba:	e7e8      	b.n	1298e <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   129bc:	9b00      	ldr	r3, [sp, #0]
   129be:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   129c0:	9801      	ldr	r0, [sp, #4]
   129c2:	68c3      	ldr	r3, [r0, #12]
   129c4:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   129c6:	6903      	ldr	r3, [r0, #16]
   129c8:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   129ca:	8a83      	ldrh	r3, [r0, #20]
   129cc:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   129ce:	8ac3      	ldrh	r3, [r0, #22]
   129d0:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   129d2:	6983      	ldr	r3, [r0, #24]
   129d4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   129d6:	69c3      	ldr	r3, [r0, #28]
   129d8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   129da:	6883      	ldr	r3, [r0, #8]
   129dc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   129de:	2500      	movs	r5, #0
   129e0:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   129e2:	6842      	ldr	r2, [r0, #4]
   129e4:	4620      	mov	r0, r4
   129e6:	f7ff fe16 	bl	12616 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   129ea:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   129ec:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   129ee:	2301      	movs	r3, #1
   129f0:	70e3      	strb	r3, [r4, #3]
   129f2:	e054      	b.n	12a9e <ticker_job+0x43c>
		skip = 0;
   129f4:	f04f 0a00 	mov.w	sl, #0
   129f8:	e00e      	b.n	12a18 <ticker_job+0x3b6>
				skip_collide = 0;
   129fa:	2300      	movs	r3, #0
   129fc:	e021      	b.n	12a42 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   129fe:	6865      	ldr	r5, [r4, #4]
   12a00:	2d00      	cmp	r5, #0
   12a02:	d05b      	beq.n	12abc <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   12a04:	4620      	mov	r0, r4
   12a06:	f7ff fac5 	bl	11f94 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   12a0a:	4428      	add	r0, r5
   12a0c:	68a5      	ldr	r5, [r4, #8]
   12a0e:	4405      	add	r5, r0
   12a10:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   12a12:	8b63      	ldrh	r3, [r4, #26]
   12a14:	3301      	adds	r3, #1
   12a16:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   12a18:	4639      	mov	r1, r7
   12a1a:	9800      	ldr	r0, [sp, #0]
   12a1c:	f7ff fa2a 	bl	11e74 <ticker_enqueue>
   12a20:	4605      	mov	r5, r0
   12a22:	4287      	cmp	r7, r0
   12a24:	d021      	beq.n	12a6a <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   12a26:	2dff      	cmp	r5, #255	; 0xff
   12a28:	d0e9      	beq.n	129fe <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   12a2a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   12a2e:	ea4f 0883 	mov.w	r8, r3, lsl #2
   12a32:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   12a36:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   12a38:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   12a3a:	4293      	cmp	r3, r2
   12a3c:	d9dd      	bls.n	129fa <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   12a3e:	1a9b      	subs	r3, r3, r2
   12a40:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   12a42:	6872      	ldr	r2, [r6, #4]
   12a44:	2a00      	cmp	r2, #0
   12a46:	d0da      	beq.n	129fe <ticker_job+0x39c>
   12a48:	4553      	cmp	r3, sl
   12a4a:	d8d8      	bhi.n	129fe <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   12a4c:	78f2      	ldrb	r2, [r6, #3]
   12a4e:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   12a50:	429a      	cmp	r2, r3
   12a52:	d2d4      	bcs.n	129fe <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   12a54:	4629      	mov	r1, r5
   12a56:	9800      	ldr	r0, [sp, #0]
   12a58:	f7ff fa6c 	bl	11f34 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   12a5c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   12a5e:	78b3      	ldrb	r3, [r6, #2]
   12a60:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   12a62:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   12a66:	46ab      	mov	fp, r5
   12a68:	e7d6      	b.n	12a18 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   12a6a:	78a3      	ldrb	r3, [r4, #2]
   12a6c:	3301      	adds	r3, #1
   12a6e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   12a70:	2100      	movs	r1, #0
			if (user_op) {
   12a72:	9b01      	ldr	r3, [sp, #4]
   12a74:	b113      	cbz	r3, 12a7c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   12a76:	4618      	mov	r0, r3
   12a78:	f7ff faba 	bl	11ff0 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   12a7c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   12a80:	d01e      	beq.n	12ac0 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   12a82:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   12a86:	f43f af73 	beq.w	12970 <ticker_job+0x30e>
				ticker = &node[id_insert];
   12a8a:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   12a8e:	0093      	lsls	r3, r2, #2
   12a90:	9a02      	ldr	r2, [sp, #8]
   12a92:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   12a94:	465f      	mov	r7, fp
				insert_head = ticker->next;
   12a96:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   12a9a:	2300      	movs	r3, #0
   12a9c:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   12a9e:	9b00      	ldr	r3, [sp, #0]
   12aa0:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   12aa4:	23ff      	movs	r3, #255	; 0xff
   12aa6:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   12aa8:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   12aac:	8b23      	ldrh	r3, [r4, #24]
   12aae:	459a      	cmp	sl, r3
   12ab0:	d9a0      	bls.n	129f4 <ticker_job+0x392>
		skip = ticker->lazy_current -
   12ab2:	ebaa 0a03 	sub.w	sl, sl, r3
   12ab6:	fa1f fa8a 	uxth.w	sl, sl
   12aba:	e7ad      	b.n	12a18 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   12abc:	2101      	movs	r1, #1
   12abe:	e7d8      	b.n	12a72 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   12ac0:	9b04      	ldr	r3, [sp, #16]
   12ac2:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   12ac4:	9a03      	ldr	r2, [sp, #12]
   12ac6:	429a      	cmp	r2, r3
   12ac8:	d1db      	bne.n	12a82 <ticker_job+0x420>
	while (count_user--) {
   12aca:	9b07      	ldr	r3, [sp, #28]
   12acc:	1e5a      	subs	r2, r3, #1
   12ace:	b2d2      	uxtb	r2, r2
   12ad0:	9207      	str	r2, [sp, #28]
   12ad2:	b153      	cbz	r3, 12aea <ticker_job+0x488>
		user = &users[count_user];
   12ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ad6:	9a07      	ldr	r2, [sp, #28]
   12ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12adc:	461a      	mov	r2, r3
   12ade:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   12ae0:	685b      	ldr	r3, [r3, #4]
   12ae2:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   12ae4:	7853      	ldrb	r3, [r2, #1]
   12ae6:	9303      	str	r3, [sp, #12]
   12ae8:	e7c8      	b.n	12a7c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   12aea:	9b00      	ldr	r3, [sp, #0]
   12aec:	7e1b      	ldrb	r3, [r3, #24]
   12aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12af0:	429a      	cmp	r2, r3
   12af2:	d001      	beq.n	12af8 <ticker_job+0x496>
		flag_compare_update = 1;
   12af4:	2301      	movs	r3, #1
   12af6:	9308      	str	r3, [sp, #32]
	if (!pending) {
   12af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12afa:	b18b      	cbz	r3, 12b20 <ticker_job+0x4be>
	instance->job_guard = 0;
   12afc:	2300      	movs	r3, #0
   12afe:	9a00      	ldr	r2, [sp, #0]
   12b00:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   12b02:	9b08      	ldr	r3, [sp, #32]
   12b04:	2b00      	cmp	r3, #0
   12b06:	d13f      	bne.n	12b88 <ticker_job+0x526>
	if (instance->worker_trigger) {
   12b08:	9b00      	ldr	r3, [sp, #0]
   12b0a:	7f5b      	ldrb	r3, [r3, #29]
   12b0c:	b12b      	cbz	r3, 12b1a <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   12b0e:	9b00      	ldr	r3, [sp, #0]
   12b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12b12:	2201      	movs	r2, #1
   12b14:	4611      	mov	r1, r2
   12b16:	2002      	movs	r0, #2
   12b18:	4798      	blx	r3
}
   12b1a:	b00d      	add	sp, #52	; 0x34
   12b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   12b20:	9a00      	ldr	r2, [sp, #0]
   12b22:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   12b26:	7a53      	ldrb	r3, [r2, #9]
   12b28:	e026      	b.n	12b78 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   12b2a:	2300      	movs	r3, #0
   12b2c:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   12b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   12b30:	b113      	cbz	r3, 12b38 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   12b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   12b34:	6a38      	ldr	r0, [r7, #32]
   12b36:	4798      	blx	r3
			first = user->first + 1;
   12b38:	7863      	ldrb	r3, [r4, #1]
   12b3a:	3301      	adds	r3, #1
   12b3c:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   12b3e:	7822      	ldrb	r2, [r4, #0]
   12b40:	4293      	cmp	r3, r2
   12b42:	d016      	beq.n	12b72 <ticker_job+0x510>
			user->first = first;
   12b44:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   12b46:	7862      	ldrb	r2, [r4, #1]
   12b48:	78e3      	ldrb	r3, [r4, #3]
   12b4a:	429a      	cmp	r2, r3
   12b4c:	d013      	beq.n	12b76 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   12b4e:	232c      	movs	r3, #44	; 0x2c
   12b50:	fb03 f302 	mul.w	r3, r3, r2
   12b54:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   12b56:	5ceb      	ldrb	r3, [r5, r3]
   12b58:	2b01      	cmp	r3, #1
   12b5a:	d0e6      	beq.n	12b2a <ticker_job+0x4c8>
   12b5c:	2b02      	cmp	r3, #2
   12b5e:	d106      	bne.n	12b6e <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   12b60:	68fb      	ldr	r3, [r7, #12]
   12b62:	68ba      	ldr	r2, [r7, #8]
   12b64:	6879      	ldr	r1, [r7, #4]
   12b66:	9800      	ldr	r0, [sp, #0]
   12b68:	f7ff f955 	bl	11e16 <ticker_by_next_slot_get>
   12b6c:	e7dd      	b.n	12b2a <ticker_job+0x4c8>
	fp_op_func = NULL;
   12b6e:	2300      	movs	r3, #0
   12b70:	e7de      	b.n	12b30 <ticker_job+0x4ce>
				first = 0;
   12b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b74:	e7e6      	b.n	12b44 <ticker_job+0x4e2>
	while (count_user--) {
   12b76:	4633      	mov	r3, r6
   12b78:	1e5e      	subs	r6, r3, #1
   12b7a:	b2f6      	uxtb	r6, r6
   12b7c:	2b00      	cmp	r3, #0
   12b7e:	d0bd      	beq.n	12afc <ticker_job+0x49a>
		user = &users[count_user];
   12b80:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   12b84:	6865      	ldr	r5, [r4, #4]
   12b86:	e7de      	b.n	12b46 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   12b88:	7e13      	ldrb	r3, [r2, #24]
   12b8a:	2bff      	cmp	r3, #255	; 0xff
   12b8c:	d02f      	beq.n	12bee <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   12b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b90:	2bff      	cmp	r3, #255	; 0xff
   12b92:	d034      	beq.n	12bfe <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   12b94:	9800      	ldr	r0, [sp, #0]
   12b96:	6802      	ldr	r2, [r0, #0]
   12b98:	7e03      	ldrb	r3, [r0, #24]
   12b9a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   12b9e:	0099      	lsls	r1, r3, #2
   12ba0:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   12ba2:	6897      	ldr	r7, [r2, #8]
	i = 10;
   12ba4:	250a      	movs	r5, #10
   12ba6:	4680      	mov	r8, r0
		LL_ASSERT(i);
   12ba8:	b39d      	cbz	r5, 12c12 <ticker_job+0x5b0>
		i--;
   12baa:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   12bac:	f7fd ff68 	bl	10a80 <cntr_cnt_get>
   12bb0:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   12bb2:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   12bb6:	4621      	mov	r1, r4
   12bb8:	f7ff fcce 	bl	12558 <ticker_ticks_diff_get>
   12bbc:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   12bbe:	4287      	cmp	r7, r0
   12bc0:	bf2c      	ite	cs
   12bc2:	19e4      	addcs	r4, r4, r7
   12bc4:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   12bc6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   12bca:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   12bce:	4620      	mov	r0, r4
   12bd0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   12bd2:	f7fd ff55 	bl	10a80 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   12bd6:	4631      	mov	r1, r6
   12bd8:	f7ff fcbe 	bl	12558 <ticker_ticks_diff_get>
   12bdc:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   12be0:	4631      	mov	r1, r6
   12be2:	4620      	mov	r0, r4
   12be4:	f7ff fcb8 	bl	12558 <ticker_ticks_diff_get>
   12be8:	4581      	cmp	r9, r0
   12bea:	d8dd      	bhi.n	12ba8 <ticker_job+0x546>
   12bec:	e78c      	b.n	12b08 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   12bee:	f7fd ff2d 	bl	10a4c <cntr_stop>
   12bf2:	2800      	cmp	r0, #0
   12bf4:	d188      	bne.n	12b08 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   12bf6:	2300      	movs	r3, #0
   12bf8:	9a00      	ldr	r2, [sp, #0]
   12bfa:	8353      	strh	r3, [r2, #26]
   12bfc:	e784      	b.n	12b08 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   12bfe:	f7fd ff3f 	bl	10a80 <cntr_cnt_get>
   12c02:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   12c04:	f7fd ff12 	bl	10a2c <cntr_start>
   12c08:	2800      	cmp	r0, #0
   12c0a:	d1c3      	bne.n	12b94 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   12c0c:	9b00      	ldr	r3, [sp, #0]
   12c0e:	615c      	str	r4, [r3, #20]
   12c10:	e7c0      	b.n	12b94 <ticker_job+0x532>
		LL_ASSERT(i);
   12c12:	4040      	eors	r0, r0
   12c14:	f380 8811 	msr	BASEPRI, r0
   12c18:	f04f 0004 	mov.w	r0, #4
   12c1c:	df02      	svc	2
	...

00012c20 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   12c20:	b570      	push	{r4, r5, r6, lr}
   12c22:	4606      	mov	r6, r0
   12c24:	460c      	mov	r4, r1
	while (len) {
   12c26:	b19c      	cbz	r4, 12c50 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   12c28:	4d0a      	ldr	r5, [pc, #40]	; (12c54 <bt_rand+0x34>)
   12c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12c2e:	4628      	mov	r0, r5
   12c30:	f016 ff4e 	bl	29ad0 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   12c34:	4631      	mov	r1, r6
   12c36:	4620      	mov	r0, r4
   12c38:	f7ff f89a 	bl	11d70 <rand_get>
   12c3c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   12c3e:	4628      	mov	r0, r5
   12c40:	f016 ffb0 	bl	29ba4 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   12c44:	2c00      	cmp	r4, #0
   12c46:	d0ee      	beq.n	12c26 <bt_rand+0x6>
   12c48:	bf20      	wfe
  __ASM volatile ("sev");
   12c4a:	bf40      	sev
  __ASM volatile ("wfe");
   12c4c:	bf20      	wfe
   12c4e:	e7ea      	b.n	12c26 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   12c50:	2000      	movs	r0, #0
   12c52:	bd70      	pop	{r4, r5, r6, pc}
   12c54:	2000d158 	.word	0x2000d158

00012c58 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   12c58:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   12c5a:	2300      	movs	r3, #0
   12c5c:	f7fd ff4c 	bl	10af8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   12c60:	2000      	movs	r0, #0
   12c62:	bd08      	pop	{r3, pc}

00012c64 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   12c64:	6008      	str	r0, [r1, #0]
   12c66:	4770      	bx	lr

00012c68 <mayfly_xtal_start>:
{
   12c68:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   12c6a:	4b03      	ldr	r3, [pc, #12]	; (12c78 <mayfly_xtal_start+0x10>)
   12c6c:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   12c6e:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   12c70:	681b      	ldr	r3, [r3, #0]
   12c72:	2100      	movs	r1, #0
   12c74:	4798      	blx	r3
   12c76:	bd08      	pop	{r3, pc}
   12c78:	20000f7c 	.word	0x20000f7c

00012c7c <mayfly_xtal_stop>:
{
   12c7c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   12c7e:	4b03      	ldr	r3, [pc, #12]	; (12c8c <mayfly_xtal_stop+0x10>)
   12c80:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   12c82:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   12c84:	685b      	ldr	r3, [r3, #4]
   12c86:	2100      	movs	r1, #0
   12c88:	4798      	blx	r3
   12c8a:	bd08      	pop	{r3, pc}
   12c8c:	20000f7c 	.word	0x20000f7c

00012c90 <prepare_reduced>:
	if (status == 0) {
   12c90:	b918      	cbnz	r0, 12c9a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   12c92:	680b      	ldr	r3, [r1, #0]
   12c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12c98:	600b      	str	r3, [r1, #0]
   12c9a:	4770      	bx	lr

00012c9c <prepare_normal>:
	if (status == 0) {
   12c9c:	b918      	cbnz	r0, 12ca6 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   12c9e:	680b      	ldr	r3, [r1, #0]
   12ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12ca4:	600b      	str	r3, [r1, #0]
   12ca6:	4770      	bx	lr

00012ca8 <chan_sel_remap>:
{
   12ca8:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   12caa:	2405      	movs	r4, #5
	chan_next = 0;
   12cac:	2200      	movs	r2, #0
	while (byte_count--) {
   12cae:	e011      	b.n	12cd4 <chan_sel_remap+0x2c>
			chan_next++;
   12cb0:	3201      	adds	r2, #1
   12cb2:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   12cb4:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   12cb6:	461c      	mov	r4, r3
   12cb8:	1e63      	subs	r3, r4, #1
   12cba:	b2db      	uxtb	r3, r3
   12cbc:	b134      	cbz	r4, 12ccc <chan_sel_remap+0x24>
			if (bite & 0x01) {
   12cbe:	f015 0f01 	tst.w	r5, #1
   12cc2:	d0f5      	beq.n	12cb0 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   12cc4:	b111      	cbz	r1, 12ccc <chan_sel_remap+0x24>
				chan_index--;
   12cc6:	3901      	subs	r1, #1
   12cc8:	b2c9      	uxtb	r1, r1
   12cca:	e7f1      	b.n	12cb0 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   12ccc:	2b07      	cmp	r3, #7
   12cce:	d907      	bls.n	12ce0 <chan_sel_remap+0x38>
		chan_map++;
   12cd0:	3001      	adds	r0, #1
	while (byte_count--) {
   12cd2:	4634      	mov	r4, r6
   12cd4:	1e63      	subs	r3, r4, #1
   12cd6:	b2de      	uxtb	r6, r3
   12cd8:	b114      	cbz	r4, 12ce0 <chan_sel_remap+0x38>
		bite = *chan_map;
   12cda:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   12cdc:	2408      	movs	r4, #8
		while (bit_count--) {
   12cde:	e7eb      	b.n	12cb8 <chan_sel_remap+0x10>
}
   12ce0:	4610      	mov	r0, r2
   12ce2:	bc70      	pop	{r4, r5, r6}
   12ce4:	4770      	bx	lr
	...

00012ce8 <chan_sel_1>:
{
   12ce8:	b570      	push	{r4, r5, r6, lr}
   12cea:	4605      	mov	r5, r0
   12cec:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12cf0:	7804      	ldrb	r4, [r0, #0]
   12cf2:	fb02 1101 	mla	r1, r2, r1, r1
   12cf6:	4421      	add	r1, r4
   12cf8:	4c0f      	ldr	r4, [pc, #60]	; (12d38 <chan_sel_1+0x50>)
   12cfa:	fb84 2401 	smull	r2, r4, r4, r1
   12cfe:	1862      	adds	r2, r4, r1
   12d00:	17cc      	asrs	r4, r1, #31
   12d02:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   12d06:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12d0a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   12d0e:	1b0c      	subs	r4, r1, r4
   12d10:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   12d12:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   12d14:	08c2      	lsrs	r2, r0, #3
   12d16:	5c9a      	ldrb	r2, [r3, r2]
   12d18:	f004 0407 	and.w	r4, r4, #7
   12d1c:	fa42 f404 	asr.w	r4, r2, r4
   12d20:	f014 0f01 	tst.w	r4, #1
   12d24:	d107      	bne.n	12d36 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   12d26:	fbb0 f1f6 	udiv	r1, r0, r6
   12d2a:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   12d2e:	b2c9      	uxtb	r1, r1
   12d30:	4618      	mov	r0, r3
   12d32:	f7ff ffb9 	bl	12ca8 <chan_sel_remap>
}
   12d36:	bd70      	pop	{r4, r5, r6, pc}
   12d38:	dd67c8a7 	.word	0xdd67c8a7

00012d3c <chan_rev_8>:
	o = 0;
   12d3c:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   12d3e:	461a      	mov	r2, r3
   12d40:	e007      	b.n	12d52 <chan_rev_8+0x16>
		o <<= 1;
   12d42:	005b      	lsls	r3, r3, #1
   12d44:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   12d46:	f000 0101 	and.w	r1, r0, #1
   12d4a:	430b      	orrs	r3, r1
		i >>= 1;
   12d4c:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   12d4e:	3201      	adds	r2, #1
   12d50:	b2d2      	uxtb	r2, r2
   12d52:	2a07      	cmp	r2, #7
   12d54:	d9f5      	bls.n	12d42 <chan_rev_8+0x6>
}
   12d56:	4618      	mov	r0, r3
   12d58:	4770      	bx	lr

00012d5a <chan_perm>:
{
   12d5a:	b538      	push	{r3, r4, r5, lr}
   12d5c:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   12d5e:	0a00      	lsrs	r0, r0, #8
   12d60:	f7ff ffec 	bl	12d3c <chan_rev_8>
   12d64:	0205      	lsls	r5, r0, #8
   12d66:	b2e0      	uxtb	r0, r4
   12d68:	f7ff ffe8 	bl	12d3c <chan_rev_8>
   12d6c:	b200      	sxth	r0, r0
   12d6e:	4328      	orrs	r0, r5
}
   12d70:	b280      	uxth	r0, r0
   12d72:	bd38      	pop	{r3, r4, r5, pc}

00012d74 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   12d74:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   12d78:	fa11 f080 	uxtah	r0, r1, r0
}
   12d7c:	b280      	uxth	r0, r0
   12d7e:	4770      	bx	lr

00012d80 <chan_prn>:
{
   12d80:	b538      	push	{r3, r4, r5, lr}
   12d82:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   12d84:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   12d86:	2400      	movs	r4, #0
   12d88:	e006      	b.n	12d98 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   12d8a:	f7ff ffe6 	bl	12d5a <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   12d8e:	4629      	mov	r1, r5
   12d90:	f7ff fff0 	bl	12d74 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   12d94:	3401      	adds	r4, #1
   12d96:	b2e4      	uxtb	r4, r4
   12d98:	2c02      	cmp	r4, #2
   12d9a:	d9f6      	bls.n	12d8a <chan_prn+0xa>
	prn_e ^= chan_id;
   12d9c:	4068      	eors	r0, r5
}
   12d9e:	b280      	uxth	r0, r0
   12da0:	bd38      	pop	{r3, r4, r5, pc}
	...

00012da4 <chan_sel_2>:
{
   12da4:	b538      	push	{r3, r4, r5, lr}
   12da6:	4615      	mov	r5, r2
   12da8:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   12daa:	f7ff ffe9 	bl	12d80 <chan_prn>
   12dae:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   12db0:	4a0e      	ldr	r2, [pc, #56]	; (12dec <chan_sel_2+0x48>)
   12db2:	fba2 3200 	umull	r3, r2, r2, r0
   12db6:	1a80      	subs	r0, r0, r2
   12db8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   12dbc:	0952      	lsrs	r2, r2, #5
   12dbe:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   12dc2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   12dc6:	1a8a      	subs	r2, r1, r2
   12dc8:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   12dca:	08c3      	lsrs	r3, r0, #3
   12dcc:	5ceb      	ldrb	r3, [r5, r3]
   12dce:	f000 0207 	and.w	r2, r0, #7
   12dd2:	4113      	asrs	r3, r2
   12dd4:	f013 0f01 	tst.w	r3, #1
   12dd8:	d106      	bne.n	12de8 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   12dda:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   12dde:	f3c1 4107 	ubfx	r1, r1, #16, #8
   12de2:	4628      	mov	r0, r5
   12de4:	f7ff ff60 	bl	12ca8 <chan_sel_remap>
}
   12de8:	bd38      	pop	{r3, r4, r5, pc}
   12dea:	bf00      	nop
   12dec:	bacf914d 	.word	0xbacf914d

00012df0 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   12df0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12df4:	681b      	ldr	r3, [r3, #0]
   12df6:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   12df8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12dfc:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   12dfe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   12e02:	4770      	bx	lr

00012e04 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   12e04:	b538      	push	{r3, r4, r5, lr}
   12e06:	4604      	mov	r4, r0
   12e08:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   12e0a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   12e0e:	f013 0f80 	tst.w	r3, #128	; 0x80
   12e12:	d11f      	bne.n	12e54 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   12e14:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   12e18:	b1e2      	cbz	r2, 12e54 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   12e1a:	f013 0f08 	tst.w	r3, #8
   12e1e:	d119      	bne.n	12e54 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   12e20:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   12e24:	429a      	cmp	r2, r3
   12e26:	d007      	beq.n	12e38 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   12e28:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12e2c:	b143      	cbz	r3, 12e40 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   12e2e:	4629      	mov	r1, r5
   12e30:	4620      	mov	r0, r4
   12e32:	f7ff ffdd 	bl	12df0 <ctrl_tx_last_enqueue>
   12e36:	e014      	b.n	12e62 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   12e3e:	e7f3      	b.n	12e28 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   12e40:	6813      	ldr	r3, [r2, #0]
   12e42:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   12e44:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12e48:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   12e4a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   12e4e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   12e52:	e006      	b.n	12e62 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   12e54:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12e58:	b133      	cbz	r3, 12e68 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   12e5a:	4629      	mov	r1, r5
   12e5c:	4620      	mov	r0, r4
   12e5e:	f7ff ffc7 	bl	12df0 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   12e62:	682b      	ldr	r3, [r5, #0]
   12e64:	b153      	cbz	r3, 12e7c <ctrl_tx_enqueue+0x78>
   12e66:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   12e68:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12e6c:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   12e6e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   12e72:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   12e76:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   12e7a:	e7f2      	b.n	12e62 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   12e7c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   12e80:	e7f1      	b.n	12e66 <ctrl_tx_enqueue+0x62>

00012e82 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   12e82:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   12e84:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   12e88:	f013 0f08 	tst.w	r3, #8
   12e8c:	d010      	beq.n	12eb0 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   12e8e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   12e92:	b13b      	cbz	r3, 12ea4 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   12e94:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12e98:	681b      	ldr	r3, [r3, #0]
   12e9a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   12e9c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   12ea0:	6019      	str	r1, [r3, #0]
   12ea2:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   12ea4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12ea8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   12eaa:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   12eae:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   12eb0:	f7ff ffa8 	bl	12e04 <ctrl_tx_enqueue>
   12eb4:	bd08      	pop	{r3, pc}
	...

00012eb8 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   12eb8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   12ebc:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   12ec0:	428b      	cmp	r3, r1
   12ec2:	d001      	beq.n	12ec8 <conn_update_req+0x10>
		return 1;
   12ec4:	2001      	movs	r0, #1
   12ec6:	4770      	bx	lr
{
   12ec8:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   12eca:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12ece:	2b00      	cmp	r3, #0
   12ed0:	db2a      	blt.n	12f28 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   12ed2:	2401      	movs	r4, #1
   12ed4:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   12ed8:	2200      	movs	r2, #0
   12eda:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   12ede:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   12ee0:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   12ee4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   12ee6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   12eea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   12eec:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   12ef0:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   12ef4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   12ef8:	4d26      	ldr	r5, [pc, #152]	; (12f94 <conn_update_req+0xdc>)
   12efa:	fb85 e503 	smull	lr, r5, r5, r3
   12efe:	17db      	asrs	r3, r3, #31
   12f00:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   12f04:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   12f08:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   12f0c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   12f10:	b2db      	uxtb	r3, r3
   12f12:	f043 0304 	orr.w	r3, r3, #4
   12f16:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   12f1a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   12f1e:	3901      	subs	r1, #1
   12f20:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   12f24:	4610      	mov	r0, r2
   12f26:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   12f28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   12f2c:	f013 0f20 	tst.w	r3, #32
   12f30:	d101      	bne.n	12f36 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   12f32:	2002      	movs	r0, #2
   12f34:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   12f36:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   12f3a:	f013 0f02 	tst.w	r3, #2
   12f3e:	d101      	bne.n	12f44 <conn_update_req+0x8c>
	return 2;
   12f40:	2002      	movs	r0, #2
}
   12f42:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   12f44:	2300      	movs	r3, #0
   12f46:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   12f4a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   12f4c:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   12f50:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   12f52:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   12f56:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   12f58:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   12f5c:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   12f60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   12f64:	490b      	ldr	r1, [pc, #44]	; (12f94 <conn_update_req+0xdc>)
   12f66:	fb81 4102 	smull	r4, r1, r1, r2
   12f6a:	17d2      	asrs	r2, r2, #31
   12f6c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   12f70:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   12f74:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   12f78:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   12f7c:	f363 02c3 	bfi	r2, r3, #3, #1
   12f80:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   12f84:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   12f88:	3a01      	subs	r2, #1
   12f8a:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   12f8e:	4618      	mov	r0, r3
   12f90:	bd30      	pop	{r4, r5, pc}
   12f92:	bf00      	nop
   12f94:	10624dd3 	.word	0x10624dd3

00012f98 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   12f98:	4a0d      	ldr	r2, [pc, #52]	; (12fd0 <rx_fc_lock+0x38>)
   12f9a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   12f9e:	b2db      	uxtb	r3, r3
   12fa0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   12fa4:	4293      	cmp	r3, r2
   12fa6:	d000      	beq.n	12faa <rx_fc_lock+0x12>
   12fa8:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   12faa:	4a09      	ldr	r2, [pc, #36]	; (12fd0 <rx_fc_lock+0x38>)
   12fac:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   12fb0:	33b8      	adds	r3, #184	; 0xb8
   12fb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   12fb6:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   12fb8:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   12fbc:	3301      	adds	r3, #1
   12fbe:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   12fc0:	2b03      	cmp	r3, #3
   12fc2:	d003      	beq.n	12fcc <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   12fc4:	4a02      	ldr	r2, [pc, #8]	; (12fd0 <rx_fc_lock+0x38>)
   12fc6:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   12fca:	e7ed      	b.n	12fa8 <rx_fc_lock+0x10>
			req = 0;
   12fcc:	2300      	movs	r3, #0
   12fce:	e7f9      	b.n	12fc4 <rx_fc_lock+0x2c>
   12fd0:	20000f7c 	.word	0x20000f7c

00012fd4 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12fd4:	b900      	cbnz	r0, 12fd8 <ticker_success_assert+0x4>
   12fd6:	4770      	bx	lr
   12fd8:	4040      	eors	r0, r0
   12fda:	f380 8811 	msr	BASEPRI, r0
   12fde:	f04f 0004 	mov.w	r0, #4
   12fe2:	df02      	svc	2

00012fe4 <start_enc_rsp_send>:
{
   12fe4:	b510      	push	{r4, lr}
   12fe6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   12fe8:	b171      	cbz	r1, 13008 <start_enc_rsp_send+0x24>
   12fea:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   12fec:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12fee:	781a      	ldrb	r2, [r3, #0]
   12ff0:	f042 0203 	orr.w	r2, r2, #3
   12ff4:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   12ff6:	2201      	movs	r2, #1
   12ff8:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   12ffa:	2206      	movs	r2, #6
   12ffc:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   12ffe:	b111      	cbz	r1, 13006 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   13000:	4620      	mov	r0, r4
   13002:	f7ff feff 	bl	12e04 <ctrl_tx_enqueue>
   13006:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13008:	4806      	ldr	r0, [pc, #24]	; (13024 <start_enc_rsp_send+0x40>)
   1300a:	f7fd fc68 	bl	108de <mem_acquire>
		LL_ASSERT(node_tx);
   1300e:	4601      	mov	r1, r0
   13010:	b108      	cbz	r0, 13016 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   13012:	1d03      	adds	r3, r0, #4
   13014:	e7eb      	b.n	12fee <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   13016:	4040      	eors	r0, r0
   13018:	f380 8811 	msr	BASEPRI, r0
   1301c:	f04f 0004 	mov.w	r0, #4
   13020:	df02      	svc	2
   13022:	bf00      	nop
   13024:	200010d4 	.word	0x200010d4

00013028 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   13028:	2801      	cmp	r0, #1
   1302a:	d005      	beq.n	13038 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   1302c:	4b0d      	ldr	r3, [pc, #52]	; (13064 <ticker_stop_adv_assert+0x3c>)
   1302e:	7b1b      	ldrb	r3, [r3, #12]
   13030:	b2db      	uxtb	r3, r3
   13032:	2b05      	cmp	r3, #5
   13034:	d00f      	beq.n	13056 <ticker_stop_adv_assert+0x2e>
   13036:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   13038:	4b0a      	ldr	r3, [pc, #40]	; (13064 <ticker_stop_adv_assert+0x3c>)
   1303a:	7b9b      	ldrb	r3, [r3, #14]
   1303c:	b2db      	uxtb	r3, r3
   1303e:	2b05      	cmp	r3, #5
   13040:	d103      	bne.n	1304a <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   13042:	2200      	movs	r2, #0
   13044:	4b07      	ldr	r3, [pc, #28]	; (13064 <ticker_stop_adv_assert+0x3c>)
   13046:	739a      	strb	r2, [r3, #14]
   13048:	4770      	bx	lr
			LL_ASSERT(0);
   1304a:	4040      	eors	r0, r0
   1304c:	f380 8811 	msr	BASEPRI, r0
   13050:	f04f 0004 	mov.w	r0, #4
   13054:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   13056:	4040      	eors	r0, r0
   13058:	f380 8811 	msr	BASEPRI, r0
   1305c:	f04f 0004 	mov.w	r0, #4
   13060:	df02      	svc	2
   13062:	bf00      	nop
   13064:	20000f7c 	.word	0x20000f7c

00013068 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   13068:	2801      	cmp	r0, #1
   1306a:	d005      	beq.n	13078 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   1306c:	4b0d      	ldr	r3, [pc, #52]	; (130a4 <ticker_stop_scan_assert+0x3c>)
   1306e:	7b1b      	ldrb	r3, [r3, #12]
   13070:	b2db      	uxtb	r3, r3
   13072:	2b06      	cmp	r3, #6
   13074:	d00f      	beq.n	13096 <ticker_stop_scan_assert+0x2e>
   13076:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   13078:	4b0a      	ldr	r3, [pc, #40]	; (130a4 <ticker_stop_scan_assert+0x3c>)
   1307a:	7b9b      	ldrb	r3, [r3, #14]
   1307c:	b2db      	uxtb	r3, r3
   1307e:	2b06      	cmp	r3, #6
   13080:	d103      	bne.n	1308a <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   13082:	2200      	movs	r2, #0
   13084:	4b07      	ldr	r3, [pc, #28]	; (130a4 <ticker_stop_scan_assert+0x3c>)
   13086:	739a      	strb	r2, [r3, #14]
   13088:	4770      	bx	lr
			LL_ASSERT(0);
   1308a:	4040      	eors	r0, r0
   1308c:	f380 8811 	msr	BASEPRI, r0
   13090:	f04f 0004 	mov.w	r0, #4
   13094:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   13096:	4040      	eors	r0, r0
   13098:	f380 8811 	msr	BASEPRI, r0
   1309c:	f04f 0004 	mov.w	r0, #4
   130a0:	df02      	svc	2
   130a2:	bf00      	nop
   130a4:	20000f7c 	.word	0x20000f7c

000130a8 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   130a8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   130ac:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   130ae:	1a9b      	subs	r3, r3, r2
   130b0:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   130b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   130b6:	da5b      	bge.n	13170 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   130b8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   130bc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   130c0:	429a      	cmp	r2, r3
   130c2:	d13d      	bne.n	13140 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   130c4:	4b2c      	ldr	r3, [pc, #176]	; (13178 <conn_update+0xd0>)
   130c6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   130ca:	2b00      	cmp	r3, #0
   130cc:	d03e      	beq.n	1314c <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   130ce:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   130d0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   130d4:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   130d8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   130dc:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   130e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   130e4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   130e8:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   130ec:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   130f0:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   130f4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   130f8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   130fc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   13100:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   13104:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   13108:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   1310c:	f36f 0382 	bfc	r3, #2, #1
   13110:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   13114:	2301      	movs	r3, #1
   13116:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   1311a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1311e:	3b01      	subs	r3, #1
   13120:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13124:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   13128:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   1312c:	429a      	cmp	r2, r3
   1312e:	d021      	beq.n	13174 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   13130:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   13134:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   13138:	2b04      	cmp	r3, #4
   1313a:	d015      	beq.n	13168 <conn_update+0xc0>
	return 0;
   1313c:	2000      	movs	r0, #0
}
   1313e:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13140:	4040      	eors	r0, r0
   13142:	f380 8811 	msr	BASEPRI, r0
   13146:	f04f 0004 	mov.w	r0, #4
   1314a:	df02      	svc	2
		LL_ASSERT(conn->role);
   1314c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13150:	2b00      	cmp	r3, #0
   13152:	da03      	bge.n	1315c <conn_update+0xb4>
		_radio.conn_upd = conn;
   13154:	4b08      	ldr	r3, [pc, #32]	; (13178 <conn_update+0xd0>)
   13156:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   1315a:	e7b8      	b.n	130ce <conn_update+0x26>
		LL_ASSERT(conn->role);
   1315c:	4040      	eors	r0, r0
   1315e:	f380 8811 	msr	BASEPRI, r0
   13162:	f04f 0004 	mov.w	r0, #4
   13166:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13168:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   1316c:	2000      	movs	r0, #0
   1316e:	4770      	bx	lr
		return 1;
   13170:	2001      	movs	r0, #1
   13172:	4770      	bx	lr
	return 0;
   13174:	2000      	movs	r0, #0
   13176:	4770      	bx	lr
   13178:	20000f7c 	.word	0x20000f7c

0001317c <pause_enc_rsp_send>:
{
   1317c:	b510      	push	{r4, lr}
   1317e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13180:	480b      	ldr	r0, [pc, #44]	; (131b0 <pause_enc_rsp_send+0x34>)
   13182:	f7fd fbac 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   13186:	b160      	cbz	r0, 131a2 <pause_enc_rsp_send+0x26>
   13188:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1318a:	7903      	ldrb	r3, [r0, #4]
   1318c:	f043 0303 	orr.w	r3, r3, #3
   13190:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   13192:	2301      	movs	r3, #1
   13194:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   13196:	230b      	movs	r3, #11
   13198:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1319a:	4620      	mov	r0, r4
   1319c:	f7ff fe32 	bl	12e04 <ctrl_tx_enqueue>
   131a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   131a2:	4040      	eors	r0, r0
   131a4:	f380 8811 	msr	BASEPRI, r0
   131a8:	f04f 0004 	mov.w	r0, #4
   131ac:	df02      	svc	2
   131ae:	bf00      	nop
   131b0:	200010d4 	.word	0x200010d4

000131b4 <ping_resp_send>:
{
   131b4:	b510      	push	{r4, lr}
   131b6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   131b8:	480b      	ldr	r0, [pc, #44]	; (131e8 <ping_resp_send+0x34>)
   131ba:	f7fd fb90 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   131be:	b160      	cbz	r0, 131da <ping_resp_send+0x26>
   131c0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   131c2:	7903      	ldrb	r3, [r0, #4]
   131c4:	f043 0303 	orr.w	r3, r3, #3
   131c8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   131ca:	2301      	movs	r3, #1
   131cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   131ce:	2313      	movs	r3, #19
   131d0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   131d2:	4620      	mov	r0, r4
   131d4:	f7ff fe16 	bl	12e04 <ctrl_tx_enqueue>
   131d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   131da:	4040      	eors	r0, r0
   131dc:	f380 8811 	msr	BASEPRI, r0
   131e0:	f04f 0004 	mov.w	r0, #4
   131e4:	df02      	svc	2
   131e6:	bf00      	nop
   131e8:	200010d4 	.word	0x200010d4

000131ec <length_resp_send>:
{
   131ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131ee:	4604      	mov	r4, r0
   131f0:	460f      	mov	r7, r1
   131f2:	4615      	mov	r5, r2
   131f4:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   131f6:	480e      	ldr	r0, [pc, #56]	; (13230 <length_resp_send+0x44>)
   131f8:	f7fd fb71 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   131fc:	b190      	cbz	r0, 13224 <length_resp_send+0x38>
   131fe:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13200:	7903      	ldrb	r3, [r0, #4]
   13202:	f043 0303 	orr.w	r3, r3, #3
   13206:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13208:	2309      	movs	r3, #9
   1320a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1320c:	2315      	movs	r3, #21
   1320e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   13210:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   13212:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   13214:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   13216:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1321a:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   1321c:	4620      	mov	r0, r4
   1321e:	f7ff fdf1 	bl	12e04 <ctrl_tx_enqueue>
   13222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   13224:	4040      	eors	r0, r0
   13226:	f380 8811 	msr	BASEPRI, r0
   1322a:	f04f 0004 	mov.w	r0, #4
   1322e:	df02      	svc	2
   13230:	200010d4 	.word	0x200010d4

00013234 <reject_ext_ind_send>:
{
   13234:	b570      	push	{r4, r5, r6, lr}
   13236:	4604      	mov	r4, r0
   13238:	460e      	mov	r6, r1
   1323a:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1323c:	480c      	ldr	r0, [pc, #48]	; (13270 <reject_ext_ind_send+0x3c>)
   1323e:	f7fd fb4e 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   13242:	b170      	cbz	r0, 13262 <reject_ext_ind_send+0x2e>
   13244:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13246:	7903      	ldrb	r3, [r0, #4]
   13248:	f043 0303 	orr.w	r3, r3, #3
   1324c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1324e:	2303      	movs	r3, #3
   13250:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   13252:	2311      	movs	r3, #17
   13254:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   13256:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   13258:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   1325a:	4620      	mov	r0, r4
   1325c:	f7ff fdd2 	bl	12e04 <ctrl_tx_enqueue>
   13260:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   13262:	4040      	eors	r0, r0
   13264:	f380 8811 	msr	BASEPRI, r0
   13268:	f04f 0004 	mov.w	r0, #4
   1326c:	df02      	svc	2
   1326e:	bf00      	nop
   13270:	200010d4 	.word	0x200010d4

00013274 <phy_rsp_send>:
{
   13274:	b510      	push	{r4, lr}
   13276:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13278:	4810      	ldr	r0, [pc, #64]	; (132bc <phy_rsp_send+0x48>)
   1327a:	f7fd fb30 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   1327e:	b1b0      	cbz	r0, 132ae <phy_rsp_send+0x3a>
   13280:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13282:	7903      	ldrb	r3, [r0, #4]
   13284:	f043 0303 	orr.w	r3, r3, #3
   13288:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1328a:	2303      	movs	r3, #3
   1328c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1328e:	2317      	movs	r3, #23
   13290:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   13292:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13296:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   1329a:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   1329c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   132a0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   132a4:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   132a6:	4620      	mov	r0, r4
   132a8:	f7ff fdac 	bl	12e04 <ctrl_tx_enqueue>
   132ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   132ae:	4040      	eors	r0, r0
   132b0:	f380 8811 	msr	BASEPRI, r0
   132b4:	f04f 0004 	mov.w	r0, #4
   132b8:	df02      	svc	2
   132ba:	bf00      	nop
   132bc:	200010d4 	.word	0x200010d4

000132c0 <unknown_rsp_send>:
{
   132c0:	b538      	push	{r3, r4, r5, lr}
   132c2:	4604      	mov	r4, r0
   132c4:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   132c6:	480c      	ldr	r0, [pc, #48]	; (132f8 <unknown_rsp_send+0x38>)
   132c8:	f7fd fb09 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   132cc:	b168      	cbz	r0, 132ea <unknown_rsp_send+0x2a>
   132ce:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   132d0:	7903      	ldrb	r3, [r0, #4]
   132d2:	f043 0303 	orr.w	r3, r3, #3
   132d6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   132d8:	2302      	movs	r3, #2
   132da:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   132dc:	2307      	movs	r3, #7
   132de:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   132e0:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   132e2:	4620      	mov	r0, r4
   132e4:	f7ff fd8e 	bl	12e04 <ctrl_tx_enqueue>
   132e8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   132ea:	4040      	eors	r0, r0
   132ec:	f380 8811 	msr	BASEPRI, r0
   132f0:	f04f 0004 	mov.w	r0, #4
   132f4:	df02      	svc	2
   132f6:	bf00      	nop
   132f8:	200010d4 	.word	0x200010d4

000132fc <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   132fc:	b120      	cbz	r0, 13308 <ticker_update_adv_assert+0xc>
   132fe:	4b06      	ldr	r3, [pc, #24]	; (13318 <ticker_update_adv_assert+0x1c>)
   13300:	7b9b      	ldrb	r3, [r3, #14]
   13302:	b2db      	uxtb	r3, r3
   13304:	2b05      	cmp	r3, #5
   13306:	d100      	bne.n	1330a <ticker_update_adv_assert+0xe>
   13308:	4770      	bx	lr
   1330a:	4040      	eors	r0, r0
   1330c:	f380 8811 	msr	BASEPRI, r0
   13310:	f04f 0004 	mov.w	r0, #4
   13314:	df02      	svc	2
   13316:	bf00      	nop
   13318:	20000f7c 	.word	0x20000f7c

0001331c <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   1331c:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1331e:	b120      	cbz	r0, 1332a <ticker_update_slave_assert+0xe>
   13320:	4b05      	ldr	r3, [pc, #20]	; (13338 <ticker_update_slave_assert+0x1c>)
   13322:	7b9b      	ldrb	r3, [r3, #14]
   13324:	b2db      	uxtb	r3, r3
   13326:	4299      	cmp	r1, r3
   13328:	d100      	bne.n	1332c <ticker_update_slave_assert+0x10>
   1332a:	4770      	bx	lr
   1332c:	4040      	eors	r0, r0
   1332e:	f380 8811 	msr	BASEPRI, r0
   13332:	f04f 0004 	mov.w	r0, #4
   13336:	df02      	svc	2
   13338:	20000f7c 	.word	0x20000f7c

0001333c <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1333c:	b930      	cbnz	r0, 1334c <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   1333e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   13342:	f36f 0341 	bfc	r3, #1, #1
   13346:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   1334a:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1334c:	4040      	eors	r0, r0
   1334e:	f380 8811 	msr	BASEPRI, r0
   13352:	f04f 0004 	mov.w	r0, #4
   13356:	df02      	svc	2

00013358 <packet_rx_allocate>:
{
   13358:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   1335a:	4b22      	ldr	r3, [pc, #136]	; (133e4 <packet_rx_allocate+0x8c>)
   1335c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   13360:	4283      	cmp	r3, r0
   13362:	d300      	bcc.n	13366 <packet_rx_allocate+0xe>
   13364:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   13366:	4a1f      	ldr	r2, [pc, #124]	; (133e4 <packet_rx_allocate+0x8c>)
   13368:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   1336c:	3401      	adds	r4, #1
   1336e:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   13370:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   13374:	4294      	cmp	r4, r2
   13376:	d10d      	bne.n	13394 <packet_rx_allocate+0x3c>
		acquire = 0;
   13378:	2400      	movs	r4, #0
   1337a:	e00b      	b.n	13394 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   1337c:	491a      	ldr	r1, [pc, #104]	; (133e8 <packet_rx_allocate+0x90>)
   1337e:	4630      	mov	r0, r6
   13380:	f7fd fac9 	bl	10916 <mem_release>
			break;
   13384:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   13386:	4a17      	ldr	r2, [pc, #92]	; (133e4 <packet_rx_allocate+0x8c>)
   13388:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   1338c:	3b01      	subs	r3, #1
   1338e:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   13392:	462b      	mov	r3, r5
   13394:	1e5d      	subs	r5, r3, #1
   13396:	b2ed      	uxtb	r5, r5
   13398:	b313      	cbz	r3, 133e0 <packet_rx_allocate+0x88>
   1339a:	4b12      	ldr	r3, [pc, #72]	; (133e4 <packet_rx_allocate+0x8c>)
   1339c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   133a0:	b2db      	uxtb	r3, r3
   133a2:	429c      	cmp	r4, r3
   133a4:	d01c      	beq.n	133e0 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   133a6:	4810      	ldr	r0, [pc, #64]	; (133e8 <packet_rx_allocate+0x90>)
   133a8:	f7fd fa99 	bl	108de <mem_acquire>
		if (!link) {
   133ac:	4606      	mov	r6, r0
   133ae:	b1b8      	cbz	r0, 133e0 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   133b0:	480e      	ldr	r0, [pc, #56]	; (133ec <packet_rx_allocate+0x94>)
   133b2:	f7fd fa94 	bl	108de <mem_acquire>
		if (!radio_pdu_node_rx) {
   133b6:	4602      	mov	r2, r0
   133b8:	2800      	cmp	r0, #0
   133ba:	d0df      	beq.n	1337c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   133bc:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   133be:	4b09      	ldr	r3, [pc, #36]	; (133e4 <packet_rx_allocate+0x8c>)
   133c0:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   133c4:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   133c8:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   133cc:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   133d0:	3401      	adds	r4, #1
   133d2:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   133d4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   133d8:	429c      	cmp	r4, r3
   133da:	d1d4      	bne.n	13386 <packet_rx_allocate+0x2e>
			acquire = 0;
   133dc:	2400      	movs	r4, #0
   133de:	e7d2      	b.n	13386 <packet_rx_allocate+0x2e>
   133e0:	bd70      	pop	{r4, r5, r6, pc}
   133e2:	bf00      	nop
   133e4:	20000f7c 	.word	0x20000f7c
   133e8:	200010c0 	.word	0x200010c0
   133ec:	200010a8 	.word	0x200010a8

000133f0 <tx_cmplt_get>:
{
   133f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   133f4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   133f6:	4294      	cmp	r4, r2
   133f8:	d043      	beq.n	13482 <tx_cmplt_get+0x92>
   133fa:	4690      	mov	r8, r2
   133fc:	4689      	mov	r9, r1
   133fe:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   13400:	4b21      	ldr	r3, [pc, #132]	; (13488 <tx_cmplt_get+0x98>)
   13402:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   13406:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   1340a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   1340c:	2600      	movs	r6, #0
   1340e:	e00f      	b.n	13430 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   13410:	2301      	movs	r3, #1
   13412:	606b      	str	r3, [r5, #4]
			cmplt++;
   13414:	441e      	add	r6, r3
   13416:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   13418:	f030 0303 	bics.w	r3, r0, #3
   1341c:	d126      	bne.n	1346c <tx_cmplt_get+0x7c>
		_first = _first + 1;
   1341e:	3401      	adds	r4, #1
   13420:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   13422:	4b19      	ldr	r3, [pc, #100]	; (13488 <tx_cmplt_get+0x98>)
   13424:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   13428:	429c      	cmp	r4, r3
   1342a:	d023      	beq.n	13474 <tx_cmplt_get+0x84>
	} while (_first != last);
   1342c:	4544      	cmp	r4, r8
   1342e:	d023      	beq.n	13478 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   13430:	883a      	ldrh	r2, [r7, #0]
   13432:	4b15      	ldr	r3, [pc, #84]	; (13488 <tx_cmplt_get+0x98>)
   13434:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   13438:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1343c:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   13440:	429a      	cmp	r2, r3
   13442:	d119      	bne.n	13478 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   13444:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   13446:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   13448:	2801      	cmp	r0, #1
   1344a:	d9e1      	bls.n	13410 <tx_cmplt_get+0x20>
   1344c:	f030 0203 	bics.w	r2, r0, #3
   13450:	d009      	beq.n	13466 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   13452:	b143      	cbz	r3, 13466 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   13454:	7943      	ldrb	r3, [r0, #5]
   13456:	b133      	cbz	r3, 13466 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   13458:	7903      	ldrb	r3, [r0, #4]
   1345a:	f003 0303 	and.w	r3, r3, #3
   1345e:	3b01      	subs	r3, #1
   13460:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   13462:	2b01      	cmp	r3, #1
   13464:	d9d4      	bls.n	13410 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   13466:	2302      	movs	r3, #2
   13468:	606b      	str	r3, [r5, #4]
   1346a:	e7d5      	b.n	13418 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   1346c:	4907      	ldr	r1, [pc, #28]	; (1348c <tx_cmplt_get+0x9c>)
   1346e:	f7fd fa52 	bl	10916 <mem_release>
   13472:	e7d4      	b.n	1341e <tx_cmplt_get+0x2e>
			_first = 0;
   13474:	2400      	movs	r4, #0
   13476:	e7d9      	b.n	1342c <tx_cmplt_get+0x3c>
	*first = _first;
   13478:	f889 4000 	strb.w	r4, [r9]
}
   1347c:	4630      	mov	r0, r6
   1347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   13482:	2600      	movs	r6, #0
   13484:	e7fa      	b.n	1347c <tx_cmplt_get+0x8c>
   13486:	bf00      	nop
   13488:	20000f7c 	.word	0x20000f7c
   1348c:	200010dc 	.word	0x200010dc

00013490 <ticker_job_disable>:
{
   13490:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   13492:	4b05      	ldr	r3, [pc, #20]	; (134a8 <ticker_job_disable+0x18>)
   13494:	7c1b      	ldrb	r3, [r3, #16]
   13496:	b903      	cbnz	r3, 1349a <ticker_job_disable+0xa>
   13498:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1349a:	2200      	movs	r2, #0
   1349c:	2101      	movs	r1, #1
   1349e:	4608      	mov	r0, r1
   134a0:	f7fd f89e 	bl	105e0 <mayfly_enable>
}
   134a4:	e7f8      	b.n	13498 <ticker_job_disable+0x8>
   134a6:	bf00      	nop
   134a8:	20000f7c 	.word	0x20000f7c

000134ac <connection_get>:
	if (handle < _radio.connection_count) {
   134ac:	4b0d      	ldr	r3, [pc, #52]	; (134e4 <connection_get+0x38>)
   134ae:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   134b2:	4283      	cmp	r3, r0
   134b4:	d910      	bls.n	134d8 <connection_get+0x2c>
{
   134b6:	b510      	push	{r4, lr}
   134b8:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   134ba:	4602      	mov	r2, r0
   134bc:	f44f 71aa 	mov.w	r1, #340	; 0x154
   134c0:	4b08      	ldr	r3, [pc, #32]	; (134e4 <connection_get+0x38>)
   134c2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   134c6:	f7fd fa47 	bl	10958 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   134ca:	4603      	mov	r3, r0
   134cc:	b110      	cbz	r0, 134d4 <connection_get+0x28>
   134ce:	8c02      	ldrh	r2, [r0, #32]
   134d0:	4294      	cmp	r4, r2
   134d2:	d104      	bne.n	134de <connection_get+0x32>
}
   134d4:	4618      	mov	r0, r3
   134d6:	bd10      	pop	{r4, pc}
	return 0;
   134d8:	2300      	movs	r3, #0
}
   134da:	4618      	mov	r0, r3
   134dc:	4770      	bx	lr
	return 0;
   134de:	2300      	movs	r3, #0
   134e0:	e7f8      	b.n	134d4 <connection_get+0x28>
   134e2:	bf00      	nop
   134e4:	20000f7c 	.word	0x20000f7c

000134e8 <role_disable>:
{
   134e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ea:	b087      	sub	sp, #28
   134ec:	4604      	mov	r4, r0
   134ee:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   134f0:	2302      	movs	r3, #2
   134f2:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   134f4:	2805      	cmp	r0, #5
   134f6:	d00d      	beq.n	13514 <role_disable+0x2c>
   134f8:	2806      	cmp	r0, #6
   134fa:	d02a      	beq.n	13552 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   134fc:	2806      	cmp	r0, #6
   134fe:	d957      	bls.n	135b0 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   13500:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   13502:	b280      	uxth	r0, r0
   13504:	f7ff ffd2 	bl	134ac <connection_get>
			if (!conn) {
   13508:	2800      	cmp	r0, #0
   1350a:	f000 8153 	beq.w	137b4 <role_disable+0x2cc>
			ticks_xtal_to_start =
   1350e:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   13510:	6847      	ldr	r7, [r0, #4]
		break;
   13512:	e023      	b.n	1355c <role_disable+0x74>
		ticks_xtal_to_start =
   13514:	4b9f      	ldr	r3, [pc, #636]	; (13794 <role_disable+0x2ac>)
   13516:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   13518:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1351a:	ab05      	add	r3, sp, #20
   1351c:	9300      	str	r3, [sp, #0]
   1351e:	4b9e      	ldr	r3, [pc, #632]	; (13798 <role_disable+0x2b0>)
   13520:	460a      	mov	r2, r1
   13522:	2103      	movs	r1, #3
   13524:	2000      	movs	r0, #0
   13526:	f7fe ff47 	bl	123b8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1352a:	2802      	cmp	r0, #2
   1352c:	d00d      	beq.n	1354a <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1352e:	9b05      	ldr	r3, [sp, #20]
   13530:	b1a3      	cbz	r3, 1355c <role_disable+0x74>
   13532:	9b05      	ldr	r3, [sp, #20]
   13534:	2b01      	cmp	r3, #1
   13536:	d011      	beq.n	1355c <role_disable+0x74>
   13538:	4040      	eors	r0, r0
   1353a:	f380 8811 	msr	BASEPRI, r0
   1353e:	f04f 0004 	mov.w	r0, #4
   13542:	df02      	svc	2
   13544:	bf20      	wfe
  __ASM volatile ("sev");
   13546:	bf40      	sev
  __ASM volatile ("wfe");
   13548:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   1354a:	9b05      	ldr	r3, [sp, #20]
   1354c:	2b02      	cmp	r3, #2
   1354e:	d0f9      	beq.n	13544 <role_disable+0x5c>
   13550:	e7ed      	b.n	1352e <role_disable+0x46>
		ticks_xtal_to_start =
   13552:	4b90      	ldr	r3, [pc, #576]	; (13794 <role_disable+0x2ac>)
   13554:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   13558:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   1355c:	4b8d      	ldr	r3, [pc, #564]	; (13794 <role_disable+0x2ac>)
   1355e:	7b9b      	ldrb	r3, [r3, #14]
   13560:	2b00      	cmp	r3, #0
   13562:	d12b      	bne.n	135bc <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   13564:	4b8b      	ldr	r3, [pc, #556]	; (13794 <role_disable+0x2ac>)
   13566:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   13568:	ab06      	add	r3, sp, #24
   1356a:	2202      	movs	r2, #2
   1356c:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13570:	9300      	str	r3, [sp, #0]
   13572:	4b89      	ldr	r3, [pc, #548]	; (13798 <role_disable+0x2b0>)
   13574:	4622      	mov	r2, r4
   13576:	2103      	movs	r1, #3
   13578:	2000      	movs	r0, #0
   1357a:	f7fe ff1d 	bl	123b8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1357e:	2802      	cmp	r0, #2
   13580:	d022      	beq.n	135c8 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   13582:	9b05      	ldr	r3, [sp, #20]
   13584:	b973      	cbnz	r3, 135a4 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   13586:	4b83      	ldr	r3, [pc, #524]	; (13794 <role_disable+0x2ac>)
   13588:	7b1b      	ldrb	r3, [r3, #12]
   1358a:	b2db      	uxtb	r3, r3
   1358c:	429c      	cmp	r4, r3
   1358e:	d02d      	beq.n	135ec <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   13590:	4b80      	ldr	r3, [pc, #512]	; (13794 <role_disable+0x2ac>)
   13592:	7b5b      	ldrb	r3, [r3, #13]
   13594:	b2db      	uxtb	r3, r3
   13596:	429c      	cmp	r4, r3
   13598:	d028      	beq.n	135ec <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   1359a:	4b7e      	ldr	r3, [pc, #504]	; (13794 <role_disable+0x2ac>)
   1359c:	7b9b      	ldrb	r3, [r3, #14]
   1359e:	b90b      	cbnz	r3, 135a4 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   135a0:	2301      	movs	r3, #1
   135a2:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   135a4:	2200      	movs	r2, #0
   135a6:	4b7b      	ldr	r3, [pc, #492]	; (13794 <role_disable+0x2ac>)
   135a8:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   135aa:	9805      	ldr	r0, [sp, #20]
}
   135ac:	b007      	add	sp, #28
   135ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   135b0:	4040      	eors	r0, r0
   135b2:	f380 8811 	msr	BASEPRI, r0
   135b6:	f04f 0004 	mov.w	r0, #4
   135ba:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   135bc:	4040      	eors	r0, r0
   135be:	f380 8811 	msr	BASEPRI, r0
   135c2:	f04f 0004 	mov.w	r0, #4
   135c6:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   135c8:	4b72      	ldr	r3, [pc, #456]	; (13794 <role_disable+0x2ac>)
   135ca:	7b5b      	ldrb	r3, [r3, #13]
   135cc:	b2db      	uxtb	r3, r3
   135ce:	429c      	cmp	r4, r3
   135d0:	d108      	bne.n	135e4 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   135d2:	2201      	movs	r2, #1
   135d4:	4611      	mov	r1, r2
   135d6:	2003      	movs	r0, #3
   135d8:	f7fd f802 	bl	105e0 <mayfly_enable>
   135dc:	e002      	b.n	135e4 <role_disable+0xfc>
   135de:	bf20      	wfe
  __ASM volatile ("sev");
   135e0:	bf40      	sev
  __ASM volatile ("wfe");
   135e2:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   135e4:	9b05      	ldr	r3, [sp, #20]
   135e6:	2b02      	cmp	r3, #2
   135e8:	d0f9      	beq.n	135de <role_disable+0xf6>
   135ea:	e7ca      	b.n	13582 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   135ec:	ab06      	add	r3, sp, #24
   135ee:	2202      	movs	r2, #2
   135f0:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   135f4:	9300      	str	r3, [sp, #0]
   135f6:	4b68      	ldr	r3, [pc, #416]	; (13798 <role_disable+0x2b0>)
   135f8:	2200      	movs	r2, #0
   135fa:	2103      	movs	r1, #3
   135fc:	4610      	mov	r0, r2
   135fe:	f7fe fedb 	bl	123b8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   13602:	2802      	cmp	r0, #2
   13604:	d029      	beq.n	1365a <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   13606:	9b02      	ldr	r3, [sp, #8]
   13608:	2b00      	cmp	r3, #0
   1360a:	d17c      	bne.n	13706 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1360c:	2302      	movs	r3, #2
   1360e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   13610:	4b60      	ldr	r3, [pc, #384]	; (13794 <role_disable+0x2ac>)
   13612:	7b1b      	ldrb	r3, [r3, #12]
   13614:	2b00      	cmp	r3, #0
   13616:	d02e      	beq.n	13676 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   13618:	2000      	movs	r0, #0
   1361a:	4b5e      	ldr	r3, [pc, #376]	; (13794 <role_disable+0x2ac>)
   1361c:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1361e:	ab03      	add	r3, sp, #12
   13620:	9300      	str	r3, [sp, #0]
   13622:	4b5d      	ldr	r3, [pc, #372]	; (13798 <role_disable+0x2b0>)
   13624:	2201      	movs	r2, #1
   13626:	2103      	movs	r1, #3
   13628:	f7fe fec6 	bl	123b8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1362c:	2802      	cmp	r0, #2
   1362e:	d028      	beq.n	13682 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   13630:	9b03      	ldr	r3, [sp, #12]
   13632:	2b00      	cmp	r3, #0
   13634:	d142      	bne.n	136bc <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   13636:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   1363a:	42b7      	cmp	r7, r6
   1363c:	d92f      	bls.n	1369e <role_disable+0x1b6>
				retval = mayfly_enqueue(
   1363e:	4b57      	ldr	r3, [pc, #348]	; (1379c <role_disable+0x2b4>)
   13640:	2200      	movs	r2, #0
   13642:	4611      	mov	r1, r2
   13644:	2003      	movs	r0, #3
   13646:	f7fd f809 	bl	1065c <mayfly_enqueue>
				LL_ASSERT(!retval);
   1364a:	2800      	cmp	r0, #0
   1364c:	d0a5      	beq.n	1359a <role_disable+0xb2>
   1364e:	4040      	eors	r0, r0
   13650:	f380 8811 	msr	BASEPRI, r0
   13654:	f04f 0004 	mov.w	r0, #4
   13658:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1365a:	2201      	movs	r2, #1
   1365c:	4611      	mov	r1, r2
   1365e:	2003      	movs	r0, #3
   13660:	f7fc ffbe 	bl	105e0 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   13664:	9b02      	ldr	r3, [sp, #8]
   13666:	2b02      	cmp	r3, #2
   13668:	d1cd      	bne.n	13606 <role_disable+0x11e>
   1366a:	4040      	eors	r0, r0
   1366c:	f380 8811 	msr	BASEPRI, r0
   13670:	f04f 0004 	mov.w	r0, #4
   13674:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   13676:	4040      	eors	r0, r0
   13678:	f380 8811 	msr	BASEPRI, r0
   1367c:	f04f 0004 	mov.w	r0, #4
   13680:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   13682:	2201      	movs	r2, #1
   13684:	4611      	mov	r1, r2
   13686:	2003      	movs	r0, #3
   13688:	f7fc ffaa 	bl	105e0 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1368c:	9b03      	ldr	r3, [sp, #12]
   1368e:	2b02      	cmp	r3, #2
   13690:	d1ce      	bne.n	13630 <role_disable+0x148>
   13692:	4040      	eors	r0, r0
   13694:	f380 8811 	msr	BASEPRI, r0
   13698:	f04f 0004 	mov.w	r0, #4
   1369c:	df02      	svc	2
				retval = mayfly_enqueue(
   1369e:	4b40      	ldr	r3, [pc, #256]	; (137a0 <role_disable+0x2b8>)
   136a0:	2200      	movs	r2, #0
   136a2:	4611      	mov	r1, r2
   136a4:	2003      	movs	r0, #3
   136a6:	f7fc ffd9 	bl	1065c <mayfly_enqueue>
				LL_ASSERT(!retval);
   136aa:	2800      	cmp	r0, #0
   136ac:	f43f af75 	beq.w	1359a <role_disable+0xb2>
   136b0:	4040      	eors	r0, r0
   136b2:	f380 8811 	msr	BASEPRI, r0
   136b6:	f04f 0004 	mov.w	r0, #4
   136ba:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   136bc:	9b03      	ldr	r3, [sp, #12]
   136be:	2b01      	cmp	r3, #1
   136c0:	d11b      	bne.n	136fa <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   136c2:	4b36      	ldr	r3, [pc, #216]	; (1379c <role_disable+0x2b4>)
   136c4:	2200      	movs	r2, #0
   136c6:	4611      	mov	r1, r2
   136c8:	2003      	movs	r0, #3
   136ca:	f7fc ffc7 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   136ce:	b970      	cbnz	r0, 136ee <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   136d0:	4b33      	ldr	r3, [pc, #204]	; (137a0 <role_disable+0x2b8>)
   136d2:	2200      	movs	r2, #0
   136d4:	4611      	mov	r1, r2
   136d6:	2003      	movs	r0, #3
   136d8:	f7fc ffc0 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   136dc:	2800      	cmp	r0, #0
   136de:	f43f af5c 	beq.w	1359a <role_disable+0xb2>
   136e2:	4040      	eors	r0, r0
   136e4:	f380 8811 	msr	BASEPRI, r0
   136e8:	f04f 0004 	mov.w	r0, #4
   136ec:	df02      	svc	2
			LL_ASSERT(!retval);
   136ee:	4040      	eors	r0, r0
   136f0:	f380 8811 	msr	BASEPRI, r0
   136f4:	f04f 0004 	mov.w	r0, #4
   136f8:	df02      	svc	2
			LL_ASSERT(0);
   136fa:	4040      	eors	r0, r0
   136fc:	f380 8811 	msr	BASEPRI, r0
   13700:	f04f 0004 	mov.w	r0, #4
   13704:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   13706:	9b02      	ldr	r3, [sp, #8]
   13708:	2b01      	cmp	r3, #1
   1370a:	d14d      	bne.n	137a8 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   1370c:	2dff      	cmp	r5, #255	; 0xff
   1370e:	d011      	beq.n	13734 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13710:	ab06      	add	r3, sp, #24
   13712:	2202      	movs	r2, #2
   13714:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13718:	9300      	str	r3, [sp, #0]
   1371a:	4b1f      	ldr	r3, [pc, #124]	; (13798 <role_disable+0x2b0>)
   1371c:	462a      	mov	r2, r5
   1371e:	2103      	movs	r1, #3
   13720:	2000      	movs	r0, #0
   13722:	f7fe fe49 	bl	123b8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   13726:	2802      	cmp	r0, #2
   13728:	d018      	beq.n	1375c <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1372a:	9b04      	ldr	r3, [sp, #16]
   1372c:	b113      	cbz	r3, 13734 <role_disable+0x24c>
   1372e:	9b04      	ldr	r3, [sp, #16]
   13730:	2b01      	cmp	r3, #1
   13732:	d121      	bne.n	13778 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   13734:	4b17      	ldr	r3, [pc, #92]	; (13794 <role_disable+0x2ac>)
   13736:	7bdb      	ldrb	r3, [r3, #15]
   13738:	2b00      	cmp	r3, #0
   1373a:	f43f af2e 	beq.w	1359a <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1373e:	4b19      	ldr	r3, [pc, #100]	; (137a4 <role_disable+0x2bc>)
   13740:	2204      	movs	r2, #4
   13742:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   13744:	2200      	movs	r2, #0
   13746:	4611      	mov	r1, r2
   13748:	2003      	movs	r0, #3
   1374a:	f7fc ff87 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   1374e:	b1e0      	cbz	r0, 1378a <role_disable+0x2a2>
   13750:	4040      	eors	r0, r0
   13752:	f380 8811 	msr	BASEPRI, r0
   13756:	f04f 0004 	mov.w	r0, #4
   1375a:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1375c:	2201      	movs	r2, #1
   1375e:	4611      	mov	r1, r2
   13760:	2003      	movs	r0, #3
   13762:	f7fc ff3d 	bl	105e0 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   13766:	9b04      	ldr	r3, [sp, #16]
   13768:	2b02      	cmp	r3, #2
   1376a:	d1de      	bne.n	1372a <role_disable+0x242>
   1376c:	4040      	eors	r0, r0
   1376e:	f380 8811 	msr	BASEPRI, r0
   13772:	f04f 0004 	mov.w	r0, #4
   13776:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   13778:	4040      	eors	r0, r0
   1377a:	f380 8811 	msr	BASEPRI, r0
   1377e:	f04f 0004 	mov.w	r0, #4
   13782:	df02      	svc	2
   13784:	bf20      	wfe
  __ASM volatile ("sev");
   13786:	bf40      	sev
  __ASM volatile ("wfe");
   13788:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   1378a:	4b02      	ldr	r3, [pc, #8]	; (13794 <role_disable+0x2ac>)
   1378c:	7bdb      	ldrb	r3, [r3, #15]
   1378e:	2b00      	cmp	r3, #0
   13790:	d1f8      	bne.n	13784 <role_disable+0x29c>
   13792:	e702      	b.n	1359a <role_disable+0xb2>
   13794:	20000f7c 	.word	0x20000f7c
   13798:	00012c65 	.word	0x00012c65
   1379c:	2000bcf0 	.word	0x2000bcf0
   137a0:	2000bdb0 	.word	0x2000bdb0
   137a4:	2000bd20 	.word	0x2000bd20
		LL_ASSERT(0);
   137a8:	4040      	eors	r0, r0
   137aa:	f380 8811 	msr	BASEPRI, r0
   137ae:	f04f 0004 	mov.w	r0, #4
   137b2:	df02      	svc	2
				return 1;
   137b4:	2001      	movs	r0, #1
   137b6:	e6f9      	b.n	135ac <role_disable+0xc4>

000137b8 <event_stop>:
{
   137b8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   137ba:	4a08      	ldr	r2, [pc, #32]	; (137dc <event_stop+0x24>)
   137bc:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   137be:	4613      	mov	r3, r2
   137c0:	2200      	movs	r2, #0
   137c2:	4611      	mov	r1, r2
   137c4:	4610      	mov	r0, r2
   137c6:	f7fc ff49 	bl	1065c <mayfly_enqueue>
	LL_ASSERT(!retval);
   137ca:	b900      	cbnz	r0, 137ce <event_stop+0x16>
   137cc:	bd08      	pop	{r3, pc}
   137ce:	4040      	eors	r0, r0
   137d0:	f380 8811 	msr	BASEPRI, r0
   137d4:	f04f 0004 	mov.w	r0, #4
   137d8:	df02      	svc	2
   137da:	bf00      	nop
   137dc:	2000bd00 	.word	0x2000bd00

000137e0 <event_adv_stop>:
{
   137e0:	b500      	push	{lr}
   137e2:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   137e4:	2305      	movs	r3, #5
   137e6:	2200      	movs	r2, #0
   137e8:	4611      	mov	r1, r2
   137ea:	4610      	mov	r0, r2
   137ec:	f7ff ffe4 	bl	137b8 <event_stop>
	ticker_status =
   137f0:	f241 73e4 	movw	r3, #6116	; 0x17e4
   137f4:	9300      	str	r3, [sp, #0]
   137f6:	4b09      	ldr	r3, [pc, #36]	; (1381c <event_adv_stop+0x3c>)
   137f8:	2205      	movs	r2, #5
   137fa:	2100      	movs	r1, #0
   137fc:	4608      	mov	r0, r1
   137fe:	f7fe fddb 	bl	123b8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13802:	b108      	cbz	r0, 13808 <event_adv_stop+0x28>
   13804:	2802      	cmp	r0, #2
   13806:	d102      	bne.n	1380e <event_adv_stop+0x2e>
}
   13808:	b003      	add	sp, #12
   1380a:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1380e:	4040      	eors	r0, r0
   13810:	f380 8811 	msr	BASEPRI, r0
   13814:	f04f 0004 	mov.w	r0, #4
   13818:	df02      	svc	2
   1381a:	bf00      	nop
   1381c:	000140a1 	.word	0x000140a1

00013820 <event_inactive>:
{
   13820:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   13822:	4b07      	ldr	r3, [pc, #28]	; (13840 <event_inactive+0x20>)
   13824:	2200      	movs	r2, #0
   13826:	4611      	mov	r1, r2
   13828:	4610      	mov	r0, r2
   1382a:	f7fc ff17 	bl	1065c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1382e:	b900      	cbnz	r0, 13832 <event_inactive+0x12>
   13830:	bd08      	pop	{r3, pc}
   13832:	4040      	eors	r0, r0
   13834:	f380 8811 	msr	BASEPRI, r0
   13838:	f04f 0004 	mov.w	r0, #4
   1383c:	df02      	svc	2
   1383e:	bf00      	nop
   13840:	2000bcd0 	.word	0x2000bcd0

00013844 <mayfly_xtal_retain>:
{
   13844:	b508      	push	{r3, lr}
	if (retain) {
   13846:	b1d1      	cbz	r1, 1387e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   13848:	4b1c      	ldr	r3, [pc, #112]	; (138bc <mayfly_xtal_retain+0x78>)
   1384a:	781b      	ldrb	r3, [r3, #0]
   1384c:	b953      	cbnz	r3, 13864 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1384e:	2801      	cmp	r0, #1
   13850:	d109      	bne.n	13866 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   13852:	2201      	movs	r2, #1
   13854:	4b19      	ldr	r3, [pc, #100]	; (138bc <mayfly_xtal_retain+0x78>)
   13856:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   13858:	4b19      	ldr	r3, [pc, #100]	; (138c0 <mayfly_xtal_retain+0x7c>)
   1385a:	2200      	movs	r2, #0
   1385c:	4611      	mov	r1, r2
   1385e:	f7fc fefd 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   13862:	b930      	cbnz	r0, 13872 <mayfly_xtal_retain+0x2e>
   13864:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   13866:	4040      	eors	r0, r0
   13868:	f380 8811 	msr	BASEPRI, r0
   1386c:	f04f 0004 	mov.w	r0, #4
   13870:	df02      	svc	2
			LL_ASSERT(!retval);
   13872:	4040      	eors	r0, r0
   13874:	f380 8811 	msr	BASEPRI, r0
   13878:	f04f 0004 	mov.w	r0, #4
   1387c:	df02      	svc	2
		if (s_xtal_retained) {
   1387e:	4b0f      	ldr	r3, [pc, #60]	; (138bc <mayfly_xtal_retain+0x78>)
   13880:	781b      	ldrb	r3, [r3, #0]
   13882:	2b00      	cmp	r3, #0
   13884:	d0ee      	beq.n	13864 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   13886:	2200      	movs	r2, #0
   13888:	4b0c      	ldr	r3, [pc, #48]	; (138bc <mayfly_xtal_retain+0x78>)
   1388a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   1388c:	b138      	cbz	r0, 1389e <mayfly_xtal_retain+0x5a>
   1388e:	2801      	cmp	r0, #1
   13890:	d012      	beq.n	138b8 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   13892:	4040      	eors	r0, r0
   13894:	f380 8811 	msr	BASEPRI, r0
   13898:	f04f 0004 	mov.w	r0, #4
   1389c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   1389e:	4b09      	ldr	r3, [pc, #36]	; (138c4 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   138a0:	2200      	movs	r2, #0
   138a2:	4611      	mov	r1, r2
   138a4:	f7fc feda 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   138a8:	2800      	cmp	r0, #0
   138aa:	d0db      	beq.n	13864 <mayfly_xtal_retain+0x20>
   138ac:	4040      	eors	r0, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
   138b2:	f04f 0004 	mov.w	r0, #4
   138b6:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   138b8:	4b03      	ldr	r3, [pc, #12]	; (138c8 <mayfly_xtal_retain+0x84>)
   138ba:	e7f1      	b.n	138a0 <mayfly_xtal_retain+0x5c>
   138bc:	200014f4 	.word	0x200014f4
   138c0:	2000bd70 	.word	0x2000bd70
   138c4:	2000bd80 	.word	0x2000bd80
   138c8:	2000bd90 	.word	0x2000bd90

000138cc <event_active>:
{
   138cc:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   138ce:	4b07      	ldr	r3, [pc, #28]	; (138ec <event_active+0x20>)
   138d0:	2200      	movs	r2, #0
   138d2:	4611      	mov	r1, r2
   138d4:	4610      	mov	r0, r2
   138d6:	f7fc fec1 	bl	1065c <mayfly_enqueue>
	LL_ASSERT(!retval);
   138da:	b900      	cbnz	r0, 138de <event_active+0x12>
   138dc:	bd08      	pop	{r3, pc}
   138de:	4040      	eors	r0, r0
   138e0:	f380 8811 	msr	BASEPRI, r0
   138e4:	f04f 0004 	mov.w	r0, #4
   138e8:	df02      	svc	2
   138ea:	bf00      	nop
   138ec:	2000bcc0 	.word	0x2000bcc0

000138f0 <event_xtal>:
{
   138f0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   138f2:	4b07      	ldr	r3, [pc, #28]	; (13910 <event_xtal+0x20>)
   138f4:	2200      	movs	r2, #0
   138f6:	4611      	mov	r1, r2
   138f8:	4610      	mov	r0, r2
   138fa:	f7fc feaf 	bl	1065c <mayfly_enqueue>
	LL_ASSERT(!retval);
   138fe:	b900      	cbnz	r0, 13902 <event_xtal+0x12>
   13900:	bd08      	pop	{r3, pc}
   13902:	4040      	eors	r0, r0
   13904:	f380 8811 	msr	BASEPRI, r0
   13908:	f04f 0004 	mov.w	r0, #4
   1390c:	df02      	svc	2
   1390e:	bf00      	nop
   13910:	2000bd60 	.word	0x2000bd60

00013914 <mayfly_radio_active>:
{
   13914:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   13916:	b148      	cbz	r0, 1392c <mayfly_radio_active+0x18>
		if (s_active++) {
   13918:	4a0e      	ldr	r2, [pc, #56]	; (13954 <mayfly_radio_active+0x40>)
   1391a:	7813      	ldrb	r3, [r2, #0]
   1391c:	1c59      	adds	r1, r3, #1
   1391e:	7011      	strb	r1, [r2, #0]
   13920:	b103      	cbz	r3, 13924 <mayfly_radio_active+0x10>
   13922:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   13924:	2001      	movs	r0, #1
   13926:	f007 f8a5 	bl	1aa74 <radio_active_callback>
   1392a:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   1392c:	4b09      	ldr	r3, [pc, #36]	; (13954 <mayfly_radio_active+0x40>)
   1392e:	781b      	ldrb	r3, [r3, #0]
   13930:	b14b      	cbz	r3, 13946 <mayfly_radio_active+0x32>
		if (--s_active) {
   13932:	3b01      	subs	r3, #1
   13934:	b2db      	uxtb	r3, r3
   13936:	4a07      	ldr	r2, [pc, #28]	; (13954 <mayfly_radio_active+0x40>)
   13938:	7013      	strb	r3, [r2, #0]
   1393a:	2b00      	cmp	r3, #0
   1393c:	d1f1      	bne.n	13922 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   1393e:	2000      	movs	r0, #0
   13940:	f007 f898 	bl	1aa74 <radio_active_callback>
   13944:	e7ed      	b.n	13922 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   13946:	4040      	eors	r0, r0
   13948:	f380 8811 	msr	BASEPRI, r0
   1394c:	f04f 0004 	mov.w	r0, #4
   13950:	df02      	svc	2
   13952:	bf00      	nop
   13954:	20001460 	.word	0x20001460

00013958 <mayfly_radio_inactive>:
{
   13958:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   1395a:	2000      	movs	r0, #0
   1395c:	f7ff ffda 	bl	13914 <mayfly_radio_active>
   13960:	bd08      	pop	{r3, pc}
	...

00013964 <mayfly_radio_stop>:
{
   13964:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   13966:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   13968:	1f23      	subs	r3, r4, #4
   1396a:	b2db      	uxtb	r3, r3
   1396c:	2b01      	cmp	r3, #1
   1396e:	d808      	bhi.n	13982 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   13970:	4b10      	ldr	r3, [pc, #64]	; (139b4 <mayfly_radio_stop+0x50>)
   13972:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   13974:	b16b      	cbz	r3, 13992 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   13976:	2b04      	cmp	r3, #4
   13978:	d014      	beq.n	139a4 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   1397a:	2b05      	cmp	r3, #5
   1397c:	d007      	beq.n	1398e <mayfly_radio_stop+0x2a>
   1397e:	2301      	movs	r3, #1
   13980:	e008      	b.n	13994 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   13982:	4040      	eors	r0, r0
   13984:	f380 8811 	msr	BASEPRI, r0
   13988:	f04f 0004 	mov.w	r0, #4
   1398c:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   1398e:	2300      	movs	r3, #0
   13990:	e000      	b.n	13994 <mayfly_radio_stop+0x30>
   13992:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   13994:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   13996:	b13b      	cbz	r3, 139a8 <mayfly_radio_stop+0x44>
		if (radio_used) {
   13998:	b10d      	cbz	r5, 1399e <mayfly_radio_stop+0x3a>
			_radio.state = state;
   1399a:	4b06      	ldr	r3, [pc, #24]	; (139b4 <mayfly_radio_stop+0x50>)
   1399c:	741c      	strb	r4, [r3, #16]
		radio_disable();
   1399e:	f7fd f9b3 	bl	10d08 <radio_disable>
   139a2:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   139a4:	2300      	movs	r3, #0
   139a6:	e7f5      	b.n	13994 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   139a8:	f7fd f9dc 	bl	10d64 <radio_is_idle>
   139ac:	2800      	cmp	r0, #0
   139ae:	d0f3      	beq.n	13998 <mayfly_radio_stop+0x34>
   139b0:	e7f7      	b.n	139a2 <mayfly_radio_stop+0x3e>
   139b2:	bf00      	nop
   139b4:	20000f7c 	.word	0x20000f7c

000139b8 <adv_scan_conn_configure>:
{
   139b8:	b508      	push	{r3, lr}
	radio_reset();
   139ba:	f7fd f8ff 	bl	10bbc <radio_reset>
	radio_tx_power_set(0);
   139be:	2000      	movs	r0, #0
   139c0:	f7fd f918 	bl	10bf4 <radio_tx_power_set>
	radio_isr_set(isr);
   139c4:	4801      	ldr	r0, [pc, #4]	; (139cc <adv_scan_conn_configure+0x14>)
   139c6:	f7fd f8c1 	bl	10b4c <radio_isr_set>
   139ca:	bd08      	pop	{r3, pc}
   139cc:	00011301 	.word	0x00011301

000139d0 <adv_scan_configure>:
{
   139d0:	b570      	push	{r4, r5, r6, lr}
   139d2:	b082      	sub	sp, #8
   139d4:	4604      	mov	r4, r0
   139d6:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   139d8:	ad02      	add	r5, sp, #8
   139da:	4b0d      	ldr	r3, [pc, #52]	; (13a10 <adv_scan_configure+0x40>)
   139dc:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   139e0:	f7ff ffea 	bl	139b8 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   139e4:	4631      	mov	r1, r6
   139e6:	4620      	mov	r0, r4
   139e8:	f7fd f8f6 	bl	10bd8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   139ec:	4628      	mov	r0, r5
   139ee:	f7fd f91f 	bl	10c30 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   139f2:	0062      	lsls	r2, r4, #1
   139f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   139f8:	2125      	movs	r1, #37	; 0x25
   139fa:	2008      	movs	r0, #8
   139fc:	f7fd f930 	bl	10c60 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13a00:	4904      	ldr	r1, [pc, #16]	; (13a14 <adv_scan_configure+0x44>)
   13a02:	f240 605b 	movw	r0, #1627	; 0x65b
   13a06:	f7fd f9b7 	bl	10d78 <radio_crc_configure>
}
   13a0a:	b002      	add	sp, #8
   13a0c:	bd70      	pop	{r4, r5, r6, pc}
   13a0e:	bf00      	nop
   13a10:	8e89bed6 	.word	0x8e89bed6
   13a14:	00555555 	.word	0x00555555

00013a18 <connection_configure>:
{
   13a18:	b510      	push	{r4, lr}
   13a1a:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   13a1c:	f7ff ffcc 	bl	139b8 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   13a20:	f104 0010 	add.w	r0, r4, #16
   13a24:	f7fd f904 	bl	10c30 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   13a28:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   13a2a:	7d63      	ldrb	r3, [r4, #21]
   13a2c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   13a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   13a32:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   13a34:	4319      	orrs	r1, r3
   13a36:	f240 605b 	movw	r0, #1627	; 0x65b
   13a3a:	f7fd f99d 	bl	10d78 <radio_crc_configure>
   13a3e:	bd10      	pop	{r4, pc}

00013a40 <rx_packet_set>:
{
   13a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a42:	4605      	mov	r5, r0
   13a44:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   13a46:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   13a48:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   13a4c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   13a50:	2100      	movs	r1, #0
   13a52:	4620      	mov	r0, r4
   13a54:	f7fd f8c0 	bl	10bd8 <radio_phy_set>
	if (conn->enc_rx) {
   13a58:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13a5c:	f013 0f10 	tst.w	r3, #16
   13a60:	d10a      	bne.n	13a78 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   13a62:	0062      	lsls	r2, r4, #1
   13a64:	f042 0201 	orr.w	r2, r2, #1
   13a68:	b2f1      	uxtb	r1, r6
   13a6a:	2008      	movs	r0, #8
   13a6c:	f7fd f8f8 	bl	10c60 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   13a70:	4638      	mov	r0, r7
   13a72:	f7fd f925 	bl	10cc0 <radio_pkt_rx_set>
   13a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   13a78:	0062      	lsls	r2, r4, #1
   13a7a:	1d31      	adds	r1, r6, #4
   13a7c:	f042 0201 	orr.w	r2, r2, #1
   13a80:	b2c9      	uxtb	r1, r1
   13a82:	2008      	movs	r0, #8
   13a84:	f7fd f8ec 	bl	10c60 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   13a88:	463a      	mov	r2, r7
   13a8a:	4621      	mov	r1, r4
   13a8c:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   13a90:	f7fd fb12 	bl	110b8 <radio_ccm_rx_pkt_set>
   13a94:	f7fd f914 	bl	10cc0 <radio_pkt_rx_set>
   13a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a9a <packet_rx_callback>:
{
   13a9a:	b508      	push	{r3, lr}
	radio_event_callback();
   13a9c:	f006 ffec 	bl	1aa78 <radio_event_callback>
   13aa0:	bd08      	pop	{r3, pc}
	...

00013aa4 <pdu_node_tx_release>:
{
   13aa4:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   13aa6:	4a14      	ldr	r2, [pc, #80]	; (13af8 <pdu_node_tx_release+0x54>)
   13aa8:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   13aac:	3301      	adds	r3, #1
   13aae:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   13ab0:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   13ab4:	4293      	cmp	r3, r2
   13ab6:	d017      	beq.n	13ae8 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   13ab8:	4a0f      	ldr	r2, [pc, #60]	; (13af8 <pdu_node_tx_release+0x54>)
   13aba:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   13abe:	4293      	cmp	r3, r2
   13ac0:	d014      	beq.n	13aec <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   13ac2:	4a0d      	ldr	r2, [pc, #52]	; (13af8 <pdu_node_tx_release+0x54>)
   13ac4:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   13ac8:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   13acc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   13ad0:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   13ad4:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   13ad8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   13adc:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   13ade:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   13ae2:	f7ff ffda 	bl	13a9a <packet_rx_callback>
   13ae6:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   13ae8:	2300      	movs	r3, #0
   13aea:	e7e5      	b.n	13ab8 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   13aec:	4040      	eors	r0, r0
   13aee:	f380 8811 	msr	BASEPRI, r0
   13af2:	f04f 0004 	mov.w	r0, #4
   13af6:	df02      	svc	2
   13af8:	20000f7c 	.word	0x20000f7c

00013afc <packet_tx_enqueue>:
{
   13afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13afe:	e016      	b.n	13b2e <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   13b00:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   13b04:	2b00      	cmp	r3, #0
   13b06:	d040      	beq.n	13b8a <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   13b08:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   13b0c:	b103      	cbz	r3, 13b10 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   13b0e:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   13b10:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   13b14:	4a24      	ldr	r2, [pc, #144]	; (13ba8 <packet_tx_enqueue+0xac>)
   13b16:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   13b1a:	3301      	adds	r3, #1
   13b1c:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   13b1e:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   13b22:	4293      	cmp	r3, r2
   13b24:	d03c      	beq.n	13ba0 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   13b26:	4a20      	ldr	r2, [pc, #128]	; (13ba8 <packet_tx_enqueue+0xac>)
   13b28:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   13b2c:	4638      	mov	r0, r7
   13b2e:	1e47      	subs	r7, r0, #1
   13b30:	b2ff      	uxtb	r7, r7
   13b32:	2800      	cmp	r0, #0
   13b34:	d036      	beq.n	13ba4 <packet_tx_enqueue+0xa8>
   13b36:	4a1c      	ldr	r2, [pc, #112]	; (13ba8 <packet_tx_enqueue+0xac>)
   13b38:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   13b3c:	b2db      	uxtb	r3, r3
   13b3e:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   13b42:	4293      	cmp	r3, r2
   13b44:	d02e      	beq.n	13ba4 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   13b46:	4b18      	ldr	r3, [pc, #96]	; (13ba8 <packet_tx_enqueue+0xac>)
   13b48:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   13b4c:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   13b50:	b2e4      	uxtb	r4, r4
   13b52:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   13b56:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   13b58:	2200      	movs	r2, #0
   13b5a:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   13b5c:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   13b60:	f44f 71aa 	mov.w	r1, #340	; 0x154
   13b64:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   13b68:	f7fc fef6 	bl	10958 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   13b6c:	8c02      	ldrh	r2, [r0, #32]
   13b6e:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   13b72:	429a      	cmp	r2, r3
   13b74:	d0c4      	beq.n	13b00 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13b76:	792b      	ldrb	r3, [r5, #4]
   13b78:	f36f 0301 	bfc	r3, #0, #2
   13b7c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   13b7e:	4629      	mov	r1, r5
   13b80:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   13b84:	f7ff ff8e 	bl	13aa4 <pdu_node_tx_release>
   13b88:	e7c4      	b.n	13b14 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   13b8a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   13b8e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   13b92:	2b00      	cmp	r3, #0
   13b94:	d1b8      	bne.n	13b08 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   13b96:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   13b9a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   13b9e:	e7b3      	b.n	13b08 <packet_tx_enqueue+0xc>
			first = 0;
   13ba0:	2300      	movs	r3, #0
   13ba2:	e7c0      	b.n	13b26 <packet_tx_enqueue+0x2a>
   13ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ba6:	bf00      	nop
   13ba8:	20000f7c 	.word	0x20000f7c

00013bac <connection_release>:
{
   13bac:	b510      	push	{r4, lr}
   13bae:	b082      	sub	sp, #8
   13bb0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   13bb2:	2201      	movs	r2, #1
   13bb4:	4611      	mov	r1, r2
   13bb6:	2000      	movs	r0, #0
   13bb8:	f7fc fd12 	bl	105e0 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   13bbc:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13bbe:	3207      	adds	r2, #7
	ticker_status =
   13bc0:	f242 2345 	movw	r3, #8773	; 0x2245
   13bc4:	9300      	str	r3, [sp, #0]
   13bc6:	4b46      	ldr	r3, [pc, #280]	; (13ce0 <connection_release+0x134>)
   13bc8:	b2d2      	uxtb	r2, r2
   13bca:	2100      	movs	r1, #0
   13bcc:	4608      	mov	r0, r1
   13bce:	f7fe fbf3 	bl	123b8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13bd2:	b108      	cbz	r0, 13bd8 <connection_release+0x2c>
   13bd4:	2802      	cmp	r0, #2
   13bd6:	d12a      	bne.n	13c2e <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   13bd8:	4b42      	ldr	r3, [pc, #264]	; (13ce4 <connection_release+0x138>)
   13bda:	7c1b      	ldrb	r3, [r3, #16]
   13bdc:	2b05      	cmp	r3, #5
   13bde:	d13e      	bne.n	13c5e <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   13be0:	4b40      	ldr	r3, [pc, #256]	; (13ce4 <connection_release+0x138>)
   13be2:	7b1a      	ldrb	r2, [r3, #12]
   13be4:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   13be6:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   13be8:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   13bea:	429a      	cmp	r2, r3
   13bec:	d137      	bne.n	13c5e <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   13bee:	2000      	movs	r0, #0
   13bf0:	4b3c      	ldr	r3, [pc, #240]	; (13ce4 <connection_release+0x138>)
   13bf2:	7318      	strb	r0, [r3, #12]
		ticker_status =
   13bf4:	f242 2356 	movw	r3, #8790	; 0x2256
   13bf8:	9300      	str	r3, [sp, #0]
   13bfa:	4b39      	ldr	r3, [pc, #228]	; (13ce0 <connection_release+0x134>)
   13bfc:	2201      	movs	r2, #1
   13bfe:	4601      	mov	r1, r0
   13c00:	f7fe fbda 	bl	123b8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c04:	b108      	cbz	r0, 13c0a <connection_release+0x5e>
   13c06:	2802      	cmp	r0, #2
   13c08:	d117      	bne.n	13c3a <connection_release+0x8e>
		ticker_status =
   13c0a:	f242 235d 	movw	r3, #8797	; 0x225d
   13c0e:	9300      	str	r3, [sp, #0]
   13c10:	4b33      	ldr	r3, [pc, #204]	; (13ce0 <connection_release+0x134>)
   13c12:	2200      	movs	r2, #0
   13c14:	4611      	mov	r1, r2
   13c16:	4610      	mov	r0, r2
   13c18:	f7fe fbce 	bl	123b8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c1c:	b1f8      	cbz	r0, 13c5e <connection_release+0xb2>
   13c1e:	2802      	cmp	r0, #2
   13c20:	d01d      	beq.n	13c5e <connection_release+0xb2>
   13c22:	4040      	eors	r0, r0
   13c24:	f380 8811 	msr	BASEPRI, r0
   13c28:	f04f 0004 	mov.w	r0, #4
   13c2c:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c2e:	4040      	eors	r0, r0
   13c30:	f380 8811 	msr	BASEPRI, r0
   13c34:	f04f 0004 	mov.w	r0, #4
   13c38:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13c3a:	4040      	eors	r0, r0
   13c3c:	f380 8811 	msr	BASEPRI, r0
   13c40:	f04f 0004 	mov.w	r0, #4
   13c44:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13c46:	790b      	ldrb	r3, [r1, #4]
   13c48:	f36f 0301 	bfc	r3, #0, #2
   13c4c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13c4e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   13c52:	681b      	ldr	r3, [r3, #0]
   13c54:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   13c58:	8c20      	ldrh	r0, [r4, #32]
   13c5a:	f7ff ff23 	bl	13aa4 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   13c5e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   13c62:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   13c66:	4299      	cmp	r1, r3
   13c68:	d00c      	beq.n	13c84 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   13c6a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   13c6e:	4299      	cmp	r1, r3
   13c70:	d1e9      	bne.n	13c46 <connection_release+0x9a>
   13c72:	e007      	b.n	13c84 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13c74:	6803      	ldr	r3, [r0, #0]
   13c76:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13c7a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   13c7e:	491a      	ldr	r1, [pc, #104]	; (13ce8 <connection_release+0x13c>)
   13c80:	f7fc fe49 	bl	10916 <mem_release>
	while ((conn->pkt_tx_head) &&
   13c84:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   13c88:	b118      	cbz	r0, 13c92 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   13c8a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   13c8e:	4298      	cmp	r0, r3
   13c90:	d1f0      	bne.n	13c74 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   13c92:	2300      	movs	r3, #0
   13c94:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   13c98:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   13c9c:	e00d      	b.n	13cba <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   13c9e:	790b      	ldrb	r3, [r1, #4]
   13ca0:	f36f 0301 	bfc	r3, #0, #2
   13ca4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13ca6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   13caa:	681b      	ldr	r3, [r3, #0]
   13cac:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   13cb0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   13cb4:	8c20      	ldrh	r0, [r4, #32]
   13cb6:	f7ff fef5 	bl	13aa4 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   13cba:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   13cbe:	2900      	cmp	r1, #0
   13cc0:	d1ed      	bne.n	13c9e <connection_release+0xf2>
	conn->handle = 0xffff;
   13cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13cc6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   13cc8:	4b06      	ldr	r3, [pc, #24]	; (13ce4 <connection_release+0x138>)
   13cca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13cce:	429c      	cmp	r4, r3
   13cd0:	d001      	beq.n	13cd6 <connection_release+0x12a>
}
   13cd2:	b002      	add	sp, #8
   13cd4:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   13cd6:	2200      	movs	r2, #0
   13cd8:	4b02      	ldr	r3, [pc, #8]	; (13ce4 <connection_release+0x138>)
   13cda:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   13cde:	e7f8      	b.n	13cd2 <connection_release+0x126>
   13ce0:	00012fd5 	.word	0x00012fd5
   13ce4:	20000f7c 	.word	0x20000f7c
   13ce8:	200010d4 	.word	0x200010d4

00013cec <chan_map_update>:
{
   13cec:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   13cee:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   13cf2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   13cf4:	1a9b      	subs	r3, r3, r2
   13cf6:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   13cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13cfc:	da22      	bge.n	13d44 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13cfe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   13d02:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   13d06:	429a      	cmp	r2, r3
   13d08:	d116      	bne.n	13d38 <chan_map_update+0x4c>
   13d0a:	460d      	mov	r5, r1
   13d0c:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   13d0e:	2205      	movs	r2, #5
   13d10:	3104      	adds	r1, #4
   13d12:	3079      	adds	r0, #121	; 0x79
   13d14:	f7ec fad4 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   13d18:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   13d1c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   13d20:	2000      	movs	r0, #0
   13d22:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   13d26:	2302      	movs	r3, #2
   13d28:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   13d2c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   13d30:	3b01      	subs	r3, #1
   13d32:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   13d36:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13d38:	4040      	eors	r0, r0
   13d3a:	f380 8811 	msr	BASEPRI, r0
   13d3e:	f04f 0004 	mov.w	r0, #4
   13d42:	df02      	svc	2
		return 1;
   13d44:	2001      	movs	r0, #1
}
   13d46:	bd38      	pop	{r3, r4, r5, pc}

00013d48 <feature_rsp_send>:
{
   13d48:	b538      	push	{r3, r4, r5, lr}
   13d4a:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13d4c:	4812      	ldr	r0, [pc, #72]	; (13d98 <feature_rsp_send+0x50>)
   13d4e:	f7fc fdc6 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   13d52:	b1d8      	cbz	r0, 13d8c <feature_rsp_send+0x44>
   13d54:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13d56:	7903      	ldrb	r3, [r0, #4]
   13d58:	f043 0303 	orr.w	r3, r3, #3
   13d5c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13d5e:	2309      	movs	r3, #9
   13d60:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   13d62:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   13d64:	2208      	movs	r2, #8
   13d66:	2100      	movs	r1, #0
   13d68:	4410      	add	r0, r2
   13d6a:	f018 f987 	bl	2c07c <memset>
		conn->llcp_features & 0xFF;
   13d6e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   13d72:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   13d74:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   13d78:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   13d7a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   13d7c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   13d80:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   13d82:	4621      	mov	r1, r4
   13d84:	4628      	mov	r0, r5
   13d86:	f7ff f87c 	bl	12e82 <ctrl_tx_sec_enqueue>
   13d8a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   13d8c:	4040      	eors	r0, r0
   13d8e:	f380 8811 	msr	BASEPRI, r0
   13d92:	f04f 0004 	mov.w	r0, #4
   13d96:	df02      	svc	2
   13d98:	200010d4 	.word	0x200010d4

00013d9c <empty_tx_enqueue>:
{
   13d9c:	b510      	push	{r4, lr}
   13d9e:	4604      	mov	r4, r0
	conn->empty = 1;
   13da0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13da8:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   13dac:	f7fc fffa 	bl	10da4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13db0:	7803      	ldrb	r3, [r0, #0]
   13db2:	2201      	movs	r2, #1
   13db4:	f362 0301 	bfi	r3, r2, #0, #2
   13db8:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   13dba:	2300      	movs	r3, #0
   13dbc:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   13dbe:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   13dc2:	b123      	cbz	r3, 13dce <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   13dc4:	7803      	ldrb	r3, [r0, #0]
   13dc6:	f043 0310 	orr.w	r3, r3, #16
   13dca:	7003      	strb	r3, [r0, #0]
   13dcc:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   13dce:	7803      	ldrb	r3, [r0, #0]
   13dd0:	f36f 1304 	bfc	r3, #4, #1
   13dd4:	7003      	strb	r3, [r0, #0]
}
   13dd6:	bd10      	pop	{r4, pc}

00013dd8 <prepare_pdu_data_tx>:
{
   13dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13dda:	460c      	mov	r4, r1
	    conn->empty ||
   13ddc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   13de0:	f012 0f80 	tst.w	r2, #128	; 0x80
   13de4:	d109      	bne.n	13dfa <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   13de6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   13dea:	b133      	cbz	r3, 13dfa <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   13dec:	f012 0f08 	tst.w	r2, #8
   13df0:	d00e      	beq.n	13e10 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   13df2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   13df6:	4293      	cmp	r3, r2
   13df8:	d00a      	beq.n	13e10 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   13dfa:	f7ff ffcf 	bl	13d9c <empty_tx_enqueue>
   13dfe:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   13e00:	7813      	ldrb	r3, [r2, #0]
   13e02:	f36f 1347 	bfc	r3, #5, #3
   13e06:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   13e08:	2300      	movs	r3, #0
   13e0a:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   13e0c:	6022      	str	r2, [r4, #0]
   13e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   13e10:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   13e12:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   13e16:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   13e18:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   13e1c:	b911      	cbnz	r1, 13e24 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   13e1e:	7851      	ldrb	r1, [r2, #1]
   13e20:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   13e24:	b126      	cbz	r6, 13e30 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13e26:	5d99      	ldrb	r1, [r3, r6]
   13e28:	2501      	movs	r5, #1
   13e2a:	f365 0101 	bfi	r1, r5, #0, #2
   13e2e:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   13e30:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   13e34:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   13e38:	1a6d      	subs	r5, r5, r1
   13e3a:	b2ed      	uxtb	r5, r5
   13e3c:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   13e3e:	5d99      	ldrb	r1, [r3, r6]
   13e40:	f36f 1104 	bfc	r1, #4, #1
   13e44:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   13e46:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   13e4a:	f001 0107 	and.w	r1, r1, #7
   13e4e:	2902      	cmp	r1, #2
   13e50:	d02d      	beq.n	13eae <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   13e52:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   13e54:	08c9      	lsrs	r1, r1, #3
   13e56:	390a      	subs	r1, #10
   13e58:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   13e5a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   13e5e:	f017 0f20 	tst.w	r7, #32
   13e62:	d001      	beq.n	13e68 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   13e64:	3904      	subs	r1, #4
   13e66:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   13e68:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   13e6a:	42b9      	cmp	r1, r7
   13e6c:	d800      	bhi.n	13e70 <prepare_pdu_data_tx+0x98>
   13e6e:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   13e70:	b2ad      	uxth	r5, r5
   13e72:	42af      	cmp	r7, r5
   13e74:	d204      	bcs.n	13e80 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   13e76:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   13e78:	5d99      	ldrb	r1, [r3, r6]
   13e7a:	f041 0110 	orr.w	r1, r1, #16
   13e7e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   13e80:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   13e84:	6809      	ldr	r1, [r1, #0]
   13e86:	b119      	cbz	r1, 13e90 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   13e88:	5d99      	ldrb	r1, [r3, r6]
   13e8a:	f041 0110 	orr.w	r1, r1, #16
   13e8e:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   13e90:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   13e94:	2b00      	cmp	r3, #0
   13e96:	d1b3      	bne.n	13e00 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   13e98:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   13e9c:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   13ea0:	428b      	cmp	r3, r1
   13ea2:	d0ad      	beq.n	13e00 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   13ea4:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   13ea8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   13eac:	e7a8      	b.n	13e00 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   13eae:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   13eb0:	0889      	lsrs	r1, r1, #2
   13eb2:	390b      	subs	r1, #11
   13eb4:	b289      	uxth	r1, r1
			break;
   13eb6:	e7d0      	b.n	13e5a <prepare_pdu_data_tx+0x82>

00013eb8 <version_ind_send>:
{
   13eb8:	b510      	push	{r4, lr}
   13eba:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13ebc:	4810      	ldr	r0, [pc, #64]	; (13f00 <version_ind_send+0x48>)
   13ebe:	f7fc fd0e 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   13ec2:	b1b8      	cbz	r0, 13ef4 <version_ind_send+0x3c>
   13ec4:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13ec6:	7903      	ldrb	r3, [r0, #4]
   13ec8:	f043 0303 	orr.w	r3, r3, #3
   13ecc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   13ece:	2306      	movs	r3, #6
   13ed0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   13ed2:	230c      	movs	r3, #12
   13ed4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   13ed6:	2309      	movs	r3, #9
   13ed8:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   13eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ede:	7243      	strb	r3, [r0, #9]
   13ee0:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   13ee2:	72c3      	strb	r3, [r0, #11]
   13ee4:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   13ee6:	4620      	mov	r0, r4
   13ee8:	f7fe ffcb 	bl	12e82 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   13eec:	4620      	mov	r0, r4
   13eee:	f7ff ff55 	bl	13d9c <empty_tx_enqueue>
   13ef2:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   13ef4:	4040      	eors	r0, r0
   13ef6:	f380 8811 	msr	BASEPRI, r0
   13efa:	f04f 0004 	mov.w	r0, #4
   13efe:	df02      	svc	2
   13f00:	200010d4 	.word	0x200010d4

00013f04 <tx_packet_set>:
{
   13f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f06:	4605      	mov	r5, r0
   13f08:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   13f0a:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   13f0c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   13f10:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   13f14:	09c9      	lsrs	r1, r1, #7
   13f16:	4620      	mov	r0, r4
   13f18:	f7fc fe5e 	bl	10bd8 <radio_phy_set>
	if (conn->enc_tx) {
   13f1c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13f20:	f013 0f20 	tst.w	r3, #32
   13f24:	d10a      	bne.n	13f3c <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   13f26:	0062      	lsls	r2, r4, #1
   13f28:	f042 0201 	orr.w	r2, r2, #1
   13f2c:	b2f1      	uxtb	r1, r6
   13f2e:	2008      	movs	r0, #8
   13f30:	f7fc fe96 	bl	10c60 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   13f34:	4638      	mov	r0, r7
   13f36:	f7fc fec9 	bl	10ccc <radio_pkt_tx_set>
   13f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   13f3c:	0062      	lsls	r2, r4, #1
   13f3e:	1d31      	adds	r1, r6, #4
   13f40:	f042 0201 	orr.w	r2, r2, #1
   13f44:	b2c9      	uxtb	r1, r1
   13f46:	2008      	movs	r0, #8
   13f48:	f7fc fe8a 	bl	10c60 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   13f4c:	4639      	mov	r1, r7
   13f4e:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   13f52:	f7fd f8f1 	bl	11138 <radio_ccm_tx_pkt_set>
   13f56:	f7fc feb9 	bl	10ccc <radio_pkt_tx_set>
   13f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013f5c <chan_set>:
{
   13f5c:	b510      	push	{r4, lr}
   13f5e:	4604      	mov	r4, r0
	switch (chan) {
   13f60:	2826      	cmp	r0, #38	; 0x26
   13f62:	d013      	beq.n	13f8c <chan_set+0x30>
   13f64:	2827      	cmp	r0, #39	; 0x27
   13f66:	d015      	beq.n	13f94 <chan_set+0x38>
   13f68:	2825      	cmp	r0, #37	; 0x25
   13f6a:	d008      	beq.n	13f7e <chan_set+0x22>
		if (chan < 11) {
   13f6c:	280a      	cmp	r0, #10
   13f6e:	d915      	bls.n	13f9c <chan_set+0x40>
		} else if (chan < 40) {
   13f70:	2827      	cmp	r0, #39	; 0x27
   13f72:	d818      	bhi.n	13fa6 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   13f74:	3003      	adds	r0, #3
   13f76:	0040      	lsls	r0, r0, #1
   13f78:	f7fc fe42 	bl	10c00 <radio_freq_chan_set>
   13f7c:	e002      	b.n	13f84 <chan_set+0x28>
		radio_freq_chan_set(2);
   13f7e:	2002      	movs	r0, #2
   13f80:	f7fc fe3e 	bl	10c00 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   13f84:	4620      	mov	r0, r4
   13f86:	f7fc fe41 	bl	10c0c <radio_whiten_iv_set>
   13f8a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   13f8c:	201a      	movs	r0, #26
   13f8e:	f7fc fe37 	bl	10c00 <radio_freq_chan_set>
		break;
   13f92:	e7f7      	b.n	13f84 <chan_set+0x28>
		radio_freq_chan_set(80);
   13f94:	2050      	movs	r0, #80	; 0x50
   13f96:	f7fc fe33 	bl	10c00 <radio_freq_chan_set>
		break;
   13f9a:	e7f3      	b.n	13f84 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   13f9c:	3002      	adds	r0, #2
   13f9e:	0040      	lsls	r0, r0, #1
   13fa0:	f7fc fe2e 	bl	10c00 <radio_freq_chan_set>
   13fa4:	e7ee      	b.n	13f84 <chan_set+0x28>
			LL_ASSERT(0);
   13fa6:	4040      	eors	r0, r0
   13fa8:	f380 8811 	msr	BASEPRI, r0
   13fac:	f04f 0004 	mov.w	r0, #4
   13fb0:	df02      	svc	2
	...

00013fb4 <adv_setup>:
{
   13fb4:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   13fb6:	4a39      	ldr	r2, [pc, #228]	; (1409c <adv_setup+0xe8>)
   13fb8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   13fbc:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   13fc0:	4293      	cmp	r3, r2
   13fc2:	d037      	beq.n	14034 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   13fc4:	3301      	adds	r3, #1
   13fc6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   13fc8:	2b02      	cmp	r3, #2
   13fca:	d031      	beq.n	14030 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   13fcc:	4a33      	ldr	r2, [pc, #204]	; (1409c <adv_setup+0xe8>)
   13fce:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   13fd2:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   13fd4:	4a31      	ldr	r2, [pc, #196]	; (1409c <adv_setup+0xe8>)
   13fd6:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   13fda:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   13fde:	4293      	cmp	r3, r2
   13fe0:	d007      	beq.n	13ff2 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   13fe2:	3301      	adds	r3, #1
   13fe4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   13fe6:	2b02      	cmp	r3, #2
   13fe8:	d026      	beq.n	14038 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   13fea:	4a2c      	ldr	r2, [pc, #176]	; (1409c <adv_setup+0xe8>)
   13fec:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   13ff0:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   13ff2:	4c2a      	ldr	r4, [pc, #168]	; (1409c <adv_setup+0xe8>)
   13ff4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   13ff8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   13ffc:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   14000:	3320      	adds	r3, #32
   14002:	441c      	add	r4, r3
   14004:	1de5      	adds	r5, r4, #7
	if (upd) {
   14006:	b9c9      	cbnz	r1, 1403c <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   14008:	4628      	mov	r0, r5
   1400a:	f7fc fe5f 	bl	10ccc <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1400e:	79e3      	ldrb	r3, [r4, #7]
   14010:	f003 030f 	and.w	r3, r3, #15
   14014:	2b02      	cmp	r3, #2
   14016:	d020      	beq.n	1405a <adv_setup+0xa6>
   14018:	2b07      	cmp	r3, #7
   1401a:	d01e      	beq.n	1405a <adv_setup+0xa6>
		_radio.state = STATE_TX;
   1401c:	2202      	movs	r2, #2
   1401e:	4b1f      	ldr	r3, [pc, #124]	; (1409c <adv_setup+0xe8>)
   14020:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   14022:	2096      	movs	r0, #150	; 0x96
   14024:	f7fc ff78 	bl	10f18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14028:	2000      	movs	r0, #0
   1402a:	f7fc fec3 	bl	10db4 <radio_switch_complete_and_rx>
   1402e:	e019      	b.n	14064 <adv_setup+0xb0>
			first = 0;
   14030:	2300      	movs	r3, #0
   14032:	e7cb      	b.n	13fcc <adv_setup+0x18>
	u8_t upd = 0;
   14034:	2100      	movs	r1, #0
   14036:	e7cd      	b.n	13fd4 <adv_setup+0x20>
			first = 0;
   14038:	2300      	movs	r3, #0
   1403a:	e7d6      	b.n	13fea <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   1403c:	4817      	ldr	r0, [pc, #92]	; (1409c <adv_setup+0xe8>)
   1403e:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   14042:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   14046:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1404a:	3370      	adds	r3, #112	; 0x70
   1404c:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   1404e:	2206      	movs	r2, #6
   14050:	1ca9      	adds	r1, r5, #2
   14052:	3009      	adds	r0, #9
   14054:	f7ec f934 	bl	2c0 <memcpy>
   14058:	e7d6      	b.n	14008 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   1405a:	2203      	movs	r2, #3
   1405c:	4b0f      	ldr	r3, [pc, #60]	; (1409c <adv_setup+0xe8>)
   1405e:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   14060:	f7fc feb8 	bl	10dd4 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   14064:	4b0d      	ldr	r3, [pc, #52]	; (1409c <adv_setup+0xe8>)
   14066:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1406a:	f3c2 0142 	ubfx	r1, r2, #1, #3
   1406e:	b2ca      	uxtb	r2, r1
   14070:	4613      	mov	r3, r2
	chan = 0;
   14072:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   14074:	e002      	b.n	1407c <adv_setup+0xc8>
		chan++;
   14076:	3001      	adds	r0, #1
   14078:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   1407a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   1407c:	f013 0f01 	tst.w	r3, #1
   14080:	d0f9      	beq.n	14076 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   14082:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   14084:	4b05      	ldr	r3, [pc, #20]	; (1409c <adv_setup+0xe8>)
   14086:	400a      	ands	r2, r1
   14088:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1408c:	f362 0143 	bfi	r1, r2, #1, #3
   14090:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   14094:	3025      	adds	r0, #37	; 0x25
   14096:	f7ff ff61 	bl	13f5c <chan_set>
   1409a:	bd38      	pop	{r3, r4, r5, pc}
   1409c:	20000f7c 	.word	0x20000f7c

000140a0 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   140a0:	b158      	cbz	r0, 140ba <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   140a2:	4b6c      	ldr	r3, [pc, #432]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   140a4:	7b9b      	ldrb	r3, [r3, #14]
   140a6:	b2db      	uxtb	r3, r3
   140a8:	2b05      	cmp	r3, #5
   140aa:	d100      	bne.n	140ae <ticker_stop_adv_stop+0xe>
   140ac:	4770      	bx	lr
   140ae:	4040      	eors	r0, r0
   140b0:	f380 8811 	msr	BASEPRI, r0
   140b4:	f04f 0004 	mov.w	r0, #4
   140b8:	df02      	svc	2
{
   140ba:	b500      	push	{lr}
   140bc:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   140be:	4b65      	ldr	r3, [pc, #404]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   140c0:	7b1b      	ldrb	r3, [r3, #12]
   140c2:	b2db      	uxtb	r3, r3
   140c4:	2b05      	cmp	r3, #5
   140c6:	d010      	beq.n	140ea <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   140c8:	4b62      	ldr	r3, [pc, #392]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   140ca:	7b5b      	ldrb	r3, [r3, #13]
   140cc:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   140ce:	2b05      	cmp	r3, #5
   140d0:	d00b      	beq.n	140ea <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   140d2:	4b61      	ldr	r3, [pc, #388]	; (14258 <ticker_stop_adv_stop+0x1b8>)
   140d4:	2200      	movs	r2, #0
   140d6:	4611      	mov	r1, r2
   140d8:	2001      	movs	r0, #1
   140da:	f7fc fabf 	bl	1065c <mayfly_enqueue>
	LL_ASSERT(!retval);
   140de:	2800      	cmp	r0, #0
   140e0:	f040 80b1 	bne.w	14246 <ticker_stop_adv_stop+0x1a6>
}
   140e4:	b005      	add	sp, #20
   140e6:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   140ea:	ab04      	add	r3, sp, #16
   140ec:	2202      	movs	r2, #2
   140ee:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   140f2:	9300      	str	r3, [sp, #0]
   140f4:	4b59      	ldr	r3, [pc, #356]	; (1425c <ticker_stop_adv_stop+0x1bc>)
   140f6:	2200      	movs	r2, #0
   140f8:	2101      	movs	r1, #1
   140fa:	4610      	mov	r0, r2
   140fc:	f7fe f95c 	bl	123b8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   14100:	2802      	cmp	r0, #2
   14102:	d02c      	beq.n	1415e <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   14104:	9b02      	ldr	r3, [sp, #8]
   14106:	2b00      	cmp	r3, #0
   14108:	d17e      	bne.n	14208 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1410a:	2302      	movs	r3, #2
   1410c:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   1410e:	4b51      	ldr	r3, [pc, #324]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   14110:	7b1b      	ldrb	r3, [r3, #12]
   14112:	2b00      	cmp	r3, #0
   14114:	d031      	beq.n	1417a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   14116:	2000      	movs	r0, #0
   14118:	4b4e      	ldr	r3, [pc, #312]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   1411a:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1411c:	ab03      	add	r3, sp, #12
   1411e:	9300      	str	r3, [sp, #0]
   14120:	4b4e      	ldr	r3, [pc, #312]	; (1425c <ticker_stop_adv_stop+0x1bc>)
   14122:	2201      	movs	r2, #1
   14124:	4611      	mov	r1, r2
   14126:	f7fe f947 	bl	123b8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1412a:	2802      	cmp	r0, #2
   1412c:	d02b      	beq.n	14186 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   1412e:	9b03      	ldr	r3, [sp, #12]
   14130:	2b00      	cmp	r3, #0
   14132:	d144      	bne.n	141be <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   14134:	4b47      	ldr	r3, [pc, #284]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   14136:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   14138:	695b      	ldr	r3, [r3, #20]
   1413a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1413e:	429a      	cmp	r2, r3
   14140:	d92f      	bls.n	141a2 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   14142:	4b47      	ldr	r3, [pc, #284]	; (14260 <ticker_stop_adv_stop+0x1c0>)
   14144:	2200      	movs	r2, #0
   14146:	4611      	mov	r1, r2
   14148:	2001      	movs	r0, #1
   1414a:	f7fc fa87 	bl	1065c <mayfly_enqueue>
				LL_ASSERT(!retval);
   1414e:	2800      	cmp	r0, #0
   14150:	d0bf      	beq.n	140d2 <ticker_stop_adv_stop+0x32>
   14152:	4040      	eors	r0, r0
   14154:	f380 8811 	msr	BASEPRI, r0
   14158:	f04f 0004 	mov.w	r0, #4
   1415c:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1415e:	2201      	movs	r2, #1
   14160:	4611      	mov	r1, r2
   14162:	4610      	mov	r0, r2
   14164:	f7fc fa3c 	bl	105e0 <mayfly_enable>
   14168:	e003      	b.n	14172 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1416a:	2101      	movs	r1, #1
   1416c:	2000      	movs	r0, #0
   1416e:	f7fe f9df 	bl	12530 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   14172:	9b02      	ldr	r3, [sp, #8]
   14174:	2b02      	cmp	r3, #2
   14176:	d0f8      	beq.n	1416a <ticker_stop_adv_stop+0xca>
   14178:	e7c4      	b.n	14104 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   1417a:	4040      	eors	r0, r0
   1417c:	f380 8811 	msr	BASEPRI, r0
   14180:	f04f 0004 	mov.w	r0, #4
   14184:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   14186:	2201      	movs	r2, #1
   14188:	4611      	mov	r1, r2
   1418a:	4610      	mov	r0, r2
   1418c:	f7fc fa28 	bl	105e0 <mayfly_enable>
   14190:	e003      	b.n	1419a <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   14192:	2101      	movs	r1, #1
   14194:	2000      	movs	r0, #0
   14196:	f7fe f9cb 	bl	12530 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1419a:	9b03      	ldr	r3, [sp, #12]
   1419c:	2b02      	cmp	r3, #2
   1419e:	d0f8      	beq.n	14192 <ticker_stop_adv_stop+0xf2>
   141a0:	e7c5      	b.n	1412e <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   141a2:	4b30      	ldr	r3, [pc, #192]	; (14264 <ticker_stop_adv_stop+0x1c4>)
   141a4:	2200      	movs	r2, #0
   141a6:	4611      	mov	r1, r2
   141a8:	2001      	movs	r0, #1
   141aa:	f7fc fa57 	bl	1065c <mayfly_enqueue>
				LL_ASSERT(!retval);
   141ae:	2800      	cmp	r0, #0
   141b0:	d08f      	beq.n	140d2 <ticker_stop_adv_stop+0x32>
   141b2:	4040      	eors	r0, r0
   141b4:	f380 8811 	msr	BASEPRI, r0
   141b8:	f04f 0004 	mov.w	r0, #4
   141bc:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   141be:	9b03      	ldr	r3, [sp, #12]
   141c0:	2b01      	cmp	r3, #1
   141c2:	d11b      	bne.n	141fc <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   141c4:	4b26      	ldr	r3, [pc, #152]	; (14260 <ticker_stop_adv_stop+0x1c0>)
   141c6:	2200      	movs	r2, #0
   141c8:	4611      	mov	r1, r2
   141ca:	2001      	movs	r0, #1
   141cc:	f7fc fa46 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   141d0:	b970      	cbnz	r0, 141f0 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   141d2:	4b24      	ldr	r3, [pc, #144]	; (14264 <ticker_stop_adv_stop+0x1c4>)
   141d4:	2200      	movs	r2, #0
   141d6:	4611      	mov	r1, r2
   141d8:	2001      	movs	r0, #1
   141da:	f7fc fa3f 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   141de:	2800      	cmp	r0, #0
   141e0:	f43f af77 	beq.w	140d2 <ticker_stop_adv_stop+0x32>
   141e4:	4040      	eors	r0, r0
   141e6:	f380 8811 	msr	BASEPRI, r0
   141ea:	f04f 0004 	mov.w	r0, #4
   141ee:	df02      	svc	2
			LL_ASSERT(!retval);
   141f0:	4040      	eors	r0, r0
   141f2:	f380 8811 	msr	BASEPRI, r0
   141f6:	f04f 0004 	mov.w	r0, #4
   141fa:	df02      	svc	2
			LL_ASSERT(0);
   141fc:	4040      	eors	r0, r0
   141fe:	f380 8811 	msr	BASEPRI, r0
   14202:	f04f 0004 	mov.w	r0, #4
   14206:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   14208:	9b02      	ldr	r3, [sp, #8]
   1420a:	2b01      	cmp	r3, #1
   1420c:	d115      	bne.n	1423a <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   1420e:	4b11      	ldr	r3, [pc, #68]	; (14254 <ticker_stop_adv_stop+0x1b4>)
   14210:	7bdb      	ldrb	r3, [r3, #15]
   14212:	2b00      	cmp	r3, #0
   14214:	f43f af5d 	beq.w	140d2 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   14218:	4b13      	ldr	r3, [pc, #76]	; (14268 <ticker_stop_adv_stop+0x1c8>)
   1421a:	2204      	movs	r2, #4
   1421c:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1421e:	2200      	movs	r2, #0
   14220:	4611      	mov	r1, r2
   14222:	2001      	movs	r0, #1
   14224:	f7fc fa1a 	bl	1065c <mayfly_enqueue>
			LL_ASSERT(!retval);
   14228:	2800      	cmp	r0, #0
   1422a:	f43f af52 	beq.w	140d2 <ticker_stop_adv_stop+0x32>
   1422e:	4040      	eors	r0, r0
   14230:	f380 8811 	msr	BASEPRI, r0
   14234:	f04f 0004 	mov.w	r0, #4
   14238:	df02      	svc	2
		LL_ASSERT(0);
   1423a:	4040      	eors	r0, r0
   1423c:	f380 8811 	msr	BASEPRI, r0
   14240:	f04f 0004 	mov.w	r0, #4
   14244:	df02      	svc	2
	LL_ASSERT(!retval);
   14246:	4040      	eors	r0, r0
   14248:	f380 8811 	msr	BASEPRI, r0
   1424c:	f04f 0004 	mov.w	r0, #4
   14250:	df02      	svc	2
   14252:	bf00      	nop
   14254:	20000f7c 	.word	0x20000f7c
   14258:	2000bcb0 	.word	0x2000bcb0
   1425c:	00012c65 	.word	0x00012c65
   14260:	2000bce0 	.word	0x2000bce0
   14264:	2000bda0 	.word	0x2000bda0
   14268:	2000bd10 	.word	0x2000bd10
   1426c:	00000000 	.word	0x00000000

00014270 <sched_free_win_offset_calc>:
{
   14270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14274:	b091      	sub	sp, #68	; 0x44
   14276:	9009      	str	r0, [sp, #36]	; 0x24
   14278:	910a      	str	r1, [sp, #40]	; 0x28
   1427a:	9207      	str	r2, [sp, #28]
   1427c:	469b      	mov	fp, r3
   1427e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   14280:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14284:	6803      	ldr	r3, [r0, #0]
   14286:	2b00      	cmp	r3, #0
   14288:	db0f      	blt.n	142aa <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   1428a:	2300      	movs	r3, #0
   1428c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   1428e:	27ff      	movs	r7, #255	; 0xff
   14290:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   14294:	2300      	movs	r3, #0
   14296:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1429a:	930f      	str	r3, [sp, #60]	; 0x3c
   1429c:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1429e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   142a0:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   142a2:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   142a4:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   142a6:	4698      	mov	r8, r3
   142a8:	e06d      	b.n	14386 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   142aa:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   142ac:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   142ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   142b2:	4291      	cmp	r1, r2
   142b4:	bf2c      	ite	cs
   142b6:	1a5b      	subcs	r3, r3, r1
   142b8:	1a9b      	subcc	r3, r3, r2
   142ba:	930b      	str	r3, [sp, #44]	; 0x2c
   142bc:	e7e7      	b.n	1428e <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   142be:	2101      	movs	r1, #1
   142c0:	2000      	movs	r0, #0
   142c2:	f7fe f935 	bl	12530 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   142c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   142c8:	2b02      	cmp	r3, #2
   142ca:	d0f8      	beq.n	142be <sched_free_win_offset_calc+0x4e>
   142cc:	e06c      	b.n	143a8 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   142ce:	4040      	eors	r0, r0
   142d0:	f380 8811 	msr	BASEPRI, r0
   142d4:	f04f 0004 	mov.w	r0, #4
   142d8:	df02      	svc	2
			LL_ASSERT(0);
   142da:	4040      	eors	r0, r0
   142dc:	f380 8811 	msr	BASEPRI, r0
   142e0:	f04f 0004 	mov.w	r0, #4
   142e4:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   142e6:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   142ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   142ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   142f2:	4291      	cmp	r1, r2
   142f4:	bf2c      	ite	cs
   142f6:	ebc3 0301 	rsbcs	r3, r3, r1
   142fa:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   142fe:	9a05      	ldr	r2, [sp, #20]
   14300:	441a      	add	r2, r3
   14302:	9205      	str	r2, [sp, #20]
   14304:	e085      	b.n	14412 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   14306:	2202      	movs	r2, #2
   14308:	a90d      	add	r1, sp, #52	; 0x34
   1430a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1430e:	f7eb ffd7 	bl	2c0 <memcpy>
					offset_index++;
   14312:	3401      	adds	r4, #1
   14314:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   14316:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   14318:	782b      	ldrb	r3, [r5, #0]
   1431a:	429c      	cmp	r4, r3
   1431c:	d21f      	bcs.n	1435e <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   1431e:	4639      	mov	r1, r7
   14320:	9805      	ldr	r0, [sp, #20]
   14322:	f7fe f919 	bl	12558 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   14326:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   1432a:	4433      	add	r3, r6
   1432c:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   1432e:	4298      	cmp	r0, r3
   14330:	d315      	bcc.n	1435e <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   14332:	19bb      	adds	r3, r7, r6
   14334:	485a      	ldr	r0, [pc, #360]	; (144a0 <sched_free_win_offset_calc+0x230>)
   14336:	fba3 0100 	umull	r0, r1, r3, r0
   1433a:	2207      	movs	r2, #7
   1433c:	fb02 1103 	mla	r1, r2, r3, r1
   14340:	a355      	add	r3, pc, #340	; (adr r3, 14498 <sched_free_win_offset_calc+0x228>)
   14342:	e9d3 2300 	ldrd	r2, r3, [r3]
   14346:	f7ec fed9 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   1434a:	4b56      	ldr	r3, [pc, #344]	; (144a4 <sched_free_win_offset_calc+0x234>)
   1434c:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   14350:	f3c0 208f 	ubfx	r0, r0, #10, #16
   14354:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   14358:	4558      	cmp	r0, fp
   1435a:	d3d4      	bcc.n	14306 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   1435c:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   1435e:	9b07      	ldr	r3, [sp, #28]
   14360:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   14362:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   14366:	459b      	cmp	fp, r3
   14368:	d95e      	bls.n	14428 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   1436a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   1436e:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   14372:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   14376:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   14378:	9b05      	ldr	r3, [sp, #20]
   1437a:	9308      	str	r3, [sp, #32]
   1437c:	e000      	b.n	14380 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   1437e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   14380:	782b      	ldrb	r3, [r5, #0]
   14382:	429c      	cmp	r4, r3
   14384:	d251      	bcs.n	1442a <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14386:	2302      	movs	r3, #2
   14388:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1438a:	ab0c      	add	r3, sp, #48	; 0x30
   1438c:	9302      	str	r3, [sp, #8]
   1438e:	4b46      	ldr	r3, [pc, #280]	; (144a8 <sched_free_win_offset_calc+0x238>)
   14390:	9301      	str	r3, [sp, #4]
   14392:	ab0e      	add	r3, sp, #56	; 0x38
   14394:	9300      	str	r3, [sp, #0]
   14396:	ab0f      	add	r3, sp, #60	; 0x3c
   14398:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   1439c:	2101      	movs	r1, #1
   1439e:	2000      	movs	r0, #0
   143a0:	f7fe f846 	bl	12430 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   143a4:	2802      	cmp	r0, #2
   143a6:	d08e      	beq.n	142c6 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   143a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   143aa:	2b00      	cmp	r3, #0
   143ac:	d18f      	bne.n	142ce <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   143ae:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   143b2:	2aff      	cmp	r2, #255	; 0xff
   143b4:	d039      	beq.n	1442a <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   143b6:	2fff      	cmp	r7, #255	; 0xff
   143b8:	d002      	beq.n	143c0 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   143ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   143bc:	4598      	cmp	r8, r3
   143be:	d18c      	bne.n	142da <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   143c0:	2a05      	cmp	r2, #5
   143c2:	d9dd      	bls.n	14380 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   143c4:	4b39      	ldr	r3, [pc, #228]	; (144ac <sched_free_win_offset_calc+0x23c>)
   143c6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   143ca:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   143cc:	429a      	cmp	r2, r3
   143ce:	dad7      	bge.n	14380 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   143d0:	2a06      	cmp	r2, #6
   143d2:	d9d4      	bls.n	1437e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   143d4:	9b06      	ldr	r3, [sp, #24]
   143d6:	2bff      	cmp	r3, #255	; 0xff
   143d8:	d127      	bne.n	1442a <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   143da:	3a07      	subs	r2, #7
   143dc:	b292      	uxth	r2, r2
   143de:	f44f 71aa 	mov.w	r1, #340	; 0x154
   143e2:	4b32      	ldr	r3, [pc, #200]	; (144ac <sched_free_win_offset_calc+0x23c>)
   143e4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   143e8:	f7fc fab6 	bl	10958 <mem_get>
   143ec:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   143ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143f0:	4283      	cmp	r3, r0
   143f2:	d0c5      	beq.n	14380 <sched_free_win_offset_calc+0x110>
   143f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   143f6:	b91b      	cbnz	r3, 14400 <sched_free_win_offset_calc+0x190>
   143f8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   143fc:	2b00      	cmp	r3, #0
   143fe:	dbbf      	blt.n	14380 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   14400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   14402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14404:	18d3      	adds	r3, r2, r3
   14406:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   14408:	f8d9 3000 	ldr.w	r3, [r9]
   1440c:	2b00      	cmp	r3, #0
   1440e:	f6ff af6a 	blt.w	142e6 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   14412:	9b07      	ldr	r3, [sp, #28]
   14414:	681f      	ldr	r7, [r3, #0]
   14416:	9b05      	ldr	r3, [sp, #20]
   14418:	42bb      	cmp	r3, r7
   1441a:	d9a6      	bls.n	1436a <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1441c:	9a08      	ldr	r2, [sp, #32]
   1441e:	42ba      	cmp	r2, r7
   14420:	f4ff af7a 	bcc.w	14318 <sched_free_win_offset_calc+0xa8>
   14424:	4617      	mov	r7, r2
   14426:	e777      	b.n	14318 <sched_free_win_offset_calc+0xa8>
   14428:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   1442a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1442e:	2bff      	cmp	r3, #255	; 0xff
   14430:	d003      	beq.n	1443a <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   14432:	702c      	strb	r4, [r5, #0]
}
   14434:	b011      	add	sp, #68	; 0x44
   14436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1443a:	9b07      	ldr	r3, [sp, #28]
   1443c:	681f      	ldr	r7, [r3, #0]
   1443e:	9a08      	ldr	r2, [sp, #32]
   14440:	42ba      	cmp	r2, r7
   14442:	d300      	bcc.n	14446 <sched_free_win_offset_calc+0x1d6>
   14444:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   14446:	782b      	ldrb	r3, [r5, #0]
   14448:	429c      	cmp	r4, r3
   1444a:	d21f      	bcs.n	1448c <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1444c:	19bb      	adds	r3, r7, r6
   1444e:	4814      	ldr	r0, [pc, #80]	; (144a0 <sched_free_win_offset_calc+0x230>)
   14450:	fba3 0100 	umull	r0, r1, r3, r0
   14454:	2207      	movs	r2, #7
   14456:	fb02 1103 	mla	r1, r2, r3, r1
   1445a:	a30f      	add	r3, pc, #60	; (adr r3, 14498 <sched_free_win_offset_calc+0x228>)
   1445c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14460:	f7ec fe4c 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   14464:	4b0f      	ldr	r3, [pc, #60]	; (144a4 <sched_free_win_offset_calc+0x234>)
   14466:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   1446a:	f3c3 238f 	ubfx	r3, r3, #10, #16
   1446e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   14472:	459b      	cmp	fp, r3
   14474:	d909      	bls.n	1448a <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   14476:	2202      	movs	r2, #2
   14478:	a90d      	add	r1, sp, #52	; 0x34
   1447a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1447e:	f7eb ff1f 	bl	2c0 <memcpy>
			offset_index++;
   14482:	3401      	adds	r4, #1
   14484:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   14486:	3728      	adds	r7, #40	; 0x28
   14488:	e7dd      	b.n	14446 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   1448a:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1448c:	9b07      	ldr	r3, [sp, #28]
   1448e:	601f      	str	r7, [r3, #0]
   14490:	e7cf      	b.n	14432 <sched_free_win_offset_calc+0x1c2>
   14492:	bf00      	nop
   14494:	f3af 8000 	nop.w
   14498:	3b9aca00 	.word	0x3b9aca00
   1449c:	00000000 	.word	0x00000000
   144a0:	1afd498d 	.word	0x1afd498d
   144a4:	d1b71759 	.word	0xd1b71759
   144a8:	00012c65 	.word	0x00012c65
   144ac:	20000f7c 	.word	0x20000f7c

000144b0 <mayfly_sched_free_win_offset_calc>:
{
   144b0:	b500      	push	{lr}
   144b2:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   144b4:	2300      	movs	r3, #0
   144b6:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   144b8:	2306      	movs	r3, #6
   144ba:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   144be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   144c2:	2b00      	cmp	r3, #0
   144c4:	db0e      	blt.n	144e4 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   144c6:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   144c8:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   144cc:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   144d0:	9101      	str	r1, [sp, #4]
   144d2:	f10d 010b 	add.w	r1, sp, #11
   144d6:	9100      	str	r1, [sp, #0]
   144d8:	2100      	movs	r1, #0
   144da:	f7ff fec9 	bl	14270 <sched_free_win_offset_calc>
}
   144de:	b005      	add	sp, #20
   144e0:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   144e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   144e6:	4602      	mov	r2, r0
   144e8:	f842 3fe4 	str.w	r3, [r2, #228]!
   144ec:	e7ec      	b.n	144c8 <mayfly_sched_free_win_offset_calc+0x18>
	...

000144f0 <mayfly_sched_win_offset_select>:
{
   144f0:	b570      	push	{r4, r5, r6, lr}
   144f2:	b088      	sub	sp, #32
   144f4:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   144f6:	ac05      	add	r4, sp, #20
   144f8:	2500      	movs	r5, #0
   144fa:	9505      	str	r5, [sp, #20]
   144fc:	9506      	str	r5, [sp, #24]
   144fe:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   14500:	2306      	movs	r3, #6
   14502:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   14506:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   1450a:	4843      	ldr	r0, [pc, #268]	; (14618 <mayfly_sched_win_offset_select+0x128>)
   1450c:	fba2 0100 	umull	r0, r1, r2, r0
   14510:	f240 1323 	movw	r3, #291	; 0x123
   14514:	fb03 1102 	mla	r1, r3, r2, r1
   14518:	a33d      	add	r3, pc, #244	; (adr r3, 14610 <mayfly_sched_win_offset_select+0x120>)
   1451a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1451e:	f7ec fded 	bl	10fc <__aeabi_uldivmod>
   14522:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   14526:	aa08      	add	r2, sp, #32
   14528:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   1452c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   14530:	9401      	str	r4, [sp, #4]
   14532:	f10d 0113 	add.w	r1, sp, #19
   14536:	9100      	str	r1, [sp, #0]
   14538:	2101      	movs	r1, #1
   1453a:	4630      	mov	r0, r6
   1453c:	f7ff fe98 	bl	14270 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   14540:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   14542:	e018      	b.n	14576 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   14544:	3301      	adds	r3, #1
   14546:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   14548:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1454c:	428b      	cmp	r3, r1
   1454e:	d20e      	bcs.n	1456e <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   14550:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   14554:	f64f 70ff 	movw	r0, #65535	; 0xffff
   14558:	4282      	cmp	r2, r0
   1455a:	d0f3      	beq.n	14544 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   1455c:	a808      	add	r0, sp, #32
   1455e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   14562:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   14566:	4282      	cmp	r2, r0
   14568:	d001      	beq.n	1456e <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   1456a:	2401      	movs	r4, #1
   1456c:	e7ea      	b.n	14544 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   1456e:	428b      	cmp	r3, r1
   14570:	d30e      	bcc.n	14590 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   14572:	3501      	adds	r5, #1
   14574:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   14576:	2d05      	cmp	r5, #5
   14578:	d80a      	bhi.n	14590 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   1457a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   1457e:	2202      	movs	r2, #2
   14580:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   14584:	f10d 000a 	add.w	r0, sp, #10
   14588:	f7eb fe9a 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   1458c:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   1458e:	e7db      	b.n	14548 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   14590:	2d05      	cmp	r5, #5
   14592:	d91d      	bls.n	145d0 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   14594:	b35c      	cbz	r4, 145ee <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   14596:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   1459a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   1459e:	2200      	movs	r2, #0
   145a0:	4b1e      	ldr	r3, [pc, #120]	; (1461c <mayfly_sched_win_offset_select+0x12c>)
   145a2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   145a6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   145aa:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   145ae:	f042 0203 	orr.w	r2, r2, #3
   145b2:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   145b6:	2203      	movs	r2, #3
   145b8:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   145bc:	2211      	movs	r2, #17
   145be:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   145c2:	220f      	movs	r2, #15
   145c4:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   145c8:	2220      	movs	r2, #32
   145ca:	701a      	strb	r2, [r3, #0]
}
   145cc:	b008      	add	sp, #32
   145ce:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   145d0:	a908      	add	r1, sp, #32
   145d2:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   145d6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   145da:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   145de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   145e2:	2202      	movs	r2, #2
   145e4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   145e8:	f7eb fe6a 	bl	2c0 <memcpy>
   145ec:	e7ee      	b.n	145cc <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   145ee:	a908      	add	r1, sp, #32
   145f0:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   145f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   145f8:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   145fc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   14600:	2202      	movs	r2, #2
   14602:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   14606:	f7eb fe5b 	bl	2c0 <memcpy>
   1460a:	e7df      	b.n	145cc <mayfly_sched_win_offset_select+0xdc>
   1460c:	f3af 8000 	nop.w
   14610:	1afd498d 	.word	0x1afd498d
   14614:	00000007 	.word	0x00000007
   14618:	09ce5400 	.word	0x09ce5400
   1461c:	20000f7c 	.word	0x20000f7c

00014620 <sched_after_mstr_free_slot_get>:
{
   14620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	b08b      	sub	sp, #44	; 0x2c
   14626:	4604      	mov	r4, r0
   14628:	468b      	mov	fp, r1
   1462a:	4615      	mov	r5, r2
   1462c:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   1462e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   14632:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   14636:	2300      	movs	r3, #0
   14638:	f8ca 3000 	str.w	r3, [sl]
   1463c:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   1463e:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   14640:	9305      	str	r3, [sp, #20]
   14642:	e01f      	b.n	14684 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   14644:	4621      	mov	r1, r4
   14646:	2000      	movs	r0, #0
   14648:	f7fd ff72 	bl	12530 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1464c:	9b07      	ldr	r3, [sp, #28]
   1464e:	2b02      	cmp	r3, #2
   14650:	d0f8      	beq.n	14644 <sched_after_mstr_free_slot_get+0x24>
   14652:	e028      	b.n	146a6 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   14654:	4040      	eors	r0, r0
   14656:	f380 8811 	msr	BASEPRI, r0
   1465a:	f04f 0004 	mov.w	r0, #4
   1465e:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   14660:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   14662:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   14664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   14668:	4291      	cmp	r1, r2
   1466a:	bf2c      	ite	cs
   1466c:	ebc3 0301 	rsbcs	r3, r3, r1
   14670:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   14674:	4499      	add	r9, r3
   14676:	e03a      	b.n	146ee <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   14678:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   1467c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   1467e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   14680:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14684:	2302      	movs	r3, #2
   14686:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   14688:	ab07      	add	r3, sp, #28
   1468a:	9302      	str	r3, [sp, #8]
   1468c:	4b2c      	ldr	r3, [pc, #176]	; (14740 <sched_after_mstr_free_slot_get+0x120>)
   1468e:	9301      	str	r3, [sp, #4]
   14690:	ab08      	add	r3, sp, #32
   14692:	9300      	str	r3, [sp, #0]
   14694:	462b      	mov	r3, r5
   14696:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1469a:	4621      	mov	r1, r4
   1469c:	2000      	movs	r0, #0
   1469e:	f7fd fec7 	bl	12430 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   146a2:	2802      	cmp	r0, #2
   146a4:	d0d2      	beq.n	1464c <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   146a6:	9b07      	ldr	r3, [sp, #28]
   146a8:	2b00      	cmp	r3, #0
   146aa:	d1d3      	bne.n	14654 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   146ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   146b0:	2aff      	cmp	r2, #255	; 0xff
   146b2:	d028      	beq.n	14706 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   146b4:	2a06      	cmp	r2, #6
   146b6:	d9e5      	bls.n	14684 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   146b8:	4b22      	ldr	r3, [pc, #136]	; (14744 <sched_after_mstr_free_slot_get+0x124>)
   146ba:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   146be:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   146c0:	429a      	cmp	r2, r3
   146c2:	dadf      	bge.n	14684 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   146c4:	3a07      	subs	r2, #7
   146c6:	b292      	uxth	r2, r2
   146c8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   146cc:	4b1d      	ldr	r3, [pc, #116]	; (14744 <sched_after_mstr_free_slot_get+0x124>)
   146ce:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   146d2:	f7fc f941 	bl	10958 <mem_get>
		if (conn && !conn->role) {
   146d6:	4606      	mov	r6, r0
   146d8:	2800      	cmp	r0, #0
   146da:	d0d3      	beq.n	14684 <sched_after_mstr_free_slot_get+0x64>
   146dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
   146e0:	2b00      	cmp	r3, #0
   146e2:	dbcf      	blt.n	14684 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   146e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   146e8:	6803      	ldr	r3, [r0, #0]
   146ea:	2b00      	cmp	r3, #0
   146ec:	dbb8      	blt.n	14660 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   146ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   146f2:	d0c1      	beq.n	14678 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   146f4:	9905      	ldr	r1, [sp, #20]
   146f6:	4648      	mov	r0, r9
   146f8:	f7fd ff2e 	bl	12558 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   146fc:	eb07 030b 	add.w	r3, r7, fp
   14700:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   14702:	4298      	cmp	r0, r3
   14704:	d9b8      	bls.n	14678 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   14706:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1470a:	d010      	beq.n	1472e <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1470c:	9b05      	ldr	r3, [sp, #20]
   1470e:	443b      	add	r3, r7
   14710:	461f      	mov	r7, r3
   14712:	480d      	ldr	r0, [pc, #52]	; (14748 <sched_after_mstr_free_slot_get+0x128>)
   14714:	fba3 0100 	umull	r0, r1, r3, r0
   14718:	2307      	movs	r3, #7
   1471a:	fb03 1107 	mla	r1, r3, r7, r1
   1471e:	a306      	add	r3, pc, #24	; (adr r3, 14738 <sched_after_mstr_free_slot_get+0x118>)
   14720:	e9d3 2300 	ldrd	r2, r3, [r3]
   14724:	f7ec fcea 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   14728:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1472a:	f8ca 0000 	str.w	r0, [sl]
}
   1472e:	b00b      	add	sp, #44	; 0x2c
   14730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14734:	f3af 8000 	nop.w
   14738:	3b9aca00 	.word	0x3b9aca00
   1473c:	00000000 	.word	0x00000000
   14740:	00012c65 	.word	0x00012c65
   14744:	20000f7c 	.word	0x20000f7c
   14748:	1afd498d 	.word	0x1afd498d
   1474c:	00000000 	.word	0x00000000

00014750 <sched_after_mstr_free_offset_get>:
{
   14750:	b570      	push	{r4, r5, r6, lr}
   14752:	b082      	sub	sp, #8
   14754:	4606      	mov	r6, r0
   14756:	4615      	mov	r5, r2
   14758:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   1475a:	aa02      	add	r2, sp, #8
   1475c:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   14760:	3127      	adds	r1, #39	; 0x27
   14762:	2001      	movs	r0, #1
   14764:	f7ff ff5c 	bl	14620 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   14768:	9801      	ldr	r0, [sp, #4]
   1476a:	4285      	cmp	r5, r0
   1476c:	d011      	beq.n	14792 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   1476e:	4629      	mov	r1, r5
   14770:	f7fd fef2 	bl	12558 <ticker_ticks_diff_get>
   14774:	4602      	mov	r2, r0
   14776:	4810      	ldr	r0, [pc, #64]	; (147b8 <sched_after_mstr_free_offset_get+0x68>)
   14778:	fba2 0100 	umull	r0, r1, r2, r0
   1477c:	2307      	movs	r3, #7
   1477e:	fb03 1102 	mla	r1, r3, r2, r1
   14782:	a30b      	add	r3, pc, #44	; (adr r3, 147b0 <sched_after_mstr_free_offset_get+0x60>)
   14784:	e9d3 2300 	ldrd	r2, r3, [r3]
   14788:	f7ec fcb8 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   1478c:	6823      	ldr	r3, [r4, #0]
   1478e:	4418      	add	r0, r3
   14790:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   14792:	6823      	ldr	r3, [r4, #0]
   14794:	2b00      	cmp	r3, #0
   14796:	db09      	blt.n	147ac <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   14798:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1479c:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   147a0:	e001      	b.n	147a6 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   147a2:	1a1b      	subs	r3, r3, r0
   147a4:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   147a6:	6823      	ldr	r3, [r4, #0]
   147a8:	4298      	cmp	r0, r3
   147aa:	d3fa      	bcc.n	147a2 <sched_after_mstr_free_offset_get+0x52>
}
   147ac:	b002      	add	sp, #8
   147ae:	bd70      	pop	{r4, r5, r6, pc}
   147b0:	3b9aca00 	.word	0x3b9aca00
   147b4:	00000000 	.word	0x00000000
   147b8:	1afd498d 	.word	0x1afd498d

000147bc <mayfly_sched_win_offset_use>:
{
   147bc:	b510      	push	{r4, lr}
   147be:	b082      	sub	sp, #8
   147c0:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   147c2:	f100 0384 	add.w	r3, r0, #132	; 0x84
   147c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   147ca:	68c1      	ldr	r1, [r0, #12]
   147cc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   147ce:	f7ff ffbf 	bl	14750 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   147d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   147d6:	4a07      	ldr	r2, [pc, #28]	; (147f4 <mayfly_sched_win_offset_use+0x38>)
   147d8:	fba2 2303 	umull	r2, r3, r2, r3
   147dc:	0a9b      	lsrs	r3, r3, #10
   147de:	a902      	add	r1, sp, #8
   147e0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   147e4:	2202      	movs	r2, #2
   147e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   147ea:	f7eb fd69 	bl	2c0 <memcpy>
}
   147ee:	b002      	add	sp, #8
   147f0:	bd10      	pop	{r4, pc}
   147f2:	bf00      	nop
   147f4:	d1b71759 	.word	0xd1b71759

000147f8 <mayfly_sched_after_mstr_free_offset_get>:
{
   147f8:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   147fa:	4c05      	ldr	r4, [pc, #20]	; (14810 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   147fc:	f504 7380 	add.w	r3, r4, #256	; 0x100
   14800:	4602      	mov	r2, r0
   14802:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   14806:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   1480a:	f7ff ffa1 	bl	14750 <sched_after_mstr_free_offset_get>
   1480e:	bd10      	pop	{r4, pc}
   14810:	20000f7c 	.word	0x20000f7c

00014814 <enc_rsp_send>:
{
   14814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14818:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1481a:	4818      	ldr	r0, [pc, #96]	; (1487c <enc_rsp_send+0x68>)
   1481c:	f7fc f85f 	bl	108de <mem_acquire>
	LL_ASSERT(node_tx);
   14820:	b330      	cbz	r0, 14870 <enc_rsp_send+0x5c>
   14822:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14824:	7903      	ldrb	r3, [r0, #4]
   14826:	f043 0303 	orr.w	r3, r3, #3
   1482a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1482c:	230d      	movs	r3, #13
   1482e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   14830:	2604      	movs	r6, #4
   14832:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   14834:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   14838:	4641      	mov	r1, r8
   1483a:	2008      	movs	r0, #8
   1483c:	f7fd faa2 	bl	11d84 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   14840:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   14844:	4639      	mov	r1, r7
   14846:	4630      	mov	r0, r6
   14848:	f7fd fa9c 	bl	11d84 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1484c:	2208      	movs	r2, #8
   1484e:	4641      	mov	r1, r8
   14850:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   14854:	f7eb fd34 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   14858:	4632      	mov	r2, r6
   1485a:	4639      	mov	r1, r7
   1485c:	f505 708b 	add.w	r0, r5, #278	; 0x116
   14860:	f7eb fd2e 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   14864:	4621      	mov	r1, r4
   14866:	4628      	mov	r0, r5
   14868:	f7fe facc 	bl	12e04 <ctrl_tx_enqueue>
   1486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   14870:	4040      	eors	r0, r0
   14872:	f380 8811 	msr	BASEPRI, r0
   14876:	f04f 0004 	mov.w	r0, #4
   1487a:	df02      	svc	2
   1487c:	200010d4 	.word	0x200010d4

00014880 <enc_req_reused_send>:
{
   14880:	b538      	push	{r3, r4, r5, lr}
   14882:	4605      	mov	r5, r0
   14884:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14886:	790b      	ldrb	r3, [r1, #4]
   14888:	f043 0303 	orr.w	r3, r3, #3
   1488c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1488e:	2317      	movs	r3, #23
   14890:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14892:	2303      	movs	r3, #3
   14894:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   14896:	2208      	movs	r2, #8
   14898:	f100 0179 	add.w	r1, r0, #121	; 0x79
   1489c:	18a0      	adds	r0, r4, r2
   1489e:	f7eb fd0f 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   148a2:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   148a6:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   148a8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   148ac:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   148ae:	f104 0112 	add.w	r1, r4, #18
   148b2:	2008      	movs	r0, #8
   148b4:	f7fd fa66 	bl	11d84 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   148b8:	f104 011a 	add.w	r1, r4, #26
   148bc:	2004      	movs	r0, #4
   148be:	f7fd fa61 	bl	11d84 <rand_isr_get>
   148c2:	bd38      	pop	{r3, r4, r5, pc}

000148c4 <isr_rx_conn_pkt_ctrl>:
{
   148c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   148c8:	b082      	sub	sp, #8
   148ca:	4604      	mov	r4, r0
   148cc:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   148ce:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   148d2:	4ba0      	ldr	r3, [pc, #640]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   148d4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   148d8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   148dc:	2b00      	cmp	r3, #0
   148de:	db11      	blt.n	14904 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   148e0:	7ac1      	ldrb	r1, [r0, #11]
   148e2:	2918      	cmp	r1, #24
   148e4:	d82c      	bhi.n	14940 <isr_rx_conn_pkt_ctrl+0x7c>
   148e6:	e8df f001 	tbb	[pc, r1]
   148ea:	2323      	.short	0x2323
   148ec:	2b2b232b 	.word	0x2b2b232b
   148f0:	2b232b2b 	.word	0x2b232b2b
   148f4:	2b2b2b23 	.word	0x2b2b2b23
   148f8:	2b2b2b2b 	.word	0x2b2b2b2b
   148fc:	2b2b2b2b 	.word	0x2b2b2b2b
   14900:	2b2b      	.short	0x2b2b
   14902:	23          	.byte	0x23
   14903:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   14904:	7ac1      	ldrb	r1, [r0, #11]
   14906:	1f0a      	subs	r2, r1, #4
   14908:	2a15      	cmp	r2, #21
   1490a:	d819      	bhi.n	14940 <isr_rx_conn_pkt_ctrl+0x7c>
   1490c:	e8df f002 	tbb	[pc, r2]
   14910:	18180b0b 	.word	0x18180b0b
   14914:	18181818 	.word	0x18181818
   14918:	180b1818 	.word	0x180b1818
   1491c:	1818180b 	.word	0x1818180b
   14920:	0b181818 	.word	0x0b181818
   14924:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   14926:	4628      	mov	r0, r5
   14928:	f7fe fcca 	bl	132c0 <unknown_rsp_send>
			return 0;
   1492c:	2400      	movs	r4, #0
   1492e:	e003      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   14930:	4628      	mov	r0, r5
   14932:	f7fe fcc5 	bl	132c0 <unknown_rsp_send>
			return 0;
   14936:	2400      	movs	r4, #0
}
   14938:	4620      	mov	r0, r4
   1493a:	b002      	add	sp, #8
   1493c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   14940:	7ae1      	ldrb	r1, [r4, #11]
   14942:	2919      	cmp	r1, #25
   14944:	f200 87e6 	bhi.w	15914 <isr_rx_conn_pkt_ctrl+0x1050>
   14948:	e8df f011 	tbh	[pc, r1, lsl #1]
   1494c:	002e001a 	.word	0x002e001a
   14950:	0042003d 	.word	0x0042003d
   14954:	00800065 	.word	0x00800065
   14958:	04c60099 	.word	0x04c60099
   1495c:	010600de 	.word	0x010600de
   14960:	014b012d 	.word	0x014b012d
   14964:	01ad0170 	.word	0x01ad0170
   14968:	01c400de 	.word	0x01c400de
   1496c:	0395032d 	.word	0x0395032d
   14970:	04c104bb 	.word	0x04c104bb
   14974:	05180518 	.word	0x05180518
   14978:	06de0606 	.word	0x06de0606
   1497c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   14980:	4631      	mov	r1, r6
   14982:	4628      	mov	r0, r5
   14984:	f7fe fb90 	bl	130a8 <conn_update>
   14988:	b930      	cbnz	r0, 14998 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   1498a:	4b72      	ldr	r3, [pc, #456]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   1498c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14990:	2400      	movs	r4, #0
   14992:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   14996:	e7cf      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   14998:	4b6e      	ldr	r3, [pc, #440]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   1499a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1499e:	2228      	movs	r2, #40	; 0x28
   149a0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   149a4:	2400      	movs	r4, #0
   149a6:	e7c7      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   149a8:	4631      	mov	r1, r6
   149aa:	4628      	mov	r0, r5
   149ac:	f7ff f99e 	bl	13cec <chan_map_update>
   149b0:	2800      	cmp	r0, #0
   149b2:	f000 87b5 	beq.w	15920 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   149b6:	4b67      	ldr	r3, [pc, #412]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   149b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   149bc:	2228      	movs	r2, #40	; 0x28
   149be:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   149c2:	2400      	movs	r4, #0
   149c4:	e7b8      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   149c6:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   149c8:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   149cc:	2400      	movs	r4, #0
		break;
   149ce:	e7b3      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   149d0:	2208      	movs	r2, #8
   149d2:	f104 0116 	add.w	r1, r4, #22
   149d6:	f105 0093 	add.w	r0, r5, #147	; 0x93
   149da:	f7eb fc71 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   149de:	4d5d      	ldr	r5, [pc, #372]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   149e0:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   149e4:	2204      	movs	r2, #4
   149e6:	f104 011e 	add.w	r1, r4, #30
   149ea:	f500 7089 	add.w	r0, r0, #274	; 0x112
   149ee:	f7eb fc67 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   149f2:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   149f6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   149fa:	f043 0304 	orr.w	r3, r3, #4
   149fe:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14a02:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14a06:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   14a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   14a0e:	2301      	movs	r3, #1
   14a10:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   14a12:	2400      	movs	r4, #0
		break;
   14a14:	e790      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   14a16:	2208      	movs	r2, #8
   14a18:	f104 010c 	add.w	r1, r4, #12
   14a1c:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   14a20:	f7eb fc4e 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   14a24:	4d4b      	ldr	r5, [pc, #300]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14a26:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   14a2a:	2204      	movs	r2, #4
   14a2c:	f104 0114 	add.w	r1, r4, #20
   14a30:	f500 708b 	add.w	r0, r0, #278	; 0x116
   14a34:	f7eb fc44 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   14a38:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   14a3c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14a40:	f043 0304 	orr.w	r3, r3, #4
   14a44:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   14a48:	2400      	movs	r4, #0
		break;
   14a4a:	e775      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   14a4c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14a50:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14a54:	429a      	cmp	r2, r3
   14a56:	d10c      	bne.n	14a72 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   14a58:	2303      	movs	r3, #3
   14a5a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   14a5e:	4b3d      	ldr	r3, [pc, #244]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14a60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14a64:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   14a68:	3b01      	subs	r3, #1
   14a6a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   14a6e:	2400      	movs	r4, #0
		break;
   14a70:	e762      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   14a72:	4040      	eors	r0, r0
   14a74:	f380 8811 	msr	BASEPRI, r0
   14a78:	f04f 0004 	mov.w	r0, #4
   14a7c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   14a7e:	4b35      	ldr	r3, [pc, #212]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14a80:	7bdb      	ldrb	r3, [r3, #15]
   14a82:	b2db      	uxtb	r3, r3
   14a84:	2b03      	cmp	r3, #3
   14a86:	d027      	beq.n	14ad8 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   14a88:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14a8c:	f36f 0382 	bfc	r3, #2, #1
   14a90:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   14a94:	4b2f      	ldr	r3, [pc, #188]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14a96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14a9e:	f36f 02c3 	bfc	r2, #3, #1
   14aa2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   14aa6:	4b2b      	ldr	r3, [pc, #172]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14aa8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14aac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14ab0:	f012 0f40 	tst.w	r2, #64	; 0x40
   14ab4:	d007      	beq.n	14ac6 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   14ab6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14aba:	f36f 1286 	bfc	r2, #6, #1
   14abe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14ac2:	2309      	movs	r3, #9
   14ac4:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   14ac6:	2301      	movs	r3, #1
   14ac8:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   14aca:	4b22      	ldr	r3, [pc, #136]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14acc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14ad0:	2400      	movs	r4, #0
   14ad2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   14ad6:	e72f      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   14ad8:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14adc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14ae0:	429a      	cmp	r2, r3
   14ae2:	d10b      	bne.n	14afc <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   14ae4:	2303      	movs	r3, #3
   14ae6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   14aea:	4b1a      	ldr	r3, [pc, #104]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14aec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14af0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   14af4:	3b01      	subs	r3, #1
   14af6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   14afa:	e7d4      	b.n	14aa6 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   14afc:	4040      	eors	r0, r0
   14afe:	f380 8811 	msr	BASEPRI, r0
   14b02:	f04f 0004 	mov.w	r0, #4
   14b06:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   14b08:	7b23      	ldrb	r3, [r4, #12]
   14b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   14b0e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   14b12:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   14b16:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   14b1a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   14b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   14b20:	7ba2      	ldrb	r2, [r4, #14]
   14b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   14b26:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   14b2a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   14b2e:	4013      	ands	r3, r2
   14b30:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   14b34:	4a07      	ldr	r2, [pc, #28]	; (14b54 <isr_rx_conn_pkt_ctrl+0x290>)
   14b36:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   14b3a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   14b3e:	f043 0320 	orr.w	r3, r3, #32
   14b42:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   14b46:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14b4a:	f7ff f8fd 	bl	13d48 <feature_rsp_send>
	u8_t nack = 0;
   14b4e:	2400      	movs	r4, #0
	break;
   14b50:	e6f2      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
   14b52:	bf00      	nop
   14b54:	20000f7c 	.word	0x20000f7c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   14b58:	7b23      	ldrb	r3, [r4, #12]
   14b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   14b5e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   14b62:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   14b66:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   14b6a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   14b6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   14b70:	7ba2      	ldrb	r2, [r4, #14]
   14b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   14b76:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   14b7a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   14b7e:	4013      	ands	r3, r2
   14b80:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   14b84:	4ad2      	ldr	r2, [pc, #840]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14b86:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   14b8a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   14b8e:	f043 0320 	orr.w	r3, r3, #32
   14b92:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   14b96:	2301      	movs	r3, #1
   14b98:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   14b9a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14b9e:	2400      	movs	r4, #0
   14ba0:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   14ba4:	e6c8      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   14ba6:	4628      	mov	r0, r5
   14ba8:	f7fe fae8 	bl	1317c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   14bac:	4bc8      	ldr	r3, [pc, #800]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14bae:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14bb2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14bb6:	f042 0204 	orr.w	r2, r2, #4
   14bba:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14bbe:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14bc2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14bca:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   14bce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14bd2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14bd6:	f36f 1204 	bfc	r2, #4, #1
   14bda:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   14bde:	2400      	movs	r4, #0
		break;
   14be0:	e6aa      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   14be2:	4bbb      	ldr	r3, [pc, #748]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14be4:	7bdb      	ldrb	r3, [r3, #15]
   14be6:	b2db      	uxtb	r3, r3
   14be8:	2b04      	cmp	r3, #4
   14bea:	d00a      	beq.n	14c02 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   14bec:	4bb8      	ldr	r3, [pc, #736]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14bee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14bf2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14bf6:	f36f 1245 	bfc	r2, #5, #1
   14bfa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   14bfe:	2400      	movs	r4, #0
		break;
   14c00:	e69a      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   14c02:	4628      	mov	r0, r5
   14c04:	f7fe faba 	bl	1317c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   14c08:	4ab1      	ldr	r2, [pc, #708]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14c0a:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   14c0e:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14c12:	f043 0304 	orr.w	r3, r3, #4
   14c16:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   14c1a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14c1e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14c22:	f36f 1204 	bfc	r2, #4, #1
   14c26:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   14c2a:	e7df      	b.n	14bec <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   14c2c:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   14c2e:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   14c32:	4ba7      	ldr	r3, [pc, #668]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14c34:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   14c38:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   14c3c:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   14c40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   14c44:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   14c48:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   14c4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c50:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   14c54:	f003 0303 	and.w	r3, r3, #3
   14c58:	2b01      	cmp	r3, #1
   14c5a:	d011      	beq.n	14c80 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   14c5c:	4a9c      	ldr	r2, [pc, #624]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14c5e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   14c62:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   14c66:	f043 0302 	orr.w	r3, r3, #2
   14c6a:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   14c6e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14c72:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   14c76:	f012 0f01 	tst.w	r2, #1
   14c7a:	d009      	beq.n	14c90 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   14c7c:	2400      	movs	r4, #0
   14c7e:	e65b      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   14c80:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   14c82:	4b93      	ldr	r3, [pc, #588]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14c84:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c88:	2200      	movs	r2, #0
   14c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   14c8e:	e7e5      	b.n	14c5c <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   14c90:	f042 0201 	orr.w	r2, r2, #1
   14c94:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   14c98:	4b8d      	ldr	r3, [pc, #564]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14c9a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14c9e:	f7ff f90b 	bl	13eb8 <version_ind_send>
	u8_t nack = 0;
   14ca2:	2400      	movs	r4, #0
   14ca4:	e648      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   14ca6:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14caa:	f36f 0382 	bfc	r3, #2, #1
   14cae:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14cb2:	4b87      	ldr	r3, [pc, #540]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14cb4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14cb8:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14cbc:	f36f 01c3 	bfc	r1, #3, #1
   14cc0:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14cc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14cc8:	2400      	movs	r4, #0
   14cca:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   14cce:	2301      	movs	r3, #1
   14cd0:	703b      	strb	r3, [r7, #0]
		break;
   14cd2:	e631      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   14cd4:	4a7e      	ldr	r2, [pc, #504]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14cd6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   14cda:	b142      	cbz	r2, 14cee <isr_rx_conn_pkt_ctrl+0x42a>
   14cdc:	4295      	cmp	r5, r2
   14cde:	d006      	beq.n	14cee <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   14ce0:	2220      	movs	r2, #32
   14ce2:	210f      	movs	r1, #15
   14ce4:	4628      	mov	r0, r5
   14ce6:	f7fe faa5 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   14cea:	2400      	movs	r4, #0
			break;
   14cec:	e624      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   14cee:	2b00      	cmp	r3, #0
   14cf0:	f2c0 80bc 	blt.w	14e6c <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   14cf4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   14cf8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   14cfc:	429a      	cmp	r2, r3
   14cfe:	d008      	beq.n	14d12 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   14d00:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   14d04:	f013 0307 	ands.w	r3, r3, #7
   14d08:	d016      	beq.n	14d38 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   14d0a:	2b04      	cmp	r3, #4
   14d0c:	d014      	beq.n	14d38 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   14d0e:	2b05      	cmp	r3, #5
   14d10:	d012      	beq.n	14d38 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   14d12:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   14d16:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14d1a:	429a      	cmp	r2, r3
   14d1c:	d105      	bne.n	14d2a <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   14d1e:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   14d22:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   14d26:	429a      	cmp	r2, r3
   14d28:	d00d      	beq.n	14d46 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   14d2a:	222a      	movs	r2, #42	; 0x2a
   14d2c:	210f      	movs	r1, #15
   14d2e:	4628      	mov	r0, r5
   14d30:	f7fe fa80 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   14d34:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14d36:	e5ff      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   14d38:	2223      	movs	r2, #35	; 0x23
   14d3a:	210f      	movs	r1, #15
   14d3c:	4628      	mov	r0, r5
   14d3e:	f7fe fa79 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   14d42:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14d44:	e5f8      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   14d46:	89a0      	ldrh	r0, [r4, #12]
   14d48:	b282      	uxth	r2, r0
   14d4a:	2a05      	cmp	r2, #5
   14d4c:	d970      	bls.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   14d4e:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   14d50:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14d54:	d86c      	bhi.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   14d56:	429a      	cmp	r2, r3
   14d58:	d86a      	bhi.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   14d5a:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   14d5c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14d60:	d266      	bcs.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   14d62:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   14d64:	2909      	cmp	r1, #9
   14d66:	d963      	bls.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   14d68:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   14d6c:	d860      	bhi.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   14d6e:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   14d72:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   14d76:	da5b      	bge.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   14d78:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   14d7a:	4293      	cmp	r3, r2
   14d7c:	d358      	bcc.n	14e30 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   14d7e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   14d82:	8a23      	ldrh	r3, [r4, #16]
   14d84:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   14d88:	8a62      	ldrh	r2, [r4, #18]
   14d8a:	b293      	uxth	r3, r2
   14d8c:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   14d90:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   14d92:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   14d96:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   14d9a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   14d9e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   14da2:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   14da6:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   14daa:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   14dae:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   14db2:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   14db6:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   14dba:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   14dbe:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   14dc2:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   14dc6:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   14dca:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   14dce:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   14dd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   14dd4:	4291      	cmp	r1, r2
   14dd6:	d10f      	bne.n	14df8 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14dd8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   14dda:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14dde:	fb02 f201 	mul.w	r2, r2, r1
   14de2:	f242 7110 	movw	r1, #10000	; 0x2710
   14de6:	fb01 2303 	mla	r3, r1, r3, r2
   14dea:	3b01      	subs	r3, #1
   14dec:	fb93 f3f2 	sdiv	r3, r3, r2
   14df0:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   14df2:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   14df4:	4293      	cmp	r3, r2
   14df6:	d02c      	beq.n	14e52 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   14df8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14dfc:	f013 0f08 	tst.w	r3, #8
   14e00:	d01d      	beq.n	14e3e <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   14e02:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   14e06:	2202      	movs	r2, #2
   14e08:	f362 0302 	bfi	r3, r2, #0, #3
   14e0c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   14e10:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   14e14:	3b01      	subs	r3, #1
   14e16:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   14e1a:	4b2d      	ldr	r3, [pc, #180]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14e1c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14e20:	2b00      	cmp	r3, #0
   14e22:	f040 8580 	bne.w	15926 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   14e26:	4b2a      	ldr	r3, [pc, #168]	; (14ed0 <isr_rx_conn_pkt_ctrl+0x60c>)
   14e28:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   14e2c:	2400      	movs	r4, #0
   14e2e:	e583      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   14e30:	221e      	movs	r2, #30
   14e32:	210f      	movs	r1, #15
   14e34:	4628      	mov	r0, r5
   14e36:	f7fe f9fd 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   14e3a:	2400      	movs	r4, #0
					break;
   14e3c:	e57c      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   14e3e:	2301      	movs	r3, #1
   14e40:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   14e42:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   14e46:	2203      	movs	r2, #3
   14e48:	f362 0302 	bfi	r3, r2, #0, #3
   14e4c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   14e50:	e7de      	b.n	14e10 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   14e52:	2300      	movs	r3, #0
   14e54:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   14e58:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   14e5c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   14e60:	2201      	movs	r2, #1
   14e62:	f362 0302 	bfi	r3, r2, #0, #3
   14e66:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   14e6a:	e7d1      	b.n	14e10 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   14e6c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   14e70:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   14e74:	429a      	cmp	r2, r3
   14e76:	d007      	beq.n	14e88 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   14e78:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   14e7c:	f013 0307 	ands.w	r3, r3, #7
   14e80:	d002      	beq.n	14e88 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   14e82:	2b04      	cmp	r3, #4
   14e84:	f040 8089 	bne.w	14f9a <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   14e88:	89a1      	ldrh	r1, [r4, #12]
   14e8a:	b28a      	uxth	r2, r1
   14e8c:	2a05      	cmp	r2, #5
   14e8e:	d917      	bls.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   14e90:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   14e92:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14e96:	d813      	bhi.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   14e98:	429a      	cmp	r2, r3
   14e9a:	d811      	bhi.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   14e9c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   14e9e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14ea2:	d20d      	bcs.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14ea4:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   14ea6:	2809      	cmp	r0, #9
   14ea8:	d90a      	bls.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14eaa:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   14eae:	d807      	bhi.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   14eb0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14eb4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   14eb8:	da02      	bge.n	14ec0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   14eba:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   14ebc:	4293      	cmp	r3, r2
   14ebe:	d209      	bcs.n	14ed4 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   14ec0:	221e      	movs	r2, #30
   14ec2:	210f      	movs	r1, #15
   14ec4:	4628      	mov	r0, r5
   14ec6:	f7fe f9b5 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   14eca:	2400      	movs	r4, #0
				break;
   14ecc:	e534      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
   14ece:	bf00      	nop
   14ed0:	20000f7c 	.word	0x20000f7c
			conn->llcp_conn_param.interval = cpr->interval_min;
   14ed4:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   14ed8:	8a23      	ldrh	r3, [r4, #16]
   14eda:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   14ede:	8a62      	ldrh	r2, [r4, #18]
   14ee0:	b293      	uxth	r3, r2
   14ee2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   14ee6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   14ee8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   14eec:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   14ef0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   14ef4:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   14ef8:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   14efc:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   14f00:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   14f04:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   14f08:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   14f0c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   14f10:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   14f14:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   14f18:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   14f1c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   14f20:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   14f24:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   14f28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   14f2a:	4291      	cmp	r1, r2
   14f2c:	d013      	beq.n	14f56 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   14f2e:	2301      	movs	r3, #1
   14f30:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   14f32:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   14f36:	2203      	movs	r2, #3
   14f38:	f362 0302 	bfi	r3, r2, #0, #3
   14f3c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   14f40:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   14f44:	3b01      	subs	r3, #1
   14f46:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   14f4a:	4bcb      	ldr	r3, [pc, #812]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14f4c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14f50:	b1f3      	cbz	r3, 14f90 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   14f52:	2400      	movs	r4, #0
   14f54:	e4f0      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   14f56:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   14f58:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14f5c:	fb02 f201 	mul.w	r2, r2, r1
   14f60:	f242 7110 	movw	r1, #10000	; 0x2710
   14f64:	fb01 2303 	mla	r3, r1, r3, r2
   14f68:	3b01      	subs	r3, #1
   14f6a:	fb93 f3f2 	sdiv	r3, r3, r2
   14f6e:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   14f70:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   14f72:	4293      	cmp	r3, r2
   14f74:	d1db      	bne.n	14f2e <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   14f76:	2300      	movs	r3, #0
   14f78:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   14f7c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   14f80:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   14f84:	2201      	movs	r2, #1
   14f86:	f362 0302 	bfi	r3, r2, #0, #3
   14f8a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   14f8e:	e7d7      	b.n	14f40 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   14f90:	4bb9      	ldr	r3, [pc, #740]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   14f92:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   14f96:	2400      	movs	r4, #0
   14f98:	e4ce      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   14f9a:	4040      	eors	r0, r0
   14f9c:	f380 8811 	msr	BASEPRI, r0
   14fa0:	f04f 0004 	mov.w	r0, #4
   14fa4:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	f2c0 84c0 	blt.w	1592c <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   14fac:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   14fb0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   14fb4:	429a      	cmp	r2, r3
   14fb6:	f000 84bc 	beq.w	15932 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   14fba:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   14fbe:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   14fc2:	2b04      	cmp	r3, #4
   14fc4:	d001      	beq.n	14fca <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   14fc6:	2400      	movs	r4, #0
   14fc8:	e4b6      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   14fca:	89a2      	ldrh	r2, [r4, #12]
   14fcc:	2a05      	cmp	r2, #5
   14fce:	d917      	bls.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   14fd0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   14fd2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   14fd6:	d813      	bhi.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   14fd8:	429a      	cmp	r2, r3
   14fda:	d811      	bhi.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   14fdc:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   14fde:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   14fe2:	d20d      	bcs.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14fe4:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   14fe6:	2909      	cmp	r1, #9
   14fe8:	d90a      	bls.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14fea:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   14fee:	d807      	bhi.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   14ff0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   14ff4:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   14ff8:	da02      	bge.n	15000 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   14ffa:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   14ffc:	4293      	cmp	r3, r2
   14ffe:	d206      	bcs.n	1500e <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   15000:	221e      	movs	r2, #30
   15002:	2110      	movs	r1, #16
   15004:	4628      	mov	r0, r5
   15006:	f7fe f915 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   1500a:	2400      	movs	r4, #0
				break;
   1500c:	e494      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   1500e:	2300      	movs	r3, #0
   15010:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   15014:	89a2      	ldrh	r2, [r4, #12]
   15016:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   1501a:	8a22      	ldrh	r2, [r4, #16]
   1501c:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   15020:	8a62      	ldrh	r2, [r4, #18]
   15022:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   15026:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   15028:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   1502c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   15030:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   15034:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   15038:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1503c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   15040:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   15044:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   15048:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1504c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   15050:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   15054:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   15058:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1505c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   15060:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15064:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   15068:	2101      	movs	r1, #1
   1506a:	f361 0202 	bfi	r2, r1, #0, #3
   1506e:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   15072:	461c      	mov	r4, r3
   15074:	e460      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   15076:	4b80      	ldr	r3, [pc, #512]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   15078:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1507c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   15080:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   15084:	4291      	cmp	r1, r2
   15086:	d112      	bne.n	150ae <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   15088:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   1508c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   15090:	4291      	cmp	r1, r2
   15092:	d14c      	bne.n	1512e <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   15094:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   15098:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1509c:	4291      	cmp	r1, r2
   1509e:	f000 80ef 	beq.w	15280 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   150a2:	7b21      	ldrb	r1, [r4, #12]
   150a4:	2914      	cmp	r1, #20
   150a6:	f000 80cb 	beq.w	15240 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   150aa:	2400      	movs	r4, #0
   150ac:	e444      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   150ae:	7b23      	ldrb	r3, [r4, #12]
   150b0:	2b16      	cmp	r3, #22
   150b2:	d001      	beq.n	150b8 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   150b4:	2400      	movs	r4, #0
   150b6:	e43f      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   150b8:	7b63      	ldrb	r3, [r4, #13]
   150ba:	2b23      	cmp	r3, #35	; 0x23
   150bc:	d017      	beq.n	150ee <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   150be:	4b6e      	ldr	r3, [pc, #440]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   150c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   150c4:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   150c8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   150cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   150d0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   150d4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   150d8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   150dc:	f361 0002 	bfi	r0, r1, #0, #3
   150e0:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   150e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   150e8:	2200      	movs	r2, #0
   150ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   150ee:	4b62      	ldr	r3, [pc, #392]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   150f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   150f4:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   150f8:	f013 0f02 	tst.w	r3, #2
   150fc:	f000 841c 	beq.w	15938 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15100:	230c      	movs	r3, #12
   15102:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   15104:	7b63      	ldrb	r3, [r4, #13]
   15106:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   15108:	4a5b      	ldr	r2, [pc, #364]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1510a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1510e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15112:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15116:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   15118:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1511c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   15120:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15124:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   15126:	2301      	movs	r3, #1
   15128:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1512a:	2400      	movs	r4, #0
   1512c:	e404      	b.n	14938 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   1512e:	7b23      	ldrb	r3, [r4, #12]
   15130:	2b0f      	cmp	r3, #15
   15132:	d002      	beq.n	1513a <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   15134:	2400      	movs	r4, #0
   15136:	f7ff bbff 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   1513a:	4b4f      	ldr	r3, [pc, #316]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1513c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   15140:	f993 201d 	ldrsb.w	r2, [r3, #29]
   15144:	2a00      	cmp	r2, #0
   15146:	db02      	blt.n	1514e <isr_rx_conn_pkt_ctrl+0x88a>
   15148:	7b62      	ldrb	r2, [r4, #13]
   1514a:	2a1a      	cmp	r2, #26
   1514c:	d037      	beq.n	151be <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   1514e:	7b62      	ldrb	r2, [r4, #13]
   15150:	2a23      	cmp	r2, #35	; 0x23
   15152:	d012      	beq.n	1517a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   15154:	4a48      	ldr	r2, [pc, #288]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   15156:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   1515a:	4293      	cmp	r3, r2
   1515c:	d166      	bne.n	1522c <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   1515e:	2200      	movs	r2, #0
   15160:	4945      	ldr	r1, [pc, #276]	; (15278 <isr_rx_conn_pkt_ctrl+0x9b4>)
   15162:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   15166:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   1516a:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   1516e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   15172:	f993 201d 	ldrsb.w	r2, [r3, #29]
   15176:	2a00      	cmp	r2, #0
   15178:	db5e      	blt.n	15238 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   1517a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1517e:	f012 0f08 	tst.w	r2, #8
   15182:	f000 83dc 	beq.w	1593e <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15186:	2208      	movs	r2, #8
   15188:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   1518a:	7b62      	ldrb	r2, [r4, #13]
   1518c:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   1518e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   15190:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   15192:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   15194:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   15196:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   15198:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   1519a:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   1519e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   151a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   151a6:	4a35      	ldr	r2, [pc, #212]	; (1527c <isr_rx_conn_pkt_ctrl+0x9b8>)
   151a8:	fb82 1203 	smull	r1, r2, r2, r3
   151ac:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   151ae:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   151b2:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   151b4:	2301      	movs	r3, #1
   151b6:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   151b8:	2400      	movs	r4, #0
   151ba:	f7ff bbbd 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   151be:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   151c2:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   151c6:	4282      	cmp	r2, r0
   151c8:	d12a      	bne.n	15220 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   151ca:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   151ce:	2105      	movs	r1, #5
   151d0:	f361 0202 	bfi	r2, r1, #0, #3
   151d4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   151d8:	2501      	movs	r5, #1
   151da:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   151de:	2400      	movs	r4, #0
   151e0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   151e4:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   151e8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   151ec:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   151f0:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   151f4:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   151f8:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   151fc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   15200:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   15204:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   15208:	406a      	eors	r2, r5
   1520a:	f362 0182 	bfi	r1, r2, #2, #1
   1520e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15212:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   15216:	3801      	subs	r0, #1
   15218:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   1521c:	f7ff bb8c 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   15220:	4040      	eors	r0, r0
   15222:	f380 8811 	msr	BASEPRI, r0
   15226:	f04f 0004 	mov.w	r0, #4
   1522a:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   1522c:	4040      	eors	r0, r0
   1522e:	f380 8811 	msr	BASEPRI, r0
   15232:	f04f 0004 	mov.w	r0, #4
   15236:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   15238:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   1523c:	671a      	str	r2, [r3, #112]	; 0x70
   1523e:	e79c      	b.n	1517a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   15240:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   15244:	2200      	movs	r2, #0
   15246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   1524a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   1524e:	f362 01c3 	bfi	r1, r2, #3, #1
   15252:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   15256:	2109      	movs	r1, #9
   15258:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   1525a:	2115      	movs	r1, #21
   1525c:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   1525e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   15260:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   15262:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   15264:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   15266:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   15268:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   1526a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1526c:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   1526e:	2301      	movs	r3, #1
   15270:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   15272:	4614      	mov	r4, r2
   15274:	f7ff bb60 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15278:	20000f7c 	.word	0x20000f7c
   1527c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   15280:	7b22      	ldrb	r2, [r4, #12]
   15282:	2a03      	cmp	r2, #3
   15284:	f040 835e 	bne.w	15944 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   15288:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1528c:	f36f 0282 	bfc	r2, #2, #1
   15290:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15294:	4bcb      	ldr	r3, [pc, #812]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15296:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1529a:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   1529e:	f36f 01c3 	bfc	r1, #3, #1
   152a2:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   152a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   152aa:	2300      	movs	r3, #0
   152ac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   152b0:	220d      	movs	r2, #13
   152b2:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   152b4:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   152b6:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   152b8:	2201      	movs	r2, #1
   152ba:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   152bc:	461c      	mov	r4, r3
   152be:	f7ff bb3b 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   152c2:	4628      	mov	r0, r5
   152c4:	f7fd ff76 	bl	131b4 <ping_resp_send>
	u8_t nack = 0;
   152c8:	2400      	movs	r4, #0
		break;
   152ca:	f7ff bb35 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   152ce:	2400      	movs	r4, #0
   152d0:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   152d4:	f7ff bb30 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   152d8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   152dc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   152e0:	4293      	cmp	r3, r2
   152e2:	d014      	beq.n	1530e <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   152e4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   152e8:	4bb6      	ldr	r3, [pc, #728]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   152ea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   152ee:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   152f2:	f36f 02c3 	bfc	r2, #3, #1
   152f6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   152fa:	2301      	movs	r3, #1
   152fc:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   152fe:	4bb1      	ldr	r3, [pc, #708]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15300:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15304:	2400      	movs	r4, #0
   15306:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1530a:	f7ff bb15 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   1530e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   15312:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   15316:	4293      	cmp	r3, r2
   15318:	d02a      	beq.n	15370 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   1531a:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   1531e:	49a9      	ldr	r1, [pc, #676]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15320:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   15324:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   15328:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   1532c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   15330:	f362 0002 	bfi	r0, r2, #0, #3
   15334:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   15338:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   1533c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   15340:	f013 0f02 	tst.w	r3, #2
   15344:	d0db      	beq.n	152fe <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   15346:	230c      	movs	r3, #12
   15348:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   1534a:	2300      	movs	r3, #0
   1534c:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   1534e:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   15352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   15356:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1535a:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   1535c:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   15360:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   15364:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15368:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   1536a:	2301      	movs	r3, #1
   1536c:	703b      	strb	r3, [r7, #0]
   1536e:	e7c6      	b.n	152fe <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   15370:	7b23      	ldrb	r3, [r4, #12]
   15372:	2b12      	cmp	r3, #18
   15374:	d0c3      	beq.n	152fe <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   15376:	2301      	movs	r3, #1
   15378:	703b      	strb	r3, [r7, #0]
				break;
   1537a:	e7c0      	b.n	152fe <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   1537c:	4b91      	ldr	r3, [pc, #580]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1537e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   15382:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   15384:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   15386:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   1538a:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   1538e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   15392:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   15396:	429a      	cmp	r2, r3
   15398:	d020      	beq.n	153dc <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1539a:	429a      	cmp	r2, r3
   1539c:	d007      	beq.n	153ae <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   1539e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   153a2:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   153a6:	2b01      	cmp	r3, #1
   153a8:	d960      	bls.n	1546c <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   153aa:	2b02      	cmp	r3, #2
   153ac:	d062      	beq.n	15474 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   153ae:	78f3      	ldrb	r3, [r6, #3]
   153b0:	2b15      	cmp	r3, #21
   153b2:	f040 80cb 	bne.w	1554c <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   153b6:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   153b8:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   153ba:	2b14      	cmp	r3, #20
   153bc:	f47f aabc 	bne.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   153c0:	2c00      	cmp	r4, #0
   153c2:	f47f aab9 	bne.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   153c6:	4b7f      	ldr	r3, [pc, #508]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   153c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   153cc:	f8cd 8000 	str.w	r8, [sp]
   153d0:	462b      	mov	r3, r5
   153d2:	464a      	mov	r2, r9
   153d4:	f7fd ff0a 	bl	131ec <length_resp_send>
		break;
   153d8:	f7ff baae 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   153dc:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   153de:	2c14      	cmp	r4, #20
   153e0:	d1db      	bne.n	1539a <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   153e2:	88b3      	ldrh	r3, [r6, #4]
   153e4:	2b1a      	cmp	r3, #26
   153e6:	d903      	bls.n	153f0 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   153e8:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   153ea:	429d      	cmp	r5, r3
   153ec:	bf28      	it	cs
   153ee:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   153f0:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   153f4:	f1ba 0f1a 	cmp.w	sl, #26
   153f8:	d942      	bls.n	15480 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   153fa:	f1ba 0f1b 	cmp.w	sl, #27
   153fe:	bf28      	it	cs
   15400:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   15404:	88f3      	ldrh	r3, [r6, #6]
   15406:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1540a:	d304      	bcc.n	15416 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   1540c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   15410:	4598      	cmp	r8, r3
   15412:	bf28      	it	cs
   15414:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   15416:	8973      	ldrh	r3, [r6, #10]
   15418:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1541c:	d305      	bcc.n	1542a <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   1541e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15422:	bf28      	it	cs
   15424:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   15428:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   1542a:	4551      	cmp	r1, sl
   1542c:	d066      	beq.n	154fc <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   1542e:	4b65      	ldr	r3, [pc, #404]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15430:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15434:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15438:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1543a:	429a      	cmp	r2, r3
   1543c:	d322      	bcc.n	15484 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   1543e:	4b61      	ldr	r3, [pc, #388]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15440:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15444:	1b14      	subs	r4, r2, r4
   15446:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   15448:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   1544a:	4b5e      	ldr	r3, [pc, #376]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1544c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15450:	f7fb fa79 	bl	10946 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   15454:	1823      	adds	r3, r4, r0
   15456:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   15458:	2bff      	cmp	r3, #255	; 0xff
   1545a:	d81d      	bhi.n	15498 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   1545c:	4a59      	ldr	r2, [pc, #356]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1545e:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   15462:	4293      	cmp	r3, r2
   15464:	d01e      	beq.n	154a4 <isr_rx_conn_pkt_ctrl+0xbe0>
   15466:	4651      	mov	r1, sl
				nack = 1;
   15468:	2401      	movs	r4, #1
   1546a:	e7a5      	b.n	153b8 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   1546c:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   1546e:	2a14      	cmp	r2, #20
   15470:	d19b      	bne.n	153aa <isr_rx_conn_pkt_ctrl+0xae6>
   15472:	e7b6      	b.n	153e2 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   15474:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   15476:	3b14      	subs	r3, #20
   15478:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   1547a:	2b01      	cmp	r3, #1
   1547c:	d897      	bhi.n	153ae <isr_rx_conn_pkt_ctrl+0xaea>
   1547e:	e7b0      	b.n	153e2 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   15480:	468a      	mov	sl, r1
   15482:	e7bf      	b.n	15404 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   15484:	4b4f      	ldr	r3, [pc, #316]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15486:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1548a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1548e:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   15490:	fa52 f484 	uxtab	r4, r2, r4
   15494:	b2e4      	uxtb	r4, r4
   15496:	e7d7      	b.n	15448 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   15498:	4040      	eors	r0, r0
   1549a:	f380 8811 	msr	BASEPRI, r0
   1549e:	f04f 0004 	mov.w	r0, #4
   154a2:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   154a4:	4b47      	ldr	r3, [pc, #284]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   154a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154aa:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   154ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154b0:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   154b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154b8:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   154bc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154c0:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   154c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154c8:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   154cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   154d0:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   154d4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   154d8:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   154dc:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   154de:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   154e2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   154e6:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   154ea:	f042 0203 	orr.w	r2, r2, #3
   154ee:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   154f2:	2203      	movs	r2, #3
   154f4:	741a      	strb	r2, [r3, #16]
   154f6:	4651      	mov	r1, sl
	u8_t nack = 0;
   154f8:	2400      	movs	r4, #0
   154fa:	e75d      	b.n	153b8 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   154fc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   15500:	f36f 03c3 	bfc	r3, #3, #1
   15504:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   15508:	4b2e      	ldr	r3, [pc, #184]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1550a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1550e:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   15510:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15514:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   15518:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1551c:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   15520:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   15524:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   15528:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   1552c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15530:	2400      	movs	r4, #0
   15532:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   15536:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   1553a:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   1553c:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   15540:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   15544:	2301      	movs	r3, #1
   15546:	703b      	strb	r3, [r7, #0]
   15548:	4651      	mov	r1, sl
   1554a:	e735      	b.n	153b8 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   1554c:	4040      	eors	r0, r0
   1554e:	f380 8811 	msr	BASEPRI, r0
   15552:	f04f 0004 	mov.w	r0, #4
   15556:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   15558:	4b1a      	ldr	r3, [pc, #104]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1555a:	7bdb      	ldrb	r3, [r3, #15]
   1555c:	b2db      	uxtb	r3, r3
   1555e:	2b04      	cmp	r3, #4
   15560:	d032      	beq.n	155c8 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   15562:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   15566:	2202      	movs	r2, #2
   15568:	f362 0301 	bfi	r3, r2, #0, #2
   1556c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   15570:	4b14      	ldr	r3, [pc, #80]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15572:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15576:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   1557a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   1557e:	428a      	cmp	r2, r1
   15580:	f000 8099 	beq.w	156b6 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   15584:	4a0f      	ldr	r2, [pc, #60]	; (155c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   15586:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1558a:	7b61      	ldrb	r1, [r4, #13]
   1558c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   15590:	f3c3 0582 	ubfx	r5, r3, #2, #3
   15594:	4029      	ands	r1, r5
   15596:	f361 0384 	bfi	r3, r1, #2, #3
   1559a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1559e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   155a2:	7b21      	ldrb	r1, [r4, #12]
   155a4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   155a8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   155ac:	f361 1347 	bfi	r3, r1, #5, #3
   155b0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   155b4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   155b8:	f7fd fe5c 	bl	13274 <phy_rsp_send>
	u8_t nack = 0;
   155bc:	2400      	movs	r4, #0
   155be:	f7ff b9bb 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   155c2:	bf00      	nop
   155c4:	20000f7c 	.word	0x20000f7c
			if ((_radio.conn_curr->llcp_phy.ack !=
   155c8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   155cc:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   155d0:	429a      	cmp	r2, r3
   155d2:	d007      	beq.n	155e4 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   155d4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   155d8:	f003 0303 	and.w	r3, r3, #3
   155dc:	3b01      	subs	r3, #1
   155de:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   155e0:	2b02      	cmp	r3, #2
   155e2:	d913      	bls.n	1560c <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   155e4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   155e8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   155ec:	429a      	cmp	r2, r3
   155ee:	d105      	bne.n	155fc <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   155f0:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   155f4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   155f8:	429a      	cmp	r2, r3
   155fa:	d00f      	beq.n	1561c <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   155fc:	222a      	movs	r2, #42	; 0x2a
   155fe:	2116      	movs	r1, #22
   15600:	4628      	mov	r0, r5
   15602:	f7fd fe17 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   15606:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   15608:	f7ff b996 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   1560c:	2223      	movs	r2, #35	; 0x23
   1560e:	2116      	movs	r1, #22
   15610:	4628      	mov	r0, r5
   15612:	f7fd fe0f 	bl	13234 <reject_ext_ind_send>
	u8_t nack = 0;
   15616:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   15618:	f7ff b98e 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   1561c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   15620:	f043 0303 	orr.w	r3, r3, #3
   15624:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   15628:	4bce      	ldr	r3, [pc, #824]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1562a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1562e:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   15632:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   15636:	428b      	cmp	r3, r1
   15638:	d01a      	beq.n	15670 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1563a:	49ca      	ldr	r1, [pc, #808]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1563c:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   15640:	7b62      	ldrb	r2, [r4, #13]
   15642:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   15646:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1564a:	402a      	ands	r2, r5
   1564c:	f362 0384 	bfi	r3, r2, #2, #3
   15650:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   15654:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   15658:	7b22      	ldrb	r2, [r4, #12]
   1565a:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   1565e:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   15662:	f362 1347 	bfi	r3, r2, #5, #3
   15666:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   1566a:	2400      	movs	r4, #0
   1566c:	f7ff b964 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   15670:	3b01      	subs	r3, #1
   15672:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   15676:	4bbb      	ldr	r3, [pc, #748]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   15678:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1567c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   15680:	f36f 0141 	bfc	r1, #1, #1
   15684:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   15688:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   1568c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   15690:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   15694:	f360 0184 	bfi	r1, r0, #2, #3
   15698:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   1569c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   156a0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   156a4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   156a8:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   156ac:	f362 1147 	bfi	r1, r2, #5, #3
   156b0:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   156b4:	e7c1      	b.n	1563a <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   156b6:	3a01      	subs	r2, #1
   156b8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   156bc:	4ba9      	ldr	r3, [pc, #676]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   156be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   156c2:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   156c6:	f36f 0141 	bfc	r1, #1, #1
   156ca:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   156ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   156d2:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   156d6:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   156da:	f360 0184 	bfi	r1, r0, #2, #3
   156de:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   156e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   156e6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   156ea:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   156ee:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   156f2:	f361 1047 	bfi	r0, r1, #5, #3
   156f6:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   156fa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   156fe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   15702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   15706:	e73d      	b.n	15584 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   15708:	4b96      	ldr	r3, [pc, #600]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1570a:	7bdb      	ldrb	r3, [r3, #15]
   1570c:	b2db      	uxtb	r3, r3
   1570e:	2b04      	cmp	r3, #4
   15710:	d002      	beq.n	15718 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   15712:	2400      	movs	r4, #0
   15714:	f7ff b910 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   15718:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   1571c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   15720:	429a      	cmp	r2, r3
   15722:	f000 8112 	beq.w	1594a <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   15726:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1572a:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   1572e:	2b02      	cmp	r3, #2
   15730:	d002      	beq.n	15738 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   15732:	2400      	movs	r4, #0
   15734:	f7ff b900 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15738:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1573c:	f043 0303 	orr.w	r3, r3, #3
   15740:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   15744:	4a87      	ldr	r2, [pc, #540]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   15746:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1574a:	7b61      	ldrb	r1, [r4, #13]
   1574c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   15750:	f3c3 0582 	ubfx	r5, r3, #2, #3
   15754:	4029      	ands	r1, r5
   15756:	f361 0384 	bfi	r3, r1, #2, #3
   1575a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1575e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   15762:	7b21      	ldrb	r1, [r4, #12]
   15764:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   15768:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1576c:	f361 1347 	bfi	r3, r1, #5, #3
   15770:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   15774:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   15778:	2400      	movs	r4, #0
   1577a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1577e:	f7ff b8db 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   15782:	4b78      	ldr	r3, [pc, #480]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   15784:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   15788:	7b23      	ldrb	r3, [r4, #12]
   1578a:	7b61      	ldrb	r1, [r4, #13]
   1578c:	430b      	orrs	r3, r1
   1578e:	f013 0f07 	tst.w	r3, #7
   15792:	d134      	bne.n	157fe <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15794:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   15798:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1579c:	428b      	cmp	r3, r1
   1579e:	f000 8086 	beq.w	158ae <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   157a2:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   157a6:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   157aa:	2b02      	cmp	r3, #2
   157ac:	d00c      	beq.n	157c8 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   157ae:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   157b0:	2b00      	cmp	r3, #0
   157b2:	f000 80cd 	beq.w	15950 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   157b6:	4b6b      	ldr	r3, [pc, #428]	; (15964 <isr_rx_conn_pkt_ctrl+0x10a0>)
   157b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   157bc:	2228      	movs	r2, #40	; 0x28
   157be:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   157c2:	2400      	movs	r4, #0
   157c4:	f7ff b8b8 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   157c8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   157cc:	2300      	movs	r3, #0
   157ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   157d2:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   157d6:	f013 0f02 	tst.w	r3, #2
   157da:	d06a      	beq.n	158b2 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   157dc:	230c      	movs	r3, #12
   157de:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   157e0:	2300      	movs	r3, #0
   157e2:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   157e4:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   157e8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   157ec:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   157ee:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   157f2:	f3c2 0202 	ubfx	r2, r2, #0, #3
   157f6:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   157f8:	2201      	movs	r2, #1
   157fa:	703a      	strb	r2, [r7, #0]
   157fc:	e7d8      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   157fe:	89e3      	ldrh	r3, [r4, #14]
   15800:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   15802:	1a5b      	subs	r3, r3, r1
   15804:	b29b      	uxth	r3, r3
   15806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1580a:	da54      	bge.n	158b6 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1580c:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   15810:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   15814:	428b      	cmp	r3, r1
   15816:	d134      	bne.n	15882 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   15818:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   1581c:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   15820:	4283      	cmp	r3, r0
   15822:	d005      	beq.n	15830 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   15824:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   15828:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1582c:	2b02      	cmp	r3, #2
   1582e:	d02e      	beq.n	1588e <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   15830:	7b60      	ldrb	r0, [r4, #13]
   15832:	f000 0007 	and.w	r0, r0, #7
   15836:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   1583a:	f360 0384 	bfi	r3, r0, #2, #3
   1583e:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   15842:	7b25      	ldrb	r5, [r4, #12]
   15844:	b2db      	uxtb	r3, r3
   15846:	f365 1347 	bfi	r3, r5, #5, #3
   1584a:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   1584e:	89e3      	ldrh	r3, [r4, #14]
   15850:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   15854:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   15858:	f36f 0300 	bfc	r3, #0, #1
   1585c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   15860:	2408      	movs	r4, #8
   15862:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   15866:	3901      	subs	r1, #1
   15868:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   1586c:	f003 031c 	and.w	r3, r3, #28
   15870:	b31b      	cbz	r3, 158ba <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   15872:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   15876:	f360 0302 	bfi	r3, r0, #0, #3
   1587a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   1587e:	2300      	movs	r3, #0
   15880:	e796      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   15882:	4040      	eors	r0, r0
   15884:	f380 8811 	msr	BASEPRI, r0
   15888:	f04f 0004 	mov.w	r0, #4
   1588c:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1588e:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   15892:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   15896:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1589a:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   1589e:	f363 0041 	bfi	r0, r3, #1, #1
   158a2:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   158a6:	2300      	movs	r3, #0
   158a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   158ac:	e7c0      	b.n	15830 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   158ae:	2300      	movs	r3, #0
   158b0:	e77e      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   158b2:	2300      	movs	r3, #0
   158b4:	e77c      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   158b6:	2301      	movs	r3, #1
   158b8:	e77a      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   158ba:	2300      	movs	r3, #0
   158bc:	e778      	b.n	157b0 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   158be:	2b00      	cmp	r3, #0
   158c0:	db49      	blt.n	15956 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   158c2:	7b21      	ldrb	r1, [r4, #12]
   158c4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   158c8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   158cc:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   158d0:	f002 0207 	and.w	r2, r2, #7
   158d4:	4313      	orrs	r3, r2
   158d6:	4219      	tst	r1, r3
   158d8:	d040      	beq.n	1595c <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   158da:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   158de:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   158e2:	429a      	cmp	r2, r3
   158e4:	d002      	beq.n	158ec <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   158e6:	2400      	movs	r4, #0
   158e8:	f7ff b826 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   158ec:	2205      	movs	r2, #5
   158ee:	491e      	ldr	r1, [pc, #120]	; (15968 <isr_rx_conn_pkt_ctrl+0x10a4>)
   158f0:	f105 0079 	add.w	r0, r5, #121	; 0x79
   158f4:	f7ea fce4 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   158f8:	2301      	movs	r3, #1
   158fa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   158fe:	2302      	movs	r3, #2
   15900:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   15904:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   15908:	3b01      	subs	r3, #1
   1590a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   1590e:	2400      	movs	r4, #0
   15910:	f7ff b812 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   15914:	4628      	mov	r0, r5
   15916:	f7fd fcd3 	bl	132c0 <unknown_rsp_send>
	u8_t nack = 0;
   1591a:	2400      	movs	r4, #0
		break;
   1591c:	f7ff b80c 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   15920:	2400      	movs	r4, #0
   15922:	f7ff b809 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15926:	2400      	movs	r4, #0
   15928:	f7ff b806 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   1592c:	2400      	movs	r4, #0
   1592e:	f7ff b803 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15932:	2400      	movs	r4, #0
   15934:	f7ff b800 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15938:	2400      	movs	r4, #0
   1593a:	f7fe bffd 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   1593e:	2400      	movs	r4, #0
   15940:	f7fe bffa 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15944:	2400      	movs	r4, #0
   15946:	f7fe bff7 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   1594a:	2400      	movs	r4, #0
   1594c:	f7fe bff4 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15950:	2400      	movs	r4, #0
   15952:	f7fe bff1 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15956:	2400      	movs	r4, #0
   15958:	f7fe bfee 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   1595c:	2400      	movs	r4, #0
   1595e:	f7fe bfeb 	b.w	14938 <isr_rx_conn_pkt_ctrl+0x74>
   15962:	bf00      	nop
   15964:	20000f7c 	.word	0x20000f7c
   15968:	20001092 	.word	0x20001092

0001596c <packet_rx_enqueue>:
{
   1596c:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1596e:	4a1a      	ldr	r2, [pc, #104]	; (159d8 <packet_rx_enqueue+0x6c>)
   15970:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   15974:	b2db      	uxtb	r3, r3
   15976:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   1597a:	4293      	cmp	r3, r2
   1597c:	d01d      	beq.n	159ba <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1597e:	4a16      	ldr	r2, [pc, #88]	; (159d8 <packet_rx_enqueue+0x6c>)
   15980:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   15984:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   15988:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   1598c:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   1598e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   15992:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   15994:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   15998:	3301      	adds	r3, #1
   1599a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   1599c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   159a0:	4293      	cmp	r3, r2
   159a2:	d010      	beq.n	159c6 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   159a4:	4a0c      	ldr	r2, [pc, #48]	; (159d8 <packet_rx_enqueue+0x6c>)
   159a6:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   159aa:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   159ae:	f7fa fffe 	bl	109ae <memq_enqueue>
	LL_ASSERT(link);
   159b2:	b150      	cbz	r0, 159ca <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   159b4:	f7fe f871 	bl	13a9a <packet_rx_callback>
   159b8:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   159ba:	4040      	eors	r0, r0
   159bc:	f380 8811 	msr	BASEPRI, r0
   159c0:	f04f 0004 	mov.w	r0, #4
   159c4:	df02      	svc	2
		last = 0;
   159c6:	2300      	movs	r3, #0
   159c8:	e7ec      	b.n	159a4 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   159ca:	4040      	eors	r0, r0
   159cc:	f380 8811 	msr	BASEPRI, r0
   159d0:	f04f 0004 	mov.w	r0, #4
   159d4:	df02      	svc	2
   159d6:	bf00      	nop
   159d8:	20000f7c 	.word	0x20000f7c

000159dc <mayfly_adv_stop>:
{
   159dc:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   159de:	4b1c      	ldr	r3, [pc, #112]	; (15a50 <mayfly_adv_stop+0x74>)
   159e0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   159e4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   159e8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   159ea:	429a      	cmp	r2, r3
   159ec:	d31d      	bcc.n	15a2a <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   159ee:	4b18      	ldr	r3, [pc, #96]	; (15a50 <mayfly_adv_stop+0x74>)
   159f0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   159f4:	1ad3      	subs	r3, r2, r3
   159f6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   159f8:	b30b      	cbz	r3, 15a3e <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   159fa:	4b15      	ldr	r3, [pc, #84]	; (15a50 <mayfly_adv_stop+0x74>)
   159fc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15a00:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15a04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   15a08:	b1dc      	cbz	r4, 15a42 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   15a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a0e:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   15a10:	2306      	movs	r3, #6
   15a12:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   15a14:	221d      	movs	r2, #29
   15a16:	2100      	movs	r1, #0
   15a18:	f104 000b 	add.w	r0, r4, #11
   15a1c:	f016 fb2e 	bl	2c07c <memset>
	radio_le_conn_cmplt->status = 0x3c;
   15a20:	233c      	movs	r3, #60	; 0x3c
   15a22:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   15a24:	f7ff ffa2 	bl	1596c <packet_rx_enqueue>
   15a28:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   15a2a:	4909      	ldr	r1, [pc, #36]	; (15a50 <mayfly_adv_stop+0x74>)
   15a2c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15a30:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15a34:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15a36:	fa52 f383 	uxtab	r3, r2, r3
   15a3a:	b2db      	uxtb	r3, r3
   15a3c:	e7dc      	b.n	159f8 <mayfly_adv_stop+0x1c>
		return 0;
   15a3e:	2400      	movs	r4, #0
   15a40:	e7e2      	b.n	15a08 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   15a42:	4040      	eors	r0, r0
   15a44:	f380 8811 	msr	BASEPRI, r0
   15a48:	f04f 0004 	mov.w	r0, #4
   15a4c:	df02      	svc	2
   15a4e:	bf00      	nop
   15a50:	20000f7c 	.word	0x20000f7c

00015a54 <terminate_ind_rx_enqueue>:
{
   15a54:	b510      	push	{r4, lr}
   15a56:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   15a58:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   15a5c:	b1bc      	cbz	r4, 15a8e <terminate_ind_rx_enqueue+0x3a>
   15a5e:	30b4      	adds	r0, #180	; 0xb4
   15a60:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   15a62:	8c19      	ldrh	r1, [r3, #32]
   15a64:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15a68:	2107      	movs	r1, #7
   15a6a:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   15a6e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   15a72:	4a0d      	ldr	r2, [pc, #52]	; (15aa8 <terminate_ind_rx_enqueue+0x54>)
   15a74:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   15a78:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   15a7c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   15a80:	4621      	mov	r1, r4
   15a82:	f7fa ff94 	bl	109ae <memq_enqueue>
	LL_ASSERT(link);
   15a86:	b140      	cbz	r0, 15a9a <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   15a88:	f7fe f807 	bl	13a9a <packet_rx_callback>
   15a8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   15a8e:	4040      	eors	r0, r0
   15a90:	f380 8811 	msr	BASEPRI, r0
   15a94:	f04f 0004 	mov.w	r0, #4
   15a98:	df02      	svc	2
	LL_ASSERT(link);
   15a9a:	4040      	eors	r0, r0
   15a9c:	f380 8811 	msr	BASEPRI, r0
   15aa0:	f04f 0004 	mov.w	r0, #4
   15aa4:	df02      	svc	2
   15aa6:	bf00      	nop
   15aa8:	20000f7c 	.word	0x20000f7c

00015aac <isr_rx_scan_report>:
{
   15aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   15ab0:	4b31      	ldr	r3, [pc, #196]	; (15b78 <isr_rx_scan_report+0xcc>)
   15ab2:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15ab6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15aba:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15abc:	429c      	cmp	r4, r3
   15abe:	d327      	bcc.n	15b10 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   15ac0:	4b2d      	ldr	r3, [pc, #180]	; (15b78 <isr_rx_scan_report+0xcc>)
   15ac2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15ac6:	1ae3      	subs	r3, r4, r3
   15ac8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15aca:	2b02      	cmp	r3, #2
   15acc:	d92a      	bls.n	15b24 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   15ace:	4b2a      	ldr	r3, [pc, #168]	; (15b78 <isr_rx_scan_report+0xcc>)
   15ad0:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   15ad4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15ad8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   15adc:	2c00      	cmp	r4, #0
   15ade:	d047      	beq.n	15b70 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   15ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15ae4:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   15ae6:	4b24      	ldr	r3, [pc, #144]	; (15b78 <isr_rx_scan_report+0xcc>)
   15ae8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   15aec:	f013 0f07 	tst.w	r3, #7
   15af0:	d020      	beq.n	15b34 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   15af2:	4b21      	ldr	r3, [pc, #132]	; (15b78 <isr_rx_scan_report+0xcc>)
   15af4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   15af8:	f003 0307 	and.w	r3, r3, #7
   15afc:	2b01      	cmp	r3, #1
   15afe:	d013      	beq.n	15b28 <isr_rx_scan_report+0x7c>
   15b00:	2b04      	cmp	r3, #4
   15b02:	d014      	beq.n	15b2e <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   15b04:	4040      	eors	r0, r0
   15b06:	f380 8811 	msr	BASEPRI, r0
   15b0a:	f04f 0004 	mov.w	r0, #4
   15b0e:	df02      	svc	2
		return (_radio.packet_rx_count -
   15b10:	4d19      	ldr	r5, [pc, #100]	; (15b78 <isr_rx_scan_report+0xcc>)
   15b12:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   15b16:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15b1a:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   15b1c:	fa54 f383 	uxtab	r3, r4, r3
   15b20:	b2db      	uxtb	r3, r3
   15b22:	e7d2      	b.n	15aca <isr_rx_scan_report+0x1e>
		return 0;
   15b24:	2400      	movs	r4, #0
   15b26:	e7d9      	b.n	15adc <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   15b28:	2303      	movs	r3, #3
   15b2a:	7123      	strb	r3, [r4, #4]
			break;
   15b2c:	e004      	b.n	15b38 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   15b2e:	2304      	movs	r3, #4
   15b30:	7123      	strb	r3, [r4, #4]
			break;
   15b32:	e001      	b.n	15b38 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   15b34:	2302      	movs	r3, #2
   15b36:	7123      	strb	r3, [r4, #4]
   15b38:	4615      	mov	r5, r2
   15b3a:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   15b3c:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   15b40:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   15b44:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   15b48:	b968      	cbnz	r0, 15b66 <isr_rx_scan_report+0xba>
   15b4a:	207f      	movs	r0, #127	; 0x7f
   15b4c:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   15b50:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   15b52:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   15b54:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   15b56:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   15b58:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   15b5a:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   15b5c:	f7ff ff06 	bl	1596c <packet_rx_enqueue>
	return 0;
   15b60:	2000      	movs	r0, #0
   15b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   15b66:	f7fb f947 	bl	10df8 <radio_rssi_get>
			     pdu_adv_rx->len] =
   15b6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   15b6e:	e7ed      	b.n	15b4c <isr_rx_scan_report+0xa0>
		return 1;
   15b70:	2001      	movs	r0, #1
}
   15b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b76:	bf00      	nop
   15b78:	20000f7c 	.word	0x20000f7c

00015b7c <isr_rx_conn>:
{
   15b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b80:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   15b82:	2300      	movs	r3, #0
   15b84:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   15b88:	4bc1      	ldr	r3, [pc, #772]	; (15e90 <isr_rx_conn+0x314>)
   15b8a:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   15b8e:	3201      	adds	r2, #1
   15b90:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   15b94:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15b98:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15b9c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15ba0:	2301      	movs	r3, #1
   15ba2:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   15ba4:	4607      	mov	r7, r0
   15ba6:	2800      	cmp	r0, #0
   15ba8:	d143      	bne.n	15c32 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   15baa:	4bb9      	ldr	r3, [pc, #740]	; (15e90 <isr_rx_conn+0x314>)
   15bac:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   15bb0:	b91b      	cbnz	r3, 15bba <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   15bb2:	2202      	movs	r2, #2
   15bb4:	4bb6      	ldr	r3, [pc, #728]	; (15e90 <isr_rx_conn+0x314>)
   15bb6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   15bba:	4bb5      	ldr	r3, [pc, #724]	; (15e90 <isr_rx_conn+0x314>)
   15bbc:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   15bc0:	3c01      	subs	r4, #1
   15bc2:	b2e4      	uxtb	r4, r4
   15bc4:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   15bc8:	fab4 f484 	clz	r4, r4
   15bcc:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   15bce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15bd2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   15bd6:	2a00      	cmp	r2, #0
   15bd8:	f040 8387 	bne.w	162ea <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   15bdc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   15bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   15be2:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   15be4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 15e90 <isr_rx_conn+0x314>
   15be8:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15bec:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   15bf0:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   15bf4:	a903      	add	r1, sp, #12
   15bf6:	f7fe f8ef 	bl	13dd8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15bfa:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   15bfe:	2b03      	cmp	r3, #3
   15c00:	f000 8376 	beq.w	162f0 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15c04:	2c00      	cmp	r4, #0
   15c06:	f040 8372 	bne.w	162ee <isr_rx_conn+0x772>
   15c0a:	b147      	cbz	r7, 15c1e <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   15c0c:	7a2b      	ldrb	r3, [r5, #8]
   15c0e:	f013 0f10 	tst.w	r3, #16
   15c12:	d104      	bne.n	15c1e <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   15c14:	9b03      	ldr	r3, [sp, #12]
   15c16:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   15c18:	2b00      	cmp	r3, #0
   15c1a:	f000 83aa 	beq.w	16372 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   15c1e:	4b9c      	ldr	r3, [pc, #624]	; (15e90 <isr_rx_conn+0x314>)
   15c20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15c24:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   15c28:	2b00      	cmp	r3, #0
   15c2a:	f000 83a4 	beq.w	16376 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   15c2e:	2303      	movs	r3, #3
   15c30:	e35e      	b.n	162f0 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   15c32:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   15c36:	7a2a      	ldrb	r2, [r5, #8]
   15c38:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15c3c:	4b94      	ldr	r3, [pc, #592]	; (15e90 <isr_rx_conn+0x314>)
   15c3e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15c42:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   15c46:	f003 0301 	and.w	r3, r3, #1
   15c4a:	429a      	cmp	r2, r3
   15c4c:	f000 81cd 	beq.w	15fea <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   15c50:	f083 0301 	eor.w	r3, r3, #1
   15c54:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   15c58:	f363 0200 	bfi	r2, r3, #0, #1
   15c5c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   15c60:	4b8b      	ldr	r3, [pc, #556]	; (15e90 <isr_rx_conn+0x314>)
   15c62:	7bdb      	ldrb	r3, [r3, #15]
   15c64:	b2db      	uxtb	r3, r3
   15c66:	2b03      	cmp	r3, #3
   15c68:	d02c      	beq.n	15cc4 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   15c6a:	4b89      	ldr	r3, [pc, #548]	; (15e90 <isr_rx_conn+0x314>)
   15c6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15c70:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15c74:	f012 0f80 	tst.w	r2, #128	; 0x80
   15c78:	f040 81ae 	bne.w	15fd8 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   15c7c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   15c80:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   15c84:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   15c88:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   15c8c:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   15c90:	2c00      	cmp	r4, #0
   15c92:	f000 8145 	beq.w	15f20 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   15c96:	f012 0f20 	tst.w	r2, #32
   15c9a:	d00a      	beq.n	15cb2 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   15c9c:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   15ca0:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   15ca4:	3001      	adds	r0, #1
   15ca6:	f141 0100 	adc.w	r1, r1, #0
   15caa:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   15cae:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15cb2:	f81c 300e 	ldrb.w	r3, [ip, lr]
   15cb6:	f003 0303 	and.w	r3, r3, #3
   15cba:	2b03      	cmp	r3, #3
   15cbc:	d00c      	beq.n	15cd8 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   15cbe:	f04f 0900 	mov.w	r9, #0
   15cc2:	e12e      	b.n	15f22 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   15cc4:	4b72      	ldr	r3, [pc, #456]	; (15e90 <isr_rx_conn+0x314>)
   15cc6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15cca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   15cce:	f043 0301 	orr.w	r3, r3, #1
   15cd2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   15cd6:	e7c8      	b.n	15c6a <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   15cd8:	f899 3003 	ldrb.w	r3, [r9, #3]
   15cdc:	3b02      	subs	r3, #2
   15cde:	2b16      	cmp	r3, #22
   15ce0:	f200 8118 	bhi.w	15f14 <isr_rx_conn+0x398>
   15ce4:	e8df f013 	tbh	[pc, r3, lsl #1]
   15ce8:	00330017 	.word	0x00330017
   15cec:	01160057 	.word	0x01160057
   15cf0:	01160116 	.word	0x01160116
   15cf4:	01160116 	.word	0x01160116
   15cf8:	007d0063 	.word	0x007d0063
   15cfc:	00970116 	.word	0x00970116
   15d00:	01160116 	.word	0x01160116
   15d04:	01160116 	.word	0x01160116
   15d08:	01160116 	.word	0x01160116
   15d0c:	011600af 	.word	0x011600af
   15d10:	00e000d6 	.word	0x00e000d6
   15d14:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   15d16:	2203      	movs	r2, #3
   15d18:	4b5d      	ldr	r3, [pc, #372]	; (15e90 <isr_rx_conn+0x314>)
   15d1a:	741a      	strb	r2, [r3, #16]
		radio_disable();
   15d1c:	f7fa fff4 	bl	10d08 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   15d20:	f7fb f80c 	bl	10d3c <radio_is_ready>
   15d24:	b958      	cbnz	r0, 15d3e <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   15d26:	4b5a      	ldr	r3, [pc, #360]	; (15e90 <isr_rx_conn+0x314>)
   15d28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   15d2c:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   15d30:	2913      	cmp	r1, #19
   15d32:	d00a      	beq.n	15d4a <isr_rx_conn+0x1ce>
   15d34:	f7ff fe8e 	bl	15a54 <terminate_ind_rx_enqueue>
		terminate = 1;
   15d38:	f04f 0901 	mov.w	r9, #1
   15d3c:	e0f1      	b.n	15f22 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   15d3e:	4040      	eors	r0, r0
   15d40:	f380 8811 	msr	BASEPRI, r0
   15d44:	f04f 0004 	mov.w	r0, #4
   15d48:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   15d4a:	2116      	movs	r1, #22
   15d4c:	e7f2      	b.n	15d34 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   15d4e:	f8df a140 	ldr.w	sl, [pc, #320]	; 15e90 <isr_rx_conn+0x314>
   15d52:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   15d56:	2208      	movs	r2, #8
   15d58:	f109 010e 	add.w	r1, r9, #14
   15d5c:	3093      	adds	r0, #147	; 0x93
   15d5e:	f7ea faaf 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   15d62:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   15d66:	2204      	movs	r2, #4
   15d68:	f109 0116 	add.w	r1, r9, #22
   15d6c:	f500 7089 	add.w	r0, r0, #274	; 0x112
   15d70:	f7ea faa6 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   15d74:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   15d78:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15d7c:	f043 0308 	orr.w	r3, r3, #8
   15d80:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   15d84:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   15d88:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   15d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   15d90:	f04f 0900 	mov.w	r9, #0
   15d94:	e0c5      	b.n	15f22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   15d96:	4b3e      	ldr	r3, [pc, #248]	; (15e90 <isr_rx_conn+0x314>)
   15d98:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15d9c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15da0:	f043 0308 	orr.w	r3, r3, #8
   15da4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   15da8:	f04f 0900 	mov.w	r9, #0
   15dac:	e0b9      	b.n	15f22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   15dae:	4b38      	ldr	r3, [pc, #224]	; (15e90 <isr_rx_conn+0x314>)
   15db0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15db4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   15db8:	f042 0208 	orr.w	r2, r2, #8
   15dbc:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   15dc0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15dc4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   15dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15dcc:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   15dd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   15dd4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   15dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   15ddc:	f04f 0900 	mov.w	r9, #0
   15de0:	e09f      	b.n	15f22 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   15de2:	4b2b      	ldr	r3, [pc, #172]	; (15e90 <isr_rx_conn+0x314>)
   15de4:	7bdb      	ldrb	r3, [r3, #15]
   15de6:	b2db      	uxtb	r3, r3
   15de8:	2b04      	cmp	r3, #4
   15dea:	d00b      	beq.n	15e04 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   15dec:	4b28      	ldr	r3, [pc, #160]	; (15e90 <isr_rx_conn+0x314>)
   15dee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15df2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15df6:	f043 0308 	orr.w	r3, r3, #8
   15dfa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   15dfe:	f04f 0900 	mov.w	r9, #0
   15e02:	e08e      	b.n	15f22 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   15e04:	4631      	mov	r1, r6
   15e06:	4b22      	ldr	r3, [pc, #136]	; (15e90 <isr_rx_conn+0x314>)
   15e08:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   15e0c:	f7fe fd38 	bl	14880 <enc_req_reused_send>
			*node_tx = NULL;
   15e10:	2600      	movs	r6, #0
	u8_t terminate = 0;
   15e12:	46b1      	mov	r9, r6
   15e14:	e085      	b.n	15f22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   15e16:	4b1e      	ldr	r3, [pc, #120]	; (15e90 <isr_rx_conn+0x314>)
   15e18:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15e1c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   15e20:	f36f 0182 	bfc	r1, #2, #1
   15e24:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   15e28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   15e2c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   15e30:	f36f 01c3 	bfc	r1, #3, #1
   15e34:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   15e38:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15e3c:	f04f 0900 	mov.w	r9, #0
   15e40:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   15e44:	e06d      	b.n	15f22 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   15e46:	4b12      	ldr	r3, [pc, #72]	; (15e90 <isr_rx_conn+0x314>)
   15e48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15e4c:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   15e50:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   15e54:	4291      	cmp	r1, r2
   15e56:	d060      	beq.n	15f1a <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   15e58:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   15e5c:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   15e60:	2a01      	cmp	r2, #1
   15e62:	d002      	beq.n	15e6a <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   15e64:	f04f 0900 	mov.w	r9, #0
   15e68:	e05b      	b.n	15f22 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   15e6a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15e6e:	f042 0208 	orr.w	r2, r2, #8
   15e72:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   15e76:	4b06      	ldr	r3, [pc, #24]	; (15e90 <isr_rx_conn+0x314>)
   15e78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15e7c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   15e80:	2102      	movs	r1, #2
   15e82:	f361 0201 	bfi	r2, r1, #0, #2
   15e86:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   15e8a:	f04f 0900 	mov.w	r9, #0
   15e8e:	e048      	b.n	15f22 <isr_rx_conn+0x3a6>
   15e90:	20000f7c 	.word	0x20000f7c
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15e94:	4bbe      	ldr	r3, [pc, #760]	; (16190 <isr_rx_conn+0x614>)
   15e96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15e9a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   15e9e:	2102      	movs	r1, #2
   15ea0:	f361 0201 	bfi	r2, r1, #0, #2
   15ea4:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   15ea8:	4bb9      	ldr	r3, [pc, #740]	; (16190 <isr_rx_conn+0x614>)
   15eaa:	7bdb      	ldrb	r3, [r3, #15]
   15eac:	b2db      	uxtb	r3, r3
   15eae:	2b03      	cmp	r3, #3
   15eb0:	d002      	beq.n	15eb8 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   15eb2:	f04f 0900 	mov.w	r9, #0
   15eb6:	e034      	b.n	15f22 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   15eb8:	4ab6      	ldr	r2, [pc, #728]	; (16194 <isr_rx_conn+0x618>)
   15eba:	e892 0003 	ldmia.w	r2, {r0, r1}
   15ebe:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   15ec2:	4bb3      	ldr	r3, [pc, #716]	; (16190 <isr_rx_conn+0x614>)
   15ec4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   15ec8:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   15ecc:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15ed0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   15ed4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   15ed8:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   15eda:	a904      	add	r1, sp, #16
   15edc:	440b      	add	r3, r1
   15ede:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   15ee2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   15ee6:	f361 0302 	bfi	r3, r1, #0, #3
   15eea:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   15eee:	f04f 0900 	mov.w	r9, #0
   15ef2:	e016      	b.n	15f22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   15ef4:	4ba6      	ldr	r3, [pc, #664]	; (16190 <isr_rx_conn+0x614>)
   15ef6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   15efa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   15efe:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   15f02:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   15f06:	f362 0102 	bfi	r1, r2, #0, #3
   15f0a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   15f0e:	f04f 0900 	mov.w	r9, #0
   15f12:	e006      	b.n	15f22 <isr_rx_conn+0x3a6>
   15f14:	f04f 0900 	mov.w	r9, #0
   15f18:	e003      	b.n	15f22 <isr_rx_conn+0x3a6>
   15f1a:	f04f 0900 	mov.w	r9, #0
   15f1e:	e000      	b.n	15f22 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   15f20:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   15f22:	4b9b      	ldr	r3, [pc, #620]	; (16190 <isr_rx_conn+0x614>)
   15f24:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15f28:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   15f2c:	4414      	add	r4, r2
   15f2e:	b2e4      	uxtb	r4, r4
   15f30:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   15f34:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   15f38:	429c      	cmp	r4, r3
   15f3a:	d01c      	beq.n	15f76 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   15f3c:	2600      	movs	r6, #0
	if (terminate) {
   15f3e:	f1b9 0f00 	cmp.w	r9, #0
   15f42:	d155      	bne.n	15ff0 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   15f44:	7a2a      	ldrb	r2, [r5, #8]
   15f46:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   15f4a:	4b91      	ldr	r3, [pc, #580]	; (16190 <isr_rx_conn+0x614>)
   15f4c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   15f50:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   15f54:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15f58:	429a      	cmp	r2, r3
   15f5a:	d053      	beq.n	16004 <isr_rx_conn+0x488>
	return 0;
   15f5c:	2300      	movs	r3, #0
		if (terminate) {
   15f5e:	2b00      	cmp	r3, #0
   15f60:	f040 81f5 	bne.w	1634e <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   15f64:	4b8a      	ldr	r3, [pc, #552]	; (16190 <isr_rx_conn+0x614>)
   15f66:	2400      	movs	r4, #0
   15f68:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   15f6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15f70:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   15f74:	e636      	b.n	15be4 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   15f76:	4b86      	ldr	r3, [pc, #536]	; (16190 <isr_rx_conn+0x614>)
   15f78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   15f7c:	2200      	movs	r2, #0
   15f7e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   15f82:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   15f86:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   15f8a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   15f8e:	428a      	cmp	r2, r1
   15f90:	d007      	beq.n	15fa2 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   15f92:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   15f96:	428a      	cmp	r2, r1
   15f98:	d01a      	beq.n	15fd0 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   15f9a:	6812      	ldr	r2, [r2, #0]
   15f9c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15fa0:	e7cd      	b.n	15f3e <isr_rx_conn+0x3c2>
		if (node_tx) {
   15fa2:	2e00      	cmp	r6, #0
   15fa4:	d0cb      	beq.n	15f3e <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   15fa6:	6812      	ldr	r2, [r2, #0]
   15fa8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   15fac:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   15fb0:	4281      	cmp	r1, r0
   15fb2:	d007      	beq.n	15fc4 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   15fb4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   15fb8:	4977      	ldr	r1, [pc, #476]	; (16198 <isr_rx_conn+0x61c>)
   15fba:	4630      	mov	r0, r6
   15fbc:	f7fa fcab 	bl	10916 <mem_release>
	return NULL;
   15fc0:	2600      	movs	r6, #0
   15fc2:	e7bc      	b.n	15f3e <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   15fc4:	2200      	movs	r2, #0
   15fc6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   15fca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   15fce:	e7f3      	b.n	15fb8 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   15fd0:	6809      	ldr	r1, [r1, #0]
   15fd2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   15fd6:	e7e0      	b.n	15f9a <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   15fd8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15fdc:	f36f 12c7 	bfc	r2, #7, #1
   15fe0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   15fe4:	2600      	movs	r6, #0
	u8_t terminate = 0;
   15fe6:	46b1      	mov	r9, r6
   15fe8:	e7a9      	b.n	15f3e <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   15fea:	2600      	movs	r6, #0
	u8_t terminate = 0;
   15fec:	46b1      	mov	r9, r6
   15fee:	e7a6      	b.n	15f3e <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   15ff0:	4c67      	ldr	r4, [pc, #412]	; (16190 <isr_rx_conn+0x614>)
   15ff2:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   15ff6:	f7fd fdd9 	bl	13bac <connection_release>
		_radio.conn_curr = NULL;
   15ffa:	2300      	movs	r3, #0
   15ffc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   16000:	464b      	mov	r3, r9
   16002:	e7ac      	b.n	15f5e <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   16004:	4a62      	ldr	r2, [pc, #392]	; (16190 <isr_rx_conn+0x614>)
   16006:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1600a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   1600e:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   16010:	4290      	cmp	r0, r2
   16012:	d347      	bcc.n	160a4 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   16014:	4b5e      	ldr	r3, [pc, #376]	; (16190 <isr_rx_conn+0x614>)
   16016:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1601a:	1ac3      	subs	r3, r0, r3
   1601c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1601e:	2b02      	cmp	r3, #2
   16020:	d94a      	bls.n	160b8 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   16022:	4b5b      	ldr	r3, [pc, #364]	; (16190 <isr_rx_conn+0x614>)
   16024:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16028:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1602c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   16030:	2b00      	cmp	r3, #0
   16032:	f000 814e 	beq.w	162d2 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   16036:	4b56      	ldr	r3, [pc, #344]	; (16190 <isr_rx_conn+0x614>)
   16038:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   1603c:	2b00      	cmp	r3, #0
   1603e:	d045      	beq.n	160cc <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   16040:	4b53      	ldr	r3, [pc, #332]	; (16190 <isr_rx_conn+0x614>)
   16042:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   16046:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   1604a:	429a      	cmp	r2, r3
   1604c:	d036      	beq.n	160bc <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1604e:	4b50      	ldr	r3, [pc, #320]	; (16190 <isr_rx_conn+0x614>)
   16050:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   16054:	429a      	cmp	r2, r3
   16056:	f000 813e 	beq.w	162d6 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   1605a:	4a4d      	ldr	r2, [pc, #308]	; (16190 <isr_rx_conn+0x614>)
   1605c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16060:	b2db      	uxtb	r3, r3
   16062:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   16066:	4293      	cmp	r3, r2
   16068:	f000 8137 	beq.w	162da <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   1606c:	4b48      	ldr	r3, [pc, #288]	; (16190 <isr_rx_conn+0x614>)
   1606e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   16072:	b92b      	cbnz	r3, 16080 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   16074:	4b46      	ldr	r3, [pc, #280]	; (16190 <isr_rx_conn+0x614>)
   16076:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   1607a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   1607c:	429a      	cmp	r2, r3
   1607e:	d025      	beq.n	160cc <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   16080:	4b43      	ldr	r3, [pc, #268]	; (16190 <isr_rx_conn+0x614>)
   16082:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   16086:	2b00      	cmp	r3, #0
   16088:	f000 8129 	beq.w	162de <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1608c:	4b40      	ldr	r3, [pc, #256]	; (16190 <isr_rx_conn+0x614>)
   1608e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   16092:	32b7      	adds	r2, #183	; 0xb7
   16094:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   16098:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   1609a:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   1609c:	429a      	cmp	r2, r3
   1609e:	d015      	beq.n	160cc <isr_rx_conn+0x550>
	return 0;
   160a0:	2300      	movs	r3, #0
   160a2:	e75c      	b.n	15f5e <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   160a4:	4a3a      	ldr	r2, [pc, #232]	; (16190 <isr_rx_conn+0x614>)
   160a6:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   160aa:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   160ae:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   160b0:	fa50 f383 	uxtab	r3, r0, r3
   160b4:	b2db      	uxtb	r3, r3
   160b6:	e7b2      	b.n	1601e <isr_rx_conn+0x4a2>
		return 0;
   160b8:	2300      	movs	r3, #0
   160ba:	e7b9      	b.n	16030 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   160bc:	4834      	ldr	r0, [pc, #208]	; (16190 <isr_rx_conn+0x614>)
   160be:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   160c2:	b2db      	uxtb	r3, r3
   160c4:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   160c8:	4283      	cmp	r3, r0
   160ca:	d1c0      	bne.n	1604e <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   160cc:	7a68      	ldrb	r0, [r5, #9]
   160ce:	2800      	cmp	r0, #0
   160d0:	f000 80b8 	beq.w	16244 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   160d4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   160d8:	f013 0f10 	tst.w	r3, #16
   160dc:	d133      	bne.n	16146 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   160de:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   160e0:	4b2b      	ldr	r3, [pc, #172]	; (16190 <isr_rx_conn+0x614>)
   160e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   160e6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   160ea:	f013 0f10 	tst.w	r3, #16
   160ee:	d135      	bne.n	1615c <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   160f0:	4b27      	ldr	r3, [pc, #156]	; (16190 <isr_rx_conn+0x614>)
   160f2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   160f6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   160fa:	f012 0f04 	tst.w	r2, #4
   160fe:	f000 8082 	beq.w	16206 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   16102:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   16106:	7a2a      	ldrb	r2, [r5, #8]
   16108:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1610c:	2a03      	cmp	r2, #3
   1610e:	d02a      	beq.n	16166 <isr_rx_conn+0x5ea>
   16110:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   16112:	2a00      	cmp	r2, #0
   16114:	d077      	beq.n	16206 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   16116:	2203      	movs	r2, #3
   16118:	4b1d      	ldr	r3, [pc, #116]	; (16190 <isr_rx_conn+0x614>)
   1611a:	741a      	strb	r2, [r3, #16]
				radio_disable();
   1611c:	f7fa fdf4 	bl	10d08 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   16120:	f7fa fe0c 	bl	10d3c <radio_is_ready>
   16124:	2800      	cmp	r0, #0
   16126:	d168      	bne.n	161fa <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   16128:	4c19      	ldr	r4, [pc, #100]	; (16190 <isr_rx_conn+0x614>)
   1612a:	213d      	movs	r1, #61	; 0x3d
   1612c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   16130:	f7ff fc90 	bl	15a54 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   16134:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   16138:	f7fd fd38 	bl	13bac <connection_release>
				_radio.conn_curr = NULL;
   1613c:	2300      	movs	r3, #0
   1613e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   16142:	2301      	movs	r3, #1
   16144:	e70b      	b.n	15f5e <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   16146:	f7fb f821 	bl	1118c <radio_ccm_is_done>
				LL_ASSERT(done);
   1614a:	b108      	cbz	r0, 16150 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   1614c:	2401      	movs	r4, #1
   1614e:	e7c7      	b.n	160e0 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   16150:	4040      	eors	r0, r0
   16152:	f380 8811 	msr	BASEPRI, r0
   16156:	f04f 0004 	mov.w	r0, #4
   1615a:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   1615c:	f7fb f836 	bl	111cc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   16160:	2800      	cmp	r0, #0
   16162:	d0d8      	beq.n	16116 <isr_rx_conn+0x59a>
   16164:	e7c4      	b.n	160f0 <isr_rx_conn+0x574>
   16166:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1616a:	2a00      	cmp	r2, #0
   1616c:	db1d      	blt.n	161aa <isr_rx_conn+0x62e>
		((!conn->refresh &&
   1616e:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   16172:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   16176:	d111      	bne.n	1619c <isr_rx_conn+0x620>
		((!conn->refresh &&
   16178:	2902      	cmp	r1, #2
   1617a:	d00f      	beq.n	1619c <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1617c:	2905      	cmp	r1, #5
   1617e:	d014      	beq.n	161aa <isr_rx_conn+0x62e>
   16180:	2906      	cmp	r1, #6
   16182:	d012      	beq.n	161aa <isr_rx_conn+0x62e>
   16184:	290d      	cmp	r1, #13
   16186:	d010      	beq.n	161aa <isr_rx_conn+0x62e>
   16188:	2911      	cmp	r1, #17
   1618a:	d00e      	beq.n	161aa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1618c:	2201      	movs	r2, #1
   1618e:	e7c0      	b.n	16112 <isr_rx_conn+0x596>
   16190:	20000f7c 	.word	0x20000f7c
   16194:	0002feb8 	.word	0x0002feb8
   16198:	200010d4 	.word	0x200010d4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1619c:	b128      	cbz	r0, 161aa <isr_rx_conn+0x62e>
		 (conn->refresh &&
   1619e:	2902      	cmp	r1, #2
   161a0:	d003      	beq.n	161aa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   161a2:	290b      	cmp	r1, #11
   161a4:	d001      	beq.n	161aa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   161a6:	2904      	cmp	r1, #4
   161a8:	d1e8      	bne.n	1617c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   161aa:	2a00      	cmp	r2, #0
   161ac:	db01      	blt.n	161b2 <isr_rx_conn+0x636>
   161ae:	2200      	movs	r2, #0
   161b0:	e7af      	b.n	16112 <isr_rx_conn+0x596>
		((!conn->refresh &&
   161b2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   161b6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   161ba:	d109      	bne.n	161d0 <isr_rx_conn+0x654>
		((!conn->refresh &&
   161bc:	2902      	cmp	r1, #2
   161be:	d007      	beq.n	161d0 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   161c0:	2906      	cmp	r1, #6
   161c2:	d014      	beq.n	161ee <isr_rx_conn+0x672>
   161c4:	290d      	cmp	r1, #13
   161c6:	d014      	beq.n	161f2 <isr_rx_conn+0x676>
   161c8:	2911      	cmp	r1, #17
   161ca:	d114      	bne.n	161f6 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   161cc:	2200      	movs	r2, #0
   161ce:	e7a0      	b.n	16112 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   161d0:	b13a      	cbz	r2, 161e2 <isr_rx_conn+0x666>
		 (conn->refresh &&
   161d2:	2902      	cmp	r1, #2
   161d4:	d007      	beq.n	161e6 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   161d6:	290b      	cmp	r1, #11
   161d8:	d007      	beq.n	161ea <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   161da:	2903      	cmp	r1, #3
   161dc:	d1f0      	bne.n	161c0 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   161de:	2200      	movs	r2, #0
   161e0:	e797      	b.n	16112 <isr_rx_conn+0x596>
   161e2:	2200      	movs	r2, #0
   161e4:	e795      	b.n	16112 <isr_rx_conn+0x596>
   161e6:	2200      	movs	r2, #0
   161e8:	e793      	b.n	16112 <isr_rx_conn+0x596>
   161ea:	2200      	movs	r2, #0
   161ec:	e791      	b.n	16112 <isr_rx_conn+0x596>
   161ee:	2200      	movs	r2, #0
   161f0:	e78f      	b.n	16112 <isr_rx_conn+0x596>
   161f2:	2200      	movs	r2, #0
   161f4:	e78d      	b.n	16112 <isr_rx_conn+0x596>
   161f6:	2201      	movs	r2, #1
   161f8:	e78b      	b.n	16112 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   161fa:	4040      	eors	r0, r0
   161fc:	f380 8811 	msr	BASEPRI, r0
   16200:	f04f 0004 	mov.w	r0, #4
   16204:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   16206:	2200      	movs	r2, #0
   16208:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   1620c:	4b70      	ldr	r3, [pc, #448]	; (163d0 <isr_rx_conn+0x854>)
   1620e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   16212:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   16216:	7a2b      	ldrb	r3, [r5, #8]
   16218:	f013 0303 	ands.w	r3, r3, #3
   1621c:	d00c      	beq.n	16238 <isr_rx_conn+0x6bc>
   1621e:	2b02      	cmp	r3, #2
   16220:	d905      	bls.n	1622e <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   16222:	f10d 010b 	add.w	r1, sp, #11
   16226:	4628      	mov	r0, r5
   16228:	f7fe fb4c 	bl	148c4 <isr_rx_conn_pkt_ctrl>
   1622c:	e030      	b.n	16290 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   1622e:	2301      	movs	r3, #1
   16230:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   16234:	4648      	mov	r0, r9
   16236:	e02b      	b.n	16290 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   16238:	4040      	eors	r0, r0
   1623a:	f380 8811 	msr	BASEPRI, r0
   1623e:	f04f 0004 	mov.w	r0, #4
   16242:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   16244:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   16248:	f013 0f14 	tst.w	r3, #20
   1624c:	d01f      	beq.n	1628e <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   1624e:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   16252:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   16254:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   16256:	42a2      	cmp	r2, r4
   16258:	dd04      	ble.n	16264 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   1625a:	1ad3      	subs	r3, r2, r3
   1625c:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   1625e:	3b06      	subs	r3, #6
   16260:	b29b      	uxth	r3, r3
   16262:	e000      	b.n	16266 <isr_rx_conn+0x6ea>
   16264:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   16266:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   1626a:	429c      	cmp	r4, r3
   1626c:	d004      	beq.n	16278 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   1626e:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   16272:	2300      	movs	r3, #0
   16274:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   16278:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   1627c:	bb3b      	cbnz	r3, 162ce <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   1627e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   16282:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   16286:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   1628a:	4604      	mov	r4, r0
   1628c:	e000      	b.n	16290 <isr_rx_conn+0x714>
   1628e:	4604      	mov	r4, r0
		if (!nack) {
   16290:	bb38      	cbnz	r0, 162e2 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   16292:	4b4f      	ldr	r3, [pc, #316]	; (163d0 <isr_rx_conn+0x854>)
   16294:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   16298:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1629c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   162a0:	f082 0201 	eor.w	r2, r2, #1
   162a4:	f362 0341 	bfi	r3, r2, #1, #1
   162a8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   162ac:	b1dc      	cbz	r4, 162e6 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   162ae:	4b48      	ldr	r3, [pc, #288]	; (163d0 <isr_rx_conn+0x854>)
   162b0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   162b4:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   162b8:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   162bc:	3201      	adds	r2, #1
   162be:	f143 0300 	adc.w	r3, r3, #0
   162c2:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   162c6:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   162ca:	2300      	movs	r3, #0
   162cc:	e647      	b.n	15f5e <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   162ce:	4604      	mov	r4, r0
   162d0:	e7de      	b.n	16290 <isr_rx_conn+0x714>
	return 0;
   162d2:	2300      	movs	r3, #0
   162d4:	e643      	b.n	15f5e <isr_rx_conn+0x3e2>
   162d6:	2300      	movs	r3, #0
   162d8:	e641      	b.n	15f5e <isr_rx_conn+0x3e2>
   162da:	2300      	movs	r3, #0
   162dc:	e63f      	b.n	15f5e <isr_rx_conn+0x3e2>
   162de:	2300      	movs	r3, #0
   162e0:	e63d      	b.n	15f5e <isr_rx_conn+0x3e2>
   162e2:	2300      	movs	r3, #0
   162e4:	e63b      	b.n	15f5e <isr_rx_conn+0x3e2>
   162e6:	2300      	movs	r3, #0
   162e8:	e639      	b.n	15f5e <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   162ea:	2600      	movs	r6, #0
   162ec:	e47a      	b.n	15be4 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   162ee:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   162f0:	4a37      	ldr	r2, [pc, #220]	; (163d0 <isr_rx_conn+0x854>)
   162f2:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   162f4:	2b03      	cmp	r3, #3
   162f6:	d040      	beq.n	1637a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   162f8:	2096      	movs	r0, #150	; 0x96
   162fa:	f7fa fe0d 	bl	10f18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   162fe:	4b34      	ldr	r3, [pc, #208]	; (163d0 <isr_rx_conn+0x854>)
   16300:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   16304:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   16308:	f000 0007 	and.w	r0, r0, #7
   1630c:	f7fa fd52 	bl	10db4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   16310:	f7fa feba 	bl	11088 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   16314:	9a03      	ldr	r2, [sp, #12]
   16316:	4b2e      	ldr	r3, [pc, #184]	; (163d0 <isr_rx_conn+0x854>)
   16318:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1631c:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   16320:	7811      	ldrb	r1, [r2, #0]
   16322:	f360 01c3 	bfi	r1, r0, #3, #1
   16326:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   16328:	9903      	ldr	r1, [sp, #12]
   1632a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1632e:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   16332:	f3c2 0240 	ubfx	r2, r2, #1, #1
   16336:	7808      	ldrb	r0, [r1, #0]
   16338:	f362 0082 	bfi	r0, r2, #2, #1
   1633c:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   1633e:	9903      	ldr	r1, [sp, #12]
   16340:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   16344:	f7fd fdde 	bl	13f04 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   16348:	f7fa fcf8 	bl	10d3c <radio_is_ready>
   1634c:	bb38      	cbnz	r0, 1639e <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   1634e:	f7fa fe8f 	bl	11070 <radio_tmr_aa_restore>
   16352:	b350      	cbz	r0, 163aa <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   16354:	4b1e      	ldr	r3, [pc, #120]	; (163d0 <isr_rx_conn+0x854>)
   16356:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1635a:	b13b      	cbz	r3, 1636c <isr_rx_conn+0x7f0>
	if (tx_release) {
   1635c:	b11e      	cbz	r6, 16366 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   1635e:	4631      	mov	r1, r6
   16360:	8c18      	ldrh	r0, [r3, #32]
   16362:	f7fd fb9f 	bl	13aa4 <pdu_node_tx_release>
	if (rx_enqueue) {
   16366:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1636a:	bb1b      	cbnz	r3, 163b4 <isr_rx_conn+0x838>
}
   1636c:	b004      	add	sp, #16
   1636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   16372:	2303      	movs	r3, #3
   16374:	e7bc      	b.n	162f0 <isr_rx_conn+0x774>
   16376:	2302      	movs	r3, #2
   16378:	e7ba      	b.n	162f0 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   1637a:	7bd3      	ldrb	r3, [r2, #15]
   1637c:	b2db      	uxtb	r3, r3
   1637e:	2b04      	cmp	r3, #4
   16380:	d002      	beq.n	16388 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   16382:	f7fa fd27 	bl	10dd4 <radio_switch_complete_and_disable>
   16386:	e7c5      	b.n	16314 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   16388:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1638c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   16390:	f368 12c7 	bfi	r2, r8, #7, #1
   16394:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   16398:	f7fa fcb6 	bl	10d08 <radio_disable>
			goto isr_rx_conn_exit;
   1639c:	e7d7      	b.n	1634e <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   1639e:	4040      	eors	r0, r0
   163a0:	f380 8811 	msr	BASEPRI, r0
   163a4:	f04f 0004 	mov.w	r0, #4
   163a8:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   163aa:	f7fa fe55 	bl	11058 <radio_tmr_aa_get>
   163ae:	f7fa fe59 	bl	11064 <radio_tmr_aa_save>
   163b2:	e7cf      	b.n	16354 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   163b4:	4c06      	ldr	r4, [pc, #24]	; (163d0 <isr_rx_conn+0x854>)
   163b6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   163ba:	8c18      	ldrh	r0, [r3, #32]
   163bc:	f7fc fdec 	bl	12f98 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   163c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   163c4:	8c1b      	ldrh	r3, [r3, #32]
   163c6:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   163c8:	f7ff fad0 	bl	1596c <packet_rx_enqueue>
	return;
   163cc:	e7ce      	b.n	1636c <isr_rx_conn+0x7f0>
   163ce:	bf00      	nop
   163d0:	20000f7c 	.word	0x20000f7c

000163d4 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   163d4:	6803      	ldr	r3, [r0, #0]
   163d6:	2b00      	cmp	r3, #0
   163d8:	db00      	blt.n	163dc <prepare_normal_set+0x8>
   163da:	4770      	bx	lr
{
   163dc:	b530      	push	{r4, r5, lr}
   163de:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   163e0:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   163e2:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   163e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   163e8:	42a5      	cmp	r5, r4
   163ea:	bf2c      	ite	cs
   163ec:	1b5b      	subcs	r3, r3, r5
   163ee:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   163f0:	b29b      	uxth	r3, r3
		ticker_status =
   163f2:	9006      	str	r0, [sp, #24]
   163f4:	480a      	ldr	r0, [pc, #40]	; (16420 <prepare_normal_set+0x4c>)
   163f6:	9005      	str	r0, [sp, #20]
   163f8:	2000      	movs	r0, #0
   163fa:	9004      	str	r0, [sp, #16]
   163fc:	9003      	str	r0, [sp, #12]
   163fe:	9002      	str	r0, [sp, #8]
   16400:	9301      	str	r3, [sp, #4]
   16402:	9300      	str	r3, [sp, #0]
   16404:	4603      	mov	r3, r0
   16406:	f7fb ff89 	bl	1231c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1640a:	b108      	cbz	r0, 16410 <prepare_normal_set+0x3c>
   1640c:	2802      	cmp	r0, #2
   1640e:	d101      	bne.n	16414 <prepare_normal_set+0x40>
}
   16410:	b009      	add	sp, #36	; 0x24
   16412:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16414:	4040      	eors	r0, r0
   16416:	f380 8811 	msr	BASEPRI, r0
   1641a:	f04f 0004 	mov.w	r0, #4
   1641e:	df02      	svc	2
   16420:	00012c9d 	.word	0x00012c9d

00016424 <event_common_prepare>:
{
   16424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16428:	b08a      	sub	sp, #40	; 0x28
   1642a:	4681      	mov	r9, r0
   1642c:	468a      	mov	sl, r1
   1642e:	4616      	mov	r6, r2
   16430:	461f      	mov	r7, r3
   16432:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   16436:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   16438:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1643c:	2c00      	cmp	r4, #0
   1643e:	db25      	blt.n	1648c <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   16440:	4544      	cmp	r4, r8
   16442:	d828      	bhi.n	16496 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   16444:	4544      	cmp	r4, r8
   16446:	d251      	bcs.n	164ec <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   16448:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   1644c:	2300      	movs	r3, #0
   1644e:	461a      	mov	r2, r3
   16450:	4619      	mov	r1, r3
   16452:	4618      	mov	r0, r3
   16454:	f7fd fa3a 	bl	138cc <event_active>
		ticker_status =
   16458:	f241 43d1 	movw	r3, #5329	; 0x14d1
   1645c:	9308      	str	r3, [sp, #32]
   1645e:	4b5e      	ldr	r3, [pc, #376]	; (165d8 <event_common_prepare+0x1b4>)
   16460:	9307      	str	r3, [sp, #28]
   16462:	2000      	movs	r0, #0
   16464:	9006      	str	r0, [sp, #24]
   16466:	4b5d      	ldr	r3, [pc, #372]	; (165dc <event_common_prepare+0x1b8>)
   16468:	9305      	str	r3, [sp, #20]
   1646a:	9004      	str	r0, [sp, #16]
   1646c:	9003      	str	r0, [sp, #12]
   1646e:	9002      	str	r0, [sp, #8]
   16470:	9001      	str	r0, [sp, #4]
   16472:	9400      	str	r4, [sp, #0]
   16474:	464b      	mov	r3, r9
   16476:	2201      	movs	r2, #1
   16478:	4601      	mov	r1, r0
   1647a:	f7fb ff01 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1647e:	2800      	cmp	r0, #0
   16480:	f000 8091 	beq.w	165a6 <event_common_prepare+0x182>
   16484:	2802      	cmp	r0, #2
   16486:	d12b      	bne.n	164e0 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   16488:	4644      	mov	r4, r8
   1648a:	e03b      	b.n	16504 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   1648c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1648e:	4544      	cmp	r4, r8
   16490:	bf38      	it	cc
   16492:	4644      	movcc	r4, r8
   16494:	e7d4      	b.n	16440 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   16496:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   1649a:	f241 42bc 	movw	r2, #5308	; 0x14bc
   1649e:	9208      	str	r2, [sp, #32]
   164a0:	4a4d      	ldr	r2, [pc, #308]	; (165d8 <event_common_prepare+0x1b4>)
   164a2:	9207      	str	r2, [sp, #28]
   164a4:	2000      	movs	r0, #0
   164a6:	9006      	str	r0, [sp, #24]
   164a8:	4a4d      	ldr	r2, [pc, #308]	; (165e0 <event_common_prepare+0x1bc>)
   164aa:	9205      	str	r2, [sp, #20]
   164ac:	9004      	str	r0, [sp, #16]
   164ae:	9003      	str	r0, [sp, #12]
   164b0:	9002      	str	r0, [sp, #8]
   164b2:	9001      	str	r0, [sp, #4]
   164b4:	9300      	str	r3, [sp, #0]
   164b6:	464b      	mov	r3, r9
   164b8:	2201      	movs	r2, #1
   164ba:	4601      	mov	r1, r0
   164bc:	f7fb fee0 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   164c0:	b108      	cbz	r0, 164c6 <event_common_prepare+0xa2>
   164c2:	2802      	cmp	r0, #2
   164c4:	d106      	bne.n	164d4 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   164c6:	2300      	movs	r3, #0
   164c8:	461a      	mov	r2, r3
   164ca:	4619      	mov	r1, r3
   164cc:	4618      	mov	r0, r3
   164ce:	f7fd fa0f 	bl	138f0 <event_xtal>
   164d2:	e017      	b.n	16504 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   164d4:	4040      	eors	r0, r0
   164d6:	f380 8811 	msr	BASEPRI, r0
   164da:	f04f 0004 	mov.w	r0, #4
   164de:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   164e0:	4040      	eors	r0, r0
   164e2:	f380 8811 	msr	BASEPRI, r0
   164e6:	f04f 0004 	mov.w	r0, #4
   164ea:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   164ec:	2300      	movs	r3, #0
   164ee:	461a      	mov	r2, r3
   164f0:	4619      	mov	r1, r3
   164f2:	4618      	mov	r0, r3
   164f4:	f7fd f9ea 	bl	138cc <event_active>
		event_xtal(0, 0, 0, NULL);
   164f8:	2300      	movs	r3, #0
   164fa:	461a      	mov	r2, r3
   164fc:	4619      	mov	r1, r3
   164fe:	4618      	mov	r0, r3
   16500:	f7fd f9f6 	bl	138f0 <event_xtal>
	_radio.remainder_anchor = remainder;
   16504:	4b37      	ldr	r3, [pc, #220]	; (165e4 <event_common_prepare+0x1c0>)
   16506:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   1650a:	f241 43e9 	movw	r3, #5353	; 0x14e9
   1650e:	9308      	str	r3, [sp, #32]
   16510:	4b31      	ldr	r3, [pc, #196]	; (165d8 <event_common_prepare+0x1b4>)
   16512:	9307      	str	r3, [sp, #28]
   16514:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16516:	9306      	str	r3, [sp, #24]
   16518:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1651a:	9305      	str	r3, [sp, #20]
   1651c:	2000      	movs	r0, #0
   1651e:	9004      	str	r0, [sp, #16]
   16520:	9003      	str	r0, [sp, #12]
   16522:	9002      	str	r0, [sp, #8]
   16524:	9001      	str	r0, [sp, #4]
   16526:	9400      	str	r4, [sp, #0]
   16528:	464b      	mov	r3, r9
   1652a:	4602      	mov	r2, r0
   1652c:	4601      	mov	r1, r0
   1652e:	f7fb fea7 	bl	12280 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16532:	b108      	cbz	r0, 16538 <event_common_prepare+0x114>
   16534:	2802      	cmp	r0, #2
   16536:	d138      	bne.n	165aa <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   16538:	2305      	movs	r3, #5
   1653a:	2200      	movs	r2, #0
   1653c:	4611      	mov	r1, r2
   1653e:	4610      	mov	r0, r2
   16540:	f7fd f93a 	bl	137b8 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   16544:	4b27      	ldr	r3, [pc, #156]	; (165e4 <event_common_prepare+0x1c0>)
   16546:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   1654a:	4598      	cmp	r8, r3
   1654c:	d01d      	beq.n	1658a <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   1654e:	6832      	ldr	r2, [r6, #0]
   16550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   16554:	429a      	cmp	r2, r3
   16556:	bf38      	it	cc
   16558:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   1655a:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   1655c:	6833      	ldr	r3, [r6, #0]
   1655e:	2b00      	cmp	r3, #0
   16560:	db29      	blt.n	165b6 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   16562:	b2a3      	uxth	r3, r4
   16564:	b292      	uxth	r2, r2
		ticker_status =
   16566:	f241 5116 	movw	r1, #5398	; 0x1516
   1656a:	9106      	str	r1, [sp, #24]
   1656c:	491a      	ldr	r1, [pc, #104]	; (165d8 <event_common_prepare+0x1b4>)
   1656e:	9105      	str	r1, [sp, #20]
   16570:	2000      	movs	r0, #0
   16572:	9004      	str	r0, [sp, #16]
   16574:	9003      	str	r0, [sp, #12]
   16576:	9302      	str	r3, [sp, #8]
   16578:	9201      	str	r2, [sp, #4]
   1657a:	9200      	str	r2, [sp, #0]
   1657c:	462a      	mov	r2, r5
   1657e:	4601      	mov	r1, r0
   16580:	f7fb fecc 	bl	1231c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16584:	b108      	cbz	r0, 1658a <event_common_prepare+0x166>
   16586:	2802      	cmp	r0, #2
   16588:	d119      	bne.n	165be <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   1658a:	20ff      	movs	r0, #255	; 0xff
   1658c:	f7fd fab6 	bl	13afc <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   16590:	4b15      	ldr	r3, [pc, #84]	; (165e8 <event_common_prepare+0x1c4>)
   16592:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   16594:	2201      	movs	r2, #1
   16596:	4611      	mov	r1, r2
   16598:	2000      	movs	r0, #0
   1659a:	f7fa f85f 	bl	1065c <mayfly_enqueue>
		LL_ASSERT(!retval);
   1659e:	b9a0      	cbnz	r0, 165ca <event_common_prepare+0x1a6>
}
   165a0:	b00a      	add	sp, #40	; 0x28
   165a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   165a6:	4644      	mov	r4, r8
   165a8:	e7ac      	b.n	16504 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   165aa:	4040      	eors	r0, r0
   165ac:	f380 8811 	msr	BASEPRI, r0
   165b0:	f04f 0004 	mov.w	r0, #4
   165b4:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   165b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   165ba:	6033      	str	r3, [r6, #0]
   165bc:	e7d1      	b.n	16562 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   165be:	4040      	eors	r0, r0
   165c0:	f380 8811 	msr	BASEPRI, r0
   165c4:	f04f 0004 	mov.w	r0, #4
   165c8:	df02      	svc	2
		LL_ASSERT(!retval);
   165ca:	4040      	eors	r0, r0
   165cc:	f380 8811 	msr	BASEPRI, r0
   165d0:	f04f 0004 	mov.w	r0, #4
   165d4:	df02      	svc	2
   165d6:	bf00      	nop
   165d8:	00012fd5 	.word	0x00012fd5
   165dc:	000138f1 	.word	0x000138f1
   165e0:	000138cd 	.word	0x000138cd
   165e4:	20000f7c 	.word	0x20000f7c
   165e8:	2000bdc0 	.word	0x2000bdc0

000165ec <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   165ec:	4b0d      	ldr	r3, [pc, #52]	; (16624 <radio_event_adv_prepare+0x38>)
   165ee:	7b1b      	ldrb	r3, [r3, #12]
   165f0:	b993      	cbnz	r3, 16618 <radio_event_adv_prepare+0x2c>
{
   165f2:	b510      	push	{r4, lr}
   165f4:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   165f6:	4a0b      	ldr	r2, [pc, #44]	; (16624 <radio_event_adv_prepare+0x38>)
   165f8:	2305      	movs	r3, #5
   165fa:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   165fc:	2400      	movs	r4, #0
   165fe:	9403      	str	r4, [sp, #12]
   16600:	4c09      	ldr	r4, [pc, #36]	; (16628 <radio_event_adv_prepare+0x3c>)
   16602:	9402      	str	r4, [sp, #8]
   16604:	9301      	str	r3, [sp, #4]
   16606:	69d3      	ldr	r3, [r2, #28]
   16608:	9300      	str	r3, [sp, #0]
   1660a:	f102 0318 	add.w	r3, r2, #24
   1660e:	3214      	adds	r2, #20
   16610:	f7ff ff08 	bl	16424 <event_common_prepare>
}
   16614:	b004      	add	sp, #16
   16616:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   16618:	4040      	eors	r0, r0
   1661a:	f380 8811 	msr	BASEPRI, r0
   1661e:	f04f 0004 	mov.w	r0, #4
   16622:	df02      	svc	2
   16624:	20000f7c 	.word	0x20000f7c
   16628:	00017ee9 	.word	0x00017ee9
   1662c:	00000000 	.word	0x00000000

00016630 <event_connection_prepare>:
{
   16630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16634:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   16636:	4ccb      	ldr	r4, [pc, #812]	; (16964 <event_connection_prepare+0x334>)
   16638:	7b24      	ldrb	r4, [r4, #12]
   1663a:	2c00      	cmp	r4, #0
   1663c:	d135      	bne.n	166aa <event_connection_prepare+0x7a>
				   conn->handle;
   1663e:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   16640:	3507      	adds	r5, #7
   16642:	b2ed      	uxtb	r5, r5
   16644:	4cc7      	ldr	r4, [pc, #796]	; (16964 <event_connection_prepare+0x334>)
   16646:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   16648:	f993 401d 	ldrsb.w	r4, [r3, #29]
   1664c:	2c00      	cmp	r4, #0
   1664e:	db32      	blt.n	166b6 <event_connection_prepare+0x86>
   16650:	461c      	mov	r4, r3
   16652:	910a      	str	r1, [sp, #40]	; 0x28
   16654:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   16656:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   16658:	4415      	add	r5, r2
   1665a:	b2ad      	uxth	r5, r5
   1665c:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   1665e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16660:	441d      	add	r5, r3
   16662:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   16664:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   16668:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1666c:	429a      	cmp	r2, r3
   1666e:	d02d      	beq.n	166cc <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   16670:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   16674:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16678:	429a      	cmp	r2, r3
   1667a:	f000 861a 	beq.w	172b2 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1667e:	2305      	movs	r3, #5
   16680:	2200      	movs	r2, #0
   16682:	4611      	mov	r1, r2
   16684:	4610      	mov	r0, r2
   16686:	f7fd f897 	bl	137b8 <event_stop>
		switch (conn->llcp_type) {
   1668a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1668e:	3b01      	subs	r3, #1
   16690:	2b07      	cmp	r3, #7
   16692:	f201 80d6 	bhi.w	17842 <event_connection_prepare+0x1212>
   16696:	e8df f013 	tbh	[pc, r3, lsl #1]
   1669a:	029f      	.short	0x029f
   1669c:	05b1054e 	.word	0x05b1054e
   166a0:	072706ee 	.word	0x072706ee
   166a4:	07ac08d4 	.word	0x07ac08d4
   166a8:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   166aa:	4040      	eors	r0, r0
   166ac:	f380 8811 	msr	BASEPRI, r0
   166b0:	f04f 0004 	mov.w	r0, #4
   166b4:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   166b6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   166b8:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   166bc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   166be:	442c      	add	r4, r5
   166c0:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   166c2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   166c4:	42ac      	cmp	r4, r5
   166c6:	d9c3      	bls.n	16650 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   166c8:	65dd      	str	r5, [r3, #92]	; 0x5c
   166ca:	e7c1      	b.n	16650 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   166cc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   166d0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   166d4:	429a      	cmp	r2, r3
   166d6:	d00b      	beq.n	166f0 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   166d8:	2305      	movs	r3, #5
   166da:	2200      	movs	r2, #0
   166dc:	4611      	mov	r1, r2
   166de:	4610      	mov	r0, r2
   166e0:	f7fd f86a 	bl	137b8 <event_stop>
	conn_upd = _radio.conn_upd;
   166e4:	4b9f      	ldr	r3, [pc, #636]	; (16964 <event_connection_prepare+0x334>)
   166e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   166ea:	b1fb      	cbz	r3, 1672c <event_connection_prepare+0xfc>
   166ec:	429c      	cmp	r4, r3
   166ee:	d01d      	beq.n	1672c <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   166f0:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   166f4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   166f8:	429a      	cmp	r2, r3
   166fa:	d0b9      	beq.n	16670 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   166fc:	2305      	movs	r3, #5
   166fe:	2200      	movs	r2, #0
   16700:	4611      	mov	r1, r2
   16702:	4610      	mov	r0, r2
   16704:	f7fd f858 	bl	137b8 <event_stop>
	switch (conn->llcp_phy.state) {
   16708:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1670c:	f003 0303 	and.w	r3, r3, #3
   16710:	2b03      	cmp	r3, #3
   16712:	f200 8257 	bhi.w	16bc4 <event_connection_prepare+0x594>
   16716:	a201      	add	r2, pc, #4	; (adr r2, 1671c <event_connection_prepare+0xec>)
   16718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1671c:	00016a15 	.word	0x00016a15
   16720:	00016671 	.word	0x00016671
   16724:	00016671 	.word	0x00016671
   16728:	00016a8f 	.word	0x00016a8f
	switch (conn->llcp_conn_param.state) {
   1672c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   16730:	f003 0307 	and.w	r3, r3, #7
   16734:	2b05      	cmp	r3, #5
   16736:	f200 8167 	bhi.w	16a08 <event_connection_prepare+0x3d8>
   1673a:	a201      	add	r2, pc, #4	; (adr r2, 16740 <event_connection_prepare+0x110>)
   1673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16740:	00016759 	.word	0x00016759
   16744:	00016823 	.word	0x00016823
   16748:	00016971 	.word	0x00016971
   1674c:	000166f1 	.word	0x000166f1
   16750:	000166f1 	.word	0x000166f1
   16754:	000166f1 	.word	0x000166f1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16758:	4883      	ldr	r0, [pc, #524]	; (16968 <event_connection_prepare+0x338>)
   1675a:	f7fa f8c0 	bl	108de <mem_acquire>
	if (!node_tx) {
   1675e:	4680      	mov	r8, r0
   16760:	2800      	cmp	r0, #0
   16762:	d0c5      	beq.n	166f0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   16764:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   16768:	2204      	movs	r2, #4
   1676a:	f362 0302 	bfi	r3, r2, #0, #3
   1676e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16772:	7903      	ldrb	r3, [r0, #4]
   16774:	f043 0303 	orr.w	r3, r3, #3
   16778:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1677a:	2318      	movs	r3, #24
   1677c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1677e:	230f      	movs	r3, #15
   16780:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   16782:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   16786:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   16788:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1678c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1678e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   16792:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   16794:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   16798:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1679a:	2300      	movs	r3, #0
   1679c:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   1679e:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   167a2:	74c3      	strb	r3, [r0, #19]
   167a4:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   167a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   167aa:	7543      	strb	r3, [r0, #21]
   167ac:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   167ae:	75c3      	strb	r3, [r0, #23]
   167b0:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   167b2:	7643      	strb	r3, [r0, #25]
   167b4:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   167b6:	76c3      	strb	r3, [r0, #27]
   167b8:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   167ba:	7743      	strb	r3, [r0, #29]
   167bc:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   167be:	4601      	mov	r1, r0
   167c0:	4620      	mov	r0, r4
   167c2:	f7fc fb1f 	bl	12e04 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   167c6:	4b67      	ldr	r3, [pc, #412]	; (16964 <event_connection_prepare+0x334>)
   167c8:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   167cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   167d0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   167d4:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   167d8:	6823      	ldr	r3, [r4, #0]
   167da:	2b00      	cmp	r3, #0
   167dc:	db13      	blt.n	16806 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   167de:	f108 0313 	add.w	r3, r8, #19
   167e2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   167e6:	4b61      	ldr	r3, [pc, #388]	; (1696c <event_connection_prepare+0x33c>)
   167e8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   167ea:	2201      	movs	r2, #1
   167ec:	4611      	mov	r1, r2
   167ee:	2000      	movs	r0, #0
   167f0:	f7f9 ff34 	bl	1065c <mayfly_enqueue>
		LL_ASSERT(!retval);
   167f4:	2800      	cmp	r0, #0
   167f6:	f43f af7b 	beq.w	166f0 <event_connection_prepare+0xc0>
   167fa:	4040      	eors	r0, r0
   167fc:	f380 8811 	msr	BASEPRI, r0
   16800:	f04f 0004 	mov.w	r0, #4
   16804:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   16806:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   16808:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   1680a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1680e:	4291      	cmp	r1, r2
   16810:	bf2c      	ite	cs
   16812:	ebc3 0301 	rsbcs	r3, r3, r1
   16816:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   1681a:	4433      	add	r3, r6
   1681c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   16820:	e7dd      	b.n	167de <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   16822:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   16826:	bbb3      	cbnz	r3, 16896 <event_connection_prepare+0x266>
	if (!conn->role) {
   16828:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1682c:	2b00      	cmp	r3, #0
   1682e:	db52      	blt.n	168d6 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   16830:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   16834:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   16838:	429a      	cmp	r2, r3
   1683a:	f47f af59 	bne.w	166f0 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1683e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   16842:	2105      	movs	r1, #5
   16844:	f361 0202 	bfi	r2, r1, #0, #3
   16848:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1684c:	2001      	movs	r0, #1
   1684e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   16852:	2100      	movs	r1, #0
   16854:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   16858:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   1685c:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   16860:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   16864:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   16868:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   1686c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   16870:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   16874:	f04f 0e02 	mov.w	lr, #2
   16878:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1687c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   16880:	4042      	eors	r2, r0
   16882:	f362 0182 	bfi	r1, r2, #2, #1
   16886:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1688a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1688e:	3b01      	subs	r3, #1
   16890:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   16894:	e72c      	b.n	166f0 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16896:	4834      	ldr	r0, [pc, #208]	; (16968 <event_connection_prepare+0x338>)
   16898:	f7fa f821 	bl	108de <mem_acquire>
		if (!node_tx) {
   1689c:	4601      	mov	r1, r0
   1689e:	2800      	cmp	r0, #0
   168a0:	f43f af26 	beq.w	166f0 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   168a4:	7903      	ldrb	r3, [r0, #4]
   168a6:	f043 0303 	orr.w	r3, r3, #3
   168aa:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   168ac:	2311      	movs	r3, #17
   168ae:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   168b0:	2303      	movs	r3, #3
   168b2:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   168b4:	230f      	movs	r3, #15
   168b6:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   168b8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   168bc:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   168be:	4620      	mov	r0, r4
   168c0:	f7fc faa0 	bl	12e04 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   168c4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   168c8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   168cc:	2200      	movs	r2, #0
   168ce:	4b25      	ldr	r3, [pc, #148]	; (16964 <event_connection_prepare+0x334>)
   168d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   168d4:	e70c      	b.n	166f0 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   168d6:	4824      	ldr	r0, [pc, #144]	; (16968 <event_connection_prepare+0x338>)
   168d8:	f7fa f801 	bl	108de <mem_acquire>
	if (!node_tx) {
   168dc:	4601      	mov	r1, r0
   168de:	2800      	cmp	r0, #0
   168e0:	f43f af06 	beq.w	166f0 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   168e4:	7903      	ldrb	r3, [r0, #4]
   168e6:	f043 0303 	orr.w	r3, r3, #3
   168ea:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   168ec:	2318      	movs	r3, #24
   168ee:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   168f0:	2310      	movs	r3, #16
   168f2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   168f4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   168f8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   168fa:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   168fe:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   16900:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   16904:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   16906:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1690a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1690c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   16910:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   16912:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   16916:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   1691a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   1691e:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   16922:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   16926:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   1692a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   1692e:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   16932:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   16936:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   1693a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   1693e:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   16942:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   16946:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   1694a:	4620      	mov	r0, r4
   1694c:	f7fc fa5a 	bl	12e04 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16950:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   16954:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   16958:	2200      	movs	r2, #0
   1695a:	4b02      	ldr	r3, [pc, #8]	; (16964 <event_connection_prepare+0x334>)
   1695c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   16960:	e6c6      	b.n	166f0 <event_connection_prepare+0xc0>
   16962:	bf00      	nop
   16964:	20000f7c 	.word	0x20000f7c
   16968:	200010d4 	.word	0x200010d4
   1696c:	2000bd50 	.word	0x2000bd50
	if (conn->pause_tx) {
   16970:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16974:	f013 0f08 	tst.w	r3, #8
   16978:	f47f aeba 	bne.w	166f0 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   1697c:	4b94      	ldr	r3, [pc, #592]	; (16bd0 <event_connection_prepare+0x5a0>)
   1697e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16982:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16986:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16988:	429a      	cmp	r2, r3
   1698a:	d331      	bcc.n	169f0 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   1698c:	4b90      	ldr	r3, [pc, #576]	; (16bd0 <event_connection_prepare+0x5a0>)
   1698e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16992:	1ad3      	subs	r3, r2, r3
   16994:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16996:	2b01      	cmp	r3, #1
   16998:	d934      	bls.n	16a04 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   1699a:	4b8d      	ldr	r3, [pc, #564]	; (16bd0 <event_connection_prepare+0x5a0>)
   1699c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   169a0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   169a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   169a8:	2b00      	cmp	r3, #0
   169aa:	f43f aea1 	beq.w	166f0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   169ae:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   169b2:	2103      	movs	r1, #3
   169b4:	f361 0202 	bfi	r2, r1, #0, #3
   169b8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   169bc:	8c22      	ldrh	r2, [r4, #32]
   169be:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   169c0:	2201      	movs	r2, #1
   169c2:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   169c4:	7a1a      	ldrb	r2, [r3, #8]
   169c6:	430a      	orrs	r2, r1
   169c8:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   169ca:	2218      	movs	r2, #24
   169cc:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   169ce:	220f      	movs	r2, #15
   169d0:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   169d2:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   169d6:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   169d8:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   169dc:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   169de:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   169e2:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   169e4:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   169e8:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   169ea:	f7fe ffbf 	bl	1596c <packet_rx_enqueue>
   169ee:	e67f      	b.n	166f0 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   169f0:	4977      	ldr	r1, [pc, #476]	; (16bd0 <event_connection_prepare+0x5a0>)
   169f2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   169f6:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   169fa:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   169fc:	fa52 f383 	uxtab	r3, r2, r3
   16a00:	b2db      	uxtb	r3, r3
   16a02:	e7c8      	b.n	16996 <event_connection_prepare+0x366>
		return 0;
   16a04:	2300      	movs	r3, #0
   16a06:	e7cf      	b.n	169a8 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   16a08:	4040      	eors	r0, r0
   16a0a:	f380 8811 	msr	BASEPRI, r0
   16a0e:	f04f 0004 	mov.w	r0, #4
   16a12:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16a14:	486f      	ldr	r0, [pc, #444]	; (16bd4 <event_connection_prepare+0x5a4>)
   16a16:	f7f9 ff62 	bl	108de <mem_acquire>
		if (!node_tx) {
   16a1a:	4601      	mov	r1, r0
   16a1c:	2800      	cmp	r0, #0
   16a1e:	f43f ae27 	beq.w	16670 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   16a22:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16a26:	2201      	movs	r2, #1
   16a28:	f362 0301 	bfi	r3, r2, #0, #2
   16a2c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   16a30:	b2db      	uxtb	r3, r3
   16a32:	f3c3 0082 	ubfx	r0, r3, #2, #3
   16a36:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16a3a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   16a3e:	095b      	lsrs	r3, r3, #5
   16a40:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   16a44:	f363 00c5 	bfi	r0, r3, #3, #3
   16a48:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   16a4c:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   16a50:	4613      	mov	r3, r2
   16a52:	f360 1386 	bfi	r3, r0, #6, #1
   16a56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16a5a:	790b      	ldrb	r3, [r1, #4]
   16a5c:	f043 0303 	orr.w	r3, r3, #3
   16a60:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16a62:	2303      	movs	r3, #3
   16a64:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   16a66:	2316      	movs	r3, #22
   16a68:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   16a6a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16a6e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16a72:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   16a74:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16a78:	f3c3 1342 	ubfx	r3, r3, #5, #3
   16a7c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   16a7e:	4620      	mov	r0, r4
   16a80:	f7fc f9c0 	bl	12e04 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   16a84:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16a88:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16a8c:	e5f0      	b.n	16670 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16a8e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   16a92:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   16a96:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16a9a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16a9e:	f013 0f02 	tst.w	r3, #2
   16aa2:	d047      	beq.n	16b34 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   16aa4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16aa8:	2202      	movs	r2, #2
   16aaa:	f362 0384 	bfi	r3, r2, #2, #3
   16aae:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   16ab2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16ab6:	095b      	lsrs	r3, r3, #5
   16ab8:	f013 0f02 	tst.w	r3, #2
   16abc:	d057      	beq.n	16b6e <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   16abe:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16ac2:	2202      	movs	r2, #2
   16ac4:	f362 1347 	bfi	r3, r2, #5, #3
   16ac8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   16acc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16ad0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16ad4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16ad8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16adc:	4293      	cmp	r3, r2
   16ade:	d063      	beq.n	16ba8 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   16ae0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16ae4:	f363 0284 	bfi	r2, r3, #2, #3
   16ae8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   16aec:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16af0:	095b      	lsrs	r3, r3, #5
   16af2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16af6:	f002 0207 	and.w	r2, r2, #7
   16afa:	4293      	cmp	r3, r2
   16afc:	d05b      	beq.n	16bb6 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   16afe:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16b02:	f363 1247 	bfi	r2, r3, #5, #3
   16b06:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   16b0a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16b0e:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   16b12:	f3c2 0240 	ubfx	r2, r2, #1, #1
   16b16:	f043 0301 	orr.w	r3, r3, #1
   16b1a:	f362 0341 	bfi	r3, r2, #1, #1
   16b1e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   16b22:	2308      	movs	r3, #8
   16b24:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   16b28:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   16b2c:	3b01      	subs	r3, #1
   16b2e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   16b32:	e59d      	b.n	16670 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   16b34:	f013 0f01 	tst.w	r3, #1
   16b38:	d007      	beq.n	16b4a <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   16b3a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b3e:	2201      	movs	r2, #1
   16b40:	f362 0384 	bfi	r3, r2, #2, #3
   16b44:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16b48:	e7b3      	b.n	16ab2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   16b4a:	f013 0f04 	tst.w	r3, #4
   16b4e:	d007      	beq.n	16b60 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   16b50:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b54:	2204      	movs	r2, #4
   16b56:	f362 0384 	bfi	r3, r2, #2, #3
   16b5a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16b5e:	e7a8      	b.n	16ab2 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   16b60:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b64:	f36f 0384 	bfc	r3, #2, #3
   16b68:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16b6c:	e7a1      	b.n	16ab2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   16b6e:	f013 0f01 	tst.w	r3, #1
   16b72:	d007      	beq.n	16b84 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   16b74:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b78:	2201      	movs	r2, #1
   16b7a:	f362 1347 	bfi	r3, r2, #5, #3
   16b7e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16b82:	e7a3      	b.n	16acc <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   16b84:	f013 0f04 	tst.w	r3, #4
   16b88:	d007      	beq.n	16b9a <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   16b8a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b8e:	2204      	movs	r2, #4
   16b90:	f362 1347 	bfi	r3, r2, #5, #3
   16b94:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16b98:	e798      	b.n	16acc <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   16b9a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   16b9e:	f36f 1347 	bfc	r3, #5, #3
   16ba2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   16ba6:	e791      	b.n	16acc <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   16ba8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16bac:	f36f 0384 	bfc	r3, #2, #3
   16bb0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   16bb4:	e79a      	b.n	16aec <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   16bb6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16bba:	f36f 1347 	bfc	r3, #5, #3
   16bbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   16bc2:	e7a2      	b.n	16b0a <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   16bc4:	4040      	eors	r0, r0
   16bc6:	f380 8811 	msr	BASEPRI, r0
   16bca:	f04f 0004 	mov.w	r0, #4
   16bce:	df02      	svc	2
   16bd0:	20000f7c 	.word	0x20000f7c
   16bd4:	200010d4 	.word	0x200010d4
	conn_upd = _radio.conn_upd;
   16bd8:	4bb7      	ldr	r3, [pc, #732]	; (16eb8 <event_connection_prepare+0x888>)
   16bda:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   16bde:	2b00      	cmp	r3, #0
   16be0:	f000 814b 	beq.w	16e7a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   16be4:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   16be8:	eba5 0808 	sub.w	r8, r5, r8
   16bec:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   16bf0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16bf4:	f013 0f03 	tst.w	r3, #3
   16bf8:	f040 8143 	bne.w	16e82 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   16bfc:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   16c00:	f040 8296 	bne.w	17130 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   16c04:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16c08:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16c0c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   16c10:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   16c14:	429a      	cmp	r2, r3
   16c16:	d006      	beq.n	16c26 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   16c18:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   16c1c:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16c20:	2b05      	cmp	r3, #5
   16c22:	f000 81bb 	beq.w	16f9c <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   16c26:	4ba4      	ldr	r3, [pc, #656]	; (16eb8 <event_connection_prepare+0x888>)
   16c28:	2200      	movs	r2, #0
   16c2a:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   16c2c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   16c30:	429c      	cmp	r4, r3
   16c32:	f000 81b9 	beq.w	16fa8 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   16c36:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   16c3a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   16c3c:	429a      	cmp	r2, r3
   16c3e:	f000 81b7 	beq.w	16fb0 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   16c42:	4b9d      	ldr	r3, [pc, #628]	; (16eb8 <event_connection_prepare+0x888>)
   16c44:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16c48:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c4c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16c4e:	429a      	cmp	r2, r3
   16c50:	f0c0 81c7 	bcc.w	16fe2 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   16c54:	4b98      	ldr	r3, [pc, #608]	; (16eb8 <event_connection_prepare+0x888>)
   16c56:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16c5a:	1ad3      	subs	r3, r2, r3
   16c5c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16c5e:	2b01      	cmp	r3, #1
   16c60:	f240 81c9 	bls.w	16ff6 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   16c64:	4b94      	ldr	r3, [pc, #592]	; (16eb8 <event_connection_prepare+0x888>)
   16c66:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16c6a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   16c72:	2b00      	cmp	r3, #0
   16c74:	f000 81c1 	beq.w	16ffa <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   16c78:	8c22      	ldrh	r2, [r4, #32]
   16c7a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16c7c:	2208      	movs	r2, #8
   16c7e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   16c80:	2200      	movs	r2, #0
   16c82:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   16c84:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   16c88:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   16c8a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   16c8e:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   16c90:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   16c94:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   16c96:	f7fe fe69 	bl	1596c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   16c9a:	6823      	ldr	r3, [r4, #0]
   16c9c:	2b00      	cmp	r3, #0
   16c9e:	f2c0 81b2 	blt.w	17006 <event_connection_prepare+0x9d6>
   16ca2:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   16ca4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   16ca6:	fb18 f303 	smulbb	r3, r8, r3
   16caa:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   16cac:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   16cb0:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   16cb4:	fb1a f00b 	smulbb	r0, sl, fp
   16cb8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   16cba:	4283      	cmp	r3, r0
   16cbc:	f080 81b1 	bcs.w	17022 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   16cc0:	1ac3      	subs	r3, r0, r3
   16cc2:	17d9      	asrs	r1, r3, #31
   16cc4:	487d      	ldr	r0, [pc, #500]	; (16ebc <event_connection_prepare+0x88c>)
   16cc6:	f240 1223 	movw	r2, #291	; 0x123
   16cca:	fb02 f203 	mul.w	r2, r2, r3
   16cce:	fb00 2201 	mla	r2, r0, r1, r2
   16cd2:	fba3 0100 	umull	r0, r1, r3, r0
   16cd6:	4411      	add	r1, r2
   16cd8:	a375      	add	r3, pc, #468	; (adr r3, 16eb0 <event_connection_prepare+0x880>)
   16cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   16cde:	f7ea fa0d 	bl	10fc <__aeabi_uldivmod>
   16ce2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   16ce6:	eb00 0309 	add.w	r3, r0, r9
   16cea:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   16cec:	ebab 0308 	sub.w	r3, fp, r8
   16cf0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   16cf2:	fa12 f383 	uxtah	r3, r2, r3
   16cf6:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   16cf8:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   16cfa:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   16cfc:	429a      	cmp	r2, r3
   16cfe:	bf38      	it	cc
   16d00:	461a      	movcc	r2, r3
   16d02:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   16d04:	f240 49e2 	movw	r9, #1250	; 0x4e2
   16d08:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   16d0c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   16d10:	2b00      	cmp	r3, #0
   16d12:	f2c0 819d 	blt.w	17050 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   16d16:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   16d1a:	a365      	add	r3, pc, #404	; (adr r3, 16eb0 <event_connection_prepare+0x880>)
   16d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d20:	4967      	ldr	r1, [pc, #412]	; (16ec0 <event_connection_prepare+0x890>)
   16d22:	fba0 0101 	umull	r0, r1, r0, r1
   16d26:	f7ea f9e9 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   16d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   16d2e:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   16d32:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   16d34:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   16d38:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   16d3c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   16d3e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   16d42:	f242 7110 	movw	r1, #10000	; 0x2710
   16d46:	fb01 9303 	mla	r3, r1, r3, r9
   16d4a:	3b01      	subs	r3, #1
   16d4c:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   16d50:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   16d52:	4b5c      	ldr	r3, [pc, #368]	; (16ec4 <event_connection_prepare+0x894>)
   16d54:	444b      	add	r3, r9
   16d56:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   16d5a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   16d5e:	4b5a      	ldr	r3, [pc, #360]	; (16ec8 <event_connection_prepare+0x898>)
   16d60:	444b      	add	r3, r9
   16d62:	fbb3 f9f9 	udiv	r9, r3, r9
   16d66:	fa1f f989 	uxth.w	r9, r9
   16d6a:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16d6e:	1d93      	adds	r3, r2, #6
   16d70:	4599      	cmp	r9, r3
   16d72:	dd07      	ble.n	16d84 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   16d74:	eba9 0902 	sub.w	r9, r9, r2
   16d78:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16d7c:	f1a9 0906 	sub.w	r9, r9, #6
   16d80:	fa1f f989 	uxth.w	r9, r9
   16d84:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   16d88:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16d8c:	f013 0f04 	tst.w	r3, #4
   16d90:	d102      	bne.n	16d98 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   16d92:	2300      	movs	r3, #0
   16d94:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   16d98:	2101      	movs	r1, #1
   16d9a:	2000      	movs	r0, #0
   16d9c:	f003 fe2d 	bl	1a9fa <mayfly_is_enabled>
   16da0:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   16da2:	2200      	movs	r2, #0
   16da4:	2101      	movs	r1, #1
   16da6:	4610      	mov	r0, r2
   16da8:	f7f9 fc1a 	bl	105e0 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   16dac:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dae:	3207      	adds	r2, #7
		ticker_status =
   16db0:	f641 13e3 	movw	r3, #6627	; 0x19e3
   16db4:	9300      	str	r3, [sp, #0]
   16db6:	4b45      	ldr	r3, [pc, #276]	; (16ecc <event_connection_prepare+0x89c>)
   16db8:	b2d2      	uxtb	r2, r2
   16dba:	2100      	movs	r1, #0
   16dbc:	4608      	mov	r0, r1
   16dbe:	f7fb fafb 	bl	123b8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16dc2:	b110      	cbz	r0, 16dca <event_connection_prepare+0x79a>
   16dc4:	2802      	cmp	r0, #2
   16dc6:	f040 819a 	bne.w	170fe <event_connection_prepare+0xace>
				     conn->handle,
   16dca:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dce:	f10a 0a07 	add.w	sl, sl, #7
   16dd2:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   16dd6:	4b3a      	ldr	r3, [pc, #232]	; (16ec0 <event_connection_prepare+0x890>)
   16dd8:	fba8 2303 	umull	r2, r3, r8, r3
   16ddc:	4617      	mov	r7, r2
   16dde:	4698      	mov	r8, r3
   16de0:	a333      	add	r3, pc, #204	; (adr r3, 16eb0 <event_connection_prepare+0x880>)
   16de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16de6:	4638      	mov	r0, r7
   16de8:	4641      	mov	r1, r8
   16dea:	f7ea f987 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16dee:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   16df2:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   16df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16df8:	2100      	movs	r1, #0
   16dfa:	4a35      	ldr	r2, [pc, #212]	; (16ed0 <event_connection_prepare+0x8a0>)
   16dfc:	2307      	movs	r3, #7
   16dfe:	fb03 f300 	mul.w	r3, r3, r0
   16e02:	fb02 3301 	mla	r3, r2, r1, r3
   16e06:	fba0 0102 	umull	r0, r1, r0, r2
   16e0a:	4419      	add	r1, r3
   16e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e10:	2300      	movs	r3, #0
   16e12:	1a3f      	subs	r7, r7, r0
   16e14:	eb68 0801 	sbc.w	r8, r8, r1
   16e18:	4638      	mov	r0, r7
   16e1a:	4641      	mov	r1, r8
   16e1c:	f7ea f96e 	bl	10fc <__aeabi_uldivmod>
   16e20:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   16e22:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16e24:	990c      	ldr	r1, [sp, #48]	; 0x30
   16e26:	440b      	add	r3, r1
   16e28:	b29b      	uxth	r3, r3
   16e2a:	f994 101d 	ldrsb.w	r1, [r4, #29]
   16e2e:	2900      	cmp	r1, #0
   16e30:	f2c0 816b 	blt.w	1710a <event_connection_prepare+0xada>
   16e34:	4927      	ldr	r1, [pc, #156]	; (16ed4 <event_connection_prepare+0x8a4>)
		ticker_status =
   16e36:	f641 10f3 	movw	r0, #6643	; 0x19f3
   16e3a:	9008      	str	r0, [sp, #32]
   16e3c:	4823      	ldr	r0, [pc, #140]	; (16ecc <event_connection_prepare+0x89c>)
   16e3e:	9007      	str	r0, [sp, #28]
   16e40:	9406      	str	r4, [sp, #24]
   16e42:	9105      	str	r1, [sp, #20]
   16e44:	9304      	str	r3, [sp, #16]
   16e46:	2000      	movs	r0, #0
   16e48:	9003      	str	r0, [sp, #12]
   16e4a:	9202      	str	r2, [sp, #8]
   16e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16e4e:	9301      	str	r3, [sp, #4]
   16e50:	f8cd b000 	str.w	fp, [sp]
   16e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16e56:	4652      	mov	r2, sl
   16e58:	4601      	mov	r1, r0
   16e5a:	f7fb fa11 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16e5e:	b110      	cbz	r0, 16e66 <event_connection_prepare+0x836>
   16e60:	2802      	cmp	r0, #2
   16e62:	f040 8154 	bne.w	1710e <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   16e66:	f1b9 0f00 	cmp.w	r9, #0
   16e6a:	f040 8156 	bne.w	1711a <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   16e6e:	f1b9 0f00 	cmp.w	r9, #0
   16e72:	f040 821e 	bne.w	172b2 <event_connection_prepare+0xc82>
   16e76:	f000 be59 	b.w	17b2c <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   16e7a:	4b0f      	ldr	r3, [pc, #60]	; (16eb8 <event_connection_prepare+0x888>)
   16e7c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   16e80:	e6b0      	b.n	16be4 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16e82:	4815      	ldr	r0, [pc, #84]	; (16ed8 <event_connection_prepare+0x8a8>)
   16e84:	f7f9 fd2b 	bl	108de <mem_acquire>
		if (!node_tx) {
   16e88:	4680      	mov	r8, r0
   16e8a:	2800      	cmp	r0, #0
   16e8c:	f000 814d 	beq.w	1712a <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   16e90:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   16e92:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16e96:	f002 0203 	and.w	r2, r2, #3
   16e9a:	2a01      	cmp	r2, #1
   16e9c:	d01e      	beq.n	16edc <event_connection_prepare+0x8ac>
   16e9e:	2a02      	cmp	r2, #2
   16ea0:	d066      	beq.n	16f70 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   16ea2:	4040      	eors	r0, r0
   16ea4:	f380 8811 	msr	BASEPRI, r0
   16ea8:	f04f 0004 	mov.w	r0, #4
   16eac:	df02      	svc	2
   16eae:	bf00      	nop
   16eb0:	1afd498d 	.word	0x1afd498d
   16eb4:	00000007 	.word	0x00000007
   16eb8:	20000f7c 	.word	0x20000f7c
   16ebc:	09ce5400 	.word	0x09ce5400
   16ec0:	3b9aca00 	.word	0x3b9aca00
   16ec4:	026259ff 	.word	0x026259ff
   16ec8:	01c9c37f 	.word	0x01c9c37f
   16ecc:	00012fd5 	.word	0x00012fd5
   16ed0:	1afd498d 	.word	0x1afd498d
   16ed4:	00017b95 	.word	0x00017b95
   16ed8:	200010d4 	.word	0x200010d4
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   16edc:	49bc      	ldr	r1, [pc, #752]	; (171d0 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   16ede:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16ee2:	f36f 0201 	bfc	r2, #0, #2
   16ee6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   16eea:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   16eec:	442a      	add	r2, r5
   16eee:	b292      	uxth	r2, r2
   16ef0:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   16ef2:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ef6:	f898 2004 	ldrb.w	r2, [r8, #4]
   16efa:	f042 0203 	orr.w	r2, r2, #3
   16efe:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16f02:	220c      	movs	r2, #12
   16f04:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   16f06:	2200      	movs	r2, #0
   16f08:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   16f0a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   16f0e:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   16f10:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   16f14:	48af      	ldr	r0, [pc, #700]	; (171d4 <event_connection_prepare+0xba4>)
   16f16:	fba0 0202 	umull	r0, r2, r0, r2
   16f1a:	0a92      	lsrs	r2, r2, #10
   16f1c:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   16f20:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   16f24:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   16f28:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   16f2c:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   16f30:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   16f34:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   16f38:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   16f3c:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   16f40:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   16f44:	6820      	ldr	r0, [r4, #0]
   16f46:	2800      	cmp	r0, #0
   16f48:	db14      	blt.n	16f74 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   16f4a:	3305      	adds	r3, #5
   16f4c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   16f50:	4ba1      	ldr	r3, [pc, #644]	; (171d8 <event_connection_prepare+0xba8>)
   16f52:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   16f54:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   16f56:	2201      	movs	r2, #1
   16f58:	4611      	mov	r1, r2
   16f5a:	2000      	movs	r0, #0
   16f5c:	f7f9 fb7e 	bl	1065c <mayfly_enqueue>
		LL_ASSERT(!retval);
   16f60:	b9b0      	cbnz	r0, 16f90 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   16f62:	4641      	mov	r1, r8
   16f64:	4620      	mov	r0, r4
   16f66:	f7fb ff4d 	bl	12e04 <ctrl_tx_enqueue>
	return 1;
   16f6a:	f04f 0901 	mov.w	r9, #1
   16f6e:	e77e      	b.n	16e6e <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   16f70:	499a      	ldr	r1, [pc, #616]	; (171dc <event_connection_prepare+0xbac>)
   16f72:	e7b4      	b.n	16ede <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   16f74:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   16f76:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   16f78:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   16f7c:	4297      	cmp	r7, r2
   16f7e:	bf2c      	ite	cs
   16f80:	ebce 0207 	rsbcs	r2, lr, r7
   16f84:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   16f88:	4432      	add	r2, r6
   16f8a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   16f8e:	e7dc      	b.n	16f4a <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   16f90:	4040      	eors	r0, r0
   16f92:	f380 8811 	msr	BASEPRI, r0
   16f96:	f04f 0004 	mov.w	r0, #4
   16f9a:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16f9c:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   16fa0:	2300      	movs	r3, #0
   16fa2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16fa6:	e63e      	b.n	16c26 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   16fa8:	4b8d      	ldr	r3, [pc, #564]	; (171e0 <event_connection_prepare+0xbb0>)
   16faa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   16fae:	e642      	b.n	16c36 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   16fb0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   16fb4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   16fb6:	4291      	cmp	r1, r2
   16fb8:	f47f ae43 	bne.w	16c42 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   16fbc:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   16fc0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16fc4:	fb01 f103 	mul.w	r1, r1, r3
   16fc8:	f242 7310 	movw	r3, #10000	; 0x2710
   16fcc:	fb03 1302 	mla	r3, r3, r2, r1
   16fd0:	3b01      	subs	r3, #1
   16fd2:	fb93 f3f1 	sdiv	r3, r3, r1
   16fd6:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   16fd8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   16fda:	4293      	cmp	r3, r2
   16fdc:	f47f ae31 	bne.w	16c42 <event_connection_prepare+0x612>
   16fe0:	e65b      	b.n	16c9a <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   16fe2:	497f      	ldr	r1, [pc, #508]	; (171e0 <event_connection_prepare+0xbb0>)
   16fe4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16fe8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16fec:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16fee:	fa52 f383 	uxtab	r3, r2, r3
   16ff2:	b2db      	uxtb	r3, r3
   16ff4:	e633      	b.n	16c5e <event_connection_prepare+0x62e>
		return 0;
   16ff6:	2300      	movs	r3, #0
   16ff8:	e63b      	b.n	16c72 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   16ffa:	4040      	eors	r0, r0
   16ffc:	f380 8811 	msr	BASEPRI, r0
   17000:	f04f 0004 	mov.w	r0, #4
   17004:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   17006:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   17008:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1700a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1700e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   17010:	4291      	cmp	r1, r2
   17012:	bf2c      	ite	cs
   17014:	ebc3 0301 	rsbcs	r3, r3, r1
   17018:	ebc3 0302 	rsbcc	r3, r3, r2
   1701c:	eb06 0903 	add.w	r9, r6, r3
   17020:	e640      	b.n	16ca4 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   17022:	1a1b      	subs	r3, r3, r0
   17024:	17d9      	asrs	r1, r3, #31
   17026:	486f      	ldr	r0, [pc, #444]	; (171e4 <event_connection_prepare+0xbb4>)
   17028:	f240 1223 	movw	r2, #291	; 0x123
   1702c:	fb02 f203 	mul.w	r2, r2, r3
   17030:	fb00 2201 	mla	r2, r0, r1, r2
   17034:	fba3 0100 	umull	r0, r1, r3, r0
   17038:	4411      	add	r1, r2
   1703a:	a363      	add	r3, pc, #396	; (adr r3, 171c8 <event_connection_prepare+0xb98>)
   1703c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17040:	f7ea f85c 	bl	10fc <__aeabi_uldivmod>
   17044:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   17048:	eba9 0300 	sub.w	r3, r9, r0
   1704c:	930b      	str	r3, [sp, #44]	; 0x2c
   1704e:	e64d      	b.n	16cec <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   17050:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   17052:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17054:	fb02 3218 	mls	r2, r2, r8, r3
   17058:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   1705a:	4b61      	ldr	r3, [pc, #388]	; (171e0 <event_connection_prepare+0xbb0>)
   1705c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   17060:	4861      	ldr	r0, [pc, #388]	; (171e8 <event_connection_prepare+0xbb8>)
   17062:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   17066:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1706a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1706e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   17072:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   17074:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   17078:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1707c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17080:	495a      	ldr	r1, [pc, #360]	; (171ec <event_connection_prepare+0xbbc>)
   17082:	fba1 1303 	umull	r1, r3, r1, r3
   17086:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   1708a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   1708e:	ea4f 0359 	mov.w	r3, r9, lsr #1
   17092:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   17094:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   17096:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   1709a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1709e:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   170a2:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   170a4:	2100      	movs	r1, #0
   170a6:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   170a8:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   170ac:	4402      	add	r2, r0
   170ae:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   170b0:	4293      	cmp	r3, r2
   170b2:	d200      	bcs.n	170b6 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   170b4:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   170b6:	f8df b140 	ldr.w	fp, [pc, #320]	; 171f8 <event_connection_prepare+0xbc8>
   170ba:	a343      	add	r3, pc, #268	; (adr r3, 171c8 <event_connection_prepare+0xb98>)
   170bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   170c0:	fba0 010b 	umull	r0, r1, r0, fp
   170c4:	f7ea f81a 	bl	10fc <__aeabi_uldivmod>
   170c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   170cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   170ce:	1a1b      	subs	r3, r3, r0
   170d0:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   170d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   170d6:	4a3f      	ldr	r2, [pc, #252]	; (171d4 <event_connection_prepare+0xba4>)
   170d8:	fba2 2303 	umull	r2, r3, r2, r3
   170dc:	0a9b      	lsrs	r3, r3, #10
   170de:	f240 40e2 	movw	r0, #1250	; 0x4e2
   170e2:	fb00 f003 	mul.w	r0, r0, r3
   170e6:	a338      	add	r3, pc, #224	; (adr r3, 171c8 <event_connection_prepare+0xb98>)
   170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   170ec:	fba0 010b 	umull	r0, r1, r0, fp
   170f0:	f7ea f804 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   170f4:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   170f8:	eba9 0808 	sub.w	r8, r9, r8
   170fc:	e61a      	b.n	16d34 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   170fe:	4040      	eors	r0, r0
   17100:	f380 8811 	msr	BASEPRI, r0
   17104:	f04f 0004 	mov.w	r0, #4
   17108:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1710a:	4939      	ldr	r1, [pc, #228]	; (171f0 <event_connection_prepare+0xbc0>)
   1710c:	e693      	b.n	16e36 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1710e:	4040      	eors	r0, r0
   17110:	f380 8811 	msr	BASEPRI, r0
   17114:	f04f 0004 	mov.w	r0, #4
   17118:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1711a:	2201      	movs	r2, #1
   1711c:	4611      	mov	r1, r2
   1711e:	2000      	movs	r0, #0
   17120:	f7f9 fa5e 	bl	105e0 <mayfly_enable>
		return 0;
   17124:	f04f 0900 	mov.w	r9, #0
   17128:	e6a1      	b.n	16e6e <event_connection_prepare+0x83e>
			return 1;
   1712a:	f04f 0901 	mov.w	r9, #1
   1712e:	e69e      	b.n	16e6e <event_connection_prepare+0x83e>
	return 1;
   17130:	f04f 0901 	mov.w	r9, #1
   17134:	e69b      	b.n	16e6e <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   17136:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1713a:	b9f3      	cbnz	r3, 1717a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1713c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   17140:	1aeb      	subs	r3, r5, r3
   17142:	b29b      	uxth	r3, r3
   17144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   17148:	f280 80b3 	bge.w	172b2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1714c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17150:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   17154:	f104 0817 	add.w	r8, r4, #23
   17158:	2205      	movs	r2, #5
   1715a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   1715e:	4640      	mov	r0, r8
   17160:	f7e9 f8ae 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17164:	2105      	movs	r1, #5
   17166:	4640      	mov	r0, r8
   17168:	f7f9 fc3d 	bl	109e6 <util_ones_count_get>
		conn->data_chan_count =
   1716c:	7f63      	ldrb	r3, [r4, #29]
   1716e:	f360 0305 	bfi	r3, r0, #0, #6
   17172:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   17174:	2301      	movs	r3, #1
   17176:	7723      	strb	r3, [r4, #28]
   17178:	e09b      	b.n	172b2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1717a:	481e      	ldr	r0, [pc, #120]	; (171f4 <event_connection_prepare+0xbc4>)
   1717c:	f7f9 fbaf 	bl	108de <mem_acquire>
		if (node_tx) {
   17180:	4680      	mov	r8, r0
   17182:	2800      	cmp	r0, #0
   17184:	f000 8095 	beq.w	172b2 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   17188:	2300      	movs	r3, #0
   1718a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   1718e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17190:	442b      	add	r3, r5
   17192:	b29b      	uxth	r3, r3
   17194:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   17196:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1719a:	7903      	ldrb	r3, [r0, #4]
   1719c:	f043 0303 	orr.w	r3, r3, #3
   171a0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   171a2:	2308      	movs	r3, #8
   171a4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   171a6:	2301      	movs	r3, #1
   171a8:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   171aa:	2205      	movs	r2, #5
   171ac:	f104 0179 	add.w	r1, r4, #121	; 0x79
   171b0:	3008      	adds	r0, #8
   171b2:	f7e9 f885 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   171b6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   171ba:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   171be:	4641      	mov	r1, r8
   171c0:	4620      	mov	r0, r4
   171c2:	f7fb fe1f 	bl	12e04 <ctrl_tx_enqueue>
   171c6:	e074      	b.n	172b2 <event_connection_prepare+0xc82>
   171c8:	1afd498d 	.word	0x1afd498d
   171cc:	00000007 	.word	0x00000007
   171d0:	000147bd 	.word	0x000147bd
   171d4:	d1b71759 	.word	0xd1b71759
   171d8:	2000bd40 	.word	0x2000bd40
   171dc:	000144f1 	.word	0x000144f1
   171e0:	20000f7c 	.word	0x20000f7c
   171e4:	09ce5400 	.word	0x09ce5400
   171e8:	000336b8 	.word	0x000336b8
   171ec:	431bde83 	.word	0x431bde83
   171f0:	00017b8d 	.word	0x00017b8d
   171f4:	200010d4 	.word	0x200010d4
   171f8:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   171fc:	48d9      	ldr	r0, [pc, #868]	; (17564 <event_connection_prepare+0xf34>)
   171fe:	f7f9 fb6e 	bl	108de <mem_acquire>
	if (node_tx) {
   17202:	4680      	mov	r8, r0
   17204:	2800      	cmp	r0, #0
   17206:	d054      	beq.n	172b2 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   17208:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   1720c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17210:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   17214:	f994 301d 	ldrsb.w	r3, [r4, #29]
   17218:	2b00      	cmp	r3, #0
   1721a:	f2c0 808c 	blt.w	17336 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1721e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   17222:	4653      	mov	r3, sl
   17224:	2200      	movs	r2, #0
   17226:	f104 0193 	add.w	r1, r4, #147	; 0x93
   1722a:	f104 0083 	add.w	r0, r4, #131	; 0x83
   1722e:	f7f9 fc63 	bl	10af8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   17232:	2210      	movs	r2, #16
   17234:	4651      	mov	r1, sl
   17236:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   1723a:	f7e9 f841 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   1723e:	2208      	movs	r2, #8
   17240:	f504 7189 	add.w	r1, r4, #274	; 0x112
   17244:	f204 1033 	addw	r0, r4, #307	; 0x133
   17248:	f7e9 f83a 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   1724c:	2300      	movs	r3, #0
   1724e:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   17252:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   17256:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   1725a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   1725e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   17262:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   17266:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   1726a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   1726e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   17272:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   17276:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   1727a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   1727e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   17282:	f363 0200 	bfi	r2, r3, #0, #1
   17286:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   1728a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1728e:	f043 0301 	orr.w	r3, r3, #1
   17292:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   17296:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   1729a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1729e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   172a2:	4649      	mov	r1, r9
   172a4:	4620      	mov	r0, r4
   172a6:	f7fb fe9d 	bl	12fe4 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   172aa:	4641      	mov	r1, r8
   172ac:	4620      	mov	r0, r4
   172ae:	f7fb fda9 	bl	12e04 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   172b2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   172b6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   172ba:	429a      	cmp	r2, r3
   172bc:	d021      	beq.n	17302 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   172be:	2305      	movs	r3, #5
   172c0:	2200      	movs	r2, #0
   172c2:	4611      	mov	r1, r2
   172c4:	4610      	mov	r0, r2
   172c6:	f7fc fa77 	bl	137b8 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   172ca:	48a6      	ldr	r0, [pc, #664]	; (17564 <event_connection_prepare+0xf34>)
   172cc:	f7f9 fb07 	bl	108de <mem_acquire>
		if (node_tx) {
   172d0:	4601      	mov	r1, r0
   172d2:	b1b0      	cbz	r0, 17302 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   172d4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   172d8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   172dc:	7903      	ldrb	r3, [r0, #4]
   172de:	f043 0303 	orr.w	r3, r3, #3
   172e2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   172e4:	2302      	movs	r3, #2
   172e6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   172e8:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   172ea:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   172ee:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   172f0:	4620      	mov	r0, r4
   172f2:	f7fb fd87 	bl	12e04 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   172f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   172f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   172fc:	2b01      	cmp	r3, #1
   172fe:	f240 82a6 	bls.w	1784e <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   17302:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   17306:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1730a:	429a      	cmp	r2, r3
   1730c:	f000 83f9 	beq.w	17b02 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   17310:	2305      	movs	r3, #5
   17312:	2200      	movs	r2, #0
   17314:	4611      	mov	r1, r2
   17316:	4610      	mov	r0, r2
   17318:	f7fc fa4e 	bl	137b8 <event_stop>
	switch (conn->llcp_length.state) {
   1731c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   17320:	f003 0303 	and.w	r3, r3, #3
   17324:	2b03      	cmp	r3, #3
   17326:	f200 8427 	bhi.w	17b78 <event_connection_prepare+0x1548>
   1732a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1732e:	0299      	.short	0x0299
   17330:	03ea03ea 	.word	0x03ea03ea
   17334:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   17336:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1733a:	f003 0348 	and.w	r3, r3, #72	; 0x48
   1733e:	2b08      	cmp	r3, #8
   17340:	d079      	beq.n	17436 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17342:	7903      	ldrb	r3, [r0, #4]
   17344:	f043 0303 	orr.w	r3, r3, #3
   17348:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   1734a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1734e:	b333      	cbz	r3, 1739e <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   17350:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17354:	f013 0f20 	tst.w	r3, #32
   17358:	d00e      	beq.n	17378 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   1735a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   1735e:	f013 0f04 	tst.w	r3, #4
   17362:	d009      	beq.n	17378 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   17364:	2311      	movs	r3, #17
   17366:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17368:	2303      	movs	r3, #3
   1736a:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   1736c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17370:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   17372:	2302      	movs	r3, #2
   17374:	7143      	strb	r3, [r0, #5]
   17376:	e009      	b.n	1738c <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17378:	230d      	movs	r3, #13
   1737a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   1737e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17382:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   17386:	2301      	movs	r3, #1
   17388:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   1738c:	f898 3005 	ldrb.w	r3, [r8, #5]
   17390:	3301      	adds	r3, #1
   17392:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   17396:	2300      	movs	r3, #0
   17398:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1739c:	e785      	b.n	172aa <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   1739e:	4620      	mov	r0, r4
   173a0:	f7fd fa38 	bl	14814 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   173a4:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   173a8:	464b      	mov	r3, r9
   173aa:	2200      	movs	r2, #0
   173ac:	f104 0193 	add.w	r1, r4, #147	; 0x93
   173b0:	f104 0083 	add.w	r0, r4, #131	; 0x83
   173b4:	f7f9 fba0 	bl	10af8 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   173b8:	2210      	movs	r2, #16
   173ba:	4649      	mov	r1, r9
   173bc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   173c0:	f7e8 ff7e 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   173c4:	2208      	movs	r2, #8
   173c6:	f504 7189 	add.w	r1, r4, #274	; 0x112
   173ca:	f204 1033 	addw	r0, r4, #307	; 0x133
   173ce:	f7e8 ff77 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   173d2:	2300      	movs	r3, #0
   173d4:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   173d8:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   173dc:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   173e0:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   173e4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   173e8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   173ec:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   173f0:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   173f4:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   173f8:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   173fc:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   17400:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   17404:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   17408:	f042 0201 	orr.w	r2, r2, #1
   1740c:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   17410:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   17414:	f363 0200 	bfi	r2, r3, #0, #1
   17418:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   1741c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17420:	f043 0310 	orr.w	r3, r3, #16
   17424:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   17428:	2301      	movs	r3, #1
   1742a:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   1742e:	2305      	movs	r3, #5
   17430:	f888 3007 	strb.w	r3, [r8, #7]
   17434:	e739      	b.n	172aa <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   17436:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1756c <event_connection_prepare+0xf3c>
   1743a:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   1743e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   17442:	f043 0320 	orr.w	r3, r3, #32
   17446:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   1744a:	2100      	movs	r1, #0
   1744c:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   17450:	f7fb fdc8 	bl	12fe4 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   17454:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   17458:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1745c:	f36f 0282 	bfc	r2, #2, #1
   17460:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   17464:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   17468:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1746c:	f36f 02c3 	bfc	r2, #3, #1
   17470:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   17474:	e719      	b.n	172aa <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   17476:	483b      	ldr	r0, [pc, #236]	; (17564 <event_connection_prepare+0xf34>)
   17478:	f7f9 fa31 	bl	108de <mem_acquire>
	if (node_tx) {
   1747c:	4680      	mov	r8, r0
   1747e:	2800      	cmp	r0, #0
   17480:	f43f af17 	beq.w	172b2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   17484:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17488:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   1748c:	4b36      	ldr	r3, [pc, #216]	; (17568 <event_connection_prepare+0xf38>)
   1748e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17492:	7903      	ldrb	r3, [r0, #4]
   17494:	f043 0303 	orr.w	r3, r3, #3
   17498:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1749a:	2309      	movs	r3, #9
   1749c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1749e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   174a2:	2b00      	cmp	r3, #0
   174a4:	db1e      	blt.n	174e4 <event_connection_prepare+0xeb4>
   174a6:	2308      	movs	r3, #8
   174a8:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   174ac:	2208      	movs	r2, #8
   174ae:	2100      	movs	r1, #0
   174b0:	eb08 0002 	add.w	r0, r8, r2
   174b4:	f014 fde2 	bl	2c07c <memset>
			conn->llcp_features & 0xFF;
   174b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   174bc:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   174c0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   174c4:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   174c6:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   174ca:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   174ce:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   174d2:	4641      	mov	r1, r8
   174d4:	4620      	mov	r0, r4
   174d6:	f7fb fc95 	bl	12e04 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   174da:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   174de:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   174e2:	e6e6      	b.n	172b2 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   174e4:	230e      	movs	r3, #14
   174e6:	e7df      	b.n	174a8 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   174e8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   174ec:	f013 0f01 	tst.w	r3, #1
   174f0:	d03e      	beq.n	17570 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   174f2:	f013 0f02 	tst.w	r3, #2
   174f6:	d076      	beq.n	175e6 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   174f8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   174fc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   17500:	4b1a      	ldr	r3, [pc, #104]	; (1756c <event_connection_prepare+0xf3c>)
   17502:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17506:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1750a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1750c:	429a      	cmp	r2, r3
   1750e:	d358      	bcc.n	175c2 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   17510:	4b16      	ldr	r3, [pc, #88]	; (1756c <event_connection_prepare+0xf3c>)
   17512:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17516:	1ad3      	subs	r3, r2, r3
   17518:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1751a:	2b01      	cmp	r3, #1
   1751c:	d95b      	bls.n	175d6 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   1751e:	4b13      	ldr	r3, [pc, #76]	; (1756c <event_connection_prepare+0xf3c>)
   17520:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17524:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   1752c:	2b00      	cmp	r3, #0
   1752e:	d054      	beq.n	175da <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17530:	8c22      	ldrh	r2, [r4, #32]
   17532:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17534:	2201      	movs	r2, #1
   17536:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17538:	7a1a      	ldrb	r2, [r3, #8]
   1753a:	f042 0203 	orr.w	r2, r2, #3
   1753e:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   17540:	2206      	movs	r2, #6
   17542:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   17544:	220c      	movs	r2, #12
   17546:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   17548:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   1754c:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   1754e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   17552:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   17556:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1755a:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   1755e:	f7fe fa05 	bl	1596c <packet_rx_enqueue>
   17562:	e6a6      	b.n	172b2 <event_connection_prepare+0xc82>
   17564:	200010d4 	.word	0x200010d4
   17568:	000141ff 	.word	0x000141ff
   1756c:	20000f7c 	.word	0x20000f7c
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   17570:	48b9      	ldr	r0, [pc, #740]	; (17858 <event_connection_prepare+0x1228>)
   17572:	f7f9 f9b4 	bl	108de <mem_acquire>
		if (node_tx) {
   17576:	4601      	mov	r1, r0
   17578:	2800      	cmp	r0, #0
   1757a:	f43f ae9a 	beq.w	172b2 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   1757e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17582:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   17586:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1758a:	f043 0301 	orr.w	r3, r3, #1
   1758e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17592:	7903      	ldrb	r3, [r0, #4]
   17594:	f043 0303 	orr.w	r3, r3, #3
   17598:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1759a:	2306      	movs	r3, #6
   1759c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1759e:	230c      	movs	r3, #12
   175a0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   175a2:	2309      	movs	r3, #9
   175a4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   175a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175aa:	7243      	strb	r3, [r0, #9]
   175ac:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   175ae:	72c3      	strb	r3, [r0, #11]
   175b0:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   175b2:	4620      	mov	r0, r4
   175b4:	f7fb fc26 	bl	12e04 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   175b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   175bc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   175c0:	e677      	b.n	172b2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   175c2:	49a6      	ldr	r1, [pc, #664]	; (1785c <event_connection_prepare+0x122c>)
   175c4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   175c8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   175cc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   175ce:	fa52 f383 	uxtab	r3, r2, r3
   175d2:	b2db      	uxtb	r3, r3
   175d4:	e7a1      	b.n	1751a <event_connection_prepare+0xeea>
		return 0;
   175d6:	2300      	movs	r3, #0
   175d8:	e7a8      	b.n	1752c <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   175da:	4040      	eors	r0, r0
   175dc:	f380 8811 	msr	BASEPRI, r0
   175e0:	f04f 0004 	mov.w	r0, #4
   175e4:	df02      	svc	2
		LL_ASSERT(0);
   175e6:	4040      	eors	r0, r0
   175e8:	f380 8811 	msr	BASEPRI, r0
   175ec:	f04f 0004 	mov.w	r0, #4
   175f0:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   175f2:	4899      	ldr	r0, [pc, #612]	; (17858 <event_connection_prepare+0x1228>)
   175f4:	f7f9 f973 	bl	108de <mem_acquire>
	if (node_tx) {
   175f8:	4601      	mov	r1, r0
   175fa:	2800      	cmp	r0, #0
   175fc:	f43f ae59 	beq.w	172b2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   17600:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17604:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17608:	7903      	ldrb	r3, [r0, #4]
   1760a:	f043 0303 	orr.w	r3, r3, #3
   1760e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   17610:	2301      	movs	r3, #1
   17612:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   17614:	2312      	movs	r3, #18
   17616:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   17618:	4620      	mov	r0, r4
   1761a:	f7fb fbf3 	bl	12e04 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1761e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   17622:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   17626:	e644      	b.n	172b2 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   17628:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1762c:	f012 0f01 	tst.w	r2, #1
   17630:	d16b      	bne.n	1770a <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   17632:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   17636:	1aeb      	subs	r3, r5, r3
   17638:	b29b      	uxth	r3, r3
   1763a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1763e:	f6bf ae38 	bge.w	172b2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   17642:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17646:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   1764a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   1764e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   17652:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   17656:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   1765a:	f012 0f1c 	tst.w	r2, #28
   1765e:	d009      	beq.n	17674 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   17660:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17664:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17668:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   1766c:	f363 0ec5 	bfi	lr, r3, #3, #3
   17670:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   17674:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   17678:	d008      	beq.n	1768c <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1767a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1767e:	095b      	lsrs	r3, r3, #5
   17680:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   17684:	f363 0e02 	bfi	lr, r3, #0, #3
   17688:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1768c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   17690:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   17694:	f36e 13c7 	bfi	r3, lr, #7, #1
   17698:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1769c:	f012 0f02 	tst.w	r2, #2
   176a0:	d105      	bne.n	176ae <event_connection_prepare+0x107e>
   176a2:	b2db      	uxtb	r3, r3
   176a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   176a8:	4299      	cmp	r1, r3
   176aa:	f000 80b0 	beq.w	1780e <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   176ae:	4b6b      	ldr	r3, [pc, #428]	; (1785c <event_connection_prepare+0x122c>)
   176b0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   176b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   176b8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   176ba:	429a      	cmp	r2, r3
   176bc:	f0c0 80af 	bcc.w	1781e <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   176c0:	4b66      	ldr	r3, [pc, #408]	; (1785c <event_connection_prepare+0x122c>)
   176c2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   176c6:	1ad3      	subs	r3, r2, r3
   176c8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   176ca:	2b01      	cmp	r3, #1
   176cc:	f240 80b1 	bls.w	17832 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   176d0:	4b62      	ldr	r3, [pc, #392]	; (1785c <event_connection_prepare+0x122c>)
   176d2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   176d6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   176da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   176de:	2b00      	cmp	r3, #0
   176e0:	f000 80a9 	beq.w	17836 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   176e4:	8c22      	ldrh	r2, [r4, #32]
   176e6:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   176e8:	220c      	movs	r2, #12
   176ea:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   176ec:	2200      	movs	r2, #0
   176ee:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   176f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   176f4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   176f8:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   176fa:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   176fe:	f3c2 0202 	ubfx	r2, r2, #0, #3
   17702:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   17704:	f7fe f932 	bl	1596c <packet_rx_enqueue>
   17708:	e5d3      	b.n	172b2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1770a:	4853      	ldr	r0, [pc, #332]	; (17858 <event_connection_prepare+0x1228>)
   1770c:	f7f9 f8e7 	bl	108de <mem_acquire>
		if (node_tx) {
   17710:	4680      	mov	r8, r0
   17712:	2800      	cmp	r0, #0
   17714:	f43f adcd 	beq.w	172b2 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   17718:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1771c:	f36f 0300 	bfc	r3, #0, #1
   17720:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   17724:	b2db      	uxtb	r3, r3
   17726:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1772a:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   1772e:	d147      	bne.n	177c0 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   17730:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17734:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   17738:	2300      	movs	r3, #0
   1773a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1773e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17742:	f013 0f02 	tst.w	r3, #2
   17746:	d041      	beq.n	177cc <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   17748:	4b44      	ldr	r3, [pc, #272]	; (1785c <event_connection_prepare+0x122c>)
   1774a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1774e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17752:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17754:	429a      	cmp	r2, r3
   17756:	d321      	bcc.n	1779c <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   17758:	4b40      	ldr	r3, [pc, #256]	; (1785c <event_connection_prepare+0x122c>)
   1775a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1775e:	1ad3      	subs	r3, r2, r3
   17760:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17762:	2b01      	cmp	r3, #1
   17764:	d924      	bls.n	177b0 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   17766:	4b3d      	ldr	r3, [pc, #244]	; (1785c <event_connection_prepare+0x122c>)
   17768:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1776c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   17774:	b1f3      	cbz	r3, 177b4 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   17776:	8c22      	ldrh	r2, [r4, #32]
   17778:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1777a:	220c      	movs	r2, #12
   1777c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1777e:	2200      	movs	r2, #0
   17780:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   17782:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   17786:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1778a:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   1778c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   17790:	f3c2 0202 	ubfx	r2, r2, #0, #3
   17794:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   17796:	f7fe f8e9 	bl	1596c <packet_rx_enqueue>
   1779a:	e017      	b.n	177cc <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   1779c:	492f      	ldr	r1, [pc, #188]	; (1785c <event_connection_prepare+0x122c>)
   1779e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   177a2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   177a6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   177a8:	fa52 f383 	uxtab	r3, r2, r3
   177ac:	b2db      	uxtb	r3, r3
   177ae:	e7d8      	b.n	17762 <event_connection_prepare+0x1132>
		return 0;
   177b0:	2300      	movs	r3, #0
   177b2:	e7df      	b.n	17774 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   177b4:	4040      	eors	r0, r0
   177b6:	f380 8811 	msr	BASEPRI, r0
   177ba:	f04f 0004 	mov.w	r0, #4
   177be:	df02      	svc	2
								 conn->latency +
   177c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   177c2:	442b      	add	r3, r5
   177c4:	b29b      	uxth	r3, r3
								 conn->latency +
   177c6:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   177c8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   177cc:	f898 3004 	ldrb.w	r3, [r8, #4]
   177d0:	f043 0303 	orr.w	r3, r3, #3
   177d4:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   177d8:	2305      	movs	r3, #5
   177da:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   177de:	2318      	movs	r3, #24
   177e0:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   177e4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   177e8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   177ec:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   177f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   177f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
   177f8:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   177fc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   17800:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   17804:	4641      	mov	r1, r8
   17806:	4620      	mov	r0, r4
   17808:	f7fb fafc 	bl	12e04 <ctrl_tx_enqueue>
   1780c:	e551      	b.n	172b2 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   1780e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   17812:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   17816:	4298      	cmp	r0, r3
   17818:	f47f af49 	bne.w	176ae <event_connection_prepare+0x107e>
   1781c:	e549      	b.n	172b2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1781e:	490f      	ldr	r1, [pc, #60]	; (1785c <event_connection_prepare+0x122c>)
   17820:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17824:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17828:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1782a:	fa52 f383 	uxtab	r3, r2, r3
   1782e:	b2db      	uxtb	r3, r3
   17830:	e74b      	b.n	176ca <event_connection_prepare+0x109a>
		return 0;
   17832:	2300      	movs	r3, #0
   17834:	e753      	b.n	176de <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   17836:	4040      	eors	r0, r0
   17838:	f380 8811 	msr	BASEPRI, r0
   1783c:	f04f 0004 	mov.w	r0, #4
   17840:	df02      	svc	2
			LL_ASSERT(0);
   17842:	4040      	eors	r0, r0
   17844:	f380 8811 	msr	BASEPRI, r0
   17848:	f04f 0004 	mov.w	r0, #4
   1784c:	df02      	svc	2
				conn->procedure_expire++;
   1784e:	3301      	adds	r3, #1
   17850:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   17854:	e555      	b.n	17302 <event_connection_prepare+0xcd2>
   17856:	bf00      	nop
   17858:	200010d4 	.word	0x200010d4
   1785c:	20000f7c 	.word	0x20000f7c
	if (_radio.packet_rx_acquire >=
   17860:	4bbf      	ldr	r3, [pc, #764]	; (17b60 <event_connection_prepare+0x1530>)
   17862:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17866:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1786a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1786c:	429a      	cmp	r2, r3
   1786e:	d346      	bcc.n	178fe <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   17870:	4bbb      	ldr	r3, [pc, #748]	; (17b60 <event_connection_prepare+0x1530>)
   17872:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17876:	eba2 0808 	sub.w	r8, r2, r8
   1787a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   1787e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   17882:	4bb7      	ldr	r3, [pc, #732]	; (17b60 <event_connection_prepare+0x1530>)
   17884:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   17888:	f7f9 f85d 	bl	10946 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1788c:	4440      	add	r0, r8
   1788e:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   17890:	28ff      	cmp	r0, #255	; 0xff
   17892:	d840      	bhi.n	17916 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   17894:	4bb2      	ldr	r3, [pc, #712]	; (17b60 <event_connection_prepare+0x1530>)
   17896:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1789a:	4298      	cmp	r0, r3
   1789c:	f040 8131 	bne.w	17b02 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   178a0:	48b0      	ldr	r0, [pc, #704]	; (17b64 <event_connection_prepare+0x1534>)
   178a2:	f7f9 f81c 	bl	108de <mem_acquire>
		if (!node_tx) {
   178a6:	4601      	mov	r1, r0
   178a8:	2800      	cmp	r0, #0
   178aa:	f000 812a 	beq.w	17b02 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   178ae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   178b2:	2201      	movs	r2, #1
   178b4:	f362 0301 	bfi	r3, r2, #0, #2
   178b8:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   178bc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   178c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   178c2:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   178c6:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   178c8:	7903      	ldrb	r3, [r0, #4]
   178ca:	f043 0303 	orr.w	r3, r3, #3
   178ce:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   178d0:	2309      	movs	r3, #9
   178d2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   178d4:	2314      	movs	r3, #20
   178d6:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   178d8:	231b      	movs	r3, #27
   178da:	7203      	strb	r3, [r0, #8]
   178dc:	2300      	movs	r3, #0
   178de:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   178e0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   178e2:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   178e4:	2348      	movs	r3, #72	; 0x48
   178e6:	7283      	strb	r3, [r0, #10]
   178e8:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   178ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   178ec:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   178ee:	4620      	mov	r0, r4
   178f0:	f7fb fa88 	bl	12e04 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   178f4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   178f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   178fc:	e101      	b.n	17b02 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   178fe:	4b98      	ldr	r3, [pc, #608]	; (17b60 <event_connection_prepare+0x1530>)
   17900:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   17904:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17908:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1790c:	fa52 f888 	uxtab	r8, r2, r8
   17910:	fa5f f888 	uxtb.w	r8, r8
   17914:	e7b3      	b.n	1787e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   17916:	4040      	eors	r0, r0
   17918:	f380 8811 	msr	BASEPRI, r0
   1791c:	f04f 0004 	mov.w	r0, #4
   17920:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   17922:	4b8f      	ldr	r3, [pc, #572]	; (17b60 <event_connection_prepare+0x1530>)
   17924:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17928:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1792c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1792e:	429a      	cmp	r2, r3
   17930:	d352      	bcc.n	179d8 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   17932:	4b8b      	ldr	r3, [pc, #556]	; (17b60 <event_connection_prepare+0x1530>)
   17934:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17938:	eba2 0808 	sub.w	r8, r2, r8
   1793c:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   17940:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   17944:	4b86      	ldr	r3, [pc, #536]	; (17b60 <event_connection_prepare+0x1530>)
   17946:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   1794a:	f7f8 fffc 	bl	10946 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1794e:	4440      	add	r0, r8
   17950:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   17952:	28ff      	cmp	r0, #255	; 0xff
   17954:	d84c      	bhi.n	179f0 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   17956:	4b82      	ldr	r3, [pc, #520]	; (17b60 <event_connection_prepare+0x1530>)
   17958:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1795c:	4298      	cmp	r0, r3
   1795e:	d14d      	bne.n	179fc <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   17960:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17964:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   17968:	2100      	movs	r1, #0
   1796a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   1796e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 17b60 <event_connection_prepare+0x1530>
   17972:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   17976:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1797a:	f361 02c3 	bfi	r2, r1, #3, #1
   1797e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   17982:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   17986:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   17988:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   1798c:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   1798e:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   17992:	f7f8 ffd8 	bl	10946 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   17996:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   1799a:	b10b      	cbz	r3, 179a0 <event_connection_prepare+0x1370>
			free_count_conn++;
   1799c:	3001      	adds	r0, #1
   1799e:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   179a0:	4b6f      	ldr	r3, [pc, #444]	; (17b60 <event_connection_prepare+0x1530>)
   179a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   179a6:	b10b      	cbz	r3, 179ac <event_connection_prepare+0x137c>
			free_count_conn++;
   179a8:	3001      	adds	r0, #1
   179aa:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   179ac:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   179b0:	f109 090e 	add.w	r9, r9, #14
   179b4:	fa1f f989 	uxth.w	r9, r9
   179b8:	f029 0903 	bic.w	r9, r9, #3
   179bc:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   179c0:	3001      	adds	r0, #1
   179c2:	4b67      	ldr	r3, [pc, #412]	; (17b60 <event_connection_prepare+0x1530>)
   179c4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   179c8:	4298      	cmp	r0, r3
   179ca:	d038      	beq.n	17a3e <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   179cc:	4b64      	ldr	r3, [pc, #400]	; (17b60 <event_connection_prepare+0x1530>)
   179ce:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   179d2:	4599      	cmp	r9, r3
   179d4:	d833      	bhi.n	17a3e <event_connection_prepare+0x140e>
   179d6:	e066      	b.n	17aa6 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   179d8:	4b61      	ldr	r3, [pc, #388]	; (17b60 <event_connection_prepare+0x1530>)
   179da:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   179de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   179e2:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   179e6:	fa52 f888 	uxtab	r8, r2, r8
   179ea:	fa5f f888 	uxtb.w	r8, r8
   179ee:	e7a7      	b.n	17940 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   179f0:	4040      	eors	r0, r0
   179f2:	f380 8811 	msr	BASEPRI, r0
   179f6:	f04f 0004 	mov.w	r0, #4
   179fa:	df02      	svc	2
			LL_ASSERT(0);
   179fc:	4040      	eors	r0, r0
   179fe:	f380 8811 	msr	BASEPRI, r0
   17a02:	f04f 0004 	mov.w	r0, #4
   17a06:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   17a08:	3b01      	subs	r3, #1
   17a0a:	4a55      	ldr	r2, [pc, #340]	; (17b60 <event_connection_prepare+0x1530>)
   17a0c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   17a10:	4f53      	ldr	r7, [pc, #332]	; (17b60 <event_connection_prepare+0x1530>)
   17a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   17a16:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   17a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   17a1e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   17a22:	6818      	ldr	r0, [r3, #0]
   17a24:	f7f8 ff77 	bl	10916 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   17a28:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   17a2c:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   17a30:	3a01      	subs	r2, #1
   17a32:	4293      	cmp	r3, r2
   17a34:	da14      	bge.n	17a60 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   17a36:	3301      	adds	r3, #1
   17a38:	4a49      	ldr	r2, [pc, #292]	; (17b60 <event_connection_prepare+0x1530>)
   17a3a:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   17a3e:	4a48      	ldr	r2, [pc, #288]	; (17b60 <event_connection_prepare+0x1530>)
   17a40:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   17a44:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   17a48:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   17a4a:	4293      	cmp	r3, r2
   17a4c:	d00e      	beq.n	17a6c <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   17a4e:	2b00      	cmp	r3, #0
   17a50:	d1da      	bne.n	17a08 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   17a52:	4a43      	ldr	r2, [pc, #268]	; (17b60 <event_connection_prepare+0x1530>)
   17a54:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   17a58:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   17a5a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   17a5e:	e7d7      	b.n	17a10 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   17a60:	4040      	eors	r0, r0
   17a62:	f380 8811 	msr	BASEPRI, r0
   17a66:	f04f 0004 	mov.w	r0, #4
   17a6a:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   17a6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   17a6e:	2b29      	cmp	r3, #41	; 0x29
   17a70:	d85f      	bhi.n	17b32 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   17a72:	2234      	movs	r2, #52	; 0x34
   17a74:	4b3a      	ldr	r3, [pc, #232]	; (17b60 <event_connection_prepare+0x1530>)
   17a76:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   17a7a:	4b39      	ldr	r3, [pc, #228]	; (17b60 <event_connection_prepare+0x1530>)
   17a7c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   17a80:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   17a84:	fbb2 f2f1 	udiv	r2, r2, r1
   17a88:	b2d2      	uxtb	r2, r2
   17a8a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   17a8e:	2a00      	cmp	r2, #0
   17a90:	d053      	beq.n	17b3a <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   17a92:	4833      	ldr	r0, [pc, #204]	; (17b60 <event_connection_prepare+0x1530>)
   17a94:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   17a98:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   17a9c:	f7f8 fefa 	bl	10894 <mem_init>
			packet_rx_allocate(4);
   17aa0:	2004      	movs	r0, #4
   17aa2:	f7fb fc59 	bl	13358 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   17aa6:	4b2e      	ldr	r3, [pc, #184]	; (17b60 <event_connection_prepare+0x1530>)
   17aa8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17aac:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17ab0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17ab2:	429a      	cmp	r2, r3
   17ab4:	d347      	bcc.n	17b46 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   17ab6:	4b2a      	ldr	r3, [pc, #168]	; (17b60 <event_connection_prepare+0x1530>)
   17ab8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17abc:	1ad3      	subs	r3, r2, r3
   17abe:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17ac0:	2b01      	cmp	r3, #1
   17ac2:	d94a      	bls.n	17b5a <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   17ac4:	4b26      	ldr	r3, [pc, #152]	; (17b60 <event_connection_prepare+0x1530>)
   17ac6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17aca:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   17ad2:	2b00      	cmp	r3, #0
   17ad4:	d04a      	beq.n	17b6c <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   17ad6:	8c22      	ldrh	r2, [r4, #32]
   17ad8:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17ada:	2201      	movs	r2, #1
   17adc:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   17ade:	7a1a      	ldrb	r2, [r3, #8]
   17ae0:	f042 0203 	orr.w	r2, r2, #3
   17ae4:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   17ae6:	2209      	movs	r2, #9
   17ae8:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   17aea:	2215      	movs	r2, #21
   17aec:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   17aee:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   17af0:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   17af2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   17af4:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   17af6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17af8:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   17afa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   17afc:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   17afe:	f7fd ff35 	bl	1596c <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   17b02:	1d23      	adds	r3, r4, #4
   17b04:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   17b06:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   17b08:	3207      	adds	r2, #7
   17b0a:	b2d2      	uxtb	r2, r2
   17b0c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   17b10:	2800      	cmp	r0, #0
   17b12:	db37      	blt.n	17b84 <event_connection_prepare+0x1554>
   17b14:	4814      	ldr	r0, [pc, #80]	; (17b68 <event_connection_prepare+0x1538>)
   17b16:	9403      	str	r4, [sp, #12]
   17b18:	9002      	str	r0, [sp, #8]
   17b1a:	9201      	str	r2, [sp, #4]
   17b1c:	9100      	str	r1, [sp, #0]
   17b1e:	4622      	mov	r2, r4
   17b20:	990a      	ldr	r1, [sp, #40]	; 0x28
   17b22:	4630      	mov	r0, r6
   17b24:	f7fe fc7e 	bl	16424 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   17b28:	3501      	adds	r5, #1
   17b2a:	8465      	strh	r5, [r4, #34]	; 0x22
}
   17b2c:	b00f      	add	sp, #60	; 0x3c
   17b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   17b32:	4b0b      	ldr	r3, [pc, #44]	; (17b60 <event_connection_prepare+0x1530>)
   17b34:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   17b38:	e79f      	b.n	17a7a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   17b3a:	4040      	eors	r0, r0
   17b3c:	f380 8811 	msr	BASEPRI, r0
   17b40:	f04f 0004 	mov.w	r0, #4
   17b44:	df02      	svc	2
		return (_radio.packet_rx_count -
   17b46:	4906      	ldr	r1, [pc, #24]	; (17b60 <event_connection_prepare+0x1530>)
   17b48:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17b4c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17b50:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17b52:	fa52 f383 	uxtab	r3, r2, r3
   17b56:	b2db      	uxtb	r3, r3
   17b58:	e7b2      	b.n	17ac0 <event_connection_prepare+0x1490>
		return 0;
   17b5a:	2300      	movs	r3, #0
   17b5c:	e7b9      	b.n	17ad2 <event_connection_prepare+0x14a2>
   17b5e:	bf00      	nop
   17b60:	20000f7c 	.word	0x20000f7c
   17b64:	200010d4 	.word	0x200010d4
   17b68:	00017fe1 	.word	0x00017fe1
		LL_ASSERT(node_rx);
   17b6c:	4040      	eors	r0, r0
   17b6e:	f380 8811 	msr	BASEPRI, r0
   17b72:	f04f 0004 	mov.w	r0, #4
   17b76:	df02      	svc	2
		LL_ASSERT(0);
   17b78:	4040      	eors	r0, r0
   17b7a:	f380 8811 	msr	BASEPRI, r0
   17b7e:	f04f 0004 	mov.w	r0, #4
   17b82:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   17b84:	4800      	ldr	r0, [pc, #0]	; (17b88 <event_connection_prepare+0x1558>)
   17b86:	e7c6      	b.n	17b16 <event_connection_prepare+0x14e6>
   17b88:	0001811d 	.word	0x0001811d

00017b8c <event_slave_prepare>:
{
   17b8c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   17b8e:	f7fe fd4f 	bl	16630 <event_connection_prepare>
   17b92:	bd08      	pop	{r3, pc}

00017b94 <event_master_prepare>:
{
   17b94:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   17b96:	f7fe fd4b 	bl	16630 <event_connection_prepare>
   17b9a:	bd08      	pop	{r3, pc}

00017b9c <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   17b9c:	4b20      	ldr	r3, [pc, #128]	; (17c20 <event_scan_prepare+0x84>)
   17b9e:	7b1b      	ldrb	r3, [r3, #12]
   17ba0:	bb23      	cbnz	r3, 17bec <event_scan_prepare+0x50>
{
   17ba2:	b530      	push	{r4, r5, lr}
   17ba4:	b085      	sub	sp, #20
   17ba6:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   17ba8:	4c1d      	ldr	r4, [pc, #116]	; (17c20 <event_scan_prepare+0x84>)
   17baa:	2306      	movs	r3, #6
   17bac:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   17bae:	2200      	movs	r2, #0
   17bb0:	9203      	str	r2, [sp, #12]
   17bb2:	4a1c      	ldr	r2, [pc, #112]	; (17c24 <event_scan_prepare+0x88>)
   17bb4:	9202      	str	r2, [sp, #8]
   17bb6:	9301      	str	r3, [sp, #4]
   17bb8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   17bbc:	9300      	str	r3, [sp, #0]
   17bbe:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   17bc2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   17bc6:	f7fe fc2d 	bl	16424 <event_common_prepare>
	if (_radio.scanner.conn) {
   17bca:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   17bce:	b15b      	cbz	r3, 17be8 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   17bd0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   17bd4:	2b00      	cmp	r3, #0
   17bd6:	db0f      	blt.n	17bf8 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   17bd8:	4b13      	ldr	r3, [pc, #76]	; (17c28 <event_scan_prepare+0x8c>)
   17bda:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   17bdc:	2201      	movs	r2, #1
   17bde:	4611      	mov	r1, r2
   17be0:	2000      	movs	r0, #0
   17be2:	f7f8 fd3b 	bl	1065c <mayfly_enqueue>
		LL_ASSERT(!retval);
   17be6:	b9a8      	cbnz	r0, 17c14 <event_scan_prepare+0x78>
}
   17be8:	b005      	add	sp, #20
   17bea:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   17bec:	4040      	eors	r0, r0
   17bee:	f380 8811 	msr	BASEPRI, r0
   17bf2:	f04f 0004 	mov.w	r0, #4
   17bf6:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   17bf8:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   17bfc:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   17c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   17c04:	4291      	cmp	r1, r2
   17c06:	bf2c      	ite	cs
   17c08:	ebc3 0301 	rsbcs	r3, r3, r1
   17c0c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   17c10:	441d      	add	r5, r3
   17c12:	e7e1      	b.n	17bd8 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   17c14:	4040      	eors	r0, r0
   17c16:	f380 8811 	msr	BASEPRI, r0
   17c1a:	f04f 0004 	mov.w	r0, #4
   17c1e:	df02      	svc	2
   17c20:	20000f7c 	.word	0x20000f7c
   17c24:	000182b9 	.word	0x000182b9
   17c28:	2000bd30 	.word	0x2000bd30
   17c2c:	00000000 	.word	0x00000000

00017c30 <mayfly_xtal_stop_calc>:
{
   17c30:	b530      	push	{r4, r5, lr}
   17c32:	b08d      	sub	sp, #52	; 0x34
   17c34:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   17c36:	2302      	movs	r3, #2
   17c38:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   17c3a:	23ff      	movs	r3, #255	; 0xff
   17c3c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   17c40:	2300      	movs	r3, #0
   17c42:	930a      	str	r3, [sp, #40]	; 0x28
   17c44:	e012      	b.n	17c6c <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c46:	2101      	movs	r1, #1
   17c48:	2000      	movs	r0, #0
   17c4a:	f7fa fc71 	bl	12530 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   17c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17c50:	2b02      	cmp	r3, #2
   17c52:	d0f8      	beq.n	17c46 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   17c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17c56:	b9cb      	cbnz	r3, 17c8c <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   17c58:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   17c5c:	2aff      	cmp	r2, #255	; 0xff
   17c5e:	d01b      	beq.n	17c98 <mayfly_xtal_stop_calc+0x68>
   17c60:	4b8b      	ldr	r3, [pc, #556]	; (17e90 <mayfly_xtal_stop_calc+0x260>)
   17c62:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   17c66:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   17c68:	429a      	cmp	r2, r3
   17c6a:	db15      	blt.n	17c98 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c6c:	ab0b      	add	r3, sp, #44	; 0x2c
   17c6e:	9302      	str	r3, [sp, #8]
   17c70:	4b88      	ldr	r3, [pc, #544]	; (17e94 <mayfly_xtal_stop_calc+0x264>)
   17c72:	9301      	str	r3, [sp, #4]
   17c74:	ab0a      	add	r3, sp, #40	; 0x28
   17c76:	9300      	str	r3, [sp, #0]
   17c78:	ab09      	add	r3, sp, #36	; 0x24
   17c7a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   17c7e:	2101      	movs	r1, #1
   17c80:	2000      	movs	r0, #0
   17c82:	f7fa fbd5 	bl	12430 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   17c86:	2802      	cmp	r0, #2
   17c88:	d1e4      	bne.n	17c54 <mayfly_xtal_stop_calc+0x24>
   17c8a:	e7e0      	b.n	17c4e <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   17c8c:	4040      	eors	r0, r0
   17c8e:	f380 8811 	msr	BASEPRI, r0
   17c92:	f04f 0004 	mov.w	r0, #4
   17c96:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   17c98:	2aff      	cmp	r2, #255	; 0xff
   17c9a:	d002      	beq.n	17ca2 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   17c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   17c9e:	2ba8      	cmp	r3, #168	; 0xa8
   17ca0:	d91a      	bls.n	17cd8 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   17ca2:	2100      	movs	r1, #0
   17ca4:	2001      	movs	r0, #1
   17ca6:	f7fb fdcd 	bl	13844 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   17caa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   17cae:	1f53      	subs	r3, r2, #5
   17cb0:	b2db      	uxtb	r3, r3
   17cb2:	2bf9      	cmp	r3, #249	; 0xf9
   17cb4:	d80e      	bhi.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   17cb6:	2a06      	cmp	r2, #6
   17cb8:	f200 80d1 	bhi.w	17e5e <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   17cbc:	2a05      	cmp	r2, #5
   17cbe:	f000 80de 	beq.w	17e7e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   17cc2:	2a06      	cmp	r2, #6
   17cc4:	f040 80d5 	bne.w	17e72 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   17cc8:	4873      	ldr	r0, [pc, #460]	; (17e98 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   17cca:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   17cce:	2101      	movs	r1, #1
   17cd0:	f7fe fb80 	bl	163d4 <prepare_normal_set>
}
   17cd4:	b00d      	add	sp, #52	; 0x34
   17cd6:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   17cd8:	2101      	movs	r1, #1
   17cda:	4608      	mov	r0, r1
   17cdc:	f7fb fdb2 	bl	13844 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   17ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17ce4:	2b04      	cmp	r3, #4
   17ce6:	d9f5      	bls.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   17ce8:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   17cea:	2b06      	cmp	r3, #6
   17cec:	d82a      	bhi.n	17d44 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   17cee:	2b05      	cmp	r3, #5
   17cf0:	d03a      	beq.n	17d68 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   17cf2:	2b06      	cmp	r3, #6
   17cf4:	d132      	bne.n	17d5c <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   17cf6:	4968      	ldr	r1, [pc, #416]	; (17e98 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   17cf8:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   17cfa:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   17cfc:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   17cfe:	429a      	cmp	r2, r3
   17d00:	bf38      	it	cc
   17d02:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   17d04:	680b      	ldr	r3, [r1, #0]
   17d06:	2b00      	cmp	r3, #0
   17d08:	db31      	blt.n	17d6e <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   17d0a:	429a      	cmp	r2, r3
   17d0c:	d336      	bcc.n	17d7c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   17d0e:	2c06      	cmp	r4, #6
   17d10:	d84e      	bhi.n	17db0 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   17d12:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   17d14:	2d00      	cmp	r5, #0
   17d16:	d0dd      	beq.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
   17d18:	2c00      	cmp	r4, #0
   17d1a:	d0db      	beq.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   17d1c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   17d1e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   17d20:	4293      	cmp	r3, r2
   17d22:	d1d7      	bne.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   17d24:	b292      	uxth	r2, r2
   17d26:	485d      	ldr	r0, [pc, #372]	; (17e9c <mayfly_xtal_stop_calc+0x26c>)
   17d28:	fba2 0100 	umull	r0, r1, r2, r0
   17d2c:	f240 1323 	movw	r3, #291	; 0x123
   17d30:	fb03 1102 	mla	r1, r3, r2, r1
   17d34:	a354      	add	r3, pc, #336	; (adr r3, 17e88 <mayfly_xtal_stop_calc+0x258>)
   17d36:	e9d3 2300 	ldrd	r2, r3, [r3]
   17d3a:	f7e9 f9df 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   17d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   17d42:	e050      	b.n	17de6 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   17d44:	3b07      	subs	r3, #7
   17d46:	b29a      	uxth	r2, r3
   17d48:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17d4c:	4b50      	ldr	r3, [pc, #320]	; (17e90 <mayfly_xtal_stop_calc+0x260>)
   17d4e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   17d52:	f7f8 fe01 	bl	10958 <mem_get>
   17d56:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   17d58:	4601      	mov	r1, r0
   17d5a:	e7ce      	b.n	17cfa <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   17d5c:	4040      	eors	r0, r0
   17d5e:	f380 8811 	msr	BASEPRI, r0
   17d62:	f04f 0004 	mov.w	r0, #4
   17d66:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   17d68:	494d      	ldr	r1, [pc, #308]	; (17ea0 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   17d6a:	2500      	movs	r5, #0
   17d6c:	e7c5      	b.n	17cfa <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   17d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   17d72:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   17d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17d76:	4413      	add	r3, r2
   17d78:	930a      	str	r3, [sp, #40]	; 0x28
   17d7a:	e7c8      	b.n	17d0e <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   17d7c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   17d7e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   17d82:	b29b      	uxth	r3, r3
					ticker_status =
   17d84:	9106      	str	r1, [sp, #24]
   17d86:	4947      	ldr	r1, [pc, #284]	; (17ea4 <mayfly_xtal_stop_calc+0x274>)
   17d88:	9105      	str	r1, [sp, #20]
   17d8a:	2000      	movs	r0, #0
   17d8c:	9004      	str	r0, [sp, #16]
   17d8e:	9003      	str	r0, [sp, #12]
   17d90:	9302      	str	r3, [sp, #8]
   17d92:	9001      	str	r0, [sp, #4]
   17d94:	9000      	str	r0, [sp, #0]
   17d96:	2101      	movs	r1, #1
   17d98:	f7fa fac0 	bl	1231c <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   17d9c:	2800      	cmp	r0, #0
   17d9e:	d0b6      	beq.n	17d0e <mayfly_xtal_stop_calc+0xde>
   17da0:	2802      	cmp	r0, #2
   17da2:	d0b4      	beq.n	17d0e <mayfly_xtal_stop_calc+0xde>
   17da4:	4040      	eors	r0, r0
   17da6:	f380 8811 	msr	BASEPRI, r0
   17daa:	f04f 0004 	mov.w	r0, #4
   17dae:	df02      	svc	2
					mem_get(_radio.conn_pool,
   17db0:	3c07      	subs	r4, #7
				conn_curr =
   17db2:	b2a2      	uxth	r2, r4
   17db4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17db8:	4b35      	ldr	r3, [pc, #212]	; (17e90 <mayfly_xtal_stop_calc+0x260>)
   17dba:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   17dbe:	f7f8 fdcb 	bl	10958 <mem_get>
   17dc2:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   17dc4:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   17dc6:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   17dc8:	429a      	cmp	r2, r3
   17dca:	bf38      	it	cc
   17dcc:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   17dce:	6803      	ldr	r3, [r0, #0]
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	da9f      	bge.n	17d14 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   17dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   17dd8:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   17dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17ddc:	4413      	add	r3, r2
   17dde:	930a      	str	r3, [sp, #40]	; 0x28
   17de0:	e798      	b.n	17d14 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   17de2:	1a1b      	subs	r3, r3, r0
   17de4:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   17de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17de8:	4298      	cmp	r0, r3
   17dea:	d3fa      	bcc.n	17de2 <mayfly_xtal_stop_calc+0x1b2>
   17dec:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   17df0:	2900      	cmp	r1, #0
   17df2:	db1c      	blt.n	17e2e <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   17df4:	2900      	cmp	r1, #0
   17df6:	f6ff af6d 	blt.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
   17dfa:	f995 201d 	ldrsb.w	r2, [r5, #29]
   17dfe:	2a00      	cmp	r2, #0
   17e00:	f6bf af68 	bge.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   17e04:	68e2      	ldr	r2, [r4, #12]
								625) +
   17e06:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   17e08:	4293      	cmp	r3, r2
   17e0a:	f4bf af63 	bcs.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   17e0e:	4628      	mov	r0, r5
   17e10:	f7fb f852 	bl	12eb8 <conn_update_req>
					if ((status == 2) &&
   17e14:	2802      	cmp	r0, #2
   17e16:	f47f af5d 	bne.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
   17e1a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   17e1e:	f013 0f02 	tst.w	r3, #2
   17e22:	f43f af57 	beq.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   17e26:	4620      	mov	r0, r4
   17e28:	f7fb f846 	bl	12eb8 <conn_update_req>
   17e2c:	e752      	b.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   17e2e:	f995 201d 	ldrsb.w	r2, [r5, #29]
   17e32:	2a00      	cmp	r2, #0
   17e34:	dbde      	blt.n	17df4 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   17e36:	68e2      	ldr	r2, [r4, #12]
							 625) +
   17e38:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   17e3a:	4293      	cmp	r3, r2
   17e3c:	d2da      	bcs.n	17df4 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   17e3e:	4620      	mov	r0, r4
   17e40:	f7fb f83a 	bl	12eb8 <conn_update_req>
					if ((status == 2) &&
   17e44:	2802      	cmp	r0, #2
   17e46:	f47f af45 	bne.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
   17e4a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   17e4e:	f013 0f02 	tst.w	r3, #2
   17e52:	f43f af3f 	beq.w	17cd4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   17e56:	4628      	mov	r0, r5
   17e58:	f7fb f82e 	bl	12eb8 <conn_update_req>
   17e5c:	e73a      	b.n	17cd4 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   17e5e:	3a07      	subs	r2, #7
   17e60:	b292      	uxth	r2, r2
   17e62:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17e66:	4b0a      	ldr	r3, [pc, #40]	; (17e90 <mayfly_xtal_stop_calc+0x260>)
   17e68:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   17e6c:	f7f8 fd74 	bl	10958 <mem_get>
   17e70:	e72b      	b.n	17cca <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   17e72:	4040      	eors	r0, r0
   17e74:	f380 8811 	msr	BASEPRI, r0
   17e78:	f04f 0004 	mov.w	r0, #4
   17e7c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   17e7e:	4808      	ldr	r0, [pc, #32]	; (17ea0 <mayfly_xtal_stop_calc+0x270>)
   17e80:	e723      	b.n	17cca <mayfly_xtal_stop_calc+0x9a>
   17e82:	bf00      	nop
   17e84:	f3af 8000 	nop.w
   17e88:	1afd498d 	.word	0x1afd498d
   17e8c:	00000007 	.word	0x00000007
   17e90:	20000f7c 	.word	0x20000f7c
   17e94:	00012c65 	.word	0x00012c65
   17e98:	20001048 	.word	0x20001048
   17e9c:	09ce5400 	.word	0x09ce5400
   17ea0:	20000f90 	.word	0x20000f90
   17ea4:	00012c91 	.word	0x00012c91

00017ea8 <preempt_calc>:
{
   17ea8:	b570      	push	{r4, r5, r6, lr}
   17eaa:	4605      	mov	r5, r0
   17eac:	460e      	mov	r6, r1
   17eae:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   17eb0:	f7fa fb4e 	bl	12550 <ticker_ticks_now_get>
	u32_t diff =
   17eb4:	4621      	mov	r1, r4
   17eb6:	f7fa fb4f 	bl	12558 <ticker_ticks_diff_get>
	diff += 3;
   17eba:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   17ebc:	2c09      	cmp	r4, #9
   17ebe:	d801      	bhi.n	17ec4 <preempt_calc+0x1c>
	return 0;
   17ec0:	2000      	movs	r0, #0
   17ec2:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   17ec4:	2100      	movs	r1, #0
   17ec6:	4608      	mov	r0, r1
   17ec8:	f7fb fcbc 	bl	13844 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   17ecc:	4632      	mov	r2, r6
   17ece:	2100      	movs	r1, #0
   17ed0:	4628      	mov	r0, r5
   17ed2:	f7fe fa7f 	bl	163d4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   17ed6:	68ab      	ldr	r3, [r5, #8]
   17ed8:	441c      	add	r4, r3
		if (diff <
   17eda:	2c26      	cmp	r4, #38	; 0x26
   17edc:	d802      	bhi.n	17ee4 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   17ede:	60ac      	str	r4, [r5, #8]
		return 1;
   17ee0:	2001      	movs	r0, #1
   17ee2:	bd70      	pop	{r4, r5, r6, pc}
   17ee4:	2001      	movs	r0, #1
}
   17ee6:	bd70      	pop	{r4, r5, r6, pc}

00017ee8 <event_adv>:
{
   17ee8:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   17eea:	4b3b      	ldr	r3, [pc, #236]	; (17fd8 <event_adv+0xf0>)
   17eec:	7bdb      	ldrb	r3, [r3, #15]
   17eee:	2b00      	cmp	r3, #0
   17ef0:	d142      	bne.n	17f78 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   17ef2:	4b39      	ldr	r3, [pc, #228]	; (17fd8 <event_adv+0xf0>)
   17ef4:	7b1b      	ldrb	r3, [r3, #12]
   17ef6:	b2db      	uxtb	r3, r3
   17ef8:	2b05      	cmp	r3, #5
   17efa:	d143      	bne.n	17f84 <event_adv+0x9c>
   17efc:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   17efe:	4c36      	ldr	r4, [pc, #216]	; (17fd8 <event_adv+0xf0>)
   17f00:	2101      	movs	r1, #1
   17f02:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   17f04:	2300      	movs	r3, #0
   17f06:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   17f08:	2305      	movs	r3, #5
   17f0a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   17f0c:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   17f0e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   17f12:	f000 0007 	and.w	r0, r0, #7
   17f16:	f7fb fd5b 	bl	139d0 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   17f1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17f1e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17f22:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   17f26:	f363 0243 	bfi	r2, r3, #1, #3
   17f2a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   17f2e:	f7fc f841 	bl	13fb4 <adv_setup>
	if (ctrl_rl_enabled()) {
   17f32:	f003 fa43 	bl	1b3bc <ctrl_rl_enabled>
   17f36:	bb58      	cbnz	r0, 17f90 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   17f38:	4b27      	ldr	r3, [pc, #156]	; (17fd8 <event_adv+0xf0>)
   17f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   17f3e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   17f42:	d134      	bne.n	17fae <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   17f44:	4c24      	ldr	r4, [pc, #144]	; (17fd8 <event_adv+0xf0>)
   17f46:	68a2      	ldr	r2, [r4, #8]
   17f48:	f105 0109 	add.w	r1, r5, #9
   17f4c:	2001      	movs	r0, #1
   17f4e:	f7f8 ffe9 	bl	10f24 <radio_tmr_start>
	radio_tmr_end_capture();
   17f52:	f7f9 f899 	bl	11088 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   17f56:	462a      	mov	r2, r5
   17f58:	2105      	movs	r1, #5
   17f5a:	f104 0014 	add.w	r0, r4, #20
   17f5e:	f7ff ffa3 	bl	17ea8 <preempt_calc>
   17f62:	bb68      	cbnz	r0, 17fc0 <event_adv+0xd8>
		ticker_status =
   17f64:	2300      	movs	r3, #0
   17f66:	4a1d      	ldr	r2, [pc, #116]	; (17fdc <event_adv+0xf4>)
   17f68:	4619      	mov	r1, r3
   17f6a:	4618      	mov	r0, r3
   17f6c:	f7fa faa4 	bl	124b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f70:	b108      	cbz	r0, 17f76 <event_adv+0x8e>
   17f72:	2802      	cmp	r0, #2
   17f74:	d129      	bne.n	17fca <event_adv+0xe2>
   17f76:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   17f78:	4040      	eors	r0, r0
   17f7a:	f380 8811 	msr	BASEPRI, r0
   17f7e:	f04f 0004 	mov.w	r0, #4
   17f82:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   17f84:	4040      	eors	r0, r0
   17f86:	f380 8811 	msr	BASEPRI, r0
   17f8a:	f04f 0004 	mov.w	r0, #4
   17f8e:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   17f90:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17f94:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   17f98:	bf14      	ite	ne
   17f9a:	2001      	movne	r0, #1
   17f9c:	2000      	moveq	r0, #0
   17f9e:	f003 f80f 	bl	1afc0 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   17fa2:	1c82      	adds	r2, r0, #2
   17fa4:	7841      	ldrb	r1, [r0, #1]
   17fa6:	7800      	ldrb	r0, [r0, #0]
   17fa8:	f7f8 ff3e 	bl	10e28 <radio_filter_configure>
   17fac:	e7ca      	b.n	17f44 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   17fae:	2001      	movs	r0, #1
   17fb0:	f003 f806 	bl	1afc0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   17fb4:	1c82      	adds	r2, r0, #2
   17fb6:	7841      	ldrb	r1, [r0, #1]
   17fb8:	7800      	ldrb	r0, [r0, #0]
   17fba:	f7f8 ff35 	bl	10e28 <radio_filter_configure>
   17fbe:	e7c1      	b.n	17f44 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   17fc0:	2204      	movs	r2, #4
   17fc2:	7422      	strb	r2, [r4, #16]
		radio_disable();
   17fc4:	f7f8 fea0 	bl	10d08 <radio_disable>
   17fc8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17fca:	4040      	eors	r0, r0
   17fcc:	f380 8811 	msr	BASEPRI, r0
   17fd0:	f04f 0004 	mov.w	r0, #4
   17fd4:	df02      	svc	2
   17fd6:	bf00      	nop
   17fd8:	20000f7c 	.word	0x20000f7c
   17fdc:	00013491 	.word	0x00013491

00017fe0 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   17fe0:	4a4c      	ldr	r2, [pc, #304]	; (18114 <event_master+0x134>)
   17fe2:	7bd2      	ldrb	r2, [r2, #15]
   17fe4:	2a00      	cmp	r2, #0
   17fe6:	d174      	bne.n	180d2 <event_master+0xf2>
{
   17fe8:	b530      	push	{r4, r5, lr}
   17fea:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   17fec:	4a49      	ldr	r2, [pc, #292]	; (18114 <event_master+0x134>)
   17fee:	7b12      	ldrb	r2, [r2, #12]
   17ff0:	b2d2      	uxtb	r2, r2
   17ff2:	8c19      	ldrh	r1, [r3, #32]
   17ff4:	1dcc      	adds	r4, r1, #7
   17ff6:	42a2      	cmp	r2, r4
   17ff8:	d171      	bne.n	180de <event_master+0xfe>
   17ffa:	461c      	mov	r4, r3
   17ffc:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   17ffe:	4b45      	ldr	r3, [pc, #276]	; (18114 <event_master+0x134>)
   18000:	2204      	movs	r2, #4
   18002:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   18004:	2002      	movs	r0, #2
   18006:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   18008:	2200      	movs	r2, #0
   1800a:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1800c:	3107      	adds	r1, #7
   1800e:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   18010:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   18012:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   18014:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   18018:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   1801c:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   18020:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18022:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   18024:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   18026:	f7fb fd69 	bl	13afc <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   1802a:	a903      	add	r1, sp, #12
   1802c:	4620      	mov	r0, r4
   1802e:	f7fb fed3 	bl	13dd8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   18032:	9b03      	ldr	r3, [sp, #12]
   18034:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   18038:	781a      	ldrb	r2, [r3, #0]
   1803a:	f361 02c3 	bfi	r2, r1, #3, #1
   1803e:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   18040:	9a03      	ldr	r2, [sp, #12]
   18042:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   18046:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1804a:	7811      	ldrb	r1, [r2, #0]
   1804c:	f363 0182 	bfi	r1, r3, #2, #1
   18050:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   18052:	4620      	mov	r0, r4
   18054:	f7fb fce0 	bl	13a18 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   18058:	2096      	movs	r0, #150	; 0x96
   1805a:	f7f8 ff5d 	bl	10f18 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   1805e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   18062:	f000 0007 	and.w	r0, r0, #7
   18066:	f7f8 fea5 	bl	10db4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   1806a:	9903      	ldr	r1, [sp, #12]
   1806c:	4620      	mov	r0, r4
   1806e:	f7fb ff49 	bl	13f04 <tx_packet_set>
	if (conn->data_chan_sel) {
   18072:	7f63      	ldrb	r3, [r4, #29]
   18074:	f013 0f40 	tst.w	r3, #64	; 0x40
   18078:	d037      	beq.n	180ea <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1807a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1807c:	3801      	subs	r0, #1
   1807e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18082:	f104 0217 	add.w	r2, r4, #23
   18086:	8be1      	ldrh	r1, [r4, #30]
   18088:	b280      	uxth	r0, r0
   1808a:	f7fa fe8b 	bl	12da4 <chan_sel_2>
	chan_set(data_chan_use);
   1808e:	f7fb ff65 	bl	13f5c <chan_set>
		remainder_us = radio_tmr_start(1,
   18092:	4b20      	ldr	r3, [pc, #128]	; (18114 <event_master+0x134>)
   18094:	689a      	ldr	r2, [r3, #8]
   18096:	f105 0109 	add.w	r1, r5, #9
   1809a:	2001      	movs	r0, #1
   1809c:	f7f8 ff42 	bl	10f24 <radio_tmr_start>
		radio_tmr_end_capture();
   180a0:	f7f8 fff2 	bl	11088 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   180a4:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   180a6:	3107      	adds	r1, #7
   180a8:	462a      	mov	r2, r5
   180aa:	b2c9      	uxtb	r1, r1
   180ac:	4620      	mov	r0, r4
   180ae:	f7ff fefb 	bl	17ea8 <preempt_calc>
	if (0 !=
   180b2:	bb38      	cbnz	r0, 18104 <event_master+0x124>
		ticker_status =
   180b4:	2300      	movs	r3, #0
   180b6:	4a18      	ldr	r2, [pc, #96]	; (18118 <event_master+0x138>)
   180b8:	4619      	mov	r1, r3
   180ba:	4618      	mov	r0, r3
   180bc:	f7fa f9fc 	bl	124b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   180c0:	b328      	cbz	r0, 1810e <event_master+0x12e>
   180c2:	2802      	cmp	r0, #2
   180c4:	d023      	beq.n	1810e <event_master+0x12e>
   180c6:	4040      	eors	r0, r0
   180c8:	f380 8811 	msr	BASEPRI, r0
   180cc:	f04f 0004 	mov.w	r0, #4
   180d0:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   180d2:	4040      	eors	r0, r0
   180d4:	f380 8811 	msr	BASEPRI, r0
   180d8:	f04f 0004 	mov.w	r0, #4
   180dc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   180de:	4040      	eors	r0, r0
   180e0:	f380 8811 	msr	BASEPRI, r0
   180e4:	f04f 0004 	mov.w	r0, #4
   180e8:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   180ea:	7fa1      	ldrb	r1, [r4, #30]
   180ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   180ee:	7f63      	ldrb	r3, [r4, #29]
   180f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   180f4:	9300      	str	r3, [sp, #0]
   180f6:	f104 0317 	add.w	r3, r4, #23
   180fa:	f104 001f 	add.w	r0, r4, #31
   180fe:	f7fa fdf3 	bl	12ce8 <chan_sel_1>
   18102:	e7c4      	b.n	1808e <event_master+0xae>
		_radio.state = STATE_STOP;
   18104:	2204      	movs	r2, #4
   18106:	4b03      	ldr	r3, [pc, #12]	; (18114 <event_master+0x134>)
   18108:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1810a:	f7f8 fdfd 	bl	10d08 <radio_disable>
}
   1810e:	b005      	add	sp, #20
   18110:	bd30      	pop	{r4, r5, pc}
   18112:	bf00      	nop
   18114:	20000f7c 	.word	0x20000f7c
   18118:	00013491 	.word	0x00013491

0001811c <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   1811c:	4a64      	ldr	r2, [pc, #400]	; (182b0 <event_slave+0x194>)
   1811e:	7bd2      	ldrb	r2, [r2, #15]
   18120:	2a00      	cmp	r2, #0
   18122:	f040 809d 	bne.w	18260 <event_slave+0x144>
{
   18126:	b5f0      	push	{r4, r5, r6, r7, lr}
   18128:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   1812a:	4a61      	ldr	r2, [pc, #388]	; (182b0 <event_slave+0x194>)
   1812c:	7b11      	ldrb	r1, [r2, #12]
   1812e:	b2c9      	uxtb	r1, r1
   18130:	8c1a      	ldrh	r2, [r3, #32]
   18132:	1dd4      	adds	r4, r2, #7
   18134:	42a1      	cmp	r1, r4
   18136:	f040 8099 	bne.w	1826c <event_slave+0x150>
   1813a:	461c      	mov	r4, r3
   1813c:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   1813e:	4d5c      	ldr	r5, [pc, #368]	; (182b0 <event_slave+0x194>)
   18140:	2303      	movs	r3, #3
   18142:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   18144:	2301      	movs	r3, #1
   18146:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   18148:	2700      	movs	r7, #0
   1814a:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1814c:	3207      	adds	r2, #7
   1814e:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   18150:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   18152:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   18154:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   18158:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   1815c:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   18160:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18162:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   18164:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   18166:	4620      	mov	r0, r4
   18168:	f7fb fc56 	bl	13a18 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   1816c:	2096      	movs	r0, #150	; 0x96
   1816e:	f7f8 fed3 	bl	10f18 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   18172:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   18176:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1817a:	09d3      	lsrs	r3, r2, #7
   1817c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   18180:	4639      	mov	r1, r7
   18182:	f000 0007 	and.w	r0, r0, #7
   18186:	f7f8 fe1d 	bl	10dc4 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1818a:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   1818e:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   18192:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   18196:	3108      	adds	r1, #8
   18198:	4620      	mov	r0, r4
   1819a:	f7fb fc51 	bl	13a40 <rx_packet_set>
	if (conn->data_chan_sel) {
   1819e:	7f63      	ldrb	r3, [r4, #29]
   181a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   181a4:	d068      	beq.n	18278 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   181a6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   181a8:	3801      	subs	r0, #1
   181aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   181ae:	f104 0217 	add.w	r2, r4, #23
   181b2:	8be1      	ldrh	r1, [r4, #30]
   181b4:	b280      	uxth	r0, r0
   181b6:	f7fa fdf5 	bl	12da4 <chan_sel_2>
	chan_set(data_chan_use);
   181ba:	f7fb fecf 	bl	13f5c <chan_set>
		conn->slave.window_widening_prepare_us;
   181be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   181c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   181c2:	4413      	add	r3, r2
   181c4:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   181c6:	2200      	movs	r2, #0
   181c8:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   181ca:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   181cc:	4293      	cmp	r3, r2
   181ce:	d900      	bls.n	181d2 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   181d0:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   181d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   181d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   181d6:	4413      	add	r3, r2
   181d8:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   181da:	2700      	movs	r7, #0
   181dc:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   181de:	4b34      	ldr	r3, [pc, #208]	; (182b0 <event_slave+0x194>)
   181e0:	689a      	ldr	r2, [r3, #8]
   181e2:	f106 0109 	add.w	r1, r6, #9
   181e6:	4638      	mov	r0, r7
   181e8:	f7f8 fe9c 	bl	10f24 <radio_tmr_start>
   181ec:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   181ee:	f7f8 ff17 	bl	11020 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   181f2:	4638      	mov	r0, r7
   181f4:	f7f8 ff36 	bl	11064 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   181f8:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   181fa:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   181fe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   18200:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   18202:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   18204:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   18208:	f000 0007 	and.w	r0, r0, #7
   1820c:	f7f8 fd68 	bl	10ce0 <radio_rx_ready_delay_get>
   18210:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   18212:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   18216:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   1821a:	2802      	cmp	r0, #2
   1821c:	d03c      	beq.n	18298 <event_slave+0x17c>
   1821e:	2804      	cmp	r0, #4
   18220:	d037      	beq.n	18292 <event_slave+0x176>
		return 40;
   18222:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   18224:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   18226:	2101      	movs	r1, #1
   18228:	f7f8 fd5c 	bl	10ce4 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1822c:	4428      	add	r0, r5
   1822e:	f7f8 fed5 	bl	10fdc <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   18232:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   18234:	3107      	adds	r1, #7
   18236:	4632      	mov	r2, r6
   18238:	b2c9      	uxtb	r1, r1
   1823a:	4620      	mov	r0, r4
   1823c:	f7ff fe34 	bl	17ea8 <preempt_calc>
   18240:	bb60      	cbnz	r0, 1829c <event_slave+0x180>
		ticker_status =
   18242:	2300      	movs	r3, #0
   18244:	4a1b      	ldr	r2, [pc, #108]	; (182b4 <event_slave+0x198>)
   18246:	4619      	mov	r1, r3
   18248:	4618      	mov	r0, r3
   1824a:	f7fa f935 	bl	124b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1824e:	b350      	cbz	r0, 182a6 <event_slave+0x18a>
   18250:	2802      	cmp	r0, #2
   18252:	d028      	beq.n	182a6 <event_slave+0x18a>
   18254:	4040      	eors	r0, r0
   18256:	f380 8811 	msr	BASEPRI, r0
   1825a:	f04f 0004 	mov.w	r0, #4
   1825e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   18260:	4040      	eors	r0, r0
   18262:	f380 8811 	msr	BASEPRI, r0
   18266:	f04f 0004 	mov.w	r0, #4
   1826a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   1826c:	4040      	eors	r0, r0
   1826e:	f380 8811 	msr	BASEPRI, r0
   18272:	f04f 0004 	mov.w	r0, #4
   18276:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   18278:	7fa1      	ldrb	r1, [r4, #30]
   1827a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   1827c:	7f63      	ldrb	r3, [r4, #29]
   1827e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   18282:	9300      	str	r3, [sp, #0]
   18284:	f104 0317 	add.w	r3, r4, #23
   18288:	f104 001f 	add.w	r0, r4, #31
   1828c:	f7fa fd2c 	bl	12ce8 <chan_sel_1>
   18290:	e793      	b.n	181ba <event_slave+0x9e>
		return 376;
   18292:	f44f 73bc 	mov.w	r3, #376	; 0x178
   18296:	e7c5      	b.n	18224 <event_slave+0x108>
		return 24;
   18298:	2318      	movs	r3, #24
   1829a:	e7c3      	b.n	18224 <event_slave+0x108>
		_radio.state = STATE_STOP;
   1829c:	2204      	movs	r2, #4
   1829e:	4b04      	ldr	r3, [pc, #16]	; (182b0 <event_slave+0x194>)
   182a0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   182a2:	f7f8 fd31 	bl	10d08 <radio_disable>
	packet_tx_enqueue(2);
   182a6:	2002      	movs	r0, #2
   182a8:	f7fb fc28 	bl	13afc <packet_tx_enqueue>
}
   182ac:	b003      	add	sp, #12
   182ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182b0:	20000f7c 	.word	0x20000f7c
   182b4:	00013491 	.word	0x00013491

000182b8 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   182b8:	4b67      	ldr	r3, [pc, #412]	; (18458 <event_scan+0x1a0>)
   182ba:	7bdb      	ldrb	r3, [r3, #15]
   182bc:	2b00      	cmp	r3, #0
   182be:	f040 808b 	bne.w	183d8 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   182c2:	4b65      	ldr	r3, [pc, #404]	; (18458 <event_scan+0x1a0>)
   182c4:	7b1b      	ldrb	r3, [r3, #12]
   182c6:	b2db      	uxtb	r3, r3
   182c8:	2b06      	cmp	r3, #6
   182ca:	f040 808b 	bne.w	183e4 <event_scan+0x12c>
{
   182ce:	b570      	push	{r4, r5, r6, lr}
   182d0:	b08c      	sub	sp, #48	; 0x30
   182d2:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   182d4:	4c60      	ldr	r4, [pc, #384]	; (18458 <event_scan+0x1a0>)
   182d6:	2302      	movs	r3, #2
   182d8:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   182da:	2101      	movs	r1, #1
   182dc:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   182de:	2200      	movs	r2, #0
   182e0:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   182e2:	2306      	movs	r3, #6
   182e4:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   182e6:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   182e8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   182ec:	f362 0341 	bfi	r3, r2, #1, #1
   182f0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   182f4:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   182f8:	f000 0007 	and.w	r0, r0, #7
   182fc:	f7fb fb68 	bl	139d0 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   18300:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18304:	f3c3 0081 	ubfx	r0, r3, #2, #2
   18308:	1c42      	adds	r2, r0, #1
   1830a:	f362 0383 	bfi	r3, r2, #2, #2
   1830e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   18312:	3025      	adds	r0, #37	; 0x25
   18314:	f7fb fe22 	bl	13f5c <chan_set>
	if (_radio.scanner.chan == 3) {
   18318:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1831c:	f003 030c 	and.w	r3, r3, #12
   18320:	2b0c      	cmp	r3, #12
   18322:	d065      	beq.n	183f0 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   18324:	2096      	movs	r0, #150	; 0x96
   18326:	f7f8 fdf7 	bl	10f18 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1832a:	2300      	movs	r3, #0
   1832c:	461a      	mov	r2, r3
   1832e:	4619      	mov	r1, r3
   18330:	4618      	mov	r0, r3
   18332:	f7f8 fd47 	bl	10dc4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   18336:	4b48      	ldr	r3, [pc, #288]	; (18458 <event_scan+0x1a0>)
   18338:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1833c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   18340:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   18344:	3008      	adds	r0, #8
   18346:	f7f8 fcbb 	bl	10cc0 <radio_pkt_rx_set>
	radio_rssi_measure();
   1834a:	f7f8 fd4b 	bl	10de4 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   1834e:	f003 f835 	bl	1b3bc <ctrl_rl_enabled>
   18352:	2800      	cmp	r0, #0
   18354:	d153      	bne.n	183fe <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   18356:	4b40      	ldr	r3, [pc, #256]	; (18458 <event_scan+0x1a0>)
   18358:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1835c:	f013 0f30 	tst.w	r3, #48	; 0x30
   18360:	d165      	bne.n	1842e <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   18362:	4c3d      	ldr	r4, [pc, #244]	; (18458 <event_scan+0x1a0>)
   18364:	68a2      	ldr	r2, [r4, #8]
   18366:	f105 0109 	add.w	r1, r5, #9
   1836a:	2000      	movs	r0, #0
   1836c:	f7f8 fdda 	bl	10f24 <radio_tmr_start>
	radio_tmr_end_capture();
   18370:	f7f8 fe8a 	bl	11088 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   18374:	462a      	mov	r2, r5
   18376:	2106      	movs	r1, #6
   18378:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   1837c:	f7ff fd94 	bl	17ea8 <preempt_calc>
   18380:	2800      	cmp	r0, #0
   18382:	d15d      	bne.n	18440 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   18384:	4b34      	ldr	r3, [pc, #208]	; (18458 <event_scan+0x1a0>)
   18386:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1838a:	3309      	adds	r3, #9
		ticker_status =
   1838c:	f641 0287 	movw	r2, #6279	; 0x1887
   18390:	9208      	str	r2, [sp, #32]
   18392:	4a32      	ldr	r2, [pc, #200]	; (1845c <event_scan+0x1a4>)
   18394:	9207      	str	r2, [sp, #28]
   18396:	2204      	movs	r2, #4
   18398:	9206      	str	r2, [sp, #24]
   1839a:	4931      	ldr	r1, [pc, #196]	; (18460 <event_scan+0x1a8>)
   1839c:	9105      	str	r1, [sp, #20]
   1839e:	2000      	movs	r0, #0
   183a0:	9004      	str	r0, [sp, #16]
   183a2:	9003      	str	r0, [sp, #12]
   183a4:	9002      	str	r0, [sp, #8]
   183a6:	9001      	str	r0, [sp, #4]
   183a8:	9300      	str	r3, [sp, #0]
   183aa:	462b      	mov	r3, r5
   183ac:	4601      	mov	r1, r0
   183ae:	f7f9 ff67 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   183b2:	b108      	cbz	r0, 183b8 <event_scan+0x100>
   183b4:	2802      	cmp	r0, #2
   183b6:	d149      	bne.n	1844c <event_scan+0x194>
			ticker_status =
   183b8:	2300      	movs	r3, #0
   183ba:	4a2a      	ldr	r2, [pc, #168]	; (18464 <event_scan+0x1ac>)
   183bc:	4619      	mov	r1, r3
   183be:	4618      	mov	r0, r3
   183c0:	f7fa f87a 	bl	124b8 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   183c4:	2800      	cmp	r0, #0
   183c6:	d03f      	beq.n	18448 <event_scan+0x190>
   183c8:	2802      	cmp	r0, #2
   183ca:	d03d      	beq.n	18448 <event_scan+0x190>
   183cc:	4040      	eors	r0, r0
   183ce:	f380 8811 	msr	BASEPRI, r0
   183d2:	f04f 0004 	mov.w	r0, #4
   183d6:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   183d8:	4040      	eors	r0, r0
   183da:	f380 8811 	msr	BASEPRI, r0
   183de:	f04f 0004 	mov.w	r0, #4
   183e2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   183e4:	4040      	eors	r0, r0
   183e6:	f380 8811 	msr	BASEPRI, r0
   183ea:	f04f 0004 	mov.w	r0, #4
   183ee:	df02      	svc	2
		_radio.scanner.chan = 0;
   183f0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   183f4:	f36f 0283 	bfc	r2, #2, #2
   183f8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   183fc:	e792      	b.n	18324 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   183fe:	4b16      	ldr	r3, [pc, #88]	; (18458 <event_scan+0x1a0>)
   18400:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   18404:	f3c0 1000 	ubfx	r0, r0, #4, #1
   18408:	f002 fdda 	bl	1afc0 <ctrl_filter_get>
   1840c:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   1840e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   18412:	f002 fd4f 	bl	1aeb4 <ctrl_irks_get>
   18416:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   18418:	1ca2      	adds	r2, r4, #2
   1841a:	7861      	ldrb	r1, [r4, #1]
   1841c:	7820      	ldrb	r0, [r4, #0]
   1841e:	f7f8 fd03 	bl	10e28 <radio_filter_configure>
		radio_ar_configure(count, irks);
   18422:	4631      	mov	r1, r6
   18424:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   18428:	f7f8 feda 	bl	111e0 <radio_ar_configure>
   1842c:	e799      	b.n	18362 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   1842e:	2001      	movs	r0, #1
   18430:	f002 fdc6 	bl	1afc0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   18434:	1c82      	adds	r2, r0, #2
   18436:	7841      	ldrb	r1, [r0, #1]
   18438:	7800      	ldrb	r0, [r0, #0]
   1843a:	f7f8 fcf5 	bl	10e28 <radio_filter_configure>
   1843e:	e790      	b.n	18362 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   18440:	2204      	movs	r2, #4
   18442:	7422      	strb	r2, [r4, #16]
		radio_disable();
   18444:	f7f8 fc60 	bl	10d08 <radio_disable>
}
   18448:	b00c      	add	sp, #48	; 0x30
   1844a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1844c:	4040      	eors	r0, r0
   1844e:	f380 8811 	msr	BASEPRI, r0
   18452:	f04f 0004 	mov.w	r0, #4
   18456:	df02      	svc	2
   18458:	20000f7c 	.word	0x20000f7c
   1845c:	00012fd5 	.word	0x00012fd5
   18460:	000137b9 	.word	0x000137b9
   18464:	00013491 	.word	0x00013491

00018468 <access_addr_get>:
{
   18468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1846a:	b083      	sub	sp, #12
	retry = 3;
   1846c:	2403      	movs	r4, #3
   1846e:	e059      	b.n	18524 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   18470:	4040      	eors	r0, r0
   18472:	f380 8811 	msr	BASEPRI, r0
   18476:	f04f 0004 	mov.w	r0, #4
   1847a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1847c:	9900      	ldr	r1, [sp, #0]
   1847e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   18480:	4607      	mov	r7, r0
	bit_idx = 31;
   18482:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   18484:	2501      	movs	r5, #1
	while (bit_idx--) {
   18486:	e010      	b.n	184aa <access_addr_get+0x42>
			consecutive_cnt++;
   18488:	3501      	adds	r5, #1
   1848a:	b2ed      	uxtb	r5, r5
   1848c:	e01c      	b.n	184c8 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1848e:	b9ff      	cbnz	r7, 184d0 <access_addr_get+0x68>
			if (consecutive_bit) {
   18490:	b319      	cbz	r1, 184da <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   18492:	2201      	movs	r2, #1
   18494:	409a      	lsls	r2, r3
   18496:	ea26 0602 	bic.w	r6, r6, r2
   1849a:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   1849c:	4601      	mov	r1, r0
			transitions++;
   1849e:	3701      	adds	r7, #1
   184a0:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   184a2:	2501      	movs	r5, #1
	while (bit_idx--) {
   184a4:	461a      	mov	r2, r3
		if (transitions > 24) {
   184a6:	2f18      	cmp	r7, #24
   184a8:	d81d      	bhi.n	184e6 <access_addr_get+0x7e>
	while (bit_idx--) {
   184aa:	1e53      	subs	r3, r2, #1
   184ac:	b2db      	uxtb	r3, r3
   184ae:	b32a      	cbz	r2, 184fc <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   184b0:	9e00      	ldr	r6, [sp, #0]
   184b2:	469e      	mov	lr, r3
   184b4:	fa26 f203 	lsr.w	r2, r6, r3
   184b8:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   184bc:	4291      	cmp	r1, r2
   184be:	d0e3      	beq.n	18488 <access_addr_get+0x20>
			transitions++;
   184c0:	3701      	adds	r7, #1
   184c2:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   184c4:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   184c6:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   184c8:	2d06      	cmp	r5, #6
   184ca:	d8e1      	bhi.n	18490 <access_addr_get+0x28>
   184cc:	2b1b      	cmp	r3, #27
   184ce:	d9de      	bls.n	1848e <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   184d0:	2b1a      	cmp	r3, #26
   184d2:	d8e7      	bhi.n	184a4 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   184d4:	2f01      	cmp	r7, #1
   184d6:	d8e5      	bhi.n	184a4 <access_addr_get+0x3c>
   184d8:	e7da      	b.n	18490 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   184da:	2101      	movs	r1, #1
   184dc:	fa01 f203 	lsl.w	r2, r1, r3
   184e0:	4316      	orrs	r6, r2
   184e2:	9600      	str	r6, [sp, #0]
   184e4:	e7db      	b.n	1849e <access_addr_get+0x36>
			if (consecutive_bit) {
   184e6:	2900      	cmp	r1, #0
   184e8:	d02d      	beq.n	18546 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   184ea:	f10e 0e01 	add.w	lr, lr, #1
   184ee:	2301      	movs	r3, #1
   184f0:	fa03 f30e 	lsl.w	r3, r3, lr
   184f4:	425b      	negs	r3, r3
   184f6:	9a00      	ldr	r2, [sp, #0]
   184f8:	4013      	ands	r3, r2
   184fa:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   184fc:	4b19      	ldr	r3, [pc, #100]	; (18564 <access_addr_get+0xfc>)
   184fe:	9a00      	ldr	r2, [sp, #0]
   18500:	4053      	eors	r3, r2
   18502:	a802      	add	r0, sp, #8
   18504:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   18508:	2104      	movs	r1, #4
   1850a:	f7f8 fa6c 	bl	109e6 <util_ones_count_get>
   1850e:	2801      	cmp	r0, #1
   18510:	d908      	bls.n	18524 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   18512:	9800      	ldr	r0, [sp, #0]
   18514:	b283      	uxth	r3, r0
   18516:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1851a:	d120      	bne.n	1855e <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   1851c:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1851e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   18522:	d11c      	bne.n	1855e <access_addr_get+0xf6>
	LL_ASSERT(retry);
   18524:	2c00      	cmp	r4, #0
   18526:	d0a3      	beq.n	18470 <access_addr_get+0x8>
	retry--;
   18528:	3c01      	subs	r4, #1
   1852a:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   1852c:	2004      	movs	r0, #4
	while (len) {
   1852e:	2800      	cmp	r0, #0
   18530:	d0a4      	beq.n	1847c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   18532:	4669      	mov	r1, sp
   18534:	f7f9 fc1c 	bl	11d70 <rand_get>
   18538:	b2c0      	uxtb	r0, r0
		if (len) {
   1853a:	2800      	cmp	r0, #0
   1853c:	d0f7      	beq.n	1852e <access_addr_get+0xc6>
   1853e:	bf20      	wfe
  __ASM volatile ("sev");
   18540:	bf40      	sev
  __ASM volatile ("wfe");
   18542:	bf20      	wfe
   18544:	e7f3      	b.n	1852e <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   18546:	f10e 0e01 	add.w	lr, lr, #1
   1854a:	2301      	movs	r3, #1
   1854c:	fa03 fe0e 	lsl.w	lr, r3, lr
   18550:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   18554:	9b00      	ldr	r3, [sp, #0]
   18556:	ea43 030e 	orr.w	r3, r3, lr
   1855a:	9300      	str	r3, [sp, #0]
   1855c:	e7ce      	b.n	184fc <access_addr_get+0x94>
}
   1855e:	b003      	add	sp, #12
   18560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18562:	bf00      	nop
   18564:	8e89bed6 	.word	0x8e89bed6

00018568 <isr_rx_scan>:
{
   18568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1856c:	b08f      	sub	sp, #60	; 0x3c
   1856e:	4617      	mov	r7, r2
   18570:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   18574:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   18578:	4b99      	ldr	r3, [pc, #612]	; (187e0 <isr_rx_scan+0x278>)
   1857a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1857e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   18582:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   18586:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1858a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1858e:	b15b      	cbz	r3, 185a8 <isr_rx_scan+0x40>
   18590:	4b93      	ldr	r3, [pc, #588]	; (187e0 <isr_rx_scan+0x278>)
   18592:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   18596:	b34b      	cbz	r3, 185ec <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   18598:	4a91      	ldr	r2, [pc, #580]	; (187e0 <isr_rx_scan+0x278>)
   1859a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1859e:	b2db      	uxtb	r3, r3
   185a0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   185a4:	4293      	cmp	r3, r2
   185a6:	d021      	beq.n	185ec <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   185a8:	7a23      	ldrb	r3, [r4, #8]
   185aa:	f013 030f 	ands.w	r3, r3, #15
   185ae:	f000 82e9 	beq.w	18b84 <isr_rx_scan+0x61c>
   185b2:	2b06      	cmp	r3, #6
   185b4:	f000 82e6 	beq.w	18b84 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   185b8:	2b00      	cmp	r3, #0
   185ba:	f000 83d9 	beq.w	18d70 <isr_rx_scan+0x808>
   185be:	2b01      	cmp	r3, #1
   185c0:	f000 8355 	beq.w	18c6e <isr_rx_scan+0x706>
	bool dir_report = false;
   185c4:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   185c8:	7a23      	ldrb	r3, [r4, #8]
   185ca:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   185ce:	2b02      	cmp	r3, #2
   185d0:	f000 83d0 	beq.w	18d74 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   185d4:	2b06      	cmp	r3, #6
   185d6:	f000 83cd 	beq.w	18d74 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   185da:	2b07      	cmp	r3, #7
   185dc:	f000 839f 	beq.w	18d1e <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   185e0:	2b04      	cmp	r3, #4
   185e2:	f000 83a3 	beq.w	18d2c <isr_rx_scan+0x7c4>
		return 1;
   185e6:	f04f 0a01 	mov.w	sl, #1
   185ea:	e3cb      	b.n	18d84 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   185ec:	4b7c      	ldr	r3, [pc, #496]	; (187e0 <isr_rx_scan+0x278>)
   185ee:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   185f2:	f013 0f10 	tst.w	r3, #16
   185f6:	d072      	beq.n	186de <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   185f8:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   185fa:	f013 030f 	ands.w	r3, r3, #15
   185fe:	f000 80da 	beq.w	187b6 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   18602:	2b01      	cmp	r3, #1
   18604:	f000 808f 	beq.w	18726 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   18608:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   1860a:	2b00      	cmp	r3, #0
   1860c:	d0cc      	beq.n	185a8 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1860e:	f7f8 fd4d 	bl	110ac <radio_tmr_end_get>
   18612:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   18616:	4b72      	ldr	r3, [pc, #456]	; (187e0 <isr_rx_scan+0x278>)
   18618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   1861c:	4871      	ldr	r0, [pc, #452]	; (187e4 <isr_rx_scan+0x27c>)
   1861e:	fba3 0100 	umull	r0, r1, r3, r0
   18622:	2207      	movs	r2, #7
   18624:	fb02 1103 	mla	r1, r2, r3, r1
   18628:	a36b      	add	r3, pc, #428	; (adr r3, 187d8 <isr_rx_scan+0x270>)
   1862a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1862e:	f7e8 fd65 	bl	10fc <__aeabi_uldivmod>
   18632:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   18636:	4581      	cmp	r9, r0
   18638:	d2b6      	bcs.n	185a8 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   1863a:	4b69      	ldr	r3, [pc, #420]	; (187e0 <isr_rx_scan+0x278>)
   1863c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   18640:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   18644:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   18646:	429a      	cmp	r2, r3
   18648:	f0c0 80b7 	bcc.w	187ba <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   1864c:	4b64      	ldr	r3, [pc, #400]	; (187e0 <isr_rx_scan+0x278>)
   1864e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   18652:	1ad3      	subs	r3, r2, r3
   18654:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   18656:	2b03      	cmp	r3, #3
   18658:	f240 80b9 	bls.w	187ce <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   1865c:	4b60      	ldr	r3, [pc, #384]	; (187e0 <isr_rx_scan+0x278>)
   1865e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   18662:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   18666:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   1866a:	f1b9 0f00 	cmp.w	r9, #0
   1866e:	f000 839a 	beq.w	18da6 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   18672:	f8df a16c 	ldr.w	sl, [pc, #364]	; 187e0 <isr_rx_scan+0x278>
   18676:	2304      	movs	r3, #4
   18678:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   1867c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   18680:	2300      	movs	r3, #0
   18682:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   18686:	f7f8 fb91 	bl	10dac <radio_pkt_scratch_get>
   1868a:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1868c:	7803      	ldrb	r3, [r0, #0]
   1868e:	2205      	movs	r2, #5
   18690:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   18694:	b2db      	uxtb	r3, r3
   18696:	f043 0320 	orr.w	r3, r3, #32
   1869a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1869c:	7a23      	ldrb	r3, [r4, #8]
   1869e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   186a2:	7802      	ldrb	r2, [r0, #0]
   186a4:	f363 12c7 	bfi	r2, r3, #7, #1
   186a8:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   186aa:	2322      	movs	r3, #34	; 0x22
   186ac:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   186ae:	4628      	mov	r0, r5
   186b0:	f002 fbde 	bl	1ae70 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   186b4:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   186b8:	f013 0f01 	tst.w	r3, #1
   186bc:	f000 8098 	beq.w	187f0 <isr_rx_scan+0x288>
   186c0:	2800      	cmp	r0, #0
   186c2:	f000 8095 	beq.w	187f0 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   186c6:	7832      	ldrb	r2, [r6, #0]
   186c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   186cc:	4633      	mov	r3, r6
   186ce:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   186d2:	2206      	movs	r2, #6
   186d4:	4601      	mov	r1, r0
   186d6:	4618      	mov	r0, r3
   186d8:	f7e7 fdf2 	bl	2c0 <memcpy>
   186dc:	e096      	b.n	1880c <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   186de:	2dff      	cmp	r5, #255	; 0xff
   186e0:	d00a      	beq.n	186f8 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   186e2:	4b3f      	ldr	r3, [pc, #252]	; (187e0 <isr_rx_scan+0x278>)
   186e4:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   186e8:	429d      	cmp	r5, r3
   186ea:	bf14      	ite	ne
   186ec:	2300      	movne	r3, #0
   186ee:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   186f0:	2b00      	cmp	r3, #0
   186f2:	d181      	bne.n	185f8 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   186f4:	2300      	movs	r3, #0
   186f6:	e788      	b.n	1860a <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   186f8:	4b39      	ldr	r3, [pc, #228]	; (187e0 <isr_rx_scan+0x278>)
   186fa:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   186fe:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18702:	7a23      	ldrb	r3, [r4, #8]
   18704:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18708:	429a      	cmp	r2, r3
   1870a:	d001      	beq.n	18710 <isr_rx_scan+0x1a8>
   1870c:	2300      	movs	r3, #0
   1870e:	e7ef      	b.n	186f0 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   18710:	2206      	movs	r2, #6
   18712:	f108 0102 	add.w	r1, r8, #2
   18716:	4834      	ldr	r0, [pc, #208]	; (187e8 <isr_rx_scan+0x280>)
   18718:	f013 fc1c 	bl	2bf54 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1871c:	b908      	cbnz	r0, 18722 <isr_rx_scan+0x1ba>
   1871e:	2301      	movs	r3, #1
   18720:	e7e6      	b.n	186f0 <isr_rx_scan+0x188>
   18722:	2300      	movs	r3, #0
   18724:	e7e4      	b.n	186f0 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   18726:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   18728:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1872c:	462a      	mov	r2, r5
   1872e:	4651      	mov	r1, sl
   18730:	09c0      	lsrs	r0, r0, #7
   18732:	f002 fe17 	bl	1b364 <ctrl_rl_addr_resolve>
   18736:	4681      	mov	r9, r0
   18738:	b9d0      	cbnz	r0, 18770 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1873a:	4b29      	ldr	r3, [pc, #164]	; (187e0 <isr_rx_scan+0x278>)
   1873c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   18740:	f013 0f01 	tst.w	r3, #1
   18744:	d119      	bne.n	1877a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   18746:	4b26      	ldr	r3, [pc, #152]	; (187e0 <isr_rx_scan+0x278>)
   18748:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1874c:	7a23      	ldrb	r3, [r4, #8]
   1874e:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   18750:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18754:	d017      	beq.n	18786 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   18756:	4b22      	ldr	r3, [pc, #136]	; (187e0 <isr_rx_scan+0x278>)
   18758:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1875c:	f013 0f20 	tst.w	r3, #32
   18760:	d003      	beq.n	1876a <isr_rx_scan+0x202>
   18762:	f994 3008 	ldrsb.w	r3, [r4, #8]
   18766:	2b00      	cmp	r3, #0
   18768:	db17      	blt.n	1879a <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   1876a:	f1b9 0f00 	cmp.w	r9, #0
   1876e:	d11d      	bne.n	187ac <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18770:	f1b9 0f00 	cmp.w	r9, #0
   18774:	d01d      	beq.n	187b2 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   18776:	2301      	movs	r3, #1
   18778:	e747      	b.n	1860a <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1877a:	4628      	mov	r0, r5
   1877c:	f002 fb78 	bl	1ae70 <ctrl_lrpa_get>
   18780:	2800      	cmp	r0, #0
   18782:	d1f5      	bne.n	18770 <isr_rx_scan+0x208>
   18784:	e7df      	b.n	18746 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   18786:	2206      	movs	r2, #6
   18788:	4651      	mov	r1, sl
   1878a:	4818      	ldr	r0, [pc, #96]	; (187ec <isr_rx_scan+0x284>)
   1878c:	f013 fbe2 	bl	2bf54 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   18790:	2800      	cmp	r0, #0
   18792:	d1e0      	bne.n	18756 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   18794:	f04f 0901 	mov.w	r9, #1
   18798:	e7ea      	b.n	18770 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1879a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1879e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   187a2:	2b40      	cmp	r3, #64	; 0x40
   187a4:	d1e1      	bne.n	1876a <isr_rx_scan+0x202>
		return true;
   187a6:	f04f 0901 	mov.w	r9, #1
   187aa:	e7de      	b.n	1876a <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   187ac:	f04f 0901 	mov.w	r9, #1
   187b0:	e7de      	b.n	18770 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   187b2:	2300      	movs	r3, #0
   187b4:	e729      	b.n	1860a <isr_rx_scan+0xa2>
   187b6:	2301      	movs	r3, #1
   187b8:	e727      	b.n	1860a <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   187ba:	4909      	ldr	r1, [pc, #36]	; (187e0 <isr_rx_scan+0x278>)
   187bc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   187c0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   187c4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   187c6:	fa52 f383 	uxtab	r3, r2, r3
   187ca:	b2db      	uxtb	r3, r3
   187cc:	e743      	b.n	18656 <isr_rx_scan+0xee>
		return 0;
   187ce:	f04f 0900 	mov.w	r9, #0
   187d2:	e74a      	b.n	1866a <isr_rx_scan+0x102>
   187d4:	f3af 8000 	nop.w
   187d8:	3b9aca00 	.word	0x3b9aca00
   187dc:	00000000 	.word	0x00000000
   187e0:	20000f7c 	.word	0x20000f7c
   187e4:	1afd498d 	.word	0x1afd498d
   187e8:	20001062 	.word	0x20001062
   187ec:	2000105c 	.word	0x2000105c
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   187f0:	4962      	ldr	r1, [pc, #392]	; (1897c <isr_rx_scan+0x414>)
   187f2:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   187f6:	09db      	lsrs	r3, r3, #7
   187f8:	7832      	ldrb	r2, [r6, #0]
   187fa:	f363 1286 	bfi	r2, r3, #6, #1
   187fe:	4630      	mov	r0, r6
   18800:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   18804:	2206      	movs	r2, #6
   18806:	31e0      	adds	r1, #224	; 0xe0
   18808:	f7e7 fd5a 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   1880c:	f106 0308 	add.w	r3, r6, #8
   18810:	930b      	str	r3, [sp, #44]	; 0x2c
   18812:	2206      	movs	r2, #6
   18814:	f104 010a 	add.w	r1, r4, #10
   18818:	4618      	mov	r0, r3
   1881a:	f7e7 fd51 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   1881e:	2204      	movs	r2, #4
   18820:	f108 0110 	add.w	r1, r8, #16
   18824:	f106 000e 	add.w	r0, r6, #14
   18828:	f7e7 fd4a 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   1882c:	2203      	movs	r2, #3
   1882e:	f108 0114 	add.w	r1, r8, #20
   18832:	f106 0012 	add.w	r0, r6, #18
   18836:	f7e7 fd43 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   1883a:	2301      	movs	r3, #1
   1883c:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1883e:	4b4f      	ldr	r3, [pc, #316]	; (1897c <isr_rx_scan+0x414>)
   18840:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   18844:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18848:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1884c:	f7f8 fc2e 	bl	110ac <radio_tmr_end_get>
   18850:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   18854:	4b49      	ldr	r3, [pc, #292]	; (1897c <isr_rx_scan+0x414>)
   18856:	689b      	ldr	r3, [r3, #8]
   18858:	2b00      	cmp	r3, #0
   1885a:	dd75      	ble.n	18948 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   1885c:	4b47      	ldr	r3, [pc, #284]	; (1897c <isr_rx_scan+0x414>)
   1885e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   18862:	2b00      	cmp	r3, #0
   18864:	d174      	bne.n	18950 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   18866:	75b3      	strb	r3, [r6, #22]
   18868:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1886a:	2100      	movs	r1, #0
   1886c:	4608      	mov	r0, r1
   1886e:	f7f8 fa33 	bl	10cd8 <radio_tx_ready_delay_get>
   18872:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   18876:	2100      	movs	r1, #0
   18878:	4608      	mov	r0, r1
   1887a:	f7f8 fa2f 	bl	10cdc <radio_tx_chain_delay_get>
   1887e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   18882:	f10a 031e 	add.w	r3, sl, #30
   18886:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   18888:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1897c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   1888c:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   18890:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   18892:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   18896:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   18898:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   1889c:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   1889e:	2205      	movs	r2, #5
   188a0:	f108 0117 	add.w	r1, r8, #23
   188a4:	f106 001e 	add.w	r0, r6, #30
   188a8:	f7e7 fd0a 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   188ac:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   188b0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   188b4:	f362 0304 	bfi	r3, r2, #0, #5
   188b8:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   188bc:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   188c0:	b2db      	uxtb	r3, r3
   188c2:	f362 1347 	bfi	r3, r2, #5, #3
   188c6:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   188ca:	f7f8 fa83 	bl	10dd4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   188ce:	4630      	mov	r0, r6
   188d0:	f7f8 f9fc 	bl	10ccc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   188d4:	f7f8 fa32 	bl	10d3c <radio_is_ready>
   188d8:	4682      	mov	sl, r0
   188da:	2800      	cmp	r0, #0
   188dc:	d148      	bne.n	18970 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   188de:	f44f 72aa 	mov.w	r2, #340	; 0x154
   188e2:	4b26      	ldr	r3, [pc, #152]	; (1897c <isr_rx_scan+0x414>)
   188e4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   188e8:	4640      	mov	r0, r8
   188ea:	f7f8 f838 	bl	1095e <mem_index_get>
   188ee:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   188f2:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   188f6:	2206      	movs	r2, #6
   188f8:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   188fc:	2300      	movs	r3, #0
   188fe:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   18902:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   18906:	4631      	mov	r1, r6
   18908:	f811 3b02 	ldrb.w	r3, [r1], #2
   1890c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18910:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   18914:	f109 001b 	add.w	r0, r9, #27
   18918:	f7e7 fcd2 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1891c:	b397      	cbz	r7, 18984 <isr_rx_scan+0x41c>
   1891e:	2dff      	cmp	r5, #255	; 0xff
   18920:	d030      	beq.n	18984 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   18922:	f109 020e 	add.w	r2, r9, #14
   18926:	f109 010d 	add.w	r1, r9, #13
   1892a:	4628      	mov	r0, r5
   1892c:	f002 fc96 	bl	1b25c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   18930:	f899 300d 	ldrb.w	r3, [r9, #13]
   18934:	3302      	adds	r3, #2
   18936:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1893a:	2206      	movs	r2, #6
   1893c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1893e:	f109 0014 	add.w	r0, r9, #20
   18942:	f7e7 fcbd 	bl	2c0 <memcpy>
   18946:	e02e      	b.n	189a6 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   18948:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   1894c:	e786      	b.n	1885c <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   1894e:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   18950:	2b00      	cmp	r3, #0
   18952:	dbfc      	blt.n	1894e <isr_rx_scan+0x3e6>
   18954:	459a      	cmp	sl, r3
   18956:	d8fa      	bhi.n	1894e <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   18958:	eba3 020a 	sub.w	r2, r3, sl
   1895c:	4908      	ldr	r1, [pc, #32]	; (18980 <isr_rx_scan+0x418>)
   1895e:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   18962:	0a92      	lsrs	r2, r2, #10
   18964:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   18966:	7d72      	ldrb	r2, [r6, #21]
   18968:	3201      	adds	r2, #1
   1896a:	7572      	strb	r2, [r6, #21]
   1896c:	469a      	mov	sl, r3
   1896e:	e77c      	b.n	1886a <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   18970:	4040      	eors	r0, r0
   18972:	f380 8811 	msr	BASEPRI, r0
   18976:	f04f 0004 	mov.w	r0, #4
   1897a:	df02      	svc	2
   1897c:	20000f7c 	.word	0x20000f7c
   18980:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   18984:	2206      	movs	r2, #6
   18986:	2100      	movs	r1, #0
   18988:	f109 0014 	add.w	r0, r9, #20
   1898c:	f013 fb76 	bl	2c07c <memset>
				pdu_adv_tx->rx_addr;
   18990:	7833      	ldrb	r3, [r6, #0]
   18992:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   18996:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1899a:	2206      	movs	r2, #6
   1899c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1899e:	f109 000e 	add.w	r0, r9, #14
   189a2:	f7e7 fc8d 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   189a6:	4dce      	ldr	r5, [pc, #824]	; (18ce0 <isr_rx_scan+0x778>)
   189a8:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   189ac:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   189b0:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   189b4:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   189b8:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   189bc:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   189c0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   189c4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   189c8:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   189cc:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   189d0:	f7fa fae2 	bl	12f98 <rx_fc_lock>
		packet_rx_enqueue();
   189d4:	f7fc ffca 	bl	1596c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   189d8:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   189dc:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   189e0:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   189e2:	4291      	cmp	r1, r2
   189e4:	f0c0 80b9 	bcc.w	18b5a <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   189e8:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   189ec:	1acb      	subs	r3, r1, r3
   189ee:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   189f0:	2b02      	cmp	r3, #2
   189f2:	f240 80bc 	bls.w	18b6e <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   189f6:	4bba      	ldr	r3, [pc, #744]	; (18ce0 <isr_rx_scan+0x778>)
   189f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   189fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   18a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   18a04:	2b00      	cmp	r3, #0
   18a06:	f000 80b4 	beq.w	18b72 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   18a0a:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   18a0e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   18a10:	220b      	movs	r2, #11
   18a12:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   18a14:	7a22      	ldrb	r2, [r4, #8]
   18a16:	f012 0f20 	tst.w	r2, #32
   18a1a:	f000 80b0 	beq.w	18b7e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   18a1e:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   18a22:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   18a26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   18a2a:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   18a2e:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   18a32:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   18a36:	f898 001d 	ldrb.w	r0, [r8, #29]
   18a3a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   18a3e:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   18a42:	404a      	eors	r2, r1
   18a44:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   18a48:	2201      	movs	r2, #1
   18a4a:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   18a4c:	f7fc ff8e 	bl	1596c <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   18a50:	4ea3      	ldr	r6, [pc, #652]	; (18ce0 <isr_rx_scan+0x778>)
   18a52:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   18a56:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   18a5a:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   18a5e:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   18a62:	2327      	movs	r3, #39	; 0x27
   18a64:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   18a68:	2400      	movs	r4, #0
   18a6a:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   18a6e:	429d      	cmp	r5, r3
   18a70:	bf38      	it	cc
   18a72:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a74:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   18a78:	9300      	str	r3, [sp, #0]
   18a7a:	4b9a      	ldr	r3, [pc, #616]	; (18ce4 <isr_rx_scan+0x77c>)
   18a7c:	2206      	movs	r2, #6
   18a7e:	4621      	mov	r1, r4
   18a80:	4620      	mov	r0, r4
   18a82:	f7f9 fc99 	bl	123b8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   18a86:	f240 6131 	movw	r1, #1585	; 0x631
   18a8a:	f7fa faed 	bl	13068 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   18a8e:	9400      	str	r4, [sp, #0]
   18a90:	4623      	mov	r3, r4
   18a92:	2204      	movs	r2, #4
   18a94:	4621      	mov	r1, r4
   18a96:	4620      	mov	r0, r4
   18a98:	f7f9 fc8e 	bl	123b8 <ticker_stop>
				     conn->handle,
   18a9c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18aa0:	3307      	adds	r3, #7
   18aa2:	b2db      	uxtb	r3, r3
   18aa4:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   18aa6:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18aa8:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   18aaa:	4f8f      	ldr	r7, [pc, #572]	; (18ce8 <isr_rx_scan+0x780>)
   18aac:	a38a      	add	r3, pc, #552	; (adr r3, 18cd8 <isr_rx_scan+0x770>)
   18aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   18ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
   18ab4:	fba1 0107 	umull	r0, r1, r1, r7
   18ab8:	f7e8 fb20 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18abc:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   18ac0:	fbab 1207 	umull	r1, r2, fp, r7
   18ac4:	468b      	mov	fp, r1
   18ac6:	4694      	mov	ip, r2
   18ac8:	a383      	add	r3, pc, #524	; (adr r3, 18cd8 <isr_rx_scan+0x770>)
   18aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   18ace:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   18ad2:	4658      	mov	r0, fp
   18ad4:	4661      	mov	r1, ip
   18ad6:	f7e8 fb11 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18ada:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   18ade:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18ae2:	2100      	movs	r1, #0
   18ae4:	4a81      	ldr	r2, [pc, #516]	; (18cec <isr_rx_scan+0x784>)
   18ae6:	2307      	movs	r3, #7
   18ae8:	fb03 f300 	mul.w	r3, r3, r0
   18aec:	fb02 3301 	mla	r3, r2, r1, r3
   18af0:	fba0 0102 	umull	r0, r1, r0, r2
   18af4:	4419      	add	r1, r3
   18af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18afa:	2300      	movs	r3, #0
   18afc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   18b00:	ebbb 0b00 	subs.w	fp, fp, r0
   18b04:	eb6c 0c01 	sbc.w	ip, ip, r1
   18b08:	4658      	mov	r0, fp
   18b0a:	4661      	mov	r1, ip
   18b0c:	f7e8 faf6 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   18b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b14:	442b      	add	r3, r5
   18b16:	b29b      	uxth	r3, r3
		ticker_status =
   18b18:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   18b1c:	9208      	str	r2, [sp, #32]
   18b1e:	4a74      	ldr	r2, [pc, #464]	; (18cf0 <isr_rx_scan+0x788>)
   18b20:	9207      	str	r2, [sp, #28]
   18b22:	f8cd 8018 	str.w	r8, [sp, #24]
   18b26:	4a73      	ldr	r2, [pc, #460]	; (18cf4 <isr_rx_scan+0x78c>)
   18b28:	9205      	str	r2, [sp, #20]
   18b2a:	9304      	str	r3, [sp, #16]
   18b2c:	9403      	str	r4, [sp, #12]
   18b2e:	9002      	str	r0, [sp, #8]
   18b30:	9701      	str	r7, [sp, #4]
   18b32:	f8cd 9000 	str.w	r9, [sp]
   18b36:	4633      	mov	r3, r6
   18b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18b3a:	4621      	mov	r1, r4
   18b3c:	4620      	mov	r0, r4
   18b3e:	f7f9 fb9f 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18b42:	2800      	cmp	r0, #0
   18b44:	f000 8132 	beq.w	18dac <isr_rx_scan+0x844>
   18b48:	2802      	cmp	r0, #2
   18b4a:	f000 811b 	beq.w	18d84 <isr_rx_scan+0x81c>
   18b4e:	4040      	eors	r0, r0
   18b50:	f380 8811 	msr	BASEPRI, r0
   18b54:	f04f 0004 	mov.w	r0, #4
   18b58:	df02      	svc	2
		return (_radio.packet_rx_count -
   18b5a:	4a61      	ldr	r2, [pc, #388]	; (18ce0 <isr_rx_scan+0x778>)
   18b5c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   18b60:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   18b64:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   18b66:	fa51 f383 	uxtab	r3, r1, r3
   18b6a:	b2db      	uxtb	r3, r3
   18b6c:	e740      	b.n	189f0 <isr_rx_scan+0x488>
		return 0;
   18b6e:	2300      	movs	r3, #0
   18b70:	e748      	b.n	18a04 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   18b72:	4040      	eors	r0, r0
   18b74:	f380 8811 	msr	BASEPRI, r0
   18b78:	f04f 0004 	mov.w	r0, #4
   18b7c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   18b7e:	2200      	movs	r2, #0
   18b80:	72da      	strb	r2, [r3, #11]
   18b82:	e763      	b.n	18a4c <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   18b84:	4a56      	ldr	r2, [pc, #344]	; (18ce0 <isr_rx_scan+0x778>)
   18b86:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   18b8a:	f012 0f08 	tst.w	r2, #8
   18b8e:	f43f ad13 	beq.w	185b8 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   18b92:	4a53      	ldr	r2, [pc, #332]	; (18ce0 <isr_rx_scan+0x778>)
   18b94:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   18b98:	2a00      	cmp	r2, #0
   18b9a:	f47f ad0d 	bne.w	185b8 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   18b9e:	b37f      	cbz	r7, 18c00 <isr_rx_scan+0x698>
   18ba0:	4629      	mov	r1, r5
   18ba2:	2200      	movs	r2, #0
   18ba4:	4630      	mov	r0, r6
   18ba6:	f7fc ff81 	bl	15aac <isr_rx_scan_report>
		if (err) {
   18baa:	4682      	mov	sl, r0
   18bac:	2800      	cmp	r0, #0
   18bae:	f040 80e9 	bne.w	18d84 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   18bb2:	f7f8 f8fb 	bl	10dac <radio_pkt_scratch_get>
   18bb6:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   18bb8:	7803      	ldrb	r3, [r0, #0]
   18bba:	2203      	movs	r2, #3
   18bbc:	f362 0303 	bfi	r3, r2, #0, #4
   18bc0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   18bc2:	7a23      	ldrb	r3, [r4, #8]
   18bc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18bc8:	7802      	ldrb	r2, [r0, #0]
   18bca:	f363 12c7 	bfi	r2, r3, #7, #1
   18bce:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   18bd0:	230c      	movs	r3, #12
   18bd2:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   18bd4:	4628      	mov	r0, r5
   18bd6:	f002 f94b 	bl	1ae70 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   18bda:	4b41      	ldr	r3, [pc, #260]	; (18ce0 <isr_rx_scan+0x778>)
   18bdc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   18be0:	f013 0f01 	tst.w	r3, #1
   18be4:	d00e      	beq.n	18c04 <isr_rx_scan+0x69c>
   18be6:	b168      	cbz	r0, 18c04 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   18be8:	7832      	ldrb	r2, [r6, #0]
   18bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   18bee:	4633      	mov	r3, r6
   18bf0:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   18bf4:	2206      	movs	r2, #6
   18bf6:	4601      	mov	r1, r0
   18bf8:	4618      	mov	r0, r3
   18bfa:	f7e7 fb61 	bl	2c0 <memcpy>
   18bfe:	e00f      	b.n	18c20 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   18c00:	21ff      	movs	r1, #255	; 0xff
   18c02:	e7ce      	b.n	18ba2 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   18c04:	4936      	ldr	r1, [pc, #216]	; (18ce0 <isr_rx_scan+0x778>)
   18c06:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   18c0a:	09db      	lsrs	r3, r3, #7
   18c0c:	7832      	ldrb	r2, [r6, #0]
   18c0e:	f363 1286 	bfi	r2, r3, #6, #1
   18c12:	4630      	mov	r0, r6
   18c14:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   18c18:	2206      	movs	r2, #6
   18c1a:	31e0      	adds	r1, #224	; 0xe0
   18c1c:	f7e7 fb50 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   18c20:	2206      	movs	r2, #6
   18c22:	f104 010a 	add.w	r1, r4, #10
   18c26:	f106 0008 	add.w	r0, r6, #8
   18c2a:	f7e7 fb49 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   18c2e:	4b2c      	ldr	r3, [pc, #176]	; (18ce0 <isr_rx_scan+0x778>)
   18c30:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18c34:	f042 0202 	orr.w	r2, r2, #2
   18c38:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   18c3c:	2202      	movs	r2, #2
   18c3e:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   18c40:	2096      	movs	r0, #150	; 0x96
   18c42:	f7f8 f969 	bl	10f18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   18c46:	2000      	movs	r0, #0
   18c48:	f7f8 f8b4 	bl	10db4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   18c4c:	4630      	mov	r0, r6
   18c4e:	f7f8 f83d 	bl	10ccc <radio_pkt_tx_set>
		radio_tmr_end_capture();
   18c52:	f7f8 fa19 	bl	11088 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   18c56:	f7f8 f871 	bl	10d3c <radio_is_ready>
   18c5a:	4682      	mov	sl, r0
   18c5c:	2800      	cmp	r0, #0
   18c5e:	f000 8091 	beq.w	18d84 <isr_rx_scan+0x81c>
   18c62:	4040      	eors	r0, r0
   18c64:	f380 8811 	msr	BASEPRI, r0
   18c68:	f04f 0004 	mov.w	r0, #4
   18c6c:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   18c6e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   18c70:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   18c74:	462a      	mov	r2, r5
   18c76:	4649      	mov	r1, r9
   18c78:	09c0      	lsrs	r0, r0, #7
   18c7a:	f002 fb73 	bl	1b364 <ctrl_rl_addr_resolve>
   18c7e:	4682      	mov	sl, r0
   18c80:	2800      	cmp	r0, #0
   18c82:	d146      	bne.n	18d12 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   18c84:	4b16      	ldr	r3, [pc, #88]	; (18ce0 <isr_rx_scan+0x778>)
   18c86:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   18c8a:	7a23      	ldrb	r3, [r4, #8]
   18c8c:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   18c8e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18c92:	d00b      	beq.n	18cac <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   18c94:	4b12      	ldr	r3, [pc, #72]	; (18ce0 <isr_rx_scan+0x778>)
   18c96:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   18c9a:	f013 0f20 	tst.w	r3, #32
   18c9e:	d02d      	beq.n	18cfc <isr_rx_scan+0x794>
   18ca0:	f994 3008 	ldrsb.w	r3, [r4, #8]
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	db0c      	blt.n	18cc2 <isr_rx_scan+0x75a>
	bool dir_report = false;
   18ca8:	46d1      	mov	r9, sl
   18caa:	e028      	b.n	18cfe <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   18cac:	2206      	movs	r2, #6
   18cae:	4649      	mov	r1, r9
   18cb0:	4811      	ldr	r0, [pc, #68]	; (18cf8 <isr_rx_scan+0x790>)
   18cb2:	f013 f94f 	bl	2bf54 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   18cb6:	2800      	cmp	r0, #0
   18cb8:	d1ec      	bne.n	18c94 <isr_rx_scan+0x72c>
	bool dir_report = false;
   18cba:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   18cbc:	f04f 0a01 	mov.w	sl, #1
   18cc0:	e029      	b.n	18d16 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   18cc2:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   18cc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18cca:	2b40      	cmp	r3, #64	; 0x40
   18ccc:	d01d      	beq.n	18d0a <isr_rx_scan+0x7a2>
	bool dir_report = false;
   18cce:	46d1      	mov	r9, sl
   18cd0:	e015      	b.n	18cfe <isr_rx_scan+0x796>
   18cd2:	bf00      	nop
   18cd4:	f3af 8000 	nop.w
   18cd8:	1afd498d 	.word	0x1afd498d
   18cdc:	00000007 	.word	0x00000007
   18ce0:	20000f7c 	.word	0x20000f7c
   18ce4:	00013069 	.word	0x00013069
   18ce8:	3b9aca00 	.word	0x3b9aca00
   18cec:	1afd498d 	.word	0x1afd498d
   18cf0:	00012fd5 	.word	0x00012fd5
   18cf4:	00017b95 	.word	0x00017b95
   18cf8:	2000105c 	.word	0x2000105c
   18cfc:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   18cfe:	f1ba 0f00 	cmp.w	sl, #0
   18d02:	d008      	beq.n	18d16 <isr_rx_scan+0x7ae>
   18d04:	f04f 0a01 	mov.w	sl, #1
   18d08:	e005      	b.n	18d16 <isr_rx_scan+0x7ae>
			*dir_report = true;
   18d0a:	f04f 0901 	mov.w	r9, #1
		return true;
   18d0e:	46ca      	mov	sl, r9
   18d10:	e7f5      	b.n	18cfe <isr_rx_scan+0x796>
	bool dir_report = false;
   18d12:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18d16:	f1ba 0f00 	cmp.w	sl, #0
   18d1a:	d12b      	bne.n	18d74 <isr_rx_scan+0x80c>
   18d1c:	e454      	b.n	185c8 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   18d1e:	4a26      	ldr	r2, [pc, #152]	; (18db8 <isr_rx_scan+0x850>)
   18d20:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   18d24:	f012 0f07 	tst.w	r2, #7
   18d28:	d124      	bne.n	18d74 <isr_rx_scan+0x80c>
   18d2a:	e459      	b.n	185e0 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   18d2c:	4b22      	ldr	r3, [pc, #136]	; (18db8 <isr_rx_scan+0x850>)
   18d2e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   18d32:	f013 0f02 	tst.w	r3, #2
   18d36:	d102      	bne.n	18d3e <isr_rx_scan+0x7d6>
		return 1;
   18d38:	f04f 0a01 	mov.w	sl, #1
   18d3c:	e022      	b.n	18d84 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   18d3e:	f7f8 f835 	bl	10dac <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   18d42:	7802      	ldrb	r2, [r0, #0]
   18d44:	7a23      	ldrb	r3, [r4, #8]
   18d46:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18d4a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18d4e:	d004      	beq.n	18d5a <isr_rx_scan+0x7f2>
   18d50:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   18d52:	b97b      	cbnz	r3, 18d74 <isr_rx_scan+0x80c>
		return 1;
   18d54:	f04f 0a01 	mov.w	sl, #1
   18d58:	e014      	b.n	18d84 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   18d5a:	2206      	movs	r2, #6
   18d5c:	f108 0102 	add.w	r1, r8, #2
   18d60:	3008      	adds	r0, #8
   18d62:	f013 f8f7 	bl	2bf54 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   18d66:	b108      	cbz	r0, 18d6c <isr_rx_scan+0x804>
   18d68:	2300      	movs	r3, #0
   18d6a:	e7f2      	b.n	18d52 <isr_rx_scan+0x7ea>
   18d6c:	2301      	movs	r3, #1
   18d6e:	e7f0      	b.n	18d52 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   18d70:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   18d74:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   18d76:	b1db      	cbz	r3, 18db0 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   18d78:	4b0f      	ldr	r3, [pc, #60]	; (18db8 <isr_rx_scan+0x850>)
   18d7a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18d7e:	b12b      	cbz	r3, 18d8c <isr_rx_scan+0x824>
		return 1;
   18d80:	f04f 0a01 	mov.w	sl, #1
}
   18d84:	4650      	mov	r0, sl
   18d86:	b00f      	add	sp, #60	; 0x3c
   18d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   18d8c:	b907      	cbnz	r7, 18d90 <isr_rx_scan+0x828>
   18d8e:	25ff      	movs	r5, #255	; 0xff
   18d90:	464a      	mov	r2, r9
   18d92:	4629      	mov	r1, r5
   18d94:	4630      	mov	r0, r6
   18d96:	f7fc fe89 	bl	15aac <isr_rx_scan_report>
		if (err) {
   18d9a:	4682      	mov	sl, r0
   18d9c:	2800      	cmp	r0, #0
   18d9e:	d1f1      	bne.n	18d84 <isr_rx_scan+0x81c>
	return 1;
   18da0:	f04f 0a01 	mov.w	sl, #1
   18da4:	e7ee      	b.n	18d84 <isr_rx_scan+0x81c>
			return 1;
   18da6:	f04f 0a01 	mov.w	sl, #1
   18daa:	e7eb      	b.n	18d84 <isr_rx_scan+0x81c>
		return 0;
   18dac:	4682      	mov	sl, r0
   18dae:	e7e9      	b.n	18d84 <isr_rx_scan+0x81c>
		return 1;
   18db0:	f04f 0a01 	mov.w	sl, #1
   18db4:	e7e6      	b.n	18d84 <isr_rx_scan+0x81c>
   18db6:	bf00      	nop
   18db8:	20000f7c 	.word	0x20000f7c
   18dbc:	00000000 	.word	0x00000000

00018dc0 <isr_rx_adv>:
{
   18dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dc4:	b08f      	sub	sp, #60	; 0x3c
   18dc6:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   18dc8:	b9fa      	cbnz	r2, 18e0a <isr_rx_adv+0x4a>
   18dca:	20ff      	movs	r0, #255	; 0xff
   18dcc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   18dd0:	f7f7 ffec 	bl	10dac <radio_pkt_scratch_get>
   18dd4:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   18dd6:	4f9d      	ldr	r7, [pc, #628]	; (1904c <isr_rx_adv+0x28c>)
   18dd8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   18ddc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   18de0:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   18de4:	3320      	adds	r3, #32
   18de6:	441f      	add	r7, r3
   18de8:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18dea:	7803      	ldrb	r3, [r0, #0]
   18dec:	f003 030f 	and.w	r3, r3, #15
   18df0:	2b03      	cmp	r3, #3
   18df2:	d00e      	beq.n	18e12 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18df4:	f898 3000 	ldrb.w	r3, [r8]
   18df8:	f003 030f 	and.w	r3, r3, #15
   18dfc:	2b05      	cmp	r3, #5
   18dfe:	d065      	beq.n	18ecc <isr_rx_adv+0x10c>
	return 1;
   18e00:	2301      	movs	r3, #1
}
   18e02:	4618      	mov	r0, r3
   18e04:	b00f      	add	sp, #60	; 0x3c
   18e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   18e0a:	4618      	mov	r0, r3
   18e0c:	f002 f892 	bl	1af34 <ctrl_rl_irk_idx>
   18e10:	e7dc      	b.n	18dcc <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   18e12:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18e14:	2b0c      	cmp	r3, #12
   18e16:	d1ed      	bne.n	18df4 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   18e18:	4b8c      	ldr	r3, [pc, #560]	; (1904c <isr_rx_adv+0x28c>)
   18e1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18e1e:	f013 0f40 	tst.w	r3, #64	; 0x40
   18e22:	d030      	beq.n	18e86 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   18e24:	4b89      	ldr	r3, [pc, #548]	; (1904c <isr_rx_adv+0x28c>)
   18e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   18e2a:	f013 0f40 	tst.w	r3, #64	; 0x40
   18e2e:	d04b      	beq.n	18ec8 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   18e30:	2c00      	cmp	r4, #0
   18e32:	d034      	beq.n	18e9e <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   18e34:	79fb      	ldrb	r3, [r7, #7]
   18e36:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18e3a:	f898 2000 	ldrb.w	r2, [r8]
   18e3e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18e42:	d034      	beq.n	18eae <isr_rx_adv+0xee>
   18e44:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18e46:	2b00      	cmp	r3, #0
   18e48:	d13c      	bne.n	18ec4 <isr_rx_adv+0x104>
   18e4a:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   18e4c:	2b00      	cmp	r3, #0
   18e4e:	d0d1      	beq.n	18df4 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   18e50:	4c7e      	ldr	r4, [pc, #504]	; (1904c <isr_rx_adv+0x28c>)
   18e52:	2303      	movs	r3, #3
   18e54:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   18e56:	f7f7 ffbd 	bl	10dd4 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   18e5a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   18e5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   18e62:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   18e66:	3370      	adds	r3, #112	; 0x70
   18e68:	4423      	add	r3, r4
   18e6a:	1dd8      	adds	r0, r3, #7
   18e6c:	f7f7 ff2e 	bl	10ccc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   18e70:	f7f7 ff64 	bl	10d3c <radio_is_ready>
   18e74:	4603      	mov	r3, r0
   18e76:	2800      	cmp	r0, #0
   18e78:	d0c3      	beq.n	18e02 <isr_rx_adv+0x42>
   18e7a:	4040      	eors	r0, r0
   18e7c:	f380 8811 	msr	BASEPRI, r0
   18e80:	f04f 0004 	mov.w	r0, #4
   18e84:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   18e86:	4601      	mov	r1, r0
   18e88:	f811 0b02 	ldrb.w	r0, [r1], #2
   18e8c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18e90:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18e94:	f002 fa0e 	bl	1b2b4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   18e98:	2800      	cmp	r0, #0
   18e9a:	d1cb      	bne.n	18e34 <isr_rx_adv+0x74>
   18e9c:	e7c2      	b.n	18e24 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18e9e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   18ea2:	f002 f871 	bl	1af88 <ctrl_irk_whitelisted>
   18ea6:	2800      	cmp	r0, #0
   18ea8:	d1c4      	bne.n	18e34 <isr_rx_adv+0x74>
   18eaa:	2300      	movs	r3, #0
   18eac:	e7ce      	b.n	18e4c <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   18eae:	2206      	movs	r2, #6
   18eb0:	f108 0108 	add.w	r1, r8, #8
   18eb4:	1ca8      	adds	r0, r5, #2
   18eb6:	f013 f84d 	bl	2bf54 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   18eba:	b908      	cbnz	r0, 18ec0 <isr_rx_adv+0x100>
   18ebc:	2301      	movs	r3, #1
   18ebe:	e7c2      	b.n	18e46 <isr_rx_adv+0x86>
   18ec0:	2300      	movs	r3, #0
   18ec2:	e7c0      	b.n	18e46 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18ec4:	2301      	movs	r3, #1
   18ec6:	e7c1      	b.n	18e4c <isr_rx_adv+0x8c>
   18ec8:	2300      	movs	r3, #0
   18eca:	e7bf      	b.n	18e4c <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   18ecc:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18ed0:	2b22      	cmp	r3, #34	; 0x22
   18ed2:	d001      	beq.n	18ed8 <isr_rx_adv+0x118>
	return 1;
   18ed4:	2301      	movs	r3, #1
   18ed6:	e794      	b.n	18e02 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18ed8:	79fb      	ldrb	r3, [r7, #7]
   18eda:	f003 030f 	and.w	r3, r3, #15
   18ede:	2b01      	cmp	r3, #1
   18ee0:	d01a      	beq.n	18f18 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   18ee2:	4b5a      	ldr	r3, [pc, #360]	; (1904c <isr_rx_adv+0x28c>)
   18ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18ee8:	09db      	lsrs	r3, r3, #7
   18eea:	d06d      	beq.n	18fc8 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   18eec:	4b57      	ldr	r3, [pc, #348]	; (1904c <isr_rx_adv+0x28c>)
   18eee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   18ef2:	09db      	lsrs	r3, r3, #7
   18ef4:	f000 8096 	beq.w	19024 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   18ef8:	2c00      	cmp	r4, #0
   18efa:	d071      	beq.n	18fe0 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   18efc:	79fb      	ldrb	r3, [r7, #7]
   18efe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18f02:	f898 2000 	ldrb.w	r2, [r8]
   18f06:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18f0a:	d071      	beq.n	18ff0 <isr_rx_adv+0x230>
   18f0c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18f0e:	2b00      	cmp	r3, #0
   18f10:	f000 809a 	beq.w	19048 <isr_rx_adv+0x288>
   18f14:	2301      	movs	r3, #1
   18f16:	e086      	b.n	19026 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   18f18:	4641      	mov	r1, r8
   18f1a:	f811 0b02 	ldrb.w	r0, [r1], #2
   18f1e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18f22:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18f26:	f002 f9c5 	bl	1b2b4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   18f2a:	b908      	cbnz	r0, 18f30 <isr_rx_adv+0x170>
   18f2c:	2300      	movs	r3, #0
   18f2e:	e07a      	b.n	19026 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   18f30:	79fb      	ldrb	r3, [r7, #7]
   18f32:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18f36:	f898 2000 	ldrb.w	r2, [r8]
   18f3a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18f3e:	d003      	beq.n	18f48 <isr_rx_adv+0x188>
   18f40:	2300      	movs	r3, #0
					    rl_idx) &&
   18f42:	b9db      	cbnz	r3, 18f7c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   18f44:	2300      	movs	r3, #0
   18f46:	e06e      	b.n	19026 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18f48:	79fb      	ldrb	r3, [r7, #7]
   18f4a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   18f4e:	2b01      	cmp	r3, #1
   18f50:	d008      	beq.n	18f64 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   18f52:	2206      	movs	r2, #6
   18f54:	f108 0108 	add.w	r1, r8, #8
   18f58:	1ca8      	adds	r0, r5, #2
   18f5a:	f012 fffb 	bl	2bf54 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   18f5e:	b958      	cbnz	r0, 18f78 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   18f60:	2301      	movs	r3, #1
   18f62:	e7ee      	b.n	18f42 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   18f64:	2206      	movs	r2, #6
   18f66:	f108 0108 	add.w	r1, r8, #8
   18f6a:	1ca8      	adds	r0, r5, #2
   18f6c:	f012 fff2 	bl	2bf54 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18f70:	2800      	cmp	r0, #0
   18f72:	d1ee      	bne.n	18f52 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   18f74:	2301      	movs	r3, #1
   18f76:	e7e4      	b.n	18f42 <isr_rx_adv+0x182>
   18f78:	2300      	movs	r3, #0
   18f7a:	e7e2      	b.n	18f42 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   18f7c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   18f80:	2bff      	cmp	r3, #255	; 0xff
   18f82:	d009      	beq.n	18f98 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   18f84:	4a31      	ldr	r2, [pc, #196]	; (1904c <isr_rx_adv+0x28c>)
   18f86:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   18f8a:	4293      	cmp	r3, r2
   18f8c:	bf14      	ite	ne
   18f8e:	2300      	movne	r3, #0
   18f90:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   18f92:	b9bb      	cbnz	r3, 18fc4 <isr_rx_adv+0x204>
   18f94:	2300      	movs	r3, #0
   18f96:	e046      	b.n	19026 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   18f98:	79fa      	ldrb	r2, [r7, #7]
   18f9a:	f898 3000 	ldrb.w	r3, [r8]
   18f9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18fa2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18fa6:	d001      	beq.n	18fac <isr_rx_adv+0x1ec>
   18fa8:	2300      	movs	r3, #0
   18faa:	e7f2      	b.n	18f92 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   18fac:	2206      	movs	r2, #6
   18fae:	f108 0102 	add.w	r1, r8, #2
   18fb2:	f105 0008 	add.w	r0, r5, #8
   18fb6:	f012 ffcd 	bl	2bf54 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   18fba:	b908      	cbnz	r0, 18fc0 <isr_rx_adv+0x200>
   18fbc:	2301      	movs	r3, #1
   18fbe:	e7e8      	b.n	18f92 <isr_rx_adv+0x1d2>
   18fc0:	2300      	movs	r3, #0
   18fc2:	e7e6      	b.n	18f92 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   18fc4:	2301      	movs	r3, #1
   18fc6:	e02e      	b.n	19026 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   18fc8:	4641      	mov	r1, r8
   18fca:	f811 0b02 	ldrb.w	r0, [r1], #2
   18fce:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   18fd2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18fd6:	f002 f96d 	bl	1b2b4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   18fda:	2800      	cmp	r0, #0
   18fdc:	d18e      	bne.n	18efc <isr_rx_adv+0x13c>
   18fde:	e785      	b.n	18eec <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   18fe0:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   18fe4:	f001 ffd0 	bl	1af88 <ctrl_irk_whitelisted>
   18fe8:	2800      	cmp	r0, #0
   18fea:	d187      	bne.n	18efc <isr_rx_adv+0x13c>
   18fec:	2300      	movs	r3, #0
   18fee:	e01a      	b.n	19026 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18ff0:	79fb      	ldrb	r3, [r7, #7]
   18ff2:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   18ff6:	2b01      	cmp	r3, #1
   18ff8:	d008      	beq.n	1900c <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   18ffa:	2206      	movs	r2, #6
   18ffc:	f108 0108 	add.w	r1, r8, #8
   19000:	1ca8      	adds	r0, r5, #2
   19002:	f012 ffa7 	bl	2bf54 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   19006:	b958      	cbnz	r0, 19020 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   19008:	2301      	movs	r3, #1
   1900a:	e780      	b.n	18f0e <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   1900c:	2206      	movs	r2, #6
   1900e:	f108 0108 	add.w	r1, r8, #8
   19012:	1ca8      	adds	r0, r5, #2
   19014:	f012 ff9e 	bl	2bf54 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   19018:	2800      	cmp	r0, #0
   1901a:	d1ee      	bne.n	18ffa <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   1901c:	2301      	movs	r3, #1
   1901e:	e776      	b.n	18f0e <isr_rx_adv+0x14e>
   19020:	2300      	movs	r3, #0
   19022:	e774      	b.n	18f0e <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   19024:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   19026:	2b00      	cmp	r3, #0
   19028:	f000 8232 	beq.w	19490 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   1902c:	4b07      	ldr	r3, [pc, #28]	; (1904c <isr_rx_adv+0x28c>)
   1902e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   19032:	b16b      	cbz	r3, 19050 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   19034:	4a05      	ldr	r2, [pc, #20]	; (1904c <isr_rx_adv+0x28c>)
   19036:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1903a:	b2db      	uxtb	r3, r3
   1903c:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   19040:	4293      	cmp	r3, r2
   19042:	d005      	beq.n	19050 <isr_rx_adv+0x290>
	return 1;
   19044:	2301      	movs	r3, #1
   19046:	e6dc      	b.n	18e02 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   19048:	2300      	movs	r3, #0
   1904a:	e7ec      	b.n	19026 <isr_rx_adv+0x266>
   1904c:	20000f7c 	.word	0x20000f7c
		   (_radio.advertiser.conn)) {
   19050:	4bd9      	ldr	r3, [pc, #868]	; (193b8 <isr_rx_adv+0x5f8>)
   19052:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   19056:	2b00      	cmp	r3, #0
   19058:	f000 821c 	beq.w	19494 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   1905c:	4bd6      	ldr	r3, [pc, #856]	; (193b8 <isr_rx_adv+0x5f8>)
   1905e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   19062:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   19066:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   19068:	429a      	cmp	r2, r3
   1906a:	f0c0 81cf 	bcc.w	1940c <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   1906e:	4bd2      	ldr	r3, [pc, #840]	; (193b8 <isr_rx_adv+0x5f8>)
   19070:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   19074:	1ad3      	subs	r3, r2, r3
   19076:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   19078:	2b03      	cmp	r3, #3
   1907a:	f240 81d1 	bls.w	19420 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   1907e:	4bce      	ldr	r3, [pc, #824]	; (193b8 <isr_rx_adv+0x5f8>)
   19080:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   19084:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   19088:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   1908c:	2d00      	cmp	r5, #0
   1908e:	f000 8203 	beq.w	19498 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   19092:	4ec9      	ldr	r6, [pc, #804]	; (193b8 <isr_rx_adv+0x5f8>)
   19094:	f04f 0904 	mov.w	r9, #4
   19098:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   1909c:	f7f7 fe34 	bl	10d08 <radio_disable>
		conn = _radio.advertiser.conn;
   190a0:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   190a4:	2300      	movs	r3, #0
   190a6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   190aa:	f44f 72aa 	mov.w	r2, #340	; 0x154
   190ae:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   190b2:	4620      	mov	r0, r4
   190b4:	f7f7 fc53 	bl	1095e <mem_index_get>
   190b8:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   190ba:	2203      	movs	r2, #3
   190bc:	f108 0112 	add.w	r1, r8, #18
   190c0:	f104 0014 	add.w	r0, r4, #20
   190c4:	f7e7 f8fc 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   190c8:	f104 0a10 	add.w	sl, r4, #16
   190cc:	464a      	mov	r2, r9
   190ce:	f108 010e 	add.w	r1, r8, #14
   190d2:	4650      	mov	r0, sl
   190d4:	f7e7 f8f4 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   190d8:	f104 0617 	add.w	r6, r4, #23
   190dc:	2205      	movs	r2, #5
   190de:	f108 011e 	add.w	r1, r8, #30
   190e2:	4630      	mov	r0, r6
   190e4:	f7e7 f8ec 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   190e8:	2105      	movs	r1, #5
   190ea:	4630      	mov	r0, r6
   190ec:	f7f7 fc7b 	bl	109e6 <util_ones_count_get>
		conn->data_chan_count =
   190f0:	7f63      	ldrb	r3, [r4, #29]
   190f2:	f360 0305 	bfi	r3, r0, #0, #6
   190f6:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   190f8:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   190fc:	f3c3 0304 	ubfx	r3, r3, #0, #5
   19100:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   19102:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   19106:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   19108:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   1910c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   19110:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   19114:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   19118:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1911a:	464a      	mov	r2, r9
   1911c:	4651      	mov	r1, sl
   1911e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   19122:	f7e7 f8cd 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   19126:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   1912a:	f242 7210 	movw	r2, #10000	; 0x2710
   1912e:	fb02 6303 	mla	r3, r2, r3, r6
   19132:	3b01      	subs	r3, #1
   19134:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   19138:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   1913a:	4ba0      	ldr	r3, [pc, #640]	; (193bc <isr_rx_adv+0x5fc>)
   1913c:	4433      	add	r3, r6
   1913e:	fbb3 f3f6 	udiv	r3, r3, r6
   19142:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   19146:	4b9e      	ldr	r3, [pc, #632]	; (193c0 <isr_rx_adv+0x600>)
   19148:	4433      	add	r3, r6
   1914a:	fbb3 f3f6 	udiv	r3, r3, r6
   1914e:	b29b      	uxth	r3, r3
   19150:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19154:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   19156:	1d91      	adds	r1, r2, #6
   19158:	428b      	cmp	r3, r1
   1915a:	dd03      	ble.n	19164 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   1915c:	1a9b      	subs	r3, r3, r2
   1915e:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19160:	3b06      	subs	r3, #6
   19162:	b29b      	uxth	r3, r3
   19164:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   19168:	8c23      	ldrh	r3, [r4, #32]
   1916a:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1916c:	2206      	movs	r2, #6
   1916e:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   19170:	2300      	movs	r3, #0
   19172:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   19174:	2301      	movs	r3, #1
   19176:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   19178:	4641      	mov	r1, r8
   1917a:	f811 3b08 	ldrb.w	r3, [r1], #8
   1917e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   19182:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   19184:	f105 001b 	add.w	r0, r5, #27
   19188:	f7e7 f89a 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   1918c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   19190:	28ff      	cmp	r0, #255	; 0xff
   19192:	f000 8147 	beq.w	19424 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   19196:	f105 020e 	add.w	r2, r5, #14
   1919a:	f105 010d 	add.w	r1, r5, #13
   1919e:	f002 f85d 	bl	1b25c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   191a2:	7b6b      	ldrb	r3, [r5, #13]
   191a4:	3302      	adds	r3, #2
   191a6:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   191a8:	2206      	movs	r2, #6
   191aa:	f108 0102 	add.w	r1, r8, #2
   191ae:	f105 0014 	add.w	r0, r5, #20
   191b2:	f7e7 f885 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   191b6:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   191ba:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   191be:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   191c2:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   191c6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   191ca:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   191ce:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   191d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   191d6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   191da:	8c20      	ldrh	r0, [r4, #32]
   191dc:	f7f9 fedc 	bl	12f98 <rx_fc_lock>
		packet_rx_enqueue();
   191e0:	f7fc fbc4 	bl	1596c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   191e4:	4b74      	ldr	r3, [pc, #464]	; (193b8 <isr_rx_adv+0x5f8>)
   191e6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   191ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   191ee:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   191f0:	429a      	cmp	r2, r3
   191f2:	f0c0 8129 	bcc.w	19448 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   191f6:	4b70      	ldr	r3, [pc, #448]	; (193b8 <isr_rx_adv+0x5f8>)
   191f8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   191fc:	1ad3      	subs	r3, r2, r3
   191fe:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   19200:	2b02      	cmp	r3, #2
   19202:	f240 812b 	bls.w	1945c <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   19206:	4b6c      	ldr	r3, [pc, #432]	; (193b8 <isr_rx_adv+0x5f8>)
   19208:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1920c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   19210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   19214:	2b00      	cmp	r3, #0
   19216:	f000 8123 	beq.w	19460 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   1921a:	8c22      	ldrh	r2, [r4, #32]
   1921c:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   1921e:	220b      	movs	r2, #11
   19220:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   19222:	f898 2000 	ldrb.w	r2, [r8]
   19226:	f012 0f20 	tst.w	r2, #32
   1922a:	f000 811f 	beq.w	1946c <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   1922e:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   19230:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   19232:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   19236:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   19238:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   1923a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   1923e:	7f60      	ldrb	r0, [r4, #29]
   19240:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   19244:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   19246:	404a      	eors	r2, r1
   19248:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   1924a:	2201      	movs	r2, #1
   1924c:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   1924e:	f7fc fb8d 	bl	1596c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   19252:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   19256:	0952      	lsrs	r2, r2, #5
   19258:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1925c:	f362 0384 	bfi	r3, r2, #2, #3
   19260:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   19264:	4d54      	ldr	r5, [pc, #336]	; (193b8 <isr_rx_adv+0x5f8>)
   19266:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   1926a:	4956      	ldr	r1, [pc, #344]	; (193c4 <isr_rx_adv+0x604>)
   1926c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   19270:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   19274:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   19276:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   1927a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1927e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   19282:	4a51      	ldr	r2, [pc, #324]	; (193c8 <isr_rx_adv+0x608>)
   19284:	fba2 2303 	umull	r2, r3, r2, r3
   19288:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   1928a:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   1928c:	0873      	lsrs	r3, r6, #1
   1928e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   19290:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   19292:	f898 3015 	ldrb.w	r3, [r8, #21]
   19296:	f240 49e2 	movw	r9, #1250	; 0x4e2
   1929a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   1929e:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   192a0:	f04f 0b00 	mov.w	fp, #0
   192a4:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   192a8:	4658      	mov	r0, fp
   192aa:	f7f7 fd19 	bl	10ce0 <radio_rx_ready_delay_get>
   192ae:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   192b0:	f200 4052 	addw	r0, r0, #1106	; 0x452
   192b4:	a33e      	add	r3, pc, #248	; (adr r3, 193b0 <isr_rx_adv+0x5f0>)
   192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   192ba:	4944      	ldr	r1, [pc, #272]	; (193cc <isr_rx_adv+0x60c>)
   192bc:	fba0 0101 	umull	r0, r1, r0, r1
   192c0:	f7e7 ff1c 	bl	10fc <__aeabi_uldivmod>
   192c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   192c8:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   192ca:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   192ce:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   192d0:	2327      	movs	r3, #39	; 0x27
   192d2:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   192d4:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   192d8:	429d      	cmp	r5, r3
   192da:	bf38      	it	cc
   192dc:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   192de:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   192e0:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   192e2:	f7f7 fee3 	bl	110ac <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   192e6:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   192ea:	b292      	uxth	r2, r2
		conn_offset_us +=
   192ec:	fb09 9902 	mla	r9, r9, r2, r9
   192f0:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   192f2:	4659      	mov	r1, fp
   192f4:	4658      	mov	r0, fp
   192f6:	f7f7 fcf1 	bl	10cdc <radio_tx_chain_delay_get>
   192fa:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   192fe:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   19302:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   19306:	f240 4372 	movw	r3, #1138	; 0x472
   1930a:	9300      	str	r3, [sp, #0]
   1930c:	4b30      	ldr	r3, [pc, #192]	; (193d0 <isr_rx_adv+0x610>)
   1930e:	2205      	movs	r2, #5
   19310:	4659      	mov	r1, fp
   19312:	4658      	mov	r0, fp
   19314:	f7f9 f850 	bl	123b8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   19318:	f240 4173 	movw	r1, #1139	; 0x473
   1931c:	f7f9 fe84 	bl	13028 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   19320:	79fb      	ldrb	r3, [r7, #7]
   19322:	f003 030f 	and.w	r3, r3, #15
   19326:	2b01      	cmp	r3, #1
   19328:	f000 80a3 	beq.w	19472 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   1932c:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1932e:	3307      	adds	r3, #7
   19330:	b2db      	uxtb	r3, r3
   19332:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   19334:	4b20      	ldr	r3, [pc, #128]	; (193b8 <isr_rx_adv+0x5f8>)
   19336:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19338:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   1933c:	f04f 0800 	mov.w	r8, #0
   19340:	4f22      	ldr	r7, [pc, #136]	; (193cc <isr_rx_adv+0x60c>)
   19342:	a31b      	add	r3, pc, #108	; (adr r3, 193b0 <isr_rx_adv+0x5f0>)
   19344:	e9d3 2300 	ldrd	r2, r3, [r3]
   19348:	fbaa 0107 	umull	r0, r1, sl, r7
   1934c:	f7e7 fed6 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19350:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   19354:	fba6 6707 	umull	r6, r7, r6, r7
   19358:	a315      	add	r3, pc, #84	; (adr r3, 193b0 <isr_rx_adv+0x5f0>)
   1935a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1935e:	4630      	mov	r0, r6
   19360:	4639      	mov	r1, r7
   19362:	f7e7 fecb 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19366:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1936a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1936e:	2100      	movs	r1, #0
   19370:	4a18      	ldr	r2, [pc, #96]	; (193d4 <isr_rx_adv+0x614>)
   19372:	2307      	movs	r3, #7
   19374:	fb03 f300 	mul.w	r3, r3, r0
   19378:	fb02 3301 	mla	r3, r2, r1, r3
   1937c:	fba0 0102 	umull	r0, r1, r0, r2
   19380:	4419      	add	r1, r3
   19382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19386:	2300      	movs	r3, #0
   19388:	1a30      	subs	r0, r6, r0
   1938a:	eb67 0101 	sbc.w	r1, r7, r1
   1938e:	f7e7 feb5 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   19392:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19394:	442b      	add	r3, r5
   19396:	b29b      	uxth	r3, r3
   19398:	f240 428a 	movw	r2, #1162	; 0x48a
   1939c:	9208      	str	r2, [sp, #32]
   1939e:	4a0e      	ldr	r2, [pc, #56]	; (193d8 <isr_rx_adv+0x618>)
   193a0:	9207      	str	r2, [sp, #28]
   193a2:	9406      	str	r4, [sp, #24]
   193a4:	4a0d      	ldr	r2, [pc, #52]	; (193dc <isr_rx_adv+0x61c>)
   193a6:	9205      	str	r2, [sp, #20]
   193a8:	e01a      	b.n	193e0 <isr_rx_adv+0x620>
   193aa:	bf00      	nop
   193ac:	f3af 8000 	nop.w
   193b0:	1afd498d 	.word	0x1afd498d
   193b4:	00000007 	.word	0x00000007
   193b8:	20000f7c 	.word	0x20000f7c
   193bc:	026259ff 	.word	0x026259ff
   193c0:	01c9c37f 	.word	0x01c9c37f
   193c4:	000336b8 	.word	0x000336b8
   193c8:	431bde83 	.word	0x431bde83
   193cc:	3b9aca00 	.word	0x3b9aca00
   193d0:	00013029 	.word	0x00013029
   193d4:	1afd498d 	.word	0x1afd498d
   193d8:	00012fd5 	.word	0x00012fd5
   193dc:	00017b8d 	.word	0x00017b8d
   193e0:	9304      	str	r3, [sp, #16]
   193e2:	f8cd 800c 	str.w	r8, [sp, #12]
   193e6:	9002      	str	r0, [sp, #8]
   193e8:	f8cd b004 	str.w	fp, [sp, #4]
   193ec:	f8cd a000 	str.w	sl, [sp]
   193f0:	464b      	mov	r3, r9
   193f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   193f4:	4641      	mov	r1, r8
   193f6:	4640      	mov	r0, r8
   193f8:	f7f8 ff42 	bl	12280 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   193fc:	4603      	mov	r3, r0
   193fe:	2800      	cmp	r0, #0
   19400:	f43f acff 	beq.w	18e02 <isr_rx_adv+0x42>
   19404:	2802      	cmp	r0, #2
   19406:	d13d      	bne.n	19484 <isr_rx_adv+0x6c4>
		return 0;
   19408:	2300      	movs	r3, #0
   1940a:	e4fa      	b.n	18e02 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   1940c:	4923      	ldr	r1, [pc, #140]	; (1949c <isr_rx_adv+0x6dc>)
   1940e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   19412:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   19416:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   19418:	fa52 f383 	uxtab	r3, r2, r3
   1941c:	b2db      	uxtb	r3, r3
   1941e:	e62b      	b.n	19078 <isr_rx_adv+0x2b8>
		return 0;
   19420:	2500      	movs	r5, #0
   19422:	e633      	b.n	1908c <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   19424:	2206      	movs	r2, #6
   19426:	2100      	movs	r1, #0
   19428:	f105 0014 	add.w	r0, r5, #20
   1942c:	f012 fe26 	bl	2c07c <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   19430:	4641      	mov	r1, r8
   19432:	f811 3b02 	ldrb.w	r3, [r1], #2
   19436:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1943a:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1943c:	2206      	movs	r2, #6
   1943e:	f105 000e 	add.w	r0, r5, #14
   19442:	f7e6 ff3d 	bl	2c0 <memcpy>
   19446:	e6b6      	b.n	191b6 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   19448:	4914      	ldr	r1, [pc, #80]	; (1949c <isr_rx_adv+0x6dc>)
   1944a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1944e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   19452:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   19454:	fa52 f383 	uxtab	r3, r2, r3
   19458:	b2db      	uxtb	r3, r3
   1945a:	e6d1      	b.n	19200 <isr_rx_adv+0x440>
		return 0;
   1945c:	2300      	movs	r3, #0
   1945e:	e6d9      	b.n	19214 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   19460:	4040      	eors	r0, r0
   19462:	f380 8811 	msr	BASEPRI, r0
   19466:	f04f 0004 	mov.w	r0, #4
   1946a:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1946c:	2200      	movs	r2, #0
   1946e:	72da      	strb	r2, [r3, #11]
   19470:	e6ed      	b.n	1924e <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   19472:	4658      	mov	r0, fp
   19474:	f8cd b000 	str.w	fp, [sp]
   19478:	465b      	mov	r3, fp
   1947a:	2203      	movs	r2, #3
   1947c:	4659      	mov	r1, fp
   1947e:	f7f8 ff9b 	bl	123b8 <ticker_stop>
   19482:	e753      	b.n	1932c <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19484:	4040      	eors	r0, r0
   19486:	f380 8811 	msr	BASEPRI, r0
   1948a:	f04f 0004 	mov.w	r0, #4
   1948e:	df02      	svc	2
	return 1;
   19490:	2301      	movs	r3, #1
   19492:	e4b6      	b.n	18e02 <isr_rx_adv+0x42>
   19494:	2301      	movs	r3, #1
   19496:	e4b4      	b.n	18e02 <isr_rx_adv+0x42>
			return 1;
   19498:	2301      	movs	r3, #1
   1949a:	e4b2      	b.n	18e02 <isr_rx_adv+0x42>
   1949c:	20000f7c 	.word	0x20000f7c

000194a0 <radio_init>:
{
   194a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194a4:	f89d e018 	ldrb.w	lr, [sp, #24]
   194a8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   194ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
   194ae:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   194b2:	4c3b      	ldr	r4, [pc, #236]	; (195a0 <radio_init+0x100>)
   194b4:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   194b6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   194ba:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   194bc:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   194c0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   194c4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   194c8:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   194cc:	f103 0803 	add.w	r8, r3, #3
   194d0:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   194d4:	f10e 0701 	add.w	r7, lr, #1
   194d8:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   194da:	3304      	adds	r3, #4
   194dc:	b2dd      	uxtb	r5, r3
   194de:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   194e2:	f10e 0e02 	add.w	lr, lr, #2
   194e6:	fa5f fe8e 	uxtb.w	lr, lr
   194ea:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   194ee:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   194f2:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   194f6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   194fa:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   194fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   19502:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   19504:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   19508:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   1950a:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   1950e:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   19512:	2b2a      	cmp	r3, #42	; 0x2a
   19514:	d931      	bls.n	1957a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   19516:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   1951a:	f02c 0c03 	bic.w	ip, ip, #3
   1951e:	fb1c f808 	smulbb	r8, ip, r8
   19522:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   19526:	4c1e      	ldr	r4, [pc, #120]	; (195a0 <radio_init+0x100>)
   19528:	2334      	movs	r3, #52	; 0x34
   1952a:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1952e:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   19532:	4b1c      	ldr	r3, [pc, #112]	; (195a4 <radio_init+0x104>)
   19534:	fba3 c30e 	umull	ip, r3, r3, lr
   19538:	091b      	lsrs	r3, r3, #4
   1953a:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   1953e:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   19542:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   19544:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   19548:	442a      	add	r2, r5
   1954a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1954e:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   19552:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   19554:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   19558:	330a      	adds	r3, #10
   1955a:	b29b      	uxth	r3, r3
   1955c:	f023 0303 	bic.w	r3, r3, #3
   19560:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   19562:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   19566:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1956a:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   1956e:	1a3f      	subs	r7, r7, r0
   19570:	d00d      	beq.n	1958e <radio_init+0xee>
		return (retcode + mem_size);
   19572:	4437      	add	r7, r6
}
   19574:	4638      	mov	r0, r7
   19576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1957a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1957e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   19582:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   19586:	4c06      	ldr	r4, [pc, #24]	; (195a0 <radio_init+0x100>)
   19588:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   1958c:	e7cb      	b.n	19526 <radio_init+0x86>
	_radio.fc_ena = 1;
   1958e:	2201      	movs	r2, #1
   19590:	4b03      	ldr	r3, [pc, #12]	; (195a0 <radio_init+0x100>)
   19592:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   19596:	f7ec ff21 	bl	63dc <common_init>
	radio_setup();
   1959a:	f7f7 faed 	bl	10b78 <radio_setup>
	return retcode;
   1959e:	e7e9      	b.n	19574 <radio_init+0xd4>
   195a0:	20000f7c 	.word	0x20000f7c
   195a4:	4ec4ec4f 	.word	0x4ec4ec4f

000195a8 <ll_reset>:
{
   195a8:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   195aa:	2103      	movs	r1, #3
   195ac:	2005      	movs	r0, #5
   195ae:	f7f9 ff9b 	bl	134e8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   195b2:	2104      	movs	r1, #4
   195b4:	2006      	movs	r0, #6
   195b6:	f7f9 ff97 	bl	134e8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   195ba:	2400      	movs	r4, #0
   195bc:	e006      	b.n	195cc <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   195be:	1de0      	adds	r0, r4, #7
   195c0:	21ff      	movs	r1, #255	; 0xff
   195c2:	b2c0      	uxtb	r0, r0
   195c4:	f7f9 ff90 	bl	134e8 <role_disable>
	     conn_handle++) {
   195c8:	3401      	adds	r4, #1
   195ca:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   195cc:	4b1d      	ldr	r3, [pc, #116]	; (19644 <ll_reset+0x9c>)
   195ce:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   195d2:	429c      	cmp	r4, r3
   195d4:	d3f3      	bcc.n	195be <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   195d6:	4b1b      	ldr	r3, [pc, #108]	; (19644 <ll_reset+0x9c>)
   195d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   195dc:	f36f 0200 	bfc	r2, #0, #1
   195e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   195e4:	2000      	movs	r0, #0
   195e6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   195ea:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   195ee:	f360 0200 	bfi	r2, r0, #0, #1
   195f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   195f6:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   195fa:	2234      	movs	r2, #52	; 0x34
   195fc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   19600:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   19604:	4910      	ldr	r1, [pc, #64]	; (19648 <ll_reset+0xa0>)
   19606:	fba1 1202 	umull	r1, r2, r1, r2
   1960a:	0912      	lsrs	r2, r2, #4
   1960c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   19610:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   19614:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   19618:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   1961c:	3a01      	subs	r2, #1
   1961e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   19622:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   19626:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   1962a:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   1962e:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   19632:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   19636:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   1963a:	f002 fa69 	bl	1bb10 <ll_filter_reset>
	common_init();
   1963e:	f7ec fecd 	bl	63dc <common_init>
   19642:	bd10      	pop	{r4, pc}
   19644:	20000f7c 	.word	0x20000f7c
   19648:	4ec4ec4f 	.word	0x4ec4ec4f

0001964c <radio_adv_data_get>:
}
   1964c:	4800      	ldr	r0, [pc, #0]	; (19650 <radio_adv_data_get+0x4>)
   1964e:	4770      	bx	lr
   19650:	20000fa3 	.word	0x20000fa3

00019654 <radio_scan_data_get>:
}
   19654:	4800      	ldr	r0, [pc, #0]	; (19658 <radio_scan_data_get+0x4>)
   19656:	4770      	bx	lr
   19658:	20000ff3 	.word	0x20000ff3

0001965c <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   1965c:	4b02      	ldr	r3, [pc, #8]	; (19668 <radio_adv_is_enabled+0xc>)
   1965e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   19662:	f000 0001 	and.w	r0, r0, #1
   19666:	4770      	bx	lr
   19668:	20000f7c 	.word	0x20000f7c

0001966c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   1966c:	4b06      	ldr	r3, [pc, #24]	; (19688 <radio_adv_filter_pol_get+0x1c>)
   1966e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19672:	f013 0f01 	tst.w	r3, #1
   19676:	d004      	beq.n	19682 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   19678:	4b03      	ldr	r3, [pc, #12]	; (19688 <radio_adv_filter_pol_get+0x1c>)
   1967a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1967e:	0980      	lsrs	r0, r0, #6
   19680:	4770      	bx	lr
	return 0;
   19682:	2000      	movs	r0, #0
}
   19684:	4770      	bx	lr
   19686:	bf00      	nop
   19688:	20000f7c 	.word	0x20000f7c

0001968c <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   1968c:	4b02      	ldr	r3, [pc, #8]	; (19698 <radio_scan_is_enabled+0xc>)
   1968e:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   19692:	f000 0001 	and.w	r0, r0, #1
   19696:	4770      	bx	lr
   19698:	20000f7c 	.word	0x20000f7c

0001969c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1969c:	4b06      	ldr	r3, [pc, #24]	; (196b8 <radio_scan_filter_pol_get+0x1c>)
   1969e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   196a2:	f013 0f01 	tst.w	r3, #1
   196a6:	d005      	beq.n	196b4 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   196a8:	4b03      	ldr	r3, [pc, #12]	; (196b8 <radio_scan_filter_pol_get+0x1c>)
   196aa:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   196ae:	f3c0 1001 	ubfx	r0, r0, #4, #2
   196b2:	4770      	bx	lr
	return 0;
   196b4:	2000      	movs	r0, #0
}
   196b6:	4770      	bx	lr
   196b8:	20000f7c 	.word	0x20000f7c
   196bc:	00000000 	.word	0x00000000

000196c0 <radio_connect_enable>:
{
   196c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   196c4:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   196c6:	4c94      	ldr	r4, [pc, #592]	; (19918 <radio_connect_enable+0x258>)
   196c8:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   196cc:	b11c      	cbz	r4, 196d6 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   196ce:	200c      	movs	r0, #12
}
   196d0:	b003      	add	sp, #12
   196d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196d6:	461f      	mov	r7, r3
   196d8:	4616      	mov	r6, r2
   196da:	460d      	mov	r5, r1
   196dc:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   196de:	488f      	ldr	r0, [pc, #572]	; (1991c <radio_connect_enable+0x25c>)
   196e0:	f7f7 f8fd 	bl	108de <mem_acquire>
	if (!link) {
   196e4:	4681      	mov	r9, r0
   196e6:	2800      	cmp	r0, #0
   196e8:	f000 810f 	beq.w	1990a <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   196ec:	488c      	ldr	r0, [pc, #560]	; (19920 <radio_connect_enable+0x260>)
   196ee:	f7f7 f8f6 	bl	108de <mem_acquire>
   196f2:	9001      	str	r0, [sp, #4]
	if (!conn) {
   196f4:	2800      	cmp	r0, #0
   196f6:	f000 8102 	beq.w	198fe <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   196fa:	f8df 821c 	ldr.w	r8, [pc, #540]	; 19918 <radio_connect_enable+0x258>
   196fe:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   19702:	f364 1386 	bfi	r3, r4, #6, #1
   19706:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   1970a:	2206      	movs	r2, #6
   1970c:	4629      	mov	r1, r5
   1970e:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   19712:	f7e6 fdd5 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   19716:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   1971a:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   1971e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19722:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   19726:	2100      	movs	r1, #0
   19728:	4608      	mov	r0, r1
   1972a:	f7f7 fad5 	bl	10cd8 <radio_tx_ready_delay_get>
   1972e:	f200 4052 	addw	r0, r0, #1106	; 0x452
   19732:	2400      	movs	r4, #0
   19734:	a376      	add	r3, pc, #472	; (adr r3, 19910 <radio_connect_enable+0x250>)
   19736:	e9d3 2300 	ldrd	r2, r3, [r3]
   1973a:	497a      	ldr	r1, [pc, #488]	; (19924 <radio_connect_enable+0x264>)
   1973c:	fba0 0101 	umull	r0, r1, r0, r1
   19740:	f7e7 fcdc 	bl	10fc <__aeabi_uldivmod>
   19744:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   19748:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   1974c:	9b01      	ldr	r3, [sp, #4]
   1974e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19752:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   19754:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   19758:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   1975c:	f7fe fe84 	bl	18468 <access_addr_get>
   19760:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   19762:	2204      	movs	r2, #4
   19764:	4669      	mov	r1, sp
   19766:	9801      	ldr	r0, [sp, #4]
   19768:	3010      	adds	r0, #16
   1976a:	f7e6 fda9 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   1976e:	a902      	add	r1, sp, #8
   19770:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   19774:	2203      	movs	r2, #3
   19776:	3014      	adds	r0, #20
   19778:	f7e6 fda2 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1977c:	2205      	movs	r2, #5
   1977e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   19782:	9801      	ldr	r0, [sp, #4]
   19784:	3017      	adds	r0, #23
   19786:	f7e6 fd9b 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1978a:	9b01      	ldr	r3, [sp, #4]
   1978c:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   19790:	7f5a      	ldrb	r2, [r3, #29]
   19792:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   19796:	f364 1286 	bfi	r2, r4, #6, #1
   1979a:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   1979c:	2506      	movs	r5, #6
   1979e:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   197a0:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   197a2:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   197a4:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   197a8:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   197aa:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   197ac:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   197ae:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   197b2:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   197b4:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   197b8:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   197ba:	221b      	movs	r2, #27
   197bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   197be:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   197c0:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   197c4:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   197c6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   197ca:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   197cc:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   197ce:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   197d2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   197d6:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   197da:	2101      	movs	r1, #1
   197dc:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   197e0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   197e4:	f364 12c7 	bfi	r2, r4, #7, #1
   197e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   197ec:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   197f0:	f361 0202 	bfi	r2, r1, #0, #3
   197f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   197f8:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   197fc:	b2d2      	uxtb	r2, r2
   197fe:	f366 02c5 	bfi	r2, r6, #3, #3
   19802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   19806:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   1980a:	f361 0202 	bfi	r2, r1, #0, #3
   1980e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   19812:	7f5a      	ldrb	r2, [r3, #29]
   19814:	f364 12c7 	bfi	r2, r4, #7, #1
   19818:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   1981a:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   1981c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   19820:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   19824:	f364 0200 	bfi	r2, r4, #0, #1
   19828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   1982c:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   19830:	f240 42e2 	movw	r2, #1250	; 0x4e2
   19834:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   19838:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   1983c:	f242 7510 	movw	r5, #10000	; 0x2710
   19840:	fb05 1202 	mla	r2, r5, r2, r1
   19844:	3a01      	subs	r2, #1
   19846:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   1984a:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   1984c:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   19850:	4a35      	ldr	r2, [pc, #212]	; (19928 <radio_connect_enable+0x268>)
   19852:	440a      	add	r2, r1
   19854:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   19858:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   1985c:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   19860:	4a32      	ldr	r2, [pc, #200]	; (1992c <radio_connect_enable+0x26c>)
   19862:	440a      	add	r2, r1
   19864:	fbb2 f2f1 	udiv	r2, r2, r1
   19868:	b292      	uxth	r2, r2
   1986a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1986e:	1d81      	adds	r1, r0, #6
   19870:	428a      	cmp	r2, r1
   19872:	dd03      	ble.n	1987c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   19874:	1a12      	subs	r2, r2, r0
   19876:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   19878:	3a06      	subs	r2, #6
   1987a:	b292      	uxth	r2, r2
   1987c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   19880:	2000      	movs	r0, #0
   19882:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   19886:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   1988a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   1988e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   19892:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   19896:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1989a:	f360 0241 	bfi	r2, r0, #1, #1
   1989e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   198a2:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   198a6:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   198aa:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   198ae:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   198b2:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   198b6:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   198ba:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   198be:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   198c2:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   198c6:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   198ca:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   198ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
   198d2:	f360 12c7 	bfi	r2, r0, #7, #1
   198d6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   198da:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   198de:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   198e2:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   198e6:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   198ea:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   198ee:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   198f2:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   198f6:	4a08      	ldr	r2, [pc, #32]	; (19918 <radio_connect_enable+0x258>)
   198f8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   198fc:	e6e8      	b.n	196d0 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   198fe:	4907      	ldr	r1, [pc, #28]	; (1991c <radio_connect_enable+0x25c>)
   19900:	4648      	mov	r0, r9
   19902:	f7f7 f808 	bl	10916 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19906:	2007      	movs	r0, #7
   19908:	e6e2      	b.n	196d0 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1990a:	2007      	movs	r0, #7
   1990c:	e6e0      	b.n	196d0 <radio_connect_enable+0x10>
   1990e:	bf00      	nop
   19910:	1afd498d 	.word	0x1afd498d
   19914:	00000007 	.word	0x00000007
   19918:	20000f7c 	.word	0x20000f7c
   1991c:	200010c0 	.word	0x200010c0
   19920:	20001084 	.word	0x20001084
   19924:	3b9aca00 	.word	0x3b9aca00
   19928:	026259ff 	.word	0x026259ff
   1992c:	01c9c37f 	.word	0x01c9c37f

00019930 <ll_conn_update>:
{
   19930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19934:	460c      	mov	r4, r1
   19936:	4690      	mov	r8, r2
   19938:	461f      	mov	r7, r3
   1993a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1993e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   19942:	f7f9 fdb3 	bl	134ac <connection_get>
	if (!conn) {
   19946:	2800      	cmp	r0, #0
   19948:	d078      	beq.n	19a3c <ll_conn_update+0x10c>
   1994a:	4603      	mov	r3, r0
	if (!cmd) {
   1994c:	b984      	cbnz	r4, 19970 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   1994e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   19952:	f012 0f20 	tst.w	r2, #32
   19956:	d007      	beq.n	19968 <ll_conn_update+0x38>
		    (conn->llcp_features &
   19958:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   1995c:	f012 0f02 	tst.w	r2, #2
   19960:	d002      	beq.n	19968 <ll_conn_update+0x38>
			cmd++;
   19962:	3401      	adds	r4, #1
   19964:	b2e4      	uxtb	r4, r4
   19966:	e003      	b.n	19970 <ll_conn_update+0x40>
		} else if (conn->role) {
   19968:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1996c:	2a00      	cmp	r2, #0
   1996e:	db68      	blt.n	19a42 <ll_conn_update+0x112>
	if (!cmd) {
   19970:	bb1c      	cbnz	r4, 199ba <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   19972:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   19976:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   1997a:	428a      	cmp	r2, r1
   1997c:	d002      	beq.n	19984 <ll_conn_update+0x54>
			return 1;
   1997e:	2001      	movs	r0, #1
   19980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   19984:	2401      	movs	r4, #1
   19986:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1998a:	2000      	movs	r0, #0
   1998c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   19990:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   19994:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   19998:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1999c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   199a0:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   199a4:	f360 0182 	bfi	r1, r0, #2, #1
   199a8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   199ac:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   199b0:	4422      	add	r2, r4
   199b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   199b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   199ba:	3c01      	subs	r4, #1
		if (cmd) {
   199bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   199c0:	d01c      	beq.n	199fc <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   199c2:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   199c6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   199ca:	4291      	cmp	r1, r2
   199cc:	d03c      	beq.n	19a48 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   199ce:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   199d2:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   199d6:	2a03      	cmp	r2, #3
   199d8:	d002      	beq.n	199e0 <ll_conn_update+0xb0>
				return 1;
   199da:	2001      	movs	r0, #1
   199dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   199e0:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   199e4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   199e8:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   199ec:	b2d2      	uxtb	r2, r2
   199ee:	f042 0208 	orr.w	r2, r2, #8
   199f2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   199f6:	2000      	movs	r0, #0
   199f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   199fc:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   19a00:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   19a04:	428a      	cmp	r2, r1
   19a06:	d002      	beq.n	19a0e <ll_conn_update+0xde>
				return 1;
   19a08:	2001      	movs	r0, #1
}
   19a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   19a0e:	2000      	movs	r0, #0
   19a10:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   19a14:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   19a18:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   19a1c:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   19a20:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   19a24:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   19a28:	b2c9      	uxtb	r1, r1
   19a2a:	f041 0108 	orr.w	r1, r1, #8
   19a2e:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   19a32:	3201      	adds	r2, #1
   19a34:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   19a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   19a3c:	2001      	movs	r0, #1
   19a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   19a42:	2001      	movs	r0, #1
   19a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   19a48:	2001      	movs	r0, #1
   19a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00019a50 <ll_chm_update>:
{
   19a50:	b570      	push	{r4, r5, r6, lr}
   19a52:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   19a54:	4c1c      	ldr	r4, [pc, #112]	; (19ac8 <ll_chm_update+0x78>)
   19a56:	f504 758b 	add.w	r5, r4, #278	; 0x116
   19a5a:	2205      	movs	r2, #5
   19a5c:	4601      	mov	r1, r0
   19a5e:	4628      	mov	r0, r5
   19a60:	f7e6 fc2e 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   19a64:	2105      	movs	r1, #5
   19a66:	4628      	mov	r0, r5
   19a68:	f7f6 ffbd 	bl	109e6 <util_ones_count_get>
	_radio.data_chan_count =
   19a6c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   19a70:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   19a74:	e000      	b.n	19a78 <ll_chm_update+0x28>
{
   19a76:	462b      	mov	r3, r5
	while (instance--) {
   19a78:	1e5d      	subs	r5, r3, #1
   19a7a:	b2ed      	uxtb	r5, r5
   19a7c:	b303      	cbz	r3, 19ac0 <ll_chm_update+0x70>
		conn = connection_get(instance);
   19a7e:	4628      	mov	r0, r5
   19a80:	f7f9 fd14 	bl	134ac <connection_get>
		if (!conn || conn->role) {
   19a84:	4604      	mov	r4, r0
   19a86:	2800      	cmp	r0, #0
   19a88:	d0f5      	beq.n	19a76 <ll_chm_update+0x26>
   19a8a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   19a8e:	2b00      	cmp	r3, #0
   19a90:	dbf1      	blt.n	19a76 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   19a92:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19a96:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   19a9a:	429a      	cmp	r2, r3
   19a9c:	d112      	bne.n	19ac4 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   19a9e:	2205      	movs	r2, #5
   19aa0:	4631      	mov	r1, r6
   19aa2:	3079      	adds	r0, #121	; 0x79
   19aa4:	f7e6 fc0c 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   19aa8:	2301      	movs	r3, #1
   19aaa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   19aae:	2302      	movs	r3, #2
   19ab0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   19ab4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   19ab8:	3301      	adds	r3, #1
   19aba:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   19abe:	e7da      	b.n	19a76 <ll_chm_update+0x26>
	return 0;
   19ac0:	2000      	movs	r0, #0
   19ac2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   19ac4:	2001      	movs	r0, #1
}
   19ac6:	bd70      	pop	{r4, r5, r6, pc}
   19ac8:	20000f7c 	.word	0x20000f7c

00019acc <ll_chm_get>:
{
   19acc:	b538      	push	{r3, r4, r5, lr}
   19ace:	460d      	mov	r5, r1
	conn = connection_get(handle);
   19ad0:	f7f9 fcec 	bl	134ac <connection_get>
	if (!conn) {
   19ad4:	4604      	mov	r4, r0
   19ad6:	b160      	cbz	r0, 19af2 <ll_chm_get+0x26>
		conn->chm_update = 0;
   19ad8:	2300      	movs	r3, #0
   19ada:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   19adc:	2205      	movs	r2, #5
   19ade:	f104 0117 	add.w	r1, r4, #23
   19ae2:	4628      	mov	r0, r5
   19ae4:	f7e6 fbec 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   19ae8:	7f23      	ldrb	r3, [r4, #28]
   19aea:	2b00      	cmp	r3, #0
   19aec:	d1f4      	bne.n	19ad8 <ll_chm_get+0xc>
	return 0;
   19aee:	2000      	movs	r0, #0
   19af0:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   19af2:	2001      	movs	r0, #1
}
   19af4:	bd38      	pop	{r3, r4, r5, pc}

00019af6 <ll_start_enc_req_send>:
{
   19af6:	b570      	push	{r4, r5, r6, lr}
   19af8:	460d      	mov	r5, r1
   19afa:	4616      	mov	r6, r2
	conn = connection_get(handle);
   19afc:	f7f9 fcd6 	bl	134ac <connection_get>
	if (!conn) {
   19b00:	2800      	cmp	r0, #0
   19b02:	d03e      	beq.n	19b82 <ll_start_enc_req_send+0x8c>
   19b04:	4604      	mov	r4, r0
	if (error_code) {
   19b06:	b32d      	cbz	r5, 19b54 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   19b08:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   19b0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   19b10:	d111      	bne.n	19b36 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   19b12:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   19b16:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   19b1a:	4293      	cmp	r3, r2
   19b1c:	d001      	beq.n	19b22 <ll_start_enc_req_send+0x2c>
				return 1;
   19b1e:	2001      	movs	r0, #1
   19b20:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   19b22:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   19b26:	2203      	movs	r2, #3
   19b28:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   19b2c:	3301      	adds	r3, #1
   19b2e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   19b32:	2000      	movs	r0, #0
   19b34:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   19b36:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   19b3a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   19b3e:	429a      	cmp	r2, r3
   19b40:	d001      	beq.n	19b46 <ll_start_enc_req_send+0x50>
				return 1;
   19b42:	2001      	movs	r0, #1
   19b44:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   19b46:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   19b4a:	3301      	adds	r3, #1
   19b4c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   19b50:	2000      	movs	r0, #0
   19b52:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   19b54:	2210      	movs	r2, #16
   19b56:	4631      	mov	r1, r6
   19b58:	3083      	adds	r0, #131	; 0x83
   19b5a:	f7e6 fbb1 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   19b5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   19b62:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   19b66:	4293      	cmp	r3, r2
   19b68:	d001      	beq.n	19b6e <ll_start_enc_req_send+0x78>
			return 1;
   19b6a:	2001      	movs	r0, #1
}
   19b6c:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   19b6e:	2000      	movs	r0, #0
   19b70:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   19b74:	2203      	movs	r2, #3
   19b76:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   19b7a:	3301      	adds	r3, #1
   19b7c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   19b80:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   19b82:	2001      	movs	r0, #1
   19b84:	bd70      	pop	{r4, r5, r6, pc}

00019b86 <ll_feature_req_send>:
{
   19b86:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   19b88:	f7f9 fc90 	bl	134ac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   19b8c:	b178      	cbz	r0, 19bae <ll_feature_req_send+0x28>
   19b8e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19b92:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   19b96:	428a      	cmp	r2, r1
   19b98:	d001      	beq.n	19b9e <ll_feature_req_send+0x18>
		return 1;
   19b9a:	2001      	movs	r0, #1
}
   19b9c:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   19b9e:	2104      	movs	r1, #4
   19ba0:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   19ba4:	3201      	adds	r2, #1
   19ba6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   19baa:	2000      	movs	r0, #0
   19bac:	bd08      	pop	{r3, pc}
		return 1;
   19bae:	2001      	movs	r0, #1
   19bb0:	bd08      	pop	{r3, pc}

00019bb2 <ll_version_ind_send>:
{
   19bb2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   19bb4:	f7f9 fc7a 	bl	134ac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   19bb8:	b178      	cbz	r0, 19bda <ll_version_ind_send+0x28>
   19bba:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   19bbe:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   19bc2:	428a      	cmp	r2, r1
   19bc4:	d001      	beq.n	19bca <ll_version_ind_send+0x18>
		return 1;
   19bc6:	2001      	movs	r0, #1
}
   19bc8:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   19bca:	2105      	movs	r1, #5
   19bcc:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   19bd0:	3201      	adds	r2, #1
   19bd2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   19bd6:	2000      	movs	r0, #0
   19bd8:	bd08      	pop	{r3, pc}
		return 1;
   19bda:	2001      	movs	r0, #1
   19bdc:	bd08      	pop	{r3, pc}

00019bde <ll_terminate_ind_send>:
{
   19bde:	b510      	push	{r4, lr}
   19be0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   19be2:	f7f9 fc63 	bl	134ac <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   19be6:	b170      	cbz	r0, 19c06 <ll_terminate_ind_send+0x28>
   19be8:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   19bec:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   19bf0:	4291      	cmp	r1, r2
   19bf2:	d001      	beq.n	19bf8 <ll_terminate_ind_send+0x1a>
		return 1;
   19bf4:	2001      	movs	r0, #1
}
   19bf6:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   19bf8:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   19bfc:	3201      	adds	r2, #1
   19bfe:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   19c02:	2000      	movs	r0, #0
   19c04:	bd10      	pop	{r4, pc}
		return 1;
   19c06:	2001      	movs	r0, #1
   19c08:	bd10      	pop	{r4, pc}

00019c0a <ll_tx_power_level_get>:
{
   19c0a:	b510      	push	{r4, lr}
   19c0c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   19c0e:	f7f9 fc4d 	bl	134ac <connection_get>
	if (!conn) {
   19c12:	b110      	cbz	r0, 19c1a <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   19c14:	2000      	movs	r0, #0
   19c16:	7020      	strb	r0, [r4, #0]
	return 0;
   19c18:	bd10      	pop	{r4, pc}
		return 1;
   19c1a:	2001      	movs	r0, #1
}
   19c1c:	bd10      	pop	{r4, pc}

00019c1e <ll_tx_power_get>:
	*min = 0;
   19c1e:	2300      	movs	r3, #0
   19c20:	7003      	strb	r3, [r0, #0]
	*max = 0;
   19c22:	700b      	strb	r3, [r1, #0]
   19c24:	4770      	bx	lr
	...

00019c28 <ll_apto_get>:
{
   19c28:	b510      	push	{r4, lr}
   19c2a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   19c2c:	f7f9 fc3e 	bl	134ac <connection_get>
	if (!conn) {
   19c30:	b188      	cbz	r0, 19c56 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   19c32:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   19c36:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   19c38:	fb03 f301 	mul.w	r3, r3, r1
   19c3c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   19c40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   19c44:	4a05      	ldr	r2, [pc, #20]	; (19c5c <ll_apto_get+0x34>)
   19c46:	fb82 1203 	smull	r1, r2, r2, r3
   19c4a:	17db      	asrs	r3, r3, #31
   19c4c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   19c50:	8023      	strh	r3, [r4, #0]
	return 0;
   19c52:	2000      	movs	r0, #0
   19c54:	bd10      	pop	{r4, pc}
		return 1;
   19c56:	2001      	movs	r0, #1
}
   19c58:	bd10      	pop	{r4, pc}
   19c5a:	bf00      	nop
   19c5c:	10624dd3 	.word	0x10624dd3

00019c60 <ll_apto_set>:
{
   19c60:	b510      	push	{r4, lr}
   19c62:	460c      	mov	r4, r1
	conn = connection_get(handle);
   19c64:	f7f9 fc22 	bl	134ac <connection_get>
	if (!conn) {
   19c68:	b178      	cbz	r0, 19c8a <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   19c6a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   19c6c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   19c70:	fb03 f301 	mul.w	r3, r3, r1
   19c74:	f242 7110 	movw	r1, #10000	; 0x2710
   19c78:	fb01 3404 	mla	r4, r1, r4, r3
   19c7c:	3c01      	subs	r4, #1
   19c7e:	fb94 f4f3 	sdiv	r4, r4, r3
   19c82:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   19c86:	2000      	movs	r0, #0
   19c88:	bd10      	pop	{r4, pc}
		return 1;
   19c8a:	2001      	movs	r0, #1
}
   19c8c:	bd10      	pop	{r4, pc}

00019c8e <ll_length_req_send>:
{
   19c8e:	b538      	push	{r3, r4, r5, lr}
   19c90:	460d      	mov	r5, r1
   19c92:	4614      	mov	r4, r2
	conn = connection_get(handle);
   19c94:	f7f9 fc0a 	bl	134ac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19c98:	b1f0      	cbz	r0, 19cd8 <ll_length_req_send+0x4a>
   19c9a:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   19c9e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   19ca2:	4291      	cmp	r1, r2
   19ca4:	d001      	beq.n	19caa <ll_length_req_send+0x1c>
		return 1;
   19ca6:	2001      	movs	r0, #1
   19ca8:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   19caa:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   19cae:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19cb2:	428a      	cmp	r2, r1
   19cb4:	d001      	beq.n	19cba <ll_length_req_send+0x2c>
		return 1;
   19cb6:	2001      	movs	r0, #1
}
   19cb8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19cba:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   19cbe:	f36f 0101 	bfc	r1, #0, #2
   19cc2:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   19cc6:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   19cca:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   19cce:	3201      	adds	r2, #1
   19cd0:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   19cd4:	2000      	movs	r0, #0
   19cd6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   19cd8:	2001      	movs	r0, #1
   19cda:	bd38      	pop	{r3, r4, r5, pc}

00019cdc <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   19cdc:	4b03      	ldr	r3, [pc, #12]	; (19cec <ll_length_default_get+0x10>)
   19cde:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   19ce2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   19ce4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   19ce8:	800b      	strh	r3, [r1, #0]
   19cea:	4770      	bx	lr
   19cec:	20000f7c 	.word	0x20000f7c

00019cf0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   19cf0:	4b03      	ldr	r3, [pc, #12]	; (19d00 <ll_length_default_set+0x10>)
   19cf2:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   19cf6:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   19cfa:	2000      	movs	r0, #0
   19cfc:	4770      	bx	lr
   19cfe:	bf00      	nop
   19d00:	20000f7c 	.word	0x20000f7c

00019d04 <ll_length_max_get>:
{
   19d04:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   19d06:	241b      	movs	r4, #27
   19d08:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   19d0a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   19d0e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   19d10:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   19d12:	8018      	strh	r0, [r3, #0]
}
   19d14:	bc10      	pop	{r4}
   19d16:	4770      	bx	lr

00019d18 <ll_phy_get>:
{
   19d18:	b538      	push	{r3, r4, r5, lr}
   19d1a:	460d      	mov	r5, r1
   19d1c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   19d1e:	f7f9 fbc5 	bl	134ac <connection_get>
	if (!conn) {
   19d22:	b158      	cbz	r0, 19d3c <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   19d24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   19d28:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   19d2c:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   19d2e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   19d32:	f3c3 0302 	ubfx	r3, r3, #0, #3
   19d36:	7023      	strb	r3, [r4, #0]
	return 0;
   19d38:	2000      	movs	r0, #0
   19d3a:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   19d3c:	2001      	movs	r0, #1
}
   19d3e:	bd38      	pop	{r3, r4, r5, pc}

00019d40 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   19d40:	4b03      	ldr	r3, [pc, #12]	; (19d50 <ll_phy_default_set+0x10>)
   19d42:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   19d46:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   19d4a:	2000      	movs	r0, #0
   19d4c:	4770      	bx	lr
   19d4e:	bf00      	nop
   19d50:	20000f7c 	.word	0x20000f7c

00019d54 <ll_phy_req_send>:
{
   19d54:	b570      	push	{r4, r5, r6, lr}
   19d56:	460e      	mov	r6, r1
   19d58:	4615      	mov	r5, r2
   19d5a:	461c      	mov	r4, r3
	conn = connection_get(handle);
   19d5c:	f7f9 fba6 	bl	134ac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19d60:	b338      	cbz	r0, 19db2 <ll_phy_req_send+0x5e>
   19d62:	4603      	mov	r3, r0
   19d64:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   19d68:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   19d6c:	4291      	cmp	r1, r2
   19d6e:	d001      	beq.n	19d74 <ll_phy_req_send+0x20>
		return 1;
   19d70:	2001      	movs	r0, #1
   19d72:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   19d74:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   19d78:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   19d7c:	428a      	cmp	r2, r1
   19d7e:	d001      	beq.n	19d84 <ll_phy_req_send+0x30>
		return 1;
   19d80:	2001      	movs	r0, #1
}
   19d82:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   19d84:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   19d88:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   19d8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   19d90:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   19d94:	f040 0002 	orr.w	r0, r0, #2
   19d98:	f365 0000 	bfi	r0, r5, #0, #1
   19d9c:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   19da0:	f364 1147 	bfi	r1, r4, #5, #3
   19da4:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   19da8:	3201      	adds	r2, #1
   19daa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   19dae:	2000      	movs	r0, #0
   19db0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   19db2:	2001      	movs	r0, #1
   19db4:	bd70      	pop	{r4, r5, r6, pc}
	...

00019db8 <radio_rx_get>:
{
   19db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dba:	b083      	sub	sp, #12
   19dbc:	4606      	mov	r6, r0
   19dbe:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   19dc0:	4b1b      	ldr	r3, [pc, #108]	; (19e30 <radio_rx_get+0x78>)
   19dc2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   19dc6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19dca:	429a      	cmp	r2, r3
   19dcc:	d024      	beq.n	19e18 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   19dce:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   19dd0:	783a      	ldrb	r2, [r7, #0]
   19dd2:	4918      	ldr	r1, [pc, #96]	; (19e34 <radio_rx_get+0x7c>)
   19dd4:	f7f9 fb0c 	bl	133f0 <tx_cmplt_get>
		if (!cmplt) {
   19dd8:	4605      	mov	r5, r0
   19dda:	b9d0      	cbnz	r0, 19e12 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   19ddc:	4b14      	ldr	r3, [pc, #80]	; (19e30 <radio_rx_get+0x78>)
   19dde:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   19de2:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   19de6:	4604      	mov	r4, r0
   19de8:	e000      	b.n	19dec <radio_rx_get+0x34>
   19dea:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   19dec:	4b10      	ldr	r3, [pc, #64]	; (19e30 <radio_rx_get+0x78>)
   19dee:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   19df2:	f10d 0105 	add.w	r1, sp, #5
   19df6:	f10d 0006 	add.w	r0, sp, #6
   19dfa:	f7f9 faf9 	bl	133f0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   19dfe:	2c00      	cmp	r4, #0
   19e00:	d1f3      	bne.n	19dea <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   19e02:	4284      	cmp	r4, r0
   19e04:	d001      	beq.n	19e0a <radio_rx_get+0x52>
   19e06:	4604      	mov	r4, r0
   19e08:	e7f0      	b.n	19dec <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   19e0a:	6037      	str	r7, [r6, #0]
}
   19e0c:	4628      	mov	r0, r5
   19e0e:	b003      	add	sp, #12
   19e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   19e12:	2300      	movs	r3, #0
   19e14:	6033      	str	r3, [r6, #0]
   19e16:	e7f9      	b.n	19e0c <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   19e18:	4905      	ldr	r1, [pc, #20]	; (19e30 <radio_rx_get+0x78>)
   19e1a:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   19e1e:	f201 1173 	addw	r1, r1, #371	; 0x173
   19e22:	f7f9 fae5 	bl	133f0 <tx_cmplt_get>
   19e26:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   19e28:	2300      	movs	r3, #0
   19e2a:	6033      	str	r3, [r6, #0]
   19e2c:	e7ee      	b.n	19e0c <radio_rx_get+0x54>
   19e2e:	bf00      	nop
   19e30:	20000f7c 	.word	0x20000f7c
   19e34:	200010ef 	.word	0x200010ef

00019e38 <radio_rx_mem_release>:
{
   19e38:	b570      	push	{r4, r5, r6, lr}
   19e3a:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   19e3c:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   19e3e:	e003      	b.n	19e48 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   19e40:	491e      	ldr	r1, [pc, #120]	; (19ebc <radio_rx_mem_release+0x84>)
   19e42:	f7f6 fd68 	bl	10916 <mem_release>
{
   19e46:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   19e48:	b398      	cbz	r0, 19eb2 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   19e4a:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   19e4c:	7903      	ldrb	r3, [r0, #4]
   19e4e:	3b01      	subs	r3, #1
   19e50:	2b0b      	cmp	r3, #11
   19e52:	d828      	bhi.n	19ea6 <radio_rx_mem_release+0x6e>
   19e54:	a201      	add	r2, pc, #4	; (adr r2, 19e5c <radio_rx_mem_release+0x24>)
   19e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19e5a:	bf00      	nop
   19e5c:	00019e41 	.word	0x00019e41
   19e60:	00019e41 	.word	0x00019e41
   19e64:	00019e41 	.word	0x00019e41
   19e68:	00019e41 	.word	0x00019e41
   19e6c:	00019e41 	.word	0x00019e41
   19e70:	00019e41 	.word	0x00019e41
   19e74:	00019e8d 	.word	0x00019e8d
   19e78:	00019e41 	.word	0x00019e41
   19e7c:	00019e41 	.word	0x00019e41
   19e80:	00019e41 	.word	0x00019e41
   19e84:	00019e41 	.word	0x00019e41
   19e88:	00019e41 	.word	0x00019e41
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   19e8c:	4d0c      	ldr	r5, [pc, #48]	; (19ec0 <radio_rx_mem_release+0x88>)
   19e8e:	88c2      	ldrh	r2, [r0, #6]
   19e90:	f44f 71aa 	mov.w	r1, #340	; 0x154
   19e94:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   19e98:	f7f6 fd5e 	bl	10958 <mem_get>
			mem_release(conn, &_radio.conn_free);
   19e9c:	f505 7184 	add.w	r1, r5, #264	; 0x108
   19ea0:	f7f6 fd39 	bl	10916 <mem_release>
			break;
   19ea4:	e7cf      	b.n	19e46 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   19ea6:	4040      	eors	r0, r0
   19ea8:	f380 8811 	msr	BASEPRI, r0
   19eac:	f04f 0004 	mov.w	r0, #4
   19eb0:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   19eb2:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   19eb4:	20ff      	movs	r0, #255	; 0xff
   19eb6:	f7f9 fa4f 	bl	13358 <packet_rx_allocate>
   19eba:	bd70      	pop	{r4, r5, r6, pc}
   19ebc:	200010a8 	.word	0x200010a8
   19ec0:	20000f7c 	.word	0x20000f7c

00019ec4 <do_radio_rx_fc_set>:
	if (req == ack) {
   19ec4:	4291      	cmp	r1, r2
   19ec6:	d007      	beq.n	19ed8 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   19ec8:	bb41      	cbnz	r1, 19f1c <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   19eca:	4b1c      	ldr	r3, [pc, #112]	; (19f3c <do_radio_rx_fc_set+0x78>)
   19ecc:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   19ed0:	4298      	cmp	r0, r3
   19ed2:	d023      	beq.n	19f1c <do_radio_rx_fc_set+0x58>
		return 1;
   19ed4:	2001      	movs	r0, #1
   19ed6:	4770      	bx	lr
{
   19ed8:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   19eda:	4b18      	ldr	r3, [pc, #96]	; (19f3c <do_radio_rx_fc_set+0x78>)
   19edc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   19ee0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19ee4:	429c      	cmp	r4, r3
   19ee6:	d002      	beq.n	19eee <do_radio_rx_fc_set+0x2a>
			return 1;
   19ee8:	2001      	movs	r0, #1
}
   19eea:	bc30      	pop	{r4, r5}
   19eec:	4770      	bx	lr
			if (ack1 == 0) {
   19eee:	b19a      	cbz	r2, 19f18 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   19ef0:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   19ef2:	3b01      	subs	r3, #1
   19ef4:	b2db      	uxtb	r3, r3
   19ef6:	4c11      	ldr	r4, [pc, #68]	; (19f3c <do_radio_rx_fc_set+0x78>)
   19ef8:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   19efc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   19f00:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   19f02:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   19f06:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   19f0a:	b2db      	uxtb	r3, r3
   19f0c:	4299      	cmp	r1, r3
   19f0e:	d00f      	beq.n	19f30 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   19f10:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   19f14:	2001      	movs	r0, #1
   19f16:	e7e8      	b.n	19eea <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   19f18:	2303      	movs	r3, #3
   19f1a:	e7ea      	b.n	19ef2 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   19f1c:	b151      	cbz	r1, 19f34 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   19f1e:	31b7      	adds	r1, #183	; 0xb7
   19f20:	4b06      	ldr	r3, [pc, #24]	; (19f3c <do_radio_rx_fc_set+0x78>)
   19f22:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   19f26:	88cb      	ldrh	r3, [r1, #6]
   19f28:	4298      	cmp	r0, r3
   19f2a:	d005      	beq.n	19f38 <do_radio_rx_fc_set+0x74>
		return 1;
   19f2c:	2001      	movs	r0, #1
   19f2e:	4770      	bx	lr
	return 0;
   19f30:	2000      	movs	r0, #0
   19f32:	e7da      	b.n	19eea <do_radio_rx_fc_set+0x26>
   19f34:	4608      	mov	r0, r1
   19f36:	4770      	bx	lr
   19f38:	2000      	movs	r0, #0
   19f3a:	4770      	bx	lr
   19f3c:	20000f7c 	.word	0x20000f7c

00019f40 <radio_rx_fc_set>:
{
   19f40:	b538      	push	{r3, r4, r5, lr}
   19f42:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   19f44:	4b1b      	ldr	r3, [pc, #108]	; (19fb4 <radio_rx_fc_set+0x74>)
   19f46:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   19f4a:	b338      	cbz	r0, 19f9c <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   19f4c:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   19f50:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   19f52:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   19f56:	b141      	cbz	r1, 19f6a <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   19f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19f5c:	429c      	cmp	r4, r3
   19f5e:	d023      	beq.n	19fa8 <radio_rx_fc_set+0x68>
   19f60:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   19f62:	4629      	mov	r1, r5
   19f64:	f7ff ffae 	bl	19ec4 <do_radio_rx_fc_set>
   19f68:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   19f6a:	4b12      	ldr	r3, [pc, #72]	; (19fb4 <radio_rx_fc_set+0x74>)
   19f6c:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   19f70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19f74:	4298      	cmp	r0, r3
   19f76:	d001      	beq.n	19f7c <radio_rx_fc_set+0x3c>
	return 0;
   19f78:	4608      	mov	r0, r1
   19f7a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   19f7c:	4295      	cmp	r5, r2
   19f7e:	d015      	beq.n	19fac <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   19f80:	4b0c      	ldr	r3, [pc, #48]	; (19fb4 <radio_rx_fc_set+0x74>)
   19f82:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19f86:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   19f8a:	4298      	cmp	r0, r3
   19f8c:	d010      	beq.n	19fb0 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   19f8e:	4b09      	ldr	r3, [pc, #36]	; (19fb4 <radio_rx_fc_set+0x74>)
   19f90:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   19f94:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   19f96:	429d      	cmp	r5, r3
   19f98:	d001      	beq.n	19f9e <radio_rx_fc_set+0x5e>
	return 0;
   19f9a:	4608      	mov	r0, r1
}
   19f9c:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   19f9e:	4b05      	ldr	r3, [pc, #20]	; (19fb4 <radio_rx_fc_set+0x74>)
   19fa0:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   19fa4:	4608      	mov	r0, r1
   19fa6:	bd38      	pop	{r3, r4, r5, pc}
   19fa8:	2000      	movs	r0, #0
   19faa:	bd38      	pop	{r3, r4, r5, pc}
   19fac:	4608      	mov	r0, r1
   19fae:	bd38      	pop	{r3, r4, r5, pc}
   19fb0:	4608      	mov	r0, r1
   19fb2:	bd38      	pop	{r3, r4, r5, pc}
   19fb4:	20000f7c 	.word	0x20000f7c

00019fb8 <radio_tx_mem_acquire>:
{
   19fb8:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   19fba:	4802      	ldr	r0, [pc, #8]	; (19fc4 <radio_tx_mem_acquire+0xc>)
   19fbc:	f7f6 fc8f 	bl	108de <mem_acquire>
}
   19fc0:	bd08      	pop	{r3, pc}
   19fc2:	bf00      	nop
   19fc4:	200010dc 	.word	0x200010dc

00019fc8 <radio_tx_mem_release>:
{
   19fc8:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   19fca:	4902      	ldr	r1, [pc, #8]	; (19fd4 <radio_tx_mem_release+0xc>)
   19fcc:	f7f6 fca3 	bl	10916 <mem_release>
   19fd0:	bd08      	pop	{r3, pc}
   19fd2:	bf00      	nop
   19fd4:	200010dc 	.word	0x200010dc

00019fd8 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   19fd8:	b570      	push	{r4, r5, r6, lr}
   19fda:	b088      	sub	sp, #32
   19fdc:	4605      	mov	r5, r0
   19fde:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   19fe0:	4b36      	ldr	r3, [pc, #216]	; (1a0bc <radio_tx_mem_enqueue+0xe4>)
   19fe2:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   19fe6:	3401      	adds	r4, #1
   19fe8:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   19fea:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   19fee:	429c      	cmp	r4, r3
   19ff0:	d02a      	beq.n	1a048 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   19ff2:	4628      	mov	r0, r5
   19ff4:	f7f9 fa5a 	bl	134ac <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   19ff8:	4601      	mov	r1, r0
   19ffa:	2800      	cmp	r0, #0
   19ffc:	d057      	beq.n	1a0ae <radio_tx_mem_enqueue+0xd6>
   19ffe:	4b2f      	ldr	r3, [pc, #188]	; (1a0bc <radio_tx_mem_enqueue+0xe4>)
   1a000:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   1a004:	b2db      	uxtb	r3, r3
   1a006:	429c      	cmp	r4, r3
   1a008:	d053      	beq.n	1a0b2 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1a00a:	7972      	ldrb	r2, [r6, #5]
   1a00c:	4b2b      	ldr	r3, [pc, #172]	; (1a0bc <radio_tx_mem_enqueue+0xe4>)
   1a00e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   1a012:	3b07      	subs	r3, #7
   1a014:	429a      	cmp	r2, r3
   1a016:	d819      	bhi.n	1a04c <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   1a018:	4b28      	ldr	r3, [pc, #160]	; (1a0bc <radio_tx_mem_enqueue+0xe4>)
   1a01a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   1a01e:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   1a022:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   1a026:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   1a02a:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   1a02e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1a032:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   1a034:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1a038:	f991 301d 	ldrsb.w	r3, [r1, #29]
   1a03c:	2b00      	cmp	r3, #0
   1a03e:	db0b      	blt.n	1a058 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1a040:	2300      	movs	r3, #0
}
   1a042:	4618      	mov	r0, r3
   1a044:	b008      	add	sp, #32
   1a046:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   1a048:	2400      	movs	r4, #0
   1a04a:	e7d2      	b.n	19ff2 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1a04c:	4040      	eors	r0, r0
   1a04e:	f380 8811 	msr	BASEPRI, r0
   1a052:	f04f 0004 	mov.w	r0, #4
   1a056:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1a058:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   1a05a:	b363      	cbz	r3, 1a0b6 <radio_tx_mem_enqueue+0xde>
   1a05c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1a060:	f013 0f02 	tst.w	r3, #2
   1a064:	d001      	beq.n	1a06a <radio_tx_mem_enqueue+0x92>
	return 0;
   1a066:	2300      	movs	r3, #0
   1a068:	e7eb      	b.n	1a042 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   1a06a:	f043 0302 	orr.w	r3, r3, #2
   1a06e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   1a072:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a074:	3207      	adds	r2, #7
   1a076:	9106      	str	r1, [sp, #24]
   1a078:	4b11      	ldr	r3, [pc, #68]	; (1a0c0 <radio_tx_mem_enqueue+0xe8>)
   1a07a:	9305      	str	r3, [sp, #20]
   1a07c:	2000      	movs	r0, #0
   1a07e:	9004      	str	r0, [sp, #16]
   1a080:	2301      	movs	r3, #1
   1a082:	9303      	str	r3, [sp, #12]
   1a084:	9002      	str	r0, [sp, #8]
   1a086:	9001      	str	r0, [sp, #4]
   1a088:	9000      	str	r0, [sp, #0]
   1a08a:	4603      	mov	r3, r0
   1a08c:	b2d2      	uxtb	r2, r2
   1a08e:	2103      	movs	r1, #3
   1a090:	f7f8 f944 	bl	1231c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a094:	4603      	mov	r3, r0
   1a096:	2800      	cmp	r0, #0
   1a098:	d0d3      	beq.n	1a042 <radio_tx_mem_enqueue+0x6a>
   1a09a:	2802      	cmp	r0, #2
   1a09c:	d101      	bne.n	1a0a2 <radio_tx_mem_enqueue+0xca>
	return 0;
   1a09e:	2300      	movs	r3, #0
   1a0a0:	e7cf      	b.n	1a042 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a0a2:	4040      	eors	r0, r0
   1a0a4:	f380 8811 	msr	BASEPRI, r0
   1a0a8:	f04f 0004 	mov.w	r0, #4
   1a0ac:	df02      	svc	2
		return 1;
   1a0ae:	2301      	movs	r3, #1
   1a0b0:	e7c7      	b.n	1a042 <radio_tx_mem_enqueue+0x6a>
   1a0b2:	2301      	movs	r3, #1
   1a0b4:	e7c5      	b.n	1a042 <radio_tx_mem_enqueue+0x6a>
	return 0;
   1a0b6:	2300      	movs	r3, #0
   1a0b8:	e7c3      	b.n	1a042 <radio_tx_mem_enqueue+0x6a>
   1a0ba:	bf00      	nop
   1a0bc:	20000f7c 	.word	0x20000f7c
   1a0c0:	0001333d 	.word	0x0001333d

0001a0c4 <ll_enc_req_send>:
{
   1a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a0c8:	4680      	mov	r8, r0
   1a0ca:	4689      	mov	r9, r1
   1a0cc:	4616      	mov	r6, r2
   1a0ce:	461f      	mov	r7, r3
	conn = connection_get(handle);
   1a0d0:	f7f9 f9ec 	bl	134ac <connection_get>
	if (!conn) {
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d055      	beq.n	1a184 <ll_enc_req_send+0xc0>
   1a0d8:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   1a0da:	f7ff ff6d 	bl	19fb8 <radio_tx_mem_acquire>
	if (node_tx) {
   1a0de:	4604      	mov	r4, r0
   1a0e0:	2800      	cmp	r0, #0
   1a0e2:	d051      	beq.n	1a188 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1a0e4:	2210      	movs	r2, #16
   1a0e6:	4639      	mov	r1, r7
   1a0e8:	f105 0083 	add.w	r0, r5, #131	; 0x83
   1a0ec:	f7e6 f8e8 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   1a0f0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1a0f4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   1a0f8:	d008      	beq.n	1a10c <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   1a0fa:	2b30      	cmp	r3, #48	; 0x30
   1a0fc:	d02d      	beq.n	1a15a <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   1a0fe:	4620      	mov	r0, r4
   1a100:	f7ff ff62 	bl	19fc8 <radio_tx_mem_release>
			return 1;
   1a104:	2301      	movs	r3, #1
}
   1a106:	4618      	mov	r0, r3
   1a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a10c:	7923      	ldrb	r3, [r4, #4]
   1a10e:	f043 0303 	orr.w	r3, r3, #3
   1a112:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a114:	2317      	movs	r3, #23
   1a116:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   1a118:	2303      	movs	r3, #3
   1a11a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1a11c:	2208      	movs	r2, #8
   1a11e:	4649      	mov	r1, r9
   1a120:	18a0      	adds	r0, r4, r2
   1a122:	f7e6 f8cd 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1a126:	7833      	ldrb	r3, [r6, #0]
   1a128:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   1a12a:	7873      	ldrb	r3, [r6, #1]
   1a12c:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   1a12e:	2108      	movs	r1, #8
   1a130:	f104 0012 	add.w	r0, r4, #18
   1a134:	f7f8 fd74 	bl	12c20 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   1a138:	2104      	movs	r1, #4
   1a13a:	f104 001a 	add.w	r0, r4, #26
   1a13e:	f7f8 fd6f 	bl	12c20 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   1a142:	4621      	mov	r1, r4
   1a144:	4640      	mov	r0, r8
   1a146:	f7ff ff47 	bl	19fd8 <radio_tx_mem_enqueue>
   1a14a:	4603      	mov	r3, r0
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d0da      	beq.n	1a106 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   1a150:	4620      	mov	r0, r4
   1a152:	f7ff ff39 	bl	19fc8 <radio_tx_mem_release>
			return 1;
   1a156:	2301      	movs	r3, #1
   1a158:	e7d5      	b.n	1a106 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   1a15a:	2208      	movs	r2, #8
   1a15c:	4649      	mov	r1, r9
   1a15e:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1a162:	f7e6 f8ad 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1a166:	7833      	ldrb	r3, [r6, #0]
   1a168:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   1a16c:	7873      	ldrb	r3, [r6, #1]
   1a16e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a172:	7923      	ldrb	r3, [r4, #4]
   1a174:	f043 0303 	orr.w	r3, r3, #3
   1a178:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1a17a:	2301      	movs	r3, #1
   1a17c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   1a17e:	230a      	movs	r3, #10
   1a180:	71e3      	strb	r3, [r4, #7]
   1a182:	e7de      	b.n	1a142 <ll_enc_req_send+0x7e>
		return 1;
   1a184:	2301      	movs	r3, #1
   1a186:	e7be      	b.n	1a106 <ll_enc_req_send+0x42>
	return 1;
   1a188:	2301      	movs	r3, #1
   1a18a:	e7bc      	b.n	1a106 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   1a18c:	4770      	bx	lr

0001a18e <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1a18e:	b508      	push	{r3, lr}
	if (bm) {
   1a190:	b910      	cbnz	r0, 1a198 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   1a192:	f000 fe5f 	bl	1ae54 <rpa_refresh_stop>
   1a196:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   1a198:	f000 fe48 	bl	1ae2c <rpa_refresh_start>
   1a19c:	bd08      	pop	{r3, pc}
	...

0001a1a0 <radio_adv_enable>:
{
   1a1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a1a4:	b08f      	sub	sp, #60	; 0x3c
   1a1a6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a1aa:	2202      	movs	r2, #2
   1a1ac:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   1a1ae:	4aca      	ldr	r2, [pc, #808]	; (1a4d8 <radio_adv_enable+0x338>)
   1a1b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1a1b4:	f012 0f01 	tst.w	r2, #1
   1a1b8:	d003      	beq.n	1a1c2 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1ba:	200c      	movs	r0, #12
}
   1a1bc:	b00f      	add	sp, #60	; 0x3c
   1a1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a1c2:	461d      	mov	r5, r3
   1a1c4:	460c      	mov	r4, r1
   1a1c6:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   1a1c8:	4bc3      	ldr	r3, [pc, #780]	; (1a4d8 <radio_adv_enable+0x338>)
   1a1ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   1a1ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a1d2:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   1a1d6:	3220      	adds	r2, #32
   1a1d8:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1a1dc:	f898 3007 	ldrb.w	r3, [r8, #7]
   1a1e0:	f003 030f 	and.w	r3, r3, #15
   1a1e4:	2b01      	cmp	r3, #1
   1a1e6:	d97f      	bls.n	1a2e8 <radio_adv_enable+0x148>
		conn = NULL;
   1a1e8:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   1a1ea:	4abb      	ldr	r2, [pc, #748]	; (1a4d8 <radio_adv_enable+0x338>)
   1a1ec:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   1a1f0:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   1a1f4:	a80e      	add	r0, sp, #56	; 0x38
   1a1f6:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   1a1fa:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   1a1fe:	f365 1387 	bfi	r3, r5, #6, #2
   1a202:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   1a206:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1a20a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   1a20e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   1a212:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1a214:	2327      	movs	r3, #39	; 0x27
   1a216:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   1a218:	2300      	movs	r3, #0
   1a21a:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1a21c:	2101      	movs	r1, #1
   1a21e:	f7f6 fbe2 	bl	109e6 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a222:	f898 5007 	ldrb.w	r5, [r8, #7]
   1a226:	f005 050f 	and.w	r5, r5, #15
   1a22a:	2d01      	cmp	r5, #1
   1a22c:	f000 8108 	beq.w	1a440 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   1a230:	2d02      	cmp	r5, #2
   1a232:	f000 8111 	beq.w	1a458 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   1a236:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   1a238:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a23c:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   1a240:	0080      	lsls	r0, r0, #2
   1a242:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   1a244:	a3a2      	add	r3, pc, #648	; (adr r3, 1a4d0 <radio_adv_enable+0x330>)
   1a246:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a24a:	49a4      	ldr	r1, [pc, #656]	; (1a4dc <radio_adv_enable+0x33c>)
   1a24c:	fba0 0101 	umull	r0, r1, r0, r1
   1a250:	f7e6 ff54 	bl	10fc <__aeabi_uldivmod>
   1a254:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a258:	4a9f      	ldr	r2, [pc, #636]	; (1a4d8 <radio_adv_enable+0x338>)
   1a25a:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   1a25c:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   1a25e:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   1a260:	4299      	cmp	r1, r3
   1a262:	bf38      	it	cc
   1a264:	4619      	movcc	r1, r3
   1a266:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1a268:	2d01      	cmp	r5, #1
   1a26a:	f000 80ff 	beq.w	1a46c <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a26e:	f7f8 f96f 	bl	12550 <ticker_ticks_now_get>
   1a272:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1a274:	b2a4      	uxth	r4, r4
   1a276:	489a      	ldr	r0, [pc, #616]	; (1a4e0 <radio_adv_enable+0x340>)
   1a278:	fba4 0100 	umull	r0, r1, r4, r0
   1a27c:	2391      	movs	r3, #145	; 0x91
   1a27e:	fb03 1104 	mla	r1, r3, r4, r1
   1a282:	a393      	add	r3, pc, #588	; (adr r3, 1a4d0 <radio_adv_enable+0x330>)
   1a284:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a288:	f7e6 ff38 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a28c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   1a290:	4b91      	ldr	r3, [pc, #580]	; (1a4d8 <radio_adv_enable+0x338>)
   1a292:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a294:	4443      	add	r3, r8
   1a296:	b29b      	uxth	r3, r3
		ret =
   1a298:	a90d      	add	r1, sp, #52	; 0x34
   1a29a:	9108      	str	r1, [sp, #32]
   1a29c:	4991      	ldr	r1, [pc, #580]	; (1a4e4 <radio_adv_enable+0x344>)
   1a29e:	9107      	str	r1, [sp, #28]
   1a2a0:	2000      	movs	r0, #0
   1a2a2:	9006      	str	r0, [sp, #24]
   1a2a4:	4990      	ldr	r1, [pc, #576]	; (1a4e8 <radio_adv_enable+0x348>)
   1a2a6:	9105      	str	r1, [sp, #20]
   1a2a8:	9304      	str	r3, [sp, #16]
   1a2aa:	9003      	str	r0, [sp, #12]
   1a2ac:	9002      	str	r0, [sp, #8]
   1a2ae:	9201      	str	r2, [sp, #4]
   1a2b0:	9000      	str	r0, [sp, #0]
   1a2b2:	463b      	mov	r3, r7
   1a2b4:	2205      	movs	r2, #5
   1a2b6:	2103      	movs	r1, #3
   1a2b8:	f7f7 ffe2 	bl	12280 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1a2bc:	2802      	cmp	r0, #2
   1a2be:	f000 813b 	beq.w	1a538 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1a2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a2c4:	2b00      	cmp	r3, #0
   1a2c6:	f040 80f2 	bne.w	1a4ae <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   1a2ca:	4b83      	ldr	r3, [pc, #524]	; (1a4d8 <radio_adv_enable+0x338>)
   1a2cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1a2d0:	f042 0201 	orr.w	r2, r2, #1
   1a2d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   1a2d8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1a2dc:	f013 0f01 	tst.w	r3, #1
   1a2e0:	f000 812e 	beq.w	1a540 <radio_adv_enable+0x3a0>
		return 0;
   1a2e4:	2000      	movs	r0, #0
   1a2e6:	e769      	b.n	1a1bc <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   1a2e8:	4b7b      	ldr	r3, [pc, #492]	; (1a4d8 <radio_adv_enable+0x338>)
   1a2ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1a2ee:	b10b      	cbz	r3, 1a2f4 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a2f0:	200c      	movs	r0, #12
   1a2f2:	e763      	b.n	1a1bc <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   1a2f4:	487d      	ldr	r0, [pc, #500]	; (1a4ec <radio_adv_enable+0x34c>)
   1a2f6:	f7f6 faf2 	bl	108de <mem_acquire>
		if (!link) {
   1a2fa:	4681      	mov	r9, r0
   1a2fc:	2800      	cmp	r0, #0
   1a2fe:	f000 8124 	beq.w	1a54a <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   1a302:	487b      	ldr	r0, [pc, #492]	; (1a4f0 <radio_adv_enable+0x350>)
   1a304:	f7f6 faeb 	bl	108de <mem_acquire>
		if (!conn) {
   1a308:	4606      	mov	r6, r0
   1a30a:	2800      	cmp	r0, #0
   1a30c:	f000 8092 	beq.w	1a434 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   1a310:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a314:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1a316:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   1a31a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   1a31e:	7f43      	ldrb	r3, [r0, #29]
   1a320:	f36f 1386 	bfc	r3, #6, #1
   1a324:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1a326:	2300      	movs	r3, #0
   1a328:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   1a32a:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   1a32c:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   1a32e:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   1a330:	4969      	ldr	r1, [pc, #420]	; (1a4d8 <radio_adv_enable+0x338>)
   1a332:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   1a336:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1a338:	221b      	movs	r2, #27
   1a33a:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1a33c:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   1a33e:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   1a342:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   1a344:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a348:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   1a34a:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   1a34c:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   1a350:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   1a354:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   1a358:	2001      	movs	r0, #1
   1a35a:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   1a35e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1a362:	f363 12c7 	bfi	r2, r3, #7, #1
   1a366:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   1a36a:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   1a36e:	f360 0202 	bfi	r2, r0, #0, #3
   1a372:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1a376:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   1a37a:	b2d2      	uxtb	r2, r2
   1a37c:	f36e 02c5 	bfi	r2, lr, #3, #3
   1a380:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1a384:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   1a388:	f360 0202 	bfi	r2, r0, #0, #3
   1a38c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   1a390:	7f72      	ldrb	r2, [r6, #29]
   1a392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a396:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   1a398:	2206      	movs	r2, #6
   1a39a:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   1a39c:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   1a3a0:	f002 02de 	and.w	r2, r2, #222	; 0xde
   1a3a4:	f363 0241 	bfi	r2, r3, #1, #1
   1a3a8:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   1a3ac:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   1a3ae:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   1a3b0:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   1a3b2:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   1a3b6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   1a3ba:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   1a3be:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   1a3c2:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   1a3c6:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   1a3ca:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   1a3ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1a3d2:	f363 0241 	bfi	r2, r3, #1, #1
   1a3d6:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   1a3da:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1a3de:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   1a3e2:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1a3e6:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1a3ea:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1a3ee:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   1a3f2:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   1a3f6:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   1a3fa:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1a3fe:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   1a402:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   1a406:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1a40a:	f363 12c7 	bfi	r2, r3, #7, #1
   1a40e:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   1a412:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   1a416:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   1a41a:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   1a41e:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   1a422:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   1a426:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   1a42a:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   1a42e:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   1a432:	e6da      	b.n	1a1ea <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   1a434:	492d      	ldr	r1, [pc, #180]	; (1a4ec <radio_adv_enable+0x34c>)
   1a436:	4648      	mov	r0, r9
   1a438:	f7f6 fa6d 	bl	10916 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a43c:	2007      	movs	r0, #7
   1a43e:	e6bd      	b.n	1a1bc <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   1a440:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a444:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1a448:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   1a44c:	0080      	lsls	r0, r0, #2
   1a44e:	b280      	uxth	r0, r0
   1a450:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1a454:	b280      	uxth	r0, r0
   1a456:	e6f5      	b.n	1a244 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   1a458:	b280      	uxth	r0, r0
   1a45a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a45e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1a462:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1a466:	0080      	lsls	r0, r0, #2
   1a468:	b280      	uxth	r0, r0
   1a46a:	e6eb      	b.n	1a244 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1a46c:	2c00      	cmp	r4, #0
   1a46e:	f47f aefe 	bne.w	1a26e <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   1a472:	f7f8 f86d 	bl	12550 <ticker_ticks_now_get>
   1a476:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   1a478:	4b17      	ldr	r3, [pc, #92]	; (1a4d8 <radio_adv_enable+0x338>)
   1a47a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a47c:	eb08 0203 	add.w	r2, r8, r3
   1a480:	b293      	uxth	r3, r2
   1a482:	a90d      	add	r1, sp, #52	; 0x34
   1a484:	9108      	str	r1, [sp, #32]
   1a486:	4917      	ldr	r1, [pc, #92]	; (1a4e4 <radio_adv_enable+0x344>)
   1a488:	9107      	str	r1, [sp, #28]
   1a48a:	2000      	movs	r0, #0
   1a48c:	9006      	str	r0, [sp, #24]
   1a48e:	4916      	ldr	r1, [pc, #88]	; (1a4e8 <radio_adv_enable+0x348>)
   1a490:	9105      	str	r1, [sp, #20]
   1a492:	9304      	str	r3, [sp, #16]
   1a494:	9003      	str	r0, [sp, #12]
   1a496:	9002      	str	r0, [sp, #8]
   1a498:	9201      	str	r2, [sp, #4]
   1a49a:	9000      	str	r0, [sp, #0]
   1a49c:	4623      	mov	r3, r4
   1a49e:	2205      	movs	r2, #5
   1a4a0:	2103      	movs	r1, #3
   1a4a2:	f7f7 feed 	bl	12280 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1a4a6:	2802      	cmp	r0, #2
   1a4a8:	d027      	beq.n	1a4fa <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1a4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a4ac:	b34b      	cbz	r3, 1a502 <radio_adv_enable+0x362>
	if (conn) {
   1a4ae:	2e00      	cmp	r6, #0
   1a4b0:	d04d      	beq.n	1a54e <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   1a4b2:	4c09      	ldr	r4, [pc, #36]	; (1a4d8 <radio_adv_enable+0x338>)
   1a4b4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   1a4b8:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1a4bc:	f7f6 fa2b 	bl	10916 <mem_release>
		mem_release(conn, &_radio.conn_free);
   1a4c0:	f504 7184 	add.w	r1, r4, #264	; 0x108
   1a4c4:	4630      	mov	r0, r6
   1a4c6:	f7f6 fa26 	bl	10916 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1a4ca:	200c      	movs	r0, #12
   1a4cc:	e676      	b.n	1a1bc <radio_adv_enable+0x1c>
   1a4ce:	bf00      	nop
   1a4d0:	1afd498d 	.word	0x1afd498d
   1a4d4:	00000007 	.word	0x00000007
   1a4d8:	20000f7c 	.word	0x20000f7c
   1a4dc:	3b9aca00 	.word	0x3b9aca00
   1a4e0:	84e72a00 	.word	0x84e72a00
   1a4e4:	00012c65 	.word	0x00012c65
   1a4e8:	000165ed 	.word	0x000165ed
   1a4ec:	200010c0 	.word	0x200010c0
   1a4f0:	20001084 	.word	0x20001084
   1a4f4:	bf20      	wfe
  __ASM volatile ("sev");
   1a4f6:	bf40      	sev
  __ASM volatile ("wfe");
   1a4f8:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   1a4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a4fc:	2b02      	cmp	r3, #2
   1a4fe:	d0f9      	beq.n	1a4f4 <radio_adv_enable+0x354>
   1a500:	e7d3      	b.n	1a4aa <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   1a502:	ab0e      	add	r3, sp, #56	; 0x38
   1a504:	2202      	movs	r2, #2
   1a506:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   1a50a:	9308      	str	r3, [sp, #32]
   1a50c:	4b11      	ldr	r3, [pc, #68]	; (1a554 <radio_adv_enable+0x3b4>)
   1a50e:	9307      	str	r3, [sp, #28]
   1a510:	2000      	movs	r0, #0
   1a512:	9006      	str	r0, [sp, #24]
   1a514:	4b10      	ldr	r3, [pc, #64]	; (1a558 <radio_adv_enable+0x3b8>)
   1a516:	9305      	str	r3, [sp, #20]
   1a518:	9004      	str	r0, [sp, #16]
   1a51a:	9003      	str	r0, [sp, #12]
   1a51c:	9002      	str	r0, [sp, #8]
   1a51e:	9001      	str	r0, [sp, #4]
   1a520:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   1a524:	9300      	str	r3, [sp, #0]
   1a526:	4623      	mov	r3, r4
   1a528:	2203      	movs	r2, #3
   1a52a:	4611      	mov	r1, r2
   1a52c:	f7f7 fea8 	bl	12280 <ticker_start>
	    !interval) {
   1a530:	e6c4      	b.n	1a2bc <radio_adv_enable+0x11c>
   1a532:	bf20      	wfe
  __ASM volatile ("sev");
   1a534:	bf40      	sev
  __ASM volatile ("wfe");
   1a536:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1a538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a53a:	2b02      	cmp	r3, #2
   1a53c:	d0f9      	beq.n	1a532 <radio_adv_enable+0x392>
   1a53e:	e6c0      	b.n	1a2c2 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   1a540:	2001      	movs	r0, #1
   1a542:	f7ff fe24 	bl	1a18e <ll_adv_scan_state_cb>
		return 0;
   1a546:	2000      	movs	r0, #0
   1a548:	e638      	b.n	1a1bc <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a54a:	2007      	movs	r0, #7
   1a54c:	e636      	b.n	1a1bc <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1a54e:	200c      	movs	r0, #12
   1a550:	e634      	b.n	1a1bc <radio_adv_enable+0x1c>
   1a552:	bf00      	nop
   1a554:	00012c65 	.word	0x00012c65
   1a558:	000137e1 	.word	0x000137e1

0001a55c <radio_adv_disable>:
{
   1a55c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1a55e:	2103      	movs	r1, #3
   1a560:	2005      	movs	r0, #5
   1a562:	f7f8 ffc1 	bl	134e8 <role_disable>
	if (!status) {
   1a566:	4604      	mov	r4, r0
   1a568:	b9f0      	cbnz	r0, 1a5a8 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   1a56a:	4b13      	ldr	r3, [pc, #76]	; (1a5b8 <radio_adv_disable+0x5c>)
   1a56c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1a570:	f36f 0200 	bfc	r2, #0, #1
   1a574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   1a578:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1a57c:	f013 0f01 	tst.w	r3, #1
   1a580:	d016      	beq.n	1a5b0 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   1a582:	4b0d      	ldr	r3, [pc, #52]	; (1a5b8 <radio_adv_disable+0x5c>)
   1a584:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   1a588:	b175      	cbz	r5, 1a5a8 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   1a58a:	461e      	mov	r6, r3
   1a58c:	2300      	movs	r3, #0
   1a58e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1a592:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1a596:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1a59a:	f7f6 f9bc 	bl	10916 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1a59e:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1a5a2:	4628      	mov	r0, r5
   1a5a4:	f7f6 f9b7 	bl	10916 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1a5a8:	b104      	cbz	r4, 1a5ac <radio_adv_disable+0x50>
   1a5aa:	240c      	movs	r4, #12
}
   1a5ac:	4620      	mov	r0, r4
   1a5ae:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   1a5b0:	f7ff fded 	bl	1a18e <ll_adv_scan_state_cb>
   1a5b4:	e7e5      	b.n	1a582 <radio_adv_disable+0x26>
   1a5b6:	bf00      	nop
   1a5b8:	20000f7c 	.word	0x20000f7c
   1a5bc:	00000000 	.word	0x00000000

0001a5c0 <radio_scan_enable>:
{
   1a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5c4:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1a5c6:	2402      	movs	r4, #2
   1a5c8:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   1a5ca:	4c77      	ldr	r4, [pc, #476]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a5cc:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   1a5d0:	f014 0f01 	tst.w	r4, #1
   1a5d4:	d003      	beq.n	1a5de <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a5d6:	200c      	movs	r0, #12
}
   1a5d8:	b00f      	add	sp, #60	; 0x3c
   1a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5de:	461d      	mov	r5, r3
   1a5e0:	4617      	mov	r7, r2
   1a5e2:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   1a5e4:	4c70      	ldr	r4, [pc, #448]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a5e6:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1a5ea:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1a5ee:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1a5f2:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   1a5f6:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   1a5fa:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   1a5fe:	f361 0200 	bfi	r2, r1, #0, #1
   1a602:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   1a606:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   1a60a:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   1a60e:	f366 13c7 	bfi	r3, r6, #7, #1
   1a612:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1a616:	2206      	movs	r2, #6
   1a618:	4639      	mov	r1, r7
   1a61a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1a61e:	f7e5 fe4f 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   1a622:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   1a626:	4e61      	ldr	r6, [pc, #388]	; (1a7ac <radio_scan_enable+0x1ec>)
   1a628:	f04f 0a91 	mov.w	sl, #145	; 0x91
   1a62c:	fba2 0106 	umull	r0, r1, r2, r6
   1a630:	fb0a 1102 	mla	r1, sl, r2, r1
   1a634:	a35a      	add	r3, pc, #360	; (adr r3, 1a7a0 <radio_scan_enable+0x1e0>)
   1a636:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a63a:	f7e6 fd5f 	bl	10fc <__aeabi_uldivmod>
   1a63e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   1a642:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   1a646:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1a64a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   1a64e:	f362 1305 	bfi	r3, r2, #4, #2
   1a652:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   1a656:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   1a65a:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   1a65e:	2327      	movs	r3, #39	; 0x27
   1a660:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   1a664:	2300      	movs	r3, #0
   1a666:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   1a66a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   1a66e:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   1a672:	b2aa      	uxth	r2, r5
   1a674:	fba2 6706 	umull	r6, r7, r2, r6
   1a678:	fb0a 7702 	mla	r7, sl, r2, r7
   1a67c:	a348      	add	r3, pc, #288	; (adr r3, 1a7a0 <radio_scan_enable+0x1e0>)
   1a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a682:	4630      	mov	r0, r6
   1a684:	4639      	mov	r1, r7
   1a686:	f7e6 fd39 	bl	10fc <__aeabi_uldivmod>
   1a68a:	4604      	mov	r4, r0
   1a68c:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   1a690:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1a694:	4598      	cmp	r8, r3
   1a696:	d902      	bls.n	1a69e <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   1a698:	4a43      	ldr	r2, [pc, #268]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a69a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   1a69e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1a6a2:	bf38      	it	cc
   1a6a4:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   1a6a8:	f7f7 ff52 	bl	12550 <ticker_ticks_now_get>
   1a6ac:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   1a6ae:	4b3e      	ldr	r3, [pc, #248]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a6b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1a6b4:	2b00      	cmp	r3, #0
   1a6b6:	d045      	beq.n	1a744 <radio_scan_enable+0x184>
		us_offset = 0;
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   1a6bc:	f04f 0800 	mov.w	r8, #0
   1a6c0:	a337      	add	r3, pc, #220	; (adr r3, 1a7a0 <radio_scan_enable+0x1e0>)
   1a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6c6:	493a      	ldr	r1, [pc, #232]	; (1a7b0 <radio_scan_enable+0x1f0>)
   1a6c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a6ca:	fba0 0101 	umull	r0, r1, r0, r1
   1a6ce:	f7e6 fd15 	bl	10fc <__aeabi_uldivmod>
   1a6d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a6d6:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   1a6d8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1a6dc:	2500      	movs	r5, #0
   1a6de:	4835      	ldr	r0, [pc, #212]	; (1a7b4 <radio_scan_enable+0x1f4>)
   1a6e0:	2307      	movs	r3, #7
   1a6e2:	fb03 f304 	mul.w	r3, r3, r4
   1a6e6:	fb00 3305 	mla	r3, r0, r5, r3
   1a6ea:	fba4 0100 	umull	r0, r1, r4, r0
   1a6ee:	4419      	add	r1, r3
   1a6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	1a30      	subs	r0, r6, r0
   1a6f8:	eb67 0101 	sbc.w	r1, r7, r1
   1a6fc:	f7e6 fcfe 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   1a700:	4b29      	ldr	r3, [pc, #164]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a702:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1a706:	4499      	add	r9, r3
   1a708:	fa1f f389 	uxth.w	r3, r9
   1a70c:	aa0d      	add	r2, sp, #52	; 0x34
   1a70e:	9208      	str	r2, [sp, #32]
   1a710:	4a29      	ldr	r2, [pc, #164]	; (1a7b8 <radio_scan_enable+0x1f8>)
   1a712:	9207      	str	r2, [sp, #28]
   1a714:	f8cd 8018 	str.w	r8, [sp, #24]
   1a718:	4a28      	ldr	r2, [pc, #160]	; (1a7bc <radio_scan_enable+0x1fc>)
   1a71a:	9205      	str	r2, [sp, #20]
   1a71c:	9304      	str	r3, [sp, #16]
   1a71e:	f8cd 800c 	str.w	r8, [sp, #12]
   1a722:	9002      	str	r0, [sp, #8]
   1a724:	f8cd a004 	str.w	sl, [sp, #4]
   1a728:	f8cd 8000 	str.w	r8, [sp]
   1a72c:	465b      	mov	r3, fp
   1a72e:	2206      	movs	r2, #6
   1a730:	2103      	movs	r1, #3
   1a732:	4640      	mov	r0, r8
   1a734:	f7f7 fda4 	bl	12280 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1a738:	2802      	cmp	r0, #2
   1a73a:	d017      	beq.n	1a76c <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1a73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a73e:	b1cb      	cbz	r3, 1a774 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a740:	200c      	movs	r0, #12
   1a742:	e749      	b.n	1a5d8 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   1a744:	2300      	movs	r3, #0
   1a746:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   1a748:	4b17      	ldr	r3, [pc, #92]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a74a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1a74e:	ab0c      	add	r3, sp, #48	; 0x30
   1a750:	aa0b      	add	r2, sp, #44	; 0x2c
   1a752:	4449      	add	r1, r9
   1a754:	2003      	movs	r0, #3
   1a756:	f7f9 ff63 	bl	14620 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1a75a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a75c:	2b00      	cmp	r3, #0
   1a75e:	d0ad      	beq.n	1a6bc <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   1a760:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1a764:	e7aa      	b.n	1a6bc <radio_scan_enable+0xfc>
   1a766:	bf20      	wfe
  __ASM volatile ("sev");
   1a768:	bf40      	sev
  __ASM volatile ("wfe");
   1a76a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1a76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a76e:	2b02      	cmp	r3, #2
   1a770:	d0f9      	beq.n	1a766 <radio_scan_enable+0x1a6>
   1a772:	e7e3      	b.n	1a73c <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   1a774:	4b0c      	ldr	r3, [pc, #48]	; (1a7a8 <radio_scan_enable+0x1e8>)
   1a776:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1a77a:	f042 0201 	orr.w	r2, r2, #1
   1a77e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   1a782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a786:	f013 0f01 	tst.w	r3, #1
   1a78a:	d001      	beq.n	1a790 <radio_scan_enable+0x1d0>
	return 0;
   1a78c:	2000      	movs	r0, #0
   1a78e:	e723      	b.n	1a5d8 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   1a790:	2002      	movs	r0, #2
   1a792:	f7ff fcfc 	bl	1a18e <ll_adv_scan_state_cb>
	return 0;
   1a796:	2000      	movs	r0, #0
   1a798:	e71e      	b.n	1a5d8 <radio_scan_enable+0x18>
   1a79a:	bf00      	nop
   1a79c:	f3af 8000 	nop.w
   1a7a0:	1afd498d 	.word	0x1afd498d
   1a7a4:	00000007 	.word	0x00000007
   1a7a8:	20000f7c 	.word	0x20000f7c
   1a7ac:	84e72a00 	.word	0x84e72a00
   1a7b0:	3b9aca00 	.word	0x3b9aca00
   1a7b4:	1afd498d 	.word	0x1afd498d
   1a7b8:	00012c65 	.word	0x00012c65
   1a7bc:	00017b9d 	.word	0x00017b9d

0001a7c0 <radio_scan_disable>:
{
   1a7c0:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   1a7c2:	2104      	movs	r1, #4
   1a7c4:	2006      	movs	r0, #6
   1a7c6:	f7f8 fe8f 	bl	134e8 <role_disable>
	if (!status) {
   1a7ca:	4604      	mov	r4, r0
   1a7cc:	b9f0      	cbnz	r0, 1a80c <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   1a7ce:	4b13      	ldr	r3, [pc, #76]	; (1a81c <radio_scan_disable+0x5c>)
   1a7d0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1a7d4:	f36f 0200 	bfc	r2, #0, #1
   1a7d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   1a7dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a7e0:	f013 0f01 	tst.w	r3, #1
   1a7e4:	d016      	beq.n	1a814 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   1a7e6:	4b0d      	ldr	r3, [pc, #52]	; (1a81c <radio_scan_disable+0x5c>)
   1a7e8:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   1a7ec:	b175      	cbz	r5, 1a80c <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   1a7ee:	461e      	mov	r6, r3
   1a7f0:	2300      	movs	r3, #0
   1a7f2:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   1a7f6:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1a7fa:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1a7fe:	f7f6 f88a 	bl	10916 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1a802:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1a806:	4628      	mov	r0, r5
   1a808:	f7f6 f885 	bl	10916 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1a80c:	b104      	cbz	r4, 1a810 <radio_scan_disable+0x50>
   1a80e:	240c      	movs	r4, #12
}
   1a810:	4620      	mov	r0, r4
   1a812:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   1a814:	f7ff fcbb 	bl	1a18e <ll_adv_scan_state_cb>
   1a818:	e7e5      	b.n	1a7e6 <radio_scan_disable+0x26>
   1a81a:	bf00      	nop
   1a81c:	20000f7c 	.word	0x20000f7c

0001a820 <ll_connect_disable>:
{
   1a820:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   1a822:	4b04      	ldr	r3, [pc, #16]	; (1a834 <ll_connect_disable+0x14>)
   1a824:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1a828:	b113      	cbz	r3, 1a830 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   1a82a:	f7ff ffc9 	bl	1a7c0 <radio_scan_disable>
	return status;
   1a82e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a830:	200c      	movs	r0, #12
}
   1a832:	bd08      	pop	{r3, pc}
   1a834:	20000f7c 	.word	0x20000f7c

0001a838 <radio_rx_dequeue>:
{
   1a838:	b530      	push	{r4, r5, lr}
   1a83a:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1a83c:	aa02      	add	r2, sp, #8
   1a83e:	2300      	movs	r3, #0
   1a840:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1a844:	4947      	ldr	r1, [pc, #284]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a846:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   1a84a:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   1a84e:	f7f6 f8be 	bl	109ce <memq_dequeue>
	LL_ASSERT(link);
   1a852:	b178      	cbz	r0, 1a874 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   1a854:	4944      	ldr	r1, [pc, #272]	; (1a968 <radio_rx_dequeue+0x130>)
   1a856:	f7f6 f85e 	bl	10916 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   1a85a:	9a01      	ldr	r2, [sp, #4]
   1a85c:	7913      	ldrb	r3, [r2, #4]
   1a85e:	3b01      	subs	r3, #1
   1a860:	2b0b      	cmp	r3, #11
   1a862:	d824      	bhi.n	1a8ae <radio_rx_dequeue+0x76>
   1a864:	e8df f003 	tbb	[pc, r3]
   1a868:	0c0c0c0c 	.word	0x0c0c0c0c
   1a86c:	0c180c0c 	.word	0x0c180c0c
   1a870:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   1a874:	4040      	eors	r0, r0
   1a876:	f380 8811 	msr	BASEPRI, r0
   1a87a:	f04f 0004 	mov.w	r0, #4
   1a87e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   1a880:	4938      	ldr	r1, [pc, #224]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a882:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   1a886:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   1a88a:	3901      	subs	r1, #1
   1a88c:	428b      	cmp	r3, r1
   1a88e:	da08      	bge.n	1a8a2 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   1a890:	3301      	adds	r3, #1
   1a892:	4934      	ldr	r1, [pc, #208]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a894:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1a898:	7913      	ldrb	r3, [r2, #4]
   1a89a:	2b06      	cmp	r3, #6
   1a89c:	d00d      	beq.n	1a8ba <radio_rx_dequeue+0x82>
}
   1a89e:	b003      	add	sp, #12
   1a8a0:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   1a8a2:	4040      	eors	r0, r0
   1a8a4:	f380 8811 	msr	BASEPRI, r0
   1a8a8:	f04f 0004 	mov.w	r0, #4
   1a8ac:	df02      	svc	2
		LL_ASSERT(0);
   1a8ae:	4040      	eors	r0, r0
   1a8b0:	f380 8811 	msr	BASEPRI, r0
   1a8b4:	f04f 0004 	mov.w	r0, #4
   1a8b8:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1a8ba:	7ad3      	ldrb	r3, [r2, #11]
   1a8bc:	2b3c      	cmp	r3, #60	; 0x3c
   1a8be:	d002      	beq.n	1a8c6 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   1a8c0:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1a8c2:	2a00      	cmp	r2, #0
   1a8c4:	d039      	beq.n	1a93a <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   1a8c6:	2b3c      	cmp	r3, #60	; 0x3c
   1a8c8:	d02a      	beq.n	1a920 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   1a8ca:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   1a8cc:	4b25      	ldr	r3, [pc, #148]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a8ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a8d2:	f013 0f01 	tst.w	r3, #1
   1a8d6:	d02a      	beq.n	1a92e <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   1a8d8:	4b22      	ldr	r3, [pc, #136]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a8da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1a8de:	f36f 0200 	bfc	r2, #0, #1
   1a8e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   1a8e6:	b15c      	cbz	r4, 1a900 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   1a8e8:	4d1e      	ldr	r5, [pc, #120]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a8ea:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1a8ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a8f2:	f7f6 f810 	bl	10916 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1a8f6:	f505 7184 	add.w	r1, r5, #264	; 0x108
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f7f6 f80b 	bl	10916 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   1a900:	4b18      	ldr	r3, [pc, #96]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a902:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1a906:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   1a90a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a90e:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   1a912:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   1a916:	d1c2      	bne.n	1a89e <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   1a918:	2000      	movs	r0, #0
   1a91a:	f7ff fc38 	bl	1a18e <ll_adv_scan_state_cb>
}
   1a91e:	e7be      	b.n	1a89e <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   1a920:	4b10      	ldr	r3, [pc, #64]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a922:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   1a926:	2200      	movs	r2, #0
   1a928:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   1a92c:	e7ce      	b.n	1a8cc <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   1a92e:	4040      	eors	r0, r0
   1a930:	f380 8811 	msr	BASEPRI, r0
   1a934:	f04f 0004 	mov.w	r0, #4
   1a938:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   1a93a:	4b0a      	ldr	r3, [pc, #40]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a93c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1a940:	f013 0f01 	tst.w	r3, #1
   1a944:	d008      	beq.n	1a958 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   1a946:	4b07      	ldr	r3, [pc, #28]	; (1a964 <radio_rx_dequeue+0x12c>)
   1a948:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1a94c:	f36f 0200 	bfc	r2, #0, #1
   1a950:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   1a954:	2400      	movs	r4, #0
   1a956:	e7c6      	b.n	1a8e6 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   1a958:	4040      	eors	r0, r0
   1a95a:	f380 8811 	msr	BASEPRI, r0
   1a95e:	f04f 0004 	mov.w	r0, #4
   1a962:	df02      	svc	2
   1a964:	20000f7c 	.word	0x20000f7c
   1a968:	200010c0 	.word	0x200010c0

0001a96c <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a96c:	4668      	mov	r0, sp
   1a96e:	f020 0107 	bic.w	r1, r0, #7
   1a972:	468d      	mov	sp, r1
   1a974:	b501      	push	{r0, lr}
{
	isr_radio();
   1a976:	f7f6 f8e1 	bl	10b3c <isr_radio>

	ISR_DIRECT_PM();
   1a97a:	f00e fc7b 	bl	29274 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1a97e:	f00e fa15 	bl	28dac <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a982:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a986:	4685      	mov	sp, r0
   1a988:	4770      	bx	lr
	...

0001a98c <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1a98c:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1a98e:	4b0c      	ldr	r3, [pc, #48]	; (1a9c0 <rtc0_nrf5_isr+0x34>)
   1a990:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   1a994:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   1a998:	b922      	cbnz	r2, 1a9a4 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1a99a:	b94c      	cbnz	r4, 1a9b0 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1a99c:	2000      	movs	r0, #0
   1a99e:	f7f5 febf 	bl	10720 <mayfly_run>
   1a9a2:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a9a4:	2000      	movs	r0, #0
   1a9a6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1a9aa:	f7f7 fc5b 	bl	12264 <ticker_trigger>
   1a9ae:	e7f4      	b.n	1a99a <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1a9b0:	2200      	movs	r2, #0
   1a9b2:	4b03      	ldr	r3, [pc, #12]	; (1a9c0 <rtc0_nrf5_isr+0x34>)
   1a9b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   1a9b8:	2001      	movs	r0, #1
   1a9ba:	f7f7 fc53 	bl	12264 <ticker_trigger>
   1a9be:	e7ed      	b.n	1a99c <rtc0_nrf5_isr+0x10>
   1a9c0:	4000b000 	.word	0x4000b000

0001a9c4 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   1a9c4:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   1a9c6:	2001      	movs	r0, #1
   1a9c8:	f7f5 feaa 	bl	10720 <mayfly_run>
   1a9cc:	bd08      	pop	{r3, pc}

0001a9ce <rng_nrf5_isr>:
{
   1a9ce:	b508      	push	{r3, lr}
	isr_rand(arg);
   1a9d0:	f7f7 f9e2 	bl	11d98 <isr_rand>
   1a9d4:	bd08      	pop	{r3, pc}

0001a9d6 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1a9d6:	2901      	cmp	r1, #1
   1a9d8:	d105      	bne.n	1a9e6 <mayfly_enable_cb+0x10>
{
   1a9da:	b508      	push	{r3, lr}
	if (enable) {
   1a9dc:	b94a      	cbnz	r2, 1a9f2 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   1a9de:	2018      	movs	r0, #24
   1a9e0:	f00e fc12 	bl	29208 <_arch_irq_disable>
   1a9e4:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1a9e6:	4040      	eors	r0, r0
   1a9e8:	f380 8811 	msr	BASEPRI, r0
   1a9ec:	f04f 0004 	mov.w	r0, #4
   1a9f0:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   1a9f2:	2018      	movs	r0, #24
   1a9f4:	f00e fbfa 	bl	291ec <_arch_irq_enable>
   1a9f8:	bd08      	pop	{r3, pc}

0001a9fa <mayfly_is_enabled>:
{
   1a9fa:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   1a9fc:	b129      	cbz	r1, 1aa0a <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   1a9fe:	2901      	cmp	r1, #1
   1aa00:	d107      	bne.n	1aa12 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   1aa02:	2018      	movs	r0, #24
   1aa04:	f00e fc0e 	bl	29224 <_arch_irq_is_enabled>
   1aa08:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   1aa0a:	200b      	movs	r0, #11
   1aa0c:	f00e fc0a 	bl	29224 <_arch_irq_is_enabled>
   1aa10:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   1aa12:	4040      	eors	r0, r0
   1aa14:	f380 8811 	msr	BASEPRI, r0
   1aa18:	f04f 0004 	mov.w	r0, #4
   1aa1c:	df02      	svc	2

0001aa1e <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1aa1e:	4288      	cmp	r0, r1
   1aa20:	d009      	beq.n	1aa36 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   1aa22:	b908      	cbnz	r0, 1aa28 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   1aa24:	2901      	cmp	r1, #1
   1aa26:	d008      	beq.n	1aa3a <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1aa28:	2801      	cmp	r0, #1
   1aa2a:	d001      	beq.n	1aa30 <mayfly_prio_is_equal+0x12>
   1aa2c:	2000      	movs	r0, #0
   1aa2e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   1aa30:	b129      	cbz	r1, 1aa3e <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1aa32:	2000      	movs	r0, #0
   1aa34:	4770      	bx	lr
   1aa36:	2001      	movs	r0, #1
   1aa38:	4770      	bx	lr
   1aa3a:	2001      	movs	r0, #1
   1aa3c:	4770      	bx	lr
   1aa3e:	2001      	movs	r0, #1
}
   1aa40:	4770      	bx	lr
	...

0001aa44 <mayfly_pend>:
	switch (callee_id) {
   1aa44:	b139      	cbz	r1, 1aa56 <mayfly_pend+0x12>
   1aa46:	2901      	cmp	r1, #1
   1aa48:	d00b      	beq.n	1aa62 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   1aa4a:	4040      	eors	r0, r0
   1aa4c:	f380 8811 	msr	BASEPRI, r0
   1aa50:	f04f 0004 	mov.w	r0, #4
   1aa54:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1aa56:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1aa5a:	4b05      	ldr	r3, [pc, #20]	; (1aa70 <mayfly_pend+0x2c>)
   1aa5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1aa60:	4770      	bx	lr
   1aa62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1aa66:	4b02      	ldr	r3, [pc, #8]	; (1aa70 <mayfly_pend+0x2c>)
   1aa68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1aa6c:	4770      	bx	lr
   1aa6e:	bf00      	nop
   1aa70:	e000e100 	.word	0xe000e100

0001aa74 <radio_active_callback>:
{
   1aa74:	4770      	bx	lr
	...

0001aa78 <radio_event_callback>:
{
   1aa78:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1aa7a:	4b02      	ldr	r3, [pc, #8]	; (1aa84 <radio_event_callback+0xc>)
   1aa7c:	6818      	ldr	r0, [r3, #0]
   1aa7e:	f010 f84a 	bl	2ab16 <_impl_k_sem_give>
   1aa82:	bd08      	pop	{r3, pc}
   1aa84:	200018a0 	.word	0x200018a0

0001aa88 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   1aa88:	b510      	push	{r4, lr}
   1aa8a:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1aa8c:	4b37      	ldr	r3, [pc, #220]	; (1ab6c <ll_init+0xe4>)
   1aa8e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   1aa90:	2204      	movs	r2, #4
   1aa92:	2109      	movs	r1, #9
   1aa94:	4836      	ldr	r0, [pc, #216]	; (1ab70 <ll_init+0xe8>)
   1aa96:	f7f7 f957 	bl	11d48 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   1aa9a:	220c      	movs	r2, #12
   1aa9c:	2111      	movs	r1, #17
   1aa9e:	4835      	ldr	r0, [pc, #212]	; (1ab74 <ll_init+0xec>)
   1aaa0:	f7f7 f95c 	bl	11d5c <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   1aaa4:	4834      	ldr	r0, [pc, #208]	; (1ab78 <ll_init+0xf0>)
   1aaa6:	f00e fd6f 	bl	29588 <device_get_binding>
	if (!clk_k32) {
   1aaaa:	2800      	cmp	r0, #0
   1aaac:	d054      	beq.n	1ab58 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   1aaae:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   1aab0:	6812      	ldr	r2, [r2, #0]
   1aab2:	2101      	movs	r1, #1
   1aab4:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   1aab6:	f7f5 ffab 	bl	10a10 <cntr_init>

	mayfly_init();
   1aaba:	f7f5 fd65 	bl	10588 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1aabe:	4b2f      	ldr	r3, [pc, #188]	; (1ab7c <ll_init+0xf4>)
   1aac0:	2108      	movs	r1, #8
   1aac2:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   1aac4:	2203      	movs	r2, #3
   1aac6:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1aac8:	2000      	movs	r0, #0
   1aaca:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1aacc:	2202      	movs	r2, #2
   1aace:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   1aad0:	4a2b      	ldr	r2, [pc, #172]	; (1ab80 <ll_init+0xf8>)
   1aad2:	9202      	str	r2, [sp, #8]
   1aad4:	220d      	movs	r2, #13
   1aad6:	9201      	str	r2, [sp, #4]
   1aad8:	9300      	str	r3, [sp, #0]
   1aada:	2304      	movs	r3, #4
   1aadc:	4a29      	ldr	r2, [pc, #164]	; (1ab84 <ll_init+0xfc>)
   1aade:	f7f7 fb67 	bl	121b0 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1aae2:	4829      	ldr	r0, [pc, #164]	; (1ab88 <ll_init+0x100>)
   1aae4:	f00e fd50 	bl	29588 <device_get_binding>
	if (!clk_m16) {
   1aae8:	2800      	cmp	r0, #0
   1aaea:	d038      	beq.n	1ab5e <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   1aaec:	f44f 7357 	mov.w	r3, #860	; 0x35c
   1aaf0:	9304      	str	r3, [sp, #16]
   1aaf2:	4b26      	ldr	r3, [pc, #152]	; (1ab8c <ll_init+0x104>)
   1aaf4:	9303      	str	r3, [sp, #12]
   1aaf6:	231b      	movs	r3, #27
   1aaf8:	9302      	str	r3, [sp, #8]
   1aafa:	9301      	str	r3, [sp, #4]
   1aafc:	2302      	movs	r3, #2
   1aafe:	9300      	str	r3, [sp, #0]
   1ab00:	2301      	movs	r3, #1
   1ab02:	461a      	mov	r2, r3
   1ab04:	2107      	movs	r1, #7
   1ab06:	f7fe fccb 	bl	194a0 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   1ab0a:	bb58      	cbnz	r0, 1ab64 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   1ab0c:	2001      	movs	r0, #1
   1ab0e:	f000 ffff 	bl	1bb10 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1ab12:	2200      	movs	r2, #0
   1ab14:	4611      	mov	r1, r2
   1ab16:	2001      	movs	r0, #1
   1ab18:	f00e fb92 	bl	29240 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1ab1c:	2200      	movs	r2, #0
   1ab1e:	4611      	mov	r1, r2
   1ab20:	200b      	movs	r0, #11
   1ab22:	f00e fb8d 	bl	29240 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1ab26:	2200      	movs	r2, #0
   1ab28:	4611      	mov	r1, r2
   1ab2a:	2018      	movs	r0, #24
   1ab2c:	f00e fb88 	bl	29240 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   1ab30:	2200      	movs	r2, #0
   1ab32:	2101      	movs	r1, #1
   1ab34:	200d      	movs	r0, #13
   1ab36:	f00e fb83 	bl	29240 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1ab3a:	2001      	movs	r0, #1
   1ab3c:	f00e fb56 	bl	291ec <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   1ab40:	200b      	movs	r0, #11
   1ab42:	f00e fb53 	bl	291ec <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1ab46:	2018      	movs	r0, #24
   1ab48:	f00e fb50 	bl	291ec <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1ab4c:	200d      	movs	r0, #13
   1ab4e:	f00e fb4d 	bl	291ec <_arch_irq_enable>

	return 0;
   1ab52:	2000      	movs	r0, #0
}
   1ab54:	b006      	add	sp, #24
   1ab56:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1ab58:	f06f 0012 	mvn.w	r0, #18
   1ab5c:	e7fa      	b.n	1ab54 <ll_init+0xcc>
		return -ENODEV;
   1ab5e:	f06f 0012 	mvn.w	r0, #18
   1ab62:	e7f7      	b.n	1ab54 <ll_init+0xcc>
		return -ENOMEM;
   1ab64:	f06f 000b 	mvn.w	r0, #11
   1ab68:	e7f4      	b.n	1ab54 <ll_init+0xcc>
   1ab6a:	bf00      	nop
   1ab6c:	200018a0 	.word	0x200018a0
   1ab70:	20001880 	.word	0x20001880
   1ab74:	2000188c 	.word	0x2000188c
   1ab78:	00030470 	.word	0x00030470
   1ab7c:	20001860 	.word	0x20001860
   1ab80:	20001624 	.word	0x20001624
   1ab84:	20001504 	.word	0x20001504
   1ab88:	0003047c 	.word	0x0003047c
   1ab8c:	20001104 	.word	0x20001104

0001ab90 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   1ab90:	2801      	cmp	r0, #1
   1ab92:	d814      	bhi.n	1abbe <ll_addr_get+0x2e>
{
   1ab94:	b538      	push	{r3, r4, r5, lr}
   1ab96:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   1ab98:	b140      	cbz	r0, 1abac <ll_addr_get+0x1c>
		if (bdaddr) {
   1ab9a:	b191      	cbz	r1, 1abc2 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   1ab9c:	4d0b      	ldr	r5, [pc, #44]	; (1abcc <ll_addr_get+0x3c>)
   1ab9e:	2206      	movs	r2, #6
   1aba0:	4629      	mov	r1, r5
   1aba2:	4620      	mov	r0, r4
   1aba4:	f7e5 fb8c 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   1aba8:	4628      	mov	r0, r5
   1abaa:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   1abac:	b159      	cbz	r1, 1abc6 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   1abae:	4d08      	ldr	r5, [pc, #32]	; (1abd0 <ll_addr_get+0x40>)
   1abb0:	2206      	movs	r2, #6
   1abb2:	4629      	mov	r1, r5
   1abb4:	4620      	mov	r0, r4
   1abb6:	f7e5 fb83 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   1abba:	4628      	mov	r0, r5
   1abbc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1abbe:	2000      	movs	r0, #0
   1abc0:	4770      	bx	lr
		return _ll_context.rnd_addr;
   1abc2:	4802      	ldr	r0, [pc, #8]	; (1abcc <ll_addr_get+0x3c>)
   1abc4:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   1abc6:	4802      	ldr	r0, [pc, #8]	; (1abd0 <ll_addr_get+0x40>)
}
   1abc8:	bd38      	pop	{r3, r4, r5, pc}
   1abca:	bf00      	nop
   1abcc:	200014fe 	.word	0x200014fe
   1abd0:	200014f8 	.word	0x200014f8

0001abd4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   1abd4:	b508      	push	{r3, lr}
	if (addr_type) {
   1abd6:	b920      	cbnz	r0, 1abe2 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   1abd8:	2206      	movs	r2, #6
   1abda:	4804      	ldr	r0, [pc, #16]	; (1abec <ll_addr_set+0x18>)
   1abdc:	f7e5 fb70 	bl	2c0 <memcpy>
   1abe0:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   1abe2:	2206      	movs	r2, #6
   1abe4:	4802      	ldr	r0, [pc, #8]	; (1abf0 <ll_addr_set+0x1c>)
   1abe6:	f7e5 fb6b 	bl	2c0 <memcpy>
   1abea:	bd08      	pop	{r3, pc}
   1abec:	200014f8 	.word	0x200014f8
   1abf0:	200014fe 	.word	0x200014fe

0001abf4 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   1abf4:	2300      	movs	r3, #0
   1abf6:	e007      	b.n	1ac08 <wl_clear+0x14>
		wl[i].taken = 0;
   1abf8:	4a05      	ldr	r2, [pc, #20]	; (1ac10 <wl_clear+0x1c>)
   1abfa:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1abfe:	f36f 0100 	bfc	r1, #0, #1
   1ac02:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1ac06:	3301      	adds	r3, #1
   1ac08:	2b07      	cmp	r3, #7
   1ac0a:	ddf5      	ble.n	1abf8 <wl_clear+0x4>
}
   1ac0c:	4770      	bx	lr
   1ac0e:	bf00      	nop
   1ac10:	20001ad8 	.word	0x20001ad8

0001ac14 <filter_clear>:
	filter->enable_bitmask = 0;
   1ac14:	2300      	movs	r3, #0
   1ac16:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   1ac18:	7043      	strb	r3, [r0, #1]
   1ac1a:	4770      	bx	lr

0001ac1c <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ac1c:	2300      	movs	r3, #0
   1ac1e:	e009      	b.n	1ac34 <rl_clear+0x18>
		rl[i].taken = 0;
   1ac20:	4907      	ldr	r1, [pc, #28]	; (1ac40 <rl_clear+0x24>)
   1ac22:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ac26:	00c2      	lsls	r2, r0, #3
   1ac28:	5c88      	ldrb	r0, [r1, r2]
   1ac2a:	f36f 0000 	bfc	r0, #0, #1
   1ac2e:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ac30:	3301      	adds	r3, #1
   1ac32:	b2db      	uxtb	r3, r3
   1ac34:	2b07      	cmp	r3, #7
   1ac36:	d9f3      	bls.n	1ac20 <rl_clear+0x4>
	peer_irk_count = 0;
   1ac38:	2200      	movs	r2, #0
   1ac3a:	4b02      	ldr	r3, [pc, #8]	; (1ac44 <rl_clear+0x28>)
   1ac3c:	701a      	strb	r2, [r3, #0]
   1ac3e:	4770      	bx	lr
   1ac40:	20001960 	.word	0x20001960
   1ac44:	200018d4 	.word	0x200018d4

0001ac48 <wl_find>:
{
   1ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac4a:	4606      	mov	r6, r0
   1ac4c:	460f      	mov	r7, r1
	if (free) {
   1ac4e:	4615      	mov	r5, r2
   1ac50:	b10a      	cbz	r2, 1ac56 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1ac52:	23ff      	movs	r3, #255	; 0xff
   1ac54:	7013      	strb	r3, [r2, #0]
{
   1ac56:	2400      	movs	r4, #0
   1ac58:	e00c      	b.n	1ac74 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1ac5a:	4816      	ldr	r0, [pc, #88]	; (1acb4 <wl_find+0x6c>)
   1ac5c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1ac60:	2206      	movs	r2, #6
   1ac62:	4639      	mov	r1, r7
   1ac64:	3002      	adds	r0, #2
   1ac66:	f011 f975 	bl	2bf54 <memcmp>
   1ac6a:	b9a0      	cbnz	r0, 1ac96 <wl_find+0x4e>
			return i;
   1ac6c:	b2e0      	uxtb	r0, r4
   1ac6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   1ac70:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1ac72:	3401      	adds	r4, #1
   1ac74:	2c07      	cmp	r4, #7
   1ac76:	dc1a      	bgt.n	1acae <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1ac78:	4b0e      	ldr	r3, [pc, #56]	; (1acb4 <wl_find+0x6c>)
   1ac7a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1ac7e:	f013 0f01 	tst.w	r3, #1
   1ac82:	d008      	beq.n	1ac96 <wl_find+0x4e>
   1ac84:	4b0b      	ldr	r3, [pc, #44]	; (1acb4 <wl_find+0x6c>)
   1ac86:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1ac8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ac8e:	f006 0201 	and.w	r2, r6, #1
   1ac92:	4293      	cmp	r3, r2
   1ac94:	d0e1      	beq.n	1ac5a <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1ac96:	2d00      	cmp	r5, #0
   1ac98:	d0eb      	beq.n	1ac72 <wl_find+0x2a>
   1ac9a:	4b06      	ldr	r3, [pc, #24]	; (1acb4 <wl_find+0x6c>)
   1ac9c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1aca0:	f013 0f01 	tst.w	r3, #1
   1aca4:	d1e5      	bne.n	1ac72 <wl_find+0x2a>
   1aca6:	782b      	ldrb	r3, [r5, #0]
   1aca8:	2bff      	cmp	r3, #255	; 0xff
   1acaa:	d1e2      	bne.n	1ac72 <wl_find+0x2a>
   1acac:	e7e0      	b.n	1ac70 <wl_find+0x28>
	return FILTER_IDX_NONE;
   1acae:	20ff      	movs	r0, #255	; 0xff
}
   1acb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1acb2:	bf00      	nop
   1acb4:	20001ad8 	.word	0x20001ad8

0001acb8 <wl_remove>:
{
   1acb8:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1acba:	4601      	mov	r1, r0
   1acbc:	f811 0b01 	ldrb.w	r0, [r1], #1
   1acc0:	2200      	movs	r2, #0
   1acc2:	f7ff ffc1 	bl	1ac48 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1acc6:	2807      	cmp	r0, #7
   1acc8:	d901      	bls.n	1acce <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1acca:	2002      	movs	r0, #2
}
   1accc:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   1acce:	4b0b      	ldr	r3, [pc, #44]	; (1acfc <wl_remove+0x44>)
   1acd0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1acd4:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1acd6:	2b07      	cmp	r3, #7
   1acd8:	d807      	bhi.n	1acea <wl_remove+0x32>
			rl[j].wl = 0;
   1acda:	4909      	ldr	r1, [pc, #36]	; (1ad00 <wl_remove+0x48>)
   1acdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ace0:	00da      	lsls	r2, r3, #3
   1ace2:	5c8b      	ldrb	r3, [r1, r2]
   1ace4:	f36f 1345 	bfc	r3, #5, #1
   1ace8:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   1acea:	4b04      	ldr	r3, [pc, #16]	; (1acfc <wl_remove+0x44>)
   1acec:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1acf0:	f36f 0200 	bfc	r2, #0, #1
   1acf4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   1acf8:	2000      	movs	r0, #0
   1acfa:	bd08      	pop	{r3, pc}
   1acfc:	20001ad8 	.word	0x20001ad8
   1ad00:	20001960 	.word	0x20001960

0001ad04 <filter_insert>:
{
   1ad04:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   1ad06:	2401      	movs	r4, #1
   1ad08:	fa04 f501 	lsl.w	r5, r4, r1
   1ad0c:	7804      	ldrb	r4, [r0, #0]
   1ad0e:	432c      	orrs	r4, r5
   1ad10:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1ad12:	f002 0201 	and.w	r2, r2, #1
   1ad16:	fa02 f401 	lsl.w	r4, r2, r1
   1ad1a:	7842      	ldrb	r2, [r0, #1]
   1ad1c:	4322      	orrs	r2, r4
   1ad1e:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1ad20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ad24:	004a      	lsls	r2, r1, #1
   1ad26:	4410      	add	r0, r2
   1ad28:	2206      	movs	r2, #6
   1ad2a:	4619      	mov	r1, r3
   1ad2c:	3002      	adds	r0, #2
   1ad2e:	f7e5 fac7 	bl	2c0 <memcpy>
   1ad32:	bd38      	pop	{r3, r4, r5, pc}

0001ad34 <filter_wl_update>:
{
   1ad34:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   1ad36:	481b      	ldr	r0, [pc, #108]	; (1ada4 <filter_wl_update+0x70>)
   1ad38:	f7ff ff6c 	bl	1ac14 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   1ad3c:	2400      	movs	r4, #0
   1ad3e:	e00c      	b.n	1ad5a <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1ad40:	4b19      	ldr	r3, [pc, #100]	; (1ada8 <filter_wl_update+0x74>)
   1ad42:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   1ad46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1ad4a:	3302      	adds	r3, #2
   1ad4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1ad50:	4814      	ldr	r0, [pc, #80]	; (1ada4 <filter_wl_update+0x70>)
   1ad52:	f7ff ffd7 	bl	1ad04 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   1ad56:	3401      	adds	r4, #1
   1ad58:	b2e4      	uxtb	r4, r4
   1ad5a:	2c07      	cmp	r4, #7
   1ad5c:	d820      	bhi.n	1ada0 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   1ad5e:	4621      	mov	r1, r4
   1ad60:	4b11      	ldr	r3, [pc, #68]	; (1ada8 <filter_wl_update+0x74>)
   1ad62:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1ad66:	f013 0f01 	tst.w	r3, #1
   1ad6a:	d0f4      	beq.n	1ad56 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   1ad6c:	4b0e      	ldr	r3, [pc, #56]	; (1ada8 <filter_wl_update+0x74>)
   1ad6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ad72:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1ad74:	4a0d      	ldr	r2, [pc, #52]	; (1adac <filter_wl_update+0x78>)
   1ad76:	7812      	ldrb	r2, [r2, #0]
   1ad78:	2a00      	cmp	r2, #0
   1ad7a:	d0e1      	beq.n	1ad40 <filter_wl_update+0xc>
   1ad7c:	2b07      	cmp	r3, #7
   1ad7e:	d8df      	bhi.n	1ad40 <filter_wl_update+0xc>
   1ad80:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ad84:	00c2      	lsls	r2, r0, #3
   1ad86:	480a      	ldr	r0, [pc, #40]	; (1adb0 <filter_wl_update+0x7c>)
   1ad88:	5c82      	ldrb	r2, [r0, r2]
   1ad8a:	f012 0f04 	tst.w	r2, #4
   1ad8e:	d0d7      	beq.n	1ad40 <filter_wl_update+0xc>
		    rl[j].dev) {
   1ad90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ad94:	00da      	lsls	r2, r3, #3
   1ad96:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1ad98:	f013 0f10 	tst.w	r3, #16
   1ad9c:	d0db      	beq.n	1ad56 <filter_wl_update+0x22>
   1ad9e:	e7cf      	b.n	1ad40 <filter_wl_update+0xc>
}
   1ada0:	bd10      	pop	{r4, pc}
   1ada2:	bf00      	nop
   1ada4:	20001b18 	.word	0x20001b18
   1ada8:	20001ad8 	.word	0x20001ad8
   1adac:	20001aa0 	.word	0x20001aa0
   1adb0:	20001960 	.word	0x20001960

0001adb4 <filter_rl_update>:
{
   1adb4:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   1adb6:	4810      	ldr	r0, [pc, #64]	; (1adf8 <filter_rl_update+0x44>)
   1adb8:	f7ff ff2c 	bl	1ac14 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1adbc:	2400      	movs	r4, #0
   1adbe:	e001      	b.n	1adc4 <filter_rl_update+0x10>
   1adc0:	3401      	adds	r4, #1
   1adc2:	b2e4      	uxtb	r4, r4
   1adc4:	2c07      	cmp	r4, #7
   1adc6:	d815      	bhi.n	1adf4 <filter_rl_update+0x40>
		if (rl[i].taken) {
   1adc8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1adcc:	00d3      	lsls	r3, r2, #3
   1adce:	4a0b      	ldr	r2, [pc, #44]	; (1adfc <filter_rl_update+0x48>)
   1add0:	5cd3      	ldrb	r3, [r2, r3]
   1add2:	f013 0f01 	tst.w	r3, #1
   1add6:	d0f3      	beq.n	1adc0 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1add8:	4611      	mov	r1, r2
   1adda:	00a3      	lsls	r3, r4, #2
   1addc:	4423      	add	r3, r4
   1adde:	00da      	lsls	r2, r3, #3
   1ade0:	188b      	adds	r3, r1, r2
   1ade2:	5c8a      	ldrb	r2, [r1, r2]
   1ade4:	3301      	adds	r3, #1
   1ade6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1adea:	4621      	mov	r1, r4
   1adec:	4802      	ldr	r0, [pc, #8]	; (1adf8 <filter_rl_update+0x44>)
   1adee:	f7ff ff89 	bl	1ad04 <filter_insert>
   1adf2:	e7e5      	b.n	1adc0 <filter_rl_update+0xc>
}
   1adf4:	bd10      	pop	{r4, pc}
   1adf6:	bf00      	nop
   1adf8:	20001aa4 	.word	0x20001aa4
   1adfc:	20001960 	.word	0x20001960

0001ae00 <rl_access_check>:
{
   1ae00:	b508      	push	{r3, lr}
	if (check_ar) {
   1ae02:	b110      	cbz	r0, 1ae0a <rl_access_check+0xa>
		if (!rl_enable) {
   1ae04:	4b08      	ldr	r3, [pc, #32]	; (1ae28 <rl_access_check+0x28>)
   1ae06:	781b      	ldrb	r3, [r3, #0]
   1ae08:	b15b      	cbz	r3, 1ae22 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1ae0a:	f7fe fc27 	bl	1965c <radio_adv_is_enabled>
   1ae0e:	b108      	cbz	r0, 1ae14 <rl_access_check+0x14>
   1ae10:	2000      	movs	r0, #0
   1ae12:	bd08      	pop	{r3, pc}
   1ae14:	f7fe fc3a 	bl	1968c <radio_scan_is_enabled>
   1ae18:	b108      	cbz	r0, 1ae1e <rl_access_check+0x1e>
   1ae1a:	2000      	movs	r0, #0
}
   1ae1c:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1ae1e:	2001      	movs	r0, #1
   1ae20:	bd08      	pop	{r3, pc}
			return -1;
   1ae22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ae26:	bd08      	pop	{r3, pc}
   1ae28:	20001aa0 	.word	0x20001aa0

0001ae2c <rpa_refresh_start>:
{
   1ae2c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   1ae2e:	4b05      	ldr	r3, [pc, #20]	; (1ae44 <rpa_refresh_start+0x18>)
   1ae30:	781b      	ldrb	r3, [r3, #0]
   1ae32:	b903      	cbnz	r3, 1ae36 <rpa_refresh_start+0xa>
   1ae34:	bd08      	pop	{r3, pc}
   1ae36:	4b04      	ldr	r3, [pc, #16]	; (1ae48 <rpa_refresh_start+0x1c>)
   1ae38:	681a      	ldr	r2, [r3, #0]
   1ae3a:	4904      	ldr	r1, [pc, #16]	; (1ae4c <rpa_refresh_start+0x20>)
   1ae3c:	4804      	ldr	r0, [pc, #16]	; (1ae50 <rpa_refresh_start+0x24>)
   1ae3e:	f010 fcb3 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1ae42:	e7f7      	b.n	1ae34 <rpa_refresh_start+0x8>
   1ae44:	20001aa0 	.word	0x20001aa0
   1ae48:	20002bec 	.word	0x20002bec
   1ae4c:	20002ab8 	.word	0x20002ab8
   1ae50:	20002c00 	.word	0x20002c00

0001ae54 <rpa_refresh_stop>:
{
   1ae54:	b508      	push	{r3, lr}
	if (!rl_enable) {
   1ae56:	4b04      	ldr	r3, [pc, #16]	; (1ae68 <rpa_refresh_stop+0x14>)
   1ae58:	781b      	ldrb	r3, [r3, #0]
   1ae5a:	b903      	cbnz	r3, 1ae5e <rpa_refresh_stop+0xa>
   1ae5c:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   1ae5e:	4803      	ldr	r0, [pc, #12]	; (1ae6c <rpa_refresh_stop+0x18>)
   1ae60:	f010 fc48 	bl	2b6f4 <k_delayed_work_cancel>
   1ae64:	e7fa      	b.n	1ae5c <rpa_refresh_stop+0x8>
   1ae66:	bf00      	nop
   1ae68:	20001aa0 	.word	0x20001aa0
   1ae6c:	20002ab8 	.word	0x20002ab8

0001ae70 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1ae70:	2807      	cmp	r0, #7
   1ae72:	d816      	bhi.n	1aea2 <ctrl_lrpa_get+0x32>
   1ae74:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1ae78:	00d3      	lsls	r3, r2, #3
   1ae7a:	4a0d      	ldr	r2, [pc, #52]	; (1aeb0 <ctrl_lrpa_get+0x40>)
   1ae7c:	5cd3      	ldrb	r3, [r2, r3]
   1ae7e:	f013 0f08 	tst.w	r3, #8
   1ae82:	d010      	beq.n	1aea6 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   1ae84:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1ae88:	00d3      	lsls	r3, r2, #3
   1ae8a:	4a09      	ldr	r2, [pc, #36]	; (1aeb0 <ctrl_lrpa_get+0x40>)
   1ae8c:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1ae8e:	f013 0f02 	tst.w	r3, #2
   1ae92:	d00a      	beq.n	1aeaa <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   1ae94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ae98:	00c2      	lsls	r2, r0, #3
   1ae9a:	4b05      	ldr	r3, [pc, #20]	; (1aeb0 <ctrl_lrpa_get+0x40>)
   1ae9c:	4413      	add	r3, r2
   1ae9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1aea0:	4770      	bx	lr
		return NULL;
   1aea2:	2000      	movs	r0, #0
   1aea4:	4770      	bx	lr
   1aea6:	2000      	movs	r0, #0
   1aea8:	4770      	bx	lr
   1aeaa:	2000      	movs	r0, #0
}
   1aeac:	4770      	bx	lr
   1aeae:	bf00      	nop
   1aeb0:	20001960 	.word	0x20001960

0001aeb4 <ctrl_irks_get>:
	*count = peer_irk_count;
   1aeb4:	4b02      	ldr	r3, [pc, #8]	; (1aec0 <ctrl_irks_get+0xc>)
   1aeb6:	781b      	ldrb	r3, [r3, #0]
   1aeb8:	7003      	strb	r3, [r0, #0]
}
   1aeba:	4802      	ldr	r0, [pc, #8]	; (1aec4 <ctrl_irks_get+0x10>)
   1aebc:	4770      	bx	lr
   1aebe:	bf00      	nop
   1aec0:	200018d4 	.word	0x200018d4
   1aec4:	200018e0 	.word	0x200018e0

0001aec8 <ctrl_rl_idx>:
	if (whitelist) {
   1aec8:	b1c8      	cbz	r0, 1aefe <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1aeca:	2907      	cmp	r1, #7
   1aecc:	d80b      	bhi.n	1aee6 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   1aece:	4b17      	ldr	r3, [pc, #92]	; (1af2c <ctrl_rl_idx+0x64>)
   1aed0:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   1aed4:	f013 0f01 	tst.w	r3, #1
   1aed8:	d00b      	beq.n	1aef2 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   1aeda:	4b14      	ldr	r3, [pc, #80]	; (1af2c <ctrl_rl_idx+0x64>)
   1aedc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1aee0:	7849      	ldrb	r1, [r1, #1]
}
   1aee2:	4608      	mov	r0, r1
   1aee4:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1aee6:	4040      	eors	r0, r0
   1aee8:	f380 8811 	msr	BASEPRI, r0
   1aeec:	f04f 0004 	mov.w	r0, #4
   1aef0:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1aef2:	4040      	eors	r0, r0
   1aef4:	f380 8811 	msr	BASEPRI, r0
   1aef8:	f04f 0004 	mov.w	r0, #4
   1aefc:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1aefe:	2907      	cmp	r1, #7
   1af00:	d80d      	bhi.n	1af1e <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   1af02:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1af06:	00d3      	lsls	r3, r2, #3
   1af08:	4a09      	ldr	r2, [pc, #36]	; (1af30 <ctrl_rl_idx+0x68>)
   1af0a:	5cd3      	ldrb	r3, [r2, r3]
   1af0c:	f013 0f01 	tst.w	r3, #1
   1af10:	d1e7      	bne.n	1aee2 <ctrl_rl_idx+0x1a>
   1af12:	4040      	eors	r0, r0
   1af14:	f380 8811 	msr	BASEPRI, r0
   1af18:	f04f 0004 	mov.w	r0, #4
   1af1c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1af1e:	4040      	eors	r0, r0
   1af20:	f380 8811 	msr	BASEPRI, r0
   1af24:	f04f 0004 	mov.w	r0, #4
   1af28:	df02      	svc	2
   1af2a:	bf00      	nop
   1af2c:	20001ad8 	.word	0x20001ad8
   1af30:	20001960 	.word	0x20001960

0001af34 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1af34:	4b11      	ldr	r3, [pc, #68]	; (1af7c <ctrl_rl_irk_idx+0x48>)
   1af36:	781b      	ldrb	r3, [r3, #0]
   1af38:	4283      	cmp	r3, r0
   1af3a:	d90c      	bls.n	1af56 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   1af3c:	4b10      	ldr	r3, [pc, #64]	; (1af80 <ctrl_rl_irk_idx+0x4c>)
   1af3e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1af40:	2807      	cmp	r0, #7
   1af42:	d80e      	bhi.n	1af62 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   1af44:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1af48:	00d3      	lsls	r3, r2, #3
   1af4a:	4a0e      	ldr	r2, [pc, #56]	; (1af84 <ctrl_rl_irk_idx+0x50>)
   1af4c:	5cd3      	ldrb	r3, [r2, r3]
   1af4e:	f013 0f01 	tst.w	r3, #1
   1af52:	d00c      	beq.n	1af6e <ctrl_rl_irk_idx+0x3a>
}
   1af54:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1af56:	4040      	eors	r0, r0
   1af58:	f380 8811 	msr	BASEPRI, r0
   1af5c:	f04f 0004 	mov.w	r0, #4
   1af60:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1af62:	4040      	eors	r0, r0
   1af64:	f380 8811 	msr	BASEPRI, r0
   1af68:	f04f 0004 	mov.w	r0, #4
   1af6c:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1af6e:	4040      	eors	r0, r0
   1af70:	f380 8811 	msr	BASEPRI, r0
   1af74:	f04f 0004 	mov.w	r0, #4
   1af78:	df02      	svc	2
   1af7a:	bf00      	nop
   1af7c:	200018d4 	.word	0x200018d4
   1af80:	200018d8 	.word	0x200018d8
   1af84:	20001960 	.word	0x20001960

0001af88 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1af88:	2807      	cmp	r0, #7
   1af8a:	d815      	bhi.n	1afb8 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   1af8c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1af90:	00d3      	lsls	r3, r2, #3
   1af92:	4a0a      	ldr	r2, [pc, #40]	; (1afbc <ctrl_irk_whitelisted+0x34>)
   1af94:	5cd3      	ldrb	r3, [r2, r3]
   1af96:	f013 0f01 	tst.w	r3, #1
   1af9a:	d007      	beq.n	1afac <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   1af9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1afa0:	00c3      	lsls	r3, r0, #3
   1afa2:	4a06      	ldr	r2, [pc, #24]	; (1afbc <ctrl_irk_whitelisted+0x34>)
   1afa4:	5cd0      	ldrb	r0, [r2, r3]
   1afa6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1afaa:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1afac:	4040      	eors	r0, r0
   1afae:	f380 8811 	msr	BASEPRI, r0
   1afb2:	f04f 0004 	mov.w	r0, #4
   1afb6:	df02      	svc	2
		return false;
   1afb8:	2000      	movs	r0, #0
}
   1afba:	4770      	bx	lr
   1afbc:	20001960 	.word	0x20001960

0001afc0 <ctrl_filter_get>:
	if (whitelist) {
   1afc0:	b908      	cbnz	r0, 1afc6 <ctrl_filter_get+0x6>
	return &rl_filter;
   1afc2:	4802      	ldr	r0, [pc, #8]	; (1afcc <ctrl_filter_get+0xc>)
}
   1afc4:	4770      	bx	lr
		return &wl_filter;
   1afc6:	4802      	ldr	r0, [pc, #8]	; (1afd0 <ctrl_filter_get+0x10>)
   1afc8:	4770      	bx	lr
   1afca:	bf00      	nop
   1afcc:	20001aa4 	.word	0x20001aa4
   1afd0:	20001b18 	.word	0x20001b18

0001afd4 <ll_wl_size_get>:
}
   1afd4:	2008      	movs	r0, #8
   1afd6:	4770      	bx	lr

0001afd8 <ll_wl_clear>:
{
   1afd8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1afda:	f7fe fb47 	bl	1966c <radio_adv_filter_pol_get>
   1afde:	b110      	cbz	r0, 1afe6 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1afe0:	240c      	movs	r4, #12
}
   1afe2:	4620      	mov	r0, r4
   1afe4:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1afe6:	f7fe fb59 	bl	1969c <radio_scan_filter_pol_get>
   1afea:	f010 0401 	ands.w	r4, r0, #1
   1afee:	d001      	beq.n	1aff4 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aff0:	240c      	movs	r4, #12
   1aff2:	e7f6      	b.n	1afe2 <ll_wl_clear+0xa>
	wl_clear();
   1aff4:	f7ff fdfe 	bl	1abf4 <wl_clear>
	wl_anon = 0;
   1aff8:	2200      	movs	r2, #0
   1affa:	4b01      	ldr	r3, [pc, #4]	; (1b000 <ll_wl_clear+0x28>)
   1affc:	701a      	strb	r2, [r3, #0]
	return 0;
   1affe:	e7f0      	b.n	1afe2 <ll_wl_clear+0xa>
   1b000:	20002a48 	.word	0x20002a48

0001b004 <ll_wl_remove>:
{
   1b004:	b510      	push	{r4, lr}
   1b006:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1b008:	f7fe fb30 	bl	1966c <radio_adv_filter_pol_get>
   1b00c:	b108      	cbz	r0, 1b012 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b00e:	200c      	movs	r0, #12
   1b010:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1b012:	f7fe fb43 	bl	1969c <radio_scan_filter_pol_get>
   1b016:	f010 0001 	ands.w	r0, r0, #1
   1b01a:	d001      	beq.n	1b020 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b01c:	200c      	movs	r0, #12
}
   1b01e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   1b020:	7823      	ldrb	r3, [r4, #0]
   1b022:	2bff      	cmp	r3, #255	; 0xff
   1b024:	d003      	beq.n	1b02e <ll_wl_remove+0x2a>
	return wl_remove(addr);
   1b026:	4620      	mov	r0, r4
   1b028:	f7ff fe46 	bl	1acb8 <wl_remove>
   1b02c:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   1b02e:	2200      	movs	r2, #0
   1b030:	4b01      	ldr	r3, [pc, #4]	; (1b038 <ll_wl_remove+0x34>)
   1b032:	701a      	strb	r2, [r3, #0]
		return 0;
   1b034:	bd10      	pop	{r4, pc}
   1b036:	bf00      	nop
   1b038:	20002a48 	.word	0x20002a48

0001b03c <ll_filters_adv_update>:
{
   1b03c:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1b03e:	b918      	cbnz	r0, 1b048 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   1b040:	4b09      	ldr	r3, [pc, #36]	; (1b068 <ll_filters_adv_update+0x2c>)
   1b042:	781b      	ldrb	r3, [r3, #0]
   1b044:	b943      	cbnz	r3, 1b058 <ll_filters_adv_update+0x1c>
   1b046:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1b048:	f7fe fb28 	bl	1969c <radio_scan_filter_pol_get>
   1b04c:	f010 0f01 	tst.w	r0, #1
   1b050:	d1f6      	bne.n	1b040 <ll_filters_adv_update+0x4>
		filter_wl_update();
   1b052:	f7ff fe6f 	bl	1ad34 <filter_wl_update>
   1b056:	e7f3      	b.n	1b040 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   1b058:	f7fe fb18 	bl	1968c <radio_scan_is_enabled>
   1b05c:	2800      	cmp	r0, #0
   1b05e:	d1f2      	bne.n	1b046 <ll_filters_adv_update+0xa>
		filter_rl_update();
   1b060:	f7ff fea8 	bl	1adb4 <filter_rl_update>
}
   1b064:	e7ef      	b.n	1b046 <ll_filters_adv_update+0xa>
   1b066:	bf00      	nop
   1b068:	20001aa0 	.word	0x20001aa0

0001b06c <ll_filters_scan_update>:
{
   1b06c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1b06e:	f010 0f01 	tst.w	r0, #1
   1b072:	d103      	bne.n	1b07c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   1b074:	4b08      	ldr	r3, [pc, #32]	; (1b098 <ll_filters_scan_update+0x2c>)
   1b076:	781b      	ldrb	r3, [r3, #0]
   1b078:	b93b      	cbnz	r3, 1b08a <ll_filters_scan_update+0x1e>
   1b07a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1b07c:	f7fe faf6 	bl	1966c <radio_adv_filter_pol_get>
   1b080:	2800      	cmp	r0, #0
   1b082:	d1f7      	bne.n	1b074 <ll_filters_scan_update+0x8>
		filter_wl_update();
   1b084:	f7ff fe56 	bl	1ad34 <filter_wl_update>
   1b088:	e7f4      	b.n	1b074 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   1b08a:	f7fe fae7 	bl	1965c <radio_adv_is_enabled>
   1b08e:	2800      	cmp	r0, #0
   1b090:	d1f3      	bne.n	1b07a <ll_filters_scan_update+0xe>
		filter_rl_update();
   1b092:	f7ff fe8f 	bl	1adb4 <filter_rl_update>
}
   1b096:	e7f0      	b.n	1b07a <ll_filters_scan_update+0xe>
   1b098:	20001aa0 	.word	0x20001aa0

0001b09c <ll_rl_find>:
{
   1b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0a0:	4607      	mov	r7, r0
   1b0a2:	4688      	mov	r8, r1
	if (free) {
   1b0a4:	4616      	mov	r6, r2
   1b0a6:	b10a      	cbz	r2, 1b0ac <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   1b0a8:	23ff      	movs	r3, #255	; 0xff
   1b0aa:	7013      	strb	r3, [r2, #0]
{
   1b0ac:	2400      	movs	r4, #0
   1b0ae:	e00e      	b.n	1b0ce <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b0b0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b0b4:	00d3      	lsls	r3, r2, #3
   1b0b6:	481a      	ldr	r0, [pc, #104]	; (1b120 <ll_rl_find+0x84>)
   1b0b8:	4418      	add	r0, r3
   1b0ba:	2206      	movs	r2, #6
   1b0bc:	4641      	mov	r1, r8
   1b0be:	3001      	adds	r0, #1
   1b0c0:	f010 ff48 	bl	2bf54 <memcmp>
   1b0c4:	b9c8      	cbnz	r0, 1b0fa <ll_rl_find+0x5e>
   1b0c6:	e027      	b.n	1b118 <ll_rl_find+0x7c>
			*free = i;
   1b0c8:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0ca:	3401      	adds	r4, #1
   1b0cc:	b2e4      	uxtb	r4, r4
   1b0ce:	2c07      	cmp	r4, #7
   1b0d0:	d821      	bhi.n	1b116 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b0d2:	4625      	mov	r5, r4
   1b0d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b0d8:	00d3      	lsls	r3, r2, #3
   1b0da:	4a11      	ldr	r2, [pc, #68]	; (1b120 <ll_rl_find+0x84>)
   1b0dc:	5cd3      	ldrb	r3, [r2, r3]
   1b0de:	f013 0f01 	tst.w	r3, #1
   1b0e2:	d00a      	beq.n	1b0fa <ll_rl_find+0x5e>
   1b0e4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b0e8:	00d3      	lsls	r3, r2, #3
   1b0ea:	4a0d      	ldr	r2, [pc, #52]	; (1b120 <ll_rl_find+0x84>)
   1b0ec:	5cd3      	ldrb	r3, [r2, r3]
   1b0ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b0f2:	f007 0201 	and.w	r2, r7, #1
   1b0f6:	4293      	cmp	r3, r2
   1b0f8:	d0da      	beq.n	1b0b0 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1b0fa:	2e00      	cmp	r6, #0
   1b0fc:	d0e5      	beq.n	1b0ca <ll_rl_find+0x2e>
   1b0fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b102:	00eb      	lsls	r3, r5, #3
   1b104:	4a06      	ldr	r2, [pc, #24]	; (1b120 <ll_rl_find+0x84>)
   1b106:	5cd3      	ldrb	r3, [r2, r3]
   1b108:	f013 0f01 	tst.w	r3, #1
   1b10c:	d1dd      	bne.n	1b0ca <ll_rl_find+0x2e>
   1b10e:	7833      	ldrb	r3, [r6, #0]
   1b110:	2bff      	cmp	r3, #255	; 0xff
   1b112:	d1da      	bne.n	1b0ca <ll_rl_find+0x2e>
   1b114:	e7d8      	b.n	1b0c8 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   1b116:	24ff      	movs	r4, #255	; 0xff
}
   1b118:	4620      	mov	r0, r4
   1b11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b11e:	bf00      	nop
   1b120:	20001960 	.word	0x20001960

0001b124 <wl_add>:
{
   1b124:	b570      	push	{r4, r5, r6, lr}
   1b126:	b082      	sub	sp, #8
   1b128:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1b12a:	4604      	mov	r4, r0
   1b12c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b130:	f10d 0207 	add.w	r2, sp, #7
   1b134:	4621      	mov	r1, r4
   1b136:	f7ff fd87 	bl	1ac48 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1b13a:	2807      	cmp	r0, #7
   1b13c:	d802      	bhi.n	1b144 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   1b13e:	2012      	movs	r0, #18
}
   1b140:	b002      	add	sp, #8
   1b142:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   1b144:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1b148:	2e07      	cmp	r6, #7
   1b14a:	d901      	bls.n	1b150 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1b14c:	2007      	movs	r0, #7
   1b14e:	e7f7      	b.n	1b140 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1b150:	4629      	mov	r1, r5
   1b152:	f811 2b01 	ldrb.w	r2, [r1], #1
   1b156:	4817      	ldr	r0, [pc, #92]	; (1b1b4 <wl_add+0x90>)
   1b158:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   1b15c:	f362 0341 	bfi	r3, r2, #1, #1
   1b160:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1b164:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   1b168:	2206      	movs	r2, #6
   1b16a:	3002      	adds	r0, #2
   1b16c:	f7e5 f8a8 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b170:	2200      	movs	r2, #0
   1b172:	4621      	mov	r1, r4
   1b174:	7828      	ldrb	r0, [r5, #0]
   1b176:	f7ff ff91 	bl	1b09c <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1b17a:	2807      	cmp	r0, #7
   1b17c:	d814      	bhi.n	1b1a8 <wl_add+0x84>
		wl[i].rl_idx = j;
   1b17e:	4b0d      	ldr	r3, [pc, #52]	; (1b1b4 <wl_add+0x90>)
   1b180:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1b184:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1b186:	490c      	ldr	r1, [pc, #48]	; (1b1b8 <wl_add+0x94>)
   1b188:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b18c:	00c3      	lsls	r3, r0, #3
   1b18e:	5cca      	ldrb	r2, [r1, r3]
   1b190:	f042 0220 	orr.w	r2, r2, #32
   1b194:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   1b196:	4a07      	ldr	r2, [pc, #28]	; (1b1b4 <wl_add+0x90>)
   1b198:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   1b19c:	f043 0301 	orr.w	r3, r3, #1
   1b1a0:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   1b1a4:	2000      	movs	r0, #0
   1b1a6:	e7cb      	b.n	1b140 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1b1a8:	4b02      	ldr	r3, [pc, #8]	; (1b1b4 <wl_add+0x90>)
   1b1aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1b1ae:	22ff      	movs	r2, #255	; 0xff
   1b1b0:	705a      	strb	r2, [r3, #1]
   1b1b2:	e7f0      	b.n	1b196 <wl_add+0x72>
   1b1b4:	20001ad8 	.word	0x20001ad8
   1b1b8:	20001960 	.word	0x20001960

0001b1bc <ll_wl_add>:
{
   1b1bc:	b510      	push	{r4, lr}
   1b1be:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1b1c0:	f7fe fa54 	bl	1966c <radio_adv_filter_pol_get>
   1b1c4:	b108      	cbz	r0, 1b1ca <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b1c6:	200c      	movs	r0, #12
   1b1c8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1b1ca:	f7fe fa67 	bl	1969c <radio_scan_filter_pol_get>
   1b1ce:	f010 0001 	ands.w	r0, r0, #1
   1b1d2:	d001      	beq.n	1b1d8 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b1d4:	200c      	movs	r0, #12
}
   1b1d6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   1b1d8:	7823      	ldrb	r3, [r4, #0]
   1b1da:	2bff      	cmp	r3, #255	; 0xff
   1b1dc:	d003      	beq.n	1b1e6 <ll_wl_add+0x2a>
	return wl_add(addr);
   1b1de:	4620      	mov	r0, r4
   1b1e0:	f7ff ffa0 	bl	1b124 <wl_add>
   1b1e4:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   1b1e6:	2201      	movs	r2, #1
   1b1e8:	4b01      	ldr	r3, [pc, #4]	; (1b1f0 <ll_wl_add+0x34>)
   1b1ea:	701a      	strb	r2, [r3, #0]
		return 0;
   1b1ec:	bd10      	pop	{r4, pc}
   1b1ee:	bf00      	nop
   1b1f0:	20002a48 	.word	0x20002a48

0001b1f4 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1b1f4:	4b17      	ldr	r3, [pc, #92]	; (1b254 <ctrl_rl_idx_allowed+0x60>)
   1b1f6:	781b      	ldrb	r3, [r3, #0]
   1b1f8:	b32b      	cbz	r3, 1b246 <ctrl_rl_idx_allowed+0x52>
   1b1fa:	2907      	cmp	r1, #7
   1b1fc:	d825      	bhi.n	1b24a <ctrl_rl_idx_allowed+0x56>
   1b1fe:	bb30      	cbnz	r0, 1b24e <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   1b200:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1b204:	00d3      	lsls	r3, r2, #3
   1b206:	4a14      	ldr	r2, [pc, #80]	; (1b258 <ctrl_rl_idx_allowed+0x64>)
   1b208:	5cd3      	ldrb	r3, [r2, r3]
   1b20a:	f013 0f01 	tst.w	r3, #1
   1b20e:	d010      	beq.n	1b232 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1b210:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1b214:	00d3      	lsls	r3, r2, #3
   1b216:	4a10      	ldr	r2, [pc, #64]	; (1b258 <ctrl_rl_idx_allowed+0x64>)
   1b218:	5cd3      	ldrb	r3, [r2, r3]
   1b21a:	f013 0f04 	tst.w	r3, #4
   1b21e:	d00e      	beq.n	1b23e <ctrl_rl_idx_allowed+0x4a>
   1b220:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1b224:	00cb      	lsls	r3, r1, #3
   1b226:	5cd3      	ldrb	r3, [r2, r3]
   1b228:	f013 0f10 	tst.w	r3, #16
   1b22c:	d009      	beq.n	1b242 <ctrl_rl_idx_allowed+0x4e>
   1b22e:	2001      	movs	r0, #1
   1b230:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1b232:	4040      	eors	r0, r0
   1b234:	f380 8811 	msr	BASEPRI, r0
   1b238:	f04f 0004 	mov.w	r0, #4
   1b23c:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1b23e:	2001      	movs	r0, #1
   1b240:	4770      	bx	lr
   1b242:	2000      	movs	r0, #0
   1b244:	4770      	bx	lr
		return true;
   1b246:	2001      	movs	r0, #1
   1b248:	4770      	bx	lr
   1b24a:	2001      	movs	r0, #1
   1b24c:	4770      	bx	lr
   1b24e:	2001      	movs	r0, #1
}
   1b250:	4770      	bx	lr
   1b252:	bf00      	nop
   1b254:	20001aa0 	.word	0x20001aa0
   1b258:	20001960 	.word	0x20001960

0001b25c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b25c:	2807      	cmp	r0, #7
   1b25e:	d81a      	bhi.n	1b296 <ll_rl_id_addr_get+0x3a>
{
   1b260:	b570      	push	{r4, r5, r6, lr}
   1b262:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   1b264:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   1b268:	00ec      	lsls	r4, r5, #3
   1b26a:	4811      	ldr	r0, [pc, #68]	; (1b2b0 <ll_rl_id_addr_get+0x54>)
   1b26c:	5d00      	ldrb	r0, [r0, r4]
   1b26e:	f010 0f01 	tst.w	r0, #1
   1b272:	d016      	beq.n	1b2a2 <ll_rl_id_addr_get+0x46>
   1b274:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b276:	4d0e      	ldr	r5, [pc, #56]	; (1b2b0 <ll_rl_id_addr_get+0x54>)
   1b278:	009c      	lsls	r4, r3, #2
   1b27a:	18e6      	adds	r6, r4, r3
   1b27c:	00f2      	lsls	r2, r6, #3
   1b27e:	4616      	mov	r6, r2
   1b280:	5caa      	ldrb	r2, [r5, r2]
   1b282:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1b286:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b288:	4631      	mov	r1, r6
   1b28a:	4429      	add	r1, r5
   1b28c:	2206      	movs	r2, #6
   1b28e:	3101      	adds	r1, #1
   1b290:	f7e5 f816 	bl	2c0 <memcpy>
   1b294:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b296:	4040      	eors	r0, r0
   1b298:	f380 8811 	msr	BASEPRI, r0
   1b29c:	f04f 0004 	mov.w	r0, #4
   1b2a0:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   1b2a2:	4040      	eors	r0, r0
   1b2a4:	f380 8811 	msr	BASEPRI, r0
   1b2a8:	f04f 0004 	mov.w	r0, #4
   1b2ac:	df02      	svc	2
   1b2ae:	bf00      	nop
   1b2b0:	20001960 	.word	0x20001960

0001b2b4 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1b2b4:	4b29      	ldr	r3, [pc, #164]	; (1b35c <ctrl_rl_addr_allowed+0xa8>)
   1b2b6:	781b      	ldrb	r3, [r3, #0]
   1b2b8:	2b00      	cmp	r3, #0
   1b2ba:	d04a      	beq.n	1b352 <ctrl_rl_addr_allowed+0x9e>
   1b2bc:	7813      	ldrb	r3, [r2, #0]
   1b2be:	2bff      	cmp	r3, #255	; 0xff
   1b2c0:	d001      	beq.n	1b2c6 <ctrl_rl_addr_allowed+0x12>
		return true;
   1b2c2:	2001      	movs	r0, #1
   1b2c4:	4770      	bx	lr
   1b2c6:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b2c8:	2b07      	cmp	r3, #7
   1b2ca:	d844      	bhi.n	1b356 <ctrl_rl_addr_allowed+0xa2>
{
   1b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2ce:	e005      	b.n	1b2dc <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   1b2d0:	2c06      	cmp	r4, #6
   1b2d2:	d026      	beq.n	1b322 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b2d4:	3301      	adds	r3, #1
   1b2d6:	b2db      	uxtb	r3, r3
   1b2d8:	2b07      	cmp	r3, #7
   1b2da:	d838      	bhi.n	1b34e <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1b2dc:	461e      	mov	r6, r3
   1b2de:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b2e2:	00ec      	lsls	r4, r5, #3
   1b2e4:	4d1e      	ldr	r5, [pc, #120]	; (1b360 <ctrl_rl_addr_allowed+0xac>)
   1b2e6:	5d2c      	ldrb	r4, [r5, r4]
   1b2e8:	f014 0f01 	tst.w	r4, #1
   1b2ec:	d0f2      	beq.n	1b2d4 <ctrl_rl_addr_allowed+0x20>
   1b2ee:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b2f2:	00ec      	lsls	r4, r5, #3
   1b2f4:	4d1a      	ldr	r5, [pc, #104]	; (1b360 <ctrl_rl_addr_allowed+0xac>)
   1b2f6:	5d2c      	ldrb	r4, [r5, r4]
   1b2f8:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1b2fc:	4284      	cmp	r4, r0
   1b2fe:	d1e9      	bne.n	1b2d4 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   1b300:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b304:	00ec      	lsls	r4, r5, #3
   1b306:	4d16      	ldr	r5, [pc, #88]	; (1b360 <ctrl_rl_addr_allowed+0xac>)
   1b308:	4425      	add	r5, r4
   1b30a:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   1b30c:	2400      	movs	r4, #0
   1b30e:	2c05      	cmp	r4, #5
   1b310:	d8de      	bhi.n	1b2d0 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   1b312:	f815 e004 	ldrb.w	lr, [r5, r4]
   1b316:	5d0f      	ldrb	r7, [r1, r4]
   1b318:	45be      	cmp	lr, r7
   1b31a:	d1d9      	bne.n	1b2d0 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   1b31c:	3401      	adds	r4, #1
   1b31e:	b2e4      	uxtb	r4, r4
   1b320:	e7f5      	b.n	1b30e <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   1b322:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1b324:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   1b328:	00d3      	lsls	r3, r2, #3
   1b32a:	4a0d      	ldr	r2, [pc, #52]	; (1b360 <ctrl_rl_addr_allowed+0xac>)
   1b32c:	5cd3      	ldrb	r3, [r2, r3]
   1b32e:	f013 0f04 	tst.w	r3, #4
   1b332:	d00a      	beq.n	1b34a <ctrl_rl_addr_allowed+0x96>
   1b334:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1b338:	00f3      	lsls	r3, r6, #3
   1b33a:	5cd3      	ldrb	r3, [r2, r3]
   1b33c:	f013 0f10 	tst.w	r3, #16
   1b340:	d101      	bne.n	1b346 <ctrl_rl_addr_allowed+0x92>
   1b342:	2000      	movs	r0, #0
   1b344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b346:	2001      	movs	r0, #1
   1b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b34a:	2001      	movs	r0, #1
   1b34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   1b34e:	2001      	movs	r0, #1
   1b350:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   1b352:	2001      	movs	r0, #1
   1b354:	4770      	bx	lr
	return true;
   1b356:	2001      	movs	r0, #1
}
   1b358:	4770      	bx	lr
   1b35a:	bf00      	nop
   1b35c:	20001aa0 	.word	0x20001aa0
   1b360:	20001960 	.word	0x20001960

0001b364 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1b364:	4b13      	ldr	r3, [pc, #76]	; (1b3b4 <ctrl_rl_addr_resolve+0x50>)
   1b366:	781b      	ldrb	r3, [r3, #0]
   1b368:	b1db      	cbz	r3, 1b3a2 <ctrl_rl_addr_resolve+0x3e>
   1b36a:	2a07      	cmp	r2, #7
   1b36c:	d81b      	bhi.n	1b3a6 <ctrl_rl_addr_resolve+0x42>
{
   1b36e:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1b370:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1b374:	00e3      	lsls	r3, r4, #3
   1b376:	4c10      	ldr	r4, [pc, #64]	; (1b3b8 <ctrl_rl_addr_resolve+0x54>)
   1b378:	5ce3      	ldrb	r3, [r4, r3]
   1b37a:	f013 0f08 	tst.w	r3, #8
   1b37e:	d014      	beq.n	1b3aa <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   1b380:	b1a8      	cbz	r0, 1b3ae <ctrl_rl_addr_resolve+0x4a>
   1b382:	794b      	ldrb	r3, [r1, #5]
   1b384:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b388:	2b40      	cmp	r3, #64	; 0x40
   1b38a:	d001      	beq.n	1b390 <ctrl_rl_addr_resolve+0x2c>
	return false;
   1b38c:	2000      	movs	r0, #0
}
   1b38e:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1b390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1b394:	00d3      	lsls	r3, r2, #3
   1b396:	4620      	mov	r0, r4
   1b398:	4418      	add	r0, r3
   1b39a:	3007      	adds	r0, #7
   1b39c:	f7ea fbc5 	bl	5b2a <bt_rpa_irk_matches>
   1b3a0:	bd10      	pop	{r4, pc}
		return false;
   1b3a2:	2000      	movs	r0, #0
   1b3a4:	4770      	bx	lr
   1b3a6:	2000      	movs	r0, #0
   1b3a8:	4770      	bx	lr
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	bd10      	pop	{r4, pc}
	return false;
   1b3ae:	2000      	movs	r0, #0
   1b3b0:	bd10      	pop	{r4, pc}
   1b3b2:	bf00      	nop
   1b3b4:	20001aa0 	.word	0x20001aa0
   1b3b8:	20001960 	.word	0x20001960

0001b3bc <ctrl_rl_enabled>:
	return rl_enable;
   1b3bc:	4b02      	ldr	r3, [pc, #8]	; (1b3c8 <ctrl_rl_enabled+0xc>)
   1b3be:	7818      	ldrb	r0, [r3, #0]
}
   1b3c0:	3000      	adds	r0, #0
   1b3c2:	bf18      	it	ne
   1b3c4:	2001      	movne	r0, #1
   1b3c6:	4770      	bx	lr
   1b3c8:	20001aa0 	.word	0x20001aa0

0001b3cc <ll_rl_pdu_adv_update>:
{
   1b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3ce:	4605      	mov	r5, r0
   1b3d0:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   1b3d2:	780b      	ldrb	r3, [r1, #0]
   1b3d4:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   1b3d8:	2b04      	cmp	r3, #4
   1b3da:	d024      	beq.n	1b426 <ll_rl_pdu_adv_update+0x5a>
   1b3dc:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1b3de:	f000 fbc5 	bl	1bb6c <ll_adv_set_get>
   1b3e2:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1b3e4:	2d07      	cmp	r5, #7
   1b3e6:	d826      	bhi.n	1b436 <ll_rl_pdu_adv_update+0x6a>
   1b3e8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b3ec:	00d3      	lsls	r3, r2, #3
   1b3ee:	4a30      	ldr	r2, [pc, #192]	; (1b4b0 <ll_rl_pdu_adv_update+0xe4>)
   1b3f0:	5cd3      	ldrb	r3, [r2, r3]
   1b3f2:	f013 0f08 	tst.w	r3, #8
   1b3f6:	d01e      	beq.n	1b436 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   1b3f8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b3fc:	00d3      	lsls	r3, r2, #3
   1b3fe:	4a2c      	ldr	r2, [pc, #176]	; (1b4b0 <ll_rl_pdu_adv_update+0xe4>)
   1b400:	5cd3      	ldrb	r3, [r2, r3]
   1b402:	f013 0f02 	tst.w	r3, #2
   1b406:	d010      	beq.n	1b42a <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   1b408:	7823      	ldrb	r3, [r4, #0]
   1b40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b40e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1b410:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1b414:	00da      	lsls	r2, r3, #3
   1b416:	4b26      	ldr	r3, [pc, #152]	; (1b4b0 <ll_rl_pdu_adv_update+0xe4>)
   1b418:	4413      	add	r3, r2
   1b41a:	2206      	movs	r2, #6
   1b41c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1b41e:	4638      	mov	r0, r7
   1b420:	f7e4 ff4e 	bl	2c0 <memcpy>
   1b424:	e014      	b.n	1b450 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   1b426:	1c8f      	adds	r7, r1, #2
   1b428:	e7d9      	b.n	1b3de <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   1b42a:	4040      	eors	r0, r0
   1b42c:	f380 8811 	msr	BASEPRI, r0
   1b430:	f04f 0004 	mov.w	r0, #4
   1b434:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1b436:	7833      	ldrb	r3, [r6, #0]
   1b438:	f3c3 1340 	ubfx	r3, r3, #5, #1
   1b43c:	7822      	ldrb	r2, [r4, #0]
   1b43e:	f363 1286 	bfi	r2, r3, #6, #1
   1b442:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1b444:	7830      	ldrb	r0, [r6, #0]
   1b446:	4639      	mov	r1, r7
   1b448:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1b44c:	f7ff fba0 	bl	1ab90 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b450:	7823      	ldrb	r3, [r4, #0]
   1b452:	f003 030f 	and.w	r3, r3, #15
   1b456:	2b01      	cmp	r3, #1
   1b458:	d000      	beq.n	1b45c <ll_rl_pdu_adv_update+0x90>
   1b45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1b45c:	2d07      	cmp	r5, #7
   1b45e:	d807      	bhi.n	1b470 <ll_rl_pdu_adv_update+0xa4>
   1b460:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b464:	00d3      	lsls	r3, r2, #3
   1b466:	4a12      	ldr	r2, [pc, #72]	; (1b4b0 <ll_rl_pdu_adv_update+0xe4>)
   1b468:	5cd3      	ldrb	r3, [r2, r3]
   1b46a:	f013 0f04 	tst.w	r3, #4
   1b46e:	d10d      	bne.n	1b48c <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   1b470:	4631      	mov	r1, r6
   1b472:	f811 3b02 	ldrb.w	r3, [r1], #2
   1b476:	09db      	lsrs	r3, r3, #7
   1b478:	7822      	ldrb	r2, [r4, #0]
   1b47a:	f363 12c7 	bfi	r2, r3, #7, #1
   1b47e:	4620      	mov	r0, r4
   1b480:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1b484:	2206      	movs	r2, #6
   1b486:	f7e4 ff1b 	bl	2c0 <memcpy>
}
   1b48a:	e7e6      	b.n	1b45a <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   1b48c:	7823      	ldrb	r3, [r4, #0]
   1b48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b492:	4620      	mov	r0, r4
   1b494:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   1b498:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b49c:	00eb      	lsls	r3, r5, #3
   1b49e:	3318      	adds	r3, #24
   1b4a0:	4611      	mov	r1, r2
   1b4a2:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1b4a4:	2206      	movs	r2, #6
   1b4a6:	4411      	add	r1, r2
   1b4a8:	f7e4 ff0a 	bl	2c0 <memcpy>
   1b4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4ae:	bf00      	nop
   1b4b0:	20001960 	.word	0x20001960

0001b4b4 <rpa_adv_refresh>:
{
   1b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   1b4b8:	f000 fb58 	bl	1bb6c <ll_adv_set_get>
   1b4bc:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1b4be:	7803      	ldrb	r3, [r0, #0]
   1b4c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1b4c4:	2b40      	cmp	r3, #64	; 0x40
   1b4c6:	d003      	beq.n	1b4d0 <rpa_adv_refresh+0x1c>
   1b4c8:	2b60      	cmp	r3, #96	; 0x60
   1b4ca:	d001      	beq.n	1b4d0 <rpa_adv_refresh+0x1c>
   1b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1b4d0:	f7fe f8bc 	bl	1964c <radio_adv_data_get>
   1b4d4:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1b4d6:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1b4da:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b4de:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1b4e2:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1b4e4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1b4e8:	429d      	cmp	r5, r3
   1b4ea:	d02d      	beq.n	1b548 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1b4ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1b4f0:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1b4f4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1b4f8:	5ca0      	ldrb	r0, [r4, r2]
   1b4fa:	5ce1      	ldrb	r1, [r4, r3]
   1b4fc:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   1b500:	f36f 1104 	bfc	r1, #4, #1
   1b504:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   1b506:	5ca2      	ldrb	r2, [r4, r2]
   1b508:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1b50c:	b2c9      	uxtb	r1, r1
   1b50e:	f362 1145 	bfi	r1, r2, #5, #1
   1b512:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1b514:	4631      	mov	r1, r6
   1b516:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b51a:	2200      	movs	r2, #0
   1b51c:	09c0      	lsrs	r0, r0, #7
   1b51e:	f7ff fdbd 	bl	1b09c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1b522:	2807      	cmp	r0, #7
   1b524:	d816      	bhi.n	1b554 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   1b526:	4641      	mov	r1, r8
   1b528:	f7ff ff50 	bl	1b3cc <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1b52c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   1b52e:	3a06      	subs	r2, #6
   1b530:	f107 0108 	add.w	r1, r7, #8
   1b534:	f108 0008 	add.w	r0, r8, #8
   1b538:	f7e4 fec2 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   1b53c:	787b      	ldrb	r3, [r7, #1]
   1b53e:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1b542:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1b546:	e7c1      	b.n	1b4cc <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   1b548:	3501      	adds	r5, #1
   1b54a:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1b54c:	2d02      	cmp	r5, #2
   1b54e:	d1cd      	bne.n	1b4ec <rpa_adv_refresh+0x38>
			last = 0;
   1b550:	2500      	movs	r5, #0
   1b552:	e7cb      	b.n	1b4ec <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1b554:	4040      	eors	r0, r0
   1b556:	f380 8811 	msr	BASEPRI, r0
   1b55a:	f04f 0004 	mov.w	r0, #4
   1b55e:	df02      	svc	2

0001b560 <ll_rl_rpa_update>:
{
   1b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b564:	b085      	sub	sp, #20
   1b566:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1b568:	f00f fb4a 	bl	2ac00 <_impl_k_uptime_get>
   1b56c:	4606      	mov	r6, r0
   1b56e:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   1b570:	f1b9 0f00 	cmp.w	r9, #0
   1b574:	d115      	bne.n	1b5a2 <ll_rl_rpa_update+0x42>
   1b576:	4b57      	ldr	r3, [pc, #348]	; (1b6d4 <ll_rl_rpa_update+0x174>)
   1b578:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b57c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b580:	bf08      	it	eq
   1b582:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1b586:	d010      	beq.n	1b5aa <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1b588:	1a30      	subs	r0, r6, r0
   1b58a:	eb67 0101 	sbc.w	r1, r7, r1
   1b58e:	4b52      	ldr	r3, [pc, #328]	; (1b6d8 <ll_rl_rpa_update+0x178>)
   1b590:	681a      	ldr	r2, [r3, #0]
   1b592:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1b594:	4290      	cmp	r0, r2
   1b596:	eb71 0303 	sbcs.w	r3, r1, r3
   1b59a:	db09      	blt.n	1b5b0 <ll_rl_rpa_update+0x50>
   1b59c:	f04f 0801 	mov.w	r8, #1
   1b5a0:	e001      	b.n	1b5a6 <ll_rl_rpa_update+0x46>
   1b5a2:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b5a6:	2400      	movs	r4, #0
   1b5a8:	e02a      	b.n	1b600 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   1b5aa:	f04f 0801 	mov.w	r8, #1
   1b5ae:	e7fa      	b.n	1b5a6 <ll_rl_rpa_update+0x46>
   1b5b0:	f04f 0800 	mov.w	r8, #0
   1b5b4:	e7f7      	b.n	1b5a6 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1b5b6:	7818      	ldrb	r0, [r3, #0]
   1b5b8:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1b5ba:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1b5bc:	3b01      	subs	r3, #1
   1b5be:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1b5c0:	2a00      	cmp	r2, #0
   1b5c2:	d1f8      	bne.n	1b5b6 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1b5c4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b5c8:	00d3      	lsls	r3, r2, #3
   1b5ca:	3318      	adds	r3, #24
   1b5cc:	4943      	ldr	r1, [pc, #268]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b5ce:	4419      	add	r1, r3
   1b5d0:	3106      	adds	r1, #6
   1b5d2:	4668      	mov	r0, sp
   1b5d4:	f7ea fabd 	bl	5b52 <bt_rpa_create>
				LL_ASSERT(!err);
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d13c      	bne.n	1b656 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1b5dc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b5e0:	00d3      	lsls	r3, r2, #3
   1b5e2:	4a3e      	ldr	r2, [pc, #248]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b5e4:	5cd3      	ldrb	r3, [r2, r3]
   1b5e6:	f013 0f08 	tst.w	r3, #8
   1b5ea:	d13a      	bne.n	1b662 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1b5ec:	493b      	ldr	r1, [pc, #236]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b5ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b5f2:	00eb      	lsls	r3, r5, #3
   1b5f4:	5cca      	ldrb	r2, [r1, r3]
   1b5f6:	f042 0202 	orr.w	r2, r2, #2
   1b5fa:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b5fc:	3401      	adds	r4, #1
   1b5fe:	b2e4      	uxtb	r4, r4
   1b600:	2c07      	cmp	r4, #7
   1b602:	d854      	bhi.n	1b6ae <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1b604:	4625      	mov	r5, r4
   1b606:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b60a:	00d3      	lsls	r3, r2, #3
   1b60c:	4a33      	ldr	r2, [pc, #204]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b60e:	5cd3      	ldrb	r3, [r2, r3]
   1b610:	f013 0f01 	tst.w	r3, #1
   1b614:	d0f2      	beq.n	1b5fc <ll_rl_rpa_update+0x9c>
   1b616:	f1b8 0f00 	cmp.w	r8, #0
   1b61a:	d107      	bne.n	1b62c <ll_rl_rpa_update+0xcc>
   1b61c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b620:	00d3      	lsls	r3, r2, #3
   1b622:	4a2e      	ldr	r2, [pc, #184]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b624:	5cd3      	ldrb	r3, [r2, r3]
   1b626:	f013 0f02 	tst.w	r3, #2
   1b62a:	d1e7      	bne.n	1b5fc <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   1b62c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b630:	00d3      	lsls	r3, r2, #3
   1b632:	4a2a      	ldr	r2, [pc, #168]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b634:	5cd3      	ldrb	r3, [r2, r3]
   1b636:	f013 0f04 	tst.w	r3, #4
   1b63a:	d0cf      	beq.n	1b5dc <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1b63c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1b640:	00da      	lsls	r2, r3, #3
   1b642:	4b26      	ldr	r3, [pc, #152]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b644:	4413      	add	r3, r2
   1b646:	7dda      	ldrb	r2, [r3, #23]
   1b648:	4b25      	ldr	r3, [pc, #148]	; (1b6e0 <ll_rl_rpa_update+0x180>)
   1b64a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   1b64e:	330f      	adds	r3, #15
   1b650:	2210      	movs	r2, #16
   1b652:	4669      	mov	r1, sp
   1b654:	e7b4      	b.n	1b5c0 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1b656:	4040      	eors	r0, r0
   1b658:	f380 8811 	msr	BASEPRI, r0
   1b65c:	f04f 0004 	mov.w	r0, #4
   1b660:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1b662:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1b666:	00d3      	lsls	r3, r2, #3
   1b668:	481c      	ldr	r0, [pc, #112]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b66a:	4418      	add	r0, r3
   1b66c:	4669      	mov	r1, sp
   1b66e:	3007      	adds	r0, #7
   1b670:	f7ea fa6f 	bl	5b52 <bt_rpa_create>
				LL_ASSERT(!err);
   1b674:	b9a8      	cbnz	r0, 1b6a2 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1b676:	00ab      	lsls	r3, r5, #2
   1b678:	442b      	add	r3, r5
   1b67a:	00da      	lsls	r2, r3, #3
   1b67c:	4b17      	ldr	r3, [pc, #92]	; (1b6dc <ll_rl_rpa_update+0x17c>)
   1b67e:	eb03 0a02 	add.w	sl, r3, r2
   1b682:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1b686:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1b68a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1b68e:	4b15      	ldr	r3, [pc, #84]	; (1b6e4 <ll_rl_rpa_update+0x184>)
   1b690:	449b      	add	fp, r3
   1b692:	2206      	movs	r2, #6
   1b694:	4669      	mov	r1, sp
   1b696:	4658      	mov	r0, fp
   1b698:	f7e4 fe12 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1b69c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   1b6a0:	e7a4      	b.n	1b5ec <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1b6a2:	4040      	eors	r0, r0
   1b6a4:	f380 8811 	msr	BASEPRI, r0
   1b6a8:	f04f 0004 	mov.w	r0, #4
   1b6ac:	df02      	svc	2
	if (all) {
   1b6ae:	f1b8 0f00 	cmp.w	r8, #0
   1b6b2:	d002      	beq.n	1b6ba <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1b6b4:	4b07      	ldr	r3, [pc, #28]	; (1b6d4 <ll_rl_rpa_update+0x174>)
   1b6b6:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1b6ba:	f1b9 0f00 	cmp.w	r9, #0
   1b6be:	d102      	bne.n	1b6c6 <ll_rl_rpa_update+0x166>
}
   1b6c0:	b005      	add	sp, #20
   1b6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1b6c6:	f7fd ffc9 	bl	1965c <radio_adv_is_enabled>
   1b6ca:	2800      	cmp	r0, #0
   1b6cc:	d0f8      	beq.n	1b6c0 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1b6ce:	f7ff fef1 	bl	1b4b4 <rpa_adv_refresh>
}
   1b6d2:	e7f5      	b.n	1b6c0 <ll_rl_rpa_update+0x160>
   1b6d4:	20002a40 	.word	0x20002a40
   1b6d8:	20002bec 	.word	0x20002bec
   1b6dc:	20001960 	.word	0x20001960
   1b6e0:	200018e0 	.word	0x200018e0
   1b6e4:	200018a4 	.word	0x200018a4

0001b6e8 <rpa_timeout>:
{
   1b6e8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1b6ea:	2001      	movs	r0, #1
   1b6ec:	f7ff ff38 	bl	1b560 <ll_rl_rpa_update>
   1b6f0:	4b03      	ldr	r3, [pc, #12]	; (1b700 <rpa_timeout+0x18>)
   1b6f2:	681a      	ldr	r2, [r3, #0]
   1b6f4:	4903      	ldr	r1, [pc, #12]	; (1b704 <rpa_timeout+0x1c>)
   1b6f6:	4804      	ldr	r0, [pc, #16]	; (1b708 <rpa_timeout+0x20>)
   1b6f8:	f010 f856 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1b6fc:	bd08      	pop	{r3, pc}
   1b6fe:	bf00      	nop
   1b700:	20002bec 	.word	0x20002bec
   1b704:	20002ab8 	.word	0x20002ab8
   1b708:	20002c00 	.word	0x20002c00

0001b70c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1b70c:	2008      	movs	r0, #8
   1b70e:	4770      	bx	lr

0001b710 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1b710:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1b712:	2000      	movs	r0, #0
   1b714:	f7ff fb74 	bl	1ae00 <rl_access_check>
   1b718:	b908      	cbnz	r0, 1b71e <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b71a:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1b71c:	bd08      	pop	{r3, pc}
	rl_clear();
   1b71e:	f7ff fa7d 	bl	1ac1c <rl_clear>
	return 0;
   1b722:	2000      	movs	r0, #0
   1b724:	bd08      	pop	{r3, pc}
	...

0001b728 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b72c:	b082      	sub	sp, #8
   1b72e:	4605      	mov	r5, r0
   1b730:	460c      	mov	r4, r1
   1b732:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1b734:	2000      	movs	r0, #0
   1b736:	f7ff fb63 	bl	1ae00 <rl_access_check>
   1b73a:	b918      	cbnz	r0, 1b744 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b73c:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1b73e:	b002      	add	sp, #8
   1b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1b744:	462f      	mov	r7, r5
   1b746:	f817 0b01 	ldrb.w	r0, [r7], #1
   1b74a:	f10d 0207 	add.w	r2, sp, #7
   1b74e:	4639      	mov	r1, r7
   1b750:	f7ff fca4 	bl	1b09c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1b754:	2807      	cmp	r0, #7
   1b756:	d801      	bhi.n	1b75c <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1b758:	2012      	movs	r0, #18
   1b75a:	e7f0      	b.n	1b73e <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1b75c:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1b760:	f1b8 0f07 	cmp.w	r8, #7
   1b764:	d901      	bls.n	1b76a <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1b766:	2007      	movs	r0, #7
   1b768:	e7e9      	b.n	1b73e <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1b76a:	f8df a130 	ldr.w	sl, [pc, #304]	; 1b89c <ll_rl_add+0x174>
   1b76e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1b772:	4443      	add	r3, r8
   1b774:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1b778:	eb0a 0009 	add.w	r0, sl, r9
   1b77c:	2206      	movs	r2, #6
   1b77e:	4639      	mov	r1, r7
   1b780:	3001      	adds	r0, #1
   1b782:	f7e4 fd9d 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1b786:	782a      	ldrb	r2, [r5, #0]
   1b788:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1b78c:	f362 1386 	bfi	r3, r2, #6, #1
   1b790:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1b794:	2110      	movs	r1, #16
   1b796:	4620      	mov	r0, r4
   1b798:	f7f5 f8f2 	bl	10980 <mem_nz>
   1b79c:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1b7a0:	f360 0382 	bfi	r3, r0, #2, #1
   1b7a4:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1b7a8:	2110      	movs	r1, #16
   1b7aa:	4630      	mov	r0, r6
   1b7ac:	f7f5 f8e8 	bl	10980 <mem_nz>
   1b7b0:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1b7b4:	f360 03c3 	bfi	r3, r0, #3, #1
   1b7b8:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1b7bc:	f013 0f04 	tst.w	r3, #4
   1b7c0:	d016      	beq.n	1b7f0 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1b7c2:	4933      	ldr	r1, [pc, #204]	; (1b890 <ll_rl_add+0x168>)
   1b7c4:	780a      	ldrb	r2, [r1, #0]
   1b7c6:	4653      	mov	r3, sl
   1b7c8:	444b      	add	r3, r9
   1b7ca:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1b7cc:	4b31      	ldr	r3, [pc, #196]	; (1b894 <ll_rl_add+0x16c>)
   1b7ce:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1b7d2:	1c53      	adds	r3, r2, #1
   1b7d4:	700b      	strb	r3, [r1, #0]
   1b7d6:	340f      	adds	r4, #15
   1b7d8:	4b2f      	ldr	r3, [pc, #188]	; (1b898 <ll_rl_add+0x170>)
   1b7da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1b7de:	2210      	movs	r2, #16
   1b7e0:	e004      	b.n	1b7ec <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1b7e2:	7821      	ldrb	r1, [r4, #0]
   1b7e4:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1b7e6:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1b7e8:	3c01      	subs	r4, #1
   1b7ea:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1b7ec:	2a00      	cmp	r2, #0
   1b7ee:	d1f8      	bne.n	1b7e2 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1b7f0:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1b7f4:	00d3      	lsls	r3, r2, #3
   1b7f6:	4a29      	ldr	r2, [pc, #164]	; (1b89c <ll_rl_add+0x174>)
   1b7f8:	5cd3      	ldrb	r3, [r2, r3]
   1b7fa:	f013 0f08 	tst.w	r3, #8
   1b7fe:	d12f      	bne.n	1b860 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1b800:	4e26      	ldr	r6, [pc, #152]	; (1b89c <ll_rl_add+0x174>)
   1b802:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1b806:	eb04 0208 	add.w	r2, r4, r8
   1b80a:	00d3      	lsls	r3, r2, #3
   1b80c:	3318      	adds	r3, #24
   1b80e:	2206      	movs	r2, #6
   1b810:	2100      	movs	r1, #0
   1b812:	18f0      	adds	r0, r6, r3
   1b814:	f010 fc32 	bl	2c07c <memset>
	rl[i].rpas_ready = 0;
   1b818:	4444      	add	r4, r8
   1b81a:	00e2      	lsls	r2, r4, #3
   1b81c:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1b81e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1b822:	f36f 1304 	bfc	r3, #4, #1
   1b826:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1b828:	2200      	movs	r2, #0
   1b82a:	4639      	mov	r1, r7
   1b82c:	7828      	ldrb	r0, [r5, #0]
   1b82e:	f7ff fa0b 	bl	1ac48 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1b832:	2807      	cmp	r0, #7
   1b834:	d822      	bhi.n	1b87c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1b836:	4b1a      	ldr	r3, [pc, #104]	; (1b8a0 <ll_rl_add+0x178>)
   1b838:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b83c:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1b840:	00e3      	lsls	r3, r4, #3
   1b842:	5cf2      	ldrb	r2, [r6, r3]
   1b844:	f042 0220 	orr.w	r2, r2, #32
   1b848:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1b84a:	4914      	ldr	r1, [pc, #80]	; (1b89c <ll_rl_add+0x174>)
   1b84c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1b850:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1b854:	5cca      	ldrb	r2, [r1, r3]
   1b856:	f042 0201 	orr.w	r2, r2, #1
   1b85a:	54ca      	strb	r2, [r1, r3]
	return 0;
   1b85c:	2000      	movs	r0, #0
   1b85e:	e76e      	b.n	1b73e <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1b860:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1b864:	4443      	add	r3, r8
   1b866:	00da      	lsls	r2, r3, #3
   1b868:	4c0c      	ldr	r4, [pc, #48]	; (1b89c <ll_rl_add+0x174>)
   1b86a:	4414      	add	r4, r2
   1b86c:	2210      	movs	r2, #16
   1b86e:	4631      	mov	r1, r6
   1b870:	1de0      	adds	r0, r4, #7
   1b872:	f7e4 fd25 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1b876:	2300      	movs	r3, #0
   1b878:	6263      	str	r3, [r4, #36]	; 0x24
   1b87a:	e7c1      	b.n	1b800 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1b87c:	4a07      	ldr	r2, [pc, #28]	; (1b89c <ll_rl_add+0x174>)
   1b87e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1b882:	00cb      	lsls	r3, r1, #3
   1b884:	5cd1      	ldrb	r1, [r2, r3]
   1b886:	f36f 1145 	bfc	r1, #5, #1
   1b88a:	54d1      	strb	r1, [r2, r3]
   1b88c:	e7dd      	b.n	1b84a <ll_rl_add+0x122>
   1b88e:	bf00      	nop
   1b890:	200018d4 	.word	0x200018d4
   1b894:	200018d8 	.word	0x200018d8
   1b898:	200018e0 	.word	0x200018e0
   1b89c:	20001960 	.word	0x20001960
   1b8a0:	20001ad8 	.word	0x20001ad8

0001b8a4 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8a8:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1b8aa:	2000      	movs	r0, #0
   1b8ac:	f7ff faa8 	bl	1ae00 <rl_access_check>
   1b8b0:	b910      	cbnz	r0, 1b8b8 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b8b2:	200c      	movs	r0, #12
   1b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b8b8:	4626      	mov	r6, r4
   1b8ba:	f816 0b01 	ldrb.w	r0, [r6], #1
   1b8be:	2200      	movs	r2, #0
   1b8c0:	4631      	mov	r1, r6
   1b8c2:	f7ff fbeb 	bl	1b09c <ll_rl_find>
   1b8c6:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1b8c8:	2807      	cmp	r0, #7
   1b8ca:	d902      	bls.n	1b8d2 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b8cc:	2002      	movs	r0, #2
}
   1b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1b8d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1b8d6:	00d3      	lsls	r3, r2, #3
   1b8d8:	4a2d      	ldr	r2, [pc, #180]	; (1b990 <ll_rl_remove+0xec>)
   1b8da:	5cd3      	ldrb	r3, [r2, r3]
   1b8dc:	f013 0f04 	tst.w	r3, #4
   1b8e0:	d03e      	beq.n	1b960 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b8e2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1b8e6:	00da      	lsls	r2, r3, #3
   1b8e8:	4b29      	ldr	r3, [pc, #164]	; (1b990 <ll_rl_remove+0xec>)
   1b8ea:	4413      	add	r3, r2
   1b8ec:	7ddf      	ldrb	r7, [r3, #23]
   1b8ee:	4b29      	ldr	r3, [pc, #164]	; (1b994 <ll_rl_remove+0xf0>)
   1b8f0:	781b      	ldrb	r3, [r3, #0]
   1b8f2:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1b8f4:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1b8f8:	d02e      	beq.n	1b958 <ll_rl_remove+0xb4>
   1b8fa:	4547      	cmp	r7, r8
   1b8fc:	d02c      	beq.n	1b958 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1b8fe:	4826      	ldr	r0, [pc, #152]	; (1b998 <ll_rl_remove+0xf4>)
   1b900:	2210      	movs	r2, #16
   1b902:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1b906:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1b90a:	f7e4 fcd9 	bl	2c0 <memcpy>
				for (k = 0;
   1b90e:	2300      	movs	r3, #0
   1b910:	e001      	b.n	1b916 <ll_rl_remove+0x72>
				     k++) {
   1b912:	3301      	adds	r3, #1
   1b914:	b2db      	uxtb	r3, r3
				for (k = 0;
   1b916:	2b07      	cmp	r3, #7
   1b918:	d81e      	bhi.n	1b958 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1b91a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b91e:	00ca      	lsls	r2, r1, #3
   1b920:	491b      	ldr	r1, [pc, #108]	; (1b990 <ll_rl_remove+0xec>)
   1b922:	5c8a      	ldrb	r2, [r1, r2]
   1b924:	f012 0f01 	tst.w	r2, #1
   1b928:	d0f3      	beq.n	1b912 <ll_rl_remove+0x6e>
   1b92a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b92e:	00ca      	lsls	r2, r1, #3
   1b930:	4917      	ldr	r1, [pc, #92]	; (1b990 <ll_rl_remove+0xec>)
   1b932:	5c8a      	ldrb	r2, [r1, r2]
   1b934:	f012 0f04 	tst.w	r2, #4
   1b938:	d0eb      	beq.n	1b912 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1b93a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b93e:	00d1      	lsls	r1, r2, #3
   1b940:	4a13      	ldr	r2, [pc, #76]	; (1b990 <ll_rl_remove+0xec>)
   1b942:	440a      	add	r2, r1
   1b944:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1b946:	4590      	cmp	r8, r2
   1b948:	d1e3      	bne.n	1b912 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1b94a:	2128      	movs	r1, #40	; 0x28
   1b94c:	4a10      	ldr	r2, [pc, #64]	; (1b990 <ll_rl_remove+0xec>)
   1b94e:	fb01 2003 	mla	r0, r1, r3, r2
   1b952:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1b954:	4a11      	ldr	r2, [pc, #68]	; (1b99c <ll_rl_remove+0xf8>)
   1b956:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1b958:	4a0e      	ldr	r2, [pc, #56]	; (1b994 <ll_rl_remove+0xf0>)
   1b95a:	7813      	ldrb	r3, [r2, #0]
   1b95c:	3b01      	subs	r3, #1
   1b95e:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1b960:	2200      	movs	r2, #0
   1b962:	4631      	mov	r1, r6
   1b964:	7820      	ldrb	r0, [r4, #0]
   1b966:	f7ff f96f 	bl	1ac48 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1b96a:	2807      	cmp	r0, #7
   1b96c:	d804      	bhi.n	1b978 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1b96e:	4b0c      	ldr	r3, [pc, #48]	; (1b9a0 <ll_rl_remove+0xfc>)
   1b970:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b974:	23ff      	movs	r3, #255	; 0xff
   1b976:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1b978:	4a05      	ldr	r2, [pc, #20]	; (1b990 <ll_rl_remove+0xec>)
   1b97a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b97e:	00eb      	lsls	r3, r5, #3
   1b980:	5cd1      	ldrb	r1, [r2, r3]
   1b982:	f36f 0100 	bfc	r1, #0, #1
   1b986:	54d1      	strb	r1, [r2, r3]
		return 0;
   1b988:	2000      	movs	r0, #0
   1b98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b98e:	bf00      	nop
   1b990:	20001960 	.word	0x20001960
   1b994:	200018d4 	.word	0x200018d4
   1b998:	200018e0 	.word	0x200018e0
   1b99c:	200018d8 	.word	0x200018d8
   1b9a0:	20001ad8 	.word	0x20001ad8

0001b9a4 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1b9a4:	b510      	push	{r4, lr}
   1b9a6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1b9a8:	795b      	ldrb	r3, [r3, #5]
   1b9aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b9ae:	2b40      	cmp	r3, #64	; 0x40
   1b9b0:	d000      	beq.n	1b9b4 <ll_rl_crpa_set+0x10>
   1b9b2:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1b9b4:	b119      	cbz	r1, 1b9be <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1b9b6:	2200      	movs	r2, #0
   1b9b8:	f7ff fb70 	bl	1b09c <ll_rl_find>
   1b9bc:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1b9be:	2a07      	cmp	r2, #7
   1b9c0:	d8f7      	bhi.n	1b9b2 <ll_rl_crpa_set+0xe>
   1b9c2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1b9c6:	00cb      	lsls	r3, r1, #3
   1b9c8:	4907      	ldr	r1, [pc, #28]	; (1b9e8 <ll_rl_crpa_set+0x44>)
   1b9ca:	5ccb      	ldrb	r3, [r1, r3]
   1b9cc:	f013 0f01 	tst.w	r3, #1
   1b9d0:	d0ef      	beq.n	1b9b2 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1b9d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1b9d6:	00d0      	lsls	r0, r2, #3
   1b9d8:	3018      	adds	r0, #24
   1b9da:	2206      	movs	r2, #6
   1b9dc:	4621      	mov	r1, r4
   1b9de:	4b02      	ldr	r3, [pc, #8]	; (1b9e8 <ll_rl_crpa_set+0x44>)
   1b9e0:	4418      	add	r0, r3
   1b9e2:	f7e4 fc6d 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1b9e6:	e7e4      	b.n	1b9b2 <ll_rl_crpa_set+0xe>
   1b9e8:	20001960 	.word	0x20001960

0001b9ec <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1b9ec:	b538      	push	{r3, r4, r5, lr}
   1b9ee:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b9f0:	4601      	mov	r1, r0
   1b9f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b9f6:	2200      	movs	r2, #0
   1b9f8:	f7ff fb50 	bl	1b09c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1b9fc:	2807      	cmp	r0, #7
   1b9fe:	d901      	bls.n	1ba04 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ba00:	2002      	movs	r0, #2
   1ba02:	bd38      	pop	{r3, r4, r5, pc}
   1ba04:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1ba06:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1ba0a:	00d8      	lsls	r0, r3, #3
   1ba0c:	3018      	adds	r0, #24
   1ba0e:	2106      	movs	r1, #6
   1ba10:	4b09      	ldr	r3, [pc, #36]	; (1ba38 <ll_rl_crpa_get+0x4c>)
   1ba12:	4418      	add	r0, r3
   1ba14:	f7f4 ffb4 	bl	10980 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1ba18:	b908      	cbnz	r0, 1ba1e <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ba1a:	2002      	movs	r0, #2
}
   1ba1c:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1ba1e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ba22:	00e1      	lsls	r1, r4, #3
   1ba24:	3118      	adds	r1, #24
   1ba26:	2206      	movs	r2, #6
   1ba28:	4b03      	ldr	r3, [pc, #12]	; (1ba38 <ll_rl_crpa_get+0x4c>)
   1ba2a:	4419      	add	r1, r3
   1ba2c:	4628      	mov	r0, r5
   1ba2e:	f7e4 fc47 	bl	2c0 <memcpy>
			return 0;
   1ba32:	2000      	movs	r0, #0
   1ba34:	bd38      	pop	{r3, r4, r5, pc}
   1ba36:	bf00      	nop
   1ba38:	20001960 	.word	0x20001960

0001ba3c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1ba3c:	b510      	push	{r4, lr}
   1ba3e:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1ba40:	4601      	mov	r1, r0
   1ba42:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ba46:	2200      	movs	r2, #0
   1ba48:	f7ff fb28 	bl	1b09c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1ba4c:	2807      	cmp	r0, #7
   1ba4e:	d901      	bls.n	1ba54 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ba50:	2002      	movs	r0, #2
}
   1ba52:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1ba54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ba58:	00c2      	lsls	r2, r0, #3
   1ba5a:	4b04      	ldr	r3, [pc, #16]	; (1ba6c <ll_rl_lrpa_get+0x30>)
   1ba5c:	4413      	add	r3, r2
   1ba5e:	2206      	movs	r2, #6
   1ba60:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1ba62:	4620      	mov	r0, r4
   1ba64:	f7e4 fc2c 	bl	2c0 <memcpy>
		return 0;
   1ba68:	2000      	movs	r0, #0
   1ba6a:	bd10      	pop	{r4, pc}
   1ba6c:	20001960 	.word	0x20001960

0001ba70 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1ba70:	b510      	push	{r4, lr}
   1ba72:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1ba74:	2000      	movs	r0, #0
   1ba76:	f7ff f9c3 	bl	1ae00 <rl_access_check>
   1ba7a:	b908      	cbnz	r0, 1ba80 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ba7c:	200c      	movs	r0, #12
   1ba7e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1ba80:	b11c      	cbz	r4, 1ba8a <ll_rl_enable+0x1a>
   1ba82:	2c01      	cmp	r4, #1
   1ba84:	d005      	beq.n	1ba92 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1ba86:	2012      	movs	r0, #18
	}

	return 0;
}
   1ba88:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1ba8a:	2000      	movs	r0, #0
   1ba8c:	4b03      	ldr	r3, [pc, #12]	; (1ba9c <ll_rl_enable+0x2c>)
   1ba8e:	7018      	strb	r0, [r3, #0]
		break;
   1ba90:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1ba92:	2201      	movs	r2, #1
   1ba94:	4b01      	ldr	r3, [pc, #4]	; (1ba9c <ll_rl_enable+0x2c>)
   1ba96:	701a      	strb	r2, [r3, #0]
	return 0;
   1ba98:	2000      	movs	r0, #0
		break;
   1ba9a:	bd10      	pop	{r4, pc}
   1ba9c:	20001aa0 	.word	0x20001aa0

0001baa0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1baa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1baa4:	fb03 f000 	mul.w	r0, r3, r0
   1baa8:	4b01      	ldr	r3, [pc, #4]	; (1bab0 <ll_rl_timeout_set+0x10>)
   1baaa:	6018      	str	r0, [r3, #0]
   1baac:	4770      	bx	lr
   1baae:	bf00      	nop
   1bab0:	20002bec 	.word	0x20002bec

0001bab4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1bab4:	b538      	push	{r3, r4, r5, lr}
   1bab6:	4604      	mov	r4, r0
   1bab8:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1baba:	2000      	movs	r0, #0
   1babc:	f7ff f9a0 	bl	1ae00 <rl_access_check>
   1bac0:	b908      	cbnz	r0, 1bac6 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bac2:	200c      	movs	r0, #12
   1bac4:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bac6:	4621      	mov	r1, r4
   1bac8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1bacc:	2200      	movs	r2, #0
   1bace:	f7ff fae5 	bl	1b09c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1bad2:	2807      	cmp	r0, #7
   1bad4:	d901      	bls.n	1bada <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1bad6:	2002      	movs	r0, #2
   1bad8:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1bada:	b11d      	cbz	r5, 1bae4 <ll_priv_mode_set+0x30>
   1badc:	2d01      	cmp	r5, #1
   1bade:	d00b      	beq.n	1baf8 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1bae0:	2012      	movs	r0, #18
	}

	return 0;
}
   1bae2:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1bae4:	4a09      	ldr	r2, [pc, #36]	; (1bb0c <ll_priv_mode_set+0x58>)
   1bae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1baea:	00c3      	lsls	r3, r0, #3
   1baec:	5cd1      	ldrb	r1, [r2, r3]
   1baee:	f36f 1104 	bfc	r1, #4, #1
   1baf2:	54d1      	strb	r1, [r2, r3]
	return 0;
   1baf4:	2000      	movs	r0, #0
			break;
   1baf6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1baf8:	4904      	ldr	r1, [pc, #16]	; (1bb0c <ll_priv_mode_set+0x58>)
   1bafa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bafe:	00c3      	lsls	r3, r0, #3
   1bb00:	5cca      	ldrb	r2, [r1, r3]
   1bb02:	f042 0210 	orr.w	r2, r2, #16
   1bb06:	54ca      	strb	r2, [r1, r3]
	return 0;
   1bb08:	2000      	movs	r0, #0
			break;
   1bb0a:	bd38      	pop	{r3, r4, r5, pc}
   1bb0c:	20001960 	.word	0x20001960

0001bb10 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1bb10:	b538      	push	{r3, r4, r5, lr}
   1bb12:	4605      	mov	r5, r0
	wl_anon = 0;
   1bb14:	2400      	movs	r4, #0
   1bb16:	4b0e      	ldr	r3, [pc, #56]	; (1bb50 <ll_filter_reset+0x40>)
   1bb18:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1bb1a:	f7ff f86b 	bl	1abf4 <wl_clear>

	rl_enable = 0;
   1bb1e:	4b0d      	ldr	r3, [pc, #52]	; (1bb54 <ll_filter_reset+0x44>)
   1bb20:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1bb22:	4a0d      	ldr	r2, [pc, #52]	; (1bb58 <ll_filter_reset+0x48>)
   1bb24:	4b0d      	ldr	r3, [pc, #52]	; (1bb5c <ll_filter_reset+0x4c>)
   1bb26:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1bb28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb30:	4b0b      	ldr	r3, [pc, #44]	; (1bb60 <ll_filter_reset+0x50>)
   1bb32:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1bb36:	f7ff f871 	bl	1ac1c <rl_clear>
	if (init) {
   1bb3a:	b91d      	cbnz	r5, 1bb44 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1bb3c:	4809      	ldr	r0, [pc, #36]	; (1bb64 <ll_filter_reset+0x54>)
   1bb3e:	f00f fdd9 	bl	2b6f4 <k_delayed_work_cancel>
   1bb42:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1bb44:	4908      	ldr	r1, [pc, #32]	; (1bb68 <ll_filter_reset+0x58>)
   1bb46:	4807      	ldr	r0, [pc, #28]	; (1bb64 <ll_filter_reset+0x54>)
   1bb48:	f00f fdb6 	bl	2b6b8 <k_delayed_work_init>
   1bb4c:	bd38      	pop	{r3, r4, r5, pc}
   1bb4e:	bf00      	nop
   1bb50:	20002a48 	.word	0x20002a48
   1bb54:	20001aa0 	.word	0x20001aa0
   1bb58:	000dbba0 	.word	0x000dbba0
   1bb5c:	20002bec 	.word	0x20002bec
   1bb60:	20002a40 	.word	0x20002a40
   1bb64:	20002ab8 	.word	0x20002ab8
   1bb68:	0001b6e9 	.word	0x0001b6e9

0001bb6c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1bb6c:	4800      	ldr	r0, [pc, #0]	; (1bb70 <ll_adv_set_get+0x4>)
   1bb6e:	4770      	bx	lr
   1bb70:	20001b4c 	.word	0x20001b4c

0001bb74 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb78:	b087      	sub	sp, #28
   1bb7a:	4689      	mov	r9, r1
   1bb7c:	4614      	mov	r4, r2
   1bb7e:	461e      	mov	r6, r3
   1bb80:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1bb84:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1bb88:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1bb8c:	4b89      	ldr	r3, [pc, #548]	; (1bdb4 <ll_adv_params_set+0x240>)
   1bb8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1bb92:	9004      	str	r0, [sp, #16]
   1bb94:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1bb98:	f7fd fd60 	bl	1965c <radio_adv_is_enabled>
   1bb9c:	9001      	str	r0, [sp, #4]
   1bb9e:	b128      	cbz	r0, 1bbac <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bba0:	230c      	movs	r3, #12
   1bba2:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1bba4:	9801      	ldr	r0, [sp, #4]
   1bba6:	b007      	add	sp, #28
   1bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1bbac:	4b82      	ldr	r3, [pc, #520]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bbae:	7a1a      	ldrb	r2, [r3, #8]
   1bbb0:	2101      	movs	r1, #1
   1bbb2:	f361 0202 	bfi	r2, r1, #0, #3
   1bbb6:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1bbb8:	2e04      	cmp	r6, #4
   1bbba:	d90f      	bls.n	1bbdc <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1bbbc:	f019 0f10 	tst.w	r9, #16
   1bbc0:	d071      	beq.n	1bca6 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1bbc2:	4b7c      	ldr	r3, [pc, #496]	; (1bdb4 <ll_adv_params_set+0x240>)
   1bbc4:	689b      	ldr	r3, [r3, #8]
   1bbc6:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1bbc8:	f009 0303 	and.w	r3, r9, #3
   1bbcc:	aa06      	add	r2, sp, #24
   1bbce:	4413      	add	r3, r2
   1bbd0:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1bbd4:	f019 0f08 	tst.w	r9, #8
   1bbd8:	d000      	beq.n	1bbdc <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1bbda:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1bbdc:	2e01      	cmp	r6, #1
   1bbde:	d071      	beq.n	1bcc4 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1bbe0:	4b75      	ldr	r3, [pc, #468]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bbe2:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1bbe4:	4a74      	ldr	r2, [pc, #464]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bbe6:	7813      	ldrb	r3, [r2, #0]
   1bbe8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1bbec:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1bbf0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1bbf4:	f361 03c4 	bfi	r3, r1, #3, #2
   1bbf8:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1bbfa:	f7fd fd27 	bl	1964c <radio_adv_data_get>
   1bbfe:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1bc00:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1bc04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bc08:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1bc0c:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1bc10:	ab06      	add	r3, sp, #24
   1bc12:	441e      	add	r6, r3
   1bc14:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1bc18:	5d03      	ldrb	r3, [r0, r4]
   1bc1a:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1bc1e:	f36f 1304 	bfc	r3, #4, #1
   1bc22:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1bc24:	f003 030f 	and.w	r3, r3, #15
   1bc28:	2b01      	cmp	r3, #1
   1bc2a:	d94f      	bls.n	1bccc <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1bc2c:	5d03      	ldrb	r3, [r0, r4]
   1bc2e:	f36f 1345 	bfc	r3, #5, #1
   1bc32:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1bc34:	4a60      	ldr	r2, [pc, #384]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bc36:	7813      	ldrb	r3, [r2, #0]
   1bc38:	f368 1346 	bfi	r3, r8, #5, #2
   1bc3c:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1bc3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1bc42:	2b40      	cmp	r3, #64	; 0x40
   1bc44:	d047      	beq.n	1bcd6 <ll_adv_params_set+0x162>
   1bc46:	2b60      	cmp	r3, #96	; 0x60
   1bc48:	d045      	beq.n	1bcd6 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1bc4a:	f008 0801 	and.w	r8, r8, #1
   1bc4e:	5d3b      	ldrb	r3, [r7, r4]
   1bc50:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1bc54:	f36f 13c7 	bfc	r3, #7, #1
   1bc58:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bc5a:	f003 030f 	and.w	r3, r3, #15
   1bc5e:	2b01      	cmp	r3, #1
   1bc60:	d044      	beq.n	1bcec <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1bc62:	2b07      	cmp	r3, #7
   1bc64:	d050      	beq.n	1bd08 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1bc66:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1bc6a:	b913      	cbnz	r3, 1bc72 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1bc6c:	2306      	movs	r3, #6
   1bc6e:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1bc72:	f7fd fcef 	bl	19654 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1bc76:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1bc7a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1bc7e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1bc82:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1bc84:	5c83      	ldrb	r3, [r0, r2]
   1bc86:	2404      	movs	r4, #4
   1bc88:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1bc8c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1bc90:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1bc94:	f36f 13c7 	bfc	r3, #7, #1
   1bc98:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1bc9a:	784b      	ldrb	r3, [r1, #1]
   1bc9c:	2b00      	cmp	r3, #0
   1bc9e:	d181      	bne.n	1bba4 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1bca0:	2306      	movs	r3, #6
   1bca2:	704b      	strb	r3, [r1, #1]
   1bca4:	e77e      	b.n	1bba4 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1bca6:	f009 0303 	and.w	r3, r9, #3
   1bcaa:	2b03      	cmp	r3, #3
   1bcac:	d07c      	beq.n	1bda8 <ll_adv_params_set+0x234>
   1bcae:	f009 030c 	and.w	r3, r9, #12
   1bcb2:	2b0c      	cmp	r3, #12
   1bcb4:	d07b      	beq.n	1bdae <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1bcb6:	4b40      	ldr	r3, [pc, #256]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bcb8:	7a1a      	ldrb	r2, [r3, #8]
   1bcba:	f365 0202 	bfi	r2, r5, #0, #3
   1bcbe:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1bcc0:	2605      	movs	r6, #5
   1bcc2:	e78b      	b.n	1bbdc <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1bcc4:	2200      	movs	r2, #0
   1bcc6:	4b3c      	ldr	r3, [pc, #240]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bcc8:	60da      	str	r2, [r3, #12]
   1bcca:	e78b      	b.n	1bbe4 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1bccc:	5d03      	ldrb	r3, [r0, r4]
   1bcce:	f043 0320 	orr.w	r3, r3, #32
   1bcd2:	5503      	strb	r3, [r0, r4]
   1bcd4:	e7ae      	b.n	1bc34 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1bcd6:	4838      	ldr	r0, [pc, #224]	; (1bdb8 <ll_adv_params_set+0x244>)
   1bcd8:	7803      	ldrb	r3, [r0, #0]
   1bcda:	f36b 13c7 	bfi	r3, fp, #7, #1
   1bcde:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1bce2:	2206      	movs	r2, #6
   1bce4:	9912      	ldr	r1, [sp, #72]	; 0x48
   1bce6:	f7e4 faeb 	bl	2c0 <memcpy>
   1bcea:	e7ae      	b.n	1bc4a <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1bcec:	5d3b      	ldrb	r3, [r7, r4]
   1bcee:	f36b 13c7 	bfi	r3, fp, #7, #1
   1bcf2:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1bcf4:	2206      	movs	r2, #6
   1bcf6:	9912      	ldr	r1, [sp, #72]	; 0x48
   1bcf8:	f10a 0008 	add.w	r0, sl, #8
   1bcfc:	f7e4 fae0 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1bd00:	230c      	movs	r3, #12
   1bd02:	f88a 3001 	strb.w	r3, [sl, #1]
   1bd06:	e7b4      	b.n	1bc72 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1bd08:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1bd0c:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1bd10:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1bd14:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1bd18:	f369 1287 	bfi	r2, r9, #6, #2
   1bd1c:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1bd20:	2200      	movs	r2, #0
   1bd22:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1bd26:	f019 0f20 	tst.w	r9, #32
   1bd2a:	d10e      	bne.n	1bd4a <ll_adv_params_set+0x1d6>
   1bd2c:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1bd30:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1bd34:	d109      	bne.n	1bd4a <ll_adv_params_set+0x1d6>
   1bd36:	2d04      	cmp	r5, #4
   1bd38:	d007      	beq.n	1bd4a <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1bd3a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1bd3e:	f042 0201 	orr.w	r2, r2, #1
   1bd42:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1bd46:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1bd4a:	f019 0f40 	tst.w	r9, #64	; 0x40
   1bd4e:	d006      	beq.n	1bd5e <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1bd50:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1bd54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bd58:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1bd5c:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1bd5e:	1acb      	subs	r3, r1, r3
   1bd60:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1bd62:	2b02      	cmp	r3, #2
   1bd64:	d916      	bls.n	1bd94 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1bd66:	1e58      	subs	r0, r3, #1
   1bd68:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1bd6c:	f360 0205 	bfi	r2, r0, #0, #6
   1bd70:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1bd74:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1bd78:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1bd7c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd80:	f43f af77 	beq.w	1bc72 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1bd84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bd86:	b16b      	cbz	r3, 1bda4 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1bd88:	781b      	ldrb	r3, [r3, #0]
   1bd8a:	2b7f      	cmp	r3, #127	; 0x7f
   1bd8c:	d006      	beq.n	1bd9c <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1bd8e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1bd92:	e76e      	b.n	1bc72 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1bd94:	2301      	movs	r3, #1
   1bd96:	f88a 3001 	strb.w	r3, [sl, #1]
   1bd9a:	e7ed      	b.n	1bd78 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1bd9c:	2300      	movs	r3, #0
   1bd9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bda0:	7013      	strb	r3, [r2, #0]
   1bda2:	e7f4      	b.n	1bd8e <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1bda4:	2300      	movs	r3, #0
   1bda6:	e7f2      	b.n	1bd8e <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1bda8:	2312      	movs	r3, #18
   1bdaa:	9301      	str	r3, [sp, #4]
   1bdac:	e6fa      	b.n	1bba4 <ll_adv_params_set+0x30>
   1bdae:	2312      	movs	r3, #18
   1bdb0:	9301      	str	r3, [sp, #4]
   1bdb2:	e6f7      	b.n	1bba4 <ll_adv_params_set+0x30>
   1bdb4:	0002fec0 	.word	0x0002fec0
   1bdb8:	20001b4c 	.word	0x20001b4c

0001bdbc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdc0:	4606      	mov	r6, r0
   1bdc2:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1bdc4:	f7fd fc42 	bl	1964c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1bdc8:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1bdcc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1bdd0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1bdd4:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1bdd6:	5c83      	ldrb	r3, [r0, r2]
   1bdd8:	f003 030f 	and.w	r3, r3, #15
   1bddc:	2b01      	cmp	r3, #1
   1bdde:	d03e      	beq.n	1be5e <ll_adv_data_set+0xa2>
   1bde0:	4604      	mov	r4, r0
   1bde2:	2b07      	cmp	r3, #7
   1bde4:	d03b      	beq.n	1be5e <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1bde6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1bdea:	429d      	cmp	r5, r3
   1bdec:	d039      	beq.n	1be62 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1bdee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1bdf2:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1bdf6:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1bdfa:	f814 e002 	ldrb.w	lr, [r4, r2]
   1bdfe:	5ce0      	ldrb	r0, [r4, r3]
   1be00:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1be04:	f36f 1004 	bfc	r0, #4, #1
   1be08:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1be0a:	5ca0      	ldrb	r0, [r4, r2]
   1be0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1be10:	f814 e003 	ldrb.w	lr, [r4, r3]
   1be14:	f360 1e45 	bfi	lr, r0, #5, #1
   1be18:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1be1c:	5ca0      	ldrb	r0, [r4, r2]
   1be1e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1be22:	fa5f fe8e 	uxtb.w	lr, lr
   1be26:	f360 1e86 	bfi	lr, r0, #6, #1
   1be2a:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1be2e:	5ca2      	ldrb	r2, [r4, r2]
   1be30:	09d2      	lsrs	r2, r2, #7
   1be32:	fa5f f08e 	uxtb.w	r0, lr
   1be36:	f362 10c7 	bfi	r0, r2, #7, #1
   1be3a:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1be3c:	2206      	movs	r2, #6
   1be3e:	3102      	adds	r1, #2
   1be40:	f108 0002 	add.w	r0, r8, #2
   1be44:	f7e4 fa3c 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1be48:	4632      	mov	r2, r6
   1be4a:	4639      	mov	r1, r7
   1be4c:	f108 0008 	add.w	r0, r8, #8
   1be50:	f7e4 fa36 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1be54:	3606      	adds	r6, #6
   1be56:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1be5a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1be5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1be62:	3501      	adds	r5, #1
   1be64:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1be66:	2d02      	cmp	r5, #2
   1be68:	d1c1      	bne.n	1bdee <ll_adv_data_set+0x32>
			last = 0;
   1be6a:	2500      	movs	r5, #0
   1be6c:	e7bf      	b.n	1bdee <ll_adv_data_set+0x32>

0001be6e <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1be6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be72:	4606      	mov	r6, r0
   1be74:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1be76:	f7fd fbed 	bl	19654 <radio_scan_data_get>
   1be7a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1be7c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1be80:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1be84:	429a      	cmp	r2, r3
   1be86:	d031      	beq.n	1beec <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1be88:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1be8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1be8e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1be92:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1be94:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1be98:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1be9c:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1bea0:	5ca0      	ldrb	r0, [r4, r2]
   1bea2:	f04f 0e04 	mov.w	lr, #4
   1bea6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1beaa:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1beae:	f36f 1045 	bfc	r0, #5, #1
   1beb2:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1beb4:	5ce0      	ldrb	r0, [r4, r3]
   1beb6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1beba:	5ca3      	ldrb	r3, [r4, r2]
   1bebc:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1bec0:	f36f 13c7 	bfc	r3, #7, #1
   1bec4:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1bec6:	1db3      	adds	r3, r6, #6
   1bec8:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1becc:	2206      	movs	r2, #6
   1bece:	3102      	adds	r1, #2
   1bed0:	f108 0002 	add.w	r0, r8, #2
   1bed4:	f7e4 f9f4 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1bed8:	4632      	mov	r2, r6
   1beda:	4639      	mov	r1, r7
   1bedc:	f108 0008 	add.w	r0, r8, #8
   1bee0:	f7e4 f9ee 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1bee4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1beec:	1c5d      	adds	r5, r3, #1
   1beee:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1bef0:	2d02      	cmp	r5, #2
   1bef2:	d1ca      	bne.n	1be8a <ll_scan_data_set+0x1c>
			last = 0;
   1bef4:	2500      	movs	r5, #0
   1bef6:	e7c8      	b.n	1be8a <ll_scan_data_set+0x1c>

0001bef8 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1bef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1befc:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1befe:	b120      	cbz	r0, 1bf0a <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1bf00:	f7fd fbac 	bl	1965c <radio_adv_is_enabled>
   1bf04:	b130      	cbz	r0, 1bf14 <ll_adv_enable+0x1c>
		return 0;
   1bf06:	2000      	movs	r0, #0
   1bf08:	e001      	b.n	1bf0e <ll_adv_enable+0x16>
		return radio_adv_disable();
   1bf0a:	f7fe fb27 	bl	1a55c <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1bf0e:	b002      	add	sp, #8
   1bf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1bf14:	f7fd fb9a 	bl	1964c <radio_adv_data_get>
   1bf18:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1bf1a:	f7fd fb9b 	bl	19654 <radio_scan_data_get>
			[radio_adv_data->last][0];
   1bf1e:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1bf22:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1bf26:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1bf2a:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1bf2c:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1bf30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1bf34:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1bf38:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1bf3a:	5d2b      	ldrb	r3, [r5, r4]
   1bf3c:	f003 030f 	and.w	r3, r3, #15
   1bf40:	2b07      	cmp	r3, #7
   1bf42:	d023      	beq.n	1bf8c <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1bf44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1c018 <ll_adv_enable+0x120>
   1bf48:	f898 0000 	ldrb.w	r0, [r8]
   1bf4c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1bf50:	f7ff f874 	bl	1b03c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1bf54:	f898 3000 	ldrb.w	r3, [r8]
   1bf58:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1bf5c:	2b40      	cmp	r3, #64	; 0x40
   1bf5e:	d02b      	beq.n	1bfb8 <ll_adv_enable+0xc0>
   1bf60:	2b60      	cmp	r3, #96	; 0x60
   1bf62:	d029      	beq.n	1bfb8 <ll_adv_enable+0xc0>
		bool priv = false;
   1bf64:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1bf66:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d03b      	beq.n	1bfe6 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1bf6e:	4b2a      	ldr	r3, [pc, #168]	; (1c018 <ll_adv_enable+0x120>)
   1bf70:	7a18      	ldrb	r0, [r3, #8]
   1bf72:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1bf74:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1bf76:	f8cd 8000 	str.w	r8, [sp]
   1bf7a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1bf7e:	f002 0207 	and.w	r2, r2, #7
   1bf82:	f000 0007 	and.w	r0, r0, #7
   1bf86:	f7fe f90b 	bl	1a1a0 <radio_adv_enable>
	return status;
   1bf8a:	e7c0      	b.n	1bf0e <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1bf8c:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1bf8e:	78f3      	ldrb	r3, [r6, #3]
   1bf90:	f013 0f01 	tst.w	r3, #1
   1bf94:	d102      	bne.n	1bf9c <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1bf96:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1bf9a:	e7e8      	b.n	1bf6e <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1bf9c:	5d28      	ldrb	r0, [r5, r4]
   1bf9e:	2100      	movs	r1, #0
   1bfa0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bfa4:	f7fe fdf4 	bl	1ab90 <ll_addr_get>
   1bfa8:	2206      	movs	r2, #6
   1bfaa:	4601      	mov	r1, r0
   1bfac:	4638      	mov	r0, r7
   1bfae:	f7e4 f987 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1bfb2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1bfb6:	e7da      	b.n	1bf6e <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1bfb8:	4917      	ldr	r1, [pc, #92]	; (1c018 <ll_adv_enable+0x120>)
   1bfba:	f811 0b02 	ldrb.w	r0, [r1], #2
   1bfbe:	2200      	movs	r2, #0
   1bfc0:	09c0      	lsrs	r0, r0, #7
   1bfc2:	f7ff f86b 	bl	1b09c <ll_rl_find>
   1bfc6:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1bfc8:	28ff      	cmp	r0, #255	; 0xff
   1bfca:	d002      	beq.n	1bfd2 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1bfcc:	2000      	movs	r0, #0
   1bfce:	f7ff fac7 	bl	1b560 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1bfd2:	4631      	mov	r1, r6
   1bfd4:	4640      	mov	r0, r8
   1bfd6:	f7ff f9f9 	bl	1b3cc <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1bfda:	4639      	mov	r1, r7
   1bfdc:	4640      	mov	r0, r8
   1bfde:	f7ff f9f5 	bl	1b3cc <ll_rl_pdu_adv_update>
			priv = true;
   1bfe2:	2301      	movs	r3, #1
   1bfe4:	e7c1      	b.n	1bf6a <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1bfe6:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1bfe8:	5d28      	ldrb	r0, [r5, r4]
   1bfea:	2100      	movs	r1, #0
   1bfec:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1bff0:	f7fe fdce 	bl	1ab90 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1bff4:	2206      	movs	r2, #6
   1bff6:	4601      	mov	r1, r0
   1bff8:	4630      	mov	r0, r6
   1bffa:	f7e4 f961 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1bffe:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1c000:	5d28      	ldrb	r0, [r5, r4]
   1c002:	2100      	movs	r1, #0
   1c004:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1c008:	f7fe fdc2 	bl	1ab90 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1c00c:	2206      	movs	r2, #6
   1c00e:	4601      	mov	r1, r0
   1c010:	4638      	mov	r0, r7
   1c012:	f7e4 f955 	bl	2c0 <memcpy>
   1c016:	e7aa      	b.n	1bf6e <ll_adv_enable+0x76>
   1c018:	20001b4c 	.word	0x20001b4c

0001c01c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c01e:	4607      	mov	r7, r0
   1c020:	460e      	mov	r6, r1
   1c022:	4615      	mov	r5, r2
   1c024:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1c026:	f7fd fb31 	bl	1968c <radio_scan_is_enabled>
   1c02a:	b110      	cbz	r0, 1c032 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c02c:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1c02e:	4610      	mov	r0, r2
   1c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c032:	4602      	mov	r2, r0
	ll_scan.type = type;
   1c034:	4906      	ldr	r1, [pc, #24]	; (1c050 <ll_scan_params_set+0x34>)
   1c036:	790b      	ldrb	r3, [r1, #4]
   1c038:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1c03c:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1c03e:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1c040:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1c044:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1c048:	f360 1387 	bfi	r3, r0, #6, #2
   1c04c:	710b      	strb	r3, [r1, #4]
	return 0;
   1c04e:	e7ee      	b.n	1c02e <ll_scan_params_set+0x12>
   1c050:	20001b5c 	.word	0x20001b5c

0001c054 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1c054:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c056:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1c058:	b120      	cbz	r0, 1c064 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1c05a:	f7fd fb17 	bl	1968c <radio_scan_is_enabled>
   1c05e:	b128      	cbz	r0, 1c06c <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1c060:	2000      	movs	r0, #0
   1c062:	e001      	b.n	1c068 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1c064:	f7fe fbac 	bl	1a7c0 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1c068:	b005      	add	sp, #20
   1c06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1c06c:	4c18      	ldr	r4, [pc, #96]	; (1c0d0 <ll_scan_enable+0x7c>)
   1c06e:	7920      	ldrb	r0, [r4, #4]
   1c070:	0980      	lsrs	r0, r0, #6
   1c072:	f7fe fffb 	bl	1b06c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1c076:	7923      	ldrb	r3, [r4, #4]
   1c078:	f013 0f01 	tst.w	r3, #1
   1c07c:	d00d      	beq.n	1c09a <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c07e:	7923      	ldrb	r3, [r4, #4]
   1c080:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1c084:	2b20      	cmp	r3, #32
   1c086:	d003      	beq.n	1c090 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c088:	2b30      	cmp	r3, #48	; 0x30
   1c08a:	d001      	beq.n	1c090 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1c08c:	2700      	movs	r7, #0
   1c08e:	e005      	b.n	1c09c <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1c090:	2000      	movs	r0, #0
   1c092:	f7ff fa65 	bl	1b560 <ll_rl_rpa_update>
		rpa_gen = 1;
   1c096:	2701      	movs	r7, #1
   1c098:	e000      	b.n	1c09c <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1c09a:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1c09c:	4d0c      	ldr	r5, [pc, #48]	; (1c0d0 <ll_scan_enable+0x7c>)
   1c09e:	792c      	ldrb	r4, [r5, #4]
   1c0a0:	f004 060f 	and.w	r6, r4, #15
   1c0a4:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1c0a8:	2100      	movs	r1, #0
   1c0aa:	4620      	mov	r0, r4
   1c0ac:	f7fe fd70 	bl	1ab90 <ll_addr_get>
   1c0b0:	882b      	ldrh	r3, [r5, #0]
   1c0b2:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1c0b4:	792a      	ldrb	r2, [r5, #4]
   1c0b6:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1c0b8:	25ff      	movs	r5, #255	; 0xff
   1c0ba:	9503      	str	r5, [sp, #12]
   1c0bc:	9702      	str	r7, [sp, #8]
   1c0be:	9201      	str	r2, [sp, #4]
   1c0c0:	9100      	str	r1, [sp, #0]
   1c0c2:	4602      	mov	r2, r0
   1c0c4:	4621      	mov	r1, r4
   1c0c6:	4630      	mov	r0, r6
   1c0c8:	f7fe fa7a 	bl	1a5c0 <radio_scan_enable>
	return status;
   1c0cc:	e7cc      	b.n	1c068 <ll_scan_enable+0x14>
   1c0ce:	bf00      	nop
   1c0d0:	20001b5c 	.word	0x20001b5c

0001c0d4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1c0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0d8:	b085      	sub	sp, #20
   1c0da:	4607      	mov	r7, r0
   1c0dc:	4688      	mov	r8, r1
   1c0de:	4615      	mov	r5, r2
   1c0e0:	461e      	mov	r6, r3
   1c0e2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1c0e6:	f7fd fad1 	bl	1968c <radio_scan_is_enabled>
   1c0ea:	b120      	cbz	r0, 1c0f6 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c0ec:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1c0ee:	4618      	mov	r0, r3
   1c0f0:	b005      	add	sp, #20
   1c0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1c0f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1c0fa:	9300      	str	r3, [sp, #0]
   1c0fc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1c100:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1c104:	990c      	ldr	r1, [sp, #48]	; 0x30
   1c106:	4630      	mov	r0, r6
   1c108:	f7fd fada 	bl	196c0 <radio_connect_enable>
	if (status) {
   1c10c:	4603      	mov	r3, r0
   1c10e:	2800      	cmp	r0, #0
   1c110:	d1ed      	bne.n	1c0ee <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1c112:	4628      	mov	r0, r5
   1c114:	f7fe ffaa 	bl	1b06c <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1c118:	b1c5      	cbz	r5, 1c14c <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1c11a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c11e:	1ea3      	subs	r3, r4, #2
   1c120:	b2db      	uxtb	r3, r3
   1c122:	2b01      	cmp	r3, #1
   1c124:	d91f      	bls.n	1c166 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1c126:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1c128:	2100      	movs	r1, #0
   1c12a:	4620      	mov	r0, r4
   1c12c:	f7fe fd30 	bl	1ab90 <ll_addr_get>
   1c130:	f8cd 900c 	str.w	r9, [sp, #12]
   1c134:	9602      	str	r6, [sp, #8]
   1c136:	9501      	str	r5, [sp, #4]
   1c138:	f8cd 8000 	str.w	r8, [sp]
   1c13c:	463b      	mov	r3, r7
   1c13e:	4602      	mov	r2, r0
   1c140:	4621      	mov	r1, r4
   1c142:	2000      	movs	r0, #0
   1c144:	f7fe fa3c 	bl	1a5c0 <radio_scan_enable>
   1c148:	4603      	mov	r3, r0
   1c14a:	e7d0      	b.n	1c0ee <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1c14c:	f7ff f936 	bl	1b3bc <ctrl_rl_enabled>
   1c150:	b910      	cbnz	r0, 1c158 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1c152:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1c156:	e7e2      	b.n	1c11e <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1c158:	2200      	movs	r2, #0
   1c15a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1c15c:	4630      	mov	r0, r6
   1c15e:	f7fe ff9d 	bl	1b09c <ll_rl_find>
   1c162:	4681      	mov	r9, r0
   1c164:	e7db      	b.n	1c11e <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1c166:	2000      	movs	r0, #0
   1c168:	f7ff f9fa 	bl	1b560 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1c16c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1c170:	2601      	movs	r6, #1
   1c172:	e7d9      	b.n	1c128 <ll_create_connection+0x54>

0001c174 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1c174:	4b01      	ldr	r3, [pc, #4]	; (1c17c <pool_id+0x8>)
   1c176:	1ac0      	subs	r0, r0, r3
}
   1c178:	1140      	asrs	r0, r0, #5
   1c17a:	4770      	bx	lr
   1c17c:	2000d190 	.word	0x2000d190

0001c180 <net_buf_pool_get>:
}
   1c180:	4b01      	ldr	r3, [pc, #4]	; (1c188 <net_buf_pool_get+0x8>)
   1c182:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1c186:	4770      	bx	lr
   1c188:	2000d190 	.word	0x2000d190

0001c18c <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1c18c:	2300      	movs	r3, #0
   1c18e:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1c190:	f100 0310 	add.w	r3, r0, #16
   1c194:	6083      	str	r3, [r0, #8]
   1c196:	4770      	bx	lr

0001c198 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1c198:	b570      	push	{r4, r5, r6, lr}
   1c19a:	4605      	mov	r5, r0
	__asm__ volatile(
   1c19c:	f04f 0320 	mov.w	r3, #32
   1c1a0:	f3ef 8611 	mrs	r6, BASEPRI
   1c1a4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c1a8:	8a43      	ldrh	r3, [r0, #18]
   1c1aa:	b373      	cbz	r3, 1c20a <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c1ac:	8a02      	ldrh	r2, [r0, #16]
   1c1ae:	4293      	cmp	r3, r2
   1c1b0:	d207      	bcs.n	1c1c2 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1c1b2:	2100      	movs	r1, #0
   1c1b4:	f00e f940 	bl	2a438 <k_queue_get>
			if (buf) {
   1c1b8:	4604      	mov	r4, r0
   1c1ba:	b110      	cbz	r0, 1c1c2 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1c1bc:	f386 8811 	msr	BASEPRI, r6
   1c1c0:	e019      	b.n	1c1f6 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1c1c2:	8a6b      	ldrh	r3, [r5, #18]
   1c1c4:	1e5a      	subs	r2, r3, #1
   1c1c6:	826a      	strh	r2, [r5, #18]
   1c1c8:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1c1cc:	69ea      	ldr	r2, [r5, #28]
   1c1ce:	8a2c      	ldrh	r4, [r5, #16]
   1c1d0:	1ae4      	subs	r4, r4, r3
   1c1d2:	8aab      	ldrh	r3, [r5, #20]
   1c1d4:	3303      	adds	r3, #3
   1c1d6:	f023 0303 	bic.w	r3, r3, #3
   1c1da:	8ae9      	ldrh	r1, [r5, #22]
   1c1dc:	3103      	adds	r1, #3
   1c1de:	f021 0103 	bic.w	r1, r1, #3
   1c1e2:	440b      	add	r3, r1
   1c1e4:	3310      	adds	r3, #16
   1c1e6:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1c1ea:	4628      	mov	r0, r5
   1c1ec:	f7ff ffc2 	bl	1c174 <pool_id>
   1c1f0:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1c1f2:	8aab      	ldrh	r3, [r5, #20]
   1c1f4:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1c1f6:	2301      	movs	r3, #1
   1c1f8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1c1fa:	2300      	movs	r3, #0
   1c1fc:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1c1fe:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1c200:	4620      	mov	r0, r4
   1c202:	f7ff ffc3 	bl	1c18c <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1c206:	4620      	mov	r0, r4
   1c208:	bd70      	pop	{r4, r5, r6, pc}
   1c20a:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1c20e:	f00e f913 	bl	2a438 <k_queue_get>
	if (!buf) {
   1c212:	4604      	mov	r4, r0
   1c214:	2800      	cmp	r0, #0
   1c216:	d1ee      	bne.n	1c1f6 <net_buf_alloc+0x5e>
   1c218:	e7f5      	b.n	1c206 <net_buf_alloc+0x6e>

0001c21a <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1c21a:	b570      	push	{r4, r5, r6, lr}
   1c21c:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1c21e:	f00e f90b 	bl	2a438 <k_queue_get>
	if (!buf) {
   1c222:	4606      	mov	r6, r0
   1c224:	b188      	cbz	r0, 1c24a <net_buf_get+0x30>
   1c226:	4604      	mov	r4, r0
   1c228:	e009      	b.n	1c23e <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c22a:	2100      	movs	r1, #0
   1c22c:	4628      	mov	r0, r5
   1c22e:	f00e f903 	bl	2a438 <k_queue_get>
   1c232:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1c234:	7963      	ldrb	r3, [r4, #5]
   1c236:	f023 0301 	bic.w	r3, r3, #1
   1c23a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c23c:	4604      	mov	r4, r0
   1c23e:	7963      	ldrb	r3, [r4, #5]
   1c240:	f013 0f01 	tst.w	r3, #1
   1c244:	d1f1      	bne.n	1c22a <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1c246:	2300      	movs	r3, #0
   1c248:	6023      	str	r3, [r4, #0]

	return buf;
}
   1c24a:	4630      	mov	r0, r6
   1c24c:	bd70      	pop	{r4, r5, r6, pc}

0001c24e <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c24e:	f100 0310 	add.w	r3, r0, #16
   1c252:	4419      	add	r1, r3
   1c254:	6081      	str	r1, [r0, #8]
   1c256:	4770      	bx	lr

0001c258 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c258:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1c25a:	460a      	mov	r2, r1
   1c25c:	e004      	b.n	1c268 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1c25e:	7953      	ldrb	r3, [r2, #5]
   1c260:	f043 0301 	orr.w	r3, r3, #1
   1c264:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1c266:	4622      	mov	r2, r4
   1c268:	6814      	ldr	r4, [r2, #0]
   1c26a:	2c00      	cmp	r4, #0
   1c26c:	d1f7      	bne.n	1c25e <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1c26e:	f00e f8c7 	bl	2a400 <k_queue_append_list>
   1c272:	bd10      	pop	{r4, pc}

0001c274 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c274:	b538      	push	{r3, r4, r5, lr}
   1c276:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1c278:	e006      	b.n	1c288 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c27a:	79a0      	ldrb	r0, [r4, #6]
   1c27c:	f7ff ff80 	bl	1c180 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1c280:	4621      	mov	r1, r4
   1c282:	f00e f8b7 	bl	2a3f4 <k_queue_prepend>
{
   1c286:	462c      	mov	r4, r5
	while (buf) {
   1c288:	b17c      	cbz	r4, 1c2aa <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1c28a:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1c28c:	7923      	ldrb	r3, [r4, #4]
   1c28e:	3b01      	subs	r3, #1
   1c290:	b2db      	uxtb	r3, r3
   1c292:	7123      	strb	r3, [r4, #4]
   1c294:	b94b      	cbnz	r3, 1c2aa <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1c296:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1c298:	79a0      	ldrb	r0, [r4, #6]
   1c29a:	f7ff ff71 	bl	1c180 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c29e:	6983      	ldr	r3, [r0, #24]
   1c2a0:	2b00      	cmp	r3, #0
   1c2a2:	d0ea      	beq.n	1c27a <net_buf_unref+0x6>
			pool->destroy(buf);
   1c2a4:	4620      	mov	r0, r4
   1c2a6:	4798      	blx	r3
   1c2a8:	e7ed      	b.n	1c286 <net_buf_unref+0x12>
   1c2aa:	bd38      	pop	{r3, r4, r5, pc}

0001c2ac <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c2ac:	7903      	ldrb	r3, [r0, #4]
   1c2ae:	3301      	adds	r3, #1
   1c2b0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1c2b2:	4770      	bx	lr

0001c2b4 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1c2b4:	e000      	b.n	1c2b8 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1c2b6:	4618      	mov	r0, r3
	while (buf->frags) {
   1c2b8:	6803      	ldr	r3, [r0, #0]
   1c2ba:	2b00      	cmp	r3, #0
   1c2bc:	d1fb      	bne.n	1c2b6 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1c2be:	4770      	bx	lr

0001c2c0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c2c0:	b570      	push	{r4, r5, r6, lr}
   1c2c2:	4604      	mov	r4, r0
   1c2c4:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1c2c6:	6806      	ldr	r6, [r0, #0]
   1c2c8:	b11e      	cbz	r6, 1c2d2 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c2ca:	4608      	mov	r0, r1
   1c2cc:	f7ff fff2 	bl	1c2b4 <net_buf_frag_last>
   1c2d0:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c2d2:	6025      	str	r5, [r4, #0]
   1c2d4:	bd70      	pop	{r4, r5, r6, pc}

0001c2d6 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c2d6:	b538      	push	{r3, r4, r5, lr}
   1c2d8:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1c2da:	b138      	cbz	r0, 1c2ec <net_buf_frag_add+0x16>
   1c2dc:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c2de:	f7ff ffe9 	bl	1c2b4 <net_buf_frag_last>
   1c2e2:	4629      	mov	r1, r5
   1c2e4:	f7ff ffec 	bl	1c2c0 <net_buf_frag_insert>

	return head;
   1c2e8:	4620      	mov	r0, r4
}
   1c2ea:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1c2ec:	4608      	mov	r0, r1
   1c2ee:	f7ff ffdd 	bl	1c2ac <net_buf_ref>
   1c2f2:	bd38      	pop	{r3, r4, r5, pc}

0001c2f4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1c2f4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1c2f6:	b108      	cbz	r0, 1c2fc <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1c2f8:	680a      	ldr	r2, [r1, #0]
   1c2fa:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1c2fc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1c2fe:	2300      	movs	r3, #0
   1c300:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1c302:	4608      	mov	r0, r1
   1c304:	f7ff ffb6 	bl	1c274 <net_buf_unref>
#endif

	return next_frag;
}
   1c308:	4620      	mov	r0, r4
   1c30a:	bd10      	pop	{r4, pc}

0001c30c <net_buf_simple_add>:
	return buf->data + buf->len;
   1c30c:	6802      	ldr	r2, [r0, #0]
   1c30e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1c310:	4419      	add	r1, r3
   1c312:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1c314:	18d0      	adds	r0, r2, r3
   1c316:	4770      	bx	lr

0001c318 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1c318:	b538      	push	{r3, r4, r5, lr}
   1c31a:	460d      	mov	r5, r1
   1c31c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c31e:	4611      	mov	r1, r2
   1c320:	f7ff fff4 	bl	1c30c <net_buf_simple_add>
   1c324:	4622      	mov	r2, r4
   1c326:	4629      	mov	r1, r5
   1c328:	f7e3 ffca 	bl	2c0 <memcpy>
}
   1c32c:	bd38      	pop	{r3, r4, r5, pc}

0001c32e <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1c32e:	b510      	push	{r4, lr}
   1c330:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1c332:	2101      	movs	r1, #1
   1c334:	f7ff ffea 	bl	1c30c <net_buf_simple_add>
	*u8 = val;
   1c338:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1c33a:	bd10      	pop	{r4, pc}

0001c33c <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1c33c:	b510      	push	{r4, lr}
   1c33e:	b082      	sub	sp, #8
   1c340:	ac02      	add	r4, sp, #8
   1c342:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1c346:	2102      	movs	r1, #2
   1c348:	f7ff ffe0 	bl	1c30c <net_buf_simple_add>
   1c34c:	2202      	movs	r2, #2
   1c34e:	4621      	mov	r1, r4
   1c350:	f7e3 ffb6 	bl	2c0 <memcpy>
}
   1c354:	b002      	add	sp, #8
   1c356:	bd10      	pop	{r4, pc}

0001c358 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1c358:	b510      	push	{r4, lr}
   1c35a:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1c35c:	0a0b      	lsrs	r3, r1, #8
   1c35e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c362:	ac02      	add	r4, sp, #8
   1c364:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1c368:	2102      	movs	r1, #2
   1c36a:	f7ff ffcf 	bl	1c30c <net_buf_simple_add>
   1c36e:	2202      	movs	r2, #2
   1c370:	4621      	mov	r1, r4
   1c372:	f7e3 ffa5 	bl	2c0 <memcpy>
}
   1c376:	b002      	add	sp, #8
   1c378:	bd10      	pop	{r4, pc}

0001c37a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1c37a:	6803      	ldr	r3, [r0, #0]
   1c37c:	1a5b      	subs	r3, r3, r1
   1c37e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1c380:	8882      	ldrh	r2, [r0, #4]
   1c382:	4411      	add	r1, r2
   1c384:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1c386:	4618      	mov	r0, r3
   1c388:	4770      	bx	lr

0001c38a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1c38a:	b510      	push	{r4, lr}
   1c38c:	b082      	sub	sp, #8
   1c38e:	ac02      	add	r4, sp, #8
   1c390:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1c394:	2102      	movs	r1, #2
   1c396:	f7ff fff0 	bl	1c37a <net_buf_simple_push>
   1c39a:	2202      	movs	r2, #2
   1c39c:	4621      	mov	r1, r4
   1c39e:	f7e3 ff8f 	bl	2c0 <memcpy>
}
   1c3a2:	b002      	add	sp, #8
   1c3a4:	bd10      	pop	{r4, pc}

0001c3a6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1c3a6:	8883      	ldrh	r3, [r0, #4]
   1c3a8:	1a5b      	subs	r3, r3, r1
   1c3aa:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1c3ac:	6803      	ldr	r3, [r0, #0]
   1c3ae:	4419      	add	r1, r3
   1c3b0:	6001      	str	r1, [r0, #0]
}
   1c3b2:	4608      	mov	r0, r1
   1c3b4:	4770      	bx	lr

0001c3b6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1c3b6:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1c3b8:	6803      	ldr	r3, [r0, #0]
   1c3ba:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1c3bc:	2101      	movs	r1, #1
   1c3be:	f7ff fff2 	bl	1c3a6 <net_buf_simple_pull>

	return val;
}
   1c3c2:	4620      	mov	r0, r4
   1c3c4:	bd10      	pop	{r4, pc}

0001c3c6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1c3c6:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1c3c8:	6803      	ldr	r3, [r0, #0]
   1c3ca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c3cc:	2102      	movs	r1, #2
   1c3ce:	f7ff ffea 	bl	1c3a6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1c3d2:	4620      	mov	r0, r4
   1c3d4:	bd10      	pop	{r4, pc}

0001c3d6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c3d6:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1c3da:	1a18      	subs	r0, r3, r0
   1c3dc:	4770      	bx	lr

0001c3de <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1c3de:	b538      	push	{r3, r4, r5, lr}
   1c3e0:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c3e2:	88c4      	ldrh	r4, [r0, #6]
   1c3e4:	f7ff fff7 	bl	1c3d6 <net_buf_simple_headroom>
   1c3e8:	1a20      	subs	r0, r4, r0
   1c3ea:	88ab      	ldrh	r3, [r5, #4]
}
   1c3ec:	1ac0      	subs	r0, r0, r3
   1c3ee:	bd38      	pop	{r3, r4, r5, pc}

0001c3f0 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1c3f0:	b510      	push	{r4, lr}
   1c3f2:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1c3f4:	6883      	ldr	r3, [r0, #8]
   1c3f6:	b18b      	cbz	r3, 1c41c <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1c3f8:	b1b1      	cbz	r1, 1c428 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1c3fa:	68a3      	ldr	r3, [r4, #8]
   1c3fc:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1c3fe:	781b      	ldrb	r3, [r3, #0]
   1c400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1c404:	2b60      	cmp	r3, #96	; 0x60
   1c406:	d01d      	beq.n	1c444 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1c408:	4b18      	ldr	r3, [pc, #96]	; (1c46c <processing_data+0x7c>)
   1c40a:	6a1a      	ldr	r2, [r3, #32]
   1c40c:	3201      	adds	r2, #1
   1c40e:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1c410:	68da      	ldr	r2, [r3, #12]
   1c412:	3201      	adds	r2, #1
   1c414:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1c416:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1c418:	bb18      	cbnz	r0, 1c462 <processing_data+0x72>
   1c41a:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1c41c:	4a13      	ldr	r2, [pc, #76]	; (1c46c <processing_data+0x7c>)
   1c41e:	6813      	ldr	r3, [r2, #0]
   1c420:	3301      	adds	r3, #1
   1c422:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1c424:	2002      	movs	r0, #2
   1c426:	e7f7      	b.n	1c418 <processing_data+0x28>
	return pkt->iface;
   1c428:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1c42a:	6843      	ldr	r3, [r0, #4]
   1c42c:	681b      	ldr	r3, [r3, #0]
   1c42e:	4621      	mov	r1, r4
   1c430:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1c432:	2801      	cmp	r0, #1
   1c434:	d0e1      	beq.n	1c3fa <processing_data+0xa>
			if (ret == NET_DROP) {
   1c436:	2802      	cmp	r0, #2
   1c438:	d1ee      	bne.n	1c418 <processing_data+0x28>
   1c43a:	4a0c      	ldr	r2, [pc, #48]	; (1c46c <processing_data+0x7c>)
   1c43c:	6813      	ldr	r3, [r2, #0]
   1c43e:	3301      	adds	r3, #1
   1c440:	6013      	str	r3, [r2, #0]
   1c442:	e7e9      	b.n	1c418 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1c444:	4a09      	ldr	r2, [pc, #36]	; (1c46c <processing_data+0x7c>)
   1c446:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1c448:	3301      	adds	r3, #1
   1c44a:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1c44c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c450:	220a      	movs	r2, #10
   1c452:	f362 03c6 	bfi	r3, r2, #3, #4
   1c456:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1c45a:	4620      	mov	r0, r4
   1c45c:	f006 fd1e 	bl	22e9c <net_ipv6_process_pkt>
   1c460:	e7da      	b.n	1c418 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1c462:	4620      	mov	r0, r4
   1c464:	f002 fc75 	bl	1ed52 <net_pkt_unref>
		break;
	}
}
   1c468:	e7d7      	b.n	1c41a <processing_data+0x2a>
   1c46a:	bf00      	nop
   1c46c:	20002ae0 	.word	0x20002ae0

0001c470 <net_rx_thread>:

static void net_rx_thread(void)
{
   1c470:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1c472:	4c16      	ldr	r4, [pc, #88]	; (1c4cc <net_rx_thread+0x5c>)
   1c474:	4620      	mov	r0, r4
   1c476:	f001 faaf 	bl	1d9d8 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c47a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c47e:	4620      	mov	r0, r4
   1c480:	f00e fb5c 	bl	2ab3c <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1c484:	f001 faee 	bl	1da64 <net_if_post_init>
   1c488:	e010      	b.n	1c4ac <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1c48a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c48c:	2200      	movs	r2, #0
   1c48e:	e002      	b.n	1c496 <net_rx_thread+0x26>
		bytes += buf->len;
   1c490:	8999      	ldrh	r1, [r3, #12]
   1c492:	440a      	add	r2, r1
		buf = buf->frags;
   1c494:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c496:	2b00      	cmp	r3, #0
   1c498:	d1fa      	bne.n	1c490 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1c49a:	490d      	ldr	r1, [pc, #52]	; (1c4d0 <net_rx_thread+0x60>)
   1c49c:	688b      	ldr	r3, [r1, #8]
   1c49e:	441a      	add	r2, r3
   1c4a0:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1c4a2:	2100      	movs	r1, #0
   1c4a4:	f7ff ffa4 	bl	1c3f0 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c4a8:	f00e f9dc 	bl	2a864 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1c4ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c4b0:	4808      	ldr	r0, [pc, #32]	; (1c4d4 <net_rx_thread+0x64>)
   1c4b2:	f00d ffc1 	bl	2a438 <k_queue_get>
	for (i = 0; i < size; i++) {
   1c4b6:	2300      	movs	r3, #0
   1c4b8:	f240 52db 	movw	r2, #1499	; 0x5db
   1c4bc:	4293      	cmp	r3, r2
   1c4be:	d8e4      	bhi.n	1c48a <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1c4c0:	4a05      	ldr	r2, [pc, #20]	; (1c4d8 <net_rx_thread+0x68>)
   1c4c2:	5cd2      	ldrb	r2, [r2, r3]
   1c4c4:	2aaa      	cmp	r2, #170	; 0xaa
   1c4c6:	d1e0      	bne.n	1c48a <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1c4c8:	3301      	adds	r3, #1
   1c4ca:	e7f5      	b.n	1c4b8 <net_rx_thread+0x48>
   1c4cc:	2000d128 	.word	0x2000d128
   1c4d0:	20002ae0 	.word	0x20002ae0
   1c4d4:	20001b64 	.word	0x20001b64
   1c4d8:	200047e8 	.word	0x200047e8

0001c4dc <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1c4dc:	b500      	push	{lr}
   1c4de:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1c4e0:	480b      	ldr	r0, [pc, #44]	; (1c510 <init_rx_queue+0x34>)
   1c4e2:	f00d ff4e 	bl	2a382 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c4e6:	2300      	movs	r3, #0
   1c4e8:	9305      	str	r3, [sp, #20]
   1c4ea:	2201      	movs	r2, #1
   1c4ec:	9204      	str	r2, [sp, #16]
   1c4ee:	f06f 0207 	mvn.w	r2, #7
   1c4f2:	9203      	str	r2, [sp, #12]
   1c4f4:	9302      	str	r3, [sp, #8]
   1c4f6:	9301      	str	r3, [sp, #4]
   1c4f8:	9300      	str	r3, [sp, #0]
   1c4fa:	4b06      	ldr	r3, [pc, #24]	; (1c514 <init_rx_queue+0x38>)
   1c4fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1c500:	4905      	ldr	r1, [pc, #20]	; (1c518 <init_rx_queue+0x3c>)
   1c502:	4806      	ldr	r0, [pc, #24]	; (1c51c <init_rx_queue+0x40>)
   1c504:	f00e fd86 	bl	2b014 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1c508:	b007      	add	sp, #28
   1c50a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c50e:	bf00      	nop
   1c510:	20001b64 	.word	0x20001b64
   1c514:	0001c471 	.word	0x0001c471
   1c518:	200047e8 	.word	0x200047e8
   1c51c:	20001b74 	.word	0x20001b74

0001c520 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1c520:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1c522:	f002 ffb2 	bl	1f48a <net_pkt_init>

	net_context_init();
   1c526:	f002 faf1 	bl	1eb0c <net_context_init>
	net_icmpv6_init();
   1c52a:	f004 fa0b 	bl	20944 <net_icmpv6_init>
	net_ipv6_init();
   1c52e:	f006 fe89 	bl	23244 <net_ipv6_init>
	net_conn_init();
   1c532:	f00a fb55 	bl	26be0 <net_conn_init>
	net_udp_init();
   1c536:	f008 fa6b 	bl	24a10 <net_udp_init>
	net_tcp_init();
   1c53a:	f008 fc4f 	bl	24ddc <net_tcp_init>
	net_route_init();
   1c53e:	f007 ffca 	bl	244d6 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1c542:	f008 f8b3 	bl	246ac <net_mgmt_event_init>

	init_rx_queue();
   1c546:	f7ff ffc9 	bl	1c4dc <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1c54a:	2000      	movs	r0, #0
   1c54c:	bd08      	pop	{r3, pc}
	...

0001c550 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1c550:	2800      	cmp	r0, #0
   1c552:	f000 80bc 	beq.w	1c6ce <net_send_data+0x17e>
{
   1c556:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c558:	b091      	sub	sp, #68	; 0x44
   1c55a:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1c55c:	6883      	ldr	r3, [r0, #8]
   1c55e:	2b00      	cmp	r3, #0
   1c560:	f000 80b8 	beq.w	1c6d4 <net_send_data+0x184>
	return pkt->iface;
   1c564:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1c566:	2b00      	cmp	r3, #0
   1c568:	f000 80b7 	beq.w	1c6da <net_send_data+0x18a>
	return pkt->family;
   1c56c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1c570:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1c574:	2b0a      	cmp	r3, #10
   1c576:	d103      	bne.n	1c580 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1c578:	4a59      	ldr	r2, [pc, #356]	; (1c6e0 <net_send_data+0x190>)
   1c57a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c57c:	3301      	adds	r3, #1
   1c57e:	6293      	str	r3, [r2, #40]	; 0x28
   1c580:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c584:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c588:	2b0a      	cmp	r3, #10
   1c58a:	d00b      	beq.n	1c5a4 <net_send_data+0x54>
	return 0;
   1c58c:	2000      	movs	r0, #0
	if (status < 0) {
   1c58e:	2800      	cmp	r0, #0
   1c590:	db06      	blt.n	1c5a0 <net_send_data+0x50>
	} else if (status > 0) {
   1c592:	f340 8091 	ble.w	1c6b8 <net_send_data+0x168>
		processing_data(pkt, true);
   1c596:	2101      	movs	r1, #1
   1c598:	4620      	mov	r0, r4
   1c59a:	f7ff ff29 	bl	1c3f0 <processing_data>
		return 0;
   1c59e:	2000      	movs	r0, #0
}
   1c5a0:	b011      	add	sp, #68	; 0x44
   1c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1c5a4:	68a3      	ldr	r3, [r4, #8]
   1c5a6:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1c5a8:	3518      	adds	r5, #24
   1c5aa:	f004 fd93 	bl	210d4 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c5ae:	2210      	movs	r2, #16
   1c5b0:	4601      	mov	r1, r0
   1c5b2:	4628      	mov	r0, r5
   1c5b4:	f00f fcce 	bl	2bf54 <memcmp>
   1c5b8:	2800      	cmp	r0, #0
   1c5ba:	d07a      	beq.n	1c6b2 <net_send_data+0x162>
   1c5bc:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1c5be:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c5c0:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5c4:	b9ab      	cbnz	r3, 1c5f2 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c5c6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c5c8:	2b00      	cmp	r3, #0
   1c5ca:	d141      	bne.n	1c650 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5cc:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c5ce:	2b00      	cmp	r3, #0
   1c5d0:	d140      	bne.n	1c654 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1c5d2:	68c2      	ldr	r2, [r0, #12]
   1c5d4:	0a13      	lsrs	r3, r2, #8
   1c5d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1c5da:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c5de:	0211      	lsls	r1, r2, #8
   1c5e0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1c5e4:	430b      	orrs	r3, r1
   1c5e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5ea:	2b01      	cmp	r3, #1
   1c5ec:	d034      	beq.n	1c658 <net_send_data+0x108>
   1c5ee:	2300      	movs	r3, #0
   1c5f0:	e000      	b.n	1c5f4 <net_send_data+0xa4>
   1c5f2:	2300      	movs	r3, #0
   1c5f4:	b393      	cbz	r3, 1c65c <net_send_data+0x10c>
   1c5f6:	68a3      	ldr	r3, [r4, #8]
   1c5f8:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1c5fc:	ae0c      	add	r6, sp, #48	; 0x30
   1c5fe:	4675      	mov	r5, lr
   1c600:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1c604:	6869      	ldr	r1, [r5, #4]
   1c606:	68aa      	ldr	r2, [r5, #8]
   1c608:	68eb      	ldr	r3, [r5, #12]
   1c60a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1c60c:	ab10      	add	r3, sp, #64	; 0x40
   1c60e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c612:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1c616:	af08      	add	r7, sp, #32
   1c618:	4673      	mov	r3, lr
   1c61a:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c61e:	6859      	ldr	r1, [r3, #4]
   1c620:	689a      	ldr	r2, [r3, #8]
   1c622:	68db      	ldr	r3, [r3, #12]
   1c624:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1c626:	af08      	add	r7, sp, #32
   1c628:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1c62a:	f8ce 0008 	str.w	r0, [lr, #8]
   1c62e:	6069      	str	r1, [r5, #4]
   1c630:	60aa      	str	r2, [r5, #8]
   1c632:	60eb      	str	r3, [r5, #12]
   1c634:	68a3      	ldr	r3, [r4, #8]
   1c636:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1c638:	ad04      	add	r5, sp, #16
   1c63a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1c63e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c644:	61b8      	str	r0, [r7, #24]
   1c646:	61f9      	str	r1, [r7, #28]
   1c648:	623a      	str	r2, [r7, #32]
   1c64a:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1c64c:	2001      	movs	r0, #1
   1c64e:	e79e      	b.n	1c58e <net_send_data+0x3e>
   1c650:	2300      	movs	r3, #0
   1c652:	e7cf      	b.n	1c5f4 <net_send_data+0xa4>
   1c654:	2300      	movs	r3, #0
   1c656:	e7cd      	b.n	1c5f4 <net_send_data+0xa4>
   1c658:	2301      	movs	r3, #1
   1c65a:	e7cb      	b.n	1c5f4 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1c65c:	2100      	movs	r1, #0
   1c65e:	f000 f9c5 	bl	1c9ec <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1c662:	2800      	cmp	r0, #0
   1c664:	d1c7      	bne.n	1c5f6 <net_send_data+0xa6>
   1c666:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1c668:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c66a:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c66e:	b99a      	cbnz	r2, 1c698 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c670:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c672:	b9aa      	cbnz	r2, 1c6a0 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c674:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c676:	b9aa      	cbnz	r2, 1c6a4 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1c678:	68da      	ldr	r2, [r3, #12]
   1c67a:	0a13      	lsrs	r3, r2, #8
   1c67c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1c680:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c684:	0211      	lsls	r1, r2, #8
   1c686:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1c68a:	430b      	orrs	r3, r1
   1c68c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c690:	2b01      	cmp	r3, #1
   1c692:	d009      	beq.n	1c6a8 <net_send_data+0x158>
   1c694:	2300      	movs	r3, #0
   1c696:	e000      	b.n	1c69a <net_send_data+0x14a>
   1c698:	2300      	movs	r3, #0
   1c69a:	b93b      	cbnz	r3, 1c6ac <net_send_data+0x15c>
	return 0;
   1c69c:	2000      	movs	r0, #0
   1c69e:	e776      	b.n	1c58e <net_send_data+0x3e>
   1c6a0:	2300      	movs	r3, #0
   1c6a2:	e7fa      	b.n	1c69a <net_send_data+0x14a>
   1c6a4:	2300      	movs	r3, #0
   1c6a6:	e7f8      	b.n	1c69a <net_send_data+0x14a>
   1c6a8:	2301      	movs	r3, #1
   1c6aa:	e7f6      	b.n	1c69a <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1c6ac:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1c6b0:	e76d      	b.n	1c58e <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1c6b2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1c6b6:	e76a      	b.n	1c58e <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1c6b8:	4621      	mov	r1, r4
   1c6ba:	6960      	ldr	r0, [r4, #20]
   1c6bc:	f000 ffe0 	bl	1d680 <net_if_send_data>
   1c6c0:	2802      	cmp	r0, #2
   1c6c2:	d001      	beq.n	1c6c8 <net_send_data+0x178>
	return 0;
   1c6c4:	2000      	movs	r0, #0
   1c6c6:	e76b      	b.n	1c5a0 <net_send_data+0x50>
		return -EIO;
   1c6c8:	f06f 0004 	mvn.w	r0, #4
   1c6cc:	e768      	b.n	1c5a0 <net_send_data+0x50>
		return -ENODATA;
   1c6ce:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1c6d2:	4770      	bx	lr
   1c6d4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1c6d8:	e762      	b.n	1c5a0 <net_send_data+0x50>
		return -EINVAL;
   1c6da:	f06f 0015 	mvn.w	r0, #21
   1c6de:	e75f      	b.n	1c5a0 <net_send_data+0x50>
   1c6e0:	20002ae0 	.word	0x20002ae0

0001c6e4 <net_recv_data>:
{
   1c6e4:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1c6e6:	688b      	ldr	r3, [r1, #8]
   1c6e8:	b19b      	cbz	r3, 1c712 <net_recv_data+0x2e>
   1c6ea:	f3bf 8f5b 	dmb	ish
   1c6ee:	68c3      	ldr	r3, [r0, #12]
   1c6f0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c6f4:	f013 0f01 	tst.w	r3, #1
   1c6f8:	d00e      	beq.n	1c718 <net_recv_data+0x34>
	pkt->iface = iface;
   1c6fa:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c6fc:	7d43      	ldrb	r3, [r0, #21]
   1c6fe:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c702:	7d43      	ldrb	r3, [r0, #21]
   1c704:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1c708:	4805      	ldr	r0, [pc, #20]	; (1c720 <net_recv_data+0x3c>)
   1c70a:	f00d fe6d 	bl	2a3e8 <k_queue_append>
	return 0;
   1c70e:	2000      	movs	r0, #0
   1c710:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1c712:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1c716:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1c718:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1c71c:	bd08      	pop	{r3, pc}
   1c71e:	bf00      	nop
   1c720:	20001b64 	.word	0x20001b64

0001c724 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1c724:	2302      	movs	r3, #2
   1c726:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1c72a:	4770      	bx	lr

0001c72c <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1c72c:	2300      	movs	r3, #0
   1c72e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1c732:	4770      	bx	lr

0001c734 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1c734:	2300      	movs	r3, #0
   1c736:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1c73a:	4770      	bx	lr

0001c73c <ipv6_addr_find>:
{
   1c73c:	b570      	push	{r4, r5, r6, lr}
   1c73e:	4605      	mov	r5, r0
   1c740:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c742:	2400      	movs	r4, #0
   1c744:	e000      	b.n	1c748 <ipv6_addr_find+0xc>
   1c746:	3401      	adds	r4, #1
   1c748:	2c02      	cmp	r4, #2
   1c74a:	dc19      	bgt.n	1c780 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1c74c:	236c      	movs	r3, #108	; 0x6c
   1c74e:	fb03 5304 	mla	r3, r3, r4, r5
   1c752:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c756:	2b00      	cmp	r3, #0
   1c758:	d0f5      	beq.n	1c746 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1c75a:	216c      	movs	r1, #108	; 0x6c
   1c75c:	fb01 f104 	mul.w	r1, r1, r4
   1c760:	3120      	adds	r1, #32
   1c762:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c764:	2210      	movs	r2, #16
   1c766:	4411      	add	r1, r2
   1c768:	4630      	mov	r0, r6
   1c76a:	f00f fbf3 	bl	2bf54 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1c76e:	2800      	cmp	r0, #0
   1c770:	d1e9      	bne.n	1c746 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1c772:	206c      	movs	r0, #108	; 0x6c
   1c774:	fb00 f004 	mul.w	r0, r0, r4
   1c778:	3020      	adds	r0, #32
   1c77a:	4428      	add	r0, r5
   1c77c:	300c      	adds	r0, #12
   1c77e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1c780:	2000      	movs	r0, #0
}
   1c782:	bd70      	pop	{r4, r5, r6, pc}

0001c784 <ipv6_prefix_find>:
{
   1c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c786:	4605      	mov	r5, r0
   1c788:	460e      	mov	r6, r1
   1c78a:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1c78c:	2400      	movs	r4, #0
   1c78e:	e000      	b.n	1c792 <ipv6_prefix_find+0xe>
   1c790:	3401      	adds	r4, #1
   1c792:	2c01      	cmp	r4, #1
   1c794:	dc21      	bgt.n	1c7da <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1c796:	236c      	movs	r3, #108	; 0x6c
   1c798:	fb03 5304 	mla	r3, r3, r4, r5
   1c79c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c7a0:	2b00      	cmp	r3, #0
   1c7a2:	d0f5      	beq.n	1c790 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1c7a4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1c7a8:	0099      	lsls	r1, r3, #2
   1c7aa:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1c7ae:	4429      	add	r1, r5
   1c7b0:	2210      	movs	r2, #16
   1c7b2:	4411      	add	r1, r2
   1c7b4:	4630      	mov	r0, r6
   1c7b6:	f00f fbcd 	bl	2bf54 <memcmp>
   1c7ba:	2800      	cmp	r0, #0
   1c7bc:	d1e8      	bne.n	1c790 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1c7be:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1c7c2:	0093      	lsls	r3, r2, #2
   1c7c4:	461a      	mov	r2, r3
   1c7c6:	442b      	add	r3, r5
   1c7c8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1c7cc:	42bb      	cmp	r3, r7
   1c7ce:	d1df      	bne.n	1c790 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1c7d0:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1c7d4:	4428      	add	r0, r5
   1c7d6:	3010      	adds	r0, #16
   1c7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1c7da:	2000      	movs	r0, #0
}
   1c7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001c7e0 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1c7e0:	2300      	movs	r3, #0
   1c7e2:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1c7e6:	f3bf 8f5b 	dmb	ish
   1c7ea:	68c3      	ldr	r3, [r0, #12]
   1c7ec:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1c7f0:	f013 0f01 	tst.w	r3, #1
   1c7f4:	d100      	bne.n	1c7f8 <net_if_ipv6_start_dad+0x18>
   1c7f6:	4770      	bx	lr
{
   1c7f8:	b510      	push	{r4, lr}
   1c7fa:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1c7fc:	2301      	movs	r3, #1
   1c7fe:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1c802:	f006 f969 	bl	22ad8 <net_ipv6_start_dad>
   1c806:	b100      	cbz	r0, 1c80a <net_if_ipv6_start_dad+0x2a>
   1c808:	bd10      	pop	{r4, pc}
   1c80a:	2264      	movs	r2, #100	; 0x64
   1c80c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1c810:	4801      	ldr	r0, [pc, #4]	; (1c818 <net_if_ipv6_start_dad+0x38>)
   1c812:	f00e ffc9 	bl	2b7a8 <k_delayed_work_submit_to_queue>
}
   1c816:	e7f7      	b.n	1c808 <net_if_ipv6_start_dad+0x28>
   1c818:	20002c00 	.word	0x20002c00

0001c81c <net_if_ipv6_prefix_init>:
{
   1c81c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c81e:	b085      	sub	sp, #20
   1c820:	4605      	mov	r5, r0
   1c822:	460e      	mov	r6, r1
   1c824:	461f      	mov	r7, r3
	prefix->is_used = true;
   1c826:	2301      	movs	r3, #1
   1c828:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1c82c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1c830:	466c      	mov	r4, sp
   1c832:	6808      	ldr	r0, [r1, #0]
   1c834:	6849      	ldr	r1, [r1, #4]
   1c836:	68b2      	ldr	r2, [r6, #8]
   1c838:	68f3      	ldr	r3, [r6, #12]
   1c83a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c83c:	466c      	mov	r4, sp
   1c83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1c840:	62a8      	str	r0, [r5, #40]	; 0x28
   1c842:	62e9      	str	r1, [r5, #44]	; 0x2c
   1c844:	632a      	str	r2, [r5, #48]	; 0x30
   1c846:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1c848:	4907      	ldr	r1, [pc, #28]	; (1c868 <net_if_ipv6_prefix_init+0x4c>)
   1c84a:	4628      	mov	r0, r5
   1c84c:	f00e ff34 	bl	2b6b8 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1c850:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1c854:	d004      	beq.n	1c860 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1c856:	2300      	movs	r3, #0
   1c858:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1c85c:	b005      	add	sp, #20
   1c85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1c860:	2301      	movs	r3, #1
   1c862:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1c866:	e7f9      	b.n	1c85c <net_if_ipv6_prefix_init+0x40>
   1c868:	0001c72d 	.word	0x0001c72d

0001c86c <join_mcast_allnodes>:
{
   1c86c:	b500      	push	{lr}
   1c86e:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1c870:	f240 23ff 	movw	r3, #767	; 0x2ff
   1c874:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1c878:	2300      	movs	r3, #0
   1c87a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1c87e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1c882:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1c886:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1c88a:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1c88e:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1c892:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c896:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1c89a:	4669      	mov	r1, sp
   1c89c:	f006 faa4 	bl	22de8 <net_ipv6_mld_join>
}
   1c8a0:	b005      	add	sp, #20
   1c8a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001c8a6 <join_mcast_solicit_node>:
{
   1c8a6:	b500      	push	{lr}
   1c8a8:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1c8aa:	22ff      	movs	r2, #255	; 0xff
   1c8ac:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1c8b0:	2302      	movs	r3, #2
   1c8b2:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1c8b6:	2300      	movs	r3, #0
   1c8b8:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1c8bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1c8c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1c8c4:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1c8c8:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1c8cc:	2301      	movs	r3, #1
   1c8ce:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1c8d2:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1c8d6:	7b4b      	ldrb	r3, [r1, #13]
   1c8d8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1c8dc:	89cb      	ldrh	r3, [r1, #14]
   1c8de:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1c8e2:	4669      	mov	r1, sp
   1c8e4:	f006 fa80 	bl	22de8 <net_ipv6_mld_join>
}
   1c8e8:	b005      	add	sp, #20
   1c8ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001c8ee <leave_mcast_all>:
{
   1c8ee:	b538      	push	{r3, r4, r5, lr}
   1c8f0:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1c8f2:	2400      	movs	r4, #0
   1c8f4:	e000      	b.n	1c8f8 <leave_mcast_all+0xa>
   1c8f6:	3401      	adds	r4, #1
   1c8f8:	2c04      	cmp	r4, #4
   1c8fa:	dc1a      	bgt.n	1c932 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1c8fc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c900:	00d3      	lsls	r3, r2, #3
   1c902:	442b      	add	r3, r5
   1c904:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1c908:	f013 0f01 	tst.w	r3, #1
   1c90c:	d0f3      	beq.n	1c8f6 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1c90e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c912:	00d3      	lsls	r3, r2, #3
   1c914:	461a      	mov	r2, r3
   1c916:	442b      	add	r3, r5
   1c918:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1c91c:	f013 0f02 	tst.w	r3, #2
   1c920:	d0e9      	beq.n	1c8f6 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1c922:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1c926:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1c928:	3118      	adds	r1, #24
   1c92a:	4628      	mov	r0, r5
   1c92c:	f006 fa96 	bl	22e5c <net_ipv6_mld_leave>
   1c930:	e7e1      	b.n	1c8f6 <leave_mcast_all+0x8>
}
   1c932:	bd38      	pop	{r3, r4, r5, pc}

0001c934 <net_if_prepare_events>:
{
   1c934:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1c936:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c938:	4d0a      	ldr	r5, [pc, #40]	; (1c964 <net_if_prepare_events+0x30>)
   1c93a:	e00d      	b.n	1c958 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1c93c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c940:	0098      	lsls	r0, r3, #2
   1c942:	f105 0318 	add.w	r3, r5, #24
   1c946:	2200      	movs	r2, #0
   1c948:	2104      	movs	r1, #4
   1c94a:	4e07      	ldr	r6, [pc, #28]	; (1c968 <net_if_prepare_events+0x34>)
   1c94c:	4430      	add	r0, r6
   1c94e:	f00d fa2d 	bl	29dac <k_poll_event_init>
		ev_count++;
   1c952:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c954:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1c958:	4b04      	ldr	r3, [pc, #16]	; (1c96c <net_if_prepare_events+0x38>)
   1c95a:	429d      	cmp	r5, r3
   1c95c:	d1ee      	bne.n	1c93c <net_if_prepare_events+0x8>
}
   1c95e:	4620      	mov	r0, r4
   1c960:	bd70      	pop	{r4, r5, r6, pc}
   1c962:	bf00      	nop
   1c964:	2000d260 	.word	0x2000d260
   1c968:	2000d500 	.word	0x2000d500
   1c96c:	2000d500 	.word	0x2000d500

0001c970 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c970:	4b06      	ldr	r3, [pc, #24]	; (1c98c <net_if_lookup_by_dev+0x1c>)
   1c972:	4a07      	ldr	r2, [pc, #28]	; (1c990 <net_if_lookup_by_dev+0x20>)
   1c974:	4293      	cmp	r3, r2
   1c976:	d005      	beq.n	1c984 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1c978:	681a      	ldr	r2, [r3, #0]
   1c97a:	4282      	cmp	r2, r0
   1c97c:	d003      	beq.n	1c986 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c97e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1c982:	e7f6      	b.n	1c972 <net_if_lookup_by_dev+0x2>
	return NULL;
   1c984:	2300      	movs	r3, #0
}
   1c986:	4618      	mov	r0, r3
   1c988:	4770      	bx	lr
   1c98a:	bf00      	nop
   1c98c:	2000d260 	.word	0x2000d260
   1c990:	2000d500 	.word	0x2000d500

0001c994 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1c994:	4b03      	ldr	r3, [pc, #12]	; (1c9a4 <net_if_get_default+0x10>)
   1c996:	4a04      	ldr	r2, [pc, #16]	; (1c9a8 <net_if_get_default+0x14>)
   1c998:	429a      	cmp	r2, r3
   1c99a:	d001      	beq.n	1c9a0 <net_if_get_default+0xc>
	return __net_if_start;
   1c99c:	4802      	ldr	r0, [pc, #8]	; (1c9a8 <net_if_get_default+0x14>)
}
   1c99e:	4770      	bx	lr
		return NULL;
   1c9a0:	2000      	movs	r0, #0
   1c9a2:	4770      	bx	lr
   1c9a4:	2000d500 	.word	0x2000d500
   1c9a8:	2000d260 	.word	0x2000d260

0001c9ac <net_if_start_rs>:
{
   1c9ac:	b510      	push	{r4, lr}
   1c9ae:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1c9b0:	f006 fa16 	bl	22de0 <net_ipv6_start_rs>
   1c9b4:	b100      	cbz	r0, 1c9b8 <net_if_start_rs+0xc>
   1c9b6:	bd10      	pop	{r4, pc}
   1c9b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9bc:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1c9c0:	4801      	ldr	r0, [pc, #4]	; (1c9c8 <net_if_start_rs+0x1c>)
   1c9c2:	f00e fef1 	bl	2b7a8 <k_delayed_work_submit_to_queue>
}
   1c9c6:	e7f6      	b.n	1c9b6 <net_if_start_rs+0xa>
   1c9c8:	20002c00 	.word	0x20002c00

0001c9cc <rs_timeout>:
{
   1c9cc:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1c9ce:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1c9d2:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1c9d6:	3301      	adds	r3, #1
   1c9d8:	b2db      	uxtb	r3, r3
   1c9da:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1c9de:	2b02      	cmp	r3, #2
   1c9e0:	d900      	bls.n	1c9e4 <rs_timeout+0x18>
   1c9e2:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1c9e4:	f7ff ffe2 	bl	1c9ac <net_if_start_rs>
}
   1c9e8:	e7fb      	b.n	1c9e2 <rs_timeout+0x16>
	...

0001c9ec <net_if_ipv6_addr_lookup>:
{
   1c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9f0:	4607      	mov	r7, r0
   1c9f2:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c9f4:	4d1b      	ldr	r5, [pc, #108]	; (1ca64 <net_if_ipv6_addr_lookup+0x78>)
   1c9f6:	e02d      	b.n	1ca54 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1c9f8:	b9ee      	cbnz	r6, 1ca36 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c9fa:	3401      	adds	r4, #1
   1c9fc:	2c02      	cmp	r4, #2
   1c9fe:	dc27      	bgt.n	1ca50 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1ca00:	236c      	movs	r3, #108	; 0x6c
   1ca02:	fb03 5304 	mla	r3, r3, r4, r5
   1ca06:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1ca0a:	2e00      	cmp	r6, #0
   1ca0c:	d0f5      	beq.n	1c9fa <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1ca0e:	236c      	movs	r3, #108	; 0x6c
   1ca10:	fb03 5304 	mla	r3, r3, r4, r5
   1ca14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1ca16:	2b0a      	cmp	r3, #10
   1ca18:	d1ef      	bne.n	1c9fa <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1ca1a:	216c      	movs	r1, #108	; 0x6c
   1ca1c:	fb01 f104 	mul.w	r1, r1, r4
   1ca20:	3120      	adds	r1, #32
   1ca22:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1ca24:	2210      	movs	r2, #16
   1ca26:	4411      	add	r1, r2
   1ca28:	4638      	mov	r0, r7
   1ca2a:	f00f fa93 	bl	2bf54 <memcmp>
   1ca2e:	2800      	cmp	r0, #0
   1ca30:	d0e2      	beq.n	1c9f8 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1ca32:	2600      	movs	r6, #0
   1ca34:	e7e0      	b.n	1c9f8 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1ca36:	f1b8 0f00 	cmp.w	r8, #0
   1ca3a:	d001      	beq.n	1ca40 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1ca3c:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1ca40:	206c      	movs	r0, #108	; 0x6c
   1ca42:	fb00 f004 	mul.w	r0, r0, r4
   1ca46:	3020      	adds	r0, #32
   1ca48:	4428      	add	r0, r5
   1ca4a:	300c      	adds	r0, #12
   1ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ca50:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1ca54:	4b04      	ldr	r3, [pc, #16]	; (1ca68 <net_if_ipv6_addr_lookup+0x7c>)
   1ca56:	429d      	cmp	r5, r3
   1ca58:	d001      	beq.n	1ca5e <net_if_ipv6_addr_lookup+0x72>
   1ca5a:	2400      	movs	r4, #0
   1ca5c:	e7ce      	b.n	1c9fc <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1ca5e:	2000      	movs	r0, #0
}
   1ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca64:	2000d260 	.word	0x2000d260
   1ca68:	2000d500 	.word	0x2000d500

0001ca6c <dad_timeout>:
{
   1ca6c:	b530      	push	{r4, r5, lr}
   1ca6e:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1ca70:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1ca74:	a902      	add	r1, sp, #8
   1ca76:	2300      	movs	r3, #0
   1ca78:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1ca7c:	2301      	movs	r3, #1
   1ca7e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1ca82:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1ca86:	4620      	mov	r0, r4
   1ca88:	f7ff ffb0 	bl	1c9ec <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1ca8c:	4285      	cmp	r5, r0
   1ca8e:	d001      	beq.n	1ca94 <dad_timeout+0x28>
}
   1ca90:	b003      	add	sp, #12
   1ca92:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1ca94:	2300      	movs	r3, #0
   1ca96:	461a      	mov	r2, r3
   1ca98:	9901      	ldr	r1, [sp, #4]
   1ca9a:	4807      	ldr	r0, [pc, #28]	; (1cab8 <dad_timeout+0x4c>)
   1ca9c:	f007 fdcc 	bl	24638 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1caa0:	4621      	mov	r1, r4
   1caa2:	9801      	ldr	r0, [sp, #4]
   1caa4:	f004 faf6 	bl	21094 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1caa8:	9801      	ldr	r0, [sp, #4]
   1caaa:	f7ff fedf 	bl	1c86c <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1caae:	4621      	mov	r1, r4
   1cab0:	9801      	ldr	r0, [sp, #4]
   1cab2:	f7ff fef8 	bl	1c8a6 <join_mcast_solicit_node>
}
   1cab6:	e7eb      	b.n	1ca90 <dad_timeout+0x24>
   1cab8:	f060000d 	.word	0xf060000d

0001cabc <net_if_ipv6_addr_update_lifetime>:
{
   1cabc:	b508      	push	{r3, lr}
   1cabe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cac2:	fb02 f201 	mul.w	r2, r2, r1
   1cac6:	f100 0114 	add.w	r1, r0, #20
   1caca:	4802      	ldr	r0, [pc, #8]	; (1cad4 <net_if_ipv6_addr_update_lifetime+0x18>)
   1cacc:	f00e fe6c 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1cad0:	bd08      	pop	{r3, pc}
   1cad2:	bf00      	nop
   1cad4:	20002c00 	.word	0x20002c00

0001cad8 <net_if_ipv6_addr_add>:
{
   1cad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cadc:	b084      	sub	sp, #16
   1cade:	4605      	mov	r5, r0
   1cae0:	460e      	mov	r6, r1
   1cae2:	4690      	mov	r8, r2
   1cae4:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1cae6:	f7ff fe29 	bl	1c73c <ipv6_addr_find>
	if (ifaddr) {
   1caea:	4604      	mov	r4, r0
   1caec:	b118      	cbz	r0, 1caf6 <net_if_ipv6_addr_add+0x1e>
}
   1caee:	4620      	mov	r0, r4
   1caf0:	b004      	add	sp, #16
   1caf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1caf6:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1caf8:	2b02      	cmp	r3, #2
   1cafa:	dcf8      	bgt.n	1caee <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1cafc:	226c      	movs	r2, #108	; 0x6c
   1cafe:	fb02 5203 	mla	r2, r2, r3, r5
   1cb02:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1cb06:	b10a      	cbz	r2, 1cb0c <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1cb08:	3301      	adds	r3, #1
   1cb0a:	e7f5      	b.n	1caf8 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1cb0c:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1cb10:	fb0e fe03 	mul.w	lr, lr, r3
   1cb14:	f10e 0e20 	add.w	lr, lr, #32
   1cb18:	44ae      	add	lr, r5
   1cb1a:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1cb1e:	2301      	movs	r3, #1
   1cb20:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1cb24:	230a      	movs	r3, #10
   1cb26:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1cb2a:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1cb2e:	46ec      	mov	ip, sp
   1cb30:	6830      	ldr	r0, [r6, #0]
   1cb32:	6871      	ldr	r1, [r6, #4]
   1cb34:	68b2      	ldr	r2, [r6, #8]
   1cb36:	68f3      	ldr	r3, [r6, #12]
   1cb38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1cb3c:	466e      	mov	r6, sp
   1cb3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1cb40:	f8ce 0010 	str.w	r0, [lr, #16]
   1cb44:	f8ce 1014 	str.w	r1, [lr, #20]
   1cb48:	f8ce 2018 	str.w	r2, [lr, #24]
   1cb4c:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1cb50:	4910      	ldr	r1, [pc, #64]	; (1cb94 <net_if_ipv6_addr_add+0xbc>)
   1cb52:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1cb56:	f00e fdaf 	bl	2b6b8 <k_delayed_work_init>
	if (vlifetime) {
   1cb5a:	b96f      	cbnz	r7, 1cb78 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1cb5c:	2301      	movs	r3, #1
   1cb5e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1cb62:	4621      	mov	r1, r4
   1cb64:	4628      	mov	r0, r5
   1cb66:	f7ff fe3b 	bl	1c7e0 <net_if_ipv6_start_dad>
   1cb6a:	2300      	movs	r3, #0
   1cb6c:	461a      	mov	r2, r3
   1cb6e:	4629      	mov	r1, r5
   1cb70:	4809      	ldr	r0, [pc, #36]	; (1cb98 <net_if_ipv6_addr_add+0xc0>)
   1cb72:	f007 fd61 	bl	24638 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1cb76:	e7ba      	b.n	1caee <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1cb78:	2300      	movs	r3, #0
   1cb7a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1cb7e:	4907      	ldr	r1, [pc, #28]	; (1cb9c <net_if_ipv6_addr_add+0xc4>)
   1cb80:	f104 0014 	add.w	r0, r4, #20
   1cb84:	f00e fd98 	bl	2b6b8 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1cb88:	4639      	mov	r1, r7
   1cb8a:	4620      	mov	r0, r4
   1cb8c:	f7ff ff96 	bl	1cabc <net_if_ipv6_addr_update_lifetime>
   1cb90:	e7e7      	b.n	1cb62 <net_if_ipv6_addr_add+0x8a>
   1cb92:	bf00      	nop
   1cb94:	0001ca6d 	.word	0x0001ca6d
   1cb98:	f0600001 	.word	0xf0600001
   1cb9c:	0001c725 	.word	0x0001c725

0001cba0 <net_if_start_dad>:
{
   1cba0:	b570      	push	{r4, r5, r6, lr}
   1cba2:	b084      	sub	sp, #16
   1cba4:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1cba6:	2300      	movs	r3, #0
   1cba8:	9302      	str	r3, [sp, #8]
   1cbaa:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1cbac:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1cbb0:	22fe      	movs	r2, #254	; 0xfe
   1cbb2:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1cbb6:	2280      	movs	r2, #128	; 0x80
   1cbb8:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1cbbc:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1cbc0:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1cbc2:	7922      	ldrb	r2, [r4, #4]
   1cbc4:	2a06      	cmp	r2, #6
   1cbc6:	d020      	beq.n	1cc0a <net_if_start_dad+0x6a>
   1cbc8:	2a08      	cmp	r2, #8
   1cbca:	d044      	beq.n	1cc56 <net_if_start_dad+0xb6>
   1cbcc:	2a02      	cmp	r2, #2
   1cbce:	d008      	beq.n	1cbe2 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	2201      	movs	r2, #1
   1cbd4:	4669      	mov	r1, sp
   1cbd6:	4628      	mov	r0, r5
   1cbd8:	f7ff ff7e 	bl	1cad8 <net_if_ipv6_addr_add>
   1cbdc:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1cbde:	2400      	movs	r4, #0
   1cbe0:	e045      	b.n	1cc6e <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1cbe2:	7963      	ldrb	r3, [r4, #5]
   1cbe4:	2b01      	cmp	r3, #1
   1cbe6:	d1f3      	bne.n	1cbd0 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1cbe8:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1cbea:	22ff      	movs	r2, #255	; 0xff
   1cbec:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1cbf0:	22fe      	movs	r2, #254	; 0xfe
   1cbf2:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1cbf6:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1cbfa:	6903      	ldr	r3, [r0, #16]
   1cbfc:	781a      	ldrb	r2, [r3, #0]
   1cbfe:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1cc02:	785b      	ldrb	r3, [r3, #1]
   1cc04:	f88d 300f 	strb.w	r3, [sp, #15]
   1cc08:	e7e2      	b.n	1cbd0 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1cc0a:	2203      	movs	r2, #3
   1cc0c:	6901      	ldr	r1, [r0, #16]
   1cc0e:	a802      	add	r0, sp, #8
   1cc10:	f7e3 fb56 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1cc14:	23ff      	movs	r3, #255	; 0xff
   1cc16:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1cc1a:	23fe      	movs	r3, #254	; 0xfe
   1cc1c:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1cc20:	6929      	ldr	r1, [r5, #16]
   1cc22:	2203      	movs	r2, #3
   1cc24:	4411      	add	r1, r2
   1cc26:	f10d 000d 	add.w	r0, sp, #13
   1cc2a:	f7e3 fb49 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1cc2e:	7963      	ldrb	r3, [r4, #5]
   1cc30:	2b02      	cmp	r3, #2
   1cc32:	d009      	beq.n	1cc48 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1cc34:	7963      	ldrb	r3, [r4, #5]
   1cc36:	2b03      	cmp	r3, #3
   1cc38:	d1ca      	bne.n	1cbd0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1cc3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1cc3e:	f083 0302 	eor.w	r3, r3, #2
   1cc42:	f88d 3008 	strb.w	r3, [sp, #8]
   1cc46:	e7c3      	b.n	1cbd0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1cc48:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1cc4c:	f083 0302 	eor.w	r3, r3, #2
   1cc50:	f88d 3008 	strb.w	r3, [sp, #8]
   1cc54:	e7ee      	b.n	1cc34 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1cc56:	6901      	ldr	r1, [r0, #16]
   1cc58:	a802      	add	r0, sp, #8
   1cc5a:	f7e3 fb31 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1cc5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1cc62:	f083 0302 	eor.w	r3, r3, #2
   1cc66:	f88d 3008 	strb.w	r3, [sp, #8]
   1cc6a:	e7b1      	b.n	1cbd0 <net_if_start_dad+0x30>
   1cc6c:	3401      	adds	r4, #1
   1cc6e:	2c02      	cmp	r4, #2
   1cc70:	dc18      	bgt.n	1cca4 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1cc72:	236c      	movs	r3, #108	; 0x6c
   1cc74:	fb03 5304 	mla	r3, r3, r4, r5
   1cc78:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1cc7c:	2b00      	cmp	r3, #0
   1cc7e:	d0f5      	beq.n	1cc6c <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1cc80:	236c      	movs	r3, #108	; 0x6c
   1cc82:	fb03 5304 	mla	r3, r3, r4, r5
   1cc86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1cc88:	2b0a      	cmp	r3, #10
   1cc8a:	d1ef      	bne.n	1cc6c <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1cc8c:	216c      	movs	r1, #108	; 0x6c
   1cc8e:	fb01 f104 	mul.w	r1, r1, r4
   1cc92:	3120      	adds	r1, #32
   1cc94:	4429      	add	r1, r5
   1cc96:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1cc98:	428e      	cmp	r6, r1
   1cc9a:	d0e7      	beq.n	1cc6c <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1cc9c:	4628      	mov	r0, r5
   1cc9e:	f7ff fd9f 	bl	1c7e0 <net_if_ipv6_start_dad>
   1cca2:	e7e3      	b.n	1cc6c <net_if_start_dad+0xcc>
}
   1cca4:	b004      	add	sp, #16
   1cca6:	bd70      	pop	{r4, r5, r6, pc}

0001cca8 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1cca8:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1ccaa:	2bff      	cmp	r3, #255	; 0xff
   1ccac:	d134      	bne.n	1cd18 <net_if_ipv6_maddr_add+0x70>
{
   1ccae:	b570      	push	{r4, r5, r6, lr}
   1ccb0:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ccb2:	2c04      	cmp	r4, #4
   1ccb4:	dc2e      	bgt.n	1cd14 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1ccb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ccba:	00d3      	lsls	r3, r2, #3
   1ccbc:	4403      	add	r3, r0
   1ccbe:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ccc2:	f013 0f01 	tst.w	r3, #1
   1ccc6:	d001      	beq.n	1cccc <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ccc8:	3401      	adds	r4, #1
   1ccca:	e7f2      	b.n	1ccb2 <net_if_ipv6_maddr_add+0xa>
   1cccc:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1ccce:	0066      	lsls	r6, r4, #1
   1ccd0:	1932      	adds	r2, r6, r4
   1ccd2:	00d3      	lsls	r3, r2, #3
   1ccd4:	4403      	add	r3, r0
   1ccd6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ccda:	f042 0201 	orr.w	r2, r2, #1
   1ccde:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1cce2:	220a      	movs	r2, #10
   1cce4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1cce8:	1933      	adds	r3, r6, r4
   1ccea:	00d8      	lsls	r0, r3, #3
   1ccec:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1ccf0:	4428      	add	r0, r5
   1ccf2:	2210      	movs	r2, #16
   1ccf4:	3018      	adds	r0, #24
   1ccf6:	f7e3 fae3 	bl	2c0 <memcpy>
   1ccfa:	2300      	movs	r3, #0
   1ccfc:	461a      	mov	r2, r3
   1ccfe:	4629      	mov	r1, r5
   1cd00:	4806      	ldr	r0, [pc, #24]	; (1cd1c <net_if_ipv6_maddr_add+0x74>)
   1cd02:	f007 fc99 	bl	24638 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1cd06:	4434      	add	r4, r6
   1cd08:	00e0      	lsls	r0, r4, #3
   1cd0a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1cd0e:	4428      	add	r0, r5
   1cd10:	3010      	adds	r0, #16
   1cd12:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1cd14:	2000      	movs	r0, #0
   1cd16:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1cd18:	2000      	movs	r0, #0
   1cd1a:	4770      	bx	lr
   1cd1c:	f0600003 	.word	0xf0600003

0001cd20 <net_if_ipv6_maddr_rm>:
{
   1cd20:	b570      	push	{r4, r5, r6, lr}
   1cd22:	4605      	mov	r5, r0
   1cd24:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1cd26:	2400      	movs	r4, #0
   1cd28:	e000      	b.n	1cd2c <net_if_ipv6_maddr_rm+0xc>
   1cd2a:	3401      	adds	r4, #1
   1cd2c:	2c04      	cmp	r4, #4
   1cd2e:	dc25      	bgt.n	1cd7c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1cd30:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1cd34:	00d3      	lsls	r3, r2, #3
   1cd36:	461a      	mov	r2, r3
   1cd38:	442b      	add	r3, r5
   1cd3a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1cd3e:	f013 0f01 	tst.w	r3, #1
   1cd42:	d0f2      	beq.n	1cd2a <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1cd44:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1cd48:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1cd4a:	2210      	movs	r2, #16
   1cd4c:	4631      	mov	r1, r6
   1cd4e:	3018      	adds	r0, #24
   1cd50:	f00f f900 	bl	2bf54 <memcmp>
		if (!net_ipv6_addr_cmp(
   1cd54:	2800      	cmp	r0, #0
   1cd56:	d1e8      	bne.n	1cd2a <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1cd58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cd5c:	00e3      	lsls	r3, r4, #3
   1cd5e:	442b      	add	r3, r5
   1cd60:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1cd64:	f36f 0200 	bfc	r2, #0, #1
   1cd68:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1cd6c:	2300      	movs	r3, #0
   1cd6e:	461a      	mov	r2, r3
   1cd70:	4629      	mov	r1, r5
   1cd72:	4803      	ldr	r0, [pc, #12]	; (1cd80 <net_if_ipv6_maddr_rm+0x60>)
   1cd74:	f007 fc60 	bl	24638 <net_mgmt_event_notify_with_info>
		return true;
   1cd78:	2001      	movs	r0, #1
   1cd7a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1cd7c:	2000      	movs	r0, #0
}
   1cd7e:	bd70      	pop	{r4, r5, r6, pc}
   1cd80:	f0600004 	.word	0xf0600004

0001cd84 <net_if_ipv6_addr_rm>:
{
   1cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd88:	b084      	sub	sp, #16
   1cd8a:	4606      	mov	r6, r0
   1cd8c:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1cd8e:	2400      	movs	r4, #0
   1cd90:	e009      	b.n	1cda6 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1cd92:	206c      	movs	r0, #108	; 0x6c
   1cd94:	fb00 f004 	mul.w	r0, r0, r4
   1cd98:	3030      	adds	r0, #48	; 0x30
   1cd9a:	4430      	add	r0, r6
   1cd9c:	3010      	adds	r0, #16
   1cd9e:	f00e fca9 	bl	2b6f4 <k_delayed_work_cancel>
   1cda2:	e01c      	b.n	1cdde <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1cda4:	3401      	adds	r4, #1
   1cda6:	2c02      	cmp	r4, #2
   1cda8:	dc46      	bgt.n	1ce38 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1cdaa:	236c      	movs	r3, #108	; 0x6c
   1cdac:	fb03 6304 	mla	r3, r3, r4, r6
   1cdb0:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1cdb4:	2d00      	cmp	r5, #0
   1cdb6:	d0f5      	beq.n	1cda4 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1cdb8:	206c      	movs	r0, #108	; 0x6c
   1cdba:	fb00 f004 	mul.w	r0, r0, r4
   1cdbe:	3020      	adds	r0, #32
   1cdc0:	4430      	add	r0, r6
   1cdc2:	2210      	movs	r2, #16
   1cdc4:	4639      	mov	r1, r7
   1cdc6:	4410      	add	r0, r2
   1cdc8:	f00f f8c4 	bl	2bf54 <memcmp>
		if (!net_ipv6_addr_cmp(
   1cdcc:	2800      	cmp	r0, #0
   1cdce:	d1e9      	bne.n	1cda4 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1cdd0:	236c      	movs	r3, #108	; 0x6c
   1cdd2:	fb03 6304 	mla	r3, r3, r4, r6
   1cdd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1cdda:	2b00      	cmp	r3, #0
   1cddc:	d0d9      	beq.n	1cd92 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1cdde:	236c      	movs	r3, #108	; 0x6c
   1cde0:	fb03 6404 	mla	r4, r3, r4, r6
   1cde4:	f04f 0800 	mov.w	r8, #0
   1cde8:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1cdec:	23ff      	movs	r3, #255	; 0xff
   1cdee:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1cdf2:	2202      	movs	r2, #2
   1cdf4:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1cdf8:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1cdfc:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1ce00:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1ce04:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1ce08:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1ce0c:	2201      	movs	r2, #1
   1ce0e:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1ce12:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1ce16:	7b7b      	ldrb	r3, [r7, #13]
   1ce18:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ce1c:	89fb      	ldrh	r3, [r7, #14]
   1ce1e:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1ce22:	4669      	mov	r1, sp
   1ce24:	4630      	mov	r0, r6
   1ce26:	f7ff ff7b 	bl	1cd20 <net_if_ipv6_maddr_rm>
   1ce2a:	4643      	mov	r3, r8
   1ce2c:	4642      	mov	r2, r8
   1ce2e:	4631      	mov	r1, r6
   1ce30:	4804      	ldr	r0, [pc, #16]	; (1ce44 <net_if_ipv6_addr_rm+0xc0>)
   1ce32:	f007 fc01 	bl	24638 <net_mgmt_event_notify_with_info>
   1ce36:	e000      	b.n	1ce3a <net_if_ipv6_addr_rm+0xb6>
	return false;
   1ce38:	2500      	movs	r5, #0
}
   1ce3a:	4628      	mov	r0, r5
   1ce3c:	b004      	add	sp, #16
   1ce3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ce42:	bf00      	nop
   1ce44:	f0600002 	.word	0xf0600002

0001ce48 <net_if_ipv6_dad_failed>:
{
   1ce48:	b510      	push	{r4, lr}
   1ce4a:	b082      	sub	sp, #8
   1ce4c:	ab02      	add	r3, sp, #8
   1ce4e:	f843 0d04 	str.w	r0, [r3, #-4]!
   1ce52:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ce54:	4619      	mov	r1, r3
   1ce56:	4620      	mov	r0, r4
   1ce58:	f7ff fdc8 	bl	1c9ec <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1ce5c:	b160      	cbz	r0, 1ce78 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1ce5e:	303c      	adds	r0, #60	; 0x3c
   1ce60:	f00e fc48 	bl	2b6f4 <k_delayed_work_cancel>
   1ce64:	2300      	movs	r3, #0
   1ce66:	461a      	mov	r2, r3
   1ce68:	9901      	ldr	r1, [sp, #4]
   1ce6a:	4804      	ldr	r0, [pc, #16]	; (1ce7c <net_if_ipv6_dad_failed+0x34>)
   1ce6c:	f007 fbe4 	bl	24638 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1ce70:	4621      	mov	r1, r4
   1ce72:	9801      	ldr	r0, [sp, #4]
   1ce74:	f7ff ff86 	bl	1cd84 <net_if_ipv6_addr_rm>
}
   1ce78:	b002      	add	sp, #8
   1ce7a:	bd10      	pop	{r4, pc}
   1ce7c:	f060000e 	.word	0xf060000e

0001ce80 <net_if_ipv6_maddr_lookup>:
{
   1ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce82:	4607      	mov	r7, r0
   1ce84:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ce86:	4d22      	ldr	r5, [pc, #136]	; (1cf10 <net_if_ipv6_maddr_lookup+0x90>)
   1ce88:	e034      	b.n	1cef4 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1ce8a:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ce8c:	bb13      	cbnz	r3, 1ced4 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ce8e:	3401      	adds	r4, #1
   1ce90:	2c04      	cmp	r4, #4
   1ce92:	dc2d      	bgt.n	1cef0 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1ce94:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ce98:	00d3      	lsls	r3, r2, #3
   1ce9a:	442b      	add	r3, r5
   1ce9c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1cea0:	f013 0f01 	tst.w	r3, #1
   1cea4:	d0f3      	beq.n	1ce8e <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1cea6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ceaa:	00d3      	lsls	r3, r2, #3
   1ceac:	442b      	add	r3, r5
   1ceae:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1ceb2:	2b0a      	cmp	r3, #10
   1ceb4:	d1eb      	bne.n	1ce8e <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1ceb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ceba:	00d3      	lsls	r3, r2, #3
   1cebc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1cec0:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1cec2:	2210      	movs	r2, #16
   1cec4:	3118      	adds	r1, #24
   1cec6:	4638      	mov	r0, r7
   1cec8:	f00f f844 	bl	2bf54 <memcmp>
   1cecc:	2800      	cmp	r0, #0
   1cece:	d1dc      	bne.n	1ce8a <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1ced0:	2301      	movs	r3, #1
   1ced2:	e7db      	b.n	1ce8c <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1ced4:	b106      	cbz	r6, 1ced8 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1ced6:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1ced8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cedc:	00e3      	lsls	r3, r4, #3
   1cede:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1cee2:	4428      	add	r0, r5
   1cee4:	3010      	adds	r0, #16
   1cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cee8:	2400      	movs	r4, #0
   1ceea:	e7d1      	b.n	1ce90 <net_if_ipv6_maddr_lookup+0x10>
   1ceec:	2400      	movs	r4, #0
   1ceee:	e7cf      	b.n	1ce90 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1cef0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1cef4:	4b07      	ldr	r3, [pc, #28]	; (1cf14 <net_if_ipv6_maddr_lookup+0x94>)
   1cef6:	429d      	cmp	r5, r3
   1cef8:	d008      	beq.n	1cf0c <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1cefa:	2e00      	cmp	r6, #0
   1cefc:	d0f4      	beq.n	1cee8 <net_if_ipv6_maddr_lookup+0x68>
   1cefe:	6833      	ldr	r3, [r6, #0]
   1cf00:	2b00      	cmp	r3, #0
   1cf02:	d0f3      	beq.n	1ceec <net_if_ipv6_maddr_lookup+0x6c>
   1cf04:	429d      	cmp	r5, r3
   1cf06:	d1f3      	bne.n	1cef0 <net_if_ipv6_maddr_lookup+0x70>
   1cf08:	2400      	movs	r4, #0
   1cf0a:	e7c1      	b.n	1ce90 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1cf0c:	2000      	movs	r0, #0
}
   1cf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf10:	2000d260 	.word	0x2000d260
   1cf14:	2000d500 	.word	0x2000d500

0001cf18 <net_if_mcast_monitor>:
{
   1cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf1a:	4605      	mov	r5, r0
   1cf1c:	460e      	mov	r6, r1
   1cf1e:	4617      	mov	r7, r2
	return list->head;
   1cf20:	4b13      	ldr	r3, [pc, #76]	; (1cf70 <net_if_mcast_monitor+0x58>)
   1cf22:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1cf24:	b11b      	cbz	r3, 1cf2e <net_if_mcast_monitor+0x16>
   1cf26:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1cf28:	b173      	cbz	r3, 1cf48 <net_if_mcast_monitor+0x30>
	return node->next;
   1cf2a:	681c      	ldr	r4, [r3, #0]
   1cf2c:	e00c      	b.n	1cf48 <net_if_mcast_monitor+0x30>
   1cf2e:	461c      	mov	r4, r3
   1cf30:	e00a      	b.n	1cf48 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1cf32:	689b      	ldr	r3, [r3, #8]
   1cf34:	463a      	mov	r2, r7
   1cf36:	4631      	mov	r1, r6
   1cf38:	4628      	mov	r0, r5
   1cf3a:	4798      	blx	r3
   1cf3c:	e008      	b.n	1cf50 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1cf3e:	4623      	mov	r3, r4
   1cf40:	e00c      	b.n	1cf5c <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1cf42:	4622      	mov	r2, r4
   1cf44:	4623      	mov	r3, r4
   1cf46:	4614      	mov	r4, r2
   1cf48:	b183      	cbz	r3, 1cf6c <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1cf4a:	685a      	ldr	r2, [r3, #4]
   1cf4c:	42aa      	cmp	r2, r5
   1cf4e:	d0f0      	beq.n	1cf32 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1cf50:	2c00      	cmp	r4, #0
   1cf52:	d0f6      	beq.n	1cf42 <net_if_mcast_monitor+0x2a>
   1cf54:	4622      	mov	r2, r4
   1cf56:	2c00      	cmp	r4, #0
   1cf58:	d0f1      	beq.n	1cf3e <net_if_mcast_monitor+0x26>
	return node->next;
   1cf5a:	6823      	ldr	r3, [r4, #0]
   1cf5c:	b113      	cbz	r3, 1cf64 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1cf5e:	b11a      	cbz	r2, 1cf68 <net_if_mcast_monitor+0x50>
	return node->next;
   1cf60:	6822      	ldr	r2, [r4, #0]
   1cf62:	e7ef      	b.n	1cf44 <net_if_mcast_monitor+0x2c>
   1cf64:	2200      	movs	r2, #0
   1cf66:	e7ed      	b.n	1cf44 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1cf68:	2200      	movs	r2, #0
   1cf6a:	e7eb      	b.n	1cf44 <net_if_mcast_monitor+0x2c>
}
   1cf6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf6e:	bf00      	nop
   1cf70:	20001be4 	.word	0x20001be4

0001cf74 <net_if_ipv6_prefix_add>:
{
   1cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf78:	4605      	mov	r5, r0
   1cf7a:	460e      	mov	r6, r1
   1cf7c:	4617      	mov	r7, r2
   1cf7e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1cf80:	f7ff fc00 	bl	1c784 <ipv6_prefix_find>
	if (if_prefix) {
   1cf84:	4604      	mov	r4, r0
   1cf86:	b110      	cbz	r0, 1cf8e <net_if_ipv6_prefix_add+0x1a>
}
   1cf88:	4620      	mov	r0, r4
   1cf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf8e:	2300      	movs	r3, #0
   1cf90:	e000      	b.n	1cf94 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1cf92:	3301      	adds	r3, #1
   1cf94:	2b01      	cmp	r3, #1
   1cf96:	dcf7      	bgt.n	1cf88 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1cf98:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1cf9c:	008a      	lsls	r2, r1, #2
   1cf9e:	442a      	add	r2, r5
   1cfa0:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1cfa4:	2a00      	cmp	r2, #0
   1cfa6:	d1f4      	bne.n	1cf92 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1cfa8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1cfac:	009a      	lsls	r2, r3, #2
   1cfae:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1cfb2:	442c      	add	r4, r5
   1cfb4:	3410      	adds	r4, #16
   1cfb6:	4643      	mov	r3, r8
   1cfb8:	463a      	mov	r2, r7
   1cfba:	4631      	mov	r1, r6
   1cfbc:	4620      	mov	r0, r4
   1cfbe:	f7ff fc2d 	bl	1c81c <net_if_ipv6_prefix_init>
   1cfc2:	2300      	movs	r3, #0
   1cfc4:	461a      	mov	r2, r3
   1cfc6:	4629      	mov	r1, r5
   1cfc8:	4801      	ldr	r0, [pc, #4]	; (1cfd0 <net_if_ipv6_prefix_add+0x5c>)
   1cfca:	f007 fb35 	bl	24638 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1cfce:	e7db      	b.n	1cf88 <net_if_ipv6_prefix_add+0x14>
   1cfd0:	f0600005 	.word	0xf0600005

0001cfd4 <net_if_ipv6_prefix_lookup>:
{
   1cfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfd8:	4605      	mov	r5, r0
   1cfda:	4688      	mov	r8, r1
   1cfdc:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1cfde:	2400      	movs	r4, #0
   1cfe0:	e01d      	b.n	1d01e <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1cfe2:	4652      	mov	r2, sl
   1cfe4:	4641      	mov	r1, r8
   1cfe6:	4648      	mov	r0, r9
   1cfe8:	f00e ffb4 	bl	2bf54 <memcmp>
   1cfec:	b9a0      	cbnz	r0, 1d018 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1cfee:	f1bb 0f00 	cmp.w	fp, #0
   1cff2:	d012      	beq.n	1d01a <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1cff4:	f1cb 0208 	rsb	r2, fp, #8
   1cff8:	23ff      	movs	r3, #255	; 0xff
   1cffa:	4093      	lsls	r3, r2
   1cffc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1d000:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d004:	f819 200a 	ldrb.w	r2, [r9, sl]
   1d008:	f818 100a 	ldrb.w	r1, [r8, sl]
   1d00c:	404a      	eors	r2, r1
   1d00e:	4213      	tst	r3, r2
   1d010:	bf0c      	ite	eq
   1d012:	2601      	moveq	r6, #1
   1d014:	2600      	movne	r6, #0
   1d016:	e000      	b.n	1d01a <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1d018:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1d01a:	b9e6      	cbnz	r6, 1d056 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d01c:	3401      	adds	r4, #1
   1d01e:	2c01      	cmp	r4, #1
   1d020:	dc22      	bgt.n	1d068 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1d022:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1d026:	0093      	lsls	r3, r2, #2
   1d028:	442b      	add	r3, r5
   1d02a:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1d02e:	2e00      	cmp	r6, #0
   1d030:	d0f4      	beq.n	1d01c <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1d032:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1d036:	0093      	lsls	r3, r2, #2
   1d038:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1d03c:	442b      	add	r3, r5
   1d03e:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1d042:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1d046:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1d04a:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1d04e:	2f80      	cmp	r7, #128	; 0x80
   1d050:	d9c7      	bls.n	1cfe2 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1d052:	2600      	movs	r6, #0
   1d054:	e7e1      	b.n	1d01a <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1d056:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1d05a:	00a3      	lsls	r3, r4, #2
   1d05c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1d060:	4428      	add	r0, r5
   1d062:	3010      	adds	r0, #16
   1d064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1d068:	2000      	movs	r0, #0
}
   1d06a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001d070 <net_if_ipv6_addr_onlink>:
{
   1d070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d074:	4606      	mov	r6, r0
   1d076:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1d078:	4d2d      	ldr	r5, [pc, #180]	; (1d130 <net_if_ipv6_addr_onlink+0xc0>)
   1d07a:	e048      	b.n	1d10e <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1d07c:	465a      	mov	r2, fp
   1d07e:	4641      	mov	r1, r8
   1d080:	4648      	mov	r0, r9
   1d082:	f00e ff67 	bl	2bf54 <memcmp>
   1d086:	b9a8      	cbnz	r0, 1d0b4 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1d088:	f1ba 0f00 	cmp.w	sl, #0
   1d08c:	d013      	beq.n	1d0b6 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1d08e:	f1ca 0208 	rsb	r2, sl, #8
   1d092:	23ff      	movs	r3, #255	; 0xff
   1d094:	4093      	lsls	r3, r2
   1d096:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1d09a:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1d09e:	f819 300b 	ldrb.w	r3, [r9, fp]
   1d0a2:	f818 200b 	ldrb.w	r2, [r8, fp]
   1d0a6:	4053      	eors	r3, r2
   1d0a8:	ea1a 0f03 	tst.w	sl, r3
   1d0ac:	bf0c      	ite	eq
   1d0ae:	2701      	moveq	r7, #1
   1d0b0:	2700      	movne	r7, #0
   1d0b2:	e000      	b.n	1d0b6 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1d0b4:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1d0b6:	bb0f      	cbnz	r7, 1d0fc <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d0b8:	3401      	adds	r4, #1
   1d0ba:	2c01      	cmp	r4, #1
   1d0bc:	dc25      	bgt.n	1d10a <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1d0be:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1d0c2:	0093      	lsls	r3, r2, #2
   1d0c4:	442b      	add	r3, r5
   1d0c6:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1d0ca:	2f00      	cmp	r7, #0
   1d0cc:	d0f4      	beq.n	1d0b8 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1d0ce:	0122      	lsls	r2, r4, #4
   1d0d0:	1b11      	subs	r1, r2, r4
   1d0d2:	008b      	lsls	r3, r1, #2
   1d0d4:	4619      	mov	r1, r3
   1d0d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1d0da:	442b      	add	r3, r5
   1d0dc:	f103 0910 	add.w	r9, r3, #16
   1d0e0:	460a      	mov	r2, r1
   1d0e2:	442a      	add	r2, r5
   1d0e4:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1d0e8:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1d0ec:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1d0f0:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1d0f4:	2b80      	cmp	r3, #128	; 0x80
   1d0f6:	d9c1      	bls.n	1d07c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1d0f8:	2700      	movs	r7, #0
   1d0fa:	e7dc      	b.n	1d0b6 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1d0fc:	b1a6      	cbz	r6, 1d128 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1d0fe:	6035      	str	r5, [r6, #0]
   1d100:	e012      	b.n	1d128 <net_if_ipv6_addr_onlink+0xb8>
   1d102:	2400      	movs	r4, #0
   1d104:	e7d9      	b.n	1d0ba <net_if_ipv6_addr_onlink+0x4a>
   1d106:	2400      	movs	r4, #0
   1d108:	e7d7      	b.n	1d0ba <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1d10a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1d10e:	4b09      	ldr	r3, [pc, #36]	; (1d134 <net_if_ipv6_addr_onlink+0xc4>)
   1d110:	429d      	cmp	r5, r3
   1d112:	d008      	beq.n	1d126 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1d114:	2e00      	cmp	r6, #0
   1d116:	d0f4      	beq.n	1d102 <net_if_ipv6_addr_onlink+0x92>
   1d118:	6833      	ldr	r3, [r6, #0]
   1d11a:	2b00      	cmp	r3, #0
   1d11c:	d0f3      	beq.n	1d106 <net_if_ipv6_addr_onlink+0x96>
   1d11e:	429d      	cmp	r5, r3
   1d120:	d1f3      	bne.n	1d10a <net_if_ipv6_addr_onlink+0x9a>
   1d122:	2400      	movs	r4, #0
   1d124:	e7c9      	b.n	1d0ba <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1d126:	2700      	movs	r7, #0
}
   1d128:	4638      	mov	r0, r7
   1d12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d12e:	bf00      	nop
   1d130:	2000d260 	.word	0x2000d260
   1d134:	2000d500 	.word	0x2000d500

0001d138 <net_if_ipv6_prefix_set_timer>:
{
   1d138:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1d13a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d13e:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1d142:	4b05      	ldr	r3, [pc, #20]	; (1d158 <net_if_ipv6_prefix_set_timer+0x20>)
   1d144:	4299      	cmp	r1, r3
   1d146:	d901      	bls.n	1d14c <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1d148:	f06f 0201 	mvn.w	r2, #1
   1d14c:	4601      	mov	r1, r0
   1d14e:	4803      	ldr	r0, [pc, #12]	; (1d15c <net_if_ipv6_prefix_set_timer+0x24>)
   1d150:	f00e fb2a 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1d154:	bd08      	pop	{r3, pc}
   1d156:	bf00      	nop
   1d158:	00418937 	.word	0x00418937
   1d15c:	20002c00 	.word	0x20002c00

0001d160 <net_if_ipv6_prefix_unset_timer>:
{
   1d160:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1d162:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1d166:	b903      	cbnz	r3, 1d16a <net_if_ipv6_prefix_unset_timer+0xa>
   1d168:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1d16a:	f00e fac3 	bl	2b6f4 <k_delayed_work_cancel>
   1d16e:	e7fb      	b.n	1d168 <net_if_ipv6_prefix_unset_timer+0x8>

0001d170 <net_if_ipv6_prefix_rm>:
{
   1d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d174:	4606      	mov	r6, r0
   1d176:	460f      	mov	r7, r1
   1d178:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1d17a:	2400      	movs	r4, #0
   1d17c:	e000      	b.n	1d180 <net_if_ipv6_prefix_rm+0x10>
   1d17e:	3401      	adds	r4, #1
   1d180:	2c01      	cmp	r4, #1
   1d182:	dc2f      	bgt.n	1d1e4 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1d184:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1d188:	0093      	lsls	r3, r2, #2
   1d18a:	461a      	mov	r2, r3
   1d18c:	4433      	add	r3, r6
   1d18e:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1d192:	2d00      	cmp	r5, #0
   1d194:	d0f3      	beq.n	1d17e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1d196:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1d19a:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d19c:	2210      	movs	r2, #16
   1d19e:	4639      	mov	r1, r7
   1d1a0:	4410      	add	r0, r2
   1d1a2:	f00e fed7 	bl	2bf54 <memcmp>
   1d1a6:	2800      	cmp	r0, #0
   1d1a8:	d1e9      	bne.n	1d17e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1d1aa:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1d1ae:	0093      	lsls	r3, r2, #2
   1d1b0:	4433      	add	r3, r6
   1d1b2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1d1b6:	4543      	cmp	r3, r8
   1d1b8:	d1e1      	bne.n	1d17e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1d1ba:	0127      	lsls	r7, r4, #4
   1d1bc:	1b3a      	subs	r2, r7, r4
   1d1be:	0093      	lsls	r3, r2, #2
   1d1c0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1d1c4:	18f0      	adds	r0, r6, r3
   1d1c6:	3010      	adds	r0, #16
   1d1c8:	f7ff ffca 	bl	1d160 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1d1cc:	1b3c      	subs	r4, r7, r4
   1d1ce:	00a3      	lsls	r3, r4, #2
   1d1d0:	4433      	add	r3, r6
   1d1d2:	2200      	movs	r2, #0
   1d1d4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1d1d8:	4613      	mov	r3, r2
   1d1da:	4631      	mov	r1, r6
   1d1dc:	4803      	ldr	r0, [pc, #12]	; (1d1ec <net_if_ipv6_prefix_rm+0x7c>)
   1d1de:	f007 fa2b 	bl	24638 <net_mgmt_event_notify_with_info>
		return true;
   1d1e2:	e000      	b.n	1d1e6 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1d1e4:	2500      	movs	r5, #0
}
   1d1e6:	4628      	mov	r0, r5
   1d1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d1ec:	f0600006 	.word	0xf0600006

0001d1f0 <net_if_ipv6_router_lookup>:
{
   1d1f0:	b570      	push	{r4, r5, r6, lr}
   1d1f2:	4605      	mov	r5, r0
   1d1f4:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d1f6:	2400      	movs	r4, #0
   1d1f8:	2c00      	cmp	r4, #0
   1d1fa:	dd01      	ble.n	1d200 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1d1fc:	2000      	movs	r0, #0
}
   1d1fe:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1d200:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1d204:	009a      	lsls	r2, r3, #2
   1d206:	4b11      	ldr	r3, [pc, #68]	; (1d24c <net_if_ipv6_router_lookup+0x5c>)
   1d208:	4413      	add	r3, r2
   1d20a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1d20e:	b123      	cbz	r3, 1d21a <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1d210:	4b0e      	ldr	r3, [pc, #56]	; (1d24c <net_if_ipv6_router_lookup+0x5c>)
   1d212:	4413      	add	r3, r2
   1d214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1d216:	2b0a      	cmp	r3, #10
   1d218:	d001      	beq.n	1d21e <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d21a:	3401      	adds	r4, #1
   1d21c:	e7ec      	b.n	1d1f8 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1d21e:	4b0b      	ldr	r3, [pc, #44]	; (1d24c <net_if_ipv6_router_lookup+0x5c>)
   1d220:	4413      	add	r3, r2
   1d222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1d224:	42ab      	cmp	r3, r5
   1d226:	d1f8      	bne.n	1d21a <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1d228:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1d22c:	0093      	lsls	r3, r2, #2
   1d22e:	3328      	adds	r3, #40	; 0x28
   1d230:	4a06      	ldr	r2, [pc, #24]	; (1d24c <net_if_ipv6_router_lookup+0x5c>)
   1d232:	4413      	add	r3, r2
   1d234:	2210      	movs	r2, #16
   1d236:	4631      	mov	r1, r6
   1d238:	1d18      	adds	r0, r3, #4
   1d23a:	f00e fe8b 	bl	2bf54 <memcmp>
   1d23e:	2800      	cmp	r0, #0
   1d240:	d1eb      	bne.n	1d21a <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1d242:	2344      	movs	r3, #68	; 0x44
   1d244:	4801      	ldr	r0, [pc, #4]	; (1d24c <net_if_ipv6_router_lookup+0x5c>)
   1d246:	fb03 0004 	mla	r0, r3, r4, r0
   1d24a:	bd70      	pop	{r4, r5, r6, pc}
   1d24c:	20001bec 	.word	0x20001bec

0001d250 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d250:	2300      	movs	r3, #0
   1d252:	2b00      	cmp	r3, #0
   1d254:	dd01      	ble.n	1d25a <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1d256:	2000      	movs	r0, #0
}
   1d258:	4770      	bx	lr
		if (!routers[i].is_used ||
   1d25a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1d25e:	0091      	lsls	r1, r2, #2
   1d260:	4a0e      	ldr	r2, [pc, #56]	; (1d29c <net_if_ipv6_router_find_default+0x4c>)
   1d262:	440a      	add	r2, r1
   1d264:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1d268:	b14a      	cbz	r2, 1d27e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1d26a:	4a0c      	ldr	r2, [pc, #48]	; (1d29c <net_if_ipv6_router_find_default+0x4c>)
   1d26c:	440a      	add	r2, r1
   1d26e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1d272:	b122      	cbz	r2, 1d27e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1d274:	4a09      	ldr	r2, [pc, #36]	; (1d29c <net_if_ipv6_router_find_default+0x4c>)
   1d276:	440a      	add	r2, r1
   1d278:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1d27a:	2a0a      	cmp	r2, #10
   1d27c:	d001      	beq.n	1d282 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d27e:	3301      	adds	r3, #1
   1d280:	e7e7      	b.n	1d252 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1d282:	b120      	cbz	r0, 1d28e <net_if_ipv6_router_find_default+0x3e>
   1d284:	4a05      	ldr	r2, [pc, #20]	; (1d29c <net_if_ipv6_router_find_default+0x4c>)
   1d286:	440a      	add	r2, r1
   1d288:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1d28a:	4290      	cmp	r0, r2
   1d28c:	d1f7      	bne.n	1d27e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1d28e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1d292:	009a      	lsls	r2, r3, #2
   1d294:	4801      	ldr	r0, [pc, #4]	; (1d29c <net_if_ipv6_router_find_default+0x4c>)
   1d296:	4410      	add	r0, r2
   1d298:	4770      	bx	lr
   1d29a:	bf00      	nop
   1d29c:	20001bec 	.word	0x20001bec

0001d2a0 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1d2a0:	b508      	push	{r3, lr}
   1d2a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d2a6:	fb02 f201 	mul.w	r2, r2, r1
   1d2aa:	4601      	mov	r1, r0
   1d2ac:	4801      	ldr	r0, [pc, #4]	; (1d2b4 <net_if_ipv6_router_update_lifetime+0x14>)
   1d2ae:	f00e fa7b 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1d2b2:	bd08      	pop	{r3, pc}
   1d2b4:	20002c00 	.word	0x20002c00

0001d2b8 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2bc:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d2be:	2300      	movs	r3, #0
   1d2c0:	2b00      	cmp	r3, #0
   1d2c2:	dd04      	ble.n	1d2ce <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1d2c4:	2400      	movs	r4, #0
}
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	b004      	add	sp, #16
   1d2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1d2ce:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1d2d2:	00a5      	lsls	r5, r4, #2
   1d2d4:	4c20      	ldr	r4, [pc, #128]	; (1d358 <net_if_ipv6_router_add+0xa0>)
   1d2d6:	442c      	add	r4, r5
   1d2d8:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1d2dc:	b10c      	cbz	r4, 1d2e2 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d2de:	3301      	adds	r3, #1
   1d2e0:	e7ee      	b.n	1d2c0 <net_if_ipv6_router_add+0x8>
   1d2e2:	4616      	mov	r6, r2
   1d2e4:	460f      	mov	r7, r1
   1d2e6:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1d2e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1d2ec:	009a      	lsls	r2, r3, #2
   1d2ee:	4c1a      	ldr	r4, [pc, #104]	; (1d358 <net_if_ipv6_router_add+0xa0>)
   1d2f0:	4414      	add	r4, r2
	router->is_used = true;
   1d2f2:	2301      	movs	r3, #1
   1d2f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1d2f8:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1d2fa:	230a      	movs	r3, #10
   1d2fc:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1d2fe:	466d      	mov	r5, sp
   1d300:	6808      	ldr	r0, [r1, #0]
   1d302:	6849      	ldr	r1, [r1, #4]
   1d304:	68ba      	ldr	r2, [r7, #8]
   1d306:	68fb      	ldr	r3, [r7, #12]
   1d308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d30a:	466d      	mov	r5, sp
   1d30c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d30e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1d310:	6321      	str	r1, [r4, #48]	; 0x30
   1d312:	6362      	str	r2, [r4, #52]	; 0x34
   1d314:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1d316:	b966      	cbnz	r6, 1d332 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1d318:	2300      	movs	r3, #0
   1d31a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1d31e:	2301      	movs	r3, #1
   1d320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d324:	2300      	movs	r3, #0
   1d326:	461a      	mov	r2, r3
   1d328:	4641      	mov	r1, r8
   1d32a:	480c      	ldr	r0, [pc, #48]	; (1d35c <net_if_ipv6_router_add+0xa4>)
   1d32c:	f007 f984 	bl	24638 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1d330:	e7c9      	b.n	1d2c6 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1d332:	2301      	movs	r3, #1
   1d334:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1d338:	2300      	movs	r3, #0
   1d33a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1d33e:	4908      	ldr	r1, [pc, #32]	; (1d360 <net_if_ipv6_router_add+0xa8>)
   1d340:	4620      	mov	r0, r4
   1d342:	f00e f9b9 	bl	2b6b8 <k_delayed_work_init>
   1d346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d34a:	fb02 f206 	mul.w	r2, r2, r6
   1d34e:	4621      	mov	r1, r4
   1d350:	4804      	ldr	r0, [pc, #16]	; (1d364 <net_if_ipv6_router_add+0xac>)
   1d352:	f00e fa29 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   1d356:	e7e5      	b.n	1d324 <net_if_ipv6_router_add+0x6c>
   1d358:	20001bec 	.word	0x20001bec
   1d35c:	f0600009 	.word	0xf0600009
   1d360:	0001c735 	.word	0x0001c735
   1d364:	20002c00 	.word	0x20002c00

0001d368 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d36c:	2400      	movs	r4, #0
   1d36e:	2c00      	cmp	r4, #0
   1d370:	dd03      	ble.n	1d37a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1d372:	2500      	movs	r5, #0
}
   1d374:	4628      	mov	r0, r5
   1d376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1d37a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1d37e:	009a      	lsls	r2, r3, #2
   1d380:	4b0d      	ldr	r3, [pc, #52]	; (1d3b8 <net_if_ipv6_router_rm+0x50>)
   1d382:	4413      	add	r3, r2
   1d384:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1d388:	b11d      	cbz	r5, 1d392 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1d38a:	4b0b      	ldr	r3, [pc, #44]	; (1d3b8 <net_if_ipv6_router_rm+0x50>)
   1d38c:	4413      	add	r3, r2
   1d38e:	4283      	cmp	r3, r0
   1d390:	d001      	beq.n	1d396 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1d392:	3401      	adds	r4, #1
   1d394:	e7eb      	b.n	1d36e <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1d396:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1d3b8 <net_if_ipv6_router_rm+0x50>
   1d39a:	4617      	mov	r7, r2
   1d39c:	4447      	add	r7, r8
   1d39e:	4638      	mov	r0, r7
   1d3a0:	f00e f9a8 	bl	2b6f4 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1d3a4:	2200      	movs	r2, #0
   1d3a6:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1d3aa:	4613      	mov	r3, r2
   1d3ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1d3ae:	4803      	ldr	r0, [pc, #12]	; (1d3bc <net_if_ipv6_router_rm+0x54>)
   1d3b0:	f007 f942 	bl	24638 <net_mgmt_event_notify_with_info>
		return true;
   1d3b4:	e7de      	b.n	1d374 <net_if_ipv6_router_rm+0xc>
   1d3b6:	bf00      	nop
   1d3b8:	20001bec 	.word	0x20001bec
   1d3bc:	f060000a 	.word	0xf060000a

0001d3c0 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1d3c0:	b430      	push	{r4, r5}
   1d3c2:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d3c4:	2300      	movs	r3, #0
   1d3c6:	e006      	b.n	1d3d6 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1d3c8:	226c      	movs	r2, #108	; 0x6c
   1d3ca:	fb02 4203 	mla	r2, r2, r3, r4
   1d3ce:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1d3d0:	2a0a      	cmp	r2, #10
   1d3d2:	d014      	beq.n	1d3fe <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d3d4:	3301      	adds	r3, #1
   1d3d6:	2b02      	cmp	r3, #2
   1d3d8:	dc1d      	bgt.n	1d416 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1d3da:	226c      	movs	r2, #108	; 0x6c
   1d3dc:	fb02 4203 	mla	r2, r2, r3, r4
   1d3e0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1d3e4:	2a00      	cmp	r2, #0
   1d3e6:	d0f5      	beq.n	1d3d4 <net_if_ipv6_get_ll+0x14>
   1d3e8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1d3ec:	d0ec      	beq.n	1d3c8 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1d3ee:	226c      	movs	r2, #108	; 0x6c
   1d3f0:	fb02 4203 	mla	r2, r2, r3, r4
   1d3f4:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1d3f8:	4291      	cmp	r1, r2
   1d3fa:	d1eb      	bne.n	1d3d4 <net_if_ipv6_get_ll+0x14>
   1d3fc:	e7e4      	b.n	1d3c8 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1d3fe:	206c      	movs	r0, #108	; 0x6c
   1d400:	fb00 f003 	mul.w	r0, r0, r3
   1d404:	3020      	adds	r0, #32
   1d406:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1d408:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1d40c:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1d410:	4295      	cmp	r5, r2
   1d412:	d1df      	bne.n	1d3d4 <net_if_ipv6_get_ll+0x14>
   1d414:	e000      	b.n	1d418 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1d416:	2000      	movs	r0, #0
}
   1d418:	bc30      	pop	{r4, r5}
   1d41a:	4770      	bx	lr

0001d41c <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1d41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d420:	4607      	mov	r7, r0
   1d422:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1d424:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1d428:	429a      	cmp	r2, r3
   1d42a:	f000 80d7 	beq.w	1d5dc <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1d42e:	780b      	ldrb	r3, [r1, #0]
   1d430:	2bff      	cmp	r3, #255	; 0xff
   1d432:	d004      	beq.n	1d43e <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1d434:	f04f 0900 	mov.w	r9, #0
   1d438:	4e74      	ldr	r6, [pc, #464]	; (1d60c <net_if_ipv6_select_src_addr+0x1f0>)
   1d43a:	46c8      	mov	r8, r9
   1d43c:	e05b      	b.n	1d4f6 <net_if_ipv6_select_src_addr+0xda>
   1d43e:	4c73      	ldr	r4, [pc, #460]	; (1d60c <net_if_ipv6_select_src_addr+0x1f0>)
   1d440:	e0c0      	b.n	1d5c4 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1d442:	246c      	movs	r4, #108	; 0x6c
   1d444:	fb04 640e 	mla	r4, r4, lr, r6
   1d448:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1d44a:	2c0a      	cmp	r4, #10
   1d44c:	d01e      	beq.n	1d48c <net_if_ipv6_select_src_addr+0x70>
	return false;
   1d44e:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d450:	bb8b      	cbnz	r3, 1d4b6 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d452:	f10e 0e01 	add.w	lr, lr, #1
   1d456:	fa5f fe8e 	uxtb.w	lr, lr
   1d45a:	f1be 0f02 	cmp.w	lr, #2
   1d45e:	d846      	bhi.n	1d4ee <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d460:	46f4      	mov	ip, lr
   1d462:	236c      	movs	r3, #108	; 0x6c
   1d464:	fb03 f30e 	mul.w	r3, r3, lr
   1d468:	f103 0220 	add.w	r2, r3, #32
   1d46c:	4432      	add	r2, r6
   1d46e:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1d470:	4433      	add	r3, r6
   1d472:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1d476:	2b00      	cmp	r3, #0
   1d478:	d0ea      	beq.n	1d450 <net_if_ipv6_select_src_addr+0x34>
   1d47a:	246c      	movs	r4, #108	; 0x6c
   1d47c:	fb04 640e 	mla	r4, r4, lr, r6
   1d480:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1d484:	2c01      	cmp	r4, #1
   1d486:	d0dc      	beq.n	1d442 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1d488:	2300      	movs	r3, #0
   1d48a:	e7e1      	b.n	1d450 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1d48c:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1d48e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1d492:	4294      	cmp	r4, r2
   1d494:	d1dc      	bne.n	1d450 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1d496:	2300      	movs	r3, #0
   1d498:	e7da      	b.n	1d450 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1d49a:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1d49c:	2300      	movs	r3, #0
   1d49e:	2b07      	cmp	r3, #7
   1d4a0:	d81b      	bhi.n	1d4da <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1d4a2:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d4a6:	d118      	bne.n	1d4da <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1d4a8:	3401      	adds	r4, #1
   1d4aa:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1d4ac:	006d      	lsls	r5, r5, #1
   1d4ae:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1d4b0:	3301      	adds	r3, #1
   1d4b2:	b2db      	uxtb	r3, r3
   1d4b4:	e7f3      	b.n	1d49e <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d4b6:	2400      	movs	r4, #0
   1d4b8:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1d4ba:	2b0f      	cmp	r3, #15
   1d4bc:	d80d      	bhi.n	1d4da <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1d4be:	5ccd      	ldrb	r5, [r1, r3]
   1d4c0:	226c      	movs	r2, #108	; 0x6c
   1d4c2:	fb02 620c 	mla	r2, r2, ip, r6
   1d4c6:	441a      	add	r2, r3
   1d4c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1d4cc:	4295      	cmp	r5, r2
   1d4ce:	d1e4      	bne.n	1d49a <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1d4d0:	3408      	adds	r4, #8
   1d4d2:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1d4d4:	3301      	adds	r3, #1
   1d4d6:	b2db      	uxtb	r3, r3
   1d4d8:	e7ef      	b.n	1d4ba <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1d4da:	454c      	cmp	r4, r9
   1d4dc:	d3b9      	bcc.n	1d452 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1d4de:	206c      	movs	r0, #108	; 0x6c
   1d4e0:	fb00 f00c 	mul.w	r0, r0, ip
   1d4e4:	3020      	adds	r0, #32
   1d4e6:	4430      	add	r0, r6
   1d4e8:	3010      	adds	r0, #16
			*best_so_far = len;
   1d4ea:	46a1      	mov	r9, r4
   1d4ec:	e7b1      	b.n	1d452 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1d4ee:	b150      	cbz	r0, 1d506 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1d4f0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1d4f4:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1d4f6:	b947      	cbnz	r7, 1d50a <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1d4f8:	4b45      	ldr	r3, [pc, #276]	; (1d610 <net_if_ipv6_select_src_addr+0x1f4>)
   1d4fa:	429e      	cmp	r6, r3
   1d4fc:	d005      	beq.n	1d50a <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d4fe:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1d502:	4670      	mov	r0, lr
   1d504:	e7a9      	b.n	1d45a <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1d506:	4640      	mov	r0, r8
   1d508:	e7f2      	b.n	1d4f0 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1d50a:	2f00      	cmp	r7, #0
   1d50c:	d073      	beq.n	1d5f6 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d50e:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1d510:	46a8      	mov	r8, r5
   1d512:	e009      	b.n	1d528 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1d514:	206c      	movs	r0, #108	; 0x6c
   1d516:	fb00 7005 	mla	r0, r0, r5, r7
   1d51a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1d51c:	280a      	cmp	r0, #10
   1d51e:	d01b      	beq.n	1d558 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1d520:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d522:	bb73      	cbnz	r3, 1d582 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d524:	3501      	adds	r5, #1
   1d526:	b2ed      	uxtb	r5, r5
   1d528:	2d02      	cmp	r5, #2
   1d52a:	d864      	bhi.n	1d5f6 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d52c:	462e      	mov	r6, r5
   1d52e:	236c      	movs	r3, #108	; 0x6c
   1d530:	fb03 f305 	mul.w	r3, r3, r5
   1d534:	f103 0220 	add.w	r2, r3, #32
   1d538:	443a      	add	r2, r7
   1d53a:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1d53c:	443b      	add	r3, r7
   1d53e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1d542:	2b00      	cmp	r3, #0
   1d544:	d0ed      	beq.n	1d522 <net_if_ipv6_select_src_addr+0x106>
   1d546:	206c      	movs	r0, #108	; 0x6c
   1d548:	fb00 7005 	mla	r0, r0, r5, r7
   1d54c:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1d550:	2801      	cmp	r0, #1
   1d552:	d0df      	beq.n	1d514 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1d554:	2300      	movs	r3, #0
   1d556:	e7e4      	b.n	1d522 <net_if_ipv6_select_src_addr+0x106>
   1d558:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1d55a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1d55e:	4290      	cmp	r0, r2
   1d560:	d1df      	bne.n	1d522 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1d562:	2300      	movs	r3, #0
   1d564:	e7dd      	b.n	1d522 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1d566:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1d568:	2300      	movs	r3, #0
   1d56a:	2b07      	cmp	r3, #7
   1d56c:	d81b      	bhi.n	1d5a6 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1d56e:	f014 0f80 	tst.w	r4, #128	; 0x80
   1d572:	d118      	bne.n	1d5a6 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1d574:	3001      	adds	r0, #1
   1d576:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1d578:	0064      	lsls	r4, r4, #1
   1d57a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1d57c:	3301      	adds	r3, #1
   1d57e:	b2db      	uxtb	r3, r3
   1d580:	e7f3      	b.n	1d56a <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1d582:	2000      	movs	r0, #0
   1d584:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1d586:	2b0f      	cmp	r3, #15
   1d588:	d80d      	bhi.n	1d5a6 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1d58a:	5ccc      	ldrb	r4, [r1, r3]
   1d58c:	226c      	movs	r2, #108	; 0x6c
   1d58e:	fb02 7206 	mla	r2, r2, r6, r7
   1d592:	441a      	add	r2, r3
   1d594:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1d598:	4294      	cmp	r4, r2
   1d59a:	d1e4      	bne.n	1d566 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1d59c:	3008      	adds	r0, #8
   1d59e:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1d5a0:	3301      	adds	r3, #1
   1d5a2:	b2db      	uxtb	r3, r3
   1d5a4:	e7ef      	b.n	1d586 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1d5a6:	4548      	cmp	r0, r9
   1d5a8:	d3bc      	bcc.n	1d524 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1d5aa:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1d5ae:	fb08 f806 	mul.w	r8, r8, r6
   1d5b2:	f108 0820 	add.w	r8, r8, #32
   1d5b6:	44b8      	add	r8, r7
   1d5b8:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1d5bc:	4681      	mov	r9, r0
   1d5be:	e7b1      	b.n	1d524 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1d5c0:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1d5c4:	b97f      	cbnz	r7, 1d5e6 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1d5c6:	4b12      	ldr	r3, [pc, #72]	; (1d610 <net_if_ipv6_select_src_addr+0x1f4>)
   1d5c8:	429c      	cmp	r4, r3
   1d5ca:	d009      	beq.n	1d5e0 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1d5cc:	2101      	movs	r1, #1
   1d5ce:	4620      	mov	r0, r4
   1d5d0:	f7ff fef6 	bl	1d3c0 <net_if_ipv6_get_ll>
			if (addr) {
   1d5d4:	4680      	mov	r8, r0
   1d5d6:	2800      	cmp	r0, #0
   1d5d8:	d0f2      	beq.n	1d5c0 <net_if_ipv6_select_src_addr+0x1a4>
   1d5da:	e006      	b.n	1d5ea <net_if_ipv6_select_src_addr+0x1ce>
   1d5dc:	4c0b      	ldr	r4, [pc, #44]	; (1d60c <net_if_ipv6_select_src_addr+0x1f0>)
   1d5de:	e7f1      	b.n	1d5c4 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1d5e0:	f04f 0800 	mov.w	r8, #0
   1d5e4:	e001      	b.n	1d5ea <net_if_ipv6_select_src_addr+0x1ce>
   1d5e6:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1d5ea:	b127      	cbz	r7, 1d5f6 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1d5ec:	2101      	movs	r1, #1
   1d5ee:	4638      	mov	r0, r7
   1d5f0:	f7ff fee6 	bl	1d3c0 <net_if_ipv6_get_ll>
   1d5f4:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1d5f6:	f1b8 0f00 	cmp.w	r8, #0
   1d5fa:	d002      	beq.n	1d602 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1d5fc:	4640      	mov	r0, r8
}
   1d5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1d602:	f003 fd67 	bl	210d4 <net_ipv6_unspecified_address>
   1d606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d60a:	bf00      	nop
   1d60c:	2000d260 	.word	0x2000d260
   1d610:	2000d500 	.word	0x2000d500

0001d614 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1d614:	b510      	push	{r4, lr}
   1d616:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1d618:	f7e4 fe20 	bl	225c <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1d61c:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1d620:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1d624:	fb03 0012 	mls	r0, r3, r2, r0
   1d628:	bd10      	pop	{r4, pc}
	...

0001d62c <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d62e:	4605      	mov	r5, r0
   1d630:	460e      	mov	r6, r1
   1d632:	4617      	mov	r7, r2
	return list->head;
   1d634:	4b11      	ldr	r3, [pc, #68]	; (1d67c <net_if_call_link_cb+0x50>)
   1d636:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1d638:	b11b      	cbz	r3, 1d642 <net_if_call_link_cb+0x16>
   1d63a:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1d63c:	b143      	cbz	r3, 1d650 <net_if_call_link_cb+0x24>
	return node->next;
   1d63e:	681c      	ldr	r4, [r3, #0]
   1d640:	e006      	b.n	1d650 <net_if_call_link_cb+0x24>
   1d642:	461c      	mov	r4, r3
   1d644:	e004      	b.n	1d650 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1d646:	4623      	mov	r3, r4
   1d648:	e00e      	b.n	1d668 <net_if_call_link_cb+0x3c>
   1d64a:	4622      	mov	r2, r4
   1d64c:	4623      	mov	r3, r4
   1d64e:	4614      	mov	r4, r2
   1d650:	b193      	cbz	r3, 1d678 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1d652:	685b      	ldr	r3, [r3, #4]
   1d654:	463a      	mov	r2, r7
   1d656:	4631      	mov	r1, r6
   1d658:	4628      	mov	r0, r5
   1d65a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1d65c:	2c00      	cmp	r4, #0
   1d65e:	d0f4      	beq.n	1d64a <net_if_call_link_cb+0x1e>
   1d660:	4622      	mov	r2, r4
   1d662:	2c00      	cmp	r4, #0
   1d664:	d0ef      	beq.n	1d646 <net_if_call_link_cb+0x1a>
	return node->next;
   1d666:	6823      	ldr	r3, [r4, #0]
   1d668:	b113      	cbz	r3, 1d670 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1d66a:	b11a      	cbz	r2, 1d674 <net_if_call_link_cb+0x48>
	return node->next;
   1d66c:	6822      	ldr	r2, [r4, #0]
   1d66e:	e7ed      	b.n	1d64c <net_if_call_link_cb+0x20>
   1d670:	2200      	movs	r2, #0
   1d672:	e7eb      	b.n	1d64c <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1d674:	2200      	movs	r2, #0
   1d676:	e7e9      	b.n	1d64c <net_if_call_link_cb+0x20>
	}
}
   1d678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d67a:	bf00      	nop
   1d67c:	20001bdc 	.word	0x20001bdc

0001d680 <net_if_send_data>:
{
   1d680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d684:	4606      	mov	r6, r0
   1d686:	460c      	mov	r4, r1
	return pkt->context;
   1d688:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1d68a:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1d68e:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1d692:	f3bf 8f5b 	dmb	ish
   1d696:	68c3      	ldr	r3, [r0, #12]
   1d698:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1d69c:	f013 0f01 	tst.w	r3, #1
   1d6a0:	d10a      	bne.n	1d6b8 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1d6a2:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1d6a6:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1d6a8:	b10f      	cbz	r7, 1d6ae <net_if_send_data+0x2e>
   1d6aa:	2d02      	cmp	r5, #2
   1d6ac:	d02e      	beq.n	1d70c <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1d6ae:	2d02      	cmp	r5, #2
   1d6b0:	d050      	beq.n	1d754 <net_if_send_data+0xd4>
}
   1d6b2:	4628      	mov	r0, r5
   1d6b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6b8:	f3bf 8f5b 	dmb	ish
   1d6bc:	68c3      	ldr	r3, [r0, #12]
   1d6be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1d6c2:	f013 0f02 	tst.w	r3, #2
   1d6c6:	d101      	bne.n	1d6cc <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1d6c8:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1d6ca:	b173      	cbz	r3, 1d6ea <net_if_send_data+0x6a>
	return pkt->family;
   1d6cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1d6d0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d6d4:	2b0a      	cmp	r3, #10
   1d6d6:	d00f      	beq.n	1d6f8 <net_if_send_data+0x78>
   1d6d8:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1d6da:	6873      	ldr	r3, [r6, #4]
   1d6dc:	685b      	ldr	r3, [r3, #4]
   1d6de:	4630      	mov	r0, r6
   1d6e0:	4798      	blx	r3
   1d6e2:	4605      	mov	r5, r0
	int status = -EIO;
   1d6e4:	f06f 0804 	mvn.w	r8, #4
   1d6e8:	e7de      	b.n	1d6a8 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1d6ea:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1d6ec:	691a      	ldr	r2, [r3, #16]
   1d6ee:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1d6f0:	7d1b      	ldrb	r3, [r3, #20]
   1d6f2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1d6f6:	e7e9      	b.n	1d6cc <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1d6f8:	4620      	mov	r0, r4
   1d6fa:	f005 f9fb 	bl	22af4 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1d6fe:	4601      	mov	r1, r0
   1d700:	2800      	cmp	r0, #0
   1d702:	d1ea      	bne.n	1d6da <net_if_send_data+0x5a>
	int status = -EIO;
   1d704:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1d708:	2501      	movs	r5, #1
   1d70a:	e7cd      	b.n	1d6a8 <net_if_send_data+0x28>
	if (!context) {
   1d70c:	2f00      	cmp	r7, #0
   1d70e:	d0ce      	beq.n	1d6ae <net_if_send_data+0x2e>
	if (context->send_cb) {
   1d710:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1d714:	f1bb 0f00 	cmp.w	fp, #0
   1d718:	d004      	beq.n	1d724 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1d71a:	683b      	ldr	r3, [r7, #0]
   1d71c:	4652      	mov	r2, sl
   1d71e:	4641      	mov	r1, r8
   1d720:	4638      	mov	r0, r7
   1d722:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1d724:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1d728:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d72c:	d009      	beq.n	1d742 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1d72e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d730:	2b11      	cmp	r3, #17
   1d732:	d008      	beq.n	1d746 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d734:	2b06      	cmp	r3, #6
   1d736:	d1ba      	bne.n	1d6ae <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1d738:	4a0b      	ldr	r2, [pc, #44]	; (1d768 <net_if_send_data+0xe8>)
   1d73a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1d73c:	3301      	adds	r3, #1
   1d73e:	6593      	str	r3, [r2, #88]	; 0x58
   1d740:	e7b5      	b.n	1d6ae <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1d742:	2311      	movs	r3, #17
   1d744:	e7f4      	b.n	1d730 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1d746:	4a08      	ldr	r2, [pc, #32]	; (1d768 <net_if_send_data+0xe8>)
   1d748:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1d74c:	3301      	adds	r3, #1
   1d74e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1d752:	e7ac      	b.n	1d6ae <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1d754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d756:	2b00      	cmp	r3, #0
   1d758:	d0ab      	beq.n	1d6b2 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1d75a:	4642      	mov	r2, r8
   1d75c:	4649      	mov	r1, r9
   1d75e:	4630      	mov	r0, r6
   1d760:	f7ff ff64 	bl	1d62c <net_if_call_link_cb>
   1d764:	e7a5      	b.n	1d6b2 <net_if_send_data+0x32>
   1d766:	bf00      	nop
   1d768:	20002ae0 	.word	0x20002ae0

0001d76c <net_if_tx>:
{
   1d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d770:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1d772:	f850 3b18 	ldr.w	r3, [r0], #24
   1d776:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1d77a:	2100      	movs	r1, #0
   1d77c:	f00c fe5c 	bl	2a438 <k_queue_get>
	if (!pkt) {
   1d780:	2800      	cmp	r0, #0
   1d782:	d062      	beq.n	1d84a <net_if_tx+0xde>
   1d784:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1d786:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1d78a:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1d78c:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1d790:	f3bf 8f5b 	dmb	ish
   1d794:	68f3      	ldr	r3, [r6, #12]
   1d796:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1d79a:	f013 0f01 	tst.w	r3, #1
   1d79e:	d039      	beq.n	1d814 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1d7a0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1d7a2:	2400      	movs	r4, #0
   1d7a4:	e002      	b.n	1d7ac <net_if_tx+0x40>
		bytes += buf->len;
   1d7a6:	899a      	ldrh	r2, [r3, #12]
   1d7a8:	4414      	add	r4, r2
		buf = buf->frags;
   1d7aa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1d7ac:	2b00      	cmp	r3, #0
   1d7ae:	d1fa      	bne.n	1d7a6 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1d7b0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1d7b4:	f043 0301 	orr.w	r3, r3, #1
   1d7b8:	f36f 0341 	bfc	r3, #1, #1
   1d7bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1d7c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d7c4:	4629      	mov	r1, r5
   1d7c6:	4630      	mov	r0, r6
   1d7c8:	4798      	blx	r3
   1d7ca:	4681      	mov	r9, r0
	if (status < 0) {
   1d7cc:	f1b9 0f00 	cmp.w	r9, #0
   1d7d0:	db23      	blt.n	1d81a <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1d7d2:	4a21      	ldr	r2, [pc, #132]	; (1d858 <net_if_tx+0xec>)
   1d7d4:	6853      	ldr	r3, [r2, #4]
   1d7d6:	441c      	add	r4, r3
   1d7d8:	6054      	str	r4, [r2, #4]
	if (context) {
   1d7da:	b18f      	cbz	r7, 1d800 <net_if_tx+0x94>
	if (!context) {
   1d7dc:	b187      	cbz	r7, 1d800 <net_if_tx+0x94>
	if (context->send_cb) {
   1d7de:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1d7e0:	b124      	cbz	r4, 1d7ec <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1d7e2:	683b      	ldr	r3, [r7, #0]
   1d7e4:	4652      	mov	r2, sl
   1d7e6:	4649      	mov	r1, r9
   1d7e8:	4638      	mov	r0, r7
   1d7ea:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1d7ec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1d7f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d7f4:	d01b      	beq.n	1d82e <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1d7f6:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d7f8:	2b11      	cmp	r3, #17
   1d7fa:	d01a      	beq.n	1d832 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d7fc:	2b06      	cmp	r3, #6
   1d7fe:	d01f      	beq.n	1d840 <net_if_tx+0xd4>
	if (dst->addr) {
   1d800:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d802:	b32b      	cbz	r3, 1d850 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1d804:	464a      	mov	r2, r9
   1d806:	4641      	mov	r1, r8
   1d808:	4630      	mov	r0, r6
   1d80a:	f7ff ff0f 	bl	1d62c <net_if_call_link_cb>
	return true;
   1d80e:	2001      	movs	r0, #1
   1d810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1d814:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1d818:	e7d8      	b.n	1d7cc <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1d81a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1d81e:	f36f 0300 	bfc	r3, #0, #1
   1d822:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1d826:	4628      	mov	r0, r5
   1d828:	f001 fa93 	bl	1ed52 <net_pkt_unref>
   1d82c:	e7d5      	b.n	1d7da <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1d82e:	2311      	movs	r3, #17
   1d830:	e7e2      	b.n	1d7f8 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1d832:	4a09      	ldr	r2, [pc, #36]	; (1d858 <net_if_tx+0xec>)
   1d834:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1d838:	3301      	adds	r3, #1
   1d83a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1d83e:	e7df      	b.n	1d800 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1d840:	4a05      	ldr	r2, [pc, #20]	; (1d858 <net_if_tx+0xec>)
   1d842:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1d844:	3301      	adds	r3, #1
   1d846:	6593      	str	r3, [r2, #88]	; 0x58
   1d848:	e7da      	b.n	1d800 <net_if_tx+0x94>
		return false;
   1d84a:	2000      	movs	r0, #0
   1d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1d850:	2001      	movs	r0, #1
}
   1d852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d856:	bf00      	nop
   1d858:	20002ae0 	.word	0x20002ae0

0001d85c <net_if_flush_tx>:
	return (!list->head);
   1d85c:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1d85e:	b14b      	cbz	r3, 1d874 <net_if_flush_tx+0x18>
{
   1d860:	b510      	push	{r4, lr}
   1d862:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1d864:	f00c fffe 	bl	2a864 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1d868:	4620      	mov	r0, r4
   1d86a:	f7ff ff7f 	bl	1d76c <net_if_tx>
   1d86e:	2800      	cmp	r0, #0
   1d870:	d1fa      	bne.n	1d868 <net_if_flush_tx+0xc>
   1d872:	bd10      	pop	{r4, pc}
   1d874:	4770      	bx	lr

0001d876 <net_if_process_events>:
{
   1d876:	b538      	push	{r3, r4, r5, lr}
   1d878:	4604      	mov	r4, r0
   1d87a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1d87c:	e001      	b.n	1d882 <net_if_process_events+0xc>
   1d87e:	3414      	adds	r4, #20
   1d880:	3d01      	subs	r5, #1
   1d882:	b145      	cbz	r5, 1d896 <net_if_process_events+0x20>
		switch (event->state) {
   1d884:	7b63      	ldrb	r3, [r4, #13]
   1d886:	091b      	lsrs	r3, r3, #4
   1d888:	2b04      	cmp	r3, #4
   1d88a:	d1f8      	bne.n	1d87e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1d88c:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1d88e:	3818      	subs	r0, #24
   1d890:	f7ff ff6c 	bl	1d76c <net_if_tx>
			break;
   1d894:	e7f3      	b.n	1d87e <net_if_process_events+0x8>
}
   1d896:	bd38      	pop	{r3, r4, r5, pc}

0001d898 <net_if_tx_thread>:
{
   1d898:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d89a:	f00d f93c 	bl	2ab16 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1d89e:	f7ff f849 	bl	1c934 <net_if_prepare_events>
   1d8a2:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1d8a4:	4c06      	ldr	r4, [pc, #24]	; (1d8c0 <net_if_tx_thread+0x28>)
   1d8a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d8aa:	4601      	mov	r1, r0
   1d8ac:	4620      	mov	r0, r4
   1d8ae:	f00c fa91 	bl	29dd4 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1d8b2:	4629      	mov	r1, r5
   1d8b4:	4620      	mov	r0, r4
   1d8b6:	f7ff ffde 	bl	1d876 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1d8ba:	f00c ffd3 	bl	2a864 <_impl_k_yield>
   1d8be:	e7ee      	b.n	1d89e <net_if_tx_thread+0x6>
   1d8c0:	2000d500 	.word	0x2000d500

0001d8c4 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1d8c4:	4a05      	ldr	r2, [pc, #20]	; (1d8dc <net_if_get_by_index+0x18>)
   1d8c6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1d8ca:	fb03 2000 	mla	r0, r3, r0, r2
   1d8ce:	4b04      	ldr	r3, [pc, #16]	; (1d8e0 <net_if_get_by_index+0x1c>)
   1d8d0:	4298      	cmp	r0, r3
   1d8d2:	d200      	bcs.n	1d8d6 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1d8d4:	4770      	bx	lr
		return NULL;
   1d8d6:	2000      	movs	r0, #0
   1d8d8:	e7fc      	b.n	1d8d4 <net_if_get_by_index+0x10>
   1d8da:	bf00      	nop
   1d8dc:	2000d260 	.word	0x2000d260
   1d8e0:	2000d500 	.word	0x2000d500

0001d8e4 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1d8e4:	4b03      	ldr	r3, [pc, #12]	; (1d8f4 <net_if_get_by_iface+0x10>)
   1d8e6:	1ac0      	subs	r0, r0, r3
   1d8e8:	1140      	asrs	r0, r0, #5
   1d8ea:	4b03      	ldr	r3, [pc, #12]	; (1d8f8 <net_if_get_by_iface+0x14>)
   1d8ec:	fb03 f000 	mul.w	r0, r3, r0
}
   1d8f0:	b2c0      	uxtb	r0, r0
   1d8f2:	4770      	bx	lr
   1d8f4:	2000d260 	.word	0x2000d260
   1d8f8:	3cf3cf3d 	.word	0x3cf3cf3d

0001d8fc <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1d8fc:	b570      	push	{r4, r5, r6, lr}
   1d8fe:	4606      	mov	r6, r0
   1d900:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1d902:	4c05      	ldr	r4, [pc, #20]	; (1d918 <net_if_foreach+0x1c>)
   1d904:	e004      	b.n	1d910 <net_if_foreach+0x14>
		cb(iface, user_data);
   1d906:	4629      	mov	r1, r5
   1d908:	4620      	mov	r0, r4
   1d90a:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1d90c:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1d910:	4b02      	ldr	r3, [pc, #8]	; (1d91c <net_if_foreach+0x20>)
   1d912:	429c      	cmp	r4, r3
   1d914:	d1f7      	bne.n	1d906 <net_if_foreach+0xa>
	}
}
   1d916:	bd70      	pop	{r4, r5, r6, pc}
   1d918:	2000d260 	.word	0x2000d260
   1d91c:	2000d500 	.word	0x2000d500

0001d920 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1d920:	b570      	push	{r4, r5, r6, lr}
   1d922:	f3bf 8f5b 	dmb	ish
   1d926:	68c5      	ldr	r5, [r0, #12]
   1d928:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1d92c:	f015 0501 	ands.w	r5, r5, #1
   1d930:	d123      	bne.n	1d97a <net_if_up+0x5a>
   1d932:	f100 060c 	add.w	r6, r0, #12
   1d936:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1d938:	6843      	ldr	r3, [r0, #4]
   1d93a:	68db      	ldr	r3, [r3, #12]
   1d93c:	b11b      	cbz	r3, 1d946 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1d93e:	2101      	movs	r1, #1
   1d940:	4798      	blx	r3
	if (status < 0) {
   1d942:	2800      	cmp	r0, #0
   1d944:	db1b      	blt.n	1d97e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d946:	f3bf 8f5b 	dmb	ish
   1d94a:	e856 3f00 	ldrex	r3, [r6]
   1d94e:	f043 0301 	orr.w	r3, r3, #1
   1d952:	e846 3200 	strex	r2, r3, [r6]
   1d956:	2a00      	cmp	r2, #0
   1d958:	d1f7      	bne.n	1d94a <net_if_up+0x2a>
   1d95a:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1d95e:	4620      	mov	r0, r4
   1d960:	f7ff f91e 	bl	1cba0 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1d964:	4620      	mov	r0, r4
   1d966:	f7ff f821 	bl	1c9ac <net_if_start_rs>
   1d96a:	2300      	movs	r3, #0
   1d96c:	461a      	mov	r2, r3
   1d96e:	4621      	mov	r1, r4
   1d970:	4804      	ldr	r0, [pc, #16]	; (1d984 <net_if_up+0x64>)
   1d972:	f006 fe61 	bl	24638 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1d976:	4628      	mov	r0, r5
   1d978:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1d97a:	2500      	movs	r5, #0
   1d97c:	e7fb      	b.n	1d976 <net_if_up+0x56>
		return status;
   1d97e:	4605      	mov	r5, r0
   1d980:	e7f9      	b.n	1d976 <net_if_up+0x56>
   1d982:	bf00      	nop
   1d984:	d0010002 	.word	0xd0010002

0001d988 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1d988:	b510      	push	{r4, lr}
   1d98a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1d98c:	f7fe ffaf 	bl	1c8ee <leave_mcast_all>

	net_if_flush_tx(iface);
   1d990:	4620      	mov	r0, r4
   1d992:	f7ff ff63 	bl	1d85c <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1d996:	6863      	ldr	r3, [r4, #4]
   1d998:	68db      	ldr	r3, [r3, #12]
   1d99a:	b123      	cbz	r3, 1d9a6 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1d99c:	2100      	movs	r1, #0
   1d99e:	4620      	mov	r0, r4
   1d9a0:	4798      	blx	r3
	if (status < 0) {
   1d9a2:	2800      	cmp	r0, #0
   1d9a4:	db14      	blt.n	1d9d0 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1d9a6:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d9aa:	f3bf 8f5b 	dmb	ish
   1d9ae:	e853 2f00 	ldrex	r2, [r3]
   1d9b2:	f022 0201 	bic.w	r2, r2, #1
   1d9b6:	e843 2100 	strex	r1, r2, [r3]
   1d9ba:	2900      	cmp	r1, #0
   1d9bc:	d1f7      	bne.n	1d9ae <net_if_down+0x26>
   1d9be:	f3bf 8f5b 	dmb	ish
   1d9c2:	2300      	movs	r3, #0
   1d9c4:	461a      	mov	r2, r3
   1d9c6:	4621      	mov	r1, r4
   1d9c8:	4802      	ldr	r0, [pc, #8]	; (1d9d4 <net_if_down+0x4c>)
   1d9ca:	f006 fe35 	bl	24638 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1d9ce:	2000      	movs	r0, #0
}
   1d9d0:	bd10      	pop	{r4, pc}
   1d9d2:	bf00      	nop
   1d9d4:	d0010001 	.word	0xd0010001

0001d9d8 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1d9d8:	b570      	push	{r4, r5, r6, lr}
   1d9da:	b086      	sub	sp, #24
   1d9dc:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1d9de:	4c1b      	ldr	r4, [pc, #108]	; (1da4c <net_if_init+0x74>)
   1d9e0:	e01b      	b.n	1da1a <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1d9e2:	4620      	mov	r0, r4
   1d9e4:	f850 3b18 	ldr.w	r3, [r0], #24
   1d9e8:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1d9ea:	f00c fcca 	bl	2a382 <k_queue_init>
	api->init(iface);
   1d9ee:	682b      	ldr	r3, [r5, #0]
   1d9f0:	4620      	mov	r0, r4
   1d9f2:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1d9f4:	2340      	movs	r3, #64	; 0x40
   1d9f6:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1d9fa:	f247 5330 	movw	r3, #30000	; 0x7530
   1d9fe:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1da02:	4620      	mov	r0, r4
   1da04:	f7ff fe06 	bl	1d614 <net_if_ipv6_calc_reachable_time>
   1da08:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1da0c:	4910      	ldr	r1, [pc, #64]	; (1da50 <net_if_init+0x78>)
   1da0e:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1da12:	f00d fe51 	bl	2b6b8 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1da16:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1da1a:	4b0e      	ldr	r3, [pc, #56]	; (1da54 <net_if_init+0x7c>)
   1da1c:	429c      	cmp	r4, r3
   1da1e:	d1e0      	bne.n	1d9e2 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1da20:	4b0a      	ldr	r3, [pc, #40]	; (1da4c <net_if_init+0x74>)
   1da22:	429c      	cmp	r4, r3
   1da24:	d010      	beq.n	1da48 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1da26:	2300      	movs	r3, #0
   1da28:	9305      	str	r3, [sp, #20]
   1da2a:	2201      	movs	r2, #1
   1da2c:	9204      	str	r2, [sp, #16]
   1da2e:	f06f 0208 	mvn.w	r2, #8
   1da32:	9203      	str	r2, [sp, #12]
   1da34:	9302      	str	r3, [sp, #8]
   1da36:	9301      	str	r3, [sp, #4]
   1da38:	9600      	str	r6, [sp, #0]
   1da3a:	4b07      	ldr	r3, [pc, #28]	; (1da58 <net_if_init+0x80>)
   1da3c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1da40:	4906      	ldr	r1, [pc, #24]	; (1da5c <net_if_init+0x84>)
   1da42:	4807      	ldr	r0, [pc, #28]	; (1da60 <net_if_init+0x88>)
   1da44:	f00d fae6 	bl	2b014 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1da48:	b006      	add	sp, #24
   1da4a:	bd70      	pop	{r4, r5, r6, pc}
   1da4c:	2000d260 	.word	0x2000d260
   1da50:	0001c9cd 	.word	0x0001c9cd
   1da54:	2000d500 	.word	0x2000d500
   1da58:	0001d899 	.word	0x0001d899
   1da5c:	20004dc8 	.word	0x20004dc8
   1da60:	20000420 	.word	0x20000420

0001da64 <net_if_post_init>:

void net_if_post_init(void)
{
   1da64:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1da66:	4c05      	ldr	r4, [pc, #20]	; (1da7c <net_if_post_init+0x18>)
   1da68:	e004      	b.n	1da74 <net_if_post_init+0x10>
		net_if_up(iface);
   1da6a:	4620      	mov	r0, r4
   1da6c:	f7ff ff58 	bl	1d920 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1da70:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1da74:	4b02      	ldr	r3, [pc, #8]	; (1da80 <net_if_post_init+0x1c>)
   1da76:	429c      	cmp	r4, r3
   1da78:	d1f7      	bne.n	1da6a <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1da7a:	bd10      	pop	{r4, pc}
   1da7c:	2000d260 	.word	0x2000d260
   1da80:	2000d500 	.word	0x2000d500

0001da84 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da86:	4605      	mov	r5, r0
   1da88:	460e      	mov	r6, r1
   1da8a:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1da8c:	2400      	movs	r4, #0
   1da8e:	e003      	b.n	1da98 <check_used_port+0x14>
   1da90:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1da92:	42ab      	cmp	r3, r5
   1da94:	d010      	beq.n	1dab8 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1da96:	3401      	adds	r4, #1
   1da98:	2c05      	cmp	r4, #5
   1da9a:	dc2b      	bgt.n	1daf4 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1da9c:	2368      	movs	r3, #104	; 0x68
   1da9e:	4a16      	ldr	r2, [pc, #88]	; (1daf8 <check_used_port+0x74>)
   1daa0:	fb03 2304 	mla	r3, r3, r4, r2
   1daa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1daa8:	f013 0f01 	tst.w	r3, #1
   1daac:	d0f3      	beq.n	1da96 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1daae:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dab2:	d0ed      	beq.n	1da90 <check_used_port+0xc>
		return IPPROTO_TCP;
   1dab4:	2306      	movs	r3, #6
   1dab6:	e7ec      	b.n	1da92 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1dab8:	2368      	movs	r3, #104	; 0x68
   1daba:	fb03 f304 	mul.w	r3, r3, r4
   1dabe:	3308      	adds	r3, #8
   1dac0:	4a0d      	ldr	r2, [pc, #52]	; (1daf8 <check_used_port+0x74>)
   1dac2:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1dac4:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1dac6:	42b2      	cmp	r2, r6
   1dac8:	d1e5      	bne.n	1da96 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1daca:	883a      	ldrh	r2, [r7, #0]
   1dacc:	2a0a      	cmp	r2, #10
   1dace:	d007      	beq.n	1dae0 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1dad0:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1dad2:	681a      	ldr	r2, [r3, #0]
   1dad4:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1dad6:	429a      	cmp	r2, r3
   1dad8:	d1dd      	bne.n	1da96 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1dada:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1dae0:	2210      	movs	r2, #16
   1dae2:	1d39      	adds	r1, r7, #4
   1dae4:	6858      	ldr	r0, [r3, #4]
   1dae6:	f00e fa35 	bl	2bf54 <memcmp>
			if (net_ipv6_addr_cmp(
   1daea:	2800      	cmp	r0, #0
   1daec:	d1d3      	bne.n	1da96 <check_used_port+0x12>
				return -EEXIST;
   1daee:	f06f 0010 	mvn.w	r0, #16
   1daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1daf4:	2000      	movs	r0, #0
   1daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1daf8:	20001c30 	.word	0x20001c30

0001dafc <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1dafc:	b570      	push	{r4, r5, r6, lr}
   1dafe:	4606      	mov	r6, r0
   1db00:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1db02:	884c      	ldrh	r4, [r1, #2]
   1db04:	b16c      	cbz	r4, 1db22 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1db06:	4620      	mov	r0, r4
   1db08:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1db0a:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1db0c:	0a1c      	lsrs	r4, r3, #8
   1db0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1db12:	b29c      	uxth	r4, r3
   1db14:	462a      	mov	r2, r5
   1db16:	4621      	mov	r1, r4
   1db18:	f7ff ffb4 	bl	1da84 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1db1c:	f110 0f11 	cmn.w	r0, #17
   1db20:	d1f1      	bne.n	1db06 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1db22:	f7e4 fb9b 	bl	225c <sys_rand32_get>
   1db26:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1db2a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1db2e:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1db30:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1db34:	f012 0f40 	tst.w	r2, #64	; 0x40
   1db38:	d0e7      	beq.n	1db0a <find_available_port+0xe>
		return IPPROTO_TCP;
   1db3a:	2006      	movs	r0, #6
   1db3c:	e7e6      	b.n	1db0c <find_available_port+0x10>

0001db3e <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1db3e:	b500      	push	{lr}
   1db40:	b087      	sub	sp, #28
   1db42:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1db44:	2200      	movs	r2, #0
   1db46:	a906      	add	r1, sp, #24
   1db48:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1db4c:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1db4e:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1db50:	9102      	str	r1, [sp, #8]
   1db52:	9301      	str	r3, [sp, #4]
   1db54:	9200      	str	r2, [sp, #0]
   1db56:	4613      	mov	r3, r2
   1db58:	2101      	movs	r1, #1
   1db5a:	f007 f9dd 	bl	24f18 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1db5e:	b928      	cbnz	r0, 1db6c <queue_fin+0x2e>
   1db60:	9805      	ldr	r0, [sp, #20]
   1db62:	b118      	cbz	r0, 1db6c <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1db64:	f007 fcdc 	bl	25520 <net_tcp_send_pkt>
	if (ret < 0) {
   1db68:	2800      	cmp	r0, #0
   1db6a:	db02      	blt.n	1db72 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1db6c:	b007      	add	sp, #28
   1db6e:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1db72:	9805      	ldr	r0, [sp, #20]
   1db74:	f001 f8ed 	bl	1ed52 <net_pkt_unref>
   1db78:	e7f8      	b.n	1db6c <queue_fin+0x2e>

0001db7a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1db7a:	b500      	push	{lr}
   1db7c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1db7e:	a901      	add	r1, sp, #4
   1db80:	f007 fb1c 	bl	251bc <net_tcp_get_hdr>
	if (tcp_hdr) {
   1db84:	b128      	cbz	r0, 1db92 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1db86:	7b00      	ldrb	r0, [r0, #12]
   1db88:	0900      	lsrs	r0, r0, #4
   1db8a:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1db8c:	b007      	add	sp, #28
   1db8e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1db92:	2000      	movs	r0, #0
   1db94:	e7fa      	b.n	1db8c <tcp_hdr_len+0x12>

0001db96 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1db96:	b570      	push	{r4, r5, r6, lr}
   1db98:	b082      	sub	sp, #8
   1db9a:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1db9c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1db9e:	2400      	movs	r4, #0
   1dba0:	e002      	b.n	1dba8 <set_appdata_values+0x12>
		bytes += buf->len;
   1dba2:	899a      	ldrh	r2, [r3, #12]
   1dba4:	4414      	add	r4, r2
		buf = buf->frags;
   1dba6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1dba8:	2b00      	cmp	r3, #0
   1dbaa:	d1fa      	bne.n	1dba2 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1dbac:	2911      	cmp	r1, #17
   1dbae:	d020      	beq.n	1dbf2 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1dbb0:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1dbb2:	2906      	cmp	r1, #6
   1dbb4:	d01f      	beq.n	1dbf6 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1dbb6:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1dbba:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1dbbe:	4419      	add	r1, r3
   1dbc0:	4431      	add	r1, r6
   1dbc2:	f10d 0206 	add.w	r2, sp, #6
   1dbc6:	b289      	uxth	r1, r1
   1dbc8:	4628      	mov	r0, r5
   1dbca:	f001 fb91 	bl	1f2f0 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1dbce:	b120      	cbz	r0, 1dbda <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1dbd0:	6883      	ldr	r3, [r0, #8]
   1dbd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dbd6:	4413      	add	r3, r2
	pkt->appdata = data;
   1dbd8:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1dbda:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1dbde:	1ae3      	subs	r3, r4, r3
   1dbe0:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1dbe2:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1dbe6:	1b1b      	subs	r3, r3, r4
   1dbe8:	b29b      	uxth	r3, r3
   1dbea:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1dbec:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1dbee:	b002      	add	sp, #8
   1dbf0:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1dbf2:	2608      	movs	r6, #8
   1dbf4:	e7dd      	b.n	1dbb2 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1dbf6:	4628      	mov	r0, r5
   1dbf8:	f7ff ffbf 	bl	1db7a <tcp_hdr_len>
   1dbfc:	b286      	uxth	r6, r0
   1dbfe:	e7da      	b.n	1dbb6 <set_appdata_values+0x20>

0001dc00 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc02:	460d      	mov	r5, r1
   1dc04:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1dc06:	2300      	movs	r3, #0
   1dc08:	e000      	b.n	1dc0c <packet_received+0xc>
   1dc0a:	3301      	adds	r3, #1
   1dc0c:	2b05      	cmp	r3, #5
   1dc0e:	dc12      	bgt.n	1dc36 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1dc10:	2268      	movs	r2, #104	; 0x68
   1dc12:	4926      	ldr	r1, [pc, #152]	; (1dcac <packet_received+0xac>)
   1dc14:	fb02 1203 	mla	r2, r2, r3, r1
   1dc18:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1dc1c:	f012 0f01 	tst.w	r2, #1
   1dc20:	d0f3      	beq.n	1dc0a <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1dc22:	2268      	movs	r2, #104	; 0x68
   1dc24:	fb02 1203 	mla	r2, r2, r3, r1
   1dc28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1dc2a:	4290      	cmp	r0, r2
   1dc2c:	d1ed      	bne.n	1dc0a <packet_received+0xa>
			return &contexts[i];
   1dc2e:	2268      	movs	r2, #104	; 0x68
   1dc30:	fb02 1403 	mla	r4, r2, r3, r1
   1dc34:	e000      	b.n	1dc38 <packet_received+0x38>
	return NULL;
   1dc36:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1dc38:	6968      	ldr	r0, [r5, #20]
   1dc3a:	f7ff fe53 	bl	1d8e4 <net_if_get_by_iface>
   1dc3e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1dc42:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1dc44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dc46:	b373      	cbz	r3, 1dca6 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1dc48:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1dc4c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dc50:	d017      	beq.n	1dc82 <packet_received+0x82>
		return IPPROTO_TCP;
   1dc52:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1dc54:	2a06      	cmp	r2, #6
   1dc56:	d016      	beq.n	1dc86 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1dc58:	2111      	movs	r1, #17
   1dc5a:	4628      	mov	r0, r5
   1dc5c:	f7ff ff9b 	bl	1db96 <set_appdata_values>
	return pkt->appdatalen;
   1dc60:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1dc62:	4a13      	ldr	r2, [pc, #76]	; (1dcb0 <packet_received+0xb0>)
   1dc64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1dc66:	440b      	add	r3, r1
   1dc68:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1dc6a:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1dc6c:	4633      	mov	r3, r6
   1dc6e:	2200      	movs	r2, #0
   1dc70:	4629      	mov	r1, r5
   1dc72:	4620      	mov	r0, r4
   1dc74:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1dc76:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1dc7a:	f00c ff4c 	bl	2ab16 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1dc7e:	2000      	movs	r0, #0
   1dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1dc82:	2211      	movs	r2, #17
   1dc84:	e7e6      	b.n	1dc54 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1dc86:	f013 0f20 	tst.w	r3, #32
   1dc8a:	d00a      	beq.n	1dca2 <packet_received+0xa2>
		return SOCK_STREAM;
   1dc8c:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1dc8e:	2b01      	cmp	r3, #1
   1dc90:	d1e6      	bne.n	1dc60 <packet_received+0x60>
   1dc92:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1dc94:	2b00      	cmp	r3, #0
   1dc96:	d1e3      	bne.n	1dc60 <packet_received+0x60>
			net_pkt_unref(pkt);
   1dc98:	4628      	mov	r0, r5
   1dc9a:	f001 f85a 	bl	1ed52 <net_pkt_unref>
			return NET_OK;
   1dc9e:	2000      	movs	r0, #0
   1dca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1dca2:	2302      	movs	r3, #2
   1dca4:	e7f3      	b.n	1dc8e <packet_received+0x8e>
		return NET_DROP;
   1dca6:	2002      	movs	r0, #2
}
   1dca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcaa:	bf00      	nop
   1dcac:	20001c30 	.word	0x20001c30
   1dcb0:	20002ae0 	.word	0x20002ae0

0001dcb4 <send_reset>:
{
   1dcb4:	b510      	push	{r4, lr}
   1dcb6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1dcb8:	aa02      	add	r2, sp, #8
   1dcba:	2300      	movs	r3, #0
   1dcbc:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1dcc0:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1dcc2:	f007 f85a 	bl	24d7a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1dcc6:	4604      	mov	r4, r0
   1dcc8:	b928      	cbnz	r0, 1dcd6 <send_reset+0x22>
   1dcca:	9801      	ldr	r0, [sp, #4]
   1dccc:	b118      	cbz	r0, 1dcd6 <send_reset+0x22>
	ret = net_send_data(pkt);
   1dcce:	f7fe fc3f 	bl	1c550 <net_send_data>
	if (ret < 0) {
   1dcd2:	1e04      	subs	r4, r0, #0
   1dcd4:	db02      	blt.n	1dcdc <send_reset+0x28>
}
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	b002      	add	sp, #8
   1dcda:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1dcdc:	9801      	ldr	r0, [sp, #4]
   1dcde:	f001 f838 	bl	1ed52 <net_pkt_unref>
   1dce2:	e7f8      	b.n	1dcd6 <send_reset+0x22>

0001dce4 <send_ack>:
{
   1dce4:	b510      	push	{r4, lr}
   1dce6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1dce8:	2300      	movs	r3, #0
   1dcea:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1dcec:	b932      	cbnz	r2, 1dcfc <send_ack+0x18>
   1dcee:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1dcf0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1dcf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1dcf8:	429a      	cmp	r2, r3
   1dcfa:	d011      	beq.n	1dd20 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1dcfc:	aa01      	add	r2, sp, #4
   1dcfe:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1dd00:	f007 f99c 	bl	2503c <net_tcp_prepare_ack>
	if (ret) {
   1dd04:	4604      	mov	r4, r0
   1dd06:	b110      	cbz	r0, 1dd0e <send_ack+0x2a>
}
   1dd08:	4620      	mov	r0, r4
   1dd0a:	b002      	add	sp, #8
   1dd0c:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1dd0e:	9801      	ldr	r0, [sp, #4]
   1dd10:	f007 fc06 	bl	25520 <net_tcp_send_pkt>
	if (ret < 0) {
   1dd14:	1e04      	subs	r4, r0, #0
   1dd16:	daf7      	bge.n	1dd08 <send_ack+0x24>
		net_pkt_unref(pkt);
   1dd18:	9801      	ldr	r0, [sp, #4]
   1dd1a:	f001 f81a 	bl	1ed52 <net_pkt_unref>
   1dd1e:	e7f3      	b.n	1dd08 <send_ack+0x24>
		return 0;
   1dd20:	2400      	movs	r4, #0
   1dd22:	e7f1      	b.n	1dd08 <send_ack+0x24>

0001dd24 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1dd24:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1dd26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1dd2a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1dd2e:	2b02      	cmp	r3, #2
   1dd30:	d001      	beq.n	1dd36 <_tcp_synack_received+0x12>
}
   1dd32:	2002      	movs	r0, #2
   1dd34:	4770      	bx	lr
{
   1dd36:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd38:	b09f      	sub	sp, #124	; 0x7c
   1dd3a:	4615      	mov	r5, r2
   1dd3c:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1dd3e:	6948      	ldr	r0, [r1, #20]
   1dd40:	f7ff fdd0 	bl	1d8e4 <net_if_get_by_iface>
   1dd44:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1dd48:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1dd4a:	a911      	add	r1, sp, #68	; 0x44
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	f007 fa35 	bl	251bc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1dd52:	4606      	mov	r6, r0
   1dd54:	b1f8      	cbz	r0, 1dd96 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1dd56:	7b43      	ldrb	r3, [r0, #13]
   1dd58:	f013 0f04 	tst.w	r3, #4
   1dd5c:	d11e      	bne.n	1dd9c <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1dd5e:	f013 0f02 	tst.w	r3, #2
   1dd62:	d013      	beq.n	1dd8c <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1dd64:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1dd66:	7901      	ldrb	r1, [r0, #4]
   1dd68:	7943      	ldrb	r3, [r0, #5]
   1dd6a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1dd6e:	7980      	ldrb	r0, [r0, #6]
   1dd70:	79f3      	ldrb	r3, [r6, #7]
   1dd72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1dd76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1dd7a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1dd7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1dd80:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1dd82:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1dd86:	3301      	adds	r3, #1
   1dd88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1dd8c:	7b73      	ldrb	r3, [r6, #13]
   1dd8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dd92:	2b12      	cmp	r3, #18
   1dd94:	d019      	beq.n	1ddca <_tcp_synack_received+0xa6>
}
   1dd96:	2002      	movs	r0, #2
   1dd98:	b01f      	add	sp, #124	; 0x7c
   1dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1dd9c:	4621      	mov	r1, r4
   1dd9e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dda0:	f007 fa87 	bl	252b2 <net_tcp_validate_seq>
   1dda4:	b160      	cbz	r0, 1ddc0 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1dda6:	4a40      	ldr	r2, [pc, #256]	; (1dea8 <_tcp_synack_received+0x184>)
   1dda8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1ddaa:	3301      	adds	r3, #1
   1ddac:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1ddae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1ddb0:	2b00      	cmp	r3, #0
   1ddb2:	d0f0      	beq.n	1dd96 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1ddb4:	682a      	ldr	r2, [r5, #0]
   1ddb6:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1ddba:	4628      	mov	r0, r5
   1ddbc:	4798      	blx	r3
   1ddbe:	e7ea      	b.n	1dd96 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1ddc0:	4a39      	ldr	r2, [pc, #228]	; (1dea8 <_tcp_synack_received+0x184>)
   1ddc2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1ddc4:	3301      	adds	r3, #1
   1ddc6:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1ddc8:	e7e5      	b.n	1dd96 <_tcp_synack_received+0x72>
	return pkt->family;
   1ddca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ddce:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1ddd2:	2b0a      	cmp	r3, #10
   1ddd4:	d1df      	bne.n	1dd96 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1ddd6:	f04f 0e0a 	mov.w	lr, #10
   1ddda:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1ddde:	8833      	ldrh	r3, [r6, #0]
   1dde0:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1dde4:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1dde6:	ac16      	add	r4, sp, #88	; 0x58
   1dde8:	68bb      	ldr	r3, [r7, #8]
   1ddea:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ddee:	6859      	ldr	r1, [r3, #4]
   1ddf0:	689a      	ldr	r2, [r3, #8]
   1ddf2:	68db      	ldr	r3, [r3, #12]
   1ddf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ddf6:	ac06      	add	r4, sp, #24
   1ddf8:	ab16      	add	r3, sp, #88	; 0x58
   1ddfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ddfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1de00:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1de04:	8872      	ldrh	r2, [r6, #2]
   1de06:	0a13      	lsrs	r3, r2, #8
   1de08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1de0c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1de10:	ac1a      	add	r4, sp, #104	; 0x68
   1de12:	68bb      	ldr	r3, [r7, #8]
   1de14:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1de18:	6859      	ldr	r1, [r3, #4]
   1de1a:	689a      	ldr	r2, [r3, #8]
   1de1c:	68db      	ldr	r3, [r3, #12]
   1de1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1de20:	ac0c      	add	r4, sp, #48	; 0x30
   1de22:	ab1e      	add	r3, sp, #120	; 0x78
   1de24:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1de28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1de2c:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1de2e:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1de32:	f008 fcdb 	bl	267ec <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1de36:	8832      	ldrh	r2, [r6, #0]
   1de38:	0a13      	lsrs	r3, r2, #8
   1de3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1de3e:	8871      	ldrh	r1, [r6, #2]
   1de40:	0a0a      	lsrs	r2, r1, #8
   1de42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1de46:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1de48:	9403      	str	r4, [sp, #12]
   1de4a:	9502      	str	r5, [sp, #8]
   1de4c:	4917      	ldr	r1, [pc, #92]	; (1deac <_tcp_synack_received+0x188>)
   1de4e:	9101      	str	r1, [sp, #4]
   1de50:	9200      	str	r2, [sp, #0]
   1de52:	b29b      	uxth	r3, r3
   1de54:	aa0b      	add	r2, sp, #44	; 0x2c
   1de56:	a905      	add	r1, sp, #20
   1de58:	2006      	movs	r0, #6
   1de5a:	f008 fce5 	bl	26828 <net_conn_register>
		if (ret < 0) {
   1de5e:	2800      	cmp	r0, #0
   1de60:	db1c      	blt.n	1de9c <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1de62:	2104      	movs	r1, #4
   1de64:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1de66:	f006 ffba 	bl	24dde <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1de6a:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1de6e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1de72:	f043 0304 	orr.w	r3, r3, #4
   1de76:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1de7a:	2200      	movs	r2, #0
   1de7c:	a905      	add	r1, sp, #20
   1de7e:	4628      	mov	r0, r5
   1de80:	f7ff ff30 	bl	1dce4 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1de84:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1de86:	30ac      	adds	r0, #172	; 0xac
   1de88:	f00c fe45 	bl	2ab16 <_impl_k_sem_give>
		if (context->connect_cb) {
   1de8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1de8e:	2b00      	cmp	r3, #0
   1de90:	d081      	beq.n	1dd96 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1de92:	682a      	ldr	r2, [r5, #0]
   1de94:	2100      	movs	r1, #0
   1de96:	4628      	mov	r0, r5
   1de98:	4798      	blx	r3
   1de9a:	e77c      	b.n	1dd96 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1de9c:	a905      	add	r1, sp, #20
   1de9e:	4628      	mov	r0, r5
   1dea0:	f7ff ff08 	bl	1dcb4 <send_reset>
			return NET_DROP;
   1dea4:	e777      	b.n	1dd96 <_tcp_synack_received+0x72>
   1dea6:	bf00      	nop
   1dea8:	20002ae0 	.word	0x20002ae0
   1deac:	0001e405 	.word	0x0001e405

0001deb0 <create_udp_packet>:
{
   1deb0:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1deb2:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1deb6:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1deba:	2c0a      	cmp	r4, #10
   1debc:	d118      	bne.n	1def0 <create_udp_packet+0x40>
   1debe:	461e      	mov	r6, r3
   1dec0:	4615      	mov	r5, r2
   1dec2:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1dec4:	1d13      	adds	r3, r2, #4
   1dec6:	2200      	movs	r2, #0
   1dec8:	f003 f9a4 	bl	21214 <net_ipv6_create>
   1decc:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1dece:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1ded2:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1ded6:	886b      	ldrh	r3, [r5, #2]
   1ded8:	4402      	add	r2, r0
   1deda:	4620      	mov	r0, r4
   1dedc:	f006 fd90 	bl	24a00 <net_udp_insert>
		if (!tmp) {
   1dee0:	4605      	mov	r5, r0
   1dee2:	b140      	cbz	r0, 1def6 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1dee4:	4601      	mov	r1, r0
   1dee6:	4620      	mov	r0, r4
   1dee8:	f003 fbf0 	bl	216cc <net_ipv6_finalize>
	*out_pkt = pkt;
   1deec:	6035      	str	r5, [r6, #0]
	return r;
   1deee:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1def0:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1def4:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1def6:	f06f 000b 	mvn.w	r0, #11
}
   1defa:	bd70      	pop	{r4, r5, r6, pc}

0001defc <send_data>:
{
   1defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df00:	4604      	mov	r4, r0
   1df02:	4615      	mov	r5, r2
   1df04:	9e06      	ldr	r6, [sp, #24]
   1df06:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1df08:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1df0a:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1df0c:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1df0e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1df12:	f013 0f40 	tst.w	r3, #64	; 0x40
   1df16:	d011      	beq.n	1df3c <send_data+0x40>
		return IPPROTO_TCP;
   1df18:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1df1a:	2b11      	cmp	r3, #17
   1df1c:	d010      	beq.n	1df40 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1df1e:	2b06      	cmp	r3, #6
   1df20:	d113      	bne.n	1df4a <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1df22:	4620      	mov	r0, r4
   1df24:	f007 fbf8 	bl	25718 <net_tcp_send_data>
   1df28:	4680      	mov	r8, r0
		if (cb) {
   1df2a:	b125      	cbz	r5, 1df36 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1df2c:	463b      	mov	r3, r7
   1df2e:	4632      	mov	r2, r6
   1df30:	4601      	mov	r1, r0
   1df32:	4620      	mov	r0, r4
   1df34:	47a8      	blx	r5
}
   1df36:	4640      	mov	r0, r8
   1df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1df3c:	2311      	movs	r3, #17
   1df3e:	e7ec      	b.n	1df1a <send_data+0x1e>
		return net_send_data(pkt);
   1df40:	4608      	mov	r0, r1
   1df42:	f7fe fb05 	bl	1c550 <net_send_data>
   1df46:	4680      	mov	r8, r0
   1df48:	e7f5      	b.n	1df36 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1df4a:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1df4e:	e7f2      	b.n	1df36 <send_data+0x3a>

0001df50 <net_context_get>:
{
   1df50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1df54:	2802      	cmp	r0, #2
   1df56:	f000 80e9 	beq.w	1e12c <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1df5a:	280a      	cmp	r0, #10
   1df5c:	f040 80e9 	bne.w	1e132 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1df60:	1e4c      	subs	r4, r1, #1
   1df62:	b2e4      	uxtb	r4, r4
   1df64:	2c01      	cmp	r4, #1
   1df66:	f200 80e7 	bhi.w	1e138 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1df6a:	2a11      	cmp	r2, #17
   1df6c:	d002      	beq.n	1df74 <net_context_get+0x24>
   1df6e:	2a06      	cmp	r2, #6
   1df70:	f040 80e5 	bne.w	1e13e <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1df74:	2901      	cmp	r1, #1
   1df76:	d01c      	beq.n	1dfb2 <net_context_get+0x62>
   1df78:	2902      	cmp	r1, #2
   1df7a:	d01f      	beq.n	1dfbc <net_context_get+0x6c>
	if (!context) {
   1df7c:	2b00      	cmp	r3, #0
   1df7e:	f000 80e1 	beq.w	1e144 <net_context_get+0x1f4>
   1df82:	461f      	mov	r7, r3
   1df84:	4690      	mov	r8, r2
   1df86:	460e      	mov	r6, r1
   1df88:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1df8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1df8e:	4870      	ldr	r0, [pc, #448]	; (1e150 <net_context_get+0x200>)
   1df90:	f00c fdd4 	bl	2ab3c <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1df94:	2400      	movs	r4, #0
   1df96:	2c05      	cmp	r4, #5
   1df98:	f300 80c5 	bgt.w	1e126 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1df9c:	2568      	movs	r5, #104	; 0x68
   1df9e:	4b6d      	ldr	r3, [pc, #436]	; (1e154 <net_context_get+0x204>)
   1dfa0:	fb05 3504 	mla	r5, r5, r4, r3
   1dfa4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1dfa8:	f013 0f01 	tst.w	r3, #1
   1dfac:	d00b      	beq.n	1dfc6 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1dfae:	3401      	adds	r4, #1
   1dfb0:	e7f1      	b.n	1df96 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1dfb2:	2a11      	cmp	r2, #17
   1dfb4:	d1e0      	bne.n	1df78 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1dfb6:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1dfba:	e076      	b.n	1e0aa <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1dfbc:	2a06      	cmp	r2, #6
   1dfbe:	d1dd      	bne.n	1df7c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1dfc0:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1dfc4:	e071      	b.n	1e0aa <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1dfc6:	f1b8 0f06 	cmp.w	r8, #6
   1dfca:	d071      	beq.n	1e0b0 <net_context_get+0x160>
		contexts[i].flags = 0;
   1dfcc:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1dfd0:	4b60      	ldr	r3, [pc, #384]	; (1e154 <net_context_get+0x204>)
   1dfd2:	fb0a 3a04 	mla	sl, sl, r4, r3
   1dfd6:	2300      	movs	r3, #0
   1dfd8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1dfdc:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dfe0:	2201      	movs	r2, #1
   1dfe2:	f3bf 8f5b 	dmb	ish
   1dfe6:	e853 1f00 	ldrex	r1, [r3]
   1dfea:	e843 2000 	strex	r0, r2, [r3]
   1dfee:	2800      	cmp	r0, #0
   1dff0:	d1f9      	bne.n	1dfe6 <net_context_get+0x96>
   1dff2:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1dff6:	f1b9 0f0a 	cmp.w	r9, #10
   1dffa:	d06d      	beq.n	1e0d8 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1dffc:	2368      	movs	r3, #104	; 0x68
   1dffe:	4a55      	ldr	r2, [pc, #340]	; (1e154 <net_context_get+0x204>)
   1e000:	fb03 2304 	mla	r3, r3, r4, r2
   1e004:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e008:	f022 0210 	bic.w	r2, r2, #16
   1e00c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1e010:	2e01      	cmp	r6, #1
   1e012:	d068      	beq.n	1e0e6 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1e014:	2368      	movs	r3, #104	; 0x68
   1e016:	4a4f      	ldr	r2, [pc, #316]	; (1e154 <net_context_get+0x204>)
   1e018:	fb03 2304 	mla	r3, r3, r4, r2
   1e01c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e020:	f022 0220 	bic.w	r2, r2, #32
   1e024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1e028:	f1b8 0f06 	cmp.w	r8, #6
   1e02c:	d066      	beq.n	1e0fc <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1e02e:	2368      	movs	r3, #104	; 0x68
   1e030:	4a48      	ldr	r2, [pc, #288]	; (1e154 <net_context_get+0x204>)
   1e032:	fb03 2304 	mla	r3, r3, r4, r2
   1e036:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e03a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1e03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1e042:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1e154 <net_context_get+0x204>
   1e046:	2568      	movs	r5, #104	; 0x68
   1e048:	fb05 f504 	mul.w	r5, r5, r4
   1e04c:	eb08 0305 	add.w	r3, r8, r5
   1e050:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e054:	f042 0201 	orr.w	r2, r2, #1
   1e058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1e05c:	2600      	movs	r6, #0
   1e05e:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1e062:	f105 0010 	add.w	r0, r5, #16
   1e066:	4440      	add	r0, r8
   1e068:	2218      	movs	r2, #24
   1e06a:	4631      	mov	r1, r6
   1e06c:	3004      	adds	r0, #4
   1e06e:	f00e f805 	bl	2c07c <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1e072:	3508      	adds	r5, #8
   1e074:	4445      	add	r5, r8
   1e076:	220c      	movs	r2, #12
   1e078:	4631      	mov	r1, r6
   1e07a:	4628      	mov	r0, r5
   1e07c:	f00d fffe 	bl	2c07c <memset>
		if (family == AF_INET6) {
   1e080:	f1b9 0f0a 	cmp.w	r9, #10
   1e084:	d045      	beq.n	1e112 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1e086:	2068      	movs	r0, #104	; 0x68
   1e088:	fb00 f404 	mul.w	r4, r0, r4
   1e08c:	3440      	adds	r4, #64	; 0x40
   1e08e:	4831      	ldr	r0, [pc, #196]	; (1e154 <net_context_get+0x204>)
   1e090:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1e092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e096:	2101      	movs	r1, #1
   1e098:	3004      	adds	r0, #4
   1e09a:	f00c fd33 	bl	2ab04 <_impl_k_sem_init>
		*context = &contexts[i];
   1e09e:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1e0a2:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1e0a4:	482a      	ldr	r0, [pc, #168]	; (1e150 <net_context_get+0x200>)
   1e0a6:	f00c fd36 	bl	2ab16 <_impl_k_sem_give>
}
   1e0aa:	4620      	mov	r0, r4
   1e0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1e0b0:	2568      	movs	r5, #104	; 0x68
   1e0b2:	4b28      	ldr	r3, [pc, #160]	; (1e154 <net_context_get+0x204>)
   1e0b4:	fb05 3504 	mla	r5, r5, r4, r3
   1e0b8:	4628      	mov	r0, r5
   1e0ba:	f006 fdab 	bl	24c14 <net_tcp_alloc>
   1e0be:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1e0c0:	2800      	cmp	r0, #0
   1e0c2:	d042      	beq.n	1e14a <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1e0c4:	4924      	ldr	r1, [pc, #144]	; (1e158 <net_context_get+0x208>)
   1e0c6:	3008      	adds	r0, #8
   1e0c8:	f00d faf6 	bl	2b6b8 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1e0cc:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e0ce:	4923      	ldr	r1, [pc, #140]	; (1e15c <net_context_get+0x20c>)
   1e0d0:	3030      	adds	r0, #48	; 0x30
   1e0d2:	f00d faf1 	bl	2b6b8 <k_delayed_work_init>
   1e0d6:	e779      	b.n	1dfcc <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1e0d8:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1e0dc:	f042 0210 	orr.w	r2, r2, #16
   1e0e0:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1e0e4:	e794      	b.n	1e010 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1e0e6:	2368      	movs	r3, #104	; 0x68
   1e0e8:	4a1a      	ldr	r2, [pc, #104]	; (1e154 <net_context_get+0x204>)
   1e0ea:	fb03 2304 	mla	r3, r3, r4, r2
   1e0ee:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e0f2:	f042 0220 	orr.w	r2, r2, #32
   1e0f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1e0fa:	e795      	b.n	1e028 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1e0fc:	2368      	movs	r3, #104	; 0x68
   1e0fe:	4a15      	ldr	r2, [pc, #84]	; (1e154 <net_context_get+0x204>)
   1e100:	fb03 2304 	mla	r3, r3, r4, r2
   1e104:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1e108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1e10c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1e110:	e797      	b.n	1e042 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1e112:	4629      	mov	r1, r5
   1e114:	4650      	mov	r0, sl
   1e116:	f7ff fcf1 	bl	1dafc <find_available_port>
   1e11a:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1e11c:	2800      	cmp	r0, #0
   1e11e:	d1b2      	bne.n	1e086 <net_context_get+0x136>
				return -EADDRINUSE;
   1e120:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1e124:	e7c1      	b.n	1e0aa <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1e126:	f06f 0401 	mvn.w	r4, #1
   1e12a:	e7bb      	b.n	1e0a4 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1e12c:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1e130:	e7bb      	b.n	1e0aa <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1e132:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1e136:	e7b8      	b.n	1e0aa <net_context_get+0x15a>
		return -EPROTOTYPE;
   1e138:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1e13c:	e7b5      	b.n	1e0aa <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1e13e:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1e142:	e7b2      	b.n	1e0aa <net_context_get+0x15a>
		return -EINVAL;
   1e144:	f06f 0415 	mvn.w	r4, #21
   1e148:	e7af      	b.n	1e0aa <net_context_get+0x15a>
				return -ENOBUFS;
   1e14a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1e14e:	e7ac      	b.n	1e0aa <net_context_get+0x15a>
   1e150:	20001ea0 	.word	0x20001ea0
   1e154:	20001c30 	.word	0x20001c30
   1e158:	0001e229 	.word	0x0001e229
   1e15c:	0001e21d 	.word	0x0001e21d

0001e160 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1e160:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e162:	f3bf 8f5b 	dmb	ish
   1e166:	e853 0f00 	ldrex	r0, [r3]
   1e16a:	1c42      	adds	r2, r0, #1
   1e16c:	e843 2100 	strex	r1, r2, [r3]
   1e170:	2900      	cmp	r1, #0
   1e172:	d1f8      	bne.n	1e166 <net_context_ref+0x6>
   1e174:	f3bf 8f5b 	dmb	ish
}
   1e178:	3001      	adds	r0, #1
   1e17a:	4770      	bx	lr

0001e17c <net_context_unref>:
{
   1e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1e17e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e180:	f3bf 8f5b 	dmb	ish
   1e184:	e852 3f00 	ldrex	r3, [r2]
   1e188:	1e59      	subs	r1, r3, #1
   1e18a:	e842 1400 	strex	r4, r1, [r2]
   1e18e:	2c00      	cmp	r4, #0
   1e190:	d1f8      	bne.n	1e184 <net_context_unref+0x8>
   1e192:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1e196:	2b01      	cmp	r3, #1
   1e198:	d001      	beq.n	1e19e <net_context_unref+0x22>
		return old_rc - 1;
   1e19a:	1e58      	subs	r0, r3, #1
   1e19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e19e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1e1a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e1a4:	481b      	ldr	r0, [pc, #108]	; (1e214 <net_context_unref+0x98>)
   1e1a6:	f00c fcc9 	bl	2ab3c <_impl_k_sem_take>
	if (context->tcp) {
   1e1aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e1ac:	b13b      	cbz	r3, 1e1be <net_context_unref+0x42>
   1e1ae:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1e1b0:	2d00      	cmp	r5, #0
   1e1b2:	dd15      	ble.n	1e1e0 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1e1b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e1b6:	f006 fe3d 	bl	24e34 <net_tcp_release>
		context->tcp = NULL;
   1e1ba:	2300      	movs	r3, #0
   1e1bc:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1e1be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1e1c0:	b118      	cbz	r0, 1e1ca <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1e1c2:	f008 fb13 	bl	267ec <net_conn_unregister>
		context->conn_handler = NULL;
   1e1c6:	2300      	movs	r3, #0
   1e1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1e1ca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1e1ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1e1d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1e1d6:	480f      	ldr	r0, [pc, #60]	; (1e214 <net_context_unref+0x98>)
   1e1d8:	f00c fc9d 	bl	2ab16 <_impl_k_sem_give>
	return 0;
   1e1dc:	2000      	movs	r0, #0
}
   1e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1e1e0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1e1e4:	0113      	lsls	r3, r2, #4
   1e1e6:	4a0c      	ldr	r2, [pc, #48]	; (1e218 <net_context_unref+0x9c>)
   1e1e8:	58d2      	ldr	r2, [r2, r3]
   1e1ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e1ec:	429a      	cmp	r2, r3
   1e1ee:	d001      	beq.n	1e1f4 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1e1f0:	3501      	adds	r5, #1
   1e1f2:	e7dd      	b.n	1e1b0 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1e1f4:	4f08      	ldr	r7, [pc, #32]	; (1e218 <net_context_unref+0x9c>)
   1e1f6:	00ae      	lsls	r6, r5, #2
   1e1f8:	1972      	adds	r2, r6, r5
   1e1fa:	0113      	lsls	r3, r2, #4
   1e1fc:	3328      	adds	r3, #40	; 0x28
   1e1fe:	18f8      	adds	r0, r7, r3
   1e200:	f00d fa78 	bl	2b6f4 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1e204:	442e      	add	r6, r5
   1e206:	0130      	lsls	r0, r6, #4
   1e208:	2250      	movs	r2, #80	; 0x50
   1e20a:	2100      	movs	r1, #0
   1e20c:	4438      	add	r0, r7
   1e20e:	f00d ff35 	bl	2c07c <memset>
   1e212:	e7ed      	b.n	1e1f0 <net_context_unref+0x74>
   1e214:	20001ea0 	.word	0x20001ea0
   1e218:	20001eb8 	.word	0x20001eb8

0001e21c <handle_fin_timeout>:
{
   1e21c:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1e21e:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1e222:	f7ff ffab 	bl	1e17c <net_context_unref>
   1e226:	bd08      	pop	{r3, pc}

0001e228 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1e228:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1e22c:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1e230:	2b06      	cmp	r3, #6
   1e232:	d000      	beq.n	1e236 <handle_ack_timeout+0xe>
   1e234:	4770      	bx	lr
{
   1e236:	b510      	push	{r4, lr}
   1e238:	f1a0 0208 	sub.w	r2, r0, #8
   1e23c:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1e23e:	2100      	movs	r1, #0
   1e240:	4610      	mov	r0, r2
   1e242:	f006 fdcc 	bl	24dde <net_tcp_change_state>
		net_context_unref(tcp->context);
   1e246:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1e24a:	f7ff ff97 	bl	1e17c <net_context_unref>
   1e24e:	bd10      	pop	{r4, pc}

0001e250 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1e250:	b570      	push	{r4, r5, r6, lr}
   1e252:	4605      	mov	r5, r0
   1e254:	460e      	mov	r6, r1
   1e256:	4614      	mov	r4, r2
   1e258:	4610      	mov	r0, r2
   1e25a:	f7ff ff81 	bl	1e160 <net_context_ref>
   1e25e:	4622      	mov	r2, r4
   1e260:	4631      	mov	r1, r6
   1e262:	4628      	mov	r0, r5
   1e264:	f7ff fd5e 	bl	1dd24 <_tcp_synack_received>
   1e268:	4605      	mov	r5, r0
   1e26a:	4620      	mov	r0, r4
   1e26c:	f7ff ff86 	bl	1e17c <net_context_unref>
   1e270:	4628      	mov	r0, r5
   1e272:	bd70      	pop	{r4, r5, r6, pc}

0001e274 <_tcp_established>:
{
   1e274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e278:	b087      	sub	sp, #28
   1e27a:	4607      	mov	r7, r0
   1e27c:	460e      	mov	r6, r1
   1e27e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1e280:	a901      	add	r1, sp, #4
   1e282:	4630      	mov	r0, r6
   1e284:	f006 ff9a 	bl	251bc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1e288:	2800      	cmp	r0, #0
   1e28a:	f000 80b5 	beq.w	1e3f8 <_tcp_established+0x184>
   1e28e:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1e290:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1e296:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e29a:	2b03      	cmp	r3, #3
   1e29c:	d804      	bhi.n	1e2a8 <_tcp_established+0x34>
		return NET_DROP;
   1e29e:	2502      	movs	r5, #2
}
   1e2a0:	4628      	mov	r0, r5
   1e2a2:	b007      	add	sp, #28
   1e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1e2a8:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1e2ac:	f018 0f10 	tst.w	r8, #16
   1e2b0:	d116      	bne.n	1e2e0 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1e2b2:	f018 0f04 	tst.w	r8, #4
   1e2b6:	d121      	bne.n	1e2fc <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1e2b8:	792a      	ldrb	r2, [r5, #4]
   1e2ba:	796b      	ldrb	r3, [r5, #5]
   1e2bc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1e2c0:	79a9      	ldrb	r1, [r5, #6]
   1e2c2:	79eb      	ldrb	r3, [r5, #7]
   1e2c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1e2c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1e2cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1e2ce:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1e2d2:	1a99      	subs	r1, r3, r2
   1e2d4:	2900      	cmp	r1, #0
   1e2d6:	db2e      	blt.n	1e336 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1e2d8:	429a      	cmp	r2, r3
   1e2da:	d033      	beq.n	1e344 <_tcp_established+0xd0>
		return NET_DROP;
   1e2dc:	2502      	movs	r5, #2
   1e2de:	e7df      	b.n	1e2a0 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1e2e0:	7a03      	ldrb	r3, [r0, #8]
   1e2e2:	7a41      	ldrb	r1, [r0, #9]
   1e2e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1e2e8:	7a82      	ldrb	r2, [r0, #10]
   1e2ea:	7ac3      	ldrb	r3, [r0, #11]
   1e2ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1e2f0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1e2f4:	4620      	mov	r0, r4
   1e2f6:	f007 fa49 	bl	2578c <net_tcp_ack_received>
   1e2fa:	e7da      	b.n	1e2b2 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1e2fc:	4631      	mov	r1, r6
   1e2fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e300:	f006 ffd7 	bl	252b2 <net_tcp_validate_seq>
   1e304:	b928      	cbnz	r0, 1e312 <_tcp_established+0x9e>
   1e306:	4a3d      	ldr	r2, [pc, #244]	; (1e3fc <_tcp_established+0x188>)
   1e308:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1e30a:	3301      	adds	r3, #1
   1e30c:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1e30e:	2502      	movs	r5, #2
   1e310:	e7c6      	b.n	1e2a0 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1e312:	4a3a      	ldr	r2, [pc, #232]	; (1e3fc <_tcp_established+0x188>)
   1e314:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1e316:	3301      	adds	r3, #1
   1e318:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1e31a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1e31c:	b135      	cbz	r5, 1e32c <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1e31e:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1e320:	685b      	ldr	r3, [r3, #4]
   1e322:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1e326:	2100      	movs	r1, #0
   1e328:	4620      	mov	r0, r4
   1e32a:	47a8      	blx	r5
		net_context_unref(context);
   1e32c:	4620      	mov	r0, r4
   1e32e:	f7ff ff25 	bl	1e17c <net_context_unref>
		return NET_DROP;
   1e332:	2502      	movs	r5, #2
   1e334:	e7b4      	b.n	1e2a0 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1e336:	2201      	movs	r2, #1
   1e338:	4639      	mov	r1, r7
   1e33a:	4620      	mov	r0, r4
   1e33c:	f7ff fcd2 	bl	1dce4 <send_ack>
		return NET_DROP;
   1e340:	2502      	movs	r5, #2
   1e342:	e7ad      	b.n	1e2a0 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1e344:	2106      	movs	r1, #6
   1e346:	4630      	mov	r0, r6
   1e348:	f7ff fc25 	bl	1db96 <set_appdata_values>
	return pkt->appdatalen;
   1e34c:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1e350:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e352:	f006 fcc5 	bl	24ce0 <net_tcp_get_recv_wnd>
   1e356:	4581      	cmp	r9, r0
   1e358:	d901      	bls.n	1e35e <_tcp_established+0xea>
		return NET_DROP;
   1e35a:	2502      	movs	r5, #2
   1e35c:	e7a0      	b.n	1e2a0 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1e35e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e360:	685a      	ldr	r2, [r3, #4]
   1e362:	4631      	mov	r1, r6
   1e364:	4638      	mov	r0, r7
   1e366:	f7ff fc4b 	bl	1dc00 <packet_received>
   1e36a:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1e36c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1e36e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1e372:	444b      	add	r3, r9
   1e374:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1e378:	f018 0f01 	tst.w	r8, #1
   1e37c:	d022      	beq.n	1e3c4 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1e37e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1e380:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1e384:	f043 0304 	orr.w	r3, r3, #4
   1e388:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1e38c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e38e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1e392:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1e396:	2b04      	cmp	r3, #4
   1e398:	d02a      	beq.n	1e3f0 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1e39a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1e39c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1e3a0:	3301      	adds	r3, #1
   1e3a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1e3a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1e3a8:	b12e      	cbz	r6, 1e3b6 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1e3aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1e3ac:	685b      	ldr	r3, [r3, #4]
   1e3ae:	2200      	movs	r2, #0
   1e3b0:	4611      	mov	r1, r2
   1e3b2:	4620      	mov	r0, r4
   1e3b4:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1e3b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1e3b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e3bc:	3108      	adds	r1, #8
   1e3be:	4810      	ldr	r0, [pc, #64]	; (1e400 <_tcp_established+0x18c>)
   1e3c0:	f00d f9f2 	bl	2b7a8 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1e3c4:	2200      	movs	r2, #0
   1e3c6:	4639      	mov	r1, r7
   1e3c8:	4620      	mov	r0, r4
   1e3ca:	f7ff fc8b 	bl	1dce4 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1e3ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e3d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1e3d4:	2a00      	cmp	r2, #0
   1e3d6:	f47f af63 	bne.w	1e2a0 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1e3da:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1e3de:	f003 0306 	and.w	r3, r3, #6
   1e3e2:	2b06      	cmp	r3, #6
   1e3e4:	f47f af5c 	bne.w	1e2a0 <_tcp_established+0x2c>
		net_context_unref(context);
   1e3e8:	4620      	mov	r0, r4
   1e3ea:	f7ff fec7 	bl	1e17c <net_context_unref>
   1e3ee:	e757      	b.n	1e2a0 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1e3f0:	2105      	movs	r1, #5
   1e3f2:	f006 fcf4 	bl	24dde <net_tcp_change_state>
   1e3f6:	e7d0      	b.n	1e39a <_tcp_established+0x126>
		return NET_DROP;
   1e3f8:	2502      	movs	r5, #2
   1e3fa:	e751      	b.n	1e2a0 <_tcp_established+0x2c>
   1e3fc:	20002ae0 	.word	0x20002ae0
   1e400:	20002c00 	.word	0x20002c00

0001e404 <tcp_established>:
NET_CONN_CB(tcp_established)
   1e404:	b570      	push	{r4, r5, r6, lr}
   1e406:	4605      	mov	r5, r0
   1e408:	460e      	mov	r6, r1
   1e40a:	4614      	mov	r4, r2
   1e40c:	4610      	mov	r0, r2
   1e40e:	f7ff fea7 	bl	1e160 <net_context_ref>
   1e412:	4622      	mov	r2, r4
   1e414:	4631      	mov	r1, r6
   1e416:	4628      	mov	r0, r5
   1e418:	f7ff ff2c 	bl	1e274 <_tcp_established>
   1e41c:	4605      	mov	r5, r0
   1e41e:	4620      	mov	r0, r4
   1e420:	f7ff feac 	bl	1e17c <net_context_unref>
   1e424:	4628      	mov	r0, r5
   1e426:	bd70      	pop	{r4, r5, r6, pc}

0001e428 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1e428:	b390      	cbz	r0, 1e490 <net_context_put+0x68>
{
   1e42a:	b510      	push	{r4, lr}
   1e42c:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1e42e:	4a1d      	ldr	r2, [pc, #116]	; (1e4a4 <net_context_put+0x7c>)
   1e430:	4290      	cmp	r0, r2
   1e432:	d330      	bcc.n	1e496 <net_context_put+0x6e>
   1e434:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1e438:	4290      	cmp	r0, r2
   1e43a:	d22f      	bcs.n	1e49c <net_context_put+0x74>
	context->connect_cb = NULL;
   1e43c:	2200      	movs	r2, #0
   1e43e:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1e440:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1e442:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1e444:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1e448:	f012 0f40 	tst.w	r2, #64	; 0x40
   1e44c:	d007      	beq.n	1e45e <net_context_put+0x36>
		return IPPROTO_TCP;
   1e44e:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e450:	2906      	cmp	r1, #6
   1e452:	d006      	beq.n	1e462 <net_context_put+0x3a>
	net_context_unref(context);
   1e454:	4620      	mov	r0, r4
   1e456:	f7ff fe91 	bl	1e17c <net_context_unref>
	return 0;
   1e45a:	2000      	movs	r0, #0
   1e45c:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1e45e:	2111      	movs	r1, #17
   1e460:	e7f6      	b.n	1e450 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1e462:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1e466:	2a02      	cmp	r2, #2
   1e468:	d001      	beq.n	1e46e <net_context_put+0x46>
   1e46a:	2a03      	cmp	r2, #3
   1e46c:	d1f2      	bne.n	1e454 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1e46e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1e470:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1e474:	f013 0f04 	tst.w	r3, #4
   1e478:	d1ec      	bne.n	1e454 <net_context_put+0x2c>
   1e47a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e47e:	3130      	adds	r1, #48	; 0x30
   1e480:	4809      	ldr	r0, [pc, #36]	; (1e4a8 <net_context_put+0x80>)
   1e482:	f00d f991 	bl	2b7a8 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1e486:	4620      	mov	r0, r4
   1e488:	f7ff fb59 	bl	1db3e <queue_fin>
			return 0;
   1e48c:	2000      	movs	r0, #0
   1e48e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e490:	f06f 0015 	mvn.w	r0, #21
   1e494:	4770      	bx	lr
   1e496:	f06f 0015 	mvn.w	r0, #21
   1e49a:	bd10      	pop	{r4, pc}
   1e49c:	f06f 0015 	mvn.w	r0, #21
}
   1e4a0:	bd10      	pop	{r4, pc}
   1e4a2:	bf00      	nop
   1e4a4:	20001c30 	.word	0x20001c30
   1e4a8:	20002c00 	.word	0x20002c00

0001e4ac <net_context_bind>:
	if (context->conn_handler) {
   1e4ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1e4ae:	2b00      	cmp	r3, #0
   1e4b0:	d15c      	bne.n	1e56c <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1e4b2:	880b      	ldrh	r3, [r1, #0]
   1e4b4:	2b0a      	cmp	r3, #10
   1e4b6:	d15d      	bne.n	1e574 <net_context_bind+0xc8>
{
   1e4b8:	b570      	push	{r4, r5, r6, lr}
   1e4ba:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1e4bc:	2300      	movs	r3, #0
   1e4be:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1e4c0:	2a17      	cmp	r2, #23
   1e4c2:	d945      	bls.n	1e550 <net_context_bind+0xa4>
   1e4c4:	460d      	mov	r5, r1
   1e4c6:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1e4c8:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1e4ca:	2bff      	cmp	r3, #255	; 0xff
   1e4cc:	d009      	beq.n	1e4e2 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e4ce:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4d0:	b983      	cbnz	r3, 1e4f4 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e4d2:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e4d4:	bb2b      	cbnz	r3, 1e522 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4d6:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e4d8:	bb2b      	cbnz	r3, 1e526 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e4da:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e4dc:	b32b      	cbz	r3, 1e52a <net_context_bind+0x7e>
   1e4de:	2300      	movs	r3, #0
   1e4e0:	e009      	b.n	1e4f6 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1e4e2:	a901      	add	r1, sp, #4
   1e4e4:	1d28      	adds	r0, r5, #4
   1e4e6:	f7fe fccb 	bl	1ce80 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1e4ea:	4606      	mov	r6, r0
   1e4ec:	2800      	cmp	r0, #0
   1e4ee:	d034      	beq.n	1e55a <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1e4f0:	3608      	adds	r6, #8
   1e4f2:	e007      	b.n	1e504 <net_context_bind+0x58>
   1e4f4:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1e4f6:	b1d3      	cbz	r3, 1e52e <net_context_bind+0x82>
			iface = net_if_get_default();
   1e4f8:	f7fe fa4c 	bl	1c994 <net_if_get_default>
   1e4fc:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1e4fe:	f002 fde9 	bl	210d4 <net_ipv6_unspecified_address>
   1e502:	4606      	mov	r6, r0
		if (!iface) {
   1e504:	9801      	ldr	r0, [sp, #4]
   1e506:	b370      	cbz	r0, 1e566 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1e508:	f7ff f9ec 	bl	1d8e4 <net_if_get_by_iface>
   1e50c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1e510:	230a      	movs	r3, #10
   1e512:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1e514:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1e516:	8869      	ldrh	r1, [r5, #2]
   1e518:	b989      	cbnz	r1, 1e53e <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1e51a:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1e51c:	806b      	strh	r3, [r5, #2]
		return 0;
   1e51e:	2300      	movs	r3, #0
   1e520:	e018      	b.n	1e554 <net_context_bind+0xa8>
   1e522:	2300      	movs	r3, #0
   1e524:	e7e7      	b.n	1e4f6 <net_context_bind+0x4a>
   1e526:	2300      	movs	r3, #0
   1e528:	e7e5      	b.n	1e4f6 <net_context_bind+0x4a>
   1e52a:	2301      	movs	r3, #1
   1e52c:	e7e3      	b.n	1e4f6 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1e52e:	a901      	add	r1, sp, #4
   1e530:	1d28      	adds	r0, r5, #4
   1e532:	f7fe fa5b 	bl	1c9ec <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1e536:	4606      	mov	r6, r0
   1e538:	b190      	cbz	r0, 1e560 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1e53a:	3604      	adds	r6, #4
   1e53c:	e7e2      	b.n	1e504 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1e53e:	462a      	mov	r2, r5
   1e540:	4618      	mov	r0, r3
   1e542:	f7ff fa9f 	bl	1da84 <check_used_port>
			if (!ret) {
   1e546:	4603      	mov	r3, r0
   1e548:	b920      	cbnz	r0, 1e554 <net_context_bind+0xa8>
					addr6->sin6_port;
   1e54a:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1e54c:	8162      	strh	r2, [r4, #10]
   1e54e:	e001      	b.n	1e554 <net_context_bind+0xa8>
			return -EINVAL;
   1e550:	f06f 0315 	mvn.w	r3, #21
}
   1e554:	4618      	mov	r0, r3
   1e556:	b002      	add	sp, #8
   1e558:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1e55a:	f06f 0301 	mvn.w	r3, #1
   1e55e:	e7f9      	b.n	1e554 <net_context_bind+0xa8>
				return -ENOENT;
   1e560:	f06f 0301 	mvn.w	r3, #1
   1e564:	e7f6      	b.n	1e554 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1e566:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1e56a:	e7f3      	b.n	1e554 <net_context_bind+0xa8>
		return -EISCONN;
   1e56c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1e570:	4618      	mov	r0, r3
   1e572:	4770      	bx	lr
	return -EINVAL;
   1e574:	f06f 0315 	mvn.w	r3, #21
   1e578:	e7fa      	b.n	1e570 <net_context_bind+0xc4>

0001e57a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1e57a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1e57e:	f013 0f10 	tst.w	r3, #16
   1e582:	d006      	beq.n	1e592 <bind_default+0x18>
		return AF_INET6;
   1e584:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1e586:	2b0a      	cmp	r3, #10
   1e588:	d120      	bne.n	1e5cc <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1e58a:	68c3      	ldr	r3, [r0, #12]
   1e58c:	b11b      	cbz	r3, 1e596 <bind_default+0x1c>
			return 0;
   1e58e:	2000      	movs	r0, #0
   1e590:	4770      	bx	lr
	return AF_INET;
   1e592:	2302      	movs	r3, #2
   1e594:	e7f7      	b.n	1e586 <bind_default+0xc>
{
   1e596:	b530      	push	{r4, r5, lr}
   1e598:	b087      	sub	sp, #28
   1e59a:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1e59c:	ad06      	add	r5, sp, #24
   1e59e:	230a      	movs	r3, #10
   1e5a0:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1e5a4:	f002 fd96 	bl	210d4 <net_ipv6_unspecified_address>
   1e5a8:	2210      	movs	r2, #16
   1e5aa:	4601      	mov	r1, r0
   1e5ac:	a801      	add	r0, sp, #4
   1e5ae:	f7e1 fe87 	bl	2c0 <memcpy>
			find_available_port(context,
   1e5b2:	4629      	mov	r1, r5
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	f7ff faa1 	bl	1dafc <find_available_port>
		addr6.sin6_port =
   1e5ba:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1e5be:	2218      	movs	r2, #24
   1e5c0:	4629      	mov	r1, r5
   1e5c2:	4620      	mov	r0, r4
   1e5c4:	f7ff ff72 	bl	1e4ac <net_context_bind>
}
   1e5c8:	b007      	add	sp, #28
   1e5ca:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1e5cc:	f06f 0015 	mvn.w	r0, #21
   1e5d0:	4770      	bx	lr

0001e5d2 <sendto>:
{
   1e5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5d4:	b085      	sub	sp, #20
   1e5d6:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1e5d8:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1e5da:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1e5de:	f010 0f01 	tst.w	r0, #1
   1e5e2:	d072      	beq.n	1e6ca <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1e5e4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e5e8:	d01f      	beq.n	1e62a <sendto+0x58>
		return IPPROTO_TCP;
   1e5ea:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e5ee:	f1be 0f06 	cmp.w	lr, #6
   1e5f2:	d01d      	beq.n	1e630 <sendto+0x5e>
   1e5f4:	461f      	mov	r7, r3
   1e5f6:	4616      	mov	r6, r2
   1e5f8:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1e5fa:	f1be 0f11 	cmp.w	lr, #17
   1e5fe:	d024      	beq.n	1e64a <sendto+0x78>
	if (!dst_addr) {
   1e600:	2c00      	cmp	r4, #0
   1e602:	d068      	beq.n	1e6d6 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1e604:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1e606:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e60a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1e60e:	2b0a      	cmp	r3, #10
   1e610:	d164      	bne.n	1e6dc <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1e612:	2e17      	cmp	r6, #23
   1e614:	d965      	bls.n	1e6e2 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e616:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e618:	b9f3      	cbnz	r3, 1e658 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e61a:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e61c:	bb63      	cbnz	r3, 1e678 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e61e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e620:	bb63      	cbnz	r3, 1e67c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e622:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e624:	b363      	cbz	r3, 1e680 <sendto+0xae>
   1e626:	2300      	movs	r3, #0
   1e628:	e017      	b.n	1e65a <sendto+0x88>
	return IPPROTO_UDP;
   1e62a:	f04f 0e11 	mov.w	lr, #17
   1e62e:	e7de      	b.n	1e5ee <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1e630:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1e634:	2802      	cmp	r0, #2
   1e636:	d14b      	bne.n	1e6d0 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1e638:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e63a:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1e63e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1e642:	d0d7      	beq.n	1e5f4 <sendto+0x22>
			return -ESHUTDOWN;
   1e644:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1e648:	e03c      	b.n	1e6c4 <sendto+0xf2>
		ret = bind_default(context);
   1e64a:	4628      	mov	r0, r5
   1e64c:	f7ff ff95 	bl	1e57a <bind_default>
		if (ret) {
   1e650:	4603      	mov	r3, r0
   1e652:	2800      	cmp	r0, #0
   1e654:	d0d4      	beq.n	1e600 <sendto+0x2e>
   1e656:	e035      	b.n	1e6c4 <sendto+0xf2>
   1e658:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1e65a:	2b00      	cmp	r3, #0
   1e65c:	d144      	bne.n	1e6e8 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1e65e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1e662:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e666:	d00d      	beq.n	1e684 <sendto+0xb2>
		return IPPROTO_TCP;
   1e668:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1e66a:	2b11      	cmp	r3, #17
   1e66c:	d00c      	beq.n	1e688 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1e66e:	2b06      	cmp	r3, #6
   1e670:	d13d      	bne.n	1e6ee <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1e672:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1e674:	2000      	movs	r0, #0
   1e676:	e011      	b.n	1e69c <sendto+0xca>
   1e678:	2300      	movs	r3, #0
   1e67a:	e7ee      	b.n	1e65a <sendto+0x88>
   1e67c:	2300      	movs	r3, #0
   1e67e:	e7ec      	b.n	1e65a <sendto+0x88>
   1e680:	2301      	movs	r3, #1
   1e682:	e7ea      	b.n	1e65a <sendto+0x88>
	return IPPROTO_UDP;
   1e684:	2311      	movs	r3, #17
   1e686:	e7f0      	b.n	1e66a <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1e688:	ab03      	add	r3, sp, #12
   1e68a:	4622      	mov	r2, r4
   1e68c:	4628      	mov	r0, r5
   1e68e:	f7ff fc0f 	bl	1deb0 <create_udp_packet>
   1e692:	4603      	mov	r3, r0
   1e694:	e009      	b.n	1e6aa <sendto+0xd8>
		bytes += buf->len;
   1e696:	8994      	ldrh	r4, [r2, #12]
   1e698:	4420      	add	r0, r4
		buf = buf->frags;
   1e69a:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1e69c:	2a00      	cmp	r2, #0
   1e69e:	d1fa      	bne.n	1e696 <sendto+0xc4>
	pkt->appdatalen = len;
   1e6a0:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1e6a2:	4628      	mov	r0, r5
   1e6a4:	f006 fd08 	bl	250b8 <net_tcp_queue_data>
   1e6a8:	4603      	mov	r3, r0
	if (ret < 0) {
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	db0a      	blt.n	1e6c4 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1e6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e6b0:	9301      	str	r3, [sp, #4]
   1e6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e6b4:	9300      	str	r3, [sp, #0]
   1e6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6b8:	463a      	mov	r2, r7
   1e6ba:	9903      	ldr	r1, [sp, #12]
   1e6bc:	4628      	mov	r0, r5
   1e6be:	f7ff fc1d 	bl	1defc <send_data>
   1e6c2:	4603      	mov	r3, r0
}
   1e6c4:	4618      	mov	r0, r3
   1e6c6:	b005      	add	sp, #20
   1e6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1e6ca:	f06f 0308 	mvn.w	r3, #8
   1e6ce:	e7f9      	b.n	1e6c4 <sendto+0xf2>
			return -ENOTCONN;
   1e6d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e6d4:	e7f6      	b.n	1e6c4 <sendto+0xf2>
		return -EDESTADDRREQ;
   1e6d6:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1e6da:	e7f3      	b.n	1e6c4 <sendto+0xf2>
		return -EINVAL;
   1e6dc:	f06f 0315 	mvn.w	r3, #21
   1e6e0:	e7f0      	b.n	1e6c4 <sendto+0xf2>
			return -EINVAL;
   1e6e2:	f06f 0315 	mvn.w	r3, #21
   1e6e6:	e7ed      	b.n	1e6c4 <sendto+0xf2>
			return -EDESTADDRREQ;
   1e6e8:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1e6ec:	e7ea      	b.n	1e6c4 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1e6ee:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1e6f2:	e7e7      	b.n	1e6c4 <sendto+0xf2>

0001e6f4 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1e6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6f6:	b08f      	sub	sp, #60	; 0x3c
   1e6f8:	4604      	mov	r4, r0
   1e6fa:	460d      	mov	r5, r1
   1e6fc:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1e6fe:	2300      	movs	r3, #0
   1e700:	9304      	str	r3, [sp, #16]
   1e702:	9305      	str	r3, [sp, #20]
   1e704:	9306      	str	r3, [sp, #24]
   1e706:	9307      	str	r3, [sp, #28]
   1e708:	9308      	str	r3, [sp, #32]
   1e70a:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1e70c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1e710:	f013 0f10 	tst.w	r3, #16
   1e714:	d037      	beq.n	1e786 <recv_udp+0x92>
		return AF_INET6;
   1e716:	230a      	movs	r3, #10
   1e718:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1e71c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1e71e:	b118      	cbz	r0, 1e728 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1e720:	f008 f864 	bl	267ec <net_conn_unregister>
		context->conn_handler = NULL;
   1e724:	2300      	movs	r3, #0
   1e726:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1e728:	4620      	mov	r0, r4
   1e72a:	f7ff ff26 	bl	1e57a <bind_default>
	if (ret) {
   1e72e:	4603      	mov	r3, r0
   1e730:	bb30      	cbnz	r0, 1e780 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1e732:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1e736:	f017 0f10 	tst.w	r7, #16
   1e73a:	d026      	beq.n	1e78a <recv_udp+0x96>
		return AF_INET6;
   1e73c:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1e73e:	2b0a      	cmp	r3, #10
   1e740:	d025      	beq.n	1e78e <recv_udp+0x9a>
	u16_t lport = 0;
   1e742:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1e746:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1e748:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1e74a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1e74e:	d037      	beq.n	1e7c0 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1e750:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1e752:	f017 0f80 	tst.w	r7, #128	; 0x80
   1e756:	d135      	bne.n	1e7c4 <recv_udp+0xd0>
   1e758:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1e75a:	8ae5      	ldrh	r5, [r4, #22]
   1e75c:	022b      	lsls	r3, r5, #8
   1e75e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1e762:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1e766:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1e76a:	b2ad      	uxth	r5, r5
   1e76c:	342c      	adds	r4, #44	; 0x2c
   1e76e:	9403      	str	r4, [sp, #12]
   1e770:	9602      	str	r6, [sp, #8]
   1e772:	4c16      	ldr	r4, [pc, #88]	; (1e7cc <recv_udp+0xd8>)
   1e774:	9401      	str	r4, [sp, #4]
   1e776:	9500      	str	r5, [sp, #0]
   1e778:	b29b      	uxth	r3, r3
   1e77a:	f008 f855 	bl	26828 <net_conn_register>
   1e77e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1e780:	4618      	mov	r0, r3
   1e782:	b00f      	add	sp, #60	; 0x3c
   1e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1e786:	2302      	movs	r3, #2
   1e788:	e7c6      	b.n	1e718 <recv_udp+0x24>
   1e78a:	2302      	movs	r3, #2
   1e78c:	e7d7      	b.n	1e73e <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1e78e:	68e3      	ldr	r3, [r4, #12]
   1e790:	b1a3      	cbz	r3, 1e7bc <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1e792:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1e796:	6818      	ldr	r0, [r3, #0]
   1e798:	6859      	ldr	r1, [r3, #4]
   1e79a:	689a      	ldr	r2, [r3, #8]
   1e79c:	68db      	ldr	r3, [r3, #12]
   1e79e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e7a2:	f10d 0e14 	add.w	lr, sp, #20
   1e7a6:	ab0e      	add	r3, sp, #56	; 0x38
   1e7a8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1e7ac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1e7b0:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1e7b2:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1e7b6:	f8ad e012 	strh.w	lr, [sp, #18]
   1e7ba:	e7c5      	b.n	1e748 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1e7bc:	2200      	movs	r2, #0
   1e7be:	e7f8      	b.n	1e7b2 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1e7c0:	2011      	movs	r0, #17
   1e7c2:	e7c6      	b.n	1e752 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1e7c4:	f104 0114 	add.w	r1, r4, #20
   1e7c8:	e7c7      	b.n	1e75a <recv_udp+0x66>
   1e7ca:	bf00      	nop
   1e7cc:	0001dc01 	.word	0x0001dc01

0001e7d0 <net_context_connect>:
{
   1e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7d4:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1e7d6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1e7da:	f014 0f01 	tst.w	r4, #1
   1e7de:	f000 80c9 	beq.w	1e974 <net_context_connect+0x1a4>
   1e7e2:	461f      	mov	r7, r3
   1e7e4:	4615      	mov	r5, r2
   1e7e6:	460e      	mov	r6, r1
   1e7e8:	4604      	mov	r4, r0
	ret = bind_default(context);
   1e7ea:	f7ff fec6 	bl	1e57a <bind_default>
	if (ret) {
   1e7ee:	4680      	mov	r8, r0
   1e7f0:	2800      	cmp	r0, #0
   1e7f2:	f040 80c1 	bne.w	1e978 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1e7f6:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1e7f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1e7fc:	f013 0f10 	tst.w	r3, #16
   1e800:	d02b      	beq.n	1e85a <net_context_connect+0x8a>
		return AF_INET6;
   1e802:	220a      	movs	r2, #10
   1e804:	4291      	cmp	r1, r2
   1e806:	f040 80bb 	bne.w	1e980 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1e80a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1e80e:	2b03      	cmp	r3, #3
   1e810:	f000 80b9 	beq.w	1e986 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1e814:	2a0a      	cmp	r2, #10
   1e816:	f040 80b9 	bne.w	1e98c <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1e81a:	2d17      	cmp	r5, #23
   1e81c:	f240 80b9 	bls.w	1e992 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1e820:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1e822:	2bff      	cmp	r3, #255	; 0xff
   1e824:	f000 80b8 	beq.w	1e998 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1e828:	2210      	movs	r2, #16
   1e82a:	1d31      	adds	r1, r6, #4
   1e82c:	f104 0018 	add.w	r0, r4, #24
   1e830:	f7e1 fd46 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1e834:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1e838:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1e83c:	230a      	movs	r3, #10
   1e83e:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e840:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e842:	b963      	cbnz	r3, 1e85e <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e844:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1e846:	2b00      	cmp	r3, #0
   1e848:	d174      	bne.n	1e934 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e84a:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1e84c:	2b00      	cmp	r3, #0
   1e84e:	d173      	bne.n	1e938 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1e850:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1e852:	2b00      	cmp	r3, #0
   1e854:	d072      	beq.n	1e93c <net_context_connect+0x16c>
   1e856:	4643      	mov	r3, r8
   1e858:	e002      	b.n	1e860 <net_context_connect+0x90>
	return AF_INET;
   1e85a:	2202      	movs	r2, #2
   1e85c:	e7d2      	b.n	1e804 <net_context_connect+0x34>
   1e85e:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1e860:	f013 0f01 	tst.w	r3, #1
   1e864:	d16c      	bne.n	1e940 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1e866:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1e86a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e86e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1e872:	230a      	movs	r3, #10
   1e874:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1e876:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1e87a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1e87e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1e882:	68e3      	ldr	r3, [r4, #12]
   1e884:	2b00      	cmp	r3, #0
   1e886:	d062      	beq.n	1e94e <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1e888:	ad0c      	add	r5, sp, #48	; 0x30
   1e88a:	6818      	ldr	r0, [r3, #0]
   1e88c:	6859      	ldr	r1, [r3, #4]
   1e88e:	689a      	ldr	r2, [r3, #8]
   1e890:	68db      	ldr	r3, [r3, #12]
   1e892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e894:	ad07      	add	r5, sp, #28
   1e896:	ab10      	add	r3, sp, #64	; 0x40
   1e898:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1e89c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1e8a0:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1e8a2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1e8a6:	f013 0f20 	tst.w	r3, #32
   1e8aa:	d052      	beq.n	1e952 <net_context_connect+0x182>
		return SOCK_STREAM;
   1e8ac:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1e8ae:	2b02      	cmp	r3, #2
   1e8b0:	d051      	beq.n	1e956 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1e8b2:	2b01      	cmp	r3, #1
   1e8b4:	d173      	bne.n	1e99e <net_context_connect+0x1ce>
			       ntohs(rport),
   1e8b6:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1e8ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1e8be:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1e8c2:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1e8c6:	b289      	uxth	r1, r1
   1e8c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1e8cc:	9003      	str	r0, [sp, #12]
   1e8ce:	9402      	str	r4, [sp, #8]
   1e8d0:	4835      	ldr	r0, [pc, #212]	; (1e9a8 <net_context_connect+0x1d8>)
   1e8d2:	9001      	str	r0, [sp, #4]
   1e8d4:	9100      	str	r1, [sp, #0]
   1e8d6:	b29b      	uxth	r3, r3
   1e8d8:	4631      	mov	r1, r6
   1e8da:	2006      	movs	r0, #6
   1e8dc:	f007 ffa4 	bl	26828 <net_conn_register>
	if (ret < 0) {
   1e8e0:	2800      	cmp	r0, #0
   1e8e2:	db5f      	blt.n	1e9a4 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1e8e4:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1e8e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e8e8:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1e8ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1e8ee:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1e8f2:	f043 0302 	orr.w	r3, r3, #2
   1e8f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1e8fa:	2102      	movs	r1, #2
   1e8fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e8fe:	f006 fa6e 	bl	24dde <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1e902:	2200      	movs	r2, #0
   1e904:	ab10      	add	r3, sp, #64	; 0x40
   1e906:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1e90a:	9302      	str	r3, [sp, #8]
   1e90c:	9601      	str	r6, [sp, #4]
   1e90e:	9200      	str	r2, [sp, #0]
   1e910:	4613      	mov	r3, r2
   1e912:	2102      	movs	r1, #2
   1e914:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1e916:	f006 faff 	bl	24f18 <net_tcp_prepare_segment>
	if (ret) {
   1e91a:	b310      	cbz	r0, 1e962 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1e91c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e91e:	b35b      	cbz	r3, 1e978 <net_context_connect+0x1a8>
   1e920:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1e922:	4619      	mov	r1, r3
   1e924:	30ac      	adds	r0, #172	; 0xac
   1e926:	f00c f909 	bl	2ab3c <_impl_k_sem_take>
   1e92a:	4680      	mov	r8, r0
   1e92c:	b320      	cbz	r0, 1e978 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1e92e:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1e932:	e021      	b.n	1e978 <net_context_connect+0x1a8>
   1e934:	4643      	mov	r3, r8
   1e936:	e793      	b.n	1e860 <net_context_connect+0x90>
   1e938:	4643      	mov	r3, r8
   1e93a:	e791      	b.n	1e860 <net_context_connect+0x90>
   1e93c:	2301      	movs	r3, #1
   1e93e:	e78f      	b.n	1e860 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1e940:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1e944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e948:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1e94c:	e791      	b.n	1e872 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1e94e:	2200      	movs	r2, #0
   1e950:	e7a7      	b.n	1e8a2 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1e952:	2302      	movs	r3, #2
   1e954:	e7ab      	b.n	1e8ae <net_context_connect+0xde>
		if (cb) {
   1e956:	b17f      	cbz	r7, 1e978 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1e958:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e95a:	2100      	movs	r1, #0
   1e95c:	4620      	mov	r0, r4
   1e95e:	47b8      	blx	r7
   1e960:	e00a      	b.n	1e978 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1e962:	9805      	ldr	r0, [sp, #20]
   1e964:	f7fd fdf4 	bl	1c550 <net_send_data>
	if (ret < 0) {
   1e968:	2800      	cmp	r0, #0
   1e96a:	dad7      	bge.n	1e91c <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1e96c:	9805      	ldr	r0, [sp, #20]
   1e96e:	f000 f9f0 	bl	1ed52 <net_pkt_unref>
   1e972:	e7d3      	b.n	1e91c <net_context_connect+0x14c>
		return -EBADF;
   1e974:	f06f 0808 	mvn.w	r8, #8
}
   1e978:	4640      	mov	r0, r8
   1e97a:	b010      	add	sp, #64	; 0x40
   1e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1e980:	f06f 0815 	mvn.w	r8, #21
   1e984:	e7f8      	b.n	1e978 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1e986:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1e98a:	e7f5      	b.n	1e978 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1e98c:	f06f 0815 	mvn.w	r8, #21
   1e990:	e7f2      	b.n	1e978 <net_context_connect+0x1a8>
			return -EINVAL;
   1e992:	f06f 0815 	mvn.w	r8, #21
   1e996:	e7ef      	b.n	1e978 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1e998:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1e99c:	e7ec      	b.n	1e978 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1e99e:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1e9a2:	e7e9      	b.n	1e978 <net_context_connect+0x1a8>
		return ret;
   1e9a4:	4680      	mov	r8, r0
   1e9a6:	e7e7      	b.n	1e978 <net_context_connect+0x1a8>
   1e9a8:	0001e251 	.word	0x0001e251

0001e9ac <net_context_send>:
{
   1e9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9ae:	b085      	sub	sp, #20
	return pkt->context;
   1e9b0:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1e9b2:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1e9b6:	2d00      	cmp	r5, #0
   1e9b8:	da17      	bge.n	1e9ea <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1e9ba:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1e9bc:	b1c5      	cbz	r5, 1e9f0 <net_context_send+0x44>
	return pkt->family;
   1e9be:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1e9c2:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1e9c6:	2d0a      	cmp	r5, #10
   1e9c8:	d00d      	beq.n	1e9e6 <net_context_send+0x3a>
		addrlen = 0;
   1e9ca:	2700      	movs	r7, #0
   1e9cc:	461e      	mov	r6, r3
   1e9ce:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1e9d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e9d2:	9102      	str	r1, [sp, #8]
   1e9d4:	9601      	str	r6, [sp, #4]
   1e9d6:	9200      	str	r2, [sp, #0]
   1e9d8:	463a      	mov	r2, r7
   1e9da:	f104 0114 	add.w	r1, r4, #20
   1e9de:	f7ff fdf8 	bl	1e5d2 <sendto>
}
   1e9e2:	b005      	add	sp, #20
   1e9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1e9e6:	2718      	movs	r7, #24
   1e9e8:	e7f0      	b.n	1e9cc <net_context_send+0x20>
		return -EDESTADDRREQ;
   1e9ea:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1e9ee:	e7f8      	b.n	1e9e2 <net_context_send+0x36>
   1e9f0:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1e9f4:	e7f5      	b.n	1e9e2 <net_context_send+0x36>

0001e9f6 <net_context_sendto>:
{
   1e9f6:	b510      	push	{r4, lr}
   1e9f8:	b084      	sub	sp, #16
   1e9fa:	461c      	mov	r4, r3
	return pkt->context;
   1e9fc:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1e9fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1ea02:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ea06:	d00d      	beq.n	1ea24 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1ea08:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1ea0a:	2b06      	cmp	r3, #6
   1ea0c:	d00c      	beq.n	1ea28 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1ea0e:	9b08      	ldr	r3, [sp, #32]
   1ea10:	9302      	str	r3, [sp, #8]
   1ea12:	9b07      	ldr	r3, [sp, #28]
   1ea14:	9301      	str	r3, [sp, #4]
   1ea16:	9b06      	ldr	r3, [sp, #24]
   1ea18:	9300      	str	r3, [sp, #0]
   1ea1a:	4623      	mov	r3, r4
   1ea1c:	f7ff fdd9 	bl	1e5d2 <sendto>
}
   1ea20:	b004      	add	sp, #16
   1ea22:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1ea24:	2311      	movs	r3, #17
   1ea26:	e7f0      	b.n	1ea0a <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1ea28:	9b08      	ldr	r3, [sp, #32]
   1ea2a:	9300      	str	r3, [sp, #0]
   1ea2c:	9b07      	ldr	r3, [sp, #28]
   1ea2e:	9a06      	ldr	r2, [sp, #24]
   1ea30:	4621      	mov	r1, r4
   1ea32:	f7ff ffbb 	bl	1e9ac <net_context_send>
   1ea36:	e7f3      	b.n	1ea20 <net_context_sendto+0x2a>

0001ea38 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1ea3a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1ea3e:	f014 0f01 	tst.w	r4, #1
   1ea42:	d030      	beq.n	1eaa6 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1ea44:	f014 0f40 	tst.w	r4, #64	; 0x40
   1ea48:	d023      	beq.n	1ea92 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1ea4a:	2606      	movs	r6, #6
   1ea4c:	4617      	mov	r7, r2
   1ea4e:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1ea50:	2e11      	cmp	r6, #17
   1ea52:	d020      	beq.n	1ea96 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1ea54:	2e06      	cmp	r6, #6
   1ea56:	d129      	bne.n	1eaac <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1ea58:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1ea5a:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1ea5e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1ea62:	d126      	bne.n	1eab2 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1ea64:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1ea68:	2c02      	cmp	r4, #2
   1ea6a:	d125      	bne.n	1eab8 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1ea6c:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1ea6e:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1ea70:	b32f      	cbz	r7, 1eabe <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1ea72:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1ea76:	2100      	movs	r1, #0
   1ea78:	4620      	mov	r0, r4
   1ea7a:	f00c f85f 	bl	2ab3c <_impl_k_sem_take>
   1ea7e:	4606      	mov	r6, r0
   1ea80:	2800      	cmp	r0, #0
   1ea82:	d1f6      	bne.n	1ea72 <net_context_recv+0x3a>
   1ea84:	4639      	mov	r1, r7
   1ea86:	4620      	mov	r0, r4
   1ea88:	f00c f858 	bl	2ab3c <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1ea8c:	b140      	cbz	r0, 1eaa0 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1ea8e:	4630      	mov	r0, r6
   1ea90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1ea92:	2611      	movs	r6, #17
   1ea94:	e7da      	b.n	1ea4c <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1ea96:	f7ff fe2d 	bl	1e6f4 <recv_udp>
		if (ret < 0) {
   1ea9a:	1e06      	subs	r6, r0, #0
   1ea9c:	dae8      	bge.n	1ea70 <net_context_recv+0x38>
   1ea9e:	e7f6      	b.n	1ea8e <net_context_recv+0x56>
			return -ETIMEDOUT;
   1eaa0:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1eaa4:	e7f3      	b.n	1ea8e <net_context_recv+0x56>
		return -EBADF;
   1eaa6:	f06f 0608 	mvn.w	r6, #8
   1eaaa:	e7f0      	b.n	1ea8e <net_context_recv+0x56>
		return -EPROTOTYPE;
   1eaac:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1eab0:	e7ed      	b.n	1ea8e <net_context_recv+0x56>
			return -ESHUTDOWN;
   1eab2:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1eab6:	e7ea      	b.n	1ea8e <net_context_recv+0x56>
			return -ENOTCONN;
   1eab8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1eabc:	e7e7      	b.n	1ea8e <net_context_recv+0x56>
	return 0;
   1eabe:	2600      	movs	r6, #0
   1eac0:	e7e5      	b.n	1ea8e <net_context_recv+0x56>
	...

0001eac4 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1eac4:	b570      	push	{r4, r5, r6, lr}
   1eac6:	4606      	mov	r6, r0
   1eac8:	460d      	mov	r5, r1
   1eaca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1eace:	480d      	ldr	r0, [pc, #52]	; (1eb04 <net_context_foreach+0x40>)
   1ead0:	f00c f834 	bl	2ab3c <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ead4:	2400      	movs	r4, #0
   1ead6:	e000      	b.n	1eada <net_context_foreach+0x16>
   1ead8:	3401      	adds	r4, #1
   1eada:	2c05      	cmp	r4, #5
   1eadc:	dc0e      	bgt.n	1eafc <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1eade:	2368      	movs	r3, #104	; 0x68
   1eae0:	4a09      	ldr	r2, [pc, #36]	; (1eb08 <net_context_foreach+0x44>)
   1eae2:	fb03 2304 	mla	r3, r3, r4, r2
   1eae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1eaea:	f013 0f01 	tst.w	r3, #1
   1eaee:	d0f3      	beq.n	1ead8 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1eaf0:	4629      	mov	r1, r5
   1eaf2:	2068      	movs	r0, #104	; 0x68
   1eaf4:	fb00 2004 	mla	r0, r0, r4, r2
   1eaf8:	47b0      	blx	r6
   1eafa:	e7ed      	b.n	1ead8 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1eafc:	4801      	ldr	r0, [pc, #4]	; (1eb04 <net_context_foreach+0x40>)
   1eafe:	f00c f80a 	bl	2ab16 <_impl_k_sem_give>
   1eb02:	bd70      	pop	{r4, r5, r6, pc}
   1eb04:	20001ea0 	.word	0x20001ea0
   1eb08:	20001c30 	.word	0x20001c30

0001eb0c <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1eb0c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1eb0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb12:	2101      	movs	r1, #1
   1eb14:	4801      	ldr	r0, [pc, #4]	; (1eb1c <net_context_init+0x10>)
   1eb16:	f00b fff5 	bl	2ab04 <_impl_k_sem_init>
   1eb1a:	bd08      	pop	{r3, pc}
   1eb1c:	20001ea0 	.word	0x20001ea0

0001eb20 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1eb20:	b570      	push	{r4, r5, r6, lr}
   1eb22:	b082      	sub	sp, #8
   1eb24:	4604      	mov	r4, r0
   1eb26:	460d      	mov	r5, r1
   1eb28:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1eb2a:	f00c f969 	bl	2ae00 <k_is_in_isr>
   1eb2e:	b198      	cbz	r0, 1eb58 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1eb30:	2200      	movs	r2, #0
   1eb32:	a901      	add	r1, sp, #4
   1eb34:	4620      	mov	r0, r4
   1eb36:	f00a feef 	bl	29918 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1eb3a:	b998      	cbnz	r0, 1eb64 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1eb3c:	2244      	movs	r2, #68	; 0x44
   1eb3e:	2100      	movs	r1, #0
   1eb40:	9801      	ldr	r0, [sp, #4]
   1eb42:	f00d fa9b 	bl	2c07c <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1eb46:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1eb48:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1eb4c:	2301      	movs	r3, #1
   1eb4e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1eb52:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1eb54:	b002      	add	sp, #8
   1eb56:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1eb58:	4632      	mov	r2, r6
   1eb5a:	a901      	add	r1, sp, #4
   1eb5c:	4620      	mov	r0, r4
   1eb5e:	f00a fedb 	bl	29918 <k_mem_slab_alloc>
   1eb62:	e7ea      	b.n	1eb3a <net_pkt_get_reserve+0x1a>
		return NULL;
   1eb64:	2000      	movs	r0, #0
   1eb66:	e7f5      	b.n	1eb54 <net_pkt_get_reserve+0x34>

0001eb68 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1eb6a:	2900      	cmp	r1, #0
   1eb6c:	d038      	beq.n	1ebe0 <net_pkt_get+0x78>
   1eb6e:	460c      	mov	r4, r1
   1eb70:	4617      	mov	r7, r2
   1eb72:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1eb74:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1eb78:	f7fe fea4 	bl	1d8c4 <net_if_get_by_index>
   1eb7c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1eb7e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1eb82:	f013 0f10 	tst.w	r3, #16
   1eb86:	d024      	beq.n	1ebd2 <net_pkt_get+0x6a>
		return AF_INET6;
   1eb88:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1eb8a:	2b0a      	cmp	r3, #10
   1eb8c:	d023      	beq.n	1ebd6 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1eb8e:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1eb90:	686b      	ldr	r3, [r5, #4]
   1eb92:	689b      	ldr	r3, [r3, #8]
   1eb94:	4628      	mov	r0, r5
   1eb96:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1eb98:	463a      	mov	r2, r7
   1eb9a:	4601      	mov	r1, r0
   1eb9c:	4630      	mov	r0, r6
   1eb9e:	f7ff ffbf 	bl	1eb20 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1eba2:	4603      	mov	r3, r0
   1eba4:	b198      	cbz	r0, 1ebce <net_pkt_get+0x66>
	pkt->context = ctx;
   1eba6:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1eba8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ebaa:	7d6a      	ldrb	r2, [r5, #21]
   1ebac:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ebb0:	7d6a      	ldrb	r2, [r5, #21]
   1ebb2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ebb6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1ebba:	f012 0f10 	tst.w	r2, #16
   1ebbe:	d00d      	beq.n	1ebdc <net_pkt_get+0x74>
		return AF_INET6;
   1ebc0:	210a      	movs	r1, #10
	pkt->family = family;
   1ebc2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1ebc6:	f361 02c6 	bfi	r2, r1, #3, #4
   1ebca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1ebce:	4618      	mov	r0, r3
   1ebd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1ebd2:	2302      	movs	r3, #2
   1ebd4:	e7d9      	b.n	1eb8a <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ebd6:	f104 0118 	add.w	r1, r4, #24
   1ebda:	e7d9      	b.n	1eb90 <net_pkt_get+0x28>
   1ebdc:	2102      	movs	r1, #2
   1ebde:	e7f0      	b.n	1ebc2 <net_pkt_get+0x5a>
		return NULL;
   1ebe0:	2300      	movs	r3, #0
   1ebe2:	e7f4      	b.n	1ebce <net_pkt_get+0x66>

0001ebe4 <net_pkt_get_reserve_data>:
{
   1ebe4:	b570      	push	{r4, r5, r6, lr}
   1ebe6:	4604      	mov	r4, r0
   1ebe8:	460d      	mov	r5, r1
   1ebea:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1ebec:	f00c f908 	bl	2ae00 <k_is_in_isr>
   1ebf0:	b158      	cbz	r0, 1ec0a <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1ebf2:	2100      	movs	r1, #0
   1ebf4:	4620      	mov	r0, r4
   1ebf6:	f7fd facf 	bl	1c198 <net_buf_alloc>
   1ebfa:	4604      	mov	r4, r0
	if (!frag) {
   1ebfc:	b11c      	cbz	r4, 1ec06 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1ebfe:	4629      	mov	r1, r5
   1ec00:	4620      	mov	r0, r4
   1ec02:	f7fd fb24 	bl	1c24e <net_buf_reserve>
}
   1ec06:	4620      	mov	r0, r4
   1ec08:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1ec0a:	4631      	mov	r1, r6
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f7fd fac3 	bl	1c198 <net_buf_alloc>
   1ec12:	4604      	mov	r4, r0
   1ec14:	e7f2      	b.n	1ebfc <net_pkt_get_reserve_data+0x18>

0001ec16 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1ec16:	b1f1      	cbz	r1, 1ec56 <_pkt_get_data+0x40>
{
   1ec18:	b570      	push	{r4, r5, r6, lr}
   1ec1a:	460c      	mov	r4, r1
   1ec1c:	4616      	mov	r6, r2
   1ec1e:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1ec20:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1ec24:	f7fe fe4e 	bl	1d8c4 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ec28:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ec2c:	f013 0f10 	tst.w	r3, #16
   1ec30:	d00c      	beq.n	1ec4c <_pkt_get_data+0x36>
		return AF_INET6;
   1ec32:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1ec34:	2b0a      	cmp	r3, #10
   1ec36:	d00b      	beq.n	1ec50 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1ec38:	2100      	movs	r1, #0
   1ec3a:	6843      	ldr	r3, [r0, #4]
   1ec3c:	689b      	ldr	r3, [r3, #8]
   1ec3e:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1ec40:	4632      	mov	r2, r6
   1ec42:	4601      	mov	r1, r0
   1ec44:	4628      	mov	r0, r5
   1ec46:	f7ff ffcd 	bl	1ebe4 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1ec4a:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1ec4c:	2302      	movs	r3, #2
   1ec4e:	e7f1      	b.n	1ec34 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ec50:	f104 0118 	add.w	r1, r4, #24
   1ec54:	e7f1      	b.n	1ec3a <_pkt_get_data+0x24>
		return NULL;
   1ec56:	2000      	movs	r0, #0
   1ec58:	4770      	bx	lr
	...

0001ec5c <net_pkt_get_reserve_rx>:
{
   1ec5c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1ec5e:	460a      	mov	r2, r1
   1ec60:	4601      	mov	r1, r0
   1ec62:	4802      	ldr	r0, [pc, #8]	; (1ec6c <net_pkt_get_reserve_rx+0x10>)
   1ec64:	f7ff ff5c 	bl	1eb20 <net_pkt_get_reserve>
}
   1ec68:	bd08      	pop	{r3, pc}
   1ec6a:	bf00      	nop
   1ec6c:	2000d090 	.word	0x2000d090

0001ec70 <net_pkt_get_reserve_tx>:
{
   1ec70:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1ec72:	460a      	mov	r2, r1
   1ec74:	4601      	mov	r1, r0
   1ec76:	4802      	ldr	r0, [pc, #8]	; (1ec80 <net_pkt_get_reserve_tx+0x10>)
   1ec78:	f7ff ff52 	bl	1eb20 <net_pkt_get_reserve>
}
   1ec7c:	bd08      	pop	{r3, pc}
   1ec7e:	bf00      	nop
   1ec80:	2000d0ac 	.word	0x2000d0ac

0001ec84 <net_pkt_get_reserve_rx_data>:
{
   1ec84:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1ec86:	460a      	mov	r2, r1
   1ec88:	4601      	mov	r1, r0
   1ec8a:	4802      	ldr	r0, [pc, #8]	; (1ec94 <net_pkt_get_reserve_rx_data+0x10>)
   1ec8c:	f7ff ffaa 	bl	1ebe4 <net_pkt_get_reserve_data>
}
   1ec90:	bd08      	pop	{r3, pc}
   1ec92:	bf00      	nop
   1ec94:	2000d210 	.word	0x2000d210

0001ec98 <net_pkt_get_reserve_tx_data>:
{
   1ec98:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1ec9a:	460a      	mov	r2, r1
   1ec9c:	4601      	mov	r1, r0
   1ec9e:	4802      	ldr	r0, [pc, #8]	; (1eca8 <net_pkt_get_reserve_tx_data+0x10>)
   1eca0:	f7ff ffa0 	bl	1ebe4 <net_pkt_get_reserve_data>
}
   1eca4:	bd08      	pop	{r3, pc}
   1eca6:	bf00      	nop
   1eca8:	2000d230 	.word	0x2000d230

0001ecac <net_pkt_get_frag>:
{
   1ecac:	b538      	push	{r3, r4, r5, lr}
   1ecae:	4604      	mov	r4, r0
   1ecb0:	460d      	mov	r5, r1
	return pkt->context;
   1ecb2:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1ecb4:	b143      	cbz	r3, 1ecc8 <net_pkt_get_frag+0x1c>
   1ecb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ecb8:	b133      	cbz	r3, 1ecc8 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1ecba:	4798      	blx	r3
   1ecbc:	462a      	mov	r2, r5
   1ecbe:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1ecc2:	f7ff ff8f 	bl	1ebe4 <net_pkt_get_reserve_data>
   1ecc6:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1ecc8:	6862      	ldr	r2, [r4, #4]
   1ecca:	4b07      	ldr	r3, [pc, #28]	; (1ece8 <net_pkt_get_frag+0x3c>)
   1eccc:	429a      	cmp	r2, r3
   1ecce:	d005      	beq.n	1ecdc <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1ecd0:	4629      	mov	r1, r5
   1ecd2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1ecd6:	f7ff ffdf 	bl	1ec98 <net_pkt_get_reserve_tx_data>
}
   1ecda:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1ecdc:	4629      	mov	r1, r5
   1ecde:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1ece2:	f7ff ffcf 	bl	1ec84 <net_pkt_get_reserve_rx_data>
   1ece6:	bd38      	pop	{r3, r4, r5, pc}
   1ece8:	2000d090 	.word	0x2000d090

0001ecec <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1ecec:	b538      	push	{r3, r4, r5, lr}
   1ecee:	4604      	mov	r4, r0
   1ecf0:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1ecf2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1ecf4:	b133      	cbz	r3, 1ed04 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1ecf6:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1ecf8:	b130      	cbz	r0, 1ed08 <net_pkt_get_tx+0x1c>
   1ecfa:	462a      	mov	r2, r5
   1ecfc:	4621      	mov	r1, r4
   1ecfe:	f7ff ff33 	bl	1eb68 <net_pkt_get>
}
   1ed02:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1ed04:	2000      	movs	r0, #0
   1ed06:	e7f7      	b.n	1ecf8 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1ed08:	4800      	ldr	r0, [pc, #0]	; (1ed0c <net_pkt_get_tx+0x20>)
   1ed0a:	e7f6      	b.n	1ecfa <net_pkt_get_tx+0xe>
   1ed0c:	2000d0ac 	.word	0x2000d0ac

0001ed10 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1ed10:	b538      	push	{r3, r4, r5, lr}
   1ed12:	4604      	mov	r4, r0
   1ed14:	460d      	mov	r5, r1
	if (context->data_pool) {
   1ed16:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1ed18:	b133      	cbz	r3, 1ed28 <net_pkt_get_data+0x18>
		return context->data_pool();
   1ed1a:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1ed1c:	b130      	cbz	r0, 1ed2c <net_pkt_get_data+0x1c>
   1ed1e:	462a      	mov	r2, r5
   1ed20:	4621      	mov	r1, r4
   1ed22:	f7ff ff78 	bl	1ec16 <_pkt_get_data>
}
   1ed26:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1ed28:	2000      	movs	r0, #0
   1ed2a:	e7f7      	b.n	1ed1c <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1ed2c:	4800      	ldr	r0, [pc, #0]	; (1ed30 <net_pkt_get_data+0x20>)
   1ed2e:	e7f6      	b.n	1ed1e <net_pkt_get_data+0xe>
   1ed30:	2000d230 	.word	0x2000d230

0001ed34 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1ed34:	4603      	mov	r3, r0
   1ed36:	b120      	cbz	r0, 1ed42 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1ed38:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1ed3c:	3201      	adds	r2, #1
   1ed3e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1ed42:	4618      	mov	r0, r3
   1ed44:	4770      	bx	lr

0001ed46 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1ed46:	b118      	cbz	r0, 1ed50 <net_pkt_frag_unref+0xa>
{
   1ed48:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1ed4a:	f7fd fa93 	bl	1c274 <net_buf_unref>
   1ed4e:	bd08      	pop	{r3, pc}
   1ed50:	4770      	bx	lr

0001ed52 <net_pkt_unref>:
{
   1ed52:	b500      	push	{lr}
   1ed54:	b083      	sub	sp, #12
   1ed56:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1ed58:	b188      	cbz	r0, 1ed7e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1ed5a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1ed5e:	b173      	cbz	r3, 1ed7e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1ed60:	3b01      	subs	r3, #1
   1ed62:	b2db      	uxtb	r3, r3
   1ed64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1ed68:	b94b      	cbnz	r3, 1ed7e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1ed6a:	6880      	ldr	r0, [r0, #8]
   1ed6c:	b108      	cbz	r0, 1ed72 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1ed6e:	f7ff ffea 	bl	1ed46 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1ed72:	a902      	add	r1, sp, #8
   1ed74:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1ed78:	6858      	ldr	r0, [r3, #4]
   1ed7a:	f00a fdfb 	bl	29974 <k_mem_slab_free>
}
   1ed7e:	b003      	add	sp, #12
   1ed80:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed84 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1ed84:	b510      	push	{r4, lr}
   1ed86:	4604      	mov	r4, r0
   1ed88:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1ed8a:	68a3      	ldr	r3, [r4, #8]
   1ed8c:	4293      	cmp	r3, r2
   1ed8e:	d003      	beq.n	1ed98 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1ed90:	4611      	mov	r1, r2
   1ed92:	f7fd faaf 	bl	1c2f4 <net_buf_frag_del>
}
   1ed96:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1ed98:	2900      	cmp	r1, #0
   1ed9a:	d1f9      	bne.n	1ed90 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1ed9c:	4611      	mov	r1, r2
   1ed9e:	f7fd faa9 	bl	1c2f4 <net_buf_frag_del>
		pkt->frags = tmp;
   1eda2:	60a0      	str	r0, [r4, #8]
		return tmp;
   1eda4:	bd10      	pop	{r4, pc}

0001eda6 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1eda6:	6883      	ldr	r3, [r0, #8]
   1eda8:	b143      	cbz	r3, 1edbc <net_pkt_frag_add+0x16>
{
   1edaa:	b510      	push	{r4, lr}
   1edac:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1edae:	4618      	mov	r0, r3
   1edb0:	f7fd fa80 	bl	1c2b4 <net_buf_frag_last>
   1edb4:	4621      	mov	r1, r4
   1edb6:	f7fd fa83 	bl	1c2c0 <net_buf_frag_insert>
   1edba:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1edbc:	6081      	str	r1, [r0, #8]
		return;
   1edbe:	4770      	bx	lr

0001edc0 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1edc0:	b538      	push	{r3, r4, r5, lr}
   1edc2:	4604      	mov	r4, r0
   1edc4:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1edc6:	4608      	mov	r0, r1
   1edc8:	f7fd fa74 	bl	1c2b4 <net_buf_frag_last>
   1edcc:	68a3      	ldr	r3, [r4, #8]
   1edce:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1edd0:	60a5      	str	r5, [r4, #8]
   1edd2:	bd38      	pop	{r3, r4, r5, pc}

0001edd4 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1edd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edd8:	b085      	sub	sp, #20
   1edda:	9002      	str	r0, [sp, #8]
   1eddc:	460d      	mov	r5, r1
   1edde:	4614      	mov	r4, r2
   1ede0:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1ede2:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1ede6:	4619      	mov	r1, r3
   1ede8:	f7ff ff60 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   1edec:	9001      	str	r0, [sp, #4]
   1edee:	b1b8      	cbz	r0, 1ee20 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1edf0:	f100 0608 	add.w	r6, r0, #8
   1edf4:	4630      	mov	r0, r6
   1edf6:	f7fd faf2 	bl	1c3de <net_buf_simple_tailroom>
   1edfa:	42a0      	cmp	r0, r4
   1edfc:	d30b      	bcc.n	1ee16 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1edfe:	4621      	mov	r1, r4
   1ee00:	4630      	mov	r0, r6
   1ee02:	f7fd fa83 	bl	1c30c <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1ee06:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1ee0a:	b14f      	cbz	r7, 1ee20 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1ee0c:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1ee10:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1ee14:	e01c      	b.n	1ee50 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1ee16:	9801      	ldr	r0, [sp, #4]
   1ee18:	f7ff ff95 	bl	1ed46 <net_pkt_frag_unref>
		return NULL;
   1ee1c:	2300      	movs	r3, #0
   1ee1e:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1ee20:	9801      	ldr	r0, [sp, #4]
   1ee22:	b005      	add	sp, #20
   1ee24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1ee28:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1ee2a:	eba8 0304 	sub.w	r3, r8, r4
   1ee2e:	2b00      	cmp	r3, #0
   1ee30:	db2e      	blt.n	1ee90 <net_pkt_copy+0xbc>
			amount -= left_len;
   1ee32:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1ee34:	4621      	mov	r1, r4
   1ee36:	4630      	mov	r0, r6
   1ee38:	f7fd fa68 	bl	1c30c <net_buf_simple_add>
   1ee3c:	4622      	mov	r2, r4
   1ee3e:	4649      	mov	r1, r9
   1ee40:	f7e1 fa3e 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1ee44:	4630      	mov	r0, r6
   1ee46:	f7fd faca 	bl	1c3de <net_buf_simple_tailroom>
   1ee4a:	b180      	cbz	r0, 1ee6e <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1ee4c:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1ee4e:	44a1      	add	r9, r4
	while (orig && amount) {
   1ee50:	f1ba 0f00 	cmp.w	sl, #0
   1ee54:	d0e4      	beq.n	1ee20 <net_pkt_copy+0x4c>
   1ee56:	2d00      	cmp	r5, #0
   1ee58:	d0e2      	beq.n	1ee20 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1ee5a:	f10b 0608 	add.w	r6, fp, #8
   1ee5e:	4630      	mov	r0, r6
   1ee60:	f7fd fabd 	bl	1c3de <net_buf_simple_tailroom>
   1ee64:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1ee66:	42bd      	cmp	r5, r7
   1ee68:	d9de      	bls.n	1ee28 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1ee6a:	46b8      	mov	r8, r7
   1ee6c:	e7dd      	b.n	1ee2a <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1ee6e:	9903      	ldr	r1, [sp, #12]
   1ee70:	9802      	ldr	r0, [sp, #8]
   1ee72:	f7ff ff1b 	bl	1ecac <net_pkt_get_frag>
				if (!new_frag) {
   1ee76:	4606      	mov	r6, r0
   1ee78:	b128      	cbz	r0, 1ee86 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1ee7a:	4601      	mov	r1, r0
   1ee7c:	4658      	mov	r0, fp
   1ee7e:	f7fd fa2a 	bl	1c2d6 <net_buf_frag_add>
				frag = new_frag;
   1ee82:	46b3      	mov	fp, r6
   1ee84:	e7e2      	b.n	1ee4c <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1ee86:	9801      	ldr	r0, [sp, #4]
   1ee88:	f7ff ff5d 	bl	1ed46 <net_pkt_frag_unref>
					return NULL;
   1ee8c:	9601      	str	r6, [sp, #4]
   1ee8e:	e7c7      	b.n	1ee20 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1ee90:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1ee94:	4641      	mov	r1, r8
   1ee96:	4630      	mov	r0, r6
   1ee98:	f7fd fa38 	bl	1c30c <net_buf_simple_add>
   1ee9c:	4642      	mov	r2, r8
   1ee9e:	4649      	mov	r1, r9
   1eea0:	f7e1 fa0e 	bl	2c0 <memcpy>
		orig = orig->frags;
   1eea4:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1eea8:	f1ba 0f00 	cmp.w	sl, #0
   1eeac:	d0d0      	beq.n	1ee50 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1eeae:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1eeb2:	f8da 9008 	ldr.w	r9, [sl, #8]
   1eeb6:	e7cb      	b.n	1ee50 <net_pkt_copy+0x7c>

0001eeb8 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1eeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eebc:	4680      	mov	r8, r0
   1eebe:	460e      	mov	r6, r1
   1eec0:	4615      	mov	r5, r2
   1eec2:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1eec4:	89c3      	ldrh	r3, [r0, #14]
   1eec6:	454b      	cmp	r3, r9
   1eec8:	d206      	bcs.n	1eed8 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1eeca:	f06f 000b 	mvn.w	r0, #11
   1eece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1eed2:	1a6d      	subs	r5, r5, r1
   1eed4:	b2ad      	uxth	r5, r5
		src = src->frags;
   1eed6:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1eed8:	b336      	cbz	r6, 1ef28 <net_frag_linear_copy+0x70>
   1eeda:	89b1      	ldrh	r1, [r6, #12]
   1eedc:	428d      	cmp	r5, r1
   1eede:	d2f8      	bcs.n	1eed2 <net_frag_linear_copy+0x1a>
   1eee0:	2700      	movs	r7, #0
   1eee2:	e015      	b.n	1ef10 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1eee4:	89b4      	ldrh	r4, [r6, #12]
   1eee6:	1b64      	subs	r4, r4, r5
   1eee8:	454c      	cmp	r4, r9
   1eeea:	bfa8      	it	ge
   1eeec:	464c      	movge	r4, r9
   1eeee:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1eef0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1eef4:	68b1      	ldr	r1, [r6, #8]
   1eef6:	4622      	mov	r2, r4
   1eef8:	4429      	add	r1, r5
   1eefa:	4438      	add	r0, r7
   1eefc:	f7e1 f9e0 	bl	2c0 <memcpy>

		copied += to_copy;
   1ef00:	4427      	add	r7, r4
   1ef02:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1ef04:	eba9 0404 	sub.w	r4, r9, r4
   1ef08:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1ef0c:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1ef0e:	2500      	movs	r5, #0
	while (src && len > 0) {
   1ef10:	b116      	cbz	r6, 1ef18 <net_frag_linear_copy+0x60>
   1ef12:	f1b9 0f00 	cmp.w	r9, #0
   1ef16:	d1e5      	bne.n	1eee4 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1ef18:	f1b9 0f00 	cmp.w	r9, #0
   1ef1c:	d106      	bne.n	1ef2c <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1ef1e:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1ef22:	2000      	movs	r0, #0
   1ef24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ef28:	2700      	movs	r7, #0
   1ef2a:	e7f1      	b.n	1ef10 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1ef2c:	f06f 000b 	mvn.w	r0, #11
}
   1ef30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ef34 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef38:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1ef3a:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1ef3c:	2700      	movs	r7, #0

	while (frag) {
   1ef3e:	e009      	b.n	1ef54 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1ef40:	4630      	mov	r0, r6
   1ef42:	f7fd fa4c 	bl	1c3de <net_buf_simple_tailroom>
   1ef46:	4605      	mov	r5, r0
   1ef48:	e011      	b.n	1ef6e <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1ef4a:	89a3      	ldrh	r3, [r4, #12]
   1ef4c:	2b00      	cmp	r3, #0
   1ef4e:	d030      	beq.n	1efb2 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1ef50:	4627      	mov	r7, r4
		frag = frag->frags;
   1ef52:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1ef54:	2c00      	cmp	r4, #0
   1ef56:	d031      	beq.n	1efbc <net_pkt_compact+0x88>
		if (frag->frags) {
   1ef58:	6823      	ldr	r3, [r4, #0]
   1ef5a:	2b00      	cmp	r3, #0
   1ef5c:	d0f5      	beq.n	1ef4a <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1ef5e:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1ef60:	f104 0608 	add.w	r6, r4, #8
   1ef64:	4630      	mov	r0, r6
   1ef66:	f7fd fa3a 	bl	1c3de <net_buf_simple_tailroom>
   1ef6a:	4285      	cmp	r5, r0
   1ef6c:	d8e8      	bhi.n	1ef40 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1ef6e:	68a0      	ldr	r0, [r4, #8]
   1ef70:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1ef72:	6821      	ldr	r1, [r4, #0]
   1ef74:	462a      	mov	r2, r5
   1ef76:	6889      	ldr	r1, [r1, #8]
   1ef78:	4418      	add	r0, r3
   1ef7a:	f7e1 f9a1 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1ef7e:	4629      	mov	r1, r5
   1ef80:	4630      	mov	r0, r6
   1ef82:	f7fd f9c3 	bl	1c30c <net_buf_simple_add>
			memmove(frag->frags->data,
   1ef86:	6823      	ldr	r3, [r4, #0]
   1ef88:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1ef8a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1ef8c:	1b52      	subs	r2, r2, r5
   1ef8e:	1941      	adds	r1, r0, r5
   1ef90:	f00d f810 	bl	2bfb4 <memmove>
			frag->frags->len -= copy_len;
   1ef94:	6822      	ldr	r2, [r4, #0]
   1ef96:	8993      	ldrh	r3, [r2, #12]
   1ef98:	1b5d      	subs	r5, r3, r5
   1ef9a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1ef9c:	4630      	mov	r0, r6
   1ef9e:	f7fd fa1e 	bl	1c3de <net_buf_simple_tailroom>
   1efa2:	2800      	cmp	r0, #0
   1efa4:	d0d4      	beq.n	1ef50 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1efa6:	6822      	ldr	r2, [r4, #0]
   1efa8:	4621      	mov	r1, r4
   1efaa:	4640      	mov	r0, r8
   1efac:	f7ff feea 	bl	1ed84 <net_pkt_frag_del>
				continue;
   1efb0:	e7d0      	b.n	1ef54 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1efb2:	4622      	mov	r2, r4
   1efb4:	4639      	mov	r1, r7
   1efb6:	4640      	mov	r0, r8
   1efb8:	f7ff fee4 	bl	1ed84 <net_pkt_frag_del>
	}

	return true;
}
   1efbc:	2001      	movs	r0, #1
   1efbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001efc2 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1efc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1efc6:	b3d0      	cbz	r0, 1f03e <net_pkt_append+0x7c>
   1efc8:	460c      	mov	r4, r1
   1efca:	4690      	mov	r8, r2
   1efcc:	469a      	mov	sl, r3
   1efce:	4681      	mov	r9, r0
   1efd0:	b3ca      	cbz	r2, 1f046 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1efd2:	6883      	ldr	r3, [r0, #8]
   1efd4:	b133      	cbz	r3, 1efe4 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1efd6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1efda:	f7fd f96b 	bl	1c2b4 <net_buf_frag_last>
   1efde:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1efe0:	2700      	movs	r7, #0
   1efe2:	e024      	b.n	1f02e <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1efe4:	4651      	mov	r1, sl
   1efe6:	f7ff fe61 	bl	1ecac <net_pkt_get_frag>
		if (!frag) {
   1efea:	4601      	mov	r1, r0
   1efec:	b368      	cbz	r0, 1f04a <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1efee:	4648      	mov	r0, r9
   1eff0:	f7ff fed9 	bl	1eda6 <net_pkt_frag_add>
   1eff4:	e7ef      	b.n	1efd6 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1eff6:	4628      	mov	r0, r5
   1eff8:	f7fd f9f1 	bl	1c3de <net_buf_simple_tailroom>
   1effc:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1effe:	4631      	mov	r1, r6
   1f000:	4628      	mov	r0, r5
   1f002:	f7fd f983 	bl	1c30c <net_buf_simple_add>
		memcpy(data, value, count);
   1f006:	4632      	mov	r2, r6
   1f008:	4641      	mov	r1, r8
   1f00a:	f7e1 f959 	bl	2c0 <memcpy>
		len -= count;
   1f00e:	1ba4      	subs	r4, r4, r6
   1f010:	b2a4      	uxth	r4, r4
		added_len += count;
   1f012:	4437      	add	r7, r6
   1f014:	b2bf      	uxth	r7, r7
		value += count;
   1f016:	44b0      	add	r8, r6
		if (len == 0) {
   1f018:	b194      	cbz	r4, 1f040 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1f01a:	4651      	mov	r1, sl
   1f01c:	4648      	mov	r0, r9
   1f01e:	f7ff fe45 	bl	1ecac <net_pkt_get_frag>
		if (!frag) {
   1f022:	4605      	mov	r5, r0
   1f024:	b160      	cbz	r0, 1f040 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1f026:	4601      	mov	r1, r0
   1f028:	4648      	mov	r0, r9
   1f02a:	f7ff febc 	bl	1eda6 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1f02e:	3508      	adds	r5, #8
   1f030:	4628      	mov	r0, r5
   1f032:	f7fd f9d4 	bl	1c3de <net_buf_simple_tailroom>
   1f036:	4284      	cmp	r4, r0
   1f038:	d2dd      	bcs.n	1eff6 <net_pkt_append+0x34>
   1f03a:	4626      	mov	r6, r4
   1f03c:	e7df      	b.n	1effe <net_pkt_append+0x3c>
		return 0;
   1f03e:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1f040:	4638      	mov	r0, r7
   1f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1f046:	2700      	movs	r7, #0
   1f048:	e7fa      	b.n	1f040 <net_pkt_append+0x7e>
			return 0;
   1f04a:	2700      	movs	r7, #0
   1f04c:	e7f8      	b.n	1f040 <net_pkt_append+0x7e>

0001f04e <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1f04e:	b4f0      	push	{r4, r5, r6, r7}
   1f050:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1f052:	4604      	mov	r4, r0
   1f054:	b188      	cbz	r0, 1f07a <net_frag_read+0x2c>
	while (frag) {
   1f056:	b17c      	cbz	r4, 1f078 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1f058:	89a0      	ldrh	r0, [r4, #12]
   1f05a:	4288      	cmp	r0, r1
   1f05c:	d005      	beq.n	1f06a <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1f05e:	4288      	cmp	r0, r1
   1f060:	d807      	bhi.n	1f072 <net_frag_read+0x24>
		offset -= frag->len;
   1f062:	1a09      	subs	r1, r1, r0
   1f064:	b289      	uxth	r1, r1
		frag = frag->frags;
   1f066:	6824      	ldr	r4, [r4, #0]
   1f068:	e7f5      	b.n	1f056 <net_frag_read+0x8>
			*pos = 0;
   1f06a:	2100      	movs	r1, #0
   1f06c:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1f06e:	6820      	ldr	r0, [r4, #0]
   1f070:	e003      	b.n	1f07a <net_frag_read+0x2c>
			*pos = offset;
   1f072:	8011      	strh	r1, [r2, #0]
			return frag;
   1f074:	4620      	mov	r0, r4
   1f076:	e000      	b.n	1f07a <net_frag_read+0x2c>
	return NULL;
   1f078:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1f07a:	b350      	cbz	r0, 1f0d2 <net_frag_read+0x84>
   1f07c:	2500      	movs	r5, #0
   1f07e:	e00d      	b.n	1f09c <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1f080:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1f082:	3301      	adds	r3, #1
   1f084:	b29b      	uxth	r3, r3
   1f086:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1f088:	8984      	ldrh	r4, [r0, #12]
   1f08a:	42a3      	cmp	r3, r4
   1f08c:	d304      	bcc.n	1f098 <net_frag_read+0x4a>
		*pos = 0;
   1f08e:	2300      	movs	r3, #0
   1f090:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1f092:	6800      	ldr	r0, [r0, #0]
   1f094:	e000      	b.n	1f098 <net_frag_read+0x4a>
						  pos, data + copy++);
   1f096:	4625      	mov	r5, r4
   1f098:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1f09a:	b1c0      	cbz	r0, 1f0ce <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1f09c:	1e59      	subs	r1, r3, #1
   1f09e:	b289      	uxth	r1, r1
   1f0a0:	b1db      	cbz	r3, 1f0da <net_frag_read+0x8c>
   1f0a2:	b1d0      	cbz	r0, 1f0da <net_frag_read+0x8c>
		if (data) {
   1f0a4:	2e00      	cmp	r6, #0
   1f0a6:	d0eb      	beq.n	1f080 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1f0a8:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1f0aa:	1c6c      	adds	r4, r5, #1
   1f0ac:	b2a4      	uxth	r4, r4
	if (data) {
   1f0ae:	42ee      	cmn	r6, r5
   1f0b0:	d002      	beq.n	1f0b8 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1f0b2:	6887      	ldr	r7, [r0, #8]
   1f0b4:	5cff      	ldrb	r7, [r7, r3]
   1f0b6:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1f0b8:	3301      	adds	r3, #1
   1f0ba:	b29b      	uxth	r3, r3
   1f0bc:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1f0be:	8985      	ldrh	r5, [r0, #12]
   1f0c0:	42ab      	cmp	r3, r5
   1f0c2:	d3e8      	bcc.n	1f096 <net_frag_read+0x48>
		*pos = 0;
   1f0c4:	2300      	movs	r3, #0
   1f0c6:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1f0c8:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1f0ca:	4625      	mov	r5, r4
   1f0cc:	e7e4      	b.n	1f098 <net_frag_read+0x4a>
		if (!frag && len) {
   1f0ce:	2900      	cmp	r1, #0
   1f0d0:	d0e4      	beq.n	1f09c <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1f0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f0d6:	8013      	strh	r3, [r2, #0]

	return NULL;
   1f0d8:	2000      	movs	r0, #0
}
   1f0da:	bcf0      	pop	{r4, r5, r6, r7}
   1f0dc:	4770      	bx	lr

0001f0de <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1f0de:	b510      	push	{r4, lr}
   1f0e0:	b084      	sub	sp, #16
   1f0e2:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1f0e4:	ab03      	add	r3, sp, #12
   1f0e6:	9300      	str	r3, [sp, #0]
   1f0e8:	2302      	movs	r3, #2
   1f0ea:	f7ff ffb0 	bl	1f04e <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1f0ee:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1f0f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f0f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f0fa:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1f0fc:	b004      	add	sp, #16
   1f0fe:	bd10      	pop	{r4, pc}

0001f100 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1f100:	b510      	push	{r4, lr}
   1f102:	b084      	sub	sp, #16
   1f104:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1f106:	ab03      	add	r3, sp, #12
   1f108:	9300      	str	r3, [sp, #0]
   1f10a:	2304      	movs	r3, #4
   1f10c:	f7ff ff9f 	bl	1f04e <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1f110:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1f114:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f118:	041b      	lsls	r3, r3, #16
   1f11a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1f11e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1f122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f126:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1f12a:	4313      	orrs	r3, r2
   1f12c:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1f12e:	b004      	add	sp, #16
   1f130:	bd10      	pop	{r4, pc}

0001f132 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1f132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f136:	b083      	sub	sp, #12
   1f138:	9201      	str	r2, [sp, #4]
   1f13a:	469b      	mov	fp, r3
   1f13c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f140:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1f142:	2800      	cmp	r0, #0
   1f144:	d06d      	beq.n	1f222 <net_pkt_write+0xf0>
   1f146:	460c      	mov	r4, r1
   1f148:	4682      	mov	sl, r0
   1f14a:	4615      	mov	r5, r2
	if (data) {
   1f14c:	b364      	cbz	r4, 1f1a8 <net_pkt_write+0x76>
		if (!frag) {
   1f14e:	2c00      	cmp	r4, #0
   1f150:	d065      	beq.n	1f21e <net_pkt_write+0xec>
		if (offset < frag->len) {
   1f152:	89a3      	ldrh	r3, [r4, #12]
   1f154:	42ab      	cmp	r3, r5
   1f156:	d863      	bhi.n	1f220 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1f158:	d032      	beq.n	1f1c0 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1f15a:	42ab      	cmp	r3, r5
   1f15c:	d2f6      	bcs.n	1f14c <net_pkt_write+0x1a>
			offset -= frag->len;
   1f15e:	1aed      	subs	r5, r5, r3
   1f160:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1f162:	f104 0908 	add.w	r9, r4, #8
   1f166:	4648      	mov	r0, r9
   1f168:	f7fd f939 	bl	1c3de <net_buf_simple_tailroom>
   1f16c:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1f170:	4545      	cmp	r5, r8
   1f172:	d33a      	bcc.n	1f1ea <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1f174:	4545      	cmp	r5, r8
   1f176:	d03e      	beq.n	1f1f6 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1f178:	4545      	cmp	r5, r8
   1f17a:	d9e7      	bls.n	1f14c <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1f17c:	b281      	uxth	r1, r0
   1f17e:	4648      	mov	r0, r9
   1f180:	f7fd f8c4 	bl	1c30c <net_buf_simple_add>
				offset -= tailroom;
   1f184:	eba5 0508 	sub.w	r5, r5, r8
   1f188:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1f18a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1f18c:	2c00      	cmp	r4, #0
   1f18e:	d1dd      	bne.n	1f14c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1f190:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f192:	4650      	mov	r0, sl
   1f194:	f7ff fd8a 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   1f198:	4604      	mov	r4, r0
   1f19a:	2800      	cmp	r0, #0
   1f19c:	d0d6      	beq.n	1f14c <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1f19e:	4601      	mov	r1, r0
   1f1a0:	4650      	mov	r0, sl
   1f1a2:	f7ff fe00 	bl	1eda6 <net_pkt_frag_add>
   1f1a6:	e7d1      	b.n	1f14c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1f1a8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f1aa:	4650      	mov	r0, sl
   1f1ac:	f7ff fd7e 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   1f1b0:	4604      	mov	r4, r0
   1f1b2:	2800      	cmp	r0, #0
   1f1b4:	d0cb      	beq.n	1f14e <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1f1b6:	4601      	mov	r1, r0
   1f1b8:	4650      	mov	r0, sl
   1f1ba:	f7ff fdf4 	bl	1eda6 <net_pkt_frag_add>
   1f1be:	e7c6      	b.n	1f14e <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1f1c0:	f104 0008 	add.w	r0, r4, #8
   1f1c4:	f7fd f90b 	bl	1c3de <net_buf_simple_tailroom>
   1f1c8:	bb50      	cbnz	r0, 1f220 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1f1ca:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1f1cc:	b10c      	cbz	r4, 1f1d2 <net_pkt_write+0xa0>
			*pos = 0;
   1f1ce:	2500      	movs	r5, #0
   1f1d0:	e026      	b.n	1f220 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1f1d2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f1d4:	4650      	mov	r0, sl
   1f1d6:	f7ff fd69 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   1f1da:	4604      	mov	r4, r0
   1f1dc:	2800      	cmp	r0, #0
   1f1de:	d0f6      	beq.n	1f1ce <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1f1e0:	4601      	mov	r1, r0
   1f1e2:	4650      	mov	r0, sl
   1f1e4:	f7ff fddf 	bl	1eda6 <net_pkt_frag_add>
   1f1e8:	e7f1      	b.n	1f1ce <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1f1ea:	4629      	mov	r1, r5
   1f1ec:	4648      	mov	r0, r9
   1f1ee:	f7fd f88d 	bl	1c30c <net_buf_simple_add>
				*pos = frag->len;
   1f1f2:	89a5      	ldrh	r5, [r4, #12]
   1f1f4:	e014      	b.n	1f220 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1f1f6:	b281      	uxth	r1, r0
   1f1f8:	4648      	mov	r0, r9
   1f1fa:	f7fd f887 	bl	1c30c <net_buf_simple_add>
				return check_and_create_data(pkt,
   1f1fe:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1f200:	b10c      	cbz	r4, 1f206 <net_pkt_write+0xd4>
				*pos = 0;
   1f202:	2500      	movs	r5, #0
   1f204:	e00c      	b.n	1f220 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1f206:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f208:	4650      	mov	r0, sl
   1f20a:	f7ff fd4f 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   1f20e:	4604      	mov	r4, r0
   1f210:	2800      	cmp	r0, #0
   1f212:	d0f6      	beq.n	1f202 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1f214:	4601      	mov	r1, r0
   1f216:	4650      	mov	r0, sl
   1f218:	f7ff fdc5 	bl	1eda6 <net_pkt_frag_add>
   1f21c:	e7f1      	b.n	1f202 <net_pkt_write+0xd0>
		if (!frag) {
   1f21e:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1f220:	b96c      	cbnz	r4, 1f23e <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1f222:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f226:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1f22a:	2000      	movs	r0, #0
   1f22c:	e02d      	b.n	1f28a <net_pkt_write+0x158>
		len -= count;
   1f22e:	eba6 0608 	sub.w	r6, r6, r8
   1f232:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1f234:	b32e      	cbz	r6, 1f282 <net_pkt_write+0x150>
		data += count;
   1f236:	4447      	add	r7, r8
		frag = frag->frags;
   1f238:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1f23a:	b34c      	cbz	r4, 1f290 <net_pkt_write+0x15e>
		offset = 0;
   1f23c:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1f23e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1f242:	f104 0908 	add.w	r9, r4, #8
   1f246:	4648      	mov	r0, r9
   1f248:	f7fd f8c5 	bl	1c3d6 <net_buf_simple_headroom>
   1f24c:	eba8 0800 	sub.w	r8, r8, r0
   1f250:	fa1f f888 	uxth.w	r8, r8
   1f254:	eba8 0805 	sub.w	r8, r8, r5
   1f258:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1f25c:	45b0      	cmp	r8, r6
   1f25e:	bf28      	it	cs
   1f260:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1f262:	68a0      	ldr	r0, [r4, #8]
   1f264:	4642      	mov	r2, r8
   1f266:	4639      	mov	r1, r7
   1f268:	4428      	add	r0, r5
   1f26a:	f7e1 f829 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1f26e:	eb05 0108 	add.w	r1, r5, r8
   1f272:	89a3      	ldrh	r3, [r4, #12]
   1f274:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1f276:	2900      	cmp	r1, #0
   1f278:	ddd9      	ble.n	1f22e <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1f27a:	4648      	mov	r0, r9
   1f27c:	f7fd f846 	bl	1c30c <net_buf_simple_add>
   1f280:	e7d5      	b.n	1f22e <net_pkt_write+0xfc>
			*pos = offset + count;
   1f282:	4445      	add	r5, r8
   1f284:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1f288:	4620      	mov	r0, r4
}
   1f28a:	b003      	add	sp, #12
   1f28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1f290:	990e      	ldr	r1, [sp, #56]	; 0x38
   1f292:	4650      	mov	r0, sl
   1f294:	f7ff fd0a 	bl	1ecac <net_pkt_get_frag>
			if (!frag) {
   1f298:	4604      	mov	r4, r0
   1f29a:	2800      	cmp	r0, #0
   1f29c:	d0c1      	beq.n	1f222 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1f29e:	4601      	mov	r1, r0
   1f2a0:	4650      	mov	r0, sl
   1f2a2:	f7ff fd80 	bl	1eda6 <net_pkt_frag_add>
   1f2a6:	e7c9      	b.n	1f23c <net_pkt_write+0x10a>

0001f2a8 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1f2a8:	b170      	cbz	r0, 1f2c8 <net_pkt_get_info+0x20>
{
   1f2aa:	b410      	push	{r4}
   1f2ac:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1f2ae:	480c      	ldr	r0, [pc, #48]	; (1f2e0 <net_pkt_get_info+0x38>)
   1f2b0:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1f2b2:	b109      	cbz	r1, 1f2b8 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1f2b4:	480b      	ldr	r0, [pc, #44]	; (1f2e4 <net_pkt_get_info+0x3c>)
   1f2b6:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1f2b8:	b10a      	cbz	r2, 1f2be <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1f2ba:	490b      	ldr	r1, [pc, #44]	; (1f2e8 <net_pkt_get_info+0x40>)
   1f2bc:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1f2be:	b10b      	cbz	r3, 1f2c4 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1f2c0:	4a0a      	ldr	r2, [pc, #40]	; (1f2ec <net_pkt_get_info+0x44>)
   1f2c2:	601a      	str	r2, [r3, #0]
	}
}
   1f2c4:	bc10      	pop	{r4}
   1f2c6:	4770      	bx	lr
	if (tx) {
   1f2c8:	b109      	cbz	r1, 1f2ce <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1f2ca:	4806      	ldr	r0, [pc, #24]	; (1f2e4 <net_pkt_get_info+0x3c>)
   1f2cc:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1f2ce:	b10a      	cbz	r2, 1f2d4 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1f2d0:	4905      	ldr	r1, [pc, #20]	; (1f2e8 <net_pkt_get_info+0x40>)
   1f2d2:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1f2d4:	2b00      	cmp	r3, #0
   1f2d6:	d0f6      	beq.n	1f2c6 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1f2d8:	4a04      	ldr	r2, [pc, #16]	; (1f2ec <net_pkt_get_info+0x44>)
   1f2da:	601a      	str	r2, [r3, #0]
   1f2dc:	4770      	bx	lr
   1f2de:	bf00      	nop
   1f2e0:	2000d090 	.word	0x2000d090
   1f2e4:	2000d0ac 	.word	0x2000d0ac
   1f2e8:	2000d210 	.word	0x2000d210
   1f2ec:	2000d230 	.word	0x2000d230

0001f2f0 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1f2f0:	b500      	push	{lr}
   1f2f2:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1f2f4:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1f2f6:	2300      	movs	r3, #0
   1f2f8:	9300      	str	r3, [sp, #0]
   1f2fa:	f7ff fea8 	bl	1f04e <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1f2fe:	b003      	add	sp, #12
   1f300:	f85d fb04 	ldr.w	pc, [sp], #4

0001f304 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1f304:	b500      	push	{lr}
   1f306:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f308:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1f30c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1f310:	f10d 0206 	add.w	r2, sp, #6
   1f314:	4419      	add	r1, r3
   1f316:	f7ff ffeb 	bl	1f2f0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1f31a:	b130      	cbz	r0, 1f32a <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1f31c:	6880      	ldr	r0, [r0, #8]
   1f31e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f322:	4418      	add	r0, r3
}
   1f324:	b003      	add	sp, #12
   1f326:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1f32a:	2000      	movs	r0, #0
   1f32c:	e7fa      	b.n	1f324 <net_pkt_icmp_data+0x20>

0001f32e <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1f32e:	b500      	push	{lr}
   1f330:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f332:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1f336:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f33a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1f33c:	4419      	add	r1, r3
   1f33e:	f10d 0206 	add.w	r2, sp, #6
   1f342:	b289      	uxth	r1, r1
   1f344:	f7ff ffd4 	bl	1f2f0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1f348:	b130      	cbz	r0, 1f358 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1f34a:	6880      	ldr	r0, [r0, #8]
   1f34c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f350:	4418      	add	r0, r3
}
   1f352:	b003      	add	sp, #12
   1f354:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1f358:	2000      	movs	r0, #0
   1f35a:	e7fa      	b.n	1f352 <net_pkt_icmp_opt_data+0x24>

0001f35c <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1f35c:	b500      	push	{lr}
   1f35e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f360:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1f364:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1f368:	f10d 0206 	add.w	r2, sp, #6
   1f36c:	4419      	add	r1, r3
   1f36e:	f7ff ffbf 	bl	1f2f0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1f372:	b130      	cbz	r0, 1f382 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1f374:	6880      	ldr	r0, [r0, #8]
   1f376:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f37a:	4418      	add	r0, r3
}
   1f37c:	b003      	add	sp, #12
   1f37e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1f382:	2000      	movs	r0, #0
   1f384:	e7fa      	b.n	1f37c <net_pkt_udp_data+0x20>

0001f386 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1f386:	b500      	push	{lr}
   1f388:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f38a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1f38e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1f392:	f10d 0206 	add.w	r2, sp, #6
   1f396:	4419      	add	r1, r3
   1f398:	f7ff ffaa 	bl	1f2f0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1f39c:	b130      	cbz	r0, 1f3ac <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1f39e:	6880      	ldr	r0, [r0, #8]
   1f3a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f3a4:	4418      	add	r0, r3
}
   1f3a6:	b003      	add	sp, #12
   1f3a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1f3ac:	2000      	movs	r0, #0
   1f3ae:	e7fa      	b.n	1f3a6 <net_pkt_tcp_data+0x20>

0001f3b0 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1f3b0:	b570      	push	{r4, r5, r6, lr}
   1f3b2:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1f3b4:	4605      	mov	r5, r0
   1f3b6:	2800      	cmp	r0, #0
   1f3b8:	d065      	beq.n	1f486 <net_pkt_clone+0xd6>
   1f3ba:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1f3bc:	460a      	mov	r2, r1
   1f3be:	2100      	movs	r1, #0
   1f3c0:	6840      	ldr	r0, [r0, #4]
   1f3c2:	f7ff fbad 	bl	1eb20 <net_pkt_get_reserve>
	if (!clone) {
   1f3c6:	4604      	mov	r4, r0
   1f3c8:	2800      	cmp	r0, #0
   1f3ca:	d054      	beq.n	1f476 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1f3cc:	2300      	movs	r3, #0
   1f3ce:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1f3d0:	68ab      	ldr	r3, [r5, #8]
   1f3d2:	b173      	cbz	r3, 1f3f2 <net_pkt_clone+0x42>
   1f3d4:	2100      	movs	r1, #0
   1f3d6:	e002      	b.n	1f3de <net_pkt_clone+0x2e>
		bytes += buf->len;
   1f3d8:	899a      	ldrh	r2, [r3, #12]
   1f3da:	4411      	add	r1, r2
		buf = buf->frags;
   1f3dc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f3de:	2b00      	cmp	r3, #0
   1f3e0:	d1fa      	bne.n	1f3d8 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1f3e2:	4633      	mov	r3, r6
   1f3e4:	2200      	movs	r2, #0
   1f3e6:	4628      	mov	r0, r5
   1f3e8:	f7ff fcf4 	bl	1edd4 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1f3ec:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1f3ee:	2800      	cmp	r0, #0
   1f3f0:	d044      	beq.n	1f47c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1f3f2:	68eb      	ldr	r3, [r5, #12]
   1f3f4:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1f3f6:	692b      	ldr	r3, [r5, #16]
   1f3f8:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1f3fa:	696b      	ldr	r3, [r5, #20]
   1f3fc:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1f3fe:	68a3      	ldr	r3, [r4, #8]
   1f400:	b1db      	cbz	r3, 1f43a <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1f402:	f10d 0206 	add.w	r2, sp, #6
   1f406:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1f40a:	4620      	mov	r0, r4
   1f40c:	f7ff ff70 	bl	1f2f0 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1f410:	6883      	ldr	r3, [r0, #8]
   1f412:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1f416:	4413      	add	r3, r2
	pkt->appdata = data;
   1f418:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1f41a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1f41c:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1f41e:	2208      	movs	r2, #8
   1f420:	f105 0120 	add.w	r1, r5, #32
   1f424:	f104 0020 	add.w	r0, r4, #32
   1f428:	f7e0 ff4a 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1f42c:	2208      	movs	r2, #8
   1f42e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1f432:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1f436:	f7e0 ff43 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1f43a:	2300      	movs	r3, #0
   1f43c:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1f43e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1f442:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1f446:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1f44a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1f44e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1f452:	f363 02c6 	bfi	r2, r3, #3, #4
   1f456:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1f45a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1f45e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1f462:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1f466:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1f46a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1f46e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1f472:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1f474:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1f476:	4620      	mov	r0, r4
   1f478:	b002      	add	sp, #8
   1f47a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1f47c:	4620      	mov	r0, r4
   1f47e:	f7ff fc68 	bl	1ed52 <net_pkt_unref>
			return NULL;
   1f482:	2400      	movs	r4, #0
   1f484:	e7f7      	b.n	1f476 <net_pkt_clone+0xc6>
		return NULL;
   1f486:	4604      	mov	r4, r0
   1f488:	e7f5      	b.n	1f476 <net_pkt_clone+0xc6>

0001f48a <net_pkt_init>:

void net_pkt_init(void)
{
   1f48a:	4770      	bx	lr

0001f48c <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1f48c:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1f48e:	2a00      	cmp	r2, #0
   1f490:	db03      	blt.n	1f49a <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1f492:	4606      	mov	r6, r0
   1f494:	2409      	movs	r4, #9
   1f496:	4b0e      	ldr	r3, [pc, #56]	; (1f4d0 <net_value_to_udec+0x44>)
   1f498:	e00a      	b.n	1f4b0 <net_value_to_udec+0x24>
		precision = 1;
   1f49a:	2201      	movs	r2, #1
   1f49c:	e7f9      	b.n	1f492 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1f49e:	3530      	adds	r5, #48	; 0x30
   1f4a0:	7035      	strb	r5, [r6, #0]
			precision = i;
   1f4a2:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1f4a4:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1f4a6:	3c01      	subs	r4, #1
   1f4a8:	4d0a      	ldr	r5, [pc, #40]	; (1f4d4 <net_value_to_udec+0x48>)
   1f4aa:	fba5 5303 	umull	r5, r3, r5, r3
   1f4ae:	08db      	lsrs	r3, r3, #3
   1f4b0:	2c00      	cmp	r4, #0
   1f4b2:	db08      	blt.n	1f4c6 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1f4b4:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1f4b8:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1f4bc:	42a2      	cmp	r2, r4
   1f4be:	dcee      	bgt.n	1f49e <net_value_to_udec+0x12>
   1f4c0:	2d00      	cmp	r5, #0
   1f4c2:	d0f0      	beq.n	1f4a6 <net_value_to_udec+0x1a>
   1f4c4:	e7eb      	b.n	1f49e <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1f4c6:	2300      	movs	r3, #0
   1f4c8:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1f4ca:	1a30      	subs	r0, r6, r0
   1f4cc:	bc70      	pop	{r4, r5, r6}
   1f4ce:	4770      	bx	lr
   1f4d0:	3b9aca00 	.word	0x3b9aca00
   1f4d4:	cccccccd 	.word	0xcccccccd

0001f4d8 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1f4d8:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1f4da:	3a01      	subs	r2, #1
   1f4dc:	440a      	add	r2, r1

	while (ptr < end) {
   1f4de:	e000      	b.n	1f4e2 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1f4e0:	3102      	adds	r1, #2
	while (ptr < end) {
   1f4e2:	4291      	cmp	r1, r2
   1f4e4:	d20b      	bcs.n	1f4fe <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1f4e6:	780c      	ldrb	r4, [r1, #0]
   1f4e8:	784b      	ldrb	r3, [r1, #1]
   1f4ea:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1f4ee:	b29b      	uxth	r3, r3
		sum += tmp;
   1f4f0:	4418      	add	r0, r3
   1f4f2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1f4f4:	4283      	cmp	r3, r0
   1f4f6:	d9f3      	bls.n	1f4e0 <calc_chksum+0x8>
			sum++;
   1f4f8:	3001      	adds	r0, #1
   1f4fa:	b280      	uxth	r0, r0
   1f4fc:	e7f0      	b.n	1f4e0 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1f4fe:	d001      	beq.n	1f504 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1f500:	bc10      	pop	{r4}
   1f502:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1f504:	780b      	ldrb	r3, [r1, #0]
   1f506:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1f508:	4418      	add	r0, r3
   1f50a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1f50c:	4283      	cmp	r3, r0
   1f50e:	d9f7      	bls.n	1f500 <calc_chksum+0x28>
			sum++;
   1f510:	3001      	adds	r0, #1
   1f512:	b280      	uxth	r0, r0
   1f514:	e7f4      	b.n	1f500 <calc_chksum+0x28>

0001f516 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1f516:	b530      	push	{r4, r5, lr}
   1f518:	b083      	sub	sp, #12
   1f51a:	4604      	mov	r4, r0
   1f51c:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1f51e:	220a      	movs	r2, #10
   1f520:	a901      	add	r1, sp, #4
   1f522:	f00d fbbd 	bl	2cca0 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1f526:	9b01      	ldr	r3, [sp, #4]
   1f528:	429c      	cmp	r4, r3
   1f52a:	d008      	beq.n	1f53e <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1f52c:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1f52e:	b16a      	cbz	r2, 1f54c <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1f530:	781b      	ldrb	r3, [r3, #0]
   1f532:	b973      	cbnz	r3, 1f552 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1f534:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1f536:	4298      	cmp	r0, r3
   1f538:	d005      	beq.n	1f546 <convert_port+0x30>
		return false;
   1f53a:	2000      	movs	r0, #0
   1f53c:	e007      	b.n	1f54e <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1f53e:	2800      	cmp	r0, #0
   1f540:	d1f4      	bne.n	1f52c <convert_port+0x16>
		return false;
   1f542:	2000      	movs	r0, #0
   1f544:	e003      	b.n	1f54e <convert_port+0x38>
	}

	*port = tmp;
   1f546:	802b      	strh	r3, [r5, #0]

	return true;
   1f548:	2001      	movs	r0, #1
   1f54a:	e000      	b.n	1f54e <convert_port+0x38>
		return false;
   1f54c:	2000      	movs	r0, #0
}
   1f54e:	b003      	add	sp, #12
   1f550:	bd30      	pop	{r4, r5, pc}
		return false;
   1f552:	2000      	movs	r0, #0
   1f554:	e7fb      	b.n	1f54e <convert_port+0x38>

0001f556 <net_byte_to_hex>:
{
   1f556:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1f558:	090c      	lsrs	r4, r1, #4
   1f55a:	2500      	movs	r5, #0
   1f55c:	e00a      	b.n	1f574 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1f55e:	b96b      	cbnz	r3, 1f57c <net_byte_to_hex+0x26>
   1f560:	b12c      	cbz	r4, 1f56e <net_byte_to_hex+0x18>
   1f562:	e00b      	b.n	1f57c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1f564:	4414      	add	r4, r2
   1f566:	b2e4      	uxtb	r4, r4
   1f568:	3c0a      	subs	r4, #10
   1f56a:	7004      	strb	r4, [r0, #0]
   1f56c:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1f56e:	3501      	adds	r5, #1
   1f570:	f001 040f 	and.w	r4, r1, #15
   1f574:	2d01      	cmp	r5, #1
   1f576:	dc07      	bgt.n	1f588 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1f578:	2d00      	cmp	r5, #0
   1f57a:	d0f0      	beq.n	1f55e <net_byte_to_hex+0x8>
		if (val < 10) {
   1f57c:	2c09      	cmp	r4, #9
   1f57e:	dcf1      	bgt.n	1f564 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1f580:	3430      	adds	r4, #48	; 0x30
   1f582:	7004      	strb	r4, [r0, #0]
   1f584:	3001      	adds	r0, #1
   1f586:	e7f2      	b.n	1f56e <net_byte_to_hex+0x18>
	*ptr = '\0';
   1f588:	2300      	movs	r3, #0
   1f58a:	7003      	strb	r3, [r0, #0]
}
   1f58c:	bc30      	pop	{r4, r5}
   1f58e:	4770      	bx	lr

0001f590 <net_sprint_ll_addr_buf>:
{
   1f590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f594:	4607      	mov	r7, r0
   1f596:	460e      	mov	r6, r1
   1f598:	4690      	mov	r8, r2
	switch (ll_len) {
   1f59a:	2906      	cmp	r1, #6
   1f59c:	d002      	beq.n	1f5a4 <net_sprint_ll_addr_buf+0x14>
   1f59e:	2908      	cmp	r1, #8
   1f5a0:	d000      	beq.n	1f5a4 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1f5a2:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1f5a4:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1f5a6:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1f5a8:	2400      	movs	r4, #0
   1f5aa:	e00c      	b.n	1f5c6 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1f5ac:	2301      	movs	r3, #1
   1f5ae:	2241      	movs	r2, #65	; 0x41
   1f5b0:	5d39      	ldrb	r1, [r7, r4]
   1f5b2:	f7ff ffd0 	bl	1f556 <net_byte_to_hex>
   1f5b6:	4602      	mov	r2, r0
		*ptr++ = ':';
   1f5b8:	3001      	adds	r0, #1
   1f5ba:	233a      	movs	r3, #58	; 0x3a
   1f5bc:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1f5be:	3d03      	subs	r5, #3
   1f5c0:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1f5c2:	3401      	adds	r4, #1
   1f5c4:	b2e4      	uxtb	r4, r4
   1f5c6:	42b4      	cmp	r4, r6
   1f5c8:	d201      	bcs.n	1f5ce <net_sprint_ll_addr_buf+0x3e>
   1f5ca:	2d00      	cmp	r5, #0
   1f5cc:	d1ee      	bne.n	1f5ac <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1f5ce:	4540      	cmp	r0, r8
   1f5d0:	d005      	beq.n	1f5de <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1f5d2:	2300      	movs	r3, #0
   1f5d4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1f5d8:	4640      	mov	r0, r8
   1f5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1f5de:	2000      	movs	r0, #0
}
   1f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f5e4 <net_addr_ntop>:
{
   1f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5e8:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1f5ea:	2300      	movs	r3, #0
   1f5ec:	9304      	str	r3, [sp, #16]
   1f5ee:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1f5f0:	280a      	cmp	r0, #10
   1f5f2:	d011      	beq.n	1f618 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1f5f4:	2802      	cmp	r0, #2
   1f5f6:	f040 80c8 	bne.w	1f78a <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1f5fa:	9101      	str	r1, [sp, #4]
		len = 4;
   1f5fc:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1f600:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1f604:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1f608:	f04f 0a01 	mov.w	sl, #1
   1f60c:	9202      	str	r2, [sp, #8]
   1f60e:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1f610:	4616      	mov	r6, r2
	bool needcolon = false;
   1f612:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1f614:	462c      	mov	r4, r5
   1f616:	e072      	b.n	1f6fe <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1f618:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1f61a:	461d      	mov	r5, r3
   1f61c:	e001      	b.n	1f622 <net_addr_ntop+0x3e>
   1f61e:	3501      	adds	r5, #1
   1f620:	b2ed      	uxtb	r5, r5
   1f622:	2d07      	cmp	r5, #7
   1f624:	d810      	bhi.n	1f648 <net_addr_ntop+0x64>
   1f626:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1f628:	2b07      	cmp	r3, #7
   1f62a:	d8f8      	bhi.n	1f61e <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1f62c:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1f630:	2900      	cmp	r1, #0
   1f632:	d1f4      	bne.n	1f61e <net_addr_ntop+0x3a>
				zeros[i]++;
   1f634:	a906      	add	r1, sp, #24
   1f636:	194c      	adds	r4, r1, r5
   1f638:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1f63c:	3101      	adds	r1, #1
   1f63e:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1f642:	3301      	adds	r3, #1
   1f644:	b2db      	uxtb	r3, r3
   1f646:	e7ef      	b.n	1f628 <net_addr_ntop+0x44>
   1f648:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1f64c:	f04f 0a01 	mov.w	sl, #1
   1f650:	2300      	movs	r3, #0
   1f652:	e001      	b.n	1f658 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1f654:	3301      	adds	r3, #1
   1f656:	b2db      	uxtb	r3, r3
   1f658:	2b07      	cmp	r3, #7
   1f65a:	d809      	bhi.n	1f670 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1f65c:	a906      	add	r1, sp, #24
   1f65e:	4419      	add	r1, r3
   1f660:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1f664:	458a      	cmp	sl, r1
   1f666:	d2f5      	bcs.n	1f654 <net_addr_ntop+0x70>
				pos = i;
   1f668:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1f66c:	468a      	mov	sl, r1
   1f66e:	e7f1      	b.n	1f654 <net_addr_ntop+0x70>
		if (longest == 1) {
   1f670:	f1ba 0f01 	cmp.w	sl, #1
   1f674:	d004      	beq.n	1f680 <net_addr_ntop+0x9c>
		len = 8;
   1f676:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1f67a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1f67e:	e7c5      	b.n	1f60c <net_addr_ntop+0x28>
		len = 8;
   1f680:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1f684:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1f688:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1f68c:	e7be      	b.n	1f60c <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1f68e:	9a01      	ldr	r2, [sp, #4]
   1f690:	5cd1      	ldrb	r1, [r2, r3]
   1f692:	b28b      	uxth	r3, r1
			if (value == 0) {
   1f694:	b93b      	cbnz	r3, 1f6a6 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1f696:	4633      	mov	r3, r6
   1f698:	2230      	movs	r2, #48	; 0x30
   1f69a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1f69e:	f886 b001 	strb.w	fp, [r6, #1]
   1f6a2:	461e      	mov	r6, r3
				continue;
   1f6a4:	e029      	b.n	1f6fa <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1f6a6:	2200      	movs	r2, #0
   1f6a8:	4630      	mov	r0, r6
   1f6aa:	f7ff feef 	bl	1f48c <net_value_to_udec>
			ptr += l;
   1f6ae:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1f6b2:	1c46      	adds	r6, r0, #1
   1f6b4:	f880 b000 	strb.w	fp, [r0]
			continue;
   1f6b8:	e01f      	b.n	1f6fa <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1f6ba:	b905      	cbnz	r5, 1f6be <net_addr_ntop+0xda>
   1f6bc:	b95c      	cbnz	r4, 1f6d6 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1f6be:	1c73      	adds	r3, r6, #1
   1f6c0:	223a      	movs	r2, #58	; 0x3a
   1f6c2:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1f6c4:	1c5e      	adds	r6, r3, #1
   1f6c6:	223a      	movs	r2, #58	; 0x3a
   1f6c8:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1f6ca:	4454      	add	r4, sl
   1f6cc:	b2e4      	uxtb	r4, r4
   1f6ce:	3c01      	subs	r4, #1
   1f6d0:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1f6d2:	2500      	movs	r5, #0
			continue;
   1f6d4:	e011      	b.n	1f6fa <net_addr_ntop+0x116>
   1f6d6:	4633      	mov	r3, r6
   1f6d8:	e7f4      	b.n	1f6c4 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1f6da:	2300      	movs	r3, #0
   1f6dc:	2261      	movs	r2, #97	; 0x61
   1f6de:	4630      	mov	r0, r6
   1f6e0:	f7ff ff39 	bl	1f556 <net_byte_to_hex>
   1f6e4:	e002      	b.n	1f6ec <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1f6e6:	1c70      	adds	r0, r6, #1
   1f6e8:	3157      	adds	r1, #87	; 0x57
   1f6ea:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1f6ec:	2301      	movs	r3, #1
   1f6ee:	2261      	movs	r2, #97	; 0x61
   1f6f0:	4629      	mov	r1, r5
   1f6f2:	f7ff ff30 	bl	1f556 <net_byte_to_hex>
   1f6f6:	4606      	mov	r6, r0
		needcolon = true;
   1f6f8:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1f6fa:	3401      	adds	r4, #1
   1f6fc:	b2e4      	uxtb	r4, r4
   1f6fe:	4623      	mov	r3, r4
   1f700:	45a0      	cmp	r8, r4
   1f702:	dd31      	ble.n	1f768 <net_addr_ntop+0x184>
		if (len == 4) {
   1f704:	f1b8 0f04 	cmp.w	r8, #4
   1f708:	d0c1      	beq.n	1f68e <net_addr_ntop+0xaa>
		if (i == pos) {
   1f70a:	454b      	cmp	r3, r9
   1f70c:	d0d5      	beq.n	1f6ba <net_addr_ntop+0xd6>
		if (needcolon) {
   1f70e:	b115      	cbz	r5, 1f716 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1f710:	233a      	movs	r3, #58	; 0x3a
   1f712:	7033      	strb	r3, [r6, #0]
   1f714:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1f716:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1f71a:	021d      	lsls	r5, r3, #8
   1f71c:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1f720:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1f722:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1f726:	b2ed      	uxtb	r5, r5
		if (bh) {
   1f728:	b139      	cbz	r1, 1f73a <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1f72a:	290f      	cmp	r1, #15
   1f72c:	d8d5      	bhi.n	1f6da <net_addr_ntop+0xf6>
				if (bh < 10) {
   1f72e:	2909      	cmp	r1, #9
   1f730:	d8d9      	bhi.n	1f6e6 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1f732:	1c70      	adds	r0, r6, #1
   1f734:	3130      	adds	r1, #48	; 0x30
   1f736:	7031      	strb	r1, [r6, #0]
   1f738:	e7d8      	b.n	1f6ec <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1f73a:	2d0f      	cmp	r5, #15
   1f73c:	d806      	bhi.n	1f74c <net_addr_ntop+0x168>
			if (bl < 10) {
   1f73e:	2d09      	cmp	r5, #9
   1f740:	d80d      	bhi.n	1f75e <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1f742:	3530      	adds	r5, #48	; 0x30
   1f744:	7035      	strb	r5, [r6, #0]
   1f746:	3601      	adds	r6, #1
		needcolon = true;
   1f748:	2501      	movs	r5, #1
   1f74a:	e7d6      	b.n	1f6fa <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1f74c:	2300      	movs	r3, #0
   1f74e:	2261      	movs	r2, #97	; 0x61
   1f750:	4629      	mov	r1, r5
   1f752:	4630      	mov	r0, r6
   1f754:	f7ff feff 	bl	1f556 <net_byte_to_hex>
   1f758:	4606      	mov	r6, r0
		needcolon = true;
   1f75a:	2501      	movs	r5, #1
   1f75c:	e7cd      	b.n	1f6fa <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1f75e:	3557      	adds	r5, #87	; 0x57
   1f760:	7035      	strb	r5, [r6, #0]
   1f762:	3601      	adds	r6, #1
		needcolon = true;
   1f764:	2501      	movs	r5, #1
   1f766:	e7c8      	b.n	1f6fa <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1f768:	9b02      	ldr	r3, [sp, #8]
   1f76a:	429e      	cmp	r6, r3
   1f76c:	d00f      	beq.n	1f78e <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1f76e:	9b03      	ldr	r3, [sp, #12]
   1f770:	2b02      	cmp	r3, #2
   1f772:	d005      	beq.n	1f780 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1f774:	2300      	movs	r3, #0
   1f776:	7033      	strb	r3, [r6, #0]
	return dst;
   1f778:	9802      	ldr	r0, [sp, #8]
}
   1f77a:	b007      	add	sp, #28
   1f77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1f780:	2300      	movs	r3, #0
   1f782:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1f786:	9802      	ldr	r0, [sp, #8]
   1f788:	e7f7      	b.n	1f77a <net_addr_ntop+0x196>
		return NULL;
   1f78a:	2000      	movs	r0, #0
   1f78c:	e7f5      	b.n	1f77a <net_addr_ntop+0x196>
		return NULL;
   1f78e:	2000      	movs	r0, #0
   1f790:	e7f3      	b.n	1f77a <net_addr_ntop+0x196>

0001f792 <net_addr_pton>:
{
   1f792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f796:	b082      	sub	sp, #8
   1f798:	460d      	mov	r5, r1
   1f79a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1f79c:	2802      	cmp	r0, #2
   1f79e:	d010      	beq.n	1f7c2 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1f7a0:	280a      	cmp	r0, #10
   1f7a2:	f040 80c6 	bne.w	1f932 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1f7a6:	212e      	movs	r1, #46	; 0x2e
   1f7a8:	4628      	mov	r0, r5
   1f7aa:	f00c fd5f 	bl	2c26c <strchr>
   1f7ae:	b378      	cbz	r0, 1f810 <net_addr_pton+0x7e>
   1f7b0:	2706      	movs	r7, #6
		if (*src == ':') {
   1f7b2:	782b      	ldrb	r3, [r5, #0]
   1f7b4:	2b3a      	cmp	r3, #58	; 0x3a
   1f7b6:	d02d      	beq.n	1f814 <net_addr_pton+0x82>
		len = strlen(src);
   1f7b8:	4628      	mov	r0, r5
   1f7ba:	f7e0 ffa1 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1f7be:	2300      	movs	r3, #0
   1f7c0:	e02b      	b.n	1f81a <net_addr_pton+0x88>
		len = strlen(src);
   1f7c2:	4608      	mov	r0, r1
   1f7c4:	f7e0 ff9c 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	e000      	b.n	1f7ce <net_addr_pton+0x3c>
   1f7cc:	3301      	adds	r3, #1
   1f7ce:	4283      	cmp	r3, r0
   1f7d0:	d20a      	bcs.n	1f7e8 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1f7d2:	5ce9      	ldrb	r1, [r5, r3]
   1f7d4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1f7d8:	b2d2      	uxtb	r2, r2
   1f7da:	2a09      	cmp	r2, #9
   1f7dc:	d9f6      	bls.n	1f7cc <net_addr_pton+0x3a>
   1f7de:	292e      	cmp	r1, #46	; 0x2e
   1f7e0:	d0f4      	beq.n	1f7cc <net_addr_pton+0x3a>
				return -EINVAL;
   1f7e2:	f06f 0015 	mvn.w	r0, #21
   1f7e6:	e0a9      	b.n	1f93c <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1f7e8:	2204      	movs	r2, #4
   1f7ea:	2100      	movs	r1, #0
   1f7ec:	4630      	mov	r0, r6
   1f7ee:	f00c fc45 	bl	2c07c <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1f7f2:	2400      	movs	r4, #0
   1f7f4:	e008      	b.n	1f808 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1f7f6:	220a      	movs	r2, #10
   1f7f8:	a901      	add	r1, sp, #4
   1f7fa:	4628      	mov	r0, r5
   1f7fc:	f00d f996 	bl	2cb2c <strtol>
   1f800:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1f802:	3401      	adds	r4, #1
			src = ++endptr;
   1f804:	9d01      	ldr	r5, [sp, #4]
   1f806:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1f808:	2c03      	cmp	r4, #3
   1f80a:	d9f4      	bls.n	1f7f6 <net_addr_pton+0x64>
	return 0;
   1f80c:	2000      	movs	r0, #0
   1f80e:	e095      	b.n	1f93c <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1f810:	2708      	movs	r7, #8
   1f812:	e7ce      	b.n	1f7b2 <net_addr_pton+0x20>
			src++;
   1f814:	3501      	adds	r5, #1
   1f816:	e7cf      	b.n	1f7b8 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1f818:	3301      	adds	r3, #1
   1f81a:	4283      	cmp	r3, r0
   1f81c:	da16      	bge.n	1f84c <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1f81e:	5ce9      	ldrb	r1, [r5, r3]
   1f820:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1f824:	b2d2      	uxtb	r2, r2
   1f826:	2a09      	cmp	r2, #9
   1f828:	d9f6      	bls.n	1f818 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1f82a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1f82e:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1f830:	2a05      	cmp	r2, #5
   1f832:	d9f1      	bls.n	1f818 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1f834:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1f838:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1f83a:	2a05      	cmp	r2, #5
   1f83c:	d9ec      	bls.n	1f818 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1f83e:	292e      	cmp	r1, #46	; 0x2e
   1f840:	d0ea      	beq.n	1f818 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1f842:	293a      	cmp	r1, #58	; 0x3a
   1f844:	d0e8      	beq.n	1f818 <net_addr_pton+0x86>
				return -EINVAL;
   1f846:	f06f 0015 	mvn.w	r0, #21
   1f84a:	e077      	b.n	1f93c <net_addr_pton+0x1aa>
   1f84c:	2400      	movs	r4, #0
   1f84e:	e001      	b.n	1f854 <net_addr_pton+0xc2>
				src++;
   1f850:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1f852:	3401      	adds	r4, #1
   1f854:	42bc      	cmp	r4, r7
   1f856:	da3c      	bge.n	1f8d2 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1f858:	2d00      	cmp	r5, #0
   1f85a:	d06d      	beq.n	1f938 <net_addr_pton+0x1a6>
   1f85c:	782b      	ldrb	r3, [r5, #0]
   1f85e:	2b00      	cmp	r3, #0
   1f860:	d06f      	beq.n	1f942 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1f862:	2b3a      	cmp	r3, #58	; 0x3a
   1f864:	d023      	beq.n	1f8ae <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1f866:	2210      	movs	r2, #16
   1f868:	2100      	movs	r1, #0
   1f86a:	4628      	mov	r0, r5
   1f86c:	f00d f95e 	bl	2cb2c <strtol>
   1f870:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1f874:	2210      	movs	r2, #16
   1f876:	2100      	movs	r1, #0
   1f878:	4628      	mov	r0, r5
   1f87a:	f00d f957 	bl	2cb2c <strtol>
   1f87e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1f882:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1f886:	213a      	movs	r1, #58	; 0x3a
   1f888:	4628      	mov	r0, r5
   1f88a:	f00c fcef 	bl	2c26c <strchr>
				if (!src && i < expected_groups - 1) {
   1f88e:	4605      	mov	r5, r0
   1f890:	2800      	cmp	r0, #0
   1f892:	d1dd      	bne.n	1f850 <net_addr_pton+0xbe>
   1f894:	1e7b      	subs	r3, r7, #1
   1f896:	429c      	cmp	r4, r3
   1f898:	dada      	bge.n	1f850 <net_addr_pton+0xbe>
					return -EINVAL;
   1f89a:	f06f 0015 	mvn.w	r0, #21
   1f89e:	e04d      	b.n	1f93c <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1f8a0:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1f8a4:	2300      	movs	r3, #0
   1f8a6:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1f8aa:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1f8ac:	3401      	adds	r4, #1
   1f8ae:	42bc      	cmp	r4, r7
   1f8b0:	dbf6      	blt.n	1f8a0 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1f8b2:	213a      	movs	r1, #58	; 0x3a
   1f8b4:	4628      	mov	r0, r5
   1f8b6:	f00c fe2f 	bl	2c518 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1f8ba:	4285      	cmp	r5, r0
   1f8bc:	d003      	beq.n	1f8c6 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1f8be:	2f06      	cmp	r7, #6
   1f8c0:	d00b      	beq.n	1f8da <net_addr_pton+0x148>
			i = expected_groups - 1;
   1f8c2:	1e7c      	subs	r4, r7, #1
   1f8c4:	e00f      	b.n	1f8e6 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1f8c6:	2f06      	cmp	r7, #6
   1f8c8:	d002      	beq.n	1f8d0 <net_addr_pton+0x13e>
   1f8ca:	786b      	ldrb	r3, [r5, #1]
   1f8cc:	2b00      	cmp	r3, #0
   1f8ce:	d1f6      	bne.n	1f8be <net_addr_pton+0x12c>
				src++;
   1f8d0:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1f8d2:	2f06      	cmp	r7, #6
   1f8d4:	d029      	beq.n	1f92a <net_addr_pton+0x198>
	return 0;
   1f8d6:	2000      	movs	r0, #0
   1f8d8:	e030      	b.n	1f93c <net_addr_pton+0x1aa>
				tmp--;
   1f8da:	3801      	subs	r0, #1
   1f8dc:	e7f1      	b.n	1f8c2 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1f8de:	1e43      	subs	r3, r0, #1
   1f8e0:	4285      	cmp	r5, r0
   1f8e2:	d005      	beq.n	1f8f0 <net_addr_pton+0x15e>
   1f8e4:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1f8e6:	7803      	ldrb	r3, [r0, #0]
   1f8e8:	2b3a      	cmp	r3, #58	; 0x3a
   1f8ea:	d1f8      	bne.n	1f8de <net_addr_pton+0x14c>
					i--;
   1f8ec:	3c01      	subs	r4, #1
   1f8ee:	e7f6      	b.n	1f8de <net_addr_pton+0x14c>
			src++;
   1f8f0:	3501      	adds	r5, #1
   1f8f2:	e7ae      	b.n	1f852 <net_addr_pton+0xc0>
				src++;
   1f8f4:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1f8f6:	3401      	adds	r4, #1
   1f8f8:	2c03      	cmp	r4, #3
   1f8fa:	dc18      	bgt.n	1f92e <net_addr_pton+0x19c>
				if (!src || !*src) {
   1f8fc:	b325      	cbz	r5, 1f948 <net_addr_pton+0x1b6>
   1f8fe:	782b      	ldrb	r3, [r5, #0]
   1f900:	b32b      	cbz	r3, 1f94e <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1f902:	f104 070c 	add.w	r7, r4, #12
   1f906:	220a      	movs	r2, #10
   1f908:	2100      	movs	r1, #0
   1f90a:	4628      	mov	r0, r5
   1f90c:	f00d f90e 	bl	2cb2c <strtol>
   1f910:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1f912:	212e      	movs	r1, #46	; 0x2e
   1f914:	4628      	mov	r0, r5
   1f916:	f00c fca9 	bl	2c26c <strchr>
				if (!src && i < 3) {
   1f91a:	4605      	mov	r5, r0
   1f91c:	2800      	cmp	r0, #0
   1f91e:	d1e9      	bne.n	1f8f4 <net_addr_pton+0x162>
   1f920:	2c02      	cmp	r4, #2
   1f922:	dce7      	bgt.n	1f8f4 <net_addr_pton+0x162>
					return -EINVAL;
   1f924:	f06f 0015 	mvn.w	r0, #21
   1f928:	e008      	b.n	1f93c <net_addr_pton+0x1aa>
   1f92a:	2400      	movs	r4, #0
   1f92c:	e7e4      	b.n	1f8f8 <net_addr_pton+0x166>
	return 0;
   1f92e:	2000      	movs	r0, #0
   1f930:	e004      	b.n	1f93c <net_addr_pton+0x1aa>
		return -EINVAL;
   1f932:	f06f 0015 	mvn.w	r0, #21
   1f936:	e001      	b.n	1f93c <net_addr_pton+0x1aa>
				return -EINVAL;
   1f938:	f06f 0015 	mvn.w	r0, #21
}
   1f93c:	b002      	add	sp, #8
   1f93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1f942:	f06f 0015 	mvn.w	r0, #21
   1f946:	e7f9      	b.n	1f93c <net_addr_pton+0x1aa>
					return -EINVAL;
   1f948:	f06f 0015 	mvn.w	r0, #21
   1f94c:	e7f6      	b.n	1f93c <net_addr_pton+0x1aa>
   1f94e:	f06f 0015 	mvn.w	r0, #21
   1f952:	e7f3      	b.n	1f93c <net_addr_pton+0x1aa>

0001f954 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1f954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f958:	b08f      	sub	sp, #60	; 0x3c
   1f95a:	4605      	mov	r5, r0
   1f95c:	4688      	mov	r8, r1
   1f95e:	4617      	mov	r7, r2
   1f960:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1f962:	460c      	mov	r4, r1
   1f964:	292e      	cmp	r1, #46	; 0x2e
   1f966:	bf28      	it	cs
   1f968:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1f96a:	2300      	movs	r3, #0
   1f96c:	42a3      	cmp	r3, r4
   1f96e:	da04      	bge.n	1f97a <parse_ipv6+0x26>
		if (!str[i]) {
   1f970:	5cea      	ldrb	r2, [r5, r3]
   1f972:	b10a      	cbz	r2, 1f978 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1f974:	3301      	adds	r3, #1
   1f976:	e7f9      	b.n	1f96c <parse_ipv6+0x18>
			len = i;
   1f978:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1f97a:	b18e      	cbz	r6, 1f9a0 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1f97c:	4622      	mov	r2, r4
   1f97e:	215d      	movs	r1, #93	; 0x5d
   1f980:	4628      	mov	r0, r5
   1f982:	f7e0 fc4d 	bl	220 <memchr>
		if (!ptr) {
   1f986:	4681      	mov	r9, r0
   1f988:	2800      	cmp	r0, #0
   1f98a:	d043      	beq.n	1fa14 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1f98c:	1c69      	adds	r1, r5, #1
   1f98e:	1a43      	subs	r3, r0, r1
   1f990:	429c      	cmp	r4, r3
   1f992:	bfa8      	it	ge
   1f994:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1f996:	4622      	mov	r2, r4
   1f998:	a802      	add	r0, sp, #8
   1f99a:	f7e0 fc91 	bl	2c0 <memcpy>
   1f99e:	e006      	b.n	1f9ae <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1f9a0:	4622      	mov	r2, r4
   1f9a2:	4629      	mov	r1, r5
   1f9a4:	a802      	add	r0, sp, #8
   1f9a6:	f7e0 fc8b 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1f9aa:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1f9ae:	2200      	movs	r2, #0
   1f9b0:	ab0e      	add	r3, sp, #56	; 0x38
   1f9b2:	4423      	add	r3, r4
   1f9b4:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1f9b8:	1d3a      	adds	r2, r7, #4
   1f9ba:	a902      	add	r1, sp, #8
   1f9bc:	200a      	movs	r0, #10
   1f9be:	f7ff fee8 	bl	1f792 <net_addr_pton>
	if (ret < 0) {
   1f9c2:	2800      	cmp	r0, #0
   1f9c4:	db28      	blt.n	1fa18 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1f9c6:	230a      	movs	r3, #10
   1f9c8:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1f9ca:	b33e      	cbz	r6, 1fa1c <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1f9cc:	f109 0301 	add.w	r3, r9, #1
   1f9d0:	4445      	add	r5, r8
   1f9d2:	42ab      	cmp	r3, r5
   1f9d4:	d223      	bcs.n	1fa1e <parse_ipv6+0xca>
   1f9d6:	f899 3001 	ldrb.w	r3, [r9, #1]
   1f9da:	2b3a      	cmp	r3, #58	; 0x3a
   1f9dc:	d11f      	bne.n	1fa1e <parse_ipv6+0xca>
		len = str_len - end;
   1f9de:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1f9e2:	4622      	mov	r2, r4
   1f9e4:	f109 0102 	add.w	r1, r9, #2
   1f9e8:	a802      	add	r0, sp, #8
   1f9ea:	f7e0 fc69 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1f9ee:	ab0e      	add	r3, sp, #56	; 0x38
   1f9f0:	441c      	add	r4, r3
   1f9f2:	2300      	movs	r3, #0
   1f9f4:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1f9f8:	f10d 0106 	add.w	r1, sp, #6
   1f9fc:	a802      	add	r0, sp, #8
   1f9fe:	f7ff fd8a 	bl	1f516 <convert_port>
		if (!ret) {
   1fa02:	4606      	mov	r6, r0
   1fa04:	b158      	cbz	r0, 1fa1e <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1fa06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1fa0a:	0a13      	lsrs	r3, r2, #8
   1fa0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa10:	807b      	strh	r3, [r7, #2]
   1fa12:	e004      	b.n	1fa1e <parse_ipv6+0xca>
			return false;
   1fa14:	2600      	movs	r6, #0
   1fa16:	e002      	b.n	1fa1e <parse_ipv6+0xca>
		return false;
   1fa18:	2600      	movs	r6, #0
   1fa1a:	e000      	b.n	1fa1e <parse_ipv6+0xca>
		return true;
   1fa1c:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1fa1e:	4630      	mov	r0, r6
   1fa20:	b00f      	add	sp, #60	; 0x3c
   1fa22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001fa26 <net_calc_chksum>:
	return pkt->family;
   1fa26:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1fa2a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1fa2e:	2b0a      	cmp	r3, #10
   1fa30:	d001      	beq.n	1fa36 <net_calc_chksum+0x10>
		return 0;
   1fa32:	2000      	movs	r0, #0
   1fa34:	4770      	bx	lr
{
   1fa36:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa38:	b085      	sub	sp, #20
   1fa3a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1fa3c:	6885      	ldr	r5, [r0, #8]
   1fa3e:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1fa40:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1fa42:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1fa44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1fa48:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1fa4a:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1fa4e:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1fa50:	fa11 f383 	uxtah	r3, r1, r3
   1fa54:	2220      	movs	r2, #32
   1fa56:	f100 0108 	add.w	r1, r0, #8
   1fa5a:	b298      	uxth	r0, r3
   1fa5c:	f7ff fd3c 	bl	1f4d8 <calc_chksum>
   1fa60:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1fa62:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1fa66:	2300      	movs	r3, #0
   1fa68:	9300      	str	r3, [sp, #0]
   1fa6a:	f10d 020e 	add.w	r2, sp, #14
   1fa6e:	4439      	add	r1, r7
   1fa70:	4628      	mov	r0, r5
   1fa72:	f7ff faec 	bl	1f04e <net_frag_read>
	if (!frag) {
   1fa76:	4605      	mov	r5, r0
   1fa78:	b318      	cbz	r0, 1fac2 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1fa7a:	6881      	ldr	r1, [r0, #8]
   1fa7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1fa80:	4419      	add	r1, r3
	len = frag->len - offset;
   1fa82:	8984      	ldrh	r4, [r0, #12]
   1fa84:	1ae4      	subs	r4, r4, r3
   1fa86:	b224      	sxth	r4, r4
   1fa88:	e003      	b.n	1fa92 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1fa8a:	89ac      	ldrh	r4, [r5, #12]
   1fa8c:	3c01      	subs	r4, #1
   1fa8e:	b224      	sxth	r4, r4
			ptr++;
   1fa90:	3101      	adds	r1, #1
	while (frag) {
   1fa92:	b1bd      	cbz	r5, 1fac4 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1fa94:	b2a4      	uxth	r4, r4
   1fa96:	4622      	mov	r2, r4
   1fa98:	4630      	mov	r0, r6
   1fa9a:	f7ff fd1d 	bl	1f4d8 <calc_chksum>
   1fa9e:	4606      	mov	r6, r0
		frag = frag->frags;
   1faa0:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1faa2:	b17d      	cbz	r5, 1fac4 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1faa4:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1faa6:	f014 0f01 	tst.w	r4, #1
   1faaa:	d007      	beq.n	1fabc <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1faac:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1faae:	441e      	add	r6, r3
   1fab0:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1fab2:	42b3      	cmp	r3, r6
   1fab4:	d9e9      	bls.n	1fa8a <net_calc_chksum+0x64>
				sum++;
   1fab6:	3601      	adds	r6, #1
   1fab8:	b2b6      	uxth	r6, r6
   1faba:	e7e6      	b.n	1fa8a <net_calc_chksum+0x64>
			len = frag->len;
   1fabc:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1fac0:	e7e7      	b.n	1fa92 <net_calc_chksum+0x6c>
		return 0;
   1fac2:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1fac4:	b91e      	cbnz	r6, 1face <net_calc_chksum+0xa8>
   1fac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1faca:	b005      	add	sp, #20
   1facc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1face:	0a30      	lsrs	r0, r6, #8
   1fad0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1fad4:	b280      	uxth	r0, r0
   1fad6:	e7f8      	b.n	1faca <net_calc_chksum+0xa4>

0001fad8 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1fad8:	460b      	mov	r3, r1
   1fada:	b151      	cbz	r1, 1faf2 <net_header_fits+0x1a>
   1fadc:	6880      	ldr	r0, [r0, #8]
   1fade:	6881      	ldr	r1, [r0, #8]
   1fae0:	428b      	cmp	r3, r1
   1fae2:	d908      	bls.n	1faf6 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1fae4:	4413      	add	r3, r2
   1fae6:	8982      	ldrh	r2, [r0, #12]
   1fae8:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1faea:	428b      	cmp	r3, r1
   1faec:	d905      	bls.n	1fafa <net_header_fits+0x22>
	return false;
   1faee:	2000      	movs	r0, #0
   1faf0:	4770      	bx	lr
   1faf2:	2000      	movs	r0, #0
   1faf4:	4770      	bx	lr
   1faf6:	2000      	movs	r0, #0
   1faf8:	4770      	bx	lr
		return true;
   1fafa:	2001      	movs	r0, #1
}
   1fafc:	4770      	bx	lr

0001fafe <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1fafe:	b1d8      	cbz	r0, 1fb38 <net_ipaddr_parse+0x3a>
{
   1fb00:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1fb02:	b1d9      	cbz	r1, 1fb3c <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1fb04:	7804      	ldrb	r4, [r0, #0]
   1fb06:	b1dc      	cbz	r4, 1fb40 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1fb08:	2c5b      	cmp	r4, #91	; 0x5b
   1fb0a:	d002      	beq.n	1fb12 <net_ipaddr_parse+0x14>
   1fb0c:	2500      	movs	r5, #0
   1fb0e:	462b      	mov	r3, r5
   1fb10:	e004      	b.n	1fb1c <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1fb12:	2301      	movs	r3, #1
   1fb14:	f7ff ff1e 	bl	1f954 <parse_ipv6>
   1fb18:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1fb1a:	3301      	adds	r3, #1
   1fb1c:	5cc4      	ldrb	r4, [r0, r3]
   1fb1e:	b12c      	cbz	r4, 1fb2c <net_ipaddr_parse+0x2e>
   1fb20:	4299      	cmp	r1, r3
   1fb22:	d903      	bls.n	1fb2c <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1fb24:	2c3a      	cmp	r4, #58	; 0x3a
   1fb26:	d1f8      	bne.n	1fb1a <net_ipaddr_parse+0x1c>
			count++;
   1fb28:	3501      	adds	r5, #1
   1fb2a:	e7f6      	b.n	1fb1a <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1fb2c:	2d01      	cmp	r5, #1
   1fb2e:	d009      	beq.n	1fb44 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1fb30:	2300      	movs	r3, #0
   1fb32:	f7ff ff0f 	bl	1f954 <parse_ipv6>
   1fb36:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fb38:	2000      	movs	r0, #0
   1fb3a:	4770      	bx	lr
   1fb3c:	2000      	movs	r0, #0
   1fb3e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fb40:	2000      	movs	r0, #0
   1fb42:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fb44:	2000      	movs	r0, #0
#endif
}
   1fb46:	bd38      	pop	{r3, r4, r5, pc}

0001fb48 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1fb48:	2000      	movs	r0, #0
   1fb4a:	4770      	bx	lr

0001fb4c <net_bt_enable>:
	return iface->dev;
   1fb4c:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1fb4e:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1fb50:	b129      	cbz	r1, 1fb5e <net_bt_enable+0x12>
   1fb52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1fb56:	2b03      	cmp	r3, #3
   1fb58:	d103      	bne.n	1fb62 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1fb5a:	2000      	movs	r0, #0
   1fb5c:	4770      	bx	lr
   1fb5e:	2000      	movs	r0, #0
   1fb60:	4770      	bx	lr
		return -ENETDOWN;
   1fb62:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1fb66:	4770      	bx	lr

0001fb68 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1fb68:	4b04      	ldr	r3, [pc, #16]	; (1fb7c <ipsp_accept+0x14>)
   1fb6a:	685b      	ldr	r3, [r3, #4]
   1fb6c:	b91b      	cbnz	r3, 1fb76 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1fb6e:	4b04      	ldr	r3, [pc, #16]	; (1fb80 <ipsp_accept+0x18>)
   1fb70:	600b      	str	r3, [r1, #0]

	return 0;
   1fb72:	2000      	movs	r0, #0
   1fb74:	4770      	bx	lr
		return -ENOMEM;
   1fb76:	f06f 000b 	mvn.w	r0, #11
}
   1fb7a:	4770      	bx	lr
   1fb7c:	2000bdd0 	.word	0x2000bdd0
   1fb80:	2000bdd4 	.word	0x2000bdd4

0001fb84 <net_bt_send>:
{
   1fb84:	b538      	push	{r3, r4, r5, lr}
   1fb86:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1fb88:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1fb8a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1fb8e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1fb92:	2b0a      	cmp	r3, #10
   1fb94:	d001      	beq.n	1fb9a <net_bt_send+0x16>
		return NET_DROP;
   1fb96:	2002      	movs	r0, #2
   1fb98:	bd38      	pop	{r3, r4, r5, pc}
   1fb9a:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1fb9c:	2200      	movs	r2, #0
   1fb9e:	2101      	movs	r1, #1
   1fba0:	4620      	mov	r0, r4
   1fba2:	f003 fe95 	bl	238d0 <net_6lo_compress>
   1fba6:	b908      	cbnz	r0, 1fbac <net_bt_send+0x28>
		return NET_DROP;
   1fba8:	2002      	movs	r0, #2
}
   1fbaa:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1fbac:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1fbae:	4621      	mov	r1, r4
   1fbb0:	3018      	adds	r0, #24
   1fbb2:	f00a fc19 	bl	2a3e8 <k_queue_append>
	return NET_OK;
   1fbb6:	2000      	movs	r0, #0
   1fbb8:	bd38      	pop	{r3, r4, r5, pc}

0001fbba <net_bt_recv>:
{
   1fbba:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1fbbc:	4608      	mov	r0, r1
   1fbbe:	f004 fad4 	bl	2416a <net_6lo_uncompress>
   1fbc2:	b908      	cbnz	r0, 1fbc8 <net_bt_recv+0xe>
		return NET_DROP;
   1fbc4:	2002      	movs	r0, #2
   1fbc6:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1fbc8:	2001      	movs	r0, #1
}
   1fbca:	bd08      	pop	{r3, pc}

0001fbcc <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1fbcc:	b951      	cbnz	r1, 1fbe4 <connected+0x18>
{
   1fbce:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1fbd0:	4b05      	ldr	r3, [pc, #20]	; (1fbe8 <connected+0x1c>)
   1fbd2:	681b      	ldr	r3, [r3, #0]
   1fbd4:	4283      	cmp	r3, r0
   1fbd6:	d000      	beq.n	1fbda <connected+0xe>
   1fbd8:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1fbda:	2223      	movs	r2, #35	; 0x23
   1fbdc:	4903      	ldr	r1, [pc, #12]	; (1fbec <connected+0x20>)
   1fbde:	f7ea f905 	bl	9dec <bt_l2cap_chan_connect>
   1fbe2:	e7f9      	b.n	1fbd8 <connected+0xc>
   1fbe4:	4770      	bx	lr
   1fbe6:	bf00      	nop
   1fbe8:	20001f08 	.word	0x20001f08
   1fbec:	2000bdd4 	.word	0x2000bdd4

0001fbf0 <ipsp_recv>:
{
   1fbf0:	b570      	push	{r4, r5, r6, lr}
   1fbf2:	4605      	mov	r5, r0
   1fbf4:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1fbf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fbfa:	2000      	movs	r0, #0
   1fbfc:	f7ff f82e 	bl	1ec5c <net_pkt_get_reserve_rx>
   1fc00:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1fc02:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1fc06:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1fc08:	2206      	movs	r2, #6
   1fc0a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1fc0e:	2302      	movs	r3, #2
   1fc10:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1fc14:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1fc18:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1fc1a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1fc1e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1fc22:	4630      	mov	r0, r6
   1fc24:	f7fc fb42 	bl	1c2ac <net_buf_ref>
   1fc28:	4601      	mov	r1, r0
   1fc2a:	4620      	mov	r0, r4
   1fc2c:	f7ff f8bb 	bl	1eda6 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1fc30:	4621      	mov	r1, r4
   1fc32:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1fc36:	f7fc fd55 	bl	1c6e4 <net_recv_data>
   1fc3a:	2800      	cmp	r0, #0
   1fc3c:	db00      	blt.n	1fc40 <ipsp_recv+0x50>
   1fc3e:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1fc40:	4620      	mov	r0, r4
   1fc42:	f7ff f886 	bl	1ed52 <net_pkt_unref>
}
   1fc46:	e7fa      	b.n	1fc3e <ipsp_recv+0x4e>

0001fc48 <ipsp_alloc_buf>:
{
   1fc48:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1fc4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc4e:	2000      	movs	r0, #0
   1fc50:	f7ff f818 	bl	1ec84 <net_pkt_get_reserve_rx_data>
}
   1fc54:	bd08      	pop	{r3, pc}
	...

0001fc58 <ipsp_disconnected>:
{
   1fc58:	b510      	push	{r4, lr}
   1fc5a:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1fc5c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1fc60:	f7fd fe92 	bl	1d988 <net_if_down>
	if (chan->conn != default_conn) {
   1fc64:	6823      	ldr	r3, [r4, #0]
   1fc66:	4a05      	ldr	r2, [pc, #20]	; (1fc7c <ipsp_disconnected+0x24>)
   1fc68:	6810      	ldr	r0, [r2, #0]
   1fc6a:	4283      	cmp	r3, r0
   1fc6c:	d000      	beq.n	1fc70 <ipsp_disconnected+0x18>
   1fc6e:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1fc70:	f7e8 fe28 	bl	88c4 <bt_conn_unref>
	default_conn = NULL;
   1fc74:	2200      	movs	r2, #0
   1fc76:	4b01      	ldr	r3, [pc, #4]	; (1fc7c <ipsp_disconnected+0x24>)
   1fc78:	601a      	str	r2, [r3, #0]
   1fc7a:	e7f8      	b.n	1fc6e <ipsp_disconnected+0x16>
   1fc7c:	20001f08 	.word	0x20001f08

0001fc80 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1fc80:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1fc82:	4b06      	ldr	r3, [pc, #24]	; (1fc9c <disconnected+0x1c>)
   1fc84:	681b      	ldr	r3, [r3, #0]
   1fc86:	4283      	cmp	r3, r0
   1fc88:	d000      	beq.n	1fc8c <disconnected+0xc>
   1fc8a:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1fc8c:	4618      	mov	r0, r3
   1fc8e:	f7e8 fe19 	bl	88c4 <bt_conn_unref>
	default_conn = NULL;
   1fc92:	2200      	movs	r2, #0
   1fc94:	4b01      	ldr	r3, [pc, #4]	; (1fc9c <disconnected+0x1c>)
   1fc96:	601a      	str	r2, [r3, #0]
   1fc98:	e7f7      	b.n	1fc8a <disconnected+0xa>
   1fc9a:	bf00      	nop
   1fc9c:	20001f08 	.word	0x20001f08

0001fca0 <ipsp_connected>:
{
   1fca0:	b570      	push	{r4, r5, r6, lr}
   1fca2:	b08e      	sub	sp, #56	; 0x38
   1fca4:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1fca6:	a909      	add	r1, sp, #36	; 0x24
   1fca8:	6800      	ldr	r0, [r0, #0]
   1fcaa:	f7e8 ff41 	bl	8b30 <bt_conn_get_info>
   1fcae:	2800      	cmp	r0, #0
   1fcb0:	db06      	blt.n	1fcc0 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1fcb2:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1fcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1fcb8:	3306      	adds	r3, #6
   1fcba:	4631      	mov	r1, r6
   1fcbc:	2206      	movs	r2, #6
   1fcbe:	e008      	b.n	1fcd2 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	f7ea f8b2 	bl	9e2a <bt_l2cap_chan_disconnect>
   1fcc6:	e05a      	b.n	1fd7e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1fcc8:	7818      	ldrb	r0, [r3, #0]
   1fcca:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1fccc:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1fcce:	3b01      	subs	r3, #1
   1fcd0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1fcd2:	2a00      	cmp	r2, #0
   1fcd4:	d1f8      	bne.n	1fcc8 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1fcd6:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1fcda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1fcdc:	3306      	adds	r3, #6
   1fcde:	4608      	mov	r0, r1
   1fce0:	2206      	movs	r2, #6
   1fce2:	e004      	b.n	1fcee <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1fce4:	781d      	ldrb	r5, [r3, #0]
   1fce6:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1fce8:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1fcea:	3b01      	subs	r3, #1
   1fcec:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1fcee:	2a00      	cmp	r2, #0
   1fcf0:	d1f8      	bne.n	1fce4 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1fcf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fcf6:	f3bf 8f5b 	dmb	ish
   1fcfa:	68da      	ldr	r2, [r3, #12]
   1fcfc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1fd00:	f012 0f01 	tst.w	r2, #1
   1fd04:	d104      	bne.n	1fd10 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1fd06:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1fd08:	2206      	movs	r2, #6
   1fd0a:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1fd0c:	2202      	movs	r2, #2
   1fd0e:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1fd10:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1fd12:	2306      	movs	r3, #6
   1fd14:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1fd18:	2302      	movs	r3, #2
   1fd1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1fd1e:	23fe      	movs	r3, #254	; 0xfe
   1fd20:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1fd24:	2380      	movs	r3, #128	; 0x80
   1fd26:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1fd30:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1fd32:	2203      	movs	r2, #3
   1fd34:	a805      	add	r0, sp, #20
   1fd36:	f7e0 fac3 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1fd3a:	23ff      	movs	r3, #255	; 0xff
   1fd3c:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1fd40:	23fe      	movs	r3, #254	; 0xfe
   1fd42:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1fd46:	2203      	movs	r2, #3
   1fd48:	9907      	ldr	r1, [sp, #28]
   1fd4a:	4411      	add	r1, r2
   1fd4c:	f10d 0019 	add.w	r0, sp, #25
   1fd50:	f7e0 fab6 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1fd54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1fd58:	2b02      	cmp	r3, #2
   1fd5a:	d012      	beq.n	1fd82 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1fd5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1fd60:	2b03      	cmp	r3, #3
   1fd62:	d015      	beq.n	1fd90 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1fd64:	2305      	movs	r3, #5
   1fd66:	9300      	str	r3, [sp, #0]
   1fd68:	2300      	movs	r3, #0
   1fd6a:	aa07      	add	r2, sp, #28
   1fd6c:	a903      	add	r1, sp, #12
   1fd6e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1fd72:	f002 f903 	bl	21f7c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1fd76:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1fd7a:	f7fd fdd1 	bl	1d920 <net_if_up>
}
   1fd7e:	b00e      	add	sp, #56	; 0x38
   1fd80:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1fd82:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1fd86:	f083 0302 	eor.w	r3, r3, #2
   1fd8a:	f88d 3014 	strb.w	r3, [sp, #20]
   1fd8e:	e7e5      	b.n	1fd5c <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1fd90:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1fd94:	f083 0302 	eor.w	r3, r3, #2
   1fd98:	f88d 3014 	strb.w	r3, [sp, #20]
   1fd9c:	e7e2      	b.n	1fd64 <ipsp_connected+0xc4>
	...

0001fda0 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1fda0:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1fda2:	4804      	ldr	r0, [pc, #16]	; (1fdb4 <net_bt_init+0x14>)
   1fda4:	f7e8 fbb6 	bl	8514 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1fda8:	4803      	ldr	r0, [pc, #12]	; (1fdb8 <net_bt_init+0x18>)
   1fdaa:	f7e9 ffc5 	bl	9d38 <bt_l2cap_server_register>

	return 0;
}
   1fdae:	2000      	movs	r0, #0
   1fdb0:	bd08      	pop	{r3, pc}
   1fdb2:	bf00      	nop
   1fdb4:	2000be84 	.word	0x2000be84
   1fdb8:	2000beb4 	.word	0x2000beb4

0001fdbc <bt_iface_send>:
{
   1fdbc:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1fdbe:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1fdc0:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1fdc2:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1fdc4:	2300      	movs	r3, #0
   1fdc6:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1fdc8:	4608      	mov	r0, r1
   1fdca:	f7fe ffc2 	bl	1ed52 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1fdce:	4629      	mov	r1, r5
   1fdd0:	1d20      	adds	r0, r4, #4
   1fdd2:	f7ea f9bb 	bl	a14c <bt_l2cap_chan_send>
}
   1fdd6:	bd38      	pop	{r3, r4, r5, pc}

0001fdd8 <bt_iface_init>:
   1fdd8:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1fdda:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1fddc:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1fdde:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fde0:	f3bf 8f5b 	dmb	ish
   1fde4:	e850 3f00 	ldrex	r3, [r0]
   1fde8:	f043 0302 	orr.w	r3, r3, #2
   1fdec:	e840 3200 	strex	r2, r3, [r0]
   1fdf0:	2a00      	cmp	r2, #0
   1fdf2:	d1f7      	bne.n	1fde4 <bt_iface_init+0xc>
   1fdf4:	f3bf 8f5b 	dmb	ish
   1fdf8:	4770      	bx	lr
	...

0001fdfc <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1fdfc:	b510      	push	{r4, lr}
   1fdfe:	b086      	sub	sp, #24
   1fe00:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1fe02:	4913      	ldr	r1, [pc, #76]	; (1fe50 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1fe04:	4610      	mov	r0, r2
   1fe06:	f7e0 faff 	bl	408 <strcmp>
   1fe0a:	b140      	cbz	r0, 1fe1e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1fe0c:	4911      	ldr	r1, [pc, #68]	; (1fe54 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1fe0e:	4620      	mov	r0, r4
   1fe10:	f7e0 fafa 	bl	408 <strcmp>
   1fe14:	b9c0      	cbnz	r0, 1fe48 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1fe16:	f7e8 f879 	bl	7f0c <bt_le_adv_stop>
}
   1fe1a:	b006      	add	sp, #24
   1fe1c:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1fe1e:	2300      	movs	r3, #0
   1fe20:	9303      	str	r3, [sp, #12]
   1fe22:	9304      	str	r3, [sp, #16]
   1fe24:	9305      	str	r3, [sp, #20]
   1fe26:	2301      	movs	r3, #1
   1fe28:	f88d 300c 	strb.w	r3, [sp, #12]
   1fe2c:	22a0      	movs	r2, #160	; 0xa0
   1fe2e:	f8ad 200e 	strh.w	r2, [sp, #14]
   1fe32:	22f0      	movs	r2, #240	; 0xf0
   1fe34:	f8ad 2010 	strh.w	r2, [sp, #16]
   1fe38:	9300      	str	r3, [sp, #0]
   1fe3a:	4b07      	ldr	r3, [pc, #28]	; (1fe58 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1fe3c:	2202      	movs	r2, #2
   1fe3e:	4907      	ldr	r1, [pc, #28]	; (1fe5c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1fe40:	a803      	add	r0, sp, #12
   1fe42:	f7e7 ffb9 	bl	7db8 <bt_le_adv_start>
   1fe46:	e7e8      	b.n	1fe1a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1fe48:	f06f 0015 	mvn.w	r0, #21
   1fe4c:	e7e5      	b.n	1fe1a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1fe4e:	bf00      	nop
   1fe50:	000336d8 	.word	0x000336d8
   1fe54:	000336dc 	.word	0x000336dc
   1fe58:	000336e0 	.word	0x000336e0
   1fe5c:	000336c8 	.word	0x000336c8

0001fe60 <net_icmpv6_register_handler>:
	node->next = list->head;
   1fe60:	4b04      	ldr	r3, [pc, #16]	; (1fe74 <net_icmpv6_register_handler+0x14>)
   1fe62:	681a      	ldr	r2, [r3, #0]
   1fe64:	6002      	str	r2, [r0, #0]
	list->head = node;
   1fe66:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1fe68:	685b      	ldr	r3, [r3, #4]
   1fe6a:	b103      	cbz	r3, 1fe6e <net_icmpv6_register_handler+0xe>
   1fe6c:	4770      	bx	lr
		list->tail = list->head;
   1fe6e:	4b01      	ldr	r3, [pc, #4]	; (1fe74 <net_icmpv6_register_handler+0x14>)
   1fe70:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1fe72:	e7fb      	b.n	1fe6c <net_icmpv6_register_handler+0xc>
   1fe74:	20001f0c 	.word	0x20001f0c

0001fe78 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1fe78:	4601      	mov	r1, r0
	return list->head;
   1fe7a:	4b10      	ldr	r3, [pc, #64]	; (1febc <net_icmpv6_unregister_handler+0x44>)
   1fe7c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1fe7e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1fe80:	b1d3      	cbz	r3, 1feb8 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1fe82:	4299      	cmp	r1, r3
   1fe84:	d002      	beq.n	1fe8c <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1fe86:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1fe88:	681b      	ldr	r3, [r3, #0]
   1fe8a:	e7f9      	b.n	1fe80 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1fe8c:	b142      	cbz	r2, 1fea0 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1fe8e:	6803      	ldr	r3, [r0, #0]
   1fe90:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1fe92:	4b0a      	ldr	r3, [pc, #40]	; (1febc <net_icmpv6_unregister_handler+0x44>)
   1fe94:	685b      	ldr	r3, [r3, #4]
   1fe96:	4298      	cmp	r0, r3
   1fe98:	d00b      	beq.n	1feb2 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1fe9a:	2300      	movs	r3, #0
   1fe9c:	6003      	str	r3, [r0, #0]
   1fe9e:	4770      	bx	lr
		list->head = node->next;
   1fea0:	6802      	ldr	r2, [r0, #0]
   1fea2:	4b06      	ldr	r3, [pc, #24]	; (1febc <net_icmpv6_unregister_handler+0x44>)
   1fea4:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1fea6:	685b      	ldr	r3, [r3, #4]
   1fea8:	4298      	cmp	r0, r3
   1feaa:	d1f6      	bne.n	1fe9a <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1feac:	4b03      	ldr	r3, [pc, #12]	; (1febc <net_icmpv6_unregister_handler+0x44>)
   1feae:	605a      	str	r2, [r3, #4]
   1feb0:	e7f3      	b.n	1fe9a <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1feb2:	4b02      	ldr	r3, [pc, #8]	; (1febc <net_icmpv6_unregister_handler+0x44>)
   1feb4:	605a      	str	r2, [r3, #4]
   1feb6:	e7f0      	b.n	1fe9a <net_icmpv6_unregister_handler+0x22>
   1feb8:	4770      	bx	lr
   1feba:	bf00      	nop
   1febc:	20001f0c 	.word	0x20001f0c

0001fec0 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fec4:	b086      	sub	sp, #24
   1fec6:	4606      	mov	r6, r0
   1fec8:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1feca:	2300      	movs	r3, #0
   1fecc:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1fed0:	f7ff fa18 	bl	1f304 <net_pkt_icmp_data>
   1fed4:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1fed6:	2204      	movs	r2, #4
   1fed8:	4601      	mov	r1, r0
   1feda:	4630      	mov	r0, r6
   1fedc:	f7ff fdfc 	bl	1fad8 <net_header_fits>
   1fee0:	b170      	cbz	r0, 1ff00 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1fee2:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1fee4:	b173      	cbz	r3, 1ff04 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1fee6:	2300      	movs	r3, #0
   1fee8:	70a3      	strb	r3, [r4, #2]
   1feea:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1feec:	213a      	movs	r1, #58	; 0x3a
   1feee:	4630      	mov	r0, r6
   1fef0:	f7ff fd99 	bl	1fa26 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1fef4:	43c0      	mvns	r0, r0
   1fef6:	8060      	strh	r0, [r4, #2]

		return frag;
   1fef8:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1fefa:	b006      	add	sp, #24
   1fefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ff00:	2300      	movs	r3, #0
   1ff02:	e7ef      	b.n	1fee4 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ff04:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ff08:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ff0c:	441a      	add	r2, r3
   1ff0e:	3202      	adds	r2, #2
   1ff10:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1ff14:	f8cd 8008 	str.w	r8, [sp, #8]
   1ff18:	f10d 0416 	add.w	r4, sp, #22
   1ff1c:	9401      	str	r4, [sp, #4]
   1ff1e:	2702      	movs	r7, #2
   1ff20:	9700      	str	r7, [sp, #0]
   1ff22:	ab05      	add	r3, sp, #20
   1ff24:	b292      	uxth	r2, r2
   1ff26:	4629      	mov	r1, r5
   1ff28:	4630      	mov	r0, r6
   1ff2a:	f7ff f902 	bl	1f132 <net_pkt_write>
   1ff2e:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ff30:	213a      	movs	r1, #58	; 0x3a
   1ff32:	4630      	mov	r0, r6
   1ff34:	f7ff fd77 	bl	1fa26 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1ff38:	43c0      	mvns	r0, r0
   1ff3a:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1ff3e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ff42:	3a02      	subs	r2, #2
   1ff44:	f8cd 8008 	str.w	r8, [sp, #8]
   1ff48:	9401      	str	r4, [sp, #4]
   1ff4a:	9700      	str	r7, [sp, #0]
   1ff4c:	ab05      	add	r3, sp, #20
   1ff4e:	b292      	uxth	r2, r2
   1ff50:	4629      	mov	r1, r5
   1ff52:	4630      	mov	r0, r6
   1ff54:	f7ff f8ed 	bl	1f132 <net_pkt_write>
	return frag;
   1ff58:	e7cf      	b.n	1fefa <net_icmpv6_set_chksum+0x3a>

0001ff5a <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ff5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff5c:	b085      	sub	sp, #20
   1ff5e:	4605      	mov	r5, r0
   1ff60:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1ff62:	f7ff f9cf 	bl	1f304 <net_pkt_icmp_data>
   1ff66:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ff68:	2204      	movs	r2, #4
   1ff6a:	4601      	mov	r1, r0
   1ff6c:	4628      	mov	r0, r5
   1ff6e:	f7ff fdb3 	bl	1fad8 <net_header_fits>
   1ff72:	b120      	cbz	r0, 1ff7e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1ff74:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1ff76:	b126      	cbz	r6, 1ff82 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ff78:	4620      	mov	r0, r4
   1ff7a:	b005      	add	sp, #20
   1ff7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1ff7e:	2600      	movs	r6, #0
   1ff80:	e7f9      	b.n	1ff76 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ff82:	68a8      	ldr	r0, [r5, #8]
   1ff84:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1ff88:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1ff8c:	9700      	str	r7, [sp, #0]
   1ff8e:	2301      	movs	r3, #1
   1ff90:	f10d 020e 	add.w	r2, sp, #14
   1ff94:	4421      	add	r1, r4
   1ff96:	f7ff f85a 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1ff9a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ff9e:	1c7b      	adds	r3, r7, #1
   1ffa0:	9300      	str	r3, [sp, #0]
   1ffa2:	2301      	movs	r3, #1
   1ffa4:	f10d 020e 	add.w	r2, sp, #14
   1ffa8:	f7ff f851 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ffac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1ffb0:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ffb2:	9300      	str	r3, [sp, #0]
   1ffb4:	2302      	movs	r3, #2
   1ffb6:	f10d 020e 	add.w	r2, sp, #14
   1ffba:	f7ff f848 	bl	1f04e <net_frag_read>
	if (!frag) {
   1ffbe:	b108      	cbz	r0, 1ffc4 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1ffc0:	463c      	mov	r4, r7
   1ffc2:	e7d9      	b.n	1ff78 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1ffc4:	4634      	mov	r4, r6
   1ffc6:	e7d7      	b.n	1ff78 <net_icmpv6_get_hdr+0x1e>

0001ffc8 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ffc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffcc:	b086      	sub	sp, #24
   1ffce:	4606      	mov	r6, r0
   1ffd0:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ffd2:	2204      	movs	r2, #4
   1ffd4:	f7ff fd80 	bl	1fad8 <net_header_fits>
   1ffd8:	b128      	cbz	r0, 1ffe6 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1ffda:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1ffdc:	b12d      	cbz	r5, 1ffea <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ffde:	4620      	mov	r0, r4
   1ffe0:	b006      	add	sp, #24
   1ffe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ffe6:	2500      	movs	r5, #0
   1ffe8:	e7f8      	b.n	1ffdc <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ffea:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1ffee:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1fff2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1fff6:	9702      	str	r7, [sp, #8]
   1fff8:	9401      	str	r4, [sp, #4]
   1fffa:	f04f 0801 	mov.w	r8, #1
   1fffe:	f8cd 8000 	str.w	r8, [sp]
   20002:	f10d 0316 	add.w	r3, sp, #22
   20006:	440a      	add	r2, r1
   20008:	68b1      	ldr	r1, [r6, #8]
   2000a:	4630      	mov	r0, r6
   2000c:	f7ff f891 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   20010:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20014:	eb04 0308 	add.w	r3, r4, r8
   20018:	9702      	str	r7, [sp, #8]
   2001a:	9301      	str	r3, [sp, #4]
   2001c:	f8cd 8000 	str.w	r8, [sp]
   20020:	f10d 0316 	add.w	r3, sp, #22
   20024:	4601      	mov	r1, r0
   20026:	4630      	mov	r0, r6
   20028:	f7ff f883 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2002c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   20030:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   20032:	9702      	str	r7, [sp, #8]
   20034:	9301      	str	r3, [sp, #4]
   20036:	2302      	movs	r3, #2
   20038:	9300      	str	r3, [sp, #0]
   2003a:	f10d 0316 	add.w	r3, sp, #22
   2003e:	4601      	mov	r1, r0
   20040:	4630      	mov	r0, r6
   20042:	f7ff f876 	bl	1f132 <net_pkt_write>
	if (!frag) {
   20046:	2800      	cmp	r0, #0
   20048:	d1c9      	bne.n	1ffde <net_icmpv6_set_hdr+0x16>
		return NULL;
   2004a:	462c      	mov	r4, r5
   2004c:	e7c7      	b.n	1ffde <net_icmpv6_set_hdr+0x16>
	...

00020050 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   20050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20054:	b09a      	sub	sp, #104	; 0x68
   20056:	4606      	mov	r6, r0
	return pkt->iface;
   20058:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   2005a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2005e:	2000      	movs	r0, #0
   20060:	f7fe fe06 	bl	1ec70 <net_pkt_get_reserve_tx>
	if (!pkt) {
   20064:	2800      	cmp	r0, #0
   20066:	f000 80a1 	beq.w	201ac <handle_echo_request+0x15c>
   2006a:	4604      	mov	r4, r0
	return pkt->frags->data;
   2006c:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   2006e:	2100      	movs	r1, #0
   20070:	e002      	b.n	20078 <handle_echo_request+0x28>
		bytes += buf->len;
   20072:	899a      	ldrh	r2, [r3, #12]
   20074:	4411      	add	r1, r2
		buf = buf->frags;
   20076:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20078:	2b00      	cmp	r3, #0
   2007a:	d1fa      	bne.n	20072 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   2007c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20080:	2200      	movs	r2, #0
   20082:	4630      	mov	r0, r6
   20084:	f7fe fea6 	bl	1edd4 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   20088:	4607      	mov	r7, r0
   2008a:	2800      	cmp	r0, #0
   2008c:	f000 808b 	beq.w	201a6 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   20090:	4601      	mov	r1, r0
   20092:	4620      	mov	r0, r4
   20094:	f7fe fe87 	bl	1eda6 <net_pkt_frag_add>
	pkt->family = family;
   20098:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2009c:	220a      	movs	r2, #10
   2009e:	f362 03c6 	bfi	r3, r2, #3, #4
   200a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   200a6:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   200a8:	7d6b      	ldrb	r3, [r5, #21]
   200aa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   200ae:	7d6b      	ldrb	r3, [r5, #21]
   200b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   200b4:	f107 0008 	add.w	r0, r7, #8
   200b8:	f7fc f98d 	bl	1c3d6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   200bc:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   200c0:	2328      	movs	r3, #40	; 0x28
   200c2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   200c6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   200ca:	2b00      	cmp	r3, #0
   200cc:	d076      	beq.n	201bc <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   200ce:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   200d2:	68a3      	ldr	r3, [r4, #8]
   200d4:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   200d6:	2260      	movs	r2, #96	; 0x60
   200d8:	701a      	strb	r2, [r3, #0]
   200da:	68a3      	ldr	r3, [r4, #8]
   200dc:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   200de:	2300      	movs	r3, #0
   200e0:	7053      	strb	r3, [r2, #1]
   200e2:	68a2      	ldr	r2, [r4, #8]
   200e4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   200e6:	7093      	strb	r3, [r2, #2]
   200e8:	70d3      	strb	r3, [r2, #3]
   200ea:	68a3      	ldr	r3, [r4, #8]
   200ec:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   200ee:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   200f2:	71da      	strb	r2, [r3, #7]
   200f4:	68a3      	ldr	r3, [r4, #8]
   200f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   200fa:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   200fe:	2bff      	cmp	r3, #255	; 0xff
   20100:	d060      	beq.n	201c4 <handle_echo_request+0x174>
   20102:	68b3      	ldr	r3, [r6, #8]
   20104:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   20106:	af0e      	add	r7, sp, #56	; 0x38
   20108:	462b      	mov	r3, r5
   2010a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   2010e:	6859      	ldr	r1, [r3, #4]
   20110:	689a      	ldr	r2, [r3, #8]
   20112:	68db      	ldr	r3, [r3, #12]
   20114:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20116:	af01      	add	r7, sp, #4
   20118:	ab0e      	add	r3, sp, #56	; 0x38
   2011a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2011c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20120:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   20124:	462b      	mov	r3, r5
   20126:	f853 0f18 	ldr.w	r0, [r3, #24]!
   2012a:	6859      	ldr	r1, [r3, #4]
   2012c:	689a      	ldr	r2, [r3, #8]
   2012e:	68db      	ldr	r3, [r3, #12]
   20130:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   20134:	ad12      	add	r5, sp, #72	; 0x48
   20136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20138:	f8cc 0008 	str.w	r0, [ip, #8]
   2013c:	f8cc 100c 	str.w	r1, [ip, #12]
   20140:	f8cc 2010 	str.w	r2, [ip, #16]
   20144:	f8cc 3014 	str.w	r3, [ip, #20]
   20148:	68a3      	ldr	r3, [r4, #8]
   2014a:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   2014e:	ad16      	add	r5, sp, #88	; 0x58
   20150:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   20154:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   20158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2015a:	f8ce 0018 	str.w	r0, [lr, #24]
   2015e:	f8ce 101c 	str.w	r1, [lr, #28]
   20162:	f8ce 2020 	str.w	r2, [lr, #32]
   20166:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   2016a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2016c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   2016e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   20172:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   20176:	2500      	movs	r5, #0
   20178:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2017a:	a905      	add	r1, sp, #20
   2017c:	4620      	mov	r0, r4
   2017e:	f7ff feec 	bl	1ff5a <net_icmpv6_get_hdr>
   20182:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   20184:	2381      	movs	r3, #129	; 0x81
   20186:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   20188:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   2018a:	7085      	strb	r5, [r0, #2]
   2018c:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   2018e:	4620      	mov	r0, r4
   20190:	f7ff ff1a 	bl	1ffc8 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20194:	68a1      	ldr	r1, [r4, #8]
   20196:	4620      	mov	r0, r4
   20198:	f7ff fe92 	bl	1fec0 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   2019c:	4620      	mov	r0, r4
   2019e:	f7fc f9d7 	bl	1c550 <net_send_data>
   201a2:	42a8      	cmp	r0, r5
   201a4:	da3c      	bge.n	20220 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   201a6:	4620      	mov	r0, r4
   201a8:	f7fe fdd3 	bl	1ed52 <net_pkt_unref>
	net_stats.icmp.drop++;
   201ac:	4a21      	ldr	r2, [pc, #132]	; (20234 <handle_echo_request+0x1e4>)
   201ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   201b0:	3301      	adds	r3, #1
   201b2:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   201b4:	2002      	movs	r0, #2
}
   201b6:	b01a      	add	sp, #104	; 0x68
   201b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   201bc:	2300      	movs	r3, #0
   201be:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   201c2:	e786      	b.n	200d2 <handle_echo_request+0x82>
	return pkt->frags->data;
   201c4:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   201c6:	af06      	add	r7, sp, #24
   201c8:	689b      	ldr	r3, [r3, #8]
   201ca:	f853 0f08 	ldr.w	r0, [r3, #8]!
   201ce:	6859      	ldr	r1, [r3, #4]
   201d0:	689a      	ldr	r2, [r3, #8]
   201d2:	68db      	ldr	r3, [r3, #12]
   201d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   201d6:	af06      	add	r7, sp, #24
   201d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   201da:	f8cc 0018 	str.w	r0, [ip, #24]
   201de:	f8cc 101c 	str.w	r1, [ip, #28]
   201e2:	f8cc 2020 	str.w	r2, [ip, #32]
   201e6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   201ea:	68a3      	ldr	r3, [r4, #8]
   201ec:	f8d3 8008 	ldr.w	r8, [r3, #8]
   201f0:	68b3      	ldr	r3, [r6, #8]
   201f2:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   201f4:	3118      	adds	r1, #24
   201f6:	4628      	mov	r0, r5
   201f8:	f7fd f910 	bl	1d41c <net_if_ipv6_select_src_addr>
   201fc:	4603      	mov	r3, r0
   201fe:	ad0a      	add	r5, sp, #40	; 0x28
   20200:	6800      	ldr	r0, [r0, #0]
   20202:	6859      	ldr	r1, [r3, #4]
   20204:	689a      	ldr	r2, [r3, #8]
   20206:	68db      	ldr	r3, [r3, #12]
   20208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2020a:	ad0a      	add	r5, sp, #40	; 0x28
   2020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2020e:	f8c8 0008 	str.w	r0, [r8, #8]
   20212:	f8c8 100c 	str.w	r1, [r8, #12]
   20216:	f8c8 2010 	str.w	r2, [r8, #16]
   2021a:	f8c8 3014 	str.w	r3, [r8, #20]
   2021e:	e7a4      	b.n	2016a <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   20220:	4630      	mov	r0, r6
   20222:	f7fe fd96 	bl	1ed52 <net_pkt_unref>
	net_stats.icmp.sent++;
   20226:	4a03      	ldr	r2, [pc, #12]	; (20234 <handle_echo_request+0x1e4>)
   20228:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2022a:	3301      	adds	r3, #1
   2022c:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   2022e:	4628      	mov	r0, r5
   20230:	e7c1      	b.n	201b6 <handle_echo_request+0x166>
   20232:	bf00      	nop
   20234:	20002ae0 	.word	0x20002ae0

00020238 <net_icmpv6_get_ns_hdr>:
{
   20238:	b570      	push	{r4, r5, r6, lr}
   2023a:	b084      	sub	sp, #16
   2023c:	4605      	mov	r5, r0
   2023e:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   20240:	2104      	movs	r1, #4
   20242:	f7ff f874 	bl	1f32e <net_pkt_icmp_opt_data>
   20246:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   20248:	2214      	movs	r2, #20
   2024a:	4601      	mov	r1, r0
   2024c:	4628      	mov	r0, r5
   2024e:	f7ff fc43 	bl	1fad8 <net_header_fits>
   20252:	b110      	cbz	r0, 2025a <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   20254:	4620      	mov	r0, r4
}
   20256:	b004      	add	sp, #16
   20258:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   2025a:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   2025c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   20260:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   20264:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   20266:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   20268:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   2026a:	9300      	str	r3, [sp, #0]
   2026c:	2310      	movs	r3, #16
   2026e:	f10d 020e 	add.w	r2, sp, #14
   20272:	b289      	uxth	r1, r1
   20274:	f7fe feeb 	bl	1f04e <net_frag_read>
	if (!frag) {
   20278:	2800      	cmp	r0, #0
   2027a:	d0ec      	beq.n	20256 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   2027c:	4630      	mov	r0, r6
   2027e:	e7ea      	b.n	20256 <net_icmpv6_get_ns_hdr+0x1e>

00020280 <net_icmpv6_set_ns_hdr>:
{
   20280:	b570      	push	{r4, r5, r6, lr}
   20282:	b086      	sub	sp, #24
   20284:	4605      	mov	r5, r0
   20286:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   20288:	2300      	movs	r3, #0
   2028a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   2028c:	2104      	movs	r1, #4
   2028e:	f7ff f84e 	bl	1f32e <net_pkt_icmp_opt_data>
   20292:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   20294:	2214      	movs	r2, #20
   20296:	4601      	mov	r1, r0
   20298:	4628      	mov	r0, r5
   2029a:	f7ff fc1d 	bl	1fad8 <net_header_fits>
   2029e:	b110      	cbz	r0, 202a6 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   202a0:	4620      	mov	r0, r4
}
   202a2:	b006      	add	sp, #24
   202a4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   202a6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   202aa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   202ae:	441a      	add	r2, r3
   202b0:	3204      	adds	r2, #4
   202b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   202b6:	9402      	str	r4, [sp, #8]
   202b8:	ab05      	add	r3, sp, #20
   202ba:	9301      	str	r3, [sp, #4]
   202bc:	2304      	movs	r3, #4
   202be:	9300      	str	r3, [sp, #0]
   202c0:	f10d 0312 	add.w	r3, sp, #18
   202c4:	b292      	uxth	r2, r2
   202c6:	68a9      	ldr	r1, [r5, #8]
   202c8:	4628      	mov	r0, r5
   202ca:	f7fe ff32 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   202ce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   202d2:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   202d4:	9402      	str	r4, [sp, #8]
   202d6:	9301      	str	r3, [sp, #4]
   202d8:	2310      	movs	r3, #16
   202da:	9300      	str	r3, [sp, #0]
   202dc:	f10d 0312 	add.w	r3, sp, #18
   202e0:	4601      	mov	r1, r0
   202e2:	4628      	mov	r0, r5
   202e4:	f7fe ff25 	bl	1f132 <net_pkt_write>
	if (!frag) {
   202e8:	2800      	cmp	r0, #0
   202ea:	d0da      	beq.n	202a2 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   202ec:	4630      	mov	r0, r6
   202ee:	e7d8      	b.n	202a2 <net_icmpv6_set_ns_hdr+0x22>

000202f0 <net_icmpv6_get_nd_opt_hdr>:
{
   202f0:	b570      	push	{r4, r5, r6, lr}
   202f2:	b084      	sub	sp, #16
   202f4:	4605      	mov	r5, r0
   202f6:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   202f8:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   202fc:	3104      	adds	r1, #4
   202fe:	f7ff f816 	bl	1f32e <net_pkt_icmp_opt_data>
   20302:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   20304:	2202      	movs	r2, #2
   20306:	4601      	mov	r1, r0
   20308:	4628      	mov	r0, r5
   2030a:	f7ff fbe5 	bl	1fad8 <net_header_fits>
   2030e:	b110      	cbz	r0, 20316 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   20310:	4620      	mov	r0, r4
}
   20312:	b004      	add	sp, #16
   20314:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   20316:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   20318:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   2031c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   20320:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   20322:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   20326:	4419      	add	r1, r3
   20328:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   2032a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   2032c:	9600      	str	r6, [sp, #0]
   2032e:	2301      	movs	r3, #1
   20330:	f10d 020e 	add.w	r2, sp, #14
   20334:	b289      	uxth	r1, r1
   20336:	f7fe fe8a 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   2033a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2033e:	1c73      	adds	r3, r6, #1
   20340:	9300      	str	r3, [sp, #0]
   20342:	2301      	movs	r3, #1
   20344:	f10d 020e 	add.w	r2, sp, #14
   20348:	f7fe fe81 	bl	1f04e <net_frag_read>
	if (!frag) {
   2034c:	2800      	cmp	r0, #0
   2034e:	d0e0      	beq.n	20312 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   20350:	4630      	mov	r0, r6
   20352:	e7de      	b.n	20312 <net_icmpv6_get_nd_opt_hdr+0x22>

00020354 <net_icmpv6_get_na_hdr>:
{
   20354:	b570      	push	{r4, r5, r6, lr}
   20356:	b084      	sub	sp, #16
   20358:	4605      	mov	r5, r0
   2035a:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   2035c:	2104      	movs	r1, #4
   2035e:	f7fe ffe6 	bl	1f32e <net_pkt_icmp_opt_data>
   20362:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   20364:	2214      	movs	r2, #20
   20366:	4601      	mov	r1, r0
   20368:	4628      	mov	r0, r5
   2036a:	f7ff fbb5 	bl	1fad8 <net_header_fits>
   2036e:	b110      	cbz	r0, 20376 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   20370:	4620      	mov	r0, r4
}
   20372:	b004      	add	sp, #16
   20374:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20376:	68a8      	ldr	r0, [r5, #8]
   20378:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   2037c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20380:	4419      	add	r1, r3
   20382:	3104      	adds	r1, #4
   20384:	9600      	str	r6, [sp, #0]
   20386:	2301      	movs	r3, #1
   20388:	f10d 020e 	add.w	r2, sp, #14
   2038c:	b289      	uxth	r1, r1
   2038e:	f7fe fe5e 	bl	1f04e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   20392:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   20396:	2300      	movs	r3, #0
   20398:	9300      	str	r3, [sp, #0]
   2039a:	2303      	movs	r3, #3
   2039c:	f10d 020e 	add.w	r2, sp, #14
   203a0:	f7fe fe55 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   203a4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   203a8:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   203aa:	9300      	str	r3, [sp, #0]
   203ac:	2310      	movs	r3, #16
   203ae:	f10d 020e 	add.w	r2, sp, #14
   203b2:	f7fe fe4c 	bl	1f04e <net_frag_read>
	if (!frag) {
   203b6:	2800      	cmp	r0, #0
   203b8:	d0db      	beq.n	20372 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   203ba:	4630      	mov	r0, r6
   203bc:	e7d9      	b.n	20372 <net_icmpv6_get_na_hdr+0x1e>

000203be <net_icmpv6_set_na_hdr>:
{
   203be:	b570      	push	{r4, r5, r6, lr}
   203c0:	b086      	sub	sp, #24
   203c2:	4605      	mov	r5, r0
   203c4:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   203c6:	2300      	movs	r3, #0
   203c8:	f8ad 3014 	strh.w	r3, [sp, #20]
   203cc:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   203d0:	2104      	movs	r1, #4
   203d2:	f7fe ffac 	bl	1f32e <net_pkt_icmp_opt_data>
   203d6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   203d8:	2214      	movs	r2, #20
   203da:	4601      	mov	r1, r0
   203dc:	4628      	mov	r0, r5
   203de:	f7ff fb7b 	bl	1fad8 <net_header_fits>
   203e2:	b110      	cbz	r0, 203ea <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   203e4:	4620      	mov	r0, r4
}
   203e6:	b006      	add	sp, #24
   203e8:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   203ea:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   203ee:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   203f2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   203f4:	3204      	adds	r2, #4
   203f6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   203fa:	9402      	str	r4, [sp, #8]
   203fc:	9601      	str	r6, [sp, #4]
   203fe:	2301      	movs	r3, #1
   20400:	9300      	str	r3, [sp, #0]
   20402:	f10d 0312 	add.w	r3, sp, #18
   20406:	b292      	uxth	r2, r2
   20408:	68a9      	ldr	r1, [r5, #8]
   2040a:	4628      	mov	r0, r5
   2040c:	f7fe fe91 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   20410:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   20414:	9402      	str	r4, [sp, #8]
   20416:	ab05      	add	r3, sp, #20
   20418:	9301      	str	r3, [sp, #4]
   2041a:	2303      	movs	r3, #3
   2041c:	9300      	str	r3, [sp, #0]
   2041e:	f10d 0312 	add.w	r3, sp, #18
   20422:	4601      	mov	r1, r0
   20424:	4628      	mov	r0, r5
   20426:	f7fe fe84 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   2042a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   2042e:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   20430:	9402      	str	r4, [sp, #8]
   20432:	9301      	str	r3, [sp, #4]
   20434:	2310      	movs	r3, #16
   20436:	9300      	str	r3, [sp, #0]
   20438:	f10d 0312 	add.w	r3, sp, #18
   2043c:	4601      	mov	r1, r0
   2043e:	4628      	mov	r0, r5
   20440:	f7fe fe77 	bl	1f132 <net_pkt_write>
	if (!frag) {
   20444:	2800      	cmp	r0, #0
   20446:	d0ce      	beq.n	203e6 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   20448:	4630      	mov	r0, r6
   2044a:	e7cc      	b.n	203e6 <net_icmpv6_set_na_hdr+0x28>

0002044c <net_icmpv6_get_ra_hdr>:
{
   2044c:	b570      	push	{r4, r5, r6, lr}
   2044e:	b084      	sub	sp, #16
   20450:	4606      	mov	r6, r0
   20452:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   20454:	2104      	movs	r1, #4
   20456:	f7fe ff6a 	bl	1f32e <net_pkt_icmp_opt_data>
   2045a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   2045c:	220c      	movs	r2, #12
   2045e:	4601      	mov	r1, r0
   20460:	4630      	mov	r0, r6
   20462:	f7ff fb39 	bl	1fad8 <net_header_fits>
   20466:	b110      	cbz	r0, 2046e <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   20468:	4620      	mov	r0, r4
}
   2046a:	b004      	add	sp, #16
   2046c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2046e:	68b0      	ldr	r0, [r6, #8]
   20470:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   20474:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20478:	4419      	add	r1, r3
   2047a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   2047c:	9500      	str	r5, [sp, #0]
   2047e:	2301      	movs	r3, #1
   20480:	f10d 020e 	add.w	r2, sp, #14
   20484:	b289      	uxth	r1, r1
   20486:	f7fe fde2 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   2048a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2048e:	1c6b      	adds	r3, r5, #1
   20490:	9300      	str	r3, [sp, #0]
   20492:	2301      	movs	r3, #1
   20494:	f10d 020e 	add.w	r2, sp, #14
   20498:	f7fe fdd9 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   2049c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   204a0:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   204a2:	9300      	str	r3, [sp, #0]
   204a4:	2302      	movs	r3, #2
   204a6:	f10d 020e 	add.w	r2, sp, #14
   204aa:	f7fe fdd0 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   204ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   204b2:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   204b4:	9300      	str	r3, [sp, #0]
   204b6:	2304      	movs	r3, #4
   204b8:	f10d 020e 	add.w	r2, sp, #14
   204bc:	f7fe fdc7 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   204c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   204c4:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   204c8:	9300      	str	r3, [sp, #0]
   204ca:	2304      	movs	r3, #4
   204cc:	f10d 020e 	add.w	r2, sp, #14
   204d0:	f7fe fdbd 	bl	1f04e <net_frag_read>
	if (!frag) {
   204d4:	2800      	cmp	r0, #0
   204d6:	d0c8      	beq.n	2046a <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   204d8:	4628      	mov	r0, r5
   204da:	e7c6      	b.n	2046a <net_icmpv6_get_ra_hdr+0x1e>

000204dc <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   204dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204e0:	b09f      	sub	sp, #124	; 0x7c
   204e2:	4605      	mov	r5, r0
   204e4:	4688      	mov	r8, r1
   204e6:	4692      	mov	sl, r2
   204e8:	4699      	mov	r9, r3
	return pkt->frags->data;
   204ea:	6883      	ldr	r3, [r0, #8]
   204ec:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   204ee:	799b      	ldrb	r3, [r3, #6]
   204f0:	2b3a      	cmp	r3, #58	; 0x3a
   204f2:	d01d      	beq.n	20530 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   204f4:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   204f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   204fa:	2000      	movs	r0, #0
   204fc:	f7fe fbb8 	bl	1ec70 <net_pkt_get_reserve_tx>
	if (!pkt) {
   20500:	4604      	mov	r4, r0
   20502:	2800      	cmp	r0, #0
   20504:	f000 8141 	beq.w	2078a <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   20508:	68ab      	ldr	r3, [r5, #8]
   2050a:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   2050c:	798b      	ldrb	r3, [r1, #6]
   2050e:	2b11      	cmp	r3, #17
   20510:	d019      	beq.n	20546 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   20512:	2b06      	cmp	r3, #6
   20514:	d019      	beq.n	2054a <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20516:	687b      	ldr	r3, [r7, #4]
   20518:	689b      	ldr	r3, [r3, #8]
   2051a:	3118      	adds	r1, #24
   2051c:	4638      	mov	r0, r7
   2051e:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   20520:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   20524:	282f      	cmp	r0, #47	; 0x2f
   20526:	f240 80de 	bls.w	206e6 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   2052a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   2052e:	e00d      	b.n	2054c <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   20530:	a906      	add	r1, sp, #24
   20532:	f7ff fd12 	bl	1ff5a <net_icmpv6_get_hdr>
   20536:	b118      	cbz	r0, 20540 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   20538:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   2053c:	2b00      	cmp	r3, #0
   2053e:	dbd9      	blt.n	204f4 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   20540:	f06f 0515 	mvn.w	r5, #21
   20544:	e119      	b.n	2077a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   20546:	2630      	movs	r6, #48	; 0x30
   20548:	e000      	b.n	2054c <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   2054a:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   2054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20550:	2230      	movs	r2, #48	; 0x30
   20552:	4631      	mov	r1, r6
   20554:	4628      	mov	r0, r5
   20556:	f7fe fc3d 	bl	1edd4 <net_pkt_copy>
	if (!frag) {
   2055a:	4683      	mov	fp, r0
   2055c:	2800      	cmp	r0, #0
   2055e:	f000 8104 	beq.w	2076a <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   20562:	4601      	mov	r1, r0
   20564:	4620      	mov	r0, r4
   20566:	f7fe fc1e 	bl	1eda6 <net_pkt_frag_add>
	pkt->family = family;
   2056a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2056e:	220a      	movs	r2, #10
   20570:	f362 03c6 	bfi	r3, r2, #3, #4
   20574:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   20578:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2057a:	7d7b      	ldrb	r3, [r7, #21]
   2057c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20580:	7d7b      	ldrb	r3, [r7, #21]
   20582:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   20586:	f10b 0008 	add.w	r0, fp, #8
   2058a:	f7fb ff24 	bl	1c3d6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   2058e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   20592:	2000      	movs	r0, #0
   20594:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   20598:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   2059a:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   2059e:	f88d 8014 	strb.w	r8, [sp, #20]
   205a2:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   205a6:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   205a8:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   205aa:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   205ac:	f04f 0e60 	mov.w	lr, #96	; 0x60
   205b0:	f882 e000 	strb.w	lr, [r2]
   205b4:	68a2      	ldr	r2, [r4, #8]
   205b6:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   205b8:	7050      	strb	r0, [r2, #1]
   205ba:	68a2      	ldr	r2, [r4, #8]
   205bc:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   205be:	7090      	strb	r0, [r2, #2]
   205c0:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   205c2:	3608      	adds	r6, #8
   205c4:	b2b6      	uxth	r6, r6
   205c6:	68a2      	ldr	r2, [r4, #8]
   205c8:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   205ca:	0a30      	lsrs	r0, r6, #8
   205cc:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   205ce:	7156      	strb	r6, [r2, #5]
   205d0:	68a2      	ldr	r2, [r4, #8]
   205d2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   205d4:	203a      	movs	r0, #58	; 0x3a
   205d6:	7190      	strb	r0, [r2, #6]
   205d8:	68a2      	ldr	r2, [r4, #8]
   205da:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   205dc:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   205de:	2228      	movs	r2, #40	; 0x28
   205e0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   205e4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   205e8:	9602      	str	r6, [sp, #8]
   205ea:	ab05      	add	r3, sp, #20
   205ec:	9301      	str	r3, [sp, #4]
   205ee:	f04f 0a01 	mov.w	sl, #1
   205f2:	f8cd a000 	str.w	sl, [sp]
   205f6:	f10d 0316 	add.w	r3, sp, #22
   205fa:	4620      	mov	r0, r4
   205fc:	f7fe fd99 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   20600:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20604:	9602      	str	r6, [sp, #8]
   20606:	f10d 0315 	add.w	r3, sp, #21
   2060a:	9301      	str	r3, [sp, #4]
   2060c:	f8cd a000 	str.w	sl, [sp]
   20610:	f10d 0316 	add.w	r3, sp, #22
   20614:	4601      	mov	r1, r0
   20616:	4620      	mov	r0, r4
   20618:	f7fe fd8b 	bl	1f132 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   2061c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20620:	9602      	str	r6, [sp, #8]
   20622:	ab06      	add	r3, sp, #24
   20624:	9301      	str	r3, [sp, #4]
   20626:	2304      	movs	r3, #4
   20628:	9300      	str	r3, [sp, #0]
   2062a:	f10d 0316 	add.w	r3, sp, #22
   2062e:	4601      	mov	r1, r0
   20630:	4620      	mov	r0, r4
   20632:	f7fe fd7e 	bl	1f132 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   20636:	f1b8 0f04 	cmp.w	r8, #4
   2063a:	d056      	beq.n	206ea <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   2063c:	68ab      	ldr	r3, [r5, #8]
   2063e:	689e      	ldr	r6, [r3, #8]
   20640:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   20642:	2bff      	cmp	r3, #255	; 0xff
   20644:	d05f      	beq.n	20706 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   20646:	af12      	add	r7, sp, #72	; 0x48
   20648:	4633      	mov	r3, r6
   2064a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   2064e:	6859      	ldr	r1, [r3, #4]
   20650:	689a      	ldr	r2, [r3, #8]
   20652:	68db      	ldr	r3, [r3, #12]
   20654:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20656:	af06      	add	r7, sp, #24
   20658:	ab12      	add	r3, sp, #72	; 0x48
   2065a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2065c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   20660:	68a3      	ldr	r3, [r4, #8]
   20662:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20666:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   2066a:	4633      	mov	r3, r6
   2066c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   20670:	6859      	ldr	r1, [r3, #4]
   20672:	689a      	ldr	r2, [r3, #8]
   20674:	68db      	ldr	r3, [r3, #12]
   20676:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2067a:	ae16      	add	r6, sp, #88	; 0x58
   2067c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2067e:	f8cc 0008 	str.w	r0, [ip, #8]
   20682:	f8cc 100c 	str.w	r1, [ip, #12]
   20686:	f8cc 2010 	str.w	r2, [ip, #16]
   2068a:	f8cc 3014 	str.w	r3, [ip, #20]
   2068e:	68a3      	ldr	r3, [r4, #8]
   20690:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   20694:	ae1a      	add	r6, sp, #104	; 0x68
   20696:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   2069a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2069e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206a0:	f8ce 0018 	str.w	r0, [lr, #24]
   206a4:	f8ce 101c 	str.w	r1, [lr, #28]
   206a8:	f8ce 2020 	str.w	r2, [lr, #32]
   206ac:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   206b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   206b2:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   206b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   206b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   206bc:	6a2b      	ldr	r3, [r5, #32]
   206be:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   206c0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   206c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   206c8:	68a1      	ldr	r1, [r4, #8]
   206ca:	4620      	mov	r0, r4
   206cc:	f7ff fbf8 	bl	1fec0 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   206d0:	4620      	mov	r0, r4
   206d2:	f7fb ff3d 	bl	1c550 <net_send_data>
   206d6:	2800      	cmp	r0, #0
   206d8:	db4a      	blt.n	20770 <net_icmpv6_send_error+0x294>
   206da:	4a2d      	ldr	r2, [pc, #180]	; (20790 <net_icmpv6_send_error+0x2b4>)
   206dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
   206de:	3301      	adds	r3, #1
   206e0:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   206e2:	2500      	movs	r5, #0
   206e4:	e04d      	b.n	20782 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   206e6:	2600      	movs	r6, #0
   206e8:	e730      	b.n	2054c <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   206ea:	4620      	mov	r0, r4
   206ec:	f7fe fe0a 	bl	1f304 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   206f0:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   206f4:	0a1a      	lsrs	r2, r3, #8
   206f6:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   206f8:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   206fa:	f3c9 2307 	ubfx	r3, r9, #8, #8
   206fe:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   20700:	f880 9007 	strb.w	r9, [r0, #7]
   20704:	e79a      	b.n	2063c <net_icmpv6_send_error+0x160>
   20706:	68a3      	ldr	r3, [r4, #8]
   20708:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2070c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   20710:	4633      	mov	r3, r6
   20712:	f853 0f08 	ldr.w	r0, [r3, #8]!
   20716:	6859      	ldr	r1, [r3, #4]
   20718:	689a      	ldr	r2, [r3, #8]
   2071a:	68db      	ldr	r3, [r3, #12]
   2071c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   20720:	ae0a      	add	r6, sp, #40	; 0x28
   20722:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20724:	f8cc 0018 	str.w	r0, [ip, #24]
   20728:	f8cc 101c 	str.w	r1, [ip, #28]
   2072c:	f8cc 2020 	str.w	r2, [ip, #32]
   20730:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   20734:	68a3      	ldr	r3, [r4, #8]
   20736:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2073a:	68ab      	ldr	r3, [r5, #8]
   2073c:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   2073e:	3118      	adds	r1, #24
   20740:	4638      	mov	r0, r7
   20742:	f7fc fe6b 	bl	1d41c <net_if_ipv6_select_src_addr>
   20746:	4603      	mov	r3, r0
   20748:	ae0e      	add	r6, sp, #56	; 0x38
   2074a:	6800      	ldr	r0, [r0, #0]
   2074c:	6859      	ldr	r1, [r3, #4]
   2074e:	689a      	ldr	r2, [r3, #8]
   20750:	68db      	ldr	r3, [r3, #12]
   20752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20754:	ae0e      	add	r6, sp, #56	; 0x38
   20756:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20758:	f8c8 0008 	str.w	r0, [r8, #8]
   2075c:	f8c8 100c 	str.w	r1, [r8, #12]
   20760:	f8c8 2010 	str.w	r2, [r8, #16]
   20764:	f8c8 3014 	str.w	r3, [r8, #20]
   20768:	e7a2      	b.n	206b0 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   2076a:	f06f 050b 	mvn.w	r5, #11
   2076e:	e001      	b.n	20774 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   20770:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   20774:	4620      	mov	r0, r4
   20776:	f7fe faec 	bl	1ed52 <net_pkt_unref>
	net_stats.icmp.drop++;
   2077a:	4a05      	ldr	r2, [pc, #20]	; (20790 <net_icmpv6_send_error+0x2b4>)
   2077c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   2077e:	3301      	adds	r3, #1
   20780:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   20782:	4628      	mov	r0, r5
   20784:	b01f      	add	sp, #124	; 0x7c
   20786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   2078a:	f06f 050b 	mvn.w	r5, #11
   2078e:	e7f4      	b.n	2077a <net_icmpv6_send_error+0x29e>
   20790:	20002ae0 	.word	0x20002ae0

00020794 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   20794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20798:	b08d      	sub	sp, #52	; 0x34
   2079a:	4605      	mov	r5, r0
   2079c:	460e      	mov	r6, r1
   2079e:	4692      	mov	sl, r2
   207a0:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   207a2:	f7fc fe3b 	bl	1d41c <net_if_ipv6_select_src_addr>
   207a6:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   207a8:	686b      	ldr	r3, [r5, #4]
   207aa:	689b      	ldr	r3, [r3, #8]
   207ac:	4631      	mov	r1, r6
   207ae:	4628      	mov	r0, r5
   207b0:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   207b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   207b6:	f7fe fa5b 	bl	1ec70 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   207ba:	273a      	movs	r7, #58	; 0x3a
   207bc:	9700      	str	r7, [sp, #0]
   207be:	462b      	mov	r3, r5
   207c0:	4632      	mov	r2, r6
   207c2:	4641      	mov	r1, r8
   207c4:	f000 fcc1 	bl	2114a <net_ipv6_create_raw>
   207c8:	4604      	mov	r4, r0
	pkt->family = family;
   207ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   207ce:	220a      	movs	r2, #10
   207d0:	f362 03c6 	bfi	r3, r2, #3, #4
   207d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   207d8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   207da:	7d6b      	ldrb	r3, [r5, #21]
   207dc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   207e0:	7d6b      	ldrb	r3, [r5, #21]
   207e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   207e6:	aa0c      	add	r2, sp, #48	; 0x30
   207e8:	2380      	movs	r3, #128	; 0x80
   207ea:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   207ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207f2:	2101      	movs	r1, #1
   207f4:	f7fe fbe5 	bl	1efc2 <net_pkt_append>
   207f8:	f04f 0b00 	mov.w	fp, #0
   207fc:	aa0c      	add	r2, sp, #48	; 0x30
   207fe:	f802 bd24 	strb.w	fp, [r2, #-36]!
   20802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20806:	2101      	movs	r1, #1
   20808:	4620      	mov	r0, r4
   2080a:	f7fe fbda 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   2080e:	ad0c      	add	r5, sp, #48	; 0x30
   20810:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   20814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20818:	462a      	mov	r2, r5
   2081a:	2102      	movs	r1, #2
   2081c:	4620      	mov	r0, r4
   2081e:	f7fe fbd0 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   20822:	ea4f 221a 	mov.w	r2, sl, lsr #8
   20826:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   2082a:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2082e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20832:	462a      	mov	r2, r5
   20834:	2102      	movs	r1, #2
   20836:	4620      	mov	r0, r4
   20838:	f7fe fbc3 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   2083c:	ea4f 2319 	mov.w	r3, r9, lsr #8
   20840:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   20844:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   20848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2084c:	462a      	mov	r2, r5
   2084e:	2102      	movs	r1, #2
   20850:	4620      	mov	r0, r4
   20852:	f7fe fbb6 	bl	1efc2 <net_pkt_append>
	return pkt->frags->data;
   20856:	68a3      	ldr	r3, [r4, #8]
   20858:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2085c:	ad04      	add	r5, sp, #16
   2085e:	f8d8 0000 	ldr.w	r0, [r8]
   20862:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20866:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2086a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20870:	ad04      	add	r5, sp, #16
   20872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20874:	f8cc 0008 	str.w	r0, [ip, #8]
   20878:	f8cc 100c 	str.w	r1, [ip, #12]
   2087c:	f8cc 2010 	str.w	r2, [ip, #16]
   20880:	f8cc 3014 	str.w	r3, [ip, #20]
   20884:	68a3      	ldr	r3, [r4, #8]
   20886:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   2088a:	ad08      	add	r5, sp, #32
   2088c:	6830      	ldr	r0, [r6, #0]
   2088e:	6871      	ldr	r1, [r6, #4]
   20890:	68b2      	ldr	r2, [r6, #8]
   20892:	68f3      	ldr	r3, [r6, #12]
   20894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20896:	ad08      	add	r5, sp, #32
   20898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2089a:	f8ce 0018 	str.w	r0, [lr, #24]
   2089e:	f8ce 101c 	str.w	r1, [lr, #28]
   208a2:	f8ce 2020 	str.w	r2, [lr, #32]
   208a6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   208aa:	68a1      	ldr	r1, [r4, #8]
   208ac:	4620      	mov	r0, r4
   208ae:	f7ff fb07 	bl	1fec0 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   208b2:	4639      	mov	r1, r7
   208b4:	4620      	mov	r0, r4
   208b6:	f000 fce6 	bl	21286 <net_ipv6_finalize_raw>
   208ba:	4558      	cmp	r0, fp
   208bc:	db0c      	blt.n	208d8 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   208be:	4620      	mov	r0, r4
   208c0:	f7fb fe46 	bl	1c550 <net_send_data>
   208c4:	4558      	cmp	r0, fp
   208c6:	db07      	blt.n	208d8 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   208c8:	4a08      	ldr	r2, [pc, #32]	; (208ec <net_icmpv6_send_echo_request+0x158>)
   208ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
   208cc:	3301      	adds	r3, #1
   208ce:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   208d0:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   208d2:	b00d      	add	sp, #52	; 0x34
   208d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   208d8:	4620      	mov	r0, r4
   208da:	f7fe fa3a 	bl	1ed52 <net_pkt_unref>
	net_stats.icmp.drop++;
   208de:	4a03      	ldr	r2, [pc, #12]	; (208ec <net_icmpv6_send_echo_request+0x158>)
   208e0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   208e2:	3301      	adds	r3, #1
   208e4:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   208e6:	f06f 0004 	mvn.w	r0, #4
   208ea:	e7f2      	b.n	208d2 <net_icmpv6_send_echo_request+0x13e>
   208ec:	20002ae0 	.word	0x20002ae0

000208f0 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   208f0:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   208f2:	4c12      	ldr	r4, [pc, #72]	; (2093c <net_icmpv6_input+0x4c>)
   208f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   208f6:	3301      	adds	r3, #1
   208f8:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   208fa:	4b11      	ldr	r3, [pc, #68]	; (20940 <net_icmpv6_input+0x50>)
   208fc:	681b      	ldr	r3, [r3, #0]
   208fe:	e005      	b.n	2090c <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   20900:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   20902:	b17b      	cbz	r3, 20924 <net_icmpv6_input+0x34>
	return node->next;
   20904:	681c      	ldr	r4, [r3, #0]
   20906:	b18c      	cbz	r4, 2092c <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   20908:	b175      	cbz	r5, 20928 <net_icmpv6_input+0x38>
	return node->next;
   2090a:	681b      	ldr	r3, [r3, #0]
   2090c:	b183      	cbz	r3, 20930 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   2090e:	791c      	ldrb	r4, [r3, #4]
   20910:	428c      	cmp	r4, r1
   20912:	d1f5      	bne.n	20900 <net_icmpv6_input+0x10>
   20914:	795c      	ldrb	r4, [r3, #5]
   20916:	4294      	cmp	r4, r2
   20918:	d001      	beq.n	2091e <net_icmpv6_input+0x2e>
   2091a:	2c00      	cmp	r4, #0
   2091c:	d1f0      	bne.n	20900 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   2091e:	689b      	ldr	r3, [r3, #8]
   20920:	4798      	blx	r3
   20922:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   20924:	461c      	mov	r4, r3
   20926:	e7ee      	b.n	20906 <net_icmpv6_input+0x16>
   20928:	2300      	movs	r3, #0
   2092a:	e7ef      	b.n	2090c <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   2092c:	2300      	movs	r3, #0
   2092e:	e7ed      	b.n	2090c <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   20930:	4a02      	ldr	r2, [pc, #8]	; (2093c <net_icmpv6_input+0x4c>)
   20932:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   20934:	3301      	adds	r3, #1
   20936:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   20938:	2002      	movs	r0, #2
}
   2093a:	bd38      	pop	{r3, r4, r5, pc}
   2093c:	20002ae0 	.word	0x20002ae0
   20940:	20001f0c 	.word	0x20001f0c

00020944 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   20944:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   20946:	4802      	ldr	r0, [pc, #8]	; (20950 <net_icmpv6_init+0xc>)
   20948:	f7ff fa8a 	bl	1fe60 <net_icmpv6_register_handler>
   2094c:	bd08      	pop	{r3, pc}
   2094e:	bf00      	nop
   20950:	2000bec0 	.word	0x2000bec0

00020954 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   20954:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   20956:	7803      	ldrb	r3, [r0, #0]
   20958:	3b01      	subs	r3, #1
   2095a:	b2db      	uxtb	r3, r3
   2095c:	7003      	strb	r3, [r0, #0]
   2095e:	b913      	cbnz	r3, 20966 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   20960:	6903      	ldr	r3, [r0, #16]
   20962:	b103      	cbz	r3, 20966 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   20964:	4798      	blx	r3
   20966:	bd08      	pop	{r3, pc}

00020968 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   20968:	7803      	ldrb	r3, [r0, #0]
   2096a:	3301      	adds	r3, #1
   2096c:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   2096e:	4770      	bx	lr

00020970 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   20970:	2100      	movs	r1, #0
   20972:	8903      	ldrh	r3, [r0, #8]
   20974:	4299      	cmp	r1, r3
   20976:	da17      	bge.n	209a8 <net_nbr_get+0x38>
{
   20978:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   2097a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   2097c:	8853      	ldrh	r3, [r2, #2]
   2097e:	8894      	ldrh	r4, [r2, #4]
   20980:	4423      	add	r3, r4
   20982:	3314      	adds	r3, #20
   20984:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   20988:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   2098a:	5cd3      	ldrb	r3, [r2, r3]
   2098c:	b12b      	cbz	r3, 2099a <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   2098e:	3101      	adds	r1, #1
   20990:	8903      	ldrh	r3, [r0, #8]
   20992:	4299      	cmp	r1, r3
   20994:	dbf1      	blt.n	2097a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   20996:	2000      	movs	r0, #0
}
   20998:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   2099a:	f104 0314 	add.w	r3, r4, #20
   2099e:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   209a0:	4620      	mov	r0, r4
   209a2:	f7ff ffe1 	bl	20968 <net_nbr_ref>
   209a6:	bd10      	pop	{r4, pc}
	return NULL;
   209a8:	2000      	movs	r0, #0
   209aa:	4770      	bx	lr

000209ac <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   209ac:	7843      	ldrb	r3, [r0, #1]
   209ae:	2bff      	cmp	r3, #255	; 0xff
   209b0:	d158      	bne.n	20a64 <net_nbr_link+0xb8>
{
   209b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209b6:	4690      	mov	r8, r2
   209b8:	460f      	mov	r7, r1
   209ba:	4606      	mov	r6, r0
   209bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   209c0:	2400      	movs	r4, #0
   209c2:	e008      	b.n	209d6 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   209c4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   209c8:	4b2a      	ldr	r3, [pc, #168]	; (20a74 <net_nbr_link+0xc8>)
   209ca:	4413      	add	r3, r2
   209cc:	7a1b      	ldrb	r3, [r3, #8]
   209ce:	b933      	cbnz	r3, 209de <net_nbr_link+0x32>
			avail = i;
   209d0:	4625      	mov	r5, r4
   209d2:	e004      	b.n	209de <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   209d4:	3401      	adds	r4, #1
   209d6:	2c07      	cmp	r4, #7
   209d8:	dc1e      	bgt.n	20a18 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   209da:	2d00      	cmp	r5, #0
   209dc:	dbf2      	blt.n	209c4 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   209de:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   209e2:	4b24      	ldr	r3, [pc, #144]	; (20a74 <net_nbr_link+0xc8>)
   209e4:	4413      	add	r3, r2
   209e6:	7a1b      	ldrb	r3, [r3, #8]
   209e8:	2b00      	cmp	r3, #0
   209ea:	d0f3      	beq.n	209d4 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   209ec:	4921      	ldr	r1, [pc, #132]	; (20a74 <net_nbr_link+0xc8>)
   209ee:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   209f0:	f898 2004 	ldrb.w	r2, [r8, #4]
   209f4:	3102      	adds	r1, #2
   209f6:	f8d8 0000 	ldr.w	r0, [r8]
   209fa:	f00b faab 	bl	2bf54 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   209fe:	4603      	mov	r3, r0
   20a00:	2800      	cmp	r0, #0
   20a02:	d1e7      	bne.n	209d4 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   20a04:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   20a08:	4a1a      	ldr	r2, [pc, #104]	; (20a74 <net_nbr_link+0xc8>)
   20a0a:	440a      	add	r2, r1
   20a0c:	7a11      	ldrb	r1, [r2, #8]
   20a0e:	3101      	adds	r1, #1
   20a10:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   20a12:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   20a14:	60b7      	str	r7, [r6, #8]

			return 0;
   20a16:	e019      	b.n	20a4c <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   20a18:	2d00      	cmp	r5, #0
   20a1a:	db27      	blt.n	20a6c <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   20a1c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   20a20:	4b14      	ldr	r3, [pc, #80]	; (20a74 <net_nbr_link+0xc8>)
   20a22:	4413      	add	r3, r2
   20a24:	7a1a      	ldrb	r2, [r3, #8]
   20a26:	3201      	adds	r2, #1
   20a28:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   20a2a:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   20a2c:	f8d8 1000 	ldr.w	r1, [r8]
   20a30:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   20a34:	b109      	cbz	r1, 20a3a <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20a36:	2a06      	cmp	r2, #6
   20a38:	d90b      	bls.n	20a52 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   20a3a:	f898 2004 	ldrb.w	r2, [r8, #4]
   20a3e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   20a42:	4b0c      	ldr	r3, [pc, #48]	; (20a74 <net_nbr_link+0xc8>)
   20a44:	441d      	add	r5, r3
   20a46:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   20a48:	60b7      	str	r7, [r6, #8]

	return 0;
   20a4a:	2300      	movs	r3, #0
}
   20a4c:	4618      	mov	r0, r3
   20a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   20a52:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   20a56:	4807      	ldr	r0, [pc, #28]	; (20a74 <net_nbr_link+0xc8>)
   20a58:	4418      	add	r0, r3
   20a5a:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   20a5c:	3002      	adds	r0, #2
   20a5e:	f7df fc2f 	bl	2c0 <memcpy>
   20a62:	e7ea      	b.n	20a3a <net_nbr_link+0x8e>
		return -EALREADY;
   20a64:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   20a68:	4618      	mov	r0, r3
   20a6a:	4770      	bx	lr
		return -ENOENT;
   20a6c:	f06f 0301 	mvn.w	r3, #1
   20a70:	e7ec      	b.n	20a4c <net_nbr_link+0xa0>
   20a72:	bf00      	nop
   20a74:	20001f14 	.word	0x20001f14

00020a78 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   20a78:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   20a7c:	4b01      	ldr	r3, [pc, #4]	; (20a84 <net_nbr_get_lladdr+0xc>)
   20a7e:	4418      	add	r0, r3
   20a80:	4770      	bx	lr
   20a82:	bf00      	nop
   20a84:	20001f14 	.word	0x20001f14

00020a88 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   20a88:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   20a8a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   20a8e:	428b      	cmp	r3, r1
   20a90:	d003      	beq.n	20a9a <ipv6_nbr_set_state+0x12>
   20a92:	2b05      	cmp	r3, #5
   20a94:	d001      	beq.n	20a9a <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   20a96:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   20a9a:	4770      	bx	lr

00020a9c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   20a9c:	b570      	push	{r4, r5, r6, lr}
   20a9e:	4605      	mov	r5, r0
   20aa0:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20aa2:	2400      	movs	r4, #0
   20aa4:	e000      	b.n	20aa8 <iface_cb+0xc>
   20aa6:	3401      	adds	r4, #1
   20aa8:	2c07      	cmp	r4, #7
   20aaa:	dc0c      	bgt.n	20ac6 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   20aac:	4a06      	ldr	r2, [pc, #24]	; (20ac8 <iface_cb+0x2c>)
   20aae:	01e3      	lsls	r3, r4, #7
   20ab0:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   20ab2:	5cd3      	ldrb	r3, [r2, r3]
   20ab4:	2b00      	cmp	r3, #0
   20ab6:	d0f6      	beq.n	20aa6 <iface_cb+0xa>
   20ab8:	6883      	ldr	r3, [r0, #8]
   20aba:	42ab      	cmp	r3, r5
   20abc:	d1f3      	bne.n	20aa6 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   20abe:	6833      	ldr	r3, [r6, #0]
   20ac0:	6871      	ldr	r1, [r6, #4]
   20ac2:	4798      	blx	r3
   20ac4:	e7ef      	b.n	20aa6 <iface_cb+0xa>
	}
}
   20ac6:	bd70      	pop	{r4, r5, r6, pc}
   20ac8:	2000bef0 	.word	0x2000bef0

00020acc <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   20acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ace:	b085      	sub	sp, #20
   20ad0:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   20ad2:	a903      	add	r1, sp, #12
   20ad4:	f004 ff0a 	bl	258ec <iface2str>
   20ad8:	4602      	mov	r2, r0
   20ada:	4629      	mov	r1, r5
   20adc:	4885      	ldr	r0, [pc, #532]	; (20cf4 <iface_cb+0x228>)
   20ade:	f7e2 fb57 	bl	3190 <printk>
	printk("=======================%s\n", extra);
   20ae2:	9903      	ldr	r1, [sp, #12]
   20ae4:	4884      	ldr	r0, [pc, #528]	; (20cf8 <iface_cb+0x22c>)
   20ae6:	f7e2 fb53 	bl	3190 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20aea:	f3bf 8f5b 	dmb	ish
   20aee:	68eb      	ldr	r3, [r5, #12]
   20af0:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   20af4:	f013 0f01 	tst.w	r3, #1
   20af8:	d014      	beq.n	20b24 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   20afa:	2318      	movs	r3, #24
   20afc:	4a7f      	ldr	r2, [pc, #508]	; (20cfc <iface_cb+0x230>)
   20afe:	7d29      	ldrb	r1, [r5, #20]
   20b00:	6928      	ldr	r0, [r5, #16]
   20b02:	f7fe fd45 	bl	1f590 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   20b06:	4601      	mov	r1, r0
   20b08:	487d      	ldr	r0, [pc, #500]	; (20d00 <iface_cb+0x234>)
   20b0a:	f7e2 fb41 	bl	3190 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   20b0e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   20b10:	487c      	ldr	r0, [pc, #496]	; (20d04 <iface_cb+0x238>)
   20b12:	f7e2 fb3d 	bl	3190 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   20b16:	2103      	movs	r1, #3
   20b18:	487b      	ldr	r0, [pc, #492]	; (20d08 <iface_cb+0x23c>)
   20b1a:	f7e2 fb39 	bl	3190 <printk>
	count = 0;
   20b1e:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20b20:	463c      	mov	r4, r7
   20b22:	e02e      	b.n	20b82 <iface_cb+0xb6>
		printk("Interface is down.\n");
   20b24:	4879      	ldr	r0, [pc, #484]	; (20d0c <iface_cb+0x240>)
   20b26:	f7e2 fb33 	bl	3190 <printk>
   20b2a:	e0db      	b.n	20ce4 <iface_cb+0x218>
		return "<unknown type>";
   20b2c:	4a78      	ldr	r2, [pc, #480]	; (20d10 <iface_cb+0x244>)
   20b2e:	e006      	b.n	20b3e <iface_cb+0x72>
		return "DHCP";
   20b30:	4a78      	ldr	r2, [pc, #480]	; (20d14 <iface_cb+0x248>)
   20b32:	e004      	b.n	20b3e <iface_cb+0x72>
		return "manual";
   20b34:	4a78      	ldr	r2, [pc, #480]	; (20d18 <iface_cb+0x24c>)
   20b36:	e002      	b.n	20b3e <iface_cb+0x72>
	return "<invalid type>";
   20b38:	4a78      	ldr	r2, [pc, #480]	; (20d1c <iface_cb+0x250>)
   20b3a:	e000      	b.n	20b3e <iface_cb+0x72>
		return "autoconf";
   20b3c:	4a78      	ldr	r2, [pc, #480]	; (20d20 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   20b3e:	236c      	movs	r3, #108	; 0x6c
   20b40:	fb03 5304 	mla	r3, r3, r4, r5
   20b44:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   20b48:	3301      	adds	r3, #1
   20b4a:	2b03      	cmp	r3, #3
   20b4c:	d809      	bhi.n	20b62 <iface_cb+0x96>
   20b4e:	e8df f003 	tbb	[pc, r3]
   20b52:	0a02      	.short	0x0a02
   20b54:	0604      	.short	0x0604
		return "<unknown state>";
   20b56:	4b73      	ldr	r3, [pc, #460]	; (20d24 <iface_cb+0x258>)
   20b58:	e006      	b.n	20b68 <iface_cb+0x9c>
		return "preferred";
   20b5a:	4b73      	ldr	r3, [pc, #460]	; (20d28 <iface_cb+0x25c>)
   20b5c:	e004      	b.n	20b68 <iface_cb+0x9c>
		return "deprecated";
   20b5e:	4b73      	ldr	r3, [pc, #460]	; (20d2c <iface_cb+0x260>)
   20b60:	e002      	b.n	20b68 <iface_cb+0x9c>
	return "<invalid state>";
   20b62:	4b73      	ldr	r3, [pc, #460]	; (20d30 <iface_cb+0x264>)
   20b64:	e000      	b.n	20b68 <iface_cb+0x9c>
		return "tentative";
   20b66:	4b73      	ldr	r3, [pc, #460]	; (20d34 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   20b68:	266c      	movs	r6, #108	; 0x6c
   20b6a:	fb06 5604 	mla	r6, r6, r4, r5
   20b6e:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   20b72:	b368      	cbz	r0, 20bd0 <iface_cb+0x104>
   20b74:	4870      	ldr	r0, [pc, #448]	; (20d38 <iface_cb+0x26c>)
   20b76:	9000      	str	r0, [sp, #0]
   20b78:	4870      	ldr	r0, [pc, #448]	; (20d3c <iface_cb+0x270>)
   20b7a:	f7e2 fb09 	bl	3190 <printk>
		count++;
   20b7e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20b80:	3401      	adds	r4, #1
   20b82:	2c02      	cmp	r4, #2
   20b84:	dc26      	bgt.n	20bd4 <iface_cb+0x108>
		if (!unicast->is_used) {
   20b86:	236c      	movs	r3, #108	; 0x6c
   20b88:	fb03 5304 	mla	r3, r3, r4, r5
   20b8c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   20b90:	2b00      	cmp	r3, #0
   20b92:	d0f5      	beq.n	20b80 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   20b94:	266c      	movs	r6, #108	; 0x6c
   20b96:	fb06 f604 	mul.w	r6, r6, r4
   20b9a:	f106 0120 	add.w	r1, r6, #32
   20b9e:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   20ba0:	2328      	movs	r3, #40	; 0x28
   20ba2:	4a67      	ldr	r2, [pc, #412]	; (20d40 <iface_cb+0x274>)
   20ba4:	3110      	adds	r1, #16
   20ba6:	200a      	movs	r0, #10
   20ba8:	f7fe fd1c 	bl	1f5e4 <net_addr_ntop>
   20bac:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   20bae:	442e      	add	r6, r5
   20bb0:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   20bb4:	2b03      	cmp	r3, #3
   20bb6:	d8bf      	bhi.n	20b38 <iface_cb+0x6c>
   20bb8:	a201      	add	r2, pc, #4	; (adr r2, 20bc0 <iface_cb+0xf4>)
   20bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20bbe:	bf00      	nop
   20bc0:	00020b2d 	.word	0x00020b2d
   20bc4:	00020b3d 	.word	0x00020b3d
   20bc8:	00020b31 	.word	0x00020b31
   20bcc:	00020b35 	.word	0x00020b35
		printk("\t%s %s %s%s\n",
   20bd0:	485c      	ldr	r0, [pc, #368]	; (20d44 <iface_cb+0x278>)
   20bd2:	e7d0      	b.n	20b76 <iface_cb+0xaa>
	}

	if (count == 0) {
   20bd4:	b137      	cbz	r7, 20be4 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   20bd6:	2105      	movs	r1, #5
   20bd8:	485b      	ldr	r0, [pc, #364]	; (20d48 <iface_cb+0x27c>)
   20bda:	f7e2 fad9 	bl	3190 <printk>
	count = 0;
   20bde:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20be0:	4634      	mov	r4, r6
   20be2:	e004      	b.n	20bee <iface_cb+0x122>
		printk("\t<none>\n");
   20be4:	4859      	ldr	r0, [pc, #356]	; (20d4c <iface_cb+0x280>)
   20be6:	f7e2 fad3 	bl	3190 <printk>
   20bea:	e7f4      	b.n	20bd6 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   20bec:	3401      	adds	r4, #1
   20bee:	2c04      	cmp	r4, #4
   20bf0:	dc18      	bgt.n	20c24 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   20bf2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   20bf6:	00d3      	lsls	r3, r2, #3
   20bf8:	461a      	mov	r2, r3
   20bfa:	442b      	add	r3, r5
   20bfc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   20c00:	f013 0f01 	tst.w	r3, #1
   20c04:	d0f2      	beq.n	20bec <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   20c06:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   20c0a:	4429      	add	r1, r5
   20c0c:	2328      	movs	r3, #40	; 0x28
   20c0e:	4a4c      	ldr	r2, [pc, #304]	; (20d40 <iface_cb+0x274>)
   20c10:	3118      	adds	r1, #24
   20c12:	200a      	movs	r0, #10
   20c14:	f7fe fce6 	bl	1f5e4 <net_addr_ntop>
		printk("\t%s\n",
   20c18:	4601      	mov	r1, r0
   20c1a:	484d      	ldr	r0, [pc, #308]	; (20d50 <iface_cb+0x284>)
   20c1c:	f7e2 fab8 	bl	3190 <printk>

		count++;
   20c20:	3601      	adds	r6, #1
   20c22:	e7e3      	b.n	20bec <iface_cb+0x120>
	}

	if (count == 0) {
   20c24:	b136      	cbz	r6, 20c34 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   20c26:	2102      	movs	r1, #2
   20c28:	484a      	ldr	r0, [pc, #296]	; (20d54 <iface_cb+0x288>)
   20c2a:	f7e2 fab1 	bl	3190 <printk>
	count = 0;
   20c2e:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   20c30:	4634      	mov	r4, r6
   20c32:	e009      	b.n	20c48 <iface_cb+0x17c>
		printk("\t<none>\n");
   20c34:	4845      	ldr	r0, [pc, #276]	; (20d4c <iface_cb+0x280>)
   20c36:	f7e2 faab 	bl	3190 <printk>
   20c3a:	e7f4      	b.n	20c26 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   20c3c:	4b41      	ldr	r3, [pc, #260]	; (20d44 <iface_cb+0x278>)
   20c3e:	4846      	ldr	r0, [pc, #280]	; (20d58 <iface_cb+0x28c>)
   20c40:	f7e2 faa6 	bl	3190 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   20c44:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   20c46:	3401      	adds	r4, #1
   20c48:	2c01      	cmp	r4, #1
   20c4a:	dc1e      	bgt.n	20c8a <iface_cb+0x1be>
		if (!prefix->is_used) {
   20c4c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   20c50:	0093      	lsls	r3, r2, #2
   20c52:	461a      	mov	r2, r3
   20c54:	442b      	add	r3, r5
   20c56:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   20c5a:	2b00      	cmp	r3, #0
   20c5c:	d0f3      	beq.n	20c46 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   20c5e:	0127      	lsls	r7, r4, #4
   20c60:	f502 7100 	add.w	r1, r2, #512	; 0x200
   20c64:	4429      	add	r1, r5
   20c66:	2328      	movs	r3, #40	; 0x28
   20c68:	4a35      	ldr	r2, [pc, #212]	; (20d40 <iface_cb+0x274>)
   20c6a:	3110      	adds	r1, #16
   20c6c:	200a      	movs	r0, #10
   20c6e:	f7fe fcb9 	bl	1f5e4 <net_addr_ntop>
   20c72:	4601      	mov	r1, r0
		       prefix->len,
   20c74:	1b3f      	subs	r7, r7, r4
   20c76:	00bb      	lsls	r3, r7, #2
   20c78:	442b      	add	r3, r5
   20c7a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   20c7e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   20c82:	2b00      	cmp	r3, #0
   20c84:	d0da      	beq.n	20c3c <iface_cb+0x170>
   20c86:	4b2c      	ldr	r3, [pc, #176]	; (20d38 <iface_cb+0x26c>)
   20c88:	e7d9      	b.n	20c3e <iface_cb+0x172>
	}

	if (count == 0) {
   20c8a:	b36e      	cbz	r6, 20ce8 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   20c8c:	2100      	movs	r1, #0
   20c8e:	4628      	mov	r0, r5
   20c90:	f7fc fade 	bl	1d250 <net_if_ipv6_router_find_default>
	if (router) {
   20c94:	4604      	mov	r4, r0
   20c96:	b188      	cbz	r0, 20cbc <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   20c98:	4830      	ldr	r0, [pc, #192]	; (20d5c <iface_cb+0x290>)
   20c9a:	f7e2 fa79 	bl	3190 <printk>
   20c9e:	2328      	movs	r3, #40	; 0x28
   20ca0:	4a27      	ldr	r2, [pc, #156]	; (20d40 <iface_cb+0x274>)
   20ca2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   20ca6:	200a      	movs	r0, #10
   20ca8:	f7fe fc9c 	bl	1f5e4 <net_addr_ntop>
   20cac:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   20cae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   20cb2:	b1eb      	cbz	r3, 20cf0 <iface_cb+0x224>
   20cb4:	4a20      	ldr	r2, [pc, #128]	; (20d38 <iface_cb+0x26c>)
   20cb6:	482a      	ldr	r0, [pc, #168]	; (20d60 <iface_cb+0x294>)
   20cb8:	f7e2 fa6a 	bl	3190 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   20cbc:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   20cc0:	4828      	ldr	r0, [pc, #160]	; (20d64 <iface_cb+0x298>)
   20cc2:	f7e2 fa65 	bl	3190 <printk>
	printk("IPv6 base reachable time : %d\n",
   20cc6:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   20cca:	4827      	ldr	r0, [pc, #156]	; (20d68 <iface_cb+0x29c>)
   20ccc:	f7e2 fa60 	bl	3190 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   20cd0:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   20cd4:	4825      	ldr	r0, [pc, #148]	; (20d6c <iface_cb+0x2a0>)
   20cd6:	f7e2 fa5b 	bl	3190 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   20cda:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   20cde:	4824      	ldr	r0, [pc, #144]	; (20d70 <iface_cb+0x2a4>)
   20ce0:	f7e2 fa56 	bl	3190 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   20ce4:	b005      	add	sp, #20
   20ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   20ce8:	4818      	ldr	r0, [pc, #96]	; (20d4c <iface_cb+0x280>)
   20cea:	f7e2 fa51 	bl	3190 <printk>
   20cee:	e7cd      	b.n	20c8c <iface_cb+0x1c0>
		printk("\t%s%s\n",
   20cf0:	4a14      	ldr	r2, [pc, #80]	; (20d44 <iface_cb+0x278>)
   20cf2:	e7e0      	b.n	20cb6 <iface_cb+0x1ea>
   20cf4:	0003387c 	.word	0x0003387c
   20cf8:	00033a2c 	.word	0x00033a2c
   20cfc:	200024a0 	.word	0x200024a0
   20d00:	000338a4 	.word	0x000338a4
   20d04:	000338b4 	.word	0x000338b4
   20d08:	000338c4 	.word	0x000338c4
   20d0c:	00033890 	.word	0x00033890
   20d10:	000337e4 	.word	0x000337e4
   20d14:	0003381c 	.word	0x0003381c
   20d18:	00033824 	.word	0x00033824
   20d1c:	0003382c 	.word	0x0003382c
   20d20:	00033810 	.word	0x00033810
   20d24:	0003383c 	.word	0x0003383c
   20d28:	00033858 	.word	0x00033858
   20d2c:	00033864 	.word	0x00033864
   20d30:	00033730 	.word	0x00033730
   20d34:	0003384c 	.word	0x0003384c
   20d38:	00033870 	.word	0x00033870
   20d3c:	000338e8 	.word	0x000338e8
   20d40:	200024b8 	.word	0x200024b8
   20d44:	00030afc 	.word	0x00030afc
   20d48:	00033904 	.word	0x00033904
   20d4c:	000338f8 	.word	0x000338f8
   20d50:	00033928 	.word	0x00033928
   20d54:	00033930 	.word	0x00033930
   20d58:	0003394c 	.word	0x0003394c
   20d5c:	00033958 	.word	0x00033958
   20d60:	00033970 	.word	0x00033970
   20d64:	00033978 	.word	0x00033978
   20d68:	00033998 	.word	0x00033998
   20d6c:	000339b8 	.word	0x000339b8
   20d70:	000339d8 	.word	0x000339d8

00020d74 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   20d74:	4770      	bx	lr

00020d76 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   20d76:	4770      	bx	lr

00020d78 <nbr_lookup>:
{
   20d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d7a:	460e      	mov	r6, r1
   20d7c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20d7e:	2400      	movs	r4, #0
   20d80:	e000      	b.n	20d84 <nbr_lookup+0xc>
   20d82:	3401      	adds	r4, #1
   20d84:	2c07      	cmp	r4, #7
   20d86:	dc11      	bgt.n	20dac <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   20d88:	4a0a      	ldr	r2, [pc, #40]	; (20db4 <nbr_lookup+0x3c>)
   20d8a:	01e3      	lsls	r3, r4, #7
   20d8c:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   20d8e:	5cd3      	ldrb	r3, [r2, r3]
   20d90:	2b00      	cmp	r3, #0
   20d92:	d0f6      	beq.n	20d82 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   20d94:	68ab      	ldr	r3, [r5, #8]
   20d96:	42b3      	cmp	r3, r6
   20d98:	d1f3      	bne.n	20d82 <nbr_lookup+0xa>
   20d9a:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20d9c:	2210      	movs	r2, #16
   20d9e:	4639      	mov	r1, r7
   20da0:	3004      	adds	r0, #4
   20da2:	f00b f8d7 	bl	2bf54 <memcmp>
   20da6:	2800      	cmp	r0, #0
   20da8:	d1eb      	bne.n	20d82 <nbr_lookup+0xa>
   20daa:	e000      	b.n	20dae <nbr_lookup+0x36>
	return NULL;
   20dac:	2500      	movs	r5, #0
}
   20dae:	4628      	mov	r0, r5
   20db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20db2:	bf00      	nop
   20db4:	2000bef0 	.word	0x2000bef0

00020db8 <nbr_clear_ns_pending>:
{
   20db8:	b510      	push	{r4, lr}
   20dba:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   20dbc:	303c      	adds	r0, #60	; 0x3c
   20dbe:	f00a fc99 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   20dc2:	6820      	ldr	r0, [r4, #0]
   20dc4:	b118      	cbz	r0, 20dce <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   20dc6:	f7fd ffc4 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   20dca:	2300      	movs	r3, #0
   20dcc:	6023      	str	r3, [r4, #0]
   20dce:	bd10      	pop	{r4, pc}

00020dd0 <ns_reply_timeout>:
{
   20dd0:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   20dd2:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20dd6:	2300      	movs	r3, #0
   20dd8:	2b07      	cmp	r3, #7
   20dda:	dc07      	bgt.n	20dec <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   20ddc:	4c0d      	ldr	r4, [pc, #52]	; (20e14 <ns_reply_timeout+0x44>)
   20dde:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   20de2:	68e2      	ldr	r2, [r4, #12]
   20de4:	4291      	cmp	r1, r2
   20de6:	d002      	beq.n	20dee <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20de8:	3301      	adds	r3, #1
   20dea:	e7f5      	b.n	20dd8 <ns_reply_timeout+0x8>
	return NULL;
   20dec:	2400      	movs	r4, #0
	if (!nbr) {
   20dee:	b184      	cbz	r4, 20e12 <ns_reply_timeout+0x42>
	if (!data->pending) {
   20df0:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   20df4:	b16b      	cbz	r3, 20e12 <ns_reply_timeout+0x42>
   20df6:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   20df8:	4618      	mov	r0, r3
   20dfa:	f7fd ffaa 	bl	1ed52 <net_pkt_unref>
	net_pkt_unref(data->pending);
   20dfe:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   20e02:	f7fd ffa6 	bl	1ed52 <net_pkt_unref>
	data->pending = NULL;
   20e06:	2300      	movs	r3, #0
   20e08:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   20e0c:	4620      	mov	r0, r4
   20e0e:	f7ff fda1 	bl	20954 <net_nbr_unref>
   20e12:	bd38      	pop	{r3, r4, r5, pc}
   20e14:	2000bef0 	.word	0x2000bef0

00020e18 <nbr_init>:
{
   20e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e1c:	b084      	sub	sp, #16
   20e1e:	4604      	mov	r4, r0
   20e20:	4616      	mov	r6, r2
   20e22:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   20e24:	23ff      	movs	r3, #255	; 0xff
   20e26:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   20e28:	6081      	str	r1, [r0, #8]
   20e2a:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   20e2c:	466d      	mov	r5, sp
   20e2e:	6810      	ldr	r0, [r2, #0]
   20e30:	6851      	ldr	r1, [r2, #4]
   20e32:	6892      	ldr	r2, [r2, #8]
   20e34:	68f3      	ldr	r3, [r6, #12]
   20e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20e38:	466d      	mov	r5, sp
   20e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20e3c:	6078      	str	r0, [r7, #4]
   20e3e:	60b9      	str	r1, [r7, #8]
   20e40:	60fa      	str	r2, [r7, #12]
   20e42:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   20e44:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   20e48:	4620      	mov	r0, r4
   20e4a:	f7ff fe1d 	bl	20a88 <ipv6_nbr_set_state>
   20e4e:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   20e50:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   20e54:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   20e56:	2200      	movs	r2, #0
   20e58:	601a      	str	r2, [r3, #0]
   20e5a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   20e5c:	4905      	ldr	r1, [pc, #20]	; (20e74 <nbr_init+0x5c>)
   20e5e:	3014      	adds	r0, #20
   20e60:	f00a fc2a 	bl	2b6b8 <k_delayed_work_init>
   20e64:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   20e66:	4904      	ldr	r1, [pc, #16]	; (20e78 <nbr_init+0x60>)
   20e68:	303c      	adds	r0, #60	; 0x3c
   20e6a:	f00a fc25 	bl	2b6b8 <k_delayed_work_init>
}
   20e6e:	b004      	add	sp, #16
   20e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e74:	000229a5 	.word	0x000229a5
   20e78:	00020dd1 	.word	0x00020dd1

00020e7c <nbr_new>:
{
   20e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e7e:	b083      	sub	sp, #12
   20e80:	4605      	mov	r5, r0
   20e82:	460e      	mov	r6, r1
   20e84:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   20e86:	4807      	ldr	r0, [pc, #28]	; (20ea4 <nbr_new+0x28>)
   20e88:	f7ff fd72 	bl	20970 <net_nbr_get>
	if (!nbr) {
   20e8c:	4604      	mov	r4, r0
   20e8e:	b128      	cbz	r0, 20e9c <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   20e90:	9700      	str	r7, [sp, #0]
   20e92:	2301      	movs	r3, #1
   20e94:	4632      	mov	r2, r6
   20e96:	4629      	mov	r1, r5
   20e98:	f7ff ffbe 	bl	20e18 <nbr_init>
}
   20e9c:	4620      	mov	r0, r4
   20e9e:	b003      	add	sp, #12
   20ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20ea2:	bf00      	nop
   20ea4:	2000bee4 	.word	0x2000bee4

00020ea8 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   20ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20eac:	b084      	sub	sp, #16
   20eae:	4604      	mov	r4, r0
   20eb0:	460e      	mov	r6, r1
   20eb2:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   20eb4:	480c      	ldr	r0, [pc, #48]	; (20ee8 <nbr_new+0x40>)
   20eb6:	f7ff fd5b 	bl	20970 <net_nbr_get>

	if (!nbr) {
   20eba:	4605      	mov	r5, r0
   20ebc:	b180      	cbz	r0, 20ee0 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   20ebe:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   20ec0:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   20ec2:	466c      	mov	r4, sp
   20ec4:	6830      	ldr	r0, [r6, #0]
   20ec6:	6871      	ldr	r1, [r6, #4]
   20ec8:	68b2      	ldr	r2, [r6, #8]
   20eca:	68f3      	ldr	r3, [r6, #12]
   20ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20ece:	466c      	mov	r4, sp
   20ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20ed2:	6138      	str	r0, [r7, #16]
   20ed4:	6179      	str	r1, [r7, #20]
   20ed6:	61ba      	str	r2, [r7, #24]
   20ed8:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   20eda:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   20edc:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   20ee0:	4628      	mov	r0, r5
   20ee2:	b004      	add	sp, #16
   20ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20ee8:	2000c308 	.word	0x2000c308

00020eec <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   20eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ef0:	4682      	mov	sl, r0
	return pkt->forwarding;
   20ef2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   20ef6:	f013 0f04 	tst.w	r3, #4
   20efa:	d002      	beq.n	20f02 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   20efc:	4650      	mov	r0, sl
   20efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   20f02:	6940      	ldr	r0, [r0, #20]
   20f04:	6843      	ldr	r3, [r0, #4]
   20f06:	689b      	ldr	r3, [r3, #8]
   20f08:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   20f0a:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   20f0e:	4283      	cmp	r3, r0
   20f10:	d0f4      	beq.n	20efc <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   20f12:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   20f16:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   20f1a:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   20f1c:	2400      	movs	r4, #0
   20f1e:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   20f22:	46a1      	mov	r9, r4
	pos = 0;
   20f24:	46a0      	mov	r8, r4
	while (orig_frag) {
   20f26:	e020      	b.n	20f6a <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   20f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20f2c:	4650      	mov	r0, sl
   20f2e:	f7fd febd 	bl	1ecac <net_pkt_get_frag>
   20f32:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   20f34:	4601      	mov	r1, r0
   20f36:	4650      	mov	r0, sl
   20f38:	f7fd ff35 	bl	1eda6 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   20f3c:	f109 0008 	add.w	r0, r9, #8
   20f40:	f7fb fa4d 	bl	1c3de <net_buf_simple_tailroom>
   20f44:	b284      	uxth	r4, r0
   20f46:	e014      	b.n	20f72 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   20f48:	4621      	mov	r1, r4
   20f4a:	f109 0008 	add.w	r0, r9, #8
   20f4e:	f7fb f9dd 	bl	1c30c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   20f52:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   20f54:	4622      	mov	r2, r4
   20f56:	4441      	add	r1, r8
   20f58:	f7df f9b2 	bl	2c0 <memcpy>
			copy_len -= room_len;
   20f5c:	1b36      	subs	r6, r6, r4
   20f5e:	b2b6      	uxth	r6, r6
			pos += room_len;
   20f60:	4444      	add	r4, r8
   20f62:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   20f66:	2400      	movs	r4, #0
		if (!copy_len) {
   20f68:	b19e      	cbz	r6, 20f92 <update_ll_reserve+0xa6>
	while (orig_frag) {
   20f6a:	2f00      	cmp	r7, #0
   20f6c:	d0c6      	beq.n	20efc <update_ll_reserve+0x10>
		if (!room_len) {
   20f6e:	2c00      	cmp	r4, #0
   20f70:	d0da      	beq.n	20f28 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   20f72:	42b4      	cmp	r4, r6
   20f74:	d3e8      	bcc.n	20f48 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   20f76:	4631      	mov	r1, r6
   20f78:	f109 0008 	add.w	r0, r9, #8
   20f7c:	f7fb f9c6 	bl	1c30c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   20f80:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   20f82:	4632      	mov	r2, r6
   20f84:	4441      	add	r1, r8
   20f86:	f7df f99b 	bl	2c0 <memcpy>
			room_len -= copy_len;
   20f8a:	1ba4      	subs	r4, r4, r6
   20f8c:	b2a4      	uxth	r4, r4
			copy_len = 0;
   20f8e:	2600      	movs	r6, #0
   20f90:	e7ea      	b.n	20f68 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   20f92:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   20f94:	2300      	movs	r3, #0
   20f96:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   20f98:	4638      	mov	r0, r7
   20f9a:	f7fd fed4 	bl	1ed46 <net_pkt_frag_unref>
			if (!orig_frag) {
   20f9e:	2d00      	cmp	r5, #0
   20fa0:	d0ac      	beq.n	20efc <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   20fa2:	462f      	mov	r7, r5
			pos = 0;
   20fa4:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   20fa6:	89ae      	ldrh	r6, [r5, #12]
   20fa8:	e7df      	b.n	20f6a <update_ll_reserve+0x7e>

00020faa <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   20faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fac:	4604      	mov	r4, r0
   20fae:	460e      	mov	r6, r1
   20fb0:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   20fb2:	6880      	ldr	r0, [r0, #8]
   20fb4:	212c      	movs	r1, #44	; 0x2c
   20fb6:	3008      	adds	r0, #8
   20fb8:	f7fb f9a8 	bl	1c30c <net_buf_simple_add>
	return pkt->frags->data;
   20fbc:	68a3      	ldr	r3, [r4, #8]
   20fbe:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   20fc0:	2260      	movs	r2, #96	; 0x60
   20fc2:	701a      	strb	r2, [r3, #0]
   20fc4:	68a3      	ldr	r3, [r4, #8]
   20fc6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   20fc8:	2500      	movs	r5, #0
   20fca:	705d      	strb	r5, [r3, #1]
   20fcc:	68a3      	ldr	r3, [r4, #8]
   20fce:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   20fd0:	709d      	strb	r5, [r3, #2]
   20fd2:	70dd      	strb	r5, [r3, #3]
   20fd4:	68a3      	ldr	r3, [r4, #8]
   20fd6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   20fd8:	711d      	strb	r5, [r3, #4]
   20fda:	68a3      	ldr	r3, [r4, #8]
   20fdc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   20fde:	3604      	adds	r6, #4
   20fe0:	715e      	strb	r6, [r3, #5]
   20fe2:	68a3      	ldr	r3, [r4, #8]
   20fe4:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   20fe6:	223a      	movs	r2, #58	; 0x3a
   20fe8:	719a      	strb	r2, [r3, #6]
   20fea:	68a3      	ldr	r3, [r4, #8]
   20fec:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   20fee:	22ff      	movs	r2, #255	; 0xff
   20ff0:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   20ff2:	4620      	mov	r0, r4
   20ff4:	f7fe f986 	bl	1f304 <net_pkt_icmp_data>
   20ff8:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   20ffa:	4620      	mov	r0, r4
   20ffc:	f7fe f982 	bl	1f304 <net_pkt_icmp_data>
   21000:	7045      	strb	r5, [r0, #1]
   21002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021004 <nbr_free>:
{
   21004:	b538      	push	{r3, r4, r5, lr}
   21006:	4604      	mov	r4, r0
   21008:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   2100a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2100e:	f00a fb71 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   21012:	6828      	ldr	r0, [r5, #0]
   21014:	b118      	cbz	r0, 2101e <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   21016:	f7fd fe9c 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   2101a:	2300      	movs	r3, #0
   2101c:	602b      	str	r3, [r5, #0]
   2101e:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21020:	3014      	adds	r0, #20
   21022:	f00a fb67 	bl	2b6f4 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21026:	4620      	mov	r0, r4
   21028:	f7ff fc94 	bl	20954 <net_nbr_unref>
   2102c:	bd38      	pop	{r3, r4, r5, pc}
	...

00021030 <net_ipv6_nbr_state2str>:
	switch (state) {
   21030:	2805      	cmp	r0, #5
   21032:	d80e      	bhi.n	21052 <net_ipv6_nbr_state2str+0x22>
   21034:	e8df f000 	tbb	[pc, r0]
   21038:	07050f03 	.word	0x07050f03
   2103c:	0b09      	.short	0x0b09
		return "incomplete";
   2103e:	4807      	ldr	r0, [pc, #28]	; (2105c <net_ipv6_nbr_state2str+0x2c>)
   21040:	4770      	bx	lr
		return "stale";
   21042:	4807      	ldr	r0, [pc, #28]	; (21060 <net_ipv6_nbr_state2str+0x30>)
   21044:	4770      	bx	lr
		return "delay";
   21046:	4807      	ldr	r0, [pc, #28]	; (21064 <net_ipv6_nbr_state2str+0x34>)
   21048:	4770      	bx	lr
		return "probe";
   2104a:	4807      	ldr	r0, [pc, #28]	; (21068 <net_ipv6_nbr_state2str+0x38>)
   2104c:	4770      	bx	lr
		return "static";
   2104e:	4807      	ldr	r0, [pc, #28]	; (2106c <net_ipv6_nbr_state2str+0x3c>)
   21050:	4770      	bx	lr
	return "<invalid state>";
   21052:	4807      	ldr	r0, [pc, #28]	; (21070 <net_ipv6_nbr_state2str+0x40>)
   21054:	4770      	bx	lr
		return "reachable";
   21056:	4807      	ldr	r0, [pc, #28]	; (21074 <net_ipv6_nbr_state2str+0x44>)
}
   21058:	4770      	bx	lr
   2105a:	bf00      	nop
   2105c:	000336f8 	.word	0x000336f8
   21060:	00033710 	.word	0x00033710
   21064:	00033718 	.word	0x00033718
   21068:	00033720 	.word	0x00033720
   2106c:	00033728 	.word	0x00033728
   21070:	00033730 	.word	0x00033730
   21074:	00033704 	.word	0x00033704

00021078 <net_ipv6_nbr_foreach>:
{
   21078:	b500      	push	{lr}
   2107a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   2107c:	9000      	str	r0, [sp, #0]
   2107e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   21080:	4669      	mov	r1, sp
   21082:	4803      	ldr	r0, [pc, #12]	; (21090 <net_ipv6_nbr_foreach+0x18>)
   21084:	f7fc fc3a 	bl	1d8fc <net_if_foreach>
}
   21088:	b003      	add	sp, #12
   2108a:	f85d fb04 	ldr.w	pc, [sp], #4
   2108e:	bf00      	nop
   21090:	00020a9d 	.word	0x00020a9d

00021094 <net_ipv6_nbr_rm>:
{
   21094:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   21096:	460a      	mov	r2, r1
   21098:	4601      	mov	r1, r0
   2109a:	480d      	ldr	r0, [pc, #52]	; (210d0 <net_ipv6_nbr_rm+0x3c>)
   2109c:	f7ff fe6c 	bl	20d78 <nbr_lookup>
	if (!nbr) {
   210a0:	b1a0      	cbz	r0, 210cc <net_ipv6_nbr_rm+0x38>
   210a2:	4604      	mov	r4, r0
   210a4:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   210a6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   210aa:	f00a fb23 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   210ae:	6828      	ldr	r0, [r5, #0]
   210b0:	b118      	cbz	r0, 210ba <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   210b2:	f7fd fe4e 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   210b6:	2300      	movs	r3, #0
   210b8:	602b      	str	r3, [r5, #0]
   210ba:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   210bc:	3014      	adds	r0, #20
   210be:	f00a fb19 	bl	2b6f4 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   210c2:	4620      	mov	r0, r4
   210c4:	f7ff fc46 	bl	20954 <net_nbr_unref>
	return true;
   210c8:	2001      	movs	r0, #1
   210ca:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   210cc:	2000      	movs	r0, #0
}
   210ce:	bd38      	pop	{r3, r4, r5, pc}
   210d0:	2000bee4 	.word	0x2000bee4

000210d4 <net_ipv6_unspecified_address>:
}
   210d4:	4800      	ldr	r0, [pc, #0]	; (210d8 <net_ipv6_unspecified_address+0x4>)
   210d6:	4770      	bx	lr
   210d8:	000336e8 	.word	0x000336e8

000210dc <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   210dc:	b570      	push	{r4, r5, r6, lr}
   210de:	b082      	sub	sp, #8
   210e0:	4604      	mov	r4, r0
   210e2:	460e      	mov	r6, r1
   210e4:	461d      	mov	r5, r3
   210e6:	a902      	add	r1, sp, #8
   210e8:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   210ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   210f0:	460a      	mov	r2, r1
   210f2:	2101      	movs	r1, #1
   210f4:	f7fd ff65 	bl	1efc2 <net_pkt_append>
   210f8:	aa02      	add	r2, sp, #8
   210fa:	2300      	movs	r3, #0
   210fc:	f802 3d04 	strb.w	r3, [r2, #-4]!
   21100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21104:	2101      	movs	r1, #1
   21106:	4620      	mov	r0, r4
   21108:	f7fd ff5b 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   2110c:	022b      	lsls	r3, r5, #8
   2110e:	aa02      	add	r2, sp, #8
   21110:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   21114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21118:	2102      	movs	r1, #2
   2111a:	4620      	mov	r0, r4
   2111c:	f7fd ff51 	bl	1efc2 <net_pkt_append>
   21120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21124:	4632      	mov	r2, r6
   21126:	2110      	movs	r1, #16
   21128:	4620      	mov	r0, r4
   2112a:	f7fd ff4a 	bl	1efc2 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   2112e:	b915      	cbnz	r5, 21136 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   21130:	4620      	mov	r0, r4
   21132:	b002      	add	sp, #8
   21134:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   21136:	f7ff ffcd 	bl	210d4 <net_ipv6_unspecified_address>
   2113a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2113e:	4602      	mov	r2, r0
   21140:	2110      	movs	r1, #16
   21142:	4620      	mov	r0, r4
   21144:	f7fd ff3d 	bl	1efc2 <net_pkt_append>
   21148:	e7f2      	b.n	21130 <create_mldv2+0x54>

0002114a <net_ipv6_create_raw>:
{
   2114a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2114e:	b088      	sub	sp, #32
   21150:	4604      	mov	r4, r0
   21152:	460e      	mov	r6, r1
   21154:	4617      	mov	r7, r2
   21156:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   21158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2115c:	f7fd fda6 	bl	1ecac <net_pkt_get_frag>
   21160:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   21162:	4601      	mov	r1, r0
   21164:	4620      	mov	r0, r4
   21166:	f7fd fe2b 	bl	1edc0 <net_pkt_frag_insert>
	return pkt->frags->data;
   2116a:	68a3      	ldr	r3, [r4, #8]
   2116c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   2116e:	2260      	movs	r2, #96	; 0x60
   21170:	701a      	strb	r2, [r3, #0]
   21172:	68a3      	ldr	r3, [r4, #8]
   21174:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   21176:	2300      	movs	r3, #0
   21178:	7053      	strb	r3, [r2, #1]
   2117a:	68a2      	ldr	r2, [r4, #8]
   2117c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   2117e:	7093      	strb	r3, [r2, #2]
   21180:	70d3      	strb	r3, [r2, #3]
   21182:	68a2      	ldr	r2, [r4, #8]
   21184:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   21186:	7193      	strb	r3, [r2, #6]
   21188:	68a3      	ldr	r3, [r4, #8]
   2118a:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   2118c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   21190:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   21192:	68a3      	ldr	r3, [r4, #8]
   21194:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   21196:	79da      	ldrb	r2, [r3, #7]
   21198:	b912      	cbnz	r2, 211a0 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   2119a:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   2119e:	71da      	strb	r2, [r3, #7]
   211a0:	68a3      	ldr	r3, [r4, #8]
   211a2:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   211a6:	466d      	mov	r5, sp
   211a8:	6838      	ldr	r0, [r7, #0]
   211aa:	6879      	ldr	r1, [r7, #4]
   211ac:	68ba      	ldr	r2, [r7, #8]
   211ae:	68fb      	ldr	r3, [r7, #12]
   211b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   211b2:	466d      	mov	r5, sp
   211b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   211b6:	f8ce 0018 	str.w	r0, [lr, #24]
   211ba:	f8ce 101c 	str.w	r1, [lr, #28]
   211be:	f8ce 2020 	str.w	r2, [lr, #32]
   211c2:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   211c6:	68a3      	ldr	r3, [r4, #8]
   211c8:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   211ca:	6830      	ldr	r0, [r6, #0]
   211cc:	6871      	ldr	r1, [r6, #4]
   211ce:	68b2      	ldr	r2, [r6, #8]
   211d0:	68f3      	ldr	r3, [r6, #12]
   211d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   211d4:	ad04      	add	r5, sp, #16
   211d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   211d8:	60b8      	str	r0, [r7, #8]
   211da:	60f9      	str	r1, [r7, #12]
   211dc:	613a      	str	r2, [r7, #16]
   211de:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   211e0:	2300      	movs	r3, #0
   211e2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   211e6:	68a3      	ldr	r3, [r4, #8]
   211e8:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   211ea:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   211ee:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   211f0:	2128      	movs	r1, #40	; 0x28
   211f2:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   211f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   211fa:	220a      	movs	r2, #10
   211fc:	f362 03c6 	bfi	r3, r2, #3, #4
   21200:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   21204:	f108 0008 	add.w	r0, r8, #8
   21208:	f7fb f880 	bl	1c30c <net_buf_simple_add>
}
   2120c:	4620      	mov	r0, r4
   2120e:	b008      	add	sp, #32
   21210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021214 <net_ipv6_create>:
{
   21214:	b5f0      	push	{r4, r5, r6, r7, lr}
   21216:	b083      	sub	sp, #12
   21218:	4605      	mov	r5, r0
   2121a:	460e      	mov	r6, r1
   2121c:	461f      	mov	r7, r3
	if (!src) {
   2121e:	4614      	mov	r4, r2
   21220:	b14a      	cbz	r2, 21236 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21222:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21224:	b94b      	cbnz	r3, 2123a <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21226:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21228:	b9fb      	cbnz	r3, 2126a <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2122a:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2122c:	b9fb      	cbnz	r3, 2126e <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2122e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21230:	b1fb      	cbz	r3, 21272 <net_ipv6_create+0x5e>
   21232:	2300      	movs	r3, #0
   21234:	e002      	b.n	2123c <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   21236:	68c4      	ldr	r4, [r0, #12]
   21238:	e7f3      	b.n	21222 <net_ipv6_create+0xe>
   2123a:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   2123c:	b9db      	cbnz	r3, 21276 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   2123e:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   21240:	2bff      	cmp	r3, #255	; 0xff
   21242:	d018      	beq.n	21276 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   21244:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   21248:	f7fc fb3c 	bl	1d8c4 <net_if_get_by_index>
   2124c:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   2124e:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   21252:	f012 0f40 	tst.w	r2, #64	; 0x40
   21256:	d114      	bne.n	21282 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   21258:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   2125a:	9200      	str	r2, [sp, #0]
   2125c:	463a      	mov	r2, r7
   2125e:	4621      	mov	r1, r4
   21260:	4630      	mov	r0, r6
   21262:	f7ff ff72 	bl	2114a <net_ipv6_create_raw>
}
   21266:	b003      	add	sp, #12
   21268:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2126a:	2300      	movs	r3, #0
   2126c:	e7e6      	b.n	2123c <net_ipv6_create+0x28>
   2126e:	2300      	movs	r3, #0
   21270:	e7e4      	b.n	2123c <net_ipv6_create+0x28>
   21272:	2301      	movs	r3, #1
   21274:	e7e2      	b.n	2123c <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   21276:	4639      	mov	r1, r7
   21278:	6970      	ldr	r0, [r6, #20]
   2127a:	f7fc f8cf 	bl	1d41c <net_if_ipv6_select_src_addr>
   2127e:	4604      	mov	r4, r0
   21280:	e7e0      	b.n	21244 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   21282:	2206      	movs	r2, #6
   21284:	e7e9      	b.n	2125a <net_ipv6_create+0x46>

00021286 <net_ipv6_finalize_raw>:
{
   21286:	b538      	push	{r3, r4, r5, lr}
   21288:	4605      	mov	r5, r0
   2128a:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   2128c:	f7fd fe52 	bl	1ef34 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   21290:	68a8      	ldr	r0, [r5, #8]
   21292:	4603      	mov	r3, r0
	size_t bytes = 0;
   21294:	2200      	movs	r2, #0
   21296:	e002      	b.n	2129e <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   21298:	8999      	ldrh	r1, [r3, #12]
   2129a:	440a      	add	r2, r1
		buf = buf->frags;
   2129c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2129e:	2b00      	cmp	r3, #0
   212a0:	d1fa      	bne.n	21298 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   212a2:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   212a4:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   212a6:	0a11      	lsrs	r1, r2, #8
   212a8:	7119      	strb	r1, [r3, #4]
   212aa:	68ab      	ldr	r3, [r5, #8]
   212ac:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   212ae:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   212b0:	2c11      	cmp	r4, #17
   212b2:	d005      	beq.n	212c0 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   212b4:	2c06      	cmp	r4, #6
   212b6:	d008      	beq.n	212ca <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   212b8:	2c3a      	cmp	r4, #58	; 0x3a
   212ba:	d00b      	beq.n	212d4 <net_ipv6_finalize_raw+0x4e>
}
   212bc:	2000      	movs	r0, #0
   212be:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   212c0:	68a9      	ldr	r1, [r5, #8]
   212c2:	4628      	mov	r0, r5
   212c4:	f003 fa9b 	bl	247fe <net_udp_set_chksum>
   212c8:	e7f8      	b.n	212bc <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   212ca:	68a9      	ldr	r1, [r5, #8]
   212cc:	4628      	mov	r0, r5
   212ce:	f004 f8da 	bl	25486 <net_tcp_set_chksum>
   212d2:	e7f3      	b.n	212bc <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   212d4:	68a9      	ldr	r1, [r5, #8]
   212d6:	4628      	mov	r0, r5
   212d8:	f7fe fdf2 	bl	1fec0 <net_icmpv6_set_chksum>
   212dc:	e7ee      	b.n	212bc <net_ipv6_finalize_raw+0x36>
	...

000212e0 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   212e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   212e4:	b08d      	sub	sp, #52	; 0x34
   212e6:	4680      	mov	r8, r0
   212e8:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   212ea:	f240 23ff 	movw	r3, #767	; 0x2ff
   212ee:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   212f2:	2500      	movs	r5, #0
   212f4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   212f8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   212fc:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21300:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21304:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   21308:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   2130c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   21310:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21314:	6843      	ldr	r3, [r0, #4]
   21316:	689b      	ldr	r3, [r3, #8]
   21318:	a908      	add	r1, sp, #32
   2131a:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   2131c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21320:	f7fd fca6 	bl	1ec70 <net_pkt_get_reserve_tx>
   21324:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   21326:	a908      	add	r1, sp, #32
   21328:	4640      	mov	r0, r8
   2132a:	f7fc f877 	bl	1d41c <net_if_ipv6_select_src_addr>
   2132e:	9500      	str	r5, [sp, #0]
   21330:	4643      	mov	r3, r8
   21332:	aa08      	add	r2, sp, #32
   21334:	4601      	mov	r1, r0
   21336:	4620      	mov	r0, r4
   21338:	f7ff ff07 	bl	2114a <net_ipv6_create_raw>
   2133c:	4604      	mov	r4, r0
   2133e:	6883      	ldr	r3, [r0, #8]
   21340:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   21342:	2601      	movs	r6, #1
   21344:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   21346:	6883      	ldr	r3, [r0, #8]
   21348:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   2134a:	87c3      	strh	r3, [r0, #62]	; 0x3e
   2134c:	aa0c      	add	r2, sp, #48	; 0x30
   2134e:	233a      	movs	r3, #58	; 0x3a
   21350:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   21354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21358:	4631      	mov	r1, r6
   2135a:	f7fd fe32 	bl	1efc2 <net_pkt_append>
   2135e:	aa0c      	add	r2, sp, #48	; 0x30
   21360:	f802 5d16 	strb.w	r5, [r2, #-22]!
   21364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21368:	4631      	mov	r1, r6
   2136a:	4620      	mov	r0, r4
   2136c:	f7fd fe29 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   21370:	af0c      	add	r7, sp, #48	; 0x30
   21372:	f240 2305 	movw	r3, #517	; 0x205
   21376:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   2137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2137e:	463a      	mov	r2, r7
   21380:	2102      	movs	r1, #2
   21382:	4620      	mov	r0, r4
   21384:	f7fd fe1d 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   21388:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2138c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21390:	463a      	mov	r2, r7
   21392:	2102      	movs	r1, #2
   21394:	4620      	mov	r0, r4
   21396:	f7fd fe14 	bl	1efc2 <net_pkt_append>
   2139a:	aa0c      	add	r2, sp, #48	; 0x30
   2139c:	f802 5d17 	strb.w	r5, [r2, #-23]!
   213a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213a4:	4631      	mov	r1, r6
   213a6:	4620      	mov	r0, r4
   213a8:	f7fd fe0b 	bl	1efc2 <net_pkt_append>
   213ac:	aa0c      	add	r2, sp, #48	; 0x30
   213ae:	f802 5d18 	strb.w	r5, [r2, #-24]!
   213b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213b6:	4631      	mov	r1, r6
   213b8:	4620      	mov	r0, r4
   213ba:	f7fd fe02 	bl	1efc2 <net_pkt_append>
   213be:	aa0c      	add	r2, sp, #48	; 0x30
   213c0:	238f      	movs	r3, #143	; 0x8f
   213c2:	f802 3d19 	strb.w	r3, [r2, #-25]!
   213c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213ca:	4631      	mov	r1, r6
   213cc:	4620      	mov	r0, r4
   213ce:	f7fd fdf8 	bl	1efc2 <net_pkt_append>
   213d2:	aa0c      	add	r2, sp, #48	; 0x30
   213d4:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   213d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213dc:	4631      	mov	r1, r6
   213de:	4620      	mov	r0, r4
   213e0:	f7fd fdef 	bl	1efc2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   213e4:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   213e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   213ec:	463a      	mov	r2, r7
   213ee:	2102      	movs	r1, #2
   213f0:	4620      	mov	r0, r4
   213f2:	f7fd fde6 	bl	1efc2 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   213f6:	68a3      	ldr	r3, [r4, #8]
   213f8:	2234      	movs	r2, #52	; 0x34
   213fa:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   213fc:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21400:	f898 3015 	ldrb.w	r3, [r8, #21]
   21404:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21408:	f898 3015 	ldrb.w	r3, [r8, #21]
   2140c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   21410:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   21414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21418:	463a      	mov	r2, r7
   2141a:	2102      	movs	r1, #2
   2141c:	4620      	mov	r0, r4
   2141e:	f7fd fdd0 	bl	1efc2 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   21422:	4649      	mov	r1, r9
   21424:	4620      	mov	r0, r4
   21426:	f7fd fcbe 	bl	1eda6 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   2142a:	4629      	mov	r1, r5
   2142c:	4620      	mov	r0, r4
   2142e:	f7ff ff2a 	bl	21286 <net_ipv6_finalize_raw>
	if (ret < 0) {
   21432:	1e05      	subs	r5, r0, #0
   21434:	db35      	blt.n	214a2 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   21436:	2308      	movs	r3, #8
   21438:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   2143c:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   2143e:	213a      	movs	r1, #58	; 0x3a
   21440:	4620      	mov	r0, r4
   21442:	f7fe faf0 	bl	1fa26 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   21446:	ea6f 2020 	mvn.w	r0, r0, asr #8
   2144a:	b2c5      	uxtb	r5, r0
   2144c:	213a      	movs	r1, #58	; 0x3a
   2144e:	4620      	mov	r0, r4
   21450:	f7fe fae9 	bl	1fa26 <net_calc_chksum>
   21454:	43c0      	mvns	r0, r0
   21456:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   2145a:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   2145c:	0a03      	lsrs	r3, r0, #8
   2145e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   21462:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   21466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2146a:	9302      	str	r3, [sp, #8]
   2146c:	ab07      	add	r3, sp, #28
   2146e:	9301      	str	r3, [sp, #4]
   21470:	2302      	movs	r3, #2
   21472:	9300      	str	r3, [sp, #0]
   21474:	f10d 031e 	add.w	r3, sp, #30
   21478:	2232      	movs	r2, #50	; 0x32
   2147a:	4631      	mov	r1, r6
   2147c:	4620      	mov	r0, r4
   2147e:	f7fd fe58 	bl	1f132 <net_pkt_write>

	ret = net_send_data(pkt);
   21482:	4620      	mov	r0, r4
   21484:	f7fb f864 	bl	1c550 <net_send_data>
	if (ret < 0) {
   21488:	1e05      	subs	r5, r0, #0
   2148a:	db0a      	blt.n	214a2 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   2148c:	4b0d      	ldr	r3, [pc, #52]	; (214c4 <send_mldv2_raw+0x1e4>)
   2148e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   21490:	3201      	adds	r2, #1
   21492:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   21494:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   21498:	3201      	adds	r2, #1
   2149a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   2149e:	2500      	movs	r5, #0
   214a0:	e00b      	b.n	214ba <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   214a2:	4620      	mov	r0, r4
   214a4:	f7fd fc55 	bl	1ed52 <net_pkt_unref>
	net_stats.icmp.drop++;
   214a8:	4b06      	ldr	r3, [pc, #24]	; (214c4 <send_mldv2_raw+0x1e4>)
   214aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   214ac:	3201      	adds	r2, #1
   214ae:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   214b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   214b4:	3201      	adds	r2, #1
   214b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   214ba:	4628      	mov	r0, r5
   214bc:	b00d      	add	sp, #52	; 0x34
   214be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   214c2:	bf00      	nop
   214c4:	20002ae0 	.word	0x20002ae0

000214c8 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   214c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   214ca:	b083      	sub	sp, #12
   214cc:	4605      	mov	r5, r0
   214ce:	460e      	mov	r6, r1
   214d0:	4617      	mov	r7, r2
   214d2:	6843      	ldr	r3, [r0, #4]
   214d4:	689b      	ldr	r3, [r3, #8]
   214d6:	2100      	movs	r1, #0
   214d8:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   214da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   214de:	f7fd fbc7 	bl	1ec70 <net_pkt_get_reserve_tx>
   214e2:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   214e4:	aa02      	add	r2, sp, #8
   214e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   214ea:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   214ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   214f2:	2102      	movs	r1, #2
   214f4:	f7fd fd65 	bl	1efc2 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   214f8:	2301      	movs	r3, #1
   214fa:	463a      	mov	r2, r7
   214fc:	4631      	mov	r1, r6
   214fe:	4620      	mov	r0, r4
   21500:	f7ff fdec 	bl	210dc <create_mldv2>
   21504:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   21506:	6881      	ldr	r1, [r0, #8]
   21508:	4628      	mov	r0, r5
   2150a:	f7ff fee9 	bl	212e0 <send_mldv2_raw>
   2150e:	4605      	mov	r5, r0

	pkt->frags = NULL;
   21510:	2300      	movs	r3, #0
   21512:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   21514:	4620      	mov	r0, r4
   21516:	f7fd fc1c 	bl	1ed52 <net_pkt_unref>

	return ret;
}
   2151a:	4628      	mov	r0, r5
   2151c:	b003      	add	sp, #12
   2151e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021520 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   21520:	b5f0      	push	{r4, r5, r6, r7, lr}
   21522:	b087      	sub	sp, #28
   21524:	4605      	mov	r5, r0
   21526:	6843      	ldr	r3, [r0, #4]
   21528:	689b      	ldr	r3, [r3, #8]
   2152a:	2100      	movs	r1, #0
   2152c:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2152e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21532:	f7fd fb9d 	bl	1ec70 <net_pkt_get_reserve_tx>
   21536:	4606      	mov	r6, r0
   21538:	2400      	movs	r4, #0
   2153a:	aa06      	add	r2, sp, #24
   2153c:	f802 4d04 	strb.w	r4, [r2, #-4]!
   21540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21544:	2101      	movs	r1, #1
   21546:	f7fd fd3c 	bl	1efc2 <net_pkt_append>
	int i, count = 0;
   2154a:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2154c:	e000      	b.n	21550 <send_mld_report+0x30>
   2154e:	3401      	adds	r4, #1
   21550:	2c04      	cmp	r4, #4
   21552:	dc1e      	bgt.n	21592 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   21554:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   21558:	00d3      	lsls	r3, r2, #3
   2155a:	442b      	add	r3, r5
   2155c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   21560:	f013 0f01 	tst.w	r3, #1
   21564:	d0f3      	beq.n	2154e <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   21566:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2156a:	00d3      	lsls	r3, r2, #3
   2156c:	461a      	mov	r2, r3
   2156e:	442b      	add	r3, r5
   21570:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   21574:	f013 0f02 	tst.w	r3, #2
   21578:	d0e9      	beq.n	2154e <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   2157a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   2157e:	4429      	add	r1, r5
   21580:	2300      	movs	r3, #0
   21582:	2202      	movs	r2, #2
   21584:	3118      	adds	r1, #24
   21586:	4630      	mov	r0, r6
   21588:	f7ff fda8 	bl	210dc <create_mldv2>
   2158c:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   2158e:	3701      	adds	r7, #1
   21590:	e7dd      	b.n	2154e <send_mld_report+0x2e>
	}

	if (count > 0) {
   21592:	2f00      	cmp	r7, #0
   21594:	dd16      	ble.n	215c4 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   21596:	68b1      	ldr	r1, [r6, #8]
   21598:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   2159c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215a0:	9302      	str	r3, [sp, #8]
   215a2:	f10d 0315 	add.w	r3, sp, #21
   215a6:	9301      	str	r3, [sp, #4]
   215a8:	2301      	movs	r3, #1
   215aa:	9300      	str	r3, [sp, #0]
   215ac:	f10d 0316 	add.w	r3, sp, #22
   215b0:	2200      	movs	r2, #0
   215b2:	4630      	mov	r0, r6
   215b4:	f7fd fdbd 	bl	1f132 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   215b8:	68b1      	ldr	r1, [r6, #8]
   215ba:	4628      	mov	r0, r5
   215bc:	f7ff fe90 	bl	212e0 <send_mldv2_raw>

		pkt->frags = NULL;
   215c0:	2300      	movs	r3, #0
   215c2:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   215c4:	4630      	mov	r0, r6
   215c6:	f7fd fbc4 	bl	1ed52 <net_pkt_unref>
}
   215ca:	b007      	add	sp, #28
   215cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000215d0 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   215d0:	b570      	push	{r4, r5, r6, lr}
   215d2:	b08a      	sub	sp, #40	; 0x28
   215d4:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   215d6:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   215d8:	2200      	movs	r2, #0
   215da:	e002      	b.n	215e2 <handle_mld_query+0x12>
		bytes += buf->len;
   215dc:	8999      	ldrh	r1, [r3, #12]
   215de:	440a      	add	r2, r1
		buf = buf->frags;
   215e0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   215e2:	2b00      	cmp	r3, #0
   215e4:	d1fa      	bne.n	215dc <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   215e6:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   215e8:	4a37      	ldr	r2, [pc, #220]	; (216c8 <handle_mld_query+0xf8>)
   215ea:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   215ee:	3301      	adds	r3, #1
   215f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   215f4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   215f8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   215fc:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   215fe:	3104      	adds	r1, #4
   21600:	f10d 0212 	add.w	r2, sp, #18
   21604:	b289      	uxth	r1, r1
   21606:	4628      	mov	r0, r5
   21608:	f7fd fe72 	bl	1f2f0 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   2160c:	f10d 0316 	add.w	r3, sp, #22
   21610:	aa04      	add	r2, sp, #16
   21612:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   21616:	f7fd fd62 	bl	1f0de <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   2161a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   2161e:	2600      	movs	r6, #0
   21620:	9600      	str	r6, [sp, #0]
   21622:	2302      	movs	r3, #2
   21624:	aa04      	add	r2, sp, #16
   21626:	f7fd fd12 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   2162a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2162e:	ab06      	add	r3, sp, #24
   21630:	9300      	str	r3, [sp, #0]
   21632:	2310      	movs	r3, #16
   21634:	eb0d 0203 	add.w	r2, sp, r3
   21638:	f7fd fd09 	bl	1f04e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   2163c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21640:	9600      	str	r6, [sp, #0]
   21642:	2302      	movs	r3, #2
   21644:	aa04      	add	r2, sp, #16
   21646:	f7fd fd02 	bl	1f04e <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   2164a:	ab05      	add	r3, sp, #20
   2164c:	aa04      	add	r2, sp, #16
   2164e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21652:	68a8      	ldr	r0, [r5, #8]
   21654:	f7fd fd43 	bl	1f0de <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   21658:	b358      	cbz	r0, 216b2 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   2165a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   2165e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   21662:	0112      	lsls	r2, r2, #4
   21664:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   21666:	4413      	add	r3, r2
   21668:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   2166a:	3344      	adds	r3, #68	; 0x44
   2166c:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2166e:	429c      	cmp	r4, r3
   21670:	d307      	bcc.n	21682 <handle_mld_query+0xb2>
   21672:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   21676:	d804      	bhi.n	21682 <handle_mld_query+0xb2>
	return pkt->frags->data;
   21678:	68ab      	ldr	r3, [r5, #8]
   2167a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   2167c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2167e:	2b01      	cmp	r3, #1
   21680:	d006      	beq.n	21690 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21682:	a903      	add	r1, sp, #12
   21684:	4628      	mov	r0, r5
   21686:	f7fe fc68 	bl	1ff5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   2168a:	b148      	cbz	r0, 216a0 <handle_mld_query+0xd0>
   2168c:	7843      	ldrb	r3, [r0, #1]
   2168e:	b93b      	cbnz	r3, 216a0 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   21690:	f7ff fd20 	bl	210d4 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   21694:	2210      	movs	r2, #16
   21696:	4601      	mov	r1, r0
   21698:	a806      	add	r0, sp, #24
   2169a:	f00a fc5b 	bl	2bf54 <memcmp>
   2169e:	b178      	cbz	r0, 216c0 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   216a0:	4a09      	ldr	r2, [pc, #36]	; (216c8 <handle_mld_query+0xf8>)
   216a2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   216a6:	3301      	adds	r3, #1
   216a8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   216ac:	2002      	movs	r0, #2
   216ae:	b00a      	add	sp, #40	; 0x28
   216b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   216b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   216b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   216ba:	429a      	cmp	r2, r3
   216bc:	d1cd      	bne.n	2165a <handle_mld_query+0x8a>
   216be:	e7ef      	b.n	216a0 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   216c0:	6968      	ldr	r0, [r5, #20]
   216c2:	f7ff ff2d 	bl	21520 <send_mld_report>
   216c6:	e7eb      	b.n	216a0 <handle_mld_query+0xd0>
   216c8:	20002ae0 	.word	0x20002ae0

000216cc <net_ipv6_finalize>:
{
   216cc:	b508      	push	{r3, lr}
   216ce:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   216d0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   216d4:	f012 0f40 	tst.w	r2, #64	; 0x40
   216d8:	d104      	bne.n	216e4 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   216da:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   216dc:	4618      	mov	r0, r3
   216de:	f7ff fdd2 	bl	21286 <net_ipv6_finalize_raw>
}
   216e2:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   216e4:	2106      	movs	r1, #6
   216e6:	e7f9      	b.n	216dc <net_ipv6_finalize+0x10>

000216e8 <net_ipv6_nbr_lookup>:
{
   216e8:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   216ea:	460a      	mov	r2, r1
   216ec:	4601      	mov	r1, r0
   216ee:	4802      	ldr	r0, [pc, #8]	; (216f8 <net_ipv6_nbr_lookup+0x10>)
   216f0:	f7ff fb42 	bl	20d78 <nbr_lookup>
}
   216f4:	bd08      	pop	{r3, pc}
   216f6:	bf00      	nop
   216f8:	2000bee4 	.word	0x2000bee4

000216fc <net_ipv6_send_na>:
{
   216fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21700:	b093      	sub	sp, #76	; 0x4c
   21702:	4605      	mov	r5, r0
   21704:	468b      	mov	fp, r1
   21706:	4692      	mov	sl, r2
   21708:	4699      	mov	r9, r3
   2170a:	6843      	ldr	r3, [r0, #4]
   2170c:	689b      	ldr	r3, [r3, #8]
   2170e:	4611      	mov	r1, r2
   21710:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   21712:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21716:	f7fd faab 	bl	1ec70 <net_pkt_get_reserve_tx>
   2171a:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2171c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21720:	f7fd fac4 	bl	1ecac <net_pkt_get_frag>
   21724:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   21726:	4601      	mov	r1, r0
   21728:	4620      	mov	r0, r4
   2172a:	f7fd fb3c 	bl	1eda6 <net_pkt_frag_add>
	pkt->iface = iface;
   2172e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21730:	7d6b      	ldrb	r3, [r5, #21]
   21732:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21736:	7d6b      	ldrb	r3, [r5, #21]
   21738:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2173c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   21740:	220a      	movs	r2, #10
   21742:	f362 03c6 	bfi	r3, r2, #3, #4
   21746:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2174a:	2328      	movs	r3, #40	; 0x28
   2174c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   21750:	68a3      	ldr	r3, [r4, #8]
   21752:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   21754:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   21758:	461a      	mov	r2, r3
   2175a:	2100      	movs	r1, #0
   2175c:	1ac0      	subs	r0, r0, r3
   2175e:	f00a fc8d 	bl	2c07c <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   21762:	2300      	movs	r3, #0
   21764:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21766:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   2176a:	7d2b      	ldrb	r3, [r5, #20]
   2176c:	2b06      	cmp	r3, #6
   2176e:	f000 8092 	beq.w	21896 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   21772:	2b08      	cmp	r3, #8
   21774:	f000 808d 	beq.w	21892 <net_ipv6_send_na+0x196>
	return 0;
   21778:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   2177a:	f04f 0800 	mov.w	r8, #0
   2177e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   21782:	f106 0514 	add.w	r5, r6, #20
   21786:	2288      	movs	r2, #136	; 0x88
   21788:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   2178c:	4620      	mov	r0, r4
   2178e:	f7ff fc0c 	bl	20faa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   21792:	4629      	mov	r1, r5
   21794:	f107 0008 	add.w	r0, r7, #8
   21798:	f7fa fdb8 	bl	1c30c <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2179c:	a901      	add	r1, sp, #4
   2179e:	4620      	mov	r0, r4
   217a0:	f7fe fdd8 	bl	20354 <net_icmpv6_get_na_hdr>
   217a4:	4607      	mov	r7, r0
	return pkt->frags->data;
   217a6:	68a3      	ldr	r3, [r4, #8]
   217a8:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   217ac:	ad06      	add	r5, sp, #24
   217ae:	f8db 0000 	ldr.w	r0, [fp]
   217b2:	f8db 1004 	ldr.w	r1, [fp, #4]
   217b6:	f8db 2008 	ldr.w	r2, [fp, #8]
   217ba:	f8db 300c 	ldr.w	r3, [fp, #12]
   217be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   217c0:	ad06      	add	r5, sp, #24
   217c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   217c4:	f8ce 0008 	str.w	r0, [lr, #8]
   217c8:	f8ce 100c 	str.w	r1, [lr, #12]
   217cc:	f8ce 2010 	str.w	r2, [lr, #16]
   217d0:	f8ce 3014 	str.w	r3, [lr, #20]
   217d4:	68a3      	ldr	r3, [r4, #8]
   217d6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   217da:	ad0a      	add	r5, sp, #40	; 0x28
   217dc:	f8da 0000 	ldr.w	r0, [sl]
   217e0:	f8da 1004 	ldr.w	r1, [sl, #4]
   217e4:	f8da 2008 	ldr.w	r2, [sl, #8]
   217e8:	f8da 300c 	ldr.w	r3, [sl, #12]
   217ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   217ee:	ad0a      	add	r5, sp, #40	; 0x28
   217f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   217f2:	f8cc 0018 	str.w	r0, [ip, #24]
   217f6:	f8cc 101c 	str.w	r1, [ip, #28]
   217fa:	f8cc 2020 	str.w	r2, [ip, #32]
   217fe:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   21802:	ad0e      	add	r5, sp, #56	; 0x38
   21804:	f8d9 0000 	ldr.w	r0, [r9]
   21808:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2180c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   21810:	f8d9 300c 	ldr.w	r3, [r9, #12]
   21814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   21816:	ad0e      	add	r5, sp, #56	; 0x38
   21818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2181a:	6078      	str	r0, [r7, #4]
   2181c:	60b9      	str	r1, [r7, #8]
   2181e:	60fa      	str	r2, [r7, #12]
   21820:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   21822:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   21826:	4620      	mov	r0, r4
   21828:	f7fd fd6c 	bl	1f304 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   2182c:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21830:	2302      	movs	r3, #2
   21832:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   21834:	08f3      	lsrs	r3, r6, #3
   21836:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   21838:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2183c:	f8da 1010 	ldr.w	r1, [sl, #16]
   21840:	301a      	adds	r0, #26
   21842:	f7de fd3d 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21846:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2184a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2184c:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2184e:	3a02      	subs	r2, #2
   21850:	4641      	mov	r1, r8
   21852:	4428      	add	r0, r5
   21854:	f00a fc12 	bl	2c07c <memset>
	na_hdr->flags = flags;
   21858:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   2185c:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   2185e:	4639      	mov	r1, r7
   21860:	4620      	mov	r0, r4
   21862:	f7fe fdac 	bl	203be <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   21866:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   21868:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   2186a:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   2186c:	68a1      	ldr	r1, [r4, #8]
   2186e:	4620      	mov	r0, r4
   21870:	f7fe fb26 	bl	1fec0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21874:	4620      	mov	r0, r4
   21876:	f7fa fe6b 	bl	1c550 <net_send_data>
   2187a:	4540      	cmp	r0, r8
   2187c:	db0d      	blt.n	2189a <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   2187e:	4a0d      	ldr	r2, [pc, #52]	; (218b4 <net_ipv6_send_na+0x1b8>)
   21880:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21884:	3301      	adds	r3, #1
   21886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   2188a:	4640      	mov	r0, r8
}
   2188c:	b013      	add	sp, #76	; 0x4c
   2188e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   21892:	2610      	movs	r6, #16
   21894:	e771      	b.n	2177a <net_ipv6_send_na+0x7e>
		return 8;
   21896:	2608      	movs	r6, #8
   21898:	e76f      	b.n	2177a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   2189a:	4620      	mov	r0, r4
   2189c:	f7fd fa59 	bl	1ed52 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   218a0:	4a04      	ldr	r2, [pc, #16]	; (218b4 <net_ipv6_send_na+0x1b8>)
   218a2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   218a6:	3301      	adds	r3, #1
   218a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   218ac:	f06f 0015 	mvn.w	r0, #21
   218b0:	e7ec      	b.n	2188c <net_ipv6_send_na+0x190>
   218b2:	bf00      	nop
   218b4:	20002ae0 	.word	0x20002ae0

000218b8 <net_ipv6_nbr_set_reachable_timer>:
{
   218b8:	b508      	push	{r3, lr}
   218ba:	68c9      	ldr	r1, [r1, #12]
   218bc:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   218c0:	3114      	adds	r1, #20
   218c2:	4802      	ldr	r0, [pc, #8]	; (218cc <net_ipv6_nbr_set_reachable_timer+0x14>)
   218c4:	f009 ff70 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   218c8:	bd08      	pop	{r3, pc}
   218ca:	bf00      	nop
   218cc:	20002c00 	.word	0x20002c00

000218d0 <handle_na_input>:
{
   218d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   218d4:	b090      	sub	sp, #64	; 0x40
   218d6:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   218d8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   218da:	2200      	movs	r2, #0
   218dc:	e002      	b.n	218e4 <handle_na_input+0x14>
		bytes += buf->len;
   218de:	8999      	ldrh	r1, [r3, #12]
   218e0:	440a      	add	r2, r1
		buf = buf->frags;
   218e2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   218e4:	2b00      	cmp	r3, #0
   218e6:	d1fa      	bne.n	218de <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   218e8:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   218ea:	a90a      	add	r1, sp, #40	; 0x28
   218ec:	4620      	mov	r0, r4
   218ee:	f7fe fd31 	bl	20354 <net_icmpv6_get_na_hdr>
   218f2:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   218f4:	4aaf      	ldr	r2, [pc, #700]	; (21bb4 <handle_na_input+0x2e4>)
   218f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   218fa:	3301      	adds	r3, #1
   218fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   21900:	2d41      	cmp	r5, #65	; 0x41
   21902:	d904      	bls.n	2190e <handle_na_input+0x3e>
	return pkt->frags->data;
   21904:	68a3      	ldr	r3, [r4, #8]
   21906:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   21908:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   2190a:	2bff      	cmp	r3, #255	; 0xff
   2190c:	d010      	beq.n	21930 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2190e:	a905      	add	r1, sp, #20
   21910:	4620      	mov	r0, r4
   21912:	f7fe fb22 	bl	1ff5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   21916:	b108      	cbz	r0, 2191c <handle_na_input+0x4c>
   21918:	7843      	ldrb	r3, [r0, #1]
   2191a:	b1cb      	cbz	r3, 21950 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   2191c:	4aa5      	ldr	r2, [pc, #660]	; (21bb4 <handle_na_input+0x2e4>)
   2191e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21922:	3301      	adds	r3, #1
   21924:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   21928:	2002      	movs	r0, #2
}
   2192a:	b010      	add	sp, #64	; 0x40
   2192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   21930:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   21932:	2bff      	cmp	r3, #255	; 0xff
   21934:	d0eb      	beq.n	2190e <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21936:	a905      	add	r1, sp, #20
   21938:	4620      	mov	r0, r4
   2193a:	f7fe fd0b 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   2193e:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   21940:	f013 0f40 	tst.w	r3, #64	; 0x40
   21944:	d004      	beq.n	21950 <handle_na_input+0x80>
   21946:	68a3      	ldr	r3, [r4, #8]
   21948:	689b      	ldr	r3, [r3, #8]
   2194a:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   2194c:	2bff      	cmp	r3, #255	; 0xff
   2194e:	d0de      	beq.n	2190e <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   21950:	2314      	movs	r3, #20
   21952:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21956:	a90f      	add	r1, sp, #60	; 0x3c
   21958:	4620      	mov	r0, r4
   2195a:	f7fe fcc9 	bl	202f0 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   2195e:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21960:	2600      	movs	r6, #0
	while (buf) {
   21962:	b11b      	cbz	r3, 2196c <handle_na_input+0x9c>
		bytes += buf->len;
   21964:	899a      	ldrh	r2, [r3, #12]
   21966:	4416      	add	r6, r2
		buf = buf->frags;
   21968:	681b      	ldr	r3, [r3, #0]
   2196a:	e7fa      	b.n	21962 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   2196c:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   2196e:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   21970:	e00b      	b.n	2198a <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   21972:	00db      	lsls	r3, r3, #3
   21974:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   21976:	4413      	add	r3, r2
   21978:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   2197a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2197e:	4293      	cmp	r3, r2
   21980:	d9cc      	bls.n	2191c <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21982:	a90f      	add	r1, sp, #60	; 0x3c
   21984:	4620      	mov	r0, r4
   21986:	f7fe fcb3 	bl	202f0 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2198a:	b190      	cbz	r0, 219b2 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   2198c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   21990:	4296      	cmp	r6, r2
   21992:	d90e      	bls.n	219b2 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   21994:	7843      	ldrb	r3, [r0, #1]
   21996:	b163      	cbz	r3, 219b2 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   21998:	7801      	ldrb	r1, [r0, #0]
   2199a:	2902      	cmp	r1, #2
   2199c:	d1e9      	bne.n	21972 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2199e:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   219a2:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   219a6:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   219a8:	4415      	add	r5, r2
   219aa:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   219ac:	3506      	adds	r5, #6
   219ae:	b2ad      	uxth	r5, r5
			break;
   219b0:	e7df      	b.n	21972 <handle_na_input+0xa2>
	return pkt->iface;
   219b2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   219b6:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   219ba:	2600      	movs	r6, #0
   219bc:	e003      	b.n	219c6 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   219be:	f1ba 0f00 	cmp.w	sl, #0
   219c2:	d11f      	bne.n	21a04 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   219c4:	3601      	adds	r6, #1
   219c6:	2e02      	cmp	r6, #2
   219c8:	dc23      	bgt.n	21a12 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   219ca:	236c      	movs	r3, #108	; 0x6c
   219cc:	fb03 8306 	mla	r3, r3, r6, r8
   219d0:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   219d4:	f1ba 0f00 	cmp.w	sl, #0
   219d8:	d0f4      	beq.n	219c4 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   219da:	236c      	movs	r3, #108	; 0x6c
   219dc:	fb03 8306 	mla	r3, r3, r6, r8
   219e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   219e2:	2b0a      	cmp	r3, #10
   219e4:	d1ee      	bne.n	219c4 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   219e6:	216c      	movs	r1, #108	; 0x6c
   219e8:	fb01 f106 	mul.w	r1, r1, r6
   219ec:	3120      	adds	r1, #32
   219ee:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   219f0:	2210      	movs	r2, #16
   219f2:	4411      	add	r1, r2
   219f4:	4648      	mov	r0, r9
   219f6:	f00a faad 	bl	2bf54 <memcmp>
   219fa:	2800      	cmp	r0, #0
   219fc:	d0df      	beq.n	219be <handle_na_input+0xee>
		return false;
   219fe:	f04f 0a00 	mov.w	sl, #0
   21a02:	e7dc      	b.n	219be <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   21a04:	236c      	movs	r3, #108	; 0x6c
   21a06:	fb03 f306 	mul.w	r3, r3, r6
   21a0a:	3320      	adds	r3, #32
   21a0c:	4443      	add	r3, r8
   21a0e:	330c      	adds	r3, #12
   21a10:	e000      	b.n	21a14 <handle_na_input+0x144>
	return NULL;
   21a12:	2300      	movs	r3, #0
	if (ifaddr) {
   21a14:	b17b      	cbz	r3, 21a36 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   21a16:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   21a1a:	2b00      	cmp	r3, #0
   21a1c:	f47f af7e 	bne.w	2191c <handle_na_input+0x4c>
   21a20:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21a22:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   21a24:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21a28:	429a      	cmp	r2, r3
   21a2a:	f43f af77 	beq.w	2191c <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   21a2e:	4649      	mov	r1, r9
   21a30:	f7fb fa0a 	bl	1ce48 <net_if_ipv6_dad_failed>
   21a34:	e772      	b.n	2191c <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   21a36:	2300      	movs	r3, #0
   21a38:	9303      	str	r3, [sp, #12]
   21a3a:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   21a3c:	1d3a      	adds	r2, r7, #4
   21a3e:	6961      	ldr	r1, [r4, #20]
   21a40:	485d      	ldr	r0, [pc, #372]	; (21bb8 <handle_na_input+0x2e8>)
   21a42:	f7ff f999 	bl	20d78 <nbr_lookup>
	if (!nbr) {
   21a46:	4606      	mov	r6, r0
   21a48:	2800      	cmp	r0, #0
   21a4a:	f000 8107 	beq.w	21c5c <handle_na_input+0x38c>
	if (tllao_offset) {
   21a4e:	b995      	cbnz	r5, 21a76 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   21a50:	7873      	ldrb	r3, [r6, #1]
   21a52:	2bff      	cmp	r3, #255	; 0xff
   21a54:	d135      	bne.n	21ac2 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   21a56:	bb2d      	cbnz	r5, 21aa4 <handle_na_input+0x1d4>
			return false;
   21a58:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   21a5a:	2b00      	cmp	r3, #0
   21a5c:	f43f af5e 	beq.w	2191c <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   21a60:	4620      	mov	r0, r4
   21a62:	f7fd f976 	bl	1ed52 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   21a66:	4a53      	ldr	r2, [pc, #332]	; (21bb4 <handle_na_input+0x2e4>)
   21a68:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21a6c:	3301      	adds	r3, #1
   21a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   21a72:	2000      	movs	r0, #0
   21a74:	e759      	b.n	2192a <handle_na_input+0x5a>
   21a76:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   21a78:	7d1b      	ldrb	r3, [r3, #20]
   21a7a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   21a7e:	f10d 020e 	add.w	r2, sp, #14
   21a82:	9200      	str	r2, [sp, #0]
   21a84:	f10d 020a 	add.w	r2, sp, #10
   21a88:	4629      	mov	r1, r5
   21a8a:	68a0      	ldr	r0, [r4, #8]
   21a8c:	f7fd fadf 	bl	1f04e <net_frag_read>
		if (!frag && pos == 0xffff) {
   21a90:	2800      	cmp	r0, #0
   21a92:	d1dd      	bne.n	21a50 <handle_na_input+0x180>
   21a94:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   21a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21a9c:	429a      	cmp	r2, r3
   21a9e:	d1d7      	bne.n	21a50 <handle_na_input+0x180>
			return false;
   21aa0:	2300      	movs	r3, #0
   21aa2:	e7da      	b.n	21a5a <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   21aa4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   21aa8:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   21aac:	aa10      	add	r2, sp, #64	; 0x40
   21aae:	f10d 030e 	add.w	r3, sp, #14
   21ab2:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   21ab6:	6961      	ldr	r1, [r4, #20]
   21ab8:	4630      	mov	r0, r6
   21aba:	f7fe ff77 	bl	209ac <net_nbr_link>
   21abe:	2800      	cmp	r0, #0
   21ac0:	d14a      	bne.n	21b58 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   21ac2:	7870      	ldrb	r0, [r6, #1]
   21ac4:	f7fe ffd8 	bl	20a78 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   21ac8:	4680      	mov	r8, r0
   21aca:	2800      	cmp	r0, #0
   21acc:	f000 80c8 	beq.w	21c60 <handle_na_input+0x390>
	if (tllao_offset) {
   21ad0:	2d00      	cmp	r5, #0
   21ad2:	d145      	bne.n	21b60 <handle_na_input+0x290>
	bool lladdr_changed = false;
   21ad4:	2700      	movs	r7, #0
   21ad6:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   21ad8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   21adc:	2b00      	cmp	r3, #0
   21ade:	d155      	bne.n	21b8c <handle_na_input+0x2bc>
		if (!tllao_offset) {
   21ae0:	2d00      	cmp	r5, #0
   21ae2:	f000 80bf 	beq.w	21c64 <handle_na_input+0x394>
		if (lladdr_changed) {
   21ae6:	b11f      	cbz	r7, 21af0 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   21ae8:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   21aec:	2a06      	cmp	r2, #6
   21aee:	d941      	bls.n	21b74 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21af0:	a905      	add	r1, sp, #20
   21af2:	4620      	mov	r0, r4
   21af4:	f7fe fc2e 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   21af8:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   21afa:	f013 0f40 	tst.w	r3, #64	; 0x40
   21afe:	d040      	beq.n	21b82 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   21b00:	2101      	movs	r1, #1
   21b02:	4630      	mov	r0, r6
   21b04:	f7fe ffc0 	bl	20a88 <ipv6_nbr_set_state>
   21b08:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   21b0a:	2200      	movs	r2, #0
   21b0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   21b10:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   21b12:	3014      	adds	r0, #20
   21b14:	f009 fdee 	bl	2b6f4 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   21b18:	4631      	mov	r1, r6
   21b1a:	6960      	ldr	r0, [r4, #20]
   21b1c:	f7ff fecc 	bl	218b8 <net_ipv6_nbr_set_reachable_timer>
   21b20:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21b22:	a905      	add	r1, sp, #20
   21b24:	4620      	mov	r0, r4
   21b26:	f7fe fc15 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   21b2a:	7803      	ldrb	r3, [r0, #0]
   21b2c:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   21b2e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   21b32:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   21b34:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   21b36:	2d00      	cmp	r5, #0
   21b38:	f000 8098 	beq.w	21c6c <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   21b3c:	4628      	mov	r0, r5
   21b3e:	f7fa fd07 	bl	1c550 <net_send_data>
   21b42:	2800      	cmp	r0, #0
   21b44:	f2c0 8086 	blt.w	21c54 <handle_na_input+0x384>
   21b48:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   21b4a:	2200      	movs	r2, #0
   21b4c:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   21b4e:	4628      	mov	r0, r5
   21b50:	f7fd f8ff 	bl	1ed52 <net_pkt_unref>
	return true;
   21b54:	2301      	movs	r3, #1
   21b56:	e780      	b.n	21a5a <handle_na_input+0x18a>
			nbr_free(nbr);
   21b58:	4630      	mov	r0, r6
   21b5a:	f7ff fa53 	bl	21004 <nbr_free>
   21b5e:	e77b      	b.n	21a58 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   21b60:	7842      	ldrb	r2, [r0, #1]
   21b62:	1c81      	adds	r1, r0, #2
   21b64:	f10d 000e 	add.w	r0, sp, #14
   21b68:	f00a f9f4 	bl	2bf54 <memcmp>
   21b6c:	1c07      	adds	r7, r0, #0
   21b6e:	bf18      	it	ne
   21b70:	2701      	movne	r7, #1
   21b72:	e7b0      	b.n	21ad6 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   21b74:	f10d 010e 	add.w	r1, sp, #14
   21b78:	f108 0002 	add.w	r0, r8, #2
   21b7c:	f7de fba0 	bl	2c0 <memcpy>
   21b80:	e7b6      	b.n	21af0 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   21b82:	2102      	movs	r1, #2
   21b84:	4630      	mov	r0, r6
   21b86:	f7fe ff7f 	bl	20a88 <ipv6_nbr_set_state>
   21b8a:	e7c9      	b.n	21b20 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21b8c:	a905      	add	r1, sp, #20
   21b8e:	4620      	mov	r0, r4
   21b90:	f7fe fbe0 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   21b94:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   21b96:	f013 0f20 	tst.w	r3, #32
   21b9a:	d10f      	bne.n	21bbc <handle_na_input+0x2ec>
   21b9c:	b177      	cbz	r7, 21bbc <handle_na_input+0x2ec>
   21b9e:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   21ba0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   21ba4:	2b01      	cmp	r3, #1
   21ba6:	d15f      	bne.n	21c68 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   21ba8:	2102      	movs	r1, #2
   21baa:	4630      	mov	r0, r6
   21bac:	f7fe ff6c 	bl	20a88 <ipv6_nbr_set_state>
		return false;
   21bb0:	2300      	movs	r3, #0
   21bb2:	e752      	b.n	21a5a <handle_na_input+0x18a>
   21bb4:	20002ae0 	.word	0x20002ae0
   21bb8:	2000bee4 	.word	0x2000bee4
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21bbc:	a905      	add	r1, sp, #20
   21bbe:	4620      	mov	r0, r4
   21bc0:	f7fe fbc8 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   21bc4:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   21bc6:	f013 0f20 	tst.w	r3, #32
   21bca:	d018      	beq.n	21bfe <handle_na_input+0x32e>
		if (lladdr_changed) {
   21bcc:	b14f      	cbz	r7, 21be2 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   21bce:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   21bd2:	2a06      	cmp	r2, #6
   21bd4:	d805      	bhi.n	21be2 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   21bd6:	f10d 010e 	add.w	r1, sp, #14
   21bda:	f108 0002 	add.w	r0, r8, #2
   21bde:	f7de fb6f 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21be2:	a905      	add	r1, sp, #20
   21be4:	4620      	mov	r0, r4
   21be6:	f7fe fbb5 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   21bea:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   21bec:	f013 0f40 	tst.w	r3, #64	; 0x40
   21bf0:	d11e      	bne.n	21c30 <handle_na_input+0x360>
			if (lladdr_changed) {
   21bf2:	b17f      	cbz	r7, 21c14 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   21bf4:	2102      	movs	r1, #2
   21bf6:	4630      	mov	r0, r6
   21bf8:	f7fe ff46 	bl	20a88 <ipv6_nbr_set_state>
   21bfc:	e00a      	b.n	21c14 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21bfe:	a905      	add	r1, sp, #20
   21c00:	4620      	mov	r0, r4
   21c02:	f7fe fba7 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   21c06:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   21c08:	f013 0f20 	tst.w	r3, #32
   21c0c:	d102      	bne.n	21c14 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   21c0e:	b10d      	cbz	r5, 21c14 <handle_na_input+0x344>
   21c10:	2f00      	cmp	r7, #0
   21c12:	d0db      	beq.n	21bcc <handle_na_input+0x2fc>
   21c14:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   21c16:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   21c1a:	b9b3      	cbnz	r3, 21c4a <handle_na_input+0x37a>
   21c1c:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21c1e:	a905      	add	r1, sp, #20
   21c20:	4620      	mov	r0, r4
   21c22:	f7fe fb97 	bl	20354 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   21c26:	7803      	ldrb	r3, [r0, #0]
   21c28:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   21c2a:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   21c2e:	e780      	b.n	21b32 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   21c30:	2101      	movs	r1, #1
   21c32:	4630      	mov	r0, r6
   21c34:	f7fe ff28 	bl	20a88 <ipv6_nbr_set_state>
   21c38:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   21c3a:	3014      	adds	r0, #20
   21c3c:	f009 fd5a 	bl	2b6f4 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   21c40:	4631      	mov	r1, r6
   21c42:	6960      	ldr	r0, [r4, #20]
   21c44:	f7ff fe38 	bl	218b8 <net_ipv6_nbr_set_reachable_timer>
   21c48:	e7e4      	b.n	21c14 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   21c4a:	a905      	add	r1, sp, #20
   21c4c:	4620      	mov	r0, r4
   21c4e:	f7fe fb81 	bl	20354 <net_icmpv6_get_na_hdr>
   21c52:	e7e3      	b.n	21c1c <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   21c54:	68f0      	ldr	r0, [r6, #12]
   21c56:	f7ff f8af 	bl	20db8 <nbr_clear_ns_pending>
   21c5a:	e778      	b.n	21b4e <handle_na_input+0x27e>
		return false;
   21c5c:	2300      	movs	r3, #0
   21c5e:	e6fc      	b.n	21a5a <handle_na_input+0x18a>
		return false;
   21c60:	2300      	movs	r3, #0
   21c62:	e6fa      	b.n	21a5a <handle_na_input+0x18a>
			return false;
   21c64:	2300      	movs	r3, #0
   21c66:	e6f8      	b.n	21a5a <handle_na_input+0x18a>
		return false;
   21c68:	2300      	movs	r3, #0
   21c6a:	e6f6      	b.n	21a5a <handle_na_input+0x18a>
	return true;
   21c6c:	2301      	movs	r3, #1
   21c6e:	e6f4      	b.n	21a5a <handle_na_input+0x18a>

00021c70 <net_ipv6_send_ns>:
{
   21c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c74:	b09d      	sub	sp, #116	; 0x74
   21c76:	4605      	mov	r5, r0
   21c78:	9101      	str	r1, [sp, #4]
   21c7a:	4691      	mov	r9, r2
   21c7c:	461e      	mov	r6, r3
   21c7e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   21c80:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21c84:	6843      	ldr	r3, [r0, #4]
   21c86:	689b      	ldr	r3, [r3, #8]
   21c88:	4631      	mov	r1, r6
   21c8a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   21c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21c90:	f7fc ffee 	bl	1ec70 <net_pkt_get_reserve_tx>
   21c94:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21c96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21c9a:	f7fd f807 	bl	1ecac <net_pkt_get_frag>
   21c9e:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   21ca0:	4601      	mov	r1, r0
   21ca2:	4620      	mov	r0, r4
   21ca4:	f7fd f87f 	bl	1eda6 <net_pkt_frag_add>
	pkt->iface = iface;
   21ca8:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21caa:	7d6b      	ldrb	r3, [r5, #21]
   21cac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21cb0:	7d6b      	ldrb	r3, [r5, #21]
   21cb2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   21cb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   21cba:	220a      	movs	r2, #10
   21cbc:	f362 03c6 	bfi	r3, r2, #3, #4
   21cc0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   21cc4:	2328      	movs	r3, #40	; 0x28
   21cc6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   21cca:	2500      	movs	r5, #0
   21ccc:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   21cd0:	68a3      	ldr	r3, [r4, #8]
   21cd2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   21cd4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   21cd8:	461a      	mov	r2, r3
   21cda:	4629      	mov	r1, r5
   21cdc:	1ac0      	subs	r0, r0, r3
   21cde:	f00a f9cd 	bl	2c07c <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   21ce2:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21ce4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   21ce8:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   21cea:	7d1b      	ldrb	r3, [r3, #20]
   21cec:	2b06      	cmp	r3, #6
   21cee:	f000 808b 	beq.w	21e08 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   21cf2:	2b08      	cmp	r3, #8
   21cf4:	f000 8085 	beq.w	21e02 <net_ipv6_send_ns+0x192>
	return 0;
   21cf8:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   21cfc:	2287      	movs	r2, #135	; 0x87
   21cfe:	f108 0114 	add.w	r1, r8, #20
   21d02:	4620      	mov	r0, r4
   21d04:	f7ff f951 	bl	20faa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   21d08:	f10a 0a08 	add.w	sl, sl, #8
   21d0c:	2114      	movs	r1, #20
   21d0e:	4650      	mov	r0, sl
   21d10:	f7fa fafc 	bl	1c30c <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   21d14:	a903      	add	r1, sp, #12
   21d16:	4620      	mov	r0, r4
   21d18:	f7fe fa8e 	bl	20238 <net_icmpv6_get_ns_hdr>
   21d1c:	4605      	mov	r5, r0
	if (!dst) {
   21d1e:	2e00      	cmp	r6, #0
   21d20:	d075      	beq.n	21e0e <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   21d22:	68a3      	ldr	r3, [r4, #8]
   21d24:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   21d28:	f10d 0c20 	add.w	ip, sp, #32
   21d2c:	6830      	ldr	r0, [r6, #0]
   21d2e:	6871      	ldr	r1, [r6, #4]
   21d30:	68b2      	ldr	r2, [r6, #8]
   21d32:	68f3      	ldr	r3, [r6, #12]
   21d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21d38:	ae08      	add	r6, sp, #32
   21d3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21d3c:	f8ce 0018 	str.w	r0, [lr, #24]
   21d40:	f8ce 101c 	str.w	r1, [lr, #28]
   21d44:	f8ce 2020 	str.w	r2, [lr, #32]
   21d48:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   21d4c:	ae0c      	add	r6, sp, #48	; 0x30
   21d4e:	6838      	ldr	r0, [r7, #0]
   21d50:	6879      	ldr	r1, [r7, #4]
   21d52:	68ba      	ldr	r2, [r7, #8]
   21d54:	68fb      	ldr	r3, [r7, #12]
   21d56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21d58:	1d2f      	adds	r7, r5, #4
   21d5a:	ae0c      	add	r6, sp, #48	; 0x30
   21d5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21d5e:	6068      	str	r0, [r5, #4]
   21d60:	6079      	str	r1, [r7, #4]
   21d62:	60ba      	str	r2, [r7, #8]
   21d64:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   21d66:	4629      	mov	r1, r5
   21d68:	4620      	mov	r0, r4
   21d6a:	f7fe fa89 	bl	20280 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   21d6e:	f1bb 0f00 	cmp.w	fp, #0
   21d72:	d06a      	beq.n	21e4a <net_ipv6_send_ns+0x1da>
   21d74:	68a3      	ldr	r3, [r4, #8]
   21d76:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21d78:	f7ff f9ac 	bl	210d4 <net_ipv6_unspecified_address>
   21d7c:	4603      	mov	r3, r0
   21d7e:	ae10      	add	r6, sp, #64	; 0x40
   21d80:	6800      	ldr	r0, [r0, #0]
   21d82:	6859      	ldr	r1, [r3, #4]
   21d84:	689a      	ldr	r2, [r3, #8]
   21d86:	68db      	ldr	r3, [r3, #12]
   21d88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21d8a:	ae10      	add	r6, sp, #64	; 0x40
   21d8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21d8e:	60b8      	str	r0, [r7, #8]
   21d90:	60f9      	str	r1, [r7, #12]
   21d92:	613a      	str	r2, [r7, #16]
   21d94:	617b      	str	r3, [r7, #20]
   21d96:	68a3      	ldr	r3, [r4, #8]
   21d98:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   21d9a:	795a      	ldrb	r2, [r3, #5]
   21d9c:	eba2 0808 	sub.w	r8, r2, r8
   21da0:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21da4:	68a1      	ldr	r1, [r4, #8]
   21da6:	4620      	mov	r0, r4
   21da8:	f7fe f88a 	bl	1fec0 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   21dac:	3504      	adds	r5, #4
   21dae:	462a      	mov	r2, r5
   21db0:	6961      	ldr	r1, [r4, #20]
   21db2:	486f      	ldr	r0, [pc, #444]	; (21f70 <net_ipv6_send_ns+0x300>)
   21db4:	f7fe ffe0 	bl	20d78 <nbr_lookup>
	if (!nbr) {
   21db8:	4606      	mov	r6, r0
   21dba:	2800      	cmp	r0, #0
   21dbc:	f000 80ad 	beq.w	21f1a <net_ipv6_send_ns+0x2aa>
	if (pending) {
   21dc0:	9801      	ldr	r0, [sp, #4]
   21dc2:	b170      	cbz	r0, 21de2 <net_ipv6_send_ns+0x172>
   21dc4:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   21dc6:	682b      	ldr	r3, [r5, #0]
   21dc8:	2b00      	cmp	r3, #0
   21dca:	f040 80b1 	bne.w	21f30 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   21dce:	f7fc ffb1 	bl	1ed34 <net_pkt_ref>
   21dd2:	6028      	str	r0, [r5, #0]
   21dd4:	68f1      	ldr	r1, [r6, #12]
   21dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21dda:	313c      	adds	r1, #60	; 0x3c
   21ddc:	4865      	ldr	r0, [pc, #404]	; (21f74 <net_ipv6_send_ns+0x304>)
   21dde:	f009 fce3 	bl	2b7a8 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   21de2:	4620      	mov	r0, r4
   21de4:	f7fa fbb4 	bl	1c550 <net_send_data>
   21de8:	2800      	cmp	r0, #0
   21dea:	f2c0 80b0 	blt.w	21f4e <net_ipv6_send_ns+0x2de>
   21dee:	4a62      	ldr	r2, [pc, #392]	; (21f78 <net_ipv6_send_ns+0x308>)
   21df0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21df4:	3301      	adds	r3, #1
   21df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   21dfa:	2000      	movs	r0, #0
}
   21dfc:	b01d      	add	sp, #116	; 0x74
   21dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   21e02:	f04f 0810 	mov.w	r8, #16
   21e06:	e779      	b.n	21cfc <net_ipv6_send_ns+0x8c>
		return 8;
   21e08:	f04f 0808 	mov.w	r8, #8
   21e0c:	e776      	b.n	21cfc <net_ipv6_send_ns+0x8c>
   21e0e:	68a3      	ldr	r3, [r4, #8]
   21e10:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   21e12:	21ff      	movs	r1, #255	; 0xff
   21e14:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   21e16:	2202      	movs	r2, #2
   21e18:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   21e1a:	2200      	movs	r2, #0
   21e1c:	769a      	strb	r2, [r3, #26]
   21e1e:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   21e20:	771a      	strb	r2, [r3, #28]
   21e22:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   21e24:	779a      	strb	r2, [r3, #30]
   21e26:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   21e28:	f883 2020 	strb.w	r2, [r3, #32]
   21e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   21e30:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   21e34:	2201      	movs	r2, #1
   21e36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   21e3a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   21e3e:	7b7a      	ldrb	r2, [r7, #13]
   21e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   21e44:	89fa      	ldrh	r2, [r7, #14]
   21e46:	84da      	strh	r2, [r3, #38]	; 0x26
   21e48:	e780      	b.n	21d4c <net_ipv6_send_ns+0xdc>
		if (src) {
   21e4a:	f1b9 0f00 	cmp.w	r9, #0
   21e4e:	d025      	beq.n	21e9c <net_ipv6_send_ns+0x22c>
   21e50:	68a3      	ldr	r3, [r4, #8]
   21e52:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   21e56:	ae14      	add	r6, sp, #80	; 0x50
   21e58:	f8d9 0000 	ldr.w	r0, [r9]
   21e5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   21e60:	f8d9 2008 	ldr.w	r2, [r9, #8]
   21e64:	f8d9 300c 	ldr.w	r3, [r9, #12]
   21e68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21e6a:	ae14      	add	r6, sp, #80	; 0x50
   21e6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21e6e:	f8ce 0008 	str.w	r0, [lr, #8]
   21e72:	f8ce 100c 	str.w	r1, [lr, #12]
   21e76:	f8ce 2010 	str.w	r2, [lr, #16]
   21e7a:	f8ce 3014 	str.w	r3, [lr, #20]
   21e7e:	68a3      	ldr	r3, [r4, #8]
   21e80:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21e82:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21e84:	b9fa      	cbnz	r2, 21ec6 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21e86:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21e88:	2a00      	cmp	r2, #0
   21e8a:	d140      	bne.n	21f0e <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21e8c:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21e8e:	2a00      	cmp	r2, #0
   21e90:	d13f      	bne.n	21f12 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21e92:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21e94:	2b00      	cmp	r3, #0
   21e96:	d03e      	beq.n	21f16 <net_ipv6_send_ns+0x2a6>
   21e98:	2300      	movs	r3, #0
   21e9a:	e015      	b.n	21ec8 <net_ipv6_send_ns+0x258>
   21e9c:	68a3      	ldr	r3, [r4, #8]
   21e9e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21ea0:	f107 0118 	add.w	r1, r7, #24
   21ea4:	6960      	ldr	r0, [r4, #20]
   21ea6:	f7fb fab9 	bl	1d41c <net_if_ipv6_select_src_addr>
   21eaa:	4603      	mov	r3, r0
   21eac:	ae18      	add	r6, sp, #96	; 0x60
   21eae:	6800      	ldr	r0, [r0, #0]
   21eb0:	6859      	ldr	r1, [r3, #4]
   21eb2:	689a      	ldr	r2, [r3, #8]
   21eb4:	68db      	ldr	r3, [r3, #12]
   21eb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21eb8:	ae18      	add	r6, sp, #96	; 0x60
   21eba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21ebc:	60b8      	str	r0, [r7, #8]
   21ebe:	60f9      	str	r1, [r7, #12]
   21ec0:	613a      	str	r2, [r7, #16]
   21ec2:	617b      	str	r3, [r7, #20]
   21ec4:	e7db      	b.n	21e7e <net_ipv6_send_ns+0x20e>
   21ec6:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21ec8:	bbab      	cbnz	r3, 21f36 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   21eca:	4641      	mov	r1, r8
   21ecc:	4650      	mov	r0, sl
   21ece:	f7fa fa1d 	bl	1c30c <net_buf_simple_add>
	return pkt->iface;
   21ed2:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   21ed6:	4620      	mov	r0, r4
   21ed8:	f7fd fa14 	bl	1f304 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   21edc:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21ee0:	2301      	movs	r3, #1
   21ee2:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   21ee4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   21ee8:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   21eea:	f899 2014 	ldrb.w	r2, [r9, #20]
   21eee:	f8d9 1010 	ldr.w	r1, [r9, #16]
   21ef2:	301a      	adds	r0, #26
   21ef4:	f7de f9e4 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21ef8:	f899 2014 	ldrb.w	r2, [r9, #20]
   21efc:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   21efe:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21f02:	3a02      	subs	r2, #2
   21f04:	2100      	movs	r1, #0
   21f06:	4430      	add	r0, r6
   21f08:	f00a f8b8 	bl	2c07c <memset>
   21f0c:	e74a      	b.n	21da4 <net_ipv6_send_ns+0x134>
   21f0e:	2300      	movs	r3, #0
   21f10:	e7da      	b.n	21ec8 <net_ipv6_send_ns+0x258>
   21f12:	2300      	movs	r3, #0
   21f14:	e7d8      	b.n	21ec8 <net_ipv6_send_ns+0x258>
   21f16:	2301      	movs	r3, #1
   21f18:	e7d6      	b.n	21ec8 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   21f1a:	2300      	movs	r3, #0
   21f1c:	461a      	mov	r2, r3
   21f1e:	4629      	mov	r1, r5
   21f20:	6960      	ldr	r0, [r4, #20]
   21f22:	f7fe ffab 	bl	20e7c <nbr_new>
		if (!nbr) {
   21f26:	4606      	mov	r6, r0
   21f28:	2800      	cmp	r0, #0
   21f2a:	f47f af49 	bne.w	21dc0 <net_ipv6_send_ns+0x150>
   21f2e:	e002      	b.n	21f36 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   21f30:	9801      	ldr	r0, [sp, #4]
   21f32:	f7fc ff0e 	bl	1ed52 <net_pkt_unref>
	net_pkt_unref(pkt);
   21f36:	4620      	mov	r0, r4
   21f38:	f7fc ff0b 	bl	1ed52 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   21f3c:	4a0e      	ldr	r2, [pc, #56]	; (21f78 <net_ipv6_send_ns+0x308>)
   21f3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21f42:	3301      	adds	r3, #1
   21f44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   21f48:	f06f 0015 	mvn.w	r0, #21
   21f4c:	e756      	b.n	21dfc <net_ipv6_send_ns+0x18c>
		if (pending) {
   21f4e:	9b01      	ldr	r3, [sp, #4]
   21f50:	2b00      	cmp	r3, #0
   21f52:	d0f0      	beq.n	21f36 <net_ipv6_send_ns+0x2c6>
   21f54:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   21f56:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21f5a:	f009 fbcb 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   21f5e:	6828      	ldr	r0, [r5, #0]
   21f60:	2800      	cmp	r0, #0
   21f62:	d0e8      	beq.n	21f36 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   21f64:	f7fc fef5 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   21f68:	2300      	movs	r3, #0
   21f6a:	602b      	str	r3, [r5, #0]
   21f6c:	e7e3      	b.n	21f36 <net_ipv6_send_ns+0x2c6>
   21f6e:	bf00      	nop
   21f70:	2000bee4 	.word	0x2000bee4
   21f74:	20002c00 	.word	0x20002c00
   21f78:	20002ae0 	.word	0x20002ae0

00021f7c <net_ipv6_nbr_add>:
{
   21f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f80:	b083      	sub	sp, #12
   21f82:	4605      	mov	r5, r0
   21f84:	460e      	mov	r6, r1
   21f86:	4617      	mov	r7, r2
   21f88:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   21f8a:	460a      	mov	r2, r1
   21f8c:	4601      	mov	r1, r0
   21f8e:	482c      	ldr	r0, [pc, #176]	; (22040 <net_ipv6_nbr_add+0xc4>)
   21f90:	f7fe fef2 	bl	20d78 <nbr_lookup>
	if (!nbr) {
   21f94:	4604      	mov	r4, r0
   21f96:	b180      	cbz	r0, 21fba <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   21f98:	463a      	mov	r2, r7
   21f9a:	4629      	mov	r1, r5
   21f9c:	4620      	mov	r0, r4
   21f9e:	f7fe fd05 	bl	209ac <net_nbr_link>
   21fa2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   21fa6:	d013      	beq.n	21fd0 <net_ipv6_nbr_add+0x54>
   21fa8:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   21faa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   21fae:	2b00      	cmp	r3, #0
   21fb0:	d03c      	beq.n	2202c <net_ipv6_nbr_add+0xb0>
}
   21fb2:	4620      	mov	r0, r4
   21fb4:	b003      	add	sp, #12
   21fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   21fba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21fbe:	4642      	mov	r2, r8
   21fc0:	4631      	mov	r1, r6
   21fc2:	4628      	mov	r0, r5
   21fc4:	f7fe ff5a 	bl	20e7c <nbr_new>
		if (!nbr) {
   21fc8:	4604      	mov	r4, r0
   21fca:	2800      	cmp	r0, #0
   21fcc:	d1e4      	bne.n	21f98 <net_ipv6_nbr_add+0x1c>
   21fce:	e7f0      	b.n	21fb2 <net_ipv6_nbr_add+0x36>
   21fd0:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   21fd2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   21fd6:	2b05      	cmp	r3, #5
   21fd8:	d0e6      	beq.n	21fa8 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   21fda:	7860      	ldrb	r0, [r4, #1]
   21fdc:	f7fe fd4c 	bl	20a78 <net_nbr_get_lladdr>
   21fe0:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   21fe2:	f100 0902 	add.w	r9, r0, #2
   21fe6:	793a      	ldrb	r2, [r7, #4]
   21fe8:	6839      	ldr	r1, [r7, #0]
   21fea:	4648      	mov	r0, r9
   21fec:	f009 ffb2 	bl	2bf54 <memcmp>
   21ff0:	b190      	cbz	r0, 22018 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   21ff2:	6839      	ldr	r1, [r7, #0]
   21ff4:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   21ff6:	f1b8 0f00 	cmp.w	r8, #0
   21ffa:	d002      	beq.n	22002 <net_ipv6_nbr_add+0x86>
   21ffc:	b109      	cbz	r1, 22002 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   21ffe:	2a06      	cmp	r2, #6
   22000:	d904      	bls.n	2200c <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   22002:	2102      	movs	r1, #2
   22004:	4620      	mov	r0, r4
   22006:	f7fe fd3f 	bl	20a88 <ipv6_nbr_set_state>
   2200a:	e7cd      	b.n	21fa8 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   2200c:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   22010:	4648      	mov	r0, r9
   22012:	f7de f955 	bl	2c0 <memcpy>
   22016:	e7f4      	b.n	22002 <net_ipv6_nbr_add+0x86>
   22018:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   2201a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2201e:	2b00      	cmp	r3, #0
   22020:	d1c2      	bne.n	21fa8 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   22022:	2102      	movs	r1, #2
   22024:	4620      	mov	r0, r4
   22026:	f7fe fd2f 	bl	20a88 <ipv6_nbr_set_state>
   2202a:	e7bd      	b.n	21fa8 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   2202c:	2100      	movs	r1, #0
   2202e:	9101      	str	r1, [sp, #4]
   22030:	9600      	str	r6, [sp, #0]
   22032:	460b      	mov	r3, r1
   22034:	460a      	mov	r2, r1
   22036:	4628      	mov	r0, r5
   22038:	f7ff fe1a 	bl	21c70 <net_ipv6_send_ns>
   2203c:	e7b9      	b.n	21fb2 <net_ipv6_nbr_add+0x36>
   2203e:	bf00      	nop
   22040:	2000bee4 	.word	0x2000bee4

00022044 <handle_ra_input>:
{
   22044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22048:	b098      	sub	sp, #96	; 0x60
   2204a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   2204c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2204e:	2200      	movs	r2, #0
   22050:	e002      	b.n	22058 <handle_ra_input+0x14>
		bytes += buf->len;
   22052:	8999      	ldrh	r1, [r3, #12]
   22054:	440a      	add	r2, r1
		buf = buf->frags;
   22056:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22058:	2b00      	cmp	r3, #0
   2205a:	d1fa      	bne.n	22052 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2205c:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   2205e:	49b7      	ldr	r1, [pc, #732]	; (2233c <handle_ra_input+0x2f8>)
   22060:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   22064:	3301      	adds	r3, #1
   22066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2206a:	2a39      	cmp	r2, #57	; 0x39
   2206c:	d904      	bls.n	22078 <handle_ra_input+0x34>
	return pkt->frags->data;
   2206e:	68b3      	ldr	r3, [r6, #8]
   22070:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   22072:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   22074:	2aff      	cmp	r2, #255	; 0xff
   22076:	d010      	beq.n	2209a <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   22078:	a907      	add	r1, sp, #28
   2207a:	4630      	mov	r0, r6
   2207c:	f7fd ff6d 	bl	1ff5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   22080:	b108      	cbz	r0, 22086 <handle_ra_input+0x42>
   22082:	7843      	ldrb	r3, [r0, #1]
   22084:	b173      	cbz	r3, 220a4 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   22086:	4aad      	ldr	r2, [pc, #692]	; (2233c <handle_ra_input+0x2f8>)
   22088:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2208c:	3301      	adds	r3, #1
   2208e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   22092:	2002      	movs	r0, #2
}
   22094:	b018      	add	sp, #96	; 0x60
   22096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2209a:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2209c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   220a0:	429a      	cmp	r2, r3
   220a2:	d1e9      	bne.n	22078 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   220a4:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   220a8:	312c      	adds	r1, #44	; 0x2c
   220aa:	ac18      	add	r4, sp, #96	; 0x60
   220ac:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   220b0:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   220b4:	9300      	str	r3, [sp, #0]
   220b6:	2301      	movs	r3, #1
   220b8:	4622      	mov	r2, r4
   220ba:	68b0      	ldr	r0, [r6, #8]
   220bc:	f7fc ffc7 	bl	1f04e <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   220c0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   220c4:	2300      	movs	r3, #0
   220c6:	9300      	str	r3, [sp, #0]
   220c8:	2301      	movs	r3, #1
   220ca:	4622      	mov	r2, r4
   220cc:	f7fc ffbf 	bl	1f04e <net_frag_read>
	if (!frag) {
   220d0:	4604      	mov	r4, r0
   220d2:	2800      	cmp	r0, #0
   220d4:	d0d7      	beq.n	22086 <handle_ra_input+0x42>
	if (hop_limit) {
   220d6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   220da:	b113      	cbz	r3, 220e2 <handle_ra_input+0x9e>
	return pkt->iface;
   220dc:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   220de:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   220e2:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   220e6:	aa11      	add	r2, sp, #68	; 0x44
   220e8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   220ec:	4620      	mov	r0, r4
   220ee:	f7fc fff6 	bl	1f0de <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   220f2:	ab13      	add	r3, sp, #76	; 0x4c
   220f4:	aa11      	add	r2, sp, #68	; 0x44
   220f6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   220fa:	f7fd f801 	bl	1f100 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   220fe:	ab12      	add	r3, sp, #72	; 0x48
   22100:	aa11      	add	r2, sp, #68	; 0x44
   22102:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   22106:	f7fc fffb 	bl	1f100 <net_frag_read_be32>
	if (!frag) {
   2210a:	4605      	mov	r5, r0
   2210c:	2800      	cmp	r0, #0
   2210e:	d0ba      	beq.n	22086 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   22110:	a915      	add	r1, sp, #84	; 0x54
   22112:	4630      	mov	r0, r6
   22114:	f7fe f99a 	bl	2044c <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   22118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2211a:	b16b      	cbz	r3, 22138 <handle_ra_input+0xf4>
   2211c:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   2211e:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   22122:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   22124:	428c      	cmp	r4, r1
   22126:	d007      	beq.n	22138 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   22128:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   2212c:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   2212e:	4620      	mov	r0, r4
   22130:	f7fb fa70 	bl	1d614 <net_if_ipv6_calc_reachable_time>
   22134:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   22138:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2213a:	b113      	cbz	r3, 22142 <handle_ra_input+0xfe>
   2213c:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   2213e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   22142:	2700      	movs	r7, #0
   22144:	e060      	b.n	22208 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   22146:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   2214a:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   2214e:	2306      	movs	r3, #6
   22150:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   22154:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   22158:	f10d 031e 	add.w	r3, sp, #30
   2215c:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   2215e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   22162:	2b05      	cmp	r3, #5
   22164:	d801      	bhi.n	2216a <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   22166:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   2216a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2216e:	f10d 021e 	add.w	r2, sp, #30
   22172:	9200      	str	r2, [sp, #0]
   22174:	aa11      	add	r2, sp, #68	; 0x44
   22176:	4641      	mov	r1, r8
   22178:	4628      	mov	r0, r5
   2217a:	f7fc ff68 	bl	1f04e <net_frag_read>
	if (!frag && offset) {
   2217e:	4605      	mov	r5, r0
   22180:	b318      	cbz	r0, 221ca <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   22182:	00e3      	lsls	r3, r4, #3
   22184:	b2db      	uxtb	r3, r3
   22186:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2218a:	1a9b      	subs	r3, r3, r2
   2218c:	b2db      	uxtb	r3, r3
   2218e:	3b02      	subs	r3, #2
	if (padding) {
   22190:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   22194:	d009      	beq.n	221aa <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   22196:	aa18      	add	r2, sp, #96	; 0x60
   22198:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   2219c:	2000      	movs	r0, #0
   2219e:	9000      	str	r0, [sp, #0]
   221a0:	4628      	mov	r0, r5
   221a2:	f7fc ff54 	bl	1f04e <net_frag_read>
		if (!frag && *pos) {
   221a6:	4605      	mov	r5, r0
   221a8:	b198      	cbz	r0, 221d2 <handle_ra_input+0x18e>
	return pkt->frags->data;
   221aa:	68b3      	ldr	r3, [r6, #8]
   221ac:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   221ae:	2302      	movs	r3, #2
   221b0:	9300      	str	r3, [sp, #0]
   221b2:	2301      	movs	r3, #1
   221b4:	aa03      	add	r2, sp, #12
   221b6:	3108      	adds	r1, #8
   221b8:	6970      	ldr	r0, [r6, #20]
   221ba:	f7ff fedf 	bl	21f7c <net_ipv6_nbr_add>
   221be:	4607      	mov	r7, r0
			if (!frag && offset) {
   221c0:	bb15      	cbnz	r5, 22208 <handle_ra_input+0x1c4>
   221c2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   221c6:	b1fb      	cbz	r3, 22208 <handle_ra_input+0x1c4>
   221c8:	e75d      	b.n	22086 <handle_ra_input+0x42>
	if (!frag && offset) {
   221ca:	f1b8 0f00 	cmp.w	r8, #0
   221ce:	d0d8      	beq.n	22182 <handle_ra_input+0x13e>
   221d0:	e7f6      	b.n	221c0 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   221d2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   221d6:	2b00      	cmp	r3, #0
   221d8:	d0e7      	beq.n	221aa <handle_ra_input+0x166>
   221da:	e7f1      	b.n	221c0 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   221dc:	ac18      	add	r4, sp, #96	; 0x60
   221de:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   221e2:	2300      	movs	r3, #0
   221e4:	9300      	str	r3, [sp, #0]
   221e6:	2302      	movs	r3, #2
   221e8:	4622      	mov	r2, r4
   221ea:	f7fc ff30 	bl	1f04e <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   221ee:	ab0f      	add	r3, sp, #60	; 0x3c
   221f0:	4622      	mov	r2, r4
   221f2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   221f6:	f7fc ff83 	bl	1f100 <net_frag_read_be32>
			if (!frag && offset) {
   221fa:	4605      	mov	r5, r0
   221fc:	2800      	cmp	r0, #0
   221fe:	d03b      	beq.n	22278 <handle_ra_input+0x234>
	return pkt->iface;
   22200:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   22202:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   22206:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   22208:	2d00      	cmp	r5, #0
   2220a:	f000 8170 	beq.w	224ee <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   2220e:	ac18      	add	r4, sp, #96	; 0x60
   22210:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   22214:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   22218:	9300      	str	r3, [sp, #0]
   2221a:	2301      	movs	r3, #1
   2221c:	4622      	mov	r2, r4
   2221e:	4628      	mov	r0, r5
   22220:	f7fc ff15 	bl	1f04e <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   22224:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   22228:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   2222c:	9300      	str	r3, [sp, #0]
   2222e:	2301      	movs	r3, #1
   22230:	4622      	mov	r2, r4
   22232:	f7fc ff0c 	bl	1f04e <net_frag_read>
		if (!frag) {
   22236:	4605      	mov	r5, r0
   22238:	2800      	cmp	r0, #0
   2223a:	f43f af24 	beq.w	22086 <handle_ra_input+0x42>
		switch (type) {
   2223e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   22242:	2b03      	cmp	r3, #3
   22244:	d01d      	beq.n	22282 <handle_ra_input+0x23e>
   22246:	2b05      	cmp	r3, #5
   22248:	d0c8      	beq.n	221dc <handle_ra_input+0x198>
   2224a:	2b01      	cmp	r3, #1
   2224c:	f43f af7b 	beq.w	22146 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   22250:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   22254:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   22258:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   2225a:	3b02      	subs	r3, #2
   2225c:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   2225e:	2200      	movs	r2, #0
   22260:	9200      	str	r2, [sp, #0]
   22262:	aa11      	add	r2, sp, #68	; 0x44
   22264:	f7fc fef3 	bl	1f04e <net_frag_read>
			if (!frag && offset) {
   22268:	4605      	mov	r5, r0
   2226a:	2800      	cmp	r0, #0
   2226c:	d1cc      	bne.n	22208 <handle_ra_input+0x1c4>
   2226e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   22272:	2b00      	cmp	r3, #0
   22274:	d0c8      	beq.n	22208 <handle_ra_input+0x1c4>
   22276:	e706      	b.n	22086 <handle_ra_input+0x42>
			if (!frag && offset) {
   22278:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2227c:	2b00      	cmp	r3, #0
   2227e:	d0bf      	beq.n	22200 <handle_ra_input+0x1bc>
   22280:	e701      	b.n	22086 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   22282:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   22286:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   2228a:	2203      	movs	r2, #3
   2228c:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   22290:	4093      	lsls	r3, r2
   22292:	b2db      	uxtb	r3, r3
   22294:	3b02      	subs	r3, #2
   22296:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   2229a:	f10d 031e 	add.w	r3, sp, #30
   2229e:	9300      	str	r3, [sp, #0]
   222a0:	2301      	movs	r3, #1
   222a2:	aa11      	add	r2, sp, #68	; 0x44
   222a4:	f7fc fed3 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   222a8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   222ac:	f10d 031f 	add.w	r3, sp, #31
   222b0:	9300      	str	r3, [sp, #0]
   222b2:	2301      	movs	r3, #1
   222b4:	aa11      	add	r2, sp, #68	; 0x44
   222b6:	f7fc feca 	bl	1f04e <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   222ba:	ab08      	add	r3, sp, #32
   222bc:	aa11      	add	r2, sp, #68	; 0x44
   222be:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   222c2:	f7fc ff1d 	bl	1f100 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   222c6:	ab09      	add	r3, sp, #36	; 0x24
   222c8:	aa11      	add	r2, sp, #68	; 0x44
   222ca:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   222ce:	f7fc ff17 	bl	1f100 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   222d2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   222d6:	2300      	movs	r3, #0
   222d8:	9300      	str	r3, [sp, #0]
   222da:	2304      	movs	r3, #4
   222dc:	aa11      	add	r2, sp, #68	; 0x44
   222de:	f7fc feb6 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   222e2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   222e6:	ab0b      	add	r3, sp, #44	; 0x2c
   222e8:	9300      	str	r3, [sp, #0]
   222ea:	2310      	movs	r3, #16
   222ec:	aa11      	add	r2, sp, #68	; 0x44
   222ee:	f7fc feae 	bl	1f04e <net_frag_read>
	if (!frag && *pos) {
   222f2:	4605      	mov	r5, r0
   222f4:	b320      	cbz	r0, 22340 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   222f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   222f8:	9a08      	ldr	r2, [sp, #32]
   222fa:	429a      	cmp	r2, r3
   222fc:	d314      	bcc.n	22328 <handle_ra_input+0x2e4>
   222fe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   22302:	f248 03fe 	movw	r3, #33022	; 0x80fe
   22306:	429a      	cmp	r2, r3
   22308:	d00e      	beq.n	22328 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   2230a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   2230e:	2b00      	cmp	r3, #0
   22310:	db1b      	blt.n	2234a <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   22312:	f89d 301f 	ldrb.w	r3, [sp, #31]
   22316:	f013 0f40 	tst.w	r3, #64	; 0x40
   2231a:	d005      	beq.n	22328 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   2231c:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   2231e:	b11b      	cbz	r3, 22328 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   22320:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   22324:	2b40      	cmp	r3, #64	; 0x40
   22326:	d03e      	beq.n	223a6 <handle_ra_input+0x362>
			if (!frag && offset) {
   22328:	2d00      	cmp	r5, #0
   2232a:	f47f af6d 	bne.w	22208 <handle_ra_input+0x1c4>
   2232e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   22332:	2b00      	cmp	r3, #0
   22334:	f43f af68 	beq.w	22208 <handle_ra_input+0x1c4>
   22338:	e6a5      	b.n	22086 <handle_ra_input+0x42>
   2233a:	bf00      	nop
   2233c:	20002ae0 	.word	0x20002ae0
	if (!frag && *pos) {
   22340:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   22344:	2b00      	cmp	r3, #0
   22346:	d0d6      	beq.n	222f6 <handle_ra_input+0x2b2>
   22348:	e7ee      	b.n	22328 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   2234a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2234e:	a90b      	add	r1, sp, #44	; 0x2c
   22350:	6970      	ldr	r0, [r6, #20]
   22352:	f7fa fe3f 	bl	1cfd4 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   22356:	4603      	mov	r3, r0
   22358:	b160      	cbz	r0, 22374 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   2235a:	9a08      	ldr	r2, [sp, #32]
   2235c:	b1ba      	cbz	r2, 2238e <handle_ra_input+0x34a>
   2235e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   22362:	d01c      	beq.n	2239e <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   22364:	2200      	movs	r2, #0
   22366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   2236a:	9908      	ldr	r1, [sp, #32]
   2236c:	4618      	mov	r0, r3
   2236e:	f7fa fee3 	bl	1d138 <net_if_ipv6_prefix_set_timer>
   22372:	e7ce      	b.n	22312 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   22374:	9b08      	ldr	r3, [sp, #32]
   22376:	2b00      	cmp	r3, #0
   22378:	d0cb      	beq.n	22312 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   2237a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2237e:	a90b      	add	r1, sp, #44	; 0x2c
   22380:	6970      	ldr	r0, [r6, #20]
   22382:	f7fa fdf7 	bl	1cf74 <net_if_ipv6_prefix_add>
		if (prefix) {
   22386:	4603      	mov	r3, r0
   22388:	2800      	cmp	r0, #0
   2238a:	d1e6      	bne.n	2235a <handle_ra_input+0x316>
   2238c:	e7c1      	b.n	22312 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   2238e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   22392:	f103 0128 	add.w	r1, r3, #40	; 0x28
   22396:	6970      	ldr	r0, [r6, #20]
   22398:	f7fa feea 	bl	1d170 <net_if_ipv6_prefix_rm>
   2239c:	e7b9      	b.n	22312 <handle_ra_input+0x2ce>
   2239e:	2201      	movs	r2, #1
   223a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   223a4:	e7b5      	b.n	22312 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   223a6:	2300      	movs	r3, #0
   223a8:	9305      	str	r3, [sp, #20]
   223aa:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   223ac:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   223ae:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   223b2:	22fe      	movs	r2, #254	; 0xfe
   223b4:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   223b8:	2280      	movs	r2, #128	; 0x80
   223ba:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   223be:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   223c2:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   223c4:	f898 2004 	ldrb.w	r2, [r8, #4]
   223c8:	2a06      	cmp	r2, #6
   223ca:	d032      	beq.n	22432 <handle_ra_input+0x3ee>
   223cc:	2a08      	cmp	r2, #8
   223ce:	d058      	beq.n	22482 <handle_ra_input+0x43e>
   223d0:	2a02      	cmp	r2, #2
   223d2:	d018      	beq.n	22406 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   223d4:	2208      	movs	r2, #8
   223d6:	a90b      	add	r1, sp, #44	; 0x2c
   223d8:	a803      	add	r0, sp, #12
   223da:	f7dd ff71 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   223de:	2100      	movs	r1, #0
   223e0:	a803      	add	r0, sp, #12
   223e2:	f7fa fb03 	bl	1c9ec <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   223e6:	4604      	mov	r4, r0
   223e8:	b118      	cbz	r0, 223f2 <handle_ra_input+0x3ae>
   223ea:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   223ee:	2b01      	cmp	r3, #1
   223f0:	d052      	beq.n	22498 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   223f2:	9b08      	ldr	r3, [sp, #32]
   223f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   223f8:	d072      	beq.n	224e0 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   223fa:	2201      	movs	r2, #1
   223fc:	a903      	add	r1, sp, #12
   223fe:	6970      	ldr	r0, [r6, #20]
   22400:	f7fa fb6a 	bl	1cad8 <net_if_ipv6_addr_add>
   22404:	e790      	b.n	22328 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   22406:	f898 3005 	ldrb.w	r3, [r8, #5]
   2240a:	2b01      	cmp	r3, #1
   2240c:	d1e2      	bne.n	223d4 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2240e:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   22410:	22ff      	movs	r2, #255	; 0xff
   22412:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   22416:	22fe      	movs	r2, #254	; 0xfe
   22418:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   2241c:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   22420:	6923      	ldr	r3, [r4, #16]
   22422:	781b      	ldrb	r3, [r3, #0]
   22424:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   22428:	6923      	ldr	r3, [r4, #16]
   2242a:	785b      	ldrb	r3, [r3, #1]
   2242c:	f88d 301b 	strb.w	r3, [sp, #27]
   22430:	e7d0      	b.n	223d4 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22432:	2203      	movs	r2, #3
   22434:	6921      	ldr	r1, [r4, #16]
   22436:	a805      	add	r0, sp, #20
   22438:	f7dd ff42 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   2243c:	23ff      	movs	r3, #255	; 0xff
   2243e:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   22442:	23fe      	movs	r3, #254	; 0xfe
   22444:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22448:	6921      	ldr	r1, [r4, #16]
   2244a:	2203      	movs	r2, #3
   2244c:	4411      	add	r1, r2
   2244e:	f10d 0019 	add.w	r0, sp, #25
   22452:	f7dd ff35 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   22456:	f898 3005 	ldrb.w	r3, [r8, #5]
   2245a:	2b02      	cmp	r3, #2
   2245c:	d00a      	beq.n	22474 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2245e:	f898 3005 	ldrb.w	r3, [r8, #5]
   22462:	2b03      	cmp	r3, #3
   22464:	d1b6      	bne.n	223d4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   22466:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2246a:	f083 0302 	eor.w	r3, r3, #2
   2246e:	f88d 3014 	strb.w	r3, [sp, #20]
   22472:	e7af      	b.n	223d4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   22474:	f89d 3014 	ldrb.w	r3, [sp, #20]
   22478:	f083 0302 	eor.w	r3, r3, #2
   2247c:	f88d 3014 	strb.w	r3, [sp, #20]
   22480:	e7ed      	b.n	2245e <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   22482:	6921      	ldr	r1, [r4, #16]
   22484:	a805      	add	r0, sp, #20
   22486:	f7dd ff1b 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2248a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2248e:	f083 0302 	eor.w	r3, r3, #2
   22492:	f88d 3014 	strb.w	r3, [sp, #20]
   22496:	e79d      	b.n	223d4 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   22498:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2249c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   224a0:	d015      	beq.n	224ce <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   224a2:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   224a6:	d80a      	bhi.n	224be <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   224a8:	3020      	adds	r0, #32
   224aa:	f009 f87f 	bl	2b5ac <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   224ae:	4a30      	ldr	r2, [pc, #192]	; (22570 <handle_ra_input+0x52c>)
   224b0:	fb82 3200 	smull	r3, r2, r2, r0
   224b4:	17c3      	asrs	r3, r0, #31
   224b6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   224ba:	4598      	cmp	r8, r3
   224bc:	d90a      	bls.n	224d4 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   224be:	9908      	ldr	r1, [sp, #32]
   224c0:	4620      	mov	r0, r4
   224c2:	f7fa fafb 	bl	1cabc <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   224c6:	2300      	movs	r3, #0
   224c8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   224cc:	e72c      	b.n	22328 <handle_ra_input+0x2e4>
   224ce:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   224d2:	e729      	b.n	22328 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   224d4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   224d8:	4620      	mov	r0, r4
   224da:	f7fa faef 	bl	1cabc <net_if_ipv6_addr_update_lifetime>
   224de:	e7f2      	b.n	224c6 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   224e0:	2300      	movs	r3, #0
   224e2:	2201      	movs	r2, #1
   224e4:	a903      	add	r1, sp, #12
   224e6:	6970      	ldr	r0, [r6, #20]
   224e8:	f7fa faf6 	bl	1cad8 <net_if_ipv6_addr_add>
   224ec:	e71c      	b.n	22328 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   224ee:	68b3      	ldr	r3, [r6, #8]
   224f0:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   224f2:	3108      	adds	r1, #8
   224f4:	6970      	ldr	r0, [r6, #20]
   224f6:	f7fa fe7b 	bl	1d1f0 <net_if_ipv6_router_lookup>
	if (router) {
   224fa:	4603      	mov	r3, r0
   224fc:	b350      	cbz	r0, 22554 <handle_ra_input+0x510>
		if (!router_lifetime) {
   224fe:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   22502:	b321      	cbz	r1, 2254e <handle_ra_input+0x50a>
			if (nbr) {
   22504:	b11f      	cbz	r7, 2250e <handle_ra_input+0x4ca>
   22506:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   22508:	2001      	movs	r0, #1
   2250a:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   2250e:	4618      	mov	r0, r3
   22510:	f7fa fec6 	bl	1d2a0 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   22514:	b18f      	cbz	r7, 2253a <handle_ra_input+0x4f6>
   22516:	68fb      	ldr	r3, [r7, #12]
   22518:	6818      	ldr	r0, [r3, #0]
   2251a:	b170      	cbz	r0, 2253a <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   2251c:	f7fa f818 	bl	1c550 <net_send_data>
   22520:	2800      	cmp	r0, #0
   22522:	db20      	blt.n	22566 <handle_ra_input+0x522>
   22524:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   22526:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2252a:	f009 f8e3 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   2252e:	6820      	ldr	r0, [r4, #0]
   22530:	b118      	cbz	r0, 2253a <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   22532:	f7fc fc0e 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   22536:	2300      	movs	r3, #0
   22538:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   2253a:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   2253c:	f500 7018 	add.w	r0, r0, #608	; 0x260
   22540:	f009 f8d8 	bl	2b6f4 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   22544:	4630      	mov	r0, r6
   22546:	f7fc fc04 	bl	1ed52 <net_pkt_unref>
	return NET_OK;
   2254a:	2000      	movs	r0, #0
   2254c:	e5a2      	b.n	22094 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   2254e:	f7fa ff0b 	bl	1d368 <net_if_ipv6_router_rm>
   22552:	e7df      	b.n	22514 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   22554:	68b3      	ldr	r3, [r6, #8]
   22556:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   22558:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   2255c:	3108      	adds	r1, #8
   2255e:	6970      	ldr	r0, [r6, #20]
   22560:	f7fa feaa 	bl	1d2b8 <net_if_ipv6_router_add>
   22564:	e7d6      	b.n	22514 <handle_ra_input+0x4d0>
   22566:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   22568:	6818      	ldr	r0, [r3, #0]
   2256a:	f7fc fbf2 	bl	1ed52 <net_pkt_unref>
   2256e:	e7d9      	b.n	22524 <handle_ra_input+0x4e0>
   22570:	10624dd3 	.word	0x10624dd3

00022574 <handle_ns_input>:
{
   22574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22578:	b0a5      	sub	sp, #148	; 0x94
   2257a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   2257c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2257e:	2200      	movs	r2, #0
   22580:	e002      	b.n	22588 <handle_ns_input+0x14>
		bytes += buf->len;
   22582:	8999      	ldrh	r1, [r3, #12]
   22584:	440a      	add	r2, r1
		buf = buf->frags;
   22586:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22588:	2b00      	cmp	r3, #0
   2258a:	d1fa      	bne.n	22582 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2258c:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   2258e:	a90a      	add	r1, sp, #40	; 0x28
   22590:	4620      	mov	r0, r4
   22592:	f7fd fe51 	bl	20238 <net_icmpv6_get_ns_hdr>
   22596:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   22598:	4aa6      	ldr	r2, [pc, #664]	; (22834 <handle_ns_input+0x2c0>)
   2259a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2259e:	3301      	adds	r3, #1
   225a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   225a4:	2d3f      	cmp	r5, #63	; 0x3f
   225a6:	d904      	bls.n	225b2 <handle_ns_input+0x3e>
	return pkt->frags->data;
   225a8:	68a3      	ldr	r3, [r4, #8]
   225aa:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   225ac:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   225ae:	2bff      	cmp	r3, #255	; 0xff
   225b0:	d002      	beq.n	225b8 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   225b2:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   225b4:	2bff      	cmp	r3, #255	; 0xff
   225b6:	d00a      	beq.n	225ce <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   225b8:	2314      	movs	r3, #20
   225ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   225be:	a90f      	add	r1, sp, #60	; 0x3c
   225c0:	4620      	mov	r0, r4
   225c2:	f7fd fe95 	bl	202f0 <net_icmpv6_get_nd_opt_hdr>
   225c6:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   225c8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   225ca:	2500      	movs	r5, #0
   225cc:	e00e      	b.n	225ec <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   225ce:	a908      	add	r1, sp, #32
   225d0:	4620      	mov	r0, r4
   225d2:	f7fd fcc2 	bl	1ff5a <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   225d6:	2800      	cmp	r0, #0
   225d8:	f000 80b7 	beq.w	2274a <handle_ns_input+0x1d6>
   225dc:	7843      	ldrb	r3, [r0, #1]
   225de:	2b00      	cmp	r3, #0
   225e0:	f040 80b3 	bne.w	2274a <handle_ns_input+0x1d6>
   225e4:	e7e8      	b.n	225b8 <handle_ns_input+0x44>
		bytes += buf->len;
   225e6:	899a      	ldrh	r2, [r3, #12]
   225e8:	4415      	add	r5, r2
		buf = buf->frags;
   225ea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   225ec:	2b00      	cmp	r3, #0
   225ee:	d1fa      	bne.n	225e6 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   225f0:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   225f2:	e042      	b.n	2267a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   225f4:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   225f6:	2900      	cmp	r1, #0
   225f8:	f040 80a7 	bne.w	2274a <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   225fc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   22600:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   22604:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   22606:	4411      	add	r1, r2
   22608:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   2260a:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   2260c:	00db      	lsls	r3, r3, #3
   2260e:	b2db      	uxtb	r3, r3
   22610:	3b02      	subs	r3, #2
   22612:	b2db      	uxtb	r3, r3
   22614:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   22618:	f10d 021a 	add.w	r2, sp, #26
   2261c:	9200      	str	r2, [sp, #0]
   2261e:	f10d 0216 	add.w	r2, sp, #22
   22622:	b289      	uxth	r1, r1
   22624:	68a0      	ldr	r0, [r4, #8]
   22626:	f7fc fd12 	bl	1f04e <net_frag_read>
	if (!frag && pos == 0xffff) {
   2262a:	2800      	cmp	r0, #0
   2262c:	d042      	beq.n	226b4 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   2262e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   22632:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   22636:	f10d 021a 	add.w	r2, sp, #26
   2263a:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   2263c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   22640:	4293      	cmp	r3, r2
   22642:	d901      	bls.n	22648 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   22644:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   22648:	68a3      	ldr	r3, [r4, #8]
   2264a:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   2264c:	2300      	movs	r3, #0
   2264e:	9300      	str	r3, [sp, #0]
   22650:	aa08      	add	r2, sp, #32
   22652:	3108      	adds	r1, #8
   22654:	6960      	ldr	r0, [r4, #20]
   22656:	f7ff fc91 	bl	21f7c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   2265a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   2265e:	787b      	ldrb	r3, [r7, #1]
   22660:	00db      	lsls	r3, r3, #3
   22662:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   22664:	4413      	add	r3, r2
   22666:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   22668:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2266c:	429a      	cmp	r2, r3
   2266e:	d26c      	bcs.n	2274a <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   22670:	a90f      	add	r1, sp, #60	; 0x3c
   22672:	4620      	mov	r0, r4
   22674:	f7fd fe3c 	bl	202f0 <net_icmpv6_get_nd_opt_hdr>
   22678:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2267a:	b317      	cbz	r7, 226c2 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   2267c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   22680:	4295      	cmp	r5, r2
   22682:	d91e      	bls.n	226c2 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   22684:	787b      	ldrb	r3, [r7, #1]
   22686:	b1e3      	cbz	r3, 226c2 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   22688:	7839      	ldrb	r1, [r7, #0]
   2268a:	2901      	cmp	r1, #1
   2268c:	d1e5      	bne.n	2265a <handle_ns_input+0xe6>
	return pkt->frags->data;
   2268e:	68a1      	ldr	r1, [r4, #8]
   22690:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22692:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22694:	2800      	cmp	r0, #0
   22696:	d1ad      	bne.n	225f4 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22698:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2269a:	b928      	cbnz	r0, 226a8 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2269c:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2269e:	b928      	cbnz	r0, 226ac <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   226a0:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   226a2:	b129      	cbz	r1, 226b0 <handle_ns_input+0x13c>
   226a4:	2100      	movs	r1, #0
   226a6:	e7a6      	b.n	225f6 <handle_ns_input+0x82>
   226a8:	2100      	movs	r1, #0
   226aa:	e7a4      	b.n	225f6 <handle_ns_input+0x82>
   226ac:	2100      	movs	r1, #0
   226ae:	e7a2      	b.n	225f6 <handle_ns_input+0x82>
   226b0:	2101      	movs	r1, #1
   226b2:	e7a0      	b.n	225f6 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   226b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   226b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   226bc:	429a      	cmp	r2, r3
   226be:	d1b6      	bne.n	2262e <handle_ns_input+0xba>
   226c0:	e7cb      	b.n	2265a <handle_ns_input+0xe6>
	return pkt->iface;
   226c2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   226c6:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   226ca:	2500      	movs	r5, #0
   226cc:	e001      	b.n	226d2 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   226ce:	b9ef      	cbnz	r7, 2270c <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   226d0:	3501      	adds	r5, #1
   226d2:	2d02      	cmp	r5, #2
   226d4:	dc21      	bgt.n	2271a <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   226d6:	236c      	movs	r3, #108	; 0x6c
   226d8:	fb03 8305 	mla	r3, r3, r5, r8
   226dc:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   226e0:	2f00      	cmp	r7, #0
   226e2:	d0f5      	beq.n	226d0 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   226e4:	236c      	movs	r3, #108	; 0x6c
   226e6:	fb03 8305 	mla	r3, r3, r5, r8
   226ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   226ec:	2b0a      	cmp	r3, #10
   226ee:	d1ef      	bne.n	226d0 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   226f0:	216c      	movs	r1, #108	; 0x6c
   226f2:	fb01 f105 	mul.w	r1, r1, r5
   226f6:	3120      	adds	r1, #32
   226f8:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   226fa:	2210      	movs	r2, #16
   226fc:	4411      	add	r1, r2
   226fe:	4648      	mov	r0, r9
   22700:	f009 fc28 	bl	2bf54 <memcmp>
   22704:	2800      	cmp	r0, #0
   22706:	d0e2      	beq.n	226ce <handle_ns_input+0x15a>
		return false;
   22708:	2700      	movs	r7, #0
   2270a:	e7e0      	b.n	226ce <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   2270c:	236c      	movs	r3, #108	; 0x6c
   2270e:	fb03 f505 	mul.w	r5, r3, r5
   22712:	3520      	adds	r5, #32
   22714:	4445      	add	r5, r8
   22716:	350c      	adds	r5, #12
   22718:	e000      	b.n	2271c <handle_ns_input+0x1a8>
	return NULL;
   2271a:	2500      	movs	r5, #0
	if (!ifaddr) {
   2271c:	b1ad      	cbz	r5, 2274a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2271e:	68a3      	ldr	r3, [r4, #8]
   22720:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22722:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22724:	b93b      	cbnz	r3, 22736 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22726:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22728:	b9cb      	cbnz	r3, 2275e <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2272a:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2272c:	b9cb      	cbnz	r3, 22762 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2272e:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22730:	b1cb      	cbz	r3, 22766 <handle_ns_input+0x1f2>
   22732:	2300      	movs	r3, #0
   22734:	e000      	b.n	22738 <handle_ns_input+0x1c4>
   22736:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   22738:	2b00      	cmp	r3, #0
   2273a:	d07d      	beq.n	22838 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2273c:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2273e:	f240 23ff 	movw	r3, #767	; 0x2ff
   22742:	429a      	cmp	r2, r3
   22744:	d011      	beq.n	2276a <handle_ns_input+0x1f6>
   22746:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   22748:	bb0b      	cbnz	r3, 2278e <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   2274a:	4a3a      	ldr	r2, [pc, #232]	; (22834 <handle_ns_input+0x2c0>)
   2274c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   22750:	3301      	adds	r3, #1
   22752:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   22756:	2002      	movs	r0, #2
}
   22758:	b025      	add	sp, #148	; 0x94
   2275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2275e:	2300      	movs	r3, #0
   22760:	e7ea      	b.n	22738 <handle_ns_input+0x1c4>
   22762:	2300      	movs	r3, #0
   22764:	e7e8      	b.n	22738 <handle_ns_input+0x1c4>
   22766:	2301      	movs	r3, #1
   22768:	e7e6      	b.n	22738 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2276a:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2276c:	b95b      	cbnz	r3, 22786 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2276e:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   22770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   22774:	d001      	beq.n	2277a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   22776:	2300      	movs	r3, #0
   22778:	e7e6      	b.n	22748 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2277a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2277c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2277e:	2bff      	cmp	r3, #255	; 0xff
   22780:	d003      	beq.n	2278a <handle_ns_input+0x216>
   22782:	2300      	movs	r3, #0
   22784:	e7e0      	b.n	22748 <handle_ns_input+0x1d4>
   22786:	2300      	movs	r3, #0
   22788:	e7de      	b.n	22748 <handle_ns_input+0x1d4>
   2278a:	2301      	movs	r3, #1
   2278c:	e7dc      	b.n	22748 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2278e:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   22792:	b94b      	cbnz	r3, 227a8 <handle_ns_input+0x234>
	return pkt->iface;
   22794:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   22796:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22798:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2279a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2279e:	429a      	cmp	r2, r3
   227a0:	d0d3      	beq.n	2274a <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   227a2:	f7fa fb51 	bl	1ce48 <net_if_ipv6_dad_failed>
   227a6:	e7d0      	b.n	2274a <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   227a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   227ac:	7603      	strb	r3, [r0, #24]
   227ae:	2300      	movs	r3, #0
   227b0:	2202      	movs	r2, #2
   227b2:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   227b4:	7683      	strb	r3, [r0, #26]
   227b6:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   227b8:	7703      	strb	r3, [r0, #28]
   227ba:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   227bc:	7783      	strb	r3, [r0, #30]
   227be:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   227c0:	f880 3020 	strb.w	r3, [r0, #32]
   227c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   227c8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   227cc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   227d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   227d4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   227d8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   227dc:	2301      	movs	r3, #1
   227de:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   227e2:	68a3      	ldr	r3, [r4, #8]
   227e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   227e8:	f108 0118 	add.w	r1, r8, #24
   227ec:	6960      	ldr	r0, [r4, #20]
   227ee:	f7fa fe15 	bl	1d41c <net_if_ipv6_select_src_addr>
   227f2:	4603      	mov	r3, r0
   227f4:	ae10      	add	r6, sp, #64	; 0x40
   227f6:	6800      	ldr	r0, [r0, #0]
   227f8:	6859      	ldr	r1, [r3, #4]
   227fa:	689a      	ldr	r2, [r3, #8]
   227fc:	68db      	ldr	r3, [r3, #12]
   227fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22800:	ae10      	add	r6, sp, #64	; 0x40
   22802:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22804:	f8c8 0008 	str.w	r0, [r8, #8]
   22808:	f8c8 100c 	str.w	r1, [r8, #12]
   2280c:	f8c8 2010 	str.w	r2, [r8, #16]
   22810:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   22814:	2320      	movs	r3, #32
   22816:	68a2      	ldr	r2, [r4, #8]
   22818:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   2281a:	9300      	str	r3, [sp, #0]
   2281c:	1d2b      	adds	r3, r5, #4
   2281e:	f101 0218 	add.w	r2, r1, #24
   22822:	3108      	adds	r1, #8
   22824:	6960      	ldr	r0, [r4, #20]
   22826:	f7fe ff69 	bl	216fc <net_ipv6_send_na>
	if (!ret) {
   2282a:	2800      	cmp	r0, #0
   2282c:	f000 80b5 	beq.w	2299a <handle_ns_input+0x426>
	return NET_DROP;
   22830:	2002      	movs	r0, #2
   22832:	e791      	b.n	22758 <handle_ns_input+0x1e4>
   22834:	20002ae0 	.word	0x20002ae0
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   22838:	2100      	movs	r1, #0
   2283a:	3008      	adds	r0, #8
   2283c:	f7fa f8d6 	bl	1c9ec <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   22840:	4607      	mov	r7, r0
   22842:	2800      	cmp	r0, #0
   22844:	d181      	bne.n	2274a <handle_ns_input+0x1d6>
   22846:	68a3      	ldr	r3, [r4, #8]
   22848:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2284c:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   22850:	f240 23ff 	movw	r3, #767	; 0x2ff
   22854:	429a      	cmp	r2, r3
   22856:	d02b      	beq.n	228b0 <handle_ns_input+0x33c>
   22858:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   2285a:	9303      	str	r3, [sp, #12]
   2285c:	2b00      	cmp	r3, #0
   2285e:	d03c      	beq.n	228da <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   22860:	af14      	add	r7, sp, #80	; 0x50
   22862:	4643      	mov	r3, r8
   22864:	f853 0f08 	ldr.w	r0, [r3, #8]!
   22868:	6859      	ldr	r1, [r3, #4]
   2286a:	689a      	ldr	r2, [r3, #8]
   2286c:	68db      	ldr	r3, [r3, #12]
   2286e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   22870:	af14      	add	r7, sp, #80	; 0x50
   22872:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22874:	f8c8 0018 	str.w	r0, [r8, #24]
   22878:	f8c8 101c 	str.w	r1, [r8, #28]
   2287c:	f8c8 2020 	str.w	r2, [r8, #32]
   22880:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   22884:	68a3      	ldr	r3, [r4, #8]
   22886:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2288a:	af18      	add	r7, sp, #96	; 0x60
   2288c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   22890:	6871      	ldr	r1, [r6, #4]
   22892:	68b2      	ldr	r2, [r6, #8]
   22894:	68f3      	ldr	r3, [r6, #12]
   22896:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   22898:	ae18      	add	r6, sp, #96	; 0x60
   2289a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2289c:	f8ce 0008 	str.w	r0, [lr, #8]
   228a0:	f8ce 100c 	str.w	r1, [lr, #12]
   228a4:	f8ce 2010 	str.w	r2, [lr, #16]
   228a8:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   228ac:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   228ae:	e7b2      	b.n	22816 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   228b0:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   228b4:	b96b      	cbnz	r3, 228d2 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   228b6:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   228ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   228be:	d001      	beq.n	228c4 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   228c0:	2300      	movs	r3, #0
   228c2:	e7ca      	b.n	2285a <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   228c4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   228c8:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   228ca:	2bff      	cmp	r3, #255	; 0xff
   228cc:	d003      	beq.n	228d6 <handle_ns_input+0x362>
   228ce:	2300      	movs	r3, #0
   228d0:	e7c3      	b.n	2285a <handle_ns_input+0x2e6>
   228d2:	2300      	movs	r3, #0
   228d4:	e7c1      	b.n	2285a <handle_ns_input+0x2e6>
   228d6:	2301      	movs	r3, #1
   228d8:	e7bf      	b.n	2285a <handle_ns_input+0x2e6>
	return pkt->iface;
   228da:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   228de:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   228e2:	f04f 0900 	mov.w	r9, #0
   228e6:	e004      	b.n	228f2 <handle_ns_input+0x37e>
		return false;
   228e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   228ec:	e01e      	b.n	2292c <handle_ns_input+0x3b8>
   228ee:	f109 0901 	add.w	r9, r9, #1
   228f2:	f1b9 0f02 	cmp.w	r9, #2
   228f6:	dc22      	bgt.n	2293e <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   228f8:	236c      	movs	r3, #108	; 0x6c
   228fa:	fb03 a309 	mla	r3, r3, r9, sl
   228fe:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   22902:	f1bb 0f00 	cmp.w	fp, #0
   22906:	d0f2      	beq.n	228ee <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   22908:	236c      	movs	r3, #108	; 0x6c
   2290a:	fb03 a309 	mla	r3, r3, r9, sl
   2290e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   22910:	2b0a      	cmp	r3, #10
   22912:	d1ec      	bne.n	228ee <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   22914:	216c      	movs	r1, #108	; 0x6c
   22916:	fb01 f109 	mul.w	r1, r1, r9
   2291a:	3120      	adds	r1, #32
   2291c:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   2291e:	2210      	movs	r2, #16
   22920:	4411      	add	r1, r2
   22922:	4640      	mov	r0, r8
   22924:	f009 fb16 	bl	2bf54 <memcmp>
   22928:	2800      	cmp	r0, #0
   2292a:	d1dd      	bne.n	228e8 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2292c:	f1bb 0f00 	cmp.w	fp, #0
   22930:	d0dd      	beq.n	228ee <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   22932:	276c      	movs	r7, #108	; 0x6c
   22934:	fb07 f709 	mul.w	r7, r7, r9
   22938:	3720      	adds	r7, #32
   2293a:	4457      	add	r7, sl
   2293c:	370c      	adds	r7, #12
   2293e:	2f00      	cmp	r7, #0
   22940:	f43f af03 	beq.w	2274a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   22944:	68a3      	ldr	r3, [r4, #8]
   22946:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2294a:	af1c      	add	r7, sp, #112	; 0x70
   2294c:	4663      	mov	r3, ip
   2294e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   22952:	6859      	ldr	r1, [r3, #4]
   22954:	689a      	ldr	r2, [r3, #8]
   22956:	68db      	ldr	r3, [r3, #12]
   22958:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2295a:	af1c      	add	r7, sp, #112	; 0x70
   2295c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2295e:	f8cc 0018 	str.w	r0, [ip, #24]
   22962:	f8cc 101c 	str.w	r1, [ip, #28]
   22966:	f8cc 2020 	str.w	r2, [ip, #32]
   2296a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   2296e:	68a3      	ldr	r3, [r4, #8]
   22970:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   22974:	af20      	add	r7, sp, #128	; 0x80
   22976:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2297a:	6871      	ldr	r1, [r6, #4]
   2297c:	68b2      	ldr	r2, [r6, #8]
   2297e:	68f3      	ldr	r3, [r6, #12]
   22980:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   22982:	ae20      	add	r6, sp, #128	; 0x80
   22984:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22986:	f8ce 0008 	str.w	r0, [lr, #8]
   2298a:	f8ce 100c 	str.w	r1, [lr, #12]
   2298e:	f8ce 2010 	str.w	r2, [lr, #16]
   22992:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   22996:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   22998:	e73d      	b.n	22816 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   2299a:	4620      	mov	r0, r4
   2299c:	f7fc f9d9 	bl	1ed52 <net_pkt_unref>
		return NET_OK;
   229a0:	2000      	movs	r0, #0
   229a2:	e6d9      	b.n	22758 <handle_ns_input+0x1e4>

000229a4 <nd_reachable_timeout>:
{
   229a4:	b530      	push	{r4, r5, lr}
   229a6:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   229a8:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   229ac:	2300      	movs	r3, #0
   229ae:	2b07      	cmp	r3, #7
   229b0:	dc07      	bgt.n	229c2 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   229b2:	4c47      	ldr	r4, [pc, #284]	; (22ad0 <nd_reachable_timeout+0x12c>)
   229b4:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   229b8:	68e2      	ldr	r2, [r4, #12]
   229ba:	4295      	cmp	r5, r2
   229bc:	d002      	beq.n	229c4 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   229be:	3301      	adds	r3, #1
   229c0:	e7f5      	b.n	229ae <nd_reachable_timeout+0xa>
	return NULL;
   229c2:	2400      	movs	r4, #0
	if (!data || !nbr) {
   229c4:	b38d      	cbz	r5, 22a2a <nd_reachable_timeout+0x86>
   229c6:	b384      	cbz	r4, 22a2a <nd_reachable_timeout+0x86>
   229c8:	4603      	mov	r3, r0
	switch (data->state) {
   229ca:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   229ce:	2a04      	cmp	r2, #4
   229d0:	d82b      	bhi.n	22a2a <nd_reachable_timeout+0x86>
   229d2:	e8df f002 	tbb	[pc, r2]
   229d6:	2703      	.short	0x2703
   229d8:	3f2c      	.short	0x3f2c
   229da:	45          	.byte	0x45
   229db:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   229dc:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   229e0:	2a02      	cmp	r2, #2
   229e2:	d912      	bls.n	22a0a <nd_reachable_timeout+0x66>
   229e4:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   229e6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   229ea:	f008 fe83 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   229ee:	6828      	ldr	r0, [r5, #0]
   229f0:	b118      	cbz	r0, 229fa <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   229f2:	f7fc f9ae 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   229f6:	2300      	movs	r3, #0
   229f8:	602b      	str	r3, [r5, #0]
   229fa:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   229fc:	3014      	adds	r0, #20
   229fe:	f008 fe79 	bl	2b6f4 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   22a02:	4620      	mov	r0, r4
   22a04:	f7fd ffa6 	bl	20954 <net_nbr_unref>
   22a08:	e00f      	b.n	22a2a <nd_reachable_timeout+0x86>
			data->ns_count++;
   22a0a:	3201      	adds	r2, #1
   22a0c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   22a10:	68a0      	ldr	r0, [r4, #8]
   22a12:	2100      	movs	r1, #0
   22a14:	9101      	str	r1, [sp, #4]
   22a16:	3b10      	subs	r3, #16
   22a18:	9300      	str	r3, [sp, #0]
   22a1a:	460b      	mov	r3, r1
   22a1c:	460a      	mov	r2, r1
   22a1e:	f7ff f927 	bl	21c70 <net_ipv6_send_ns>
   22a22:	e002      	b.n	22a2a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   22a24:	2202      	movs	r2, #2
   22a26:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   22a2a:	b003      	add	sp, #12
   22a2c:	bd30      	pop	{r4, r5, pc}
   22a2e:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   22a30:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   22a34:	f008 fe5e 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   22a38:	6828      	ldr	r0, [r5, #0]
   22a3a:	b118      	cbz	r0, 22a44 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   22a3c:	f7fc f989 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   22a40:	2300      	movs	r3, #0
   22a42:	602b      	str	r3, [r5, #0]
   22a44:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   22a46:	3014      	adds	r0, #20
   22a48:	f008 fe54 	bl	2b6f4 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   22a4c:	4620      	mov	r0, r4
   22a4e:	f7fd ff81 	bl	20954 <net_nbr_unref>
   22a52:	e7ea      	b.n	22a2a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   22a54:	2204      	movs	r2, #4
   22a56:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   22a5a:	2200      	movs	r2, #0
   22a5c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   22a60:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   22a64:	2a02      	cmp	r2, #2
   22a66:	d91f      	bls.n	22aa8 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   22a68:	f1a3 0110 	sub.w	r1, r3, #16
   22a6c:	68a0      	ldr	r0, [r4, #8]
   22a6e:	f7fa fbbf 	bl	1d1f0 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   22a72:	2800      	cmp	r0, #0
   22a74:	d0d9      	beq.n	22a2a <nd_reachable_timeout+0x86>
   22a76:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   22a7a:	2a00      	cmp	r2, #0
   22a7c:	d1d5      	bne.n	22a2a <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   22a7e:	f7fa fc73 	bl	1d368 <net_if_ipv6_router_rm>
   22a82:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   22a84:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   22a88:	f008 fe34 	bl	2b6f4 <k_delayed_work_cancel>
	if (data->pending) {
   22a8c:	6828      	ldr	r0, [r5, #0]
   22a8e:	b118      	cbz	r0, 22a98 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   22a90:	f7fc f95f 	bl	1ed52 <net_pkt_unref>
		data->pending = NULL;
   22a94:	2300      	movs	r3, #0
   22a96:	602b      	str	r3, [r5, #0]
   22a98:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   22a9a:	3014      	adds	r0, #20
   22a9c:	f008 fe2a 	bl	2b6f4 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   22aa0:	4620      	mov	r0, r4
   22aa2:	f7fd ff57 	bl	20954 <net_nbr_unref>
   22aa6:	e7c0      	b.n	22a2a <nd_reachable_timeout+0x86>
			data->ns_count++;
   22aa8:	3201      	adds	r2, #1
   22aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   22aae:	68a0      	ldr	r0, [r4, #8]
   22ab0:	2100      	movs	r1, #0
   22ab2:	9101      	str	r1, [sp, #4]
   22ab4:	3b10      	subs	r3, #16
   22ab6:	9300      	str	r3, [sp, #0]
   22ab8:	460b      	mov	r3, r1
   22aba:	460a      	mov	r2, r1
   22abc:	f7ff f8d8 	bl	21c70 <net_ipv6_send_ns>
   22ac0:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   22ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22ac6:	3114      	adds	r1, #20
   22ac8:	4802      	ldr	r0, [pc, #8]	; (22ad4 <nd_reachable_timeout+0x130>)
   22aca:	f008 fe6d 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   22ace:	e7ac      	b.n	22a2a <nd_reachable_timeout+0x86>
   22ad0:	2000bef0 	.word	0x2000bef0
   22ad4:	20002c00 	.word	0x20002c00

00022ad8 <net_ipv6_start_dad>:
{
   22ad8:	b500      	push	{lr}
   22ada:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   22adc:	2301      	movs	r3, #1
   22ade:	9301      	str	r3, [sp, #4]
   22ae0:	3104      	adds	r1, #4
   22ae2:	9100      	str	r1, [sp, #0]
   22ae4:	2300      	movs	r3, #0
   22ae6:	461a      	mov	r2, r3
   22ae8:	4619      	mov	r1, r3
   22aea:	f7ff f8c1 	bl	21c70 <net_ipv6_send_ns>
}
   22aee:	b003      	add	sp, #12
   22af0:	f85d fb04 	ldr.w	pc, [sp], #4

00022af4 <net_ipv6_prepare_for_send>:
{
   22af4:	b570      	push	{r4, r5, r6, lr}
   22af6:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   22af8:	2300      	movs	r3, #0
   22afa:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   22afc:	6943      	ldr	r3, [r0, #20]
   22afe:	f3bf 8f5b 	dmb	ish
   22b02:	68db      	ldr	r3, [r3, #12]
   22b04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   22b08:	f013 0f02 	tst.w	r3, #2
   22b0c:	d108      	bne.n	22b20 <net_ipv6_prepare_for_send+0x2c>
   22b0e:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   22b10:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22b12:	b13b      	cbz	r3, 22b24 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   22b14:	68a3      	ldr	r3, [r4, #8]
   22b16:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   22b18:	3118      	adds	r1, #24
   22b1a:	4620      	mov	r0, r4
   22b1c:	f7fe f9e6 	bl	20eec <update_ll_reserve>
}
   22b20:	b004      	add	sp, #16
   22b22:	bd70      	pop	{r4, r5, r6, pc}
   22b24:	6883      	ldr	r3, [r0, #8]
   22b26:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   22b28:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   22b2a:	2bff      	cmp	r3, #255	; 0xff
   22b2c:	d0f2      	beq.n	22b14 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   22b2e:	3118      	adds	r1, #24
   22b30:	a803      	add	r0, sp, #12
   22b32:	f7fa fa9d 	bl	1d070 <net_if_ipv6_addr_onlink>
   22b36:	b348      	cbz	r0, 22b8c <net_ipv6_prepare_for_send+0x98>
   22b38:	68a3      	ldr	r3, [r4, #8]
   22b3a:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   22b3c:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   22b3e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   22b40:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   22b42:	7d5a      	ldrb	r2, [r3, #21]
   22b44:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   22b48:	7d5b      	ldrb	r3, [r3, #21]
   22b4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   22b4e:	9b03      	ldr	r3, [sp, #12]
   22b50:	2b00      	cmp	r3, #0
   22b52:	d03e      	beq.n	22bd2 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   22b54:	462a      	mov	r2, r5
   22b56:	6961      	ldr	r1, [r4, #20]
   22b58:	4832      	ldr	r0, [pc, #200]	; (22c24 <net_ipv6_prepare_for_send+0x130>)
   22b5a:	f7fe f90d 	bl	20d78 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   22b5e:	4606      	mov	r6, r0
   22b60:	2800      	cmp	r0, #0
   22b62:	d051      	beq.n	22c08 <net_ipv6_prepare_for_send+0x114>
   22b64:	7840      	ldrb	r0, [r0, #1]
   22b66:	28ff      	cmp	r0, #255	; 0xff
   22b68:	d04e      	beq.n	22c08 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   22b6a:	f7fd ff85 	bl	20a78 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22b6e:	1c83      	adds	r3, r0, #2
   22b70:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   22b72:	7843      	ldrb	r3, [r0, #1]
   22b74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   22b78:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   22b7a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   22b7e:	2b02      	cmp	r3, #2
   22b80:	d036      	beq.n	22bf0 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   22b82:	4629      	mov	r1, r5
   22b84:	4620      	mov	r0, r4
   22b86:	f7fe f9b1 	bl	20eec <update_ll_reserve>
   22b8a:	e7c9      	b.n	22b20 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   22b8c:	68a3      	ldr	r3, [r4, #8]
   22b8e:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   22b90:	3118      	adds	r1, #24
   22b92:	2000      	movs	r0, #0
   22b94:	f001 fb26 	bl	241e4 <net_route_lookup>
		if (route) {
   22b98:	4606      	mov	r6, r0
   22b9a:	b160      	cbz	r0, 22bb6 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   22b9c:	f001 fc06 	bl	243ac <net_route_get_nexthop>
			if (!nexthop) {
   22ba0:	4605      	mov	r5, r0
   22ba2:	2800      	cmp	r0, #0
   22ba4:	d1d3      	bne.n	22b4e <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   22ba6:	4630      	mov	r0, r6
   22ba8:	f001 fbac 	bl	24304 <net_route_del>
				net_pkt_unref(pkt);
   22bac:	4620      	mov	r0, r4
   22bae:	f7fc f8d0 	bl	1ed52 <net_pkt_unref>
				return NULL;
   22bb2:	2000      	movs	r0, #0
   22bb4:	e7b4      	b.n	22b20 <net_ipv6_prepare_for_send+0x2c>
   22bb6:	68a3      	ldr	r3, [r4, #8]
   22bb8:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   22bba:	3118      	adds	r1, #24
   22bbc:	2000      	movs	r0, #0
   22bbe:	f7fa fb47 	bl	1d250 <net_if_ipv6_router_find_default>
			if (!router) {
   22bc2:	4605      	mov	r5, r0
   22bc4:	b108      	cbz	r0, 22bca <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   22bc6:	352c      	adds	r5, #44	; 0x2c
   22bc8:	e7c1      	b.n	22b4e <net_ipv6_prepare_for_send+0x5a>
   22bca:	68a3      	ldr	r3, [r4, #8]
   22bcc:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   22bce:	3518      	adds	r5, #24
				goto try_send;
   22bd0:	e7c0      	b.n	22b54 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   22bd2:	4629      	mov	r1, r5
   22bd4:	a803      	add	r0, sp, #12
   22bd6:	f7fa fa4b 	bl	1d070 <net_if_ipv6_addr_onlink>
   22bda:	2800      	cmp	r0, #0
   22bdc:	d0ba      	beq.n	22b54 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   22bde:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   22be0:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   22be2:	7d5a      	ldrb	r2, [r3, #21]
   22be4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   22be8:	7d5b      	ldrb	r3, [r3, #21]
   22bea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   22bee:	e7b1      	b.n	22b54 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   22bf0:	2103      	movs	r1, #3
   22bf2:	4630      	mov	r0, r6
   22bf4:	f7fd ff48 	bl	20a88 <ipv6_nbr_set_state>
   22bf8:	68f1      	ldr	r1, [r6, #12]
   22bfa:	f241 3288 	movw	r2, #5000	; 0x1388
   22bfe:	3114      	adds	r1, #20
   22c00:	4809      	ldr	r0, [pc, #36]	; (22c28 <net_ipv6_prepare_for_send+0x134>)
   22c02:	f008 fdd1 	bl	2b7a8 <k_delayed_work_submit_to_queue>
   22c06:	e7bc      	b.n	22b82 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   22c08:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   22c0a:	68a3      	ldr	r3, [r4, #8]
   22c0c:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   22c0e:	2600      	movs	r6, #0
   22c10:	9601      	str	r6, [sp, #4]
   22c12:	9500      	str	r5, [sp, #0]
   22c14:	4633      	mov	r3, r6
   22c16:	3208      	adds	r2, #8
   22c18:	4621      	mov	r1, r4
   22c1a:	f7ff f829 	bl	21c70 <net_ipv6_send_ns>
		return NULL;
   22c1e:	4630      	mov	r0, r6
   22c20:	e77e      	b.n	22b20 <net_ipv6_prepare_for_send+0x2c>
   22c22:	bf00      	nop
   22c24:	2000bee4 	.word	0x2000bee4
   22c28:	20002c00 	.word	0x20002c00

00022c2c <net_ipv6_send_rs>:
{
   22c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c30:	b084      	sub	sp, #16
   22c32:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   22c34:	6843      	ldr	r3, [r0, #4]
   22c36:	689b      	ldr	r3, [r3, #8]
   22c38:	2100      	movs	r1, #0
   22c3a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   22c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c40:	f7fc f816 	bl	1ec70 <net_pkt_get_reserve_tx>
   22c44:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22c46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c4a:	f7fc f82f 	bl	1ecac <net_pkt_get_frag>
   22c4e:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   22c50:	4601      	mov	r1, r0
   22c52:	4620      	mov	r0, r4
   22c54:	f7fc f8a7 	bl	1eda6 <net_pkt_frag_add>
	pkt->iface = iface;
   22c58:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   22c5a:	7d6b      	ldrb	r3, [r5, #21]
   22c5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   22c60:	7d6b      	ldrb	r3, [r5, #21]
   22c62:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   22c66:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22c6a:	220a      	movs	r2, #10
   22c6c:	f362 03c6 	bfi	r3, r2, #3, #4
   22c70:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   22c74:	2328      	movs	r3, #40	; 0x28
   22c76:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   22c7a:	68a3      	ldr	r3, [r4, #8]
   22c7c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   22c7e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   22c82:	461a      	mov	r2, r3
   22c84:	2100      	movs	r1, #0
   22c86:	1ac0      	subs	r0, r0, r3
   22c88:	f009 f9f8 	bl	2c07c <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   22c8c:	2200      	movs	r2, #0
   22c8e:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   22c90:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   22c94:	68a3      	ldr	r3, [r4, #8]
   22c96:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   22c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c9c:	7619      	strb	r1, [r3, #24]
   22c9e:	2102      	movs	r1, #2
   22ca0:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   22ca2:	769a      	strb	r2, [r3, #26]
   22ca4:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   22ca6:	771a      	strb	r2, [r3, #28]
   22ca8:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   22caa:	779a      	strb	r2, [r3, #30]
   22cac:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   22cae:	f883 2020 	strb.w	r2, [r3, #32]
   22cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   22cb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   22cba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   22cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   22cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   22cc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   22cca:	2201      	movs	r2, #1
   22ccc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   22cd0:	68a3      	ldr	r3, [r4, #8]
   22cd2:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   22cd6:	f108 0118 	add.w	r1, r8, #24
   22cda:	4628      	mov	r0, r5
   22cdc:	f7fa fb9e 	bl	1d41c <net_if_ipv6_select_src_addr>
   22ce0:	4603      	mov	r3, r0
   22ce2:	466d      	mov	r5, sp
   22ce4:	6800      	ldr	r0, [r0, #0]
   22ce6:	6859      	ldr	r1, [r3, #4]
   22ce8:	689a      	ldr	r2, [r3, #8]
   22cea:	68db      	ldr	r3, [r3, #12]
   22cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22cee:	466d      	mov	r5, sp
   22cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22cf2:	f8c8 0008 	str.w	r0, [r8, #8]
   22cf6:	f8c8 100c 	str.w	r1, [r8, #12]
   22cfa:	f8c8 2010 	str.w	r2, [r8, #16]
   22cfe:	f8c8 3014 	str.w	r3, [r8, #20]
   22d02:	68a3      	ldr	r3, [r4, #8]
   22d04:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22d06:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22d08:	b93a      	cbnz	r2, 22d1a <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22d0a:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22d0c:	b982      	cbnz	r2, 22d30 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22d0e:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22d10:	b982      	cbnz	r2, 22d34 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   22d12:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22d14:	b183      	cbz	r3, 22d38 <net_ipv6_send_rs+0x10c>
   22d16:	2300      	movs	r3, #0
   22d18:	e000      	b.n	22d1c <net_ipv6_send_rs+0xf0>
   22d1a:	2300      	movs	r3, #0
	if (!unspec_src) {
   22d1c:	461f      	mov	r7, r3
   22d1e:	b97b      	cbnz	r3, 22d40 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   22d20:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   22d22:	7d1b      	ldrb	r3, [r3, #20]
   22d24:	2b06      	cmp	r3, #6
   22d26:	d02a      	beq.n	22d7e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   22d28:	2b08      	cmp	r3, #8
   22d2a:	d007      	beq.n	22d3c <net_ipv6_send_rs+0x110>
	return 0;
   22d2c:	2500      	movs	r5, #0
   22d2e:	e008      	b.n	22d42 <net_ipv6_send_rs+0x116>
   22d30:	2300      	movs	r3, #0
   22d32:	e7f3      	b.n	22d1c <net_ipv6_send_rs+0xf0>
   22d34:	2300      	movs	r3, #0
   22d36:	e7f1      	b.n	22d1c <net_ipv6_send_rs+0xf0>
   22d38:	2301      	movs	r3, #1
   22d3a:	e7ef      	b.n	22d1c <net_ipv6_send_rs+0xf0>
		return 16;
   22d3c:	2510      	movs	r5, #16
   22d3e:	e000      	b.n	22d42 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   22d40:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   22d42:	2285      	movs	r2, #133	; 0x85
   22d44:	1d29      	adds	r1, r5, #4
   22d46:	4620      	mov	r0, r4
   22d48:	f7fe f92f 	bl	20faa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   22d4c:	3608      	adds	r6, #8
   22d4e:	2104      	movs	r1, #4
   22d50:	4630      	mov	r0, r6
   22d52:	f7f9 fadb 	bl	1c30c <net_buf_simple_add>
	if (!unspec_src) {
   22d56:	b1a7      	cbz	r7, 22d82 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   22d58:	68a1      	ldr	r1, [r4, #8]
   22d5a:	4620      	mov	r0, r4
   22d5c:	f7fd f8b0 	bl	1fec0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   22d60:	4620      	mov	r0, r4
   22d62:	f7f9 fbf5 	bl	1c550 <net_send_data>
   22d66:	2800      	cmp	r0, #0
   22d68:	db2b      	blt.n	22dc2 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   22d6a:	4a1c      	ldr	r2, [pc, #112]	; (22ddc <net_ipv6_send_rs+0x1b0>)
   22d6c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   22d70:	3301      	adds	r3, #1
   22d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   22d76:	2000      	movs	r0, #0
}
   22d78:	b004      	add	sp, #16
   22d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   22d7e:	2508      	movs	r5, #8
   22d80:	e7df      	b.n	22d42 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   22d82:	4629      	mov	r1, r5
   22d84:	4630      	mov	r0, r6
   22d86:	f7f9 fac1 	bl	1c30c <net_buf_simple_add>
   22d8a:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   22d8e:	4620      	mov	r0, r4
   22d90:	f7fc fab8 	bl	1f304 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   22d94:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   22d98:	2301      	movs	r3, #1
   22d9a:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   22d9c:	08eb      	lsrs	r3, r5, #3
   22d9e:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   22da0:	f898 2014 	ldrb.w	r2, [r8, #20]
   22da4:	f8d8 1010 	ldr.w	r1, [r8, #16]
   22da8:	300a      	adds	r0, #10
   22daa:	f7dd fa89 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   22dae:	f898 2014 	ldrb.w	r2, [r8, #20]
   22db2:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   22db4:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   22db6:	3a02      	subs	r2, #2
   22db8:	2100      	movs	r1, #0
   22dba:	4430      	add	r0, r6
   22dbc:	f009 f95e 	bl	2c07c <memset>
   22dc0:	e7ca      	b.n	22d58 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   22dc2:	4620      	mov	r0, r4
   22dc4:	f7fb ffc5 	bl	1ed52 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   22dc8:	4a04      	ldr	r2, [pc, #16]	; (22ddc <net_ipv6_send_rs+0x1b0>)
   22dca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   22dce:	3301      	adds	r3, #1
   22dd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   22dd4:	f06f 0015 	mvn.w	r0, #21
   22dd8:	e7ce      	b.n	22d78 <net_ipv6_send_rs+0x14c>
   22dda:	bf00      	nop
   22ddc:	20002ae0 	.word	0x20002ae0

00022de0 <net_ipv6_start_rs>:
{
   22de0:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   22de2:	f7ff ff23 	bl	22c2c <net_ipv6_send_rs>
}
   22de6:	bd08      	pop	{r3, pc}

00022de8 <net_ipv6_mld_join>:
{
   22de8:	b570      	push	{r4, r5, r6, lr}
   22dea:	b082      	sub	sp, #8
   22dec:	ab02      	add	r3, sp, #8
   22dee:	f843 0d04 	str.w	r0, [r3, #-4]!
   22df2:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   22df4:	4619      	mov	r1, r3
   22df6:	4628      	mov	r0, r5
   22df8:	f7fa f842 	bl	1ce80 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   22dfc:	4604      	mov	r4, r0
   22dfe:	b118      	cbz	r0, 22e08 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   22e00:	7803      	ldrb	r3, [r0, #0]
   22e02:	f013 0f02 	tst.w	r3, #2
   22e06:	d123      	bne.n	22e50 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   22e08:	b1c4      	cbz	r4, 22e3c <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   22e0a:	2202      	movs	r2, #2
   22e0c:	4629      	mov	r1, r5
   22e0e:	9801      	ldr	r0, [sp, #4]
   22e10:	f7fe fb5a 	bl	214c8 <send_mldv2>
	if (ret < 0) {
   22e14:	1e06      	subs	r6, r0, #0
   22e16:	db0e      	blt.n	22e36 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   22e18:	7823      	ldrb	r3, [r4, #0]
   22e1a:	f043 0302 	orr.w	r3, r3, #2
   22e1e:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   22e20:	2201      	movs	r2, #1
   22e22:	4629      	mov	r1, r5
   22e24:	9801      	ldr	r0, [sp, #4]
   22e26:	f7fa f877 	bl	1cf18 <net_if_mcast_monitor>
   22e2a:	2300      	movs	r3, #0
   22e2c:	461a      	mov	r2, r3
   22e2e:	9901      	ldr	r1, [sp, #4]
   22e30:	4809      	ldr	r0, [pc, #36]	; (22e58 <net_ipv6_mld_join+0x70>)
   22e32:	f001 fc01 	bl	24638 <net_mgmt_event_notify_with_info>
}
   22e36:	4630      	mov	r0, r6
   22e38:	b002      	add	sp, #8
   22e3a:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   22e3c:	4629      	mov	r1, r5
   22e3e:	9801      	ldr	r0, [sp, #4]
   22e40:	f7f9 ff32 	bl	1cca8 <net_if_ipv6_maddr_add>
		if (!maddr) {
   22e44:	4604      	mov	r4, r0
   22e46:	2800      	cmp	r0, #0
   22e48:	d1df      	bne.n	22e0a <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   22e4a:	f06f 060b 	mvn.w	r6, #11
   22e4e:	e7f2      	b.n	22e36 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   22e50:	f06f 0677 	mvn.w	r6, #119	; 0x77
   22e54:	e7ef      	b.n	22e36 <net_ipv6_mld_join+0x4e>
   22e56:	bf00      	nop
   22e58:	f0600007 	.word	0xf0600007

00022e5c <net_ipv6_mld_leave>:
{
   22e5c:	b570      	push	{r4, r5, r6, lr}
   22e5e:	4604      	mov	r4, r0
   22e60:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   22e62:	f7f9 ff5d 	bl	1cd20 <net_if_ipv6_maddr_rm>
   22e66:	b198      	cbz	r0, 22e90 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   22e68:	2201      	movs	r2, #1
   22e6a:	4629      	mov	r1, r5
   22e6c:	4620      	mov	r0, r4
   22e6e:	f7fe fb2b 	bl	214c8 <send_mldv2>
	if (ret < 0) {
   22e72:	1e06      	subs	r6, r0, #0
   22e74:	db0a      	blt.n	22e8c <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   22e76:	2200      	movs	r2, #0
   22e78:	4629      	mov	r1, r5
   22e7a:	4620      	mov	r0, r4
   22e7c:	f7fa f84c 	bl	1cf18 <net_if_mcast_monitor>
   22e80:	2300      	movs	r3, #0
   22e82:	461a      	mov	r2, r3
   22e84:	4621      	mov	r1, r4
   22e86:	4804      	ldr	r0, [pc, #16]	; (22e98 <net_ipv6_mld_leave+0x3c>)
   22e88:	f001 fbd6 	bl	24638 <net_mgmt_event_notify_with_info>
}
   22e8c:	4630      	mov	r0, r6
   22e8e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22e90:	f06f 0615 	mvn.w	r6, #21
   22e94:	e7fa      	b.n	22e8c <net_ipv6_mld_leave+0x30>
   22e96:	bf00      	nop
   22e98:	f0600008 	.word	0xf0600008

00022e9c <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   22e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ea0:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   22ea2:	6884      	ldr	r4, [r0, #8]
   22ea4:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   22ea6:	2300      	movs	r3, #0
   22ea8:	e002      	b.n	22eb0 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   22eaa:	89a2      	ldrh	r2, [r4, #12]
   22eac:	4413      	add	r3, r2
		buf = buf->frags;
   22eae:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   22eb0:	2c00      	cmp	r4, #0
   22eb2:	d1fa      	bne.n	22eaa <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   22eb4:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   22eb6:	7939      	ldrb	r1, [r7, #4]
   22eb8:	797a      	ldrb	r2, [r7, #5]
   22eba:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   22ebe:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   22ec0:	4293      	cmp	r3, r2
   22ec2:	d007      	beq.n	22ed4 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   22ec4:	4abd      	ldr	r2, [pc, #756]	; (231bc <net_ipv6_process_pkt+0x320>)
   22ec6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22ec8:	3301      	adds	r3, #1
   22eca:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   22ecc:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   22ece:	b009      	add	sp, #36	; 0x24
   22ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   22ed4:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   22ed6:	2bff      	cmp	r3, #255	; 0xff
   22ed8:	d105      	bne.n	22ee6 <net_ipv6_process_pkt+0x4a>
   22eda:	4ab8      	ldr	r2, [pc, #736]	; (231bc <net_ipv6_process_pkt+0x320>)
   22edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22ede:	3301      	adds	r3, #1
   22ee0:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   22ee2:	2002      	movs	r0, #2
   22ee4:	e7f3      	b.n	22ece <net_ipv6_process_pkt+0x32>
   22ee6:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   22ee8:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   22eec:	2100      	movs	r1, #0
   22eee:	4640      	mov	r0, r8
   22ef0:	f7f9 fd7c 	bl	1c9ec <net_if_ipv6_addr_lookup>
   22ef4:	2800      	cmp	r0, #0
   22ef6:	d06f      	beq.n	22fd8 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   22ef8:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   22efa:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   22efc:	2300      	movs	r3, #0
   22efe:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   22f02:	2328      	movs	r3, #40	; 0x28
   22f04:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   22f08:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   22f0c:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   22f10:	f000 80b0 	beq.w	23074 <net_ipv6_process_pkt+0x1d8>
   22f14:	f1b9 0f11 	cmp.w	r9, #17
   22f18:	f000 80ae 	beq.w	23078 <net_ipv6_process_pkt+0x1dc>
   22f1c:	f1b9 0f06 	cmp.w	r9, #6
   22f20:	f000 80a6 	beq.w	23070 <net_ipv6_process_pkt+0x1d4>
   22f24:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   22f26:	2b00      	cmp	r3, #0
   22f28:	f040 8166 	bne.w	231f8 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   22f2c:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   22f30:	2328      	movs	r3, #40	; 0x28
   22f32:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   22f36:	464f      	mov	r7, r9
	ext_bitmap = 0;
   22f38:	2300      	movs	r3, #0
   22f3a:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   22f3c:	9302      	str	r3, [sp, #8]
   22f3e:	46a3      	mov	fp, r4
   22f40:	4654      	mov	r4, sl
	while (frag) {
   22f42:	2c00      	cmp	r4, #0
   22f44:	f000 8156 	beq.w	231f4 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   22f48:	2f3a      	cmp	r7, #58	; 0x3a
   22f4a:	f000 8099 	beq.w	23080 <net_ipv6_process_pkt+0x1e4>
   22f4e:	2f11      	cmp	r7, #17
   22f50:	f000 8098 	beq.w	23084 <net_ipv6_process_pkt+0x1e8>
   22f54:	2f06      	cmp	r7, #6
   22f56:	f000 8091 	beq.w	2307c <net_ipv6_process_pkt+0x1e0>
   22f5a:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   22f5c:	2b00      	cmp	r3, #0
   22f5e:	f040 8093 	bne.w	23088 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   22f62:	f10d 0820 	add.w	r8, sp, #32
   22f66:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   22f6a:	f10d 031f 	add.w	r3, sp, #31
   22f6e:	9300      	str	r3, [sp, #0]
   22f70:	2301      	movs	r3, #1
   22f72:	4642      	mov	r2, r8
   22f74:	4620      	mov	r0, r4
   22f76:	f7fc f86a 	bl	1f04e <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   22f7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   22f7e:	f10d 031e 	add.w	r3, sp, #30
   22f82:	9300      	str	r3, [sp, #0]
   22f84:	2301      	movs	r3, #1
   22f86:	4642      	mov	r2, r8
   22f88:	f7fc f861 	bl	1f04e <net_frag_read>
		if (!frag && offset == 0xffff) {
   22f8c:	4604      	mov	r4, r0
   22f8e:	2800      	cmp	r0, #0
   22f90:	f000 8081 	beq.w	23096 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   22f94:	f89d 801e 	ldrb.w	r8, [sp, #30]
   22f98:	f108 0801 	add.w	r8, r8, #1
   22f9c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   22fa0:	fa5f f888 	uxtb.w	r8, r8
   22fa4:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   22fa8:	fa1f f888 	uxth.w	r8, r8
   22fac:	9b02      	ldr	r3, [sp, #8]
   22fae:	4443      	add	r3, r8
   22fb0:	b29b      	uxth	r3, r3
   22fb2:	9302      	str	r3, [sp, #8]
		switch (next) {
   22fb4:	2f00      	cmp	r7, #0
   22fb6:	d077      	beq.n	230a8 <net_ipv6_process_pkt+0x20c>
   22fb8:	2f3b      	cmp	r7, #59	; 0x3b
   22fba:	d073      	beq.n	230a4 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   22fbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   22fc0:	3b01      	subs	r3, #1
   22fc2:	2201      	movs	r2, #1
   22fc4:	2104      	movs	r1, #4
   22fc6:	4628      	mov	r0, r5
   22fc8:	f7fd fa88 	bl	204dc <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   22fcc:	4a7b      	ldr	r2, [pc, #492]	; (231bc <net_ipv6_process_pkt+0x320>)
   22fce:	6a13      	ldr	r3, [r2, #32]
   22fd0:	3301      	adds	r3, #1
   22fd2:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   22fd4:	2002      	movs	r0, #2
   22fd6:	e77a      	b.n	22ece <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   22fd8:	2100      	movs	r1, #0
   22fda:	4640      	mov	r0, r8
   22fdc:	f7f9 ff50 	bl	1ce80 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   22fe0:	2800      	cmp	r0, #0
   22fe2:	d189      	bne.n	22ef8 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   22fe4:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   22fe6:	2bff      	cmp	r3, #255	; 0xff
   22fe8:	d086      	beq.n	22ef8 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22fea:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22fee:	bb8b      	cbnz	r3, 23054 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22ff0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22ff4:	bb83      	cbnz	r3, 23058 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22ffa:	bb7b      	cbnz	r3, 2305c <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   22ffc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   23000:	0a13      	lsrs	r3, r2, #8
   23002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   23006:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2300a:	0211      	lsls	r1, r2, #8
   2300c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   23010:	430b      	orrs	r3, r1
   23012:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23016:	2b01      	cmp	r3, #1
   23018:	d022      	beq.n	23060 <net_ipv6_process_pkt+0x1c4>
   2301a:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   2301c:	2b00      	cmp	r3, #0
   2301e:	f47f af6b 	bne.w	22ef8 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   23022:	ab06      	add	r3, sp, #24
   23024:	aa05      	add	r2, sp, #20
   23026:	4641      	mov	r1, r8
   23028:	6968      	ldr	r0, [r5, #20]
   2302a:	f001 f9f5 	bl	24418 <net_route_get_info>
   2302e:	b1c8      	cbz	r0, 23064 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   23030:	9b05      	ldr	r3, [sp, #20]
   23032:	b13b      	cbz	r3, 23044 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   23034:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   23036:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   23038:	7d5a      	ldrb	r2, [r3, #21]
   2303a:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   2303e:	7d5b      	ldrb	r3, [r3, #21]
   23040:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   23044:	9906      	ldr	r1, [sp, #24]
   23046:	4628      	mov	r0, r5
   23048:	f001 fa0c 	bl	24464 <net_route_packet>
			if (ret < 0) {
   2304c:	2800      	cmp	r0, #0
   2304e:	db09      	blt.n	23064 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   23050:	2000      	movs	r0, #0
   23052:	e73c      	b.n	22ece <net_ipv6_process_pkt+0x32>
   23054:	2300      	movs	r3, #0
   23056:	e7e1      	b.n	2301c <net_ipv6_process_pkt+0x180>
   23058:	2300      	movs	r3, #0
   2305a:	e7df      	b.n	2301c <net_ipv6_process_pkt+0x180>
   2305c:	2300      	movs	r3, #0
   2305e:	e7dd      	b.n	2301c <net_ipv6_process_pkt+0x180>
   23060:	2301      	movs	r3, #1
   23062:	e7db      	b.n	2301c <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   23064:	4a55      	ldr	r2, [pc, #340]	; (231bc <net_ipv6_process_pkt+0x320>)
   23066:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23068:	3301      	adds	r3, #1
   2306a:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   2306c:	2002      	movs	r0, #2
   2306e:	e72e      	b.n	22ece <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   23070:	2301      	movs	r3, #1
   23072:	e758      	b.n	22f26 <net_ipv6_process_pkt+0x8a>
   23074:	2301      	movs	r3, #1
   23076:	e756      	b.n	22f26 <net_ipv6_process_pkt+0x8a>
   23078:	2301      	movs	r3, #1
   2307a:	e754      	b.n	22f26 <net_ipv6_process_pkt+0x8a>
   2307c:	2301      	movs	r3, #1
   2307e:	e76d      	b.n	22f5c <net_ipv6_process_pkt+0xc0>
   23080:	2301      	movs	r3, #1
   23082:	e76b      	b.n	22f5c <net_ipv6_process_pkt+0xc0>
   23084:	2301      	movs	r3, #1
   23086:	e769      	b.n	22f5c <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   23088:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2308c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   2308e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   23092:	46b9      	mov	r9, r7
   23094:	e0b2      	b.n	231fc <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   23096:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2309a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2309e:	429a      	cmp	r2, r3
   230a0:	f47f af78 	bne.w	22f94 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   230a4:	2002      	movs	r0, #2
   230a6:	e712      	b.n	22ece <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   230a8:	f1b9 0f00 	cmp.w	r9, #0
   230ac:	d186      	bne.n	22fbc <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   230ae:	9a03      	ldr	r2, [sp, #12]
   230b0:	f012 0f01 	tst.w	r2, #1
   230b4:	d182      	bne.n	22fbc <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   230b6:	f042 0301 	orr.w	r3, r2, #1
   230ba:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   230bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   230c0:	4546      	cmp	r6, r8
   230c2:	f2c0 8094 	blt.w	231ee <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   230c6:	f10d 0313 	add.w	r3, sp, #19
   230ca:	9300      	str	r3, [sp, #0]
   230cc:	2301      	movs	r3, #1
   230ce:	aa06      	add	r2, sp, #24
   230d0:	4620      	mov	r0, r4
   230d2:	f7fb ffbc 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   230d6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   230da:	ab05      	add	r3, sp, #20
   230dc:	9300      	str	r3, [sp, #0]
   230de:	2301      	movs	r3, #1
   230e0:	aa06      	add	r2, sp, #24
   230e2:	f7fb ffb4 	bl	1f04e <net_frag_read>
	if (!frag && loc == 0xffff) {
   230e6:	4604      	mov	r4, r0
   230e8:	b108      	cbz	r0, 230ee <net_ipv6_process_pkt+0x252>
   230ea:	2702      	movs	r7, #2
   230ec:	e027      	b.n	2313e <net_ipv6_process_pkt+0x2a2>
   230ee:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   230f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   230f6:	429a      	cmp	r2, r3
   230f8:	d068      	beq.n	231cc <net_ipv6_process_pkt+0x330>
   230fa:	2702      	movs	r7, #2
   230fc:	e01f      	b.n	2313e <net_ipv6_process_pkt+0x2a2>
			length++;
   230fe:	3701      	adds	r7, #1
   23100:	b2bf      	uxth	r7, r7
			loc--;
   23102:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   23106:	3b01      	subs	r3, #1
   23108:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   2310c:	45b8      	cmp	r8, r7
   2310e:	d960      	bls.n	231d2 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   23110:	f10d 0a20 	add.w	sl, sp, #32
   23114:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   23118:	f10d 0313 	add.w	r3, sp, #19
   2311c:	9300      	str	r3, [sp, #0]
   2311e:	2301      	movs	r3, #1
   23120:	4652      	mov	r2, sl
   23122:	4620      	mov	r0, r4
   23124:	f7fb ff93 	bl	1f04e <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   23128:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   2312c:	ab05      	add	r3, sp, #20
   2312e:	9300      	str	r3, [sp, #0]
   23130:	2301      	movs	r3, #1
   23132:	4652      	mov	r2, sl
   23134:	f7fb ff8b 	bl	1f04e <net_frag_read>
		if (!frag && loc == 0xffff) {
   23138:	4604      	mov	r4, r0
   2313a:	2800      	cmp	r0, #0
   2313c:	d040      	beq.n	231c0 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   2313e:	2c00      	cmp	r4, #0
   23140:	d047      	beq.n	231d2 <net_ipv6_process_pkt+0x336>
   23142:	45b8      	cmp	r8, r7
   23144:	d945      	bls.n	231d2 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   23146:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2314a:	2b00      	cmp	r3, #0
   2314c:	d0d7      	beq.n	230fe <net_ipv6_process_pkt+0x262>
   2314e:	2b01      	cmp	r3, #1
   23150:	d009      	beq.n	23166 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   23152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23156:	2b80      	cmp	r3, #128	; 0x80
   23158:	d019      	beq.n	2318e <net_ipv6_process_pkt+0x2f2>
   2315a:	2bc0      	cmp	r3, #192	; 0xc0
   2315c:	d012      	beq.n	23184 <net_ipv6_process_pkt+0x2e8>
   2315e:	2b40      	cmp	r3, #64	; 0x40
   23160:	d00e      	beq.n	23180 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   23162:	462b      	mov	r3, r5
   23164:	e01a      	b.n	2319c <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   23166:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2316a:	441f      	add	r7, r3
   2316c:	b2bf      	uxth	r7, r7
   2316e:	3702      	adds	r7, #2
   23170:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   23172:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   23176:	4413      	add	r3, r2
   23178:	3302      	adds	r3, #2
   2317a:	f8ad 3018 	strh.w	r3, [sp, #24]
   2317e:	e7c5      	b.n	2310c <net_ipv6_process_pkt+0x270>
		return NULL;
   23180:	2300      	movs	r3, #0
   23182:	e00b      	b.n	2319c <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   23184:	68ab      	ldr	r3, [r5, #8]
   23186:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   23188:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   2318a:	2bff      	cmp	r3, #255	; 0xff
   2318c:	d013      	beq.n	231b6 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   2318e:	463b      	mov	r3, r7
   23190:	2202      	movs	r2, #2
   23192:	2104      	movs	r1, #4
   23194:	4628      	mov	r0, r5
   23196:	f7fd f9a1 	bl	204dc <net_icmpv6_send_error>
		return NULL;
   2319a:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   2319c:	b1b3      	cbz	r3, 231cc <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   2319e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   231a2:	441f      	add	r7, r3
   231a4:	b2bf      	uxth	r7, r7
   231a6:	3702      	adds	r7, #2
   231a8:	b2bf      	uxth	r7, r7
			loc += opt_len;
   231aa:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   231ae:	4413      	add	r3, r2
   231b0:	f8ad 3018 	strh.w	r3, [sp, #24]
   231b4:	e7aa      	b.n	2310c <net_ipv6_process_pkt+0x270>
			return NULL;
   231b6:	2300      	movs	r3, #0
   231b8:	e7f0      	b.n	2319c <net_ipv6_process_pkt+0x300>
   231ba:	bf00      	nop
   231bc:	20002ae0 	.word	0x20002ae0
		if (!frag && loc == 0xffff) {
   231c0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   231c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   231c8:	429a      	cmp	r2, r3
   231ca:	d1b8      	bne.n	2313e <net_ipv6_process_pkt+0x2a2>
	return NULL;
   231cc:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   231ce:	2302      	movs	r3, #2
   231d0:	e007      	b.n	231e2 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   231d2:	45b8      	cmp	r8, r7
   231d4:	d1fa      	bne.n	231cc <net_ipv6_process_pkt+0x330>
	*pos += length;
   231d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   231da:	441f      	add	r7, r3
   231dc:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   231e0:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   231e2:	2b02      	cmp	r3, #2
   231e4:	f43f af5e 	beq.w	230a4 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   231e8:	f89d 701f 	ldrb.w	r7, [sp, #31]
   231ec:	e6a9      	b.n	22f42 <net_ipv6_process_pkt+0xa6>
		return NULL;
   231ee:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   231f0:	2302      	movs	r3, #2
   231f2:	e7f6      	b.n	231e2 <net_ipv6_process_pkt+0x346>
   231f4:	46b9      	mov	r9, r7
   231f6:	e001      	b.n	231fc <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   231f8:	2300      	movs	r3, #0
   231fa:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   231fc:	9b02      	ldr	r3, [sp, #8]
   231fe:	b10b      	cbz	r3, 23204 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   23200:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   23204:	f1b9 0f11 	cmp.w	r9, #17
   23208:	d011      	beq.n	2322e <net_ipv6_process_pkt+0x392>
   2320a:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   2320e:	d004      	beq.n	2321a <net_ipv6_process_pkt+0x37e>
   23210:	f1b9 0f06 	cmp.w	r9, #6
   23214:	d010      	beq.n	23238 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   23216:	2002      	movs	r0, #2
   23218:	e659      	b.n	22ece <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2321a:	a906      	add	r1, sp, #24
   2321c:	4628      	mov	r0, r5
   2321e:	f7fc fe9c 	bl	1ff5a <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   23222:	7842      	ldrb	r2, [r0, #1]
   23224:	7801      	ldrb	r1, [r0, #0]
   23226:	4628      	mov	r0, r5
   23228:	f7fd fb62 	bl	208f0 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   2322c:	e64f      	b.n	22ece <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   2322e:	4629      	mov	r1, r5
   23230:	2011      	movs	r0, #17
   23232:	f003 fbd3 	bl	269dc <net_conn_input>
   23236:	e64a      	b.n	22ece <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   23238:	4629      	mov	r1, r5
   2323a:	2006      	movs	r0, #6
   2323c:	f003 fbce 	bl	269dc <net_conn_input>
   23240:	e645      	b.n	22ece <net_ipv6_process_pkt+0x32>
   23242:	bf00      	nop

00023244 <net_ipv6_init>:

void net_ipv6_init(void)
{
   23244:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   23246:	4806      	ldr	r0, [pc, #24]	; (23260 <net_ipv6_init+0x1c>)
   23248:	f7fc fe0a 	bl	1fe60 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   2324c:	4805      	ldr	r0, [pc, #20]	; (23264 <net_ipv6_init+0x20>)
   2324e:	f7fc fe07 	bl	1fe60 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   23252:	4805      	ldr	r0, [pc, #20]	; (23268 <net_ipv6_init+0x24>)
   23254:	f7fc fe04 	bl	1fe60 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   23258:	4804      	ldr	r0, [pc, #16]	; (2326c <net_ipv6_init+0x28>)
   2325a:	f7fc fe01 	bl	1fe60 <net_icmpv6_register_handler>
   2325e:	bd08      	pop	{r3, pc}
   23260:	2000c2f0 	.word	0x2000c2f0
   23264:	2000bed8 	.word	0x2000bed8
   23268:	2000c2fc 	.word	0x2000c2fc
   2326c:	2000becc 	.word	0x2000becc

00023270 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   23270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   23274:	6883      	ldr	r3, [r0, #8]
   23276:	689b      	ldr	r3, [r3, #8]
   23278:	f993 3001 	ldrsb.w	r3, [r3, #1]
   2327c:	2b00      	cmp	r3, #0
   2327e:	f2c0 831e 	blt.w	238be <uncompress_IPHC_header+0x64e>
   23282:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   23284:	2164      	movs	r1, #100	; 0x64
   23286:	f7fb fd11 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   2328a:	4607      	mov	r7, r0
   2328c:	2800      	cmp	r0, #0
   2328e:	f000 8319 	beq.w	238c4 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   23292:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   23294:	2360      	movs	r3, #96	; 0x60
   23296:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   23298:	2328      	movs	r3, #40	; 0x28
   2329a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2329e:	68a3      	ldr	r3, [r4, #8]
   232a0:	689a      	ldr	r2, [r3, #8]
   232a2:	7813      	ldrb	r3, [r2, #0]
   232a4:	f003 0318 	and.w	r3, r3, #24
   232a8:	2b18      	cmp	r3, #24
   232aa:	d863      	bhi.n	23374 <uncompress_IPHC_header+0x104>
   232ac:	e8df f003 	tbb	[pc, r3]
   232b0:	6262620d 	.word	0x6262620d
   232b4:	62626262 	.word	0x62626262
   232b8:	6262623c 	.word	0x6262623c
   232bc:	62626262 	.word	0x62626262
   232c0:	6262624c 	.word	0x6262624c
   232c4:	62626262 	.word	0x62626262
   232c8:	5c          	.byte	0x5c
   232c9:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   232ca:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   232cc:	0993      	lsrs	r3, r2, #6
   232ce:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   232d2:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   232d4:	7832      	ldrb	r2, [r6, #0]
   232d6:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   232da:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   232dc:	68a2      	ldr	r2, [r4, #8]
   232de:	6892      	ldr	r2, [r2, #8]
   232e0:	f992 2003 	ldrsb.w	r2, [r2, #3]
   232e4:	f002 020f 	and.w	r2, r2, #15
   232e8:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   232ec:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   232ee:	68a3      	ldr	r3, [r4, #8]
   232f0:	6899      	ldr	r1, [r3, #8]
   232f2:	2202      	movs	r2, #2
   232f4:	3104      	adds	r1, #4
   232f6:	18b0      	adds	r0, r6, r2
   232f8:	f7dc ffe2 	bl	2c0 <memcpy>
		offset += 2;
   232fc:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   232fe:	68a3      	ldr	r3, [r4, #8]
   23300:	689b      	ldr	r3, [r3, #8]
   23302:	781a      	ldrb	r2, [r3, #0]
   23304:	f012 0f04 	tst.w	r2, #4
   23308:	d103      	bne.n	23312 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   2330a:	5d5b      	ldrb	r3, [r3, r5]
   2330c:	71b3      	strb	r3, [r6, #6]
		offset++;
   2330e:	3501      	adds	r5, #1
   23310:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   23312:	68a3      	ldr	r3, [r4, #8]
   23314:	689a      	ldr	r2, [r3, #8]
   23316:	7813      	ldrb	r3, [r2, #0]
   23318:	f003 0303 	and.w	r3, r3, #3
   2331c:	2b03      	cmp	r3, #3
   2331e:	d82f      	bhi.n	23380 <uncompress_IPHC_header+0x110>
   23320:	e8df f003 	tbb	[pc, r3]
   23324:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   23328:	7893      	ldrb	r3, [r2, #2]
   2332a:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   2332c:	f003 030f 	and.w	r3, r3, #15
   23330:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   23334:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   23336:	68a3      	ldr	r3, [r4, #8]
   23338:	6899      	ldr	r1, [r3, #8]
   2333a:	2202      	movs	r2, #2
   2333c:	3103      	adds	r1, #3
   2333e:	18b0      	adds	r0, r6, r2
   23340:	f7dc ffbe 	bl	2c0 <memcpy>
		offset += 2;
   23344:	2505      	movs	r5, #5
   23346:	e7da      	b.n	232fe <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   23348:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   2334a:	0993      	lsrs	r3, r2, #6
   2334c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   23350:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   23352:	7832      	ldrb	r2, [r6, #0]
   23354:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   23358:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   2335a:	011b      	lsls	r3, r3, #4
   2335c:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   2335e:	2300      	movs	r3, #0
   23360:	70b3      	strb	r3, [r6, #2]
   23362:	70f3      	strb	r3, [r6, #3]
		offset++;
   23364:	2503      	movs	r5, #3
   23366:	e7ca      	b.n	232fe <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   23368:	2300      	movs	r3, #0
   2336a:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   2336c:	70b3      	strb	r3, [r6, #2]
   2336e:	70f3      	strb	r3, [r6, #3]
   23370:	2502      	movs	r5, #2
   23372:	e7c4      	b.n	232fe <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   23374:	2502      	movs	r5, #2
   23376:	e7c2      	b.n	232fe <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   23378:	1c6b      	adds	r3, r5, #1
   2337a:	5d52      	ldrb	r2, [r2, r5]
   2337c:	71f2      	strb	r2, [r6, #7]
   2337e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   23380:	2210      	movs	r2, #16
   23382:	2100      	movs	r1, #0
   23384:	f106 0008 	add.w	r0, r6, #8
   23388:	f008 fe78 	bl	2c07c <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   2338c:	2210      	movs	r2, #16
   2338e:	2100      	movs	r1, #0
   23390:	f106 0018 	add.w	r0, r6, #24
   23394:	f008 fe72 	bl	2c07c <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   23398:	68a3      	ldr	r3, [r4, #8]
   2339a:	689b      	ldr	r3, [r3, #8]
   2339c:	785b      	ldrb	r3, [r3, #1]
   2339e:	f013 0f40 	tst.w	r3, #64	; 0x40
   233a2:	d011      	beq.n	233c8 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   233a4:	f013 0f30 	tst.w	r3, #48	; 0x30
   233a8:	d05e      	beq.n	23468 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   233aa:	4638      	mov	r0, r7
   233ac:	f7fb fccb 	bl	1ed46 <net_pkt_frag_unref>
	return false;
   233b0:	2000      	movs	r0, #0
   233b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   233b6:	2301      	movs	r3, #1
   233b8:	71f3      	strb	r3, [r6, #7]
   233ba:	e7e1      	b.n	23380 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   233bc:	2340      	movs	r3, #64	; 0x40
   233be:	71f3      	strb	r3, [r6, #7]
   233c0:	e7de      	b.n	23380 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   233c2:	23ff      	movs	r3, #255	; 0xff
   233c4:	71f3      	strb	r3, [r6, #7]
   233c6:	e7db      	b.n	23380 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   233c8:	68a3      	ldr	r3, [r4, #8]
   233ca:	6899      	ldr	r1, [r3, #8]
   233cc:	784b      	ldrb	r3, [r1, #1]
   233ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
   233d2:	2b10      	cmp	r3, #16
   233d4:	d059      	beq.n	2348a <uncompress_IPHC_header+0x21a>
   233d6:	d93e      	bls.n	23456 <uncompress_IPHC_header+0x1e6>
   233d8:	2b20      	cmp	r3, #32
   233da:	d065      	beq.n	234a8 <uncompress_IPHC_header+0x238>
   233dc:	2b30      	cmp	r3, #48	; 0x30
   233de:	d143      	bne.n	23468 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   233e0:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   233e4:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   233e8:	23fe      	movs	r3, #254	; 0xfe
   233ea:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   233ec:	2380      	movs	r3, #128	; 0x80
   233ee:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   233f2:	2300      	movs	r3, #0
   233f4:	f888 3002 	strb.w	r3, [r8, #2]
   233f8:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   233fc:	f888 3004 	strb.w	r3, [r8, #4]
   23400:	f888 3005 	strb.w	r3, [r8, #5]
   23404:	f888 3006 	strb.w	r3, [r8, #6]
   23408:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   2340c:	f899 2004 	ldrb.w	r2, [r9, #4]
   23410:	2a06      	cmp	r2, #6
   23412:	d05b      	beq.n	234cc <uncompress_IPHC_header+0x25c>
   23414:	2a08      	cmp	r2, #8
   23416:	f000 8082 	beq.w	2351e <uncompress_IPHC_header+0x2ae>
   2341a:	2a02      	cmp	r2, #2
   2341c:	d124      	bne.n	23468 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   2341e:	f899 3005 	ldrb.w	r3, [r9, #5]
   23422:	2b01      	cmp	r3, #1
   23424:	d120      	bne.n	23468 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   23426:	2300      	movs	r3, #0
   23428:	f888 3008 	strb.w	r3, [r8, #8]
   2342c:	f888 3009 	strb.w	r3, [r8, #9]
   23430:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   23434:	22ff      	movs	r2, #255	; 0xff
   23436:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   2343a:	22fe      	movs	r2, #254	; 0xfe
   2343c:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   23440:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   23444:	6a23      	ldr	r3, [r4, #32]
   23446:	781b      	ldrb	r3, [r3, #0]
   23448:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   2344c:	6a23      	ldr	r3, [r4, #32]
   2344e:	785b      	ldrb	r3, [r3, #1]
   23450:	f888 300f 	strb.w	r3, [r8, #15]
   23454:	e008      	b.n	23468 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   23456:	b93b      	cbnz	r3, 23468 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   23458:	2210      	movs	r2, #16
   2345a:	4429      	add	r1, r5
   2345c:	f106 0008 	add.w	r0, r6, #8
   23460:	f7dc ff2e 	bl	2c0 <memcpy>
		offset += 16;
   23464:	3510      	adds	r5, #16
   23466:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   23468:	68a3      	ldr	r3, [r4, #8]
   2346a:	6899      	ldr	r1, [r3, #8]
   2346c:	784b      	ldrb	r3, [r1, #1]
   2346e:	f013 0f08 	tst.w	r3, #8
   23472:	d160      	bne.n	23536 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   23474:	f003 0303 	and.w	r3, r3, #3
   23478:	2b03      	cmp	r3, #3
   2347a:	f200 80ad 	bhi.w	235d8 <uncompress_IPHC_header+0x368>
   2347e:	e8df f013 	tbh	[pc, r3, lsl #1]
   23482:	00a3      	.short	0x00a3
   23484:	00e500d6 	.word	0x00e500d6
   23488:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   2348a:	23fe      	movs	r3, #254	; 0xfe
   2348c:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   2348e:	2380      	movs	r3, #128	; 0x80
   23490:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   23492:	68a3      	ldr	r3, [r4, #8]
   23494:	6899      	ldr	r1, [r3, #8]
   23496:	2208      	movs	r2, #8
   23498:	4429      	add	r1, r5
   2349a:	f106 0010 	add.w	r0, r6, #16
   2349e:	f7dc ff0f 	bl	2c0 <memcpy>
		offset += 8;
   234a2:	3508      	adds	r5, #8
   234a4:	b2ed      	uxtb	r5, r5
   234a6:	e7df      	b.n	23468 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   234a8:	23fe      	movs	r3, #254	; 0xfe
   234aa:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   234ac:	2280      	movs	r2, #128	; 0x80
   234ae:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   234b0:	22ff      	movs	r2, #255	; 0xff
   234b2:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   234b4:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   234b6:	68a3      	ldr	r3, [r4, #8]
   234b8:	6899      	ldr	r1, [r3, #8]
   234ba:	2202      	movs	r2, #2
   234bc:	4429      	add	r1, r5
   234be:	f106 0016 	add.w	r0, r6, #22
   234c2:	f7dc fefd 	bl	2c0 <memcpy>
		offset += 2;
   234c6:	3502      	adds	r5, #2
   234c8:	b2ed      	uxtb	r5, r5
   234ca:	e7cd      	b.n	23468 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   234cc:	2203      	movs	r2, #3
   234ce:	6a21      	ldr	r1, [r4, #32]
   234d0:	f108 0008 	add.w	r0, r8, #8
   234d4:	f7dc fef4 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   234d8:	23ff      	movs	r3, #255	; 0xff
   234da:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   234de:	23fe      	movs	r3, #254	; 0xfe
   234e0:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   234e4:	6a21      	ldr	r1, [r4, #32]
   234e6:	2203      	movs	r2, #3
   234e8:	4411      	add	r1, r2
   234ea:	f108 000d 	add.w	r0, r8, #13
   234ee:	f7dc fee7 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   234f2:	f899 3005 	ldrb.w	r3, [r9, #5]
   234f6:	2b02      	cmp	r3, #2
   234f8:	d00a      	beq.n	23510 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   234fa:	f899 3005 	ldrb.w	r3, [r9, #5]
   234fe:	2b03      	cmp	r3, #3
   23500:	d1b2      	bne.n	23468 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   23502:	f898 3008 	ldrb.w	r3, [r8, #8]
   23506:	f083 0302 	eor.w	r3, r3, #2
   2350a:	f888 3008 	strb.w	r3, [r8, #8]
   2350e:	e7ab      	b.n	23468 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   23510:	f898 3008 	ldrb.w	r3, [r8, #8]
   23514:	f083 0302 	eor.w	r3, r3, #2
   23518:	f888 3008 	strb.w	r3, [r8, #8]
   2351c:	e7ed      	b.n	234fa <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2351e:	6a21      	ldr	r1, [r4, #32]
   23520:	f108 0008 	add.w	r0, r8, #8
   23524:	f7dc fecc 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   23528:	f898 3008 	ldrb.w	r3, [r8, #8]
   2352c:	f083 0302 	eor.w	r3, r3, #2
   23530:	f888 3008 	strb.w	r3, [r8, #8]
   23534:	e798      	b.n	23468 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   23536:	784b      	ldrb	r3, [r1, #1]
   23538:	f013 0f04 	tst.w	r3, #4
   2353c:	d142      	bne.n	235c4 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   2353e:	f003 0303 	and.w	r3, r3, #3
   23542:	2b03      	cmp	r3, #3
   23544:	d848      	bhi.n	235d8 <uncompress_IPHC_header+0x368>
   23546:	e8df f003 	tbb	[pc, r3]
   2354a:	0b02      	.short	0x0b02
   2354c:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   2354e:	2210      	movs	r2, #16
   23550:	4429      	add	r1, r5
   23552:	f106 0018 	add.w	r0, r6, #24
   23556:	f7dc feb3 	bl	2c0 <memcpy>
		offset += 16;
   2355a:	3510      	adds	r5, #16
   2355c:	b2ed      	uxtb	r5, r5
   2355e:	e03b      	b.n	235d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   23560:	23ff      	movs	r3, #255	; 0xff
   23562:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   23564:	68a3      	ldr	r3, [r4, #8]
   23566:	689b      	ldr	r3, [r3, #8]
   23568:	1c69      	adds	r1, r5, #1
   2356a:	5d5b      	ldrb	r3, [r3, r5]
   2356c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   2356e:	68a3      	ldr	r3, [r4, #8]
   23570:	689b      	ldr	r3, [r3, #8]
   23572:	2205      	movs	r2, #5
   23574:	fa53 f181 	uxtab	r1, r3, r1
   23578:	f106 0023 	add.w	r0, r6, #35	; 0x23
   2357c:	f7dc fea0 	bl	2c0 <memcpy>
		offset += 5;
   23580:	3506      	adds	r5, #6
   23582:	b2ed      	uxtb	r5, r5
   23584:	e028      	b.n	235d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   23586:	23ff      	movs	r3, #255	; 0xff
   23588:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2358a:	68a3      	ldr	r3, [r4, #8]
   2358c:	689b      	ldr	r3, [r3, #8]
   2358e:	1c69      	adds	r1, r5, #1
   23590:	5d5b      	ldrb	r3, [r3, r5]
   23592:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   23594:	68a3      	ldr	r3, [r4, #8]
   23596:	689b      	ldr	r3, [r3, #8]
   23598:	2203      	movs	r2, #3
   2359a:	fa53 f181 	uxtab	r1, r3, r1
   2359e:	f106 0025 	add.w	r0, r6, #37	; 0x25
   235a2:	f7dc fe8d 	bl	2c0 <memcpy>
		offset += 3;
   235a6:	3504      	adds	r5, #4
   235a8:	b2ed      	uxtb	r5, r5
   235aa:	e015      	b.n	235d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   235ac:	23ff      	movs	r3, #255	; 0xff
   235ae:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   235b0:	2302      	movs	r3, #2
   235b2:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   235b4:	68a3      	ldr	r3, [r4, #8]
   235b6:	689a      	ldr	r2, [r3, #8]
   235b8:	1c6b      	adds	r3, r5, #1
   235ba:	5d52      	ldrb	r2, [r2, r5]
   235bc:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   235c0:	b2dd      	uxtb	r5, r3
   235c2:	e009      	b.n	235d8 <uncompress_IPHC_header+0x368>
		return 0;
   235c4:	2500      	movs	r5, #0
   235c6:	e007      	b.n	235d8 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   235c8:	2210      	movs	r2, #16
   235ca:	4429      	add	r1, r5
   235cc:	f106 0018 	add.w	r0, r6, #24
   235d0:	f7dc fe76 	bl	2c0 <memcpy>
		offset += 16;
   235d4:	3510      	adds	r5, #16
   235d6:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   235d8:	f107 0a08 	add.w	sl, r7, #8
   235dc:	2128      	movs	r1, #40	; 0x28
   235de:	4650      	mov	r0, sl
   235e0:	f7f8 fe94 	bl	1c30c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   235e4:	68a3      	ldr	r3, [r4, #8]
   235e6:	689b      	ldr	r3, [r3, #8]
   235e8:	781a      	ldrb	r2, [r3, #0]
   235ea:	f012 0f04 	tst.w	r2, #4
   235ee:	f000 8114 	beq.w	2381a <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   235f2:	5d5b      	ldrb	r3, [r3, r5]
   235f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   235f8:	2bf0      	cmp	r3, #240	; 0xf0
   235fa:	f47f aed6 	bne.w	233aa <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   235fe:	2311      	movs	r3, #17
   23600:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   23602:	f8d7 b008 	ldr.w	fp, [r7, #8]
   23606:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   2360a:	68a3      	ldr	r3, [r4, #8]
   2360c:	6898      	ldr	r0, [r3, #8]
   2360e:	f810 8005 	ldrb.w	r8, [r0, r5]
   23612:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   23616:	1c69      	adds	r1, r5, #1
   23618:	b2c9      	uxtb	r1, r1
   2361a:	5d43      	ldrb	r3, [r0, r5]
   2361c:	f003 0303 	and.w	r3, r3, #3
   23620:	2b03      	cmp	r3, #3
   23622:	f200 80ed 	bhi.w	23800 <uncompress_IPHC_header+0x590>
   23626:	e8df f003 	tbb	[pc, r3]
   2362a:	ae95      	.short	0xae95
   2362c:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   2362e:	23fe      	movs	r3, #254	; 0xfe
   23630:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   23632:	2380      	movs	r3, #128	; 0x80
   23634:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   23636:	68a3      	ldr	r3, [r4, #8]
   23638:	6899      	ldr	r1, [r3, #8]
   2363a:	2208      	movs	r2, #8
   2363c:	4429      	add	r1, r5
   2363e:	f106 0020 	add.w	r0, r6, #32
   23642:	f7dc fe3d 	bl	2c0 <memcpy>
		offset += 8;
   23646:	3508      	adds	r5, #8
   23648:	b2ed      	uxtb	r5, r5
   2364a:	e7c5      	b.n	235d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   2364c:	23fe      	movs	r3, #254	; 0xfe
   2364e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   23650:	2280      	movs	r2, #128	; 0x80
   23652:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   23654:	22ff      	movs	r2, #255	; 0xff
   23656:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   2365a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   2365e:	68a3      	ldr	r3, [r4, #8]
   23660:	6899      	ldr	r1, [r3, #8]
   23662:	2202      	movs	r2, #2
   23664:	4429      	add	r1, r5
   23666:	f106 0026 	add.w	r0, r6, #38	; 0x26
   2366a:	f7dc fe29 	bl	2c0 <memcpy>
		offset += 2;
   2366e:	3502      	adds	r5, #2
   23670:	b2ed      	uxtb	r5, r5
   23672:	e7b1      	b.n	235d8 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   23674:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   23678:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   2367c:	23fe      	movs	r3, #254	; 0xfe
   2367e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   23680:	2380      	movs	r3, #128	; 0x80
   23682:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   23686:	2300      	movs	r3, #0
   23688:	f888 3002 	strb.w	r3, [r8, #2]
   2368c:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   23690:	f888 3004 	strb.w	r3, [r8, #4]
   23694:	f888 3005 	strb.w	r3, [r8, #5]
   23698:	f888 3006 	strb.w	r3, [r8, #6]
   2369c:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   236a0:	f899 2004 	ldrb.w	r2, [r9, #4]
   236a4:	2a06      	cmp	r2, #6
   236a6:	d01f      	beq.n	236e8 <uncompress_IPHC_header+0x478>
   236a8:	2a08      	cmp	r2, #8
   236aa:	d047      	beq.n	2373c <uncompress_IPHC_header+0x4cc>
   236ac:	2a02      	cmp	r2, #2
   236ae:	d193      	bne.n	235d8 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   236b0:	f899 3005 	ldrb.w	r3, [r9, #5]
   236b4:	2b01      	cmp	r3, #1
   236b6:	d18f      	bne.n	235d8 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   236b8:	2300      	movs	r3, #0
   236ba:	f888 3008 	strb.w	r3, [r8, #8]
   236be:	f888 3009 	strb.w	r3, [r8, #9]
   236c2:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   236c6:	22ff      	movs	r2, #255	; 0xff
   236c8:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   236cc:	22fe      	movs	r2, #254	; 0xfe
   236ce:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   236d2:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   236d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   236d8:	781b      	ldrb	r3, [r3, #0]
   236da:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   236de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   236e0:	785b      	ldrb	r3, [r3, #1]
   236e2:	f888 300f 	strb.w	r3, [r8, #15]
   236e6:	e777      	b.n	235d8 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   236e8:	2203      	movs	r2, #3
   236ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   236ec:	f108 0008 	add.w	r0, r8, #8
   236f0:	f7dc fde6 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   236f4:	23ff      	movs	r3, #255	; 0xff
   236f6:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   236fa:	23fe      	movs	r3, #254	; 0xfe
   236fc:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   23700:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23702:	2203      	movs	r2, #3
   23704:	4411      	add	r1, r2
   23706:	f108 000d 	add.w	r0, r8, #13
   2370a:	f7dc fdd9 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2370e:	f899 3005 	ldrb.w	r3, [r9, #5]
   23712:	2b02      	cmp	r3, #2
   23714:	d00b      	beq.n	2372e <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   23716:	f899 3005 	ldrb.w	r3, [r9, #5]
   2371a:	2b03      	cmp	r3, #3
   2371c:	f47f af5c 	bne.w	235d8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   23720:	f898 3008 	ldrb.w	r3, [r8, #8]
   23724:	f083 0302 	eor.w	r3, r3, #2
   23728:	f888 3008 	strb.w	r3, [r8, #8]
   2372c:	e754      	b.n	235d8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   2372e:	f898 3008 	ldrb.w	r3, [r8, #8]
   23732:	f083 0302 	eor.w	r3, r3, #2
   23736:	f888 3008 	strb.w	r3, [r8, #8]
   2373a:	e7ec      	b.n	23716 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2373c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2373e:	f108 0008 	add.w	r0, r8, #8
   23742:	f7dc fdbd 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   23746:	f898 3008 	ldrb.w	r3, [r8, #8]
   2374a:	f083 0302 	eor.w	r3, r3, #2
   2374e:	f888 3008 	strb.w	r3, [r8, #8]
   23752:	e741      	b.n	235d8 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   23754:	2202      	movs	r2, #2
   23756:	4401      	add	r1, r0
   23758:	4648      	mov	r0, r9
   2375a:	f7dc fdb1 	bl	2c0 <memcpy>
		offset += 2;
   2375e:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   23760:	68a3      	ldr	r3, [r4, #8]
   23762:	689b      	ldr	r3, [r3, #8]
   23764:	2202      	movs	r2, #2
   23766:	fa53 f181 	uxtab	r1, r3, r1
   2376a:	eb09 0002 	add.w	r0, r9, r2
   2376e:	f7dc fda7 	bl	2c0 <memcpy>
		offset += 2;
   23772:	3505      	adds	r5, #5
   23774:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   23776:	f1b8 0f00 	cmp.w	r8, #0
   2377a:	d043      	beq.n	23804 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2377c:	2108      	movs	r1, #8
   2377e:	4650      	mov	r0, sl
   23780:	f7f8 fdc4 	bl	1c30c <net_buf_simple_add>
   23784:	e04c      	b.n	23820 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   23786:	2202      	movs	r2, #2
   23788:	4401      	add	r1, r0
   2378a:	4648      	mov	r0, r9
   2378c:	f7dc fd98 	bl	2c0 <memcpy>
		offset += 2;
   23790:	1ceb      	adds	r3, r5, #3
   23792:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   23794:	68a2      	ldr	r2, [r4, #8]
   23796:	6892      	ldr	r2, [r2, #8]
   23798:	5cd3      	ldrb	r3, [r2, r3]
   2379a:	021b      	lsls	r3, r3, #8
   2379c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   237a0:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   237a4:	3504      	adds	r5, #4
   237a6:	b2ed      	uxtb	r5, r5
   237a8:	e7e5      	b.n	23776 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   237aa:	5c43      	ldrb	r3, [r0, r1]
   237ac:	021b      	lsls	r3, r3, #8
   237ae:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   237b2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   237b6:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   237b8:	68a3      	ldr	r3, [r4, #8]
   237ba:	689b      	ldr	r3, [r3, #8]
   237bc:	2202      	movs	r2, #2
   237be:	fa53 f181 	uxtab	r1, r3, r1
   237c2:	eb09 0002 	add.w	r0, r9, r2
   237c6:	f7dc fd7b 	bl	2c0 <memcpy>
		offset += 2;
   237ca:	3504      	adds	r5, #4
   237cc:	b2ed      	uxtb	r5, r5
   237ce:	e7d2      	b.n	23776 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   237d0:	5c43      	ldrb	r3, [r0, r1]
   237d2:	091b      	lsrs	r3, r3, #4
   237d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   237d8:	021b      	lsls	r3, r3, #8
   237da:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   237de:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   237e2:	68a3      	ldr	r3, [r4, #8]
   237e4:	689b      	ldr	r3, [r3, #8]
   237e6:	5c5b      	ldrb	r3, [r3, r1]
   237e8:	021b      	lsls	r3, r3, #8
   237ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   237ee:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   237f2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   237f6:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   237fa:	3502      	adds	r5, #2
   237fc:	b2ed      	uxtb	r5, r5
   237fe:	e7ba      	b.n	23776 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   23800:	460d      	mov	r5, r1
   23802:	e7b8      	b.n	23776 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   23804:	68a3      	ldr	r3, [r4, #8]
   23806:	6899      	ldr	r1, [r3, #8]
   23808:	2202      	movs	r2, #2
   2380a:	4429      	add	r1, r5
   2380c:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   23810:	f7dc fd56 	bl	2c0 <memcpy>
		offset += 2;
   23814:	3502      	adds	r5, #2
   23816:	b2ed      	uxtb	r5, r5
   23818:	e7b0      	b.n	2377c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   2381a:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   2381e:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   23820:	68a3      	ldr	r3, [r4, #8]
   23822:	899a      	ldrh	r2, [r3, #12]
   23824:	fa1f fa85 	uxth.w	sl, r5
   23828:	4552      	cmp	r2, sl
   2382a:	f4ff adbe 	bcc.w	233aa <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   2382e:	6898      	ldr	r0, [r3, #8]
   23830:	1b52      	subs	r2, r2, r5
   23832:	1941      	adds	r1, r0, r5
   23834:	f008 fbbe 	bl	2bfb4 <memmove>
	pkt->frags->len -= offset;
   23838:	68a2      	ldr	r2, [r4, #8]
   2383a:	8993      	ldrh	r3, [r2, #12]
   2383c:	eba3 0a0a 	sub.w	sl, r3, sl
   23840:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   23844:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   23848:	b94a      	cbnz	r2, 2385e <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   2384a:	4639      	mov	r1, r7
   2384c:	4620      	mov	r0, r4
   2384e:	f7fb fab7 	bl	1edc0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   23852:	4620      	mov	r0, r4
   23854:	f7fb fb6e 	bl	1ef34 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   23858:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2385a:	2200      	movs	r2, #0
   2385c:	e00b      	b.n	23876 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   2385e:	68bb      	ldr	r3, [r7, #8]
   23860:	4250      	negs	r0, r2
	return pkt->frags->data;
   23862:	68a1      	ldr	r1, [r4, #8]
   23864:	6889      	ldr	r1, [r1, #8]
   23866:	4401      	add	r1, r0
   23868:	4418      	add	r0, r3
   2386a:	f7dc fd29 	bl	2c0 <memcpy>
   2386e:	e7ec      	b.n	2384a <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   23870:	8999      	ldrh	r1, [r3, #12]
   23872:	440a      	add	r2, r1
		buf = buf->frags;
   23874:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23876:	2b00      	cmp	r3, #0
   23878:	d1fa      	bne.n	23870 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2387a:	b293      	uxth	r3, r2
   2387c:	3b28      	subs	r3, #40	; 0x28
   2387e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   23880:	0a1a      	lsrs	r2, r3, #8
   23882:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   23884:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   23886:	79b1      	ldrb	r1, [r6, #6]
   23888:	2911      	cmp	r1, #17
   2388a:	d002      	beq.n	23892 <uncompress_IPHC_header+0x622>
	return true;
   2388c:	2001      	movs	r0, #1
   2388e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   23892:	f1b9 0f00 	cmp.w	r9, #0
   23896:	d018      	beq.n	238ca <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   23898:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2389c:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   238a0:	f1b8 0f00 	cmp.w	r8, #0
   238a4:	d102      	bne.n	238ac <uncompress_IPHC_header+0x63c>
	return true;
   238a6:	2001      	movs	r0, #1
}
   238a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   238ac:	4620      	mov	r0, r4
   238ae:	f7fc f8ba 	bl	1fa26 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   238b2:	43c0      	mvns	r0, r0
   238b4:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   238b8:	2001      	movs	r0, #1
   238ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   238be:	2000      	movs	r0, #0
   238c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   238c4:	2000      	movs	r0, #0
   238c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   238ca:	2001      	movs	r0, #1
   238cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000238d0 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   238d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238d4:	b085      	sub	sp, #20
   238d6:	4604      	mov	r4, r0
   238d8:	4617      	mov	r7, r2
	if (iphc) {
   238da:	460d      	mov	r5, r1
   238dc:	b9f9      	cbnz	r1, 2391e <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   238de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   238e2:	f7fb f9e3 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   238e6:	4606      	mov	r6, r0
   238e8:	2800      	cmp	r0, #0
   238ea:	f000 8438 	beq.w	2415e <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   238ee:	f850 3f08 	ldr.w	r3, [r0, #8]!
   238f2:	2241      	movs	r2, #65	; 0x41
   238f4:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   238f6:	2101      	movs	r1, #1
   238f8:	f7f8 fd08 	bl	1c30c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   238fc:	4631      	mov	r1, r6
   238fe:	4620      	mov	r0, r4
   23900:	f7fb fa5e 	bl	1edc0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   23904:	4620      	mov	r0, r4
   23906:	f7fb fb15 	bl	1ef34 <net_pkt_compact>
	if (fragment) {
   2390a:	2f00      	cmp	r7, #0
   2390c:	f000 842a 	beq.w	24164 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   23910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23914:	4620      	mov	r0, r4
   23916:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   23918:	b005      	add	sp, #20
   2391a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2391e:	6883      	ldr	r3, [r0, #8]
   23920:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   23922:	899b      	ldrh	r3, [r3, #12]
   23924:	2b27      	cmp	r3, #39	; 0x27
   23926:	f240 8411 	bls.w	2414c <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   2392a:	79b2      	ldrb	r2, [r6, #6]
   2392c:	2a11      	cmp	r2, #17
   2392e:	d02f      	beq.n	23990 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   23930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23934:	4620      	mov	r0, r4
   23936:	f7fb f9b9 	bl	1ecac <net_pkt_get_frag>
	if (!frag) {
   2393a:	4680      	mov	r8, r0
   2393c:	2800      	cmp	r0, #0
   2393e:	f000 8408 	beq.w	24152 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   23942:	6883      	ldr	r3, [r0, #8]
   23944:	2260      	movs	r2, #96	; 0x60
   23946:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   23948:	6883      	ldr	r3, [r0, #8]
   2394a:	2200      	movs	r2, #0
   2394c:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   2394e:	7830      	ldrb	r0, [r6, #0]
   23950:	7871      	ldrb	r1, [r6, #1]
   23952:	090b      	lsrs	r3, r1, #4
   23954:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   23958:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   2395a:	089a      	lsrs	r2, r3, #2
   2395c:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   23960:	b25b      	sxtb	r3, r3
   23962:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   23964:	f011 0f0f 	tst.w	r1, #15
   23968:	d121      	bne.n	239ae <net_6lo_compress+0xde>
   2396a:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   2396e:	f1be 0f00 	cmp.w	lr, #0
   23972:	d11c      	bne.n	239ae <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   23974:	f010 0f0f 	tst.w	r0, #15
   23978:	d10e      	bne.n	23998 <net_6lo_compress+0xc8>
   2397a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   2397e:	d10b      	bne.n	23998 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   23980:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23984:	7813      	ldrb	r3, [r2, #0]
   23986:	f043 0318 	orr.w	r3, r3, #24
   2398a:	7013      	strb	r3, [r2, #0]
   2398c:	2202      	movs	r2, #2
   2398e:	e025      	b.n	239dc <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   23990:	2b2f      	cmp	r3, #47	; 0x2f
   23992:	d8cd      	bhi.n	23930 <net_6lo_compress+0x60>
		return false;
   23994:	2000      	movs	r0, #0
   23996:	e7bf      	b.n	23918 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   23998:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2399c:	780b      	ldrb	r3, [r1, #0]
   2399e:	f043 0310 	orr.w	r3, r3, #16
   239a2:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   239a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   239a8:	709a      	strb	r2, [r3, #2]
   239aa:	2203      	movs	r2, #3
   239ac:	e016      	b.n	239dc <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   239ae:	f010 0f0f 	tst.w	r0, #15
   239b2:	d102      	bne.n	239ba <net_6lo_compress+0xea>
   239b4:	f011 0f30 	tst.w	r1, #48	; 0x30
   239b8:	d128      	bne.n	23a0c <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   239ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   239be:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   239c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   239c4:	7873      	ldrb	r3, [r6, #1]
   239c6:	f003 030f 	and.w	r3, r3, #15
   239ca:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   239cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   239d0:	2202      	movs	r2, #2
   239d2:	18b1      	adds	r1, r6, r2
   239d4:	3004      	adds	r0, #4
   239d6:	f7dc fc73 	bl	2c0 <memcpy>
			offset += 2;
   239da:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   239dc:	79b3      	ldrb	r3, [r6, #6]
   239de:	2b11      	cmp	r3, #17
   239e0:	d02d      	beq.n	23a3e <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   239e2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   239e6:	f102 0901 	add.w	r9, r2, #1
   239ea:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   239ec:	79f3      	ldrb	r3, [r6, #7]
   239ee:	2b40      	cmp	r3, #64	; 0x40
   239f0:	d040      	beq.n	23a74 <net_6lo_compress+0x1a4>
   239f2:	2bff      	cmp	r3, #255	; 0xff
   239f4:	d045      	beq.n	23a82 <net_6lo_compress+0x1b2>
   239f6:	2b01      	cmp	r3, #1
   239f8:	d029      	beq.n	23a4e <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   239fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
   239fe:	f109 0201 	add.w	r2, r9, #1
   23a02:	f801 3009 	strb.w	r3, [r1, r9]
   23a06:	fa5f f982 	uxtb.w	r9, r2
   23a0a:	e026      	b.n	23a5a <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   23a0c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   23a10:	780a      	ldrb	r2, [r1, #0]
   23a12:	f042 0208 	orr.w	r2, r2, #8
   23a16:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   23a18:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   23a20:	f996 1001 	ldrsb.w	r1, [r6, #1]
   23a24:	f001 010f 	and.w	r1, r1, #15
   23a28:	430b      	orrs	r3, r1
   23a2a:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   23a2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23a30:	2202      	movs	r2, #2
   23a32:	18b1      	adds	r1, r6, r2
   23a34:	3003      	adds	r0, #3
   23a36:	f7dc fc43 	bl	2c0 <memcpy>
			offset += 2;
   23a3a:	2205      	movs	r2, #5
   23a3c:	e7ce      	b.n	239dc <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   23a3e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   23a42:	780b      	ldrb	r3, [r1, #0]
   23a44:	f043 0304 	orr.w	r3, r3, #4
   23a48:	700b      	strb	r3, [r1, #0]
   23a4a:	4691      	mov	r9, r2
   23a4c:	e7ce      	b.n	239ec <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   23a4e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23a52:	7813      	ldrb	r3, [r2, #0]
   23a54:	f043 0301 	orr.w	r3, r3, #1
   23a58:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23a5a:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23a5c:	b9c3      	cbnz	r3, 23a90 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23a5e:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   23a60:	2b00      	cmp	r3, #0
   23a62:	d176      	bne.n	23b52 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23a64:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   23a66:	2b00      	cmp	r3, #0
   23a68:	d175      	bne.n	23b56 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   23a6a:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23a6c:	2b00      	cmp	r3, #0
   23a6e:	d074      	beq.n	23b5a <net_6lo_compress+0x28a>
   23a70:	2300      	movs	r3, #0
   23a72:	e00e      	b.n	23a92 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   23a74:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23a78:	7813      	ldrb	r3, [r2, #0]
   23a7a:	f043 0302 	orr.w	r3, r3, #2
   23a7e:	7013      	strb	r3, [r2, #0]
   23a80:	e7eb      	b.n	23a5a <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   23a82:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23a86:	7813      	ldrb	r3, [r2, #0]
   23a88:	f043 0303 	orr.w	r3, r3, #3
   23a8c:	7013      	strb	r3, [r2, #0]
   23a8e:	e7e4      	b.n	23a5a <net_6lo_compress+0x18a>
   23a90:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   23a92:	2b00      	cmp	r3, #0
   23a94:	d163      	bne.n	23b5e <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   23a96:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   23a98:	f248 03fe 	movw	r3, #33022	; 0x80fe
   23a9c:	429a      	cmp	r2, r3
   23a9e:	d065      	beq.n	23b6c <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   23aa0:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   23aa4:	2210      	movs	r2, #16
   23aa6:	f106 0108 	add.w	r1, r6, #8
   23aaa:	4448      	add	r0, r9
   23aac:	f7dc fc08 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   23ab0:	f109 0910 	add.w	r9, r9, #16
   23ab4:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   23ab8:	f1b9 0f00 	cmp.w	r9, #0
   23abc:	f000 812d 	beq.w	23d1a <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   23ac0:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   23ac2:	2bff      	cmp	r3, #255	; 0xff
   23ac4:	f000 812e 	beq.w	23d24 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   23ac8:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   23aca:	f248 03fe 	movw	r3, #33022	; 0x80fe
   23ace:	429a      	cmp	r2, r3
   23ad0:	f000 81bf 	beq.w	23e52 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   23ad4:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   23ad8:	2210      	movs	r2, #16
   23ada:	f106 0118 	add.w	r1, r6, #24
   23ade:	4448      	add	r0, r9
   23ae0:	f7dc fbee 	bl	2c0 <memcpy>
		offset += 16;
   23ae4:	f109 0910 	add.w	r9, r9, #16
   23ae8:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   23aec:	f1b9 0f00 	cmp.w	r9, #0
   23af0:	f000 8287 	beq.w	24002 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   23af4:	79b3      	ldrb	r3, [r6, #6]
   23af6:	2b11      	cmp	r3, #17
   23af8:	f000 8288 	beq.w	2400c <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   23afc:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   23afe:	f108 0a08 	add.w	sl, r8, #8
   23b02:	4649      	mov	r1, r9
   23b04:	4650      	mov	r0, sl
   23b06:	f7f8 fc01 	bl	1c30c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   23b0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23b0e:	68a3      	ldr	r3, [r4, #8]
   23b10:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   23b12:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   23b14:	1b92      	subs	r2, r2, r6
   23b16:	4431      	add	r1, r6
   23b18:	4448      	add	r0, r9
   23b1a:	f7dc fbd1 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   23b1e:	68a3      	ldr	r3, [r4, #8]
   23b20:	8999      	ldrh	r1, [r3, #12]
   23b22:	1b89      	subs	r1, r1, r6
   23b24:	4650      	mov	r0, sl
   23b26:	f7f8 fbf1 	bl	1c30c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   23b2a:	68a2      	ldr	r2, [r4, #8]
   23b2c:	2100      	movs	r1, #0
   23b2e:	4620      	mov	r0, r4
   23b30:	f7fb f928 	bl	1ed84 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   23b34:	4641      	mov	r1, r8
   23b36:	4620      	mov	r0, r4
   23b38:	f7fb f942 	bl	1edc0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   23b3c:	4620      	mov	r0, r4
   23b3e:	f7fb f9f9 	bl	1ef34 <net_pkt_compact>
	if (fragment) {
   23b42:	2f00      	cmp	r7, #0
   23b44:	f000 8308 	beq.w	24158 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   23b48:	eba6 0109 	sub.w	r1, r6, r9
   23b4c:	4620      	mov	r0, r4
   23b4e:	47b8      	blx	r7
   23b50:	e6e2      	b.n	23918 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   23b52:	2300      	movs	r3, #0
   23b54:	e79d      	b.n	23a92 <net_6lo_compress+0x1c2>
   23b56:	2300      	movs	r3, #0
   23b58:	e79b      	b.n	23a92 <net_6lo_compress+0x1c2>
   23b5a:	2301      	movs	r3, #1
   23b5c:	e799      	b.n	23a92 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   23b5e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23b62:	7853      	ldrb	r3, [r2, #1]
   23b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23b68:	7053      	strb	r3, [r2, #1]
   23b6a:	e7a5      	b.n	23ab8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23b6c:	8973      	ldrh	r3, [r6, #10]
   23b6e:	b91b      	cbnz	r3, 23b78 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   23b70:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23b72:	b33b      	cbz	r3, 23bc4 <net_6lo_compress+0x2f4>
   23b74:	2300      	movs	r3, #0
   23b76:	e000      	b.n	23b7a <net_6lo_compress+0x2aa>
   23b78:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   23b7a:	9301      	str	r3, [sp, #4]
   23b7c:	2b00      	cmp	r3, #0
   23b7e:	d08f      	beq.n	23aa0 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   23b80:	6933      	ldr	r3, [r6, #16]
   23b82:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23b86:	d01f      	beq.n	23bc8 <net_6lo_compress+0x2f8>
   23b88:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   23b8a:	469a      	mov	sl, r3
   23b8c:	bb1b      	cbnz	r3, 23bd6 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   23b8e:	f114 0320 	adds.w	r3, r4, #32
   23b92:	f000 80bf 	beq.w	23d14 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   23b96:	f116 0b08 	adds.w	fp, r6, #8
   23b9a:	d008      	beq.n	23bae <net_6lo_compress+0x2de>
   23b9c:	b13b      	cbz	r3, 23bae <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   23b9e:	791a      	ldrb	r2, [r3, #4]
   23ba0:	2a06      	cmp	r2, #6
   23ba2:	d03e      	beq.n	23c22 <net_6lo_compress+0x352>
   23ba4:	2a08      	cmp	r2, #8
   23ba6:	f000 808c 	beq.w	23cc2 <net_6lo_compress+0x3f2>
   23baa:	2a02      	cmp	r2, #2
   23bac:	d026      	beq.n	23bfc <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   23bae:	f1ba 0f00 	cmp.w	sl, #0
   23bb2:	f000 809c 	beq.w	23cee <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   23bb6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23bba:	7853      	ldrb	r3, [r2, #1]
   23bbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   23bc0:	7053      	strb	r3, [r2, #1]
   23bc2:	e779      	b.n	23ab8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23bc4:	2301      	movs	r3, #1
   23bc6:	e7d8      	b.n	23b7a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   23bc8:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   23bca:	2bfe      	cmp	r3, #254	; 0xfe
   23bcc:	d001      	beq.n	23bd2 <net_6lo_compress+0x302>
   23bce:	2300      	movs	r3, #0
   23bd0:	e7db      	b.n	23b8a <net_6lo_compress+0x2ba>
   23bd2:	2301      	movs	r3, #1
   23bd4:	e7d9      	b.n	23b8a <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   23bd6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23bda:	7853      	ldrb	r3, [r2, #1]
   23bdc:	f043 0320 	orr.w	r3, r3, #32
   23be0:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   23be2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23be6:	2202      	movs	r2, #2
   23be8:	f106 0116 	add.w	r1, r6, #22
   23bec:	4448      	add	r0, r9
   23bee:	f7dc fb67 	bl	2c0 <memcpy>
			offset += 2;
   23bf2:	f109 0902 	add.w	r9, r9, #2
   23bf6:	fa5f f989 	uxtb.w	r9, r9
   23bfa:	e75d      	b.n	23ab8 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   23bfc:	6a21      	ldr	r1, [r4, #32]
   23bfe:	f10b 000e 	add.w	r0, fp, #14
   23c02:	f008 f9a7 	bl	2bf54 <memcmp>
   23c06:	2800      	cmp	r0, #0
   23c08:	d1d1      	bne.n	23bae <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   23c0a:	f8db 3008 	ldr.w	r3, [fp, #8]
   23c0e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23c12:	d1cc      	bne.n	23bae <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   23c14:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   23c18:	2bfe      	cmp	r3, #254	; 0xfe
   23c1a:	d1c8      	bne.n	23bae <net_6lo_compress+0x2de>
			return true;
   23c1c:	f8dd a004 	ldr.w	sl, [sp, #4]
   23c20:	e7c5      	b.n	23bae <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   23c22:	795b      	ldrb	r3, [r3, #5]
   23c24:	2b03      	cmp	r3, #3
   23c26:	d026      	beq.n	23c76 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   23c28:	2b02      	cmp	r3, #2
   23c2a:	d1c0      	bne.n	23bae <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23c2c:	6a21      	ldr	r1, [r4, #32]
   23c2e:	2202      	movs	r2, #2
   23c30:	3101      	adds	r1, #1
   23c32:	f10b 0009 	add.w	r0, fp, #9
   23c36:	f008 f98d 	bl	2bf54 <memcmp>
   23c3a:	2800      	cmp	r0, #0
   23c3c:	d1b7      	bne.n	23bae <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23c3e:	6a21      	ldr	r1, [r4, #32]
   23c40:	2203      	movs	r2, #3
   23c42:	4411      	add	r1, r2
   23c44:	f10b 000d 	add.w	r0, fp, #13
   23c48:	f008 f984 	bl	2bf54 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23c4c:	2800      	cmp	r0, #0
   23c4e:	d1ae      	bne.n	23bae <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   23c50:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23c54:	2bff      	cmp	r3, #255	; 0xff
   23c56:	d1aa      	bne.n	23bae <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   23c58:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   23c5c:	2bfe      	cmp	r3, #254	; 0xfe
   23c5e:	d1a6      	bne.n	23bae <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   23c60:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23c64:	f083 0302 	eor.w	r3, r3, #2
   23c68:	6a22      	ldr	r2, [r4, #32]
   23c6a:	7812      	ldrb	r2, [r2, #0]
   23c6c:	4293      	cmp	r3, r2
   23c6e:	d19e      	bne.n	23bae <net_6lo_compress+0x2de>
				return true;
   23c70:	f8dd a004 	ldr.w	sl, [sp, #4]
   23c74:	e79b      	b.n	23bae <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23c76:	6a21      	ldr	r1, [r4, #32]
   23c78:	2202      	movs	r2, #2
   23c7a:	3101      	adds	r1, #1
   23c7c:	f10b 0009 	add.w	r0, fp, #9
   23c80:	f008 f968 	bl	2bf54 <memcmp>
   23c84:	2800      	cmp	r0, #0
   23c86:	d192      	bne.n	23bae <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23c88:	6a21      	ldr	r1, [r4, #32]
   23c8a:	2203      	movs	r2, #3
   23c8c:	4411      	add	r1, r2
   23c8e:	f10b 000d 	add.w	r0, fp, #13
   23c92:	f008 f95f 	bl	2bf54 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23c96:	2800      	cmp	r0, #0
   23c98:	d189      	bne.n	23bae <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   23c9a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23c9e:	2bff      	cmp	r3, #255	; 0xff
   23ca0:	d185      	bne.n	23bae <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   23ca2:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   23ca6:	2bfe      	cmp	r3, #254	; 0xfe
   23ca8:	d181      	bne.n	23bae <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23caa:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23cae:	f083 0302 	eor.w	r3, r3, #2
   23cb2:	6a22      	ldr	r2, [r4, #32]
   23cb4:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   23cb6:	4293      	cmp	r3, r2
   23cb8:	f47f af79 	bne.w	23bae <net_6lo_compress+0x2de>
				return true;
   23cbc:	f8dd a004 	ldr.w	sl, [sp, #4]
   23cc0:	e775      	b.n	23bae <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   23cc2:	6a21      	ldr	r1, [r4, #32]
   23cc4:	3a01      	subs	r2, #1
   23cc6:	3101      	adds	r1, #1
   23cc8:	f10b 0009 	add.w	r0, fp, #9
   23ccc:	f008 f942 	bl	2bf54 <memcmp>
   23cd0:	2800      	cmp	r0, #0
   23cd2:	f47f af6c 	bne.w	23bae <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23cd6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23cda:	f083 0302 	eor.w	r3, r3, #2
   23cde:	6a22      	ldr	r2, [r4, #32]
   23ce0:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   23ce2:	4293      	cmp	r3, r2
   23ce4:	f47f af63 	bne.w	23bae <net_6lo_compress+0x2de>
			return true;
   23ce8:	f8dd a004 	ldr.w	sl, [sp, #4]
   23cec:	e75f      	b.n	23bae <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   23cee:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23cf2:	7853      	ldrb	r3, [r2, #1]
   23cf4:	f043 0310 	orr.w	r3, r3, #16
   23cf8:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   23cfa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23cfe:	2208      	movs	r2, #8
   23d00:	f106 0110 	add.w	r1, r6, #16
   23d04:	4448      	add	r0, r9
   23d06:	f7dc fadb 	bl	2c0 <memcpy>
				offset += 8;
   23d0a:	f109 0908 	add.w	r9, r9, #8
   23d0e:	fa5f f989 	uxtb.w	r9, r9
   23d12:	e6d1      	b.n	23ab8 <net_6lo_compress+0x1e8>
				return 0;
   23d14:	f04f 0900 	mov.w	r9, #0
   23d18:	e6ce      	b.n	23ab8 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   23d1a:	4640      	mov	r0, r8
   23d1c:	f7fb f813 	bl	1ed46 <net_pkt_frag_unref>
		return false;
   23d20:	2000      	movs	r0, #0
   23d22:	e5f9      	b.n	23918 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   23d24:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23d28:	7853      	ldrb	r3, [r2, #1]
   23d2a:	f043 0308 	orr.w	r3, r3, #8
   23d2e:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   23d30:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d32:	2b02      	cmp	r3, #2
   23d34:	d00a      	beq.n	23d4c <net_6lo_compress+0x47c>
   23d36:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   23d38:	b9db      	cbnz	r3, 23d72 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23d3a:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d3c:	bb63      	cbnz	r3, 23d98 <net_6lo_compress+0x4c8>
   23d3e:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23d40:	bba2      	cbnz	r2, 23dac <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   23d42:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d46:	b39a      	cbz	r2, 23db0 <net_6lo_compress+0x4e0>
   23d48:	2200      	movs	r2, #0
   23d4a:	e026      	b.n	23d9a <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23d4c:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   23d4e:	b943      	cbnz	r3, 23d62 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23d50:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23d52:	b943      	cbnz	r3, 23d66 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d54:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23d56:	b943      	cbnz	r3, 23d6a <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   23d58:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d5c:	b13b      	cbz	r3, 23d6e <net_6lo_compress+0x49e>
   23d5e:	2300      	movs	r3, #0
   23d60:	e7ea      	b.n	23d38 <net_6lo_compress+0x468>
   23d62:	2300      	movs	r3, #0
   23d64:	e7e8      	b.n	23d38 <net_6lo_compress+0x468>
   23d66:	2300      	movs	r3, #0
   23d68:	e7e6      	b.n	23d38 <net_6lo_compress+0x468>
   23d6a:	2300      	movs	r3, #0
   23d6c:	e7e4      	b.n	23d38 <net_6lo_compress+0x468>
   23d6e:	2301      	movs	r3, #1
   23d70:	e7e2      	b.n	23d38 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   23d72:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23d76:	7853      	ldrb	r3, [r2, #1]
   23d78:	f043 0303 	orr.w	r3, r3, #3
   23d7c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   23d7e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23d82:	2201      	movs	r2, #1
   23d84:	f106 0127 	add.w	r1, r6, #39	; 0x27
   23d88:	4448      	add	r0, r9
   23d8a:	f7dc fa99 	bl	2c0 <memcpy>
		offset++;
   23d8e:	f109 0901 	add.w	r9, r9, #1
   23d92:	fa5f f989 	uxtb.w	r9, r9
   23d96:	e6a9      	b.n	23aec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23d98:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   23d9a:	b95a      	cbnz	r2, 23db4 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   23d9c:	bb43      	cbnz	r3, 23df0 <net_6lo_compress+0x520>
   23d9e:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   23da0:	bbab      	cbnz	r3, 23e0e <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   23da2:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   23da6:	b3a3      	cbz	r3, 23e12 <net_6lo_compress+0x542>
   23da8:	2300      	movs	r3, #0
   23daa:	e022      	b.n	23df2 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   23dac:	2200      	movs	r2, #0
   23dae:	e7f4      	b.n	23d9a <net_6lo_compress+0x4ca>
   23db0:	2201      	movs	r2, #1
   23db2:	e7f2      	b.n	23d9a <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   23db4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23db8:	7853      	ldrb	r3, [r2, #1]
   23dba:	f043 0302 	orr.w	r3, r3, #2
   23dbe:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   23dc0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23dc4:	2201      	movs	r2, #1
   23dc6:	f106 0119 	add.w	r1, r6, #25
   23dca:	4448      	add	r0, r9
   23dcc:	f7dc fa78 	bl	2c0 <memcpy>
		offset++;
   23dd0:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   23dd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23dd8:	2203      	movs	r2, #3
   23dda:	f106 0125 	add.w	r1, r6, #37	; 0x25
   23dde:	fa53 f080 	uxtab	r0, r3, r0
   23de2:	f7dc fa6d 	bl	2c0 <memcpy>
		offset += 3;
   23de6:	f109 0904 	add.w	r9, r9, #4
   23dea:	fa5f f989 	uxtb.w	r9, r9
   23dee:	e67d      	b.n	23aec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   23df0:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   23df2:	b983      	cbnz	r3, 23e16 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   23df4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23df8:	2210      	movs	r2, #16
   23dfa:	f106 0118 	add.w	r1, r6, #24
   23dfe:	4448      	add	r0, r9
   23e00:	f7dc fa5e 	bl	2c0 <memcpy>
		offset += 16;
   23e04:	f109 0910 	add.w	r9, r9, #16
   23e08:	fa5f f989 	uxtb.w	r9, r9
   23e0c:	e66e      	b.n	23aec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   23e0e:	2300      	movs	r3, #0
   23e10:	e7ef      	b.n	23df2 <net_6lo_compress+0x522>
   23e12:	2301      	movs	r3, #1
   23e14:	e7ed      	b.n	23df2 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   23e16:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23e1a:	7853      	ldrb	r3, [r2, #1]
   23e1c:	f043 0301 	orr.w	r3, r3, #1
   23e20:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   23e22:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23e26:	2201      	movs	r2, #1
   23e28:	f106 0119 	add.w	r1, r6, #25
   23e2c:	4448      	add	r0, r9
   23e2e:	f7dc fa47 	bl	2c0 <memcpy>
		offset++;
   23e32:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   23e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23e3a:	2205      	movs	r2, #5
   23e3c:	f106 0123 	add.w	r1, r6, #35	; 0x23
   23e40:	fa53 f080 	uxtab	r0, r3, r0
   23e44:	f7dc fa3c 	bl	2c0 <memcpy>
		offset += 5;
   23e48:	f109 0906 	add.w	r9, r9, #6
   23e4c:	fa5f f989 	uxtb.w	r9, r9
   23e50:	e64c      	b.n	23aec <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23e52:	8b73      	ldrh	r3, [r6, #26]
   23e54:	b91b      	cbnz	r3, 23e5e <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   23e56:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23e58:	b343      	cbz	r3, 23eac <net_6lo_compress+0x5dc>
   23e5a:	2300      	movs	r3, #0
   23e5c:	e000      	b.n	23e60 <net_6lo_compress+0x590>
   23e5e:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   23e60:	9301      	str	r3, [sp, #4]
   23e62:	2b00      	cmp	r3, #0
   23e64:	f43f ae36 	beq.w	23ad4 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   23e68:	6a33      	ldr	r3, [r6, #32]
   23e6a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23e6e:	d01f      	beq.n	23eb0 <net_6lo_compress+0x5e0>
   23e70:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   23e72:	469a      	mov	sl, r3
   23e74:	bb1b      	cbnz	r3, 23ebe <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   23e76:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   23e7a:	f000 80bf 	beq.w	23ffc <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   23e7e:	f116 0b18 	adds.w	fp, r6, #24
   23e82:	d008      	beq.n	23e96 <net_6lo_compress+0x5c6>
   23e84:	b13b      	cbz	r3, 23e96 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   23e86:	791a      	ldrb	r2, [r3, #4]
   23e88:	2a06      	cmp	r2, #6
   23e8a:	d03e      	beq.n	23f0a <net_6lo_compress+0x63a>
   23e8c:	2a08      	cmp	r2, #8
   23e8e:	f000 808c 	beq.w	23faa <net_6lo_compress+0x6da>
   23e92:	2a02      	cmp	r2, #2
   23e94:	d026      	beq.n	23ee4 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   23e96:	f1ba 0f00 	cmp.w	sl, #0
   23e9a:	f000 809c 	beq.w	23fd6 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   23e9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23ea2:	7853      	ldrb	r3, [r2, #1]
   23ea4:	f043 0303 	orr.w	r3, r3, #3
   23ea8:	7053      	strb	r3, [r2, #1]
   23eaa:	e61f      	b.n	23aec <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   23eac:	2301      	movs	r3, #1
   23eae:	e7d7      	b.n	23e60 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   23eb0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   23eb2:	2bfe      	cmp	r3, #254	; 0xfe
   23eb4:	d001      	beq.n	23eba <net_6lo_compress+0x5ea>
   23eb6:	2300      	movs	r3, #0
   23eb8:	e7db      	b.n	23e72 <net_6lo_compress+0x5a2>
   23eba:	2301      	movs	r3, #1
   23ebc:	e7d9      	b.n	23e72 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   23ebe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23ec2:	7853      	ldrb	r3, [r2, #1]
   23ec4:	f043 0302 	orr.w	r3, r3, #2
   23ec8:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   23eca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23ece:	2202      	movs	r2, #2
   23ed0:	f106 0126 	add.w	r1, r6, #38	; 0x26
   23ed4:	4448      	add	r0, r9
   23ed6:	f7dc f9f3 	bl	2c0 <memcpy>
			offset += 2;
   23eda:	f109 0902 	add.w	r9, r9, #2
   23ede:	fa5f f989 	uxtb.w	r9, r9
   23ee2:	e603      	b.n	23aec <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   23ee4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23ee6:	f10b 000e 	add.w	r0, fp, #14
   23eea:	f008 f833 	bl	2bf54 <memcmp>
   23eee:	2800      	cmp	r0, #0
   23ef0:	d1d1      	bne.n	23e96 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   23ef2:	f8db 3008 	ldr.w	r3, [fp, #8]
   23ef6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23efa:	d1cc      	bne.n	23e96 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   23efc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   23f00:	2bfe      	cmp	r3, #254	; 0xfe
   23f02:	d1c8      	bne.n	23e96 <net_6lo_compress+0x5c6>
			return true;
   23f04:	f8dd a004 	ldr.w	sl, [sp, #4]
   23f08:	e7c5      	b.n	23e96 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   23f0a:	795b      	ldrb	r3, [r3, #5]
   23f0c:	2b03      	cmp	r3, #3
   23f0e:	d026      	beq.n	23f5e <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   23f10:	2b02      	cmp	r3, #2
   23f12:	d1c0      	bne.n	23e96 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23f14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23f16:	2202      	movs	r2, #2
   23f18:	3101      	adds	r1, #1
   23f1a:	f10b 0009 	add.w	r0, fp, #9
   23f1e:	f008 f819 	bl	2bf54 <memcmp>
   23f22:	2800      	cmp	r0, #0
   23f24:	d1b7      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23f26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23f28:	2203      	movs	r2, #3
   23f2a:	4411      	add	r1, r2
   23f2c:	f10b 000d 	add.w	r0, fp, #13
   23f30:	f008 f810 	bl	2bf54 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23f34:	2800      	cmp	r0, #0
   23f36:	d1ae      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   23f38:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23f3c:	2bff      	cmp	r3, #255	; 0xff
   23f3e:	d1aa      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   23f40:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   23f44:	2bfe      	cmp	r3, #254	; 0xfe
   23f46:	d1a6      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   23f48:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23f4c:	f083 0302 	eor.w	r3, r3, #2
   23f50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23f52:	7812      	ldrb	r2, [r2, #0]
   23f54:	4293      	cmp	r3, r2
   23f56:	d19e      	bne.n	23e96 <net_6lo_compress+0x5c6>
				return true;
   23f58:	f8dd a004 	ldr.w	sl, [sp, #4]
   23f5c:	e79b      	b.n	23e96 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23f60:	2202      	movs	r2, #2
   23f62:	3101      	adds	r1, #1
   23f64:	f10b 0009 	add.w	r0, fp, #9
   23f68:	f007 fff4 	bl	2bf54 <memcmp>
   23f6c:	2800      	cmp	r0, #0
   23f6e:	d192      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23f70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23f72:	2203      	movs	r2, #3
   23f74:	4411      	add	r1, r2
   23f76:	f10b 000d 	add.w	r0, fp, #13
   23f7a:	f007 ffeb 	bl	2bf54 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   23f7e:	2800      	cmp	r0, #0
   23f80:	d189      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   23f82:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   23f86:	2bff      	cmp	r3, #255	; 0xff
   23f88:	d185      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   23f8a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   23f8e:	2bfe      	cmp	r3, #254	; 0xfe
   23f90:	d181      	bne.n	23e96 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23f92:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23f96:	f083 0302 	eor.w	r3, r3, #2
   23f9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23f9c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   23f9e:	4293      	cmp	r3, r2
   23fa0:	f47f af79 	bne.w	23e96 <net_6lo_compress+0x5c6>
				return true;
   23fa4:	f8dd a004 	ldr.w	sl, [sp, #4]
   23fa8:	e775      	b.n	23e96 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   23faa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   23fac:	3a01      	subs	r2, #1
   23fae:	3101      	adds	r1, #1
   23fb0:	f10b 0009 	add.w	r0, fp, #9
   23fb4:	f007 ffce 	bl	2bf54 <memcmp>
   23fb8:	2800      	cmp	r0, #0
   23fba:	f47f af6c 	bne.w	23e96 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   23fbe:	f89b 3008 	ldrb.w	r3, [fp, #8]
   23fc2:	f083 0302 	eor.w	r3, r3, #2
   23fc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23fc8:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   23fca:	4293      	cmp	r3, r2
   23fcc:	f47f af63 	bne.w	23e96 <net_6lo_compress+0x5c6>
			return true;
   23fd0:	f8dd a004 	ldr.w	sl, [sp, #4]
   23fd4:	e75f      	b.n	23e96 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   23fd6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   23fda:	7853      	ldrb	r3, [r2, #1]
   23fdc:	f043 0301 	orr.w	r3, r3, #1
   23fe0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   23fe2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   23fe6:	2208      	movs	r2, #8
   23fe8:	f106 0120 	add.w	r1, r6, #32
   23fec:	4448      	add	r0, r9
   23fee:	f7dc f967 	bl	2c0 <memcpy>
				offset += 8;
   23ff2:	f109 0908 	add.w	r9, r9, #8
   23ff6:	fa5f f989 	uxtb.w	r9, r9
   23ffa:	e577      	b.n	23aec <net_6lo_compress+0x21c>
				return 0;
   23ffc:	f04f 0900 	mov.w	r9, #0
   24000:	e574      	b.n	23aec <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   24002:	4640      	mov	r0, r8
   24004:	f7fa fe9f 	bl	1ed46 <net_pkt_frag_unref>
		return false;
   24008:	2000      	movs	r0, #0
   2400a:	e485      	b.n	23918 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   2400c:	a902      	add	r1, sp, #8
   2400e:	4620      	mov	r0, r4
   24010:	f000 fc68 	bl	248e4 <net_udp_get_hdr>
   24014:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   24016:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2401a:	22f0      	movs	r2, #240	; 0xf0
   2401c:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   24020:	8802      	ldrh	r2, [r0, #0]
   24022:	0a13      	lsrs	r3, r2, #8
   24024:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24028:	b29b      	uxth	r3, r3
   2402a:	f640 720b 	movw	r2, #3851	; 0xf0b
   2402e:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   24032:	d025      	beq.n	24080 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   24034:	8872      	ldrh	r2, [r6, #2]
   24036:	b2d2      	uxtb	r2, r2
   24038:	2af0      	cmp	r2, #240	; 0xf0
   2403a:	d046      	beq.n	240ca <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   2403c:	0a1b      	lsrs	r3, r3, #8
   2403e:	2bf0      	cmp	r3, #240	; 0xf0
   24040:	d062      	beq.n	24108 <net_6lo_compress+0x838>
		offset++;
   24042:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   24046:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2404a:	2204      	movs	r2, #4
   2404c:	4631      	mov	r1, r6
   2404e:	fa53 f080 	uxtab	r0, r3, r0
   24052:	f7dc f935 	bl	2c0 <memcpy>
		offset += 4;
   24056:	f109 0905 	add.w	r9, r9, #5
   2405a:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   2405e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   24062:	2202      	movs	r2, #2
   24064:	1db1      	adds	r1, r6, #6
   24066:	4448      	add	r0, r9
   24068:	f7dc f92a 	bl	2c0 <memcpy>
	offset += 2;
   2406c:	f109 0902 	add.w	r9, r9, #2
   24070:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   24074:	4631      	mov	r1, r6
   24076:	4620      	mov	r0, r4
   24078:	f000 fc74 	bl	24964 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   2407c:	2630      	movs	r6, #48	; 0x30
   2407e:	e53e      	b.n	23afe <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   24080:	8841      	ldrh	r1, [r0, #2]
   24082:	0a0a      	lsrs	r2, r1, #8
   24084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24088:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   2408c:	f640 710b 	movw	r1, #3851	; 0xf0b
   24090:	428a      	cmp	r2, r1
   24092:	d1cf      	bne.n	24034 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   24094:	f8d8 2008 	ldr.w	r2, [r8, #8]
   24098:	f812 3009 	ldrb.w	r3, [r2, r9]
   2409c:	f043 0303 	orr.w	r3, r3, #3
   240a0:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   240a4:	f109 0101 	add.w	r1, r9, #1
   240a8:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   240aa:	8803      	ldrh	r3, [r0, #0]
   240ac:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   240ae:	011b      	lsls	r3, r3, #4
   240b0:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   240b2:	8842      	ldrh	r2, [r0, #2]
   240b4:	f3c2 2203 	ubfx	r2, r2, #8, #4
   240b8:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   240ba:	f8d8 2008 	ldr.w	r2, [r8, #8]
   240be:	f109 0902 	add.w	r9, r9, #2
   240c2:	fa5f f989 	uxtb.w	r9, r9
   240c6:	5453      	strb	r3, [r2, r1]
   240c8:	e7c9      	b.n	2405e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   240ca:	f8d8 2008 	ldr.w	r2, [r8, #8]
   240ce:	f812 3009 	ldrb.w	r3, [r2, r9]
   240d2:	f043 0301 	orr.w	r3, r3, #1
   240d6:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   240da:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   240de:	f8d8 3008 	ldr.w	r3, [r8, #8]
   240e2:	2202      	movs	r2, #2
   240e4:	4631      	mov	r1, r6
   240e6:	fa53 f080 	uxtab	r0, r3, r0
   240ea:	f7dc f8e9 	bl	2c0 <memcpy>
		offset += 2;
   240ee:	f109 0303 	add.w	r3, r9, #3
   240f2:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   240f4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   240f8:	f109 0904 	add.w	r9, r9, #4
   240fc:	fa5f f989 	uxtb.w	r9, r9
   24100:	8872      	ldrh	r2, [r6, #2]
   24102:	0a12      	lsrs	r2, r2, #8
   24104:	54ca      	strb	r2, [r1, r3]
   24106:	e7aa      	b.n	2405e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   24108:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2410c:	f812 3009 	ldrb.w	r3, [r2, r9]
   24110:	f043 0302 	orr.w	r3, r3, #2
   24114:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   24118:	f109 0301 	add.w	r3, r9, #1
   2411c:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   24120:	f109 0002 	add.w	r0, r9, #2
   24124:	4631      	mov	r1, r6
   24126:	f831 2b02 	ldrh.w	r2, [r1], #2
   2412a:	0a12      	lsrs	r2, r2, #8
   2412c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24130:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   24134:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24138:	2202      	movs	r2, #2
   2413a:	fa53 f080 	uxtab	r0, r3, r0
   2413e:	f7dc f8bf 	bl	2c0 <memcpy>
		offset += 2;
   24142:	f109 0904 	add.w	r9, r9, #4
   24146:	fa5f f989 	uxtb.w	r9, r9
   2414a:	e788      	b.n	2405e <net_6lo_compress+0x78e>
		return false;
   2414c:	2000      	movs	r0, #0
   2414e:	f7ff bbe3 	b.w	23918 <net_6lo_compress+0x48>
		return false;
   24152:	2000      	movs	r0, #0
   24154:	f7ff bbe0 	b.w	23918 <net_6lo_compress+0x48>
	return true;
   24158:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   2415a:	f7ff bbdd 	b.w	23918 <net_6lo_compress+0x48>
		return false;
   2415e:	4628      	mov	r0, r5
   24160:	f7ff bbda 	b.w	23918 <net_6lo_compress+0x48>
	return true;
   24164:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   24166:	f7ff bbd7 	b.w	23918 <net_6lo_compress+0x48>

0002416a <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   2416a:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   2416c:	6883      	ldr	r3, [r0, #8]
   2416e:	689b      	ldr	r3, [r3, #8]
   24170:	781b      	ldrb	r3, [r3, #0]
   24172:	f003 0260 	and.w	r2, r3, #96	; 0x60
   24176:	2a60      	cmp	r2, #96	; 0x60
   24178:	d005      	beq.n	24186 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   2417a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   2417e:	2b41      	cmp	r3, #65	; 0x41
   24180:	d004      	beq.n	2418c <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   24182:	2001      	movs	r0, #1
}
   24184:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   24186:	f7ff f873 	bl	23270 <uncompress_IPHC_header>
   2418a:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   2418c:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   2418e:	68a0      	ldr	r0, [r4, #8]
   24190:	89a2      	ldrh	r2, [r4, #12]
   24192:	3a01      	subs	r2, #1
   24194:	1c41      	adds	r1, r0, #1
   24196:	f007 ff0d 	bl	2bfb4 <memmove>
	frag->len -= 1;
   2419a:	89a3      	ldrh	r3, [r4, #12]
   2419c:	3b01      	subs	r3, #1
   2419e:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   241a0:	2001      	movs	r0, #1
   241a2:	bd10      	pop	{r4, pc}

000241a4 <net_route_entry_remove>:
{
   241a4:	4770      	bx	lr

000241a6 <net_route_entries_table_clear>:
{
   241a6:	4770      	bx	lr

000241a8 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   241a8:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   241aa:	f7fc fbd3 	bl	20954 <net_nbr_unref>

	return 0;
}
   241ae:	2000      	movs	r0, #0
   241b0:	bd08      	pop	{r3, pc}
	...

000241b4 <net_route_get_nbr>:
{
   241b4:	b430      	push	{r4, r5}
   241b6:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   241b8:	2300      	movs	r3, #0
   241ba:	e000      	b.n	241be <net_route_get_nbr+0xa>
   241bc:	3301      	adds	r3, #1
   241be:	2b07      	cmp	r3, #7
   241c0:	dc0b      	bgt.n	241da <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   241c2:	4c07      	ldr	r4, [pc, #28]	; (241e0 <net_route_get_nbr+0x2c>)
   241c4:	00da      	lsls	r2, r3, #3
   241c6:	1ad2      	subs	r2, r2, r3
   241c8:	00d1      	lsls	r1, r2, #3
   241ca:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   241cc:	5c62      	ldrb	r2, [r4, r1]
   241ce:	2a00      	cmp	r2, #0
   241d0:	d0f4      	beq.n	241bc <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   241d2:	68c2      	ldr	r2, [r0, #12]
   241d4:	42aa      	cmp	r2, r5
   241d6:	d1f1      	bne.n	241bc <net_route_get_nbr+0x8>
   241d8:	e000      	b.n	241dc <net_route_get_nbr+0x28>
	return NULL;
   241da:	2000      	movs	r0, #0
}
   241dc:	bc30      	pop	{r4, r5}
   241de:	4770      	bx	lr
   241e0:	2000c314 	.word	0x2000c314

000241e4 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   241e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241e8:	b083      	sub	sp, #12
   241ea:	4606      	mov	r6, r0
   241ec:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   241ee:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   241f0:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   241f2:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   241f4:	e00b      	b.n	2420e <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   241f6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   241fa:	00da      	lsls	r2, r3, #3
   241fc:	4b3f      	ldr	r3, [pc, #252]	; (242fc <net_route_lookup+0x118>)
   241fe:	4413      	add	r3, r2
   24200:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   24204:	f898 3020 	ldrb.w	r3, [r8, #32]
   24208:	429d      	cmp	r5, r3
   2420a:	d917      	bls.n	2423c <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2420c:	3401      	adds	r4, #1
   2420e:	2c07      	cmp	r4, #7
   24210:	dc46      	bgt.n	242a0 <net_route_lookup+0xbc>
   24212:	f015 0f80 	tst.w	r5, #128	; 0x80
   24216:	d143      	bne.n	242a0 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   24218:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   2421c:	00d3      	lsls	r3, r2, #3
   2421e:	4a37      	ldr	r2, [pc, #220]	; (242fc <net_route_lookup+0x118>)
   24220:	5cd3      	ldrb	r3, [r2, r3]
   24222:	2b00      	cmp	r3, #0
   24224:	d0f2      	beq.n	2420c <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   24226:	2e00      	cmp	r6, #0
   24228:	d0e5      	beq.n	241f6 <net_route_lookup+0x12>
   2422a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2422e:	00da      	lsls	r2, r3, #3
   24230:	4b32      	ldr	r3, [pc, #200]	; (242fc <net_route_lookup+0x118>)
   24232:	4413      	add	r3, r2
   24234:	689b      	ldr	r3, [r3, #8]
   24236:	429e      	cmp	r6, r3
   24238:	d1e8      	bne.n	2420c <net_route_lookup+0x28>
   2423a:	e7dc      	b.n	241f6 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   2423c:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   24240:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   24244:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   24248:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   2424c:	2b80      	cmp	r3, #128	; 0x80
   2424e:	d906      	bls.n	2425e <net_route_lookup+0x7a>
		return false;
   24250:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   24252:	2b00      	cmp	r3, #0
   24254:	d0da      	beq.n	2420c <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   24256:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   2425a:	4647      	mov	r7, r8
   2425c:	e7d6      	b.n	2420c <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   2425e:	465a      	mov	r2, fp
   24260:	4649      	mov	r1, r9
   24262:	9801      	ldr	r0, [sp, #4]
   24264:	f007 fe76 	bl	2bf54 <memcmp>
   24268:	b9b0      	cbnz	r0, 24298 <net_route_lookup+0xb4>
	if (!remain) {
   2426a:	f1ba 0f00 	cmp.w	sl, #0
   2426e:	d015      	beq.n	2429c <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   24270:	f1ca 0208 	rsb	r2, sl, #8
   24274:	23ff      	movs	r3, #255	; 0xff
   24276:	4093      	lsls	r3, r2
   24278:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   2427c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   24280:	9b01      	ldr	r3, [sp, #4]
   24282:	f813 300b 	ldrb.w	r3, [r3, fp]
   24286:	f819 200b 	ldrb.w	r2, [r9, fp]
   2428a:	4053      	eors	r3, r2
   2428c:	ea1a 0f03 	tst.w	sl, r3
   24290:	bf0c      	ite	eq
   24292:	2301      	moveq	r3, #1
   24294:	2300      	movne	r3, #0
   24296:	e7dc      	b.n	24252 <net_route_lookup+0x6e>
		return false;
   24298:	2300      	movs	r3, #0
   2429a:	e7da      	b.n	24252 <net_route_lookup+0x6e>
		return true;
   2429c:	2301      	movs	r3, #1
   2429e:	e7d8      	b.n	24252 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   242a0:	b1c7      	cbz	r7, 242d4 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   242a2:	463a      	mov	r2, r7
	return list->head;
   242a4:	4b16      	ldr	r3, [pc, #88]	; (24300 <net_route_lookup+0x11c>)
   242a6:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   242a8:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   242aa:	b16b      	cbz	r3, 242c8 <net_route_lookup+0xe4>
		if (test == node) {
   242ac:	429a      	cmp	r2, r3
   242ae:	d002      	beq.n	242b6 <net_route_lookup+0xd2>
		prev = test;
   242b0:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   242b2:	681b      	ldr	r3, [r3, #0]
   242b4:	e7f9      	b.n	242aa <net_route_lookup+0xc6>
	if (!prev_node) {
   242b6:	b189      	cbz	r1, 242dc <net_route_lookup+0xf8>
		prev_node->next = node->next;
   242b8:	683b      	ldr	r3, [r7, #0]
   242ba:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   242bc:	4b10      	ldr	r3, [pc, #64]	; (24300 <net_route_lookup+0x11c>)
   242be:	685b      	ldr	r3, [r3, #4]
   242c0:	429a      	cmp	r2, r3
   242c2:	d014      	beq.n	242ee <net_route_lookup+0x10a>
	node->next = NULL;
   242c4:	2300      	movs	r3, #0
   242c6:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   242c8:	4b0d      	ldr	r3, [pc, #52]	; (24300 <net_route_lookup+0x11c>)
   242ca:	6819      	ldr	r1, [r3, #0]
   242cc:	6039      	str	r1, [r7, #0]
	list->head = node;
   242ce:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   242d0:	685b      	ldr	r3, [r3, #4]
   242d2:	b17b      	cbz	r3, 242f4 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   242d4:	4638      	mov	r0, r7
   242d6:	b003      	add	sp, #12
   242d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   242dc:	6839      	ldr	r1, [r7, #0]
   242de:	4b08      	ldr	r3, [pc, #32]	; (24300 <net_route_lookup+0x11c>)
   242e0:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   242e2:	685b      	ldr	r3, [r3, #4]
   242e4:	429a      	cmp	r2, r3
   242e6:	d1ed      	bne.n	242c4 <net_route_lookup+0xe0>
			list->tail = list->head;
   242e8:	4b05      	ldr	r3, [pc, #20]	; (24300 <net_route_lookup+0x11c>)
   242ea:	6059      	str	r1, [r3, #4]
   242ec:	e7ea      	b.n	242c4 <net_route_lookup+0xe0>
			list->tail = prev_node;
   242ee:	4b04      	ldr	r3, [pc, #16]	; (24300 <net_route_lookup+0x11c>)
   242f0:	6059      	str	r1, [r3, #4]
   242f2:	e7e7      	b.n	242c4 <net_route_lookup+0xe0>
		list->tail = list->head;
   242f4:	4b02      	ldr	r3, [pc, #8]	; (24300 <net_route_lookup+0x11c>)
   242f6:	605a      	str	r2, [r3, #4]
	return found;
   242f8:	e7ec      	b.n	242d4 <net_route_lookup+0xf0>
   242fa:	bf00      	nop
   242fc:	2000c314 	.word	0x2000c314
   24300:	20001f5c 	.word	0x20001f5c

00024304 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   24304:	2800      	cmp	r0, #0
   24306:	d046      	beq.n	24396 <net_route_del+0x92>
{
   24308:	b538      	push	{r3, r4, r5, lr}
   2430a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   2430c:	4601      	mov	r1, r0
	return list->head;
   2430e:	4b25      	ldr	r3, [pc, #148]	; (243a4 <net_route_del+0xa0>)
   24310:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   24312:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   24314:	b16b      	cbz	r3, 24332 <net_route_del+0x2e>
		if (test == node) {
   24316:	4299      	cmp	r1, r3
   24318:	d002      	beq.n	24320 <net_route_del+0x1c>
		prev = test;
   2431a:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2431c:	681b      	ldr	r3, [r3, #0]
   2431e:	e7f9      	b.n	24314 <net_route_del+0x10>
	if (!prev_node) {
   24320:	b1aa      	cbz	r2, 2434e <net_route_del+0x4a>
		prev_node->next = node->next;
   24322:	6823      	ldr	r3, [r4, #0]
   24324:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   24326:	4b1f      	ldr	r3, [pc, #124]	; (243a4 <net_route_del+0xa0>)
   24328:	685b      	ldr	r3, [r3, #4]
   2432a:	429c      	cmp	r4, r3
   2432c:	d018      	beq.n	24360 <net_route_del+0x5c>
	node->next = NULL;
   2432e:	2300      	movs	r3, #0
   24330:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   24332:	4620      	mov	r0, r4
   24334:	f7ff ff3e 	bl	241b4 <net_route_get_nbr>
	if (!nbr) {
   24338:	4605      	mov	r5, r0
   2433a:	2800      	cmp	r0, #0
   2433c:	d02e      	beq.n	2439c <net_route_del+0x98>
   2433e:	2300      	movs	r3, #0
   24340:	461a      	mov	r2, r3
   24342:	6881      	ldr	r1, [r0, #8]
   24344:	4818      	ldr	r0, [pc, #96]	; (243a8 <net_route_del+0xa4>)
   24346:	f000 f977 	bl	24638 <net_mgmt_event_notify_with_info>
	return list->head;
   2434a:	6864      	ldr	r4, [r4, #4]
   2434c:	e011      	b.n	24372 <net_route_del+0x6e>
		list->head = node->next;
   2434e:	6822      	ldr	r2, [r4, #0]
   24350:	4b14      	ldr	r3, [pc, #80]	; (243a4 <net_route_del+0xa0>)
   24352:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   24354:	685b      	ldr	r3, [r3, #4]
   24356:	429c      	cmp	r4, r3
   24358:	d1e9      	bne.n	2432e <net_route_del+0x2a>
			list->tail = list->head;
   2435a:	4b12      	ldr	r3, [pc, #72]	; (243a4 <net_route_del+0xa0>)
   2435c:	605a      	str	r2, [r3, #4]
   2435e:	e7e6      	b.n	2432e <net_route_del+0x2a>
			list->tail = prev_node;
   24360:	4b10      	ldr	r3, [pc, #64]	; (243a4 <net_route_del+0xa0>)
   24362:	605a      	str	r2, [r3, #4]
   24364:	e7e3      	b.n	2432e <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   24366:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24368:	b154      	cbz	r4, 24380 <net_route_del+0x7c>
	return node->next;
   2436a:	6823      	ldr	r3, [r4, #0]
   2436c:	b153      	cbz	r3, 24384 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2436e:	b15a      	cbz	r2, 24388 <net_route_del+0x84>
	return node->next;
   24370:	6824      	ldr	r4, [r4, #0]
   24372:	b15c      	cbz	r4, 2438c <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   24374:	6860      	ldr	r0, [r4, #4]
   24376:	2800      	cmp	r0, #0
   24378:	d0f5      	beq.n	24366 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   2437a:	f7ff ff15 	bl	241a8 <nbr_nexthop_put>
   2437e:	e7f2      	b.n	24366 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24380:	4623      	mov	r3, r4
   24382:	e7f3      	b.n	2436c <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   24384:	2400      	movs	r4, #0
   24386:	e7f4      	b.n	24372 <net_route_del+0x6e>
   24388:	2400      	movs	r4, #0
   2438a:	e7f2      	b.n	24372 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   2438c:	4628      	mov	r0, r5
   2438e:	f7fc fae1 	bl	20954 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   24392:	2000      	movs	r0, #0
   24394:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24396:	f06f 0015 	mvn.w	r0, #21
   2439a:	4770      	bx	lr
		return -ENOENT;
   2439c:	f06f 0001 	mvn.w	r0, #1
}
   243a0:	bd38      	pop	{r3, r4, r5, pc}
   243a2:	bf00      	nop
   243a4:	20001f5c 	.word	0x20001f5c
   243a8:	f060000c 	.word	0xf060000c

000243ac <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   243ac:	b1b8      	cbz	r0, 243de <net_route_get_nexthop+0x32>
	return list->head;
   243ae:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   243b0:	b19b      	cbz	r3, 243da <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   243b2:	685a      	ldr	r2, [r3, #4]
   243b4:	7851      	ldrb	r1, [r2, #1]
   243b6:	29ff      	cmp	r1, #255	; 0xff
   243b8:	d002      	beq.n	243c0 <net_route_get_nexthop+0x14>
   243ba:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   243bc:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   243be:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   243c0:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243c2:	b123      	cbz	r3, 243ce <net_route_get_nexthop+0x22>
	return node->next;
   243c4:	681a      	ldr	r2, [r3, #0]
   243c6:	b132      	cbz	r2, 243d6 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243c8:	b119      	cbz	r1, 243d2 <net_route_get_nexthop+0x26>
	return node->next;
   243ca:	681b      	ldr	r3, [r3, #0]
   243cc:	e7f0      	b.n	243b0 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243ce:	461a      	mov	r2, r3
   243d0:	e7f9      	b.n	243c6 <net_route_get_nexthop+0x1a>
   243d2:	2300      	movs	r3, #0
   243d4:	e7ec      	b.n	243b0 <net_route_get_nexthop+0x4>
   243d6:	2300      	movs	r3, #0
   243d8:	e7ea      	b.n	243b0 <net_route_get_nexthop+0x4>
	}

	return NULL;
   243da:	2000      	movs	r0, #0
   243dc:	4770      	bx	lr
		return NULL;
   243de:	2000      	movs	r0, #0
}
   243e0:	4770      	bx	lr
	...

000243e4 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   243e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243e6:	4607      	mov	r7, r0
   243e8:	460e      	mov	r6, r1
	int i, ret = 0;
   243ea:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   243ec:	462c      	mov	r4, r5
   243ee:	e000      	b.n	243f2 <net_route_foreach+0xe>
   243f0:	3401      	adds	r4, #1
   243f2:	2c07      	cmp	r4, #7
   243f4:	dc0b      	bgt.n	2440e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   243f6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   243fa:	00da      	lsls	r2, r3, #3
   243fc:	4b05      	ldr	r3, [pc, #20]	; (24414 <net_route_foreach+0x30>)
   243fe:	4413      	add	r3, r2
   24400:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   24402:	2800      	cmp	r0, #0
   24404:	d0f4      	beq.n	243f0 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   24406:	4631      	mov	r1, r6
   24408:	47b8      	blx	r7

		ret++;
   2440a:	3501      	adds	r5, #1
   2440c:	e7f0      	b.n	243f0 <net_route_foreach+0xc>
	}

	return ret;
}
   2440e:	4628      	mov	r0, r5
   24410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24412:	bf00      	nop
   24414:	2000c314 	.word	0x2000c314

00024418 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   24418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2441a:	4607      	mov	r7, r0
   2441c:	460c      	mov	r4, r1
   2441e:	4615      	mov	r5, r2
   24420:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   24422:	f7fd f961 	bl	216e8 <net_ipv6_nbr_lookup>
   24426:	b120      	cbz	r0, 24432 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   24428:	2300      	movs	r3, #0
   2442a:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   2442c:	6034      	str	r4, [r6, #0]

		return true;
   2442e:	2001      	movs	r0, #1
   24430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   24432:	4621      	mov	r1, r4
   24434:	4638      	mov	r0, r7
   24436:	f7ff fed5 	bl	241e4 <net_route_lookup>
   2443a:	6028      	str	r0, [r5, #0]
	if (*route) {
   2443c:	b130      	cbz	r0, 2444c <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   2443e:	f7ff ffb5 	bl	243ac <net_route_get_nexthop>
   24442:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   24444:	b108      	cbz	r0, 2444a <net_route_get_info+0x32>
			return false;
		}

		return true;
   24446:	2001      	movs	r0, #1
   24448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   2444c:	4621      	mov	r1, r4
   2444e:	2000      	movs	r0, #0
   24450:	f7f8 fefe 	bl	1d250 <net_if_ipv6_router_find_default>
		if (!router) {
   24454:	4603      	mov	r3, r0
   24456:	b118      	cbz	r0, 24460 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   24458:	332c      	adds	r3, #44	; 0x2c
   2445a:	6033      	str	r3, [r6, #0]

		return true;
   2445c:	2001      	movs	r0, #1
   2445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   24460:	2000      	movs	r0, #0
	}

	return false;
}
   24462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024464 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   24464:	b570      	push	{r4, r5, r6, lr}
   24466:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   24468:	6940      	ldr	r0, [r0, #20]
   2446a:	f7fd f93d 	bl	216e8 <net_ipv6_nbr_lookup>
	if (!nbr) {
   2446e:	b330      	cbz	r0, 244be <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   24470:	7840      	ldrb	r0, [r0, #1]
   24472:	f7fc fb01 	bl	20a78 <net_nbr_get_lladdr>
	if (!lladdr) {
   24476:	4605      	mov	r5, r0
   24478:	b320      	cbz	r0, 244c4 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   2447a:	6a20      	ldr	r0, [r4, #32]
   2447c:	b328      	cbz	r0, 244ca <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   2447e:	1cae      	adds	r6, r5, #2
   24480:	786a      	ldrb	r2, [r5, #1]
   24482:	4631      	mov	r1, r6
   24484:	f007 fd66 	bl	2bf54 <memcmp>
   24488:	b310      	cbz	r0, 244d0 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   2448a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2448e:	f043 0304 	orr.w	r3, r3, #4
   24492:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   24496:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   24498:	691a      	ldr	r2, [r3, #16]
   2449a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   2449c:	7d5a      	ldrb	r2, [r3, #21]
   2449e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   244a2:	7d1b      	ldrb	r3, [r3, #20]
   244a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   244a8:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   244aa:	782b      	ldrb	r3, [r5, #0]
   244ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   244b0:	786b      	ldrb	r3, [r5, #1]
   244b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   244b6:	4620      	mov	r0, r4
   244b8:	f7f8 f84a 	bl	1c550 <net_send_data>
   244bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   244be:	f06f 0001 	mvn.w	r0, #1
   244c2:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   244c4:	f06f 0002 	mvn.w	r0, #2
   244c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   244ca:	f06f 0015 	mvn.w	r0, #21
   244ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   244d0:	f06f 0015 	mvn.w	r0, #21
}
   244d4:	bd70      	pop	{r4, r5, r6, pc}

000244d6 <net_route_init>:

void net_route_init(void)
{
   244d6:	4770      	bx	lr

000244d8 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   244d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244da:	e079      	b.n	245d0 <mgmt_thread+0xf8>
		out_event = 0;
   244dc:	2100      	movs	r1, #0
   244de:	4a48      	ldr	r2, [pc, #288]	; (24600 <mgmt_thread+0x128>)
   244e0:	8011      	strh	r1, [r2, #0]
   244e2:	e089      	b.n	245f8 <mgmt_thread+0x120>
		return NULL;
   244e4:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   244e6:	b13e      	cbz	r6, 244f8 <mgmt_thread+0x20>
	return list->head;
   244e8:	4b46      	ldr	r3, [pc, #280]	; (24604 <mgmt_thread+0x12c>)
   244ea:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   244ec:	b15d      	cbz	r5, 24506 <mgmt_thread+0x2e>
   244ee:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   244f0:	b105      	cbz	r5, 244f4 <mgmt_thread+0x1c>
	return node->next;
   244f2:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   244f4:	2700      	movs	r7, #0
   244f6:	e01f      	b.n	24538 <mgmt_thread+0x60>
   244f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   244fc:	2100      	movs	r1, #0
   244fe:	4842      	ldr	r0, [pc, #264]	; (24608 <mgmt_thread+0x130>)
   24500:	f006 fb00 	bl	2ab04 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   24504:	e064      	b.n	245d0 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   24506:	462c      	mov	r4, r5
   24508:	e7f4      	b.n	244f4 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   2450a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   2450e:	d04c      	beq.n	245aa <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   24510:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   24512:	6993      	ldr	r3, [r2, #24]
   24514:	2b00      	cmp	r3, #0
   24516:	d02c      	beq.n	24572 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   24518:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   2451a:	4283      	cmp	r3, r0
   2451c:	d029      	beq.n	24572 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2451e:	2c00      	cmp	r4, #0
   24520:	d04b      	beq.n	245ba <mgmt_thread+0xe2>
   24522:	4622      	mov	r2, r4
   24524:	2c00      	cmp	r4, #0
   24526:	d046      	beq.n	245b6 <mgmt_thread+0xde>
	return node->next;
   24528:	6823      	ldr	r3, [r4, #0]
   2452a:	2b00      	cmp	r3, #0
   2452c:	d047      	beq.n	245be <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2452e:	2a00      	cmp	r2, #0
   24530:	d047      	beq.n	245c2 <mgmt_thread+0xea>
	return node->next;
   24532:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24534:	4625      	mov	r5, r4
   24536:	461c      	mov	r4, r3
   24538:	2d00      	cmp	r5, #0
   2453a:	d044      	beq.n	245c6 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   2453c:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2453e:	68aa      	ldr	r2, [r5, #8]
   24540:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   24542:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   24546:	f013 0f03 	tst.w	r3, #3
   2454a:	d0e8      	beq.n	2451e <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   2454c:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   2454e:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   24552:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   24556:	2b00      	cmp	r3, #0
   24558:	d0e1      	beq.n	2451e <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2455a:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   2455c:	2b00      	cmp	r3, #0
   2455e:	d0d4      	beq.n	2450a <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   24560:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   24562:	2b00      	cmp	r3, #0
   24564:	d0d1      	beq.n	2450a <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   24566:	ea01 0302 	and.w	r3, r1, r2
   2456a:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   2456c:	2b00      	cmp	r3, #0
   2456e:	d0d6      	beq.n	2451e <mgmt_thread+0x46>
   24570:	e7cb      	b.n	2450a <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   24572:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   24574:	6873      	ldr	r3, [r6, #4]
   24576:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   24578:	b15f      	cbz	r7, 24592 <mgmt_thread+0xba>
		prev_node->next = node->next;
   2457a:	682b      	ldr	r3, [r5, #0]
   2457c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   2457e:	4b21      	ldr	r3, [pc, #132]	; (24604 <mgmt_thread+0x12c>)
   24580:	685b      	ldr	r3, [r3, #4]
   24582:	429d      	cmp	r5, r3
   24584:	d00e      	beq.n	245a4 <mgmt_thread+0xcc>
	node->next = NULL;
   24586:	2300      	movs	r3, #0
   24588:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2458a:	6868      	ldr	r0, [r5, #4]
   2458c:	f006 fac3 	bl	2ab16 <_impl_k_sem_give>
   24590:	e7c5      	b.n	2451e <mgmt_thread+0x46>
		list->head = node->next;
   24592:	682a      	ldr	r2, [r5, #0]
   24594:	4b1b      	ldr	r3, [pc, #108]	; (24604 <mgmt_thread+0x12c>)
   24596:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   24598:	685b      	ldr	r3, [r3, #4]
   2459a:	429d      	cmp	r5, r3
   2459c:	d1f3      	bne.n	24586 <mgmt_thread+0xae>
			list->tail = list->head;
   2459e:	4b19      	ldr	r3, [pc, #100]	; (24604 <mgmt_thread+0x12c>)
   245a0:	605a      	str	r2, [r3, #4]
   245a2:	e7f0      	b.n	24586 <mgmt_thread+0xae>
			list->tail = prev_node;
   245a4:	4b17      	ldr	r3, [pc, #92]	; (24604 <mgmt_thread+0x12c>)
   245a6:	605f      	str	r7, [r3, #4]
   245a8:	e7ed      	b.n	24586 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   245aa:	686b      	ldr	r3, [r5, #4]
   245ac:	6872      	ldr	r2, [r6, #4]
   245ae:	4628      	mov	r0, r5
   245b0:	4798      	blx	r3
			prev = &cb->node;
   245b2:	462f      	mov	r7, r5
   245b4:	e7b3      	b.n	2451e <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   245b6:	4623      	mov	r3, r4
   245b8:	e7b7      	b.n	2452a <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   245ba:	4623      	mov	r3, r4
   245bc:	e7ba      	b.n	24534 <mgmt_thread+0x5c>
   245be:	2300      	movs	r3, #0
   245c0:	e7b8      	b.n	24534 <mgmt_thread+0x5c>
   245c2:	2300      	movs	r3, #0
   245c4:	e7b6      	b.n	24534 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   245c6:	2300      	movs	r3, #0
   245c8:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   245ca:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   245cc:	f006 f94a 	bl	2a864 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   245d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   245d4:	480c      	ldr	r0, [pc, #48]	; (24608 <mgmt_thread+0x130>)
   245d6:	f006 fab1 	bl	2ab3c <_impl_k_sem_take>
	if (!events[out_event].event) {
   245da:	4b09      	ldr	r3, [pc, #36]	; (24600 <mgmt_thread+0x128>)
   245dc:	881b      	ldrh	r3, [r3, #0]
   245de:	4a0b      	ldr	r2, [pc, #44]	; (2460c <mgmt_thread+0x134>)
   245e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   245e4:	2a00      	cmp	r2, #0
   245e6:	f43f af7d 	beq.w	244e4 <mgmt_thread+0xc>
	out_event++;
   245ea:	1c5a      	adds	r2, r3, #1
   245ec:	b292      	uxth	r2, r2
   245ee:	4904      	ldr	r1, [pc, #16]	; (24600 <mgmt_thread+0x128>)
   245f0:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   245f2:	2a02      	cmp	r2, #2
   245f4:	f43f af72 	beq.w	244dc <mgmt_thread+0x4>
	return &events[o_idx];
   245f8:	4e04      	ldr	r6, [pc, #16]	; (2460c <mgmt_thread+0x134>)
   245fa:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   245fe:	e772      	b.n	244e6 <mgmt_thread+0xe>
   24600:	20001fec 	.word	0x20001fec
   24604:	20001f64 	.word	0x20001f64
   24608:	2000d0c8 	.word	0x2000d0c8
   2460c:	20001f6c 	.word	0x20001f6c

00024610 <net_mgmt_add_event_callback>:
	node->next = list->head;
   24610:	4b07      	ldr	r3, [pc, #28]	; (24630 <net_mgmt_add_event_callback+0x20>)
   24612:	681a      	ldr	r2, [r3, #0]
   24614:	6002      	str	r2, [r0, #0]
	list->head = node;
   24616:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   24618:	685b      	ldr	r3, [r3, #4]
   2461a:	b12b      	cbz	r3, 24628 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   2461c:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   2461e:	4a05      	ldr	r2, [pc, #20]	; (24634 <net_mgmt_add_event_callback+0x24>)
   24620:	6813      	ldr	r3, [r2, #0]
   24622:	430b      	orrs	r3, r1
   24624:	6013      	str	r3, [r2, #0]
   24626:	4770      	bx	lr
		list->tail = list->head;
   24628:	4b01      	ldr	r3, [pc, #4]	; (24630 <net_mgmt_add_event_callback+0x20>)
   2462a:	6058      	str	r0, [r3, #4]
   2462c:	e7f6      	b.n	2461c <net_mgmt_add_event_callback+0xc>
   2462e:	bf00      	nop
   24630:	20001f64 	.word	0x20001f64
   24634:	20001f7c 	.word	0x20001f7c

00024638 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   24638:	4b17      	ldr	r3, [pc, #92]	; (24698 <net_mgmt_event_notify_with_info+0x60>)
   2463a:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   2463c:	ea30 0303 	bics.w	r3, r0, r3
   24640:	d000      	beq.n	24644 <net_mgmt_event_notify_with_info+0xc>
   24642:	4770      	bx	lr
{
   24644:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   24646:	4c15      	ldr	r4, [pc, #84]	; (2469c <net_mgmt_event_notify_with_info+0x64>)
   24648:	8823      	ldrh	r3, [r4, #0]
   2464a:	4a15      	ldr	r2, [pc, #84]	; (246a0 <net_mgmt_event_notify_with_info+0x68>)
   2464c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   24650:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   24654:	6051      	str	r1, [r2, #4]
	in_event++;
   24656:	3301      	adds	r3, #1
   24658:	b29b      	uxth	r3, r3
   2465a:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2465c:	2b02      	cmp	r3, #2
   2465e:	d009      	beq.n	24674 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   24660:	4b0e      	ldr	r3, [pc, #56]	; (2469c <net_mgmt_event_notify_with_info+0x64>)
   24662:	881a      	ldrh	r2, [r3, #0]
   24664:	4b0f      	ldr	r3, [pc, #60]	; (246a4 <net_mgmt_event_notify_with_info+0x6c>)
   24666:	881b      	ldrh	r3, [r3, #0]
   24668:	429a      	cmp	r2, r3
   2466a:	d006      	beq.n	2467a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2466c:	480e      	ldr	r0, [pc, #56]	; (246a8 <net_mgmt_event_notify_with_info+0x70>)
   2466e:	f006 fa52 	bl	2ab16 <_impl_k_sem_give>
   24672:	bd10      	pop	{r4, pc}
		in_event = 0;
   24674:	2200      	movs	r2, #0
   24676:	8022      	strh	r2, [r4, #0]
   24678:	e7f2      	b.n	24660 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   2467a:	3301      	adds	r3, #1
   2467c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2467e:	2b02      	cmp	r3, #2
   24680:	d007      	beq.n	24692 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   24682:	4a07      	ldr	r2, [pc, #28]	; (246a0 <net_mgmt_event_notify_with_info+0x68>)
   24684:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   24688:	2a00      	cmp	r2, #0
   2468a:	d0ef      	beq.n	2466c <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   2468c:	4a05      	ldr	r2, [pc, #20]	; (246a4 <net_mgmt_event_notify_with_info+0x6c>)
   2468e:	8013      	strh	r3, [r2, #0]
   24690:	e7ec      	b.n	2466c <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   24692:	2300      	movs	r3, #0
   24694:	e7f5      	b.n	24682 <net_mgmt_event_notify_with_info+0x4a>
   24696:	bf00      	nop
   24698:	20001f7c 	.word	0x20001f7c
   2469c:	20001f80 	.word	0x20001f80
   246a0:	20001f6c 	.word	0x20001f6c
   246a4:	20001fec 	.word	0x20001fec
   246a8:	2000d0c8 	.word	0x2000d0c8

000246ac <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   246ac:	b510      	push	{r4, lr}
   246ae:	b086      	sub	sp, #24
	list->head = NULL;
   246b0:	4b0f      	ldr	r3, [pc, #60]	; (246f0 <net_mgmt_event_init+0x44>)
   246b2:	2400      	movs	r4, #0
   246b4:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   246b6:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   246b8:	4b0e      	ldr	r3, [pc, #56]	; (246f4 <net_mgmt_event_init+0x48>)
   246ba:	601c      	str	r4, [r3, #0]

	in_event = 0;
   246bc:	4b0e      	ldr	r3, [pc, #56]	; (246f8 <net_mgmt_event_init+0x4c>)
   246be:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   246c0:	4b0e      	ldr	r3, [pc, #56]	; (246fc <net_mgmt_event_init+0x50>)
   246c2:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   246c4:	2210      	movs	r2, #16
   246c6:	4621      	mov	r1, r4
   246c8:	480d      	ldr	r0, [pc, #52]	; (24700 <net_mgmt_event_init+0x54>)
   246ca:	f007 fcd7 	bl	2c07c <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   246ce:	9405      	str	r4, [sp, #20]
   246d0:	9404      	str	r4, [sp, #16]
   246d2:	f06f 0308 	mvn.w	r3, #8
   246d6:	9303      	str	r3, [sp, #12]
   246d8:	9402      	str	r4, [sp, #8]
   246da:	9401      	str	r4, [sp, #4]
   246dc:	9400      	str	r4, [sp, #0]
   246de:	4b09      	ldr	r3, [pc, #36]	; (24704 <net_mgmt_event_init+0x58>)
   246e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   246e4:	4908      	ldr	r1, [pc, #32]	; (24708 <net_mgmt_event_init+0x5c>)
   246e6:	4809      	ldr	r0, [pc, #36]	; (2470c <net_mgmt_event_init+0x60>)
   246e8:	f006 fc94 	bl	2b014 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   246ec:	b006      	add	sp, #24
   246ee:	bd10      	pop	{r4, pc}
   246f0:	20001f64 	.word	0x20001f64
   246f4:	20001f7c 	.word	0x20001f7c
   246f8:	20001f80 	.word	0x20001f80
   246fc:	20001fec 	.word	0x20001fec
   24700:	20001f6c 	.word	0x20001f6c
   24704:	000244d9 	.word	0x000244d9
   24708:	20009950 	.word	0x20009950
   2470c:	20001f84 	.word	0x20001f84

00024710 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   24710:	b5f0      	push	{r4, r5, r6, r7, lr}
   24712:	b085      	sub	sp, #20
   24714:	4605      	mov	r5, r0
   24716:	f8ad 2006 	strh.w	r2, [sp, #6]
   2471a:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   2471e:	f10d 020e 	add.w	r2, sp, #14
   24722:	f7fa fde5 	bl	1f2f0 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   24726:	4602      	mov	r2, r0
   24728:	b168      	cbz	r0, 24746 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   2472a:	b11a      	cbz	r2, 24734 <net_udp_insert_raw+0x24>
   2472c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   24730:	2b00      	cmp	r3, #0
   24732:	d15c      	bne.n	247ee <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   24734:	68ab      	ldr	r3, [r5, #8]
   24736:	429a      	cmp	r2, r3
   24738:	d00d      	beq.n	24756 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   2473a:	681c      	ldr	r4, [r3, #0]
   2473c:	b174      	cbz	r4, 2475c <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   2473e:	42a2      	cmp	r2, r4
   24740:	d00b      	beq.n	2475a <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   24742:	4623      	mov	r3, r4
   24744:	e7f9      	b.n	2473a <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   24746:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2474a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2474e:	4299      	cmp	r1, r3
   24750:	d1eb      	bne.n	2472a <net_udp_insert_raw+0x1a>
		return NULL;
   24752:	2000      	movs	r0, #0
   24754:	e049      	b.n	247ea <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   24756:	461c      	mov	r4, r3
   24758:	e000      	b.n	2475c <net_udp_insert_raw+0x4c>
				prev = tmp;
   2475a:	461c      	mov	r4, r3
	}

	if (!prev) {
   2475c:	2c00      	cmp	r4, #0
   2475e:	d048      	beq.n	247f2 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   24760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   24764:	4628      	mov	r0, r5
   24766:	f7fa faa1 	bl	1ecac <net_pkt_get_frag>
	if (!udp) {
   2476a:	4607      	mov	r7, r0
   2476c:	2800      	cmp	r0, #0
   2476e:	d042      	beq.n	247f6 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   24770:	f100 0608 	add.w	r6, r0, #8
   24774:	2202      	movs	r2, #2
   24776:	f10d 0106 	add.w	r1, sp, #6
   2477a:	4630      	mov	r0, r6
   2477c:	f7f7 fdcc 	bl	1c318 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   24780:	2202      	movs	r2, #2
   24782:	a901      	add	r1, sp, #4
   24784:	4630      	mov	r0, r6
   24786:	f7f7 fdc7 	bl	1c318 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   2478a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2478c:	2200      	movs	r2, #0
   2478e:	e002      	b.n	24796 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   24790:	8999      	ldrh	r1, [r3, #12]
   24792:	440a      	add	r2, r1
		buf = buf->frags;
   24794:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   24796:	2b00      	cmp	r3, #0
   24798:	d1fa      	bne.n	24790 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2479a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   2479e:	1a51      	subs	r1, r2, r1
   247a0:	b289      	uxth	r1, r1
   247a2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   247a6:	1a89      	subs	r1, r1, r2
   247a8:	b289      	uxth	r1, r1
   247aa:	3108      	adds	r1, #8
   247ac:	b289      	uxth	r1, r1
   247ae:	4630      	mov	r0, r6
   247b0:	f7f7 fdd2 	bl	1c358 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   247b4:	2100      	movs	r1, #0
   247b6:	4630      	mov	r0, r6
   247b8:	f7f7 fdce 	bl	1c358 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   247bc:	4639      	mov	r1, r7
   247be:	4620      	mov	r0, r4
   247c0:	f7f7 fd7e 	bl	1c2c0 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   247c4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   247c8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   247cc:	4419      	add	r1, r3
   247ce:	3108      	adds	r1, #8
   247d0:	f10d 020e 	add.w	r2, sp, #14
   247d4:	b289      	uxth	r1, r1
   247d6:	4628      	mov	r0, r5
   247d8:	f7fa fd8a 	bl	1f2f0 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   247dc:	b168      	cbz	r0, 247fa <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   247de:	6883      	ldr	r3, [r0, #8]
   247e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   247e4:	4413      	add	r3, r2
	pkt->appdata = data;
   247e6:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   247e8:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   247ea:	b005      	add	sp, #20
   247ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   247ee:	2000      	movs	r0, #0
   247f0:	e7fb      	b.n	247ea <net_udp_insert_raw+0xda>
	return NULL;
   247f2:	2000      	movs	r0, #0
   247f4:	e7f9      	b.n	247ea <net_udp_insert_raw+0xda>
   247f6:	2000      	movs	r0, #0
   247f8:	e7f7      	b.n	247ea <net_udp_insert_raw+0xda>
	return pkt;
   247fa:	4628      	mov	r0, r5
   247fc:	e7f5      	b.n	247ea <net_udp_insert_raw+0xda>

000247fe <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   247fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24802:	b086      	sub	sp, #24
   24804:	4606      	mov	r6, r0
   24806:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   24808:	2300      	movs	r3, #0
   2480a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2480e:	f7fa fda5 	bl	1f35c <net_pkt_udp_data>
   24812:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   24814:	2208      	movs	r2, #8
   24816:	4601      	mov	r1, r0
   24818:	4630      	mov	r0, r6
   2481a:	f7fb f95d 	bl	1fad8 <net_header_fits>
   2481e:	b170      	cbz	r0, 2483e <net_udp_set_chksum+0x40>
		return hdr;
   24820:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   24822:	b173      	cbz	r3, 24842 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   24824:	2300      	movs	r3, #0
   24826:	71a3      	strb	r3, [r4, #6]
   24828:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2482a:	2111      	movs	r1, #17
   2482c:	4630      	mov	r0, r6
   2482e:	f7fb f8fa 	bl	1fa26 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   24832:	43c0      	mvns	r0, r0
   24834:	80e0      	strh	r0, [r4, #6]

		return frag;
   24836:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   24838:	b006      	add	sp, #24
   2483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2483e:	2300      	movs	r3, #0
   24840:	e7ef      	b.n	24822 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   24842:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   24846:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2484a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   2484c:	3206      	adds	r2, #6
   2484e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   24852:	f8cd 8008 	str.w	r8, [sp, #8]
   24856:	f10d 0416 	add.w	r4, sp, #22
   2485a:	9401      	str	r4, [sp, #4]
   2485c:	2702      	movs	r7, #2
   2485e:	9700      	str	r7, [sp, #0]
   24860:	ab05      	add	r3, sp, #20
   24862:	b292      	uxth	r2, r2
   24864:	4629      	mov	r1, r5
   24866:	4630      	mov	r0, r6
   24868:	f7fa fc63 	bl	1f132 <net_pkt_write>
   2486c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2486e:	2111      	movs	r1, #17
   24870:	4630      	mov	r0, r6
   24872:	f7fb f8d8 	bl	1fa26 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   24876:	43c0      	mvns	r0, r0
   24878:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2487c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   24880:	3a02      	subs	r2, #2
   24882:	f8cd 8008 	str.w	r8, [sp, #8]
   24886:	9401      	str	r4, [sp, #4]
   24888:	9700      	str	r7, [sp, #0]
   2488a:	ab05      	add	r3, sp, #20
   2488c:	b292      	uxth	r2, r2
   2488e:	4629      	mov	r1, r5
   24890:	4630      	mov	r0, r6
   24892:	f7fa fc4e 	bl	1f132 <net_pkt_write>
	return frag;
   24896:	e7cf      	b.n	24838 <net_udp_set_chksum+0x3a>

00024898 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   24898:	b570      	push	{r4, r5, r6, lr}
   2489a:	b084      	sub	sp, #16
   2489c:	4605      	mov	r5, r0
   2489e:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   248a0:	f7fa fd5c 	bl	1f35c <net_pkt_udp_data>
   248a4:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   248a6:	2208      	movs	r2, #8
   248a8:	4601      	mov	r1, r0
   248aa:	4628      	mov	r0, r5
   248ac:	f7fb f914 	bl	1fad8 <net_header_fits>
   248b0:	b120      	cbz	r0, 248bc <net_udp_get_chksum+0x24>
		return hdr;
   248b2:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   248b4:	b123      	cbz	r3, 248c0 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   248b6:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   248b8:	b004      	add	sp, #16
   248ba:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   248bc:	2300      	movs	r3, #0
   248be:	e7f9      	b.n	248b4 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   248c0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   248c4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   248c8:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   248ca:	3106      	adds	r1, #6
   248cc:	f10d 030e 	add.w	r3, sp, #14
   248d0:	9300      	str	r3, [sp, #0]
   248d2:	2302      	movs	r3, #2
   248d4:	aa03      	add	r2, sp, #12
   248d6:	b289      	uxth	r1, r1
   248d8:	4630      	mov	r0, r6
   248da:	f7fa fbb8 	bl	1f04e <net_frag_read>
	return chksum;
   248de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   248e2:	e7e9      	b.n	248b8 <net_udp_get_chksum+0x20>

000248e4 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   248e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   248e6:	b085      	sub	sp, #20
   248e8:	4605      	mov	r5, r0
   248ea:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   248ec:	f7fa fd36 	bl	1f35c <net_pkt_udp_data>
   248f0:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   248f2:	2208      	movs	r2, #8
   248f4:	4601      	mov	r1, r0
   248f6:	4628      	mov	r0, r5
   248f8:	f7fb f8ee 	bl	1fad8 <net_header_fits>
   248fc:	b120      	cbz	r0, 24908 <net_udp_get_hdr+0x24>
		return hdr;
   248fe:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   24900:	b126      	cbz	r6, 2490c <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   24902:	4620      	mov	r0, r4
   24904:	b005      	add	sp, #20
   24906:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   24908:	2600      	movs	r6, #0
   2490a:	e7f9      	b.n	24900 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2490c:	68a8      	ldr	r0, [r5, #8]
   2490e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   24912:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24916:	9700      	str	r7, [sp, #0]
   24918:	2302      	movs	r3, #2
   2491a:	f10d 020e 	add.w	r2, sp, #14
   2491e:	4421      	add	r1, r4
   24920:	f7fa fb95 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   24924:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   24928:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2492a:	9300      	str	r3, [sp, #0]
   2492c:	2302      	movs	r3, #2
   2492e:	f10d 020e 	add.w	r2, sp, #14
   24932:	f7fa fb8c 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   24936:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   2493a:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2493c:	9300      	str	r3, [sp, #0]
   2493e:	2302      	movs	r3, #2
   24940:	f10d 020e 	add.w	r2, sp, #14
   24944:	f7fa fb83 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   24948:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2494c:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2494e:	9300      	str	r3, [sp, #0]
   24950:	2302      	movs	r3, #2
   24952:	f10d 020e 	add.w	r2, sp, #14
   24956:	f7fa fb7a 	bl	1f04e <net_frag_read>
	if (!frag) {
   2495a:	b108      	cbz	r0, 24960 <net_udp_get_hdr+0x7c>
	return hdr;
   2495c:	463c      	mov	r4, r7
   2495e:	e7d0      	b.n	24902 <net_udp_get_hdr+0x1e>
		return NULL;
   24960:	4634      	mov	r4, r6
   24962:	e7ce      	b.n	24902 <net_udp_get_hdr+0x1e>

00024964 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   24964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24968:	b086      	sub	sp, #24
   2496a:	4606      	mov	r6, r0
   2496c:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2496e:	2208      	movs	r2, #8
   24970:	f7fb f8b2 	bl	1fad8 <net_header_fits>
   24974:	b128      	cbz	r0, 24982 <net_udp_set_hdr+0x1e>
		return hdr;
   24976:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   24978:	b12d      	cbz	r5, 24986 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2497a:	4620      	mov	r0, r4
   2497c:	b006      	add	sp, #24
   2497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   24982:	2500      	movs	r5, #0
   24984:	e7f8      	b.n	24978 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   24986:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2498a:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2498e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   24992:	f8cd 8008 	str.w	r8, [sp, #8]
   24996:	9401      	str	r4, [sp, #4]
   24998:	2702      	movs	r7, #2
   2499a:	9700      	str	r7, [sp, #0]
   2499c:	f10d 0316 	add.w	r3, sp, #22
   249a0:	440a      	add	r2, r1
   249a2:	68b1      	ldr	r1, [r6, #8]
   249a4:	4630      	mov	r0, r6
   249a6:	f7fa fbc4 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   249aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   249ae:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   249b0:	f8cd 8008 	str.w	r8, [sp, #8]
   249b4:	9301      	str	r3, [sp, #4]
   249b6:	9700      	str	r7, [sp, #0]
   249b8:	f10d 0316 	add.w	r3, sp, #22
   249bc:	4601      	mov	r1, r0
   249be:	4630      	mov	r0, r6
   249c0:	f7fa fbb7 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   249c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   249c8:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   249ca:	f8cd 8008 	str.w	r8, [sp, #8]
   249ce:	9301      	str	r3, [sp, #4]
   249d0:	9700      	str	r7, [sp, #0]
   249d2:	f10d 0316 	add.w	r3, sp, #22
   249d6:	4601      	mov	r1, r0
   249d8:	4630      	mov	r0, r6
   249da:	f7fa fbaa 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   249de:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   249e2:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   249e4:	f8cd 8008 	str.w	r8, [sp, #8]
   249e8:	9301      	str	r3, [sp, #4]
   249ea:	9700      	str	r7, [sp, #0]
   249ec:	f10d 0316 	add.w	r3, sp, #22
   249f0:	4601      	mov	r1, r0
   249f2:	4630      	mov	r0, r6
   249f4:	f7fa fb9d 	bl	1f132 <net_pkt_write>
	if (!frag) {
   249f8:	2800      	cmp	r0, #0
   249fa:	d1be      	bne.n	2497a <net_udp_set_hdr+0x16>
		return NULL;
   249fc:	462c      	mov	r4, r5
   249fe:	e7bc      	b.n	2497a <net_udp_set_hdr+0x16>

00024a00 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   24a00:	b510      	push	{r4, lr}
   24a02:	460c      	mov	r4, r1
   24a04:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   24a06:	8942      	ldrh	r2, [r0, #10]
   24a08:	4620      	mov	r0, r4
   24a0a:	f7ff fe81 	bl	24710 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   24a0e:	bd10      	pop	{r4, pc}

00024a10 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   24a10:	4770      	bx	lr

00024a12 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   24a12:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   24a14:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   24a16:	6b25      	ldr	r5, [r4, #48]	; 0x30
   24a18:	b12d      	cbz	r5, 24a26 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   24a1a:	6843      	ldr	r3, [r0, #4]
   24a1c:	f06f 0267 	mvn.w	r2, #103	; 0x67
   24a20:	2100      	movs	r1, #0
   24a22:	4620      	mov	r0, r4
   24a24:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   24a26:	4620      	mov	r0, r4
   24a28:	f7f9 fba8 	bl	1e17c <net_context_unref>
   24a2c:	bd38      	pop	{r3, r4, r5, pc}

00024a2e <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   24a2e:	b510      	push	{r4, lr}
   24a30:	4604      	mov	r4, r0
	return (!list->head);
   24a32:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   24a36:	b17b      	cbz	r3, 24a58 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   24a38:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   24a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   24a40:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   24a44:	f36f 0304 	bfc	r3, #0, #5
   24a48:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   24a4c:	2200      	movs	r2, #0
   24a4e:	21c8      	movs	r1, #200	; 0xc8
   24a50:	3058      	adds	r0, #88	; 0x58
   24a52:	f006 fc69 	bl	2b328 <_impl_k_timer_start>
   24a56:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   24a58:	3058      	adds	r0, #88	; 0x58
   24a5a:	f006 fd1d 	bl	2b498 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   24a5e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   24a62:	f3c3 1247 	ubfx	r2, r3, #5, #8
   24a66:	f022 0210 	bic.w	r2, r2, #16
   24a6a:	f362 134c 	bfi	r3, r2, #5, #8
   24a6e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   24a72:	bd10      	pop	{r4, pc}

00024a74 <ack_timer_cancel>:
{
   24a74:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   24a76:	3008      	adds	r0, #8
   24a78:	f006 fe3c 	bl	2b6f4 <k_delayed_work_cancel>
   24a7c:	bd08      	pop	{r3, pc}

00024a7e <fin_timer_cancel>:
{
   24a7e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   24a80:	3030      	adds	r0, #48	; 0x30
   24a82:	f006 fe37 	bl	2b6f4 <k_delayed_work_cancel>
   24a86:	bd08      	pop	{r3, pc}

00024a88 <finalize_segment>:
{
   24a88:	b508      	push	{r3, lr}
	return pkt->family;
   24a8a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   24a8e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   24a92:	2b0a      	cmp	r3, #10
   24a94:	d001      	beq.n	24a9a <finalize_segment+0x12>
	return 0;
   24a96:	2000      	movs	r0, #0
}
   24a98:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   24a9a:	f7fc fe17 	bl	216cc <net_ipv6_finalize>
   24a9e:	bd08      	pop	{r3, pc}

00024aa0 <prepare_segment>:
{
   24aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24aa4:	b085      	sub	sp, #20
   24aa6:	4606      	mov	r6, r0
   24aa8:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   24aaa:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   24aac:	b192      	cbz	r2, 24ad4 <prepare_segment+0x34>
   24aae:	4614      	mov	r4, r2
		tail = pkt->frags;
   24ab0:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   24ab4:	2300      	movs	r3, #0
   24ab6:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   24ab8:	469a      	mov	sl, r3
   24aba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24abe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   24ac2:	2b0a      	cmp	r3, #10
   24ac4:	d013      	beq.n	24aee <prepare_segment+0x4e>
		if (pkt_allocated) {
   24ac6:	f1ba 0f00 	cmp.w	sl, #0
   24aca:	d174      	bne.n	24bb6 <prepare_segment+0x116>
		return NULL;
   24acc:	2000      	movs	r0, #0
}
   24ace:	b005      	add	sp, #20
   24ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   24ad4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   24ad8:	4638      	mov	r0, r7
   24ada:	f7fa f907 	bl	1ecec <net_pkt_get_tx>
		if (!pkt) {
   24ade:	4604      	mov	r4, r0
   24ae0:	2800      	cmp	r0, #0
   24ae2:	d0f4      	beq.n	24ace <prepare_segment+0x2e>
		pkt_allocated = true;
   24ae4:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   24ae8:	f04f 0800 	mov.w	r8, #0
   24aec:	e7e5      	b.n	24aba <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   24aee:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   24af0:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   24af2:	3304      	adds	r3, #4
   24af4:	6852      	ldr	r2, [r2, #4]
   24af6:	4621      	mov	r1, r4
   24af8:	6830      	ldr	r0, [r6, #0]
   24afa:	f7fc fb8b 	bl	21214 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   24afe:	696b      	ldr	r3, [r5, #20]
   24b00:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   24b04:	897b      	ldrh	r3, [r7, #10]
   24b06:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   24b08:	68a3      	ldr	r3, [r4, #8]
   24b0a:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   24b0c:	2206      	movs	r2, #6
   24b0e:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   24b10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   24b14:	4638      	mov	r0, r7
   24b16:	f7fa f8fb 	bl	1ed10 <net_pkt_get_data>
	if (!header) {
   24b1a:	9001      	str	r0, [sp, #4]
   24b1c:	2800      	cmp	r0, #0
   24b1e:	d04f      	beq.n	24bc0 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   24b20:	9e01      	ldr	r6, [sp, #4]
   24b22:	4631      	mov	r1, r6
   24b24:	4620      	mov	r0, r4
   24b26:	f7fa f93e 	bl	1eda6 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   24b2a:	2114      	movs	r1, #20
   24b2c:	f106 0008 	add.w	r0, r6, #8
   24b30:	f7f7 fbec 	bl	1c30c <net_buf_simple_add>
   24b34:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   24b36:	68eb      	ldr	r3, [r5, #12]
   24b38:	9303      	str	r3, [sp, #12]
   24b3a:	2b00      	cmp	r3, #0
   24b3c:	d05d      	beq.n	24bfa <prepare_segment+0x15a>
   24b3e:	f895 900b 	ldrb.w	r9, [r5, #11]
   24b42:	f1b9 0f00 	cmp.w	r9, #0
   24b46:	d145      	bne.n	24bd4 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   24b48:	f109 0914 	add.w	r9, r9, #20
   24b4c:	fa5f f989 	uxtb.w	r9, r9
   24b50:	ea4f 0989 	mov.w	r9, r9, lsl #2
   24b54:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   24b58:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   24b5c:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   24b5e:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   24b62:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   24b64:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   24b66:	0a11      	lsrs	r1, r2, #8
   24b68:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   24b6a:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   24b6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   24b70:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   24b72:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   24b74:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   24b76:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   24b78:	0a11      	lsrs	r1, r2, #8
   24b7a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   24b7c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   24b7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   24b82:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   24b84:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   24b86:	7aab      	ldrb	r3, [r5, #10]
   24b88:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   24b8a:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   24b8c:	0a1a      	lsrs	r2, r3, #8
   24b8e:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   24b90:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   24b92:	2300      	movs	r3, #0
   24b94:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   24b96:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   24b98:	f1b8 0f00 	cmp.w	r8, #0
   24b9c:	d003      	beq.n	24ba6 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   24b9e:	4641      	mov	r1, r8
   24ba0:	4620      	mov	r0, r4
   24ba2:	f7fa f900 	bl	1eda6 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   24ba6:	4621      	mov	r1, r4
   24ba8:	4638      	mov	r0, r7
   24baa:	f7ff ff6d 	bl	24a88 <finalize_segment>
   24bae:	2800      	cmp	r0, #0
   24bb0:	db26      	blt.n	24c00 <prepare_segment+0x160>
	return pkt;
   24bb2:	4620      	mov	r0, r4
   24bb4:	e78b      	b.n	24ace <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   24bb6:	4620      	mov	r0, r4
   24bb8:	f7fa f8cb 	bl	1ed52 <net_pkt_unref>
		return NULL;
   24bbc:	2000      	movs	r0, #0
   24bbe:	e786      	b.n	24ace <prepare_segment+0x2e>
		if (pkt_allocated) {
   24bc0:	f1ba 0f00 	cmp.w	sl, #0
   24bc4:	d101      	bne.n	24bca <prepare_segment+0x12a>
		return NULL;
   24bc6:	2000      	movs	r0, #0
   24bc8:	e781      	b.n	24ace <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   24bca:	4620      	mov	r0, r4
   24bcc:	f7fa f8c1 	bl	1ed52 <net_pkt_unref>
		return NULL;
   24bd0:	2000      	movs	r0, #0
   24bd2:	e77c      	b.n	24ace <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   24bd4:	4649      	mov	r1, r9
   24bd6:	9801      	ldr	r0, [sp, #4]
   24bd8:	3008      	adds	r0, #8
   24bda:	f7f7 fb97 	bl	1c30c <net_buf_simple_add>
   24bde:	464a      	mov	r2, r9
   24be0:	9903      	ldr	r1, [sp, #12]
   24be2:	f7db fb6d 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   24be6:	f019 0f03 	tst.w	r9, #3
   24bea:	d0ad      	beq.n	24b48 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   24bec:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   24bf0:	f109 0904 	add.w	r9, r9, #4
   24bf4:	fa5f f989 	uxtb.w	r9, r9
   24bf8:	e7a6      	b.n	24b48 <prepare_segment+0xa8>
	u8_t optlen = 0;
   24bfa:	f04f 0900 	mov.w	r9, #0
   24bfe:	e7a3      	b.n	24b48 <prepare_segment+0xa8>
		if (pkt_allocated) {
   24c00:	f1ba 0f00 	cmp.w	sl, #0
   24c04:	d101      	bne.n	24c0a <prepare_segment+0x16a>
		return NULL;
   24c06:	2000      	movs	r0, #0
   24c08:	e761      	b.n	24ace <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   24c0a:	4620      	mov	r0, r4
   24c0c:	f7fa f8a1 	bl	1ed52 <net_pkt_unref>
		return NULL;
   24c10:	2000      	movs	r0, #0
   24c12:	e75c      	b.n	24ace <prepare_segment+0x2e>

00024c14 <net_tcp_alloc>:
{
   24c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   24c16:	f04f 0320 	mov.w	r3, #32
   24c1a:	f3ef 8411 	mrs	r4, BASEPRI
   24c1e:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   24c22:	2300      	movs	r3, #0
   24c24:	2b05      	cmp	r3, #5
   24c26:	dc18      	bgt.n	24c5a <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   24c28:	22c8      	movs	r2, #200	; 0xc8
   24c2a:	492b      	ldr	r1, [pc, #172]	; (24cd8 <net_tcp_alloc+0xc4>)
   24c2c:	fb02 1203 	mla	r2, r2, r3, r1
   24c30:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   24c34:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   24c38:	f012 0f01 	tst.w	r2, #1
   24c3c:	d001      	beq.n	24c42 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   24c3e:	3301      	adds	r3, #1
   24c40:	e7f0      	b.n	24c24 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   24c42:	21c8      	movs	r1, #200	; 0xc8
   24c44:	4d24      	ldr	r5, [pc, #144]	; (24cd8 <net_tcp_alloc+0xc4>)
   24c46:	fb01 5103 	mla	r1, r1, r3, r5
   24c4a:	f042 0201 	orr.w	r2, r2, #1
   24c4e:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   24c52:	f362 154c 	bfi	r5, r2, #5, #8
   24c56:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   24c5a:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   24c5e:	2b05      	cmp	r3, #5
   24c60:	dc37      	bgt.n	24cd2 <net_tcp_alloc+0xbe>
   24c62:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   24c64:	4e1c      	ldr	r6, [pc, #112]	; (24cd8 <net_tcp_alloc+0xc4>)
   24c66:	22c8      	movs	r2, #200	; 0xc8
   24c68:	fb02 f403 	mul.w	r4, r2, r3
   24c6c:	1935      	adds	r5, r6, r4
   24c6e:	2100      	movs	r1, #0
   24c70:	4628      	mov	r0, r5
   24c72:	f007 fa03 	bl	2c07c <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   24c76:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   24c7a:	2101      	movs	r1, #1
   24c7c:	f361 124c 	bfi	r2, r1, #5, #8
   24c80:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   24c84:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   24c88:	f36f 3250 	bfc	r2, #13, #4
   24c8c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   24c90:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   24c92:	f7dd fae3 	bl	225c <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   24c96:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   24c9a:	3001      	adds	r0, #1
   24c9c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   24ca0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   24ca4:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   24ca8:	2700      	movs	r7, #0
   24caa:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   24cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24cb2:	463a      	mov	r2, r7
   24cb4:	4909      	ldr	r1, [pc, #36]	; (24cdc <net_tcp_alloc+0xc8>)
   24cb6:	4430      	add	r0, r6
   24cb8:	f006 fb22 	bl	2b300 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   24cbc:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   24cc0:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   24cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24cc6:	4639      	mov	r1, r7
   24cc8:	3004      	adds	r0, #4
   24cca:	f005 ff1b 	bl	2ab04 <_impl_k_sem_init>
}
   24cce:	4628      	mov	r0, r5
   24cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   24cd2:	2500      	movs	r5, #0
   24cd4:	e7fb      	b.n	24cce <net_tcp_alloc+0xba>
   24cd6:	bf00      	nop
   24cd8:	20001ff0 	.word	0x20001ff0
   24cdc:	00025651 	.word	0x00025651

00024ce0 <net_tcp_get_recv_wnd>:
}
   24ce0:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   24ce4:	4770      	bx	lr

00024ce6 <net_tcp_get_recv_mss>:
{
   24ce6:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   24ce8:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   24cea:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   24cee:	f013 0f10 	tst.w	r3, #16
   24cf2:	d006      	beq.n	24d02 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   24cf4:	230a      	movs	r3, #10
	if (family == AF_INET) {
   24cf6:	2b02      	cmp	r3, #2
   24cf8:	d019      	beq.n	24d2e <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   24cfa:	2b0a      	cmp	r3, #10
   24cfc:	d003      	beq.n	24d06 <net_tcp_get_recv_mss+0x20>
	return 0;
   24cfe:	2000      	movs	r0, #0
}
   24d00:	bd08      	pop	{r3, pc}
	return AF_INET;
   24d02:	2302      	movs	r3, #2
   24d04:	e7f7      	b.n	24cf6 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   24d06:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   24d0a:	f7f8 fddb 	bl	1d8c4 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   24d0e:	b120      	cbz	r0, 24d1a <net_tcp_get_recv_mss+0x34>
   24d10:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   24d12:	283b      	cmp	r0, #59	; 0x3b
   24d14:	d903      	bls.n	24d1e <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   24d16:	383c      	subs	r0, #60	; 0x3c
   24d18:	e002      	b.n	24d20 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   24d1a:	2000      	movs	r0, #0
   24d1c:	e000      	b.n	24d20 <net_tcp_get_recv_mss+0x3a>
   24d1e:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   24d20:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   24d24:	da01      	bge.n	24d2a <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   24d26:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   24d2a:	b280      	uxth	r0, r0
   24d2c:	bd08      	pop	{r3, pc}
		return 0;
   24d2e:	2000      	movs	r0, #0
   24d30:	bd08      	pop	{r3, pc}

00024d32 <net_tcp_set_syn_opt>:
{
   24d32:	b570      	push	{r4, r5, r6, lr}
   24d34:	460e      	mov	r6, r1
   24d36:	4614      	mov	r4, r2
	*optionlen = 0;
   24d38:	2300      	movs	r3, #0
   24d3a:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   24d3c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   24d40:	f413 6f80 	tst.w	r3, #1024	; 0x400
   24d44:	d00f      	beq.n	24d66 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   24d46:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   24d48:	7822      	ldrb	r2, [r4, #0]
   24d4a:	0203      	lsls	r3, r0, #8
   24d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   24d50:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   24d54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   24d58:	f040 0002 	orr.w	r0, r0, #2
   24d5c:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   24d5e:	7823      	ldrb	r3, [r4, #0]
   24d60:	3304      	adds	r3, #4
   24d62:	7023      	strb	r3, [r4, #0]
   24d64:	bd70      	pop	{r4, r5, r6, pc}
   24d66:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   24d68:	f7ff ffbd 	bl	24ce6 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   24d6c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   24d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   24d74:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   24d78:	e7e6      	b.n	24d48 <net_tcp_set_syn_opt+0x16>

00024d7a <net_tcp_prepare_reset>:
{
   24d7a:	b510      	push	{r4, lr}
   24d7c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   24d7e:	2300      	movs	r3, #0
   24d80:	9300      	str	r3, [sp, #0]
   24d82:	9301      	str	r3, [sp, #4]
   24d84:	9302      	str	r3, [sp, #8]
   24d86:	9303      	str	r3, [sp, #12]
   24d88:	9304      	str	r3, [sp, #16]
   24d8a:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   24d8c:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   24d8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24d92:	f013 0f06 	tst.w	r3, #6
   24d96:	d01a      	beq.n	24dce <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   24d98:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   24d9c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   24da0:	2b02      	cmp	r3, #2
   24da2:	d014      	beq.n	24dce <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   24da4:	2b09      	cmp	r3, #9
   24da6:	d012      	beq.n	24dce <net_tcp_prepare_reset+0x54>
   24da8:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   24daa:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   24dae:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   24db0:	2314      	movs	r3, #20
   24db2:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   24db6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   24dba:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   24dbc:	6803      	ldr	r3, [r0, #0]
   24dbe:	3308      	adds	r3, #8
   24dc0:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   24dc2:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   24dc4:	2200      	movs	r2, #0
   24dc6:	4669      	mov	r1, sp
   24dc8:	f7ff fe6a 	bl	24aa0 <prepare_segment>
   24dcc:	6020      	str	r0, [r4, #0]
}
   24dce:	2000      	movs	r0, #0
   24dd0:	b006      	add	sp, #24
   24dd2:	bd10      	pop	{r4, pc}

00024dd4 <net_tcp_state_str>:
}
   24dd4:	4800      	ldr	r0, [pc, #0]	; (24dd8 <net_tcp_state_str+0x4>)
   24dd6:	4770      	bx	lr
   24dd8:	00030afc 	.word	0x00030afc

00024ddc <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   24ddc:	4770      	bx	lr

00024dde <net_tcp_change_state>:
   24dde:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   24de2:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   24de6:	428b      	cmp	r3, r1
   24de8:	d022      	beq.n	24e30 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   24dea:	f001 010f 	and.w	r1, r1, #15
   24dee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   24df2:	f361 3350 	bfi	r3, r1, #13, #4
   24df6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   24dfa:	b9c9      	cbnz	r1, 24e30 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   24dfc:	6803      	ldr	r3, [r0, #0]
   24dfe:	b1bb      	cbz	r3, 24e30 <net_tcp_change_state+0x52>
{
   24e00:	b530      	push	{r4, r5, lr}
   24e02:	b083      	sub	sp, #12
   24e04:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   24e06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   24e08:	b120      	cbz	r0, 24e14 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   24e0a:	f001 fcef 	bl	267ec <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   24e0e:	6823      	ldr	r3, [r4, #0]
   24e10:	2200      	movs	r2, #0
   24e12:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   24e14:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   24e18:	b145      	cbz	r5, 24e2c <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   24e1a:	6820      	ldr	r0, [r4, #0]
   24e1c:	6803      	ldr	r3, [r0, #0]
   24e1e:	9300      	str	r3, [sp, #0]
   24e20:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   24e24:	2218      	movs	r2, #24
   24e26:	f100 0114 	add.w	r1, r0, #20
   24e2a:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   24e2c:	b003      	add	sp, #12
   24e2e:	bd30      	pop	{r4, r5, pc}
   24e30:	4770      	bx	lr
	...

00024e34 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   24e34:	2800      	cmp	r0, #0
   24e36:	d064      	beq.n	24f02 <net_tcp_release+0xce>
{
   24e38:	b538      	push	{r3, r4, r5, lr}
   24e3a:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   24e3c:	4b35      	ldr	r3, [pc, #212]	; (24f14 <net_tcp_release+0xe0>)
   24e3e:	4298      	cmp	r0, r3
   24e40:	d362      	bcc.n	24f08 <net_tcp_release+0xd4>
   24e42:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   24e46:	4298      	cmp	r0, r3
   24e48:	d261      	bcs.n	24f0e <net_tcp_release+0xda>
	return list->head;
   24e4a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   24e4e:	b140      	cbz	r0, 24e62 <net_tcp_release+0x2e>
   24e50:	3834      	subs	r0, #52	; 0x34
   24e52:	b140      	cbz	r0, 24e66 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24e54:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   24e58:	d000      	beq.n	24e5c <net_tcp_release+0x28>
	return node->next;
   24e5a:	6b44      	ldr	r4, [r0, #52]	; 0x34
   24e5c:	b12c      	cbz	r4, 24e6a <net_tcp_release+0x36>
   24e5e:	3c34      	subs	r4, #52	; 0x34
   24e60:	e00d      	b.n	24e7e <net_tcp_release+0x4a>
   24e62:	2000      	movs	r0, #0
   24e64:	e7f5      	b.n	24e52 <net_tcp_release+0x1e>
   24e66:	4604      	mov	r4, r0
   24e68:	e009      	b.n	24e7e <net_tcp_release+0x4a>
   24e6a:	2400      	movs	r4, #0
   24e6c:	e007      	b.n	24e7e <net_tcp_release+0x4a>
			list->tail = list->head;
   24e6e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   24e72:	e00e      	b.n	24e92 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24e74:	461a      	mov	r2, r3
   24e76:	e015      	b.n	24ea4 <net_tcp_release+0x70>
   24e78:	3b34      	subs	r3, #52	; 0x34
   24e7a:	4620      	mov	r0, r4
   24e7c:	461c      	mov	r4, r3
   24e7e:	b1d0      	cbz	r0, 24eb6 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   24e80:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   24e84:	6b42      	ldr	r2, [r0, #52]	; 0x34
   24e86:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   24e8a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   24e8e:	428b      	cmp	r3, r1
   24e90:	d0ed      	beq.n	24e6e <net_tcp_release+0x3a>
	node->next = NULL;
   24e92:	2300      	movs	r3, #0
   24e94:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   24e96:	f7f9 ff5c 	bl	1ed52 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   24e9a:	b144      	cbz	r4, 24eae <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24e9c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24ea0:	d0e8      	beq.n	24e74 <net_tcp_release+0x40>
	return node->next;
   24ea2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   24ea4:	b12a      	cbz	r2, 24eb2 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24ea6:	2b00      	cmp	r3, #0
   24ea8:	d0e6      	beq.n	24e78 <net_tcp_release+0x44>
	return node->next;
   24eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   24eac:	e7e4      	b.n	24e78 <net_tcp_release+0x44>
   24eae:	4623      	mov	r3, r4
   24eb0:	e7e3      	b.n	24e7a <net_tcp_release+0x46>
   24eb2:	2300      	movs	r3, #0
   24eb4:	e7e1      	b.n	24e7a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   24eb6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   24eba:	f006 faed 	bl	2b498 <_impl_k_timer_stop>
	sem->count = 0;
   24ebe:	2400      	movs	r4, #0
   24ec0:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   24ec4:	4628      	mov	r0, r5
   24ec6:	f7ff fdd5 	bl	24a74 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   24eca:	4628      	mov	r0, r5
   24ecc:	f7ff fdd7 	bl	24a7e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   24ed0:	4621      	mov	r1, r4
   24ed2:	4628      	mov	r0, r5
   24ed4:	f7ff ff83 	bl	24dde <net_tcp_change_state>
	tcp->context = NULL;
   24ed8:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   24eda:	f04f 0320 	mov.w	r3, #32
   24ede:	f3ef 8111 	mrs	r1, BASEPRI
   24ee2:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   24ee6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   24eea:	f3c3 1247 	ubfx	r2, r3, #5, #8
   24eee:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   24ef2:	f362 134c 	bfi	r3, r2, #5, #8
   24ef6:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   24efa:	f381 8811 	msr	BASEPRI, r1
	return 0;
   24efe:	4620      	mov	r0, r4
   24f00:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24f02:	f06f 0015 	mvn.w	r0, #21
   24f06:	4770      	bx	lr
   24f08:	f06f 0015 	mvn.w	r0, #21
   24f0c:	bd38      	pop	{r3, r4, r5, pc}
   24f0e:	f06f 0015 	mvn.w	r0, #21
}
   24f12:	bd38      	pop	{r3, r4, r5, pc}
   24f14:	20001ff0 	.word	0x20001ff0

00024f18 <net_tcp_prepare_segment>:
{
   24f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24f1c:	b086      	sub	sp, #24
   24f1e:	4604      	mov	r4, r0
   24f20:	460d      	mov	r5, r1
   24f22:	4692      	mov	sl, r2
   24f24:	4699      	mov	r9, r3
   24f26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   24f28:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   24f2c:	2300      	movs	r3, #0
   24f2e:	9300      	str	r3, [sp, #0]
   24f30:	9301      	str	r3, [sp, #4]
   24f32:	9302      	str	r3, [sp, #8]
   24f34:	9303      	str	r3, [sp, #12]
   24f36:	9304      	str	r3, [sp, #16]
   24f38:	9305      	str	r3, [sp, #20]
	if (!local) {
   24f3a:	2f00      	cmp	r7, #0
   24f3c:	d050      	beq.n	24fe0 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   24f3e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   24f42:	f015 0f10 	tst.w	r5, #16
   24f46:	d009      	beq.n	24f5c <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   24f48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24f4c:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   24f50:	2b07      	cmp	r3, #7
   24f52:	d048      	beq.n	24fe6 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   24f54:	2b08      	cmp	r3, #8
   24f56:	d055      	beq.n	25004 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   24f58:	2b05      	cmp	r3, #5
   24f5a:	d058      	beq.n	2500e <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   24f5c:	f015 0f01 	tst.w	r5, #1
   24f60:	d010      	beq.n	24f84 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   24f62:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   24f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24f6a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   24f6e:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   24f72:	3602      	adds	r6, #2
   24f74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24f78:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   24f7c:	2b04      	cmp	r3, #4
   24f7e:	d053      	beq.n	25028 <net_tcp_prepare_segment+0x110>
   24f80:	2b03      	cmp	r3, #3
   24f82:	d051      	beq.n	25028 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   24f84:	f015 0f02 	tst.w	r5, #2
   24f88:	d000      	beq.n	24f8c <net_tcp_prepare_segment+0x74>
		seq++;
   24f8a:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   24f8c:	4620      	mov	r0, r4
   24f8e:	f7ff fea7 	bl	24ce0 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   24f92:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   24f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24f96:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   24f98:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24f9c:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   24f9e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   24fa2:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   24fa4:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   24fa8:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   24fac:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   24fb0:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   24fb4:	f8d8 2000 	ldr.w	r2, [r8]
   24fb8:	4669      	mov	r1, sp
   24fba:	4620      	mov	r0, r4
   24fbc:	f7ff fd70 	bl	24aa0 <prepare_segment>
   24fc0:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   24fc4:	b3a8      	cbz	r0, 25032 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   24fc6:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   24fca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   24fce:	1af3      	subs	r3, r6, r3
   24fd0:	2b00      	cmp	r3, #0
   24fd2:	dd31      	ble.n	25038 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   24fd4:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   24fd8:	2000      	movs	r0, #0
}
   24fda:	b006      	add	sp, #24
   24fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   24fe0:	6807      	ldr	r7, [r0, #0]
   24fe2:	3708      	adds	r7, #8
   24fe4:	e7ab      	b.n	24f3e <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   24fe6:	f015 0f01 	tst.w	r5, #1
   24fea:	d006      	beq.n	24ffa <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   24fec:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24ff0:	2109      	movs	r1, #9
   24ff2:	4620      	mov	r0, r4
   24ff4:	f7ff fef3 	bl	24dde <net_tcp_change_state>
   24ff8:	e7b0      	b.n	24f5c <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   24ffa:	210a      	movs	r1, #10
   24ffc:	4620      	mov	r0, r4
   24ffe:	f7ff feee 	bl	24dde <net_tcp_change_state>
   25002:	e7ab      	b.n	24f5c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   25004:	2109      	movs	r1, #9
   25006:	4620      	mov	r0, r4
   25008:	f7ff fee9 	bl	24dde <net_tcp_change_state>
   2500c:	e7a6      	b.n	24f5c <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   2500e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   25012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   25016:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   2501a:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   2501e:	2106      	movs	r1, #6
   25020:	4620      	mov	r0, r4
   25022:	f7ff fedc 	bl	24dde <net_tcp_change_state>
   25026:	e799      	b.n	24f5c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   25028:	2107      	movs	r1, #7
   2502a:	4620      	mov	r0, r4
   2502c:	f7ff fed7 	bl	24dde <net_tcp_change_state>
   25030:	e7a8      	b.n	24f84 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   25032:	f06f 0015 	mvn.w	r0, #21
   25036:	e7d0      	b.n	24fda <net_tcp_prepare_segment+0xc2>
	return 0;
   25038:	2000      	movs	r0, #0
   2503a:	e7ce      	b.n	24fda <net_tcp_prepare_segment+0xc2>

0002503c <net_tcp_prepare_ack>:
{
   2503c:	b570      	push	{r4, r5, r6, lr}
   2503e:	b088      	sub	sp, #32
   25040:	4604      	mov	r4, r0
   25042:	460d      	mov	r5, r1
   25044:	4616      	mov	r6, r2
   25046:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2504a:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   2504e:	2b03      	cmp	r3, #3
   25050:	d011      	beq.n	25076 <net_tcp_prepare_ack+0x3a>
   25052:	d327      	bcc.n	250a4 <net_tcp_prepare_ack+0x68>
   25054:	3b06      	subs	r3, #6
   25056:	2b01      	cmp	r3, #1
   25058:	d824      	bhi.n	250a4 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   2505a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2505e:	3b01      	subs	r3, #1
   25060:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   25064:	9202      	str	r2, [sp, #8]
   25066:	9101      	str	r1, [sp, #4]
   25068:	2200      	movs	r2, #0
   2506a:	9200      	str	r2, [sp, #0]
   2506c:	4613      	mov	r3, r2
   2506e:	2111      	movs	r1, #17
   25070:	f7ff ff52 	bl	24f18 <net_tcp_prepare_segment>
   25074:	e014      	b.n	250a0 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   25076:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2507a:	3b01      	subs	r3, #1
   2507c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   25080:	f10d 0217 	add.w	r2, sp, #23
   25084:	a906      	add	r1, sp, #24
   25086:	f7ff fe54 	bl	24d32 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2508a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2508e:	9602      	str	r6, [sp, #8]
   25090:	9501      	str	r5, [sp, #4]
   25092:	2200      	movs	r2, #0
   25094:	9200      	str	r2, [sp, #0]
   25096:	aa06      	add	r2, sp, #24
   25098:	2112      	movs	r1, #18
   2509a:	4620      	mov	r0, r4
   2509c:	f7ff ff3c 	bl	24f18 <net_tcp_prepare_segment>
}
   250a0:	b008      	add	sp, #32
   250a2:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   250a4:	9602      	str	r6, [sp, #8]
   250a6:	9501      	str	r5, [sp, #4]
   250a8:	2200      	movs	r2, #0
   250aa:	9200      	str	r2, [sp, #0]
   250ac:	4613      	mov	r3, r2
   250ae:	2110      	movs	r1, #16
   250b0:	4620      	mov	r0, r4
   250b2:	f7ff ff31 	bl	24f18 <net_tcp_prepare_segment>
   250b6:	e7f3      	b.n	250a0 <net_tcp_prepare_ack+0x64>

000250b8 <net_tcp_queue_data>:
{
   250b8:	b570      	push	{r4, r5, r6, lr}
   250ba:	b086      	sub	sp, #24
   250bc:	4605      	mov	r5, r0
   250be:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   250c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   250c2:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   250c4:	2400      	movs	r4, #0
   250c6:	e002      	b.n	250ce <net_tcp_queue_data+0x16>
		bytes += buf->len;
   250c8:	899a      	ldrh	r2, [r3, #12]
   250ca:	4414      	add	r4, r2
		buf = buf->frags;
   250cc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   250ce:	2b00      	cmp	r3, #0
   250d0:	d1fa      	bne.n	250c8 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   250d2:	ab05      	add	r3, sp, #20
   250d4:	9302      	str	r3, [sp, #8]
   250d6:	9001      	str	r0, [sp, #4]
   250d8:	2200      	movs	r2, #0
   250da:	9200      	str	r2, [sp, #0]
   250dc:	4613      	mov	r3, r2
   250de:	2118      	movs	r1, #24
   250e0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   250e2:	f7ff ff19 	bl	24f18 <net_tcp_prepare_segment>
	if (ret) {
   250e6:	4606      	mov	r6, r0
   250e8:	bb10      	cbnz	r0, 25130 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   250ea:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   250ec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   250f0:	4423      	add	r3, r4
   250f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   250f6:	4a1b      	ldr	r2, [pc, #108]	; (25164 <net_tcp_queue_data+0xac>)
   250f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   250fa:	441c      	add	r4, r3
   250fc:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   250fe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25100:	9905      	ldr	r1, [sp, #20]
   25102:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   25106:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   25108:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   2510c:	b199      	cbz	r1, 25136 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   2510e:	600a      	str	r2, [r1, #0]
		list->tail = node;
   25110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   25114:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   25116:	3058      	adds	r0, #88	; 0x58
   25118:	f006 fa48 	bl	2b5ac <_timeout_remaining_get>
   2511c:	b180      	cbz	r0, 25140 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   2511e:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   25120:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25124:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25128:	2b0a      	cmp	r3, #10
   2512a:	d015      	beq.n	25158 <net_tcp_queue_data+0xa0>
   2512c:	f7f9 fe02 	bl	1ed34 <net_pkt_ref>
}
   25130:	4630      	mov	r0, r6
   25132:	b006      	add	sp, #24
   25134:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   25136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   2513a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   2513e:	e7e9      	b.n	25114 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   25140:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   25142:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   25146:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   2514a:	2200      	movs	r2, #0
   2514c:	21c8      	movs	r1, #200	; 0xc8
   2514e:	4099      	lsls	r1, r3
   25150:	3058      	adds	r0, #88	; 0x58
   25152:	f006 f8e9 	bl	2b328 <_impl_k_timer_start>
   25156:	e7e2      	b.n	2511e <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   25158:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   2515c:	2b02      	cmp	r3, #2
   2515e:	d1e5      	bne.n	2512c <net_tcp_queue_data+0x74>
   25160:	e7e6      	b.n	25130 <net_tcp_queue_data+0x78>
   25162:	bf00      	nop
   25164:	20002ae0 	.word	0x20002ae0

00025168 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   25168:	b570      	push	{r4, r5, r6, lr}
   2516a:	4606      	mov	r6, r0
   2516c:	460d      	mov	r5, r1
	__asm__ volatile(
   2516e:	f04f 0320 	mov.w	r3, #32
   25172:	f3ef 8111 	mrs	r1, BASEPRI
   25176:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2517a:	2400      	movs	r4, #0
   2517c:	e000      	b.n	25180 <net_tcp_foreach+0x18>
   2517e:	3401      	adds	r4, #1
   25180:	2c05      	cmp	r4, #5
   25182:	dc16      	bgt.n	251b2 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   25184:	23c8      	movs	r3, #200	; 0xc8
   25186:	4a0c      	ldr	r2, [pc, #48]	; (251b8 <net_tcp_foreach+0x50>)
   25188:	fb03 2304 	mla	r3, r3, r4, r2
   2518c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   25190:	f013 0f20 	tst.w	r3, #32
   25194:	d0f3      	beq.n	2517e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   25196:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   2519a:	4629      	mov	r1, r5
   2519c:	20c8      	movs	r0, #200	; 0xc8
   2519e:	fb00 2004 	mla	r0, r0, r4, r2
   251a2:	47b0      	blx	r6
	__asm__ volatile(
   251a4:	f04f 0320 	mov.w	r3, #32
   251a8:	f3ef 8111 	mrs	r1, BASEPRI
   251ac:	f383 8811 	msr	BASEPRI, r3
   251b0:	e7e5      	b.n	2517e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   251b2:	f381 8811 	msr	BASEPRI, r1
   251b6:	bd70      	pop	{r4, r5, r6, pc}
   251b8:	20001ff0 	.word	0x20001ff0

000251bc <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   251bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   251be:	b085      	sub	sp, #20
   251c0:	4605      	mov	r5, r0
   251c2:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   251c4:	f7fa f8df 	bl	1f386 <net_pkt_tcp_data>
   251c8:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   251ca:	2214      	movs	r2, #20
   251cc:	4601      	mov	r1, r0
   251ce:	4628      	mov	r0, r5
   251d0:	f7fa fc82 	bl	1fad8 <net_header_fits>
   251d4:	b120      	cbz	r0, 251e0 <net_tcp_get_hdr+0x24>
		return hdr;
   251d6:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   251d8:	b127      	cbz	r7, 251e4 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   251da:	4620      	mov	r0, r4
   251dc:	b005      	add	sp, #20
   251de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   251e0:	2700      	movs	r7, #0
   251e2:	e7f9      	b.n	251d8 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   251e4:	68a8      	ldr	r0, [r5, #8]
   251e6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   251ea:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   251ee:	9600      	str	r6, [sp, #0]
   251f0:	2302      	movs	r3, #2
   251f2:	f10d 020e 	add.w	r2, sp, #14
   251f6:	4421      	add	r1, r4
   251f8:	f7f9 ff29 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   251fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   25200:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   25202:	9300      	str	r3, [sp, #0]
   25204:	2302      	movs	r3, #2
   25206:	f10d 020e 	add.w	r2, sp, #14
   2520a:	f7f9 ff20 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   2520e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   25212:	1d33      	adds	r3, r6, #4
   25214:	9300      	str	r3, [sp, #0]
   25216:	2304      	movs	r3, #4
   25218:	f10d 020e 	add.w	r2, sp, #14
   2521c:	f7f9 ff17 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   25220:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   25224:	f106 0308 	add.w	r3, r6, #8
   25228:	9300      	str	r3, [sp, #0]
   2522a:	2304      	movs	r3, #4
   2522c:	f10d 020e 	add.w	r2, sp, #14
   25230:	f7f9 ff0d 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   25234:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   25238:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   2523c:	9300      	str	r3, [sp, #0]
   2523e:	2301      	movs	r3, #1
   25240:	f10d 020e 	add.w	r2, sp, #14
   25244:	f7f9 ff03 	bl	1f04e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   25248:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2524c:	f106 030d 	add.w	r3, r6, #13
   25250:	9300      	str	r3, [sp, #0]
   25252:	2301      	movs	r3, #1
   25254:	f10d 020e 	add.w	r2, sp, #14
   25258:	f7f9 fef9 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   2525c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   25260:	f106 030e 	add.w	r3, r6, #14
   25264:	9300      	str	r3, [sp, #0]
   25266:	2302      	movs	r3, #2
   25268:	f10d 020e 	add.w	r2, sp, #14
   2526c:	f7f9 feef 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   25270:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   25274:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   25278:	9300      	str	r3, [sp, #0]
   2527a:	2302      	movs	r3, #2
   2527c:	f10d 020e 	add.w	r2, sp, #14
   25280:	f7f9 fee5 	bl	1f04e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   25284:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   25288:	f106 0312 	add.w	r3, r6, #18
   2528c:	9300      	str	r3, [sp, #0]
   2528e:	2302      	movs	r3, #2
   25290:	f10d 020e 	add.w	r2, sp, #14
   25294:	f7f9 fedb 	bl	1f04e <net_frag_read>
	if (!frag && pos == 0xffff) {
   25298:	b108      	cbz	r0, 2529e <net_tcp_get_hdr+0xe2>
	return hdr;
   2529a:	4634      	mov	r4, r6
   2529c:	e79d      	b.n	251da <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   2529e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   252a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   252a6:	429a      	cmp	r2, r3
   252a8:	d001      	beq.n	252ae <net_tcp_get_hdr+0xf2>
	return hdr;
   252aa:	4634      	mov	r4, r6
   252ac:	e795      	b.n	251da <net_tcp_get_hdr+0x1e>
		return NULL;
   252ae:	463c      	mov	r4, r7
   252b0:	e793      	b.n	251da <net_tcp_get_hdr+0x1e>

000252b2 <net_tcp_validate_seq>:
{
   252b2:	b570      	push	{r4, r5, r6, lr}
   252b4:	b086      	sub	sp, #24
   252b6:	4606      	mov	r6, r0
   252b8:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   252ba:	a901      	add	r1, sp, #4
   252bc:	f7ff ff7e 	bl	251bc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   252c0:	b1e8      	cbz	r0, 252fe <net_tcp_validate_seq+0x4c>
   252c2:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   252c4:	7900      	ldrb	r0, [r0, #4]
   252c6:	795c      	ldrb	r4, [r3, #5]
   252c8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   252cc:	799a      	ldrb	r2, [r3, #6]
   252ce:	79dc      	ldrb	r4, [r3, #7]
   252d0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   252d4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   252d8:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   252dc:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   252de:	2b00      	cmp	r3, #0
   252e0:	db0b      	blt.n	252fa <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   252e2:	4630      	mov	r0, r6
   252e4:	f7ff fcfc 	bl	24ce0 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   252e8:	4428      	add	r0, r5
   252ea:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   252ec:	2c00      	cmp	r4, #0
   252ee:	db02      	blt.n	252f6 <net_tcp_validate_seq+0x44>
   252f0:	2000      	movs	r0, #0
}
   252f2:	b006      	add	sp, #24
   252f4:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   252f6:	2001      	movs	r0, #1
   252f8:	e7fb      	b.n	252f2 <net_tcp_validate_seq+0x40>
   252fa:	2000      	movs	r0, #0
   252fc:	e7f9      	b.n	252f2 <net_tcp_validate_seq+0x40>
		return false;
   252fe:	2000      	movs	r0, #0
   25300:	e7f7      	b.n	252f2 <net_tcp_validate_seq+0x40>

00025302 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   25302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25306:	b087      	sub	sp, #28
   25308:	4605      	mov	r5, r0
   2530a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2530c:	2214      	movs	r2, #20
   2530e:	f7fa fbe3 	bl	1fad8 <net_header_fits>
   25312:	b128      	cbz	r0, 25320 <net_tcp_set_hdr+0x1e>
		return hdr;
   25314:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   25316:	b12e      	cbz	r6, 25324 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   25318:	4620      	mov	r0, r4
   2531a:	b007      	add	sp, #28
   2531c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   25320:	2600      	movs	r6, #0
   25322:	e7f8      	b.n	25316 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   25324:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   25328:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2532c:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   25330:	9702      	str	r7, [sp, #8]
   25332:	9401      	str	r4, [sp, #4]
   25334:	f04f 0802 	mov.w	r8, #2
   25338:	f8cd 8000 	str.w	r8, [sp]
   2533c:	f10d 0316 	add.w	r3, sp, #22
   25340:	440a      	add	r2, r1
   25342:	68a9      	ldr	r1, [r5, #8]
   25344:	4628      	mov	r0, r5
   25346:	f7f9 fef4 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2534a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   2534e:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   25352:	9702      	str	r7, [sp, #8]
   25354:	9301      	str	r3, [sp, #4]
   25356:	f8cd 8000 	str.w	r8, [sp]
   2535a:	f10d 0316 	add.w	r3, sp, #22
   2535e:	4601      	mov	r1, r0
   25360:	4628      	mov	r0, r5
   25362:	f7f9 fee6 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   25366:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2536a:	1d23      	adds	r3, r4, #4
   2536c:	9702      	str	r7, [sp, #8]
   2536e:	9301      	str	r3, [sp, #4]
   25370:	f04f 0904 	mov.w	r9, #4
   25374:	f8cd 9000 	str.w	r9, [sp]
   25378:	f10d 0316 	add.w	r3, sp, #22
   2537c:	4601      	mov	r1, r0
   2537e:	4628      	mov	r0, r5
   25380:	f7f9 fed7 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   25384:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   25388:	f104 0308 	add.w	r3, r4, #8
   2538c:	9702      	str	r7, [sp, #8]
   2538e:	9301      	str	r3, [sp, #4]
   25390:	f8cd 9000 	str.w	r9, [sp]
   25394:	f10d 0316 	add.w	r3, sp, #22
   25398:	4601      	mov	r1, r0
   2539a:	4628      	mov	r0, r5
   2539c:	f7f9 fec9 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   253a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   253a4:	f104 030c 	add.w	r3, r4, #12
   253a8:	9702      	str	r7, [sp, #8]
   253aa:	9301      	str	r3, [sp, #4]
   253ac:	f04f 0901 	mov.w	r9, #1
   253b0:	f8cd 9000 	str.w	r9, [sp]
   253b4:	f10d 0316 	add.w	r3, sp, #22
   253b8:	4601      	mov	r1, r0
   253ba:	4628      	mov	r0, r5
   253bc:	f7f9 feb9 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   253c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   253c4:	f104 030d 	add.w	r3, r4, #13
   253c8:	9702      	str	r7, [sp, #8]
   253ca:	9301      	str	r3, [sp, #4]
   253cc:	f8cd 9000 	str.w	r9, [sp]
   253d0:	f10d 0316 	add.w	r3, sp, #22
   253d4:	4601      	mov	r1, r0
   253d6:	4628      	mov	r0, r5
   253d8:	f7f9 feab 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   253dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   253e0:	f104 030e 	add.w	r3, r4, #14
   253e4:	9702      	str	r7, [sp, #8]
   253e6:	9301      	str	r3, [sp, #4]
   253e8:	f8cd 8000 	str.w	r8, [sp]
   253ec:	f10d 0316 	add.w	r3, sp, #22
   253f0:	4601      	mov	r1, r0
   253f2:	4628      	mov	r0, r5
   253f4:	f7f9 fe9d 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   253f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   253fc:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   25400:	9702      	str	r7, [sp, #8]
   25402:	9301      	str	r3, [sp, #4]
   25404:	f8cd 8000 	str.w	r8, [sp]
   25408:	f10d 0316 	add.w	r3, sp, #22
   2540c:	4601      	mov	r1, r0
   2540e:	4628      	mov	r0, r5
   25410:	f7f9 fe8f 	bl	1f132 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   25414:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   25418:	f104 0312 	add.w	r3, r4, #18
   2541c:	9702      	str	r7, [sp, #8]
   2541e:	9301      	str	r3, [sp, #4]
   25420:	f8cd 8000 	str.w	r8, [sp]
   25424:	f10d 0316 	add.w	r3, sp, #22
   25428:	4601      	mov	r1, r0
   2542a:	4628      	mov	r0, r5
   2542c:	f7f9 fe81 	bl	1f132 <net_pkt_write>
	if (!frag) {
   25430:	2800      	cmp	r0, #0
   25432:	f47f af71 	bne.w	25318 <net_tcp_set_hdr+0x16>
		return NULL;
   25436:	4634      	mov	r4, r6
   25438:	e76e      	b.n	25318 <net_tcp_set_hdr+0x16>

0002543a <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2543a:	b570      	push	{r4, r5, r6, lr}
   2543c:	b084      	sub	sp, #16
   2543e:	4605      	mov	r5, r0
   25440:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   25442:	f7f9 ffa0 	bl	1f386 <net_pkt_tcp_data>
   25446:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   25448:	2214      	movs	r2, #20
   2544a:	4601      	mov	r1, r0
   2544c:	4628      	mov	r0, r5
   2544e:	f7fa fb43 	bl	1fad8 <net_header_fits>
   25452:	b120      	cbz	r0, 2545e <net_tcp_get_chksum+0x24>
		return hdr;
   25454:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   25456:	b123      	cbz	r3, 25462 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   25458:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   2545a:	b004      	add	sp, #16
   2545c:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   2545e:	2300      	movs	r3, #0
   25460:	e7f9      	b.n	25456 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   25462:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   25466:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2546a:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   2546c:	3110      	adds	r1, #16
   2546e:	f10d 030e 	add.w	r3, sp, #14
   25472:	9300      	str	r3, [sp, #0]
   25474:	2302      	movs	r3, #2
   25476:	aa03      	add	r2, sp, #12
   25478:	b289      	uxth	r1, r1
   2547a:	4630      	mov	r0, r6
   2547c:	f7f9 fde7 	bl	1f04e <net_frag_read>
	return chksum;
   25480:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   25484:	e7e9      	b.n	2545a <net_tcp_get_chksum+0x20>

00025486 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   25486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2548a:	b086      	sub	sp, #24
   2548c:	4606      	mov	r6, r0
   2548e:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   25490:	2300      	movs	r3, #0
   25492:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   25496:	f7f9 ff76 	bl	1f386 <net_pkt_tcp_data>
   2549a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2549c:	2214      	movs	r2, #20
   2549e:	4601      	mov	r1, r0
   254a0:	4630      	mov	r0, r6
   254a2:	f7fa fb19 	bl	1fad8 <net_header_fits>
   254a6:	b170      	cbz	r0, 254c6 <net_tcp_set_chksum+0x40>
		return hdr;
   254a8:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   254aa:	b173      	cbz	r3, 254ca <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   254ac:	2300      	movs	r3, #0
   254ae:	7423      	strb	r3, [r4, #16]
   254b0:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   254b2:	2106      	movs	r1, #6
   254b4:	4630      	mov	r0, r6
   254b6:	f7fa fab6 	bl	1fa26 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   254ba:	43c0      	mvns	r0, r0
   254bc:	8220      	strh	r0, [r4, #16]

		return frag;
   254be:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   254c0:	b006      	add	sp, #24
   254c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   254c6:	2300      	movs	r3, #0
   254c8:	e7ef      	b.n	254aa <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   254ca:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   254ce:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   254d2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   254d4:	3210      	adds	r2, #16
   254d6:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   254da:	f8cd 8008 	str.w	r8, [sp, #8]
   254de:	f10d 0416 	add.w	r4, sp, #22
   254e2:	9401      	str	r4, [sp, #4]
   254e4:	2702      	movs	r7, #2
   254e6:	9700      	str	r7, [sp, #0]
   254e8:	ab05      	add	r3, sp, #20
   254ea:	b292      	uxth	r2, r2
   254ec:	4629      	mov	r1, r5
   254ee:	4630      	mov	r0, r6
   254f0:	f7f9 fe1f 	bl	1f132 <net_pkt_write>
   254f4:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   254f6:	2106      	movs	r1, #6
   254f8:	4630      	mov	r0, r6
   254fa:	f7fa fa94 	bl	1fa26 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   254fe:	43c0      	mvns	r0, r0
   25500:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   25504:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   25508:	3a02      	subs	r2, #2
   2550a:	f8cd 8008 	str.w	r8, [sp, #8]
   2550e:	9401      	str	r4, [sp, #4]
   25510:	9700      	str	r7, [sp, #0]
   25512:	ab05      	add	r3, sp, #20
   25514:	b292      	uxth	r2, r2
   25516:	4629      	mov	r1, r5
   25518:	4630      	mov	r0, r6
   2551a:	f7f9 fe0a 	bl	1f132 <net_pkt_write>
	return frag;
   2551e:	e7cf      	b.n	254c0 <net_tcp_set_chksum+0x3a>

00025520 <net_tcp_send_pkt>:
{
   25520:	b570      	push	{r4, r5, r6, lr}
   25522:	b086      	sub	sp, #24
   25524:	4605      	mov	r5, r0
	return pkt->context;
   25526:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   25528:	a901      	add	r1, sp, #4
   2552a:	f7ff fe47 	bl	251bc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2552e:	2800      	cmp	r0, #0
   25530:	f000 8086 	beq.w	25640 <net_tcp_send_pkt+0x120>
   25534:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   25536:	7a02      	ldrb	r2, [r0, #8]
   25538:	7a43      	ldrb	r3, [r0, #9]
   2553a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   2553e:	7a81      	ldrb	r1, [r0, #10]
   25540:	7ac3      	ldrb	r3, [r0, #11]
   25542:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   25546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   2554a:	6e32      	ldr	r2, [r6, #96]	; 0x60
   2554c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   25550:	429a      	cmp	r2, r3
   25552:	d039      	beq.n	255c8 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   25554:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   25556:	0a19      	lsrs	r1, r3, #8
   25558:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   2555a:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   2555c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   25560:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   25562:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   25564:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   25566:	6e33      	ldr	r3, [r6, #96]	; 0x60
   25568:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   2556c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   25570:	4299      	cmp	r1, r3
   25572:	d007      	beq.n	25584 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   25574:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   25576:	f013 0f10 	tst.w	r3, #16
   2557a:	d103      	bne.n	25584 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   2557c:	f043 0310 	orr.w	r3, r3, #16
   25580:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   25582:	2201      	movs	r2, #1
	if (calc_chksum) {
   25584:	bb12      	cbnz	r2, 255cc <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   25586:	7b63      	ldrb	r3, [r4, #13]
   25588:	f013 0f01 	tst.w	r3, #1
   2558c:	d006      	beq.n	2559c <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   2558e:	6e32      	ldr	r2, [r6, #96]	; 0x60
   25590:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   25594:	f043 0302 	orr.w	r3, r3, #2
   25598:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   2559c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2559e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   255a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   255a6:	4621      	mov	r1, r4
   255a8:	4628      	mov	r0, r5
   255aa:	f7ff feaa 	bl	25302 <net_tcp_set_hdr>
	return pkt->family;
   255ae:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   255b2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   255b6:	2b0a      	cmp	r3, #10
   255b8:	d00d      	beq.n	255d6 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   255ba:	4628      	mov	r0, r5
   255bc:	f7f6 ffc8 	bl	1c550 <net_send_data>
   255c0:	4604      	mov	r4, r0
}
   255c2:	4620      	mov	r0, r4
   255c4:	b006      	add	sp, #24
   255c6:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   255c8:	2200      	movs	r2, #0
   255ca:	e7cc      	b.n	25566 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   255cc:	68a9      	ldr	r1, [r5, #8]
   255ce:	4628      	mov	r0, r5
   255d0:	f7ff ff59 	bl	25486 <net_tcp_set_chksum>
   255d4:	e7d7      	b.n	25586 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   255d6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   255da:	2b02      	cmp	r3, #2
   255dc:	d1ed      	bne.n	255ba <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   255de:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   255e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   255e4:	b10b      	cbz	r3, 255ea <net_tcp_send_pkt+0xca>
   255e6:	3b34      	subs	r3, #52	; 0x34
   255e8:	e006      	b.n	255f8 <net_tcp_send_pkt+0xd8>
   255ea:	2300      	movs	r3, #0
   255ec:	e004      	b.n	255f8 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   255ee:	4611      	mov	r1, r2
   255f0:	e009      	b.n	25606 <net_tcp_send_pkt+0xe6>
	return node->next;
   255f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   255f4:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   255f8:	b163      	cbz	r3, 25614 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   255fa:	42ab      	cmp	r3, r5
   255fc:	d009      	beq.n	25612 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   255fe:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   25602:	d0f4      	beq.n	255ee <net_tcp_send_pkt+0xce>
	return node->next;
   25604:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   25606:	b111      	cbz	r1, 2560e <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   25608:	2a00      	cmp	r2, #0
   2560a:	d1f2      	bne.n	255f2 <net_tcp_send_pkt+0xd2>
   2560c:	e7f2      	b.n	255f4 <net_tcp_send_pkt+0xd4>
   2560e:	2300      	movs	r3, #0
   25610:	e7f2      	b.n	255f8 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   25612:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   25614:	2b00      	cmp	r3, #0
   25616:	d0d0      	beq.n	255ba <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   25618:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2561c:	4628      	mov	r0, r5
   2561e:	f7f9 fec7 	bl	1f3b0 <net_pkt_clone>
			if (!new_pkt) {
   25622:	4605      	mov	r5, r0
   25624:	b178      	cbz	r0, 25646 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   25626:	f7f6 ff93 	bl	1c550 <net_send_data>
			if (ret < 0) {
   2562a:	1e04      	subs	r4, r0, #0
   2562c:	db04      	blt.n	25638 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   2562e:	4a07      	ldr	r2, [pc, #28]	; (2564c <net_tcp_send_pkt+0x12c>)
   25630:	6f13      	ldr	r3, [r2, #112]	; 0x70
   25632:	3301      	adds	r3, #1
   25634:	6713      	str	r3, [r2, #112]	; 0x70
   25636:	e7c4      	b.n	255c2 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   25638:	4628      	mov	r0, r5
   2563a:	f7f9 fb8a 	bl	1ed52 <net_pkt_unref>
   2563e:	e7c0      	b.n	255c2 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   25640:	f06f 0479 	mvn.w	r4, #121	; 0x79
   25644:	e7bd      	b.n	255c2 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   25646:	f06f 040b 	mvn.w	r4, #11
   2564a:	e7ba      	b.n	255c2 <net_tcp_send_pkt+0xa2>
   2564c:	20002ae0 	.word	0x20002ae0

00025650 <tcp_retry_expired>:
	return (!list->head);
   25650:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   25652:	2b00      	cmp	r3, #0
   25654:	d05c      	beq.n	25710 <tcp_retry_expired+0xc0>
{
   25656:	b510      	push	{r4, lr}
   25658:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   2565c:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   2565e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   25662:	f002 031f 	and.w	r3, r2, #31
   25666:	3301      	adds	r3, #1
   25668:	f003 031f 	and.w	r3, r3, #31
   2566c:	f363 0204 	bfi	r2, r3, #0, #5
   25670:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   25674:	2b09      	cmp	r3, #9
   25676:	dc2f      	bgt.n	256d8 <tcp_retry_expired+0x88>
   25678:	2200      	movs	r2, #0
   2567a:	21c8      	movs	r1, #200	; 0xc8
   2567c:	4099      	lsls	r1, r3
   2567e:	f005 fe53 	bl	2b328 <_impl_k_timer_start>
	return list->head;
   25682:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   25684:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   25688:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   2568a:	f012 0f01 	tst.w	r2, #1
   2568e:	d00d      	beq.n	256ac <tcp_retry_expired+0x5c>
	return pkt->family;
   25690:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   25694:	2a0a      	cmp	r2, #10
   25696:	d023      	beq.n	256e0 <tcp_retry_expired+0x90>
   25698:	4620      	mov	r0, r4
   2569a:	f7f9 fb4b 	bl	1ed34 <net_pkt_ref>
   2569e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   256a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   256a4:	f36f 0300 	bfc	r3, #0, #1
   256a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   256ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   256b0:	f043 0302 	orr.w	r3, r3, #2
   256b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   256b8:	4620      	mov	r0, r4
   256ba:	f7ff ff31 	bl	25520 <net_tcp_send_pkt>
   256be:	2800      	cmp	r0, #0
   256c0:	db13      	blt.n	256ea <tcp_retry_expired+0x9a>
	return pkt->family;
   256c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   256c6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   256ca:	2b0a      	cmp	r3, #10
   256cc:	d01b      	beq.n	25706 <tcp_retry_expired+0xb6>
   256ce:	4a11      	ldr	r2, [pc, #68]	; (25714 <tcp_retry_expired+0xc4>)
   256d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   256d2:	3301      	adds	r3, #1
   256d4:	6713      	str	r3, [r2, #112]	; 0x70
   256d6:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   256d8:	4608      	mov	r0, r1
   256da:	f7ff f99a 	bl	24a12 <abort_connection>
			return;
   256de:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   256e0:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   256e4:	2b02      	cmp	r3, #2
   256e6:	d1d7      	bne.n	25698 <tcp_retry_expired+0x48>
   256e8:	e7da      	b.n	256a0 <tcp_retry_expired+0x50>
   256ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   256ee:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   256f2:	2b0a      	cmp	r3, #10
   256f4:	d103      	bne.n	256fe <tcp_retry_expired+0xae>
   256f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   256fa:	2b02      	cmp	r3, #2
   256fc:	d0e1      	beq.n	256c2 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   256fe:	4620      	mov	r0, r4
   25700:	f7f9 fb27 	bl	1ed52 <net_pkt_unref>
   25704:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   25706:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2570a:	2b02      	cmp	r3, #2
   2570c:	d1df      	bne.n	256ce <tcp_retry_expired+0x7e>
   2570e:	e7e2      	b.n	256d6 <tcp_retry_expired+0x86>
   25710:	4770      	bx	lr
   25712:	bf00      	nop
   25714:	20002ae0 	.word	0x20002ae0

00025718 <net_tcp_send_data>:
{
   25718:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2571a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2571c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   25720:	b10c      	cbz	r4, 25726 <net_tcp_send_data+0xe>
   25722:	3c34      	subs	r4, #52	; 0x34
   25724:	e013      	b.n	2574e <net_tcp_send_data+0x36>
   25726:	2400      	movs	r4, #0
   25728:	e011      	b.n	2574e <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   2572a:	4620      	mov	r0, r4
   2572c:	f7f9 fb11 	bl	1ed52 <net_pkt_unref>
	pkt->pkt_queued = send;
   25730:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   25734:	f043 0302 	orr.w	r3, r3, #2
   25738:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2573c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   25740:	d01e      	beq.n	25780 <net_tcp_send_data+0x68>
	return node->next;
   25742:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   25744:	b1f2      	cbz	r2, 25784 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   25746:	b103      	cbz	r3, 2574a <net_tcp_send_data+0x32>
	return node->next;
   25748:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2574a:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   2574e:	b1dc      	cbz	r4, 25788 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   25750:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   25754:	f013 0f02 	tst.w	r3, #2
   25758:	d1f0      	bne.n	2573c <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   2575a:	f013 0f01 	tst.w	r3, #1
   2575e:	d1ed      	bne.n	2573c <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   25760:	4620      	mov	r0, r4
   25762:	f7ff fedd 	bl	25520 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   25766:	2800      	cmp	r0, #0
   25768:	dae2      	bge.n	25730 <net_tcp_send_data+0x18>
	return pkt->family;
   2576a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2576e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25772:	2b0a      	cmp	r3, #10
   25774:	d1d9      	bne.n	2572a <net_tcp_send_data+0x12>
   25776:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2577a:	2b02      	cmp	r3, #2
   2577c:	d1d5      	bne.n	2572a <net_tcp_send_data+0x12>
   2577e:	e7d7      	b.n	25730 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   25780:	461a      	mov	r2, r3
   25782:	e7df      	b.n	25744 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   25784:	2400      	movs	r4, #0
   25786:	e7e2      	b.n	2574e <net_tcp_send_data+0x36>
}
   25788:	2000      	movs	r0, #0
   2578a:	bd10      	pop	{r4, pc}

0002578c <net_tcp_ack_received>:
{
   2578c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25790:	b087      	sub	sp, #28
   25792:	4681      	mov	r9, r0
   25794:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   25796:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   25798:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2579c:	b10b      	cbz	r3, 257a2 <net_tcp_ack_received+0x16>
		valid_ack = true;
   2579e:	2700      	movs	r7, #0
   257a0:	e033      	b.n	2580a <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   257a2:	4a51      	ldr	r2, [pc, #324]	; (258e8 <net_tcp_ack_received+0x15c>)
   257a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   257a6:	3301      	adds	r3, #1
   257a8:	6653      	str	r3, [r2, #100]	; 0x64
   257aa:	e7f8      	b.n	2579e <net_tcp_ack_received+0x12>
		list->head = node->next;
   257ac:	6823      	ldr	r3, [r4, #0]
   257ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   257b2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   257b6:	42a2      	cmp	r2, r4
   257b8:	d005      	beq.n	257c6 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   257ba:	2300      	movs	r3, #0
   257bc:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   257be:	4630      	mov	r0, r6
   257c0:	f7f9 fac7 	bl	1ed52 <net_pkt_unref>
   257c4:	e021      	b.n	2580a <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   257c6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   257ca:	e7f6      	b.n	257ba <net_tcp_ack_received+0x2e>
   257cc:	4a46      	ldr	r2, [pc, #280]	; (258e8 <net_tcp_ack_received+0x15c>)
   257ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
   257d0:	3301      	adds	r3, #1
   257d2:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   257d4:	b12f      	cbz	r7, 257e2 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   257d6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   257da:	f3c3 3343 	ubfx	r3, r3, #13, #4
   257de:	2b04      	cmp	r3, #4
   257e0:	d046      	beq.n	25870 <net_tcp_ack_received+0xe4>
}
   257e2:	b007      	add	sp, #28
   257e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   257e8:	2108      	movs	r1, #8
   257ea:	4628      	mov	r0, r5
   257ec:	f7ff faf7 	bl	24dde <net_tcp_change_state>
		list->head = node->next;
   257f0:	6823      	ldr	r3, [r4, #0]
   257f2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   257f6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   257fa:	42a2      	cmp	r2, r4
   257fc:	d035      	beq.n	2586a <net_tcp_ack_received+0xde>
	node->next = NULL;
   257fe:	2300      	movs	r3, #0
   25800:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   25802:	4630      	mov	r0, r6
   25804:	f7f9 faa5 	bl	1ed52 <net_pkt_unref>
		valid_ack = true;
   25808:	2701      	movs	r7, #1
	return (!list->head);
   2580a:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   2580e:	2c00      	cmp	r4, #0
   25810:	d0e0      	beq.n	257d4 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   25812:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   25816:	a901      	add	r1, sp, #4
   25818:	4630      	mov	r0, r6
   2581a:	f7ff fccf 	bl	251bc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2581e:	4602      	mov	r2, r0
   25820:	2800      	cmp	r0, #0
   25822:	d0c3      	beq.n	257ac <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   25824:	7903      	ldrb	r3, [r0, #4]
   25826:	7941      	ldrb	r1, [r0, #5]
   25828:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2582c:	7980      	ldrb	r0, [r0, #6]
   2582e:	79d3      	ldrb	r3, [r2, #7]
   25830:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   25834:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   25838:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   2583c:	440b      	add	r3, r1
   2583e:	3b01      	subs	r3, #1
   25840:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   25844:	2b00      	cmp	r3, #0
   25846:	ddc1      	ble.n	257cc <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   25848:	7b53      	ldrb	r3, [r2, #13]
   2584a:	f013 0f01 	tst.w	r3, #1
   2584e:	d0cf      	beq.n	257f0 <net_tcp_ack_received+0x64>
   25850:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   25854:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   25858:	2b07      	cmp	r3, #7
   2585a:	d0c5      	beq.n	257e8 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   2585c:	2b0a      	cmp	r3, #10
   2585e:	d1c7      	bne.n	257f0 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   25860:	2109      	movs	r1, #9
   25862:	4628      	mov	r0, r5
   25864:	f7ff fabb 	bl	24dde <net_tcp_change_state>
   25868:	e7c2      	b.n	257f0 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   2586a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2586e:	e7c6      	b.n	257fe <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   25870:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   25874:	f7ff f8db 	bl	24a2e <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   25878:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   2587c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   25880:	f412 7f00 	tst.w	r2, #512	; 0x200
   25884:	d0ad      	beq.n	257e2 <net_tcp_ack_received+0x56>
	return list->head;
   25886:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2588a:	b108      	cbz	r0, 25890 <net_tcp_ack_received+0x104>
   2588c:	3834      	subs	r0, #52	; 0x34
   2588e:	e013      	b.n	258b8 <net_tcp_ack_received+0x12c>
   25890:	2000      	movs	r0, #0
   25892:	e011      	b.n	258b8 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   25894:	f7f9 fa4e 	bl	1ed34 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   25898:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2589c:	f36f 0300 	bfc	r3, #0, #1
   258a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   258a4:	b140      	cbz	r0, 258b8 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   258a6:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   258aa:	d014      	beq.n	258d6 <net_tcp_ack_received+0x14a>
	return node->next;
   258ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
   258ae:	b1a2      	cbz	r2, 258da <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   258b0:	b103      	cbz	r3, 258b4 <net_tcp_ack_received+0x128>
	return node->next;
   258b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   258b4:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   258b8:	b188      	cbz	r0, 258de <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   258ba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   258be:	f013 0f01 	tst.w	r3, #1
   258c2:	d0ef      	beq.n	258a4 <net_tcp_ack_received+0x118>
	return pkt->family;
   258c4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   258c8:	2b0a      	cmp	r3, #10
   258ca:	d1e3      	bne.n	25894 <net_tcp_ack_received+0x108>
   258cc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   258d0:	2b02      	cmp	r3, #2
   258d2:	d1df      	bne.n	25894 <net_tcp_ack_received+0x108>
   258d4:	e7e0      	b.n	25898 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   258d6:	461a      	mov	r2, r3
   258d8:	e7e9      	b.n	258ae <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   258da:	2000      	movs	r0, #0
   258dc:	e7ec      	b.n	258b8 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   258de:	4648      	mov	r0, r9
   258e0:	f7ff ff1a 	bl	25718 <net_tcp_send_data>
}
   258e4:	e77d      	b.n	257e2 <net_tcp_ack_received+0x56>
   258e6:	bf00      	nop
   258e8:	20002ae0 	.word	0x20002ae0

000258ec <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   258ec:	6842      	ldr	r2, [r0, #4]
   258ee:	4b08      	ldr	r3, [pc, #32]	; (25910 <iface2str+0x24>)
   258f0:	429a      	cmp	r2, r3
   258f2:	d004      	beq.n	258fe <iface2str+0x12>
	if (extra) {
   258f4:	b151      	cbz	r1, 2590c <iface2str+0x20>
		*extra = "==============";
   258f6:	4b07      	ldr	r3, [pc, #28]	; (25914 <iface2str+0x28>)
   258f8:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   258fa:	4807      	ldr	r0, [pc, #28]	; (25918 <iface2str+0x2c>)
   258fc:	4770      	bx	lr
		if (extra) {
   258fe:	b119      	cbz	r1, 25908 <iface2str+0x1c>
			*extra = "=========";
   25900:	4b06      	ldr	r3, [pc, #24]	; (2591c <iface2str+0x30>)
   25902:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   25904:	4806      	ldr	r0, [pc, #24]	; (25920 <iface2str+0x34>)
   25906:	4770      	bx	lr
   25908:	4805      	ldr	r0, [pc, #20]	; (25920 <iface2str+0x34>)
   2590a:	4770      	bx	lr
	return "<unknown type>";
   2590c:	4802      	ldr	r0, [pc, #8]	; (25918 <iface2str+0x2c>)
}
   2590e:	4770      	bx	lr
   25910:	0002fe58 	.word	0x0002fe58
   25914:	00033800 	.word	0x00033800
   25918:	000337e4 	.word	0x000337e4
   2591c:	000337f4 	.word	0x000337f4
   25920:	000337d8 	.word	0x000337d8

00025924 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   25924:	2300      	movs	r3, #0
   25926:	2b05      	cmp	r3, #5
   25928:	dc18      	bgt.n	2595c <slab_pool_found_already+0x38>
{
   2592a:	b410      	push	{r4}
   2592c:	e008      	b.n	25940 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   2592e:	f103 0408 	add.w	r4, r3, #8
   25932:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   25936:	4294      	cmp	r4, r2
   25938:	d00e      	beq.n	25958 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2593a:	3301      	adds	r3, #1
   2593c:	2b05      	cmp	r3, #5
   2593e:	dc08      	bgt.n	25952 <slab_pool_found_already+0x2e>
		if (slab) {
   25940:	2900      	cmp	r1, #0
   25942:	d0f4      	beq.n	2592e <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   25944:	1c9c      	adds	r4, r3, #2
   25946:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2594a:	42a1      	cmp	r1, r4
   2594c:	d1f5      	bne.n	2593a <slab_pool_found_already+0x16>
				return true;
   2594e:	2001      	movs	r0, #1
   25950:	e000      	b.n	25954 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   25952:	2000      	movs	r0, #0
}
   25954:	bc10      	pop	{r4}
   25956:	4770      	bx	lr
				return true;
   25958:	2001      	movs	r0, #1
   2595a:	e7fb      	b.n	25954 <slab_pool_found_already+0x30>
	return false;
   2595c:	2000      	movs	r0, #0
}
   2595e:	4770      	bx	lr

00025960 <net_shell_cmd_allocs>:
{
   25960:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   25962:	4802      	ldr	r0, [pc, #8]	; (2596c <net_shell_cmd_allocs+0xc>)
   25964:	f7dd fc14 	bl	3190 <printk>
}
   25968:	2000      	movs	r0, #0
   2596a:	bd08      	pop	{r3, pc}
   2596c:	00033ad4 	.word	0x00033ad4

00025970 <net_shell_cmd_app>:
{
   25970:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   25972:	4802      	ldr	r0, [pc, #8]	; (2597c <net_shell_cmd_app+0xc>)
   25974:	f7dd fc0c 	bl	3190 <printk>
}
   25978:	2000      	movs	r0, #0
   2597a:	bd08      	pop	{r3, pc}
   2597c:	00033b0c 	.word	0x00033b0c

00025980 <net_shell_cmd_arp>:
{
   25980:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   25982:	4802      	ldr	r0, [pc, #8]	; (2598c <net_shell_cmd_arp+0xc>)
   25984:	f7dd fc04 	bl	3190 <printk>
}
   25988:	2000      	movs	r0, #0
   2598a:	bd08      	pop	{r3, pc}
   2598c:	00033b90 	.word	0x00033b90

00025990 <net_shell_cmd_dns>:
{
   25990:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   25992:	4802      	ldr	r0, [pc, #8]	; (2599c <net_shell_cmd_dns+0xc>)
   25994:	f7dd fbfc 	bl	3190 <printk>
}
   25998:	2000      	movs	r0, #0
   2599a:	bd08      	pop	{r3, pc}
   2599c:	00033c90 	.word	0x00033c90

000259a0 <net_shell_cmd_http>:
{
   259a0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   259a2:	4802      	ldr	r0, [pc, #8]	; (259ac <net_shell_cmd_http+0xc>)
   259a4:	f7dd fbf4 	bl	3190 <printk>
}
   259a8:	2000      	movs	r0, #0
   259aa:	bd08      	pop	{r3, pc}
   259ac:	00033cb0 	.word	0x00033cb0

000259b0 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   259b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   259b4:	f013 0f01 	tst.w	r3, #1
   259b8:	d032      	beq.n	25a20 <context_info+0x70>
{
   259ba:	b570      	push	{r4, r5, r6, lr}
   259bc:	460d      	mov	r5, r1
   259be:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   259c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   259c2:	b19b      	cbz	r3, 259ec <context_info+0x3c>
		slab = context->tx_slab();
   259c4:	4798      	blx	r3
   259c6:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   259c8:	2200      	movs	r2, #0
   259ca:	4601      	mov	r1, r0
   259cc:	4628      	mov	r0, r5
   259ce:	f7ff ffa9 	bl	25924 <slab_pool_found_already>
   259d2:	b100      	cbz	r0, 259d6 <context_info+0x26>
   259d4:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   259d6:	68b2      	ldr	r2, [r6, #8]
   259d8:	4631      	mov	r1, r6
   259da:	4812      	ldr	r0, [pc, #72]	; (25a24 <context_info+0x74>)
   259dc:	f7dd fbd8 	bl	3190 <printk>
#endif
		info->are_external_pools = true;
   259e0:	2301      	movs	r3, #1
   259e2:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   259e4:	682b      	ldr	r3, [r5, #0]
   259e6:	3302      	adds	r3, #2
   259e8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   259ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   259ee:	b19b      	cbz	r3, 25a18 <context_info+0x68>
		pool = context->data_pool();
   259f0:	4798      	blx	r3
   259f2:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   259f4:	4602      	mov	r2, r0
   259f6:	2100      	movs	r1, #0
   259f8:	4628      	mov	r0, r5
   259fa:	f7ff ff93 	bl	25924 <slab_pool_found_already>
   259fe:	2800      	cmp	r0, #0
   25a00:	d1e8      	bne.n	259d4 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   25a02:	8a22      	ldrh	r2, [r4, #16]
   25a04:	4621      	mov	r1, r4
   25a06:	4808      	ldr	r0, [pc, #32]	; (25a28 <context_info+0x78>)
   25a08:	f7dd fbc2 	bl	3190 <printk>
#endif
		info->are_external_pools = true;
   25a0c:	2301      	movs	r3, #1
   25a0e:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   25a10:	682b      	ldr	r3, [r5, #0]
   25a12:	3308      	adds	r3, #8
   25a14:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   25a18:	682b      	ldr	r3, [r5, #0]
   25a1a:	3301      	adds	r3, #1
   25a1c:	602b      	str	r3, [r5, #0]
   25a1e:	e7d9      	b.n	259d4 <context_info+0x24>
   25a20:	4770      	bx	lr
   25a22:	bf00      	nop
   25a24:	0003379c 	.word	0x0003379c
   25a28:	000337a8 	.word	0x000337a8

00025a2c <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   25a2c:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   25a2e:	4802      	ldr	r0, [pc, #8]	; (25a38 <net_shell_cmd_rpl+0xc>)
   25a30:	f7dd fbae 	bl	3190 <printk>
#endif

	return 0;
}
   25a34:	2000      	movs	r0, #0
   25a36:	bd08      	pop	{r3, pc}
   25a38:	00033ec0 	.word	0x00033ec0

00025a3c <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   25a3c:	b530      	push	{r4, r5, lr}
   25a3e:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   25a40:	4d3f      	ldr	r5, [pc, #252]	; (25b40 <net_shell_cmd_stacks+0x104>)
   25a42:	e011      	b.n	25a68 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   25a44:	1a81      	subs	r1, r0, r2
   25a46:	2364      	movs	r3, #100	; 0x64
   25a48:	fb03 f301 	mul.w	r3, r3, r1
   25a4c:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   25a50:	9304      	str	r3, [sp, #16]
   25a52:	9003      	str	r0, [sp, #12]
   25a54:	9102      	str	r1, [sp, #8]
   25a56:	9201      	str	r2, [sp, #4]
   25a58:	9000      	str	r0, [sp, #0]
   25a5a:	68eb      	ldr	r3, [r5, #12]
   25a5c:	68aa      	ldr	r2, [r5, #8]
   25a5e:	6869      	ldr	r1, [r5, #4]
   25a60:	4838      	ldr	r0, [pc, #224]	; (25b44 <net_shell_cmd_stacks+0x108>)
   25a62:	f7dd fb95 	bl	3190 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   25a66:	3514      	adds	r5, #20
   25a68:	4b37      	ldr	r3, [pc, #220]	; (25b48 <net_shell_cmd_stacks+0x10c>)
   25a6a:	429d      	cmp	r5, r3
   25a6c:	d00b      	beq.n	25a86 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   25a6e:	682c      	ldr	r4, [r5, #0]
   25a70:	6928      	ldr	r0, [r5, #16]
   25a72:	2300      	movs	r3, #0
	size_t unused = 0;
   25a74:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   25a76:	4298      	cmp	r0, r3
   25a78:	d9e4      	bls.n	25a44 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   25a7a:	5ce1      	ldrb	r1, [r4, r3]
   25a7c:	29aa      	cmp	r1, #170	; 0xaa
   25a7e:	d1e1      	bne.n	25a44 <net_shell_cmd_stacks+0x8>
			unused++;
   25a80:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   25a82:	3301      	adds	r3, #1
   25a84:	e7f7      	b.n	25a76 <net_shell_cmd_stacks+0x3a>
   25a86:	2300      	movs	r3, #0
   25a88:	461a      	mov	r2, r3
   25a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   25a8e:	d206      	bcs.n	25a9e <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   25a90:	492e      	ldr	r1, [pc, #184]	; (25b4c <net_shell_cmd_stacks+0x110>)
   25a92:	5cc9      	ldrb	r1, [r1, r3]
   25a94:	29aa      	cmp	r1, #170	; 0xaa
   25a96:	d102      	bne.n	25a9e <net_shell_cmd_stacks+0x62>
			unused++;
   25a98:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   25a9a:	3301      	adds	r3, #1
   25a9c:	e7f5      	b.n	25a8a <net_shell_cmd_stacks+0x4e>
   25a9e:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   25aa2:	2364      	movs	r3, #100	; 0x64
   25aa4:	fb03 f301 	mul.w	r3, r3, r1
   25aa8:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   25aaa:	9304      	str	r3, [sp, #16]
   25aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   25ab0:	9303      	str	r3, [sp, #12]
   25ab2:	9102      	str	r1, [sp, #8]
   25ab4:	9201      	str	r2, [sp, #4]
   25ab6:	9300      	str	r3, [sp, #0]
   25ab8:	4a25      	ldr	r2, [pc, #148]	; (25b50 <net_shell_cmd_stacks+0x114>)
   25aba:	4926      	ldr	r1, [pc, #152]	; (25b54 <net_shell_cmd_stacks+0x118>)
   25abc:	4826      	ldr	r0, [pc, #152]	; (25b58 <net_shell_cmd_stacks+0x11c>)
   25abe:	f7dd fb67 	bl	3190 <printk>
   25ac2:	2300      	movs	r3, #0
	size_t unused = 0;
   25ac4:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   25ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   25aca:	d206      	bcs.n	25ada <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   25acc:	4923      	ldr	r1, [pc, #140]	; (25b5c <net_shell_cmd_stacks+0x120>)
   25ace:	5cc9      	ldrb	r1, [r1, r3]
   25ad0:	29aa      	cmp	r1, #170	; 0xaa
   25ad2:	d102      	bne.n	25ada <net_shell_cmd_stacks+0x9e>
			unused++;
   25ad4:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   25ad6:	3301      	adds	r3, #1
   25ad8:	e7f5      	b.n	25ac6 <net_shell_cmd_stacks+0x8a>
   25ada:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   25ade:	2364      	movs	r3, #100	; 0x64
   25ae0:	fb03 f301 	mul.w	r3, r3, r1
   25ae4:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   25ae6:	9304      	str	r3, [sp, #16]
   25ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   25aec:	9303      	str	r3, [sp, #12]
   25aee:	9102      	str	r1, [sp, #8]
   25af0:	9201      	str	r2, [sp, #4]
   25af2:	9300      	str	r3, [sp, #0]
   25af4:	4a1a      	ldr	r2, [pc, #104]	; (25b60 <net_shell_cmd_stacks+0x124>)
   25af6:	491b      	ldr	r1, [pc, #108]	; (25b64 <net_shell_cmd_stacks+0x128>)
   25af8:	4817      	ldr	r0, [pc, #92]	; (25b58 <net_shell_cmd_stacks+0x11c>)
   25afa:	f7dd fb49 	bl	3190 <printk>
   25afe:	2300      	movs	r3, #0
	size_t unused = 0;
   25b00:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   25b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   25b06:	d206      	bcs.n	25b16 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   25b08:	4917      	ldr	r1, [pc, #92]	; (25b68 <net_shell_cmd_stacks+0x12c>)
   25b0a:	5cc9      	ldrb	r1, [r1, r3]
   25b0c:	29aa      	cmp	r1, #170	; 0xaa
   25b0e:	d102      	bne.n	25b16 <net_shell_cmd_stacks+0xda>
			unused++;
   25b10:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   25b12:	3301      	adds	r3, #1
   25b14:	e7f5      	b.n	25b02 <net_shell_cmd_stacks+0xc6>
   25b16:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   25b1a:	2364      	movs	r3, #100	; 0x64
   25b1c:	fb03 f301 	mul.w	r3, r3, r1
   25b20:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   25b22:	9304      	str	r3, [sp, #16]
   25b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
   25b28:	9303      	str	r3, [sp, #12]
   25b2a:	9102      	str	r1, [sp, #8]
   25b2c:	9201      	str	r2, [sp, #4]
   25b2e:	9300      	str	r3, [sp, #0]
   25b30:	4a0e      	ldr	r2, [pc, #56]	; (25b6c <net_shell_cmd_stacks+0x130>)
   25b32:	490f      	ldr	r1, [pc, #60]	; (25b70 <net_shell_cmd_stacks+0x134>)
   25b34:	4808      	ldr	r0, [pc, #32]	; (25b58 <net_shell_cmd_stacks+0x11c>)
   25b36:	f7dd fb2b 	bl	3190 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   25b3a:	2000      	movs	r0, #0
   25b3c:	b007      	add	sp, #28
   25b3e:	bd30      	pop	{r4, r5, pc}
   25b40:	2000d514 	.word	0x2000d514
   25b44:	00033ef4 	.word	0x00033ef4
   25b48:	2000d550 	.word	0x2000d550
   25b4c:	2000a3b0 	.word	0x2000a3b0
   25b50:	00033f38 	.word	0x00033f38
   25b54:	00033f44 	.word	0x00033f44
   25b58:	00033f4c 	.word	0x00033f4c
   25b5c:	2000acf0 	.word	0x2000acf0
   25b60:	00033f8c 	.word	0x00033f8c
   25b64:	00033fa0 	.word	0x00033fa0
   25b68:	2000b4f0 	.word	0x2000b4f0
   25b6c:	00033fa4 	.word	0x00033fa4
   25b70:	00033fb8 	.word	0x00033fb8

00025b74 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   25b74:	b510      	push	{r4, lr}
   25b76:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   25b78:	4c34      	ldr	r4, [pc, #208]	; (25c4c <net_shell_cmd_stats+0xd8>)
   25b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25b7c:	9300      	str	r3, [sp, #0]
   25b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25b80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   25b82:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25b84:	4832      	ldr	r0, [pc, #200]	; (25c50 <net_shell_cmd_stats+0xdc>)
   25b86:	f7dd fb03 	bl	3190 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   25b8a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   25b8e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   25b92:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   25b96:	482f      	ldr	r0, [pc, #188]	; (25c54 <net_shell_cmd_stats+0xe0>)
   25b98:	f7dd fafa 	bl	3190 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   25b9c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   25ba0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   25ba4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   25ba8:	482b      	ldr	r0, [pc, #172]	; (25c58 <net_shell_cmd_stats+0xe4>)
   25baa:	f7dd faf1 	bl	3190 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   25bae:	6963      	ldr	r3, [r4, #20]
   25bb0:	6922      	ldr	r2, [r4, #16]
   25bb2:	68e1      	ldr	r1, [r4, #12]
   25bb4:	4829      	ldr	r0, [pc, #164]	; (25c5c <net_shell_cmd_stats+0xe8>)
   25bb6:	f7dd faeb 	bl	3190 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   25bba:	6a23      	ldr	r3, [r4, #32]
   25bbc:	69e2      	ldr	r2, [r4, #28]
   25bbe:	69a1      	ldr	r1, [r4, #24]
   25bc0:	4827      	ldr	r0, [pc, #156]	; (25c60 <net_shell_cmd_stats+0xec>)
   25bc2:	f7dd fae5 	bl	3190 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   25bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   25bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25bcc:	4825      	ldr	r0, [pc, #148]	; (25c64 <net_shell_cmd_stats+0xf0>)
   25bce:	f7dd fadf 	bl	3190 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   25bd2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   25bd4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   25bd6:	4824      	ldr	r0, [pc, #144]	; (25c68 <net_shell_cmd_stats+0xf4>)
   25bd8:	f7dd fada 	bl	3190 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   25bdc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25bde:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   25be2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   25be6:	4821      	ldr	r0, [pc, #132]	; (25c6c <net_shell_cmd_stats+0xf8>)
   25be8:	f7dd fad2 	bl	3190 <printk>
	printk("UDP chkerr     %d\n",
   25bec:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   25bf0:	481f      	ldr	r0, [pc, #124]	; (25c70 <net_shell_cmd_stats+0xfc>)
   25bf2:	f7dd facd 	bl	3190 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   25bf6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25bf8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   25bfa:	481e      	ldr	r0, [pc, #120]	; (25c74 <net_shell_cmd_stats+0x100>)
   25bfc:	f7dd fac8 	bl	3190 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   25c00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25c02:	6da2      	ldr	r2, [r4, #88]	; 0x58
   25c04:	6d61      	ldr	r1, [r4, #84]	; 0x54
   25c06:	481c      	ldr	r0, [pc, #112]	; (25c78 <net_shell_cmd_stats+0x104>)
   25c08:	f7dd fac2 	bl	3190 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   25c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25c0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   25c10:	6d21      	ldr	r1, [r4, #80]	; 0x50
   25c12:	481a      	ldr	r0, [pc, #104]	; (25c7c <net_shell_cmd_stats+0x108>)
   25c14:	f7dd fabc 	bl	3190 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   25c18:	6f23      	ldr	r3, [r4, #112]	; 0x70
   25c1a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   25c1c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   25c1e:	4818      	ldr	r0, [pc, #96]	; (25c80 <net_shell_cmd_stats+0x10c>)
   25c20:	f7dd fab6 	bl	3190 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   25c24:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   25c26:	6f61      	ldr	r1, [r4, #116]	; 0x74
   25c28:	4816      	ldr	r0, [pc, #88]	; (25c84 <net_shell_cmd_stats+0x110>)
   25c2a:	f7dd fab1 	bl	3190 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   25c2e:	68a1      	ldr	r1, [r4, #8]
   25c30:	4815      	ldr	r0, [pc, #84]	; (25c88 <net_shell_cmd_stats+0x114>)
   25c32:	f7dd faad 	bl	3190 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   25c36:	6861      	ldr	r1, [r4, #4]
   25c38:	4814      	ldr	r0, [pc, #80]	; (25c8c <net_shell_cmd_stats+0x118>)
   25c3a:	f7dd faa9 	bl	3190 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   25c3e:	6821      	ldr	r1, [r4, #0]
   25c40:	4813      	ldr	r0, [pc, #76]	; (25c90 <net_shell_cmd_stats+0x11c>)
   25c42:	f7dd faa5 	bl	3190 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   25c46:	2000      	movs	r0, #0
   25c48:	b002      	add	sp, #8
   25c4a:	bd10      	pop	{r4, pc}
   25c4c:	20002ae0 	.word	0x20002ae0
   25c50:	00033fc0 	.word	0x00033fc0
   25c54:	00033ff0 	.word	0x00033ff0
   25c58:	00034014 	.word	0x00034014
   25c5c:	00034038 	.word	0x00034038
   25c60:	00034064 	.word	0x00034064
   25c64:	0003408c 	.word	0x0003408c
   25c68:	000340b0 	.word	0x000340b0
   25c6c:	000340d0 	.word	0x000340d0
   25c70:	000340f4 	.word	0x000340f4
   25c74:	00034108 	.word	0x00034108
   25c78:	00034124 	.word	0x00034124
   25c7c:	00034148 	.word	0x00034148
   25c80:	00034170 	.word	0x00034170
   25c84:	00034198 	.word	0x00034198
   25c88:	000341b8 	.word	0x000341b8
   25c8c:	000341cc 	.word	0x000341cc
   25c90:	000341e0 	.word	0x000341e0

00025c94 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   25c94:	b508      	push	{r3, lr}
	printk("Message sent\n");
   25c96:	4802      	ldr	r0, [pc, #8]	; (25ca0 <tcp_sent_cb+0xc>)
   25c98:	f7dd fa7a 	bl	3190 <printk>
   25c9c:	bd08      	pop	{r3, pc}
   25c9e:	bf00      	nop
   25ca0:	000344a0 	.word	0x000344a0

00025ca4 <net_shell_cmd_conn>:
{
   25ca4:	b510      	push	{r4, lr}
   25ca6:	b082      	sub	sp, #8
	int count = 0;
   25ca8:	ac02      	add	r4, sp, #8
   25caa:	2300      	movs	r3, #0
   25cac:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   25cb0:	4810      	ldr	r0, [pc, #64]	; (25cf4 <net_shell_cmd_conn+0x50>)
   25cb2:	f7dd fa6d 	bl	3190 <printk>
	net_context_foreach(context_cb, &count);
   25cb6:	4621      	mov	r1, r4
   25cb8:	480f      	ldr	r0, [pc, #60]	; (25cf8 <net_shell_cmd_conn+0x54>)
   25cba:	f7f8 ff03 	bl	1eac4 <net_context_foreach>
	if (count == 0) {
   25cbe:	9b01      	ldr	r3, [sp, #4]
   25cc0:	b17b      	cbz	r3, 25ce2 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   25cc2:	490e      	ldr	r1, [pc, #56]	; (25cfc <net_shell_cmd_conn+0x58>)
   25cc4:	480e      	ldr	r0, [pc, #56]	; (25d00 <net_shell_cmd_conn+0x5c>)
   25cc6:	f7dd fa63 	bl	3190 <printk>
	count = 0;
   25cca:	a902      	add	r1, sp, #8
   25ccc:	2300      	movs	r3, #0
   25cce:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   25cd2:	480c      	ldr	r0, [pc, #48]	; (25d04 <net_shell_cmd_conn+0x60>)
   25cd4:	f7ff fa48 	bl	25168 <net_tcp_foreach>
	if (count == 0) {
   25cd8:	9b01      	ldr	r3, [sp, #4]
   25cda:	b133      	cbz	r3, 25cea <net_shell_cmd_conn+0x46>
}
   25cdc:	2000      	movs	r0, #0
   25cde:	b002      	add	sp, #8
   25ce0:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   25ce2:	4809      	ldr	r0, [pc, #36]	; (25d08 <net_shell_cmd_conn+0x64>)
   25ce4:	f7dd fa54 	bl	3190 <printk>
   25ce8:	e7eb      	b.n	25cc2 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   25cea:	4808      	ldr	r0, [pc, #32]	; (25d0c <net_shell_cmd_conn+0x68>)
   25cec:	f7dd fa50 	bl	3190 <printk>
   25cf0:	e7f4      	b.n	25cdc <net_shell_cmd_conn+0x38>
   25cf2:	bf00      	nop
   25cf4:	00033bec 	.word	0x00033bec
   25cf8:	00025e81 	.word	0x00025e81
   25cfc:	00030afc 	.word	0x00030afc
   25d00:	00033c3c 	.word	0x00033c3c
   25d04:	00025d11 	.word	0x00025d11
   25d08:	00033c2c 	.word	0x00033c2c
   25d0c:	00033c7c 	.word	0x00033c7c

00025d10 <tcp_cb>:
{
   25d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d14:	b084      	sub	sp, #16
   25d16:	4604      	mov	r4, r0
   25d18:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   25d1a:	f7fe ffe4 	bl	24ce6 <net_tcp_get_recv_mss>
   25d1e:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   25d20:	6823      	ldr	r3, [r4, #0]
   25d22:	895a      	ldrh	r2, [r3, #10]
   25d24:	0215      	lsls	r5, r2, #8
   25d26:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   25d2a:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   25d2c:	8adb      	ldrh	r3, [r3, #22]
   25d2e:	021e      	lsls	r6, r3, #8
   25d30:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   25d34:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   25d36:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   25d3a:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   25d3e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   25d42:	f3c0 3043 	ubfx	r0, r0, #13, #4
   25d46:	f7ff f845 	bl	24dd4 <net_tcp_state_str>
   25d4a:	9003      	str	r0, [sp, #12]
   25d4c:	f8cd 8008 	str.w	r8, [sp, #8]
   25d50:	f8cd a004 	str.w	sl, [sp, #4]
   25d54:	f8cd 9000 	str.w	r9, [sp]
   25d58:	4633      	mov	r3, r6
   25d5a:	462a      	mov	r2, r5
   25d5c:	4621      	mov	r1, r4
   25d5e:	4804      	ldr	r0, [pc, #16]	; (25d70 <tcp_cb+0x60>)
   25d60:	f7dd fa16 	bl	3190 <printk>
	(*count)++;
   25d64:	683b      	ldr	r3, [r7, #0]
   25d66:	3301      	adds	r3, #1
   25d68:	603b      	str	r3, [r7, #0]
}
   25d6a:	b004      	add	sp, #16
   25d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25d70:	000343fc 	.word	0x000343fc

00025d74 <get_addresses>:
{
   25d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25d78:	b083      	sub	sp, #12
   25d7a:	460d      	mov	r5, r1
   25d7c:	4616      	mov	r6, r2
   25d7e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   25d80:	8903      	ldrh	r3, [r0, #8]
   25d82:	2b0a      	cmp	r3, #10
   25d84:	d008      	beq.n	25d98 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   25d86:	b393      	cbz	r3, 25dee <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   25d88:	4a1c      	ldr	r2, [pc, #112]	; (25dfc <get_addresses+0x88>)
   25d8a:	4631      	mov	r1, r6
   25d8c:	4628      	mov	r0, r5
   25d8e:	f7dd fa0d 	bl	31ac <snprintk>
}
   25d92:	b003      	add	sp, #12
   25d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25d98:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   25d9a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 25e04 <get_addresses+0x90>
   25d9e:	2328      	movs	r3, #40	; 0x28
   25da0:	464a      	mov	r2, r9
   25da2:	68c1      	ldr	r1, [r0, #12]
   25da4:	200a      	movs	r0, #10
   25da6:	f7f9 fc1d 	bl	1f5e4 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   25daa:	8962      	ldrh	r2, [r4, #10]
   25dac:	0213      	lsls	r3, r2, #8
   25dae:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   25db2:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   25db4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 25e08 <get_addresses+0x94>
   25db8:	9300      	str	r3, [sp, #0]
   25dba:	4603      	mov	r3, r0
   25dbc:	4642      	mov	r2, r8
   25dbe:	4631      	mov	r1, r6
   25dc0:	4628      	mov	r0, r5
   25dc2:	f7dd f9f3 	bl	31ac <snprintk>
   25dc6:	2328      	movs	r3, #40	; 0x28
   25dc8:	464a      	mov	r2, r9
   25dca:	f104 0118 	add.w	r1, r4, #24
   25dce:	200a      	movs	r0, #10
   25dd0:	f7f9 fc08 	bl	1f5e4 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   25dd4:	8ae2      	ldrh	r2, [r4, #22]
   25dd6:	0213      	lsls	r3, r2, #8
   25dd8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   25ddc:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   25dde:	9300      	str	r3, [sp, #0]
   25de0:	4603      	mov	r3, r0
   25de2:	4642      	mov	r2, r8
   25de4:	990a      	ldr	r1, [sp, #40]	; 0x28
   25de6:	4638      	mov	r0, r7
   25de8:	f7dd f9e0 	bl	31ac <snprintk>
   25dec:	e7d1      	b.n	25d92 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   25dee:	4a04      	ldr	r2, [pc, #16]	; (25e00 <get_addresses+0x8c>)
   25df0:	4631      	mov	r1, r6
   25df2:	4628      	mov	r0, r5
   25df4:	f7dd f9da 	bl	31ac <snprintk>
   25df8:	e7cb      	b.n	25d92 <get_addresses+0x1e>
   25dfa:	bf00      	nop
   25dfc:	000337cc 	.word	0x000337cc
   25e00:	000337c0 	.word	0x000337c0
   25e04:	200024b8 	.word	0x200024b8
   25e08:	000337b8 	.word	0x000337b8

00025e0c <print_connect_info>:
{
   25e0c:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   25e0e:	2802      	cmp	r0, #2
   25e10:	d008      	beq.n	25e24 <print_connect_info+0x18>
   25e12:	460d      	mov	r5, r1
   25e14:	4614      	mov	r4, r2
   25e16:	280a      	cmp	r0, #10
   25e18:	d008      	beq.n	25e2c <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   25e1a:	4601      	mov	r1, r0
   25e1c:	4813      	ldr	r0, [pc, #76]	; (25e6c <print_connect_info+0x60>)
   25e1e:	f7dd f9b7 	bl	3190 <printk>
   25e22:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   25e24:	4812      	ldr	r0, [pc, #72]	; (25e70 <print_connect_info+0x64>)
   25e26:	f7dd f9b3 	bl	3190 <printk>
		break;
   25e2a:	bd70      	pop	{r4, r5, r6, pc}
   25e2c:	4e11      	ldr	r6, [pc, #68]	; (25e74 <print_connect_info+0x68>)
   25e2e:	2328      	movs	r3, #40	; 0x28
   25e30:	4632      	mov	r2, r6
   25e32:	3104      	adds	r1, #4
   25e34:	200a      	movs	r0, #10
   25e36:	f7f9 fbd5 	bl	1f5e4 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   25e3a:	886b      	ldrh	r3, [r5, #2]
   25e3c:	021a      	lsls	r2, r3, #8
   25e3e:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   25e42:	b292      	uxth	r2, r2
   25e44:	4601      	mov	r1, r0
   25e46:	480c      	ldr	r0, [pc, #48]	; (25e78 <print_connect_info+0x6c>)
   25e48:	f7dd f9a2 	bl	3190 <printk>
   25e4c:	2328      	movs	r3, #40	; 0x28
   25e4e:	4632      	mov	r2, r6
   25e50:	1d21      	adds	r1, r4, #4
   25e52:	200a      	movs	r0, #10
   25e54:	f7f9 fbc6 	bl	1f5e4 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   25e58:	8863      	ldrh	r3, [r4, #2]
   25e5a:	021a      	lsls	r2, r3, #8
   25e5c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   25e60:	b292      	uxth	r2, r2
   25e62:	4601      	mov	r1, r0
   25e64:	4805      	ldr	r0, [pc, #20]	; (25e7c <print_connect_info+0x70>)
   25e66:	f7dd f993 	bl	3190 <printk>
		break;
   25e6a:	bd70      	pop	{r4, r5, r6, pc}
   25e6c:	00034394 	.word	0x00034394
   25e70:	00034358 	.word	0x00034358
   25e74:	200024b8 	.word	0x200024b8
   25e78:	0003436c 	.word	0x0003436c
   25e7c:	00034388 	.word	0x00034388

00025e80 <context_cb>:
{
   25e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e82:	b09f      	sub	sp, #124	; 0x7c
   25e84:	4604      	mov	r4, r0
   25e86:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   25e88:	2100      	movs	r1, #0
   25e8a:	9106      	str	r1, [sp, #24]
   25e8c:	222b      	movs	r2, #43	; 0x2b
   25e8e:	a807      	add	r0, sp, #28
   25e90:	f006 f8f4 	bl	2c07c <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   25e94:	222f      	movs	r2, #47	; 0x2f
   25e96:	9200      	str	r2, [sp, #0]
   25e98:	ab06      	add	r3, sp, #24
   25e9a:	a912      	add	r1, sp, #72	; 0x48
   25e9c:	4620      	mov	r0, r4
   25e9e:	f7ff ff69 	bl	25d74 <get_addresses>
	       (*count) + 1, context,
   25ea2:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   25ea4:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   25ea6:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   25eaa:	f7f7 fd0b 	bl	1d8c4 <net_if_get_by_index>
   25eae:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   25eb0:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   25eb4:	f012 0f10 	tst.w	r2, #16
   25eb8:	d022      	beq.n	25f00 <context_cb+0x80>
		return AF_INET6;
   25eba:	210a      	movs	r1, #10
   25ebc:	290a      	cmp	r1, #10
   25ebe:	d021      	beq.n	25f04 <context_cb+0x84>
   25ec0:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   25ec2:	f012 0f20 	tst.w	r2, #32
   25ec6:	d01f      	beq.n	25f08 <context_cb+0x88>
		return SOCK_STREAM;
   25ec8:	2001      	movs	r0, #1
   25eca:	2802      	cmp	r0, #2
   25ecc:	d01e      	beq.n	25f0c <context_cb+0x8c>
   25ece:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   25ed0:	f012 0f40 	tst.w	r2, #64	; 0x40
   25ed4:	d01c      	beq.n	25f10 <context_cb+0x90>
		return IPPROTO_TCP;
   25ed6:	2206      	movs	r2, #6
   25ed8:	2a11      	cmp	r2, #17
   25eda:	d01b      	beq.n	25f14 <context_cb+0x94>
   25edc:	2754      	movs	r7, #84	; 0x54
   25ede:	aa06      	add	r2, sp, #24
   25ee0:	9204      	str	r2, [sp, #16]
   25ee2:	aa12      	add	r2, sp, #72	; 0x48
   25ee4:	9203      	str	r2, [sp, #12]
   25ee6:	9702      	str	r7, [sp, #8]
   25ee8:	9001      	str	r0, [sp, #4]
   25eea:	9100      	str	r1, [sp, #0]
   25eec:	4622      	mov	r2, r4
   25eee:	4631      	mov	r1, r6
   25ef0:	4809      	ldr	r0, [pc, #36]	; (25f18 <context_cb+0x98>)
   25ef2:	f7dd f94d 	bl	3190 <printk>
	(*count)++;
   25ef6:	682b      	ldr	r3, [r5, #0]
   25ef8:	3301      	adds	r3, #1
   25efa:	602b      	str	r3, [r5, #0]
}
   25efc:	b01f      	add	sp, #124	; 0x7c
   25efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   25f00:	2102      	movs	r1, #2
   25f02:	e7db      	b.n	25ebc <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   25f04:	2136      	movs	r1, #54	; 0x36
   25f06:	e7dc      	b.n	25ec2 <context_cb+0x42>
	return SOCK_DGRAM;
   25f08:	2002      	movs	r0, #2
   25f0a:	e7de      	b.n	25eca <context_cb+0x4a>
   25f0c:	2044      	movs	r0, #68	; 0x44
   25f0e:	e7df      	b.n	25ed0 <context_cb+0x50>
	return IPPROTO_UDP;
   25f10:	2211      	movs	r2, #17
   25f12:	e7e1      	b.n	25ed8 <context_cb+0x58>
   25f14:	2755      	movs	r7, #85	; 0x55
   25f16:	e7e2      	b.n	25ede <context_cb+0x5e>
   25f18:	00033778 	.word	0x00033778

00025f1c <net_shell_cmd_iface>:
{
   25f1c:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   25f1e:	2100      	movs	r1, #0
   25f20:	4802      	ldr	r0, [pc, #8]	; (25f2c <net_shell_cmd_iface+0x10>)
   25f22:	f7f7 fceb 	bl	1d8fc <net_if_foreach>
}
   25f26:	2000      	movs	r0, #0
   25f28:	bd08      	pop	{r3, pc}
   25f2a:	bf00      	nop
   25f2c:	00020acd 	.word	0x00020acd

00025f30 <net_shell_cmd_route>:
{
   25f30:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   25f32:	2100      	movs	r1, #0
   25f34:	4802      	ldr	r0, [pc, #8]	; (25f40 <net_shell_cmd_route+0x10>)
   25f36:	f7f7 fce1 	bl	1d8fc <net_if_foreach>
}
   25f3a:	2000      	movs	r0, #0
   25f3c:	bd08      	pop	{r3, pc}
   25f3e:	bf00      	nop
   25f40:	0002636d 	.word	0x0002636d

00025f44 <net_shell_cmd_mem>:
{
   25f44:	b500      	push	{lr}
   25f46:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   25f48:	ab0e      	add	r3, sp, #56	; 0x38
   25f4a:	aa0f      	add	r2, sp, #60	; 0x3c
   25f4c:	a910      	add	r1, sp, #64	; 0x40
   25f4e:	a811      	add	r0, sp, #68	; 0x44
   25f50:	f7f9 f9aa 	bl	1f2a8 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   25f54:	f44f 7100 	mov.w	r1, #512	; 0x200
   25f58:	4819      	ldr	r0, [pc, #100]	; (25fc0 <net_shell_cmd_mem+0x7c>)
   25f5a:	f7dd f919 	bl	3190 <printk>
	printk("Network buffer pools:\n");
   25f5e:	4819      	ldr	r0, [pc, #100]	; (25fc4 <net_shell_cmd_mem+0x80>)
   25f60:	f7dd f916 	bl	3190 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   25f64:	4818      	ldr	r0, [pc, #96]	; (25fc8 <net_shell_cmd_mem+0x84>)
   25f66:	f7dd f913 	bl	3190 <printk>
	printk("Address\t\tTotal\tName\n");
   25f6a:	4818      	ldr	r0, [pc, #96]	; (25fcc <net_shell_cmd_mem+0x88>)
   25f6c:	f7dd f910 	bl	3190 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   25f70:	9911      	ldr	r1, [sp, #68]	; 0x44
   25f72:	688a      	ldr	r2, [r1, #8]
   25f74:	4816      	ldr	r0, [pc, #88]	; (25fd0 <net_shell_cmd_mem+0x8c>)
   25f76:	f7dd f90b 	bl	3190 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   25f7a:	9910      	ldr	r1, [sp, #64]	; 0x40
   25f7c:	688a      	ldr	r2, [r1, #8]
   25f7e:	4815      	ldr	r0, [pc, #84]	; (25fd4 <net_shell_cmd_mem+0x90>)
   25f80:	f7dd f906 	bl	3190 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   25f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
   25f86:	8a0a      	ldrh	r2, [r1, #16]
   25f88:	4813      	ldr	r0, [pc, #76]	; (25fd8 <net_shell_cmd_mem+0x94>)
   25f8a:	f7dd f901 	bl	3190 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   25f8e:	990e      	ldr	r1, [sp, #56]	; 0x38
   25f90:	8a0a      	ldrh	r2, [r1, #16]
   25f92:	4812      	ldr	r0, [pc, #72]	; (25fdc <net_shell_cmd_mem+0x98>)
   25f94:	f7dd f8fc 	bl	3190 <printk>
		memset(&info, 0, sizeof(info));
   25f98:	2238      	movs	r2, #56	; 0x38
   25f9a:	2100      	movs	r1, #0
   25f9c:	4668      	mov	r0, sp
   25f9e:	f006 f86d 	bl	2c07c <memset>
		net_context_foreach(context_info, &info);
   25fa2:	4669      	mov	r1, sp
   25fa4:	480e      	ldr	r0, [pc, #56]	; (25fe0 <net_shell_cmd_mem+0x9c>)
   25fa6:	f7f8 fd8d 	bl	1eac4 <net_context_foreach>
		if (!info.are_external_pools) {
   25faa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   25fae:	b11b      	cbz	r3, 25fb8 <net_shell_cmd_mem+0x74>
}
   25fb0:	2000      	movs	r0, #0
   25fb2:	b013      	add	sp, #76	; 0x4c
   25fb4:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   25fb8:	480a      	ldr	r0, [pc, #40]	; (25fe4 <net_shell_cmd_mem+0xa0>)
   25fba:	f7dd f8e9 	bl	3190 <printk>
   25fbe:	e7f7      	b.n	25fb0 <net_shell_cmd_mem+0x6c>
   25fc0:	00033d14 	.word	0x00033d14
   25fc4:	00033d30 	.word	0x00033d30
   25fc8:	00033d48 	.word	0x00033d48
   25fcc:	00033d74 	.word	0x00033d74
   25fd0:	00033d8c 	.word	0x00033d8c
   25fd4:	00033d98 	.word	0x00033d98
   25fd8:	00033da4 	.word	0x00033da4
   25fdc:	00033db4 	.word	0x00033db4
   25fe0:	000259b1 	.word	0x000259b1
   25fe4:	00033dc4 	.word	0x00033dc4

00025fe8 <net_shell_cmd_nbr>:
{
   25fe8:	b510      	push	{r4, lr}
   25fea:	b086      	sub	sp, #24
	int count = 0;
   25fec:	2300      	movs	r3, #0
   25fee:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   25ff0:	6848      	ldr	r0, [r1, #4]
   25ff2:	b1d8      	cbz	r0, 2602c <net_shell_cmd_nbr+0x44>
   25ff4:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   25ff6:	4920      	ldr	r1, [pc, #128]	; (26078 <net_shell_cmd_nbr+0x90>)
   25ff8:	f7da fa06 	bl	408 <strcmp>
   25ffc:	b9f8      	cbnz	r0, 2603e <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   25ffe:	68a1      	ldr	r1, [r4, #8]
   26000:	b311      	cbz	r1, 26048 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   26002:	aa01      	add	r2, sp, #4
   26004:	200a      	movs	r0, #10
   26006:	f7f9 fbc4 	bl	1f792 <net_addr_pton>
		if (ret < 0) {
   2600a:	2800      	cmp	r0, #0
   2600c:	db20      	blt.n	26050 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   2600e:	a901      	add	r1, sp, #4
   26010:	2000      	movs	r0, #0
   26012:	f7fb f83f 	bl	21094 <net_ipv6_nbr_rm>
   26016:	bb00      	cbnz	r0, 2605a <net_shell_cmd_nbr+0x72>
   26018:	2328      	movs	r3, #40	; 0x28
   2601a:	4a18      	ldr	r2, [pc, #96]	; (2607c <net_shell_cmd_nbr+0x94>)
   2601c:	a901      	add	r1, sp, #4
   2601e:	200a      	movs	r0, #10
   26020:	f7f9 fae0 	bl	1f5e4 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   26024:	4601      	mov	r1, r0
   26026:	4816      	ldr	r0, [pc, #88]	; (26080 <net_shell_cmd_nbr+0x98>)
   26028:	f7dd f8b2 	bl	3190 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   2602c:	a905      	add	r1, sp, #20
   2602e:	4815      	ldr	r0, [pc, #84]	; (26084 <net_shell_cmd_nbr+0x9c>)
   26030:	f7fb f822 	bl	21078 <net_ipv6_nbr_foreach>
	if (count == 0) {
   26034:	9b05      	ldr	r3, [sp, #20]
   26036:	b1db      	cbz	r3, 26070 <net_shell_cmd_nbr+0x88>
}
   26038:	2000      	movs	r0, #0
   2603a:	b006      	add	sp, #24
   2603c:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   2603e:	6861      	ldr	r1, [r4, #4]
   26040:	4811      	ldr	r0, [pc, #68]	; (26088 <net_shell_cmd_nbr+0xa0>)
   26042:	f7dd f8a5 	bl	3190 <printk>
			return 0;
   26046:	e7f7      	b.n	26038 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   26048:	4810      	ldr	r0, [pc, #64]	; (2608c <net_shell_cmd_nbr+0xa4>)
   2604a:	f7dd f8a1 	bl	3190 <printk>
			return 0;
   2604e:	e7f3      	b.n	26038 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   26050:	68a1      	ldr	r1, [r4, #8]
   26052:	480f      	ldr	r0, [pc, #60]	; (26090 <net_shell_cmd_nbr+0xa8>)
   26054:	f7dd f89c 	bl	3190 <printk>
			return 0;
   26058:	e7ee      	b.n	26038 <net_shell_cmd_nbr+0x50>
   2605a:	2328      	movs	r3, #40	; 0x28
   2605c:	4a07      	ldr	r2, [pc, #28]	; (2607c <net_shell_cmd_nbr+0x94>)
   2605e:	a901      	add	r1, sp, #4
   26060:	200a      	movs	r0, #10
   26062:	f7f9 fabf 	bl	1f5e4 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   26066:	4601      	mov	r1, r0
   26068:	480a      	ldr	r0, [pc, #40]	; (26094 <net_shell_cmd_nbr+0xac>)
   2606a:	f7dd f891 	bl	3190 <printk>
   2606e:	e7dd      	b.n	2602c <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   26070:	4809      	ldr	r0, [pc, #36]	; (26098 <net_shell_cmd_nbr+0xb0>)
   26072:	f7dd f88d 	bl	3190 <printk>
   26076:	e7df      	b.n	26038 <net_shell_cmd_nbr+0x50>
   26078:	00033de8 	.word	0x00033de8
   2607c:	200024b8 	.word	0x200024b8
   26080:	00033e38 	.word	0x00033e38
   26084:	00026141 	.word	0x00026141
   26088:	00033dec 	.word	0x00033dec
   2608c:	00033e04 	.word	0x00033e04
   26090:	00033e24 	.word	0x00033e24
   26094:	00033e54 	.word	0x00033e54
   26098:	00033e6c 	.word	0x00033e6c

0002609c <route_cb>:
{
   2609c:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   2609e:	68c3      	ldr	r3, [r0, #12]
   260a0:	428b      	cmp	r3, r1
   260a2:	d000      	beq.n	260a6 <route_cb+0xa>
   260a4:	bd38      	pop	{r3, r4, r5, pc}
   260a6:	4604      	mov	r4, r0
   260a8:	2328      	movs	r3, #40	; 0x28
   260aa:	4a1e      	ldr	r2, [pc, #120]	; (26124 <route_cb+0x88>)
   260ac:	f100 0110 	add.w	r1, r0, #16
   260b0:	200a      	movs	r0, #10
   260b2:	f7f9 fa97 	bl	1f5e4 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   260b6:	f894 2020 	ldrb.w	r2, [r4, #32]
   260ba:	4601      	mov	r1, r0
   260bc:	481a      	ldr	r0, [pc, #104]	; (26128 <route_cb+0x8c>)
   260be:	f7dd f867 	bl	3190 <printk>
	return list->head;
   260c2:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   260c4:	2500      	movs	r5, #0
   260c6:	e009      	b.n	260dc <route_cb+0x40>
			printk("addr : <unknown>\n");
   260c8:	4818      	ldr	r0, [pc, #96]	; (2612c <route_cb+0x90>)
   260ca:	f7dd f861 	bl	3190 <printk>
		count++;
   260ce:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   260d0:	4622      	mov	r2, r4
   260d2:	b1dc      	cbz	r4, 2610c <route_cb+0x70>
	return node->next;
   260d4:	6823      	ldr	r3, [r4, #0]
   260d6:	b1db      	cbz	r3, 26110 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   260d8:	b1e2      	cbz	r2, 26114 <route_cb+0x78>
	return node->next;
   260da:	6824      	ldr	r4, [r4, #0]
   260dc:	b1e4      	cbz	r4, 26118 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   260de:	6861      	ldr	r1, [r4, #4]
   260e0:	2900      	cmp	r1, #0
   260e2:	d0f5      	beq.n	260d0 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   260e4:	4812      	ldr	r0, [pc, #72]	; (26130 <route_cb+0x94>)
   260e6:	f7dd f853 	bl	3190 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   260ea:	6863      	ldr	r3, [r4, #4]
   260ec:	7858      	ldrb	r0, [r3, #1]
   260ee:	28ff      	cmp	r0, #255	; 0xff
   260f0:	d0ea      	beq.n	260c8 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   260f2:	f7fa fcc1 	bl	20a78 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   260f6:	2318      	movs	r3, #24
   260f8:	4a0e      	ldr	r2, [pc, #56]	; (26134 <route_cb+0x98>)
   260fa:	7841      	ldrb	r1, [r0, #1]
   260fc:	3002      	adds	r0, #2
   260fe:	f7f9 fa47 	bl	1f590 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   26102:	4601      	mov	r1, r0
   26104:	480c      	ldr	r0, [pc, #48]	; (26138 <route_cb+0x9c>)
   26106:	f7dd f843 	bl	3190 <printk>
   2610a:	e7e0      	b.n	260ce <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2610c:	4623      	mov	r3, r4
   2610e:	e7e2      	b.n	260d6 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   26110:	2400      	movs	r4, #0
   26112:	e7e3      	b.n	260dc <route_cb+0x40>
   26114:	2400      	movs	r4, #0
   26116:	e7e1      	b.n	260dc <route_cb+0x40>
	if (count == 0) {
   26118:	2d00      	cmp	r5, #0
   2611a:	d1c3      	bne.n	260a4 <route_cb+0x8>
		printk("\t<none>\n");
   2611c:	4807      	ldr	r0, [pc, #28]	; (2613c <route_cb+0xa0>)
   2611e:	f7dd f837 	bl	3190 <printk>
   26122:	e7bf      	b.n	260a4 <route_cb+0x8>
   26124:	200024b8 	.word	0x200024b8
   26128:	000343b4 	.word	0x000343b4
   2612c:	000343dc 	.word	0x000343dc
   26130:	000343cc 	.word	0x000343cc
   26134:	200024a0 	.word	0x200024a0
   26138:	000343f0 	.word	0x000343f0
   2613c:	000338f8 	.word	0x000338f8

00026140 <nbr_cb>:
{
   26140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26144:	b08f      	sub	sp, #60	; 0x3c
   26146:	4604      	mov	r4, r0
   26148:	460d      	mov	r5, r1
	if (*count == 0) {
   2614a:	680b      	ldr	r3, [r1, #0]
   2614c:	2b00      	cmp	r3, #0
   2614e:	d052      	beq.n	261f6 <nbr_cb+0xb6>
	(*count)++;
   26150:	682b      	ldr	r3, [r5, #0]
   26152:	3301      	adds	r3, #1
   26154:	602b      	str	r3, [r5, #0]
   26156:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   26158:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   2615c:	f7fa ff68 	bl	21030 <net_ipv6_nbr_state2str>
   26160:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   26162:	f7da facd 	bl	700 <strlen>
   26166:	2805      	cmp	r0, #5
   26168:	d04a      	beq.n	26200 <nbr_cb+0xc0>
	char *state_pad = "";
   2616a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 26214 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   2616e:	682b      	ldr	r3, [r5, #0]
   26170:	930c      	str	r3, [sp, #48]	; 0x30
   26172:	68a3      	ldr	r3, [r4, #8]
   26174:	930d      	str	r3, [sp, #52]	; 0x34
   26176:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   26178:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   2617c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   2617e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   26182:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   26186:	3020      	adds	r0, #32
   26188:	f005 fa10 	bl	2b5ac <_timeout_remaining_get>
   2618c:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   2618e:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   26190:	28ff      	cmp	r0, #255	; 0xff
   26192:	d038      	beq.n	26206 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   26194:	f7fa fc70 	bl	20a78 <net_nbr_get_lladdr>
   26198:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   2619c:	7860      	ldrb	r0, [r4, #1]
   2619e:	f7fa fc6b 	bl	20a78 <net_nbr_get_lladdr>
   261a2:	2318      	movs	r3, #24
   261a4:	4a19      	ldr	r2, [pc, #100]	; (2620c <nbr_cb+0xcc>)
   261a6:	7841      	ldrb	r1, [r0, #1]
   261a8:	4658      	mov	r0, fp
   261aa:	f7f9 f9f1 	bl	1f590 <net_sprint_ll_addr_buf>
   261ae:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   261b0:	7860      	ldrb	r0, [r4, #1]
   261b2:	f7fa fc61 	bl	20a78 <net_nbr_get_lladdr>
   261b6:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   261b8:	2328      	movs	r3, #40	; 0x28
   261ba:	4a15      	ldr	r2, [pc, #84]	; (26210 <nbr_cb+0xd0>)
   261bc:	3104      	adds	r1, #4
   261be:	200a      	movs	r0, #10
   261c0:	f7f9 fa10 	bl	1f5e4 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   261c4:	9009      	str	r0, [sp, #36]	; 0x24
   261c6:	4b13      	ldr	r3, [pc, #76]	; (26214 <nbr_cb+0xd4>)
   261c8:	9308      	str	r3, [sp, #32]
   261ca:	f8cd b01c 	str.w	fp, [sp, #28]
   261ce:	f8cd a018 	str.w	sl, [sp, #24]
   261d2:	f8cd 9014 	str.w	r9, [sp, #20]
   261d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   261d8:	9304      	str	r3, [sp, #16]
   261da:	f8cd 800c 	str.w	r8, [sp, #12]
   261de:	9702      	str	r7, [sp, #8]
   261e0:	9601      	str	r6, [sp, #4]
   261e2:	9500      	str	r5, [sp, #0]
   261e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   261e6:	4622      	mov	r2, r4
   261e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   261ea:	480b      	ldr	r0, [pc, #44]	; (26218 <nbr_cb+0xd8>)
   261ec:	f7dc ffd0 	bl	3190 <printk>
}
   261f0:	b00f      	add	sp, #60	; 0x3c
   261f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   261f6:	4907      	ldr	r1, [pc, #28]	; (26214 <nbr_cb+0xd4>)
   261f8:	4808      	ldr	r0, [pc, #32]	; (2621c <nbr_cb+0xdc>)
   261fa:	f7dc ffc9 	bl	3190 <printk>
   261fe:	e7a7      	b.n	26150 <nbr_cb+0x10>
		state_pad = "    ";
   26200:	f8df 901c 	ldr.w	r9, [pc, #28]	; 26220 <nbr_cb+0xe0>
   26204:	e7b3      	b.n	2616e <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   26206:	f8df b01c 	ldr.w	fp, [pc, #28]	; 26224 <nbr_cb+0xe4>
   2620a:	e7d1      	b.n	261b0 <nbr_cb+0x70>
   2620c:	200024a0 	.word	0x200024a0
   26210:	200024b8 	.word	0x200024b8
   26214:	00030afc 	.word	0x00030afc
   26218:	00033aa4 	.word	0x00033aa4
   2621c:	00033a4c 	.word	0x00033a4c
   26220:	0003036c 	.word	0x0003036c
   26224:	00033a48 	.word	0x00033a48

00026228 <_ping_ipv6>:
{
   26228:	b570      	push	{r4, r5, r6, lr}
   2622a:	b084      	sub	sp, #16
   2622c:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   2622e:	f7f6 fbb1 	bl	1c994 <net_if_get_default>
   26232:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   26234:	466a      	mov	r2, sp
   26236:	4629      	mov	r1, r5
   26238:	200a      	movs	r0, #10
   2623a:	f7f9 faaa 	bl	1f792 <net_addr_pton>
   2623e:	2800      	cmp	r0, #0
   26240:	db26      	blt.n	26290 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   26242:	4815      	ldr	r0, [pc, #84]	; (26298 <_ping_ipv6+0x70>)
   26244:	f7f9 fe0c 	bl	1fe60 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   26248:	4669      	mov	r1, sp
   2624a:	2000      	movs	r0, #0
   2624c:	f7fb fa4c 	bl	216e8 <net_ipv6_nbr_lookup>
	if (nbr) {
   26250:	b100      	cbz	r0, 26254 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   26252:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   26254:	4669      	mov	r1, sp
   26256:	2000      	movs	r0, #0
   26258:	f7fd ffc4 	bl	241e4 <net_route_lookup>
	if (route) {
   2625c:	b100      	cbz	r0, 26260 <_ping_ipv6+0x38>
		iface = route->iface;
   2625e:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   26260:	f7db fffc 	bl	225c <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   26264:	b286      	uxth	r6, r0
					   sys_rand32_get());
   26266:	f7db fff9 	bl	225c <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   2626a:	b283      	uxth	r3, r0
   2626c:	4632      	mov	r2, r6
   2626e:	4669      	mov	r1, sp
   26270:	4620      	mov	r0, r4
   26272:	f7fa fa8f 	bl	20794 <net_icmpv6_send_echo_request>
	if (ret) {
   26276:	4604      	mov	r4, r0
   26278:	b930      	cbnz	r0, 26288 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   2627a:	4629      	mov	r1, r5
   2627c:	4807      	ldr	r0, [pc, #28]	; (2629c <_ping_ipv6+0x74>)
   2627e:	f7dc ff87 	bl	3190 <printk>
}
   26282:	4620      	mov	r0, r4
   26284:	b004      	add	sp, #16
   26286:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   26288:	4803      	ldr	r0, [pc, #12]	; (26298 <_ping_ipv6+0x70>)
   2628a:	f7f9 fdf5 	bl	1fe78 <net_icmpv6_unregister_handler>
   2628e:	e7f8      	b.n	26282 <_ping_ipv6+0x5a>
		return -EINVAL;
   26290:	f06f 0415 	mvn.w	r4, #21
   26294:	e7f5      	b.n	26282 <_ping_ipv6+0x5a>
   26296:	bf00      	nop
   26298:	2000c594 	.word	0x2000c594
   2629c:	00033764 	.word	0x00033764

000262a0 <net_shell_cmd_ping>:
{
   262a0:	b510      	push	{r4, lr}
   262a2:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   262a4:	4912      	ldr	r1, [pc, #72]	; (262f0 <net_shell_cmd_ping+0x50>)
   262a6:	6820      	ldr	r0, [r4, #0]
   262a8:	f7da f8ae 	bl	408 <strcmp>
   262ac:	b958      	cbnz	r0, 262c6 <net_shell_cmd_ping+0x26>
		host = argv[1];
   262ae:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   262b0:	f7ff ffba 	bl	26228 <_ping_ipv6>
	if (!ret) {
   262b4:	b168      	cbz	r0, 262d2 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   262b6:	f110 0f05 	cmn.w	r0, #5
   262ba:	d006      	beq.n	262ca <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   262bc:	480d      	ldr	r0, [pc, #52]	; (262f4 <net_shell_cmd_ping+0x54>)
   262be:	f7dc ff67 	bl	3190 <printk>
}
   262c2:	2000      	movs	r0, #0
   262c4:	bd10      	pop	{r4, pc}
		host = argv[2];
   262c6:	68a0      	ldr	r0, [r4, #8]
   262c8:	e7f2      	b.n	262b0 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   262ca:	480b      	ldr	r0, [pc, #44]	; (262f8 <net_shell_cmd_ping+0x58>)
   262cc:	f7dc ff60 	bl	3190 <printk>
		return 0;
   262d0:	e7f7      	b.n	262c2 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   262d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   262d6:	4809      	ldr	r0, [pc, #36]	; (262fc <net_shell_cmd_ping+0x5c>)
   262d8:	f004 fc30 	bl	2ab3c <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   262dc:	f110 0f0b 	cmn.w	r0, #11
   262e0:	d1ef      	bne.n	262c2 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   262e2:	4807      	ldr	r0, [pc, #28]	; (26300 <net_shell_cmd_ping+0x60>)
   262e4:	f7dc ff54 	bl	3190 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   262e8:	4806      	ldr	r0, [pc, #24]	; (26304 <net_shell_cmd_ping+0x64>)
   262ea:	f7f9 fdc5 	bl	1fe78 <net_icmpv6_unregister_handler>
   262ee:	e7e8      	b.n	262c2 <net_shell_cmd_ping+0x22>
   262f0:	00033e7c 	.word	0x00033e7c
   262f4:	00033e9c 	.word	0x00033e9c
   262f8:	00033e84 	.word	0x00033e84
   262fc:	2000d0e0 	.word	0x2000d0e0
   26300:	00033eb0 	.word	0x00033eb0
   26304:	2000c594 	.word	0x2000c594

00026308 <_handle_ipv6_echo_reply>:
{
   26308:	b530      	push	{r4, r5, lr}
   2630a:	b08b      	sub	sp, #44	; 0x2c
   2630c:	4605      	mov	r5, r0
	return pkt->frags->data;
   2630e:	6883      	ldr	r3, [r0, #8]
   26310:	6899      	ldr	r1, [r3, #8]
   26312:	4c11      	ldr	r4, [pc, #68]	; (26358 <_handle_ipv6_echo_reply+0x50>)
   26314:	2328      	movs	r3, #40	; 0x28
   26316:	4622      	mov	r2, r4
   26318:	3118      	adds	r1, #24
   2631a:	200a      	movs	r0, #10
   2631c:	f7f9 f962 	bl	1f5e4 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   26320:	4603      	mov	r3, r0
   26322:	4a0e      	ldr	r2, [pc, #56]	; (2635c <_handle_ipv6_echo_reply+0x54>)
   26324:	2128      	movs	r1, #40	; 0x28
   26326:	4668      	mov	r0, sp
   26328:	f7dc ff40 	bl	31ac <snprintk>
   2632c:	68ab      	ldr	r3, [r5, #8]
   2632e:	6899      	ldr	r1, [r3, #8]
   26330:	2328      	movs	r3, #40	; 0x28
   26332:	4622      	mov	r2, r4
   26334:	3108      	adds	r1, #8
   26336:	200a      	movs	r0, #10
   26338:	f7f9 f954 	bl	1f5e4 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   2633c:	466a      	mov	r2, sp
   2633e:	4601      	mov	r1, r0
   26340:	4807      	ldr	r0, [pc, #28]	; (26360 <_handle_ipv6_echo_reply+0x58>)
   26342:	f7dc ff25 	bl	3190 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   26346:	4807      	ldr	r0, [pc, #28]	; (26364 <_handle_ipv6_echo_reply+0x5c>)
   26348:	f004 fbe5 	bl	2ab16 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   2634c:	4806      	ldr	r0, [pc, #24]	; (26368 <_handle_ipv6_echo_reply+0x60>)
   2634e:	f7f9 fd93 	bl	1fe78 <net_icmpv6_unregister_handler>
}
   26352:	2000      	movs	r0, #0
   26354:	b00b      	add	sp, #44	; 0x2c
   26356:	bd30      	pop	{r4, r5, pc}
   26358:	200024b8 	.word	0x200024b8
   2635c:	0002ff88 	.word	0x0002ff88
   26360:	00033740 	.word	0x00033740
   26364:	2000d0e0 	.word	0x2000d0e0
   26368:	2000c594 	.word	0x2000c594

0002636c <iface_per_route_cb>:
{
   2636c:	b510      	push	{r4, lr}
   2636e:	b082      	sub	sp, #8
   26370:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   26372:	a901      	add	r1, sp, #4
   26374:	f7ff faba 	bl	258ec <iface2str>
   26378:	4602      	mov	r2, r0
   2637a:	4621      	mov	r1, r4
   2637c:	4806      	ldr	r0, [pc, #24]	; (26398 <iface_per_route_cb+0x2c>)
   2637e:	f7dc ff07 	bl	3190 <printk>
	printk("=======================================%s\n", extra);
   26382:	9901      	ldr	r1, [sp, #4]
   26384:	4805      	ldr	r0, [pc, #20]	; (2639c <iface_per_route_cb+0x30>)
   26386:	f7dc ff03 	bl	3190 <printk>
	net_route_foreach(route_cb, iface);
   2638a:	4621      	mov	r1, r4
   2638c:	4804      	ldr	r0, [pc, #16]	; (263a0 <iface_per_route_cb+0x34>)
   2638e:	f7fe f829 	bl	243e4 <net_route_foreach>
}
   26392:	b002      	add	sp, #8
   26394:	bd10      	pop	{r4, pc}
   26396:	bf00      	nop
   26398:	000339f8 	.word	0x000339f8
   2639c:	00033a1c 	.word	0x00033a1c
   263a0:	0002609d 	.word	0x0002609d

000263a4 <tcp_connected>:
{
   263a4:	b510      	push	{r4, lr}
	if (status < 0) {
   263a6:	2900      	cmp	r1, #0
   263a8:	db03      	blt.n	263b2 <tcp_connected+0xe>
		printk("TCP connected\n");
   263aa:	4807      	ldr	r0, [pc, #28]	; (263c8 <tcp_connected+0x24>)
   263ac:	f7dc fef0 	bl	3190 <printk>
   263b0:	bd10      	pop	{r4, pc}
   263b2:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   263b4:	4805      	ldr	r0, [pc, #20]	; (263cc <tcp_connected+0x28>)
   263b6:	f7dc feeb 	bl	3190 <printk>
		net_context_put(context);
   263ba:	4620      	mov	r0, r4
   263bc:	f7f8 f834 	bl	1e428 <net_context_put>
		tcp_ctx = NULL;
   263c0:	2200      	movs	r2, #0
   263c2:	4b03      	ldr	r3, [pc, #12]	; (263d0 <tcp_connected+0x2c>)
   263c4:	601a      	str	r2, [r3, #0]
   263c6:	bd10      	pop	{r4, pc}
   263c8:	00034490 	.word	0x00034490
   263cc:	00034474 	.word	0x00034474
   263d0:	200024e0 	.word	0x200024e0

000263d4 <get_my_ipv6_addr>:
{
   263d4:	b538      	push	{r3, r4, r5, lr}
   263d6:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   263d8:	1d0d      	adds	r5, r1, #4
   263da:	4629      	mov	r1, r5
   263dc:	f7f7 f81e 	bl	1d41c <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   263e0:	2210      	movs	r2, #16
   263e2:	4601      	mov	r1, r0
   263e4:	4628      	mov	r0, r5
   263e6:	f7d9 ff6b 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   263ea:	2300      	movs	r3, #0
   263ec:	8063      	strh	r3, [r4, #2]
   263ee:	bd38      	pop	{r3, r4, r5, pc}

000263f0 <tcp_connect>:
{
   263f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   263f2:	b08f      	sub	sp, #60	; 0x3c
   263f4:	4607      	mov	r7, r0
   263f6:	460c      	mov	r4, r1
   263f8:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   263fa:	f7f6 facb 	bl	1c994 <net_if_get_default>
   263fe:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   26400:	aa09      	add	r2, sp, #36	; 0x24
   26402:	4639      	mov	r1, r7
   26404:	200a      	movs	r0, #10
   26406:	f7f9 f9c4 	bl	1f792 <net_addr_pton>
	if (ret < 0) {
   2640a:	2800      	cmp	r0, #0
   2640c:	db34      	blt.n	26478 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   2640e:	0a21      	lsrs	r1, r4, #8
   26410:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   26414:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   26418:	a909      	add	r1, sp, #36	; 0x24
   2641a:	2000      	movs	r0, #0
   2641c:	f7fb f964 	bl	216e8 <net_ipv6_nbr_lookup>
	if (nbr) {
   26420:	b100      	cbz	r0, 26424 <tcp_connect+0x34>
		iface = nbr->iface;
   26422:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   26424:	a902      	add	r1, sp, #8
   26426:	4630      	mov	r0, r6
   26428:	f7ff ffd4 	bl	263d4 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   2642c:	240a      	movs	r4, #10
   2642e:	f8ad 4008 	strh.w	r4, [sp, #8]
   26432:	aa0e      	add	r2, sp, #56	; 0x38
   26434:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   26438:	a902      	add	r1, sp, #8
   2643a:	4620      	mov	r0, r4
   2643c:	f7ff fce6 	bl	25e0c <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   26440:	462b      	mov	r3, r5
   26442:	2206      	movs	r2, #6
   26444:	2101      	movs	r1, #1
   26446:	4620      	mov	r0, r4
   26448:	f7f7 fd82 	bl	1df50 <net_context_get>
	if (ret < 0) {
   2644c:	1e04      	subs	r4, r0, #0
   2644e:	db18      	blt.n	26482 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   26450:	2218      	movs	r2, #24
   26452:	a902      	add	r1, sp, #8
   26454:	6828      	ldr	r0, [r5, #0]
   26456:	f7f8 f829 	bl	1e4ac <net_context_bind>
	if (ret < 0) {
   2645a:	1e04      	subs	r4, r0, #0
   2645c:	db16      	blt.n	2648c <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   2645e:	6828      	ldr	r0, [r5, #0]
   26460:	2300      	movs	r3, #0
   26462:	9301      	str	r3, [sp, #4]
   26464:	9300      	str	r3, [sp, #0]
   26466:	4b0c      	ldr	r3, [pc, #48]	; (26498 <tcp_connect+0xa8>)
   26468:	2218      	movs	r2, #24
   2646a:	a908      	add	r1, sp, #32
   2646c:	f7f8 f9b0 	bl	1e7d0 <net_context_connect>
   26470:	4604      	mov	r4, r0
}
   26472:	4620      	mov	r0, r4
   26474:	b00f      	add	sp, #60	; 0x3c
   26476:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   26478:	4808      	ldr	r0, [pc, #32]	; (2649c <tcp_connect+0xac>)
   2647a:	f7dc fe89 	bl	3190 <printk>
		return 0;
   2647e:	2400      	movs	r4, #0
   26480:	e7f7      	b.n	26472 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   26482:	4621      	mov	r1, r4
   26484:	4806      	ldr	r0, [pc, #24]	; (264a0 <tcp_connect+0xb0>)
   26486:	f7dc fe83 	bl	3190 <printk>
		return ret;
   2648a:	e7f2      	b.n	26472 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   2648c:	4621      	mov	r1, r4
   2648e:	4805      	ldr	r0, [pc, #20]	; (264a4 <tcp_connect+0xb4>)
   26490:	f7dc fe7e 	bl	3190 <printk>
		return ret;
   26494:	e7ed      	b.n	26472 <tcp_connect+0x82>
   26496:	bf00      	nop
   26498:	000263a5 	.word	0x000263a5
   2649c:	00034424 	.word	0x00034424
   264a0:	0003443c 	.word	0x0003443c
   264a4:	0003445c 	.word	0x0003445c

000264a8 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   264a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   264aa:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   264ac:	6848      	ldr	r0, [r1, #4]
   264ae:	2800      	cmp	r0, #0
   264b0:	f000 8099 	beq.w	265e6 <net_shell_cmd_tcp+0x13e>
   264b4:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   264b6:	4954      	ldr	r1, [pc, #336]	; (26608 <net_shell_cmd_tcp+0x160>)
   264b8:	f7d9 ffa6 	bl	408 <strcmp>
   264bc:	4605      	mov	r5, r0
   264be:	bb20      	cbnz	r0, 2650a <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   264c0:	4b52      	ldr	r3, [pc, #328]	; (2660c <net_shell_cmd_tcp+0x164>)
   264c2:	681b      	ldr	r3, [r3, #0]
   264c4:	b123      	cbz	r3, 264d0 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   264c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   264ca:	f013 0f01 	tst.w	r3, #1
   264ce:	d110      	bne.n	264f2 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   264d0:	68a6      	ldr	r6, [r4, #8]
   264d2:	b196      	cbz	r6, 264fa <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   264d4:	68e0      	ldr	r0, [r4, #12]
   264d6:	b1a0      	cbz	r0, 26502 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   264d8:	220a      	movs	r2, #10
   264da:	2100      	movs	r1, #0
   264dc:	f006 fb26 	bl	2cb2c <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   264e0:	4a4a      	ldr	r2, [pc, #296]	; (2660c <net_shell_cmd_tcp+0x164>)
   264e2:	b281      	uxth	r1, r0
   264e4:	4630      	mov	r0, r6
   264e6:	f7ff ff83 	bl	263f0 <tcp_connect>
   264ea:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   264ec:	4628      	mov	r0, r5
   264ee:	b003      	add	sp, #12
   264f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   264f2:	4847      	ldr	r0, [pc, #284]	; (26610 <net_shell_cmd_tcp+0x168>)
   264f4:	f7dc fe4c 	bl	3190 <printk>
				return 0;
   264f8:	e7f8      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   264fa:	4846      	ldr	r0, [pc, #280]	; (26614 <net_shell_cmd_tcp+0x16c>)
   264fc:	f7dc fe48 	bl	3190 <printk>
				return 0;
   26500:	e7f4      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   26502:	4845      	ldr	r0, [pc, #276]	; (26618 <net_shell_cmd_tcp+0x170>)
   26504:	f7dc fe44 	bl	3190 <printk>
				return 0;
   26508:	e7f0      	b.n	264ec <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   2650a:	4944      	ldr	r1, [pc, #272]	; (2661c <net_shell_cmd_tcp+0x174>)
   2650c:	6860      	ldr	r0, [r4, #4]
   2650e:	f7d9 ff7b 	bl	408 <strcmp>
   26512:	4605      	mov	r5, r0
   26514:	2800      	cmp	r0, #0
   26516:	d140      	bne.n	2659a <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   26518:	4b3c      	ldr	r3, [pc, #240]	; (2660c <net_shell_cmd_tcp+0x164>)
   2651a:	6818      	ldr	r0, [r3, #0]
   2651c:	b300      	cbz	r0, 26560 <net_shell_cmd_tcp+0xb8>
   2651e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   26522:	f013 0f01 	tst.w	r3, #1
   26526:	d01b      	beq.n	26560 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   26528:	68a3      	ldr	r3, [r4, #8]
   2652a:	b1eb      	cbz	r3, 26568 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   2652c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   26530:	f7f8 fbdc 	bl	1ecec <net_pkt_get_tx>
			if (!pkt) {
   26534:	4606      	mov	r6, r0
   26536:	b1d8      	cbz	r0, 26570 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   26538:	68a0      	ldr	r0, [r4, #8]
   2653a:	f7da f8e1 	bl	700 <strlen>
   2653e:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   26540:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   26544:	68a2      	ldr	r2, [r4, #8]
   26546:	4639      	mov	r1, r7
   26548:	4630      	mov	r0, r6
   2654a:	f7f8 fd3a 	bl	1efc2 <net_pkt_append>
			if (!ret) {
   2654e:	4287      	cmp	r7, r0
   26550:	d012      	beq.n	26578 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   26552:	4833      	ldr	r0, [pc, #204]	; (26620 <net_shell_cmd_tcp+0x178>)
   26554:	f7dc fe1c 	bl	3190 <printk>
				net_pkt_unref(pkt);
   26558:	4630      	mov	r0, r6
   2655a:	f7f8 fbfa 	bl	1ed52 <net_pkt_unref>
				return 0;
   2655e:	e7c5      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   26560:	4830      	ldr	r0, [pc, #192]	; (26624 <net_shell_cmd_tcp+0x17c>)
   26562:	f7dc fe15 	bl	3190 <printk>
				return 0;
   26566:	e7c1      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   26568:	482f      	ldr	r0, [pc, #188]	; (26628 <net_shell_cmd_tcp+0x180>)
   2656a:	f7dc fe11 	bl	3190 <printk>
				return 0;
   2656e:	e7bd      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   26570:	482e      	ldr	r0, [pc, #184]	; (2662c <net_shell_cmd_tcp+0x184>)
   26572:	f7dc fe0d 	bl	3190 <printk>
				return 0;
   26576:	e7b9      	b.n	264ec <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   26578:	2300      	movs	r3, #0
   2657a:	9300      	str	r3, [sp, #0]
   2657c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   26580:	492b      	ldr	r1, [pc, #172]	; (26630 <net_shell_cmd_tcp+0x188>)
   26582:	4630      	mov	r0, r6
   26584:	f7f8 fa12 	bl	1e9ac <net_context_send>
			if (ret < 0) {
   26588:	1e01      	subs	r1, r0, #0
   2658a:	daaf      	bge.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   2658c:	4829      	ldr	r0, [pc, #164]	; (26634 <net_shell_cmd_tcp+0x18c>)
   2658e:	f7dc fdff 	bl	3190 <printk>
				net_pkt_unref(pkt);
   26592:	4630      	mov	r0, r6
   26594:	f7f8 fbdd 	bl	1ed52 <net_pkt_unref>
				return 0;
   26598:	e7a8      	b.n	264ec <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   2659a:	4927      	ldr	r1, [pc, #156]	; (26638 <net_shell_cmd_tcp+0x190>)
   2659c:	6860      	ldr	r0, [r4, #4]
   2659e:	f7d9 ff33 	bl	408 <strcmp>
   265a2:	4605      	mov	r5, r0
   265a4:	b9d0      	cbnz	r0, 265dc <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   265a6:	4b19      	ldr	r3, [pc, #100]	; (2660c <net_shell_cmd_tcp+0x164>)
   265a8:	6818      	ldr	r0, [r3, #0]
   265aa:	b120      	cbz	r0, 265b6 <net_shell_cmd_tcp+0x10e>
   265ac:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   265b0:	f013 0f01 	tst.w	r3, #1
   265b4:	d103      	bne.n	265be <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   265b6:	481b      	ldr	r0, [pc, #108]	; (26624 <net_shell_cmd_tcp+0x17c>)
   265b8:	f7dc fdea 	bl	3190 <printk>
				return 0;
   265bc:	e796      	b.n	264ec <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   265be:	f7f7 ff33 	bl	1e428 <net_context_put>
			if (ret < 0) {
   265c2:	1e01      	subs	r1, r0, #0
   265c4:	db06      	blt.n	265d4 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   265c6:	481d      	ldr	r0, [pc, #116]	; (2663c <net_shell_cmd_tcp+0x194>)
   265c8:	f7dc fde2 	bl	3190 <printk>
			tcp_ctx = NULL;
   265cc:	2200      	movs	r2, #0
   265ce:	4b0f      	ldr	r3, [pc, #60]	; (2660c <net_shell_cmd_tcp+0x164>)
   265d0:	601a      	str	r2, [r3, #0]
			return 0;
   265d2:	e78b      	b.n	264ec <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   265d4:	481a      	ldr	r0, [pc, #104]	; (26640 <net_shell_cmd_tcp+0x198>)
   265d6:	f7dc fddb 	bl	3190 <printk>
				return 0;
   265da:	e787      	b.n	264ec <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   265dc:	6861      	ldr	r1, [r4, #4]
   265de:	4819      	ldr	r0, [pc, #100]	; (26644 <net_shell_cmd_tcp+0x19c>)
   265e0:	f7dc fdd6 	bl	3190 <printk>
		goto usage;
   265e4:	e002      	b.n	265ec <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   265e6:	4818      	ldr	r0, [pc, #96]	; (26648 <net_shell_cmd_tcp+0x1a0>)
   265e8:	f7dc fdd2 	bl	3190 <printk>
		printk("Usage:\n");
   265ec:	4817      	ldr	r0, [pc, #92]	; (2664c <net_shell_cmd_tcp+0x1a4>)
   265ee:	f7dc fdcf 	bl	3190 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   265f2:	4817      	ldr	r0, [pc, #92]	; (26650 <net_shell_cmd_tcp+0x1a8>)
   265f4:	f7dc fdcc 	bl	3190 <printk>
		printk("\ttcp send <data>\n");
   265f8:	4816      	ldr	r0, [pc, #88]	; (26654 <net_shell_cmd_tcp+0x1ac>)
   265fa:	f7dc fdc9 	bl	3190 <printk>
		printk("\ttcp close\n");
   265fe:	4816      	ldr	r0, [pc, #88]	; (26658 <net_shell_cmd_tcp+0x1b0>)
   26600:	f7dc fdc6 	bl	3190 <printk>
	return 0;
   26604:	2500      	movs	r5, #0
   26606:	e771      	b.n	264ec <net_shell_cmd_tcp+0x44>
   26608:	00030190 	.word	0x00030190
   2660c:	200024e0 	.word	0x200024e0
   26610:	000341f4 	.word	0x000341f4
   26614:	00034208 	.word	0x00034208
   26618:	00034224 	.word	0x00034224
   2661c:	00034238 	.word	0x00034238
   26620:	00034288 	.word	0x00034288
   26624:	00034240 	.word	0x00034240
   26628:	00034250 	.word	0x00034250
   2662c:	00034264 	.word	0x00034264
   26630:	00025c95 	.word	0x00025c95
   26634:	000342a8 	.word	0x000342a8
   26638:	000342c0 	.word	0x000342c0
   2663c:	000342ec 	.word	0x000342ec
   26640:	000342c8 	.word	0x000342c8
   26644:	00033dec 	.word	0x00033dec
   26648:	00034300 	.word	0x00034300
   2664c:	00034314 	.word	0x00034314
   26650:	0003431c 	.word	0x0003431c
   26654:	00034338 	.word	0x00034338
   26658:	0003434c 	.word	0x0003434c

0002665c <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   2665c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26660:	4605      	mov	r5, r0
   26662:	460e      	mov	r6, r1
   26664:	4617      	mov	r7, r2
   26666:	4699      	mov	r9, r3
   26668:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2666c:	2400      	movs	r4, #0
   2666e:	e012      	b.n	26696 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   26670:	f013 0f02 	tst.w	r3, #2
   26674:	d10e      	bne.n	26694 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   26676:	2f00      	cmp	r7, #0
   26678:	d051      	beq.n	2671e <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   2667a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2667e:	009a      	lsls	r2, r3, #2
   26680:	4b3c      	ldr	r3, [pc, #240]	; (26774 <find_conn_handler+0x118>)
   26682:	4413      	add	r3, r2
   26684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   26688:	f013 0f04 	tst.w	r3, #4
   2668c:	d002      	beq.n	26694 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   2668e:	883b      	ldrh	r3, [r7, #0]
   26690:	2b0a      	cmp	r3, #10
   26692:	d030      	beq.n	266f6 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   26694:	3401      	adds	r4, #1
   26696:	2c03      	cmp	r4, #3
   26698:	dc67      	bgt.n	2676a <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2669a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2669e:	009a      	lsls	r2, r3, #2
   266a0:	4b34      	ldr	r3, [pc, #208]	; (26774 <find_conn_handler+0x118>)
   266a2:	4413      	add	r3, r2
   266a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   266a8:	f013 0f01 	tst.w	r3, #1
   266ac:	d0f2      	beq.n	26694 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   266ae:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   266b2:	0091      	lsls	r1, r2, #2
   266b4:	4a2f      	ldr	r2, [pc, #188]	; (26774 <find_conn_handler+0x118>)
   266b6:	440a      	add	r2, r1
   266b8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   266bc:	42aa      	cmp	r2, r5
   266be:	d1e9      	bne.n	26694 <find_conn_handler+0x38>
		if (remote_addr) {
   266c0:	2e00      	cmp	r6, #0
   266c2:	d0d5      	beq.n	26670 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   266c4:	f013 0f02 	tst.w	r3, #2
   266c8:	d0e4      	beq.n	26694 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   266ca:	8833      	ldrh	r3, [r6, #0]
   266cc:	2b0a      	cmp	r3, #10
   266ce:	d1e1      	bne.n	26694 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   266d0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   266d4:	008a      	lsls	r2, r1, #2
   266d6:	4927      	ldr	r1, [pc, #156]	; (26774 <find_conn_handler+0x118>)
   266d8:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   266da:	4293      	cmp	r3, r2
   266dc:	d1da      	bne.n	26694 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   266de:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   266e2:	0093      	lsls	r3, r2, #2
   266e4:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   266e6:	2210      	movs	r2, #16
   266e8:	3104      	adds	r1, #4
   266ea:	1d30      	adds	r0, r6, #4
   266ec:	f005 fc32 	bl	2bf54 <memcmp>
				if (!net_ipv6_addr_cmp(
   266f0:	2800      	cmp	r0, #0
   266f2:	d1cf      	bne.n	26694 <find_conn_handler+0x38>
   266f4:	e7bf      	b.n	26676 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   266f6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   266fa:	0091      	lsls	r1, r2, #2
   266fc:	4a1d      	ldr	r2, [pc, #116]	; (26774 <find_conn_handler+0x118>)
   266fe:	440a      	add	r2, r1
   26700:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   26702:	4293      	cmp	r3, r2
   26704:	d1c6      	bne.n	26694 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   26706:	460b      	mov	r3, r1
   26708:	3318      	adds	r3, #24
   2670a:	4a1a      	ldr	r2, [pc, #104]	; (26774 <find_conn_handler+0x118>)
   2670c:	4413      	add	r3, r2
   2670e:	2210      	movs	r2, #16
   26710:	1d19      	adds	r1, r3, #4
   26712:	1d38      	adds	r0, r7, #4
   26714:	f005 fc1e 	bl	2bf54 <memcmp>
				if (!net_ipv6_addr_cmp(
   26718:	2800      	cmp	r0, #0
   2671a:	d1bb      	bne.n	26694 <find_conn_handler+0x38>
   2671c:	e009      	b.n	26732 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2671e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26722:	009a      	lsls	r2, r3, #2
   26724:	4b13      	ldr	r3, [pc, #76]	; (26774 <find_conn_handler+0x118>)
   26726:	4413      	add	r3, r2
   26728:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2672c:	f013 0f04 	tst.w	r3, #4
   26730:	d1b0      	bne.n	26694 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   26732:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26736:	009a      	lsls	r2, r3, #2
   26738:	4b0e      	ldr	r3, [pc, #56]	; (26774 <find_conn_handler+0x118>)
   2673a:	4413      	add	r3, r2
   2673c:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   2673e:	ea4f 2319 	mov.w	r3, r9, lsr #8
   26742:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   26746:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   26748:	429a      	cmp	r2, r3
   2674a:	d1a3      	bne.n	26694 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   2674c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   26750:	0093      	lsls	r3, r2, #2
   26752:	3318      	adds	r3, #24
   26754:	4a07      	ldr	r2, [pc, #28]	; (26774 <find_conn_handler+0x118>)
   26756:	4413      	add	r3, r2
   26758:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   2675a:	ea4f 2318 	mov.w	r3, r8, lsr #8
   2675e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   26762:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   26764:	429a      	cmp	r2, r3
   26766:	d195      	bne.n	26694 <find_conn_handler+0x38>
   26768:	e001      	b.n	2676e <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   2676a:	f06f 0401 	mvn.w	r4, #1
}
   2676e:	4620      	mov	r0, r4
   26770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26774:	20000538 	.word	0x20000538

00026778 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   26778:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2677a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2677c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   26780:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   26784:	b29d      	uxth	r5, r3
   26786:	42ac      	cmp	r4, r5
   26788:	d002      	beq.n	26790 <check_addr+0x18>
		return false;
   2678a:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2678c:	4620      	mov	r0, r4
   2678e:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   26790:	2b0a      	cmp	r3, #10
   26792:	d001      	beq.n	26798 <check_addr+0x20>
	return true;
   26794:	2401      	movs	r4, #1
   26796:	e7f9      	b.n	2678c <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   26798:	2c0a      	cmp	r4, #10
   2679a:	d001      	beq.n	267a0 <check_addr+0x28>
	return true;
   2679c:	2401      	movs	r4, #1
   2679e:	e7f5      	b.n	2678c <check_addr+0x14>
		if (is_remote) {
   267a0:	b162      	cbz	r2, 267bc <check_addr+0x44>
	return pkt->frags->data;
   267a2:	6883      	ldr	r3, [r0, #8]
   267a4:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   267a6:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   267a8:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   267aa:	b95a      	cbnz	r2, 267c4 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   267ac:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   267ae:	b9ba      	cbnz	r2, 267e0 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   267b0:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   267b2:	b9ba      	cbnz	r2, 267e4 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   267b4:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   267b6:	b1ba      	cbz	r2, 267e8 <check_addr+0x70>
   267b8:	2200      	movs	r2, #0
   267ba:	e004      	b.n	267c6 <check_addr+0x4e>
   267bc:	6883      	ldr	r3, [r0, #8]
   267be:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   267c0:	3318      	adds	r3, #24
   267c2:	e7f1      	b.n	267a8 <check_addr+0x30>
   267c4:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   267c6:	4614      	mov	r4, r2
   267c8:	2a00      	cmp	r2, #0
   267ca:	d1df      	bne.n	2678c <check_addr+0x14>
   267cc:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   267ce:	2210      	movs	r2, #16
   267d0:	4619      	mov	r1, r3
   267d2:	3004      	adds	r0, #4
   267d4:	f005 fbbe 	bl	2bf54 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   267d8:	2800      	cmp	r0, #0
   267da:	d1d7      	bne.n	2678c <check_addr+0x14>
		return true;
   267dc:	2401      	movs	r4, #1
   267de:	e7d5      	b.n	2678c <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   267e0:	2200      	movs	r2, #0
   267e2:	e7f0      	b.n	267c6 <check_addr+0x4e>
   267e4:	2200      	movs	r2, #0
   267e6:	e7ee      	b.n	267c6 <check_addr+0x4e>
   267e8:	2201      	movs	r2, #1
   267ea:	e7ec      	b.n	267c6 <check_addr+0x4e>

000267ec <net_conn_unregister>:
{
   267ec:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   267ee:	4b0d      	ldr	r3, [pc, #52]	; (26824 <net_conn_unregister+0x38>)
   267f0:	4298      	cmp	r0, r3
   267f2:	d30d      	bcc.n	26810 <net_conn_unregister+0x24>
   267f4:	33f0      	adds	r3, #240	; 0xf0
   267f6:	4298      	cmp	r0, r3
   267f8:	d80d      	bhi.n	26816 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   267fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   267fe:	f013 0f01 	tst.w	r3, #1
   26802:	d00b      	beq.n	2681c <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   26804:	223c      	movs	r2, #60	; 0x3c
   26806:	2100      	movs	r1, #0
   26808:	f005 fc38 	bl	2c07c <memset>
	return 0;
   2680c:	2000      	movs	r0, #0
   2680e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26810:	f06f 0015 	mvn.w	r0, #21
   26814:	bd08      	pop	{r3, pc}
   26816:	f06f 0015 	mvn.w	r0, #21
   2681a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2681c:	f06f 0001 	mvn.w	r0, #1
}
   26820:	bd08      	pop	{r3, pc}
   26822:	bf00      	nop
   26824:	20000538 	.word	0x20000538

00026828 <net_conn_register>:
{
   26828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2682c:	b082      	sub	sp, #8
   2682e:	4681      	mov	r9, r0
   26830:	460d      	mov	r5, r1
   26832:	4616      	mov	r6, r2
   26834:	4698      	mov	r8, r3
   26836:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   2683a:	9700      	str	r7, [sp, #0]
   2683c:	f7ff ff0e 	bl	2665c <find_conn_handler>
	if (i != -ENOENT) {
   26840:	f110 0f02 	cmn.w	r0, #2
   26844:	f040 80ba 	bne.w	269bc <net_conn_register+0x194>
   26848:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2684a:	2c03      	cmp	r4, #3
   2684c:	f300 80aa 	bgt.w	269a4 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   26850:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26854:	009a      	lsls	r2, r3, #2
   26856:	4b60      	ldr	r3, [pc, #384]	; (269d8 <net_conn_register+0x1b0>)
   26858:	4413      	add	r3, r2
   2685a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2685e:	f013 0f01 	tst.w	r3, #1
   26862:	d001      	beq.n	26868 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   26864:	3401      	adds	r4, #1
   26866:	e7f0      	b.n	2684a <net_conn_register+0x22>
		if (remote_addr) {
   26868:	2d00      	cmp	r5, #0
   2686a:	d04b      	beq.n	26904 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   2686c:	882b      	ldrh	r3, [r5, #0]
   2686e:	2b0a      	cmp	r3, #10
   26870:	f040 80a7 	bne.w	269c2 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   26874:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   26878:	0093      	lsls	r3, r2, #2
   2687a:	2218      	movs	r2, #24
   2687c:	4629      	mov	r1, r5
   2687e:	4856      	ldr	r0, [pc, #344]	; (269d8 <net_conn_register+0x1b0>)
   26880:	4418      	add	r0, r3
   26882:	f7d9 fd1d 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   26886:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26888:	b93b      	cbnz	r3, 2689a <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2688a:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2688c:	bb8b      	cbnz	r3, 268f2 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2688e:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   26890:	bb8b      	cbnz	r3, 268f6 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   26892:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   26894:	b38b      	cbz	r3, 268fa <net_conn_register+0xd2>
   26896:	2300      	movs	r3, #0
   26898:	e000      	b.n	2689c <net_conn_register+0x74>
   2689a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2689c:	b37b      	cbz	r3, 268fe <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   2689e:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   268a2:	0122      	lsls	r2, r4, #4
   268a4:	1b12      	subs	r2, r2, r4
   268a6:	0091      	lsls	r1, r2, #2
   268a8:	4b4b      	ldr	r3, [pc, #300]	; (269d8 <net_conn_register+0x1b0>)
   268aa:	440b      	add	r3, r1
   268ac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   268b0:	f042 0202 	orr.w	r2, r2, #2
   268b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   268b8:	2e00      	cmp	r6, #0
   268ba:	d036      	beq.n	2692a <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   268bc:	8833      	ldrh	r3, [r6, #0]
   268be:	2b0a      	cmp	r3, #10
   268c0:	f040 8082 	bne.w	269c8 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   268c4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   268c8:	0098      	lsls	r0, r3, #2
   268ca:	3018      	adds	r0, #24
   268cc:	2218      	movs	r2, #24
   268ce:	4631      	mov	r1, r6
   268d0:	4b41      	ldr	r3, [pc, #260]	; (269d8 <net_conn_register+0x1b0>)
   268d2:	4418      	add	r0, r3
   268d4:	f7d9 fcf4 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   268d8:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   268da:	b9b3      	cbnz	r3, 2690a <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   268dc:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   268de:	2b00      	cmp	r3, #0
   268e0:	d163      	bne.n	269aa <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   268e2:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   268e4:	2b00      	cmp	r3, #0
   268e6:	d162      	bne.n	269ae <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   268e8:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   268ea:	2b00      	cmp	r3, #0
   268ec:	d061      	beq.n	269b2 <net_conn_register+0x18a>
   268ee:	2300      	movs	r3, #0
   268f0:	e00c      	b.n	2690c <net_conn_register+0xe4>
   268f2:	2300      	movs	r3, #0
   268f4:	e7d2      	b.n	2689c <net_conn_register+0x74>
   268f6:	2300      	movs	r3, #0
   268f8:	e7d0      	b.n	2689c <net_conn_register+0x74>
   268fa:	2301      	movs	r3, #1
   268fc:	e7ce      	b.n	2689c <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   268fe:	f04f 0a20 	mov.w	sl, #32
   26902:	e7ce      	b.n	268a2 <net_conn_register+0x7a>
	u8_t rank = 0;
   26904:	f04f 0a00 	mov.w	sl, #0
   26908:	e7d6      	b.n	268b8 <net_conn_register+0x90>
   2690a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2690c:	2b00      	cmp	r3, #0
   2690e:	d052      	beq.n	269b6 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   26910:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   26914:	0122      	lsls	r2, r4, #4
   26916:	1b12      	subs	r2, r2, r4
   26918:	0091      	lsls	r1, r2, #2
   2691a:	4b2f      	ldr	r3, [pc, #188]	; (269d8 <net_conn_register+0x1b0>)
   2691c:	440b      	add	r3, r1
   2691e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   26922:	f042 0204 	orr.w	r2, r2, #4
   26926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   2692a:	b125      	cbz	r5, 26936 <net_conn_register+0x10e>
   2692c:	b11e      	cbz	r6, 26936 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   2692e:	882a      	ldrh	r2, [r5, #0]
   26930:	8833      	ldrh	r3, [r6, #0]
   26932:	429a      	cmp	r2, r3
   26934:	d14b      	bne.n	269ce <net_conn_register+0x1a6>
		if (remote_port) {
   26936:	f1b8 0f00 	cmp.w	r8, #0
   2693a:	d00c      	beq.n	26956 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   2693c:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   26940:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26944:	009a      	lsls	r2, r3, #2
   26946:	4b24      	ldr	r3, [pc, #144]	; (269d8 <net_conn_register+0x1b0>)
   26948:	4413      	add	r3, r2
				htons(remote_port);
   2694a:	ea4f 2218 	mov.w	r2, r8, lsr #8
   2694e:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   26952:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   26956:	b15f      	cbz	r7, 26970 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   26958:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   2695c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   26960:	0093      	lsls	r3, r2, #2
   26962:	3318      	adds	r3, #24
   26964:	4a1c      	ldr	r2, [pc, #112]	; (269d8 <net_conn_register+0x1b0>)
   26966:	4413      	add	r3, r2
				htons(local_port);
   26968:	0a3a      	lsrs	r2, r7, #8
   2696a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   2696e:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   26970:	0122      	lsls	r2, r4, #4
   26972:	1b12      	subs	r2, r2, r4
   26974:	0091      	lsls	r1, r2, #2
   26976:	4b18      	ldr	r3, [pc, #96]	; (269d8 <net_conn_register+0x1b0>)
   26978:	440b      	add	r3, r1
   2697a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2697e:	f042 0201 	orr.w	r2, r2, #1
   26982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   26986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26988:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   2698a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2698c:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   2698e:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   26992:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   26996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26998:	b1e3      	cbz	r3, 269d4 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   2699a:	4b0f      	ldr	r3, [pc, #60]	; (269d8 <net_conn_register+0x1b0>)
   2699c:	440b      	add	r3, r1
   2699e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   269a0:	6013      	str	r3, [r2, #0]
		return 0;
   269a2:	2000      	movs	r0, #0
}
   269a4:	b002      	add	sp, #8
   269a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   269aa:	2300      	movs	r3, #0
   269ac:	e7ae      	b.n	2690c <net_conn_register+0xe4>
   269ae:	2300      	movs	r3, #0
   269b0:	e7ac      	b.n	2690c <net_conn_register+0xe4>
   269b2:	2301      	movs	r3, #1
   269b4:	e7aa      	b.n	2690c <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   269b6:	f04a 0a10 	orr.w	sl, sl, #16
   269ba:	e7ab      	b.n	26914 <net_conn_register+0xec>
		return -EALREADY;
   269bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   269c0:	e7f0      	b.n	269a4 <net_conn_register+0x17c>
				return -EINVAL;
   269c2:	f06f 0015 	mvn.w	r0, #21
   269c6:	e7ed      	b.n	269a4 <net_conn_register+0x17c>
				return -EINVAL;
   269c8:	f06f 0015 	mvn.w	r0, #21
   269cc:	e7ea      	b.n	269a4 <net_conn_register+0x17c>
				return -EINVAL;
   269ce:	f06f 0015 	mvn.w	r0, #21
   269d2:	e7e7      	b.n	269a4 <net_conn_register+0x17c>
		return 0;
   269d4:	2000      	movs	r0, #0
   269d6:	e7e5      	b.n	269a4 <net_conn_register+0x17c>
   269d8:	20000538 	.word	0x20000538

000269dc <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   269dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269e0:	b089      	sub	sp, #36	; 0x24
   269e2:	4605      	mov	r5, r0
   269e4:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   269e6:	2811      	cmp	r0, #17
   269e8:	d005      	beq.n	269f6 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   269ea:	2806      	cmp	r0, #6
   269ec:	d015      	beq.n	26a1a <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   269ee:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   269f0:	b009      	add	sp, #36	; 0x24
   269f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   269f6:	a903      	add	r1, sp, #12
   269f8:	4630      	mov	r0, r6
   269fa:	f7fd ff73 	bl	248e4 <net_udp_get_hdr>
		if (!udp_hdr) {
   269fe:	b150      	cbz	r0, 26a16 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   26a00:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   26a04:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   26a08:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   26a0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   26a10:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   26a12:	2400      	movs	r4, #0
   26a14:	e01b      	b.n	26a4e <net_conn_input+0x72>
			return NET_DROP;
   26a16:	2002      	movs	r0, #2
   26a18:	e7ea      	b.n	269f0 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   26a1a:	a903      	add	r1, sp, #12
   26a1c:	4630      	mov	r0, r6
   26a1e:	f7fe fbcd 	bl	251bc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   26a22:	b130      	cbz	r0, 26a32 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   26a24:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   26a28:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   26a2c:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   26a30:	e7ec      	b.n	26a0c <net_conn_input+0x30>
			return NET_DROP;
   26a32:	2002      	movs	r0, #2
   26a34:	e7dc      	b.n	269f0 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   26a36:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   26a3a:	0082      	lsls	r2, r0, #2
   26a3c:	3218      	adds	r2, #24
   26a3e:	4866      	ldr	r0, [pc, #408]	; (26bd8 <net_conn_input+0x1fc>)
   26a40:	1882      	adds	r2, r0, r2
   26a42:	9201      	str	r2, [sp, #4]
   26a44:	8852      	ldrh	r2, [r2, #2]
   26a46:	b1fa      	cbz	r2, 26a88 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   26a48:	4593      	cmp	fp, r2
   26a4a:	d01d      	beq.n	26a88 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   26a4c:	3401      	adds	r4, #1
   26a4e:	2c03      	cmp	r4, #3
   26a50:	dc4d      	bgt.n	26aee <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   26a52:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26a56:	009a      	lsls	r2, r3, #2
   26a58:	4b5f      	ldr	r3, [pc, #380]	; (26bd8 <net_conn_input+0x1fc>)
   26a5a:	4413      	add	r3, r2
   26a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   26a60:	f013 0f01 	tst.w	r3, #1
   26a64:	d0f2      	beq.n	26a4c <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   26a66:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   26a6a:	0091      	lsls	r1, r2, #2
   26a6c:	4a5a      	ldr	r2, [pc, #360]	; (26bd8 <net_conn_input+0x1fc>)
   26a6e:	440a      	add	r2, r1
   26a70:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   26a74:	4295      	cmp	r5, r2
   26a76:	d1e9      	bne.n	26a4c <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   26a78:	4a57      	ldr	r2, [pc, #348]	; (26bd8 <net_conn_input+0x1fc>)
   26a7a:	4411      	add	r1, r2
   26a7c:	884a      	ldrh	r2, [r1, #2]
   26a7e:	2a00      	cmp	r2, #0
   26a80:	d0d9      	beq.n	26a36 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   26a82:	4591      	cmp	r9, r2
   26a84:	d1e2      	bne.n	26a4c <net_conn_input+0x70>
   26a86:	e7d6      	b.n	26a36 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   26a88:	f013 0f02 	tst.w	r3, #2
   26a8c:	d120      	bne.n	26ad0 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   26a8e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26a92:	009a      	lsls	r2, r3, #2
   26a94:	4b50      	ldr	r3, [pc, #320]	; (26bd8 <net_conn_input+0x1fc>)
   26a96:	4413      	add	r3, r2
   26a98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   26a9c:	f013 0f04 	tst.w	r3, #4
   26aa0:	d11d      	bne.n	26ade <net_conn_input+0x102>
		if (best_match >= 0 &&
   26aa2:	2f00      	cmp	r7, #0
   26aa4:	db07      	blt.n	26ab6 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   26aa6:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   26aaa:	009a      	lsls	r2, r3, #2
   26aac:	4b4a      	ldr	r3, [pc, #296]	; (26bd8 <net_conn_input+0x1fc>)
   26aae:	4413      	add	r3, r2
   26ab0:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   26ab2:	2b00      	cmp	r3, #0
   26ab4:	d1ca      	bne.n	26a4c <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   26ab6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   26aba:	009a      	lsls	r2, r3, #2
   26abc:	4b46      	ldr	r3, [pc, #280]	; (26bd8 <net_conn_input+0x1fc>)
   26abe:	4413      	add	r3, r2
   26ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   26ac4:	4598      	cmp	r8, r3
   26ac6:	dac1      	bge.n	26a4c <net_conn_input+0x70>
			best_rank = conns[i].rank;
   26ac8:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   26acc:	4627      	mov	r7, r4
   26ace:	e7bd      	b.n	26a4c <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   26ad0:	2201      	movs	r2, #1
   26ad2:	4630      	mov	r0, r6
   26ad4:	f7ff fe50 	bl	26778 <check_addr>
   26ad8:	2800      	cmp	r0, #0
   26ada:	d0b7      	beq.n	26a4c <net_conn_input+0x70>
   26adc:	e7d7      	b.n	26a8e <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   26ade:	2200      	movs	r2, #0
   26ae0:	9901      	ldr	r1, [sp, #4]
   26ae2:	4630      	mov	r0, r6
   26ae4:	f7ff fe48 	bl	26778 <check_addr>
   26ae8:	2800      	cmp	r0, #0
   26aea:	d0af      	beq.n	26a4c <net_conn_input+0x70>
   26aec:	e7d9      	b.n	26aa2 <net_conn_input+0xc6>
	if (best_match >= 0) {
   26aee:	2f00      	cmp	r7, #0
   26af0:	db44      	blt.n	26b7c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   26af2:	2d11      	cmp	r5, #17
   26af4:	d014      	beq.n	26b20 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   26af6:	2d06      	cmp	r5, #6
   26af8:	d023      	beq.n	26b42 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   26afa:	4c37      	ldr	r4, [pc, #220]	; (26bd8 <net_conn_input+0x1fc>)
   26afc:	013a      	lsls	r2, r7, #4
   26afe:	1bd1      	subs	r1, r2, r7
   26b00:	008b      	lsls	r3, r1, #2
   26b02:	4423      	add	r3, r4
   26b04:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   26b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   26b0a:	4631      	mov	r1, r6
   26b0c:	4618      	mov	r0, r3
   26b0e:	47c0      	blx	r8
   26b10:	2802      	cmp	r0, #2
   26b12:	d03d      	beq.n	26b90 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   26b14:	2d11      	cmp	r5, #17
   26b16:	d023      	beq.n	26b60 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   26b18:	2d06      	cmp	r5, #6
   26b1a:	d029      	beq.n	26b70 <net_conn_input+0x194>
		return NET_OK;
   26b1c:	2000      	movs	r0, #0
   26b1e:	e767      	b.n	269f0 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   26b20:	68b1      	ldr	r1, [r6, #8]
   26b22:	4630      	mov	r0, r6
   26b24:	f7fd fe6b 	bl	247fe <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   26b28:	68b1      	ldr	r1, [r6, #8]
   26b2a:	4630      	mov	r0, r6
   26b2c:	f7fd feb4 	bl	24898 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   26b30:	4582      	cmp	sl, r0
   26b32:	d0e2      	beq.n	26afa <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   26b34:	4a29      	ldr	r2, [pc, #164]	; (26bdc <net_conn_input+0x200>)
   26b36:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   26b3a:	3301      	adds	r3, #1
   26b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   26b40:	e026      	b.n	26b90 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   26b42:	68b1      	ldr	r1, [r6, #8]
   26b44:	4630      	mov	r0, r6
   26b46:	f7fe fc9e 	bl	25486 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   26b4a:	68b1      	ldr	r1, [r6, #8]
   26b4c:	4630      	mov	r0, r6
   26b4e:	f7fe fc74 	bl	2543a <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   26b52:	4582      	cmp	sl, r0
   26b54:	d0d1      	beq.n	26afa <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   26b56:	4a21      	ldr	r2, [pc, #132]	; (26bdc <net_conn_input+0x200>)
   26b58:	6e13      	ldr	r3, [r2, #96]	; 0x60
   26b5a:	3301      	adds	r3, #1
   26b5c:	6613      	str	r3, [r2, #96]	; 0x60
   26b5e:	e017      	b.n	26b90 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   26b60:	4a1e      	ldr	r2, [pc, #120]	; (26bdc <net_conn_input+0x200>)
   26b62:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   26b66:	3301      	adds	r3, #1
   26b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   26b6c:	2000      	movs	r0, #0
   26b6e:	e73f      	b.n	269f0 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   26b70:	4a1a      	ldr	r2, [pc, #104]	; (26bdc <net_conn_input+0x200>)
   26b72:	6d53      	ldr	r3, [r2, #84]	; 0x54
   26b74:	3301      	adds	r3, #1
   26b76:	6553      	str	r3, [r2, #84]	; 0x54
   26b78:	2000      	movs	r0, #0
   26b7a:	e739      	b.n	269f0 <net_conn_input+0x14>
	return pkt->family;
   26b7c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   26b80:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   26b84:	2b0a      	cmp	r3, #10
   26b86:	d009      	beq.n	26b9c <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   26b88:	2b0a      	cmp	r3, #10
   26b8a:	d00d      	beq.n	26ba8 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   26b8c:	2d06      	cmp	r5, #6
   26b8e:	d012      	beq.n	26bb6 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   26b90:	2d11      	cmp	r5, #17
   26b92:	d015      	beq.n	26bc0 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   26b94:	2d06      	cmp	r5, #6
   26b96:	d019      	beq.n	26bcc <net_conn_input+0x1f0>
	return NET_DROP;
   26b98:	2002      	movs	r0, #2
   26b9a:	e729      	b.n	269f0 <net_conn_input+0x14>
	return pkt->frags->data;
   26b9c:	68b2      	ldr	r2, [r6, #8]
   26b9e:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   26ba0:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   26ba2:	2aff      	cmp	r2, #255	; 0xff
   26ba4:	d1f0      	bne.n	26b88 <net_conn_input+0x1ac>
   26ba6:	e7f3      	b.n	26b90 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   26ba8:	2300      	movs	r3, #0
   26baa:	2204      	movs	r2, #4
   26bac:	2101      	movs	r1, #1
   26bae:	4630      	mov	r0, r6
   26bb0:	f7f9 fc94 	bl	204dc <net_icmpv6_send_error>
   26bb4:	e7ea      	b.n	26b8c <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   26bb6:	4a09      	ldr	r2, [pc, #36]	; (26bdc <net_conn_input+0x200>)
   26bb8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   26bba:	3301      	adds	r3, #1
   26bbc:	6793      	str	r3, [r2, #120]	; 0x78
   26bbe:	e7e7      	b.n	26b90 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   26bc0:	4a06      	ldr	r2, [pc, #24]	; (26bdc <net_conn_input+0x200>)
   26bc2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   26bc4:	3301      	adds	r3, #1
   26bc6:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   26bc8:	2002      	movs	r0, #2
   26bca:	e711      	b.n	269f0 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   26bcc:	4a03      	ldr	r2, [pc, #12]	; (26bdc <net_conn_input+0x200>)
   26bce:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   26bd0:	3301      	adds	r3, #1
   26bd2:	65d3      	str	r3, [r2, #92]	; 0x5c
   26bd4:	2002      	movs	r0, #2
   26bd6:	e70b      	b.n	269f0 <net_conn_input+0x14>
   26bd8:	20000538 	.word	0x20000538
   26bdc:	20002ae0 	.word	0x20002ae0

00026be0 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   26be0:	4770      	bx	lr

00026be2 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   26be2:	297f      	cmp	r1, #127	; 0x7f
   26be4:	d912      	bls.n	26c0c <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   26be6:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   26bea:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   26bee:	d311      	bcc.n	26c14 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   26bf0:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   26bf4:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   26bf8:	d310      	bcc.n	26c1c <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   26bfa:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   26bfe:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   26c02:	d20f      	bcs.n	26c24 <compute_rlen_size+0x42>
		*size = 4;
   26c04:	2304      	movs	r3, #4
   26c06:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   26c08:	2000      	movs	r0, #0
   26c0a:	4770      	bx	lr
		*size = 1;
   26c0c:	2301      	movs	r3, #1
   26c0e:	8003      	strh	r3, [r0, #0]
	return 0;
   26c10:	2000      	movs	r0, #0
   26c12:	4770      	bx	lr
		*size = 2;
   26c14:	2302      	movs	r3, #2
   26c16:	8003      	strh	r3, [r0, #0]
	return 0;
   26c18:	2000      	movs	r0, #0
   26c1a:	4770      	bx	lr
		*size = 3;
   26c1c:	2303      	movs	r3, #3
   26c1e:	8003      	strh	r3, [r0, #0]
	return 0;
   26c20:	2000      	movs	r0, #0
   26c22:	4770      	bx	lr
		return -EINVAL;
   26c24:	f06f 0015 	mvn.w	r0, #21
}
   26c28:	4770      	bx	lr

00026c2a <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   26c2a:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   26c2c:	2200      	movs	r2, #0
   26c2e:	e004      	b.n	26c3a <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   26c30:	1c53      	adds	r3, r2, #1
   26c32:	b2db      	uxtb	r3, r3
   26c34:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   26c36:	b139      	cbz	r1, 26c48 <rlen_encode+0x1e>
		buf[i++] = encoded;
   26c38:	461a      	mov	r2, r3
		encoded = len % 128;
   26c3a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   26c3e:	09c9      	lsrs	r1, r1, #7
   26c40:	d0f6      	beq.n	26c30 <rlen_encode+0x6>
			encoded = encoded | 128;
   26c42:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   26c46:	e7f3      	b.n	26c30 <rlen_encode+0x6>

	return 0;
}
   26c48:	2000      	movs	r0, #0
   26c4a:	bc10      	pop	{r4}
   26c4c:	4770      	bx	lr

00026c4e <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   26c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   26c50:	2400      	movs	r4, #0
	u32_t mult = 1;
   26c52:	2601      	movs	r6, #1
	u32_t value = 0;
   26c54:	4627      	mov	r7, r4
   26c56:	e000      	b.n	26c5a <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   26c58:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   26c5a:	2c03      	cmp	r4, #3
   26c5c:	d810      	bhi.n	26c80 <rlen_decode+0x32>
   26c5e:	429c      	cmp	r4, r3
   26c60:	d211      	bcs.n	26c86 <rlen_decode+0x38>
		encoded = buf[i++];
   26c62:	1c65      	adds	r5, r4, #1
   26c64:	b2ad      	uxth	r5, r5
   26c66:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   26c68:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   26c6c:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   26c70:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   26c72:	f014 0f80 	tst.w	r4, #128	; 0x80
   26c76:	d1ef      	bne.n	26c58 <rlen_decode+0xa>

	*rlen = value;
   26c78:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   26c7a:	800d      	strh	r5, [r1, #0]

	return 0;
   26c7c:	2000      	movs	r0, #0
   26c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   26c80:	f06f 000b 	mvn.w	r0, #11
   26c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c86:	f06f 000b 	mvn.w	r0, #11
}
   26c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026c8c <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   26c8c:	b410      	push	{r4}
   26c8e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   26c92:	2a03      	cmp	r2, #3
   26c94:	d912      	bls.n	26cbc <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   26c96:	011b      	lsls	r3, r3, #4
   26c98:	b2db      	uxtb	r3, r3
   26c9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   26c9e:	f002 020f 	and.w	r2, r2, #15
   26ca2:	4413      	add	r3, r2
   26ca4:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   26ca6:	2302      	movs	r3, #2
   26ca8:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   26caa:	0a23      	lsrs	r3, r4, #8
   26cac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   26cb0:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   26cb2:	2304      	movs	r3, #4
   26cb4:	800b      	strh	r3, [r1, #0]

	return 0;
   26cb6:	2000      	movs	r0, #0
}
   26cb8:	bc10      	pop	{r4}
   26cba:	4770      	bx	lr
		return -ENOMEM;
   26cbc:	f06f 000b 	mvn.w	r0, #11
   26cc0:	e7fa      	b.n	26cb8 <pack_pkt_id+0x2c>

00026cc2 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   26cc2:	2a01      	cmp	r2, #1
   26cc4:	d90d      	bls.n	26ce2 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   26cc6:	011b      	lsls	r3, r3, #4
   26cc8:	b2db      	uxtb	r3, r3
   26cca:	f89d 2000 	ldrb.w	r2, [sp]
   26cce:	f002 020f 	and.w	r2, r2, #15
   26cd2:	4413      	add	r3, r2
   26cd4:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   26cd6:	2300      	movs	r3, #0
   26cd8:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   26cda:	2202      	movs	r2, #2
   26cdc:	800a      	strh	r2, [r1, #0]

	return 0;
   26cde:	4618      	mov	r0, r3
   26ce0:	4770      	bx	lr
		return -ENOMEM;
   26ce2:	f06f 000b 	mvn.w	r0, #11
}
   26ce6:	4770      	bx	lr

00026ce8 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   26ce8:	2903      	cmp	r1, #3
   26cea:	d911      	bls.n	26d10 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   26cec:	7841      	ldrb	r1, [r0, #1]
   26cee:	2902      	cmp	r1, #2
   26cf0:	d111      	bne.n	26d16 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   26cf2:	7801      	ldrb	r1, [r0, #0]
   26cf4:	0909      	lsrs	r1, r1, #4
   26cf6:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   26cf8:	7802      	ldrb	r2, [r0, #0]
   26cfa:	f002 020f 	and.w	r2, r2, #15
   26cfe:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   26d00:	8842      	ldrh	r2, [r0, #2]
   26d02:	0a13      	lsrs	r3, r2, #8
   26d04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26d08:	9a00      	ldr	r2, [sp, #0]
   26d0a:	8013      	strh	r3, [r2, #0]

	return 0;
   26d0c:	2000      	movs	r0, #0
   26d0e:	4770      	bx	lr
		return -EINVAL;
   26d10:	f06f 0015 	mvn.w	r0, #21
   26d14:	4770      	bx	lr
		return -EINVAL;
   26d16:	f06f 0015 	mvn.w	r0, #21
}
   26d1a:	4770      	bx	lr

00026d1c <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   26d1c:	b510      	push	{r4, lr}
   26d1e:	b084      	sub	sp, #16
   26d20:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   26d22:	9200      	str	r2, [sp, #0]
   26d24:	f10d 030e 	add.w	r3, sp, #14
   26d28:	f10d 020f 	add.w	r2, sp, #15
   26d2c:	f7ff ffdc 	bl	26ce8 <unpack_pktid>
	if (rc != 0) {
   26d30:	4603      	mov	r3, r0
   26d32:	b948      	cbnz	r0, 26d48 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   26d34:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26d38:	42a2      	cmp	r2, r4
   26d3a:	d10b      	bne.n	26d54 <unpack_pktid_validate+0x38>
   26d3c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   26d40:	f89d 2018 	ldrb.w	r2, [sp, #24]
   26d44:	4291      	cmp	r1, r2
   26d46:	d102      	bne.n	26d4e <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   26d48:	4618      	mov	r0, r3
   26d4a:	b004      	add	sp, #16
   26d4c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26d4e:	f06f 0315 	mvn.w	r3, #21
   26d52:	e7f9      	b.n	26d48 <unpack_pktid_validate+0x2c>
   26d54:	f06f 0315 	mvn.w	r3, #21
   26d58:	e7f6      	b.n	26d48 <unpack_pktid_validate+0x2c>

00026d5a <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   26d5a:	2901      	cmp	r1, #1
   26d5c:	d90d      	bls.n	26d7a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   26d5e:	7801      	ldrb	r1, [r0, #0]
   26d60:	0909      	lsrs	r1, r1, #4
   26d62:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   26d64:	7802      	ldrb	r2, [r0, #0]
   26d66:	f002 020f 	and.w	r2, r2, #15
   26d6a:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   26d6c:	7843      	ldrb	r3, [r0, #1]
   26d6e:	b90b      	cbnz	r3, 26d74 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   26d70:	2000      	movs	r0, #0
}
   26d72:	4770      	bx	lr
		return -EINVAL;
   26d74:	f06f 0015 	mvn.w	r0, #21
   26d78:	4770      	bx	lr
		return -EINVAL;
   26d7a:	f06f 0015 	mvn.w	r0, #21
   26d7e:	4770      	bx	lr

00026d80 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   26d80:	b530      	push	{r4, r5, lr}
   26d82:	b083      	sub	sp, #12
   26d84:	4614      	mov	r4, r2
   26d86:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   26d88:	f10d 0306 	add.w	r3, sp, #6
   26d8c:	f10d 0207 	add.w	r2, sp, #7
   26d90:	f7ff ffe3 	bl	26d5a <unpack_zerolen>
	if (rc != 0) {
   26d94:	4603      	mov	r3, r0
   26d96:	b938      	cbnz	r0, 26da8 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   26d98:	f89d 2007 	ldrb.w	r2, [sp, #7]
   26d9c:	42a2      	cmp	r2, r4
   26d9e:	d109      	bne.n	26db4 <unpack_zerolen_validate+0x34>
   26da0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   26da4:	42aa      	cmp	r2, r5
   26da6:	d102      	bne.n	26dae <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   26da8:	4618      	mov	r0, r3
   26daa:	b003      	add	sp, #12
   26dac:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   26dae:	f06f 0315 	mvn.w	r3, #21
   26db2:	e7f9      	b.n	26da8 <unpack_zerolen_validate+0x28>
   26db4:	f06f 0315 	mvn.w	r3, #21
   26db8:	e7f6      	b.n	26da8 <unpack_zerolen_validate+0x28>

00026dba <subscribe_size>:
{
   26dba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26dbe:	4681      	mov	r9, r0
   26dc0:	460d      	mov	r5, r1
   26dc2:	4616      	mov	r6, r2
   26dc4:	4698      	mov	r8, r3
   26dc6:	f89d 7020 	ldrb.w	r7, [sp, #32]
	*payload_size = PACKET_ID_SIZE;
   26dca:	2302      	movs	r3, #2
   26dcc:	800b      	strh	r3, [r1, #0]
	for (i = 0; i < items; i++) {
   26dce:	2400      	movs	r4, #0
   26dd0:	e008      	b.n	26de4 <subscribe_size+0x2a>
	return 0;
   26dd2:	2000      	movs	r0, #0
		*payload_size += mqtt_strlen(topics[i]) +
   26dd4:	2f00      	cmp	r7, #0
   26dd6:	bf18      	it	ne
   26dd8:	3001      	addne	r0, #1
   26dda:	882b      	ldrh	r3, [r5, #0]
   26ddc:	4418      	add	r0, r3
   26dde:	8028      	strh	r0, [r5, #0]
	for (i = 0; i < items; i++) {
   26de0:	3401      	adds	r4, #1
   26de2:	b2e4      	uxtb	r4, r4
   26de4:	42b4      	cmp	r4, r6
   26de6:	d207      	bcs.n	26df8 <subscribe_size+0x3e>
		*payload_size += mqtt_strlen(topics[i]) +
   26de8:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
	if (str) {
   26dec:	2800      	cmp	r0, #0
   26dee:	d0f0      	beq.n	26dd2 <subscribe_size+0x18>
		return (u16_t)strlen(str);
   26df0:	f7d9 fc86 	bl	700 <strlen>
   26df4:	b280      	uxth	r0, r0
   26df6:	e7ed      	b.n	26dd4 <subscribe_size+0x1a>
	*payload_size += items * INT_SIZE;
   26df8:	8829      	ldrh	r1, [r5, #0]
   26dfa:	eb01 0146 	add.w	r1, r1, r6, lsl #1
   26dfe:	b289      	uxth	r1, r1
   26e00:	8029      	strh	r1, [r5, #0]
	rc = compute_rlen_size(rlen_size, *payload_size);
   26e02:	4648      	mov	r0, r9
   26e04:	f7ff feed 	bl	26be2 <compute_rlen_size>
	if (rc != 0) {
   26e08:	4603      	mov	r3, r0
   26e0a:	b910      	cbnz	r0, 26e12 <subscribe_size+0x58>
}
   26e0c:	4618      	mov	r0, r3
   26e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   26e12:	f06f 0315 	mvn.w	r3, #21
   26e16:	e7f9      	b.n	26e0c <subscribe_size+0x52>

00026e18 <mqtt_pack_subscribe_unsubscribe>:
{
   26e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e1c:	b089      	sub	sp, #36	; 0x24
   26e1e:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
   26e22:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   26e26:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
	if (items <= 0) {
   26e2a:	f1bb 0f00 	cmp.w	fp, #0
   26e2e:	d068      	beq.n	26f02 <mqtt_pack_subscribe_unsubscribe+0xea>
	if (type != MQTT_SUBSCRIBE && type != MQTT_UNSUBSCRIBE) {
   26e30:	f1ba 0f08 	cmp.w	sl, #8
   26e34:	d002      	beq.n	26e3c <mqtt_pack_subscribe_unsubscribe+0x24>
   26e36:	f1ba 0f0a 	cmp.w	sl, #10
   26e3a:	d166      	bne.n	26f0a <mqtt_pack_subscribe_unsubscribe+0xf2>
   26e3c:	461e      	mov	r6, r3
   26e3e:	4614      	mov	r4, r2
   26e40:	9105      	str	r1, [sp, #20]
   26e42:	4607      	mov	r7, r0
	rc = subscribe_size(&rlen_size, &payload, items, topics,
   26e44:	f1ba 0f08 	cmp.w	sl, #8
   26e48:	bf14      	ite	ne
   26e4a:	2300      	movne	r3, #0
   26e4c:	2301      	moveq	r3, #1
   26e4e:	9300      	str	r3, [sp, #0]
   26e50:	4643      	mov	r3, r8
   26e52:	465a      	mov	r2, fp
   26e54:	a907      	add	r1, sp, #28
   26e56:	f10d 001e 	add.w	r0, sp, #30
   26e5a:	f7ff ffae 	bl	26dba <subscribe_size>
	if (rc != 0) {
   26e5e:	9004      	str	r0, [sp, #16]
   26e60:	2800      	cmp	r0, #0
   26e62:	d156      	bne.n	26f12 <mqtt_pack_subscribe_unsubscribe+0xfa>
	if ((rlen_size + payload + 1) > size) {
   26e64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   26e68:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   26e6c:	4413      	add	r3, r2
   26e6e:	3301      	adds	r3, #1
   26e70:	42a3      	cmp	r3, r4
   26e72:	dc52      	bgt.n	26f1a <mqtt_pack_subscribe_unsubscribe+0x102>
	buf[0] = (type << 4) + 0x02;
   26e74:	ea4f 130a 	mov.w	r3, sl, lsl #4
   26e78:	b2db      	uxtb	r3, r3
   26e7a:	3302      	adds	r3, #2
   26e7c:	4638      	mov	r0, r7
   26e7e:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   26e82:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   26e86:	f7ff fed0 	bl	26c2a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   26e8a:	f8bd 501e 	ldrh.w	r5, [sp, #30]
   26e8e:	1c6a      	adds	r2, r5, #1
   26e90:	b292      	uxth	r2, r2
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + offset));
   26e92:	0a33      	lsrs	r3, r6, #8
   26e94:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
   26e98:	52be      	strh	r6, [r7, r2]
	offset += PACKET_ID_SIZE;
   26e9a:	3503      	adds	r5, #3
   26e9c:	b2ad      	uxth	r5, r5
	for (i = 0; i < items; i++) {
   26e9e:	2600      	movs	r6, #0
   26ea0:	e013      	b.n	26eca <mqtt_pack_subscribe_unsubscribe+0xb2>
	return 0;
   26ea2:	2400      	movs	r4, #0
		UNALIGNED_PUT(htons(topic_len), (u16_t *)(buf + offset));
   26ea4:	0a23      	lsrs	r3, r4, #8
   26ea6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   26eaa:	537b      	strh	r3, [r7, r5]
		offset += INT_SIZE;
   26eac:	3502      	adds	r5, #2
   26eae:	b2ad      	uxth	r5, r5
		memcpy(buf + offset, topics[i], topic_len);
   26eb0:	4622      	mov	r2, r4
   26eb2:	f858 1009 	ldr.w	r1, [r8, r9]
   26eb6:	1978      	adds	r0, r7, r5
   26eb8:	f7d9 fa02 	bl	2c0 <memcpy>
		offset += topic_len;
   26ebc:	4425      	add	r5, r4
   26ebe:	b2ad      	uxth	r5, r5
		if (type == MQTT_SUBSCRIBE) {
   26ec0:	f1ba 0f08 	cmp.w	sl, #8
   26ec4:	d00e      	beq.n	26ee4 <mqtt_pack_subscribe_unsubscribe+0xcc>
	for (i = 0; i < items; i++) {
   26ec6:	3601      	adds	r6, #1
   26ec8:	b2f6      	uxtb	r6, r6
   26eca:	455e      	cmp	r6, fp
   26ecc:	d213      	bcs.n	26ef6 <mqtt_pack_subscribe_unsubscribe+0xde>
		u16_t topic_len = mqtt_strlen(topics[i]);
   26ece:	9603      	str	r6, [sp, #12]
   26ed0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   26ed4:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	if (str) {
   26ed8:	2800      	cmp	r0, #0
   26eda:	d0e2      	beq.n	26ea2 <mqtt_pack_subscribe_unsubscribe+0x8a>
		return (u16_t)strlen(str);
   26edc:	f7d9 fc10 	bl	700 <strlen>
   26ee0:	b284      	uxth	r4, r0
   26ee2:	e7df      	b.n	26ea4 <mqtt_pack_subscribe_unsubscribe+0x8c>
			buf[offset] = qos[i] & 0x03;
   26ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26ee6:	9a03      	ldr	r2, [sp, #12]
   26ee8:	5c9b      	ldrb	r3, [r3, r2]
   26eea:	f003 0303 	and.w	r3, r3, #3
   26eee:	557b      	strb	r3, [r7, r5]
			offset += QoS_SIZE;
   26ef0:	3501      	adds	r5, #1
   26ef2:	b2ad      	uxth	r5, r5
   26ef4:	e7e7      	b.n	26ec6 <mqtt_pack_subscribe_unsubscribe+0xae>
	*length = offset;
   26ef6:	9b05      	ldr	r3, [sp, #20]
   26ef8:	801d      	strh	r5, [r3, #0]
}
   26efa:	9804      	ldr	r0, [sp, #16]
   26efc:	b009      	add	sp, #36	; 0x24
   26efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   26f02:	f06f 0315 	mvn.w	r3, #21
   26f06:	9304      	str	r3, [sp, #16]
   26f08:	e7f7      	b.n	26efa <mqtt_pack_subscribe_unsubscribe+0xe2>
		return -EINVAL;
   26f0a:	f06f 0315 	mvn.w	r3, #21
   26f0e:	9304      	str	r3, [sp, #16]
   26f10:	e7f3      	b.n	26efa <mqtt_pack_subscribe_unsubscribe+0xe2>
		return -EINVAL;
   26f12:	f06f 0315 	mvn.w	r3, #21
   26f16:	9304      	str	r3, [sp, #16]
   26f18:	e7ef      	b.n	26efa <mqtt_pack_subscribe_unsubscribe+0xe2>
		return -ENOMEM;
   26f1a:	f06f 030b 	mvn.w	r3, #11
   26f1e:	9304      	str	r3, [sp, #16]
   26f20:	e7eb      	b.n	26efa <mqtt_pack_subscribe_unsubscribe+0xe2>

00026f22 <mqtt_pack_puback>:
{
   26f22:	b500      	push	{lr}
   26f24:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   26f26:	9301      	str	r3, [sp, #4]
   26f28:	2300      	movs	r3, #0
   26f2a:	9300      	str	r3, [sp, #0]
   26f2c:	2304      	movs	r3, #4
   26f2e:	f7ff fead 	bl	26c8c <pack_pkt_id>
}
   26f32:	b003      	add	sp, #12
   26f34:	f85d fb04 	ldr.w	pc, [sp], #4

00026f38 <mqtt_pack_pubrec>:
{
   26f38:	b500      	push	{lr}
   26f3a:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   26f3c:	9301      	str	r3, [sp, #4]
   26f3e:	2300      	movs	r3, #0
   26f40:	9300      	str	r3, [sp, #0]
   26f42:	2305      	movs	r3, #5
   26f44:	f7ff fea2 	bl	26c8c <pack_pkt_id>
}
   26f48:	b003      	add	sp, #12
   26f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00026f4e <mqtt_pack_pubrel>:
{
   26f4e:	b500      	push	{lr}
   26f50:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   26f52:	9301      	str	r3, [sp, #4]
   26f54:	2302      	movs	r3, #2
   26f56:	9300      	str	r3, [sp, #0]
   26f58:	2306      	movs	r3, #6
   26f5a:	f7ff fe97 	bl	26c8c <pack_pkt_id>
}
   26f5e:	b003      	add	sp, #12
   26f60:	f85d fb04 	ldr.w	pc, [sp], #4

00026f64 <mqtt_pack_pubcomp>:
{
   26f64:	b500      	push	{lr}
   26f66:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   26f68:	9301      	str	r3, [sp, #4]
   26f6a:	2300      	movs	r3, #0
   26f6c:	9300      	str	r3, [sp, #0]
   26f6e:	2307      	movs	r3, #7
   26f70:	f7ff fe8c 	bl	26c8c <pack_pkt_id>
}
   26f74:	b003      	add	sp, #12
   26f76:	f85d fb04 	ldr.w	pc, [sp], #4

00026f7a <mqtt_pack_connect>:
{
   26f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f7e:	b082      	sub	sp, #8
   26f80:	4605      	mov	r5, r0
   26f82:	460e      	mov	r6, r1
   26f84:	4617      	mov	r7, r2
   26f86:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   26f88:	891b      	ldrh	r3, [r3, #8]
   26f8a:	1c99      	adds	r1, r3, #2
   26f8c:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   26f8e:	7aa2      	ldrb	r2, [r4, #10]
   26f90:	f012 0f01 	tst.w	r2, #1
   26f94:	d009      	beq.n	26faa <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   26f96:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   26f98:	8aa3      	ldrh	r3, [r4, #20]
   26f9a:	fa13 f181 	uxtah	r1, r3, r1
   26f9e:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   26fa0:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   26fa2:	8ba3      	ldrh	r3, [r4, #28]
   26fa4:	fa13 f181 	uxtah	r1, r3, r1
   26fa8:	b289      	uxth	r1, r1
	if (msg->user_name) {
   26faa:	6a23      	ldr	r3, [r4, #32]
   26fac:	b123      	cbz	r3, 26fb8 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   26fae:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   26fb0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   26fb2:	fa13 f181 	uxtah	r1, r3, r1
   26fb6:	b289      	uxth	r1, r1
	if (msg->password) {
   26fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26fba:	b123      	cbz	r3, 26fc6 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   26fbc:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   26fbe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   26fc0:	fa13 f181 	uxtah	r1, r3, r1
   26fc4:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   26fc6:	310a      	adds	r1, #10
   26fc8:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   26fcc:	4651      	mov	r1, sl
   26fce:	f10d 0006 	add.w	r0, sp, #6
   26fd2:	f7ff fe06 	bl	26be2 <compute_rlen_size>
	if (rc != 0) {
   26fd6:	4681      	mov	r9, r0
   26fd8:	2800      	cmp	r0, #0
   26fda:	f040 80b6 	bne.w	2714a <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   26fde:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   26fe2:	44d0      	add	r8, sl
   26fe4:	fa1f f888 	uxth.w	r8, r8
   26fe8:	f108 0801 	add.w	r8, r8, #1
   26fec:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   26ff0:	45b8      	cmp	r8, r7
   26ff2:	f200 80ad 	bhi.w	27150 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   26ff6:	4628      	mov	r0, r5
   26ff8:	2310      	movs	r3, #16
   26ffa:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   26ffe:	4651      	mov	r1, sl
   27000:	f7ff fe13 	bl	26c2a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   27004:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   27008:	1c43      	adds	r3, r0, #1
   2700a:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   2700c:	2200      	movs	r2, #0
   2700e:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   27010:	1c59      	adds	r1, r3, #1
   27012:	2204      	movs	r2, #4
   27014:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   27016:	1c99      	adds	r1, r3, #2
   27018:	274d      	movs	r7, #77	; 0x4d
   2701a:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   2701c:	1cd9      	adds	r1, r3, #3
   2701e:	2751      	movs	r7, #81	; 0x51
   27020:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   27022:	189f      	adds	r7, r3, r2
   27024:	2154      	movs	r1, #84	; 0x54
   27026:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   27028:	1d5f      	adds	r7, r3, #5
   2702a:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   2702c:	1d99      	adds	r1, r3, #6
   2702e:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   27030:	1ddf      	adds	r7, r3, #7
   27032:	6a22      	ldr	r2, [r4, #32]
   27034:	2a00      	cmp	r2, #0
   27036:	d05f      	beq.n	270f8 <mqtt_pack_connect+0x17e>
   27038:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   2703c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2703e:	2a00      	cmp	r2, #0
   27040:	d05c      	beq.n	270fc <mqtt_pack_connect+0x182>
   27042:	2240      	movs	r2, #64	; 0x40
   27044:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   27046:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   27048:	f012 0f01 	tst.w	r2, #1
   2704c:	d058      	beq.n	27100 <mqtt_pack_connect+0x186>
   2704e:	2220      	movs	r2, #32
   27050:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   27052:	7ae2      	ldrb	r2, [r4, #11]
   27054:	00d2      	lsls	r2, r2, #3
   27056:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   2705a:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   2705c:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   2705e:	f011 0f01 	tst.w	r1, #1
   27062:	d04f      	beq.n	27104 <mqtt_pack_connect+0x18a>
   27064:	2104      	movs	r1, #4
   27066:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   27068:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   2706a:	f012 0f01 	tst.w	r2, #1
   2706e:	d04b      	beq.n	27108 <mqtt_pack_connect+0x18e>
   27070:	2202      	movs	r2, #2
   27072:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   27074:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   27076:	3308      	adds	r3, #8
   27078:	8be1      	ldrh	r1, [r4, #30]
   2707a:	0a0a      	lsrs	r2, r1, #8
   2707c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   27080:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   27082:	f100 030b 	add.w	r3, r0, #11
   27086:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   27088:	8921      	ldrh	r1, [r4, #8]
   2708a:	0a0a      	lsrs	r2, r1, #8
   2708c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   27090:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   27092:	300d      	adds	r0, #13
   27094:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   27096:	8922      	ldrh	r2, [r4, #8]
   27098:	6861      	ldr	r1, [r4, #4]
   2709a:	19e8      	adds	r0, r5, r7
   2709c:	f7d9 f910 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   270a0:	8920      	ldrh	r0, [r4, #8]
   270a2:	4438      	add	r0, r7
   270a4:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   270a6:	7aa3      	ldrb	r3, [r4, #10]
   270a8:	f013 0f01 	tst.w	r3, #1
   270ac:	d12e      	bne.n	2710c <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   270ae:	6a23      	ldr	r3, [r4, #32]
   270b0:	b173      	cbz	r3, 270d0 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   270b2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   270b4:	0a13      	lsrs	r3, r2, #8
   270b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   270ba:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   270bc:	3002      	adds	r0, #2
   270be:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   270c0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   270c2:	6a21      	ldr	r1, [r4, #32]
   270c4:	19e8      	adds	r0, r5, r7
   270c6:	f7d9 f8fb 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   270ca:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   270cc:	4438      	add	r0, r7
   270ce:	b280      	uxth	r0, r0
	if (msg->password) {
   270d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   270d2:	b15b      	cbz	r3, 270ec <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   270d4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   270d6:	0a13      	lsrs	r3, r2, #8
   270d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   270dc:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   270de:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   270e0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   270e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   270e4:	fa15 f080 	uxtah	r0, r5, r0
   270e8:	f7d9 f8ea 	bl	2c0 <memcpy>
	*length = total_buf_size;
   270ec:	f8a6 8000 	strh.w	r8, [r6]
}
   270f0:	4648      	mov	r0, r9
   270f2:	b002      	add	sp, #8
   270f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   270f8:	2100      	movs	r1, #0
   270fa:	e79f      	b.n	2703c <mqtt_pack_connect+0xc2>
   270fc:	2200      	movs	r2, #0
   270fe:	e7a1      	b.n	27044 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   27100:	2200      	movs	r2, #0
   27102:	e7a5      	b.n	27050 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   27104:	2100      	movs	r1, #0
   27106:	e7ae      	b.n	27066 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   27108:	2200      	movs	r2, #0
   2710a:	e7b2      	b.n	27072 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   2710c:	8aa2      	ldrh	r2, [r4, #20]
   2710e:	0a13      	lsrs	r3, r2, #8
   27110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27114:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   27116:	3002      	adds	r0, #2
   27118:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   2711a:	8aa2      	ldrh	r2, [r4, #20]
   2711c:	6921      	ldr	r1, [r4, #16]
   2711e:	19e8      	adds	r0, r5, r7
   27120:	f7d9 f8ce 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   27124:	8aa0      	ldrh	r0, [r4, #20]
   27126:	4407      	add	r7, r0
   27128:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   2712a:	8ba2      	ldrh	r2, [r4, #28]
   2712c:	0a13      	lsrs	r3, r2, #8
   2712e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27132:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   27134:	3702      	adds	r7, #2
   27136:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   27138:	8ba2      	ldrh	r2, [r4, #28]
   2713a:	69a1      	ldr	r1, [r4, #24]
   2713c:	19e8      	adds	r0, r5, r7
   2713e:	f7d9 f8bf 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   27142:	8ba0      	ldrh	r0, [r4, #28]
   27144:	4438      	add	r0, r7
   27146:	b280      	uxth	r0, r0
   27148:	e7b1      	b.n	270ae <mqtt_pack_connect+0x134>
		return -EINVAL;
   2714a:	f06f 0915 	mvn.w	r9, #21
   2714e:	e7cf      	b.n	270f0 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   27150:	f06f 090b 	mvn.w	r9, #11
   27154:	e7cc      	b.n	270f0 <mqtt_pack_connect+0x176>

00027156 <mqtt_pack_subscribe>:
{
   27156:	b510      	push	{r4, lr}
   27158:	b084      	sub	sp, #16
	return mqtt_pack_subscribe_unsubscribe(buf, length, size, pkt_id,
   2715a:	2408      	movs	r4, #8
   2715c:	9403      	str	r4, [sp, #12]
   2715e:	9c08      	ldr	r4, [sp, #32]
   27160:	9402      	str	r4, [sp, #8]
   27162:	9c07      	ldr	r4, [sp, #28]
   27164:	9401      	str	r4, [sp, #4]
   27166:	f89d 4018 	ldrb.w	r4, [sp, #24]
   2716a:	9400      	str	r4, [sp, #0]
   2716c:	f7ff fe54 	bl	26e18 <mqtt_pack_subscribe_unsubscribe>
}
   27170:	b004      	add	sp, #16
   27172:	bd10      	pop	{r4, pc}

00027174 <mqtt_unpack_suback>:
{
   27174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27178:	b087      	sub	sp, #28
   2717a:	461d      	mov	r5, r3
   2717c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   27180:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   27182:	2300      	movs	r3, #0
   27184:	8013      	strh	r3, [r2, #0]
	*items = 0;
   27186:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   27188:	2f00      	cmp	r7, #0
   2718a:	d037      	beq.n	271fc <mqtt_unpack_suback+0x88>
   2718c:	4604      	mov	r4, r0
   2718e:	4689      	mov	r9, r1
   27190:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   27192:	7803      	ldrb	r3, [r0, #0]
   27194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   27198:	2a90      	cmp	r2, #144	; 0x90
   2719a:	d138      	bne.n	2720e <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   2719c:	1e4b      	subs	r3, r1, #1
   2719e:	b29b      	uxth	r3, r3
   271a0:	1c42      	adds	r2, r0, #1
   271a2:	f10d 0116 	add.w	r1, sp, #22
   271a6:	a804      	add	r0, sp, #16
   271a8:	f7ff fd51 	bl	26c4e <rlen_decode>
	if (rc != 0) {
   271ac:	4603      	mov	r3, r0
   271ae:	2800      	cmp	r0, #0
   271b0:	d136      	bne.n	27220 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   271b2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   271b6:	9804      	ldr	r0, [sp, #16]
   271b8:	180a      	adds	r2, r1, r0
   271ba:	3201      	adds	r2, #1
   271bc:	454a      	cmp	r2, r9
   271be:	d838      	bhi.n	27232 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   271c0:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   271c2:	fa14 f282 	uxtah	r2, r4, r2
   271c6:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   271c8:	0a02      	lsrs	r2, r0, #8
   271ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   271ce:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   271d2:	3103      	adds	r1, #3
   271d4:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   271d6:	9a04      	ldr	r2, [sp, #16]
   271d8:	3a02      	subs	r2, #2
   271da:	b2d2      	uxtb	r2, r2
   271dc:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   271de:	4297      	cmp	r7, r2
   271e0:	d335      	bcc.n	2724e <mqtt_unpack_suback+0xda>
   271e2:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   271e4:	7828      	ldrb	r0, [r5, #0]
   271e6:	4282      	cmp	r2, r0
   271e8:	d242      	bcs.n	27270 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   271ea:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   271ec:	2802      	cmp	r0, #2
   271ee:	d837      	bhi.n	27260 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   271f0:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   271f2:	3101      	adds	r1, #1
   271f4:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   271f6:	3201      	adds	r2, #1
   271f8:	b2d2      	uxtb	r2, r2
   271fa:	e7f3      	b.n	271e4 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   271fc:	f240 321a 	movw	r2, #794	; 0x31a
   27200:	491d      	ldr	r1, [pc, #116]	; (27278 <mqtt_unpack_suback+0x104>)
   27202:	481e      	ldr	r0, [pc, #120]	; (2727c <mqtt_unpack_suback+0x108>)
   27204:	f7db ffc4 	bl	3190 <printk>
		return -EINVAL;
   27208:	f06f 0315 	mvn.w	r3, #21
   2720c:	e030      	b.n	27270 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   2720e:	f240 321f 	movw	r2, #799	; 0x31f
   27212:	4919      	ldr	r1, [pc, #100]	; (27278 <mqtt_unpack_suback+0x104>)
   27214:	481a      	ldr	r0, [pc, #104]	; (27280 <mqtt_unpack_suback+0x10c>)
   27216:	f7db ffbb 	bl	3190 <printk>
		return -EINVAL;
   2721a:	f06f 0315 	mvn.w	r3, #21
   2721e:	e027      	b.n	27270 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   27220:	f240 3226 	movw	r2, #806	; 0x326
   27224:	4914      	ldr	r1, [pc, #80]	; (27278 <mqtt_unpack_suback+0x104>)
   27226:	4817      	ldr	r0, [pc, #92]	; (27284 <mqtt_unpack_suback+0x110>)
   27228:	f7db ffb2 	bl	3190 <printk>
		return -EINVAL;
   2722c:	f06f 0315 	mvn.w	r3, #21
   27230:	e01e      	b.n	27270 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   27232:	f8cd 9008 	str.w	r9, [sp, #8]
   27236:	9101      	str	r1, [sp, #4]
   27238:	9000      	str	r0, [sp, #0]
   2723a:	2301      	movs	r3, #1
   2723c:	f240 322d 	movw	r2, #813	; 0x32d
   27240:	490d      	ldr	r1, [pc, #52]	; (27278 <mqtt_unpack_suback+0x104>)
   27242:	4811      	ldr	r0, [pc, #68]	; (27288 <mqtt_unpack_suback+0x114>)
   27244:	f7db ffa4 	bl	3190 <printk>
		return -EINVAL;
   27248:	f06f 0315 	mvn.w	r3, #21
   2724c:	e010      	b.n	27270 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   2724e:	f240 323b 	movw	r2, #827	; 0x33b
   27252:	4909      	ldr	r1, [pc, #36]	; (27278 <mqtt_unpack_suback+0x104>)
   27254:	480d      	ldr	r0, [pc, #52]	; (2728c <mqtt_unpack_suback+0x118>)
   27256:	f7db ff9b 	bl	3190 <printk>
		return -EINVAL;
   2725a:	f06f 0315 	mvn.w	r3, #21
   2725e:	e007      	b.n	27270 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   27260:	f240 3242 	movw	r2, #834	; 0x342
   27264:	4904      	ldr	r1, [pc, #16]	; (27278 <mqtt_unpack_suback+0x104>)
   27266:	480a      	ldr	r0, [pc, #40]	; (27290 <mqtt_unpack_suback+0x11c>)
   27268:	f7db ff92 	bl	3190 <printk>
			return -EINVAL;
   2726c:	f06f 0315 	mvn.w	r3, #21
}
   27270:	4618      	mov	r0, r3
   27272:	b007      	add	sp, #28
   27274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27278:	000344b0 	.word	0x000344b0
   2727c:	000344c4 	.word	0x000344c4
   27280:	000344dc 	.word	0x000344dc
   27284:	00034504 	.word	0x00034504
   27288:	00034528 	.word	0x00034528
   2728c:	00034570 	.word	0x00034570
   27290:	0003459c 	.word	0x0003459c

00027294 <mqtt_pack_publish>:
{
   27294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27298:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   2729a:	785c      	ldrb	r4, [r3, #1]
   2729c:	2c02      	cmp	r4, #2
   2729e:	d860      	bhi.n	27362 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   272a0:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   272a4:	2c00      	cmp	r4, #0
   272a6:	d057      	beq.n	27358 <mqtt_pack_publish+0xc4>
   272a8:	f04f 0e02 	mov.w	lr, #2
   272ac:	461c      	mov	r4, r3
   272ae:	4615      	mov	r5, r2
   272b0:	460f      	mov	r7, r1
   272b2:	4606      	mov	r6, r0
   272b4:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   272b8:	8aa2      	ldrh	r2, [r4, #20]
   272ba:	fa12 f383 	uxtah	r3, r2, r3
   272be:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   272c0:	3302      	adds	r3, #2
   272c2:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   272c6:	4649      	mov	r1, r9
   272c8:	f10d 0006 	add.w	r0, sp, #6
   272cc:	f7ff fc89 	bl	26be2 <compute_rlen_size>
	if (rc != 0) {
   272d0:	4680      	mov	r8, r0
   272d2:	2800      	cmp	r0, #0
   272d4:	d148      	bne.n	27368 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   272d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   272da:	3301      	adds	r3, #1
   272dc:	444b      	add	r3, r9
   272de:	42ab      	cmp	r3, r5
   272e0:	dc45      	bgt.n	2736e <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   272e2:	7823      	ldrb	r3, [r4, #0]
   272e4:	2b00      	cmp	r3, #0
   272e6:	d03a      	beq.n	2735e <mqtt_pack_publish+0xca>
   272e8:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   272ea:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   272ec:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   272f0:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   272f2:	78a2      	ldrb	r2, [r4, #2]
   272f4:	2a00      	cmp	r2, #0
   272f6:	bf18      	it	ne
   272f8:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   272fc:	4630      	mov	r0, r6
   272fe:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   27302:	4649      	mov	r1, r9
   27304:	f7ff fc91 	bl	26c2a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   27308:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   2730c:	1c6b      	adds	r3, r5, #1
   2730e:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   27310:	89a1      	ldrh	r1, [r4, #12]
   27312:	0a0a      	lsrs	r2, r1, #8
   27314:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   27318:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   2731a:	3503      	adds	r5, #3
   2731c:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   2731e:	89a2      	ldrh	r2, [r4, #12]
   27320:	68a1      	ldr	r1, [r4, #8]
   27322:	1970      	adds	r0, r6, r5
   27324:	f7d8 ffcc 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   27328:	89a3      	ldrh	r3, [r4, #12]
   2732a:	441d      	add	r5, r3
   2732c:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   2732e:	7863      	ldrb	r3, [r4, #1]
   27330:	b133      	cbz	r3, 27340 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   27332:	88a2      	ldrh	r2, [r4, #4]
   27334:	0a13      	lsrs	r3, r2, #8
   27336:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2733a:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   2733c:	3502      	adds	r5, #2
   2733e:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   27340:	8aa2      	ldrh	r2, [r4, #20]
   27342:	6921      	ldr	r1, [r4, #16]
   27344:	1970      	adds	r0, r6, r5
   27346:	f7d8 ffbb 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   2734a:	8aa3      	ldrh	r3, [r4, #20]
   2734c:	441d      	add	r5, r3
	*length = offset;
   2734e:	803d      	strh	r5, [r7, #0]
}
   27350:	4640      	mov	r0, r8
   27352:	b003      	add	sp, #12
   27354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   27358:	f04f 0e00 	mov.w	lr, #0
   2735c:	e7a6      	b.n	272ac <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2735e:	2330      	movs	r3, #48	; 0x30
   27360:	e7c3      	b.n	272ea <mqtt_pack_publish+0x56>
		return -EINVAL;
   27362:	f06f 0815 	mvn.w	r8, #21
   27366:	e7f3      	b.n	27350 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   27368:	f06f 0815 	mvn.w	r8, #21
   2736c:	e7f0      	b.n	27350 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   2736e:	f06f 080b 	mvn.w	r8, #11
   27372:	e7ed      	b.n	27350 <mqtt_pack_publish+0xbc>

00027374 <mqtt_unpack_publish>:
{
   27374:	b5f0      	push	{r4, r5, r6, r7, lr}
   27376:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   27378:	7807      	ldrb	r7, [r0, #0]
   2737a:	093b      	lsrs	r3, r7, #4
   2737c:	2b03      	cmp	r3, #3
   2737e:	d148      	bne.n	27412 <mqtt_unpack_publish+0x9e>
   27380:	4615      	mov	r5, r2
   27382:	460e      	mov	r6, r1
   27384:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   27386:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   2738a:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   2738c:	7803      	ldrb	r3, [r0, #0]
   2738e:	f3c3 0341 	ubfx	r3, r3, #1, #2
   27392:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   27394:	4602      	mov	r2, r0
   27396:	f812 3b01 	ldrb.w	r3, [r2], #1
   2739a:	f003 0301 	and.w	r3, r3, #1
   2739e:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   273a0:	1e4b      	subs	r3, r1, #1
   273a2:	b29b      	uxth	r3, r3
   273a4:	f10d 0106 	add.w	r1, sp, #6
   273a8:	4668      	mov	r0, sp
   273aa:	f7ff fc50 	bl	26c4e <rlen_decode>
	if (rc != 0) {
   273ae:	4607      	mov	r7, r0
   273b0:	2800      	cmp	r0, #0
   273b2:	d131      	bne.n	27418 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   273b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   273b8:	9b00      	ldr	r3, [sp, #0]
   273ba:	4413      	add	r3, r2
   273bc:	3301      	adds	r3, #1
   273be:	42b3      	cmp	r3, r6
   273c0:	d82d      	bhi.n	2741e <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   273c2:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   273c4:	fa14 f383 	uxtah	r3, r4, r3
   273c8:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   273ca:	0a0b      	lsrs	r3, r1, #8
   273cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   273d0:	b29b      	uxth	r3, r3
   273d2:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   273d4:	3203      	adds	r2, #3
   273d6:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   273d8:	18d1      	adds	r1, r2, r3
   273da:	42b1      	cmp	r1, r6
   273dc:	dc22      	bgt.n	27424 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   273de:	18a1      	adds	r1, r4, r2
   273e0:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   273e2:	4413      	add	r3, r2
   273e4:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   273e6:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   273e8:	786a      	ldrb	r2, [r5, #1]
   273ea:	3a01      	subs	r2, #1
   273ec:	b2d2      	uxtb	r2, r2
   273ee:	2a01      	cmp	r2, #1
   273f0:	d908      	bls.n	27404 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   273f2:	2200      	movs	r2, #0
   273f4:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   273f6:	1af6      	subs	r6, r6, r3
   273f8:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   273fa:	4423      	add	r3, r4
   273fc:	612b      	str	r3, [r5, #16]
}
   273fe:	4638      	mov	r0, r7
   27400:	b003      	add	sp, #12
   27402:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   27404:	0a0a      	lsrs	r2, r1, #8
   27406:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   2740a:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   2740c:	3302      	adds	r3, #2
   2740e:	b29b      	uxth	r3, r3
   27410:	e7f1      	b.n	273f6 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   27412:	f06f 0715 	mvn.w	r7, #21
   27416:	e7f2      	b.n	273fe <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   27418:	f06f 0715 	mvn.w	r7, #21
   2741c:	e7ef      	b.n	273fe <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   2741e:	f06f 0715 	mvn.w	r7, #21
   27422:	e7ec      	b.n	273fe <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   27424:	f06f 0715 	mvn.w	r7, #21
   27428:	e7e9      	b.n	273fe <mqtt_unpack_publish+0x8a>

0002742a <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   2742a:	2903      	cmp	r1, #3
   2742c:	d90d      	bls.n	2744a <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   2742e:	7801      	ldrb	r1, [r0, #0]
   27430:	2920      	cmp	r1, #32
   27432:	d10d      	bne.n	27450 <mqtt_unpack_connack+0x26>
   27434:	7841      	ldrb	r1, [r0, #1]
   27436:	2902      	cmp	r1, #2
   27438:	d10d      	bne.n	27456 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   2743a:	7881      	ldrb	r1, [r0, #2]
   2743c:	2901      	cmp	r1, #1
   2743e:	d80d      	bhi.n	2745c <mqtt_unpack_connack+0x32>
	*session = buf[2];
   27440:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   27442:	78c2      	ldrb	r2, [r0, #3]
   27444:	701a      	strb	r2, [r3, #0]
	return 0;
   27446:	2000      	movs	r0, #0
   27448:	4770      	bx	lr
		return -EINVAL;
   2744a:	f06f 0015 	mvn.w	r0, #21
   2744e:	4770      	bx	lr
		return -EINVAL;
   27450:	f06f 0015 	mvn.w	r0, #21
   27454:	4770      	bx	lr
   27456:	f06f 0015 	mvn.w	r0, #21
   2745a:	4770      	bx	lr
		return -EINVAL;
   2745c:	f06f 0015 	mvn.w	r0, #21
}
   27460:	4770      	bx	lr

00027462 <mqtt_pack_disconnect>:
{
   27462:	b500      	push	{lr}
   27464:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   27466:	2300      	movs	r3, #0
   27468:	9300      	str	r3, [sp, #0]
   2746a:	230e      	movs	r3, #14
   2746c:	f7ff fc29 	bl	26cc2 <pack_zerolen>
}
   27470:	b003      	add	sp, #12
   27472:	f85d fb04 	ldr.w	pc, [sp], #4

00027476 <mqtt_unpack_puback>:
{
   27476:	b500      	push	{lr}
   27478:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   2747a:	2300      	movs	r3, #0
   2747c:	9300      	str	r3, [sp, #0]
   2747e:	2304      	movs	r3, #4
   27480:	f7ff fc4c 	bl	26d1c <unpack_pktid_validate>
}
   27484:	b003      	add	sp, #12
   27486:	f85d fb04 	ldr.w	pc, [sp], #4

0002748a <mqtt_unpack_pubrec>:
{
   2748a:	b500      	push	{lr}
   2748c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   2748e:	2300      	movs	r3, #0
   27490:	9300      	str	r3, [sp, #0]
   27492:	2305      	movs	r3, #5
   27494:	f7ff fc42 	bl	26d1c <unpack_pktid_validate>
}
   27498:	b003      	add	sp, #12
   2749a:	f85d fb04 	ldr.w	pc, [sp], #4

0002749e <mqtt_unpack_pubrel>:
{
   2749e:	b500      	push	{lr}
   274a0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   274a2:	2302      	movs	r3, #2
   274a4:	9300      	str	r3, [sp, #0]
   274a6:	2306      	movs	r3, #6
   274a8:	f7ff fc38 	bl	26d1c <unpack_pktid_validate>
}
   274ac:	b003      	add	sp, #12
   274ae:	f85d fb04 	ldr.w	pc, [sp], #4

000274b2 <mqtt_unpack_pubcomp>:
{
   274b2:	b500      	push	{lr}
   274b4:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   274b6:	2300      	movs	r3, #0
   274b8:	9300      	str	r3, [sp, #0]
   274ba:	2307      	movs	r3, #7
   274bc:	f7ff fc2e 	bl	26d1c <unpack_pktid_validate>
}
   274c0:	b003      	add	sp, #12
   274c2:	f85d fb04 	ldr.w	pc, [sp], #4

000274c6 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   274c6:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   274c8:	2300      	movs	r3, #0
   274ca:	220d      	movs	r2, #13
   274cc:	f7ff fc58 	bl	26d80 <unpack_zerolen_validate>
}
   274d0:	bd08      	pop	{r3, pc}
	...

000274d4 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   274d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   274d6:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   274d8:	1f13      	subs	r3, r2, #4
   274da:	2b03      	cmp	r3, #3
   274dc:	d840      	bhi.n	27560 <mqtt_rx_pub_msgs+0x8c>
   274de:	e8df f003 	tbb	[pc, r3]
   274e2:	0502      	.short	0x0502
   274e4:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   274e6:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   274e8:	4f22      	ldr	r7, [pc, #136]	; (27574 <mqtt_rx_pub_msgs+0xa0>)
   274ea:	e007      	b.n	274fc <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   274ec:	4e22      	ldr	r6, [pc, #136]	; (27578 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   274ee:	4f23      	ldr	r7, [pc, #140]	; (2757c <mqtt_rx_pub_msgs+0xa8>)
		break;
   274f0:	e004      	b.n	274fc <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   274f2:	4e23      	ldr	r6, [pc, #140]	; (27580 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   274f4:	4f23      	ldr	r7, [pc, #140]	; (27584 <mqtt_rx_pub_msgs+0xb0>)
		break;
   274f6:	e001      	b.n	274fc <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   274f8:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   274fa:	4f23      	ldr	r7, [pc, #140]	; (27588 <mqtt_rx_pub_msgs+0xb4>)
   274fc:	4614      	mov	r4, r2
   274fe:	460b      	mov	r3, r1
   27500:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   27502:	f10d 0206 	add.w	r2, sp, #6
   27506:	8989      	ldrh	r1, [r1, #12]
   27508:	6898      	ldr	r0, [r3, #8]
   2750a:	47b8      	blx	r7
	if (rc != 0) {
   2750c:	bb58      	cbnz	r0, 27566 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   2750e:	2c06      	cmp	r4, #6
   27510:	d012      	beq.n	27538 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   27512:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   27516:	4622      	mov	r2, r4
   27518:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2751c:	4628      	mov	r0, r5
   2751e:	4798      	blx	r3
   27520:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   27522:	bb1b      	cbnz	r3, 2756c <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   27524:	b12e      	cbz	r6, 27532 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   27526:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2752a:	4628      	mov	r0, r5
   2752c:	47b0      	blx	r6
	if (rc != 0) {
   2752e:	4603      	mov	r3, r0
   27530:	b998      	cbnz	r0, 2755a <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   27532:	4618      	mov	r0, r3
   27534:	b003      	add	sp, #12
   27536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   27538:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   2753c:	2b01      	cmp	r3, #1
   2753e:	d009      	beq.n	27554 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   27540:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   27544:	2306      	movs	r3, #6
   27546:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2754a:	2100      	movs	r1, #0
   2754c:	4628      	mov	r0, r5
   2754e:	47a0      	blx	r4
   27550:	4603      	mov	r3, r0
   27552:	e7e6      	b.n	27522 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   27554:	f06f 0315 	mvn.w	r3, #21
   27558:	e7e3      	b.n	27522 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   2755a:	f06f 0315 	mvn.w	r3, #21
   2755e:	e7e8      	b.n	27532 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   27560:	f06f 0315 	mvn.w	r3, #21
   27564:	e7e5      	b.n	27532 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   27566:	f06f 0315 	mvn.w	r3, #21
   2756a:	e7e2      	b.n	27532 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   2756c:	f06f 0315 	mvn.w	r3, #21
   27570:	e7df      	b.n	27532 <mqtt_rx_pub_msgs+0x5e>
   27572:	bf00      	nop
   27574:	00027477 	.word	0x00027477
   27578:	0002766b 	.word	0x0002766b
   2757c:	0002748b 	.word	0x0002748b
   27580:	00027661 	.word	0x00027661
   27584:	0002749f 	.word	0x0002749f
   27588:	000274b3 	.word	0x000274b3

0002758c <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   2758c:	4770      	bx	lr

0002758e <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   2758e:	b96a      	cbnz	r2, 275ac <app_recv+0x1e>
   27590:	b161      	cbz	r1, 275ac <app_recv+0x1e>
{
   27592:	b510      	push	{r4, lr}
   27594:	460c      	mov	r4, r1
	return pkt->appdatalen;
   27596:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   27598:	b91a      	cbnz	r2, 275a2 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   2759a:	4620      	mov	r0, r4
   2759c:	f7f7 fbd9 	bl	1ed52 <net_pkt_unref>
   275a0:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   275a2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   275a6:	4618      	mov	r0, r3
   275a8:	4790      	blx	r2
   275aa:	e7f6      	b.n	2759a <app_recv+0xc>
   275ac:	4770      	bx	lr

000275ae <mqtt_tx_pub_msgs>:
{
   275ae:	b570      	push	{r4, r5, r6, lr}
   275b0:	b084      	sub	sp, #16
   275b2:	4604      	mov	r4, r0
	switch (pkt_type) {
   275b4:	3a04      	subs	r2, #4
   275b6:	2a03      	cmp	r2, #3
   275b8:	d849      	bhi.n	2764e <mqtt_tx_pub_msgs+0xa0>
   275ba:	e8df f002 	tbb	[pc, r2]
   275be:	2c02      	.short	0x2c02
   275c0:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   275c2:	460b      	mov	r3, r1
   275c4:	2204      	movs	r2, #4
   275c6:	f10d 010a 	add.w	r1, sp, #10
   275ca:	a803      	add	r0, sp, #12
   275cc:	f7ff fca9 	bl	26f22 <mqtt_pack_puback>
	if (rc != 0) {
   275d0:	2800      	cmp	r0, #0
   275d2:	d13f      	bne.n	27654 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   275d4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   275d6:	2100      	movs	r1, #0
   275d8:	4620      	mov	r0, r4
   275da:	f000 fe4d 	bl	28278 <net_app_get_net_pkt>
	if (tx == NULL) {
   275de:	4605      	mov	r5, r0
   275e0:	2800      	cmp	r0, #0
   275e2:	d03a      	beq.n	2765a <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   275e4:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   275e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   275ea:	aa03      	add	r2, sp, #12
   275ec:	4631      	mov	r1, r6
   275ee:	f7f7 fce8 	bl	1efc2 <net_pkt_append>
	if (rc != true) {
   275f2:	4286      	cmp	r6, r0
   275f4:	d01f      	beq.n	27636 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   275f6:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   275fa:	4628      	mov	r0, r5
   275fc:	f7f7 fba9 	bl	1ed52 <net_pkt_unref>
}
   27600:	4620      	mov	r0, r4
   27602:	b004      	add	sp, #16
   27604:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   27606:	460b      	mov	r3, r1
   27608:	2204      	movs	r2, #4
   2760a:	f10d 010a 	add.w	r1, sp, #10
   2760e:	a803      	add	r0, sp, #12
   27610:	f7ff fca8 	bl	26f64 <mqtt_pack_pubcomp>
		break;
   27614:	e7dc      	b.n	275d0 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   27616:	460b      	mov	r3, r1
   27618:	2204      	movs	r2, #4
   2761a:	f10d 010a 	add.w	r1, sp, #10
   2761e:	a803      	add	r0, sp, #12
   27620:	f7ff fc8a 	bl	26f38 <mqtt_pack_pubrec>
		break;
   27624:	e7d4      	b.n	275d0 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   27626:	460b      	mov	r3, r1
   27628:	2204      	movs	r2, #4
   2762a:	f10d 010a 	add.w	r1, sp, #10
   2762e:	a803      	add	r0, sp, #12
   27630:	f7ff fc8d 	bl	26f4e <mqtt_pack_pubrel>
		break;
   27634:	e7cc      	b.n	275d0 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   27636:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   27638:	2200      	movs	r2, #0
   2763a:	9201      	str	r2, [sp, #4]
   2763c:	9300      	str	r3, [sp, #0]
   2763e:	4613      	mov	r3, r2
   27640:	4629      	mov	r1, r5
   27642:	4620      	mov	r0, r4
   27644:	f000 fd9c 	bl	28180 <net_app_send_pkt>
	if (rc < 0) {
   27648:	1e04      	subs	r4, r0, #0
   2764a:	dad9      	bge.n	27600 <mqtt_tx_pub_msgs+0x52>
   2764c:	e7d5      	b.n	275fa <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   2764e:	f06f 0415 	mvn.w	r4, #21
   27652:	e7d5      	b.n	27600 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   27654:	f06f 0415 	mvn.w	r4, #21
   27658:	e7d2      	b.n	27600 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   2765a:	f06f 040b 	mvn.w	r4, #11
   2765e:	e7cf      	b.n	27600 <mqtt_tx_pub_msgs+0x52>

00027660 <mqtt_tx_pubcomp>:
{
   27660:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   27662:	2207      	movs	r2, #7
   27664:	f7ff ffa3 	bl	275ae <mqtt_tx_pub_msgs>
}
   27668:	bd08      	pop	{r3, pc}

0002766a <mqtt_tx_pubrel>:
{
   2766a:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   2766c:	2206      	movs	r2, #6
   2766e:	f7ff ff9e 	bl	275ae <mqtt_tx_pub_msgs>
}
   27672:	bd08      	pop	{r3, pc}

00027674 <mqtt_linearize_packet>:
{
   27674:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   27676:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   27678:	42aa      	cmp	r2, r5
   2767a:	d820      	bhi.n	276be <mqtt_linearize_packet+0x4a>
   2767c:	2d80      	cmp	r5, #128	; 0x80
   2767e:	d820      	bhi.n	276c2 <mqtt_linearize_packet+0x4e>
   27680:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   27682:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   27684:	4810      	ldr	r0, [pc, #64]	; (276c8 <mqtt_linearize_packet+0x54>)
   27686:	f7f4 fd87 	bl	1c198 <net_buf_alloc>
	if (data == NULL) {
   2768a:	4606      	mov	r6, r0
   2768c:	b180      	cbz	r0, 276b0 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   2768e:	68a1      	ldr	r1, [r4, #8]
   27690:	460c      	mov	r4, r1
	size_t bytes = 0;
   27692:	2200      	movs	r2, #0
   27694:	e002      	b.n	2769c <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   27696:	89a3      	ldrh	r3, [r4, #12]
   27698:	441a      	add	r2, r3
		buf = buf->frags;
   2769a:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   2769c:	2c00      	cmp	r4, #0
   2769e:	d1fa      	bne.n	27696 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   276a0:	b292      	uxth	r2, r2
   276a2:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   276a4:	462b      	mov	r3, r5
   276a6:	b292      	uxth	r2, r2
   276a8:	4630      	mov	r0, r6
   276aa:	f7f7 fc05 	bl	1eeb8 <net_frag_linear_copy>
	if (rc != 0) {
   276ae:	b908      	cbnz	r0, 276b4 <mqtt_linearize_packet+0x40>
}
   276b0:	4630      	mov	r0, r6
   276b2:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   276b4:	4630      	mov	r0, r6
   276b6:	f7f7 fb46 	bl	1ed46 <net_pkt_frag_unref>
	return NULL;
   276ba:	4626      	mov	r6, r4
   276bc:	e7f8      	b.n	276b0 <mqtt_linearize_packet+0x3c>
		return NULL;
   276be:	2600      	movs	r6, #0
   276c0:	e7f6      	b.n	276b0 <mqtt_linearize_packet+0x3c>
   276c2:	2600      	movs	r6, #0
   276c4:	e7f4      	b.n	276b0 <mqtt_linearize_packet+0x3c>
   276c6:	bf00      	nop
   276c8:	2000d1f0 	.word	0x2000d1f0

000276cc <mqtt_tx_connect>:
{
   276cc:	b570      	push	{r4, r5, r6, lr}
   276ce:	b082      	sub	sp, #8
   276d0:	4604      	mov	r4, r0
   276d2:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   276d4:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   276d6:	481d      	ldr	r0, [pc, #116]	; (2774c <mqtt_tx_connect+0x80>)
   276d8:	f7f4 fd5e 	bl	1c198 <net_buf_alloc>
	if (data == NULL) {
   276dc:	b398      	cbz	r0, 27746 <mqtt_tx_connect+0x7a>
   276de:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   276e0:	7832      	ldrb	r2, [r6, #0]
   276e2:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   276e6:	f362 0300 	bfi	r3, r2, #0, #1
   276ea:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   276ee:	4633      	mov	r3, r6
   276f0:	2280      	movs	r2, #128	; 0x80
   276f2:	f100 010c 	add.w	r1, r0, #12
   276f6:	6880      	ldr	r0, [r0, #8]
   276f8:	f7ff fc3f 	bl	26f7a <mqtt_pack_connect>
	if (rc != 0) {
   276fc:	b9c0      	cbnz	r0, 27730 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   276fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   27700:	2100      	movs	r1, #0
   27702:	4620      	mov	r0, r4
   27704:	f000 fdb8 	bl	28278 <net_app_get_net_pkt>
	if (tx == NULL) {
   27708:	4606      	mov	r6, r0
   2770a:	b1c8      	cbz	r0, 27740 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   2770c:	4629      	mov	r1, r5
   2770e:	f7f7 fb4a 	bl	1eda6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   27712:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   27714:	2200      	movs	r2, #0
   27716:	9201      	str	r2, [sp, #4]
   27718:	9300      	str	r3, [sp, #0]
   2771a:	4613      	mov	r3, r2
   2771c:	4631      	mov	r1, r6
   2771e:	4620      	mov	r0, r4
   27720:	f000 fd2e 	bl	28180 <net_app_send_pkt>
	if (rc < 0) {
   27724:	1e04      	subs	r4, r0, #0
   27726:	da08      	bge.n	2773a <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   27728:	4630      	mov	r0, r6
   2772a:	f7f7 fb12 	bl	1ed52 <net_pkt_unref>
   2772e:	e004      	b.n	2773a <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   27730:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   27734:	4628      	mov	r0, r5
   27736:	f7f7 fb06 	bl	1ed46 <net_pkt_frag_unref>
}
   2773a:	4620      	mov	r0, r4
   2773c:	b002      	add	sp, #8
   2773e:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   27740:	f06f 040b 	mvn.w	r4, #11
   27744:	e7f6      	b.n	27734 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   27746:	f06f 040b 	mvn.w	r4, #11
   2774a:	e7f6      	b.n	2773a <mqtt_tx_connect+0x6e>
   2774c:	2000d1f0 	.word	0x2000d1f0

00027750 <mqtt_tx_disconnect>:
{
   27750:	b570      	push	{r4, r5, r6, lr}
   27752:	b084      	sub	sp, #16
   27754:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   27756:	2202      	movs	r2, #2
   27758:	f10d 010a 	add.w	r1, sp, #10
   2775c:	a803      	add	r0, sp, #12
   2775e:	f7ff fe80 	bl	27462 <mqtt_pack_disconnect>
	if (rc != 0) {
   27762:	bb78      	cbnz	r0, 277c4 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   27764:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   27766:	2100      	movs	r1, #0
   27768:	4620      	mov	r0, r4
   2776a:	f000 fd85 	bl	28278 <net_app_get_net_pkt>
	if (tx == NULL) {
   2776e:	4605      	mov	r5, r0
   27770:	b358      	cbz	r0, 277ca <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   27772:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   27776:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   27778:	aa03      	add	r2, sp, #12
   2777a:	4631      	mov	r1, r6
   2777c:	f7f7 fc21 	bl	1efc2 <net_pkt_append>
	if (rc != true) {
   27780:	4286      	cmp	r6, r0
   27782:	d007      	beq.n	27794 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   27784:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   27788:	4628      	mov	r0, r5
   2778a:	f7f7 fae2 	bl	1ed52 <net_pkt_unref>
}
   2778e:	4630      	mov	r0, r6
   27790:	b004      	add	sp, #16
   27792:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   27794:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   27796:	2200      	movs	r2, #0
   27798:	9201      	str	r2, [sp, #4]
   2779a:	9300      	str	r3, [sp, #0]
   2779c:	4613      	mov	r3, r2
   2779e:	4629      	mov	r1, r5
   277a0:	4620      	mov	r0, r4
   277a2:	f000 fced 	bl	28180 <net_app_send_pkt>
	if (rc < 0) {
   277a6:	1e06      	subs	r6, r0, #0
   277a8:	dbee      	blt.n	27788 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   277aa:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   277ae:	f36f 0341 	bfc	r3, #1, #1
   277b2:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   277b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   277ba:	2b00      	cmp	r3, #0
   277bc:	d0e7      	beq.n	2778e <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   277be:	4620      	mov	r0, r4
   277c0:	4798      	blx	r3
   277c2:	e7e4      	b.n	2778e <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   277c4:	f06f 0615 	mvn.w	r6, #21
   277c8:	e7e1      	b.n	2778e <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   277ca:	f06f 060b 	mvn.w	r6, #11
   277ce:	e7de      	b.n	2778e <mqtt_tx_disconnect+0x3e>

000277d0 <mqtt_tx_puback>:
{
   277d0:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   277d2:	2204      	movs	r2, #4
   277d4:	f7ff feeb 	bl	275ae <mqtt_tx_pub_msgs>
}
   277d8:	bd08      	pop	{r3, pc}

000277da <mqtt_tx_pubrec>:
{
   277da:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   277dc:	2205      	movs	r2, #5
   277de:	f7ff fee6 	bl	275ae <mqtt_tx_pub_msgs>
}
   277e2:	bd08      	pop	{r3, pc}

000277e4 <mqtt_tx_publish>:
{
   277e4:	b570      	push	{r4, r5, r6, lr}
   277e6:	b082      	sub	sp, #8
   277e8:	4605      	mov	r5, r0
   277ea:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   277ec:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   277ee:	481a      	ldr	r0, [pc, #104]	; (27858 <mqtt_tx_publish+0x74>)
   277f0:	f7f4 fcd2 	bl	1c198 <net_buf_alloc>
	if (data == NULL) {
   277f4:	b360      	cbz	r0, 27850 <mqtt_tx_publish+0x6c>
   277f6:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   277f8:	4633      	mov	r3, r6
   277fa:	89c2      	ldrh	r2, [r0, #14]
   277fc:	f100 010c 	add.w	r1, r0, #12
   27800:	6880      	ldr	r0, [r0, #8]
   27802:	f7ff fd47 	bl	27294 <mqtt_pack_publish>
	if (rc != 0) {
   27806:	b9c0      	cbnz	r0, 2783a <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   27808:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2780a:	2100      	movs	r1, #0
   2780c:	4628      	mov	r0, r5
   2780e:	f000 fd33 	bl	28278 <net_app_get_net_pkt>
	if (tx == NULL) {
   27812:	4606      	mov	r6, r0
   27814:	b1c8      	cbz	r0, 2784a <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   27816:	4621      	mov	r1, r4
   27818:	f7f7 fac5 	bl	1eda6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2781c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2781e:	2200      	movs	r2, #0
   27820:	9201      	str	r2, [sp, #4]
   27822:	9300      	str	r3, [sp, #0]
   27824:	4613      	mov	r3, r2
   27826:	4631      	mov	r1, r6
   27828:	4628      	mov	r0, r5
   2782a:	f000 fca9 	bl	28180 <net_app_send_pkt>
	if (rc < 0) {
   2782e:	1e05      	subs	r5, r0, #0
   27830:	da08      	bge.n	27844 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   27832:	4630      	mov	r0, r6
   27834:	f7f7 fa8d 	bl	1ed52 <net_pkt_unref>
   27838:	e004      	b.n	27844 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   2783a:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   2783e:	4620      	mov	r0, r4
   27840:	f7f7 fa81 	bl	1ed46 <net_pkt_frag_unref>
}
   27844:	4628      	mov	r0, r5
   27846:	b002      	add	sp, #8
   27848:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2784a:	f06f 050b 	mvn.w	r5, #11
   2784e:	e7f6      	b.n	2783e <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   27850:	f06f 050b 	mvn.w	r5, #11
   27854:	e7f6      	b.n	27844 <mqtt_tx_publish+0x60>
   27856:	bf00      	nop
   27858:	2000d1f0 	.word	0x2000d1f0

0002785c <mqtt_tx_subscribe>:
{
   2785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27860:	b084      	sub	sp, #16
   27862:	4605      	mov	r5, r0
   27864:	460e      	mov	r6, r1
   27866:	4617      	mov	r7, r2
   27868:	4698      	mov	r8, r3
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2786a:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2786c:	481c      	ldr	r0, [pc, #112]	; (278e0 <mqtt_tx_subscribe+0x84>)
   2786e:	f7f4 fc93 	bl	1c198 <net_buf_alloc>
	if (data == NULL) {
   27872:	b390      	cbz	r0, 278da <mqtt_tx_subscribe+0x7e>
   27874:	4604      	mov	r4, r0
	rc = mqtt_pack_subscribe(data->data, &data->len, data->size,
   27876:	6880      	ldr	r0, [r0, #8]
   27878:	89e2      	ldrh	r2, [r4, #14]
   2787a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2787c:	9302      	str	r3, [sp, #8]
   2787e:	f8cd 8004 	str.w	r8, [sp, #4]
   27882:	9700      	str	r7, [sp, #0]
   27884:	4633      	mov	r3, r6
   27886:	f104 010c 	add.w	r1, r4, #12
   2788a:	f7ff fc64 	bl	27156 <mqtt_pack_subscribe>
	if (rc != 0) {
   2788e:	b9c0      	cbnz	r0, 278c2 <mqtt_tx_subscribe+0x66>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   27890:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   27892:	2100      	movs	r1, #0
   27894:	4628      	mov	r0, r5
   27896:	f000 fcef 	bl	28278 <net_app_get_net_pkt>
	if (tx == NULL) {
   2789a:	4606      	mov	r6, r0
   2789c:	b1d0      	cbz	r0, 278d4 <mqtt_tx_subscribe+0x78>
	net_pkt_frag_add(tx, data);
   2789e:	4621      	mov	r1, r4
   278a0:	f7f7 fa81 	bl	1eda6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   278a4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   278a6:	2200      	movs	r2, #0
   278a8:	9201      	str	r2, [sp, #4]
   278aa:	9300      	str	r3, [sp, #0]
   278ac:	4613      	mov	r3, r2
   278ae:	4631      	mov	r1, r6
   278b0:	4628      	mov	r0, r5
   278b2:	f000 fc65 	bl	28180 <net_app_send_pkt>
	if (rc < 0) {
   278b6:	1e05      	subs	r5, r0, #0
   278b8:	da08      	bge.n	278cc <mqtt_tx_subscribe+0x70>
		net_pkt_unref(tx);
   278ba:	4630      	mov	r0, r6
   278bc:	f7f7 fa49 	bl	1ed52 <net_pkt_unref>
   278c0:	e004      	b.n	278cc <mqtt_tx_subscribe+0x70>
		rc = -EINVAL;
   278c2:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   278c6:	4620      	mov	r0, r4
   278c8:	f7f7 fa3d 	bl	1ed46 <net_pkt_frag_unref>
}
   278cc:	4628      	mov	r0, r5
   278ce:	b004      	add	sp, #16
   278d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -ENOMEM;
   278d4:	f06f 050b 	mvn.w	r5, #11
   278d8:	e7f5      	b.n	278c6 <mqtt_tx_subscribe+0x6a>
		return -ENOMEM;
   278da:	f06f 050b 	mvn.w	r5, #11
   278de:	e7f5      	b.n	278cc <mqtt_tx_subscribe+0x70>
   278e0:	2000d1f0 	.word	0x2000d1f0

000278e4 <mqtt_rx_connack>:
{
   278e4:	b570      	push	{r4, r5, r6, lr}
   278e6:	b082      	sub	sp, #8
   278e8:	4604      	mov	r4, r0
   278ea:	4608      	mov	r0, r1
   278ec:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   278ee:	f10d 0307 	add.w	r3, sp, #7
   278f2:	f10d 0206 	add.w	r2, sp, #6
   278f6:	8989      	ldrh	r1, [r1, #12]
   278f8:	6880      	ldr	r0, [r0, #8]
   278fa:	f7ff fd96 	bl	2742a <mqtt_unpack_connack>
	if (rc != 0) {
   278fe:	b998      	cbnz	r0, 27928 <mqtt_rx_connack+0x44>
   27900:	4605      	mov	r5, r0
	switch (clean_session) {
   27902:	2e01      	cmp	r6, #1
   27904:	d113      	bne.n	2792e <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   27906:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2790a:	b99b      	cbnz	r3, 27934 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   2790c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   27910:	f043 0302 	orr.w	r3, r3, #2
   27914:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   27918:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2791c:	b10b      	cbz	r3, 27922 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   2791e:	4620      	mov	r0, r4
   27920:	4798      	blx	r3
}
   27922:	4628      	mov	r0, r5
   27924:	b002      	add	sp, #8
   27926:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   27928:	f06f 0515 	mvn.w	r5, #21
   2792c:	e7f9      	b.n	27922 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   2792e:	f06f 0515 	mvn.w	r5, #21
   27932:	e7f6      	b.n	27922 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   27934:	f06f 0515 	mvn.w	r5, #21
	return rc;
   27938:	e7f3      	b.n	27922 <mqtt_rx_connack+0x3e>

0002793a <mqtt_rx_puback>:
{
   2793a:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   2793c:	2204      	movs	r2, #4
   2793e:	f7ff fdc9 	bl	274d4 <mqtt_rx_pub_msgs>
}
   27942:	bd08      	pop	{r3, pc}

00027944 <mqtt_rx_pubcomp>:
{
   27944:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   27946:	2207      	movs	r2, #7
   27948:	f7ff fdc4 	bl	274d4 <mqtt_rx_pub_msgs>
}
   2794c:	bd08      	pop	{r3, pc}

0002794e <mqtt_rx_pubrec>:
{
   2794e:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   27950:	2205      	movs	r2, #5
   27952:	f7ff fdbf 	bl	274d4 <mqtt_rx_pub_msgs>
}
   27956:	bd08      	pop	{r3, pc}

00027958 <mqtt_rx_pubrel>:
{
   27958:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   2795a:	2206      	movs	r2, #6
   2795c:	f7ff fdba 	bl	274d4 <mqtt_rx_pub_msgs>
}
   27960:	bd08      	pop	{r3, pc}

00027962 <mqtt_rx_pingresp>:
{
   27962:	b508      	push	{r3, lr}
   27964:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   27966:	8989      	ldrh	r1, [r1, #12]
   27968:	6898      	ldr	r0, [r3, #8]
   2796a:	f7ff fdac 	bl	274c6 <mqtt_unpack_pingresp>
	if (rc != 0) {
   2796e:	4603      	mov	r3, r0
   27970:	b908      	cbnz	r0, 27976 <mqtt_rx_pingresp+0x14>
}
   27972:	4618      	mov	r0, r3
   27974:	bd08      	pop	{r3, pc}
		return -EINVAL;
   27976:	f06f 0315 	mvn.w	r3, #21
   2797a:	e7fa      	b.n	27972 <mqtt_rx_pingresp+0x10>

0002797c <mqtt_rx_suback>:
{
   2797c:	b530      	push	{r4, r5, lr}
   2797e:	b085      	sub	sp, #20
   27980:	4604      	mov	r4, r0
	data = rx->data;
   27982:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   27984:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   27986:	ab03      	add	r3, sp, #12
   27988:	9301      	str	r3, [sp, #4]
   2798a:	2301      	movs	r3, #1
   2798c:	9300      	str	r3, [sp, #0]
   2798e:	f10d 0309 	add.w	r3, sp, #9
   27992:	f10d 020a 	add.w	r2, sp, #10
   27996:	f7ff fbed 	bl	27174 <mqtt_unpack_suback>
	if (rc != 0) {
   2799a:	b988      	cbnz	r0, 279c0 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   2799c:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   279a0:	b18d      	cbz	r5, 279c6 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   279a2:	ab03      	add	r3, sp, #12
   279a4:	f89d 2009 	ldrb.w	r2, [sp, #9]
   279a8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   279ac:	4620      	mov	r0, r4
   279ae:	47a8      	blx	r5
	if (rc != 0) {
   279b0:	4603      	mov	r3, r0
   279b2:	b910      	cbnz	r0, 279ba <mqtt_rx_suback+0x3e>
}
   279b4:	4618      	mov	r0, r3
   279b6:	b005      	add	sp, #20
   279b8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   279ba:	f06f 0315 	mvn.w	r3, #21
   279be:	e7f9      	b.n	279b4 <mqtt_rx_suback+0x38>
		return -EINVAL;
   279c0:	f06f 0315 	mvn.w	r3, #21
   279c4:	e7f6      	b.n	279b4 <mqtt_rx_suback+0x38>
		return -EINVAL;
   279c6:	f06f 0315 	mvn.w	r3, #21
   279ca:	e7f3      	b.n	279b4 <mqtt_rx_suback+0x38>

000279cc <mqtt_rx_publish>:
{
   279cc:	b530      	push	{r4, r5, lr}
   279ce:	b087      	sub	sp, #28
   279d0:	4604      	mov	r4, r0
   279d2:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   279d4:	466a      	mov	r2, sp
   279d6:	8989      	ldrh	r1, [r1, #12]
   279d8:	6898      	ldr	r0, [r3, #8]
   279da:	f7ff fccb 	bl	27374 <mqtt_unpack_publish>
	if (rc != 0) {
   279de:	bb00      	cbnz	r0, 27a22 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   279e0:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   279e4:	2303      	movs	r3, #3
   279e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   279ea:	4669      	mov	r1, sp
   279ec:	4620      	mov	r0, r4
   279ee:	47a8      	blx	r5
	if (rc != 0) {
   279f0:	4602      	mov	r2, r0
   279f2:	b9c8      	cbnz	r0, 27a28 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   279f4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   279f8:	2b01      	cmp	r3, #1
   279fa:	d00b      	beq.n	27a14 <mqtt_rx_publish+0x48>
   279fc:	b13b      	cbz	r3, 27a0e <mqtt_rx_publish+0x42>
   279fe:	2b02      	cmp	r3, #2
   27a00:	d115      	bne.n	27a2e <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   27a02:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   27a06:	4620      	mov	r0, r4
   27a08:	f7ff fee7 	bl	277da <mqtt_tx_pubrec>
   27a0c:	4602      	mov	r2, r0
}
   27a0e:	4610      	mov	r0, r2
   27a10:	b007      	add	sp, #28
   27a12:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   27a14:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   27a18:	4620      	mov	r0, r4
   27a1a:	f7ff fed9 	bl	277d0 <mqtt_tx_puback>
   27a1e:	4602      	mov	r2, r0
		break;
   27a20:	e7f5      	b.n	27a0e <mqtt_rx_publish+0x42>
		return -EINVAL;
   27a22:	f06f 0215 	mvn.w	r2, #21
   27a26:	e7f2      	b.n	27a0e <mqtt_rx_publish+0x42>
		return -EINVAL;
   27a28:	f06f 0215 	mvn.w	r2, #21
   27a2c:	e7ef      	b.n	27a0e <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   27a2e:	f06f 0215 	mvn.w	r2, #21
   27a32:	e7ec      	b.n	27a0e <mqtt_rx_publish+0x42>

00027a34 <mqtt_parser>:
{
   27a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a36:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   27a38:	2202      	movs	r2, #2
   27a3a:	f7ff fe1b 	bl	27674 <mqtt_linearize_packet>
	if (!data) {
   27a3e:	2800      	cmp	r0, #0
   27a40:	d057      	beq.n	27af2 <mqtt_parser+0xbe>
   27a42:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   27a44:	6883      	ldr	r3, [r0, #8]
   27a46:	781b      	ldrb	r3, [r3, #0]
   27a48:	091b      	lsrs	r3, r3, #4
   27a4a:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   27a4c:	3b02      	subs	r3, #2
   27a4e:	2b0b      	cmp	r3, #11
   27a50:	d84c      	bhi.n	27aec <mqtt_parser+0xb8>
   27a52:	e8df f003 	tbb	[pc, r3]
   27a56:	3906      	.short	0x3906
   27a58:	2d3f2716 	.word	0x2d3f2716
   27a5c:	4b4b454b 	.word	0x4b4b454b
   27a60:	334b      	.short	0x334b
		if (!ctx->connected) {
   27a62:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   27a66:	f013 0f02 	tst.w	r3, #2
   27a6a:	d002      	beq.n	27a72 <mqtt_parser+0x3e>
			rc = -EINVAL;
   27a6c:	f06f 0515 	mvn.w	r5, #21
   27a70:	e00c      	b.n	27a8c <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   27a72:	f003 0201 	and.w	r2, r3, #1
   27a76:	4601      	mov	r1, r0
   27a78:	4630      	mov	r0, r6
   27a7a:	f7ff ff33 	bl	278e4 <mqtt_rx_connack>
   27a7e:	4605      	mov	r5, r0
   27a80:	e004      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   27a82:	4601      	mov	r1, r0
   27a84:	4630      	mov	r0, r6
   27a86:	f7ff ff58 	bl	2793a <mqtt_rx_puback>
   27a8a:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   27a8c:	b12d      	cbz	r5, 27a9a <mqtt_parser+0x66>
   27a8e:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   27a92:	b113      	cbz	r3, 27a9a <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   27a94:	4639      	mov	r1, r7
   27a96:	4630      	mov	r0, r6
   27a98:	4798      	blx	r3
	net_pkt_frag_unref(data);
   27a9a:	4620      	mov	r0, r4
   27a9c:	f7f7 f953 	bl	1ed46 <net_pkt_frag_unref>
}
   27aa0:	4628      	mov	r0, r5
   27aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   27aa4:	4601      	mov	r1, r0
   27aa6:	4630      	mov	r0, r6
   27aa8:	f7ff ff51 	bl	2794e <mqtt_rx_pubrec>
   27aac:	4605      	mov	r5, r0
		break;
   27aae:	e7ed      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   27ab0:	4601      	mov	r1, r0
   27ab2:	4630      	mov	r0, r6
   27ab4:	f7ff ff46 	bl	27944 <mqtt_rx_pubcomp>
   27ab8:	4605      	mov	r5, r0
		break;
   27aba:	e7e7      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   27abc:	4601      	mov	r1, r0
   27abe:	4630      	mov	r0, r6
   27ac0:	f7ff ff4f 	bl	27962 <mqtt_rx_pingresp>
   27ac4:	4605      	mov	r5, r0
		break;
   27ac6:	e7e1      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   27ac8:	4601      	mov	r1, r0
   27aca:	4630      	mov	r0, r6
   27acc:	f7ff ff7e 	bl	279cc <mqtt_rx_publish>
   27ad0:	4605      	mov	r5, r0
		break;
   27ad2:	e7db      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   27ad4:	4601      	mov	r1, r0
   27ad6:	4630      	mov	r0, r6
   27ad8:	f7ff ff3e 	bl	27958 <mqtt_rx_pubrel>
   27adc:	4605      	mov	r5, r0
		break;
   27ade:	e7d5      	b.n	27a8c <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   27ae0:	4601      	mov	r1, r0
   27ae2:	4630      	mov	r0, r6
   27ae4:	f7ff ff4a 	bl	2797c <mqtt_rx_suback>
   27ae8:	4605      	mov	r5, r0
		break;
   27aea:	e7cf      	b.n	27a8c <mqtt_parser+0x58>
		rc = -EINVAL;
   27aec:	f06f 0515 	mvn.w	r5, #21
   27af0:	e7cc      	b.n	27a8c <mqtt_parser+0x58>
		return -ENOMEM;
   27af2:	f06f 050b 	mvn.w	r5, #11
   27af6:	e7d3      	b.n	27aa0 <mqtt_parser+0x6c>

00027af8 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   27af8:	b530      	push	{r4, r5, lr}
   27afa:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   27afc:	b348      	cbz	r0, 27b52 <mqtt_connect+0x5a>
   27afe:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   27b00:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   27b04:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   27b08:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   27b0a:	9004      	str	r0, [sp, #16]
   27b0c:	9103      	str	r1, [sp, #12]
   27b0e:	9202      	str	r2, [sp, #8]
   27b10:	9301      	str	r3, [sp, #4]
   27b12:	2300      	movs	r3, #0
   27b14:	9300      	str	r3, [sp, #0]
   27b16:	2206      	movs	r2, #6
   27b18:	2101      	movs	r1, #1
   27b1a:	f000 f913 	bl	27d44 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   27b1e:	1e05      	subs	r5, r0, #0
   27b20:	db0e      	blt.n	27b40 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   27b22:	2300      	movs	r3, #0
   27b24:	9300      	str	r3, [sp, #0]
   27b26:	4a0c      	ldr	r2, [pc, #48]	; (27b58 <mqtt_connect+0x60>)
   27b28:	490c      	ldr	r1, [pc, #48]	; (27b5c <mqtt_connect+0x64>)
   27b2a:	4620      	mov	r0, r4
   27b2c:	f000 fb11 	bl	28152 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   27b30:	1e05      	subs	r5, r0, #0
   27b32:	db05      	blt.n	27b40 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   27b34:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   27b36:	4620      	mov	r0, r4
   27b38:	f000 f9ec 	bl	27f14 <net_app_connect>
	if (rc < 0) {
   27b3c:	1e05      	subs	r5, r0, #0
   27b3e:	da05      	bge.n	27b4c <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   27b40:	4620      	mov	r0, r4
   27b42:	f000 fbbd 	bl	282c0 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   27b46:	4620      	mov	r0, r4
   27b48:	f000 fab8 	bl	280bc <net_app_release>

	return rc;
}
   27b4c:	4628      	mov	r0, r5
   27b4e:	b007      	add	sp, #28
   27b50:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   27b52:	f06f 050d 	mvn.w	r5, #13
   27b56:	e7f9      	b.n	27b4c <mqtt_connect+0x54>
   27b58:	0002758f 	.word	0x0002758f
   27b5c:	0002758d 	.word	0x0002758d

00027b60 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   27b60:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   27b64:	f043 0301 	orr.w	r3, r3, #1
   27b68:	f36f 0341 	bfc	r3, #1, #1
   27b6c:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   27b70:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   27b74:	4b02      	ldr	r3, [pc, #8]	; (27b80 <mqtt_init+0x20>)
   27b76:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   27b7a:	2000      	movs	r0, #0
   27b7c:	4770      	bx	lr
   27b7e:	bf00      	nop
   27b80:	00027a35 	.word	0x00027a35

00027b84 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   27b84:	b178      	cbz	r0, 27ba6 <mqtt_close+0x22>
{
   27b86:	b510      	push	{r4, lr}
   27b88:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   27b8a:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   27b8e:	f012 0f01 	tst.w	r2, #1
   27b92:	d101      	bne.n	27b98 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   27b94:	2000      	movs	r0, #0
}
   27b96:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   27b98:	f000 fb92 	bl	282c0 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   27b9c:	4620      	mov	r0, r4
   27b9e:	f000 fa8d 	bl	280bc <net_app_release>
	return 0;
   27ba2:	2000      	movs	r0, #0
   27ba4:	bd10      	pop	{r4, pc}
		return -EFAULT;
   27ba6:	f06f 000d 	mvn.w	r0, #13
   27baa:	4770      	bx	lr

00027bac <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   27bac:	b570      	push	{r4, r5, r6, lr}
   27bae:	460c      	mov	r4, r1
   27bb0:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   27bb2:	f7f4 feef 	bl	1c994 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   27bb6:	4b20      	ldr	r3, [pc, #128]	; (27c38 <net_app_init+0x8c>)
   27bb8:	fb83 2306 	smull	r2, r3, r3, r6
   27bbc:	17f5      	asrs	r5, r6, #31
   27bbe:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   27bc2:	b380      	cbz	r0, 27c26 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   27bc4:	f014 0f02 	tst.w	r4, #2
   27bc8:	d114      	bne.n	27bf4 <net_app_init+0x48>
	int count = 0;
   27bca:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   27bcc:	f014 0f04 	tst.w	r4, #4
   27bd0:	d000      	beq.n	27bd4 <net_app_init+0x28>
		count++;
   27bd2:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   27bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27bd8:	4818      	ldr	r0, [pc, #96]	; (27c3c <net_app_init+0x90>)
   27bda:	f002 ff93 	bl	2ab04 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   27bde:	2e00      	cmp	r6, #0
   27be0:	db0a      	blt.n	27bf8 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   27be2:	b166      	cbz	r6, 27bfe <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   27be4:	4a16      	ldr	r2, [pc, #88]	; (27c40 <net_app_init+0x94>)
   27be6:	fb82 3206 	smull	r3, r2, r2, r6
   27bea:	17f3      	asrs	r3, r6, #31
   27bec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   27bf0:	3301      	adds	r3, #1
   27bf2:	e007      	b.n	27c04 <net_app_init+0x58>
		count++;
   27bf4:	2101      	movs	r1, #1
   27bf6:	e7e9      	b.n	27bcc <net_app_init+0x20>
		count = -1;
   27bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27bfc:	e002      	b.n	27c04 <net_app_init+0x58>
		count = 0;
   27bfe:	2300      	movs	r3, #0
   27c00:	e000      	b.n	27c04 <net_app_init+0x58>
   27c02:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   27c04:	1e5c      	subs	r4, r3, #1
   27c06:	b153      	cbz	r3, 27c1e <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   27c08:	4629      	mov	r1, r5
   27c0a:	480e      	ldr	r0, [pc, #56]	; (27c44 <net_app_init+0x98>)
   27c0c:	f002 ff96 	bl	2ab3c <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   27c10:	2800      	cmp	r0, #0
   27c12:	d0f6      	beq.n	27c02 <net_app_init+0x56>
	return sem->count;
   27c14:	4b09      	ldr	r3, [pc, #36]	; (27c3c <net_app_init+0x90>)
   27c16:	689a      	ldr	r2, [r3, #8]
   27c18:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   27c1a:	2a00      	cmp	r2, #0
   27c1c:	d1f2      	bne.n	27c04 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   27c1e:	b92c      	cbnz	r4, 27c2c <net_app_init+0x80>
   27c20:	b936      	cbnz	r6, 27c30 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   27c22:	2000      	movs	r0, #0
   27c24:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   27c26:	f06f 0012 	mvn.w	r0, #18
   27c2a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   27c2c:	2000      	movs	r0, #0
   27c2e:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   27c30:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   27c34:	bd70      	pop	{r4, r5, r6, pc}
   27c36:	bf00      	nop
   27c38:	66666667 	.word	0x66666667
   27c3c:	200024e4 	.word	0x200024e4
   27c40:	10624dd3 	.word	0x10624dd3
   27c44:	2000d140 	.word	0x2000d140

00027c48 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   27c48:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   27c4a:	f000 fb5b 	bl	28304 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   27c4e:	f247 5230 	movw	r2, #30000	; 0x7530
   27c52:	2100      	movs	r1, #0
   27c54:	4801      	ldr	r0, [pc, #4]	; (27c5c <init_net_app+0x14>)
   27c56:	f7ff ffa9 	bl	27bac <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   27c5a:	bd08      	pop	{r3, pc}
   27c5c:	000345b4 	.word	0x000345b4

00027c60 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   27c60:	f06f 0015 	mvn.w	r0, #21
   27c64:	4770      	bx	lr

00027c66 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   27c66:	b510      	push	{r4, lr}
   27c68:	4604      	mov	r4, r0
   27c6a:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   27c6c:	461a      	mov	r2, r3
   27c6e:	b113      	cbz	r3, 27c76 <set_remote_addr+0x10>
   27c70:	880b      	ldrh	r3, [r1, #0]
   27c72:	2b0a      	cmp	r3, #10
   27c74:	d00e      	beq.n	27c94 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   27c76:	b112      	cbz	r2, 27c7e <set_remote_addr+0x18>
   27c78:	880b      	ldrh	r3, [r1, #0]
   27c7a:	2b02      	cmp	r3, #2
   27c7c:	d012      	beq.n	27ca4 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   27c7e:	9b02      	ldr	r3, [sp, #8]
   27c80:	221c      	movs	r2, #28
   27c82:	4601      	mov	r1, r0
   27c84:	4620      	mov	r0, r4
   27c86:	f7ff ffeb 	bl	27c60 <try_resolve>
	if (ret < 0) {
   27c8a:	2800      	cmp	r0, #0
   27c8c:	db0c      	blt.n	27ca8 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   27c8e:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   27c90:	2000      	movs	r0, #0
   27c92:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   27c94:	2218      	movs	r2, #24
   27c96:	f104 001c 	add.w	r0, r4, #28
   27c9a:	f7d8 fb11 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   27c9e:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   27ca0:	2000      	movs	r0, #0
   27ca2:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   27ca4:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   27ca8:	bd10      	pop	{r4, pc}

00027caa <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   27caa:	6803      	ldr	r3, [r0, #0]
   27cac:	b13b      	cbz	r3, 27cbe <close_net_ctx+0x14>
{
   27cae:	b510      	push	{r4, lr}
   27cb0:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   27cb2:	4618      	mov	r0, r3
   27cb4:	f7f6 fbb8 	bl	1e428 <net_context_put>
		ctx->ipv6.ctx = NULL;
   27cb8:	2300      	movs	r3, #0
   27cba:	6023      	str	r3, [r4, #0]
   27cbc:	bd10      	pop	{r4, pc}
   27cbe:	4770      	bx	lr

00027cc0 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   27cc0:	7803      	ldrb	r3, [r0, #0]
   27cc2:	2b5b      	cmp	r3, #91	; 0x5b
   27cc4:	d002      	beq.n	27ccc <get_port_number+0xc>
   27cc6:	2300      	movs	r3, #0
   27cc8:	4619      	mov	r1, r3
   27cca:	e019      	b.n	27d00 <get_port_number+0x40>
{
   27ccc:	b570      	push	{r4, r5, r6, lr}
   27cce:	460d      	mov	r5, r1
   27cd0:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   27cd2:	4913      	ldr	r1, [pc, #76]	; (27d20 <get_port_number+0x60>)
   27cd4:	f004 fd8a 	bl	2c7ec <strstr>
		if (!ptr) {
   27cd8:	4606      	mov	r6, r0
   27cda:	b1f0      	cbz	r0, 27d1a <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   27cdc:	1c61      	adds	r1, r4, #1
   27cde:	1a44      	subs	r4, r0, r1
   27ce0:	2c2e      	cmp	r4, #46	; 0x2e
   27ce2:	bfa8      	it	ge
   27ce4:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   27ce6:	4622      	mov	r2, r4
   27ce8:	4628      	mov	r0, r5
   27cea:	f7d8 fae9 	bl	2c0 <memcpy>
		buf[end] = '\0';
   27cee:	2100      	movs	r1, #0
   27cf0:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   27cf2:	220a      	movs	r2, #10
   27cf4:	1cb0      	adds	r0, r6, #2
   27cf6:	f004 ff19 	bl	2cb2c <strtol>
   27cfa:	b280      	uxth	r0, r0
		return port;
   27cfc:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   27cfe:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   27d00:	5cc2      	ldrb	r2, [r0, r3]
   27d02:	b11a      	cbz	r2, 27d0c <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   27d04:	2a3a      	cmp	r2, #58	; 0x3a
   27d06:	d1fa      	bne.n	27cfe <get_port_number+0x3e>
			count++;
   27d08:	3101      	adds	r1, #1
   27d0a:	e7f8      	b.n	27cfe <get_port_number+0x3e>
	if (count == 1) {
   27d0c:	2901      	cmp	r1, #1
   27d0e:	d001      	beq.n	27d14 <get_port_number+0x54>
	return 0;
   27d10:	2000      	movs	r0, #0
   27d12:	4770      	bx	lr
		return -EAFNOSUPPORT;
   27d14:	f06f 0069 	mvn.w	r0, #105	; 0x69
   27d18:	4770      	bx	lr
			return -EINVAL;
   27d1a:	f06f 0015 	mvn.w	r0, #21
   27d1e:	bd70      	pop	{r4, r5, r6, pc}
   27d20:	000345cc 	.word	0x000345cc

00027d24 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   27d24:	b538      	push	{r3, r4, r5, lr}
   27d26:	460d      	mov	r5, r1
   27d28:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   27d2a:	4613      	mov	r3, r2
   27d2c:	2200      	movs	r2, #0
   27d2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   27d30:	f7f6 fe82 	bl	1ea38 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   27d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   27d36:	b11b      	cbz	r3, 27d40 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   27d38:	6f22      	ldr	r2, [r4, #112]	; 0x70
   27d3a:	4629      	mov	r1, r5
   27d3c:	4620      	mov	r0, r4
   27d3e:	4798      	blx	r3
   27d40:	bd38      	pop	{r3, r4, r5, pc}
	...

00027d44 <net_app_init_client>:
{
   27d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27d48:	b09a      	sub	sp, #104	; 0x68
   27d4a:	9e22      	ldr	r6, [sp, #136]	; 0x88
   27d4c:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   27d50:	2800      	cmp	r0, #0
   27d52:	f000 80c9 	beq.w	27ee8 <net_app_init_client+0x1a4>
   27d56:	4604      	mov	r4, r0
	if (ctx->is_init) {
   27d58:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   27d5c:	f010 0f01 	tst.w	r0, #1
   27d60:	f040 80c5 	bne.w	27eee <net_app_init_client+0x1aa>
   27d64:	4699      	mov	r9, r3
   27d66:	4617      	mov	r7, r2
   27d68:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   27d6a:	2218      	movs	r2, #24
   27d6c:	2100      	movs	r1, #0
   27d6e:	a802      	add	r0, sp, #8
   27d70:	f004 f984 	bl	2c07c <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   27d74:	2218      	movs	r2, #24
   27d76:	2100      	movs	r1, #0
   27d78:	a808      	add	r0, sp, #32
   27d7a:	f004 f97f 	bl	2c07c <memset>
	if (peer_addr) {
   27d7e:	2e00      	cmp	r6, #0
   27d80:	d03c      	beq.n	27dfc <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   27d82:	2218      	movs	r2, #24
   27d84:	4631      	mov	r1, r6
   27d86:	a808      	add	r0, sp, #32
   27d88:	f7d8 fa9a 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   27d8c:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   27d90:	f1b9 0f00 	cmp.w	r9, #0
   27d94:	d05e      	beq.n	27e54 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   27d96:	2218      	movs	r2, #24
   27d98:	4649      	mov	r1, r9
   27d9a:	a802      	add	r0, sp, #8
   27d9c:	f7d8 fa90 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   27da0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   27da4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27da8:	429a      	cmp	r2, r3
   27daa:	f040 80a3 	bne.w	27ef4 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   27dae:	2302      	movs	r3, #2
   27db0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   27db4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   27db6:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   27db8:	4b54      	ldr	r3, [pc, #336]	; (27f0c <net_app_init_client+0x1c8>)
   27dba:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   27dbc:	4b54      	ldr	r3, [pc, #336]	; (27f10 <net_app_init_client+0x1cc>)
   27dbe:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   27dc0:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   27dc4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   27dc8:	ab02      	add	r3, sp, #8
   27dca:	463a      	mov	r2, r7
   27dcc:	4629      	mov	r1, r5
   27dce:	4620      	mov	r0, r4
   27dd0:	f000 f949 	bl	28066 <_net_app_config_local_ctx>
	if (ret < 0) {
   27dd4:	1e05      	subs	r5, r0, #0
   27dd6:	db42      	blt.n	27e5e <net_app_init_client+0x11a>
	if (peer_addr) {
   27dd8:	2e00      	cmp	r6, #0
   27dda:	d04c      	beq.n	27e76 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   27ddc:	8833      	ldrh	r3, [r6, #0]
   27dde:	2b02      	cmp	r3, #2
   27de0:	f000 808b 	beq.w	27efa <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   27de4:	2b0a      	cmp	r3, #10
   27de6:	d03e      	beq.n	27e66 <net_app_init_client+0x122>
	ctx->is_init = true;
   27de8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   27dec:	f043 0301 	orr.w	r3, r3, #1
   27df0:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   27df4:	4628      	mov	r0, r5
   27df6:	b01a      	add	sp, #104	; 0x68
   27df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   27dfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   27dfe:	b333      	cbz	r3, 27e4e <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   27e00:	222f      	movs	r2, #47	; 0x2f
   27e02:	a90e      	add	r1, sp, #56	; 0x38
   27e04:	4618      	mov	r0, r3
   27e06:	f7ff ff5b 	bl	27cc0 <get_port_number>
		if (ret > 0) {
   27e0a:	2800      	cmp	r0, #0
   27e0c:	dd17      	ble.n	27e3e <net_app_init_client+0xfa>
			peer_port = ret;
   27e0e:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   27e12:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   27e16:	4650      	mov	r0, sl
   27e18:	f7d8 fc72 	bl	700 <strlen>
   27e1c:	aa08      	add	r2, sp, #32
   27e1e:	4601      	mov	r1, r0
   27e20:	4650      	mov	r0, sl
   27e22:	f7f7 fe6c 	bl	1fafe <net_ipaddr_parse>
   27e26:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   27e28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27e2c:	2b0a      	cmp	r3, #10
   27e2e:	d1af      	bne.n	27d90 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   27e30:	ea4f 2318 	mov.w	r3, r8, lsr #8
   27e34:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   27e38:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   27e3c:	e7a8      	b.n	27d90 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   27e3e:	222e      	movs	r2, #46	; 0x2e
   27e40:	9923      	ldr	r1, [sp, #140]	; 0x8c
   27e42:	a80e      	add	r0, sp, #56	; 0x38
   27e44:	f004 fb36 	bl	2c4b4 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   27e48:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   27e4c:	e7e3      	b.n	27e16 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   27e4e:	f04f 0a00 	mov.w	sl, #0
   27e52:	e79d      	b.n	27d90 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   27e54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27e58:	f8ad 3008 	strh.w	r3, [sp, #8]
   27e5c:	e7a7      	b.n	27dae <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   27e5e:	4620      	mov	r0, r4
   27e60:	f7ff ff23 	bl	27caa <close_net_ctx>
		goto fail;
   27e64:	e7c6      	b.n	27df4 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   27e66:	2218      	movs	r2, #24
   27e68:	4631      	mov	r1, r6
   27e6a:	f104 001c 	add.w	r0, r4, #28
   27e6e:	f7d8 fa27 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   27e72:	6364      	str	r4, [r4, #52]	; 0x34
   27e74:	e7b8      	b.n	27de8 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   27e76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   27e78:	b363      	cbz	r3, 27ed4 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   27e7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   27e7c:	9300      	str	r3, [sp, #0]
   27e7e:	f11a 0300 	adds.w	r3, sl, #0
   27e82:	bf18      	it	ne
   27e84:	2301      	movne	r3, #1
   27e86:	aa0e      	add	r2, sp, #56	; 0x38
   27e88:	a908      	add	r1, sp, #32
   27e8a:	4620      	mov	r0, r4
   27e8c:	f7ff feeb 	bl	27c66 <set_remote_addr>
	if (ret < 0) {
   27e90:	1e05      	subs	r5, r0, #0
   27e92:	db25      	blt.n	27ee0 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   27e94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e96:	b39b      	cbz	r3, 27f00 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   27e98:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   27e9a:	b3a3      	cbz	r3, 27f06 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   27e9c:	8ba3      	ldrh	r3, [r4, #28]
   27e9e:	2b0a      	cmp	r3, #10
   27ea0:	d1a2      	bne.n	27de8 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   27ea2:	4625      	mov	r5, r4
   27ea4:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   27ea8:	88e2      	ldrh	r2, [r4, #6]
   27eaa:	2100      	movs	r1, #0
   27eac:	4628      	mov	r0, r5
   27eae:	f000 f8a3 	bl	27ff8 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   27eb2:	6821      	ldr	r1, [r4, #0]
   27eb4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   27eb8:	9300      	str	r3, [sp, #0]
   27eba:	2318      	movs	r3, #24
   27ebc:	462a      	mov	r2, r5
   27ebe:	4620      	mov	r0, r4
   27ec0:	f000 f886 	bl	27fd0 <_net_app_set_net_ctx>
		if (ret < 0) {
   27ec4:	1e05      	subs	r5, r0, #0
   27ec6:	da8f      	bge.n	27de8 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   27ec8:	6820      	ldr	r0, [r4, #0]
   27eca:	f7f6 faad 	bl	1e428 <net_context_put>
			ctx->ipv6.ctx = NULL;
   27ece:	2300      	movs	r3, #0
   27ed0:	6023      	str	r3, [r4, #0]
   27ed2:	e789      	b.n	27de8 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   27ed4:	4620      	mov	r0, r4
   27ed6:	f7ff fee8 	bl	27caa <close_net_ctx>
		ret = -EINVAL;
   27eda:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   27ede:	e789      	b.n	27df4 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   27ee0:	4620      	mov	r0, r4
   27ee2:	f7ff fee2 	bl	27caa <close_net_ctx>
		goto fail;
   27ee6:	e785      	b.n	27df4 <net_app_init_client+0xb0>
		return -EINVAL;
   27ee8:	f06f 0515 	mvn.w	r5, #21
   27eec:	e782      	b.n	27df4 <net_app_init_client+0xb0>
		return -EALREADY;
   27eee:	f06f 0577 	mvn.w	r5, #119	; 0x77
   27ef2:	e77f      	b.n	27df4 <net_app_init_client+0xb0>
			return -EINVAL;
   27ef4:	f06f 0515 	mvn.w	r5, #21
   27ef8:	e77c      	b.n	27df4 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   27efa:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   27efe:	e779      	b.n	27df4 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   27f00:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   27f04:	e776      	b.n	27df4 <net_app_init_client+0xb0>
   27f06:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   27f0a:	e773      	b.n	27df4 <net_app_init_client+0xb0>
   27f0c:	0001e9f7 	.word	0x0001e9f7
   27f10:	00027fa7 	.word	0x00027fa7

00027f14 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   27f14:	b1d0      	cbz	r0, 27f4c <net_app_connect+0x38>
{
   27f16:	b570      	push	{r4, r5, r6, lr}
   27f18:	b082      	sub	sp, #8
   27f1a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   27f1c:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   27f20:	f012 0f01 	tst.w	r2, #1
   27f24:	d015      	beq.n	27f52 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   27f26:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   27f2a:	2a02      	cmp	r2, #2
   27f2c:	d114      	bne.n	27f58 <net_app_connect+0x44>
   27f2e:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   27f30:	2100      	movs	r1, #0
   27f32:	f000 f8df 	bl	280f4 <_net_app_select_net_ctx>
	if (!net_ctx) {
   27f36:	b190      	cbz	r0, 27f5e <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   27f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   27f3a:	9401      	str	r4, [sp, #4]
   27f3c:	9500      	str	r5, [sp, #0]
   27f3e:	4b09      	ldr	r3, [pc, #36]	; (27f64 <net_app_connect+0x50>)
   27f40:	2218      	movs	r2, #24
   27f42:	311c      	adds	r1, #28
   27f44:	f7f6 fc44 	bl	1e7d0 <net_context_connect>
		}
#endif
	}

	return ret;
}
   27f48:	b002      	add	sp, #8
   27f4a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27f4c:	f06f 0015 	mvn.w	r0, #21
   27f50:	4770      	bx	lr
		return -ENOENT;
   27f52:	f06f 0001 	mvn.w	r0, #1
   27f56:	e7f7      	b.n	27f48 <net_app_connect+0x34>
		return -EINVAL;
   27f58:	f06f 0015 	mvn.w	r0, #21
   27f5c:	e7f4      	b.n	27f48 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   27f5e:	f06f 0069 	mvn.w	r0, #105	; 0x69
   27f62:	e7f1      	b.n	27f48 <net_app_connect+0x34>
   27f64:	00027d25 	.word	0x00027d25

00027f68 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   27f68:	6340      	str	r0, [r0, #52]	; 0x34
   27f6a:	4770      	bx	lr

00027f6c <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   27f6c:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   27f70:	2802      	cmp	r0, #2
   27f72:	d000      	beq.n	27f76 <_app_send+0xa>
   27f74:	4770      	bx	lr
{
   27f76:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   27f78:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   27f7a:	b114      	cbz	r4, 27f82 <_app_send+0x16>
   27f7c:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   27f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   27f80:	47a0      	blx	r4
   27f82:	bd10      	pop	{r4, pc}

00027f84 <setup_ipv6_ctx>:
{
   27f84:	b510      	push	{r4, lr}
   27f86:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   27f88:	4603      	mov	r3, r0
   27f8a:	200a      	movs	r0, #10
   27f8c:	f7f5 ffe0 	bl	1df50 <net_context_get>
	if (ret < 0) {
   27f90:	2800      	cmp	r0, #0
   27f92:	db05      	blt.n	27fa0 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   27f94:	6823      	ldr	r3, [r4, #0]
   27f96:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   27f98:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   27f9a:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   27f9c:	641a      	str	r2, [r3, #64]	; 0x40
}
   27f9e:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   27fa0:	2300      	movs	r3, #0
   27fa2:	6023      	str	r3, [r4, #0]
		return ret;
   27fa4:	bd10      	pop	{r4, pc}

00027fa6 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   27fa6:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   27faa:	2802      	cmp	r0, #2
   27fac:	d000      	beq.n	27fb0 <_net_app_received+0xa>
   27fae:	4770      	bx	lr
{
   27fb0:	b538      	push	{r3, r4, r5, lr}
   27fb2:	4618      	mov	r0, r3
   27fb4:	4614      	mov	r4, r2
		if (!pkt) {
   27fb6:	b121      	cbz	r1, 27fc2 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   27fb8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   27fba:	b10d      	cbz	r5, 27fc0 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   27fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   27fbe:	47a8      	blx	r5
   27fc0:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   27fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   27fc4:	2b00      	cmp	r3, #0
   27fc6:	d0fb      	beq.n	27fc0 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   27fc8:	6f02      	ldr	r2, [r0, #112]	; 0x70
   27fca:	4621      	mov	r1, r4
   27fcc:	4798      	blx	r3
   27fce:	bd38      	pop	{r3, r4, r5, pc}

00027fd0 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   27fd0:	b161      	cbz	r1, 27fec <_net_app_set_net_ctx+0x1c>
{
   27fd2:	b510      	push	{r4, lr}
   27fd4:	4614      	mov	r4, r2
   27fd6:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   27fd8:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   27fdc:	f012 0f01 	tst.w	r2, #1
   27fe0:	d007      	beq.n	27ff2 <_net_app_set_net_ctx+0x22>
   27fe2:	461a      	mov	r2, r3
   27fe4:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   27fe6:	f7f6 fa61 	bl	1e4ac <net_context_bind>
	return ret;
   27fea:	bd10      	pop	{r4, pc}
		return -ENOENT;
   27fec:	f06f 0001 	mvn.w	r0, #1
   27ff0:	4770      	bx	lr
   27ff2:	f06f 0001 	mvn.w	r0, #1
}
   27ff6:	bd10      	pop	{r4, pc}

00027ff8 <_net_app_set_local_addr>:
{
   27ff8:	b570      	push	{r4, r5, r6, lr}
   27ffa:	b084      	sub	sp, #16
   27ffc:	4604      	mov	r4, r0
	if (myaddr) {
   27ffe:	b169      	cbz	r1, 2801c <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   28000:	8800      	ldrh	r0, [r0, #0]
   28002:	2802      	cmp	r0, #2
   28004:	d029      	beq.n	2805a <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   28006:	280a      	cmp	r0, #10
   28008:	d12a      	bne.n	28060 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   2800a:	0a13      	lsrs	r3, r2, #8
   2800c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   28010:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   28012:	1d22      	adds	r2, r4, #4
   28014:	f7f7 fbbd 	bl	1f792 <net_addr_pton>
}
   28018:	b004      	add	sp, #16
   2801a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   2801c:	8803      	ldrh	r3, [r0, #0]
   2801e:	2b0a      	cmp	r3, #10
   28020:	d003      	beq.n	2802a <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   28022:	2b02      	cmp	r3, #2
   28024:	d016      	beq.n	28054 <_net_app_set_local_addr+0x5c>
	return 0;
   28026:	2000      	movs	r0, #0
   28028:	e7f6      	b.n	28018 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   2802a:	f7f9 f853 	bl	210d4 <net_ipv6_unspecified_address>
   2802e:	4601      	mov	r1, r0
   28030:	2000      	movs	r0, #0
   28032:	f7f5 f9f3 	bl	1d41c <net_if_ipv6_select_src_addr>
   28036:	4603      	mov	r3, r0
   28038:	466d      	mov	r5, sp
   2803a:	6800      	ldr	r0, [r0, #0]
   2803c:	6859      	ldr	r1, [r3, #4]
   2803e:	689a      	ldr	r2, [r3, #8]
   28040:	68db      	ldr	r3, [r3, #12]
   28042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   28044:	466d      	mov	r5, sp
   28046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28048:	6060      	str	r0, [r4, #4]
   2804a:	60a1      	str	r1, [r4, #8]
   2804c:	60e2      	str	r2, [r4, #12]
   2804e:	6123      	str	r3, [r4, #16]
	return 0;
   28050:	2000      	movs	r0, #0
   28052:	e7e1      	b.n	28018 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   28054:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   28058:	e7de      	b.n	28018 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   2805a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2805e:	e7db      	b.n	28018 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   28060:	f06f 0069 	mvn.w	r0, #105	; 0x69
   28064:	e7d8      	b.n	28018 <_net_app_set_local_addr+0x20>

00028066 <_net_app_config_local_ctx>:
{
   28066:	b538      	push	{r3, r4, r5, lr}
   28068:	4604      	mov	r4, r0
	if (!addr) {
   2806a:	b163      	cbz	r3, 28086 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   2806c:	881b      	ldrh	r3, [r3, #0]
   2806e:	2b0a      	cmp	r3, #10
   28070:	d015      	beq.n	2809e <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   28072:	2b02      	cmp	r3, #2
   28074:	d01c      	beq.n	280b0 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   28076:	b9f3      	cbnz	r3, 280b6 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   28078:	4620      	mov	r0, r4
   2807a:	f7ff ff83 	bl	27f84 <setup_ipv6_ctx>
   2807e:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   28080:	6364      	str	r4, [r4, #52]	; 0x34
}
   28082:	4628      	mov	r0, r5
   28084:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   28086:	8883      	ldrh	r3, [r0, #4]
   28088:	2b0a      	cmp	r3, #10
   2808a:	d000      	beq.n	2808e <_net_app_config_local_ctx+0x28>
   2808c:	b96b      	cbnz	r3, 280aa <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2808e:	4620      	mov	r0, r4
   28090:	f7ff ff78 	bl	27f84 <setup_ipv6_ctx>
   28094:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   28096:	4620      	mov	r0, r4
   28098:	f7ff ff66 	bl	27f68 <select_default_ctx>
   2809c:	e7f1      	b.n	28082 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2809e:	4620      	mov	r0, r4
   280a0:	f7ff ff70 	bl	27f84 <setup_ipv6_ctx>
   280a4:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   280a6:	6364      	str	r4, [r4, #52]	; 0x34
   280a8:	e7eb      	b.n	28082 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   280aa:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   280ae:	e7e8      	b.n	28082 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   280b0:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   280b4:	e7e5      	b.n	28082 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   280b6:	f06f 0515 	mvn.w	r5, #21
	return ret;
   280ba:	e7e2      	b.n	28082 <_net_app_config_local_ctx+0x1c>

000280bc <net_app_release>:
	if (!ctx) {
   280bc:	b1a0      	cbz	r0, 280e8 <net_app_release+0x2c>
{
   280be:	b510      	push	{r4, lr}
   280c0:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   280c2:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   280c6:	f013 0f01 	tst.w	r3, #1
   280ca:	d010      	beq.n	280ee <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   280cc:	6800      	ldr	r0, [r0, #0]
   280ce:	b118      	cbz	r0, 280d8 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   280d0:	f7f6 f9aa 	bl	1e428 <net_context_put>
		ctx->ipv6.ctx = NULL;
   280d4:	2300      	movs	r3, #0
   280d6:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   280d8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   280dc:	f36f 0300 	bfc	r3, #0, #1
   280e0:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   280e4:	2000      	movs	r0, #0
   280e6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   280e8:	f06f 0015 	mvn.w	r0, #21
   280ec:	4770      	bx	lr
		return -ENOENT;
   280ee:	f06f 0001 	mvn.w	r0, #1
}
   280f2:	bd10      	pop	{r4, pc}

000280f4 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   280f4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   280f8:	2b02      	cmp	r3, #2
   280fa:	d128      	bne.n	2814e <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   280fc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   28100:	2b11      	cmp	r3, #17
   28102:	d009      	beq.n	28118 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   28104:	b1c1      	cbz	r1, 28138 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   28106:	880b      	ldrh	r3, [r1, #0]
   28108:	2b02      	cmp	r3, #2
   2810a:	d01c      	beq.n	28146 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   2810c:	2b0a      	cmp	r3, #10
   2810e:	d016      	beq.n	2813e <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   28110:	b9db      	cbnz	r3, 2814a <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   28112:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28114:	6818      	ldr	r0, [r3, #0]
   28116:	4770      	bx	lr
		if (!dst) {
   28118:	b131      	cbz	r1, 28128 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   2811a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2811e:	f013 0f02 	tst.w	r3, #2
   28122:	d0f0      	beq.n	28106 <_net_app_select_net_ctx+0x12>
				return NULL;
   28124:	2000      	movs	r0, #0
   28126:	4770      	bx	lr
			if (ctx->is_tls) {
   28128:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2812c:	f013 0f02 	tst.w	r3, #2
   28130:	d107      	bne.n	28142 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   28132:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28134:	6818      	ldr	r0, [r3, #0]
   28136:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   28138:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2813a:	6818      	ldr	r0, [r3, #0]
   2813c:	4770      	bx	lr
				return ctx->ipv6.ctx;
   2813e:	6800      	ldr	r0, [r0, #0]
   28140:	4770      	bx	lr
				return NULL;
   28142:	2000      	movs	r0, #0
   28144:	4770      	bx	lr
				return NULL;
   28146:	2000      	movs	r0, #0
   28148:	4770      	bx	lr
	return NULL;
   2814a:	2000      	movs	r0, #0
   2814c:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   2814e:	2000      	movs	r0, #0
}
   28150:	4770      	bx	lr

00028152 <net_app_set_cb>:
	if (!ctx) {
   28152:	b170      	cbz	r0, 28172 <net_app_set_cb+0x20>
{
   28154:	b410      	push	{r4}
   28156:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   28158:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   2815c:	f010 0f01 	tst.w	r0, #1
   28160:	d00a      	beq.n	28178 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   28162:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   28164:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   28166:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   28168:	9b01      	ldr	r3, [sp, #4]
   2816a:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   2816c:	2000      	movs	r0, #0
}
   2816e:	bc10      	pop	{r4}
   28170:	4770      	bx	lr
		return -EINVAL;
   28172:	f06f 0015 	mvn.w	r0, #21
   28176:	4770      	bx	lr
		return -ENOENT;
   28178:	f06f 0001 	mvn.w	r0, #1
   2817c:	e7f7      	b.n	2816e <net_app_set_cb+0x1c>
	...

00028180 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   28180:	2800      	cmp	r0, #0
   28182:	d064      	beq.n	2824e <net_app_send_pkt+0xce>
{
   28184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28188:	b08a      	sub	sp, #40	; 0x28
   2818a:	460d      	mov	r5, r1
   2818c:	4616      	mov	r6, r2
   2818e:	461f      	mov	r7, r3
   28190:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   28192:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   28196:	f013 0f01 	tst.w	r3, #1
   2819a:	d05b      	beq.n	28254 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   2819c:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   2819e:	b188      	cbz	r0, 281c4 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   281a0:	f8d1 e008 	ldr.w	lr, [r1, #8]
   281a4:	4673      	mov	r3, lr
	size_t bytes = 0;
   281a6:	2100      	movs	r1, #0
   281a8:	e002      	b.n	281b0 <net_app_send_pkt+0x30>
		bytes += buf->len;
   281aa:	899a      	ldrh	r2, [r3, #12]
   281ac:	4411      	add	r1, r2
		buf = buf->frags;
   281ae:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   281b0:	2b00      	cmp	r3, #0
   281b2:	d1fa      	bne.n	281aa <net_app_send_pkt+0x2a>
   281b4:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   281b6:	2900      	cmp	r1, #0
   281b8:	dd0d      	ble.n	281d6 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   281ba:	f10e 0008 	add.w	r0, lr, #8
   281be:	f7f4 f8f2 	bl	1c3a6 <net_buf_simple_pull>
   281c2:	e008      	b.n	281d6 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   281c4:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   281c6:	2200      	movs	r2, #0
   281c8:	e002      	b.n	281d0 <net_app_send_pkt+0x50>
		bytes += buf->len;
   281ca:	8999      	ldrh	r1, [r3, #12]
   281cc:	440a      	add	r2, r1
		buf = buf->frags;
   281ce:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   281d0:	2b00      	cmp	r3, #0
   281d2:	d1fa      	bne.n	281ca <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   281d4:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   281d6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   281da:	2b11      	cmp	r3, #17
   281dc:	d00e      	beq.n	281fc <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   281de:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   281e2:	9402      	str	r4, [sp, #8]
   281e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   281e6:	9301      	str	r3, [sp, #4]
   281e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   281ea:	9300      	str	r3, [sp, #0]
   281ec:	4b21      	ldr	r3, [pc, #132]	; (28274 <net_app_send_pkt+0xf4>)
   281ee:	463a      	mov	r2, r7
   281f0:	4631      	mov	r1, r6
   281f2:	4628      	mov	r0, r5
   281f4:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   281f6:	b00a      	add	sp, #40	; 0x28
   281f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   281fc:	b1de      	cbz	r6, 28236 <net_app_send_pkt+0xb6>
	return pkt->family;
   281fe:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   28202:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   28206:	2b02      	cmp	r3, #2
   28208:	d02d      	beq.n	28266 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   2820a:	2b0a      	cmp	r3, #10
   2820c:	d12e      	bne.n	2826c <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   2820e:	af04      	add	r7, sp, #16
   28210:	6830      	ldr	r0, [r6, #0]
   28212:	6871      	ldr	r1, [r6, #4]
   28214:	68b2      	ldr	r2, [r6, #8]
   28216:	68f3      	ldr	r3, [r6, #12]
   28218:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2821a:	6930      	ldr	r0, [r6, #16]
   2821c:	6971      	ldr	r1, [r6, #20]
   2821e:	c703      	stmia	r7!, {r0, r1}
   28220:	af04      	add	r7, sp, #16
   28222:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   28224:	61e0      	str	r0, [r4, #28]
   28226:	6221      	str	r1, [r4, #32]
   28228:	6262      	str	r2, [r4, #36]	; 0x24
   2822a:	62a3      	str	r3, [r4, #40]	; 0x28
   2822c:	cf03      	ldmia	r7!, {r0, r1}
   2822e:	62e0      	str	r0, [r4, #44]	; 0x2c
   28230:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   28232:	2718      	movs	r7, #24
   28234:	e7d3      	b.n	281de <net_app_send_pkt+0x5e>
   28236:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2823a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   2823e:	2b02      	cmp	r3, #2
   28240:	d00b      	beq.n	2825a <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   28242:	2b0a      	cmp	r3, #10
   28244:	d10c      	bne.n	28260 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   28246:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   2824a:	2718      	movs	r7, #24
   2824c:	e7c7      	b.n	281de <net_app_send_pkt+0x5e>
		return -EINVAL;
   2824e:	f06f 0015 	mvn.w	r0, #21
   28252:	4770      	bx	lr
		return -ENOENT;
   28254:	f06f 0001 	mvn.w	r0, #1
   28258:	e7cd      	b.n	281f6 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   2825a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2825e:	e7ca      	b.n	281f6 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   28260:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   28264:	e7c7      	b.n	281f6 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   28266:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2826a:	e7c4      	b.n	281f6 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   2826c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   28270:	e7c1      	b.n	281f6 <net_app_send_pkt+0x76>
   28272:	bf00      	nop
   28274:	00027f6d 	.word	0x00027f6d

00028278 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   28278:	b510      	push	{r4, lr}
   2827a:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   2827c:	2300      	movs	r3, #0
   2827e:	9300      	str	r3, [sp, #0]
   28280:	9301      	str	r3, [sp, #4]
   28282:	9302      	str	r3, [sp, #8]
   28284:	9303      	str	r3, [sp, #12]
   28286:	9304      	str	r3, [sp, #16]
   28288:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   2828a:	b198      	cbz	r0, 282b4 <net_app_get_net_pkt+0x3c>
   2828c:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   2828e:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   28292:	f010 0f01 	tst.w	r0, #1
   28296:	d00f      	beq.n	282b8 <net_app_get_net_pkt+0x40>
   28298:	4618      	mov	r0, r3
   2829a:	4614      	mov	r4, r2
   2829c:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   2829e:	a906      	add	r1, sp, #24
   282a0:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   282a4:	f7ff ff26 	bl	280f4 <_net_app_select_net_ctx>
	if (!net_ctx) {
   282a8:	b140      	cbz	r0, 282bc <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   282aa:	4621      	mov	r1, r4
   282ac:	f7f6 fd1e 	bl	1ecec <net_pkt_get_tx>
}
   282b0:	b006      	add	sp, #24
   282b2:	bd10      	pop	{r4, pc}
		return NULL;
   282b4:	2000      	movs	r0, #0
   282b6:	e7fb      	b.n	282b0 <net_app_get_net_pkt+0x38>
		return NULL;
   282b8:	2000      	movs	r0, #0
   282ba:	e7f9      	b.n	282b0 <net_app_get_net_pkt+0x38>
		return NULL;
   282bc:	2000      	movs	r0, #0
   282be:	e7f7      	b.n	282b0 <net_app_get_net_pkt+0x38>

000282c0 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   282c0:	b1c0      	cbz	r0, 282f4 <net_app_close+0x34>
{
   282c2:	b538      	push	{r3, r4, r5, lr}
   282c4:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   282c6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   282ca:	f013 0f01 	tst.w	r3, #1
   282ce:	d014      	beq.n	282fa <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   282d0:	2100      	movs	r1, #0
   282d2:	f7ff ff0f 	bl	280f4 <_net_app_select_net_ctx>
   282d6:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   282d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   282da:	b11b      	cbz	r3, 282e4 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   282dc:	6f22      	ldr	r2, [r4, #112]	; 0x70
   282de:	2100      	movs	r1, #0
   282e0:	4620      	mov	r0, r4
   282e2:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   282e4:	b165      	cbz	r5, 28300 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   282e6:	2400      	movs	r4, #0
   282e8:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   282ea:	4628      	mov	r0, r5
   282ec:	f7f6 f89c 	bl	1e428 <net_context_put>
	}

	return 0;
   282f0:	4620      	mov	r0, r4
   282f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   282f4:	f06f 0015 	mvn.w	r0, #21
   282f8:	4770      	bx	lr
		return -ENOENT;
   282fa:	f06f 0001 	mvn.w	r0, #1
   282fe:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   28300:	2000      	movs	r0, #0
}
   28302:	bd38      	pop	{r3, r4, r5, pc}

00028304 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   28304:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   28306:	2000      	movs	r0, #0
   28308:	f7df fce4 	bl	7cd4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   2830c:	1e03      	subs	r3, r0, #0
   2830e:	db14      	blt.n	2833a <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   28310:	4810      	ldr	r0, [pc, #64]	; (28354 <_net_app_bt_setup+0x50>)
   28312:	f001 f939 	bl	29588 <device_get_binding>
	if (!dev) {
   28316:	b1b8      	cbz	r0, 28348 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   28318:	f7f4 fb2a 	bl	1c970 <net_if_lookup_by_dev>
	if (!iface) {
   2831c:	4604      	mov	r4, r0
   2831e:	b1b0      	cbz	r0, 2834e <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   28320:	480d      	ldr	r0, [pc, #52]	; (28358 <_net_app_bt_setup+0x54>)
   28322:	f7e3 fbf1 	bl	bb08 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   28326:	2303      	movs	r3, #3
   28328:	4a0c      	ldr	r2, [pc, #48]	; (2835c <_net_app_bt_setup+0x58>)
   2832a:	4621      	mov	r1, r4
   2832c:	480c      	ldr	r0, [pc, #48]	; (28360 <_net_app_bt_setup+0x5c>)
   2832e:	f7f7 fd65 	bl	1fdfc <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   28332:	4603      	mov	r3, r0
   28334:	b928      	cbnz	r0, 28342 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   28336:	4618      	mov	r0, r3
   28338:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   2833a:	f113 0f78 	cmn.w	r3, #120	; 0x78
   2833e:	d1fa      	bne.n	28336 <_net_app_bt_setup+0x32>
   28340:	e7e6      	b.n	28310 <_net_app_bt_setup+0xc>
		return -EINVAL;
   28342:	f06f 0315 	mvn.w	r3, #21
   28346:	e7f6      	b.n	28336 <_net_app_bt_setup+0x32>
		return -ENODEV;
   28348:	f06f 0312 	mvn.w	r3, #18
   2834c:	e7f3      	b.n	28336 <_net_app_bt_setup+0x32>
		return -EINVAL;
   2834e:	f06f 0315 	mvn.w	r3, #21
   28352:	e7f0      	b.n	28336 <_net_app_bt_setup+0x32>
   28354:	000332b0 	.word	0x000332b0
   28358:	2000c5b4 	.word	0x2000c5b4
   2835c:	000336d8 	.word	0x000336d8
   28360:	61550001 	.word	0x61550001

00028364 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   28364:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   28366:	4802      	ldr	r0, [pc, #8]	; (28370 <shell_run+0xc>)
   28368:	f000 fbbe 	bl	28ae8 <shell_init>
	return 0;
}
   2836c:	2000      	movs	r0, #0
   2836e:	bd08      	pop	{r3, pc}
   28370:	000345d0 	.word	0x000345d0

00028374 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   28374:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   28376:	4b0f      	ldr	r3, [pc, #60]	; (283b4 <get_prompt+0x40>)
   28378:	681b      	ldr	r3, [r3, #0]
   2837a:	b123      	cbz	r3, 28386 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   2837c:	4798      	blx	r3
		if (str) {
   2837e:	4603      	mov	r3, r0
   28380:	b108      	cbz	r0, 28386 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   28382:	4618      	mov	r0, r3
   28384:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   28386:	4b0c      	ldr	r3, [pc, #48]	; (283b8 <get_prompt+0x44>)
   28388:	681b      	ldr	r3, [r3, #0]
   2838a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2838e:	d00c      	beq.n	283aa <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   28390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28394:	009a      	lsls	r2, r3, #2
   28396:	4b09      	ldr	r3, [pc, #36]	; (283bc <get_prompt+0x48>)
   28398:	4413      	add	r3, r2
   2839a:	689b      	ldr	r3, [r3, #8]
   2839c:	b143      	cbz	r3, 283b0 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   2839e:	4798      	blx	r3
			if (ret) {
   283a0:	4603      	mov	r3, r0
   283a2:	2800      	cmp	r0, #0
   283a4:	d1ed      	bne.n	28382 <get_prompt+0xe>
		return default_module_prompt;
   283a6:	4b06      	ldr	r3, [pc, #24]	; (283c0 <get_prompt+0x4c>)
   283a8:	e7eb      	b.n	28382 <get_prompt+0xe>
	return prompt;
   283aa:	4b06      	ldr	r3, [pc, #24]	; (283c4 <get_prompt+0x50>)
   283ac:	681b      	ldr	r3, [r3, #0]
   283ae:	e7e8      	b.n	28382 <get_prompt+0xe>
		return default_module_prompt;
   283b0:	4b03      	ldr	r3, [pc, #12]	; (283c0 <get_prompt+0x4c>)
   283b2:	e7e6      	b.n	28382 <get_prompt+0xe>
   283b4:	20002500 	.word	0x20002500
   283b8:	2000c5c0 	.word	0x2000c5c0
   283bc:	2000d084 	.word	0x2000d084
   283c0:	200026b0 	.word	0x200026b0
   283c4:	200026c8 	.word	0x200026c8

000283c8 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   283c8:	2801      	cmp	r0, #1
   283ca:	d001      	beq.n	283d0 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   283cc:	2000      	movs	r0, #0
   283ce:	4770      	bx	lr
		default_module = -1;
   283d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   283d4:	4b01      	ldr	r3, [pc, #4]	; (283dc <exit_module+0x14>)
   283d6:	601a      	str	r2, [r3, #0]
   283d8:	e7f8      	b.n	283cc <exit_module+0x4>
   283da:	bf00      	nop
   283dc:	2000c5c0 	.word	0x2000c5c0

000283e0 <print_module_commands>:
{
   283e0:	b538      	push	{r3, r4, r5, lr}
   283e2:	4605      	mov	r5, r0
	printk("help\n");
   283e4:	480a      	ldr	r0, [pc, #40]	; (28410 <print_module_commands+0x30>)
   283e6:	f7da fed3 	bl	3190 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   283ea:	2400      	movs	r4, #0
   283ec:	e003      	b.n	283f6 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   283ee:	4809      	ldr	r0, [pc, #36]	; (28414 <print_module_commands+0x34>)
   283f0:	f7da fece 	bl	3190 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   283f4:	3401      	adds	r4, #1
   283f6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   283fa:	009a      	lsls	r2, r3, #2
   283fc:	4b06      	ldr	r3, [pc, #24]	; (28418 <print_module_commands+0x38>)
   283fe:	4413      	add	r3, r2
   28400:	6859      	ldr	r1, [r3, #4]
   28402:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   28406:	0093      	lsls	r3, r2, #2
   28408:	58c9      	ldr	r1, [r1, r3]
   2840a:	2900      	cmp	r1, #0
   2840c:	d1ef      	bne.n	283ee <print_module_commands+0xe>
}
   2840e:	bd38      	pop	{r3, r4, r5, pc}
   28410:	0003468c 	.word	0x0003468c
   28414:	000338b0 	.word	0x000338b0
   28418:	2000d084 	.word	0x2000d084

0002841c <line2argv>:
{
   2841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2841e:	4604      	mov	r4, r0
   28420:	460e      	mov	r6, r1
   28422:	4617      	mov	r7, r2
	if (!strlen(str)) {
   28424:	f7d8 f96c 	bl	700 <strlen>
   28428:	b918      	cbnz	r0, 28432 <line2argv+0x16>
   2842a:	4605      	mov	r5, r0
}
   2842c:	4628      	mov	r0, r5
   2842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   28430:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   28432:	7823      	ldrb	r3, [r4, #0]
   28434:	2b20      	cmp	r3, #32
   28436:	d0fb      	beq.n	28430 <line2argv+0x14>
	if (!*str) {
   28438:	b30b      	cbz	r3, 2847e <line2argv+0x62>
	argv[argc++] = str;
   2843a:	6034      	str	r4, [r6, #0]
   2843c:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   2843e:	e00a      	b.n	28456 <line2argv+0x3a>
			str++;
   28440:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   28442:	7823      	ldrb	r3, [r4, #0]
   28444:	2b20      	cmp	r3, #32
   28446:	d0fb      	beq.n	28440 <line2argv+0x24>
		if (!*str) {
   28448:	b1ab      	cbz	r3, 28476 <line2argv+0x5a>
		argv[argc++] = str;
   2844a:	1c6b      	adds	r3, r5, #1
   2844c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   28450:	42bb      	cmp	r3, r7
   28452:	d00a      	beq.n	2846a <line2argv+0x4e>
		argv[argc++] = str;
   28454:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   28456:	2120      	movs	r1, #32
   28458:	4620      	mov	r0, r4
   2845a:	f003 ff07 	bl	2c26c <strchr>
   2845e:	4603      	mov	r3, r0
   28460:	b148      	cbz	r0, 28476 <line2argv+0x5a>
		*str++ = '\0';
   28462:	1c5c      	adds	r4, r3, #1
   28464:	2200      	movs	r2, #0
   28466:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   28468:	e7eb      	b.n	28442 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   2846a:	1e79      	subs	r1, r7, #1
   2846c:	4805      	ldr	r0, [pc, #20]	; (28484 <line2argv+0x68>)
   2846e:	f7da fe8f 	bl	3190 <printk>
			return 0;
   28472:	2500      	movs	r5, #0
   28474:	e7da      	b.n	2842c <line2argv+0x10>
	argv[argc] = NULL;
   28476:	2300      	movs	r3, #0
   28478:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   2847c:	e7d6      	b.n	2842c <line2argv+0x10>
		return 0;
   2847e:	2500      	movs	r5, #0
   28480:	e7d4      	b.n	2842c <line2argv+0x10>
   28482:	bf00      	nop
   28484:	0003466c 	.word	0x0003466c

00028488 <get_destination_module>:
{
   28488:	b538      	push	{r3, r4, r5, lr}
   2848a:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   2848c:	2400      	movs	r4, #0
   2848e:	4a0c      	ldr	r2, [pc, #48]	; (284c0 <get_destination_module+0x38>)
   28490:	4b0c      	ldr	r3, [pc, #48]	; (284c4 <get_destination_module+0x3c>)
   28492:	1a9b      	subs	r3, r3, r2
   28494:	109b      	asrs	r3, r3, #2
   28496:	4a0c      	ldr	r2, [pc, #48]	; (284c8 <get_destination_module+0x40>)
   28498:	fb02 f303 	mul.w	r3, r2, r3
   2849c:	429c      	cmp	r4, r3
   2849e:	da0b      	bge.n	284b8 <get_destination_module+0x30>
		if (!strncmp(module_str,
   284a0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   284a4:	0093      	lsls	r3, r2, #2
   284a6:	2214      	movs	r2, #20
   284a8:	4905      	ldr	r1, [pc, #20]	; (284c0 <get_destination_module+0x38>)
   284aa:	58c9      	ldr	r1, [r1, r3]
   284ac:	4628      	mov	r0, r5
   284ae:	f003 ffaf 	bl	2c410 <strncmp>
   284b2:	b118      	cbz	r0, 284bc <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   284b4:	3401      	adds	r4, #1
   284b6:	e7ea      	b.n	2848e <get_destination_module+0x6>
	return -1;
   284b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   284bc:	4620      	mov	r0, r4
   284be:	bd38      	pop	{r3, r4, r5, pc}
   284c0:	2000d084 	.word	0x2000d084
   284c4:	2000d090 	.word	0x2000d090
   284c8:	aaaaaaab 	.word	0xaaaaaaab

000284cc <set_default_module>:
{
   284cc:	b538      	push	{r3, r4, r5, lr}
   284ce:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   284d0:	f7d8 f916 	bl	700 <strlen>
   284d4:	2814      	cmp	r0, #20
   284d6:	d813      	bhi.n	28500 <set_default_module+0x34>
	module = get_destination_module(name);
   284d8:	4620      	mov	r0, r4
   284da:	f7ff ffd5 	bl	28488 <get_destination_module>
	if (module == -1) {
   284de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   284e2:	d014      	beq.n	2850e <set_default_module+0x42>
	default_module = module;
   284e4:	4b0d      	ldr	r3, [pc, #52]	; (2851c <set_default_module+0x50>)
   284e6:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   284e8:	4d0d      	ldr	r5, [pc, #52]	; (28520 <set_default_module+0x54>)
   284ea:	2214      	movs	r2, #20
   284ec:	4621      	mov	r1, r4
   284ee:	4628      	mov	r0, r5
   284f0:	f003 ffe0 	bl	2c4b4 <strncpy>
	strcat(default_module_prompt, "> ");
   284f4:	490b      	ldr	r1, [pc, #44]	; (28524 <set_default_module+0x58>)
   284f6:	4628      	mov	r0, r5
   284f8:	f003 fe98 	bl	2c22c <strcat>
	return 0;
   284fc:	2000      	movs	r0, #0
}
   284fe:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   28500:	4621      	mov	r1, r4
   28502:	4809      	ldr	r0, [pc, #36]	; (28528 <set_default_module+0x5c>)
   28504:	f7da fe44 	bl	3190 <printk>
		return -EINVAL;
   28508:	f06f 0015 	mvn.w	r0, #21
   2850c:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   2850e:	4621      	mov	r1, r4
   28510:	4806      	ldr	r0, [pc, #24]	; (2852c <set_default_module+0x60>)
   28512:	f7da fe3d 	bl	3190 <printk>
		return -EINVAL;
   28516:	f06f 0015 	mvn.w	r0, #21
   2851a:	bd38      	pop	{r3, r4, r5, pc}
   2851c:	2000c5c0 	.word	0x2000c5c0
   28520:	200026b0 	.word	0x200026b0
   28524:	000346f4 	.word	0x000346f4
   28528:	00034694 	.word	0x00034694
   2852c:	000346c8 	.word	0x000346c8

00028530 <select_module>:
{
   28530:	b508      	push	{r3, lr}
	if (argc == 1) {
   28532:	2801      	cmp	r0, #1
   28534:	d003      	beq.n	2853e <select_module+0xe>
	return set_default_module(argv[1]);
   28536:	6848      	ldr	r0, [r1, #4]
   28538:	f7ff ffc8 	bl	284cc <set_default_module>
}
   2853c:	bd08      	pop	{r3, pc}
		default_module = -1;
   2853e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28542:	4b02      	ldr	r3, [pc, #8]	; (2854c <select_module+0x1c>)
   28544:	601a      	str	r2, [r3, #0]
		return 0;
   28546:	2000      	movs	r0, #0
   28548:	bd08      	pop	{r3, pc}
   2854a:	bf00      	nop
   2854c:	2000c5c0 	.word	0x2000c5c0

00028550 <get_command_and_module>:
{
   28550:	b538      	push	{r3, r4, r5, lr}
   28552:	4604      	mov	r4, r0
	*module = -1;
   28554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28558:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   2855a:	6800      	ldr	r0, [r0, #0]
   2855c:	b140      	cbz	r0, 28570 <get_command_and_module+0x20>
   2855e:	460d      	mov	r5, r1
	if (default_module == -1) {
   28560:	4b12      	ldr	r3, [pc, #72]	; (285ac <get_command_and_module+0x5c>)
   28562:	681b      	ldr	r3, [r3, #0]
   28564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28568:	d007      	beq.n	2857a <get_command_and_module+0x2a>
	*module = default_module;
   2856a:	600b      	str	r3, [r1, #0]
	return argv[0];
   2856c:	6820      	ldr	r0, [r4, #0]
}
   2856e:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   28570:	480f      	ldr	r0, [pc, #60]	; (285b0 <get_command_and_module+0x60>)
   28572:	f7da fe0d 	bl	3190 <printk>
		return NULL;
   28576:	2000      	movs	r0, #0
   28578:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   2857a:	6863      	ldr	r3, [r4, #4]
   2857c:	b14b      	cbz	r3, 28592 <get_command_and_module+0x42>
   2857e:	781b      	ldrb	r3, [r3, #0]
   28580:	b13b      	cbz	r3, 28592 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   28582:	f7ff ff81 	bl	28488 <get_destination_module>
   28586:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   28588:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2858c:	d007      	beq.n	2859e <get_command_and_module+0x4e>
		return argv[1];
   2858e:	6860      	ldr	r0, [r4, #4]
   28590:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   28592:	4601      	mov	r1, r0
   28594:	4807      	ldr	r0, [pc, #28]	; (285b4 <get_command_and_module+0x64>)
   28596:	f7da fdfb 	bl	3190 <printk>
			return NULL;
   2859a:	2000      	movs	r0, #0
   2859c:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   2859e:	6821      	ldr	r1, [r4, #0]
   285a0:	4805      	ldr	r0, [pc, #20]	; (285b8 <get_command_and_module+0x68>)
   285a2:	f7da fdf5 	bl	3190 <printk>
			return NULL;
   285a6:	2000      	movs	r0, #0
   285a8:	bd38      	pop	{r3, r4, r5, pc}
   285aa:	bf00      	nop
   285ac:	2000c5c0 	.word	0x2000c5c0
   285b0:	00034624 	.word	0x00034624
   285b4:	0003463c 	.word	0x0003463c
   285b8:	00034658 	.word	0x00034658

000285bc <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   285bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   285be:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   285c0:	b15c      	cbz	r4, 285da <get_cb+0x1e>
   285c2:	4606      	mov	r6, r0
   285c4:	460d      	mov	r5, r1
   285c6:	4617      	mov	r7, r2
   285c8:	7823      	ldrb	r3, [r4, #0]
   285ca:	b133      	cbz	r3, 285da <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   285cc:	4929      	ldr	r1, [pc, #164]	; (28674 <get_cb+0xb8>)
   285ce:	4620      	mov	r0, r4
   285d0:	f7d7 ff1a 	bl	408 <strcmp>
   285d4:	b930      	cbnz	r0, 285e4 <get_cb+0x28>
		return show_help;
   285d6:	4828      	ldr	r0, [pc, #160]	; (28678 <get_cb+0xbc>)
   285d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   285da:	4828      	ldr	r0, [pc, #160]	; (2867c <get_cb+0xc0>)
   285dc:	f7da fdd8 	bl	3190 <printk>
		return NULL;
   285e0:	2000      	movs	r0, #0
   285e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   285e4:	4926      	ldr	r1, [pc, #152]	; (28680 <get_cb+0xc4>)
   285e6:	4620      	mov	r0, r4
   285e8:	f7d7 ff0e 	bl	408 <strcmp>
   285ec:	b908      	cbnz	r0, 285f2 <get_cb+0x36>
		return select_module;
   285ee:	4825      	ldr	r0, [pc, #148]	; (28684 <get_cb+0xc8>)
   285f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   285f2:	4925      	ldr	r1, [pc, #148]	; (28688 <get_cb+0xcc>)
   285f4:	4620      	mov	r0, r4
   285f6:	f7d7 ff07 	bl	408 <strcmp>
   285fa:	2800      	cmp	r0, #0
   285fc:	d034      	beq.n	28668 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   285fe:	6833      	ldr	r3, [r6, #0]
   28600:	2b01      	cmp	r3, #1
   28602:	d01c      	beq.n	2863e <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   28604:	4639      	mov	r1, r7
   28606:	4628      	mov	r0, r5
   28608:	f7ff ffa2 	bl	28550 <get_command_and_module>
   2860c:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   2860e:	683d      	ldr	r5, [r7, #0]
   28610:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28614:	d02a      	beq.n	2866c <get_cb+0xb0>
   28616:	b358      	cbz	r0, 28670 <get_cb+0xb4>
   28618:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2861a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2861e:	009a      	lsls	r2, r3, #2
   28620:	4b1a      	ldr	r3, [pc, #104]	; (2868c <get_cb+0xd0>)
   28622:	4413      	add	r3, r2
   28624:	6859      	ldr	r1, [r3, #4]
   28626:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2862a:	0093      	lsls	r3, r2, #2
   2862c:	461f      	mov	r7, r3
   2862e:	58c9      	ldr	r1, [r1, r3]
   28630:	b1c1      	cbz	r1, 28664 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   28632:	4630      	mov	r0, r6
   28634:	f7d7 fee8 	bl	408 <strcmp>
   28638:	b158      	cbz	r0, 28652 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2863a:	3401      	adds	r4, #1
   2863c:	e7ed      	b.n	2861a <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   2863e:	4b14      	ldr	r3, [pc, #80]	; (28690 <get_cb+0xd4>)
   28640:	681b      	ldr	r3, [r3, #0]
   28642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28646:	d1dd      	bne.n	28604 <get_cb+0x48>
		printk("Missing parameter\n");
   28648:	4812      	ldr	r0, [pc, #72]	; (28694 <get_cb+0xd8>)
   2864a:	f7da fda1 	bl	3190 <printk>
		return NULL;
   2864e:	2000      	movs	r0, #0
   28650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   28652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   28656:	00aa      	lsls	r2, r5, #2
   28658:	4b0c      	ldr	r3, [pc, #48]	; (2868c <get_cb+0xd0>)
   2865a:	4413      	add	r3, r2
   2865c:	685b      	ldr	r3, [r3, #4]
   2865e:	441f      	add	r7, r3
   28660:	6878      	ldr	r0, [r7, #4]
   28662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   28664:	2000      	movs	r0, #0
   28666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   28668:	480b      	ldr	r0, [pc, #44]	; (28698 <get_cb+0xdc>)
   2866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   2866c:	2000      	movs	r0, #0
   2866e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28670:	2000      	movs	r0, #0
}
   28672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28674:	000345f8 	.word	0x000345f8
   28678:	0002873d 	.word	0x0002873d
   2867c:	000345e4 	.word	0x000345e4
   28680:	00034600 	.word	0x00034600
   28684:	00028531 	.word	0x00028531
   28688:	00034608 	.word	0x00034608
   2868c:	2000d084 	.word	0x2000d084
   28690:	2000c5c0 	.word	0x2000c5c0
   28694:	00034610 	.word	0x00034610
   28698:	000283c9 	.word	0x000283c9

0002869c <show_cmd_help>:
{
   2869c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   286a0:	b083      	sub	sp, #12
   286a2:	4607      	mov	r7, r0
	int module = -1;
   286a4:	a902      	add	r1, sp, #8
   286a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286aa:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   286ae:	f7ff ff4f 	bl	28550 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   286b2:	9d01      	ldr	r5, [sp, #4]
   286b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   286b8:	d031      	beq.n	2871e <show_cmd_help+0x82>
   286ba:	4606      	mov	r6, r0
   286bc:	b390      	cbz	r0, 28724 <show_cmd_help+0x88>
   286be:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   286c0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   286c4:	009a      	lsls	r2, r3, #2
   286c6:	4b19      	ldr	r3, [pc, #100]	; (2872c <show_cmd_help+0x90>)
   286c8:	4413      	add	r3, r2
   286ca:	6859      	ldr	r1, [r3, #4]
   286cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   286d0:	0093      	lsls	r3, r2, #2
   286d2:	4698      	mov	r8, r3
   286d4:	58c9      	ldr	r1, [r1, r3]
   286d6:	b1c1      	cbz	r1, 2870a <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   286d8:	4630      	mov	r0, r6
   286da:	f7d7 fe95 	bl	408 <strcmp>
   286de:	4681      	mov	r9, r0
   286e0:	b108      	cbz	r0, 286e6 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   286e2:	3401      	adds	r4, #1
   286e4:	e7ec      	b.n	286c0 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   286e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   286ea:	00aa      	lsls	r2, r5, #2
   286ec:	4b0f      	ldr	r3, [pc, #60]	; (2872c <show_cmd_help+0x90>)
   286ee:	4413      	add	r3, r2
   286f0:	685b      	ldr	r3, [r3, #4]
   286f2:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   286f6:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   286fa:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   286fc:	b11a      	cbz	r2, 28706 <show_cmd_help+0x6a>
   286fe:	480c      	ldr	r0, [pc, #48]	; (28730 <show_cmd_help+0x94>)
   28700:	f7da fd46 	bl	3190 <printk>
			return 0;
   28704:	e007      	b.n	28716 <show_cmd_help+0x7a>
			printk("%s %s\n",
   28706:	4a0b      	ldr	r2, [pc, #44]	; (28734 <show_cmd_help+0x98>)
   28708:	e7f9      	b.n	286fe <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   2870a:	6839      	ldr	r1, [r7, #0]
   2870c:	480a      	ldr	r0, [pc, #40]	; (28738 <show_cmd_help+0x9c>)
   2870e:	f7da fd3f 	bl	3190 <printk>
	return -EINVAL;
   28712:	f06f 0915 	mvn.w	r9, #21
}
   28716:	4648      	mov	r0, r9
   28718:	b003      	add	sp, #12
   2871a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   2871e:	f04f 0900 	mov.w	r9, #0
   28722:	e7f8      	b.n	28716 <show_cmd_help+0x7a>
   28724:	f04f 0900 	mov.w	r9, #0
   28728:	e7f5      	b.n	28716 <show_cmd_help+0x7a>
   2872a:	bf00      	nop
   2872c:	2000d084 	.word	0x2000d084
   28730:	00034724 	.word	0x00034724
   28734:	00030afc 	.word	0x00030afc
   28738:	0003463c 	.word	0x0003463c

0002873c <show_help>:
{
   2873c:	b510      	push	{r4, lr}
   2873e:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   28740:	2802      	cmp	r0, #2
   28742:	dc12      	bgt.n	2876a <show_help+0x2e>
   28744:	4b23      	ldr	r3, [pc, #140]	; (287d4 <show_help+0x98>)
   28746:	681b      	ldr	r3, [r3, #0]
   28748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2874c:	d001      	beq.n	28752 <show_help+0x16>
   2874e:	2802      	cmp	r0, #2
   28750:	d00b      	beq.n	2876a <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   28752:	2802      	cmp	r0, #2
   28754:	d00d      	beq.n	28772 <show_help+0x36>
   28756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2875a:	d001      	beq.n	28760 <show_help+0x24>
   2875c:	2801      	cmp	r0, #1
   2875e:	d008      	beq.n	28772 <show_help+0x36>
		printk("Available modules:\n");
   28760:	481d      	ldr	r0, [pc, #116]	; (287d8 <show_help+0x9c>)
   28762:	f7da fd15 	bl	3190 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   28766:	2400      	movs	r4, #0
   28768:	e025      	b.n	287b6 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   2876a:	1d20      	adds	r0, r4, #4
   2876c:	f7ff ff96 	bl	2869c <show_cmd_help>
   28770:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   28772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28776:	d007      	beq.n	28788 <show_help+0x4c>
		print_module_commands(module);
   28778:	4618      	mov	r0, r3
   2877a:	f7ff fe31 	bl	283e0 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   2877e:	4817      	ldr	r0, [pc, #92]	; (287dc <show_help+0xa0>)
   28780:	f7da fd06 	bl	3190 <printk>
	return 0;
   28784:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   28786:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   28788:	6860      	ldr	r0, [r4, #4]
   2878a:	f7ff fe7d 	bl	28488 <get_destination_module>
   2878e:	4603      	mov	r3, r0
			if (module == -1) {
   28790:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28794:	d1f0      	bne.n	28778 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   28796:	6861      	ldr	r1, [r4, #4]
   28798:	4811      	ldr	r0, [pc, #68]	; (287e0 <show_help+0xa4>)
   2879a:	f7da fcf9 	bl	3190 <printk>
				return -EINVAL;
   2879e:	f06f 0015 	mvn.w	r0, #21
   287a2:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   287a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   287a8:	0093      	lsls	r3, r2, #2
   287aa:	4a0e      	ldr	r2, [pc, #56]	; (287e4 <show_help+0xa8>)
   287ac:	58d1      	ldr	r1, [r2, r3]
   287ae:	480e      	ldr	r0, [pc, #56]	; (287e8 <show_help+0xac>)
   287b0:	f7da fcee 	bl	3190 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   287b4:	3401      	adds	r4, #1
   287b6:	4a0b      	ldr	r2, [pc, #44]	; (287e4 <show_help+0xa8>)
   287b8:	4b0c      	ldr	r3, [pc, #48]	; (287ec <show_help+0xb0>)
   287ba:	1a9b      	subs	r3, r3, r2
   287bc:	109b      	asrs	r3, r3, #2
   287be:	4a0c      	ldr	r2, [pc, #48]	; (287f0 <show_help+0xb4>)
   287c0:	fb02 f303 	mul.w	r3, r2, r3
   287c4:	429c      	cmp	r4, r3
   287c6:	dbed      	blt.n	287a4 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   287c8:	480a      	ldr	r0, [pc, #40]	; (287f4 <show_help+0xb8>)
   287ca:	f7da fce1 	bl	3190 <printk>
	return 0;
   287ce:	2000      	movs	r0, #0
}
   287d0:	bd10      	pop	{r4, pc}
   287d2:	bf00      	nop
   287d4:	2000c5c0 	.word	0x2000c5c0
   287d8:	00034754 	.word	0x00034754
   287dc:	0003472c 	.word	0x0003472c
   287e0:	00034658 	.word	0x00034658
   287e4:	2000d084 	.word	0x2000d084
   287e8:	000338b0 	.word	0x000338b0
   287ec:	2000d090 	.word	0x2000d090
   287f0:	aaaaaaab 	.word	0xaaaaaaab
   287f4:	00034768 	.word	0x00034768

000287f8 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   287f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287fc:	b086      	sub	sp, #24
   287fe:	4604      	mov	r4, r0
   28800:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   28802:	e000      	b.n	28806 <get_command_to_complete+0xe>
		str++;
   28804:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   28806:	7823      	ldrb	r3, [r4, #0]
   28808:	2b20      	cmp	r3, #32
   2880a:	d0fb      	beq.n	28804 <get_command_to_complete+0xc>
	}

	if (!*str) {
   2880c:	b3a3      	cbz	r3, 28878 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   2880e:	4b1f      	ldr	r3, [pc, #124]	; (2888c <get_command_to_complete+0x94>)
   28810:	681d      	ldr	r5, [r3, #0]
   28812:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28816:	d001      	beq.n	2881c <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   28818:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   2881c:	2120      	movs	r1, #32
   2881e:	4620      	mov	r0, r4
   28820:	f003 fd24 	bl	2c26c <strchr>
   28824:	4606      	mov	r6, r0
	if (default_module != -1) {
   28826:	4b19      	ldr	r3, [pc, #100]	; (2888c <get_command_to_complete+0x94>)
   28828:	681f      	ldr	r7, [r3, #0]
   2882a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2882e:	d004      	beq.n	2883a <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   28830:	bb28      	cbnz	r0, 2887e <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   28832:	4628      	mov	r0, r5
   28834:	b006      	add	sp, #24
   28836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   2883a:	b318      	cbz	r0, 28884 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   2883c:	1b05      	subs	r5, r0, r4
   2883e:	1c6a      	adds	r2, r5, #1
   28840:	2a13      	cmp	r2, #19
   28842:	dc21      	bgt.n	28888 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   28844:	4621      	mov	r1, r4
   28846:	a801      	add	r0, sp, #4
   28848:	f003 fe34 	bl	2c4b4 <strncpy>
	dest_str[str - start] = '\0';
   2884c:	ab06      	add	r3, sp, #24
   2884e:	441d      	add	r5, r3
   28850:	2300      	movs	r3, #0
   28852:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   28856:	a801      	add	r0, sp, #4
   28858:	f7ff fe16 	bl	28488 <get_destination_module>
   2885c:	4605      	mov	r5, r0
	if (dest == -1) {
   2885e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28862:	d0e6      	beq.n	28832 <get_command_to_complete+0x3a>
	str++;
   28864:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   28866:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   2886a:	2120      	movs	r1, #32
   2886c:	f003 fcfe 	bl	2c26c <strchr>
	return (str == NULL) ? dest : -1;
   28870:	2800      	cmp	r0, #0
   28872:	d0de      	beq.n	28832 <get_command_to_complete+0x3a>
   28874:	463d      	mov	r5, r7
   28876:	e7dc      	b.n	28832 <get_command_to_complete+0x3a>
		return -1;
   28878:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2887c:	e7d9      	b.n	28832 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   2887e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28882:	e7d6      	b.n	28832 <get_command_to_complete+0x3a>
		return -1;
   28884:	463d      	mov	r5, r7
   28886:	e7d4      	b.n	28832 <get_command_to_complete+0x3a>
		return -1;
   28888:	463d      	mov	r5, r7
   2888a:	e7d2      	b.n	28832 <get_command_to_complete+0x3a>
   2888c:	2000c5c0 	.word	0x2000c5c0

00028890 <completion>:

static u8_t completion(char *line, u8_t len)
{
   28890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28894:	b087      	sub	sp, #28
   28896:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   28898:	2944      	cmp	r1, #68	; 0x44
   2889a:	d903      	bls.n	288a4 <completion+0x14>
		return 0;
   2889c:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   2889e:	b007      	add	sp, #28
   288a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288a4:	4689      	mov	r9, r1
	line[len] = '\0';
   288a6:	2300      	movs	r3, #0
   288a8:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   288aa:	a905      	add	r1, sp, #20
   288ac:	f7ff ffa4 	bl	287f8 <get_command_to_complete>
   288b0:	4605      	mov	r5, r0
	if (dest == -1) {
   288b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   288b6:	f000 808f 	beq.w	289d8 <completion+0x148>
	command_len = strlen(command_prefix);
   288ba:	9805      	ldr	r0, [sp, #20]
   288bc:	f7d7 ff20 	bl	700 <strlen>
   288c0:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   288c2:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   288c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   288ca:	465f      	mov	r7, fp
   288cc:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   288ce:	e01f      	b.n	28910 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   288d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   288d4:	009a      	lsls	r2, r3, #2
   288d6:	4b42      	ldr	r3, [pc, #264]	; (289e0 <completion+0x150>)
   288d8:	4413      	add	r3, r2
   288da:	685b      	ldr	r3, [r3, #4]
   288dc:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   288e0:	e014      	b.n	2890c <completion+0x7c>
			printk("\n%s\n", first_match);
   288e2:	4639      	mov	r1, r7
   288e4:	483f      	ldr	r0, [pc, #252]	; (289e4 <completion+0x154>)
   288e6:	f7da fc53 	bl	3190 <printk>
			common_chars = strlen(first_match);
   288ea:	4638      	mov	r0, r7
   288ec:	f7d7 ff08 	bl	700 <strlen>
   288f0:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   288f2:	e026      	b.n	28942 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   288f4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   288f8:	009a      	lsls	r2, r3, #2
   288fa:	4b39      	ldr	r3, [pc, #228]	; (289e0 <completion+0x150>)
   288fc:	4413      	add	r3, r2
   288fe:	685b      	ldr	r3, [r3, #4]
   28900:	f853 100a 	ldr.w	r1, [r3, sl]
   28904:	4838      	ldr	r0, [pc, #224]	; (289e8 <completion+0x158>)
   28906:	f7da fc43 	bl	3190 <printk>
		common_chars = j;
   2890a:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   2890c:	f10b 0b01 	add.w	fp, fp, #1
   28910:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   28914:	009a      	lsls	r2, r3, #2
   28916:	4b32      	ldr	r3, [pc, #200]	; (289e0 <completion+0x150>)
   28918:	4413      	add	r3, r2
   2891a:	685a      	ldr	r2, [r3, #4]
   2891c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   28920:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   28924:	46d0      	mov	r8, sl
   28926:	f852 100a 	ldr.w	r1, [r2, sl]
   2892a:	b1d1      	cbz	r1, 28962 <completion+0xd2>
		if (strncmp(command_prefix,
   2892c:	9a01      	ldr	r2, [sp, #4]
   2892e:	9805      	ldr	r0, [sp, #20]
   28930:	f003 fd6e 	bl	2c410 <strncmp>
   28934:	4604      	mov	r4, r0
   28936:	2800      	cmp	r0, #0
   28938:	d1e8      	bne.n	2890c <completion+0x7c>
		if (!first_match) {
   2893a:	2f00      	cmp	r7, #0
   2893c:	d0c8      	beq.n	288d0 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   2893e:	2e00      	cmp	r6, #0
   28940:	dbcf      	blt.n	288e2 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   28942:	42a6      	cmp	r6, r4
   28944:	ddd6      	ble.n	288f4 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   28946:	5d39      	ldrb	r1, [r7, r4]
   28948:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2894c:	009a      	lsls	r2, r3, #2
   2894e:	4b24      	ldr	r3, [pc, #144]	; (289e0 <completion+0x150>)
   28950:	4413      	add	r3, r2
   28952:	685b      	ldr	r3, [r3, #4]
   28954:	f853 3008 	ldr.w	r3, [r3, r8]
   28958:	5d1b      	ldrb	r3, [r3, r4]
   2895a:	4299      	cmp	r1, r3
   2895c:	d1ca      	bne.n	288f4 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   2895e:	3401      	adds	r4, #1
   28960:	e7ef      	b.n	28942 <completion+0xb2>
   28962:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   28966:	2f00      	cmp	r7, #0
   28968:	d038      	beq.n	289dc <completion+0x14c>
	if (common_chars >= 0) {
   2896a:	2e00      	cmp	r6, #0
   2896c:	db0d      	blt.n	2898a <completion+0xfa>
		printk("%s", get_prompt());
   2896e:	f7ff fd01 	bl	28374 <get_prompt>
   28972:	4c1e      	ldr	r4, [pc, #120]	; (289ec <completion+0x15c>)
   28974:	4601      	mov	r1, r0
   28976:	4620      	mov	r0, r4
   28978:	f7da fc0a 	bl	3190 <printk>
		printk("%s", line);
   2897c:	9d02      	ldr	r5, [sp, #8]
   2897e:	4629      	mov	r1, r5
   28980:	4620      	mov	r0, r4
   28982:	f7da fc05 	bl	3190 <printk>
	int common_chars = -1, space = 0;
   28986:	2400      	movs	r4, #0
   28988:	e015      	b.n	289b6 <completion+0x126>
		common_chars = strlen(first_match);
   2898a:	4638      	mov	r0, r7
   2898c:	f7d7 feb8 	bl	700 <strlen>
   28990:	4606      	mov	r6, r0
		space = 1;
   28992:	2401      	movs	r4, #1
   28994:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   28996:	e00e      	b.n	289b6 <completion+0x126>
		printk("%c", first_match[i]);
   28998:	f817 100a 	ldrb.w	r1, [r7, sl]
   2899c:	4814      	ldr	r0, [pc, #80]	; (289f0 <completion+0x160>)
   2899e:	f7da fbf7 	bl	3190 <printk>
		line[len++] = first_match[i];
   289a2:	f109 0301 	add.w	r3, r9, #1
   289a6:	f817 200a 	ldrb.w	r2, [r7, sl]
   289aa:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   289ae:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   289b2:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   289b6:	4556      	cmp	r6, sl
   289b8:	dcee      	bgt.n	28998 <completion+0x108>
	if (space) {
   289ba:	b92c      	cbnz	r4, 289c8 <completion+0x138>
	return common_chars - command_len + space;
   289bc:	9b01      	ldr	r3, [sp, #4]
   289be:	1af0      	subs	r0, r6, r3
   289c0:	fa54 f080 	uxtab	r0, r4, r0
   289c4:	b2c0      	uxtb	r0, r0
   289c6:	e76a      	b.n	2889e <completion+0xe>
		printk(" ");
   289c8:	480a      	ldr	r0, [pc, #40]	; (289f4 <completion+0x164>)
   289ca:	f7da fbe1 	bl	3190 <printk>
		line[len] = ' ';
   289ce:	2320      	movs	r3, #32
   289d0:	9a02      	ldr	r2, [sp, #8]
   289d2:	f802 3009 	strb.w	r3, [r2, r9]
   289d6:	e7f1      	b.n	289bc <completion+0x12c>
		return 0;
   289d8:	2000      	movs	r0, #0
   289da:	e760      	b.n	2889e <completion+0xe>
		return 0;
   289dc:	2000      	movs	r0, #0
   289de:	e75e      	b.n	2889e <completion+0xe>
   289e0:	2000d084 	.word	0x2000d084
   289e4:	000345d8 	.word	0x000345d8
   289e8:	000338b0 	.word	0x000338b0
   289ec:	0002ff88 	.word	0x0002ff88
   289f0:	000345e0 	.word	0x000345e0
   289f4:	00034c2c 	.word	0x00034c2c

000289f8 <line_queue_init>:
{
   289f8:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   289fa:	2400      	movs	r4, #0
   289fc:	e008      	b.n	28a10 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   289fe:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   28a02:	0093      	lsls	r3, r2, #2
   28a04:	4904      	ldr	r1, [pc, #16]	; (28a18 <line_queue_init+0x20>)
   28a06:	4419      	add	r1, r3
   28a08:	4804      	ldr	r0, [pc, #16]	; (28a1c <line_queue_init+0x24>)
   28a0a:	f001 fced 	bl	2a3e8 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   28a0e:	3401      	adds	r4, #1
   28a10:	2c02      	cmp	r4, #2
   28a12:	ddf4      	ble.n	289fe <line_queue_init+0x6>
}
   28a14:	bd10      	pop	{r4, pc}
   28a16:	bf00      	nop
   28a18:	20002514 	.word	0x20002514
   28a1c:	20002504 	.word	0x20002504

00028a20 <shell_exec>:
{
   28a20:	b510      	push	{r4, lr}
   28a22:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   28a24:	4b1e      	ldr	r3, [pc, #120]	; (28aa0 <shell_exec+0x80>)
   28a26:	681b      	ldr	r3, [r3, #0]
   28a28:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   28a2a:	220b      	movs	r2, #11
   28a2c:	a903      	add	r1, sp, #12
   28a2e:	f7ff fcf5 	bl	2841c <line2argv>
   28a32:	9002      	str	r0, [sp, #8]
	if (!argc) {
   28a34:	2800      	cmp	r0, #0
   28a36:	d02f      	beq.n	28a98 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   28a38:	aa01      	add	r2, sp, #4
   28a3a:	a903      	add	r1, sp, #12
   28a3c:	a802      	add	r0, sp, #8
   28a3e:	f7ff fdbd 	bl	285bc <get_cb>
	if (!cb) {
   28a42:	4602      	mov	r2, r0
   28a44:	b168      	cbz	r0, 28a62 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   28a46:	9b01      	ldr	r3, [sp, #4]
   28a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28a4c:	d017      	beq.n	28a7e <shell_exec+0x5e>
   28a4e:	4914      	ldr	r1, [pc, #80]	; (28aa0 <shell_exec+0x80>)
   28a50:	6809      	ldr	r1, [r1, #0]
   28a52:	428b      	cmp	r3, r1
   28a54:	d013      	beq.n	28a7e <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   28a56:	a904      	add	r1, sp, #16
   28a58:	9802      	ldr	r0, [sp, #8]
   28a5a:	3801      	subs	r0, #1
   28a5c:	4790      	blx	r2
   28a5e:	4604      	mov	r4, r0
   28a60:	e011      	b.n	28a86 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   28a62:	4b10      	ldr	r3, [pc, #64]	; (28aa4 <shell_exec+0x84>)
   28a64:	681a      	ldr	r2, [r3, #0]
   28a66:	2a00      	cmp	r2, #0
   28a68:	d1ed      	bne.n	28a46 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   28a6a:	9903      	ldr	r1, [sp, #12]
   28a6c:	480e      	ldr	r0, [pc, #56]	; (28aa8 <shell_exec+0x88>)
   28a6e:	f7da fb8f 	bl	3190 <printk>
	printk("Type 'help' for list of available commands\n");
   28a72:	480e      	ldr	r0, [pc, #56]	; (28aac <shell_exec+0x8c>)
   28a74:	f7da fb8c 	bl	3190 <printk>
			return -EINVAL;
   28a78:	f06f 0415 	mvn.w	r4, #21
   28a7c:	e005      	b.n	28a8a <shell_exec+0x6a>
		err = cb(argc, argv);
   28a7e:	a903      	add	r1, sp, #12
   28a80:	9802      	ldr	r0, [sp, #8]
   28a82:	4790      	blx	r2
   28a84:	4604      	mov	r4, r0
	if (err < 0) {
   28a86:	2c00      	cmp	r4, #0
   28a88:	db02      	blt.n	28a90 <shell_exec+0x70>
}
   28a8a:	4620      	mov	r0, r4
   28a8c:	b00e      	add	sp, #56	; 0x38
   28a8e:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   28a90:	a803      	add	r0, sp, #12
   28a92:	f7ff fe03 	bl	2869c <show_cmd_help>
   28a96:	e7f8      	b.n	28a8a <shell_exec+0x6a>
		return -EINVAL;
   28a98:	f06f 0415 	mvn.w	r4, #21
   28a9c:	e7f5      	b.n	28a8a <shell_exec+0x6a>
   28a9e:	bf00      	nop
   28aa0:	2000c5c0 	.word	0x2000c5c0
   28aa4:	200024fc 	.word	0x200024fc
   28aa8:	0003463c 	.word	0x0003463c
   28aac:	000346f8 	.word	0x000346f8

00028ab0 <shell>:
{
   28ab0:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   28ab2:	f7ff fc5f 	bl	28374 <get_prompt>
   28ab6:	4601      	mov	r1, r0
   28ab8:	4808      	ldr	r0, [pc, #32]	; (28adc <shell+0x2c>)
   28aba:	f7da fb69 	bl	3190 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   28abe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28ac2:	4807      	ldr	r0, [pc, #28]	; (28ae0 <shell+0x30>)
   28ac4:	f001 fcb8 	bl	2a438 <k_queue_get>
   28ac8:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   28aca:	3004      	adds	r0, #4
   28acc:	f7ff ffa8 	bl	28a20 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   28ad0:	4621      	mov	r1, r4
   28ad2:	4804      	ldr	r0, [pc, #16]	; (28ae4 <shell+0x34>)
   28ad4:	f001 fc88 	bl	2a3e8 <k_queue_append>
   28ad8:	e7eb      	b.n	28ab2 <shell+0x2>
   28ada:	bf00      	nop
   28adc:	0002ff88 	.word	0x0002ff88
   28ae0:	200026a0 	.word	0x200026a0
   28ae4:	20002504 	.word	0x20002504

00028ae8 <shell_init>:


void shell_init(const char *str)
{
   28ae8:	b510      	push	{r4, lr}
   28aea:	b086      	sub	sp, #24
   28aec:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   28aee:	4812      	ldr	r0, [pc, #72]	; (28b38 <shell_init+0x50>)
   28af0:	f001 fc47 	bl	2a382 <k_queue_init>
	k_fifo_init(&avail_queue);
   28af4:	4811      	ldr	r0, [pc, #68]	; (28b3c <shell_init+0x54>)
   28af6:	f001 fc44 	bl	2a382 <k_queue_init>

	line_queue_init();
   28afa:	f7ff ff7d 	bl	289f8 <line_queue_init>

	prompt = str ? str : "";
   28afe:	b1c4      	cbz	r4, 28b32 <shell_init+0x4a>
   28b00:	4b0f      	ldr	r3, [pc, #60]	; (28b40 <shell_init+0x58>)
   28b02:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   28b04:	2300      	movs	r3, #0
   28b06:	9305      	str	r3, [sp, #20]
   28b08:	9304      	str	r3, [sp, #16]
   28b0a:	f06f 0208 	mvn.w	r2, #8
   28b0e:	9203      	str	r2, [sp, #12]
   28b10:	9302      	str	r3, [sp, #8]
   28b12:	9301      	str	r3, [sp, #4]
   28b14:	9300      	str	r3, [sp, #0]
   28b16:	4b0b      	ldr	r3, [pc, #44]	; (28b44 <shell_init+0x5c>)
   28b18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   28b1c:	490a      	ldr	r1, [pc, #40]	; (28b48 <shell_init+0x60>)
   28b1e:	480b      	ldr	r0, [pc, #44]	; (28b4c <shell_init+0x64>)
   28b20:	f002 fa78 	bl	2b014 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   28b24:	4a0a      	ldr	r2, [pc, #40]	; (28b50 <shell_init+0x68>)
   28b26:	4904      	ldr	r1, [pc, #16]	; (28b38 <shell_init+0x50>)
   28b28:	4804      	ldr	r0, [pc, #16]	; (28b3c <shell_init+0x54>)
   28b2a:	f7d9 fb71 	bl	2210 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   28b2e:	b006      	add	sp, #24
   28b30:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   28b32:	4c08      	ldr	r4, [pc, #32]	; (28b54 <shell_init+0x6c>)
   28b34:	e7e4      	b.n	28b00 <shell_init+0x18>
   28b36:	bf00      	nop
   28b38:	200026a0 	.word	0x200026a0
   28b3c:	20002504 	.word	0x20002504
   28b40:	200026c8 	.word	0x200026c8
   28b44:	00028ab1 	.word	0x00028ab1
   28b48:	20009be0 	.word	0x20009be0
   28b4c:	200026cc 	.word	0x200026cc
   28b50:	00028891 	.word	0x00028891
   28b54:	00030afc 	.word	0x00030afc

00028b58 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28b58:	4b0e      	ldr	r3, [pc, #56]	; (28b94 <ftpan_32+0x3c>)
   28b5a:	781b      	ldrb	r3, [r3, #0]
   28b5c:	2b06      	cmp	r3, #6
   28b5e:	d001      	beq.n	28b64 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   28b60:	2000      	movs	r0, #0
   28b62:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   28b64:	4b0c      	ldr	r3, [pc, #48]	; (28b98 <ftpan_32+0x40>)
   28b66:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28b68:	f013 0f0f 	tst.w	r3, #15
   28b6c:	d10e      	bne.n	28b8c <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28b6e:	4b0b      	ldr	r3, [pc, #44]	; (28b9c <ftpan_32+0x44>)
   28b70:	681b      	ldr	r3, [r3, #0]
   28b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28b76:	2b30      	cmp	r3, #48	; 0x30
   28b78:	d001      	beq.n	28b7e <ftpan_32+0x26>
	return false;
   28b7a:	2000      	movs	r0, #0
   28b7c:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   28b7e:	4b08      	ldr	r3, [pc, #32]	; (28ba0 <ftpan_32+0x48>)
   28b80:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28b82:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   28b86:	d003      	beq.n	28b90 <ftpan_32+0x38>
	return false;
   28b88:	2000      	movs	r0, #0
   28b8a:	4770      	bx	lr
   28b8c:	2000      	movs	r0, #0
   28b8e:	4770      	bx	lr
			return true;
   28b90:	2001      	movs	r0, #1
}
   28b92:	4770      	bx	lr
   28b94:	f0000fe0 	.word	0xf0000fe0
   28b98:	f0000fe4 	.word	0xf0000fe4
   28b9c:	f0000fe8 	.word	0xf0000fe8
   28ba0:	f0000fec 	.word	0xf0000fec

00028ba4 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28ba4:	4b0e      	ldr	r3, [pc, #56]	; (28be0 <ftpan_37+0x3c>)
   28ba6:	781b      	ldrb	r3, [r3, #0]
   28ba8:	2b06      	cmp	r3, #6
   28baa:	d001      	beq.n	28bb0 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   28bac:	2000      	movs	r0, #0
   28bae:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   28bb0:	4b0c      	ldr	r3, [pc, #48]	; (28be4 <ftpan_37+0x40>)
   28bb2:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28bb4:	f013 0f0f 	tst.w	r3, #15
   28bb8:	d10e      	bne.n	28bd8 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28bba:	4b0b      	ldr	r3, [pc, #44]	; (28be8 <ftpan_37+0x44>)
   28bbc:	681b      	ldr	r3, [r3, #0]
   28bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28bc2:	2b30      	cmp	r3, #48	; 0x30
   28bc4:	d001      	beq.n	28bca <ftpan_37+0x26>
	return false;
   28bc6:	2000      	movs	r0, #0
   28bc8:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   28bca:	4b08      	ldr	r3, [pc, #32]	; (28bec <ftpan_37+0x48>)
   28bcc:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28bce:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   28bd2:	d003      	beq.n	28bdc <ftpan_37+0x38>
	return false;
   28bd4:	2000      	movs	r0, #0
   28bd6:	4770      	bx	lr
   28bd8:	2000      	movs	r0, #0
   28bda:	4770      	bx	lr
			return true;
   28bdc:	2001      	movs	r0, #1
}
   28bde:	4770      	bx	lr
   28be0:	f0000fe0 	.word	0xf0000fe0
   28be4:	f0000fe4 	.word	0xf0000fe4
   28be8:	f0000fe8 	.word	0xf0000fe8
   28bec:	f0000fec 	.word	0xf0000fec

00028bf0 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28bf0:	4b0e      	ldr	r3, [pc, #56]	; (28c2c <ftpan_36+0x3c>)
   28bf2:	781b      	ldrb	r3, [r3, #0]
   28bf4:	2b06      	cmp	r3, #6
   28bf6:	d001      	beq.n	28bfc <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   28bf8:	2000      	movs	r0, #0
   28bfa:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   28bfc:	4b0c      	ldr	r3, [pc, #48]	; (28c30 <ftpan_36+0x40>)
   28bfe:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28c00:	f013 0f0f 	tst.w	r3, #15
   28c04:	d10e      	bne.n	28c24 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28c06:	4b0b      	ldr	r3, [pc, #44]	; (28c34 <ftpan_36+0x44>)
   28c08:	681b      	ldr	r3, [r3, #0]
   28c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28c0e:	2b30      	cmp	r3, #48	; 0x30
   28c10:	d001      	beq.n	28c16 <ftpan_36+0x26>
	return false;
   28c12:	2000      	movs	r0, #0
   28c14:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   28c16:	4b08      	ldr	r3, [pc, #32]	; (28c38 <ftpan_36+0x48>)
   28c18:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   28c1a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   28c1e:	d003      	beq.n	28c28 <ftpan_36+0x38>
	return false;
   28c20:	2000      	movs	r0, #0
   28c22:	4770      	bx	lr
   28c24:	2000      	movs	r0, #0
   28c26:	4770      	bx	lr
			return true;
   28c28:	2001      	movs	r0, #1
}
   28c2a:	4770      	bx	lr
   28c2c:	f0000fe0 	.word	0xf0000fe0
   28c30:	f0000fe4 	.word	0xf0000fe4
   28c34:	f0000fe8 	.word	0xf0000fe8
   28c38:	f0000fec 	.word	0xf0000fec

00028c3c <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28c3c:	4b0f      	ldr	r3, [pc, #60]	; (28c7c <errata_136_nrf52832+0x40>)
   28c3e:	781b      	ldrb	r3, [r3, #0]
   28c40:	2b06      	cmp	r3, #6
   28c42:	d001      	beq.n	28c48 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   28c44:	2000      	movs	r0, #0
   28c46:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   28c48:	4b0d      	ldr	r3, [pc, #52]	; (28c80 <errata_136_nrf52832+0x44>)
   28c4a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   28c4c:	f013 0f0f 	tst.w	r3, #15
   28c50:	d10b      	bne.n	28c6a <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   28c52:	4b0c      	ldr	r3, [pc, #48]	; (28c84 <errata_136_nrf52832+0x48>)
   28c54:	681b      	ldr	r3, [r3, #0]
   28c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   28c5a:	2b30      	cmp	r3, #48	; 0x30
   28c5c:	d007      	beq.n	28c6e <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   28c5e:	2b40      	cmp	r3, #64	; 0x40
   28c60:	d007      	beq.n	28c72 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   28c62:	2b50      	cmp	r3, #80	; 0x50
   28c64:	d007      	beq.n	28c76 <errata_136_nrf52832+0x3a>
	return false;
   28c66:	2000      	movs	r0, #0
   28c68:	4770      	bx	lr
   28c6a:	2000      	movs	r0, #0
   28c6c:	4770      	bx	lr
			return true;
   28c6e:	2001      	movs	r0, #1
   28c70:	4770      	bx	lr
			return true;
   28c72:	2001      	movs	r0, #1
   28c74:	4770      	bx	lr
			return true;
   28c76:	2001      	movs	r0, #1
}
   28c78:	4770      	bx	lr
   28c7a:	bf00      	nop
   28c7c:	f0000fe0 	.word	0xf0000fe0
   28c80:	f0000fe4 	.word	0xf0000fe4
   28c84:	f0000fe8 	.word	0xf0000fe8

00028c88 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   28c88:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   28c8a:	f7ff ff65 	bl	28b58 <ftpan_32>
   28c8e:	b120      	cbz	r0, 28c9a <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   28c90:	4a32      	ldr	r2, [pc, #200]	; (28d5c <nordicsemi_nrf52832_init+0xd4>)
   28c92:	68d3      	ldr	r3, [r2, #12]
   28c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   28c98:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   28c9a:	f7ff ff83 	bl	28ba4 <ftpan_37>
   28c9e:	b110      	cbz	r0, 28ca6 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   28ca0:	2203      	movs	r2, #3
   28ca2:	4b2f      	ldr	r3, [pc, #188]	; (28d60 <nordicsemi_nrf52832_init+0xd8>)
   28ca4:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   28ca6:	f7ff ffa3 	bl	28bf0 <ftpan_36>
   28caa:	b130      	cbz	r0, 28cba <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   28cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28cb0:	2200      	movs	r2, #0
   28cb2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   28cb6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   28cba:	f7ff ffbf 	bl	28c3c <errata_136_nrf52832>
   28cbe:	b160      	cbz	r0, 28cda <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   28cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28cc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   28cc8:	f013 0f01 	tst.w	r3, #1
   28ccc:	d005      	beq.n	28cda <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   28cce:	f06f 0201 	mvn.w	r2, #1
   28cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28cd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   28cda:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   28cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   28ce2:	2b00      	cmp	r3, #0
   28ce4:	db06      	blt.n	28cf4 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   28ce6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   28cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   28cee:	2b00      	cmp	r3, #0
   28cf0:	db00      	blt.n	28cf4 <nordicsemi_nrf52832_init+0x6c>
   28cf2:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   28cf4:	2201      	movs	r2, #1
   28cf6:	4b1b      	ldr	r3, [pc, #108]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28cf8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   28cfc:	4b19      	ldr	r3, [pc, #100]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28cfe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   28d02:	2b00      	cmp	r3, #0
   28d04:	d0fa      	beq.n	28cfc <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   28d06:	2215      	movs	r2, #21
   28d08:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   28d0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   28d10:	4b14      	ldr	r3, [pc, #80]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28d12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   28d16:	2b00      	cmp	r3, #0
   28d18:	d0fa      	beq.n	28d10 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   28d1a:	2215      	movs	r2, #21
   28d1c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   28d20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   28d24:	4b0f      	ldr	r3, [pc, #60]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28d26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   28d2a:	2b00      	cmp	r3, #0
   28d2c:	d0fa      	beq.n	28d24 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   28d2e:	2200      	movs	r2, #0
   28d30:	4b0c      	ldr	r3, [pc, #48]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28d32:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   28d36:	4b0b      	ldr	r3, [pc, #44]	; (28d64 <nordicsemi_nrf52832_init+0xdc>)
   28d38:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   28d3c:	2b00      	cmp	r3, #0
   28d3e:	d0fa      	beq.n	28d36 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   28d40:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   28d44:	4908      	ldr	r1, [pc, #32]	; (28d68 <nordicsemi_nrf52832_init+0xe0>)
   28d46:	68ca      	ldr	r2, [r1, #12]
   28d48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   28d4c:	4b07      	ldr	r3, [pc, #28]	; (28d6c <nordicsemi_nrf52832_init+0xe4>)
   28d4e:	4313      	orrs	r3, r2
   28d50:	60cb      	str	r3, [r1, #12]
   28d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   28d56:	bf00      	nop
   28d58:	e7fd      	b.n	28d56 <nordicsemi_nrf52832_init+0xce>
   28d5a:	bf00      	nop
   28d5c:	e000edf0 	.word	0xe000edf0
   28d60:	400005a0 	.word	0x400005a0
   28d64:	4001e000 	.word	0x4001e000
   28d68:	e000ed00 	.word	0xe000ed00
   28d6c:	05fa0004 	.word	0x05fa0004

00028d70 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   28d70:	4a01      	ldr	r2, [pc, #4]	; (28d78 <clock_init+0x8>)
   28d72:	4b02      	ldr	r3, [pc, #8]	; (28d7c <clock_init+0xc>)
   28d74:	601a      	str	r2, [r3, #0]
   28d76:	4770      	bx	lr
   28d78:	03d09000 	.word	0x03d09000
   28d7c:	2000c5c4 	.word	0x2000c5c4

00028d80 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   28d80:	b510      	push	{r4, lr}
	__asm__ volatile(
   28d82:	f04f 0320 	mov.w	r3, #32
   28d86:	f3ef 8411 	mrs	r4, BASEPRI
   28d8a:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   28d8e:	f7ff ff7b 	bl	28c88 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   28d92:	4b05      	ldr	r3, [pc, #20]	; (28da8 <nordicsemi_nrf52_init+0x28>)
   28d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28d98:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   28d9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   28d9c:	f7ff ffe8 	bl	28d70 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28da0:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   28da4:	2000      	movs	r0, #0
   28da6:	bd10      	pop	{r4, pc}
   28da8:	e000ed00 	.word	0xe000ed00

00028dac <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   28dac:	4808      	ldr	r0, [pc, #32]	; (28dd0 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   28dae:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   28db0:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   28db2:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   28db4:	d80b      	bhi.n	28dce <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   28db6:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   28db8:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   28dba:	d008      	beq.n	28dce <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   28dbc:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   28dbe:	f001 fd1f 	bl	2a800 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   28dc2:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   28dc6:	4903      	ldr	r1, [pc, #12]	; (28dd4 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   28dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   28dcc:	600a      	str	r2, [r1, #0]

00028dce <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   28dce:	4770      	bx	lr
    ldr r0, =_kernel
   28dd0:	20002808 	.word	0x20002808
    ldr r1, =_SCS_ICSR
   28dd4:	e000ed04 	.word	0xe000ed04

00028dd8 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   28dd8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   28dda:	e00a      	b.n	28df2 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   28ddc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   28dde:	2b00      	cmp	r3, #0
   28de0:	db0a      	blt.n	28df8 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28de2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   28de6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   28dea:	2120      	movs	r1, #32
   28dec:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   28df0:	3201      	adds	r2, #1
   28df2:	2a26      	cmp	r2, #38	; 0x26
   28df4:	ddf2      	ble.n	28ddc <_IntLibInit+0x4>
	}
}
   28df6:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28df8:	f002 010f 	and.w	r1, r2, #15
   28dfc:	4b02      	ldr	r3, [pc, #8]	; (28e08 <_IntLibInit+0x30>)
   28dfe:	440b      	add	r3, r1
   28e00:	2120      	movs	r1, #32
   28e02:	7619      	strb	r1, [r3, #24]
   28e04:	e7f4      	b.n	28df0 <_IntLibInit+0x18>
   28e06:	bf00      	nop
   28e08:	e000ecfc 	.word	0xe000ecfc

00028e0c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   28e0c:	490e      	ldr	r1, [pc, #56]	; (28e48 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   28e0e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   28e10:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   28e14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   28e16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   28e1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   28e1e:	4f0b      	ldr	r7, [pc, #44]	; (28e4c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   28e20:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   28e24:	2020      	movs	r0, #32
    msr BASEPRI, r0
   28e26:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   28e2a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   28e2c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   28e2e:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   28e30:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   28e32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   28e34:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   28e36:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   28e3a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   28e3e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   28e42:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   28e46:	4770      	bx	lr
    ldr r1, =_kernel
   28e48:	20002808 	.word	0x20002808
    ldr v4, =_SCS_ICSR
   28e4c:	e000ed04 	.word	0xe000ed04

00028e50 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   28e50:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   28e54:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   28e56:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   28e5a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   28e5e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   28e60:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   28e64:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   28e68:	d001      	beq.n	28e6e <_context_switch>

    cmp r1, #2
   28e6a:	2902      	cmp	r1, #2
    beq _oops
   28e6c:	d007      	beq.n	28e7e <_oops>

00028e6e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   28e6e:	4040      	eors	r0, r0
    msr BASEPRI, r0
   28e70:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   28e74:	4904      	ldr	r1, [pc, #16]	; (28e88 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   28e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   28e7a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   28e7c:	4770      	bx	lr

00028e7e <_oops>:

_oops:
    push {lr}
   28e7e:	b500      	push	{lr}
    blx _do_kernel_oops
   28e80:	f000 fa82 	bl	29388 <_do_kernel_oops>
    pop {pc}
   28e84:	bd00      	pop	{pc}
   28e86:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   28e88:	e000ed04 	.word	0xe000ed04

00028e8c <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   28e8c:	4904      	ldr	r1, [pc, #16]	; (28ea0 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   28e8e:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   28e90:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   28e92:	4904      	ldr	r1, [pc, #16]	; (28ea4 <__swap+0x18>)
    ldr r1, [r1]
   28e94:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   28e96:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   28e98:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   28e9a:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   28e9c:	4770      	bx	lr
   28e9e:	0000      	.short	0x0000
    ldr r1, =_kernel
   28ea0:	20002808 	.word	0x20002808
    ldr r1, =_k_neg_eagain
   28ea4:	00034c00 	.word	0x00034c00

00028ea8 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   28ea8:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   28eaa:	4802      	ldr	r0, [pc, #8]	; (28eb4 <_DebugMonitor+0xc>)
   28eac:	f7da f970 	bl	3190 <printk>
   28eb0:	bd08      	pop	{r3, pc}
   28eb2:	bf00      	nop
   28eb4:	0003483c 	.word	0x0003483c

00028eb8 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   28eb8:	b508      	push	{r3, lr}
   28eba:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   28ebc:	290f      	cmp	r1, #15
   28ebe:	dd05      	ble.n	28ecc <_ReservedException+0x14>
   28ec0:	4903      	ldr	r1, [pc, #12]	; (28ed0 <_ReservedException+0x18>)
   28ec2:	3a10      	subs	r2, #16
   28ec4:	4803      	ldr	r0, [pc, #12]	; (28ed4 <_ReservedException+0x1c>)
   28ec6:	f7da f963 	bl	3190 <printk>
   28eca:	bd08      	pop	{r3, pc}
   28ecc:	4902      	ldr	r1, [pc, #8]	; (28ed8 <_ReservedException+0x20>)
   28ece:	e7f8      	b.n	28ec2 <_ReservedException+0xa>
   28ed0:	000349c4 	.word	0x000349c4
   28ed4:	000349e0 	.word	0x000349e0
   28ed8:	000349ac 	.word	0x000349ac

00028edc <_FaultThreadShow>:
{
   28edc:	b510      	push	{r4, lr}
   28ede:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   28ee0:	f001 fc60 	bl	2a7a4 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   28ee4:	69a2      	ldr	r2, [r4, #24]
   28ee6:	4601      	mov	r1, r0
   28ee8:	4801      	ldr	r0, [pc, #4]	; (28ef0 <_FaultThreadShow+0x14>)
   28eea:	f7da f951 	bl	3190 <printk>
   28eee:	bd10      	pop	{r4, pc}
   28ef0:	00034874 	.word	0x00034874

00028ef4 <_MpuFault>:
{
   28ef4:	b538      	push	{r3, r4, r5, lr}
   28ef6:	4604      	mov	r4, r0
   28ef8:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   28efa:	481e      	ldr	r0, [pc, #120]	; (28f74 <_MpuFault+0x80>)
   28efc:	f7da f948 	bl	3190 <printk>
	_FaultThreadShow(esf);
   28f00:	4620      	mov	r0, r4
   28f02:	f7ff ffeb 	bl	28edc <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   28f06:	4b1c      	ldr	r3, [pc, #112]	; (28f78 <_MpuFault+0x84>)
   28f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f0a:	f013 0f10 	tst.w	r3, #16
   28f0e:	d10f      	bne.n	28f30 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   28f10:	4b19      	ldr	r3, [pc, #100]	; (28f78 <_MpuFault+0x84>)
   28f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f14:	f013 0f08 	tst.w	r3, #8
   28f18:	d10e      	bne.n	28f38 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   28f1a:	4b17      	ldr	r3, [pc, #92]	; (28f78 <_MpuFault+0x84>)
   28f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f1e:	f013 0f02 	tst.w	r3, #2
   28f22:	d10d      	bne.n	28f40 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   28f24:	4b14      	ldr	r3, [pc, #80]	; (28f78 <_MpuFault+0x84>)
   28f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f28:	f013 0f01 	tst.w	r3, #1
   28f2c:	d11d      	bne.n	28f6a <_MpuFault+0x76>
   28f2e:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   28f30:	4812      	ldr	r0, [pc, #72]	; (28f7c <_MpuFault+0x88>)
   28f32:	f7da f92d 	bl	3190 <printk>
   28f36:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   28f38:	4811      	ldr	r0, [pc, #68]	; (28f80 <_MpuFault+0x8c>)
   28f3a:	f7da f929 	bl	3190 <printk>
   28f3e:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   28f40:	4810      	ldr	r0, [pc, #64]	; (28f84 <_MpuFault+0x90>)
   28f42:	f7da f925 	bl	3190 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   28f46:	4b0c      	ldr	r3, [pc, #48]	; (28f78 <_MpuFault+0x84>)
   28f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28f4a:	f013 0f80 	tst.w	r3, #128	; 0x80
   28f4e:	d0ee      	beq.n	28f2e <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   28f50:	4b09      	ldr	r3, [pc, #36]	; (28f78 <_MpuFault+0x84>)
   28f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
   28f54:	480c      	ldr	r0, [pc, #48]	; (28f88 <_MpuFault+0x94>)
   28f56:	f7da f91b 	bl	3190 <printk>
			if (fromHardFault) {
   28f5a:	2d00      	cmp	r5, #0
   28f5c:	d0e7      	beq.n	28f2e <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   28f5e:	4a06      	ldr	r2, [pc, #24]	; (28f78 <_MpuFault+0x84>)
   28f60:	6a93      	ldr	r3, [r2, #40]	; 0x28
   28f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   28f66:	6293      	str	r3, [r2, #40]	; 0x28
   28f68:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   28f6a:	4808      	ldr	r0, [pc, #32]	; (28f8c <_MpuFault+0x98>)
   28f6c:	f7da f910 	bl	3190 <printk>
}
   28f70:	e7dd      	b.n	28f2e <_MpuFault+0x3a>
   28f72:	bf00      	nop
   28f74:	0003491c 	.word	0x0003491c
   28f78:	e000ed00 	.word	0xe000ed00
   28f7c:	00034934 	.word	0x00034934
   28f80:	00034948 	.word	0x00034948
   28f84:	0003495c 	.word	0x0003495c
   28f88:	00034978 	.word	0x00034978
   28f8c:	0003498c 	.word	0x0003498c

00028f90 <_BusFault>:
{
   28f90:	b538      	push	{r3, r4, r5, lr}
   28f92:	4604      	mov	r4, r0
   28f94:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   28f96:	4827      	ldr	r0, [pc, #156]	; (29034 <_BusFault+0xa4>)
   28f98:	f7da f8fa 	bl	3190 <printk>
	_FaultThreadShow(esf);
   28f9c:	4620      	mov	r0, r4
   28f9e:	f7ff ff9d 	bl	28edc <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   28fa2:	4b25      	ldr	r3, [pc, #148]	; (29038 <_BusFault+0xa8>)
   28fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fa6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   28faa:	d114      	bne.n	28fd6 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   28fac:	4b22      	ldr	r3, [pc, #136]	; (29038 <_BusFault+0xa8>)
   28fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fb0:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28fb4:	d113      	bne.n	28fde <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   28fb6:	4b20      	ldr	r3, [pc, #128]	; (29038 <_BusFault+0xa8>)
   28fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fba:	f413 7f00 	tst.w	r3, #512	; 0x200
   28fbe:	d112      	bne.n	28fe6 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   28fc0:	4b1d      	ldr	r3, [pc, #116]	; (29038 <_BusFault+0xa8>)
   28fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fc4:	f413 6f80 	tst.w	r3, #1024	; 0x400
   28fc8:	d12b      	bne.n	29022 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   28fca:	4b1b      	ldr	r3, [pc, #108]	; (29038 <_BusFault+0xa8>)
   28fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28fce:	f413 7f80 	tst.w	r3, #256	; 0x100
   28fd2:	d12a      	bne.n	2902a <_BusFault+0x9a>
   28fd4:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   28fd6:	4819      	ldr	r0, [pc, #100]	; (2903c <_BusFault+0xac>)
   28fd8:	f7da f8da 	bl	3190 <printk>
   28fdc:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   28fde:	4818      	ldr	r0, [pc, #96]	; (29040 <_BusFault+0xb0>)
   28fe0:	f7da f8d6 	bl	3190 <printk>
   28fe4:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   28fe6:	4817      	ldr	r0, [pc, #92]	; (29044 <_BusFault+0xb4>)
   28fe8:	f7da f8d2 	bl	3190 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   28fec:	4b12      	ldr	r3, [pc, #72]	; (29038 <_BusFault+0xa8>)
   28fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ff0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   28ff4:	d108      	bne.n	29008 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   28ff6:	4b10      	ldr	r3, [pc, #64]	; (29038 <_BusFault+0xa8>)
   28ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28ffa:	f413 6f80 	tst.w	r3, #1024	; 0x400
   28ffe:	d0e9      	beq.n	28fd4 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   29000:	4811      	ldr	r0, [pc, #68]	; (29048 <_BusFault+0xb8>)
   29002:	f7da f8c5 	bl	3190 <printk>
   29006:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   29008:	4b0b      	ldr	r3, [pc, #44]	; (29038 <_BusFault+0xa8>)
   2900a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   2900c:	480f      	ldr	r0, [pc, #60]	; (2904c <_BusFault+0xbc>)
   2900e:	f7da f8bf 	bl	3190 <printk>
			if (fromHardFault) {
   29012:	2d00      	cmp	r5, #0
   29014:	d0ef      	beq.n	28ff6 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   29016:	4a08      	ldr	r2, [pc, #32]	; (29038 <_BusFault+0xa8>)
   29018:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2901a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2901e:	6293      	str	r3, [r2, #40]	; 0x28
   29020:	e7e9      	b.n	28ff6 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   29022:	4809      	ldr	r0, [pc, #36]	; (29048 <_BusFault+0xb8>)
   29024:	f7da f8b4 	bl	3190 <printk>
   29028:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   2902a:	4809      	ldr	r0, [pc, #36]	; (29050 <_BusFault+0xc0>)
   2902c:	f7da f8b0 	bl	3190 <printk>
}
   29030:	e7d0      	b.n	28fd4 <_BusFault+0x44>
   29032:	bf00      	nop
   29034:	000347d0 	.word	0x000347d0
   29038:	e000ed00 	.word	0xe000ed00
   2903c:	00034934 	.word	0x00034934
   29040:	00034948 	.word	0x00034948
   29044:	000347e8 	.word	0x000347e8
   29048:	00034804 	.word	0x00034804
   2904c:	00034978 	.word	0x00034978
   29050:	00034820 	.word	0x00034820

00029054 <_UsageFault>:
{
   29054:	b510      	push	{r4, lr}
   29056:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   29058:	4821      	ldr	r0, [pc, #132]	; (290e0 <_UsageFault+0x8c>)
   2905a:	f7da f899 	bl	3190 <printk>
	_FaultThreadShow(esf);
   2905e:	4620      	mov	r0, r4
   29060:	f7ff ff3c 	bl	28edc <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   29064:	4b1f      	ldr	r3, [pc, #124]	; (290e4 <_UsageFault+0x90>)
   29066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29068:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   2906c:	d120      	bne.n	290b0 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   2906e:	4b1d      	ldr	r3, [pc, #116]	; (290e4 <_UsageFault+0x90>)
   29070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29072:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   29076:	d11f      	bne.n	290b8 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   29078:	4b1a      	ldr	r3, [pc, #104]	; (290e4 <_UsageFault+0x90>)
   2907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2907c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   29080:	d11e      	bne.n	290c0 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   29082:	4b18      	ldr	r3, [pc, #96]	; (290e4 <_UsageFault+0x90>)
   29084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29086:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2908a:	d11d      	bne.n	290c8 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   2908c:	4b15      	ldr	r3, [pc, #84]	; (290e4 <_UsageFault+0x90>)
   2908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29090:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   29094:	d11c      	bne.n	290d0 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   29096:	4b13      	ldr	r3, [pc, #76]	; (290e4 <_UsageFault+0x90>)
   29098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2909a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2909e:	d11b      	bne.n	290d8 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   290a0:	4a10      	ldr	r2, [pc, #64]	; (290e4 <_UsageFault+0x90>)
   290a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   290a4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   290a8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   290ac:	6293      	str	r3, [r2, #40]	; 0x28
   290ae:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   290b0:	480d      	ldr	r0, [pc, #52]	; (290e8 <_UsageFault+0x94>)
   290b2:	f7da f86d 	bl	3190 <printk>
   290b6:	e7da      	b.n	2906e <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   290b8:	480c      	ldr	r0, [pc, #48]	; (290ec <_UsageFault+0x98>)
   290ba:	f7da f869 	bl	3190 <printk>
   290be:	e7db      	b.n	29078 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   290c0:	480b      	ldr	r0, [pc, #44]	; (290f0 <_UsageFault+0x9c>)
   290c2:	f7da f865 	bl	3190 <printk>
   290c6:	e7dc      	b.n	29082 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   290c8:	480a      	ldr	r0, [pc, #40]	; (290f4 <_UsageFault+0xa0>)
   290ca:	f7da f861 	bl	3190 <printk>
   290ce:	e7dd      	b.n	2908c <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   290d0:	4809      	ldr	r0, [pc, #36]	; (290f8 <_UsageFault+0xa4>)
   290d2:	f7da f85d 	bl	3190 <printk>
   290d6:	e7de      	b.n	29096 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   290d8:	4808      	ldr	r0, [pc, #32]	; (290fc <_UsageFault+0xa8>)
   290da:	f7da f859 	bl	3190 <printk>
   290de:	e7df      	b.n	290a0 <_UsageFault+0x4c>
   290e0:	000349f4 	.word	0x000349f4
   290e4:	e000ed00 	.word	0xe000ed00
   290e8:	00034a10 	.word	0x00034a10
   290ec:	00034a24 	.word	0x00034a24
   290f0:	00034a40 	.word	0x00034a40
   290f4:	00034a60 	.word	0x00034a60
   290f8:	00034a88 	.word	0x00034a88
   290fc:	00034aa4 	.word	0x00034aa4

00029100 <_HardFault>:
{
   29100:	b510      	push	{r4, lr}
   29102:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   29104:	4816      	ldr	r0, [pc, #88]	; (29160 <_HardFault+0x60>)
   29106:	f7da f843 	bl	3190 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   2910a:	4b16      	ldr	r3, [pc, #88]	; (29164 <_HardFault+0x64>)
   2910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2910e:	f013 0f02 	tst.w	r3, #2
   29112:	d105      	bne.n	29120 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   29114:	4b13      	ldr	r3, [pc, #76]	; (29164 <_HardFault+0x64>)
   29116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29118:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2911c:	d104      	bne.n	29128 <_HardFault+0x28>
   2911e:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   29120:	4811      	ldr	r0, [pc, #68]	; (29168 <_HardFault+0x68>)
   29122:	f7da f835 	bl	3190 <printk>
   29126:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   29128:	4810      	ldr	r0, [pc, #64]	; (2916c <_HardFault+0x6c>)
   2912a:	f7da f831 	bl	3190 <printk>
		if (SCB_MMFSR) {
   2912e:	4b10      	ldr	r3, [pc, #64]	; (29170 <_HardFault+0x70>)
   29130:	781b      	ldrb	r3, [r3, #0]
   29132:	b95b      	cbnz	r3, 2914c <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   29134:	4b0f      	ldr	r3, [pc, #60]	; (29174 <_HardFault+0x74>)
   29136:	781b      	ldrb	r3, [r3, #0]
   29138:	b96b      	cbnz	r3, 29156 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   2913a:	4b0f      	ldr	r3, [pc, #60]	; (29178 <_HardFault+0x78>)
   2913c:	881b      	ldrh	r3, [r3, #0]
   2913e:	b29b      	uxth	r3, r3
   29140:	2b00      	cmp	r3, #0
   29142:	d0ec      	beq.n	2911e <_HardFault+0x1e>
			_UsageFault(esf);
   29144:	4620      	mov	r0, r4
   29146:	f7ff ff85 	bl	29054 <_UsageFault>
}
   2914a:	e7e8      	b.n	2911e <_HardFault+0x1e>
			_MpuFault(esf, 1);
   2914c:	2101      	movs	r1, #1
   2914e:	4620      	mov	r0, r4
   29150:	f7ff fed0 	bl	28ef4 <_MpuFault>
   29154:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   29156:	2101      	movs	r1, #1
   29158:	4620      	mov	r0, r4
   2915a:	f7ff ff19 	bl	28f90 <_BusFault>
   2915e:	bd10      	pop	{r4, pc}
   29160:	000348c0 	.word	0x000348c0
   29164:	e000ed00 	.word	0xe000ed00
   29168:	000348d8 	.word	0x000348d8
   2916c:	000348fc 	.word	0x000348fc
   29170:	e000ed28 	.word	0xe000ed28
   29174:	e000ed29 	.word	0xe000ed29
   29178:	e000ed2c 	.word	0xe000ed2c

0002917c <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   2917c:	b508      	push	{r3, lr}
	switch (fault) {
   2917e:	1ecb      	subs	r3, r1, #3
   29180:	2b09      	cmp	r3, #9
   29182:	d817      	bhi.n	291b4 <_FaultDump+0x38>
   29184:	e8df f003 	tbb	[pc, r3]
   29188:	100c0805 	.word	0x100c0805
   2918c:	16161616 	.word	0x16161616
   29190:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   29192:	f7ff ffb5 	bl	29100 <_HardFault>
		break;
   29196:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   29198:	2100      	movs	r1, #0
   2919a:	f7ff feab 	bl	28ef4 <_MpuFault>
		break;
   2919e:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   291a0:	2100      	movs	r1, #0
   291a2:	f7ff fef5 	bl	28f90 <_BusFault>
		break;
   291a6:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   291a8:	f7ff ff54 	bl	29054 <_UsageFault>
		break;
   291ac:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   291ae:	f7ff fe7b 	bl	28ea8 <_DebugMonitor>
		break;
   291b2:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   291b4:	f7ff fe80 	bl	28eb8 <_ReservedException>
   291b8:	bd08      	pop	{r3, pc}
	...

000291bc <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   291bc:	b510      	push	{r4, lr}
   291be:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   291c0:	4b05      	ldr	r3, [pc, #20]	; (291d8 <_Fault+0x1c>)
   291c2:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   291c4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   291c8:	f7ff ffd8 	bl	2917c <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   291cc:	4621      	mov	r1, r4
   291ce:	2000      	movs	r0, #0
   291d0:	f000 f8e0 	bl	29394 <_SysFatalErrorHandler>
   291d4:	bd10      	pop	{r4, pc}
   291d6:	bf00      	nop
   291d8:	e000ed00 	.word	0xe000ed00

000291dc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   291dc:	4a02      	ldr	r2, [pc, #8]	; (291e8 <_FaultInit+0xc>)
   291de:	6953      	ldr	r3, [r2, #20]
   291e0:	f043 0310 	orr.w	r3, r3, #16
   291e4:	6153      	str	r3, [r2, #20]
   291e6:	4770      	bx	lr
   291e8:	e000ed00 	.word	0xe000ed00

000291ec <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   291ec:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   291ee:	095b      	lsrs	r3, r3, #5
   291f0:	f000 001f 	and.w	r0, r0, #31
   291f4:	2201      	movs	r2, #1
   291f6:	fa02 f000 	lsl.w	r0, r2, r0
   291fa:	4a02      	ldr	r2, [pc, #8]	; (29204 <_arch_irq_enable+0x18>)
   291fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   29200:	4770      	bx	lr
   29202:	bf00      	nop
   29204:	e000e100 	.word	0xe000e100

00029208 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   29208:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   2920a:	095b      	lsrs	r3, r3, #5
   2920c:	f000 001f 	and.w	r0, r0, #31
   29210:	2201      	movs	r2, #1
   29212:	fa02 f000 	lsl.w	r0, r2, r0
   29216:	3320      	adds	r3, #32
   29218:	4a01      	ldr	r2, [pc, #4]	; (29220 <_arch_irq_disable+0x18>)
   2921a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   2921e:	4770      	bx	lr
   29220:	e000e100 	.word	0xe000e100

00029224 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   29224:	0942      	lsrs	r2, r0, #5
   29226:	4b05      	ldr	r3, [pc, #20]	; (2923c <_arch_irq_is_enabled+0x18>)
   29228:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2922c:	f000 001f 	and.w	r0, r0, #31
   29230:	2301      	movs	r3, #1
   29232:	fa03 f000 	lsl.w	r0, r3, r0
}
   29236:	4010      	ands	r0, r2
   29238:	4770      	bx	lr
   2923a:	bf00      	nop
   2923c:	e000e100 	.word	0xe000e100

00029240 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   29240:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   29242:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   29244:	2b00      	cmp	r3, #0
   29246:	db08      	blt.n	2925a <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29248:	0149      	lsls	r1, r1, #5
   2924a:	b2c9      	uxtb	r1, r1
   2924c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   29250:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   29254:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   29258:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2925a:	f000 000f 	and.w	r0, r0, #15
   2925e:	0149      	lsls	r1, r1, #5
   29260:	b2c9      	uxtb	r1, r1
   29262:	4b01      	ldr	r3, [pc, #4]	; (29268 <_irq_priority_set+0x28>)
   29264:	5419      	strb	r1, [r3, r0]
   29266:	4770      	bx	lr
   29268:	e000ed14 	.word	0xe000ed14

0002926c <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   2926c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   2926e:	f000 f847 	bl	29300 <__bus_fault>
   29272:	bd08      	pop	{r3, pc}

00029274 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   29274:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   29276:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   29278:	4b04      	ldr	r3, [pc, #16]	; (2928c <_arch_isr_direct_pm+0x18>)
   2927a:	6958      	ldr	r0, [r3, #20]
   2927c:	b908      	cbnz	r0, 29282 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   2927e:	b662      	cpsie	i
   29280:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   29282:	2200      	movs	r2, #0
   29284:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   29286:	f000 f9b5 	bl	295f4 <_sys_power_save_idle_exit>
   2928a:	e7f8      	b.n	2927e <_arch_isr_direct_pm+0xa>
   2928c:	20002808 	.word	0x20002808

00029290 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   29290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29292:	4605      	mov	r5, r0
   29294:	460c      	mov	r4, r1
   29296:	4616      	mov	r6, r2
   29298:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   2929a:	21aa      	movs	r1, #170	; 0xaa
   2929c:	4620      	mov	r0, r4
   2929e:	f002 feed 	bl	2c07c <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   292a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   292a4:	2204      	movs	r2, #4
   292a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   292a8:	4628      	mov	r0, r5
   292aa:	f001 ff51 	bl	2b150 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   292ae:	2300      	movs	r3, #0
   292b0:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   292b2:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   292b4:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   292b6:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   292b8:	f1a6 0120 	sub.w	r1, r6, #32
   292bc:	4421      	add	r1, r4
   292be:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   292c2:	4a08      	ldr	r2, [pc, #32]	; (292e4 <_new_thread+0x54>)
   292c4:	f022 0201 	bic.w	r2, r2, #1
   292c8:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   292ca:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   292cc:	9a06      	ldr	r2, [sp, #24]
   292ce:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   292d0:	9a07      	ldr	r2, [sp, #28]
   292d2:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   292d4:	9a08      	ldr	r2, [sp, #32]
   292d6:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   292d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   292dc:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   292de:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   292e0:	662b      	str	r3, [r5, #96]	; 0x60
   292e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   292e4:	0002ae39 	.word	0x0002ae39

000292e8 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   292e8:	4901      	ldr	r1, [pc, #4]	; (292f0 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   292ea:	2210      	movs	r2, #16
	str r2, [r1]
   292ec:	600a      	str	r2, [r1, #0]
	bx lr
   292ee:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   292f0:	e000ed10 	.word	0xe000ed10

000292f4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   292f4:	4040      	eors	r0, r0
	msr BASEPRI, r0
   292f6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   292fa:	bf30      	wfi

	bx lr
   292fc:	4770      	bx	lr
   292fe:	bf00      	nop

00029300 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   29300:	4040      	eors	r0, r0
	msr BASEPRI, r0
   29302:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   29306:	f8df c01c 	ldr.w	ip, [pc, #28]	; 29324 <__bus_fault+0x24>
	ldr ip, [ip]
   2930a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   2930e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   29312:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   29314:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   29318:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   2931c:	b500      	push	{lr}
	bl _Fault
   2931e:	f7ff ff4d 	bl	291bc <_Fault>

	pop {pc}
   29322:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   29324:	e000ed04 	.word	0xe000ed04

00029328 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   29328:	b538      	push	{r3, r4, r5, lr}
   2932a:	4604      	mov	r4, r0
   2932c:	460d      	mov	r5, r1
	switch (reason) {
   2932e:	2804      	cmp	r0, #4
   29330:	d017      	beq.n	29362 <_NanoFatalErrorHandler+0x3a>
   29332:	2805      	cmp	r0, #5
   29334:	d019      	beq.n	2936a <_NanoFatalErrorHandler+0x42>
   29336:	2803      	cmp	r0, #3
   29338:	d004      	beq.n	29344 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   2933a:	4601      	mov	r1, r0
   2933c:	480d      	ldr	r0, [pc, #52]	; (29374 <_NanoFatalErrorHandler+0x4c>)
   2933e:	f7d9 ff27 	bl	3190 <printk>
		break;
   29342:	e002      	b.n	2934a <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   29344:	480c      	ldr	r0, [pc, #48]	; (29378 <_NanoFatalErrorHandler+0x50>)
   29346:	f7d9 ff23 	bl	3190 <printk>
   2934a:	f001 fa2b 	bl	2a7a4 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   2934e:	69aa      	ldr	r2, [r5, #24]
   29350:	4601      	mov	r1, r0
   29352:	480a      	ldr	r0, [pc, #40]	; (2937c <_NanoFatalErrorHandler+0x54>)
   29354:	f7d9 ff1c 	bl	3190 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   29358:	4629      	mov	r1, r5
   2935a:	4620      	mov	r0, r4
   2935c:	f000 f81a 	bl	29394 <_SysFatalErrorHandler>
   29360:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   29362:	4807      	ldr	r0, [pc, #28]	; (29380 <_NanoFatalErrorHandler+0x58>)
   29364:	f7d9 ff14 	bl	3190 <printk>
		break;
   29368:	e7ef      	b.n	2934a <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   2936a:	4806      	ldr	r0, [pc, #24]	; (29384 <_NanoFatalErrorHandler+0x5c>)
   2936c:	f7d9 ff10 	bl	3190 <printk>
		break;
   29370:	e7eb      	b.n	2934a <_NanoFatalErrorHandler+0x22>
   29372:	bf00      	nop
   29374:	00034b30 	.word	0x00034b30
   29378:	00034ad0 	.word	0x00034ad0
   2937c:	00034b54 	.word	0x00034b54
   29380:	00034af8 	.word	0x00034af8
   29384:	00034b14 	.word	0x00034b14

00029388 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   29388:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   2938a:	4601      	mov	r1, r0
   2938c:	6800      	ldr	r0, [r0, #0]
   2938e:	f7ff ffcb 	bl	29328 <_NanoFatalErrorHandler>
   29392:	bd08      	pop	{r3, pc}

00029394 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   29394:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   29396:	2805      	cmp	r0, #5
   29398:	d00c      	beq.n	293b4 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   2939a:	f001 fd31 	bl	2ae00 <k_is_in_isr>
   2939e:	b910      	cbnz	r0, 293a6 <_SysFatalErrorHandler+0x12>
   293a0:	f001 fd42 	bl	2ae28 <_is_thread_essential>
   293a4:	b158      	cbz	r0, 293be <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   293a6:	f001 fd2b 	bl	2ae00 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   293aa:	b130      	cbz	r0, 293ba <_SysFatalErrorHandler+0x26>
   293ac:	4908      	ldr	r1, [pc, #32]	; (293d0 <_SysFatalErrorHandler+0x3c>)
   293ae:	4809      	ldr	r0, [pc, #36]	; (293d4 <_SysFatalErrorHandler+0x40>)
   293b0:	f7d9 feee 	bl	3190 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   293b4:	f7ff ff9e 	bl	292f4 <k_cpu_idle>
   293b8:	e7fc      	b.n	293b4 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   293ba:	4907      	ldr	r1, [pc, #28]	; (293d8 <_SysFatalErrorHandler+0x44>)
   293bc:	e7f7      	b.n	293ae <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   293be:	4c07      	ldr	r4, [pc, #28]	; (293dc <_SysFatalErrorHandler+0x48>)
   293c0:	68a1      	ldr	r1, [r4, #8]
   293c2:	4807      	ldr	r0, [pc, #28]	; (293e0 <_SysFatalErrorHandler+0x4c>)
   293c4:	f7d9 fee4 	bl	3190 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   293c8:	68a0      	ldr	r0, [r4, #8]
   293ca:	f000 f80b 	bl	293e4 <_impl_k_thread_abort>
	return;
   293ce:	bd10      	pop	{r4, pc}
   293d0:	00033fa0 	.word	0x00033fa0
   293d4:	00034ba4 	.word	0x00034ba4
   293d8:	00034b90 	.word	0x00034b90
   293dc:	20002808 	.word	0x20002808
   293e0:	00034bc4 	.word	0x00034bc4

000293e4 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   293e4:	b538      	push	{r3, r4, r5, lr}
   293e6:	4605      	mov	r5, r0
	__asm__ volatile(
   293e8:	f04f 0320 	mov.w	r3, #32
   293ec:	f3ef 8411 	mrs	r4, BASEPRI
   293f0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   293f4:	f001 fe28 	bl	2b048 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   293f8:	4b0b      	ldr	r3, [pc, #44]	; (29428 <_impl_k_thread_abort+0x44>)
   293fa:	689b      	ldr	r3, [r3, #8]
   293fc:	429d      	cmp	r5, r3
   293fe:	d003      	beq.n	29408 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   29400:	4620      	mov	r0, r4
   29402:	f001 fa03 	bl	2a80c <_reschedule_threads>
   29406:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   29408:	4b08      	ldr	r3, [pc, #32]	; (2942c <_impl_k_thread_abort+0x48>)
   2940a:	685b      	ldr	r3, [r3, #4]
   2940c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   29410:	b12b      	cbz	r3, 2941e <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   29412:	4a06      	ldr	r2, [pc, #24]	; (2942c <_impl_k_thread_abort+0x48>)
   29414:	6853      	ldr	r3, [r2, #4]
   29416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2941a:	6053      	str	r3, [r2, #4]
   2941c:	e7f0      	b.n	29400 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   2941e:	f001 f9ef 	bl	2a800 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   29422:	4620      	mov	r0, r4
   29424:	f7ff fd32 	bl	28e8c <__swap>
   29428:	20002808 	.word	0x20002808
   2942c:	e000ed00 	.word	0xe000ed00

00029430 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   29430:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   29432:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   29434:	4a0b      	ldr	r2, [pc, #44]	; (29464 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   29436:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   29438:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   2943a:	bf1e      	ittt	ne
	movne	r1, #0
   2943c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2943e:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   29440:	f000 f8d8 	blne	295f4 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   29444:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   29446:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   2944a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2944e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   29452:	4905      	ldr	r1, [pc, #20]	; (29468 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   29454:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   29456:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   29458:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   2945a:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   2945e:	f7ff bca5 	b.w	28dac <_ExcExit>
   29462:	0000      	.short	0x0000
	ldr r2, =_kernel
   29464:	20002808 	.word	0x20002808
	ldr r1, =_sw_isr_table
   29468:	000000dc 	.word	0x000000dc

0002946c <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2946c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2946e:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   29472:	4809      	ldr	r0, [pc, #36]	; (29498 <__reset+0x2c>)
    ldr r1, =0xaa
   29474:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   29478:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   2947c:	f002 fdfe 	bl	2c07c <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   29480:	4805      	ldr	r0, [pc, #20]	; (29498 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   29482:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   29486:	1840      	adds	r0, r0, r1
    msr PSP, r0
   29488:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   2948c:	2002      	movs	r0, #2
    msr CONTROL, r0
   2948e:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   29492:	f000 b807 	b.w	294a4 <_PrepC>
   29496:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   29498:	2000acf0 	.word	0x2000acf0

0002949c <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   2949c:	bf30      	wfi
    b _SysNmiOnReset
   2949e:	f7ff bffd 	b.w	2949c <_SysNmiOnReset>
   294a2:	bf00      	nop

000294a4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   294a4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   294a6:	4a07      	ldr	r2, [pc, #28]	; (294c4 <_PrepC+0x20>)
   294a8:	4b07      	ldr	r3, [pc, #28]	; (294c8 <_PrepC+0x24>)
   294aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   294ae:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   294b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   294b4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   294b8:	f000 f9d6 	bl	29868 <_bss_zero>
	_data_copy();
   294bc:	f000 f9e0 	bl	29880 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   294c0:	f000 fa00 	bl	298c4 <_Cstart>
   294c4:	e000ed00 	.word	0xe000ed00
   294c8:	00000000 	.word	0x00000000

000294cc <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   294cc:	b508      	push	{r3, lr}
	handler();
   294ce:	f7ff ffe5 	bl	2949c <_SysNmiOnReset>
	_ExcExit();
   294d2:	f7ff fc6b 	bl	28dac <_ExcExit>
   294d6:	bd08      	pop	{r3, pc}

000294d8 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   294d8:	4b05      	ldr	r3, [pc, #20]	; (294f0 <_region_init+0x18>)
   294da:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   294dc:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   294e0:	4308      	orrs	r0, r1
   294e2:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   294e6:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   294e8:	f042 0201 	orr.w	r2, r2, #1
   294ec:	611a      	str	r2, [r3, #16]
   294ee:	4770      	bx	lr
   294f0:	e000ed90 	.word	0xe000ed90

000294f4 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   294f4:	4b14      	ldr	r3, [pc, #80]	; (29548 <_arm_mpu_config+0x54>)
   294f6:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   294f8:	4b14      	ldr	r3, [pc, #80]	; (2954c <_arm_mpu_config+0x58>)
   294fa:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   294fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   29500:	429a      	cmp	r2, r3
   29502:	d81f      	bhi.n	29544 <_arm_mpu_config+0x50>
{
   29504:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   29506:	2400      	movs	r4, #0
   29508:	4b10      	ldr	r3, [pc, #64]	; (2954c <_arm_mpu_config+0x58>)
   2950a:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   2950c:	e00b      	b.n	29526 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   2950e:	4b0e      	ldr	r3, [pc, #56]	; (29548 <_arm_mpu_config+0x54>)
   29510:	6859      	ldr	r1, [r3, #4]
   29512:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   29516:	0093      	lsls	r3, r2, #2
   29518:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   2951a:	6892      	ldr	r2, [r2, #8]
   2951c:	58c9      	ldr	r1, [r1, r3]
   2951e:	4620      	mov	r0, r4
   29520:	f7ff ffda 	bl	294d8 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   29524:	3401      	adds	r4, #1
   29526:	4b08      	ldr	r3, [pc, #32]	; (29548 <_arm_mpu_config+0x54>)
   29528:	681b      	ldr	r3, [r3, #0]
   2952a:	429c      	cmp	r4, r3
   2952c:	d3ef      	bcc.n	2950e <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   2952e:	2205      	movs	r2, #5
   29530:	4b06      	ldr	r3, [pc, #24]	; (2954c <_arm_mpu_config+0x58>)
   29532:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   29534:	2201      	movs	r2, #1
   29536:	4b06      	ldr	r3, [pc, #24]	; (29550 <_arm_mpu_config+0x5c>)
   29538:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   2953a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2953e:	f3bf 8f6f 	isb	sy
   29542:	bd10      	pop	{r4, pc}
   29544:	4770      	bx	lr
   29546:	bf00      	nop
   29548:	2000c5c8 	.word	0x2000c5c8
   2954c:	e000ed90 	.word	0xe000ed90
   29550:	20002734 	.word	0x20002734

00029554 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   29554:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   29556:	f7ff ffcd 	bl	294f4 <_arm_mpu_config>

	return 0;
}
   2955a:	2000      	movs	r0, #0
   2955c:	bd08      	pop	{r3, pc}
	...

00029560 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   29560:	b538      	push	{r3, r4, r5, lr}
   29562:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   29564:	4b07      	ldr	r3, [pc, #28]	; (29584 <_sys_device_do_config_level+0x24>)
   29566:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2956a:	e004      	b.n	29576 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   2956c:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   2956e:	685b      	ldr	r3, [r3, #4]
   29570:	4620      	mov	r0, r4
   29572:	4798      	blx	r3
								info++) {
   29574:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   29576:	1c6b      	adds	r3, r5, #1
   29578:	4a02      	ldr	r2, [pc, #8]	; (29584 <_sys_device_do_config_level+0x24>)
   2957a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2957e:	429c      	cmp	r4, r3
   29580:	d3f4      	bcc.n	2956c <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   29582:	bd38      	pop	{r3, r4, r5, pc}
   29584:	00034bec 	.word	0x00034bec

00029588 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   29588:	b538      	push	{r3, r4, r5, lr}
   2958a:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   2958c:	4c0a      	ldr	r4, [pc, #40]	; (295b8 <device_get_binding+0x30>)
   2958e:	e000      	b.n	29592 <device_get_binding+0xa>
   29590:	340c      	adds	r4, #12
   29592:	4b0a      	ldr	r3, [pc, #40]	; (295bc <device_get_binding+0x34>)
   29594:	429c      	cmp	r4, r3
   29596:	d00c      	beq.n	295b2 <device_get_binding+0x2a>
		if (!info->driver_api) {
   29598:	6863      	ldr	r3, [r4, #4]
   2959a:	2b00      	cmp	r3, #0
   2959c:	d0f8      	beq.n	29590 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   2959e:	6823      	ldr	r3, [r4, #0]
   295a0:	6819      	ldr	r1, [r3, #0]
   295a2:	42a9      	cmp	r1, r5
   295a4:	d006      	beq.n	295b4 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   295a6:	4628      	mov	r0, r5
   295a8:	f7d6 ff2e 	bl	408 <strcmp>
   295ac:	2800      	cmp	r0, #0
   295ae:	d1ef      	bne.n	29590 <device_get_binding+0x8>
   295b0:	e000      	b.n	295b4 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   295b2:	2400      	movs	r4, #0
}
   295b4:	4620      	mov	r0, r4
   295b6:	bd38      	pop	{r3, r4, r5, pc}
   295b8:	2000cfc4 	.word	0x2000cfc4
   295bc:	2000d084 	.word	0x2000d084

000295c0 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   295c0:	4b01      	ldr	r3, [pc, #4]	; (295c8 <set_kernel_idle_time_in_ticks+0x8>)
   295c2:	6158      	str	r0, [r3, #20]
   295c4:	4770      	bx	lr
   295c6:	bf00      	nop
   295c8:	20002808 	.word	0x20002808

000295cc <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   295cc:	b510      	push	{r4, lr}
   295ce:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   295d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   295d4:	d003      	beq.n	295de <_sys_power_save_idle+0x12>
   295d6:	4b06      	ldr	r3, [pc, #24]	; (295f0 <_sys_power_save_idle+0x24>)
   295d8:	681b      	ldr	r3, [r3, #0]
   295da:	4298      	cmp	r0, r3
   295dc:	db02      	blt.n	295e4 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   295de:	4620      	mov	r0, r4
   295e0:	f7d9 f84a 	bl	2678 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   295e4:	4620      	mov	r0, r4
   295e6:	f7ff ffeb 	bl	295c0 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   295ea:	f7ff fe83 	bl	292f4 <k_cpu_idle>
   295ee:	bd10      	pop	{r4, pc}
   295f0:	2000c60c 	.word	0x2000c60c

000295f4 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   295f4:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   295f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   295fa:	d003      	beq.n	29604 <_sys_power_save_idle_exit+0x10>
   295fc:	4b03      	ldr	r3, [pc, #12]	; (2960c <_sys_power_save_idle_exit+0x18>)
   295fe:	681b      	ldr	r3, [r3, #0]
   29600:	4298      	cmp	r0, r3
   29602:	db01      	blt.n	29608 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   29604:	f7d9 f84e 	bl	26a4 <_timer_idle_exit>
   29608:	bd08      	pop	{r3, pc}
   2960a:	bf00      	nop
   2960c:	2000c60c 	.word	0x2000c60c

00029610 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   29610:	b508      	push	{r3, lr}
   29612:	e005      	b.n	29620 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29614:	2300      	movs	r3, #0
   29616:	e00e      	b.n	29636 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   29618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   2961c:	f7ff ffd6 	bl	295cc <_sys_power_save_idle>
   29620:	f04f 0220 	mov.w	r2, #32
   29624:	f3ef 8311 	mrs	r3, BASEPRI
   29628:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   2962c:	4a04      	ldr	r2, [pc, #16]	; (29640 <idle+0x30>)
   2962e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29632:	4293      	cmp	r3, r2
   29634:	d0ee      	beq.n	29614 <idle+0x4>
   29636:	2b00      	cmp	r3, #0
   29638:	d0ee      	beq.n	29618 <idle+0x8>
   2963a:	6918      	ldr	r0, [r3, #16]
   2963c:	e7ee      	b.n	2961c <idle+0xc>
   2963e:	bf00      	nop
   29640:	20002808 	.word	0x20002808

00029644 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   29644:	b480      	push	{r7}
   29646:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   29648:	4b07      	ldr	r3, [pc, #28]	; (29668 <switch_to_main_thread+0x24>)
   2964a:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   2964e:	4907      	ldr	r1, [pc, #28]	; (2966c <switch_to_main_thread+0x28>)
   29650:	4a07      	ldr	r2, [pc, #28]	; (29670 <switch_to_main_thread+0x2c>)
   29652:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   29654:	4c07      	ldr	r4, [pc, #28]	; (29674 <switch_to_main_thread+0x30>)
   29656:	4a08      	ldr	r2, [pc, #32]	; (29678 <switch_to_main_thread+0x34>)
   29658:	f383 8809 	msr	PSP, r3
   2965c:	2100      	movs	r1, #0
   2965e:	f381 8811 	msr	BASEPRI, r1
   29662:	4610      	mov	r0, r2
   29664:	4720      	bx	r4
   29666:	bf00      	nop
   29668:	2000abb0 	.word	0x2000abb0
   2966c:	200027a0 	.word	0x200027a0
   29670:	20002808 	.word	0x20002808
   29674:	0002ae39 	.word	0x0002ae39
   29678:	0002989d 	.word	0x0002989d

0002967c <prepare_multithreading>:
{
   2967c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2967e:	b087      	sub	sp, #28
	_IntLibInit();
   29680:	f7ff fbaa 	bl	28dd8 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   29684:	2300      	movs	r3, #0
   29686:	e007      	b.n	29698 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   29688:	1d18      	adds	r0, r3, #4
   2968a:	4927      	ldr	r1, [pc, #156]	; (29728 <prepare_multithreading+0xac>)
   2968c:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   29690:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   29694:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   29696:	3301      	adds	r3, #1
   29698:	2b1f      	cmp	r3, #31
   2969a:	ddf5      	ble.n	29688 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   2969c:	4e22      	ldr	r6, [pc, #136]	; (29728 <prepare_multithreading+0xac>)
   2969e:	4d23      	ldr	r5, [pc, #140]	; (2972c <prepare_multithreading+0xb0>)
   296a0:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   296a2:	2701      	movs	r7, #1
   296a4:	9704      	str	r7, [sp, #16]
   296a6:	2400      	movs	r4, #0
   296a8:	9403      	str	r4, [sp, #12]
   296aa:	9402      	str	r4, [sp, #8]
   296ac:	9401      	str	r4, [sp, #4]
   296ae:	9400      	str	r4, [sp, #0]
   296b0:	4b1f      	ldr	r3, [pc, #124]	; (29730 <prepare_multithreading+0xb4>)
   296b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   296b6:	491f      	ldr	r1, [pc, #124]	; (29734 <prepare_multithreading+0xb8>)
   296b8:	4628      	mov	r0, r5
   296ba:	f001 fc9b 	bl	2aff4 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   296be:	7a6b      	ldrb	r3, [r5, #9]
   296c0:	f023 0304 	bic.w	r3, r3, #4
   296c4:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   296c6:	4628      	mov	r0, r5
   296c8:	f000 ff08 	bl	2a4dc <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   296cc:	4d1a      	ldr	r5, [pc, #104]	; (29738 <prepare_multithreading+0xbc>)
   296ce:	9704      	str	r7, [sp, #16]
   296d0:	230f      	movs	r3, #15
   296d2:	9303      	str	r3, [sp, #12]
   296d4:	9402      	str	r4, [sp, #8]
   296d6:	9401      	str	r4, [sp, #4]
   296d8:	9400      	str	r4, [sp, #0]
   296da:	4b18      	ldr	r3, [pc, #96]	; (2973c <prepare_multithreading+0xc0>)
   296dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   296e0:	4917      	ldr	r1, [pc, #92]	; (29740 <prepare_multithreading+0xc4>)
   296e2:	4628      	mov	r0, r5
   296e4:	f001 fc86 	bl	2aff4 <_setup_new_thread>
   296e8:	7a6b      	ldrb	r3, [r5, #9]
   296ea:	f023 0304 	bic.w	r3, r3, #4
   296ee:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   296f0:	4628      	mov	r0, r5
   296f2:	f000 fef3 	bl	2a4dc <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   296f6:	f106 030c 	add.w	r3, r6, #12
   296fa:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   296fc:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   296fe:	4b11      	ldr	r3, [pc, #68]	; (29744 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   29700:	f383 8808 	msr	MSP, r3
   29704:	4b10      	ldr	r3, [pc, #64]	; (29748 <prepare_multithreading+0xcc>)
   29706:	22e0      	movs	r2, #224	; 0xe0
   29708:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   2970c:	77dc      	strb	r4, [r3, #31]
   2970e:	761c      	strb	r4, [r3, #24]
   29710:	765c      	strb	r4, [r3, #25]
   29712:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   29714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   29716:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2971a:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   2971c:	f7ff fd5e 	bl	291dc <_FaultInit>
	_CpuIdleInit();
   29720:	f7ff fde2 	bl	292e8 <_CpuIdleInit>
}
   29724:	b007      	add	sp, #28
   29726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29728:	20002808 	.word	0x20002808
   2972c:	200027a0 	.word	0x200027a0
   29730:	0002989d 	.word	0x0002989d
   29734:	2000a3b0 	.word	0x2000a3b0
   29738:	20002738 	.word	0x20002738
   2973c:	00029611 	.word	0x00029611
   29740:	2000abb0 	.word	0x2000abb0
   29744:	2000b4f0 	.word	0x2000b4f0
   29748:	e000ed00 	.word	0xe000ed00

0002974c <k_call_stacks_analyze>:
{
   2974c:	b500      	push	{lr}
   2974e:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   29750:	483a      	ldr	r0, [pc, #232]	; (2983c <k_call_stacks_analyze+0xf0>)
   29752:	f7d9 fd1d 	bl	3190 <printk>
   29756:	2200      	movs	r2, #0
	size_t unused = 0;
   29758:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2975a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2975e:	d206      	bcs.n	2976e <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   29760:	4937      	ldr	r1, [pc, #220]	; (29840 <k_call_stacks_analyze+0xf4>)
   29762:	5c89      	ldrb	r1, [r1, r2]
   29764:	29aa      	cmp	r1, #170	; 0xaa
   29766:	d102      	bne.n	2976e <k_call_stacks_analyze+0x22>
			unused++;
   29768:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2976a:	3201      	adds	r2, #1
   2976c:	e7f5      	b.n	2975a <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   2976e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   29772:	2264      	movs	r2, #100	; 0x64
   29774:	fb02 f201 	mul.w	r2, r2, r1
   29778:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2977a:	9202      	str	r2, [sp, #8]
   2977c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   29780:	9201      	str	r2, [sp, #4]
   29782:	9100      	str	r1, [sp, #0]
   29784:	492f      	ldr	r1, [pc, #188]	; (29844 <k_call_stacks_analyze+0xf8>)
   29786:	4830      	ldr	r0, [pc, #192]	; (29848 <k_call_stacks_analyze+0xfc>)
   29788:	f7d9 fd02 	bl	3190 <printk>
	for (i = 0; i < size; i++) {
   2978c:	2200      	movs	r2, #0
	size_t unused = 0;
   2978e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   29790:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   29794:	d206      	bcs.n	297a4 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   29796:	492d      	ldr	r1, [pc, #180]	; (2984c <k_call_stacks_analyze+0x100>)
   29798:	5c89      	ldrb	r1, [r1, r2]
   2979a:	29aa      	cmp	r1, #170	; 0xaa
   2979c:	d102      	bne.n	297a4 <k_call_stacks_analyze+0x58>
			unused++;
   2979e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   297a0:	3201      	adds	r2, #1
   297a2:	e7f5      	b.n	29790 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   297a4:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   297a8:	2264      	movs	r2, #100	; 0x64
   297aa:	fb02 f201 	mul.w	r2, r2, r1
   297ae:	4828      	ldr	r0, [pc, #160]	; (29850 <k_call_stacks_analyze+0x104>)
   297b0:	fba0 0202 	umull	r0, r2, r0, r2
   297b4:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   297b6:	9202      	str	r2, [sp, #8]
   297b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   297bc:	9201      	str	r2, [sp, #4]
   297be:	9100      	str	r1, [sp, #0]
   297c0:	4924      	ldr	r1, [pc, #144]	; (29854 <k_call_stacks_analyze+0x108>)
   297c2:	4821      	ldr	r0, [pc, #132]	; (29848 <k_call_stacks_analyze+0xfc>)
   297c4:	f7d9 fce4 	bl	3190 <printk>
	for (i = 0; i < size; i++) {
   297c8:	2200      	movs	r2, #0
	size_t unused = 0;
   297ca:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   297cc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   297d0:	d206      	bcs.n	297e0 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   297d2:	4921      	ldr	r1, [pc, #132]	; (29858 <k_call_stacks_analyze+0x10c>)
   297d4:	5c89      	ldrb	r1, [r1, r2]
   297d6:	29aa      	cmp	r1, #170	; 0xaa
   297d8:	d102      	bne.n	297e0 <k_call_stacks_analyze+0x94>
			unused++;
   297da:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   297dc:	3201      	adds	r2, #1
   297de:	e7f5      	b.n	297cc <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   297e0:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   297e4:	2264      	movs	r2, #100	; 0x64
   297e6:	fb02 f201 	mul.w	r2, r2, r1
   297ea:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   297ec:	9202      	str	r2, [sp, #8]
   297ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   297f2:	9201      	str	r2, [sp, #4]
   297f4:	9100      	str	r1, [sp, #0]
   297f6:	4919      	ldr	r1, [pc, #100]	; (2985c <k_call_stacks_analyze+0x110>)
   297f8:	4813      	ldr	r0, [pc, #76]	; (29848 <k_call_stacks_analyze+0xfc>)
   297fa:	f7d9 fcc9 	bl	3190 <printk>
	for (i = 0; i < size; i++) {
   297fe:	2200      	movs	r2, #0
	size_t unused = 0;
   29800:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   29802:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   29806:	d206      	bcs.n	29816 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   29808:	4915      	ldr	r1, [pc, #84]	; (29860 <k_call_stacks_analyze+0x114>)
   2980a:	5c89      	ldrb	r1, [r1, r2]
   2980c:	29aa      	cmp	r1, #170	; 0xaa
   2980e:	d102      	bne.n	29816 <k_call_stacks_analyze+0xca>
			unused++;
   29810:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   29812:	3201      	adds	r2, #1
   29814:	e7f5      	b.n	29802 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   29816:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   2981a:	2264      	movs	r2, #100	; 0x64
   2981c:	fb02 f201 	mul.w	r2, r2, r1
   29820:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   29822:	9202      	str	r2, [sp, #8]
   29824:	f44f 6280 	mov.w	r2, #1024	; 0x400
   29828:	9201      	str	r2, [sp, #4]
   2982a:	9100      	str	r1, [sp, #0]
   2982c:	490d      	ldr	r1, [pc, #52]	; (29864 <k_call_stacks_analyze+0x118>)
   2982e:	4806      	ldr	r0, [pc, #24]	; (29848 <k_call_stacks_analyze+0xfc>)
   29830:	f7d9 fcae 	bl	3190 <printk>
}
   29834:	b005      	add	sp, #20
   29836:	f85d fb04 	ldr.w	pc, [sp], #4
   2983a:	bf00      	nop
   2983c:	00034c08 	.word	0x00034c08
   29840:	2000a3b0 	.word	0x2000a3b0
   29844:	00034c18 	.word	0x00034c18
   29848:	00032fc0 	.word	0x00032fc0
   2984c:	2000abb0 	.word	0x2000abb0
   29850:	cccccccd 	.word	0xcccccccd
   29854:	00034c24 	.word	0x00034c24
   29858:	2000acf0 	.word	0x2000acf0
   2985c:	00034c30 	.word	0x00034c30
   29860:	2000b4f0 	.word	0x2000b4f0
   29864:	00034c3c 	.word	0x00034c3c

00029868 <_bss_zero>:
{
   29868:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   2986a:	4803      	ldr	r0, [pc, #12]	; (29878 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   2986c:	4a03      	ldr	r2, [pc, #12]	; (2987c <_bss_zero+0x14>)
   2986e:	1a12      	subs	r2, r2, r0
   29870:	2100      	movs	r1, #0
   29872:	f002 fc03 	bl	2c07c <memset>
   29876:	bd08      	pop	{r3, pc}
   29878:	20000000 	.word	0x20000000
   2987c:	20002ca0 	.word	0x20002ca0

00029880 <_data_copy>:
{
   29880:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   29882:	4803      	ldr	r0, [pc, #12]	; (29890 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   29884:	4a03      	ldr	r2, [pc, #12]	; (29894 <_data_copy+0x14>)
   29886:	1a12      	subs	r2, r2, r0
   29888:	4903      	ldr	r1, [pc, #12]	; (29898 <_data_copy+0x18>)
   2988a:	f7d6 fd19 	bl	2c0 <memcpy>
   2988e:	bd08      	pop	{r3, pc}
   29890:	2000b8f0 	.word	0x2000b8f0
   29894:	2000d554 	.word	0x2000d554
   29898:	00034ec4 	.word	0x00034ec4

0002989c <_main>:
{
   2989c:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2989e:	2002      	movs	r0, #2
   298a0:	f7ff fe5e 	bl	29560 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   298a4:	2003      	movs	r0, #3
   298a6:	f7ff fe5b 	bl	29560 <_sys_device_do_config_level>
	_init_static_threads();
   298aa:	f001 fc11 	bl	2b0d0 <_init_static_threads>
	main();
   298ae:	f7d8 f995 	bl	1bdc <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   298b2:	4a03      	ldr	r2, [pc, #12]	; (298c0 <_main+0x24>)
   298b4:	7a13      	ldrb	r3, [r2, #8]
   298b6:	f023 0301 	bic.w	r3, r3, #1
   298ba:	7213      	strb	r3, [r2, #8]
   298bc:	bd08      	pop	{r3, pc}
   298be:	bf00      	nop
   298c0:	200027a0 	.word	0x200027a0

000298c4 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   298c4:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   298c6:	2000      	movs	r0, #0
   298c8:	f7ff fed8 	bl	2967c <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   298cc:	2000      	movs	r0, #0
   298ce:	f7ff fe47 	bl	29560 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   298d2:	2001      	movs	r0, #1
   298d4:	f7ff fe44 	bl	29560 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   298d8:	f7ff feb4 	bl	29644 <switch_to_main_thread>

000298dc <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   298dc:	2200      	movs	r2, #0
   298de:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   298e0:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   298e2:	e005      	b.n	298f0 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   298e4:	6941      	ldr	r1, [r0, #20]
   298e6:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   298e8:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   298ea:	68c1      	ldr	r1, [r0, #12]
   298ec:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   298ee:	3201      	adds	r2, #1
   298f0:	6881      	ldr	r1, [r0, #8]
   298f2:	428a      	cmp	r2, r1
   298f4:	d3f6      	bcc.n	298e4 <create_free_list+0x8>
	}
}
   298f6:	4770      	bx	lr

000298f8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   298f8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   298fa:	4c05      	ldr	r4, [pc, #20]	; (29910 <init_mem_slab_module+0x18>)
   298fc:	e003      	b.n	29906 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   298fe:	4620      	mov	r0, r4
   29900:	f7ff ffec 	bl	298dc <create_free_list>
	     slab++) {
   29904:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   29906:	4b03      	ldr	r3, [pc, #12]	; (29914 <init_mem_slab_module+0x1c>)
   29908:	429c      	cmp	r4, r3
   2990a:	d3f8      	bcc.n	298fe <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   2990c:	2000      	movs	r0, #0
   2990e:	bd10      	pop	{r4, pc}
   29910:	2000d090 	.word	0x2000d090
   29914:	2000d0c8 	.word	0x2000d0c8

00029918 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   29918:	b538      	push	{r3, r4, r5, lr}
   2991a:	f04f 0320 	mov.w	r3, #32
   2991e:	f3ef 8411 	mrs	r4, BASEPRI
   29922:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   29926:	6943      	ldr	r3, [r0, #20]
   29928:	b15b      	cbz	r3, 29942 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   2992a:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   2992c:	6943      	ldr	r3, [r0, #20]
   2992e:	681b      	ldr	r3, [r3, #0]
   29930:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   29932:	6983      	ldr	r3, [r0, #24]
   29934:	3301      	adds	r3, #1
   29936:	6183      	str	r3, [r0, #24]
		result = 0;
   29938:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2993a:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   2993e:	4618      	mov	r0, r3
   29940:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   29942:	b922      	cbnz	r2, 2994e <k_mem_slab_alloc+0x36>
		*mem = NULL;
   29944:	2300      	movs	r3, #0
   29946:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   29948:	f06f 030b 	mvn.w	r3, #11
   2994c:	e7f5      	b.n	2993a <k_mem_slab_alloc+0x22>
   2994e:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   29950:	4611      	mov	r1, r2
   29952:	f000 fed7 	bl	2a704 <_pend_current_thread>
	_update_time_slice_before_swap();
   29956:	f000 ff53 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2995a:	4620      	mov	r0, r4
   2995c:	f7ff fa96 	bl	28e8c <__swap>
		if (result == 0) {
   29960:	4603      	mov	r3, r0
   29962:	2800      	cmp	r0, #0
   29964:	d1eb      	bne.n	2993e <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   29966:	4a02      	ldr	r2, [pc, #8]	; (29970 <k_mem_slab_alloc+0x58>)
   29968:	6892      	ldr	r2, [r2, #8]
   2996a:	68d2      	ldr	r2, [r2, #12]
   2996c:	602a      	str	r2, [r5, #0]
   2996e:	e7e6      	b.n	2993e <k_mem_slab_alloc+0x26>
   29970:	20002808 	.word	0x20002808

00029974 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29974:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29976:	f04f 0320 	mov.w	r3, #32
   2997a:	f3ef 8411 	mrs	r4, BASEPRI
   2997e:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   29982:	4b3d      	ldr	r3, [pc, #244]	; (29a78 <k_mem_slab_free+0x104>)
   29984:	681b      	ldr	r3, [r3, #0]
   29986:	2b00      	cmp	r3, #0
   29988:	d13a      	bne.n	29a00 <k_mem_slab_free+0x8c>
	return list->head == list;
   2998a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2998c:	4298      	cmp	r0, r3
   2998e:	d048      	beq.n	29a22 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   29990:	b14b      	cbz	r3, 299a6 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   29992:	685a      	ldr	r2, [r3, #4]
   29994:	681d      	ldr	r5, [r3, #0]
   29996:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   29998:	681a      	ldr	r2, [r3, #0]
   2999a:	685d      	ldr	r5, [r3, #4]
   2999c:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2999e:	7a5a      	ldrb	r2, [r3, #9]
   299a0:	f022 0202 	bic.w	r2, r2, #2
   299a4:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   299a6:	2b00      	cmp	r3, #0
   299a8:	d05c      	beq.n	29a64 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   299aa:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   299ac:	2100      	movs	r1, #0
   299ae:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   299b0:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   299b2:	6a19      	ldr	r1, [r3, #32]
   299b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   299b8:	d013      	beq.n	299e2 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   299ba:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   299be:	482f      	ldr	r0, [pc, #188]	; (29a7c <k_mem_slab_free+0x108>)
   299c0:	6900      	ldr	r0, [r0, #16]
   299c2:	4282      	cmp	r2, r0
   299c4:	d004      	beq.n	299d0 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   299c6:	b102      	cbz	r2, 299ca <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   299c8:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   299ca:	6910      	ldr	r0, [r2, #16]
   299cc:	4401      	add	r1, r0
   299ce:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   299d0:	695a      	ldr	r2, [r3, #20]
   299d2:	6919      	ldr	r1, [r3, #16]
   299d4:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   299d6:	691a      	ldr	r2, [r3, #16]
   299d8:	6959      	ldr	r1, [r3, #20]
   299da:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   299dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   299e0:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   299e2:	7a5a      	ldrb	r2, [r3, #9]
   299e4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   299e8:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   299ea:	f012 0f1b 	tst.w	r2, #27
   299ee:	d11c      	bne.n	29a2a <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   299f0:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   299f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   299f6:	d016      	beq.n	29a26 <k_mem_slab_free+0xb2>
   299f8:	2200      	movs	r2, #0
   299fa:	e017      	b.n	29a2c <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299fc:	2300      	movs	r3, #0
   299fe:	e003      	b.n	29a08 <k_mem_slab_free+0x94>
   29a00:	4605      	mov	r5, r0
	return list->head == list;
   29a02:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a04:	4298      	cmp	r0, r3
   29a06:	d0f9      	beq.n	299fc <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29a08:	2b00      	cmp	r3, #0
   29a0a:	d0c1      	beq.n	29990 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29a0c:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   29a0e:	f112 0f02 	cmn.w	r2, #2
   29a12:	d1bd      	bne.n	29990 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   29a14:	686a      	ldr	r2, [r5, #4]
   29a16:	4293      	cmp	r3, r2
   29a18:	d001      	beq.n	29a1e <k_mem_slab_free+0xaa>
   29a1a:	681b      	ldr	r3, [r3, #0]
   29a1c:	e7f4      	b.n	29a08 <k_mem_slab_free+0x94>
   29a1e:	2300      	movs	r3, #0
   29a20:	e7f2      	b.n	29a08 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a22:	2300      	movs	r3, #0
   29a24:	e7b4      	b.n	29990 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   29a26:	2201      	movs	r2, #1
   29a28:	e000      	b.n	29a2c <k_mem_slab_free+0xb8>
   29a2a:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29a2c:	b94a      	cbnz	r2, 29a42 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   29a2e:	4b13      	ldr	r3, [pc, #76]	; (29a7c <k_mem_slab_free+0x108>)
   29a30:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29a32:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29a34:	2b7f      	cmp	r3, #127	; 0x7f
   29a36:	d908      	bls.n	29a4a <k_mem_slab_free+0xd6>
   29a38:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   29a3a:	b96b      	cbnz	r3, 29a58 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29a3c:	f384 8811 	msr	BASEPRI, r4
   29a40:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   29a42:	4618      	mov	r0, r3
   29a44:	f000 fd4a 	bl	2a4dc <_add_thread_to_ready_q>
   29a48:	e7f1      	b.n	29a2e <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   29a4a:	f000 fe6b 	bl	2a724 <__must_switch_threads>
   29a4e:	4603      	mov	r3, r0
   29a50:	2800      	cmp	r0, #0
   29a52:	d0f2      	beq.n	29a3a <k_mem_slab_free+0xc6>
   29a54:	2301      	movs	r3, #1
   29a56:	e7f0      	b.n	29a3a <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   29a58:	f000 fed2 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   29a5c:	4620      	mov	r0, r4
   29a5e:	f7ff fa15 	bl	28e8c <__swap>
   29a62:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   29a64:	680b      	ldr	r3, [r1, #0]
   29a66:	6942      	ldr	r2, [r0, #20]
   29a68:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   29a6a:	680b      	ldr	r3, [r1, #0]
   29a6c:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   29a6e:	6983      	ldr	r3, [r0, #24]
   29a70:	3b01      	subs	r3, #1
   29a72:	6183      	str	r3, [r0, #24]
   29a74:	e7e2      	b.n	29a3c <k_mem_slab_free+0xc8>
   29a76:	bf00      	nop
   29a78:	20002bf0 	.word	0x20002bf0
   29a7c:	20002808 	.word	0x20002808

00029a80 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   29a80:	4288      	cmp	r0, r1
   29a82:	da00      	bge.n	29a86 <new_prio_for_inheritance+0x6>
   29a84:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   29a86:	2900      	cmp	r1, #0
   29a88:	db01      	blt.n	29a8e <new_prio_for_inheritance+0xe>
   29a8a:	4608      	mov	r0, r1
   29a8c:	4770      	bx	lr
   29a8e:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   29a90:	4770      	bx	lr

00029a92 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   29a92:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   29a94:	6884      	ldr	r4, [r0, #8]
   29a96:	f994 300a 	ldrsb.w	r3, [r4, #10]
   29a9a:	428b      	cmp	r3, r1
   29a9c:	d00e      	beq.n	29abc <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   29a9e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29aa0:	f013 0f1f 	tst.w	r3, #31
   29aa4:	d107      	bne.n	29ab6 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29aa6:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29aac:	d001      	beq.n	29ab2 <adjust_owner_prio+0x20>
   29aae:	2300      	movs	r3, #0
   29ab0:	e002      	b.n	29ab8 <adjust_owner_prio+0x26>
   29ab2:	2301      	movs	r3, #1
   29ab4:	e000      	b.n	29ab8 <adjust_owner_prio+0x26>
   29ab6:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29ab8:	b90b      	cbnz	r3, 29abe <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   29aba:	72a1      	strb	r1, [r4, #10]
   29abc:	bd38      	pop	{r3, r4, r5, pc}
   29abe:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   29ac0:	4620      	mov	r0, r4
   29ac2:	f000 fd2b 	bl	2a51c <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   29ac6:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   29ac8:	4620      	mov	r0, r4
   29aca:	f000 fd07 	bl	2a4dc <_add_thread_to_ready_q>
   29ace:	bd38      	pop	{r3, r4, r5, pc}

00029ad0 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   29ad0:	b570      	push	{r4, r5, r6, lr}
   29ad2:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   29ad4:	4b32      	ldr	r3, [pc, #200]	; (29ba0 <_impl_k_mutex_lock+0xd0>)
   29ad6:	689a      	ldr	r2, [r3, #8]
   29ad8:	7ad3      	ldrb	r3, [r2, #11]
   29ada:	3b01      	subs	r3, #1
   29adc:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   29ade:	68c3      	ldr	r3, [r0, #12]
   29ae0:	b97b      	cbnz	r3, 29b02 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   29ae2:	2b00      	cmp	r3, #0
   29ae4:	d133      	bne.n	29b4e <_impl_k_mutex_lock+0x7e>
   29ae6:	4a2e      	ldr	r2, [pc, #184]	; (29ba0 <_impl_k_mutex_lock+0xd0>)
   29ae8:	6892      	ldr	r2, [r2, #8]
   29aea:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   29aee:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   29af0:	3301      	adds	r3, #1
   29af2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   29af4:	4b2a      	ldr	r3, [pc, #168]	; (29ba0 <_impl_k_mutex_lock+0xd0>)
   29af6:	689b      	ldr	r3, [r3, #8]
   29af8:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   29afa:	f000 fea1 	bl	2a840 <k_sched_unlock>

		return 0;
   29afe:	2000      	movs	r0, #0
   29b00:	bd70      	pop	{r4, r5, r6, pc}
   29b02:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   29b04:	6881      	ldr	r1, [r0, #8]
   29b06:	4a26      	ldr	r2, [pc, #152]	; (29ba0 <_impl_k_mutex_lock+0xd0>)
   29b08:	6892      	ldr	r2, [r2, #8]
   29b0a:	4291      	cmp	r1, r2
   29b0c:	d0e9      	beq.n	29ae2 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   29b0e:	b305      	cbz	r5, 29b52 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   29b10:	f991 100a 	ldrsb.w	r1, [r1, #10]
   29b14:	f992 000a 	ldrsb.w	r0, [r2, #10]
   29b18:	f7ff ffb2 	bl	29a80 <new_prio_for_inheritance>
	__asm__ volatile(
   29b1c:	f04f 0320 	mov.w	r3, #32
   29b20:	f3ef 8611 	mrs	r6, BASEPRI
   29b24:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   29b28:	68a3      	ldr	r3, [r4, #8]
   29b2a:	f993 300a 	ldrsb.w	r3, [r3, #10]
   29b2e:	4298      	cmp	r0, r3
   29b30:	db14      	blt.n	29b5c <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   29b32:	4629      	mov	r1, r5
   29b34:	4620      	mov	r0, r4
   29b36:	f000 fde5 	bl	2a704 <_pend_current_thread>
	_update_time_slice_before_swap();
   29b3a:	f000 fe61 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   29b3e:	4630      	mov	r0, r6
   29b40:	f7ff f9a4 	bl	28e8c <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   29b44:	b978      	cbnz	r0, 29b66 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   29b46:	f000 fe7b 	bl	2a840 <k_sched_unlock>
		return 0;
   29b4a:	2000      	movs	r0, #0
   29b4c:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   29b4e:	6922      	ldr	r2, [r4, #16]
   29b50:	e7cd      	b.n	29aee <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   29b52:	f000 fe75 	bl	2a840 <k_sched_unlock>
		return -EBUSY;
   29b56:	f06f 000f 	mvn.w	r0, #15
   29b5a:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   29b5c:	4601      	mov	r1, r0
   29b5e:	4620      	mov	r0, r4
   29b60:	f7ff ff97 	bl	29a92 <adjust_owner_prio>
   29b64:	e7e5      	b.n	29b32 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   29b66:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b68:	429c      	cmp	r4, r3
   29b6a:	d016      	beq.n	29b9a <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   29b6c:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   29b6e:	b123      	cbz	r3, 29b7a <_impl_k_mutex_lock+0xaa>
   29b70:	f993 000a 	ldrsb.w	r0, [r3, #10]
   29b74:	f7ff ff84 	bl	29a80 <new_prio_for_inheritance>
   29b78:	4601      	mov	r1, r0
   29b7a:	f04f 0320 	mov.w	r3, #32
   29b7e:	f3ef 8511 	mrs	r5, BASEPRI
   29b82:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   29b86:	4620      	mov	r0, r4
   29b88:	f7ff ff83 	bl	29a92 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b8c:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   29b90:	f000 fe56 	bl	2a840 <k_sched_unlock>

	return -EAGAIN;
   29b94:	f06f 000a 	mvn.w	r0, #10
}
   29b98:	bd70      	pop	{r4, r5, r6, pc}
   29b9a:	2300      	movs	r3, #0
   29b9c:	e7e6      	b.n	29b6c <_impl_k_mutex_lock+0x9c>
   29b9e:	bf00      	nop
   29ba0:	20002808 	.word	0x20002808

00029ba4 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   29ba4:	b570      	push	{r4, r5, r6, lr}
   29ba6:	4b40      	ldr	r3, [pc, #256]	; (29ca8 <_impl_k_mutex_unlock+0x104>)
   29ba8:	689a      	ldr	r2, [r3, #8]
   29baa:	7ad3      	ldrb	r3, [r2, #11]
   29bac:	3b01      	subs	r3, #1
   29bae:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   29bb0:	68c3      	ldr	r3, [r0, #12]
   29bb2:	3b01      	subs	r3, #1
   29bb4:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   29bb6:	2b00      	cmp	r3, #0
   29bb8:	d143      	bne.n	29c42 <_impl_k_mutex_unlock+0x9e>
   29bba:	4605      	mov	r5, r0
	__asm__ volatile(
   29bbc:	f04f 0320 	mov.w	r3, #32
   29bc0:	f3ef 8611 	mrs	r6, BASEPRI
   29bc4:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   29bc8:	6901      	ldr	r1, [r0, #16]
   29bca:	f7ff ff62 	bl	29a92 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   29bce:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   29bd0:	4b36      	ldr	r3, [pc, #216]	; (29cac <_impl_k_mutex_unlock+0x108>)
   29bd2:	681b      	ldr	r3, [r3, #0]
   29bd4:	2b00      	cmp	r3, #0
   29bd6:	d139      	bne.n	29c4c <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   29bd8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bda:	42a5      	cmp	r5, r4
   29bdc:	d046      	beq.n	29c6c <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   29bde:	b14c      	cbz	r4, 29bf4 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   29be0:	6863      	ldr	r3, [r4, #4]
   29be2:	6822      	ldr	r2, [r4, #0]
   29be4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29be6:	6823      	ldr	r3, [r4, #0]
   29be8:	6862      	ldr	r2, [r4, #4]
   29bea:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29bec:	7a63      	ldrb	r3, [r4, #9]
   29bee:	f023 0302 	bic.w	r3, r3, #2
   29bf2:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   29bf4:	2c00      	cmp	r4, #0
   29bf6:	d051      	beq.n	29c9c <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29bf8:	6a22      	ldr	r2, [r4, #32]
   29bfa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29bfe:	d013      	beq.n	29c28 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29c00:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29c04:	4928      	ldr	r1, [pc, #160]	; (29ca8 <_impl_k_mutex_unlock+0x104>)
   29c06:	6909      	ldr	r1, [r1, #16]
   29c08:	428b      	cmp	r3, r1
   29c0a:	d004      	beq.n	29c16 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c0c:	b103      	cbz	r3, 29c10 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   29c0e:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29c10:	6919      	ldr	r1, [r3, #16]
   29c12:	440a      	add	r2, r1
   29c14:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29c16:	6963      	ldr	r3, [r4, #20]
   29c18:	6922      	ldr	r2, [r4, #16]
   29c1a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29c1c:	6923      	ldr	r3, [r4, #16]
   29c1e:	6962      	ldr	r2, [r4, #20]
   29c20:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c26:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29c28:	7a63      	ldrb	r3, [r4, #9]
   29c2a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29c2e:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29c30:	f013 0f1b 	tst.w	r3, #27
   29c34:	d11e      	bne.n	29c74 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29c36:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29c3c:	d018      	beq.n	29c70 <_impl_k_mutex_unlock+0xcc>
   29c3e:	2300      	movs	r3, #0
   29c40:	e019      	b.n	29c76 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   29c42:	f000 fdfd 	bl	2a840 <k_sched_unlock>
		return;
   29c46:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c48:	2400      	movs	r4, #0
   29c4a:	e002      	b.n	29c52 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   29c4c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c4e:	42a5      	cmp	r5, r4
   29c50:	d0fa      	beq.n	29c48 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29c52:	2c00      	cmp	r4, #0
   29c54:	d0c3      	beq.n	29bde <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29c56:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   29c58:	f113 0f02 	cmn.w	r3, #2
   29c5c:	d1bf      	bne.n	29bde <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   29c5e:	6853      	ldr	r3, [r2, #4]
   29c60:	429c      	cmp	r4, r3
   29c62:	d001      	beq.n	29c68 <_impl_k_mutex_unlock+0xc4>
   29c64:	6824      	ldr	r4, [r4, #0]
   29c66:	e7f4      	b.n	29c52 <_impl_k_mutex_unlock+0xae>
   29c68:	2400      	movs	r4, #0
   29c6a:	e7f2      	b.n	29c52 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c6c:	2400      	movs	r4, #0
   29c6e:	e7b6      	b.n	29bde <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   29c70:	2301      	movs	r3, #1
   29c72:	e000      	b.n	29c76 <_impl_k_mutex_unlock+0xd2>
   29c74:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29c76:	b96b      	cbnz	r3, 29c94 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c78:	f386 8811 	msr	BASEPRI, r6
   29c7c:	2300      	movs	r3, #0
   29c7e:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   29c80:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   29c82:	68eb      	ldr	r3, [r5, #12]
   29c84:	3301      	adds	r3, #1
   29c86:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   29c88:	f994 300a 	ldrsb.w	r3, [r4, #10]
   29c8c:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   29c8e:	f000 fdd7 	bl	2a840 <k_sched_unlock>
   29c92:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   29c94:	4620      	mov	r0, r4
   29c96:	f000 fc21 	bl	2a4dc <_add_thread_to_ready_q>
   29c9a:	e7ed      	b.n	29c78 <_impl_k_mutex_unlock+0xd4>
   29c9c:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   29ca0:	2300      	movs	r3, #0
   29ca2:	60ab      	str	r3, [r5, #8]
   29ca4:	e7f3      	b.n	29c8e <_impl_k_mutex_unlock+0xea>
   29ca6:	bf00      	nop
   29ca8:	20002808 	.word	0x20002808
   29cac:	20002bf0 	.word	0x20002bf0

00029cb0 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   29cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29cb2:	4604      	mov	r4, r0
   29cb4:	460d      	mov	r5, r1
	*must_reschedule = 0;
   29cb6:	2300      	movs	r3, #0
   29cb8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   29cba:	6883      	ldr	r3, [r0, #8]
   29cbc:	2b00      	cmp	r3, #0
   29cbe:	d042      	beq.n	29d46 <_signal_poll_event+0x96>
   29cc0:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   29cc2:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   29cc4:	7a43      	ldrb	r3, [r0, #9]
   29cc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   29cca:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   29ccc:	f013 0f02 	tst.w	r3, #2
   29cd0:	d039      	beq.n	29d46 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29cd2:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   29cd4:	f113 0f02 	cmn.w	r3, #2
   29cd8:	d060      	beq.n	29d9c <_signal_poll_event+0xec>
	node->prev->next = node->next;
   29cda:	6843      	ldr	r3, [r0, #4]
   29cdc:	6802      	ldr	r2, [r0, #0]
   29cde:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29ce0:	6803      	ldr	r3, [r0, #0]
   29ce2:	6842      	ldr	r2, [r0, #4]
   29ce4:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29ce6:	7a43      	ldrb	r3, [r0, #9]
   29ce8:	f023 0302 	bic.w	r3, r3, #2
   29cec:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29cee:	6a02      	ldr	r2, [r0, #32]
   29cf0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29cf4:	d013      	beq.n	29d1e <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29cf6:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   29cfa:	492a      	ldr	r1, [pc, #168]	; (29da4 <_signal_poll_event+0xf4>)
   29cfc:	6909      	ldr	r1, [r1, #16]
   29cfe:	428b      	cmp	r3, r1
   29d00:	d004      	beq.n	29d0c <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d02:	b103      	cbz	r3, 29d06 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   29d04:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29d06:	6919      	ldr	r1, [r3, #16]
   29d08:	440a      	add	r2, r1
   29d0a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29d0c:	6943      	ldr	r3, [r0, #20]
   29d0e:	6902      	ldr	r2, [r0, #16]
   29d10:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29d12:	6903      	ldr	r3, [r0, #16]
   29d14:	6942      	ldr	r2, [r0, #20]
   29d16:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d1c:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   29d1e:	b965      	cbnz	r5, 29d3a <_signal_poll_event+0x8a>
   29d20:	f06f 0303 	mvn.w	r3, #3
   29d24:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   29d26:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29d28:	f013 0f1f 	tst.w	r3, #31
   29d2c:	d109      	bne.n	29d42 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29d2e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29d34:	d003      	beq.n	29d3e <_signal_poll_event+0x8e>
   29d36:	2700      	movs	r7, #0
   29d38:	e004      	b.n	29d44 <_signal_poll_event+0x94>
   29d3a:	2300      	movs	r3, #0
   29d3c:	e7f2      	b.n	29d24 <_signal_poll_event+0x74>
   29d3e:	2701      	movs	r7, #1
   29d40:	e000      	b.n	29d44 <_signal_poll_event+0x94>
   29d42:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   29d44:	b947      	cbnz	r7, 29d58 <_signal_poll_event+0xa8>
	event->poller = NULL;
   29d46:	2000      	movs	r0, #0
   29d48:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   29d4a:	7b63      	ldrb	r3, [r4, #13]
   29d4c:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   29d50:	f365 1307 	bfi	r3, r5, #4, #4
   29d54:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   29d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   29d58:	f000 fbc0 	bl	2a4dc <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   29d5c:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   29d60:	2b0d      	cmp	r3, #13
   29d62:	d807      	bhi.n	29d74 <_signal_poll_event+0xc4>
   29d64:	b19b      	cbz	r3, 29d8e <_signal_poll_event+0xde>
   29d66:	4b10      	ldr	r3, [pc, #64]	; (29da8 <_signal_poll_event+0xf8>)
   29d68:	685b      	ldr	r3, [r3, #4]
   29d6a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29d6e:	d010      	beq.n	29d92 <_signal_poll_event+0xe2>
   29d70:	2300      	movs	r3, #0
   29d72:	e000      	b.n	29d76 <_signal_poll_event+0xc6>
   29d74:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   29d76:	b973      	cbnz	r3, 29d96 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   29d78:	4a0a      	ldr	r2, [pc, #40]	; (29da4 <_signal_poll_event+0xf4>)
   29d7a:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29d7c:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29d7e:	2a7f      	cmp	r2, #127	; 0x7f
   29d80:	d80a      	bhi.n	29d98 <_signal_poll_event+0xe8>
   29d82:	f000 fccf 	bl	2a724 <__must_switch_threads>
   29d86:	4603      	mov	r3, r0
   29d88:	b130      	cbz	r0, 29d98 <_signal_poll_event+0xe8>
   29d8a:	463b      	mov	r3, r7
   29d8c:	e004      	b.n	29d98 <_signal_poll_event+0xe8>
   29d8e:	2300      	movs	r3, #0
   29d90:	e7f1      	b.n	29d76 <_signal_poll_event+0xc6>
   29d92:	463b      	mov	r3, r7
   29d94:	e7ef      	b.n	29d76 <_signal_poll_event+0xc6>
   29d96:	2300      	movs	r3, #0
   29d98:	6033      	str	r3, [r6, #0]
   29d9a:	e7d4      	b.n	29d46 <_signal_poll_event+0x96>
		return -EAGAIN;
   29d9c:	f06f 000a 	mvn.w	r0, #10
}
   29da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29da2:	bf00      	nop
   29da4:	20002808 	.word	0x20002808
   29da8:	e000ed00 	.word	0xe000ed00

00029dac <k_poll_event_init>:
{
   29dac:	b430      	push	{r4, r5}
	event->poller = NULL;
   29dae:	2500      	movs	r5, #0
   29db0:	6085      	str	r5, [r0, #8]
	event->type = type;
   29db2:	7b44      	ldrb	r4, [r0, #13]
   29db4:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   29db8:	f365 1407 	bfi	r4, r5, #4, #4
   29dbc:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   29dbe:	7b81      	ldrb	r1, [r0, #14]
   29dc0:	f362 0100 	bfi	r1, r2, #0, #1
   29dc4:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   29dc6:	89c2      	ldrh	r2, [r0, #14]
   29dc8:	f365 024f 	bfi	r2, r5, #1, #15
   29dcc:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   29dce:	6103      	str	r3, [r0, #16]
}
   29dd0:	bc30      	pop	{r4, r5}
   29dd2:	4770      	bx	lr

00029dd4 <k_poll>:
{
   29dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29dd8:	b085      	sub	sp, #20
   29dda:	4691      	mov	r9, r2
	__asm__ volatile(
   29ddc:	f04f 0320 	mov.w	r3, #32
   29de0:	f3ef 8511 	mrs	r5, BASEPRI
   29de4:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   29de8:	4ab7      	ldr	r2, [pc, #732]	; (2a0c8 <k_poll+0x2f4>)
   29dea:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   29dec:	7a63      	ldrb	r3, [r4, #9]
   29dee:	f043 0320 	orr.w	r3, r3, #32
   29df2:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29df4:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   29df8:	6893      	ldr	r3, [r2, #8]
   29dfa:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   29dfc:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   29dfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   29e02:	e01e      	b.n	29e42 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   29e04:	6917      	ldr	r7, [r2, #16]
   29e06:	68bf      	ldr	r7, [r7, #8]
   29e08:	b14f      	cbz	r7, 29e1e <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   29e0a:	f04f 0e02 	mov.w	lr, #2
			return 1;
   29e0e:	2701      	movs	r7, #1
   29e10:	e005      	b.n	29e1e <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   29e12:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   29e14:	683f      	ldr	r7, [r7, #0]
   29e16:	b117      	cbz	r7, 29e1e <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   29e18:	f04f 0e04 	mov.w	lr, #4
			return 1;
   29e1c:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   29e1e:	b387      	cbz	r7, 29e82 <k_poll+0xae>
	event->poller = NULL;
   29e20:	2500      	movs	r5, #0
   29e22:	6095      	str	r5, [r2, #8]
	event->state |= state;
   29e24:	7b55      	ldrb	r5, [r2, #13]
   29e26:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   29e2a:	f367 1507 	bfi	r5, r7, #4, #4
   29e2e:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   29e30:	4aa5      	ldr	r2, [pc, #660]	; (2a0c8 <k_poll+0x2f4>)
   29e32:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   29e34:	7a6a      	ldrb	r2, [r5, #9]
   29e36:	f022 0220 	bic.w	r2, r2, #32
   29e3a:	726a      	strb	r2, [r5, #9]
   29e3c:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   29e40:	3301      	adds	r3, #1
   29e42:	428b      	cmp	r3, r1
   29e44:	f280 8191 	bge.w	2a16a <k_poll+0x396>
	__asm__ volatile(
   29e48:	f04f 0220 	mov.w	r2, #32
   29e4c:	f3ef 8611 	mrs	r6, BASEPRI
   29e50:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   29e54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   29e58:	0095      	lsls	r5, r2, #2
   29e5a:	1942      	adds	r2, r0, r5
	switch (event->type) {
   29e5c:	7b57      	ldrb	r7, [r2, #13]
   29e5e:	f007 070f 	and.w	r7, r7, #15
   29e62:	2f02      	cmp	r7, #2
   29e64:	d0ce      	beq.n	29e04 <k_poll+0x30>
   29e66:	2f04      	cmp	r7, #4
   29e68:	d0d3      	beq.n	29e12 <k_poll+0x3e>
   29e6a:	2f01      	cmp	r7, #1
   29e6c:	d001      	beq.n	29e72 <k_poll+0x9e>
		return 0;
   29e6e:	2700      	movs	r7, #0
   29e70:	e7d5      	b.n	29e1e <k_poll+0x4a>
		if (event->signal->signaled) {
   29e72:	6917      	ldr	r7, [r2, #16]
   29e74:	68bf      	ldr	r7, [r7, #8]
   29e76:	2f00      	cmp	r7, #0
   29e78:	d0d1      	beq.n	29e1e <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   29e7a:	f04f 0e01 	mov.w	lr, #1
			return 1;
   29e7e:	4677      	mov	r7, lr
   29e80:	e7cd      	b.n	29e1e <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   29e82:	f1b9 0f00 	cmp.w	r9, #0
   29e86:	d0d9      	beq.n	29e3c <k_poll+0x68>
	return _is_thread_polling(_current);
   29e88:	4f8f      	ldr	r7, [pc, #572]	; (2a0c8 <k_poll+0x2f4>)
   29e8a:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   29e8c:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   29e8e:	f017 0f20 	tst.w	r7, #32
   29e92:	d0d3      	beq.n	29e3c <k_poll+0x68>
	switch (event->type) {
   29e94:	7b57      	ldrb	r7, [r2, #13]
   29e96:	f007 070f 	and.w	r7, r7, #15
   29e9a:	2f02      	cmp	r7, #2
   29e9c:	d008      	beq.n	29eb0 <k_poll+0xdc>
   29e9e:	2f04      	cmp	r7, #4
   29ea0:	d07a      	beq.n	29f98 <k_poll+0x1c4>
   29ea2:	2f01      	cmp	r7, #1
   29ea4:	f000 80ec 	beq.w	2a080 <k_poll+0x2ac>
	event->poller = poller;
   29ea8:	ad03      	add	r5, sp, #12
   29eaa:	6095      	str	r5, [r2, #8]
				++last_registered;
   29eac:	3401      	adds	r4, #1
   29eae:	e7c5      	b.n	29e3c <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   29eb0:	6917      	ldr	r7, [r2, #16]
   29eb2:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   29eb6:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29eba:	45c4      	cmp	ip, r8
   29ebc:	d010      	beq.n	29ee0 <k_poll+0x10c>
   29ebe:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   29ec2:	b17f      	cbz	r7, 29ee4 <k_poll+0x110>
   29ec4:	68bf      	ldr	r7, [r7, #8]
   29ec6:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   29ec8:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   29ecc:	9f03      	ldr	r7, [sp, #12]
   29ece:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   29ed2:	45da      	cmp	sl, fp
   29ed4:	db06      	blt.n	29ee4 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29ed6:	45c4      	cmp	ip, r8
   29ed8:	d12e      	bne.n	29f38 <k_poll+0x164>
   29eda:	f04f 0800 	mov.w	r8, #0
   29ede:	e02b      	b.n	29f38 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29ee0:	2700      	movs	r7, #0
   29ee2:	e7ee      	b.n	29ec2 <k_poll+0xee>
	node->next = list;
   29ee4:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   29ee8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29eec:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29eee:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29ef2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29ef4:	f8cc 2004 	str.w	r2, [ip, #4]
   29ef8:	e7d6      	b.n	29ea8 <k_poll+0xd4>
	if (!insert_point) {
   29efa:	f1b8 0f00 	cmp.w	r8, #0
   29efe:	d00a      	beq.n	29f16 <k_poll+0x142>
		node->prev = insert_point->prev;
   29f00:	f8d8 7004 	ldr.w	r7, [r8, #4]
   29f04:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   29f06:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   29f0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   29f0e:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   29f10:	f8c8 2004 	str.w	r2, [r8, #4]
   29f14:	e7c8      	b.n	29ea8 <k_poll+0xd4>
	node->next = list;
   29f16:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   29f1a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29f1e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29f20:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29f24:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29f26:	f8cc 2004 	str.w	r2, [ip, #4]
   29f2a:	e7bd      	b.n	29ea8 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f2c:	4647      	mov	r7, r8
   29f2e:	e017      	b.n	29f60 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   29f30:	2700      	movs	r7, #0
   29f32:	e015      	b.n	29f60 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f34:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29f38:	f1b8 0f00 	cmp.w	r8, #0
   29f3c:	d021      	beq.n	29f82 <k_poll+0x1ae>
					       pending->poller->thread)) {
   29f3e:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   29f42:	683f      	ldr	r7, [r7, #0]
   29f44:	f997 700a 	ldrsb.w	r7, [r7, #10]
   29f48:	45bb      	cmp	fp, r7
   29f4a:	dbd6      	blt.n	29efa <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29f4c:	46c2      	mov	sl, r8
   29f4e:	f1b8 0f00 	cmp.w	r8, #0
   29f52:	d0eb      	beq.n	29f2c <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   29f54:	f8dc 7004 	ldr.w	r7, [ip, #4]
   29f58:	45b8      	cmp	r8, r7
   29f5a:	d0e9      	beq.n	29f30 <k_poll+0x15c>
   29f5c:	f8d8 7000 	ldr.w	r7, [r8]
   29f60:	b167      	cbz	r7, 29f7c <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f62:	f1ba 0f00 	cmp.w	sl, #0
   29f66:	d0e5      	beq.n	29f34 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   29f68:	f8dc 7004 	ldr.w	r7, [ip, #4]
   29f6c:	45ba      	cmp	sl, r7
   29f6e:	d002      	beq.n	29f76 <k_poll+0x1a2>
   29f70:	f8d8 8000 	ldr.w	r8, [r8]
   29f74:	e7e0      	b.n	29f38 <k_poll+0x164>
   29f76:	f04f 0800 	mov.w	r8, #0
   29f7a:	e7dd      	b.n	29f38 <k_poll+0x164>
   29f7c:	f04f 0800 	mov.w	r8, #0
   29f80:	e7da      	b.n	29f38 <k_poll+0x164>
	node->next = list;
   29f82:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   29f86:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29f8a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29f8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29f90:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29f92:	f8cc 2004 	str.w	r2, [ip, #4]
   29f96:	e787      	b.n	29ea8 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   29f98:	6917      	ldr	r7, [r2, #16]
   29f9a:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   29f9e:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29fa2:	45c4      	cmp	ip, r8
   29fa4:	d010      	beq.n	29fc8 <k_poll+0x1f4>
   29fa6:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   29faa:	b17f      	cbz	r7, 29fcc <k_poll+0x1f8>
   29fac:	68bf      	ldr	r7, [r7, #8]
   29fae:	683f      	ldr	r7, [r7, #0]
   29fb0:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   29fb4:	9f03      	ldr	r7, [sp, #12]
   29fb6:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   29fba:	45da      	cmp	sl, fp
   29fbc:	db06      	blt.n	29fcc <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29fbe:	45c4      	cmp	ip, r8
   29fc0:	d12e      	bne.n	2a020 <k_poll+0x24c>
   29fc2:	f04f 0800 	mov.w	r8, #0
   29fc6:	e02b      	b.n	2a020 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29fc8:	2700      	movs	r7, #0
   29fca:	e7ee      	b.n	29faa <k_poll+0x1d6>
	node->next = list;
   29fcc:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   29fd0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29fd4:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   29fd6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   29fda:	602a      	str	r2, [r5, #0]
	list->tail = node;
   29fdc:	f8cc 2004 	str.w	r2, [ip, #4]
   29fe0:	e762      	b.n	29ea8 <k_poll+0xd4>
	if (!insert_point) {
   29fe2:	f1b8 0f00 	cmp.w	r8, #0
   29fe6:	d00a      	beq.n	29ffe <k_poll+0x22a>
		node->prev = insert_point->prev;
   29fe8:	f8d8 7004 	ldr.w	r7, [r8, #4]
   29fec:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   29fee:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   29ff2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   29ff6:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   29ff8:	f8c8 2004 	str.w	r2, [r8, #4]
   29ffc:	e754      	b.n	29ea8 <k_poll+0xd4>
	node->next = list;
   29ffe:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2a002:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a006:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2a008:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a00c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a00e:	f8cc 2004 	str.w	r2, [ip, #4]
   2a012:	e749      	b.n	29ea8 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a014:	4647      	mov	r7, r8
   2a016:	e017      	b.n	2a048 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   2a018:	2700      	movs	r7, #0
   2a01a:	e015      	b.n	2a048 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a01c:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a020:	f1b8 0f00 	cmp.w	r8, #0
   2a024:	d021      	beq.n	2a06a <k_poll+0x296>
					       pending->poller->thread)) {
   2a026:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2a02a:	683f      	ldr	r7, [r7, #0]
   2a02c:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2a030:	45bb      	cmp	fp, r7
   2a032:	dbd6      	blt.n	29fe2 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a034:	46c2      	mov	sl, r8
   2a036:	f1b8 0f00 	cmp.w	r8, #0
   2a03a:	d0eb      	beq.n	2a014 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   2a03c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2a040:	45b8      	cmp	r8, r7
   2a042:	d0e9      	beq.n	2a018 <k_poll+0x244>
   2a044:	f8d8 7000 	ldr.w	r7, [r8]
   2a048:	b167      	cbz	r7, 2a064 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a04a:	f1ba 0f00 	cmp.w	sl, #0
   2a04e:	d0e5      	beq.n	2a01c <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   2a050:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2a054:	45ba      	cmp	sl, r7
   2a056:	d002      	beq.n	2a05e <k_poll+0x28a>
   2a058:	f8d8 8000 	ldr.w	r8, [r8]
   2a05c:	e7e0      	b.n	2a020 <k_poll+0x24c>
   2a05e:	f04f 0800 	mov.w	r8, #0
   2a062:	e7dd      	b.n	2a020 <k_poll+0x24c>
   2a064:	f04f 0800 	mov.w	r8, #0
   2a068:	e7da      	b.n	2a020 <k_poll+0x24c>
	node->next = list;
   2a06a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2a06e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a072:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2a074:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a078:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a07a:	f8cc 2004 	str.w	r2, [ip, #4]
   2a07e:	e713      	b.n	29ea8 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   2a080:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   2a084:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a088:	45c4      	cmp	ip, r8
   2a08a:	d010      	beq.n	2a0ae <k_poll+0x2da>
   2a08c:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2a090:	b17f      	cbz	r7, 2a0b2 <k_poll+0x2de>
   2a092:	68bf      	ldr	r7, [r7, #8]
   2a094:	683f      	ldr	r7, [r7, #0]
   2a096:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   2a09a:	9f03      	ldr	r7, [sp, #12]
   2a09c:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   2a0a0:	45da      	cmp	sl, fp
   2a0a2:	db06      	blt.n	2a0b2 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a0a4:	45c4      	cmp	ip, r8
   2a0a6:	d130      	bne.n	2a10a <k_poll+0x336>
   2a0a8:	f04f 0800 	mov.w	r8, #0
   2a0ac:	e02d      	b.n	2a10a <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a0ae:	2700      	movs	r7, #0
   2a0b0:	e7ee      	b.n	2a090 <k_poll+0x2bc>
	node->next = list;
   2a0b2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2a0b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a0ba:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2a0bc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a0c0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a0c2:	f8cc 2004 	str.w	r2, [ip, #4]
   2a0c6:	e6ef      	b.n	29ea8 <k_poll+0xd4>
   2a0c8:	20002808 	.word	0x20002808
	if (!insert_point) {
   2a0cc:	f1b8 0f00 	cmp.w	r8, #0
   2a0d0:	d00a      	beq.n	2a0e8 <k_poll+0x314>
		node->prev = insert_point->prev;
   2a0d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   2a0d6:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2a0d8:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   2a0dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2a0e0:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   2a0e2:	f8c8 2004 	str.w	r2, [r8, #4]
   2a0e6:	e6df      	b.n	29ea8 <k_poll+0xd4>
	node->next = list;
   2a0e8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2a0ec:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a0f0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2a0f2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a0f6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a0f8:	f8cc 2004 	str.w	r2, [ip, #4]
   2a0fc:	e6d4      	b.n	29ea8 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a0fe:	4647      	mov	r7, r8
   2a100:	e017      	b.n	2a132 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   2a102:	2700      	movs	r7, #0
   2a104:	e015      	b.n	2a132 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a106:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a10a:	f1b8 0f00 	cmp.w	r8, #0
   2a10e:	d021      	beq.n	2a154 <k_poll+0x380>
					       pending->poller->thread)) {
   2a110:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2a114:	683f      	ldr	r7, [r7, #0]
   2a116:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2a11a:	45bb      	cmp	fp, r7
   2a11c:	dbd6      	blt.n	2a0cc <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a11e:	46c2      	mov	sl, r8
   2a120:	f1b8 0f00 	cmp.w	r8, #0
   2a124:	d0eb      	beq.n	2a0fe <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   2a126:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2a12a:	45b8      	cmp	r8, r7
   2a12c:	d0e9      	beq.n	2a102 <k_poll+0x32e>
   2a12e:	f8d8 7000 	ldr.w	r7, [r8]
   2a132:	b167      	cbz	r7, 2a14e <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a134:	f1ba 0f00 	cmp.w	sl, #0
   2a138:	d0e5      	beq.n	2a106 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   2a13a:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2a13e:	45ba      	cmp	sl, r7
   2a140:	d002      	beq.n	2a148 <k_poll+0x374>
   2a142:	f8d8 8000 	ldr.w	r8, [r8]
   2a146:	e7e0      	b.n	2a10a <k_poll+0x336>
   2a148:	f04f 0800 	mov.w	r8, #0
   2a14c:	e7dd      	b.n	2a10a <k_poll+0x336>
   2a14e:	f04f 0800 	mov.w	r8, #0
   2a152:	e7da      	b.n	2a10a <k_poll+0x336>
	node->next = list;
   2a154:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2a158:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a15c:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2a15e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2a162:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a164:	f8cc 2004 	str.w	r2, [ip, #4]
   2a168:	e69e      	b.n	29ea8 <k_poll+0xd4>
   2a16a:	f04f 0320 	mov.w	r3, #32
   2a16e:	f3ef 8511 	mrs	r5, BASEPRI
   2a172:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   2a176:	4b46      	ldr	r3, [pc, #280]	; (2a290 <k_poll+0x4bc>)
   2a178:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   2a17a:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   2a17c:	f013 0f20 	tst.w	r3, #32
   2a180:	d047      	beq.n	2a212 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   2a182:	f023 0320 	bic.w	r3, r3, #32
   2a186:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2a188:	f1b9 0f00 	cmp.w	r9, #0
   2a18c:	d049      	beq.n	2a222 <k_poll+0x44e>
   2a18e:	4649      	mov	r1, r9
   2a190:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2a192:	a801      	add	r0, sp, #4
   2a194:	9001      	str	r0, [sp, #4]
   2a196:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   2a198:	f000 fab4 	bl	2a704 <_pend_current_thread>
	_update_time_slice_before_swap();
   2a19c:	f000 fb30 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a1a0:	4628      	mov	r0, r5
   2a1a2:	f7fe fe73 	bl	28e8c <__swap>
   2a1a6:	f04f 0320 	mov.w	r3, #32
   2a1aa:	f3ef 8e11 	mrs	lr, BASEPRI
   2a1ae:	f383 8811 	msr	BASEPRI, r3
   2a1b2:	4675      	mov	r5, lr
   2a1b4:	e049      	b.n	2a24a <k_poll+0x476>
	node->prev->next = node->next;
   2a1b6:	6853      	ldr	r3, [r2, #4]
   2a1b8:	5847      	ldr	r7, [r0, r1]
   2a1ba:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a1bc:	5843      	ldr	r3, [r0, r1]
   2a1be:	6852      	ldr	r2, [r2, #4]
   2a1c0:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a1c2:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   2a1c6:	f04f 0320 	mov.w	r3, #32
   2a1ca:	f3ef 8611 	mrs	r6, BASEPRI
   2a1ce:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2a1d2:	3c01      	subs	r4, #1
   2a1d4:	2c00      	cmp	r4, #0
   2a1d6:	db1e      	blt.n	2a216 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   2a1d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a1dc:	0099      	lsls	r1, r3, #2
   2a1de:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   2a1e0:	2300      	movs	r3, #0
   2a1e2:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   2a1e4:	7b53      	ldrb	r3, [r2, #13]
   2a1e6:	f003 030f 	and.w	r3, r3, #15
   2a1ea:	2b02      	cmp	r3, #2
   2a1ec:	d0e3      	beq.n	2a1b6 <k_poll+0x3e2>
   2a1ee:	2b04      	cmp	r3, #4
   2a1f0:	d008      	beq.n	2a204 <k_poll+0x430>
   2a1f2:	2b01      	cmp	r3, #1
   2a1f4:	d1e5      	bne.n	2a1c2 <k_poll+0x3ee>
	node->prev->next = node->next;
   2a1f6:	6853      	ldr	r3, [r2, #4]
   2a1f8:	5847      	ldr	r7, [r0, r1]
   2a1fa:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a1fc:	5843      	ldr	r3, [r0, r1]
   2a1fe:	6852      	ldr	r2, [r2, #4]
   2a200:	605a      	str	r2, [r3, #4]
   2a202:	e7de      	b.n	2a1c2 <k_poll+0x3ee>
	node->prev->next = node->next;
   2a204:	6853      	ldr	r3, [r2, #4]
   2a206:	5847      	ldr	r7, [r0, r1]
   2a208:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a20a:	5843      	ldr	r3, [r0, r1]
   2a20c:	6852      	ldr	r2, [r2, #4]
   2a20e:	605a      	str	r2, [r3, #4]
   2a210:	e7d7      	b.n	2a1c2 <k_poll+0x3ee>
   2a212:	462e      	mov	r6, r5
   2a214:	e7de      	b.n	2a1d4 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a216:	f385 8811 	msr	BASEPRI, r5
		return 0;
   2a21a:	2000      	movs	r0, #0
}
   2a21c:	b005      	add	sp, #20
   2a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a222:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   2a226:	f06f 000a 	mvn.w	r0, #10
   2a22a:	e7f7      	b.n	2a21c <k_poll+0x448>
	node->prev->next = node->next;
   2a22c:	6853      	ldr	r3, [r2, #4]
   2a22e:	5877      	ldr	r7, [r6, r1]
   2a230:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a232:	5873      	ldr	r3, [r6, r1]
   2a234:	6852      	ldr	r2, [r2, #4]
   2a236:	605a      	str	r2, [r3, #4]
   2a238:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   2a23c:	f04f 0320 	mov.w	r3, #32
   2a240:	f3ef 8511 	mrs	r5, BASEPRI
   2a244:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2a248:	3c01      	subs	r4, #1
   2a24a:	2c00      	cmp	r4, #0
   2a24c:	db1c      	blt.n	2a288 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   2a24e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2a252:	0099      	lsls	r1, r3, #2
   2a254:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   2a256:	2300      	movs	r3, #0
   2a258:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   2a25a:	7b53      	ldrb	r3, [r2, #13]
   2a25c:	f003 030f 	and.w	r3, r3, #15
   2a260:	2b02      	cmp	r3, #2
   2a262:	d0e3      	beq.n	2a22c <k_poll+0x458>
   2a264:	2b04      	cmp	r3, #4
   2a266:	d008      	beq.n	2a27a <k_poll+0x4a6>
   2a268:	2b01      	cmp	r3, #1
   2a26a:	d1e5      	bne.n	2a238 <k_poll+0x464>
	node->prev->next = node->next;
   2a26c:	6853      	ldr	r3, [r2, #4]
   2a26e:	5877      	ldr	r7, [r6, r1]
   2a270:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a272:	5873      	ldr	r3, [r6, r1]
   2a274:	6852      	ldr	r2, [r2, #4]
   2a276:	605a      	str	r2, [r3, #4]
   2a278:	e7de      	b.n	2a238 <k_poll+0x464>
	node->prev->next = node->next;
   2a27a:	6853      	ldr	r3, [r2, #4]
   2a27c:	5877      	ldr	r7, [r6, r1]
   2a27e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2a280:	5873      	ldr	r3, [r6, r1]
   2a282:	6852      	ldr	r2, [r2, #4]
   2a284:	605a      	str	r2, [r3, #4]
   2a286:	e7d7      	b.n	2a238 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a288:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   2a28c:	e7c6      	b.n	2a21c <k_poll+0x448>
   2a28e:	bf00      	nop
   2a290:	20002808 	.word	0x20002808

0002a294 <_handle_obj_poll_events>:
	return list->head == list;
   2a294:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   2a296:	4298      	cmp	r0, r3
   2a298:	d010      	beq.n	2a2bc <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   2a29a:	685a      	ldr	r2, [r3, #4]
   2a29c:	6818      	ldr	r0, [r3, #0]
   2a29e:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2a2a0:	681a      	ldr	r2, [r3, #0]
   2a2a2:	6858      	ldr	r0, [r3, #4]
   2a2a4:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   2a2a6:	b15b      	cbz	r3, 2a2c0 <_handle_obj_poll_events+0x2c>
{
   2a2a8:	b500      	push	{lr}
   2a2aa:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   2a2ac:	aa01      	add	r2, sp, #4
   2a2ae:	4618      	mov	r0, r3
   2a2b0:	f7ff fcfe 	bl	29cb0 <_signal_poll_event>
	return must_reschedule;
   2a2b4:	9801      	ldr	r0, [sp, #4]
}
   2a2b6:	b003      	add	sp, #12
   2a2b8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   2a2bc:	2300      	movs	r3, #0
   2a2be:	e7f2      	b.n	2a2a6 <_handle_obj_poll_events+0x12>
		return 0;
   2a2c0:	2000      	movs	r0, #0
   2a2c2:	4770      	bx	lr

0002a2c4 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   2a2c4:	b530      	push	{r4, r5, lr}
   2a2c6:	b083      	sub	sp, #12
	__asm__ volatile(
   2a2c8:	f04f 0320 	mov.w	r3, #32
   2a2cc:	f3ef 8511 	mrs	r5, BASEPRI
   2a2d0:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   2a2d4:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   2a2d6:	2301      	movs	r3, #1
   2a2d8:	6083      	str	r3, [r0, #8]
	return list->head == list;
   2a2da:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   2a2dc:	4298      	cmp	r0, r3
   2a2de:	d013      	beq.n	2a308 <k_poll_signal+0x44>
	node->prev->next = node->next;
   2a2e0:	685a      	ldr	r2, [r3, #4]
   2a2e2:	6819      	ldr	r1, [r3, #0]
   2a2e4:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2a2e6:	681a      	ldr	r2, [r3, #0]
   2a2e8:	6859      	ldr	r1, [r3, #4]
   2a2ea:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   2a2ec:	b173      	cbz	r3, 2a30c <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   2a2ee:	aa01      	add	r2, sp, #4
   2a2f0:	2101      	movs	r1, #1
   2a2f2:	4618      	mov	r0, r3
   2a2f4:	f7ff fcdc 	bl	29cb0 <_signal_poll_event>
   2a2f8:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   2a2fa:	9b01      	ldr	r3, [sp, #4]
   2a2fc:	b953      	cbnz	r3, 2a314 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a2fe:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   2a302:	4620      	mov	r0, r4
   2a304:	b003      	add	sp, #12
   2a306:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2a308:	2300      	movs	r3, #0
   2a30a:	e7ef      	b.n	2a2ec <k_poll_signal+0x28>
   2a30c:	f385 8811 	msr	BASEPRI, r5
		return 0;
   2a310:	2400      	movs	r4, #0
   2a312:	e7f6      	b.n	2a302 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   2a314:	f000 fa74 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a318:	4628      	mov	r0, r5
   2a31a:	f7fe fdb7 	bl	28e8c <__swap>
   2a31e:	e7f0      	b.n	2a302 <k_poll_signal+0x3e>

0002a320 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   2a320:	b530      	push	{r4, r5, lr}
   2a322:	b087      	sub	sp, #28
   2a324:	4604      	mov	r4, r0
   2a326:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2a328:	4603      	mov	r3, r0
   2a32a:	2200      	movs	r2, #0
   2a32c:	2104      	movs	r1, #4
   2a32e:	eb0d 0001 	add.w	r0, sp, r1
   2a332:	f7ff fd3b 	bl	29dac <k_poll_event_init>
   2a336:	e005      	b.n	2a344 <k_queue_poll+0x24>
   2a338:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   2a33c:	b9f8      	cbnz	r0, 2a37e <k_queue_poll+0x5e>
   2a33e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2a342:	d11c      	bne.n	2a37e <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   2a344:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2a348:	f36f 1307 	bfc	r3, #4, #4
   2a34c:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   2a350:	462a      	mov	r2, r5
   2a352:	2101      	movs	r1, #1
   2a354:	a801      	add	r0, sp, #4
   2a356:	f7ff fd3d 	bl	29dd4 <k_poll>
		if (err) {
   2a35a:	b978      	cbnz	r0, 2a37c <k_queue_poll+0x5c>
	__asm__ volatile(
   2a35c:	f04f 0220 	mov.w	r2, #32
   2a360:	f3ef 8311 	mrs	r3, BASEPRI
   2a364:	f382 8811 	msr	BASEPRI, r2
   2a368:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   2a36a:	2800      	cmp	r0, #0
   2a36c:	d0e4      	beq.n	2a338 <k_queue_poll+0x18>
	list->head = node->next;
   2a36e:	6802      	ldr	r2, [r0, #0]
   2a370:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   2a372:	6861      	ldr	r1, [r4, #4]
   2a374:	4288      	cmp	r0, r1
   2a376:	d1df      	bne.n	2a338 <k_queue_poll+0x18>
		list->tail = list->head;
   2a378:	6062      	str	r2, [r4, #4]
   2a37a:	e7dd      	b.n	2a338 <k_queue_poll+0x18>
			return NULL;
   2a37c:	2000      	movs	r0, #0

	return val;
}
   2a37e:	b007      	add	sp, #28
   2a380:	bd30      	pop	{r4, r5, pc}

0002a382 <k_queue_init>:
	list->head = NULL;
   2a382:	2300      	movs	r3, #0
   2a384:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2a386:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   2a388:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2a38c:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2a38e:	60c3      	str	r3, [r0, #12]
   2a390:	4770      	bx	lr

0002a392 <k_queue_insert>:
{
   2a392:	b510      	push	{r4, lr}
   2a394:	f04f 0320 	mov.w	r3, #32
   2a398:	f3ef 8411 	mrs	r4, BASEPRI
   2a39c:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   2a3a0:	b159      	cbz	r1, 2a3ba <k_queue_insert+0x28>
	} else if (!prev->next) {
   2a3a2:	680b      	ldr	r3, [r1, #0]
   2a3a4:	b18b      	cbz	r3, 2a3ca <k_queue_insert+0x38>
		node->next = prev->next;
   2a3a6:	6013      	str	r3, [r2, #0]
		prev->next = node;
   2a3a8:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2a3aa:	2104      	movs	r1, #4
   2a3ac:	3008      	adds	r0, #8
   2a3ae:	f7ff ff71 	bl	2a294 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2a3b2:	b998      	cbnz	r0, 2a3dc <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a3b4:	f384 8811 	msr	BASEPRI, r4
   2a3b8:	bd10      	pop	{r4, pc}
	node->next = list->head;
   2a3ba:	6803      	ldr	r3, [r0, #0]
   2a3bc:	6013      	str	r3, [r2, #0]
	list->head = node;
   2a3be:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   2a3c0:	6843      	ldr	r3, [r0, #4]
   2a3c2:	2b00      	cmp	r3, #0
   2a3c4:	d1f1      	bne.n	2a3aa <k_queue_insert+0x18>
		list->tail = list->head;
   2a3c6:	6042      	str	r2, [r0, #4]
   2a3c8:	e7ef      	b.n	2a3aa <k_queue_insert+0x18>
	node->next = NULL;
   2a3ca:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   2a3cc:	6843      	ldr	r3, [r0, #4]
   2a3ce:	b113      	cbz	r3, 2a3d6 <k_queue_insert+0x44>
		list->tail->next = node;
   2a3d0:	601a      	str	r2, [r3, #0]
		list->tail = node;
   2a3d2:	6042      	str	r2, [r0, #4]
   2a3d4:	e7e9      	b.n	2a3aa <k_queue_insert+0x18>
		list->tail = node;
   2a3d6:	6042      	str	r2, [r0, #4]
		list->head = node;
   2a3d8:	6002      	str	r2, [r0, #0]
   2a3da:	e7e6      	b.n	2a3aa <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   2a3dc:	f000 fa10 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a3e0:	4620      	mov	r0, r4
   2a3e2:	f7fe fd53 	bl	28e8c <__swap>
   2a3e6:	bd10      	pop	{r4, pc}

0002a3e8 <k_queue_append>:
{
   2a3e8:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   2a3ea:	460a      	mov	r2, r1
   2a3ec:	6841      	ldr	r1, [r0, #4]
   2a3ee:	f7ff ffd0 	bl	2a392 <k_queue_insert>
   2a3f2:	bd08      	pop	{r3, pc}

0002a3f4 <k_queue_prepend>:
{
   2a3f4:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   2a3f6:	460a      	mov	r2, r1
   2a3f8:	2100      	movs	r1, #0
   2a3fa:	f7ff ffca 	bl	2a392 <k_queue_insert>
   2a3fe:	bd08      	pop	{r3, pc}

0002a400 <k_queue_append_list>:
{
   2a400:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a402:	f04f 0320 	mov.w	r3, #32
   2a406:	f3ef 8411 	mrs	r4, BASEPRI
   2a40a:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   2a40e:	6843      	ldr	r3, [r0, #4]
   2a410:	b14b      	cbz	r3, 2a426 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   2a412:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   2a414:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2a416:	2104      	movs	r1, #4
   2a418:	3008      	adds	r0, #8
   2a41a:	f7ff ff3b 	bl	2a294 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2a41e:	b928      	cbnz	r0, 2a42c <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a420:	f384 8811 	msr	BASEPRI, r4
   2a424:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   2a426:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   2a428:	6042      	str	r2, [r0, #4]
   2a42a:	e7f4      	b.n	2a416 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   2a42c:	f000 f9e8 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a430:	4620      	mov	r0, r4
   2a432:	f7fe fd2b 	bl	28e8c <__swap>
   2a436:	bd10      	pop	{r4, pc}

0002a438 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2a438:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a43a:	f04f 0320 	mov.w	r3, #32
   2a43e:	f3ef 8211 	mrs	r2, BASEPRI
   2a442:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   2a446:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   2a448:	b153      	cbz	r3, 2a460 <k_queue_get+0x28>
	list->head = node->next;
   2a44a:	6819      	ldr	r1, [r3, #0]
   2a44c:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   2a44e:	6844      	ldr	r4, [r0, #4]
   2a450:	42a3      	cmp	r3, r4
   2a452:	d003      	beq.n	2a45c <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a454:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   2a458:	4618      	mov	r0, r3
   2a45a:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   2a45c:	6041      	str	r1, [r0, #4]
   2a45e:	e7f9      	b.n	2a454 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   2a460:	b121      	cbz	r1, 2a46c <k_queue_get+0x34>
   2a462:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   2a466:	f7ff ff5b 	bl	2a320 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2a46a:	bd10      	pop	{r4, pc}
   2a46c:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   2a470:	2000      	movs	r0, #0
   2a472:	bd10      	pop	{r4, pc}

0002a474 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   2a474:	3010      	adds	r0, #16
   2a476:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   2a478:	f000 001f 	and.w	r0, r0, #31
   2a47c:	2201      	movs	r2, #1
   2a47e:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   2a482:	1d9a      	adds	r2, r3, #6
   2a484:	4b03      	ldr	r3, [pc, #12]	; (2a494 <_set_ready_q_prio_bit+0x20>)
   2a486:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2a48a:	685a      	ldr	r2, [r3, #4]
   2a48c:	4302      	orrs	r2, r0
   2a48e:	605a      	str	r2, [r3, #4]
   2a490:	4770      	bx	lr
   2a492:	bf00      	nop
   2a494:	20002808 	.word	0x20002808

0002a498 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   2a498:	3010      	adds	r0, #16
   2a49a:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   2a49c:	f000 001f 	and.w	r0, r0, #31
   2a4a0:	2201      	movs	r2, #1
   2a4a2:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   2a4a6:	1d9a      	adds	r2, r3, #6
   2a4a8:	4b03      	ldr	r3, [pc, #12]	; (2a4b8 <_clear_ready_q_prio_bit+0x20>)
   2a4aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2a4ae:	685a      	ldr	r2, [r3, #4]
   2a4b0:	ea22 0200 	bic.w	r2, r2, r0
   2a4b4:	605a      	str	r2, [r3, #4]
   2a4b6:	4770      	bx	lr
   2a4b8:	20002808 	.word	0x20002808

0002a4bc <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   2a4bc:	4b06      	ldr	r3, [pc, #24]	; (2a4d8 <_get_ready_q_head+0x1c>)
   2a4be:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   2a4c0:	fa92 f3a2 	rbit	r3, r2
   2a4c4:	fab3 f383 	clz	r3, r3
   2a4c8:	b90a      	cbnz	r2, 2a4ce <_get_ready_q_head+0x12>
   2a4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   2a4ce:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   2a4d0:	4a01      	ldr	r2, [pc, #4]	; (2a4d8 <_get_ready_q_head+0x1c>)
   2a4d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   2a4d6:	4770      	bx	lr
   2a4d8:	20002808 	.word	0x20002808

0002a4dc <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   2a4dc:	b570      	push	{r4, r5, r6, lr}
   2a4de:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2a4e0:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2a4e4:	4e0c      	ldr	r6, [pc, #48]	; (2a518 <_add_thread_to_ready_q+0x3c>)
   2a4e6:	f100 0514 	add.w	r5, r0, #20
   2a4ea:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   2a4ee:	f7ff ffc1 	bl	2a474 <_set_ready_q_prio_bit>
	node->next = list;
   2a4f2:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   2a4f4:	686b      	ldr	r3, [r5, #4]
   2a4f6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2a4f8:	686b      	ldr	r3, [r5, #4]
   2a4fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a4fc:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   2a4fe:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   2a500:	f994 200a 	ldrsb.w	r2, [r4, #10]
   2a504:	f993 100a 	ldrsb.w	r1, [r3, #10]
   2a508:	4291      	cmp	r1, r2
   2a50a:	dc02      	bgt.n	2a512 <_add_thread_to_ready_q+0x36>
   2a50c:	4a02      	ldr	r2, [pc, #8]	; (2a518 <_add_thread_to_ready_q+0x3c>)
   2a50e:	6193      	str	r3, [r2, #24]
   2a510:	bd70      	pop	{r4, r5, r6, pc}
   2a512:	4623      	mov	r3, r4
   2a514:	e7fa      	b.n	2a50c <_add_thread_to_ready_q+0x30>
   2a516:	bf00      	nop
   2a518:	20002808 	.word	0x20002808

0002a51c <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   2a51c:	b538      	push	{r3, r4, r5, lr}
   2a51e:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2a520:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2a524:	4a0e      	ldr	r2, [pc, #56]	; (2a560 <_remove_thread_from_ready_q+0x44>)
   2a526:	3314      	adds	r3, #20
   2a528:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   2a52c:	6840      	ldr	r0, [r0, #4]
   2a52e:	6825      	ldr	r5, [r4, #0]
   2a530:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   2a532:	6820      	ldr	r0, [r4, #0]
   2a534:	6865      	ldr	r5, [r4, #4]
   2a536:	6045      	str	r5, [r0, #4]
	return list->head == list;
   2a538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   2a53c:	4299      	cmp	r1, r3
   2a53e:	d006      	beq.n	2a54e <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2a540:	4b07      	ldr	r3, [pc, #28]	; (2a560 <_remove_thread_from_ready_q+0x44>)
   2a542:	6998      	ldr	r0, [r3, #24]
   2a544:	4284      	cmp	r4, r0
   2a546:	d007      	beq.n	2a558 <_remove_thread_from_ready_q+0x3c>
   2a548:	4b05      	ldr	r3, [pc, #20]	; (2a560 <_remove_thread_from_ready_q+0x44>)
   2a54a:	6198      	str	r0, [r3, #24]
   2a54c:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   2a54e:	f994 000a 	ldrsb.w	r0, [r4, #10]
   2a552:	f7ff ffa1 	bl	2a498 <_clear_ready_q_prio_bit>
   2a556:	e7f3      	b.n	2a540 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2a558:	f7ff ffb0 	bl	2a4bc <_get_ready_q_head>
   2a55c:	e7f4      	b.n	2a548 <_remove_thread_from_ready_q+0x2c>
   2a55e:	bf00      	nop
   2a560:	20002808 	.word	0x20002808

0002a564 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   2a564:	b538      	push	{r3, r4, r5, lr}
   2a566:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a568:	4299      	cmp	r1, r3
   2a56a:	d115      	bne.n	2a598 <_pend_thread+0x34>
   2a56c:	2300      	movs	r3, #0
   2a56e:	e013      	b.n	2a598 <_pend_thread+0x34>
	if (!insert_point) {
   2a570:	b133      	cbz	r3, 2a580 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   2a572:	685c      	ldr	r4, [r3, #4]
   2a574:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   2a576:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   2a578:	685c      	ldr	r4, [r3, #4]
   2a57a:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   2a57c:	6058      	str	r0, [r3, #4]
   2a57e:	e02b      	b.n	2a5d8 <_pend_thread+0x74>
	node->next = list;
   2a580:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2a582:	684b      	ldr	r3, [r1, #4]
   2a584:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2a586:	684b      	ldr	r3, [r1, #4]
   2a588:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2a58a:	6048      	str	r0, [r1, #4]
   2a58c:	e024      	b.n	2a5d8 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a58e:	461d      	mov	r5, r3
   2a590:	e010      	b.n	2a5b4 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   2a592:	2500      	movs	r5, #0
   2a594:	e00e      	b.n	2a5b4 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a596:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2a598:	b1c3      	cbz	r3, 2a5cc <_pend_thread+0x68>
   2a59a:	f990 500a 	ldrsb.w	r5, [r0, #10]
   2a59e:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   2a5a2:	42a5      	cmp	r5, r4
   2a5a4:	dbe4      	blt.n	2a570 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2a5a6:	461c      	mov	r4, r3
   2a5a8:	2b00      	cmp	r3, #0
   2a5aa:	d0f0      	beq.n	2a58e <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2a5ac:	684d      	ldr	r5, [r1, #4]
   2a5ae:	42ab      	cmp	r3, r5
   2a5b0:	d0ef      	beq.n	2a592 <_pend_thread+0x2e>
   2a5b2:	681d      	ldr	r5, [r3, #0]
   2a5b4:	b145      	cbz	r5, 2a5c8 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a5b6:	2c00      	cmp	r4, #0
   2a5b8:	d0ed      	beq.n	2a596 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   2a5ba:	684d      	ldr	r5, [r1, #4]
   2a5bc:	42ac      	cmp	r4, r5
   2a5be:	d001      	beq.n	2a5c4 <_pend_thread+0x60>
   2a5c0:	681b      	ldr	r3, [r3, #0]
   2a5c2:	e7e9      	b.n	2a598 <_pend_thread+0x34>
   2a5c4:	2300      	movs	r3, #0
   2a5c6:	e7e7      	b.n	2a598 <_pend_thread+0x34>
   2a5c8:	2300      	movs	r3, #0
   2a5ca:	e7e5      	b.n	2a598 <_pend_thread+0x34>
	node->next = list;
   2a5cc:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2a5ce:	684b      	ldr	r3, [r1, #4]
   2a5d0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2a5d2:	684b      	ldr	r3, [r1, #4]
   2a5d4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2a5d6:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   2a5d8:	7a44      	ldrb	r4, [r0, #9]
   2a5da:	f044 0402 	orr.w	r4, r4, #2
   2a5de:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   2a5e0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a5e4:	f000 8089 	beq.w	2a6fa <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2a5e8:	f102 0309 	add.w	r3, r2, #9
   2a5ec:	4a43      	ldr	r2, [pc, #268]	; (2a6fc <_pend_thread+0x198>)
   2a5ee:	fba2 2303 	umull	r2, r3, r2, r3
   2a5f2:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   2a5f4:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2a5f6:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a5fa:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   2a5fc:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a5fe:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   2a600:	b133      	cbz	r3, 2a610 <_pend_thread+0xac>
	return list->head == list;
   2a602:	4a3f      	ldr	r2, [pc, #252]	; (2a700 <_pend_thread+0x19c>)
   2a604:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a608:	4293      	cmp	r3, r2
   2a60a:	d151      	bne.n	2a6b0 <_pend_thread+0x14c>
   2a60c:	2300      	movs	r3, #0
   2a60e:	e04f      	b.n	2a6b0 <_pend_thread+0x14c>
	__asm__ volatile(
   2a610:	f04f 0320 	mov.w	r3, #32
   2a614:	f3ef 8511 	mrs	r5, BASEPRI
   2a618:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a61c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a620:	6123      	str	r3, [r4, #16]
	if (thread) {
   2a622:	b320      	cbz	r0, 2a66e <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   2a624:	68e3      	ldr	r3, [r4, #12]
   2a626:	b15b      	cbz	r3, 2a640 <_pend_thread+0xdc>
	node->prev->next = node->next;
   2a628:	6843      	ldr	r3, [r0, #4]
   2a62a:	6802      	ldr	r2, [r0, #0]
   2a62c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a62e:	6803      	ldr	r3, [r0, #0]
   2a630:	6842      	ldr	r2, [r0, #4]
   2a632:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a634:	7a43      	ldrb	r3, [r0, #9]
   2a636:	f023 0302 	bic.w	r3, r3, #2
   2a63a:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a63c:	2300      	movs	r3, #0
   2a63e:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a640:	7a43      	ldrb	r3, [r0, #9]
   2a642:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a646:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a648:	f013 0f1b 	tst.w	r3, #27
   2a64c:	d107      	bne.n	2a65e <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a64e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a654:	d001      	beq.n	2a65a <_pend_thread+0xf6>
   2a656:	2300      	movs	r3, #0
   2a658:	e002      	b.n	2a660 <_pend_thread+0xfc>
   2a65a:	2301      	movs	r3, #1
   2a65c:	e000      	b.n	2a660 <_pend_thread+0xfc>
   2a65e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a660:	b913      	cbnz	r3, 2a668 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a662:	f385 8811 	msr	BASEPRI, r5
   2a666:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2a668:	f7ff ff38 	bl	2a4dc <_add_thread_to_ready_q>
   2a66c:	e7f9      	b.n	2a662 <_pend_thread+0xfe>
   2a66e:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2a672:	6963      	ldr	r3, [r4, #20]
   2a674:	2b00      	cmp	r3, #0
   2a676:	d040      	beq.n	2a6fa <_pend_thread+0x196>
			timeout->func(timeout);
   2a678:	4620      	mov	r0, r4
   2a67a:	4798      	blx	r3
   2a67c:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   2a67e:	1a8a      	subs	r2, r1, r2
   2a680:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a682:	b133      	cbz	r3, 2a692 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   2a684:	685a      	ldr	r2, [r3, #4]
   2a686:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2a688:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2a68a:	685a      	ldr	r2, [r3, #4]
   2a68c:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2a68e:	605c      	str	r4, [r3, #4]
   2a690:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   2a692:	4b1b      	ldr	r3, [pc, #108]	; (2a700 <_pend_thread+0x19c>)
   2a694:	f103 020c 	add.w	r2, r3, #12
   2a698:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2a69a:	691a      	ldr	r2, [r3, #16]
   2a69c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a69e:	691a      	ldr	r2, [r3, #16]
   2a6a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a6a2:	611c      	str	r4, [r3, #16]
   2a6a4:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a6a6:	4619      	mov	r1, r3
   2a6a8:	e011      	b.n	2a6ce <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   2a6aa:	2100      	movs	r1, #0
   2a6ac:	e00f      	b.n	2a6ce <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a6ae:	2300      	movs	r3, #0
   2a6b0:	b1d3      	cbz	r3, 2a6e8 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a6b2:	6922      	ldr	r2, [r4, #16]
   2a6b4:	6919      	ldr	r1, [r3, #16]
   2a6b6:	428a      	cmp	r2, r1
   2a6b8:	dde1      	ble.n	2a67e <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   2a6ba:	1a52      	subs	r2, r2, r1
   2a6bc:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a6be:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a6c0:	2b00      	cmp	r3, #0
   2a6c2:	d0f0      	beq.n	2a6a6 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   2a6c4:	490e      	ldr	r1, [pc, #56]	; (2a700 <_pend_thread+0x19c>)
   2a6c6:	6909      	ldr	r1, [r1, #16]
   2a6c8:	428b      	cmp	r3, r1
   2a6ca:	d0ee      	beq.n	2a6aa <_pend_thread+0x146>
   2a6cc:	6819      	ldr	r1, [r3, #0]
   2a6ce:	2900      	cmp	r1, #0
   2a6d0:	d0ed      	beq.n	2a6ae <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a6d2:	b12a      	cbz	r2, 2a6e0 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   2a6d4:	490a      	ldr	r1, [pc, #40]	; (2a700 <_pend_thread+0x19c>)
   2a6d6:	6909      	ldr	r1, [r1, #16]
   2a6d8:	428a      	cmp	r2, r1
   2a6da:	d003      	beq.n	2a6e4 <_pend_thread+0x180>
   2a6dc:	681b      	ldr	r3, [r3, #0]
   2a6de:	e7e7      	b.n	2a6b0 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a6e0:	2300      	movs	r3, #0
   2a6e2:	e7e5      	b.n	2a6b0 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   2a6e4:	2300      	movs	r3, #0
   2a6e6:	e7e3      	b.n	2a6b0 <_pend_thread+0x14c>
	node->next = list;
   2a6e8:	4b05      	ldr	r3, [pc, #20]	; (2a700 <_pend_thread+0x19c>)
   2a6ea:	f103 020c 	add.w	r2, r3, #12
   2a6ee:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2a6f0:	691a      	ldr	r2, [r3, #16]
   2a6f2:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a6f4:	691a      	ldr	r2, [r3, #16]
   2a6f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a6f8:	611c      	str	r4, [r3, #16]
   2a6fa:	bd38      	pop	{r3, r4, r5, pc}
   2a6fc:	cccccccd 	.word	0xcccccccd
   2a700:	20002808 	.word	0x20002808

0002a704 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   2a704:	b570      	push	{r4, r5, r6, lr}
   2a706:	4605      	mov	r5, r0
   2a708:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   2a70a:	4c05      	ldr	r4, [pc, #20]	; (2a720 <_pend_current_thread+0x1c>)
   2a70c:	68a0      	ldr	r0, [r4, #8]
   2a70e:	f7ff ff05 	bl	2a51c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   2a712:	4632      	mov	r2, r6
   2a714:	4629      	mov	r1, r5
   2a716:	68a0      	ldr	r0, [r4, #8]
   2a718:	f7ff ff24 	bl	2a564 <_pend_thread>
   2a71c:	bd70      	pop	{r4, r5, r6, pc}
   2a71e:	bf00      	nop
   2a720:	20002808 	.word	0x20002808

0002a724 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   2a724:	4b09      	ldr	r3, [pc, #36]	; (2a74c <__must_switch_threads+0x28>)
   2a726:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   2a728:	fa93 f0a3 	rbit	r0, r3
   2a72c:	fab0 f080 	clz	r0, r0
   2a730:	b90b      	cbnz	r3, 2a736 <__must_switch_threads+0x12>
   2a732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   2a736:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   2a738:	4b04      	ldr	r3, [pc, #16]	; (2a74c <__must_switch_threads+0x28>)
   2a73a:	689b      	ldr	r3, [r3, #8]
   2a73c:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   2a740:	4283      	cmp	r3, r0
   2a742:	bfd4      	ite	le
   2a744:	2000      	movle	r0, #0
   2a746:	2001      	movgt	r0, #1
   2a748:	4770      	bx	lr
   2a74a:	bf00      	nop
   2a74c:	20002808 	.word	0x20002808

0002a750 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2a750:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   2a754:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   2a758:	3214      	adds	r2, #20
   2a75a:	4911      	ldr	r1, [pc, #68]	; (2a7a0 <_move_thread_to_end_of_prio_q+0x50>)
   2a75c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   2a760:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   2a762:	4288      	cmp	r0, r1
   2a764:	d01a      	beq.n	2a79c <_move_thread_to_end_of_prio_q+0x4c>
{
   2a766:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   2a768:	6841      	ldr	r1, [r0, #4]
   2a76a:	6804      	ldr	r4, [r0, #0]
   2a76c:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   2a76e:	6801      	ldr	r1, [r0, #0]
   2a770:	6844      	ldr	r4, [r0, #4]
   2a772:	604c      	str	r4, [r1, #4]
	node->next = list;
   2a774:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   2a776:	4a0a      	ldr	r2, [pc, #40]	; (2a7a0 <_move_thread_to_end_of_prio_q+0x50>)
   2a778:	3304      	adds	r3, #4
   2a77a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2a77e:	6859      	ldr	r1, [r3, #4]
   2a780:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   2a782:	6859      	ldr	r1, [r3, #4]
   2a784:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2a786:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2a788:	6993      	ldr	r3, [r2, #24]
   2a78a:	4298      	cmp	r0, r3
   2a78c:	d002      	beq.n	2a794 <_move_thread_to_end_of_prio_q+0x44>
   2a78e:	4a04      	ldr	r2, [pc, #16]	; (2a7a0 <_move_thread_to_end_of_prio_q+0x50>)
   2a790:	6193      	str	r3, [r2, #24]
   2a792:	bd10      	pop	{r4, pc}
   2a794:	f7ff fe92 	bl	2a4bc <_get_ready_q_head>
   2a798:	4603      	mov	r3, r0
   2a79a:	e7f8      	b.n	2a78e <_move_thread_to_end_of_prio_q+0x3e>
   2a79c:	4770      	bx	lr
   2a79e:	bf00      	nop
   2a7a0:	20002808 	.word	0x20002808

0002a7a4 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   2a7a4:	4b01      	ldr	r3, [pc, #4]	; (2a7ac <_impl_k_current_get+0x8>)
   2a7a6:	6898      	ldr	r0, [r3, #8]
   2a7a8:	4770      	bx	lr
   2a7aa:	bf00      	nop
   2a7ac:	20002808 	.word	0x20002808

0002a7b0 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   2a7b0:	4b0f      	ldr	r3, [pc, #60]	; (2a7f0 <_is_thread_time_slicing+0x40>)
   2a7b2:	681b      	ldr	r3, [r3, #0]
   2a7b4:	2b00      	cmp	r3, #0
   2a7b6:	dd14      	ble.n	2a7e2 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   2a7b8:	4b0e      	ldr	r3, [pc, #56]	; (2a7f4 <_is_thread_time_slicing+0x44>)
   2a7ba:	681b      	ldr	r3, [r3, #0]
   2a7bc:	4298      	cmp	r0, r3
   2a7be:	d012      	beq.n	2a7e6 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   2a7c0:	f990 300a 	ldrsb.w	r3, [r0, #10]
   2a7c4:	4a0c      	ldr	r2, [pc, #48]	; (2a7f8 <_is_thread_time_slicing+0x48>)
   2a7c6:	6812      	ldr	r2, [r2, #0]
   2a7c8:	4293      	cmp	r3, r2
   2a7ca:	db0e      	blt.n	2a7ea <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   2a7cc:	4a0b      	ldr	r2, [pc, #44]	; (2a7fc <_is_thread_time_slicing+0x4c>)
   2a7ce:	3314      	adds	r3, #20
   2a7d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   2a7d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2a7d8:	685b      	ldr	r3, [r3, #4]
   2a7da:	1ac0      	subs	r0, r0, r3
   2a7dc:	bf18      	it	ne
   2a7de:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   2a7e0:	4770      	bx	lr
		return 0;
   2a7e2:	2000      	movs	r0, #0
   2a7e4:	4770      	bx	lr
   2a7e6:	2000      	movs	r0, #0
   2a7e8:	4770      	bx	lr
   2a7ea:	2000      	movs	r0, #0
}
   2a7ec:	4770      	bx	lr
   2a7ee:	bf00      	nop
   2a7f0:	20002928 	.word	0x20002928
   2a7f4:	00034c04 	.word	0x00034c04
   2a7f8:	2000292c 	.word	0x2000292c
   2a7fc:	20002808 	.word	0x20002808

0002a800 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   2a800:	2200      	movs	r2, #0
   2a802:	4b01      	ldr	r3, [pc, #4]	; (2a808 <_update_time_slice_before_swap+0x8>)
   2a804:	601a      	str	r2, [r3, #0]
   2a806:	4770      	bx	lr
   2a808:	20002bf4 	.word	0x20002bf4

0002a80c <_reschedule_threads>:
{
   2a80c:	b510      	push	{r4, lr}
   2a80e:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   2a810:	4b0a      	ldr	r3, [pc, #40]	; (2a83c <_reschedule_threads+0x30>)
   2a812:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2a814:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2a816:	2b7f      	cmp	r3, #127	; 0x7f
   2a818:	d805      	bhi.n	2a826 <_reschedule_threads+0x1a>
   2a81a:	f7ff ff83 	bl	2a724 <__must_switch_threads>
   2a81e:	4603      	mov	r3, r0
   2a820:	b110      	cbz	r0, 2a828 <_reschedule_threads+0x1c>
   2a822:	2301      	movs	r3, #1
   2a824:	e000      	b.n	2a828 <_reschedule_threads+0x1c>
   2a826:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   2a828:	b913      	cbnz	r3, 2a830 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a82a:	f384 8811 	msr	BASEPRI, r4
   2a82e:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2a830:	f7ff ffe6 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a834:	4620      	mov	r0, r4
   2a836:	f7fe fb29 	bl	28e8c <__swap>
   2a83a:	bd10      	pop	{r4, pc}
   2a83c:	20002808 	.word	0x20002808

0002a840 <k_sched_unlock>:
{
   2a840:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a842:	f04f 0320 	mov.w	r3, #32
   2a846:	f3ef 8011 	mrs	r0, BASEPRI
   2a84a:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   2a84e:	4b04      	ldr	r3, [pc, #16]	; (2a860 <k_sched_unlock+0x20>)
   2a850:	689a      	ldr	r2, [r3, #8]
   2a852:	7ad3      	ldrb	r3, [r2, #11]
   2a854:	3301      	adds	r3, #1
   2a856:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   2a858:	f7ff ffd8 	bl	2a80c <_reschedule_threads>
   2a85c:	bd08      	pop	{r3, pc}
   2a85e:	bf00      	nop
   2a860:	20002808 	.word	0x20002808

0002a864 <_impl_k_yield>:
{
   2a864:	b538      	push	{r3, r4, r5, lr}
   2a866:	f04f 0320 	mov.w	r3, #32
   2a86a:	f3ef 8511 	mrs	r5, BASEPRI
   2a86e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   2a872:	4c08      	ldr	r4, [pc, #32]	; (2a894 <_impl_k_yield+0x30>)
   2a874:	68a0      	ldr	r0, [r4, #8]
   2a876:	f7ff ff6b 	bl	2a750 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   2a87a:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   2a87c:	69a3      	ldr	r3, [r4, #24]
   2a87e:	429a      	cmp	r2, r3
   2a880:	d005      	beq.n	2a88e <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   2a882:	f7ff ffbd 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a886:	4628      	mov	r0, r5
   2a888:	f7fe fb00 	bl	28e8c <__swap>
   2a88c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a88e:	f385 8811 	msr	BASEPRI, r5
   2a892:	bd38      	pop	{r3, r4, r5, pc}
   2a894:	20002808 	.word	0x20002808

0002a898 <_impl_k_sleep>:
{
   2a898:	b570      	push	{r4, r5, r6, lr}
   2a89a:	b082      	sub	sp, #8
	if (duration == 0) {
   2a89c:	b308      	cbz	r0, 2a8e2 <_impl_k_sleep+0x4a>
   2a89e:	4603      	mov	r3, r0
   2a8a0:	3309      	adds	r3, #9
   2a8a2:	4a4f      	ldr	r2, [pc, #316]	; (2a9e0 <_impl_k_sleep+0x148>)
   2a8a4:	fba2 2303 	umull	r2, r3, r2, r3
   2a8a8:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2a8aa:	3301      	adds	r3, #1
   2a8ac:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   2a8ae:	f04f 0320 	mov.w	r3, #32
   2a8b2:	f3ef 8511 	mrs	r5, BASEPRI
   2a8b6:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   2a8ba:	4c4a      	ldr	r4, [pc, #296]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a8bc:	68a0      	ldr	r0, [r4, #8]
   2a8be:	f7ff fe2d 	bl	2a51c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   2a8c2:	68a0      	ldr	r0, [r4, #8]
   2a8c4:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2a8c6:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a8ca:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   2a8cc:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a8ce:	2200      	movs	r2, #0
   2a8d0:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   2a8d2:	b14b      	cbz	r3, 2a8e8 <_impl_k_sleep+0x50>
	return list->head == list;
   2a8d4:	4a43      	ldr	r2, [pc, #268]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a8d6:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a8da:	4293      	cmp	r3, r2
   2a8dc:	d154      	bne.n	2a988 <_impl_k_sleep+0xf0>
   2a8de:	2300      	movs	r3, #0
   2a8e0:	e052      	b.n	2a988 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2a8e2:	f7ff ffbf 	bl	2a864 <_impl_k_yield>
   2a8e6:	e079      	b.n	2a9dc <_impl_k_sleep+0x144>
   2a8e8:	f04f 0320 	mov.w	r3, #32
   2a8ec:	f3ef 8611 	mrs	r6, BASEPRI
   2a8f0:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a8f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a8f8:	6123      	str	r3, [r4, #16]
	if (thread) {
   2a8fa:	b320      	cbz	r0, 2a946 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   2a8fc:	68e3      	ldr	r3, [r4, #12]
   2a8fe:	b15b      	cbz	r3, 2a918 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   2a900:	6843      	ldr	r3, [r0, #4]
   2a902:	6802      	ldr	r2, [r0, #0]
   2a904:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a906:	6803      	ldr	r3, [r0, #0]
   2a908:	6842      	ldr	r2, [r0, #4]
   2a90a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a90c:	7a43      	ldrb	r3, [r0, #9]
   2a90e:	f023 0302 	bic.w	r3, r3, #2
   2a912:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a914:	2300      	movs	r3, #0
   2a916:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a918:	7a43      	ldrb	r3, [r0, #9]
   2a91a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a91e:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a920:	f013 0f1b 	tst.w	r3, #27
   2a924:	d107      	bne.n	2a936 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a926:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a92c:	d001      	beq.n	2a932 <_impl_k_sleep+0x9a>
   2a92e:	2300      	movs	r3, #0
   2a930:	e002      	b.n	2a938 <_impl_k_sleep+0xa0>
   2a932:	2301      	movs	r3, #1
   2a934:	e000      	b.n	2a938 <_impl_k_sleep+0xa0>
   2a936:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a938:	b913      	cbnz	r3, 2a940 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a93a:	f386 8811 	msr	BASEPRI, r6
   2a93e:	e048      	b.n	2a9d2 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   2a940:	f7ff fdcc 	bl	2a4dc <_add_thread_to_ready_q>
   2a944:	e7f9      	b.n	2a93a <_impl_k_sleep+0xa2>
   2a946:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2a94a:	6963      	ldr	r3, [r4, #20]
   2a94c:	2b00      	cmp	r3, #0
   2a94e:	d040      	beq.n	2a9d2 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   2a950:	4620      	mov	r0, r4
   2a952:	4798      	blx	r3
   2a954:	e03d      	b.n	2a9d2 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   2a956:	1a8a      	subs	r2, r1, r2
   2a958:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a95a:	b133      	cbz	r3, 2a96a <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   2a95c:	685a      	ldr	r2, [r3, #4]
   2a95e:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2a960:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2a962:	685a      	ldr	r2, [r3, #4]
   2a964:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2a966:	605c      	str	r4, [r3, #4]
   2a968:	e033      	b.n	2a9d2 <_impl_k_sleep+0x13a>
	node->next = list;
   2a96a:	4b1e      	ldr	r3, [pc, #120]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a96c:	f103 020c 	add.w	r2, r3, #12
   2a970:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2a972:	691a      	ldr	r2, [r3, #16]
   2a974:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a976:	691a      	ldr	r2, [r3, #16]
   2a978:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a97a:	611c      	str	r4, [r3, #16]
   2a97c:	e029      	b.n	2a9d2 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a97e:	4619      	mov	r1, r3
   2a980:	e011      	b.n	2a9a6 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2a982:	2100      	movs	r1, #0
   2a984:	e00f      	b.n	2a9a6 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a986:	2300      	movs	r3, #0
   2a988:	b1d3      	cbz	r3, 2a9c0 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a98a:	6922      	ldr	r2, [r4, #16]
   2a98c:	6919      	ldr	r1, [r3, #16]
   2a98e:	428a      	cmp	r2, r1
   2a990:	dde1      	ble.n	2a956 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   2a992:	1a52      	subs	r2, r2, r1
   2a994:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a996:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a998:	2b00      	cmp	r3, #0
   2a99a:	d0f0      	beq.n	2a97e <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   2a99c:	4911      	ldr	r1, [pc, #68]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a99e:	6909      	ldr	r1, [r1, #16]
   2a9a0:	428b      	cmp	r3, r1
   2a9a2:	d0ee      	beq.n	2a982 <_impl_k_sleep+0xea>
   2a9a4:	6819      	ldr	r1, [r3, #0]
   2a9a6:	2900      	cmp	r1, #0
   2a9a8:	d0ed      	beq.n	2a986 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a9aa:	b12a      	cbz	r2, 2a9b8 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   2a9ac:	490d      	ldr	r1, [pc, #52]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a9ae:	6909      	ldr	r1, [r1, #16]
   2a9b0:	428a      	cmp	r2, r1
   2a9b2:	d003      	beq.n	2a9bc <_impl_k_sleep+0x124>
   2a9b4:	681b      	ldr	r3, [r3, #0]
   2a9b6:	e7e7      	b.n	2a988 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a9b8:	2300      	movs	r3, #0
   2a9ba:	e7e5      	b.n	2a988 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   2a9bc:	2300      	movs	r3, #0
   2a9be:	e7e3      	b.n	2a988 <_impl_k_sleep+0xf0>
	node->next = list;
   2a9c0:	4b08      	ldr	r3, [pc, #32]	; (2a9e4 <_impl_k_sleep+0x14c>)
   2a9c2:	f103 020c 	add.w	r2, r3, #12
   2a9c6:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2a9c8:	691a      	ldr	r2, [r3, #16]
   2a9ca:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2a9cc:	691a      	ldr	r2, [r3, #16]
   2a9ce:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2a9d0:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   2a9d2:	f7ff ff15 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2a9d6:	4628      	mov	r0, r5
   2a9d8:	f7fe fa58 	bl	28e8c <__swap>
}
   2a9dc:	b002      	add	sp, #8
   2a9de:	bd70      	pop	{r4, r5, r6, pc}
   2a9e0:	cccccccd 	.word	0xcccccccd
   2a9e4:	20002808 	.word	0x20002808

0002a9e8 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   2a9e8:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   2a9ea:	4b43      	ldr	r3, [pc, #268]	; (2aaf8 <do_sem_give+0x110>)
   2a9ec:	681b      	ldr	r3, [r3, #0]
   2a9ee:	2b00      	cmp	r3, #0
   2a9f0:	d136      	bne.n	2aa60 <do_sem_give+0x78>
	return list->head == list;
   2a9f2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a9f4:	42a0      	cmp	r0, r4
   2a9f6:	d044      	beq.n	2aa82 <do_sem_give+0x9a>
	if (thread) {
   2a9f8:	b14c      	cbz	r4, 2aa0e <do_sem_give+0x26>
	node->prev->next = node->next;
   2a9fa:	6863      	ldr	r3, [r4, #4]
   2a9fc:	6822      	ldr	r2, [r4, #0]
   2a9fe:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2aa00:	6823      	ldr	r3, [r4, #0]
   2aa02:	6862      	ldr	r2, [r4, #4]
   2aa04:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2aa06:	7a63      	ldrb	r3, [r4, #9]
   2aa08:	f023 0302 	bic.w	r3, r3, #2
   2aa0c:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   2aa0e:	2c00      	cmp	r4, #0
   2aa10:	d039      	beq.n	2aa86 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2aa12:	6a22      	ldr	r2, [r4, #32]
   2aa14:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2aa18:	d013      	beq.n	2aa42 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2aa1a:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   2aa1e:	4937      	ldr	r1, [pc, #220]	; (2aafc <do_sem_give+0x114>)
   2aa20:	6909      	ldr	r1, [r1, #16]
   2aa22:	428b      	cmp	r3, r1
   2aa24:	d004      	beq.n	2aa30 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2aa26:	b103      	cbz	r3, 2aa2a <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   2aa28:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2aa2a:	6919      	ldr	r1, [r3, #16]
   2aa2c:	440a      	add	r2, r1
   2aa2e:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2aa30:	6963      	ldr	r3, [r4, #20]
   2aa32:	6922      	ldr	r2, [r4, #16]
   2aa34:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2aa36:	6923      	ldr	r3, [r4, #16]
   2aa38:	6962      	ldr	r2, [r4, #20]
   2aa3a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2aa3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aa40:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2aa42:	7a63      	ldrb	r3, [r4, #9]
   2aa44:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2aa48:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2aa4a:	f013 0f1b 	tst.w	r3, #27
   2aa4e:	d128      	bne.n	2aaa2 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2aa50:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2aa52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2aa56:	d022      	beq.n	2aa9e <do_sem_give+0xb6>
   2aa58:	2300      	movs	r3, #0
   2aa5a:	e023      	b.n	2aaa4 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aa5c:	2400      	movs	r4, #0
   2aa5e:	e003      	b.n	2aa68 <do_sem_give+0x80>
   2aa60:	4602      	mov	r2, r0
	return list->head == list;
   2aa62:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aa64:	42a0      	cmp	r0, r4
   2aa66:	d0f9      	beq.n	2aa5c <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2aa68:	2c00      	cmp	r4, #0
   2aa6a:	d0c5      	beq.n	2a9f8 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2aa6c:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2aa6e:	f113 0f02 	cmn.w	r3, #2
   2aa72:	d1c1      	bne.n	2a9f8 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   2aa74:	6853      	ldr	r3, [r2, #4]
   2aa76:	429c      	cmp	r4, r3
   2aa78:	d001      	beq.n	2aa7e <do_sem_give+0x96>
   2aa7a:	6824      	ldr	r4, [r4, #0]
   2aa7c:	e7f4      	b.n	2aa68 <do_sem_give+0x80>
   2aa7e:	2400      	movs	r4, #0
   2aa80:	e7f2      	b.n	2aa68 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aa82:	2400      	movs	r4, #0
   2aa84:	e7b8      	b.n	2a9f8 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   2aa86:	6883      	ldr	r3, [r0, #8]
   2aa88:	68c2      	ldr	r2, [r0, #12]
   2aa8a:	4293      	cmp	r3, r2
   2aa8c:	bf18      	it	ne
   2aa8e:	3301      	addne	r3, #1
   2aa90:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   2aa92:	2102      	movs	r1, #2
   2aa94:	3010      	adds	r0, #16
   2aa96:	f7ff fbfd 	bl	2a294 <_handle_obj_poll_events>
   2aa9a:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   2aa9c:	e01c      	b.n	2aad8 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   2aa9e:	2301      	movs	r3, #1
   2aaa0:	e000      	b.n	2aaa4 <do_sem_give+0xbc>
   2aaa2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2aaa4:	b96b      	cbnz	r3, 2aac2 <do_sem_give+0xda>
   2aaa6:	2300      	movs	r3, #0
   2aaa8:	6663      	str	r3, [r4, #100]	; 0x64
   2aaaa:	f3ef 8305 	mrs	r3, IPSR
   2aaae:	2b0d      	cmp	r3, #13
   2aab0:	d80b      	bhi.n	2aaca <do_sem_give+0xe2>
   2aab2:	b19b      	cbz	r3, 2aadc <do_sem_give+0xf4>
   2aab4:	4b12      	ldr	r3, [pc, #72]	; (2ab00 <do_sem_give+0x118>)
   2aab6:	685b      	ldr	r3, [r3, #4]
   2aab8:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2aabc:	d010      	beq.n	2aae0 <do_sem_give+0xf8>
   2aabe:	2300      	movs	r3, #0
   2aac0:	e004      	b.n	2aacc <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   2aac2:	4620      	mov	r0, r4
   2aac4:	f7ff fd0a 	bl	2a4dc <_add_thread_to_ready_q>
   2aac8:	e7ed      	b.n	2aaa6 <do_sem_give+0xbe>
   2aaca:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   2aacc:	b98b      	cbnz	r3, 2aaf2 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   2aace:	4a0b      	ldr	r2, [pc, #44]	; (2aafc <do_sem_give+0x114>)
   2aad0:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2aad2:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2aad4:	2a7f      	cmp	r2, #127	; 0x7f
   2aad6:	d905      	bls.n	2aae4 <do_sem_give+0xfc>
}
   2aad8:	4618      	mov	r0, r3
   2aada:	bd10      	pop	{r4, pc}
   2aadc:	2300      	movs	r3, #0
   2aade:	e7f5      	b.n	2aacc <do_sem_give+0xe4>
   2aae0:	2301      	movs	r3, #1
   2aae2:	e7f3      	b.n	2aacc <do_sem_give+0xe4>
   2aae4:	f7ff fe1e 	bl	2a724 <__must_switch_threads>
   2aae8:	4603      	mov	r3, r0
   2aaea:	2800      	cmp	r0, #0
   2aaec:	d0f4      	beq.n	2aad8 <do_sem_give+0xf0>
   2aaee:	2301      	movs	r3, #1
   2aaf0:	e7f2      	b.n	2aad8 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   2aaf2:	2300      	movs	r3, #0
   2aaf4:	e7f0      	b.n	2aad8 <do_sem_give+0xf0>
   2aaf6:	bf00      	nop
   2aaf8:	20002bf0 	.word	0x20002bf0
   2aafc:	20002808 	.word	0x20002808
   2ab00:	e000ed00 	.word	0xe000ed00

0002ab04 <_impl_k_sem_init>:
	sem->count = initial_count;
   2ab04:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2ab06:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2ab08:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2ab0a:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2ab0c:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2ab10:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2ab12:	6143      	str	r3, [r0, #20]
   2ab14:	4770      	bx	lr

0002ab16 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2ab16:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ab18:	f04f 0320 	mov.w	r3, #32
   2ab1c:	f3ef 8411 	mrs	r4, BASEPRI
   2ab20:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   2ab24:	f7ff ff60 	bl	2a9e8 <do_sem_give>
   2ab28:	b910      	cbnz	r0, 2ab30 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ab2a:	f384 8811 	msr	BASEPRI, r4
   2ab2e:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2ab30:	f7ff fe66 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2ab34:	4620      	mov	r0, r4
   2ab36:	f7fe f9a9 	bl	28e8c <__swap>
   2ab3a:	bd10      	pop	{r4, pc}

0002ab3c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   2ab3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ab3e:	f04f 0320 	mov.w	r3, #32
   2ab42:	f3ef 8411 	mrs	r4, BASEPRI
   2ab46:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   2ab4a:	6883      	ldr	r3, [r0, #8]
   2ab4c:	b12b      	cbz	r3, 2ab5a <_impl_k_sem_take+0x1e>
		sem->count--;
   2ab4e:	3b01      	subs	r3, #1
   2ab50:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ab52:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   2ab56:	2000      	movs	r0, #0
   2ab58:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   2ab5a:	b139      	cbz	r1, 2ab6c <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   2ab5c:	f7ff fdd2 	bl	2a704 <_pend_current_thread>
	_update_time_slice_before_swap();
   2ab60:	f7ff fe4e 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2ab64:	4620      	mov	r0, r4
   2ab66:	f7fe f991 	bl	28e8c <__swap>

	return _Swap(key);
}
   2ab6a:	bd10      	pop	{r4, pc}
   2ab6c:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   2ab70:	f06f 000f 	mvn.w	r0, #15
   2ab74:	bd10      	pop	{r4, pc}
	...

0002ab78 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   2ab78:	b538      	push	{r3, r4, r5, lr}
   2ab7a:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   2ab7c:	4b0f      	ldr	r3, [pc, #60]	; (2abbc <handle_time_slicing+0x44>)
   2ab7e:	6898      	ldr	r0, [r3, #8]
   2ab80:	f7ff fe16 	bl	2a7b0 <_is_thread_time_slicing>
   2ab84:	b150      	cbz	r0, 2ab9c <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   2ab86:	00a2      	lsls	r2, r4, #2
   2ab88:	1912      	adds	r2, r2, r4
   2ab8a:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   2ab8c:	490c      	ldr	r1, [pc, #48]	; (2abc0 <handle_time_slicing+0x48>)
   2ab8e:	680b      	ldr	r3, [r1, #0]
   2ab90:	441a      	add	r2, r3
   2ab92:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   2ab94:	4b0b      	ldr	r3, [pc, #44]	; (2abc4 <handle_time_slicing+0x4c>)
   2ab96:	681b      	ldr	r3, [r3, #0]
   2ab98:	429a      	cmp	r2, r3
   2ab9a:	da00      	bge.n	2ab9e <handle_time_slicing+0x26>
   2ab9c:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   2ab9e:	2200      	movs	r2, #0
   2aba0:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   2aba2:	f04f 0320 	mov.w	r3, #32
   2aba6:	f3ef 8411 	mrs	r4, BASEPRI
   2abaa:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   2abae:	4b03      	ldr	r3, [pc, #12]	; (2abbc <handle_time_slicing+0x44>)
   2abb0:	6898      	ldr	r0, [r3, #8]
   2abb2:	f7ff fdcd 	bl	2a750 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2abb6:	f384 8811 	msr	BASEPRI, r4
   2abba:	e7ef      	b.n	2ab9c <handle_time_slicing+0x24>
   2abbc:	20002808 	.word	0x20002808
   2abc0:	20002bf4 	.word	0x20002bf4
   2abc4:	20002928 	.word	0x20002928

0002abc8 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   2abc8:	4b01      	ldr	r3, [pc, #4]	; (2abd0 <_tick_get_32+0x8>)
   2abca:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   2abce:	4770      	bx	lr
   2abd0:	20002bf8 	.word	0x20002bf8

0002abd4 <_impl_k_uptime_get_32>:
{
   2abd4:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   2abd6:	f7ff fff7 	bl	2abc8 <_tick_get_32>
   2abda:	0082      	lsls	r2, r0, #2
   2abdc:	1810      	adds	r0, r2, r0
   2abde:	1800      	adds	r0, r0, r0
}
   2abe0:	bd38      	pop	{r3, r4, r5, pc}
	...

0002abe4 <_tick_get>:
	__asm__ volatile(
   2abe4:	f04f 0220 	mov.w	r2, #32
   2abe8:	f3ef 8311 	mrs	r3, BASEPRI
   2abec:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   2abf0:	4a02      	ldr	r2, [pc, #8]	; (2abfc <_tick_get+0x18>)
   2abf2:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2abf6:	f383 8811 	msr	BASEPRI, r3
}
   2abfa:	4770      	bx	lr
   2abfc:	20002bf8 	.word	0x20002bf8

0002ac00 <_impl_k_uptime_get>:
{
   2ac00:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   2ac02:	f7ff ffef 	bl	2abe4 <_tick_get>
   2ac06:	008c      	lsls	r4, r1, #2
   2ac08:	0082      	lsls	r2, r0, #2
   2ac0a:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   2ac0e:	1880      	adds	r0, r0, r2
   2ac10:	4159      	adcs	r1, r3
   2ac12:	1800      	adds	r0, r0, r0
   2ac14:	4149      	adcs	r1, r1
}
   2ac16:	bd10      	pop	{r4, pc}

0002ac18 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   2ac18:	b570      	push	{r4, r5, r6, lr}
   2ac1a:	b082      	sub	sp, #8
   2ac1c:	4605      	mov	r5, r0
	__asm__ volatile(
   2ac1e:	f04f 0320 	mov.w	r3, #32
   2ac22:	f3ef 8011 	mrs	r0, BASEPRI
   2ac26:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   2ac2a:	496a      	ldr	r1, [pc, #424]	; (2add4 <_nano_sys_clock_tick_announce+0x1bc>)
   2ac2c:	e9d1 2300 	ldrd	r2, r3, [r1]
   2ac30:	1952      	adds	r2, r2, r5
   2ac32:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2ac36:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ac3a:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   2ac3e:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   2ac42:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   2ac46:	f04f 0320 	mov.w	r3, #32
   2ac4a:	f3ef 8111 	mrs	r1, BASEPRI
   2ac4e:	f383 8811 	msr	BASEPRI, r3
   2ac52:	4608      	mov	r0, r1
	return list->head == list;
   2ac54:	4b60      	ldr	r3, [pc, #384]	; (2add8 <_nano_sys_clock_tick_announce+0x1c0>)
   2ac56:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ac5a:	429a      	cmp	r2, r3
   2ac5c:	d02b      	beq.n	2acb6 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   2ac5e:	b362      	cbz	r2, 2acba <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   2ac60:	6913      	ldr	r3, [r2, #16]
   2ac62:	1b5b      	subs	r3, r3, r5
   2ac64:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   2ac66:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   2ac68:	2101      	movs	r1, #1
   2ac6a:	4a5c      	ldr	r2, [pc, #368]	; (2addc <_nano_sys_clock_tick_announce+0x1c4>)
   2ac6c:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   2ac6e:	b33b      	cbz	r3, 2acc0 <_nano_sys_clock_tick_announce+0xa8>
   2ac70:	691a      	ldr	r2, [r3, #16]
   2ac72:	bb2a      	cbnz	r2, 2acc0 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   2ac74:	685a      	ldr	r2, [r3, #4]
   2ac76:	6819      	ldr	r1, [r3, #0]
   2ac78:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2ac7a:	681a      	ldr	r2, [r3, #0]
   2ac7c:	6859      	ldr	r1, [r3, #4]
   2ac7e:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   2ac80:	aa02      	add	r2, sp, #8
   2ac82:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   2ac86:	6019      	str	r1, [r3, #0]
	node->prev = list;
   2ac88:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   2ac8a:	9a00      	ldr	r2, [sp, #0]
   2ac8c:	6053      	str	r3, [r2, #4]
	list->head = node;
   2ac8e:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   2ac90:	f06f 0201 	mvn.w	r2, #1
   2ac94:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ac96:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   2ac9a:	f04f 0220 	mov.w	r2, #32
   2ac9e:	f3ef 8311 	mrs	r3, BASEPRI
   2aca2:	f382 8811 	msr	BASEPRI, r2
   2aca6:	4618      	mov	r0, r3
	return list->head == list;
   2aca8:	4a4b      	ldr	r2, [pc, #300]	; (2add8 <_nano_sys_clock_tick_announce+0x1c0>)
   2acaa:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2acae:	4293      	cmp	r3, r2
   2acb0:	d1dd      	bne.n	2ac6e <_nano_sys_clock_tick_announce+0x56>
   2acb2:	2300      	movs	r3, #0
   2acb4:	e7db      	b.n	2ac6e <_nano_sys_clock_tick_announce+0x56>
   2acb6:	2200      	movs	r2, #0
   2acb8:	e7d1      	b.n	2ac5e <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2acba:	f381 8811 	msr	BASEPRI, r1
   2acbe:	e084      	b.n	2adca <_nano_sys_clock_tick_announce+0x1b2>
   2acc0:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   2acc4:	aa02      	add	r2, sp, #8
   2acc6:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2acca:	4293      	cmp	r3, r2
   2accc:	d00d      	beq.n	2acea <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   2acce:	b193      	cbz	r3, 2acf6 <_nano_sys_clock_tick_announce+0xde>
   2acd0:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2acd2:	b163      	cbz	r3, 2acee <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   2acd4:	9901      	ldr	r1, [sp, #4]
   2acd6:	428b      	cmp	r3, r1
   2acd8:	d00b      	beq.n	2acf2 <_nano_sys_clock_tick_announce+0xda>
   2acda:	6819      	ldr	r1, [r3, #0]
   2acdc:	b169      	cbz	r1, 2acfa <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2acde:	b172      	cbz	r2, 2acfe <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   2ace0:	9901      	ldr	r1, [sp, #4]
   2ace2:	428a      	cmp	r2, r1
   2ace4:	d00d      	beq.n	2ad02 <_nano_sys_clock_tick_announce+0xea>
   2ace6:	681c      	ldr	r4, [r3, #0]
   2ace8:	e027      	b.n	2ad3a <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2acea:	2300      	movs	r3, #0
   2acec:	e7ef      	b.n	2acce <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2acee:	4619      	mov	r1, r3
   2acf0:	e7f4      	b.n	2acdc <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   2acf2:	2100      	movs	r1, #0
   2acf4:	e7f2      	b.n	2acdc <_nano_sys_clock_tick_announce+0xc4>
   2acf6:	461c      	mov	r4, r3
   2acf8:	e01f      	b.n	2ad3a <_nano_sys_clock_tick_announce+0x122>
   2acfa:	2400      	movs	r4, #0
   2acfc:	e01d      	b.n	2ad3a <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2acfe:	2400      	movs	r4, #0
   2ad00:	e01b      	b.n	2ad3a <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   2ad02:	2400      	movs	r4, #0
   2ad04:	e019      	b.n	2ad3a <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   2ad06:	2301      	movs	r3, #1
   2ad08:	e000      	b.n	2ad0c <_nano_sys_clock_tick_announce+0xf4>
   2ad0a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2ad0c:	2b00      	cmp	r3, #0
   2ad0e:	d142      	bne.n	2ad96 <_nano_sys_clock_tick_announce+0x17e>
   2ad10:	f386 8811 	msr	BASEPRI, r6
   2ad14:	2c00      	cmp	r4, #0
   2ad16:	d04d      	beq.n	2adb4 <_nano_sys_clock_tick_announce+0x19c>
   2ad18:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ad1a:	2c00      	cmp	r4, #0
   2ad1c:	d046      	beq.n	2adac <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   2ad1e:	9a01      	ldr	r2, [sp, #4]
   2ad20:	4294      	cmp	r4, r2
   2ad22:	d045      	beq.n	2adb0 <_nano_sys_clock_tick_announce+0x198>
   2ad24:	6822      	ldr	r2, [r4, #0]
   2ad26:	2a00      	cmp	r2, #0
   2ad28:	d046      	beq.n	2adb8 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2ad2a:	2b00      	cmp	r3, #0
   2ad2c:	d046      	beq.n	2adbc <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   2ad2e:	9a01      	ldr	r2, [sp, #4]
   2ad30:	4293      	cmp	r3, r2
   2ad32:	d045      	beq.n	2adc0 <_nano_sys_clock_tick_announce+0x1a8>
   2ad34:	6822      	ldr	r2, [r4, #0]
   2ad36:	4623      	mov	r3, r4
   2ad38:	4614      	mov	r4, r2
   2ad3a:	2b00      	cmp	r3, #0
   2ad3c:	d042      	beq.n	2adc4 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   2ad3e:	685a      	ldr	r2, [r3, #4]
   2ad40:	6819      	ldr	r1, [r3, #0]
   2ad42:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2ad44:	681a      	ldr	r2, [r3, #0]
   2ad46:	6859      	ldr	r1, [r3, #4]
   2ad48:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   2ad4a:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   2ad4c:	f04f 0220 	mov.w	r2, #32
   2ad50:	f3ef 8611 	mrs	r6, BASEPRI
   2ad54:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2ad58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ad5c:	611a      	str	r2, [r3, #16]
	if (thread) {
   2ad5e:	b1e8      	cbz	r0, 2ad9c <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   2ad60:	68db      	ldr	r3, [r3, #12]
   2ad62:	b15b      	cbz	r3, 2ad7c <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   2ad64:	6843      	ldr	r3, [r0, #4]
   2ad66:	6802      	ldr	r2, [r0, #0]
   2ad68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2ad6a:	6803      	ldr	r3, [r0, #0]
   2ad6c:	6842      	ldr	r2, [r0, #4]
   2ad6e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ad70:	7a43      	ldrb	r3, [r0, #9]
   2ad72:	f023 0302 	bic.w	r3, r3, #2
   2ad76:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2ad78:	2300      	movs	r3, #0
   2ad7a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ad7c:	7a43      	ldrb	r3, [r0, #9]
   2ad7e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2ad82:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2ad84:	f013 0f1b 	tst.w	r3, #27
   2ad88:	d1bf      	bne.n	2ad0a <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2ad8a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2ad8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2ad90:	d0b9      	beq.n	2ad06 <_nano_sys_clock_tick_announce+0xee>
   2ad92:	2300      	movs	r3, #0
   2ad94:	e7ba      	b.n	2ad0c <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   2ad96:	f7ff fba1 	bl	2a4dc <_add_thread_to_ready_q>
   2ad9a:	e7b9      	b.n	2ad10 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ad9c:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2ada0:	695a      	ldr	r2, [r3, #20]
   2ada2:	2a00      	cmp	r2, #0
   2ada4:	d0b6      	beq.n	2ad14 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   2ada6:	4618      	mov	r0, r3
   2ada8:	4790      	blx	r2
   2adaa:	e7b3      	b.n	2ad14 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2adac:	4622      	mov	r2, r4
   2adae:	e7ba      	b.n	2ad26 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2adb0:	2200      	movs	r2, #0
   2adb2:	e7b8      	b.n	2ad26 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   2adb4:	4622      	mov	r2, r4
   2adb6:	e7be      	b.n	2ad36 <_nano_sys_clock_tick_announce+0x11e>
   2adb8:	2200      	movs	r2, #0
   2adba:	e7bc      	b.n	2ad36 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2adbc:	2200      	movs	r2, #0
   2adbe:	e7ba      	b.n	2ad36 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   2adc0:	2200      	movs	r2, #0
   2adc2:	e7b8      	b.n	2ad36 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   2adc4:	2200      	movs	r2, #0
   2adc6:	4b05      	ldr	r3, [pc, #20]	; (2addc <_nano_sys_clock_tick_announce+0x1c4>)
   2adc8:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   2adca:	4628      	mov	r0, r5
   2adcc:	f7ff fed4 	bl	2ab78 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   2add0:	b002      	add	sp, #8
   2add2:	bd70      	pop	{r4, r5, r6, pc}
   2add4:	20002bf8 	.word	0x20002bf8
   2add8:	20002808 	.word	0x20002808
   2addc:	20002bf0 	.word	0x20002bf0

0002ade0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   2ade0:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2ade2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ade6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2adea:	4903      	ldr	r1, [pc, #12]	; (2adf8 <k_sys_work_q_init+0x18>)
   2adec:	4803      	ldr	r0, [pc, #12]	; (2adfc <k_sys_work_q_init+0x1c>)
   2adee:	f000 fc49 	bl	2b684 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   2adf2:	2000      	movs	r0, #0
   2adf4:	bd08      	pop	{r3, pc}
   2adf6:	bf00      	nop
   2adf8:	2000b4f0 	.word	0x2000b4f0
   2adfc:	20002c00 	.word	0x20002c00

0002ae00 <k_is_in_isr>:
   2ae00:	f3ef 8305 	mrs	r3, IPSR
   2ae04:	2b0d      	cmp	r3, #13
   2ae06:	d807      	bhi.n	2ae18 <k_is_in_isr+0x18>
   2ae08:	b143      	cbz	r3, 2ae1c <k_is_in_isr+0x1c>
   2ae0a:	4b06      	ldr	r3, [pc, #24]	; (2ae24 <k_is_in_isr+0x24>)
   2ae0c:	685b      	ldr	r3, [r3, #4]
   2ae0e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2ae12:	d005      	beq.n	2ae20 <k_is_in_isr+0x20>
   2ae14:	2000      	movs	r0, #0
   2ae16:	4770      	bx	lr
   2ae18:	2001      	movs	r0, #1
   2ae1a:	4770      	bx	lr
   2ae1c:	2000      	movs	r0, #0
   2ae1e:	4770      	bx	lr
   2ae20:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   2ae22:	4770      	bx	lr
   2ae24:	e000ed00 	.word	0xe000ed00

0002ae28 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   2ae28:	4b02      	ldr	r3, [pc, #8]	; (2ae34 <_is_thread_essential+0xc>)
   2ae2a:	689b      	ldr	r3, [r3, #8]
   2ae2c:	7a18      	ldrb	r0, [r3, #8]
}
   2ae2e:	f000 0001 	and.w	r0, r0, #1
   2ae32:	4770      	bx	lr
   2ae34:	20002808 	.word	0x20002808

0002ae38 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2ae38:	b508      	push	{r3, lr}
   2ae3a:	4604      	mov	r4, r0
   2ae3c:	4608      	mov	r0, r1
   2ae3e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2ae40:	461a      	mov	r2, r3
   2ae42:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   2ae44:	f7ff fcae 	bl	2a7a4 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2ae48:	f7fe facc 	bl	293e4 <_impl_k_thread_abort>

0002ae4c <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   2ae4c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ae4e:	f04f 0320 	mov.w	r3, #32
   2ae52:	f3ef 8411 	mrs	r4, BASEPRI
   2ae56:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   2ae5a:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   2ae5c:	f013 0f04 	tst.w	r3, #4
   2ae60:	d00b      	beq.n	2ae7a <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ae62:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2ae66:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2ae68:	f013 0f1b 	tst.w	r3, #27
   2ae6c:	d10a      	bne.n	2ae84 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2ae6e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2ae70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2ae74:	d004      	beq.n	2ae80 <_impl_k_thread_start+0x34>
   2ae76:	2500      	movs	r5, #0
   2ae78:	e005      	b.n	2ae86 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2ae7a:	f384 8811 	msr	BASEPRI, r4
   2ae7e:	bd38      	pop	{r3, r4, r5, pc}
   2ae80:	2501      	movs	r5, #1
   2ae82:	e000      	b.n	2ae86 <_impl_k_thread_start+0x3a>
   2ae84:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   2ae86:	b915      	cbnz	r5, 2ae8e <_impl_k_thread_start+0x42>
   2ae88:	f384 8811 	msr	BASEPRI, r4
   2ae8c:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2ae8e:	f7ff fb25 	bl	2a4dc <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   2ae92:	4b0a      	ldr	r3, [pc, #40]	; (2aebc <_impl_k_thread_start+0x70>)
   2ae94:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2ae96:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2ae98:	2b7f      	cmp	r3, #127	; 0x7f
   2ae9a:	d908      	bls.n	2aeae <_impl_k_thread_start+0x62>
   2ae9c:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   2ae9e:	2b00      	cmp	r3, #0
   2aea0:	d0f2      	beq.n	2ae88 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   2aea2:	f7ff fcad 	bl	2a800 <_update_time_slice_before_swap>
	return __swap(key);
   2aea6:	4620      	mov	r0, r4
   2aea8:	f7fd fff0 	bl	28e8c <__swap>
   2aeac:	bd38      	pop	{r3, r4, r5, pc}
   2aeae:	f7ff fc39 	bl	2a724 <__must_switch_threads>
   2aeb2:	4603      	mov	r3, r0
   2aeb4:	2800      	cmp	r0, #0
   2aeb6:	d0f2      	beq.n	2ae9e <_impl_k_thread_start+0x52>
   2aeb8:	462b      	mov	r3, r5
   2aeba:	e7f0      	b.n	2ae9e <_impl_k_thread_start+0x52>
   2aebc:	20002808 	.word	0x20002808

0002aec0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   2aec0:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   2aec2:	b1d1      	cbz	r1, 2aefa <schedule_new_thread+0x3a>
   2aec4:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2aec6:	3309      	adds	r3, #9
   2aec8:	4a47      	ldr	r2, [pc, #284]	; (2afe8 <schedule_new_thread+0x128>)
   2aeca:	fba2 2303 	umull	r2, r3, r2, r3
   2aece:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   2aed0:	3301      	adds	r3, #1
	__asm__ volatile(
   2aed2:	f04f 0220 	mov.w	r2, #32
   2aed6:	f3ef 8511 	mrs	r5, BASEPRI
   2aeda:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2aede:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2aee2:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   2aee4:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2aee6:	2200      	movs	r2, #0
   2aee8:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   2aeea:	b14b      	cbz	r3, 2af00 <schedule_new_thread+0x40>
	return list->head == list;
   2aeec:	4a3f      	ldr	r2, [pc, #252]	; (2afec <schedule_new_thread+0x12c>)
   2aeee:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aef2:	4293      	cmp	r3, r2
   2aef4:	d152      	bne.n	2af9c <schedule_new_thread+0xdc>
   2aef6:	2300      	movs	r3, #0
   2aef8:	e050      	b.n	2af9c <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   2aefa:	f7ff ffa7 	bl	2ae4c <_impl_k_thread_start>
   2aefe:	bd70      	pop	{r4, r5, r6, pc}
   2af00:	f04f 0320 	mov.w	r3, #32
   2af04:	f3ef 8611 	mrs	r6, BASEPRI
   2af08:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2af0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af10:	6123      	str	r3, [r4, #16]
	if (thread) {
   2af12:	b320      	cbz	r0, 2af5e <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   2af14:	68e3      	ldr	r3, [r4, #12]
   2af16:	b15b      	cbz	r3, 2af30 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   2af18:	6843      	ldr	r3, [r0, #4]
   2af1a:	6802      	ldr	r2, [r0, #0]
   2af1c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2af1e:	6803      	ldr	r3, [r0, #0]
   2af20:	6842      	ldr	r2, [r0, #4]
   2af22:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2af24:	7a43      	ldrb	r3, [r0, #9]
   2af26:	f023 0302 	bic.w	r3, r3, #2
   2af2a:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2af2c:	2300      	movs	r3, #0
   2af2e:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2af30:	7a43      	ldrb	r3, [r0, #9]
   2af32:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2af36:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2af38:	f013 0f1b 	tst.w	r3, #27
   2af3c:	d107      	bne.n	2af4e <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2af3e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2af40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2af44:	d001      	beq.n	2af4a <schedule_new_thread+0x8a>
   2af46:	2300      	movs	r3, #0
   2af48:	e002      	b.n	2af50 <schedule_new_thread+0x90>
   2af4a:	2301      	movs	r3, #1
   2af4c:	e000      	b.n	2af50 <schedule_new_thread+0x90>
   2af4e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2af50:	b913      	cbnz	r3, 2af58 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2af52:	f386 8811 	msr	BASEPRI, r6
   2af56:	e044      	b.n	2afe2 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   2af58:	f7ff fac0 	bl	2a4dc <_add_thread_to_ready_q>
   2af5c:	e7f9      	b.n	2af52 <schedule_new_thread+0x92>
   2af5e:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2af62:	6963      	ldr	r3, [r4, #20]
   2af64:	2b00      	cmp	r3, #0
   2af66:	d03c      	beq.n	2afe2 <schedule_new_thread+0x122>
			timeout->func(timeout);
   2af68:	4620      	mov	r0, r4
   2af6a:	4798      	blx	r3
   2af6c:	e039      	b.n	2afe2 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   2af6e:	1a8a      	subs	r2, r1, r2
   2af70:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2af72:	b133      	cbz	r3, 2af82 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   2af74:	685a      	ldr	r2, [r3, #4]
   2af76:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2af78:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2af7a:	685a      	ldr	r2, [r3, #4]
   2af7c:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2af7e:	605c      	str	r4, [r3, #4]
   2af80:	e02f      	b.n	2afe2 <schedule_new_thread+0x122>
	node->next = list;
   2af82:	4b1b      	ldr	r3, [pc, #108]	; (2aff0 <schedule_new_thread+0x130>)
   2af84:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2af86:	685a      	ldr	r2, [r3, #4]
   2af88:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2af8a:	685a      	ldr	r2, [r3, #4]
   2af8c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2af8e:	605c      	str	r4, [r3, #4]
   2af90:	e027      	b.n	2afe2 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2af92:	4619      	mov	r1, r3
   2af94:	e011      	b.n	2afba <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   2af96:	2100      	movs	r1, #0
   2af98:	e00f      	b.n	2afba <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2af9a:	2300      	movs	r3, #0
   2af9c:	b1d3      	cbz	r3, 2afd4 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2af9e:	6922      	ldr	r2, [r4, #16]
   2afa0:	6919      	ldr	r1, [r3, #16]
   2afa2:	428a      	cmp	r2, r1
   2afa4:	dde3      	ble.n	2af6e <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   2afa6:	1a52      	subs	r2, r2, r1
   2afa8:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2afaa:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2afac:	2b00      	cmp	r3, #0
   2afae:	d0f0      	beq.n	2af92 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   2afb0:	490e      	ldr	r1, [pc, #56]	; (2afec <schedule_new_thread+0x12c>)
   2afb2:	6909      	ldr	r1, [r1, #16]
   2afb4:	428b      	cmp	r3, r1
   2afb6:	d0ee      	beq.n	2af96 <schedule_new_thread+0xd6>
   2afb8:	6819      	ldr	r1, [r3, #0]
   2afba:	2900      	cmp	r1, #0
   2afbc:	d0ed      	beq.n	2af9a <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2afbe:	b12a      	cbz	r2, 2afcc <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2afc0:	490a      	ldr	r1, [pc, #40]	; (2afec <schedule_new_thread+0x12c>)
   2afc2:	6909      	ldr	r1, [r1, #16]
   2afc4:	428a      	cmp	r2, r1
   2afc6:	d003      	beq.n	2afd0 <schedule_new_thread+0x110>
   2afc8:	681b      	ldr	r3, [r3, #0]
   2afca:	e7e7      	b.n	2af9c <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2afcc:	2300      	movs	r3, #0
   2afce:	e7e5      	b.n	2af9c <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   2afd0:	2300      	movs	r3, #0
   2afd2:	e7e3      	b.n	2af9c <schedule_new_thread+0xdc>
	node->next = list;
   2afd4:	4b06      	ldr	r3, [pc, #24]	; (2aff0 <schedule_new_thread+0x130>)
   2afd6:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2afd8:	685a      	ldr	r2, [r3, #4]
   2afda:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2afdc:	685a      	ldr	r2, [r3, #4]
   2afde:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2afe0:	605c      	str	r4, [r3, #4]
   2afe2:	f385 8811 	msr	BASEPRI, r5
   2afe6:	bd70      	pop	{r4, r5, r6, pc}
   2afe8:	cccccccd 	.word	0xcccccccd
   2afec:	20002808 	.word	0x20002808
   2aff0:	20002814 	.word	0x20002814

0002aff4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   2aff4:	b510      	push	{r4, lr}
   2aff6:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2aff8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2affa:	9404      	str	r4, [sp, #16]
   2affc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2affe:	9403      	str	r4, [sp, #12]
   2b000:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b002:	9402      	str	r4, [sp, #8]
   2b004:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2b006:	9401      	str	r4, [sp, #4]
   2b008:	9c08      	ldr	r4, [sp, #32]
   2b00a:	9400      	str	r4, [sp, #0]
   2b00c:	f7fe f940 	bl	29290 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   2b010:	b006      	add	sp, #24
   2b012:	bd10      	pop	{r4, pc}

0002b014 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   2b014:	b570      	push	{r4, r5, r6, lr}
   2b016:	b086      	sub	sp, #24
   2b018:	4604      	mov	r4, r0
   2b01a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2b01c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2b01e:	9604      	str	r6, [sp, #16]
   2b020:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2b022:	9603      	str	r6, [sp, #12]
   2b024:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2b026:	9602      	str	r6, [sp, #8]
   2b028:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2b02a:	9601      	str	r6, [sp, #4]
   2b02c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2b02e:	9600      	str	r6, [sp, #0]
   2b030:	f7ff ffe0 	bl	2aff4 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   2b034:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2b038:	d003      	beq.n	2b042 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   2b03a:	4629      	mov	r1, r5
   2b03c:	4620      	mov	r0, r4
   2b03e:	f7ff ff3f 	bl	2aec0 <schedule_new_thread>
	}
	return new_thread;
}
   2b042:	4620      	mov	r0, r4
   2b044:	b006      	add	sp, #24
   2b046:	bd70      	pop	{r4, r5, r6, pc}

0002b048 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   2b048:	b510      	push	{r4, lr}
   2b04a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2b04c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2b04e:	b103      	cbz	r3, 2b052 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   2b050:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   2b052:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b054:	f013 0f1f 	tst.w	r3, #31
   2b058:	d107      	bne.n	2b06a <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b05a:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b05c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2b060:	d001      	beq.n	2b066 <_k_thread_single_abort+0x1e>
   2b062:	2200      	movs	r2, #0
   2b064:	e002      	b.n	2b06c <_k_thread_single_abort+0x24>
   2b066:	2201      	movs	r2, #1
   2b068:	e000      	b.n	2b06c <_k_thread_single_abort+0x24>
   2b06a:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   2b06c:	bb4a      	cbnz	r2, 2b0c2 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   2b06e:	f013 0f02 	tst.w	r3, #2
   2b072:	d009      	beq.n	2b088 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   2b074:	6863      	ldr	r3, [r4, #4]
   2b076:	6822      	ldr	r2, [r4, #0]
   2b078:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b07a:	6823      	ldr	r3, [r4, #0]
   2b07c:	6862      	ldr	r2, [r4, #4]
   2b07e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b080:	7a63      	ldrb	r3, [r4, #9]
   2b082:	f023 0302 	bic.w	r3, r3, #2
   2b086:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b088:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   2b08a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b08e:	d013      	beq.n	2b0b8 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2b090:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   2b094:	4a0d      	ldr	r2, [pc, #52]	; (2b0cc <_k_thread_single_abort+0x84>)
   2b096:	6912      	ldr	r2, [r2, #16]
   2b098:	4293      	cmp	r3, r2
   2b09a:	d004      	beq.n	2b0a6 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b09c:	b103      	cbz	r3, 2b0a0 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   2b09e:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2b0a0:	691a      	ldr	r2, [r3, #16]
   2b0a2:	440a      	add	r2, r1
   2b0a4:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2b0a6:	6963      	ldr	r3, [r4, #20]
   2b0a8:	6922      	ldr	r2, [r4, #16]
   2b0aa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b0ac:	6923      	ldr	r3, [r4, #16]
   2b0ae:	6962      	ldr	r2, [r4, #20]
   2b0b0:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b0b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b0b6:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   2b0b8:	7a63      	ldrb	r3, [r4, #9]
   2b0ba:	f043 0308 	orr.w	r3, r3, #8
   2b0be:	7263      	strb	r3, [r4, #9]
   2b0c0:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   2b0c2:	4620      	mov	r0, r4
   2b0c4:	f7ff fa2a 	bl	2a51c <_remove_thread_from_ready_q>
   2b0c8:	e7f6      	b.n	2b0b8 <_k_thread_single_abort+0x70>
   2b0ca:	bf00      	nop
   2b0cc:	20002808 	.word	0x20002808

0002b0d0 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   2b0d0:	b530      	push	{r4, r5, lr}
   2b0d2:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   2b0d4:	4c1b      	ldr	r4, [pc, #108]	; (2b144 <_init_static_threads+0x74>)
   2b0d6:	e012      	b.n	2b0fe <_init_static_threads+0x2e>
		_setup_new_thread(
   2b0d8:	6a23      	ldr	r3, [r4, #32]
   2b0da:	9304      	str	r3, [sp, #16]
   2b0dc:	69e3      	ldr	r3, [r4, #28]
   2b0de:	9303      	str	r3, [sp, #12]
   2b0e0:	69a3      	ldr	r3, [r4, #24]
   2b0e2:	9302      	str	r3, [sp, #8]
   2b0e4:	6963      	ldr	r3, [r4, #20]
   2b0e6:	9301      	str	r3, [sp, #4]
   2b0e8:	6923      	ldr	r3, [r4, #16]
   2b0ea:	9300      	str	r3, [sp, #0]
   2b0ec:	68e3      	ldr	r3, [r4, #12]
   2b0ee:	68a2      	ldr	r2, [r4, #8]
   2b0f0:	6861      	ldr	r1, [r4, #4]
   2b0f2:	6820      	ldr	r0, [r4, #0]
   2b0f4:	f7ff ff7e 	bl	2aff4 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   2b0f8:	6823      	ldr	r3, [r4, #0]
   2b0fa:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   2b0fc:	3430      	adds	r4, #48	; 0x30
   2b0fe:	4b12      	ldr	r3, [pc, #72]	; (2b148 <_init_static_threads+0x78>)
   2b100:	429c      	cmp	r4, r3
   2b102:	d3e9      	bcc.n	2b0d8 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   2b104:	4b11      	ldr	r3, [pc, #68]	; (2b14c <_init_static_threads+0x7c>)
   2b106:	689a      	ldr	r2, [r3, #8]
   2b108:	7ad3      	ldrb	r3, [r2, #11]
   2b10a:	3b01      	subs	r3, #1
   2b10c:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   2b10e:	f04f 0320 	mov.w	r3, #32
   2b112:	f3ef 8511 	mrs	r5, BASEPRI
   2b116:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   2b11a:	4c0a      	ldr	r4, [pc, #40]	; (2b144 <_init_static_threads+0x74>)
   2b11c:	e000      	b.n	2b120 <_init_static_threads+0x50>
   2b11e:	3430      	adds	r4, #48	; 0x30
   2b120:	4b09      	ldr	r3, [pc, #36]	; (2b148 <_init_static_threads+0x78>)
   2b122:	429c      	cmp	r4, r3
   2b124:	d207      	bcs.n	2b136 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   2b126:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2b128:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b12c:	d0f7      	beq.n	2b11e <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   2b12e:	6820      	ldr	r0, [r4, #0]
   2b130:	f7ff fec6 	bl	2aec0 <schedule_new_thread>
   2b134:	e7f3      	b.n	2b11e <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b136:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   2b13a:	f7ff fb81 	bl	2a840 <k_sched_unlock>
}
   2b13e:	b007      	add	sp, #28
   2b140:	bd30      	pop	{r4, r5, pc}
   2b142:	bf00      	nop
   2b144:	2000d090 	.word	0x2000d090
   2b148:	2000d090 	.word	0x2000d090
   2b14c:	20002808 	.word	0x20002808

0002b150 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2b150:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2b152:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   2b154:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   2b156:	2300      	movs	r3, #0
   2b158:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   2b15a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b15e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   2b160:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2b162:	6183      	str	r3, [r0, #24]
	t->func = func;
   2b164:	6243      	str	r3, [r0, #36]	; 0x24
   2b166:	4770      	bx	lr

0002b168 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2b168:	b570      	push	{r4, r5, r6, lr}
   2b16a:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   2b16c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b16e:	2b00      	cmp	r3, #0
   2b170:	f340 8088 	ble.w	2b284 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   2b174:	f04f 0320 	mov.w	r3, #32
   2b178:	f3ef 8511 	mrs	r5, BASEPRI
   2b17c:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   2b180:	f100 0218 	add.w	r2, r0, #24
   2b184:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2b186:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2b188:	2100      	movs	r1, #0
   2b18a:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2b18c:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   2b18e:	b133      	cbz	r3, 2b19e <_timer_expiration_handler+0x36>
	return list->head == list;
   2b190:	4a59      	ldr	r2, [pc, #356]	; (2b2f8 <_timer_expiration_handler+0x190>)
   2b192:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b196:	4293      	cmp	r3, r2
   2b198:	d14f      	bne.n	2b23a <_timer_expiration_handler+0xd2>
   2b19a:	2300      	movs	r3, #0
   2b19c:	e04d      	b.n	2b23a <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   2b19e:	4608      	mov	r0, r1
   2b1a0:	f04f 0320 	mov.w	r3, #32
   2b1a4:	f3ef 8611 	mrs	r6, BASEPRI
   2b1a8:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b1ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b1b0:	6123      	str	r3, [r4, #16]
	if (thread) {
   2b1b2:	b319      	cbz	r1, 2b1fc <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   2b1b4:	68e3      	ldr	r3, [r4, #12]
   2b1b6:	b153      	cbz	r3, 2b1ce <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   2b1b8:	684b      	ldr	r3, [r1, #4]
   2b1ba:	680a      	ldr	r2, [r1, #0]
   2b1bc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b1be:	680b      	ldr	r3, [r1, #0]
   2b1c0:	684a      	ldr	r2, [r1, #4]
   2b1c2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b1c4:	7a4b      	ldrb	r3, [r1, #9]
   2b1c6:	f023 0302 	bic.w	r3, r3, #2
   2b1ca:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   2b1cc:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b1ce:	7a43      	ldrb	r3, [r0, #9]
   2b1d0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b1d4:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b1d6:	f013 0f1b 	tst.w	r3, #27
   2b1da:	d107      	bne.n	2b1ec <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b1dc:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b1e2:	d001      	beq.n	2b1e8 <_timer_expiration_handler+0x80>
   2b1e4:	2300      	movs	r3, #0
   2b1e6:	e002      	b.n	2b1ee <_timer_expiration_handler+0x86>
   2b1e8:	2301      	movs	r3, #1
   2b1ea:	e000      	b.n	2b1ee <_timer_expiration_handler+0x86>
   2b1ec:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2b1ee:	b913      	cbnz	r3, 2b1f6 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b1f0:	f386 8811 	msr	BASEPRI, r6
   2b1f4:	e044      	b.n	2b280 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   2b1f6:	f7ff f971 	bl	2a4dc <_add_thread_to_ready_q>
   2b1fa:	e7f9      	b.n	2b1f0 <_timer_expiration_handler+0x88>
   2b1fc:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2b200:	6963      	ldr	r3, [r4, #20]
   2b202:	2b00      	cmp	r3, #0
   2b204:	d03c      	beq.n	2b280 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   2b206:	4620      	mov	r0, r4
   2b208:	4798      	blx	r3
   2b20a:	e039      	b.n	2b280 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   2b20c:	1a8a      	subs	r2, r1, r2
   2b20e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2b210:	b133      	cbz	r3, 2b220 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   2b212:	685a      	ldr	r2, [r3, #4]
   2b214:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2b216:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   2b218:	685a      	ldr	r2, [r3, #4]
   2b21a:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2b21c:	605c      	str	r4, [r3, #4]
   2b21e:	e02f      	b.n	2b280 <_timer_expiration_handler+0x118>
	node->next = list;
   2b220:	4b36      	ldr	r3, [pc, #216]	; (2b2fc <_timer_expiration_handler+0x194>)
   2b222:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2b224:	685a      	ldr	r2, [r3, #4]
   2b226:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2b228:	685a      	ldr	r2, [r3, #4]
   2b22a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b22c:	605c      	str	r4, [r3, #4]
   2b22e:	e027      	b.n	2b280 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b230:	4619      	mov	r1, r3
   2b232:	e011      	b.n	2b258 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   2b234:	2100      	movs	r1, #0
   2b236:	e00f      	b.n	2b258 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b238:	2300      	movs	r3, #0
   2b23a:	b1d3      	cbz	r3, 2b272 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2b23c:	6902      	ldr	r2, [r0, #16]
   2b23e:	6919      	ldr	r1, [r3, #16]
   2b240:	428a      	cmp	r2, r1
   2b242:	dde3      	ble.n	2b20c <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   2b244:	1a52      	subs	r2, r2, r1
   2b246:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b248:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b24a:	2b00      	cmp	r3, #0
   2b24c:	d0f0      	beq.n	2b230 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   2b24e:	492a      	ldr	r1, [pc, #168]	; (2b2f8 <_timer_expiration_handler+0x190>)
   2b250:	6909      	ldr	r1, [r1, #16]
   2b252:	428b      	cmp	r3, r1
   2b254:	d0ee      	beq.n	2b234 <_timer_expiration_handler+0xcc>
   2b256:	6819      	ldr	r1, [r3, #0]
   2b258:	2900      	cmp	r1, #0
   2b25a:	d0ed      	beq.n	2b238 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b25c:	b12a      	cbz	r2, 2b26a <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   2b25e:	4926      	ldr	r1, [pc, #152]	; (2b2f8 <_timer_expiration_handler+0x190>)
   2b260:	6909      	ldr	r1, [r1, #16]
   2b262:	428a      	cmp	r2, r1
   2b264:	d003      	beq.n	2b26e <_timer_expiration_handler+0x106>
   2b266:	681b      	ldr	r3, [r3, #0]
   2b268:	e7e7      	b.n	2b23a <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b26a:	2300      	movs	r3, #0
   2b26c:	e7e5      	b.n	2b23a <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   2b26e:	2300      	movs	r3, #0
   2b270:	e7e3      	b.n	2b23a <_timer_expiration_handler+0xd2>
	node->next = list;
   2b272:	4b22      	ldr	r3, [pc, #136]	; (2b2fc <_timer_expiration_handler+0x194>)
   2b274:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2b276:	685a      	ldr	r2, [r3, #4]
   2b278:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2b27a:	685a      	ldr	r2, [r3, #4]
   2b27c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b27e:	605c      	str	r4, [r3, #4]
   2b280:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2b284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b286:	3301      	adds	r3, #1
   2b288:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2b28a:	6a23      	ldr	r3, [r4, #32]
   2b28c:	b10b      	cbz	r3, 2b292 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   2b28e:	4620      	mov	r0, r4
   2b290:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   2b292:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2b296:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b298:	42a3      	cmp	r3, r4
   2b29a:	d01d      	beq.n	2b2d8 <_timer_expiration_handler+0x170>

	if (!thread) {
   2b29c:	b334      	cbz	r4, 2b2ec <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   2b29e:	6863      	ldr	r3, [r4, #4]
   2b2a0:	6822      	ldr	r2, [r4, #0]
   2b2a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b2a4:	6823      	ldr	r3, [r4, #0]
   2b2a6:	6862      	ldr	r2, [r4, #4]
   2b2a8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b2aa:	7a63      	ldrb	r3, [r4, #9]
   2b2ac:	f023 0302 	bic.w	r3, r3, #2
   2b2b0:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   2b2b2:	f04f 0320 	mov.w	r3, #32
   2b2b6:	f3ef 8511 	mrs	r5, BASEPRI
   2b2ba:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b2be:	7a63      	ldrb	r3, [r4, #9]
   2b2c0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b2c4:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b2c6:	f013 0f1b 	tst.w	r3, #27
   2b2ca:	d109      	bne.n	2b2e0 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b2cc:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b2d2:	d003      	beq.n	2b2dc <_timer_expiration_handler+0x174>
   2b2d4:	2300      	movs	r3, #0
   2b2d6:	e004      	b.n	2b2e2 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b2d8:	2400      	movs	r4, #0
   2b2da:	e7df      	b.n	2b29c <_timer_expiration_handler+0x134>
   2b2dc:	2301      	movs	r3, #1
   2b2de:	e000      	b.n	2b2e2 <_timer_expiration_handler+0x17a>
   2b2e0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2b2e2:	b923      	cbnz	r3, 2b2ee <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b2e4:	f385 8811 	msr	BASEPRI, r5
   2b2e8:	2300      	movs	r3, #0
   2b2ea:	6663      	str	r3, [r4, #100]	; 0x64
   2b2ec:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   2b2ee:	4620      	mov	r0, r4
   2b2f0:	f7ff f8f4 	bl	2a4dc <_add_thread_to_ready_q>
   2b2f4:	e7f6      	b.n	2b2e4 <_timer_expiration_handler+0x17c>
   2b2f6:	bf00      	nop
   2b2f8:	20002808 	.word	0x20002808
   2b2fc:	20002814 	.word	0x20002814

0002b300 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   2b300:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2b302:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   2b304:	2300      	movs	r3, #0
   2b306:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   2b308:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2b30c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2b30e:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   2b310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b314:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   2b316:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   2b318:	6083      	str	r3, [r0, #8]
	t->func = func;
   2b31a:	4a02      	ldr	r2, [pc, #8]	; (2b324 <k_timer_init+0x24>)
   2b31c:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   2b31e:	6303      	str	r3, [r0, #48]	; 0x30
   2b320:	4770      	bx	lr
   2b322:	bf00      	nop
   2b324:	0002b169 	.word	0x0002b169

0002b328 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   2b328:	b530      	push	{r4, r5, lr}
   2b32a:	b083      	sub	sp, #12
   2b32c:	3209      	adds	r2, #9
   2b32e:	4b57      	ldr	r3, [pc, #348]	; (2b48c <_impl_k_timer_start+0x164>)
   2b330:	fba3 4202 	umull	r4, r2, r3, r2
   2b334:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   2b336:	9201      	str	r2, [sp, #4]
   2b338:	3109      	adds	r1, #9
   2b33a:	fba3 3101 	umull	r3, r1, r3, r1
   2b33e:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   2b340:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   2b342:	f04f 0320 	mov.w	r3, #32
   2b346:	f3ef 8411 	mrs	r4, BASEPRI
   2b34a:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   2b34e:	6901      	ldr	r1, [r0, #16]
   2b350:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b354:	d012      	beq.n	2b37c <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2b356:	4603      	mov	r3, r0
	return list->tail == node;
   2b358:	4a4d      	ldr	r2, [pc, #308]	; (2b490 <_impl_k_timer_start+0x168>)
   2b35a:	6912      	ldr	r2, [r2, #16]
   2b35c:	4290      	cmp	r0, r2
   2b35e:	d004      	beq.n	2b36a <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b360:	b100      	cbz	r0, 2b364 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2b362:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2b364:	691a      	ldr	r2, [r3, #16]
   2b366:	440a      	add	r2, r1
   2b368:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2b36a:	6843      	ldr	r3, [r0, #4]
   2b36c:	6802      	ldr	r2, [r0, #0]
   2b36e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b370:	6803      	ldr	r3, [r0, #0]
   2b372:	6842      	ldr	r2, [r0, #4]
   2b374:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b37a:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   2b37c:	9b01      	ldr	r3, [sp, #4]
   2b37e:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   2b380:	2200      	movs	r2, #0
   2b382:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   2b384:	4605      	mov	r5, r0
   2b386:	f100 0118 	add.w	r1, r0, #24
   2b38a:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2b38c:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2b38e:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2b390:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   2b392:	b133      	cbz	r3, 2b3a2 <_impl_k_timer_start+0x7a>
	return list->head == list;
   2b394:	4a3e      	ldr	r2, [pc, #248]	; (2b490 <_impl_k_timer_start+0x168>)
   2b396:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b39a:	4293      	cmp	r3, r2
   2b39c:	d14f      	bne.n	2b43e <_impl_k_timer_start+0x116>
   2b39e:	2300      	movs	r3, #0
   2b3a0:	e04d      	b.n	2b43e <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   2b3a2:	4613      	mov	r3, r2
   2b3a4:	f04f 0220 	mov.w	r2, #32
   2b3a8:	f3ef 8511 	mrs	r5, BASEPRI
   2b3ac:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b3b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b3b4:	6102      	str	r2, [r0, #16]
	if (thread) {
   2b3b6:	b323      	cbz	r3, 2b402 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   2b3b8:	68c2      	ldr	r2, [r0, #12]
   2b3ba:	b152      	cbz	r2, 2b3d2 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   2b3bc:	685a      	ldr	r2, [r3, #4]
   2b3be:	6819      	ldr	r1, [r3, #0]
   2b3c0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2b3c2:	681a      	ldr	r2, [r3, #0]
   2b3c4:	6859      	ldr	r1, [r3, #4]
   2b3c6:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b3c8:	7a5a      	ldrb	r2, [r3, #9]
   2b3ca:	f022 0202 	bic.w	r2, r2, #2
   2b3ce:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   2b3d0:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b3d2:	7a5a      	ldrb	r2, [r3, #9]
   2b3d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   2b3d8:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b3da:	f012 0f1b 	tst.w	r2, #27
   2b3de:	d107      	bne.n	2b3f0 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b3e0:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b3e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2b3e6:	d001      	beq.n	2b3ec <_impl_k_timer_start+0xc4>
   2b3e8:	2200      	movs	r2, #0
   2b3ea:	e002      	b.n	2b3f2 <_impl_k_timer_start+0xca>
   2b3ec:	2201      	movs	r2, #1
   2b3ee:	e000      	b.n	2b3f2 <_impl_k_timer_start+0xca>
   2b3f0:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   2b3f2:	b912      	cbnz	r2, 2b3fa <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b3f4:	f385 8811 	msr	BASEPRI, r5
   2b3f8:	e044      	b.n	2b484 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   2b3fa:	4618      	mov	r0, r3
   2b3fc:	f7ff f86e 	bl	2a4dc <_add_thread_to_ready_q>
   2b400:	e7f8      	b.n	2b3f4 <_impl_k_timer_start+0xcc>
   2b402:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2b406:	6943      	ldr	r3, [r0, #20]
   2b408:	2b00      	cmp	r3, #0
   2b40a:	d03b      	beq.n	2b484 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   2b40c:	4798      	blx	r3
   2b40e:	e039      	b.n	2b484 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   2b410:	1a8a      	subs	r2, r1, r2
   2b412:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2b414:	b133      	cbz	r3, 2b424 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   2b416:	685a      	ldr	r2, [r3, #4]
   2b418:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   2b41a:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   2b41c:	685a      	ldr	r2, [r3, #4]
   2b41e:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   2b420:	6058      	str	r0, [r3, #4]
   2b422:	e02f      	b.n	2b484 <_impl_k_timer_start+0x15c>
	node->next = list;
   2b424:	4b1b      	ldr	r3, [pc, #108]	; (2b494 <_impl_k_timer_start+0x16c>)
   2b426:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   2b428:	685a      	ldr	r2, [r3, #4]
   2b42a:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2b42c:	685a      	ldr	r2, [r3, #4]
   2b42e:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2b430:	6058      	str	r0, [r3, #4]
   2b432:	e027      	b.n	2b484 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b434:	4619      	mov	r1, r3
   2b436:	e011      	b.n	2b45c <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   2b438:	2100      	movs	r1, #0
   2b43a:	e00f      	b.n	2b45c <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b43c:	2300      	movs	r3, #0
   2b43e:	b1d3      	cbz	r3, 2b476 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2b440:	692a      	ldr	r2, [r5, #16]
   2b442:	6919      	ldr	r1, [r3, #16]
   2b444:	428a      	cmp	r2, r1
   2b446:	dde3      	ble.n	2b410 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   2b448:	1a52      	subs	r2, r2, r1
   2b44a:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b44c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b44e:	2b00      	cmp	r3, #0
   2b450:	d0f0      	beq.n	2b434 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2b452:	490f      	ldr	r1, [pc, #60]	; (2b490 <_impl_k_timer_start+0x168>)
   2b454:	6909      	ldr	r1, [r1, #16]
   2b456:	428b      	cmp	r3, r1
   2b458:	d0ee      	beq.n	2b438 <_impl_k_timer_start+0x110>
   2b45a:	6819      	ldr	r1, [r3, #0]
   2b45c:	2900      	cmp	r1, #0
   2b45e:	d0ed      	beq.n	2b43c <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b460:	b12a      	cbz	r2, 2b46e <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   2b462:	490b      	ldr	r1, [pc, #44]	; (2b490 <_impl_k_timer_start+0x168>)
   2b464:	6909      	ldr	r1, [r1, #16]
   2b466:	428a      	cmp	r2, r1
   2b468:	d003      	beq.n	2b472 <_impl_k_timer_start+0x14a>
   2b46a:	681b      	ldr	r3, [r3, #0]
   2b46c:	e7e7      	b.n	2b43e <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b46e:	2300      	movs	r3, #0
   2b470:	e7e5      	b.n	2b43e <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   2b472:	2300      	movs	r3, #0
   2b474:	e7e3      	b.n	2b43e <_impl_k_timer_start+0x116>
	node->next = list;
   2b476:	4b07      	ldr	r3, [pc, #28]	; (2b494 <_impl_k_timer_start+0x16c>)
   2b478:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   2b47a:	685a      	ldr	r2, [r3, #4]
   2b47c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2b47e:	685a      	ldr	r2, [r3, #4]
   2b480:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2b482:	6058      	str	r0, [r3, #4]
   2b484:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   2b488:	b003      	add	sp, #12
   2b48a:	bd30      	pop	{r4, r5, pc}
   2b48c:	cccccccd 	.word	0xcccccccd
   2b490:	20002808 	.word	0x20002808
   2b494:	20002814 	.word	0x20002814

0002b498 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   2b498:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b49a:	f04f 0320 	mov.w	r3, #32
   2b49e:	f3ef 8411 	mrs	r4, BASEPRI
   2b4a2:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2b4a6:	6903      	ldr	r3, [r0, #16]
   2b4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b4ac:	d042      	beq.n	2b534 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2b4ae:	4602      	mov	r2, r0
	return list->tail == node;
   2b4b0:	493b      	ldr	r1, [pc, #236]	; (2b5a0 <_impl_k_timer_stop+0x108>)
   2b4b2:	6909      	ldr	r1, [r1, #16]
   2b4b4:	4288      	cmp	r0, r1
   2b4b6:	d004      	beq.n	2b4c2 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b4b8:	b100      	cbz	r0, 2b4bc <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   2b4ba:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2b4bc:	6911      	ldr	r1, [r2, #16]
   2b4be:	440b      	add	r3, r1
   2b4c0:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   2b4c2:	6843      	ldr	r3, [r0, #4]
   2b4c4:	6802      	ldr	r2, [r0, #0]
   2b4c6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b4c8:	6803      	ldr	r3, [r0, #0]
   2b4ca:	6842      	ldr	r2, [r0, #4]
   2b4cc:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b4d2:	6103      	str	r3, [r0, #16]
	return 0;
   2b4d4:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b4d6:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   2b4da:	2b00      	cmp	r3, #0
   2b4dc:	d15f      	bne.n	2b59e <_impl_k_timer_stop+0x106>
   2b4de:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   2b4e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b4e2:	b103      	cbz	r3, 2b4e6 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   2b4e4:	4798      	blx	r3
	__asm__ volatile(
   2b4e6:	f04f 0320 	mov.w	r3, #32
   2b4ea:	f3ef 8511 	mrs	r5, BASEPRI
   2b4ee:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   2b4f2:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   2b4f6:	4b2b      	ldr	r3, [pc, #172]	; (2b5a4 <_impl_k_timer_stop+0x10c>)
   2b4f8:	681b      	ldr	r3, [r3, #0]
   2b4fa:	b9f3      	cbnz	r3, 2b53a <_impl_k_timer_stop+0xa2>
	return list->head == list;
   2b4fc:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b4fe:	4282      	cmp	r2, r0
   2b500:	d02c      	beq.n	2b55c <_impl_k_timer_stop+0xc4>
	if (thread) {
   2b502:	b148      	cbz	r0, 2b518 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   2b504:	6843      	ldr	r3, [r0, #4]
   2b506:	6802      	ldr	r2, [r0, #0]
   2b508:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b50a:	6803      	ldr	r3, [r0, #0]
   2b50c:	6842      	ldr	r2, [r0, #4]
   2b50e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b510:	7a43      	ldrb	r3, [r0, #9]
   2b512:	f023 0302 	bic.w	r3, r3, #2
   2b516:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   2b518:	b330      	cbz	r0, 2b568 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b51a:	7a43      	ldrb	r3, [r0, #9]
   2b51c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b520:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b522:	f013 0f1b 	tst.w	r3, #27
   2b526:	d11d      	bne.n	2b564 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b528:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b52e:	d017      	beq.n	2b560 <_impl_k_timer_stop+0xc8>
   2b530:	2300      	movs	r3, #0
   2b532:	e018      	b.n	2b566 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   2b534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b538:	e7cd      	b.n	2b4d6 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   2b53a:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b53c:	4282      	cmp	r2, r0
   2b53e:	d102      	bne.n	2b546 <_impl_k_timer_stop+0xae>
   2b540:	2000      	movs	r0, #0
   2b542:	e000      	b.n	2b546 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   2b544:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2b546:	2800      	cmp	r0, #0
   2b548:	d0db      	beq.n	2b502 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2b54a:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   2b54c:	f113 0f02 	cmn.w	r3, #2
   2b550:	d1d7      	bne.n	2b502 <_impl_k_timer_stop+0x6a>
   2b552:	6853      	ldr	r3, [r2, #4]
   2b554:	4298      	cmp	r0, r3
   2b556:	d1f5      	bne.n	2b544 <_impl_k_timer_stop+0xac>
   2b558:	2000      	movs	r0, #0
   2b55a:	e7f4      	b.n	2b546 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b55c:	2000      	movs	r0, #0
   2b55e:	e7d0      	b.n	2b502 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   2b560:	2301      	movs	r3, #1
   2b562:	e000      	b.n	2b566 <_impl_k_timer_stop+0xce>
   2b564:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2b566:	b95b      	cbnz	r3, 2b580 <_impl_k_timer_stop+0xe8>
   2b568:	f3ef 8305 	mrs	r3, IPSR
   2b56c:	2b0d      	cmp	r3, #13
   2b56e:	d80a      	bhi.n	2b586 <_impl_k_timer_stop+0xee>
   2b570:	b173      	cbz	r3, 2b590 <_impl_k_timer_stop+0xf8>
   2b572:	4b0d      	ldr	r3, [pc, #52]	; (2b5a8 <_impl_k_timer_stop+0x110>)
   2b574:	685b      	ldr	r3, [r3, #4]
   2b576:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2b57a:	d00b      	beq.n	2b594 <_impl_k_timer_stop+0xfc>
   2b57c:	2300      	movs	r3, #0
   2b57e:	e003      	b.n	2b588 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   2b580:	f7fe ffac 	bl	2a4dc <_add_thread_to_ready_q>
   2b584:	e7f0      	b.n	2b568 <_impl_k_timer_stop+0xd0>
   2b586:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   2b588:	b133      	cbz	r3, 2b598 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b58a:	f385 8811 	msr	BASEPRI, r5
   2b58e:	bd38      	pop	{r3, r4, r5, pc}
   2b590:	2300      	movs	r3, #0
   2b592:	e7f9      	b.n	2b588 <_impl_k_timer_stop+0xf0>
   2b594:	2301      	movs	r3, #1
   2b596:	e7f7      	b.n	2b588 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   2b598:	4628      	mov	r0, r5
   2b59a:	f7ff f937 	bl	2a80c <_reschedule_threads>
   2b59e:	bd38      	pop	{r3, r4, r5, pc}
   2b5a0:	20002808 	.word	0x20002808
   2b5a4:	20002bf0 	.word	0x20002bf0
   2b5a8:	e000ed00 	.word	0xe000ed00

0002b5ac <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   2b5ac:	b430      	push	{r4, r5}
	__asm__ volatile(
   2b5ae:	f04f 0320 	mov.w	r3, #32
   2b5b2:	f3ef 8411 	mrs	r4, BASEPRI
   2b5b6:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2b5ba:	6903      	ldr	r3, [r0, #16]
   2b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b5c0:	d017      	beq.n	2b5f2 <_timeout_remaining_get+0x46>
	return list->head == list;
   2b5c2:	4a10      	ldr	r2, [pc, #64]	; (2b604 <_timeout_remaining_get+0x58>)
   2b5c4:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b5c8:	4293      	cmp	r3, r2
   2b5ca:	d001      	beq.n	2b5d0 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   2b5cc:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   2b5ce:	e005      	b.n	2b5dc <_timeout_remaining_get+0x30>
   2b5d0:	2300      	movs	r3, #0
   2b5d2:	e7fb      	b.n	2b5cc <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   2b5d4:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   2b5d6:	6913      	ldr	r3, [r2, #16]
   2b5d8:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2b5da:	4613      	mov	r3, r2
		while (t != timeout) {
   2b5dc:	4283      	cmp	r3, r0
   2b5de:	d009      	beq.n	2b5f4 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2b5e0:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b5e2:	2b00      	cmp	r3, #0
   2b5e4:	d0f7      	beq.n	2b5d6 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2b5e6:	4a07      	ldr	r2, [pc, #28]	; (2b604 <_timeout_remaining_get+0x58>)
   2b5e8:	6912      	ldr	r2, [r2, #16]
   2b5ea:	4293      	cmp	r3, r2
   2b5ec:	d0f2      	beq.n	2b5d4 <_timeout_remaining_get+0x28>
   2b5ee:	681a      	ldr	r2, [r3, #0]
   2b5f0:	e7f1      	b.n	2b5d6 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   2b5f2:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b5f4:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   2b5f8:	008a      	lsls	r2, r1, #2
   2b5fa:	1850      	adds	r0, r2, r1
   2b5fc:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   2b5fe:	bc30      	pop	{r4, r5}
   2b600:	4770      	bx	lr
   2b602:	bf00      	nop
   2b604:	20002808 	.word	0x20002808

0002b608 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2b608:	b538      	push	{r3, r4, r5, lr}
   2b60a:	4604      	mov	r4, r0
   2b60c:	e003      	b.n	2b616 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2b60e:	4610      	mov	r0, r2
   2b610:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2b612:	f7ff f927 	bl	2a864 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   2b616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b61a:	4620      	mov	r0, r4
   2b61c:	f7fe ff0c 	bl	2a438 <k_queue_get>
		if (!work) {
   2b620:	4602      	mov	r2, r0
   2b622:	2800      	cmp	r0, #0
   2b624:	d0f7      	beq.n	2b616 <work_q_main+0xe>
		handler = work->handler;
   2b626:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   2b628:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b62c:	f3bf 8f5b 	dmb	ish
   2b630:	e853 1f00 	ldrex	r1, [r3]
   2b634:	f021 0001 	bic.w	r0, r1, #1
   2b638:	e843 0e00 	strex	lr, r0, [r3]
   2b63c:	f1be 0f00 	cmp.w	lr, #0
   2b640:	d1f6      	bne.n	2b630 <work_q_main+0x28>
   2b642:	f3bf 8f5b 	dmb	ish
   2b646:	f011 0f01 	tst.w	r1, #1
   2b64a:	d0e2      	beq.n	2b612 <work_q_main+0xa>
   2b64c:	e7df      	b.n	2b60e <work_q_main+0x6>

0002b64e <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   2b64e:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2b650:	6984      	ldr	r4, [r0, #24]
   2b652:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b656:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b658:	f3bf 8f5b 	dmb	ish
   2b65c:	e853 2f00 	ldrex	r2, [r3]
   2b660:	f042 0001 	orr.w	r0, r2, #1
   2b664:	e843 0e00 	strex	lr, r0, [r3]
   2b668:	f1be 0f00 	cmp.w	lr, #0
   2b66c:	d1f6      	bne.n	2b65c <work_timeout+0xe>
   2b66e:	f3bf 8f5b 	dmb	ish
   2b672:	f012 0f01 	tst.w	r2, #1
   2b676:	d000      	beq.n	2b67a <work_timeout+0x2c>
   2b678:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   2b67a:	4620      	mov	r0, r4
   2b67c:	f7fe feb4 	bl	2a3e8 <k_queue_append>
}
   2b680:	e7fa      	b.n	2b678 <work_timeout+0x2a>
	...

0002b684 <k_work_q_start>:
{
   2b684:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b686:	b087      	sub	sp, #28
   2b688:	4604      	mov	r4, r0
   2b68a:	460d      	mov	r5, r1
   2b68c:	4616      	mov	r6, r2
   2b68e:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   2b690:	f7fe fe77 	bl	2a382 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   2b694:	2300      	movs	r3, #0
   2b696:	9305      	str	r3, [sp, #20]
   2b698:	9304      	str	r3, [sp, #16]
   2b69a:	9703      	str	r7, [sp, #12]
   2b69c:	9302      	str	r3, [sp, #8]
   2b69e:	9301      	str	r3, [sp, #4]
   2b6a0:	9400      	str	r4, [sp, #0]
   2b6a2:	4b04      	ldr	r3, [pc, #16]	; (2b6b4 <k_work_q_start+0x30>)
   2b6a4:	4632      	mov	r2, r6
   2b6a6:	4629      	mov	r1, r5
   2b6a8:	f104 0010 	add.w	r0, r4, #16
   2b6ac:	f7ff fcb2 	bl	2b014 <_impl_k_thread_create>
}
   2b6b0:	b007      	add	sp, #28
   2b6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b6b4:	0002b609 	.word	0x0002b609

0002b6b8 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   2b6b8:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   2b6ba:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b6be:	f3bf 8f5b 	dmb	ish
   2b6c2:	e853 2f00 	ldrex	r2, [r3]
   2b6c6:	f022 0201 	bic.w	r2, r2, #1
   2b6ca:	e843 2e00 	strex	lr, r2, [r3]
   2b6ce:	f1be 0f00 	cmp.w	lr, #0
   2b6d2:	d1f6      	bne.n	2b6c2 <k_delayed_work_init+0xa>
   2b6d4:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   2b6d8:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   2b6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b6de:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   2b6e0:	2300      	movs	r3, #0
   2b6e2:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   2b6e4:	6143      	str	r3, [r0, #20]
	t->func = func;
   2b6e6:	4a02      	ldr	r2, [pc, #8]	; (2b6f0 <k_delayed_work_init+0x38>)
   2b6e8:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2b6ea:	6243      	str	r3, [r0, #36]	; 0x24
   2b6ec:	f85d fb04 	ldr.w	pc, [sp], #4
   2b6f0:	0002b64f 	.word	0x0002b64f

0002b6f4 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2b6f4:	b430      	push	{r4, r5}
	__asm__ volatile(
   2b6f6:	f04f 0320 	mov.w	r3, #32
   2b6fa:	f3ef 8411 	mrs	r4, BASEPRI
   2b6fe:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   2b702:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b704:	b18b      	cbz	r3, 2b72a <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b706:	f3bf 8f5b 	dmb	ish
   2b70a:	6883      	ldr	r3, [r0, #8]
   2b70c:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   2b710:	f013 0f01 	tst.w	r3, #1
   2b714:	d02d      	beq.n	2b772 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2b716:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2b718:	4601      	mov	r1, r0
	return list->head;
   2b71a:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   2b71c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2b71e:	b193      	cbz	r3, 2b746 <k_delayed_work_cancel+0x52>
		if (test == node) {
   2b720:	4299      	cmp	r1, r3
   2b722:	d007      	beq.n	2b734 <k_delayed_work_cancel+0x40>
		prev = test;
   2b724:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2b726:	681b      	ldr	r3, [r3, #0]
   2b728:	e7f9      	b.n	2b71e <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b72a:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   2b72e:	f06f 0015 	mvn.w	r0, #21
   2b732:	e00e      	b.n	2b752 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   2b734:	b17a      	cbz	r2, 2b756 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   2b736:	6803      	ldr	r3, [r0, #0]
   2b738:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2b73a:	686b      	ldr	r3, [r5, #4]
   2b73c:	4298      	cmp	r0, r3
   2b73e:	d011      	beq.n	2b764 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   2b740:	2300      	movs	r3, #0
   2b742:	6003      	str	r3, [r0, #0]
			return true;
   2b744:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2b746:	b17b      	cbz	r3, 2b768 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   2b748:	2300      	movs	r3, #0
   2b74a:	6243      	str	r3, [r0, #36]	; 0x24
   2b74c:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2b750:	4618      	mov	r0, r3
}
   2b752:	bc30      	pop	{r4, r5}
   2b754:	4770      	bx	lr
		list->head = node->next;
   2b756:	6803      	ldr	r3, [r0, #0]
   2b758:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   2b75a:	686a      	ldr	r2, [r5, #4]
   2b75c:	4290      	cmp	r0, r2
   2b75e:	d1ef      	bne.n	2b740 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2b760:	606b      	str	r3, [r5, #4]
   2b762:	e7ed      	b.n	2b740 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   2b764:	606a      	str	r2, [r5, #4]
   2b766:	e7eb      	b.n	2b740 <k_delayed_work_cancel+0x4c>
   2b768:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   2b76c:	f06f 0015 	mvn.w	r0, #21
   2b770:	e7ef      	b.n	2b752 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2b772:	69c2      	ldr	r2, [r0, #28]
   2b774:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2b778:	d0e6      	beq.n	2b748 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2b77a:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2b77e:	4909      	ldr	r1, [pc, #36]	; (2b7a4 <k_delayed_work_cancel+0xb0>)
   2b780:	6909      	ldr	r1, [r1, #16]
   2b782:	428b      	cmp	r3, r1
   2b784:	d004      	beq.n	2b790 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b786:	b103      	cbz	r3, 2b78a <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   2b788:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2b78a:	6919      	ldr	r1, [r3, #16]
   2b78c:	440a      	add	r2, r1
   2b78e:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2b790:	6903      	ldr	r3, [r0, #16]
   2b792:	68c2      	ldr	r2, [r0, #12]
   2b794:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b796:	68c3      	ldr	r3, [r0, #12]
   2b798:	6902      	ldr	r2, [r0, #16]
   2b79a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b7a0:	61c3      	str	r3, [r0, #28]
   2b7a2:	e7d1      	b.n	2b748 <k_delayed_work_cancel+0x54>
   2b7a4:	20002808 	.word	0x20002808

0002b7a8 <k_delayed_work_submit_to_queue>:
{
   2b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2b7aa:	f04f 0320 	mov.w	r3, #32
   2b7ae:	f3ef 8711 	mrs	r7, BASEPRI
   2b7b2:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2b7b6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2b7b8:	b113      	cbz	r3, 2b7c0 <k_delayed_work_submit_to_queue+0x18>
   2b7ba:	4283      	cmp	r3, r0
   2b7bc:	f040 80b4 	bne.w	2b928 <k_delayed_work_submit_to_queue+0x180>
   2b7c0:	4614      	mov	r4, r2
   2b7c2:	460e      	mov	r6, r1
   2b7c4:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2b7c6:	4283      	cmp	r3, r0
   2b7c8:	d016      	beq.n	2b7f8 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2b7ca:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   2b7cc:	b1d4      	cbz	r4, 2b804 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2b7ce:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2b7d2:	f104 0309 	add.w	r3, r4, #9
   2b7d6:	4c57      	ldr	r4, [pc, #348]	; (2b934 <k_delayed_work_submit_to_queue+0x18c>)
   2b7d8:	fba4 2303 	umull	r2, r3, r4, r3
   2b7dc:	08db      	lsrs	r3, r3, #3
   2b7de:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2b7e0:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2b7e2:	2200      	movs	r2, #0
   2b7e4:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2b7e6:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2b7e8:	b32b      	cbz	r3, 2b836 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2b7ea:	4a53      	ldr	r2, [pc, #332]	; (2b938 <k_delayed_work_submit_to_queue+0x190>)
   2b7ec:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b7f0:	4293      	cmp	r3, r2
   2b7f2:	d172      	bne.n	2b8da <k_delayed_work_submit_to_queue+0x132>
   2b7f4:	2300      	movs	r3, #0
   2b7f6:	e070      	b.n	2b8da <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2b7f8:	4608      	mov	r0, r1
   2b7fa:	f7ff ff7b 	bl	2b6f4 <k_delayed_work_cancel>
		if (err < 0) {
   2b7fe:	2800      	cmp	r0, #0
   2b800:	dae3      	bge.n	2b7ca <k_delayed_work_submit_to_queue+0x22>
   2b802:	e08e      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b804:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b808:	f3bf 8f5b 	dmb	ish
   2b80c:	e853 2f00 	ldrex	r2, [r3]
   2b810:	f042 0101 	orr.w	r1, r2, #1
   2b814:	e843 1000 	strex	r0, r1, [r3]
   2b818:	2800      	cmp	r0, #0
   2b81a:	d1f7      	bne.n	2b80c <k_delayed_work_submit_to_queue+0x64>
   2b81c:	f3bf 8f5b 	dmb	ish
   2b820:	f012 0f01 	tst.w	r2, #1
   2b824:	d001      	beq.n	2b82a <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   2b826:	2000      	movs	r0, #0
   2b828:	e07b      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   2b82a:	4631      	mov	r1, r6
   2b82c:	4628      	mov	r0, r5
   2b82e:	f7fe fddb 	bl	2a3e8 <k_queue_append>
   2b832:	2000      	movs	r0, #0
   2b834:	e075      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   2b836:	4610      	mov	r0, r2
   2b838:	f04f 0320 	mov.w	r3, #32
   2b83c:	f3ef 8411 	mrs	r4, BASEPRI
   2b840:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2b844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b848:	612b      	str	r3, [r5, #16]
	if (thread) {
   2b84a:	b322      	cbz	r2, 2b896 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   2b84c:	68eb      	ldr	r3, [r5, #12]
   2b84e:	b153      	cbz	r3, 2b866 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2b850:	6853      	ldr	r3, [r2, #4]
   2b852:	6812      	ldr	r2, [r2, #0]
   2b854:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2b856:	6803      	ldr	r3, [r0, #0]
   2b858:	6842      	ldr	r2, [r0, #4]
   2b85a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b85c:	7a43      	ldrb	r3, [r0, #9]
   2b85e:	f023 0302 	bic.w	r3, r3, #2
   2b862:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2b864:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2b866:	7a43      	ldrb	r3, [r0, #9]
   2b868:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b86c:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2b86e:	f013 0f1b 	tst.w	r3, #27
   2b872:	d107      	bne.n	2b884 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2b874:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2b876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b87a:	d001      	beq.n	2b880 <k_delayed_work_submit_to_queue+0xd8>
   2b87c:	2300      	movs	r3, #0
   2b87e:	e002      	b.n	2b886 <k_delayed_work_submit_to_queue+0xde>
   2b880:	2301      	movs	r3, #1
   2b882:	e000      	b.n	2b886 <k_delayed_work_submit_to_queue+0xde>
   2b884:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2b886:	b91b      	cbnz	r3, 2b890 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2b888:	f384 8811 	msr	BASEPRI, r4
   2b88c:	2000      	movs	r0, #0
   2b88e:	e048      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2b890:	f7fe fe24 	bl	2a4dc <_add_thread_to_ready_q>
   2b894:	e7f8      	b.n	2b888 <k_delayed_work_submit_to_queue+0xe0>
   2b896:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2b89a:	696b      	ldr	r3, [r5, #20]
   2b89c:	2b00      	cmp	r3, #0
   2b89e:	d046      	beq.n	2b92e <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2b8a0:	4628      	mov	r0, r5
   2b8a2:	4798      	blx	r3
   2b8a4:	2000      	movs	r0, #0
   2b8a6:	e03c      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2b8a8:	1aa2      	subs	r2, r4, r2
   2b8aa:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2b8ac:	b13b      	cbz	r3, 2b8be <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2b8ae:	685a      	ldr	r2, [r3, #4]
   2b8b0:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2b8b2:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   2b8b4:	685a      	ldr	r2, [r3, #4]
   2b8b6:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2b8b8:	605d      	str	r5, [r3, #4]
   2b8ba:	2000      	movs	r0, #0
   2b8bc:	e031      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2b8be:	4b1f      	ldr	r3, [pc, #124]	; (2b93c <k_delayed_work_submit_to_queue+0x194>)
   2b8c0:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2b8c2:	685a      	ldr	r2, [r3, #4]
   2b8c4:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2b8c6:	685a      	ldr	r2, [r3, #4]
   2b8c8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2b8ca:	605d      	str	r5, [r3, #4]
   2b8cc:	2000      	movs	r0, #0
   2b8ce:	e028      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b8d0:	4619      	mov	r1, r3
   2b8d2:	e011      	b.n	2b8f8 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   2b8d4:	2100      	movs	r1, #0
   2b8d6:	e00f      	b.n	2b8f8 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b8d8:	2300      	movs	r3, #0
   2b8da:	b1d3      	cbz	r3, 2b912 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2b8dc:	692a      	ldr	r2, [r5, #16]
   2b8de:	691c      	ldr	r4, [r3, #16]
   2b8e0:	42a2      	cmp	r2, r4
   2b8e2:	dde1      	ble.n	2b8a8 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   2b8e4:	1b12      	subs	r2, r2, r4
   2b8e6:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2b8e8:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b8ea:	2b00      	cmp	r3, #0
   2b8ec:	d0f0      	beq.n	2b8d0 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2b8ee:	4912      	ldr	r1, [pc, #72]	; (2b938 <k_delayed_work_submit_to_queue+0x190>)
   2b8f0:	6909      	ldr	r1, [r1, #16]
   2b8f2:	428b      	cmp	r3, r1
   2b8f4:	d0ee      	beq.n	2b8d4 <k_delayed_work_submit_to_queue+0x12c>
   2b8f6:	6819      	ldr	r1, [r3, #0]
   2b8f8:	2900      	cmp	r1, #0
   2b8fa:	d0ed      	beq.n	2b8d8 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b8fc:	b12a      	cbz	r2, 2b90a <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2b8fe:	490e      	ldr	r1, [pc, #56]	; (2b938 <k_delayed_work_submit_to_queue+0x190>)
   2b900:	6909      	ldr	r1, [r1, #16]
   2b902:	428a      	cmp	r2, r1
   2b904:	d003      	beq.n	2b90e <k_delayed_work_submit_to_queue+0x166>
   2b906:	681b      	ldr	r3, [r3, #0]
   2b908:	e7e7      	b.n	2b8da <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2b90a:	2300      	movs	r3, #0
   2b90c:	e7e5      	b.n	2b8da <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2b90e:	2300      	movs	r3, #0
   2b910:	e7e3      	b.n	2b8da <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2b912:	4b0a      	ldr	r3, [pc, #40]	; (2b93c <k_delayed_work_submit_to_queue+0x194>)
   2b914:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2b916:	685a      	ldr	r2, [r3, #4]
   2b918:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2b91a:	685a      	ldr	r2, [r3, #4]
   2b91c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2b91e:	605d      	str	r5, [r3, #4]
   2b920:	2000      	movs	r0, #0
   2b922:	f387 8811 	msr	BASEPRI, r7
}
   2b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2b928:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2b92c:	e7f9      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2b92e:	2000      	movs	r0, #0
   2b930:	e7f7      	b.n	2b922 <k_delayed_work_submit_to_queue+0x17a>
   2b932:	bf00      	nop
   2b934:	cccccccd 	.word	0xcccccccd
   2b938:	20002808 	.word	0x20002808
   2b93c:	20002814 	.word	0x20002814

0002b940 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2b940:	4770      	bx	lr
	...

0002b944 <_calloc_r>:
   2b944:	b510      	push	{r4, lr}
   2b946:	fb02 f101 	mul.w	r1, r2, r1
   2b94a:	f000 f83d 	bl	2b9c8 <_malloc_r>
   2b94e:	4604      	mov	r4, r0
   2b950:	b1d8      	cbz	r0, 2b98a <_calloc_r+0x46>
   2b952:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2b956:	f022 0203 	bic.w	r2, r2, #3
   2b95a:	3a04      	subs	r2, #4
   2b95c:	2a24      	cmp	r2, #36	; 0x24
   2b95e:	d818      	bhi.n	2b992 <_calloc_r+0x4e>
   2b960:	2a13      	cmp	r2, #19
   2b962:	d914      	bls.n	2b98e <_calloc_r+0x4a>
   2b964:	2300      	movs	r3, #0
   2b966:	2a1b      	cmp	r2, #27
   2b968:	6003      	str	r3, [r0, #0]
   2b96a:	6043      	str	r3, [r0, #4]
   2b96c:	d916      	bls.n	2b99c <_calloc_r+0x58>
   2b96e:	2a24      	cmp	r2, #36	; 0x24
   2b970:	6083      	str	r3, [r0, #8]
   2b972:	60c3      	str	r3, [r0, #12]
   2b974:	bf11      	iteee	ne
   2b976:	f100 0210 	addne.w	r2, r0, #16
   2b97a:	6103      	streq	r3, [r0, #16]
   2b97c:	6143      	streq	r3, [r0, #20]
   2b97e:	f100 0218 	addeq.w	r2, r0, #24
   2b982:	2300      	movs	r3, #0
   2b984:	6013      	str	r3, [r2, #0]
   2b986:	6053      	str	r3, [r2, #4]
   2b988:	6093      	str	r3, [r2, #8]
   2b98a:	4620      	mov	r0, r4
   2b98c:	bd10      	pop	{r4, pc}
   2b98e:	4602      	mov	r2, r0
   2b990:	e7f7      	b.n	2b982 <_calloc_r+0x3e>
   2b992:	2100      	movs	r1, #0
   2b994:	f000 fb72 	bl	2c07c <memset>
   2b998:	4620      	mov	r0, r4
   2b99a:	bd10      	pop	{r4, pc}
   2b99c:	f100 0208 	add.w	r2, r0, #8
   2b9a0:	e7ef      	b.n	2b982 <_calloc_r+0x3e>
   2b9a2:	bf00      	nop

0002b9a4 <__locale_ctype_ptr_l>:
   2b9a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2b9a8:	4770      	bx	lr
   2b9aa:	bf00      	nop

0002b9ac <__locale_ctype_ptr>:
   2b9ac:	4b04      	ldr	r3, [pc, #16]	; (2b9c0 <__locale_ctype_ptr+0x14>)
   2b9ae:	4a05      	ldr	r2, [pc, #20]	; (2b9c4 <__locale_ctype_ptr+0x18>)
   2b9b0:	681b      	ldr	r3, [r3, #0]
   2b9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2b9b4:	2b00      	cmp	r3, #0
   2b9b6:	bf08      	it	eq
   2b9b8:	4613      	moveq	r3, r2
   2b9ba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2b9be:	4770      	bx	lr
   2b9c0:	2000c618 	.word	0x2000c618
   2b9c4:	2000ca48 	.word	0x2000ca48

0002b9c8 <_malloc_r>:
   2b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9cc:	f101 060b 	add.w	r6, r1, #11
   2b9d0:	2e16      	cmp	r6, #22
   2b9d2:	b083      	sub	sp, #12
   2b9d4:	4605      	mov	r5, r0
   2b9d6:	f240 809e 	bls.w	2bb16 <_malloc_r+0x14e>
   2b9da:	f036 0607 	bics.w	r6, r6, #7
   2b9de:	f100 80bd 	bmi.w	2bb5c <_malloc_r+0x194>
   2b9e2:	42b1      	cmp	r1, r6
   2b9e4:	f200 80ba 	bhi.w	2bb5c <_malloc_r+0x194>
   2b9e8:	f000 fb96 	bl	2c118 <__malloc_lock>
   2b9ec:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2b9f0:	f0c0 8293 	bcc.w	2bf1a <_malloc_r+0x552>
   2b9f4:	0a73      	lsrs	r3, r6, #9
   2b9f6:	f000 80b8 	beq.w	2bb6a <_malloc_r+0x1a2>
   2b9fa:	2b04      	cmp	r3, #4
   2b9fc:	f200 8179 	bhi.w	2bcf2 <_malloc_r+0x32a>
   2ba00:	09b3      	lsrs	r3, r6, #6
   2ba02:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2ba06:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2ba0a:	00c3      	lsls	r3, r0, #3
   2ba0c:	4fbf      	ldr	r7, [pc, #764]	; (2bd0c <_malloc_r+0x344>)
   2ba0e:	443b      	add	r3, r7
   2ba10:	f1a3 0108 	sub.w	r1, r3, #8
   2ba14:	685c      	ldr	r4, [r3, #4]
   2ba16:	42a1      	cmp	r1, r4
   2ba18:	d106      	bne.n	2ba28 <_malloc_r+0x60>
   2ba1a:	e00c      	b.n	2ba36 <_malloc_r+0x6e>
   2ba1c:	2a00      	cmp	r2, #0
   2ba1e:	f280 80aa 	bge.w	2bb76 <_malloc_r+0x1ae>
   2ba22:	68e4      	ldr	r4, [r4, #12]
   2ba24:	42a1      	cmp	r1, r4
   2ba26:	d006      	beq.n	2ba36 <_malloc_r+0x6e>
   2ba28:	6863      	ldr	r3, [r4, #4]
   2ba2a:	f023 0303 	bic.w	r3, r3, #3
   2ba2e:	1b9a      	subs	r2, r3, r6
   2ba30:	2a0f      	cmp	r2, #15
   2ba32:	ddf3      	ble.n	2ba1c <_malloc_r+0x54>
   2ba34:	4670      	mov	r0, lr
   2ba36:	693c      	ldr	r4, [r7, #16]
   2ba38:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2bd20 <_malloc_r+0x358>
   2ba3c:	4574      	cmp	r4, lr
   2ba3e:	f000 81ab 	beq.w	2bd98 <_malloc_r+0x3d0>
   2ba42:	6863      	ldr	r3, [r4, #4]
   2ba44:	f023 0303 	bic.w	r3, r3, #3
   2ba48:	1b9a      	subs	r2, r3, r6
   2ba4a:	2a0f      	cmp	r2, #15
   2ba4c:	f300 8190 	bgt.w	2bd70 <_malloc_r+0x3a8>
   2ba50:	2a00      	cmp	r2, #0
   2ba52:	f8c7 e014 	str.w	lr, [r7, #20]
   2ba56:	f8c7 e010 	str.w	lr, [r7, #16]
   2ba5a:	f280 809d 	bge.w	2bb98 <_malloc_r+0x1d0>
   2ba5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2ba62:	f080 8161 	bcs.w	2bd28 <_malloc_r+0x360>
   2ba66:	08db      	lsrs	r3, r3, #3
   2ba68:	f103 0c01 	add.w	ip, r3, #1
   2ba6c:	1099      	asrs	r1, r3, #2
   2ba6e:	687a      	ldr	r2, [r7, #4]
   2ba70:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2ba74:	f8c4 8008 	str.w	r8, [r4, #8]
   2ba78:	2301      	movs	r3, #1
   2ba7a:	408b      	lsls	r3, r1
   2ba7c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2ba80:	4313      	orrs	r3, r2
   2ba82:	3908      	subs	r1, #8
   2ba84:	60e1      	str	r1, [r4, #12]
   2ba86:	607b      	str	r3, [r7, #4]
   2ba88:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2ba8c:	f8c8 400c 	str.w	r4, [r8, #12]
   2ba90:	1082      	asrs	r2, r0, #2
   2ba92:	2401      	movs	r4, #1
   2ba94:	4094      	lsls	r4, r2
   2ba96:	429c      	cmp	r4, r3
   2ba98:	f200 808b 	bhi.w	2bbb2 <_malloc_r+0x1ea>
   2ba9c:	421c      	tst	r4, r3
   2ba9e:	d106      	bne.n	2baae <_malloc_r+0xe6>
   2baa0:	f020 0003 	bic.w	r0, r0, #3
   2baa4:	0064      	lsls	r4, r4, #1
   2baa6:	421c      	tst	r4, r3
   2baa8:	f100 0004 	add.w	r0, r0, #4
   2baac:	d0fa      	beq.n	2baa4 <_malloc_r+0xdc>
   2baae:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2bab2:	46cc      	mov	ip, r9
   2bab4:	4680      	mov	r8, r0
   2bab6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2baba:	459c      	cmp	ip, r3
   2babc:	d107      	bne.n	2bace <_malloc_r+0x106>
   2babe:	e16d      	b.n	2bd9c <_malloc_r+0x3d4>
   2bac0:	2a00      	cmp	r2, #0
   2bac2:	f280 817b 	bge.w	2bdbc <_malloc_r+0x3f4>
   2bac6:	68db      	ldr	r3, [r3, #12]
   2bac8:	459c      	cmp	ip, r3
   2baca:	f000 8167 	beq.w	2bd9c <_malloc_r+0x3d4>
   2bace:	6859      	ldr	r1, [r3, #4]
   2bad0:	f021 0103 	bic.w	r1, r1, #3
   2bad4:	1b8a      	subs	r2, r1, r6
   2bad6:	2a0f      	cmp	r2, #15
   2bad8:	ddf2      	ble.n	2bac0 <_malloc_r+0xf8>
   2bada:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2bade:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2bae2:	9300      	str	r3, [sp, #0]
   2bae4:	199c      	adds	r4, r3, r6
   2bae6:	4628      	mov	r0, r5
   2bae8:	f046 0601 	orr.w	r6, r6, #1
   2baec:	f042 0501 	orr.w	r5, r2, #1
   2baf0:	605e      	str	r6, [r3, #4]
   2baf2:	f8c8 c00c 	str.w	ip, [r8, #12]
   2baf6:	f8cc 8008 	str.w	r8, [ip, #8]
   2bafa:	617c      	str	r4, [r7, #20]
   2bafc:	613c      	str	r4, [r7, #16]
   2bafe:	f8c4 e00c 	str.w	lr, [r4, #12]
   2bb02:	f8c4 e008 	str.w	lr, [r4, #8]
   2bb06:	6065      	str	r5, [r4, #4]
   2bb08:	505a      	str	r2, [r3, r1]
   2bb0a:	f000 fb0b 	bl	2c124 <__malloc_unlock>
   2bb0e:	9b00      	ldr	r3, [sp, #0]
   2bb10:	f103 0408 	add.w	r4, r3, #8
   2bb14:	e01e      	b.n	2bb54 <_malloc_r+0x18c>
   2bb16:	2910      	cmp	r1, #16
   2bb18:	d820      	bhi.n	2bb5c <_malloc_r+0x194>
   2bb1a:	f000 fafd 	bl	2c118 <__malloc_lock>
   2bb1e:	2610      	movs	r6, #16
   2bb20:	2318      	movs	r3, #24
   2bb22:	2002      	movs	r0, #2
   2bb24:	4f79      	ldr	r7, [pc, #484]	; (2bd0c <_malloc_r+0x344>)
   2bb26:	443b      	add	r3, r7
   2bb28:	f1a3 0208 	sub.w	r2, r3, #8
   2bb2c:	685c      	ldr	r4, [r3, #4]
   2bb2e:	4294      	cmp	r4, r2
   2bb30:	f000 813d 	beq.w	2bdae <_malloc_r+0x3e6>
   2bb34:	6863      	ldr	r3, [r4, #4]
   2bb36:	68e1      	ldr	r1, [r4, #12]
   2bb38:	68a6      	ldr	r6, [r4, #8]
   2bb3a:	f023 0303 	bic.w	r3, r3, #3
   2bb3e:	4423      	add	r3, r4
   2bb40:	4628      	mov	r0, r5
   2bb42:	685a      	ldr	r2, [r3, #4]
   2bb44:	60f1      	str	r1, [r6, #12]
   2bb46:	f042 0201 	orr.w	r2, r2, #1
   2bb4a:	608e      	str	r6, [r1, #8]
   2bb4c:	605a      	str	r2, [r3, #4]
   2bb4e:	f000 fae9 	bl	2c124 <__malloc_unlock>
   2bb52:	3408      	adds	r4, #8
   2bb54:	4620      	mov	r0, r4
   2bb56:	b003      	add	sp, #12
   2bb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb5c:	2400      	movs	r4, #0
   2bb5e:	230c      	movs	r3, #12
   2bb60:	4620      	mov	r0, r4
   2bb62:	602b      	str	r3, [r5, #0]
   2bb64:	b003      	add	sp, #12
   2bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb6a:	2040      	movs	r0, #64	; 0x40
   2bb6c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2bb70:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2bb74:	e74a      	b.n	2ba0c <_malloc_r+0x44>
   2bb76:	4423      	add	r3, r4
   2bb78:	68e1      	ldr	r1, [r4, #12]
   2bb7a:	685a      	ldr	r2, [r3, #4]
   2bb7c:	68a6      	ldr	r6, [r4, #8]
   2bb7e:	f042 0201 	orr.w	r2, r2, #1
   2bb82:	60f1      	str	r1, [r6, #12]
   2bb84:	4628      	mov	r0, r5
   2bb86:	608e      	str	r6, [r1, #8]
   2bb88:	605a      	str	r2, [r3, #4]
   2bb8a:	f000 facb 	bl	2c124 <__malloc_unlock>
   2bb8e:	3408      	adds	r4, #8
   2bb90:	4620      	mov	r0, r4
   2bb92:	b003      	add	sp, #12
   2bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb98:	4423      	add	r3, r4
   2bb9a:	4628      	mov	r0, r5
   2bb9c:	685a      	ldr	r2, [r3, #4]
   2bb9e:	f042 0201 	orr.w	r2, r2, #1
   2bba2:	605a      	str	r2, [r3, #4]
   2bba4:	f000 fabe 	bl	2c124 <__malloc_unlock>
   2bba8:	3408      	adds	r4, #8
   2bbaa:	4620      	mov	r0, r4
   2bbac:	b003      	add	sp, #12
   2bbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbb2:	68bc      	ldr	r4, [r7, #8]
   2bbb4:	6863      	ldr	r3, [r4, #4]
   2bbb6:	f023 0803 	bic.w	r8, r3, #3
   2bbba:	45b0      	cmp	r8, r6
   2bbbc:	d304      	bcc.n	2bbc8 <_malloc_r+0x200>
   2bbbe:	eba8 0306 	sub.w	r3, r8, r6
   2bbc2:	2b0f      	cmp	r3, #15
   2bbc4:	f300 8085 	bgt.w	2bcd2 <_malloc_r+0x30a>
   2bbc8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2bd24 <_malloc_r+0x35c>
   2bbcc:	4b50      	ldr	r3, [pc, #320]	; (2bd10 <_malloc_r+0x348>)
   2bbce:	f8d9 2000 	ldr.w	r2, [r9]
   2bbd2:	681b      	ldr	r3, [r3, #0]
   2bbd4:	3201      	adds	r2, #1
   2bbd6:	4433      	add	r3, r6
   2bbd8:	eb04 0a08 	add.w	sl, r4, r8
   2bbdc:	f000 8155 	beq.w	2be8a <_malloc_r+0x4c2>
   2bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2bbe4:	330f      	adds	r3, #15
   2bbe6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2bbea:	f02b 0b0f 	bic.w	fp, fp, #15
   2bbee:	4659      	mov	r1, fp
   2bbf0:	4628      	mov	r0, r5
   2bbf2:	f000 fabd 	bl	2c170 <_sbrk_r>
   2bbf6:	1c41      	adds	r1, r0, #1
   2bbf8:	4602      	mov	r2, r0
   2bbfa:	f000 80fc 	beq.w	2bdf6 <_malloc_r+0x42e>
   2bbfe:	4582      	cmp	sl, r0
   2bc00:	f200 80f7 	bhi.w	2bdf2 <_malloc_r+0x42a>
   2bc04:	4b43      	ldr	r3, [pc, #268]	; (2bd14 <_malloc_r+0x34c>)
   2bc06:	6819      	ldr	r1, [r3, #0]
   2bc08:	4459      	add	r1, fp
   2bc0a:	6019      	str	r1, [r3, #0]
   2bc0c:	f000 814d 	beq.w	2beaa <_malloc_r+0x4e2>
   2bc10:	f8d9 0000 	ldr.w	r0, [r9]
   2bc14:	3001      	adds	r0, #1
   2bc16:	bf1b      	ittet	ne
   2bc18:	eba2 0a0a 	subne.w	sl, r2, sl
   2bc1c:	4451      	addne	r1, sl
   2bc1e:	f8c9 2000 	streq.w	r2, [r9]
   2bc22:	6019      	strne	r1, [r3, #0]
   2bc24:	f012 0107 	ands.w	r1, r2, #7
   2bc28:	f000 8115 	beq.w	2be56 <_malloc_r+0x48e>
   2bc2c:	f1c1 0008 	rsb	r0, r1, #8
   2bc30:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2bc34:	4402      	add	r2, r0
   2bc36:	3108      	adds	r1, #8
   2bc38:	eb02 090b 	add.w	r9, r2, fp
   2bc3c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2bc40:	eba1 0909 	sub.w	r9, r1, r9
   2bc44:	4649      	mov	r1, r9
   2bc46:	4628      	mov	r0, r5
   2bc48:	9301      	str	r3, [sp, #4]
   2bc4a:	9200      	str	r2, [sp, #0]
   2bc4c:	f000 fa90 	bl	2c170 <_sbrk_r>
   2bc50:	1c43      	adds	r3, r0, #1
   2bc52:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2bc56:	f000 8143 	beq.w	2bee0 <_malloc_r+0x518>
   2bc5a:	1a80      	subs	r0, r0, r2
   2bc5c:	4448      	add	r0, r9
   2bc5e:	f040 0001 	orr.w	r0, r0, #1
   2bc62:	6819      	ldr	r1, [r3, #0]
   2bc64:	60ba      	str	r2, [r7, #8]
   2bc66:	4449      	add	r1, r9
   2bc68:	42bc      	cmp	r4, r7
   2bc6a:	6050      	str	r0, [r2, #4]
   2bc6c:	6019      	str	r1, [r3, #0]
   2bc6e:	d017      	beq.n	2bca0 <_malloc_r+0x2d8>
   2bc70:	f1b8 0f0f 	cmp.w	r8, #15
   2bc74:	f240 80fb 	bls.w	2be6e <_malloc_r+0x4a6>
   2bc78:	6860      	ldr	r0, [r4, #4]
   2bc7a:	f1a8 020c 	sub.w	r2, r8, #12
   2bc7e:	f022 0207 	bic.w	r2, r2, #7
   2bc82:	eb04 0e02 	add.w	lr, r4, r2
   2bc86:	f000 0001 	and.w	r0, r0, #1
   2bc8a:	f04f 0c05 	mov.w	ip, #5
   2bc8e:	4310      	orrs	r0, r2
   2bc90:	2a0f      	cmp	r2, #15
   2bc92:	6060      	str	r0, [r4, #4]
   2bc94:	f8ce c004 	str.w	ip, [lr, #4]
   2bc98:	f8ce c008 	str.w	ip, [lr, #8]
   2bc9c:	f200 8117 	bhi.w	2bece <_malloc_r+0x506>
   2bca0:	4b1d      	ldr	r3, [pc, #116]	; (2bd18 <_malloc_r+0x350>)
   2bca2:	68bc      	ldr	r4, [r7, #8]
   2bca4:	681a      	ldr	r2, [r3, #0]
   2bca6:	4291      	cmp	r1, r2
   2bca8:	bf88      	it	hi
   2bcaa:	6019      	strhi	r1, [r3, #0]
   2bcac:	4b1b      	ldr	r3, [pc, #108]	; (2bd1c <_malloc_r+0x354>)
   2bcae:	681a      	ldr	r2, [r3, #0]
   2bcb0:	4291      	cmp	r1, r2
   2bcb2:	6862      	ldr	r2, [r4, #4]
   2bcb4:	bf88      	it	hi
   2bcb6:	6019      	strhi	r1, [r3, #0]
   2bcb8:	f022 0203 	bic.w	r2, r2, #3
   2bcbc:	4296      	cmp	r6, r2
   2bcbe:	eba2 0306 	sub.w	r3, r2, r6
   2bcc2:	d801      	bhi.n	2bcc8 <_malloc_r+0x300>
   2bcc4:	2b0f      	cmp	r3, #15
   2bcc6:	dc04      	bgt.n	2bcd2 <_malloc_r+0x30a>
   2bcc8:	4628      	mov	r0, r5
   2bcca:	f000 fa2b 	bl	2c124 <__malloc_unlock>
   2bcce:	2400      	movs	r4, #0
   2bcd0:	e740      	b.n	2bb54 <_malloc_r+0x18c>
   2bcd2:	19a2      	adds	r2, r4, r6
   2bcd4:	f043 0301 	orr.w	r3, r3, #1
   2bcd8:	f046 0601 	orr.w	r6, r6, #1
   2bcdc:	6066      	str	r6, [r4, #4]
   2bcde:	4628      	mov	r0, r5
   2bce0:	60ba      	str	r2, [r7, #8]
   2bce2:	6053      	str	r3, [r2, #4]
   2bce4:	f000 fa1e 	bl	2c124 <__malloc_unlock>
   2bce8:	3408      	adds	r4, #8
   2bcea:	4620      	mov	r0, r4
   2bcec:	b003      	add	sp, #12
   2bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcf2:	2b14      	cmp	r3, #20
   2bcf4:	d971      	bls.n	2bdda <_malloc_r+0x412>
   2bcf6:	2b54      	cmp	r3, #84	; 0x54
   2bcf8:	f200 80a3 	bhi.w	2be42 <_malloc_r+0x47a>
   2bcfc:	0b33      	lsrs	r3, r6, #12
   2bcfe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2bd02:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2bd06:	00c3      	lsls	r3, r0, #3
   2bd08:	e680      	b.n	2ba0c <_malloc_r+0x44>
   2bd0a:	bf00      	nop
   2bd0c:	2000cbb4 	.word	0x2000cbb4
   2bd10:	20002960 	.word	0x20002960
   2bd14:	20002930 	.word	0x20002930
   2bd18:	20002958 	.word	0x20002958
   2bd1c:	2000295c 	.word	0x2000295c
   2bd20:	2000cbbc 	.word	0x2000cbbc
   2bd24:	2000cfbc 	.word	0x2000cfbc
   2bd28:	0a5a      	lsrs	r2, r3, #9
   2bd2a:	2a04      	cmp	r2, #4
   2bd2c:	d95b      	bls.n	2bde6 <_malloc_r+0x41e>
   2bd2e:	2a14      	cmp	r2, #20
   2bd30:	f200 80ae 	bhi.w	2be90 <_malloc_r+0x4c8>
   2bd34:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2bd38:	00c9      	lsls	r1, r1, #3
   2bd3a:	325b      	adds	r2, #91	; 0x5b
   2bd3c:	eb07 0c01 	add.w	ip, r7, r1
   2bd40:	5879      	ldr	r1, [r7, r1]
   2bd42:	f1ac 0c08 	sub.w	ip, ip, #8
   2bd46:	458c      	cmp	ip, r1
   2bd48:	f000 8088 	beq.w	2be5c <_malloc_r+0x494>
   2bd4c:	684a      	ldr	r2, [r1, #4]
   2bd4e:	f022 0203 	bic.w	r2, r2, #3
   2bd52:	4293      	cmp	r3, r2
   2bd54:	d273      	bcs.n	2be3e <_malloc_r+0x476>
   2bd56:	6889      	ldr	r1, [r1, #8]
   2bd58:	458c      	cmp	ip, r1
   2bd5a:	d1f7      	bne.n	2bd4c <_malloc_r+0x384>
   2bd5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2bd60:	687b      	ldr	r3, [r7, #4]
   2bd62:	60e2      	str	r2, [r4, #12]
   2bd64:	f8c4 c008 	str.w	ip, [r4, #8]
   2bd68:	6094      	str	r4, [r2, #8]
   2bd6a:	f8cc 400c 	str.w	r4, [ip, #12]
   2bd6e:	e68f      	b.n	2ba90 <_malloc_r+0xc8>
   2bd70:	19a1      	adds	r1, r4, r6
   2bd72:	f046 0c01 	orr.w	ip, r6, #1
   2bd76:	f042 0601 	orr.w	r6, r2, #1
   2bd7a:	f8c4 c004 	str.w	ip, [r4, #4]
   2bd7e:	4628      	mov	r0, r5
   2bd80:	6179      	str	r1, [r7, #20]
   2bd82:	6139      	str	r1, [r7, #16]
   2bd84:	f8c1 e00c 	str.w	lr, [r1, #12]
   2bd88:	f8c1 e008 	str.w	lr, [r1, #8]
   2bd8c:	604e      	str	r6, [r1, #4]
   2bd8e:	50e2      	str	r2, [r4, r3]
   2bd90:	f000 f9c8 	bl	2c124 <__malloc_unlock>
   2bd94:	3408      	adds	r4, #8
   2bd96:	e6dd      	b.n	2bb54 <_malloc_r+0x18c>
   2bd98:	687b      	ldr	r3, [r7, #4]
   2bd9a:	e679      	b.n	2ba90 <_malloc_r+0xc8>
   2bd9c:	f108 0801 	add.w	r8, r8, #1
   2bda0:	f018 0f03 	tst.w	r8, #3
   2bda4:	f10c 0c08 	add.w	ip, ip, #8
   2bda8:	f47f ae85 	bne.w	2bab6 <_malloc_r+0xee>
   2bdac:	e02d      	b.n	2be0a <_malloc_r+0x442>
   2bdae:	68dc      	ldr	r4, [r3, #12]
   2bdb0:	42a3      	cmp	r3, r4
   2bdb2:	bf08      	it	eq
   2bdb4:	3002      	addeq	r0, #2
   2bdb6:	f43f ae3e 	beq.w	2ba36 <_malloc_r+0x6e>
   2bdba:	e6bb      	b.n	2bb34 <_malloc_r+0x16c>
   2bdbc:	4419      	add	r1, r3
   2bdbe:	461c      	mov	r4, r3
   2bdc0:	684a      	ldr	r2, [r1, #4]
   2bdc2:	68db      	ldr	r3, [r3, #12]
   2bdc4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2bdc8:	f042 0201 	orr.w	r2, r2, #1
   2bdcc:	604a      	str	r2, [r1, #4]
   2bdce:	4628      	mov	r0, r5
   2bdd0:	60f3      	str	r3, [r6, #12]
   2bdd2:	609e      	str	r6, [r3, #8]
   2bdd4:	f000 f9a6 	bl	2c124 <__malloc_unlock>
   2bdd8:	e6bc      	b.n	2bb54 <_malloc_r+0x18c>
   2bdda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2bdde:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2bde2:	00c3      	lsls	r3, r0, #3
   2bde4:	e612      	b.n	2ba0c <_malloc_r+0x44>
   2bde6:	099a      	lsrs	r2, r3, #6
   2bde8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2bdec:	00c9      	lsls	r1, r1, #3
   2bdee:	3238      	adds	r2, #56	; 0x38
   2bdf0:	e7a4      	b.n	2bd3c <_malloc_r+0x374>
   2bdf2:	42bc      	cmp	r4, r7
   2bdf4:	d054      	beq.n	2bea0 <_malloc_r+0x4d8>
   2bdf6:	68bc      	ldr	r4, [r7, #8]
   2bdf8:	6862      	ldr	r2, [r4, #4]
   2bdfa:	f022 0203 	bic.w	r2, r2, #3
   2bdfe:	e75d      	b.n	2bcbc <_malloc_r+0x2f4>
   2be00:	f859 3908 	ldr.w	r3, [r9], #-8
   2be04:	4599      	cmp	r9, r3
   2be06:	f040 8086 	bne.w	2bf16 <_malloc_r+0x54e>
   2be0a:	f010 0f03 	tst.w	r0, #3
   2be0e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2be12:	d1f5      	bne.n	2be00 <_malloc_r+0x438>
   2be14:	687b      	ldr	r3, [r7, #4]
   2be16:	ea23 0304 	bic.w	r3, r3, r4
   2be1a:	607b      	str	r3, [r7, #4]
   2be1c:	0064      	lsls	r4, r4, #1
   2be1e:	429c      	cmp	r4, r3
   2be20:	f63f aec7 	bhi.w	2bbb2 <_malloc_r+0x1ea>
   2be24:	2c00      	cmp	r4, #0
   2be26:	f43f aec4 	beq.w	2bbb2 <_malloc_r+0x1ea>
   2be2a:	421c      	tst	r4, r3
   2be2c:	4640      	mov	r0, r8
   2be2e:	f47f ae3e 	bne.w	2baae <_malloc_r+0xe6>
   2be32:	0064      	lsls	r4, r4, #1
   2be34:	421c      	tst	r4, r3
   2be36:	f100 0004 	add.w	r0, r0, #4
   2be3a:	d0fa      	beq.n	2be32 <_malloc_r+0x46a>
   2be3c:	e637      	b.n	2baae <_malloc_r+0xe6>
   2be3e:	468c      	mov	ip, r1
   2be40:	e78c      	b.n	2bd5c <_malloc_r+0x394>
   2be42:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2be46:	d815      	bhi.n	2be74 <_malloc_r+0x4ac>
   2be48:	0bf3      	lsrs	r3, r6, #15
   2be4a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2be4e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2be52:	00c3      	lsls	r3, r0, #3
   2be54:	e5da      	b.n	2ba0c <_malloc_r+0x44>
   2be56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2be5a:	e6ed      	b.n	2bc38 <_malloc_r+0x270>
   2be5c:	687b      	ldr	r3, [r7, #4]
   2be5e:	1092      	asrs	r2, r2, #2
   2be60:	2101      	movs	r1, #1
   2be62:	fa01 f202 	lsl.w	r2, r1, r2
   2be66:	4313      	orrs	r3, r2
   2be68:	607b      	str	r3, [r7, #4]
   2be6a:	4662      	mov	r2, ip
   2be6c:	e779      	b.n	2bd62 <_malloc_r+0x39a>
   2be6e:	2301      	movs	r3, #1
   2be70:	6053      	str	r3, [r2, #4]
   2be72:	e729      	b.n	2bcc8 <_malloc_r+0x300>
   2be74:	f240 5254 	movw	r2, #1364	; 0x554
   2be78:	4293      	cmp	r3, r2
   2be7a:	d822      	bhi.n	2bec2 <_malloc_r+0x4fa>
   2be7c:	0cb3      	lsrs	r3, r6, #18
   2be7e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2be82:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2be86:	00c3      	lsls	r3, r0, #3
   2be88:	e5c0      	b.n	2ba0c <_malloc_r+0x44>
   2be8a:	f103 0b10 	add.w	fp, r3, #16
   2be8e:	e6ae      	b.n	2bbee <_malloc_r+0x226>
   2be90:	2a54      	cmp	r2, #84	; 0x54
   2be92:	d829      	bhi.n	2bee8 <_malloc_r+0x520>
   2be94:	0b1a      	lsrs	r2, r3, #12
   2be96:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2be9a:	00c9      	lsls	r1, r1, #3
   2be9c:	326e      	adds	r2, #110	; 0x6e
   2be9e:	e74d      	b.n	2bd3c <_malloc_r+0x374>
   2bea0:	4b20      	ldr	r3, [pc, #128]	; (2bf24 <_malloc_r+0x55c>)
   2bea2:	6819      	ldr	r1, [r3, #0]
   2bea4:	4459      	add	r1, fp
   2bea6:	6019      	str	r1, [r3, #0]
   2bea8:	e6b2      	b.n	2bc10 <_malloc_r+0x248>
   2beaa:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2beae:	2800      	cmp	r0, #0
   2beb0:	f47f aeae 	bne.w	2bc10 <_malloc_r+0x248>
   2beb4:	eb08 030b 	add.w	r3, r8, fp
   2beb8:	68ba      	ldr	r2, [r7, #8]
   2beba:	f043 0301 	orr.w	r3, r3, #1
   2bebe:	6053      	str	r3, [r2, #4]
   2bec0:	e6ee      	b.n	2bca0 <_malloc_r+0x2d8>
   2bec2:	207f      	movs	r0, #127	; 0x7f
   2bec4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2bec8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2becc:	e59e      	b.n	2ba0c <_malloc_r+0x44>
   2bece:	f104 0108 	add.w	r1, r4, #8
   2bed2:	4628      	mov	r0, r5
   2bed4:	9300      	str	r3, [sp, #0]
   2bed6:	f003 f945 	bl	2f164 <_free_r>
   2beda:	9b00      	ldr	r3, [sp, #0]
   2bedc:	6819      	ldr	r1, [r3, #0]
   2bede:	e6df      	b.n	2bca0 <_malloc_r+0x2d8>
   2bee0:	2001      	movs	r0, #1
   2bee2:	f04f 0900 	mov.w	r9, #0
   2bee6:	e6bc      	b.n	2bc62 <_malloc_r+0x29a>
   2bee8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2beec:	d805      	bhi.n	2befa <_malloc_r+0x532>
   2beee:	0bda      	lsrs	r2, r3, #15
   2bef0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2bef4:	00c9      	lsls	r1, r1, #3
   2bef6:	3277      	adds	r2, #119	; 0x77
   2bef8:	e720      	b.n	2bd3c <_malloc_r+0x374>
   2befa:	f240 5154 	movw	r1, #1364	; 0x554
   2befe:	428a      	cmp	r2, r1
   2bf00:	d805      	bhi.n	2bf0e <_malloc_r+0x546>
   2bf02:	0c9a      	lsrs	r2, r3, #18
   2bf04:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2bf08:	00c9      	lsls	r1, r1, #3
   2bf0a:	327c      	adds	r2, #124	; 0x7c
   2bf0c:	e716      	b.n	2bd3c <_malloc_r+0x374>
   2bf0e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2bf12:	227e      	movs	r2, #126	; 0x7e
   2bf14:	e712      	b.n	2bd3c <_malloc_r+0x374>
   2bf16:	687b      	ldr	r3, [r7, #4]
   2bf18:	e780      	b.n	2be1c <_malloc_r+0x454>
   2bf1a:	08f0      	lsrs	r0, r6, #3
   2bf1c:	f106 0308 	add.w	r3, r6, #8
   2bf20:	e600      	b.n	2bb24 <_malloc_r+0x15c>
   2bf22:	bf00      	nop
   2bf24:	20002930 	.word	0x20002930

0002bf28 <__ascii_mbtowc>:
   2bf28:	b082      	sub	sp, #8
   2bf2a:	b149      	cbz	r1, 2bf40 <__ascii_mbtowc+0x18>
   2bf2c:	b15a      	cbz	r2, 2bf46 <__ascii_mbtowc+0x1e>
   2bf2e:	b16b      	cbz	r3, 2bf4c <__ascii_mbtowc+0x24>
   2bf30:	7813      	ldrb	r3, [r2, #0]
   2bf32:	600b      	str	r3, [r1, #0]
   2bf34:	7812      	ldrb	r2, [r2, #0]
   2bf36:	1c10      	adds	r0, r2, #0
   2bf38:	bf18      	it	ne
   2bf3a:	2001      	movne	r0, #1
   2bf3c:	b002      	add	sp, #8
   2bf3e:	4770      	bx	lr
   2bf40:	a901      	add	r1, sp, #4
   2bf42:	2a00      	cmp	r2, #0
   2bf44:	d1f3      	bne.n	2bf2e <__ascii_mbtowc+0x6>
   2bf46:	4610      	mov	r0, r2
   2bf48:	b002      	add	sp, #8
   2bf4a:	4770      	bx	lr
   2bf4c:	f06f 0001 	mvn.w	r0, #1
   2bf50:	e7f4      	b.n	2bf3c <__ascii_mbtowc+0x14>
   2bf52:	bf00      	nop

0002bf54 <memcmp>:
   2bf54:	2a03      	cmp	r2, #3
   2bf56:	b470      	push	{r4, r5, r6}
   2bf58:	d922      	bls.n	2bfa0 <memcmp+0x4c>
   2bf5a:	ea40 0301 	orr.w	r3, r0, r1
   2bf5e:	079b      	lsls	r3, r3, #30
   2bf60:	d011      	beq.n	2bf86 <memcmp+0x32>
   2bf62:	7803      	ldrb	r3, [r0, #0]
   2bf64:	780c      	ldrb	r4, [r1, #0]
   2bf66:	42a3      	cmp	r3, r4
   2bf68:	d11d      	bne.n	2bfa6 <memcmp+0x52>
   2bf6a:	440a      	add	r2, r1
   2bf6c:	3101      	adds	r1, #1
   2bf6e:	e005      	b.n	2bf7c <memcmp+0x28>
   2bf70:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2bf74:	f811 4b01 	ldrb.w	r4, [r1], #1
   2bf78:	42a3      	cmp	r3, r4
   2bf7a:	d114      	bne.n	2bfa6 <memcmp+0x52>
   2bf7c:	4291      	cmp	r1, r2
   2bf7e:	d1f7      	bne.n	2bf70 <memcmp+0x1c>
   2bf80:	2000      	movs	r0, #0
   2bf82:	bc70      	pop	{r4, r5, r6}
   2bf84:	4770      	bx	lr
   2bf86:	680d      	ldr	r5, [r1, #0]
   2bf88:	6806      	ldr	r6, [r0, #0]
   2bf8a:	42ae      	cmp	r6, r5
   2bf8c:	460c      	mov	r4, r1
   2bf8e:	4603      	mov	r3, r0
   2bf90:	f101 0104 	add.w	r1, r1, #4
   2bf94:	f100 0004 	add.w	r0, r0, #4
   2bf98:	d108      	bne.n	2bfac <memcmp+0x58>
   2bf9a:	3a04      	subs	r2, #4
   2bf9c:	2a03      	cmp	r2, #3
   2bf9e:	d8f2      	bhi.n	2bf86 <memcmp+0x32>
   2bfa0:	2a00      	cmp	r2, #0
   2bfa2:	d1de      	bne.n	2bf62 <memcmp+0xe>
   2bfa4:	e7ec      	b.n	2bf80 <memcmp+0x2c>
   2bfa6:	1b18      	subs	r0, r3, r4
   2bfa8:	bc70      	pop	{r4, r5, r6}
   2bfaa:	4770      	bx	lr
   2bfac:	4621      	mov	r1, r4
   2bfae:	4618      	mov	r0, r3
   2bfb0:	e7d7      	b.n	2bf62 <memcmp+0xe>
   2bfb2:	bf00      	nop

0002bfb4 <memmove>:
   2bfb4:	4288      	cmp	r0, r1
   2bfb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bfb8:	d90d      	bls.n	2bfd6 <memmove+0x22>
   2bfba:	188b      	adds	r3, r1, r2
   2bfbc:	4298      	cmp	r0, r3
   2bfbe:	d20a      	bcs.n	2bfd6 <memmove+0x22>
   2bfc0:	1884      	adds	r4, r0, r2
   2bfc2:	2a00      	cmp	r2, #0
   2bfc4:	d051      	beq.n	2c06a <memmove+0xb6>
   2bfc6:	4622      	mov	r2, r4
   2bfc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2bfcc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2bfd0:	4299      	cmp	r1, r3
   2bfd2:	d1f9      	bne.n	2bfc8 <memmove+0x14>
   2bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bfd6:	2a0f      	cmp	r2, #15
   2bfd8:	d948      	bls.n	2c06c <memmove+0xb8>
   2bfda:	ea41 0300 	orr.w	r3, r1, r0
   2bfde:	079b      	lsls	r3, r3, #30
   2bfe0:	d146      	bne.n	2c070 <memmove+0xbc>
   2bfe2:	f100 0410 	add.w	r4, r0, #16
   2bfe6:	f101 0310 	add.w	r3, r1, #16
   2bfea:	4615      	mov	r5, r2
   2bfec:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2bff0:	f844 6c10 	str.w	r6, [r4, #-16]
   2bff4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2bff8:	f844 6c0c 	str.w	r6, [r4, #-12]
   2bffc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2c000:	f844 6c08 	str.w	r6, [r4, #-8]
   2c004:	3d10      	subs	r5, #16
   2c006:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2c00a:	f844 6c04 	str.w	r6, [r4, #-4]
   2c00e:	2d0f      	cmp	r5, #15
   2c010:	f103 0310 	add.w	r3, r3, #16
   2c014:	f104 0410 	add.w	r4, r4, #16
   2c018:	d8e8      	bhi.n	2bfec <memmove+0x38>
   2c01a:	f1a2 0310 	sub.w	r3, r2, #16
   2c01e:	f023 030f 	bic.w	r3, r3, #15
   2c022:	f002 0e0f 	and.w	lr, r2, #15
   2c026:	3310      	adds	r3, #16
   2c028:	f1be 0f03 	cmp.w	lr, #3
   2c02c:	4419      	add	r1, r3
   2c02e:	4403      	add	r3, r0
   2c030:	d921      	bls.n	2c076 <memmove+0xc2>
   2c032:	1f1e      	subs	r6, r3, #4
   2c034:	460d      	mov	r5, r1
   2c036:	4674      	mov	r4, lr
   2c038:	3c04      	subs	r4, #4
   2c03a:	f855 7b04 	ldr.w	r7, [r5], #4
   2c03e:	f846 7f04 	str.w	r7, [r6, #4]!
   2c042:	2c03      	cmp	r4, #3
   2c044:	d8f8      	bhi.n	2c038 <memmove+0x84>
   2c046:	f1ae 0404 	sub.w	r4, lr, #4
   2c04a:	f024 0403 	bic.w	r4, r4, #3
   2c04e:	3404      	adds	r4, #4
   2c050:	4421      	add	r1, r4
   2c052:	4423      	add	r3, r4
   2c054:	f002 0203 	and.w	r2, r2, #3
   2c058:	b162      	cbz	r2, 2c074 <memmove+0xc0>
   2c05a:	3b01      	subs	r3, #1
   2c05c:	440a      	add	r2, r1
   2c05e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c062:	f803 4f01 	strb.w	r4, [r3, #1]!
   2c066:	428a      	cmp	r2, r1
   2c068:	d1f9      	bne.n	2c05e <memmove+0xaa>
   2c06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c06c:	4603      	mov	r3, r0
   2c06e:	e7f3      	b.n	2c058 <memmove+0xa4>
   2c070:	4603      	mov	r3, r0
   2c072:	e7f2      	b.n	2c05a <memmove+0xa6>
   2c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c076:	4672      	mov	r2, lr
   2c078:	e7ee      	b.n	2c058 <memmove+0xa4>
   2c07a:	bf00      	nop

0002c07c <memset>:
   2c07c:	b470      	push	{r4, r5, r6}
   2c07e:	0786      	lsls	r6, r0, #30
   2c080:	d046      	beq.n	2c110 <memset+0x94>
   2c082:	1e54      	subs	r4, r2, #1
   2c084:	2a00      	cmp	r2, #0
   2c086:	d041      	beq.n	2c10c <memset+0x90>
   2c088:	b2ca      	uxtb	r2, r1
   2c08a:	4603      	mov	r3, r0
   2c08c:	e002      	b.n	2c094 <memset+0x18>
   2c08e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2c092:	d33b      	bcc.n	2c10c <memset+0x90>
   2c094:	f803 2b01 	strb.w	r2, [r3], #1
   2c098:	079d      	lsls	r5, r3, #30
   2c09a:	d1f8      	bne.n	2c08e <memset+0x12>
   2c09c:	2c03      	cmp	r4, #3
   2c09e:	d92e      	bls.n	2c0fe <memset+0x82>
   2c0a0:	b2cd      	uxtb	r5, r1
   2c0a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2c0a6:	2c0f      	cmp	r4, #15
   2c0a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2c0ac:	d919      	bls.n	2c0e2 <memset+0x66>
   2c0ae:	f103 0210 	add.w	r2, r3, #16
   2c0b2:	4626      	mov	r6, r4
   2c0b4:	3e10      	subs	r6, #16
   2c0b6:	2e0f      	cmp	r6, #15
   2c0b8:	f842 5c10 	str.w	r5, [r2, #-16]
   2c0bc:	f842 5c0c 	str.w	r5, [r2, #-12]
   2c0c0:	f842 5c08 	str.w	r5, [r2, #-8]
   2c0c4:	f842 5c04 	str.w	r5, [r2, #-4]
   2c0c8:	f102 0210 	add.w	r2, r2, #16
   2c0cc:	d8f2      	bhi.n	2c0b4 <memset+0x38>
   2c0ce:	f1a4 0210 	sub.w	r2, r4, #16
   2c0d2:	f022 020f 	bic.w	r2, r2, #15
   2c0d6:	f004 040f 	and.w	r4, r4, #15
   2c0da:	3210      	adds	r2, #16
   2c0dc:	2c03      	cmp	r4, #3
   2c0de:	4413      	add	r3, r2
   2c0e0:	d90d      	bls.n	2c0fe <memset+0x82>
   2c0e2:	461e      	mov	r6, r3
   2c0e4:	4622      	mov	r2, r4
   2c0e6:	3a04      	subs	r2, #4
   2c0e8:	2a03      	cmp	r2, #3
   2c0ea:	f846 5b04 	str.w	r5, [r6], #4
   2c0ee:	d8fa      	bhi.n	2c0e6 <memset+0x6a>
   2c0f0:	1f22      	subs	r2, r4, #4
   2c0f2:	f022 0203 	bic.w	r2, r2, #3
   2c0f6:	3204      	adds	r2, #4
   2c0f8:	4413      	add	r3, r2
   2c0fa:	f004 0403 	and.w	r4, r4, #3
   2c0fe:	b12c      	cbz	r4, 2c10c <memset+0x90>
   2c100:	b2c9      	uxtb	r1, r1
   2c102:	441c      	add	r4, r3
   2c104:	f803 1b01 	strb.w	r1, [r3], #1
   2c108:	429c      	cmp	r4, r3
   2c10a:	d1fb      	bne.n	2c104 <memset+0x88>
   2c10c:	bc70      	pop	{r4, r5, r6}
   2c10e:	4770      	bx	lr
   2c110:	4614      	mov	r4, r2
   2c112:	4603      	mov	r3, r0
   2c114:	e7c2      	b.n	2c09c <memset+0x20>
   2c116:	bf00      	nop

0002c118 <__malloc_lock>:
   2c118:	4801      	ldr	r0, [pc, #4]	; (2c120 <__malloc_lock+0x8>)
   2c11a:	f003 b917 	b.w	2f34c <__retarget_lock_acquire_recursive>
   2c11e:	bf00      	nop
   2c120:	20002c88 	.word	0x20002c88

0002c124 <__malloc_unlock>:
   2c124:	4801      	ldr	r0, [pc, #4]	; (2c12c <__malloc_unlock+0x8>)
   2c126:	f003 b913 	b.w	2f350 <__retarget_lock_release_recursive>
   2c12a:	bf00      	nop
   2c12c:	20002c88 	.word	0x20002c88

0002c130 <rand>:
   2c130:	b410      	push	{r4}
   2c132:	4b0c      	ldr	r3, [pc, #48]	; (2c164 <rand+0x34>)
   2c134:	480c      	ldr	r0, [pc, #48]	; (2c168 <rand+0x38>)
   2c136:	6819      	ldr	r1, [r3, #0]
   2c138:	4c0c      	ldr	r4, [pc, #48]	; (2c16c <rand+0x3c>)
   2c13a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   2c13e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   2c142:	fb00 f002 	mul.w	r0, r0, r2
   2c146:	fb04 0003 	mla	r0, r4, r3, r0
   2c14a:	fba2 2304 	umull	r2, r3, r2, r4
   2c14e:	4403      	add	r3, r0
   2c150:	3201      	adds	r2, #1
   2c152:	f143 0300 	adc.w	r3, r3, #0
   2c156:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   2c15a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2c15e:	bc10      	pop	{r4}
   2c160:	4770      	bx	lr
   2c162:	bf00      	nop
   2c164:	2000c618 	.word	0x2000c618
   2c168:	5851f42d 	.word	0x5851f42d
   2c16c:	4c957f2d 	.word	0x4c957f2d

0002c170 <_sbrk_r>:
   2c170:	b538      	push	{r3, r4, r5, lr}
   2c172:	4c07      	ldr	r4, [pc, #28]	; (2c190 <_sbrk_r+0x20>)
   2c174:	2300      	movs	r3, #0
   2c176:	4605      	mov	r5, r0
   2c178:	4608      	mov	r0, r1
   2c17a:	6023      	str	r3, [r4, #0]
   2c17c:	f7d5 fd48 	bl	1c10 <_sbrk>
   2c180:	1c43      	adds	r3, r0, #1
   2c182:	d000      	beq.n	2c186 <_sbrk_r+0x16>
   2c184:	bd38      	pop	{r3, r4, r5, pc}
   2c186:	6823      	ldr	r3, [r4, #0]
   2c188:	2b00      	cmp	r3, #0
   2c18a:	d0fb      	beq.n	2c184 <_sbrk_r+0x14>
   2c18c:	602b      	str	r3, [r5, #0]
   2c18e:	bd38      	pop	{r3, r4, r5, pc}
   2c190:	20002c9c 	.word	0x20002c9c

0002c194 <snprintf>:
   2c194:	b40c      	push	{r2, r3}
   2c196:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c198:	4b23      	ldr	r3, [pc, #140]	; (2c228 <snprintf+0x94>)
   2c19a:	1e0c      	subs	r4, r1, #0
   2c19c:	b09d      	sub	sp, #116	; 0x74
   2c19e:	681d      	ldr	r5, [r3, #0]
   2c1a0:	db3d      	blt.n	2c21e <snprintf+0x8a>
   2c1a2:	f44f 7302 	mov.w	r3, #520	; 0x208
   2c1a6:	9002      	str	r0, [sp, #8]
   2c1a8:	9006      	str	r0, [sp, #24]
   2c1aa:	f8ad 3014 	strh.w	r3, [sp, #20]
   2c1ae:	ae23      	add	r6, sp, #140	; 0x8c
   2c1b0:	d017      	beq.n	2c1e2 <snprintf+0x4e>
   2c1b2:	3c01      	subs	r4, #1
   2c1b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2c1b6:	9404      	str	r4, [sp, #16]
   2c1b8:	4633      	mov	r3, r6
   2c1ba:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2c1be:	a902      	add	r1, sp, #8
   2c1c0:	4628      	mov	r0, r5
   2c1c2:	9407      	str	r4, [sp, #28]
   2c1c4:	9601      	str	r6, [sp, #4]
   2c1c6:	f8ad 7016 	strh.w	r7, [sp, #22]
   2c1ca:	f000 fd7f 	bl	2cccc <_svfprintf_r>
   2c1ce:	1c42      	adds	r2, r0, #1
   2c1d0:	db1b      	blt.n	2c20a <snprintf+0x76>
   2c1d2:	9b02      	ldr	r3, [sp, #8]
   2c1d4:	2200      	movs	r2, #0
   2c1d6:	701a      	strb	r2, [r3, #0]
   2c1d8:	b01d      	add	sp, #116	; 0x74
   2c1da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c1de:	b002      	add	sp, #8
   2c1e0:	4770      	bx	lr
   2c1e2:	4633      	mov	r3, r6
   2c1e4:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2c1e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2c1ea:	9404      	str	r4, [sp, #16]
   2c1ec:	a902      	add	r1, sp, #8
   2c1ee:	4628      	mov	r0, r5
   2c1f0:	9407      	str	r4, [sp, #28]
   2c1f2:	9601      	str	r6, [sp, #4]
   2c1f4:	f8ad 7016 	strh.w	r7, [sp, #22]
   2c1f8:	f000 fd68 	bl	2cccc <_svfprintf_r>
   2c1fc:	1c43      	adds	r3, r0, #1
   2c1fe:	db07      	blt.n	2c210 <snprintf+0x7c>
   2c200:	b01d      	add	sp, #116	; 0x74
   2c202:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c206:	b002      	add	sp, #8
   2c208:	4770      	bx	lr
   2c20a:	238b      	movs	r3, #139	; 0x8b
   2c20c:	602b      	str	r3, [r5, #0]
   2c20e:	e7e0      	b.n	2c1d2 <snprintf+0x3e>
   2c210:	238b      	movs	r3, #139	; 0x8b
   2c212:	602b      	str	r3, [r5, #0]
   2c214:	b01d      	add	sp, #116	; 0x74
   2c216:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c21a:	b002      	add	sp, #8
   2c21c:	4770      	bx	lr
   2c21e:	238b      	movs	r3, #139	; 0x8b
   2c220:	602b      	str	r3, [r5, #0]
   2c222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c226:	e7eb      	b.n	2c200 <snprintf+0x6c>
   2c228:	2000c618 	.word	0x2000c618

0002c22c <strcat>:
   2c22c:	0783      	lsls	r3, r0, #30
   2c22e:	b510      	push	{r4, lr}
   2c230:	4604      	mov	r4, r0
   2c232:	d110      	bne.n	2c256 <strcat+0x2a>
   2c234:	6802      	ldr	r2, [r0, #0]
   2c236:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2c23a:	ea23 0302 	bic.w	r3, r3, r2
   2c23e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2c242:	d108      	bne.n	2c256 <strcat+0x2a>
   2c244:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2c248:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2c24c:	ea23 0302 	bic.w	r3, r3, r2
   2c250:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2c254:	d0f6      	beq.n	2c244 <strcat+0x18>
   2c256:	7803      	ldrb	r3, [r0, #0]
   2c258:	b11b      	cbz	r3, 2c262 <strcat+0x36>
   2c25a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2c25e:	2b00      	cmp	r3, #0
   2c260:	d1fb      	bne.n	2c25a <strcat+0x2e>
   2c262:	f000 f877 	bl	2c354 <strcpy>
   2c266:	4620      	mov	r0, r4
   2c268:	bd10      	pop	{r4, pc}
   2c26a:	bf00      	nop

0002c26c <strchr>:
   2c26c:	b2c9      	uxtb	r1, r1
   2c26e:	2900      	cmp	r1, #0
   2c270:	d041      	beq.n	2c2f6 <strchr+0x8a>
   2c272:	0782      	lsls	r2, r0, #30
   2c274:	b4f0      	push	{r4, r5, r6, r7}
   2c276:	d067      	beq.n	2c348 <strchr+0xdc>
   2c278:	7803      	ldrb	r3, [r0, #0]
   2c27a:	2b00      	cmp	r3, #0
   2c27c:	d068      	beq.n	2c350 <strchr+0xe4>
   2c27e:	4299      	cmp	r1, r3
   2c280:	d037      	beq.n	2c2f2 <strchr+0x86>
   2c282:	1c43      	adds	r3, r0, #1
   2c284:	e004      	b.n	2c290 <strchr+0x24>
   2c286:	f813 0b01 	ldrb.w	r0, [r3], #1
   2c28a:	b390      	cbz	r0, 2c2f2 <strchr+0x86>
   2c28c:	4281      	cmp	r1, r0
   2c28e:	d02f      	beq.n	2c2f0 <strchr+0x84>
   2c290:	079a      	lsls	r2, r3, #30
   2c292:	461c      	mov	r4, r3
   2c294:	d1f7      	bne.n	2c286 <strchr+0x1a>
   2c296:	6825      	ldr	r5, [r4, #0]
   2c298:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2c29c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2c2a0:	ea83 0605 	eor.w	r6, r3, r5
   2c2a4:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2c2a8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2c2ac:	ea20 0006 	bic.w	r0, r0, r6
   2c2b0:	ea22 0205 	bic.w	r2, r2, r5
   2c2b4:	4302      	orrs	r2, r0
   2c2b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c2ba:	d111      	bne.n	2c2e0 <strchr+0x74>
   2c2bc:	4620      	mov	r0, r4
   2c2be:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2c2c2:	ea83 0706 	eor.w	r7, r3, r6
   2c2c6:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2c2ca:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2c2ce:	ea25 0507 	bic.w	r5, r5, r7
   2c2d2:	ea22 0206 	bic.w	r2, r2, r6
   2c2d6:	432a      	orrs	r2, r5
   2c2d8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c2dc:	d0ef      	beq.n	2c2be <strchr+0x52>
   2c2de:	4604      	mov	r4, r0
   2c2e0:	7820      	ldrb	r0, [r4, #0]
   2c2e2:	b918      	cbnz	r0, 2c2ec <strchr+0x80>
   2c2e4:	e005      	b.n	2c2f2 <strchr+0x86>
   2c2e6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2c2ea:	b110      	cbz	r0, 2c2f2 <strchr+0x86>
   2c2ec:	4281      	cmp	r1, r0
   2c2ee:	d1fa      	bne.n	2c2e6 <strchr+0x7a>
   2c2f0:	4620      	mov	r0, r4
   2c2f2:	bcf0      	pop	{r4, r5, r6, r7}
   2c2f4:	4770      	bx	lr
   2c2f6:	0783      	lsls	r3, r0, #30
   2c2f8:	d024      	beq.n	2c344 <strchr+0xd8>
   2c2fa:	7803      	ldrb	r3, [r0, #0]
   2c2fc:	2b00      	cmp	r3, #0
   2c2fe:	d0f9      	beq.n	2c2f4 <strchr+0x88>
   2c300:	1c43      	adds	r3, r0, #1
   2c302:	e003      	b.n	2c30c <strchr+0xa0>
   2c304:	7802      	ldrb	r2, [r0, #0]
   2c306:	3301      	adds	r3, #1
   2c308:	2a00      	cmp	r2, #0
   2c30a:	d0f3      	beq.n	2c2f4 <strchr+0x88>
   2c30c:	0799      	lsls	r1, r3, #30
   2c30e:	4618      	mov	r0, r3
   2c310:	d1f8      	bne.n	2c304 <strchr+0x98>
   2c312:	6819      	ldr	r1, [r3, #0]
   2c314:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2c318:	ea22 0201 	bic.w	r2, r2, r1
   2c31c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c320:	d108      	bne.n	2c334 <strchr+0xc8>
   2c322:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2c326:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2c32a:	ea22 0201 	bic.w	r2, r2, r1
   2c32e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c332:	d0f6      	beq.n	2c322 <strchr+0xb6>
   2c334:	781a      	ldrb	r2, [r3, #0]
   2c336:	4618      	mov	r0, r3
   2c338:	b142      	cbz	r2, 2c34c <strchr+0xe0>
   2c33a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2c33e:	2b00      	cmp	r3, #0
   2c340:	d1fb      	bne.n	2c33a <strchr+0xce>
   2c342:	4770      	bx	lr
   2c344:	4603      	mov	r3, r0
   2c346:	e7e4      	b.n	2c312 <strchr+0xa6>
   2c348:	4604      	mov	r4, r0
   2c34a:	e7a4      	b.n	2c296 <strchr+0x2a>
   2c34c:	4618      	mov	r0, r3
   2c34e:	4770      	bx	lr
   2c350:	4618      	mov	r0, r3
   2c352:	e7ce      	b.n	2c2f2 <strchr+0x86>

0002c354 <strcpy>:
   2c354:	ea80 0201 	eor.w	r2, r0, r1
   2c358:	4684      	mov	ip, r0
   2c35a:	f012 0f03 	tst.w	r2, #3
   2c35e:	d14f      	bne.n	2c400 <strcpy+0xac>
   2c360:	f011 0f03 	tst.w	r1, #3
   2c364:	d132      	bne.n	2c3cc <strcpy+0x78>
   2c366:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2c36a:	f011 0f04 	tst.w	r1, #4
   2c36e:	f851 3b04 	ldr.w	r3, [r1], #4
   2c372:	d00b      	beq.n	2c38c <strcpy+0x38>
   2c374:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2c378:	439a      	bics	r2, r3
   2c37a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c37e:	bf04      	itt	eq
   2c380:	f84c 3b04 	streq.w	r3, [ip], #4
   2c384:	f851 3b04 	ldreq.w	r3, [r1], #4
   2c388:	d116      	bne.n	2c3b8 <strcpy+0x64>
   2c38a:	bf00      	nop
   2c38c:	f851 4b04 	ldr.w	r4, [r1], #4
   2c390:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2c394:	439a      	bics	r2, r3
   2c396:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c39a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2c39e:	d10b      	bne.n	2c3b8 <strcpy+0x64>
   2c3a0:	f84c 3b04 	str.w	r3, [ip], #4
   2c3a4:	43a2      	bics	r2, r4
   2c3a6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2c3aa:	bf04      	itt	eq
   2c3ac:	f851 3b04 	ldreq.w	r3, [r1], #4
   2c3b0:	f84c 4b04 	streq.w	r4, [ip], #4
   2c3b4:	d0ea      	beq.n	2c38c <strcpy+0x38>
   2c3b6:	4623      	mov	r3, r4
   2c3b8:	f80c 3b01 	strb.w	r3, [ip], #1
   2c3bc:	f013 0fff 	tst.w	r3, #255	; 0xff
   2c3c0:	ea4f 2333 	mov.w	r3, r3, ror #8
   2c3c4:	d1f8      	bne.n	2c3b8 <strcpy+0x64>
   2c3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c3ca:	4770      	bx	lr
   2c3cc:	f011 0f01 	tst.w	r1, #1
   2c3d0:	d006      	beq.n	2c3e0 <strcpy+0x8c>
   2c3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c3d6:	f80c 2b01 	strb.w	r2, [ip], #1
   2c3da:	2a00      	cmp	r2, #0
   2c3dc:	bf08      	it	eq
   2c3de:	4770      	bxeq	lr
   2c3e0:	f011 0f02 	tst.w	r1, #2
   2c3e4:	d0bf      	beq.n	2c366 <strcpy+0x12>
   2c3e6:	f831 2b02 	ldrh.w	r2, [r1], #2
   2c3ea:	f012 0fff 	tst.w	r2, #255	; 0xff
   2c3ee:	bf16      	itet	ne
   2c3f0:	f82c 2b02 	strhne.w	r2, [ip], #2
   2c3f4:	f88c 2000 	strbeq.w	r2, [ip]
   2c3f8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2c3fc:	d1b3      	bne.n	2c366 <strcpy+0x12>
   2c3fe:	4770      	bx	lr
   2c400:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c404:	f80c 2b01 	strb.w	r2, [ip], #1
   2c408:	2a00      	cmp	r2, #0
   2c40a:	d1f9      	bne.n	2c400 <strcpy+0xac>
   2c40c:	4770      	bx	lr
   2c40e:	bf00      	nop

0002c410 <strncmp>:
   2c410:	2a00      	cmp	r2, #0
   2c412:	d041      	beq.n	2c498 <strncmp+0x88>
   2c414:	ea40 0301 	orr.w	r3, r0, r1
   2c418:	f013 0303 	ands.w	r3, r3, #3
   2c41c:	b4f0      	push	{r4, r5, r6, r7}
   2c41e:	d125      	bne.n	2c46c <strncmp+0x5c>
   2c420:	2a03      	cmp	r2, #3
   2c422:	d923      	bls.n	2c46c <strncmp+0x5c>
   2c424:	6804      	ldr	r4, [r0, #0]
   2c426:	680d      	ldr	r5, [r1, #0]
   2c428:	42ac      	cmp	r4, r5
   2c42a:	d11f      	bne.n	2c46c <strncmp+0x5c>
   2c42c:	3a04      	subs	r2, #4
   2c42e:	d038      	beq.n	2c4a2 <strncmp+0x92>
   2c430:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2c434:	ea25 0404 	bic.w	r4, r5, r4
   2c438:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2c43c:	d12e      	bne.n	2c49c <strncmp+0x8c>
   2c43e:	3004      	adds	r0, #4
   2c440:	3104      	adds	r1, #4
   2c442:	e00f      	b.n	2c464 <strncmp+0x54>
   2c444:	f850 3b04 	ldr.w	r3, [r0], #4
   2c448:	680e      	ldr	r6, [r1, #0]
   2c44a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2c44e:	42b3      	cmp	r3, r6
   2c450:	ea24 0403 	bic.w	r4, r4, r3
   2c454:	f101 0104 	add.w	r1, r1, #4
   2c458:	d126      	bne.n	2c4a8 <strncmp+0x98>
   2c45a:	3a04      	subs	r2, #4
   2c45c:	d021      	beq.n	2c4a2 <strncmp+0x92>
   2c45e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2c462:	d11b      	bne.n	2c49c <strncmp+0x8c>
   2c464:	2a03      	cmp	r2, #3
   2c466:	4607      	mov	r7, r0
   2c468:	460d      	mov	r5, r1
   2c46a:	d8eb      	bhi.n	2c444 <strncmp+0x34>
   2c46c:	7805      	ldrb	r5, [r0, #0]
   2c46e:	780c      	ldrb	r4, [r1, #0]
   2c470:	42ac      	cmp	r4, r5
   2c472:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2c476:	d11a      	bne.n	2c4ae <strncmp+0x9e>
   2c478:	b183      	cbz	r3, 2c49c <strncmp+0x8c>
   2c47a:	b914      	cbnz	r4, 2c482 <strncmp+0x72>
   2c47c:	e00e      	b.n	2c49c <strncmp+0x8c>
   2c47e:	b16b      	cbz	r3, 2c49c <strncmp+0x8c>
   2c480:	b17a      	cbz	r2, 2c4a2 <strncmp+0x92>
   2c482:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2c486:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2c48a:	42a2      	cmp	r2, r4
   2c48c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2c490:	d0f5      	beq.n	2c47e <strncmp+0x6e>
   2c492:	1b10      	subs	r0, r2, r4
   2c494:	bcf0      	pop	{r4, r5, r6, r7}
   2c496:	4770      	bx	lr
   2c498:	4610      	mov	r0, r2
   2c49a:	4770      	bx	lr
   2c49c:	2000      	movs	r0, #0
   2c49e:	bcf0      	pop	{r4, r5, r6, r7}
   2c4a0:	4770      	bx	lr
   2c4a2:	4610      	mov	r0, r2
   2c4a4:	bcf0      	pop	{r4, r5, r6, r7}
   2c4a6:	4770      	bx	lr
   2c4a8:	4629      	mov	r1, r5
   2c4aa:	4638      	mov	r0, r7
   2c4ac:	e7de      	b.n	2c46c <strncmp+0x5c>
   2c4ae:	462a      	mov	r2, r5
   2c4b0:	e7ef      	b.n	2c492 <strncmp+0x82>
   2c4b2:	bf00      	nop

0002c4b4 <strncpy>:
   2c4b4:	ea40 0301 	orr.w	r3, r0, r1
   2c4b8:	f013 0f03 	tst.w	r3, #3
   2c4bc:	b470      	push	{r4, r5, r6}
   2c4be:	4603      	mov	r3, r0
   2c4c0:	d024      	beq.n	2c50c <strncpy+0x58>
   2c4c2:	b1a2      	cbz	r2, 2c4ee <strncpy+0x3a>
   2c4c4:	780c      	ldrb	r4, [r1, #0]
   2c4c6:	701c      	strb	r4, [r3, #0]
   2c4c8:	3a01      	subs	r2, #1
   2c4ca:	3301      	adds	r3, #1
   2c4cc:	3101      	adds	r1, #1
   2c4ce:	b13c      	cbz	r4, 2c4e0 <strncpy+0x2c>
   2c4d0:	b16a      	cbz	r2, 2c4ee <strncpy+0x3a>
   2c4d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   2c4d6:	f803 4b01 	strb.w	r4, [r3], #1
   2c4da:	3a01      	subs	r2, #1
   2c4dc:	2c00      	cmp	r4, #0
   2c4de:	d1f7      	bne.n	2c4d0 <strncpy+0x1c>
   2c4e0:	b12a      	cbz	r2, 2c4ee <strncpy+0x3a>
   2c4e2:	441a      	add	r2, r3
   2c4e4:	2100      	movs	r1, #0
   2c4e6:	f803 1b01 	strb.w	r1, [r3], #1
   2c4ea:	429a      	cmp	r2, r3
   2c4ec:	d1fb      	bne.n	2c4e6 <strncpy+0x32>
   2c4ee:	bc70      	pop	{r4, r5, r6}
   2c4f0:	4770      	bx	lr
   2c4f2:	460e      	mov	r6, r1
   2c4f4:	f851 5b04 	ldr.w	r5, [r1], #4
   2c4f8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2c4fc:	ea24 0405 	bic.w	r4, r4, r5
   2c500:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2c504:	d105      	bne.n	2c512 <strncpy+0x5e>
   2c506:	f843 5b04 	str.w	r5, [r3], #4
   2c50a:	3a04      	subs	r2, #4
   2c50c:	2a03      	cmp	r2, #3
   2c50e:	d8f0      	bhi.n	2c4f2 <strncpy+0x3e>
   2c510:	e7d7      	b.n	2c4c2 <strncpy+0xe>
   2c512:	4631      	mov	r1, r6
   2c514:	e7d6      	b.n	2c4c4 <strncpy+0x10>
   2c516:	bf00      	nop

0002c518 <strrchr>:
   2c518:	b171      	cbz	r1, 2c538 <strrchr+0x20>
   2c51a:	b538      	push	{r3, r4, r5, lr}
   2c51c:	4603      	mov	r3, r0
   2c51e:	460c      	mov	r4, r1
   2c520:	2500      	movs	r5, #0
   2c522:	e001      	b.n	2c528 <strrchr+0x10>
   2c524:	1c43      	adds	r3, r0, #1
   2c526:	4605      	mov	r5, r0
   2c528:	4618      	mov	r0, r3
   2c52a:	4621      	mov	r1, r4
   2c52c:	f7ff fe9e 	bl	2c26c <strchr>
   2c530:	2800      	cmp	r0, #0
   2c532:	d1f7      	bne.n	2c524 <strrchr+0xc>
   2c534:	4628      	mov	r0, r5
   2c536:	bd38      	pop	{r3, r4, r5, pc}
   2c538:	f7ff be98 	b.w	2c26c <strchr>

0002c53c <critical_factorization>:
   2c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c540:	f04f 0e01 	mov.w	lr, #1
   2c544:	4674      	mov	r4, lr
   2c546:	2500      	movs	r5, #0
   2c548:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c54c:	192b      	adds	r3, r5, r4
   2c54e:	428b      	cmp	r3, r1
   2c550:	eb00 0706 	add.w	r7, r0, r6
   2c554:	d20d      	bcs.n	2c572 <critical_factorization+0x36>
   2c556:	5d3f      	ldrb	r7, [r7, r4]
   2c558:	f810 c003 	ldrb.w	ip, [r0, r3]
   2c55c:	45bc      	cmp	ip, r7
   2c55e:	d22d      	bcs.n	2c5bc <critical_factorization+0x80>
   2c560:	461d      	mov	r5, r3
   2c562:	2401      	movs	r4, #1
   2c564:	eba3 0e06 	sub.w	lr, r3, r6
   2c568:	192b      	adds	r3, r5, r4
   2c56a:	428b      	cmp	r3, r1
   2c56c:	eb00 0706 	add.w	r7, r0, r6
   2c570:	d3f1      	bcc.n	2c556 <critical_factorization+0x1a>
   2c572:	f04f 0801 	mov.w	r8, #1
   2c576:	f8c2 e000 	str.w	lr, [r2]
   2c57a:	4644      	mov	r4, r8
   2c57c:	2500      	movs	r5, #0
   2c57e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c582:	192b      	adds	r3, r5, r4
   2c584:	4299      	cmp	r1, r3
   2c586:	eb00 0e07 	add.w	lr, r0, r7
   2c58a:	d90e      	bls.n	2c5aa <critical_factorization+0x6e>
   2c58c:	f81e e004 	ldrb.w	lr, [lr, r4]
   2c590:	f810 c003 	ldrb.w	ip, [r0, r3]
   2c594:	45f4      	cmp	ip, lr
   2c596:	d918      	bls.n	2c5ca <critical_factorization+0x8e>
   2c598:	461d      	mov	r5, r3
   2c59a:	2401      	movs	r4, #1
   2c59c:	eba3 0807 	sub.w	r8, r3, r7
   2c5a0:	192b      	adds	r3, r5, r4
   2c5a2:	4299      	cmp	r1, r3
   2c5a4:	eb00 0e07 	add.w	lr, r0, r7
   2c5a8:	d8f0      	bhi.n	2c58c <critical_factorization+0x50>
   2c5aa:	3701      	adds	r7, #1
   2c5ac:	1c70      	adds	r0, r6, #1
   2c5ae:	4287      	cmp	r7, r0
   2c5b0:	bf24      	itt	cs
   2c5b2:	f8c2 8000 	strcs.w	r8, [r2]
   2c5b6:	4638      	movcs	r0, r7
   2c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c5bc:	d00c      	beq.n	2c5d8 <critical_factorization+0x9c>
   2c5be:	f04f 0e01 	mov.w	lr, #1
   2c5c2:	462e      	mov	r6, r5
   2c5c4:	4674      	mov	r4, lr
   2c5c6:	4475      	add	r5, lr
   2c5c8:	e7c0      	b.n	2c54c <critical_factorization+0x10>
   2c5ca:	d00b      	beq.n	2c5e4 <critical_factorization+0xa8>
   2c5cc:	f04f 0801 	mov.w	r8, #1
   2c5d0:	462f      	mov	r7, r5
   2c5d2:	4644      	mov	r4, r8
   2c5d4:	4445      	add	r5, r8
   2c5d6:	e7d4      	b.n	2c582 <critical_factorization+0x46>
   2c5d8:	4574      	cmp	r4, lr
   2c5da:	bf12      	itee	ne
   2c5dc:	3401      	addne	r4, #1
   2c5de:	461d      	moveq	r5, r3
   2c5e0:	2401      	moveq	r4, #1
   2c5e2:	e7b3      	b.n	2c54c <critical_factorization+0x10>
   2c5e4:	4544      	cmp	r4, r8
   2c5e6:	bf12      	itee	ne
   2c5e8:	3401      	addne	r4, #1
   2c5ea:	461d      	moveq	r5, r3
   2c5ec:	2401      	moveq	r4, #1
   2c5ee:	e7c8      	b.n	2c582 <critical_factorization+0x46>

0002c5f0 <two_way_long_needle>:
   2c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5f4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2c5f8:	4616      	mov	r6, r2
   2c5fa:	4605      	mov	r5, r0
   2c5fc:	468b      	mov	fp, r1
   2c5fe:	4610      	mov	r0, r2
   2c600:	4619      	mov	r1, r3
   2c602:	aa03      	add	r2, sp, #12
   2c604:	461c      	mov	r4, r3
   2c606:	f7ff ff99 	bl	2c53c <critical_factorization>
   2c60a:	ab03      	add	r3, sp, #12
   2c60c:	4681      	mov	r9, r0
   2c60e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2c612:	f843 4f04 	str.w	r4, [r3, #4]!
   2c616:	4293      	cmp	r3, r2
   2c618:	d1fb      	bne.n	2c612 <two_way_long_needle+0x22>
   2c61a:	b14c      	cbz	r4, 2c630 <two_way_long_needle+0x40>
   2c61c:	1e63      	subs	r3, r4, #1
   2c61e:	1e72      	subs	r2, r6, #1
   2c620:	a804      	add	r0, sp, #16
   2c622:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2c626:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2c62a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2c62e:	d2f8      	bcs.n	2c622 <two_way_long_needle+0x32>
   2c630:	9903      	ldr	r1, [sp, #12]
   2c632:	464a      	mov	r2, r9
   2c634:	4431      	add	r1, r6
   2c636:	4630      	mov	r0, r6
   2c638:	f7ff fc8c 	bl	2bf54 <memcmp>
   2c63c:	2800      	cmp	r0, #0
   2c63e:	d16f      	bne.n	2c720 <two_way_long_needle+0x130>
   2c640:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2c644:	9300      	str	r3, [sp, #0]
   2c646:	18f3      	adds	r3, r6, r3
   2c648:	4682      	mov	sl, r0
   2c64a:	9301      	str	r3, [sp, #4]
   2c64c:	4623      	mov	r3, r4
   2c64e:	4680      	mov	r8, r0
   2c650:	4654      	mov	r4, sl
   2c652:	4658      	mov	r0, fp
   2c654:	469a      	mov	sl, r3
   2c656:	eb08 070a 	add.w	r7, r8, sl
   2c65a:	1a3a      	subs	r2, r7, r0
   2c65c:	2100      	movs	r1, #0
   2c65e:	4428      	add	r0, r5
   2c660:	f7d3 fdde 	bl	220 <memchr>
   2c664:	2800      	cmp	r0, #0
   2c666:	d156      	bne.n	2c716 <two_way_long_needle+0x126>
   2c668:	2f00      	cmp	r7, #0
   2c66a:	d054      	beq.n	2c716 <two_way_long_needle+0x126>
   2c66c:	19eb      	adds	r3, r5, r7
   2c66e:	aa04      	add	r2, sp, #16
   2c670:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2c674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c678:	b14b      	cbz	r3, 2c68e <two_way_long_needle+0x9e>
   2c67a:	b124      	cbz	r4, 2c686 <two_way_long_needle+0x96>
   2c67c:	9a03      	ldr	r2, [sp, #12]
   2c67e:	4293      	cmp	r3, r2
   2c680:	d201      	bcs.n	2c686 <two_way_long_needle+0x96>
   2c682:	ebaa 0302 	sub.w	r3, sl, r2
   2c686:	4498      	add	r8, r3
   2c688:	2400      	movs	r4, #0
   2c68a:	4638      	mov	r0, r7
   2c68c:	e7e3      	b.n	2c656 <two_way_long_needle+0x66>
   2c68e:	454c      	cmp	r4, r9
   2c690:	4623      	mov	r3, r4
   2c692:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2c696:	bf38      	it	cc
   2c698:	464b      	movcc	r3, r9
   2c69a:	4573      	cmp	r3, lr
   2c69c:	d213      	bcs.n	2c6c6 <two_way_long_needle+0xd6>
   2c69e:	eb08 0203 	add.w	r2, r8, r3
   2c6a2:	f816 c003 	ldrb.w	ip, [r6, r3]
   2c6a6:	5ca8      	ldrb	r0, [r5, r2]
   2c6a8:	4584      	cmp	ip, r0
   2c6aa:	442a      	add	r2, r5
   2c6ac:	eb06 0103 	add.w	r1, r6, r3
   2c6b0:	d006      	beq.n	2c6c0 <two_way_long_needle+0xd0>
   2c6b2:	e02c      	b.n	2c70e <two_way_long_needle+0x11e>
   2c6b4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2c6b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c6bc:	4584      	cmp	ip, r0
   2c6be:	d126      	bne.n	2c70e <two_way_long_needle+0x11e>
   2c6c0:	3301      	adds	r3, #1
   2c6c2:	4573      	cmp	r3, lr
   2c6c4:	d3f6      	bcc.n	2c6b4 <two_way_long_needle+0xc4>
   2c6c6:	454c      	cmp	r4, r9
   2c6c8:	9900      	ldr	r1, [sp, #0]
   2c6ca:	f080 8089 	bcs.w	2c7e0 <two_way_long_needle+0x1f0>
   2c6ce:	9b00      	ldr	r3, [sp, #0]
   2c6d0:	eb08 0203 	add.w	r2, r8, r3
   2c6d4:	9b01      	ldr	r3, [sp, #4]
   2c6d6:	5ca8      	ldrb	r0, [r5, r2]
   2c6d8:	781b      	ldrb	r3, [r3, #0]
   2c6da:	4298      	cmp	r0, r3
   2c6dc:	442a      	add	r2, r5
   2c6de:	d17f      	bne.n	2c7e0 <two_way_long_needle+0x1f0>
   2c6e0:	9801      	ldr	r0, [sp, #4]
   2c6e2:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2c6e6:	e006      	b.n	2c6f6 <two_way_long_needle+0x106>
   2c6e8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2c6ec:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2c6f0:	45f4      	cmp	ip, lr
   2c6f2:	d103      	bne.n	2c6fc <two_way_long_needle+0x10c>
   2c6f4:	4619      	mov	r1, r3
   2c6f6:	1e4b      	subs	r3, r1, #1
   2c6f8:	459b      	cmp	fp, r3
   2c6fa:	d1f5      	bne.n	2c6e8 <two_way_long_needle+0xf8>
   2c6fc:	3401      	adds	r4, #1
   2c6fe:	428c      	cmp	r4, r1
   2c700:	d870      	bhi.n	2c7e4 <two_way_long_needle+0x1f4>
   2c702:	9c03      	ldr	r4, [sp, #12]
   2c704:	4638      	mov	r0, r7
   2c706:	44a0      	add	r8, r4
   2c708:	ebaa 0404 	sub.w	r4, sl, r4
   2c70c:	e7a3      	b.n	2c656 <two_way_long_needle+0x66>
   2c70e:	f1c9 0201 	rsb	r2, r9, #1
   2c712:	4490      	add	r8, r2
   2c714:	e7b7      	b.n	2c686 <two_way_long_needle+0x96>
   2c716:	2000      	movs	r0, #0
   2c718:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c720:	eba4 0309 	sub.w	r3, r4, r9
   2c724:	454b      	cmp	r3, r9
   2c726:	bf38      	it	cc
   2c728:	464b      	movcc	r3, r9
   2c72a:	3301      	adds	r3, #1
   2c72c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2c730:	9303      	str	r3, [sp, #12]
   2c732:	eb06 0308 	add.w	r3, r6, r8
   2c736:	4658      	mov	r0, fp
   2c738:	f04f 0a00 	mov.w	sl, #0
   2c73c:	46cb      	mov	fp, r9
   2c73e:	4699      	mov	r9, r3
   2c740:	eb0a 0704 	add.w	r7, sl, r4
   2c744:	1a3a      	subs	r2, r7, r0
   2c746:	2100      	movs	r1, #0
   2c748:	4428      	add	r0, r5
   2c74a:	f7d3 fd69 	bl	220 <memchr>
   2c74e:	2800      	cmp	r0, #0
   2c750:	d1e1      	bne.n	2c716 <two_way_long_needle+0x126>
   2c752:	2f00      	cmp	r7, #0
   2c754:	d0df      	beq.n	2c716 <two_way_long_needle+0x126>
   2c756:	19eb      	adds	r3, r5, r7
   2c758:	aa04      	add	r2, sp, #16
   2c75a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c762:	bba3      	cbnz	r3, 2c7ce <two_way_long_needle+0x1de>
   2c764:	1e61      	subs	r1, r4, #1
   2c766:	458b      	cmp	fp, r1
   2c768:	d215      	bcs.n	2c796 <two_way_long_needle+0x1a6>
   2c76a:	eb0a 020b 	add.w	r2, sl, fp
   2c76e:	f816 300b 	ldrb.w	r3, [r6, fp]
   2c772:	f815 e002 	ldrb.w	lr, [r5, r2]
   2c776:	459e      	cmp	lr, r3
   2c778:	442a      	add	r2, r5
   2c77a:	eb06 000b 	add.w	r0, r6, fp
   2c77e:	465b      	mov	r3, fp
   2c780:	d006      	beq.n	2c790 <two_way_long_needle+0x1a0>
   2c782:	e027      	b.n	2c7d4 <two_way_long_needle+0x1e4>
   2c784:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2c788:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2c78c:	45f4      	cmp	ip, lr
   2c78e:	d121      	bne.n	2c7d4 <two_way_long_needle+0x1e4>
   2c790:	3301      	adds	r3, #1
   2c792:	428b      	cmp	r3, r1
   2c794:	d3f6      	bcc.n	2c784 <two_way_long_needle+0x194>
   2c796:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2c79a:	d011      	beq.n	2c7c0 <two_way_long_needle+0x1d0>
   2c79c:	eb0a 0208 	add.w	r2, sl, r8
   2c7a0:	f899 1000 	ldrb.w	r1, [r9]
   2c7a4:	5cab      	ldrb	r3, [r5, r2]
   2c7a6:	4299      	cmp	r1, r3
   2c7a8:	442a      	add	r2, r5
   2c7aa:	d10f      	bne.n	2c7cc <two_way_long_needle+0x1dc>
   2c7ac:	464b      	mov	r3, r9
   2c7ae:	e005      	b.n	2c7bc <two_way_long_needle+0x1cc>
   2c7b0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2c7b4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2c7b8:	4288      	cmp	r0, r1
   2c7ba:	d107      	bne.n	2c7cc <two_way_long_needle+0x1dc>
   2c7bc:	42b3      	cmp	r3, r6
   2c7be:	d1f7      	bne.n	2c7b0 <two_way_long_needle+0x1c0>
   2c7c0:	eb05 000a 	add.w	r0, r5, sl
   2c7c4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c7cc:	9b03      	ldr	r3, [sp, #12]
   2c7ce:	449a      	add	sl, r3
   2c7d0:	4638      	mov	r0, r7
   2c7d2:	e7b5      	b.n	2c740 <two_way_long_needle+0x150>
   2c7d4:	f1cb 0201 	rsb	r2, fp, #1
   2c7d8:	4492      	add	sl, r2
   2c7da:	449a      	add	sl, r3
   2c7dc:	4638      	mov	r0, r7
   2c7de:	e7af      	b.n	2c740 <two_way_long_needle+0x150>
   2c7e0:	4649      	mov	r1, r9
   2c7e2:	e78b      	b.n	2c6fc <two_way_long_needle+0x10c>
   2c7e4:	eb05 0008 	add.w	r0, r5, r8
   2c7e8:	e796      	b.n	2c718 <two_way_long_needle+0x128>
   2c7ea:	bf00      	nop

0002c7ec <strstr>:
   2c7ec:	7802      	ldrb	r2, [r0, #0]
   2c7ee:	2a00      	cmp	r2, #0
   2c7f0:	f000 8101 	beq.w	2c9f6 <strstr+0x20a>
   2c7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c7f8:	f891 8000 	ldrb.w	r8, [r1]
   2c7fc:	b085      	sub	sp, #20
   2c7fe:	4644      	mov	r4, r8
   2c800:	f1b8 0f00 	cmp.w	r8, #0
   2c804:	d016      	beq.n	2c834 <strstr+0x48>
   2c806:	4686      	mov	lr, r0
   2c808:	f101 0c01 	add.w	ip, r1, #1
   2c80c:	2701      	movs	r7, #1
   2c80e:	e003      	b.n	2c818 <strstr+0x2c>
   2c810:	f813 4b01 	ldrb.w	r4, [r3], #1
   2c814:	b16c      	cbz	r4, 2c832 <strstr+0x46>
   2c816:	469c      	mov	ip, r3
   2c818:	42a2      	cmp	r2, r4
   2c81a:	bf14      	ite	ne
   2c81c:	2700      	movne	r7, #0
   2c81e:	f007 0701 	andeq.w	r7, r7, #1
   2c822:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2c826:	4663      	mov	r3, ip
   2c828:	2a00      	cmp	r2, #0
   2c82a:	d1f1      	bne.n	2c810 <strstr+0x24>
   2c82c:	f89c 3000 	ldrb.w	r3, [ip]
   2c830:	b9fb      	cbnz	r3, 2c872 <strstr+0x86>
   2c832:	b117      	cbz	r7, 2c83a <strstr+0x4e>
   2c834:	b005      	add	sp, #20
   2c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c83a:	460e      	mov	r6, r1
   2c83c:	4605      	mov	r5, r0
   2c83e:	4641      	mov	r1, r8
   2c840:	3001      	adds	r0, #1
   2c842:	ebac 0406 	sub.w	r4, ip, r6
   2c846:	f7ff fd11 	bl	2c26c <strchr>
   2c84a:	4607      	mov	r7, r0
   2c84c:	b188      	cbz	r0, 2c872 <strstr+0x86>
   2c84e:	2c01      	cmp	r4, #1
   2c850:	d0f0      	beq.n	2c834 <strstr+0x48>
   2c852:	1928      	adds	r0, r5, r4
   2c854:	4287      	cmp	r7, r0
   2c856:	bf94      	ite	ls
   2c858:	1bc1      	subls	r1, r0, r7
   2c85a:	2101      	movhi	r1, #1
   2c85c:	2c1f      	cmp	r4, #31
   2c85e:	468b      	mov	fp, r1
   2c860:	d90b      	bls.n	2c87a <strstr+0x8e>
   2c862:	4623      	mov	r3, r4
   2c864:	4632      	mov	r2, r6
   2c866:	4638      	mov	r0, r7
   2c868:	f7ff fec2 	bl	2c5f0 <two_way_long_needle>
   2c86c:	b005      	add	sp, #20
   2c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c872:	2000      	movs	r0, #0
   2c874:	b005      	add	sp, #20
   2c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c87a:	aa03      	add	r2, sp, #12
   2c87c:	4621      	mov	r1, r4
   2c87e:	4630      	mov	r0, r6
   2c880:	f7ff fe5c 	bl	2c53c <critical_factorization>
   2c884:	9903      	ldr	r1, [sp, #12]
   2c886:	4680      	mov	r8, r0
   2c888:	4602      	mov	r2, r0
   2c88a:	4431      	add	r1, r6
   2c88c:	4630      	mov	r0, r6
   2c88e:	f7ff fb61 	bl	2bf54 <memcmp>
   2c892:	2800      	cmp	r0, #0
   2c894:	d157      	bne.n	2c946 <strstr+0x15a>
   2c896:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2c89a:	9300      	str	r3, [sp, #0]
   2c89c:	18f3      	adds	r3, r6, r3
   2c89e:	4681      	mov	r9, r0
   2c8a0:	4605      	mov	r5, r0
   2c8a2:	9301      	str	r3, [sp, #4]
   2c8a4:	4658      	mov	r0, fp
   2c8a6:	46b2      	mov	sl, r6
   2c8a8:	1966      	adds	r6, r4, r5
   2c8aa:	1a32      	subs	r2, r6, r0
   2c8ac:	2100      	movs	r1, #0
   2c8ae:	4438      	add	r0, r7
   2c8b0:	f7d3 fcb6 	bl	220 <memchr>
   2c8b4:	2800      	cmp	r0, #0
   2c8b6:	d1dc      	bne.n	2c872 <strstr+0x86>
   2c8b8:	2e00      	cmp	r6, #0
   2c8ba:	d0da      	beq.n	2c872 <strstr+0x86>
   2c8bc:	45c8      	cmp	r8, r9
   2c8be:	4643      	mov	r3, r8
   2c8c0:	bf38      	it	cc
   2c8c2:	464b      	movcc	r3, r9
   2c8c4:	429c      	cmp	r4, r3
   2c8c6:	d912      	bls.n	2c8ee <strstr+0x102>
   2c8c8:	195a      	adds	r2, r3, r5
   2c8ca:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2c8ce:	5cb8      	ldrb	r0, [r7, r2]
   2c8d0:	4281      	cmp	r1, r0
   2c8d2:	443a      	add	r2, r7
   2c8d4:	eb0a 0e03 	add.w	lr, sl, r3
   2c8d8:	d006      	beq.n	2c8e8 <strstr+0xfc>
   2c8da:	e02c      	b.n	2c936 <strstr+0x14a>
   2c8dc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2c8e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2c8e4:	4288      	cmp	r0, r1
   2c8e6:	d126      	bne.n	2c936 <strstr+0x14a>
   2c8e8:	3301      	adds	r3, #1
   2c8ea:	429c      	cmp	r4, r3
   2c8ec:	d1f6      	bne.n	2c8dc <strstr+0xf0>
   2c8ee:	45c8      	cmp	r8, r9
   2c8f0:	9900      	ldr	r1, [sp, #0]
   2c8f2:	f240 8083 	bls.w	2c9fc <strstr+0x210>
   2c8f6:	9b00      	ldr	r3, [sp, #0]
   2c8f8:	18ea      	adds	r2, r5, r3
   2c8fa:	9b01      	ldr	r3, [sp, #4]
   2c8fc:	5cb8      	ldrb	r0, [r7, r2]
   2c8fe:	781b      	ldrb	r3, [r3, #0]
   2c900:	4298      	cmp	r0, r3
   2c902:	443a      	add	r2, r7
   2c904:	d17a      	bne.n	2c9fc <strstr+0x210>
   2c906:	9801      	ldr	r0, [sp, #4]
   2c908:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2c90c:	e006      	b.n	2c91c <strstr+0x130>
   2c90e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2c912:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2c916:	45f4      	cmp	ip, lr
   2c918:	d103      	bne.n	2c922 <strstr+0x136>
   2c91a:	4619      	mov	r1, r3
   2c91c:	1e4b      	subs	r3, r1, #1
   2c91e:	455b      	cmp	r3, fp
   2c920:	d1f5      	bne.n	2c90e <strstr+0x122>
   2c922:	f109 0901 	add.w	r9, r9, #1
   2c926:	4589      	cmp	r9, r1
   2c928:	d857      	bhi.n	2c9da <strstr+0x1ee>
   2c92a:	9b03      	ldr	r3, [sp, #12]
   2c92c:	4630      	mov	r0, r6
   2c92e:	441d      	add	r5, r3
   2c930:	eba4 0903 	sub.w	r9, r4, r3
   2c934:	e7b8      	b.n	2c8a8 <strstr+0xbc>
   2c936:	f1c8 0201 	rsb	r2, r8, #1
   2c93a:	4415      	add	r5, r2
   2c93c:	441d      	add	r5, r3
   2c93e:	f04f 0900 	mov.w	r9, #0
   2c942:	4630      	mov	r0, r6
   2c944:	e7b0      	b.n	2c8a8 <strstr+0xbc>
   2c946:	eba4 0308 	sub.w	r3, r4, r8
   2c94a:	4543      	cmp	r3, r8
   2c94c:	bf38      	it	cc
   2c94e:	4643      	movcc	r3, r8
   2c950:	3301      	adds	r3, #1
   2c952:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2c956:	9303      	str	r3, [sp, #12]
   2c958:	eb06 0309 	add.w	r3, r6, r9
   2c95c:	4658      	mov	r0, fp
   2c95e:	2500      	movs	r5, #0
   2c960:	46bb      	mov	fp, r7
   2c962:	469a      	mov	sl, r3
   2c964:	1967      	adds	r7, r4, r5
   2c966:	1a3a      	subs	r2, r7, r0
   2c968:	2100      	movs	r1, #0
   2c96a:	4458      	add	r0, fp
   2c96c:	f7d3 fc58 	bl	220 <memchr>
   2c970:	2800      	cmp	r0, #0
   2c972:	f47f af7e 	bne.w	2c872 <strstr+0x86>
   2c976:	2f00      	cmp	r7, #0
   2c978:	f43f af7b 	beq.w	2c872 <strstr+0x86>
   2c97c:	4544      	cmp	r4, r8
   2c97e:	d915      	bls.n	2c9ac <strstr+0x1c0>
   2c980:	eb08 0205 	add.w	r2, r8, r5
   2c984:	f816 3008 	ldrb.w	r3, [r6, r8]
   2c988:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2c98c:	4298      	cmp	r0, r3
   2c98e:	445a      	add	r2, fp
   2c990:	eb06 0108 	add.w	r1, r6, r8
   2c994:	4643      	mov	r3, r8
   2c996:	d006      	beq.n	2c9a6 <strstr+0x1ba>
   2c998:	e023      	b.n	2c9e2 <strstr+0x1f6>
   2c99a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2c99e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c9a2:	4586      	cmp	lr, r0
   2c9a4:	d11d      	bne.n	2c9e2 <strstr+0x1f6>
   2c9a6:	3301      	adds	r3, #1
   2c9a8:	429c      	cmp	r4, r3
   2c9aa:	d1f6      	bne.n	2c99a <strstr+0x1ae>
   2c9ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2c9b0:	d012      	beq.n	2c9d8 <strstr+0x1ec>
   2c9b2:	eb05 0209 	add.w	r2, r5, r9
   2c9b6:	f89a 3000 	ldrb.w	r3, [sl]
   2c9ba:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2c9be:	4299      	cmp	r1, r3
   2c9c0:	445a      	add	r2, fp
   2c9c2:	d114      	bne.n	2c9ee <strstr+0x202>
   2c9c4:	4653      	mov	r3, sl
   2c9c6:	e005      	b.n	2c9d4 <strstr+0x1e8>
   2c9c8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2c9cc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2c9d0:	4288      	cmp	r0, r1
   2c9d2:	d10c      	bne.n	2c9ee <strstr+0x202>
   2c9d4:	42b3      	cmp	r3, r6
   2c9d6:	d1f7      	bne.n	2c9c8 <strstr+0x1dc>
   2c9d8:	465f      	mov	r7, fp
   2c9da:	1978      	adds	r0, r7, r5
   2c9dc:	b005      	add	sp, #20
   2c9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9e2:	f1c8 0201 	rsb	r2, r8, #1
   2c9e6:	4415      	add	r5, r2
   2c9e8:	441d      	add	r5, r3
   2c9ea:	4638      	mov	r0, r7
   2c9ec:	e7ba      	b.n	2c964 <strstr+0x178>
   2c9ee:	9b03      	ldr	r3, [sp, #12]
   2c9f0:	4638      	mov	r0, r7
   2c9f2:	441d      	add	r5, r3
   2c9f4:	e7b6      	b.n	2c964 <strstr+0x178>
   2c9f6:	780b      	ldrb	r3, [r1, #0]
   2c9f8:	b913      	cbnz	r3, 2ca00 <strstr+0x214>
   2c9fa:	4770      	bx	lr
   2c9fc:	4641      	mov	r1, r8
   2c9fe:	e790      	b.n	2c922 <strstr+0x136>
   2ca00:	2000      	movs	r0, #0
   2ca02:	4770      	bx	lr

0002ca04 <_strtol_l.isra.0>:
   2ca04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca08:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2ca0c:	460f      	mov	r7, r1
   2ca0e:	4680      	mov	r8, r0
   2ca10:	4616      	mov	r6, r2
   2ca12:	461d      	mov	r5, r3
   2ca14:	468a      	mov	sl, r1
   2ca16:	e000      	b.n	2ca1a <_strtol_l.isra.0+0x16>
   2ca18:	46a2      	mov	sl, r4
   2ca1a:	4654      	mov	r4, sl
   2ca1c:	4648      	mov	r0, r9
   2ca1e:	f814 bb01 	ldrb.w	fp, [r4], #1
   2ca22:	f7fe ffbf 	bl	2b9a4 <__locale_ctype_ptr_l>
   2ca26:	4458      	add	r0, fp
   2ca28:	7842      	ldrb	r2, [r0, #1]
   2ca2a:	f012 0208 	ands.w	r2, r2, #8
   2ca2e:	d1f3      	bne.n	2ca18 <_strtol_l.isra.0+0x14>
   2ca30:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2ca34:	d04f      	beq.n	2cad6 <_strtol_l.isra.0+0xd2>
   2ca36:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2ca3a:	bf04      	itt	eq
   2ca3c:	f894 b000 	ldrbeq.w	fp, [r4]
   2ca40:	f10a 0402 	addeq.w	r4, sl, #2
   2ca44:	b11d      	cbz	r5, 2ca4e <_strtol_l.isra.0+0x4a>
   2ca46:	2d10      	cmp	r5, #16
   2ca48:	d056      	beq.n	2caf8 <_strtol_l.isra.0+0xf4>
   2ca4a:	46ac      	mov	ip, r5
   2ca4c:	e004      	b.n	2ca58 <_strtol_l.isra.0+0x54>
   2ca4e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2ca52:	d060      	beq.n	2cb16 <_strtol_l.isra.0+0x112>
   2ca54:	250a      	movs	r5, #10
   2ca56:	46ac      	mov	ip, r5
   2ca58:	2a00      	cmp	r2, #0
   2ca5a:	bf0c      	ite	eq
   2ca5c:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2ca60:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2ca64:	2100      	movs	r1, #0
   2ca66:	fbb9 fefc 	udiv	lr, r9, ip
   2ca6a:	4608      	mov	r0, r1
   2ca6c:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2ca70:	e005      	b.n	2ca7e <_strtol_l.isra.0+0x7a>
   2ca72:	d029      	beq.n	2cac8 <_strtol_l.isra.0+0xc4>
   2ca74:	fb0c 3000 	mla	r0, ip, r0, r3
   2ca78:	2101      	movs	r1, #1
   2ca7a:	f814 bb01 	ldrb.w	fp, [r4], #1
   2ca7e:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2ca82:	2b09      	cmp	r3, #9
   2ca84:	d905      	bls.n	2ca92 <_strtol_l.isra.0+0x8e>
   2ca86:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2ca8a:	2b19      	cmp	r3, #25
   2ca8c:	d80b      	bhi.n	2caa6 <_strtol_l.isra.0+0xa2>
   2ca8e:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2ca92:	429d      	cmp	r5, r3
   2ca94:	dd0f      	ble.n	2cab6 <_strtol_l.isra.0+0xb2>
   2ca96:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2ca9a:	d0ee      	beq.n	2ca7a <_strtol_l.isra.0+0x76>
   2ca9c:	4586      	cmp	lr, r0
   2ca9e:	d2e8      	bcs.n	2ca72 <_strtol_l.isra.0+0x6e>
   2caa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2caa4:	e7e9      	b.n	2ca7a <_strtol_l.isra.0+0x76>
   2caa6:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2caaa:	2b19      	cmp	r3, #25
   2caac:	d803      	bhi.n	2cab6 <_strtol_l.isra.0+0xb2>
   2caae:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2cab2:	429d      	cmp	r5, r3
   2cab4:	dcef      	bgt.n	2ca96 <_strtol_l.isra.0+0x92>
   2cab6:	1c4b      	adds	r3, r1, #1
   2cab8:	d013      	beq.n	2cae2 <_strtol_l.isra.0+0xde>
   2caba:	b102      	cbz	r2, 2cabe <_strtol_l.isra.0+0xba>
   2cabc:	4240      	negs	r0, r0
   2cabe:	b146      	cbz	r6, 2cad2 <_strtol_l.isra.0+0xce>
   2cac0:	b9c1      	cbnz	r1, 2caf4 <_strtol_l.isra.0+0xf0>
   2cac2:	6037      	str	r7, [r6, #0]
   2cac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cac8:	459a      	cmp	sl, r3
   2caca:	dad3      	bge.n	2ca74 <_strtol_l.isra.0+0x70>
   2cacc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cad0:	e7d3      	b.n	2ca7a <_strtol_l.isra.0+0x76>
   2cad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cad6:	f894 b000 	ldrb.w	fp, [r4]
   2cada:	2201      	movs	r2, #1
   2cadc:	f10a 0402 	add.w	r4, sl, #2
   2cae0:	e7b0      	b.n	2ca44 <_strtol_l.isra.0+0x40>
   2cae2:	2322      	movs	r3, #34	; 0x22
   2cae4:	f8c8 3000 	str.w	r3, [r8]
   2cae8:	b1ee      	cbz	r6, 2cb26 <_strtol_l.isra.0+0x122>
   2caea:	1e67      	subs	r7, r4, #1
   2caec:	4648      	mov	r0, r9
   2caee:	6037      	str	r7, [r6, #0]
   2caf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2caf4:	4681      	mov	r9, r0
   2caf6:	e7f8      	b.n	2caea <_strtol_l.isra.0+0xe6>
   2caf8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2cafc:	d1a5      	bne.n	2ca4a <_strtol_l.isra.0+0x46>
   2cafe:	7823      	ldrb	r3, [r4, #0]
   2cb00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cb04:	2b58      	cmp	r3, #88	; 0x58
   2cb06:	d1a0      	bne.n	2ca4a <_strtol_l.isra.0+0x46>
   2cb08:	f04f 0c10 	mov.w	ip, #16
   2cb0c:	f894 b001 	ldrb.w	fp, [r4, #1]
   2cb10:	4665      	mov	r5, ip
   2cb12:	3402      	adds	r4, #2
   2cb14:	e7a0      	b.n	2ca58 <_strtol_l.isra.0+0x54>
   2cb16:	7823      	ldrb	r3, [r4, #0]
   2cb18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cb1c:	2b58      	cmp	r3, #88	; 0x58
   2cb1e:	d0f3      	beq.n	2cb08 <_strtol_l.isra.0+0x104>
   2cb20:	2508      	movs	r5, #8
   2cb22:	46ac      	mov	ip, r5
   2cb24:	e798      	b.n	2ca58 <_strtol_l.isra.0+0x54>
   2cb26:	4648      	mov	r0, r9
   2cb28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cb2c <strtol>:
   2cb2c:	b530      	push	{r4, r5, lr}
   2cb2e:	4c08      	ldr	r4, [pc, #32]	; (2cb50 <strtol+0x24>)
   2cb30:	4b08      	ldr	r3, [pc, #32]	; (2cb54 <strtol+0x28>)
   2cb32:	6825      	ldr	r5, [r4, #0]
   2cb34:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2cb36:	b083      	sub	sp, #12
   2cb38:	2c00      	cmp	r4, #0
   2cb3a:	bf08      	it	eq
   2cb3c:	461c      	moveq	r4, r3
   2cb3e:	9400      	str	r4, [sp, #0]
   2cb40:	4613      	mov	r3, r2
   2cb42:	460a      	mov	r2, r1
   2cb44:	4601      	mov	r1, r0
   2cb46:	4628      	mov	r0, r5
   2cb48:	f7ff ff5c 	bl	2ca04 <_strtol_l.isra.0>
   2cb4c:	b003      	add	sp, #12
   2cb4e:	bd30      	pop	{r4, r5, pc}
   2cb50:	2000c618 	.word	0x2000c618
   2cb54:	2000ca48 	.word	0x2000ca48

0002cb58 <_strtoul_l.isra.0>:
   2cb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2cb60:	460e      	mov	r6, r1
   2cb62:	4607      	mov	r7, r0
   2cb64:	4615      	mov	r5, r2
   2cb66:	4698      	mov	r8, r3
   2cb68:	468a      	mov	sl, r1
   2cb6a:	e000      	b.n	2cb6e <_strtoul_l.isra.0+0x16>
   2cb6c:	46a2      	mov	sl, r4
   2cb6e:	4654      	mov	r4, sl
   2cb70:	4648      	mov	r0, r9
   2cb72:	f814 bb01 	ldrb.w	fp, [r4], #1
   2cb76:	f7fe ff15 	bl	2b9a4 <__locale_ctype_ptr_l>
   2cb7a:	4458      	add	r0, fp
   2cb7c:	7840      	ldrb	r0, [r0, #1]
   2cb7e:	f010 0008 	ands.w	r0, r0, #8
   2cb82:	d1f3      	bne.n	2cb6c <_strtoul_l.isra.0+0x14>
   2cb84:	4659      	mov	r1, fp
   2cb86:	292d      	cmp	r1, #45	; 0x2d
   2cb88:	d059      	beq.n	2cc3e <_strtoul_l.isra.0+0xe6>
   2cb8a:	292b      	cmp	r1, #43	; 0x2b
   2cb8c:	bf04      	itt	eq
   2cb8e:	7821      	ldrbeq	r1, [r4, #0]
   2cb90:	f10a 0402 	addeq.w	r4, sl, #2
   2cb94:	f1b8 0f00 	cmp.w	r8, #0
   2cb98:	d00c      	beq.n	2cbb4 <_strtoul_l.isra.0+0x5c>
   2cb9a:	f1b8 0f10 	cmp.w	r8, #16
   2cb9e:	d053      	beq.n	2cc48 <_strtoul_l.isra.0+0xf0>
   2cba0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2cba4:	fbbc fcf8 	udiv	ip, ip, r8
   2cba8:	fb08 fa0c 	mul.w	sl, r8, ip
   2cbac:	ea6f 0a0a 	mvn.w	sl, sl
   2cbb0:	46c1      	mov	r9, r8
   2cbb2:	e008      	b.n	2cbc6 <_strtoul_l.isra.0+0x6e>
   2cbb4:	2930      	cmp	r1, #48	; 0x30
   2cbb6:	d058      	beq.n	2cc6a <_strtoul_l.isra.0+0x112>
   2cbb8:	f04f 080a 	mov.w	r8, #10
   2cbbc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2cc9c <_strtoul_l.isra.0+0x144>
   2cbc0:	46c1      	mov	r9, r8
   2cbc2:	f04f 0a05 	mov.w	sl, #5
   2cbc6:	2300      	movs	r3, #0
   2cbc8:	469e      	mov	lr, r3
   2cbca:	e005      	b.n	2cbd8 <_strtoul_l.isra.0+0x80>
   2cbcc:	d02a      	beq.n	2cc24 <_strtoul_l.isra.0+0xcc>
   2cbce:	fb09 2e0e 	mla	lr, r9, lr, r2
   2cbd2:	2301      	movs	r3, #1
   2cbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
   2cbd8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2cbdc:	2a09      	cmp	r2, #9
   2cbde:	d905      	bls.n	2cbec <_strtoul_l.isra.0+0x94>
   2cbe0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2cbe4:	2a19      	cmp	r2, #25
   2cbe6:	d80a      	bhi.n	2cbfe <_strtoul_l.isra.0+0xa6>
   2cbe8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2cbec:	4590      	cmp	r8, r2
   2cbee:	dd0e      	ble.n	2cc0e <_strtoul_l.isra.0+0xb6>
   2cbf0:	2b00      	cmp	r3, #0
   2cbf2:	db01      	blt.n	2cbf8 <_strtoul_l.isra.0+0xa0>
   2cbf4:	45e6      	cmp	lr, ip
   2cbf6:	d9e9      	bls.n	2cbcc <_strtoul_l.isra.0+0x74>
   2cbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cbfc:	e7ea      	b.n	2cbd4 <_strtoul_l.isra.0+0x7c>
   2cbfe:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2cc02:	2a19      	cmp	r2, #25
   2cc04:	d803      	bhi.n	2cc0e <_strtoul_l.isra.0+0xb6>
   2cc06:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2cc0a:	4590      	cmp	r8, r2
   2cc0c:	dcf0      	bgt.n	2cbf0 <_strtoul_l.isra.0+0x98>
   2cc0e:	2b00      	cmp	r3, #0
   2cc10:	db0d      	blt.n	2cc2e <_strtoul_l.isra.0+0xd6>
   2cc12:	b108      	cbz	r0, 2cc18 <_strtoul_l.isra.0+0xc0>
   2cc14:	f1ce 0e00 	rsb	lr, lr, #0
   2cc18:	b10d      	cbz	r5, 2cc1e <_strtoul_l.isra.0+0xc6>
   2cc1a:	b973      	cbnz	r3, 2cc3a <_strtoul_l.isra.0+0xe2>
   2cc1c:	602e      	str	r6, [r5, #0]
   2cc1e:	4670      	mov	r0, lr
   2cc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc24:	4552      	cmp	r2, sl
   2cc26:	ddd2      	ble.n	2cbce <_strtoul_l.isra.0+0x76>
   2cc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cc2c:	e7d2      	b.n	2cbd4 <_strtoul_l.isra.0+0x7c>
   2cc2e:	2322      	movs	r3, #34	; 0x22
   2cc30:	603b      	str	r3, [r7, #0]
   2cc32:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2cc36:	2d00      	cmp	r5, #0
   2cc38:	d0f1      	beq.n	2cc1e <_strtoul_l.isra.0+0xc6>
   2cc3a:	1e66      	subs	r6, r4, #1
   2cc3c:	e7ee      	b.n	2cc1c <_strtoul_l.isra.0+0xc4>
   2cc3e:	7821      	ldrb	r1, [r4, #0]
   2cc40:	2001      	movs	r0, #1
   2cc42:	f10a 0402 	add.w	r4, sl, #2
   2cc46:	e7a5      	b.n	2cb94 <_strtoul_l.isra.0+0x3c>
   2cc48:	2930      	cmp	r1, #48	; 0x30
   2cc4a:	d11b      	bne.n	2cc84 <_strtoul_l.isra.0+0x12c>
   2cc4c:	7823      	ldrb	r3, [r4, #0]
   2cc4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cc52:	2b58      	cmp	r3, #88	; 0x58
   2cc54:	d11c      	bne.n	2cc90 <_strtoul_l.isra.0+0x138>
   2cc56:	f04f 0910 	mov.w	r9, #16
   2cc5a:	7861      	ldrb	r1, [r4, #1]
   2cc5c:	46c8      	mov	r8, r9
   2cc5e:	f04f 0a0f 	mov.w	sl, #15
   2cc62:	3402      	adds	r4, #2
   2cc64:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2cc68:	e7ad      	b.n	2cbc6 <_strtoul_l.isra.0+0x6e>
   2cc6a:	7823      	ldrb	r3, [r4, #0]
   2cc6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2cc70:	2b58      	cmp	r3, #88	; 0x58
   2cc72:	d0f0      	beq.n	2cc56 <_strtoul_l.isra.0+0xfe>
   2cc74:	f04f 0808 	mov.w	r8, #8
   2cc78:	46c1      	mov	r9, r8
   2cc7a:	f04f 0a07 	mov.w	sl, #7
   2cc7e:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2cc82:	e7a0      	b.n	2cbc6 <_strtoul_l.isra.0+0x6e>
   2cc84:	f04f 0a0f 	mov.w	sl, #15
   2cc88:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2cc8c:	46c1      	mov	r9, r8
   2cc8e:	e79a      	b.n	2cbc6 <_strtoul_l.isra.0+0x6e>
   2cc90:	46c1      	mov	r9, r8
   2cc92:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2cc96:	f04f 0a0f 	mov.w	sl, #15
   2cc9a:	e794      	b.n	2cbc6 <_strtoul_l.isra.0+0x6e>
   2cc9c:	19999999 	.word	0x19999999

0002cca0 <strtoul>:
   2cca0:	b530      	push	{r4, r5, lr}
   2cca2:	4c08      	ldr	r4, [pc, #32]	; (2ccc4 <strtoul+0x24>)
   2cca4:	4b08      	ldr	r3, [pc, #32]	; (2ccc8 <strtoul+0x28>)
   2cca6:	6825      	ldr	r5, [r4, #0]
   2cca8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2ccaa:	b083      	sub	sp, #12
   2ccac:	2c00      	cmp	r4, #0
   2ccae:	bf08      	it	eq
   2ccb0:	461c      	moveq	r4, r3
   2ccb2:	9400      	str	r4, [sp, #0]
   2ccb4:	4613      	mov	r3, r2
   2ccb6:	460a      	mov	r2, r1
   2ccb8:	4601      	mov	r1, r0
   2ccba:	4628      	mov	r0, r5
   2ccbc:	f7ff ff4c 	bl	2cb58 <_strtoul_l.isra.0>
   2ccc0:	b003      	add	sp, #12
   2ccc2:	bd30      	pop	{r4, r5, pc}
   2ccc4:	2000c618 	.word	0x2000c618
   2ccc8:	2000ca48 	.word	0x2000ca48

0002cccc <_svfprintf_r>:
   2cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ccd0:	b0c3      	sub	sp, #268	; 0x10c
   2ccd2:	460c      	mov	r4, r1
   2ccd4:	910b      	str	r1, [sp, #44]	; 0x2c
   2ccd6:	4692      	mov	sl, r2
   2ccd8:	930f      	str	r3, [sp, #60]	; 0x3c
   2ccda:	900c      	str	r0, [sp, #48]	; 0x30
   2ccdc:	f002 fb28 	bl	2f330 <_localeconv_r>
   2cce0:	6803      	ldr	r3, [r0, #0]
   2cce2:	931a      	str	r3, [sp, #104]	; 0x68
   2cce4:	4618      	mov	r0, r3
   2cce6:	f7d3 fd0b 	bl	700 <strlen>
   2ccea:	89a3      	ldrh	r3, [r4, #12]
   2ccec:	9019      	str	r0, [sp, #100]	; 0x64
   2ccee:	0619      	lsls	r1, r3, #24
   2ccf0:	d503      	bpl.n	2ccfa <_svfprintf_r+0x2e>
   2ccf2:	6923      	ldr	r3, [r4, #16]
   2ccf4:	2b00      	cmp	r3, #0
   2ccf6:	f001 8003 	beq.w	2dd00 <_svfprintf_r+0x1034>
   2ccfa:	2300      	movs	r3, #0
   2ccfc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2cd00:	9313      	str	r3, [sp, #76]	; 0x4c
   2cd02:	9315      	str	r3, [sp, #84]	; 0x54
   2cd04:	9314      	str	r3, [sp, #80]	; 0x50
   2cd06:	9327      	str	r3, [sp, #156]	; 0x9c
   2cd08:	9326      	str	r3, [sp, #152]	; 0x98
   2cd0a:	9318      	str	r3, [sp, #96]	; 0x60
   2cd0c:	931b      	str	r3, [sp, #108]	; 0x6c
   2cd0e:	9309      	str	r3, [sp, #36]	; 0x24
   2cd10:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2cd14:	46c8      	mov	r8, r9
   2cd16:	9316      	str	r3, [sp, #88]	; 0x58
   2cd18:	9317      	str	r3, [sp, #92]	; 0x5c
   2cd1a:	f89a 3000 	ldrb.w	r3, [sl]
   2cd1e:	4654      	mov	r4, sl
   2cd20:	b1e3      	cbz	r3, 2cd5c <_svfprintf_r+0x90>
   2cd22:	2b25      	cmp	r3, #37	; 0x25
   2cd24:	d102      	bne.n	2cd2c <_svfprintf_r+0x60>
   2cd26:	e019      	b.n	2cd5c <_svfprintf_r+0x90>
   2cd28:	2b25      	cmp	r3, #37	; 0x25
   2cd2a:	d003      	beq.n	2cd34 <_svfprintf_r+0x68>
   2cd2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2cd30:	2b00      	cmp	r3, #0
   2cd32:	d1f9      	bne.n	2cd28 <_svfprintf_r+0x5c>
   2cd34:	eba4 050a 	sub.w	r5, r4, sl
   2cd38:	b185      	cbz	r5, 2cd5c <_svfprintf_r+0x90>
   2cd3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cd3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2cd3e:	f8c8 a000 	str.w	sl, [r8]
   2cd42:	3301      	adds	r3, #1
   2cd44:	442a      	add	r2, r5
   2cd46:	2b07      	cmp	r3, #7
   2cd48:	f8c8 5004 	str.w	r5, [r8, #4]
   2cd4c:	9227      	str	r2, [sp, #156]	; 0x9c
   2cd4e:	9326      	str	r3, [sp, #152]	; 0x98
   2cd50:	dc7f      	bgt.n	2ce52 <_svfprintf_r+0x186>
   2cd52:	f108 0808 	add.w	r8, r8, #8
   2cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cd58:	442b      	add	r3, r5
   2cd5a:	9309      	str	r3, [sp, #36]	; 0x24
   2cd5c:	7823      	ldrb	r3, [r4, #0]
   2cd5e:	2b00      	cmp	r3, #0
   2cd60:	d07f      	beq.n	2ce62 <_svfprintf_r+0x196>
   2cd62:	2300      	movs	r3, #0
   2cd64:	461a      	mov	r2, r3
   2cd66:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2cd6a:	4619      	mov	r1, r3
   2cd6c:	930d      	str	r3, [sp, #52]	; 0x34
   2cd6e:	469b      	mov	fp, r3
   2cd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cd74:	7863      	ldrb	r3, [r4, #1]
   2cd76:	900a      	str	r0, [sp, #40]	; 0x28
   2cd78:	f104 0a01 	add.w	sl, r4, #1
   2cd7c:	f10a 0a01 	add.w	sl, sl, #1
   2cd80:	f1a3 0020 	sub.w	r0, r3, #32
   2cd84:	2858      	cmp	r0, #88	; 0x58
   2cd86:	f200 83c1 	bhi.w	2d50c <_svfprintf_r+0x840>
   2cd8a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2cd8e:	0238      	.short	0x0238
   2cd90:	03bf03bf 	.word	0x03bf03bf
   2cd94:	03bf0240 	.word	0x03bf0240
   2cd98:	03bf03bf 	.word	0x03bf03bf
   2cd9c:	03bf03bf 	.word	0x03bf03bf
   2cda0:	024503bf 	.word	0x024503bf
   2cda4:	03bf0203 	.word	0x03bf0203
   2cda8:	026b005d 	.word	0x026b005d
   2cdac:	028603bf 	.word	0x028603bf
   2cdb0:	039d039d 	.word	0x039d039d
   2cdb4:	039d039d 	.word	0x039d039d
   2cdb8:	039d039d 	.word	0x039d039d
   2cdbc:	039d039d 	.word	0x039d039d
   2cdc0:	03bf039d 	.word	0x03bf039d
   2cdc4:	03bf03bf 	.word	0x03bf03bf
   2cdc8:	03bf03bf 	.word	0x03bf03bf
   2cdcc:	03bf03bf 	.word	0x03bf03bf
   2cdd0:	03bf03bf 	.word	0x03bf03bf
   2cdd4:	033703bf 	.word	0x033703bf
   2cdd8:	03bf0357 	.word	0x03bf0357
   2cddc:	03bf0357 	.word	0x03bf0357
   2cde0:	03bf03bf 	.word	0x03bf03bf
   2cde4:	039803bf 	.word	0x039803bf
   2cde8:	03bf03bf 	.word	0x03bf03bf
   2cdec:	03bf03ad 	.word	0x03bf03ad
   2cdf0:	03bf03bf 	.word	0x03bf03bf
   2cdf4:	03bf03bf 	.word	0x03bf03bf
   2cdf8:	03bf0259 	.word	0x03bf0259
   2cdfc:	031e03bf 	.word	0x031e03bf
   2ce00:	03bf03bf 	.word	0x03bf03bf
   2ce04:	03bf03bf 	.word	0x03bf03bf
   2ce08:	03bf03bf 	.word	0x03bf03bf
   2ce0c:	03bf03bf 	.word	0x03bf03bf
   2ce10:	03bf03bf 	.word	0x03bf03bf
   2ce14:	02db02c6 	.word	0x02db02c6
   2ce18:	03570357 	.word	0x03570357
   2ce1c:	028b0357 	.word	0x028b0357
   2ce20:	03bf02db 	.word	0x03bf02db
   2ce24:	029003bf 	.word	0x029003bf
   2ce28:	029d03bf 	.word	0x029d03bf
   2ce2c:	02b401cc 	.word	0x02b401cc
   2ce30:	03bf0208 	.word	0x03bf0208
   2ce34:	03bf01e1 	.word	0x03bf01e1
   2ce38:	03bf007e 	.word	0x03bf007e
   2ce3c:	020d03bf 	.word	0x020d03bf
   2ce40:	980d      	ldr	r0, [sp, #52]	; 0x34
   2ce42:	930f      	str	r3, [sp, #60]	; 0x3c
   2ce44:	4240      	negs	r0, r0
   2ce46:	900d      	str	r0, [sp, #52]	; 0x34
   2ce48:	f04b 0b04 	orr.w	fp, fp, #4
   2ce4c:	f89a 3000 	ldrb.w	r3, [sl]
   2ce50:	e794      	b.n	2cd7c <_svfprintf_r+0xb0>
   2ce52:	aa25      	add	r2, sp, #148	; 0x94
   2ce54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ce56:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ce58:	f002 ff1c 	bl	2fc94 <__ssprint_r>
   2ce5c:	b940      	cbnz	r0, 2ce70 <_svfprintf_r+0x1a4>
   2ce5e:	46c8      	mov	r8, r9
   2ce60:	e779      	b.n	2cd56 <_svfprintf_r+0x8a>
   2ce62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2ce64:	b123      	cbz	r3, 2ce70 <_svfprintf_r+0x1a4>
   2ce66:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ce68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ce6a:	aa25      	add	r2, sp, #148	; 0x94
   2ce6c:	f002 ff12 	bl	2fc94 <__ssprint_r>
   2ce70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ce72:	899b      	ldrh	r3, [r3, #12]
   2ce74:	f013 0f40 	tst.w	r3, #64	; 0x40
   2ce78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ce7a:	bf18      	it	ne
   2ce7c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2ce80:	9309      	str	r3, [sp, #36]	; 0x24
   2ce82:	9809      	ldr	r0, [sp, #36]	; 0x24
   2ce84:	b043      	add	sp, #268	; 0x10c
   2ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce8a:	f01b 0f20 	tst.w	fp, #32
   2ce8e:	9311      	str	r3, [sp, #68]	; 0x44
   2ce90:	f040 81dd 	bne.w	2d24e <_svfprintf_r+0x582>
   2ce94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ce96:	f01b 0f10 	tst.w	fp, #16
   2ce9a:	4613      	mov	r3, r2
   2ce9c:	f040 856e 	bne.w	2d97c <_svfprintf_r+0xcb0>
   2cea0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2cea4:	f000 856a 	beq.w	2d97c <_svfprintf_r+0xcb0>
   2cea8:	8814      	ldrh	r4, [r2, #0]
   2ceaa:	3204      	adds	r2, #4
   2ceac:	2500      	movs	r5, #0
   2ceae:	2301      	movs	r3, #1
   2ceb0:	920f      	str	r2, [sp, #60]	; 0x3c
   2ceb2:	2700      	movs	r7, #0
   2ceb4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2ceb8:	990a      	ldr	r1, [sp, #40]	; 0x28
   2ceba:	1c4a      	adds	r2, r1, #1
   2cebc:	f000 8265 	beq.w	2d38a <_svfprintf_r+0x6be>
   2cec0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2cec4:	9207      	str	r2, [sp, #28]
   2cec6:	ea54 0205 	orrs.w	r2, r4, r5
   2ceca:	f040 8264 	bne.w	2d396 <_svfprintf_r+0x6ca>
   2cece:	2900      	cmp	r1, #0
   2ced0:	f040 843c 	bne.w	2d74c <_svfprintf_r+0xa80>
   2ced4:	2b00      	cmp	r3, #0
   2ced6:	f040 84d7 	bne.w	2d888 <_svfprintf_r+0xbbc>
   2ceda:	f01b 0301 	ands.w	r3, fp, #1
   2cede:	930e      	str	r3, [sp, #56]	; 0x38
   2cee0:	f000 8604 	beq.w	2daec <_svfprintf_r+0xe20>
   2cee4:	ae42      	add	r6, sp, #264	; 0x108
   2cee6:	2330      	movs	r3, #48	; 0x30
   2cee8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2ceec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ceee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2cef0:	4293      	cmp	r3, r2
   2cef2:	bfb8      	it	lt
   2cef4:	4613      	movlt	r3, r2
   2cef6:	9308      	str	r3, [sp, #32]
   2cef8:	2300      	movs	r3, #0
   2cefa:	9312      	str	r3, [sp, #72]	; 0x48
   2cefc:	b117      	cbz	r7, 2cf04 <_svfprintf_r+0x238>
   2cefe:	9b08      	ldr	r3, [sp, #32]
   2cf00:	3301      	adds	r3, #1
   2cf02:	9308      	str	r3, [sp, #32]
   2cf04:	9b07      	ldr	r3, [sp, #28]
   2cf06:	f013 0302 	ands.w	r3, r3, #2
   2cf0a:	9310      	str	r3, [sp, #64]	; 0x40
   2cf0c:	d002      	beq.n	2cf14 <_svfprintf_r+0x248>
   2cf0e:	9b08      	ldr	r3, [sp, #32]
   2cf10:	3302      	adds	r3, #2
   2cf12:	9308      	str	r3, [sp, #32]
   2cf14:	9b07      	ldr	r3, [sp, #28]
   2cf16:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2cf1a:	f040 830e 	bne.w	2d53a <_svfprintf_r+0x86e>
   2cf1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cf20:	9a08      	ldr	r2, [sp, #32]
   2cf22:	eba3 0b02 	sub.w	fp, r3, r2
   2cf26:	f1bb 0f00 	cmp.w	fp, #0
   2cf2a:	f340 8306 	ble.w	2d53a <_svfprintf_r+0x86e>
   2cf2e:	f1bb 0f10 	cmp.w	fp, #16
   2cf32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2cf34:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cf36:	dd29      	ble.n	2cf8c <_svfprintf_r+0x2c0>
   2cf38:	4643      	mov	r3, r8
   2cf3a:	4621      	mov	r1, r4
   2cf3c:	46a8      	mov	r8, r5
   2cf3e:	2710      	movs	r7, #16
   2cf40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cf42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2cf44:	e006      	b.n	2cf54 <_svfprintf_r+0x288>
   2cf46:	f1ab 0b10 	sub.w	fp, fp, #16
   2cf4a:	f1bb 0f10 	cmp.w	fp, #16
   2cf4e:	f103 0308 	add.w	r3, r3, #8
   2cf52:	dd18      	ble.n	2cf86 <_svfprintf_r+0x2ba>
   2cf54:	3201      	adds	r2, #1
   2cf56:	48b7      	ldr	r0, [pc, #732]	; (2d234 <_svfprintf_r+0x568>)
   2cf58:	9226      	str	r2, [sp, #152]	; 0x98
   2cf5a:	3110      	adds	r1, #16
   2cf5c:	2a07      	cmp	r2, #7
   2cf5e:	9127      	str	r1, [sp, #156]	; 0x9c
   2cf60:	e883 0081 	stmia.w	r3, {r0, r7}
   2cf64:	ddef      	ble.n	2cf46 <_svfprintf_r+0x27a>
   2cf66:	aa25      	add	r2, sp, #148	; 0x94
   2cf68:	4629      	mov	r1, r5
   2cf6a:	4620      	mov	r0, r4
   2cf6c:	f002 fe92 	bl	2fc94 <__ssprint_r>
   2cf70:	2800      	cmp	r0, #0
   2cf72:	f47f af7d 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2cf76:	f1ab 0b10 	sub.w	fp, fp, #16
   2cf7a:	f1bb 0f10 	cmp.w	fp, #16
   2cf7e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2cf80:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cf82:	464b      	mov	r3, r9
   2cf84:	dce6      	bgt.n	2cf54 <_svfprintf_r+0x288>
   2cf86:	4645      	mov	r5, r8
   2cf88:	460c      	mov	r4, r1
   2cf8a:	4698      	mov	r8, r3
   2cf8c:	3201      	adds	r2, #1
   2cf8e:	4ba9      	ldr	r3, [pc, #676]	; (2d234 <_svfprintf_r+0x568>)
   2cf90:	9226      	str	r2, [sp, #152]	; 0x98
   2cf92:	445c      	add	r4, fp
   2cf94:	2a07      	cmp	r2, #7
   2cf96:	9427      	str	r4, [sp, #156]	; 0x9c
   2cf98:	e888 0808 	stmia.w	r8, {r3, fp}
   2cf9c:	f300 8498 	bgt.w	2d8d0 <_svfprintf_r+0xc04>
   2cfa0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2cfa4:	f108 0808 	add.w	r8, r8, #8
   2cfa8:	b177      	cbz	r7, 2cfc8 <_svfprintf_r+0x2fc>
   2cfaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cfac:	3301      	adds	r3, #1
   2cfae:	3401      	adds	r4, #1
   2cfb0:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2cfb4:	2201      	movs	r2, #1
   2cfb6:	2b07      	cmp	r3, #7
   2cfb8:	9427      	str	r4, [sp, #156]	; 0x9c
   2cfba:	9326      	str	r3, [sp, #152]	; 0x98
   2cfbc:	e888 0006 	stmia.w	r8, {r1, r2}
   2cfc0:	f300 83db 	bgt.w	2d77a <_svfprintf_r+0xaae>
   2cfc4:	f108 0808 	add.w	r8, r8, #8
   2cfc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2cfca:	b16b      	cbz	r3, 2cfe8 <_svfprintf_r+0x31c>
   2cfcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cfce:	3301      	adds	r3, #1
   2cfd0:	3402      	adds	r4, #2
   2cfd2:	a91e      	add	r1, sp, #120	; 0x78
   2cfd4:	2202      	movs	r2, #2
   2cfd6:	2b07      	cmp	r3, #7
   2cfd8:	9427      	str	r4, [sp, #156]	; 0x9c
   2cfda:	9326      	str	r3, [sp, #152]	; 0x98
   2cfdc:	e888 0006 	stmia.w	r8, {r1, r2}
   2cfe0:	f300 83d6 	bgt.w	2d790 <_svfprintf_r+0xac4>
   2cfe4:	f108 0808 	add.w	r8, r8, #8
   2cfe8:	2d80      	cmp	r5, #128	; 0x80
   2cfea:	f000 8315 	beq.w	2d618 <_svfprintf_r+0x94c>
   2cfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2cff2:	1a9f      	subs	r7, r3, r2
   2cff4:	2f00      	cmp	r7, #0
   2cff6:	dd36      	ble.n	2d066 <_svfprintf_r+0x39a>
   2cff8:	2f10      	cmp	r7, #16
   2cffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cffc:	4d8e      	ldr	r5, [pc, #568]	; (2d238 <_svfprintf_r+0x56c>)
   2cffe:	dd27      	ble.n	2d050 <_svfprintf_r+0x384>
   2d000:	4642      	mov	r2, r8
   2d002:	4621      	mov	r1, r4
   2d004:	46b0      	mov	r8, r6
   2d006:	f04f 0b10 	mov.w	fp, #16
   2d00a:	462e      	mov	r6, r5
   2d00c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d00e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2d010:	e004      	b.n	2d01c <_svfprintf_r+0x350>
   2d012:	3f10      	subs	r7, #16
   2d014:	2f10      	cmp	r7, #16
   2d016:	f102 0208 	add.w	r2, r2, #8
   2d01a:	dd15      	ble.n	2d048 <_svfprintf_r+0x37c>
   2d01c:	3301      	adds	r3, #1
   2d01e:	3110      	adds	r1, #16
   2d020:	2b07      	cmp	r3, #7
   2d022:	9127      	str	r1, [sp, #156]	; 0x9c
   2d024:	9326      	str	r3, [sp, #152]	; 0x98
   2d026:	e882 0840 	stmia.w	r2, {r6, fp}
   2d02a:	ddf2      	ble.n	2d012 <_svfprintf_r+0x346>
   2d02c:	aa25      	add	r2, sp, #148	; 0x94
   2d02e:	4629      	mov	r1, r5
   2d030:	4620      	mov	r0, r4
   2d032:	f002 fe2f 	bl	2fc94 <__ssprint_r>
   2d036:	2800      	cmp	r0, #0
   2d038:	f47f af1a 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d03c:	3f10      	subs	r7, #16
   2d03e:	2f10      	cmp	r7, #16
   2d040:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2d042:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d044:	464a      	mov	r2, r9
   2d046:	dce9      	bgt.n	2d01c <_svfprintf_r+0x350>
   2d048:	4635      	mov	r5, r6
   2d04a:	460c      	mov	r4, r1
   2d04c:	4646      	mov	r6, r8
   2d04e:	4690      	mov	r8, r2
   2d050:	3301      	adds	r3, #1
   2d052:	443c      	add	r4, r7
   2d054:	2b07      	cmp	r3, #7
   2d056:	9427      	str	r4, [sp, #156]	; 0x9c
   2d058:	9326      	str	r3, [sp, #152]	; 0x98
   2d05a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2d05e:	f300 8381 	bgt.w	2d764 <_svfprintf_r+0xa98>
   2d062:	f108 0808 	add.w	r8, r8, #8
   2d066:	9b07      	ldr	r3, [sp, #28]
   2d068:	05df      	lsls	r7, r3, #23
   2d06a:	f100 8268 	bmi.w	2d53e <_svfprintf_r+0x872>
   2d06e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d070:	990e      	ldr	r1, [sp, #56]	; 0x38
   2d072:	f8c8 6000 	str.w	r6, [r8]
   2d076:	3301      	adds	r3, #1
   2d078:	440c      	add	r4, r1
   2d07a:	2b07      	cmp	r3, #7
   2d07c:	9427      	str	r4, [sp, #156]	; 0x9c
   2d07e:	f8c8 1004 	str.w	r1, [r8, #4]
   2d082:	9326      	str	r3, [sp, #152]	; 0x98
   2d084:	f300 834d 	bgt.w	2d722 <_svfprintf_r+0xa56>
   2d088:	f108 0808 	add.w	r8, r8, #8
   2d08c:	9b07      	ldr	r3, [sp, #28]
   2d08e:	075b      	lsls	r3, r3, #29
   2d090:	d53a      	bpl.n	2d108 <_svfprintf_r+0x43c>
   2d092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d094:	9a08      	ldr	r2, [sp, #32]
   2d096:	1a9d      	subs	r5, r3, r2
   2d098:	2d00      	cmp	r5, #0
   2d09a:	dd35      	ble.n	2d108 <_svfprintf_r+0x43c>
   2d09c:	2d10      	cmp	r5, #16
   2d09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d0a0:	dd20      	ble.n	2d0e4 <_svfprintf_r+0x418>
   2d0a2:	2610      	movs	r6, #16
   2d0a4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d0a6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2d0aa:	e004      	b.n	2d0b6 <_svfprintf_r+0x3ea>
   2d0ac:	3d10      	subs	r5, #16
   2d0ae:	2d10      	cmp	r5, #16
   2d0b0:	f108 0808 	add.w	r8, r8, #8
   2d0b4:	dd16      	ble.n	2d0e4 <_svfprintf_r+0x418>
   2d0b6:	3301      	adds	r3, #1
   2d0b8:	4a5e      	ldr	r2, [pc, #376]	; (2d234 <_svfprintf_r+0x568>)
   2d0ba:	9326      	str	r3, [sp, #152]	; 0x98
   2d0bc:	3410      	adds	r4, #16
   2d0be:	2b07      	cmp	r3, #7
   2d0c0:	9427      	str	r4, [sp, #156]	; 0x9c
   2d0c2:	e888 0044 	stmia.w	r8, {r2, r6}
   2d0c6:	ddf1      	ble.n	2d0ac <_svfprintf_r+0x3e0>
   2d0c8:	aa25      	add	r2, sp, #148	; 0x94
   2d0ca:	4659      	mov	r1, fp
   2d0cc:	4638      	mov	r0, r7
   2d0ce:	f002 fde1 	bl	2fc94 <__ssprint_r>
   2d0d2:	2800      	cmp	r0, #0
   2d0d4:	f47f aecc 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d0d8:	3d10      	subs	r5, #16
   2d0da:	2d10      	cmp	r5, #16
   2d0dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d0de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d0e0:	46c8      	mov	r8, r9
   2d0e2:	dce8      	bgt.n	2d0b6 <_svfprintf_r+0x3ea>
   2d0e4:	3301      	adds	r3, #1
   2d0e6:	4a53      	ldr	r2, [pc, #332]	; (2d234 <_svfprintf_r+0x568>)
   2d0e8:	9326      	str	r3, [sp, #152]	; 0x98
   2d0ea:	442c      	add	r4, r5
   2d0ec:	2b07      	cmp	r3, #7
   2d0ee:	9427      	str	r4, [sp, #156]	; 0x9c
   2d0f0:	e888 0024 	stmia.w	r8, {r2, r5}
   2d0f4:	dd08      	ble.n	2d108 <_svfprintf_r+0x43c>
   2d0f6:	aa25      	add	r2, sp, #148	; 0x94
   2d0f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d0fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d0fc:	f002 fdca 	bl	2fc94 <__ssprint_r>
   2d100:	2800      	cmp	r0, #0
   2d102:	f47f aeb5 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d106:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d108:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d10a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d10c:	9908      	ldr	r1, [sp, #32]
   2d10e:	428a      	cmp	r2, r1
   2d110:	bfac      	ite	ge
   2d112:	189b      	addge	r3, r3, r2
   2d114:	185b      	addlt	r3, r3, r1
   2d116:	9309      	str	r3, [sp, #36]	; 0x24
   2d118:	2c00      	cmp	r4, #0
   2d11a:	f040 830d 	bne.w	2d738 <_svfprintf_r+0xa6c>
   2d11e:	2300      	movs	r3, #0
   2d120:	9326      	str	r3, [sp, #152]	; 0x98
   2d122:	46c8      	mov	r8, r9
   2d124:	e5f9      	b.n	2cd1a <_svfprintf_r+0x4e>
   2d126:	9311      	str	r3, [sp, #68]	; 0x44
   2d128:	f01b 0320 	ands.w	r3, fp, #32
   2d12c:	f040 81e3 	bne.w	2d4f6 <_svfprintf_r+0x82a>
   2d130:	f01b 0210 	ands.w	r2, fp, #16
   2d134:	f040 842e 	bne.w	2d994 <_svfprintf_r+0xcc8>
   2d138:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2d13c:	f000 842a 	beq.w	2d994 <_svfprintf_r+0xcc8>
   2d140:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d142:	4613      	mov	r3, r2
   2d144:	460a      	mov	r2, r1
   2d146:	3204      	adds	r2, #4
   2d148:	880c      	ldrh	r4, [r1, #0]
   2d14a:	920f      	str	r2, [sp, #60]	; 0x3c
   2d14c:	2500      	movs	r5, #0
   2d14e:	e6b0      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d152:	9311      	str	r3, [sp, #68]	; 0x44
   2d154:	6816      	ldr	r6, [r2, #0]
   2d156:	2400      	movs	r4, #0
   2d158:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2d15c:	1d15      	adds	r5, r2, #4
   2d15e:	2e00      	cmp	r6, #0
   2d160:	f000 86a7 	beq.w	2deb2 <_svfprintf_r+0x11e6>
   2d164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d166:	1c53      	adds	r3, r2, #1
   2d168:	f000 8609 	beq.w	2dd7e <_svfprintf_r+0x10b2>
   2d16c:	4621      	mov	r1, r4
   2d16e:	4630      	mov	r0, r6
   2d170:	f7d3 f856 	bl	220 <memchr>
   2d174:	2800      	cmp	r0, #0
   2d176:	f000 86e1 	beq.w	2df3c <_svfprintf_r+0x1270>
   2d17a:	1b83      	subs	r3, r0, r6
   2d17c:	930e      	str	r3, [sp, #56]	; 0x38
   2d17e:	940a      	str	r4, [sp, #40]	; 0x28
   2d180:	950f      	str	r5, [sp, #60]	; 0x3c
   2d182:	f8cd b01c 	str.w	fp, [sp, #28]
   2d186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2d18a:	9308      	str	r3, [sp, #32]
   2d18c:	9412      	str	r4, [sp, #72]	; 0x48
   2d18e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2d192:	e6b3      	b.n	2cefc <_svfprintf_r+0x230>
   2d194:	f89a 3000 	ldrb.w	r3, [sl]
   2d198:	2201      	movs	r2, #1
   2d19a:	212b      	movs	r1, #43	; 0x2b
   2d19c:	e5ee      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d19e:	f04b 0b20 	orr.w	fp, fp, #32
   2d1a2:	f89a 3000 	ldrb.w	r3, [sl]
   2d1a6:	e5e9      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d1a8:	9311      	str	r3, [sp, #68]	; 0x44
   2d1aa:	2a00      	cmp	r2, #0
   2d1ac:	f040 8795 	bne.w	2e0da <_svfprintf_r+0x140e>
   2d1b0:	4b22      	ldr	r3, [pc, #136]	; (2d23c <_svfprintf_r+0x570>)
   2d1b2:	9318      	str	r3, [sp, #96]	; 0x60
   2d1b4:	f01b 0f20 	tst.w	fp, #32
   2d1b8:	f040 8111 	bne.w	2d3de <_svfprintf_r+0x712>
   2d1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d1be:	f01b 0f10 	tst.w	fp, #16
   2d1c2:	4613      	mov	r3, r2
   2d1c4:	f040 83e1 	bne.w	2d98a <_svfprintf_r+0xcbe>
   2d1c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2d1cc:	f000 83dd 	beq.w	2d98a <_svfprintf_r+0xcbe>
   2d1d0:	3304      	adds	r3, #4
   2d1d2:	8814      	ldrh	r4, [r2, #0]
   2d1d4:	930f      	str	r3, [sp, #60]	; 0x3c
   2d1d6:	2500      	movs	r5, #0
   2d1d8:	f01b 0f01 	tst.w	fp, #1
   2d1dc:	f000 810c 	beq.w	2d3f8 <_svfprintf_r+0x72c>
   2d1e0:	ea54 0305 	orrs.w	r3, r4, r5
   2d1e4:	f000 8108 	beq.w	2d3f8 <_svfprintf_r+0x72c>
   2d1e8:	2330      	movs	r3, #48	; 0x30
   2d1ea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2d1ee:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2d1f2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2d1f6:	f04b 0b02 	orr.w	fp, fp, #2
   2d1fa:	2302      	movs	r3, #2
   2d1fc:	e659      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d1fe:	f89a 3000 	ldrb.w	r3, [sl]
   2d202:	2900      	cmp	r1, #0
   2d204:	f47f adba 	bne.w	2cd7c <_svfprintf_r+0xb0>
   2d208:	2201      	movs	r2, #1
   2d20a:	2120      	movs	r1, #32
   2d20c:	e5b6      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d20e:	f04b 0b01 	orr.w	fp, fp, #1
   2d212:	f89a 3000 	ldrb.w	r3, [sl]
   2d216:	e5b1      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d218:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2d21a:	6823      	ldr	r3, [r4, #0]
   2d21c:	930d      	str	r3, [sp, #52]	; 0x34
   2d21e:	4618      	mov	r0, r3
   2d220:	2800      	cmp	r0, #0
   2d222:	4623      	mov	r3, r4
   2d224:	f103 0304 	add.w	r3, r3, #4
   2d228:	f6ff ae0a 	blt.w	2ce40 <_svfprintf_r+0x174>
   2d22c:	930f      	str	r3, [sp, #60]	; 0x3c
   2d22e:	f89a 3000 	ldrb.w	r3, [sl]
   2d232:	e5a3      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d234:	00034c94 	.word	0x00034c94
   2d238:	00034ca4 	.word	0x00034ca4
   2d23c:	00034c78 	.word	0x00034c78
   2d240:	f04b 0b10 	orr.w	fp, fp, #16
   2d244:	f01b 0f20 	tst.w	fp, #32
   2d248:	9311      	str	r3, [sp, #68]	; 0x44
   2d24a:	f43f ae23 	beq.w	2ce94 <_svfprintf_r+0x1c8>
   2d24e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d250:	3507      	adds	r5, #7
   2d252:	f025 0307 	bic.w	r3, r5, #7
   2d256:	f103 0208 	add.w	r2, r3, #8
   2d25a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2d25e:	920f      	str	r2, [sp, #60]	; 0x3c
   2d260:	2301      	movs	r3, #1
   2d262:	e626      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d264:	f89a 3000 	ldrb.w	r3, [sl]
   2d268:	2b2a      	cmp	r3, #42	; 0x2a
   2d26a:	f10a 0401 	add.w	r4, sl, #1
   2d26e:	f000 8727 	beq.w	2e0c0 <_svfprintf_r+0x13f4>
   2d272:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2d276:	2809      	cmp	r0, #9
   2d278:	46a2      	mov	sl, r4
   2d27a:	f200 86ad 	bhi.w	2dfd8 <_svfprintf_r+0x130c>
   2d27e:	2300      	movs	r3, #0
   2d280:	461c      	mov	r4, r3
   2d282:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2d286:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2d28a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2d28e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2d292:	2809      	cmp	r0, #9
   2d294:	d9f5      	bls.n	2d282 <_svfprintf_r+0x5b6>
   2d296:	940a      	str	r4, [sp, #40]	; 0x28
   2d298:	e572      	b.n	2cd80 <_svfprintf_r+0xb4>
   2d29a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2d29e:	f89a 3000 	ldrb.w	r3, [sl]
   2d2a2:	e56b      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d2a4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2d2a8:	f89a 3000 	ldrb.w	r3, [sl]
   2d2ac:	e566      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d2ae:	f89a 3000 	ldrb.w	r3, [sl]
   2d2b2:	2b6c      	cmp	r3, #108	; 0x6c
   2d2b4:	bf03      	ittte	eq
   2d2b6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2d2ba:	f04b 0b20 	orreq.w	fp, fp, #32
   2d2be:	f10a 0a01 	addeq.w	sl, sl, #1
   2d2c2:	f04b 0b10 	orrne.w	fp, fp, #16
   2d2c6:	e559      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d2c8:	2a00      	cmp	r2, #0
   2d2ca:	f040 8711 	bne.w	2e0f0 <_svfprintf_r+0x1424>
   2d2ce:	f01b 0f20 	tst.w	fp, #32
   2d2d2:	f040 84f9 	bne.w	2dcc8 <_svfprintf_r+0xffc>
   2d2d6:	f01b 0f10 	tst.w	fp, #16
   2d2da:	f040 84ac 	bne.w	2dc36 <_svfprintf_r+0xf6a>
   2d2de:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2d2e2:	f000 84a8 	beq.w	2dc36 <_svfprintf_r+0xf6a>
   2d2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d2e8:	6813      	ldr	r3, [r2, #0]
   2d2ea:	3204      	adds	r2, #4
   2d2ec:	920f      	str	r2, [sp, #60]	; 0x3c
   2d2ee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2d2f2:	801a      	strh	r2, [r3, #0]
   2d2f4:	e511      	b.n	2cd1a <_svfprintf_r+0x4e>
   2d2f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d2f8:	4bb3      	ldr	r3, [pc, #716]	; (2d5c8 <_svfprintf_r+0x8fc>)
   2d2fa:	680c      	ldr	r4, [r1, #0]
   2d2fc:	9318      	str	r3, [sp, #96]	; 0x60
   2d2fe:	2230      	movs	r2, #48	; 0x30
   2d300:	2378      	movs	r3, #120	; 0x78
   2d302:	3104      	adds	r1, #4
   2d304:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2d308:	9311      	str	r3, [sp, #68]	; 0x44
   2d30a:	f04b 0b02 	orr.w	fp, fp, #2
   2d30e:	910f      	str	r1, [sp, #60]	; 0x3c
   2d310:	2500      	movs	r5, #0
   2d312:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2d316:	2302      	movs	r3, #2
   2d318:	e5cb      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d31a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d31c:	9311      	str	r3, [sp, #68]	; 0x44
   2d31e:	680a      	ldr	r2, [r1, #0]
   2d320:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2d324:	2300      	movs	r3, #0
   2d326:	460a      	mov	r2, r1
   2d328:	461f      	mov	r7, r3
   2d32a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2d32e:	3204      	adds	r2, #4
   2d330:	2301      	movs	r3, #1
   2d332:	9308      	str	r3, [sp, #32]
   2d334:	f8cd b01c 	str.w	fp, [sp, #28]
   2d338:	970a      	str	r7, [sp, #40]	; 0x28
   2d33a:	9712      	str	r7, [sp, #72]	; 0x48
   2d33c:	920f      	str	r2, [sp, #60]	; 0x3c
   2d33e:	930e      	str	r3, [sp, #56]	; 0x38
   2d340:	ae28      	add	r6, sp, #160	; 0xa0
   2d342:	e5df      	b.n	2cf04 <_svfprintf_r+0x238>
   2d344:	9311      	str	r3, [sp, #68]	; 0x44
   2d346:	2a00      	cmp	r2, #0
   2d348:	f040 86ea 	bne.w	2e120 <_svfprintf_r+0x1454>
   2d34c:	f01b 0f20 	tst.w	fp, #32
   2d350:	d15d      	bne.n	2d40e <_svfprintf_r+0x742>
   2d352:	f01b 0f10 	tst.w	fp, #16
   2d356:	f040 8308 	bne.w	2d96a <_svfprintf_r+0xc9e>
   2d35a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2d35e:	f000 8304 	beq.w	2d96a <_svfprintf_r+0xc9e>
   2d362:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d364:	f9b1 4000 	ldrsh.w	r4, [r1]
   2d368:	3104      	adds	r1, #4
   2d36a:	17e5      	asrs	r5, r4, #31
   2d36c:	4622      	mov	r2, r4
   2d36e:	462b      	mov	r3, r5
   2d370:	910f      	str	r1, [sp, #60]	; 0x3c
   2d372:	2a00      	cmp	r2, #0
   2d374:	f173 0300 	sbcs.w	r3, r3, #0
   2d378:	db58      	blt.n	2d42c <_svfprintf_r+0x760>
   2d37a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d37c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2d380:	1c4a      	adds	r2, r1, #1
   2d382:	f04f 0301 	mov.w	r3, #1
   2d386:	f47f ad9b 	bne.w	2cec0 <_svfprintf_r+0x1f4>
   2d38a:	ea54 0205 	orrs.w	r2, r4, r5
   2d38e:	f000 81df 	beq.w	2d750 <_svfprintf_r+0xa84>
   2d392:	f8cd b01c 	str.w	fp, [sp, #28]
   2d396:	2b01      	cmp	r3, #1
   2d398:	f000 827b 	beq.w	2d892 <_svfprintf_r+0xbc6>
   2d39c:	2b02      	cmp	r3, #2
   2d39e:	f040 8206 	bne.w	2d7ae <_svfprintf_r+0xae2>
   2d3a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   2d3a4:	464e      	mov	r6, r9
   2d3a6:	0923      	lsrs	r3, r4, #4
   2d3a8:	f004 010f 	and.w	r1, r4, #15
   2d3ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2d3b0:	092a      	lsrs	r2, r5, #4
   2d3b2:	461c      	mov	r4, r3
   2d3b4:	4615      	mov	r5, r2
   2d3b6:	5c43      	ldrb	r3, [r0, r1]
   2d3b8:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2d3bc:	ea54 0305 	orrs.w	r3, r4, r5
   2d3c0:	d1f1      	bne.n	2d3a6 <_svfprintf_r+0x6da>
   2d3c2:	eba9 0306 	sub.w	r3, r9, r6
   2d3c6:	930e      	str	r3, [sp, #56]	; 0x38
   2d3c8:	e590      	b.n	2ceec <_svfprintf_r+0x220>
   2d3ca:	9311      	str	r3, [sp, #68]	; 0x44
   2d3cc:	2a00      	cmp	r2, #0
   2d3ce:	f040 86a3 	bne.w	2e118 <_svfprintf_r+0x144c>
   2d3d2:	4b7e      	ldr	r3, [pc, #504]	; (2d5cc <_svfprintf_r+0x900>)
   2d3d4:	9318      	str	r3, [sp, #96]	; 0x60
   2d3d6:	f01b 0f20 	tst.w	fp, #32
   2d3da:	f43f aeef 	beq.w	2d1bc <_svfprintf_r+0x4f0>
   2d3de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d3e0:	3507      	adds	r5, #7
   2d3e2:	f025 0307 	bic.w	r3, r5, #7
   2d3e6:	f103 0208 	add.w	r2, r3, #8
   2d3ea:	f01b 0f01 	tst.w	fp, #1
   2d3ee:	920f      	str	r2, [sp, #60]	; 0x3c
   2d3f0:	e9d3 4500 	ldrd	r4, r5, [r3]
   2d3f4:	f47f aef4 	bne.w	2d1e0 <_svfprintf_r+0x514>
   2d3f8:	2302      	movs	r3, #2
   2d3fa:	e55a      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d3fc:	9311      	str	r3, [sp, #68]	; 0x44
   2d3fe:	2a00      	cmp	r2, #0
   2d400:	f040 8686 	bne.w	2e110 <_svfprintf_r+0x1444>
   2d404:	f04b 0b10 	orr.w	fp, fp, #16
   2d408:	f01b 0f20 	tst.w	fp, #32
   2d40c:	d0a1      	beq.n	2d352 <_svfprintf_r+0x686>
   2d40e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d410:	3507      	adds	r5, #7
   2d412:	f025 0507 	bic.w	r5, r5, #7
   2d416:	e9d5 2300 	ldrd	r2, r3, [r5]
   2d41a:	2a00      	cmp	r2, #0
   2d41c:	f105 0108 	add.w	r1, r5, #8
   2d420:	461d      	mov	r5, r3
   2d422:	f173 0300 	sbcs.w	r3, r3, #0
   2d426:	910f      	str	r1, [sp, #60]	; 0x3c
   2d428:	4614      	mov	r4, r2
   2d42a:	daa6      	bge.n	2d37a <_svfprintf_r+0x6ae>
   2d42c:	272d      	movs	r7, #45	; 0x2d
   2d42e:	4264      	negs	r4, r4
   2d430:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2d434:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2d438:	2301      	movs	r3, #1
   2d43a:	e53d      	b.n	2ceb8 <_svfprintf_r+0x1ec>
   2d43c:	9311      	str	r3, [sp, #68]	; 0x44
   2d43e:	2a00      	cmp	r2, #0
   2d440:	f040 8662 	bne.w	2e108 <_svfprintf_r+0x143c>
   2d444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d446:	3507      	adds	r5, #7
   2d448:	f025 0307 	bic.w	r3, r5, #7
   2d44c:	f103 0208 	add.w	r2, r3, #8
   2d450:	920f      	str	r2, [sp, #60]	; 0x3c
   2d452:	681a      	ldr	r2, [r3, #0]
   2d454:	9215      	str	r2, [sp, #84]	; 0x54
   2d456:	685b      	ldr	r3, [r3, #4]
   2d458:	9314      	str	r3, [sp, #80]	; 0x50
   2d45a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2d45c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2d45e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2d462:	4628      	mov	r0, r5
   2d464:	4621      	mov	r1, r4
   2d466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d46a:	4b59      	ldr	r3, [pc, #356]	; (2d5d0 <_svfprintf_r+0x904>)
   2d46c:	f7d3 fe08 	bl	1080 <__aeabi_dcmpun>
   2d470:	2800      	cmp	r0, #0
   2d472:	f040 834a 	bne.w	2db0a <_svfprintf_r+0xe3e>
   2d476:	4628      	mov	r0, r5
   2d478:	4621      	mov	r1, r4
   2d47a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d47e:	4b54      	ldr	r3, [pc, #336]	; (2d5d0 <_svfprintf_r+0x904>)
   2d480:	f7d3 fde0 	bl	1044 <__aeabi_dcmple>
   2d484:	2800      	cmp	r0, #0
   2d486:	f040 8340 	bne.w	2db0a <_svfprintf_r+0xe3e>
   2d48a:	a815      	add	r0, sp, #84	; 0x54
   2d48c:	c80d      	ldmia	r0, {r0, r2, r3}
   2d48e:	9914      	ldr	r1, [sp, #80]	; 0x50
   2d490:	f7d3 fdce 	bl	1030 <__aeabi_dcmplt>
   2d494:	2800      	cmp	r0, #0
   2d496:	f040 8530 	bne.w	2defa <_svfprintf_r+0x122e>
   2d49a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2d49e:	4e4d      	ldr	r6, [pc, #308]	; (2d5d4 <_svfprintf_r+0x908>)
   2d4a0:	4b4d      	ldr	r3, [pc, #308]	; (2d5d8 <_svfprintf_r+0x90c>)
   2d4a2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2d4a6:	9007      	str	r0, [sp, #28]
   2d4a8:	9811      	ldr	r0, [sp, #68]	; 0x44
   2d4aa:	2203      	movs	r2, #3
   2d4ac:	2100      	movs	r1, #0
   2d4ae:	9208      	str	r2, [sp, #32]
   2d4b0:	910a      	str	r1, [sp, #40]	; 0x28
   2d4b2:	2847      	cmp	r0, #71	; 0x47
   2d4b4:	bfd8      	it	le
   2d4b6:	461e      	movle	r6, r3
   2d4b8:	920e      	str	r2, [sp, #56]	; 0x38
   2d4ba:	9112      	str	r1, [sp, #72]	; 0x48
   2d4bc:	e51e      	b.n	2cefc <_svfprintf_r+0x230>
   2d4be:	f04b 0b08 	orr.w	fp, fp, #8
   2d4c2:	f89a 3000 	ldrb.w	r3, [sl]
   2d4c6:	e459      	b.n	2cd7c <_svfprintf_r+0xb0>
   2d4c8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2d4cc:	2300      	movs	r3, #0
   2d4ce:	461c      	mov	r4, r3
   2d4d0:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2d4d4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2d4d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2d4dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2d4e0:	2809      	cmp	r0, #9
   2d4e2:	d9f5      	bls.n	2d4d0 <_svfprintf_r+0x804>
   2d4e4:	940d      	str	r4, [sp, #52]	; 0x34
   2d4e6:	e44b      	b.n	2cd80 <_svfprintf_r+0xb4>
   2d4e8:	f04b 0b10 	orr.w	fp, fp, #16
   2d4ec:	9311      	str	r3, [sp, #68]	; 0x44
   2d4ee:	f01b 0320 	ands.w	r3, fp, #32
   2d4f2:	f43f ae1d 	beq.w	2d130 <_svfprintf_r+0x464>
   2d4f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2d4f8:	3507      	adds	r5, #7
   2d4fa:	f025 0307 	bic.w	r3, r5, #7
   2d4fe:	f103 0208 	add.w	r2, r3, #8
   2d502:	e9d3 4500 	ldrd	r4, r5, [r3]
   2d506:	920f      	str	r2, [sp, #60]	; 0x3c
   2d508:	2300      	movs	r3, #0
   2d50a:	e4d2      	b.n	2ceb2 <_svfprintf_r+0x1e6>
   2d50c:	9311      	str	r3, [sp, #68]	; 0x44
   2d50e:	2a00      	cmp	r2, #0
   2d510:	f040 85e7 	bne.w	2e0e2 <_svfprintf_r+0x1416>
   2d514:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2d516:	2a00      	cmp	r2, #0
   2d518:	f43f aca3 	beq.w	2ce62 <_svfprintf_r+0x196>
   2d51c:	2300      	movs	r3, #0
   2d51e:	2101      	movs	r1, #1
   2d520:	461f      	mov	r7, r3
   2d522:	9108      	str	r1, [sp, #32]
   2d524:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2d528:	f8cd b01c 	str.w	fp, [sp, #28]
   2d52c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2d530:	930a      	str	r3, [sp, #40]	; 0x28
   2d532:	9312      	str	r3, [sp, #72]	; 0x48
   2d534:	910e      	str	r1, [sp, #56]	; 0x38
   2d536:	ae28      	add	r6, sp, #160	; 0xa0
   2d538:	e4e4      	b.n	2cf04 <_svfprintf_r+0x238>
   2d53a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d53c:	e534      	b.n	2cfa8 <_svfprintf_r+0x2dc>
   2d53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d540:	2b65      	cmp	r3, #101	; 0x65
   2d542:	f340 80a7 	ble.w	2d694 <_svfprintf_r+0x9c8>
   2d546:	a815      	add	r0, sp, #84	; 0x54
   2d548:	c80d      	ldmia	r0, {r0, r2, r3}
   2d54a:	9914      	ldr	r1, [sp, #80]	; 0x50
   2d54c:	f7d3 fd66 	bl	101c <__aeabi_dcmpeq>
   2d550:	2800      	cmp	r0, #0
   2d552:	f000 8150 	beq.w	2d7f6 <_svfprintf_r+0xb2a>
   2d556:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d558:	4a20      	ldr	r2, [pc, #128]	; (2d5dc <_svfprintf_r+0x910>)
   2d55a:	f8c8 2000 	str.w	r2, [r8]
   2d55e:	3301      	adds	r3, #1
   2d560:	3401      	adds	r4, #1
   2d562:	2201      	movs	r2, #1
   2d564:	2b07      	cmp	r3, #7
   2d566:	9427      	str	r4, [sp, #156]	; 0x9c
   2d568:	9326      	str	r3, [sp, #152]	; 0x98
   2d56a:	f8c8 2004 	str.w	r2, [r8, #4]
   2d56e:	f300 836a 	bgt.w	2dc46 <_svfprintf_r+0xf7a>
   2d572:	f108 0808 	add.w	r8, r8, #8
   2d576:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2d578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2d57a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d57c:	4293      	cmp	r3, r2
   2d57e:	db03      	blt.n	2d588 <_svfprintf_r+0x8bc>
   2d580:	9b07      	ldr	r3, [sp, #28]
   2d582:	07dd      	lsls	r5, r3, #31
   2d584:	f57f ad82 	bpl.w	2d08c <_svfprintf_r+0x3c0>
   2d588:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d58a:	9919      	ldr	r1, [sp, #100]	; 0x64
   2d58c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2d58e:	f8c8 2000 	str.w	r2, [r8]
   2d592:	3301      	adds	r3, #1
   2d594:	440c      	add	r4, r1
   2d596:	2b07      	cmp	r3, #7
   2d598:	f8c8 1004 	str.w	r1, [r8, #4]
   2d59c:	9427      	str	r4, [sp, #156]	; 0x9c
   2d59e:	9326      	str	r3, [sp, #152]	; 0x98
   2d5a0:	f300 839e 	bgt.w	2dce0 <_svfprintf_r+0x1014>
   2d5a4:	f108 0808 	add.w	r8, r8, #8
   2d5a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d5aa:	1e5e      	subs	r6, r3, #1
   2d5ac:	2e00      	cmp	r6, #0
   2d5ae:	f77f ad6d 	ble.w	2d08c <_svfprintf_r+0x3c0>
   2d5b2:	2e10      	cmp	r6, #16
   2d5b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d5b6:	4d0a      	ldr	r5, [pc, #40]	; (2d5e0 <_svfprintf_r+0x914>)
   2d5b8:	f340 81f5 	ble.w	2d9a6 <_svfprintf_r+0xcda>
   2d5bc:	4622      	mov	r2, r4
   2d5be:	2710      	movs	r7, #16
   2d5c0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2d5c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2d5c6:	e013      	b.n	2d5f0 <_svfprintf_r+0x924>
   2d5c8:	00034c78 	.word	0x00034c78
   2d5cc:	00034c64 	.word	0x00034c64
   2d5d0:	7fefffff 	.word	0x7fefffff
   2d5d4:	00034c58 	.word	0x00034c58
   2d5d8:	00034c54 	.word	0x00034c54
   2d5dc:	000347cc 	.word	0x000347cc
   2d5e0:	00034ca4 	.word	0x00034ca4
   2d5e4:	f108 0808 	add.w	r8, r8, #8
   2d5e8:	3e10      	subs	r6, #16
   2d5ea:	2e10      	cmp	r6, #16
   2d5ec:	f340 81da 	ble.w	2d9a4 <_svfprintf_r+0xcd8>
   2d5f0:	3301      	adds	r3, #1
   2d5f2:	3210      	adds	r2, #16
   2d5f4:	2b07      	cmp	r3, #7
   2d5f6:	9227      	str	r2, [sp, #156]	; 0x9c
   2d5f8:	9326      	str	r3, [sp, #152]	; 0x98
   2d5fa:	e888 00a0 	stmia.w	r8, {r5, r7}
   2d5fe:	ddf1      	ble.n	2d5e4 <_svfprintf_r+0x918>
   2d600:	aa25      	add	r2, sp, #148	; 0x94
   2d602:	4621      	mov	r1, r4
   2d604:	4658      	mov	r0, fp
   2d606:	f002 fb45 	bl	2fc94 <__ssprint_r>
   2d60a:	2800      	cmp	r0, #0
   2d60c:	f47f ac30 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d610:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2d612:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d614:	46c8      	mov	r8, r9
   2d616:	e7e7      	b.n	2d5e8 <_svfprintf_r+0x91c>
   2d618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d61a:	9a08      	ldr	r2, [sp, #32]
   2d61c:	1a9f      	subs	r7, r3, r2
   2d61e:	2f00      	cmp	r7, #0
   2d620:	f77f ace5 	ble.w	2cfee <_svfprintf_r+0x322>
   2d624:	2f10      	cmp	r7, #16
   2d626:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d628:	4db6      	ldr	r5, [pc, #728]	; (2d904 <_svfprintf_r+0xc38>)
   2d62a:	dd27      	ble.n	2d67c <_svfprintf_r+0x9b0>
   2d62c:	4642      	mov	r2, r8
   2d62e:	4621      	mov	r1, r4
   2d630:	46b0      	mov	r8, r6
   2d632:	f04f 0b10 	mov.w	fp, #16
   2d636:	462e      	mov	r6, r5
   2d638:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d63a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2d63c:	e004      	b.n	2d648 <_svfprintf_r+0x97c>
   2d63e:	3f10      	subs	r7, #16
   2d640:	2f10      	cmp	r7, #16
   2d642:	f102 0208 	add.w	r2, r2, #8
   2d646:	dd15      	ble.n	2d674 <_svfprintf_r+0x9a8>
   2d648:	3301      	adds	r3, #1
   2d64a:	3110      	adds	r1, #16
   2d64c:	2b07      	cmp	r3, #7
   2d64e:	9127      	str	r1, [sp, #156]	; 0x9c
   2d650:	9326      	str	r3, [sp, #152]	; 0x98
   2d652:	e882 0840 	stmia.w	r2, {r6, fp}
   2d656:	ddf2      	ble.n	2d63e <_svfprintf_r+0x972>
   2d658:	aa25      	add	r2, sp, #148	; 0x94
   2d65a:	4629      	mov	r1, r5
   2d65c:	4620      	mov	r0, r4
   2d65e:	f002 fb19 	bl	2fc94 <__ssprint_r>
   2d662:	2800      	cmp	r0, #0
   2d664:	f47f ac04 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d668:	3f10      	subs	r7, #16
   2d66a:	2f10      	cmp	r7, #16
   2d66c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2d66e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d670:	464a      	mov	r2, r9
   2d672:	dce9      	bgt.n	2d648 <_svfprintf_r+0x97c>
   2d674:	4635      	mov	r5, r6
   2d676:	460c      	mov	r4, r1
   2d678:	4646      	mov	r6, r8
   2d67a:	4690      	mov	r8, r2
   2d67c:	3301      	adds	r3, #1
   2d67e:	443c      	add	r4, r7
   2d680:	2b07      	cmp	r3, #7
   2d682:	9427      	str	r4, [sp, #156]	; 0x9c
   2d684:	9326      	str	r3, [sp, #152]	; 0x98
   2d686:	e888 00a0 	stmia.w	r8, {r5, r7}
   2d68a:	f300 8232 	bgt.w	2daf2 <_svfprintf_r+0xe26>
   2d68e:	f108 0808 	add.w	r8, r8, #8
   2d692:	e4ac      	b.n	2cfee <_svfprintf_r+0x322>
   2d694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d696:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2d698:	2b01      	cmp	r3, #1
   2d69a:	f340 81fe 	ble.w	2da9a <_svfprintf_r+0xdce>
   2d69e:	3701      	adds	r7, #1
   2d6a0:	3401      	adds	r4, #1
   2d6a2:	2301      	movs	r3, #1
   2d6a4:	2f07      	cmp	r7, #7
   2d6a6:	9427      	str	r4, [sp, #156]	; 0x9c
   2d6a8:	9726      	str	r7, [sp, #152]	; 0x98
   2d6aa:	f8c8 6000 	str.w	r6, [r8]
   2d6ae:	f8c8 3004 	str.w	r3, [r8, #4]
   2d6b2:	f300 8203 	bgt.w	2dabc <_svfprintf_r+0xdf0>
   2d6b6:	f108 0808 	add.w	r8, r8, #8
   2d6ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2d6bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2d6be:	f8c8 3000 	str.w	r3, [r8]
   2d6c2:	3701      	adds	r7, #1
   2d6c4:	4414      	add	r4, r2
   2d6c6:	2f07      	cmp	r7, #7
   2d6c8:	9427      	str	r4, [sp, #156]	; 0x9c
   2d6ca:	9726      	str	r7, [sp, #152]	; 0x98
   2d6cc:	f8c8 2004 	str.w	r2, [r8, #4]
   2d6d0:	f300 8200 	bgt.w	2dad4 <_svfprintf_r+0xe08>
   2d6d4:	f108 0808 	add.w	r8, r8, #8
   2d6d8:	a815      	add	r0, sp, #84	; 0x54
   2d6da:	c80d      	ldmia	r0, {r0, r2, r3}
   2d6dc:	9914      	ldr	r1, [sp, #80]	; 0x50
   2d6de:	f7d3 fc9d 	bl	101c <__aeabi_dcmpeq>
   2d6e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d6e4:	2800      	cmp	r0, #0
   2d6e6:	f040 8101 	bne.w	2d8ec <_svfprintf_r+0xc20>
   2d6ea:	3b01      	subs	r3, #1
   2d6ec:	3701      	adds	r7, #1
   2d6ee:	3601      	adds	r6, #1
   2d6f0:	441c      	add	r4, r3
   2d6f2:	2f07      	cmp	r7, #7
   2d6f4:	9726      	str	r7, [sp, #152]	; 0x98
   2d6f6:	9427      	str	r4, [sp, #156]	; 0x9c
   2d6f8:	f8c8 6000 	str.w	r6, [r8]
   2d6fc:	f8c8 3004 	str.w	r3, [r8, #4]
   2d700:	f300 8127 	bgt.w	2d952 <_svfprintf_r+0xc86>
   2d704:	f108 0808 	add.w	r8, r8, #8
   2d708:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2d70a:	f8c8 2004 	str.w	r2, [r8, #4]
   2d70e:	3701      	adds	r7, #1
   2d710:	4414      	add	r4, r2
   2d712:	ab21      	add	r3, sp, #132	; 0x84
   2d714:	2f07      	cmp	r7, #7
   2d716:	9427      	str	r4, [sp, #156]	; 0x9c
   2d718:	9726      	str	r7, [sp, #152]	; 0x98
   2d71a:	f8c8 3000 	str.w	r3, [r8]
   2d71e:	f77f acb3 	ble.w	2d088 <_svfprintf_r+0x3bc>
   2d722:	aa25      	add	r2, sp, #148	; 0x94
   2d724:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d726:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d728:	f002 fab4 	bl	2fc94 <__ssprint_r>
   2d72c:	2800      	cmp	r0, #0
   2d72e:	f47f ab9f 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d732:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d734:	46c8      	mov	r8, r9
   2d736:	e4a9      	b.n	2d08c <_svfprintf_r+0x3c0>
   2d738:	aa25      	add	r2, sp, #148	; 0x94
   2d73a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d73c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d73e:	f002 faa9 	bl	2fc94 <__ssprint_r>
   2d742:	2800      	cmp	r0, #0
   2d744:	f43f aceb 	beq.w	2d11e <_svfprintf_r+0x452>
   2d748:	f7ff bb92 	b.w	2ce70 <_svfprintf_r+0x1a4>
   2d74c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2d750:	2b01      	cmp	r3, #1
   2d752:	f000 8134 	beq.w	2d9be <_svfprintf_r+0xcf2>
   2d756:	2b02      	cmp	r3, #2
   2d758:	d125      	bne.n	2d7a6 <_svfprintf_r+0xada>
   2d75a:	f8cd b01c 	str.w	fp, [sp, #28]
   2d75e:	2400      	movs	r4, #0
   2d760:	2500      	movs	r5, #0
   2d762:	e61e      	b.n	2d3a2 <_svfprintf_r+0x6d6>
   2d764:	aa25      	add	r2, sp, #148	; 0x94
   2d766:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d768:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d76a:	f002 fa93 	bl	2fc94 <__ssprint_r>
   2d76e:	2800      	cmp	r0, #0
   2d770:	f47f ab7e 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d774:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d776:	46c8      	mov	r8, r9
   2d778:	e475      	b.n	2d066 <_svfprintf_r+0x39a>
   2d77a:	aa25      	add	r2, sp, #148	; 0x94
   2d77c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d77e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d780:	f002 fa88 	bl	2fc94 <__ssprint_r>
   2d784:	2800      	cmp	r0, #0
   2d786:	f47f ab73 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d78a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d78c:	46c8      	mov	r8, r9
   2d78e:	e41b      	b.n	2cfc8 <_svfprintf_r+0x2fc>
   2d790:	aa25      	add	r2, sp, #148	; 0x94
   2d792:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d794:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d796:	f002 fa7d 	bl	2fc94 <__ssprint_r>
   2d79a:	2800      	cmp	r0, #0
   2d79c:	f47f ab68 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d7a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d7a2:	46c8      	mov	r8, r9
   2d7a4:	e420      	b.n	2cfe8 <_svfprintf_r+0x31c>
   2d7a6:	f8cd b01c 	str.w	fp, [sp, #28]
   2d7aa:	2400      	movs	r4, #0
   2d7ac:	2500      	movs	r5, #0
   2d7ae:	4649      	mov	r1, r9
   2d7b0:	e000      	b.n	2d7b4 <_svfprintf_r+0xae8>
   2d7b2:	4631      	mov	r1, r6
   2d7b4:	08e2      	lsrs	r2, r4, #3
   2d7b6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2d7ba:	08e8      	lsrs	r0, r5, #3
   2d7bc:	f004 0307 	and.w	r3, r4, #7
   2d7c0:	4605      	mov	r5, r0
   2d7c2:	4614      	mov	r4, r2
   2d7c4:	3330      	adds	r3, #48	; 0x30
   2d7c6:	ea54 0205 	orrs.w	r2, r4, r5
   2d7ca:	f801 3c01 	strb.w	r3, [r1, #-1]
   2d7ce:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2d7d2:	d1ee      	bne.n	2d7b2 <_svfprintf_r+0xae6>
   2d7d4:	9a07      	ldr	r2, [sp, #28]
   2d7d6:	07d2      	lsls	r2, r2, #31
   2d7d8:	f57f adf3 	bpl.w	2d3c2 <_svfprintf_r+0x6f6>
   2d7dc:	2b30      	cmp	r3, #48	; 0x30
   2d7de:	f43f adf0 	beq.w	2d3c2 <_svfprintf_r+0x6f6>
   2d7e2:	3902      	subs	r1, #2
   2d7e4:	2330      	movs	r3, #48	; 0x30
   2d7e6:	f806 3c01 	strb.w	r3, [r6, #-1]
   2d7ea:	eba9 0301 	sub.w	r3, r9, r1
   2d7ee:	930e      	str	r3, [sp, #56]	; 0x38
   2d7f0:	460e      	mov	r6, r1
   2d7f2:	f7ff bb7b 	b.w	2ceec <_svfprintf_r+0x220>
   2d7f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2d7f8:	2900      	cmp	r1, #0
   2d7fa:	f340 822e 	ble.w	2dc5a <_svfprintf_r+0xf8e>
   2d7fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2d802:	4293      	cmp	r3, r2
   2d804:	bfa8      	it	ge
   2d806:	4613      	movge	r3, r2
   2d808:	2b00      	cmp	r3, #0
   2d80a:	461f      	mov	r7, r3
   2d80c:	dd0d      	ble.n	2d82a <_svfprintf_r+0xb5e>
   2d80e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d810:	f8c8 6000 	str.w	r6, [r8]
   2d814:	3301      	adds	r3, #1
   2d816:	443c      	add	r4, r7
   2d818:	2b07      	cmp	r3, #7
   2d81a:	9427      	str	r4, [sp, #156]	; 0x9c
   2d81c:	f8c8 7004 	str.w	r7, [r8, #4]
   2d820:	9326      	str	r3, [sp, #152]	; 0x98
   2d822:	f300 831f 	bgt.w	2de64 <_svfprintf_r+0x1198>
   2d826:	f108 0808 	add.w	r8, r8, #8
   2d82a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d82c:	2f00      	cmp	r7, #0
   2d82e:	bfa8      	it	ge
   2d830:	1bdb      	subge	r3, r3, r7
   2d832:	2b00      	cmp	r3, #0
   2d834:	461f      	mov	r7, r3
   2d836:	f340 80d6 	ble.w	2d9e6 <_svfprintf_r+0xd1a>
   2d83a:	2f10      	cmp	r7, #16
   2d83c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d83e:	4d31      	ldr	r5, [pc, #196]	; (2d904 <_svfprintf_r+0xc38>)
   2d840:	f340 81ed 	ble.w	2dc1e <_svfprintf_r+0xf52>
   2d844:	4642      	mov	r2, r8
   2d846:	4621      	mov	r1, r4
   2d848:	46b0      	mov	r8, r6
   2d84a:	f04f 0b10 	mov.w	fp, #16
   2d84e:	462e      	mov	r6, r5
   2d850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d852:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2d854:	e004      	b.n	2d860 <_svfprintf_r+0xb94>
   2d856:	3208      	adds	r2, #8
   2d858:	3f10      	subs	r7, #16
   2d85a:	2f10      	cmp	r7, #16
   2d85c:	f340 81db 	ble.w	2dc16 <_svfprintf_r+0xf4a>
   2d860:	3301      	adds	r3, #1
   2d862:	3110      	adds	r1, #16
   2d864:	2b07      	cmp	r3, #7
   2d866:	9127      	str	r1, [sp, #156]	; 0x9c
   2d868:	9326      	str	r3, [sp, #152]	; 0x98
   2d86a:	e882 0840 	stmia.w	r2, {r6, fp}
   2d86e:	ddf2      	ble.n	2d856 <_svfprintf_r+0xb8a>
   2d870:	aa25      	add	r2, sp, #148	; 0x94
   2d872:	4629      	mov	r1, r5
   2d874:	4620      	mov	r0, r4
   2d876:	f002 fa0d 	bl	2fc94 <__ssprint_r>
   2d87a:	2800      	cmp	r0, #0
   2d87c:	f47f aaf8 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d880:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2d882:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2d884:	464a      	mov	r2, r9
   2d886:	e7e7      	b.n	2d858 <_svfprintf_r+0xb8c>
   2d888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d88a:	930e      	str	r3, [sp, #56]	; 0x38
   2d88c:	464e      	mov	r6, r9
   2d88e:	f7ff bb2d 	b.w	2ceec <_svfprintf_r+0x220>
   2d892:	2d00      	cmp	r5, #0
   2d894:	bf08      	it	eq
   2d896:	2c0a      	cmpeq	r4, #10
   2d898:	f0c0 808f 	bcc.w	2d9ba <_svfprintf_r+0xcee>
   2d89c:	464e      	mov	r6, r9
   2d89e:	4620      	mov	r0, r4
   2d8a0:	4629      	mov	r1, r5
   2d8a2:	220a      	movs	r2, #10
   2d8a4:	2300      	movs	r3, #0
   2d8a6:	f7d3 fc29 	bl	10fc <__aeabi_uldivmod>
   2d8aa:	3230      	adds	r2, #48	; 0x30
   2d8ac:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2d8b0:	4620      	mov	r0, r4
   2d8b2:	4629      	mov	r1, r5
   2d8b4:	2300      	movs	r3, #0
   2d8b6:	220a      	movs	r2, #10
   2d8b8:	f7d3 fc20 	bl	10fc <__aeabi_uldivmod>
   2d8bc:	4604      	mov	r4, r0
   2d8be:	460d      	mov	r5, r1
   2d8c0:	ea54 0305 	orrs.w	r3, r4, r5
   2d8c4:	d1eb      	bne.n	2d89e <_svfprintf_r+0xbd2>
   2d8c6:	eba9 0306 	sub.w	r3, r9, r6
   2d8ca:	930e      	str	r3, [sp, #56]	; 0x38
   2d8cc:	f7ff bb0e 	b.w	2ceec <_svfprintf_r+0x220>
   2d8d0:	aa25      	add	r2, sp, #148	; 0x94
   2d8d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d8d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d8d6:	f002 f9dd 	bl	2fc94 <__ssprint_r>
   2d8da:	2800      	cmp	r0, #0
   2d8dc:	f47f aac8 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d8e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2d8e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d8e6:	46c8      	mov	r8, r9
   2d8e8:	f7ff bb5e 	b.w	2cfa8 <_svfprintf_r+0x2dc>
   2d8ec:	1e5e      	subs	r6, r3, #1
   2d8ee:	2e00      	cmp	r6, #0
   2d8f0:	f77f af0a 	ble.w	2d708 <_svfprintf_r+0xa3c>
   2d8f4:	2e10      	cmp	r6, #16
   2d8f6:	4d03      	ldr	r5, [pc, #12]	; (2d904 <_svfprintf_r+0xc38>)
   2d8f8:	dd22      	ble.n	2d940 <_svfprintf_r+0xc74>
   2d8fa:	4622      	mov	r2, r4
   2d8fc:	f04f 0b10 	mov.w	fp, #16
   2d900:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d902:	e006      	b.n	2d912 <_svfprintf_r+0xc46>
   2d904:	00034ca4 	.word	0x00034ca4
   2d908:	3e10      	subs	r6, #16
   2d90a:	2e10      	cmp	r6, #16
   2d90c:	f108 0808 	add.w	r8, r8, #8
   2d910:	dd15      	ble.n	2d93e <_svfprintf_r+0xc72>
   2d912:	3701      	adds	r7, #1
   2d914:	3210      	adds	r2, #16
   2d916:	2f07      	cmp	r7, #7
   2d918:	9227      	str	r2, [sp, #156]	; 0x9c
   2d91a:	9726      	str	r7, [sp, #152]	; 0x98
   2d91c:	e888 0820 	stmia.w	r8, {r5, fp}
   2d920:	ddf2      	ble.n	2d908 <_svfprintf_r+0xc3c>
   2d922:	aa25      	add	r2, sp, #148	; 0x94
   2d924:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d926:	4620      	mov	r0, r4
   2d928:	f002 f9b4 	bl	2fc94 <__ssprint_r>
   2d92c:	2800      	cmp	r0, #0
   2d92e:	f47f aa9f 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d932:	3e10      	subs	r6, #16
   2d934:	2e10      	cmp	r6, #16
   2d936:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2d938:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2d93a:	46c8      	mov	r8, r9
   2d93c:	dce9      	bgt.n	2d912 <_svfprintf_r+0xc46>
   2d93e:	4614      	mov	r4, r2
   2d940:	3701      	adds	r7, #1
   2d942:	4434      	add	r4, r6
   2d944:	2f07      	cmp	r7, #7
   2d946:	9427      	str	r4, [sp, #156]	; 0x9c
   2d948:	9726      	str	r7, [sp, #152]	; 0x98
   2d94a:	e888 0060 	stmia.w	r8, {r5, r6}
   2d94e:	f77f aed9 	ble.w	2d704 <_svfprintf_r+0xa38>
   2d952:	aa25      	add	r2, sp, #148	; 0x94
   2d954:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d956:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d958:	f002 f99c 	bl	2fc94 <__ssprint_r>
   2d95c:	2800      	cmp	r0, #0
   2d95e:	f47f aa87 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d962:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d964:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2d966:	46c8      	mov	r8, r9
   2d968:	e6ce      	b.n	2d708 <_svfprintf_r+0xa3c>
   2d96a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d96c:	6814      	ldr	r4, [r2, #0]
   2d96e:	4613      	mov	r3, r2
   2d970:	3304      	adds	r3, #4
   2d972:	17e5      	asrs	r5, r4, #31
   2d974:	930f      	str	r3, [sp, #60]	; 0x3c
   2d976:	4622      	mov	r2, r4
   2d978:	462b      	mov	r3, r5
   2d97a:	e4fa      	b.n	2d372 <_svfprintf_r+0x6a6>
   2d97c:	3204      	adds	r2, #4
   2d97e:	681c      	ldr	r4, [r3, #0]
   2d980:	920f      	str	r2, [sp, #60]	; 0x3c
   2d982:	2301      	movs	r3, #1
   2d984:	2500      	movs	r5, #0
   2d986:	f7ff ba94 	b.w	2ceb2 <_svfprintf_r+0x1e6>
   2d98a:	681c      	ldr	r4, [r3, #0]
   2d98c:	3304      	adds	r3, #4
   2d98e:	930f      	str	r3, [sp, #60]	; 0x3c
   2d990:	2500      	movs	r5, #0
   2d992:	e421      	b.n	2d1d8 <_svfprintf_r+0x50c>
   2d994:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2d996:	460a      	mov	r2, r1
   2d998:	3204      	adds	r2, #4
   2d99a:	680c      	ldr	r4, [r1, #0]
   2d99c:	920f      	str	r2, [sp, #60]	; 0x3c
   2d99e:	2500      	movs	r5, #0
   2d9a0:	f7ff ba87 	b.w	2ceb2 <_svfprintf_r+0x1e6>
   2d9a4:	4614      	mov	r4, r2
   2d9a6:	3301      	adds	r3, #1
   2d9a8:	4434      	add	r4, r6
   2d9aa:	2b07      	cmp	r3, #7
   2d9ac:	9427      	str	r4, [sp, #156]	; 0x9c
   2d9ae:	9326      	str	r3, [sp, #152]	; 0x98
   2d9b0:	e888 0060 	stmia.w	r8, {r5, r6}
   2d9b4:	f77f ab68 	ble.w	2d088 <_svfprintf_r+0x3bc>
   2d9b8:	e6b3      	b.n	2d722 <_svfprintf_r+0xa56>
   2d9ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2d9be:	f8cd b01c 	str.w	fp, [sp, #28]
   2d9c2:	ae42      	add	r6, sp, #264	; 0x108
   2d9c4:	3430      	adds	r4, #48	; 0x30
   2d9c6:	2301      	movs	r3, #1
   2d9c8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2d9cc:	930e      	str	r3, [sp, #56]	; 0x38
   2d9ce:	f7ff ba8d 	b.w	2ceec <_svfprintf_r+0x220>
   2d9d2:	aa25      	add	r2, sp, #148	; 0x94
   2d9d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2d9d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d9d8:	f002 f95c 	bl	2fc94 <__ssprint_r>
   2d9dc:	2800      	cmp	r0, #0
   2d9de:	f47f aa47 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2d9e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2d9e4:	46c8      	mov	r8, r9
   2d9e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2d9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d9ea:	429a      	cmp	r2, r3
   2d9ec:	db44      	blt.n	2da78 <_svfprintf_r+0xdac>
   2d9ee:	9b07      	ldr	r3, [sp, #28]
   2d9f0:	07d9      	lsls	r1, r3, #31
   2d9f2:	d441      	bmi.n	2da78 <_svfprintf_r+0xdac>
   2d9f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2d9f6:	9812      	ldr	r0, [sp, #72]	; 0x48
   2d9f8:	1a9a      	subs	r2, r3, r2
   2d9fa:	1a1d      	subs	r5, r3, r0
   2d9fc:	4295      	cmp	r5, r2
   2d9fe:	bfa8      	it	ge
   2da00:	4615      	movge	r5, r2
   2da02:	2d00      	cmp	r5, #0
   2da04:	dd0e      	ble.n	2da24 <_svfprintf_r+0xd58>
   2da06:	9926      	ldr	r1, [sp, #152]	; 0x98
   2da08:	f8c8 5004 	str.w	r5, [r8, #4]
   2da0c:	3101      	adds	r1, #1
   2da0e:	4406      	add	r6, r0
   2da10:	442c      	add	r4, r5
   2da12:	2907      	cmp	r1, #7
   2da14:	f8c8 6000 	str.w	r6, [r8]
   2da18:	9427      	str	r4, [sp, #156]	; 0x9c
   2da1a:	9126      	str	r1, [sp, #152]	; 0x98
   2da1c:	f300 823b 	bgt.w	2de96 <_svfprintf_r+0x11ca>
   2da20:	f108 0808 	add.w	r8, r8, #8
   2da24:	2d00      	cmp	r5, #0
   2da26:	bfac      	ite	ge
   2da28:	1b56      	subge	r6, r2, r5
   2da2a:	4616      	movlt	r6, r2
   2da2c:	2e00      	cmp	r6, #0
   2da2e:	f77f ab2d 	ble.w	2d08c <_svfprintf_r+0x3c0>
   2da32:	2e10      	cmp	r6, #16
   2da34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2da36:	4db0      	ldr	r5, [pc, #704]	; (2dcf8 <_svfprintf_r+0x102c>)
   2da38:	ddb5      	ble.n	2d9a6 <_svfprintf_r+0xcda>
   2da3a:	4622      	mov	r2, r4
   2da3c:	2710      	movs	r7, #16
   2da3e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2da42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2da44:	e004      	b.n	2da50 <_svfprintf_r+0xd84>
   2da46:	f108 0808 	add.w	r8, r8, #8
   2da4a:	3e10      	subs	r6, #16
   2da4c:	2e10      	cmp	r6, #16
   2da4e:	dda9      	ble.n	2d9a4 <_svfprintf_r+0xcd8>
   2da50:	3301      	adds	r3, #1
   2da52:	3210      	adds	r2, #16
   2da54:	2b07      	cmp	r3, #7
   2da56:	9227      	str	r2, [sp, #156]	; 0x9c
   2da58:	9326      	str	r3, [sp, #152]	; 0x98
   2da5a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2da5e:	ddf2      	ble.n	2da46 <_svfprintf_r+0xd7a>
   2da60:	aa25      	add	r2, sp, #148	; 0x94
   2da62:	4621      	mov	r1, r4
   2da64:	4658      	mov	r0, fp
   2da66:	f002 f915 	bl	2fc94 <__ssprint_r>
   2da6a:	2800      	cmp	r0, #0
   2da6c:	f47f aa00 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2da70:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2da72:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2da74:	46c8      	mov	r8, r9
   2da76:	e7e8      	b.n	2da4a <_svfprintf_r+0xd7e>
   2da78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2da7a:	9819      	ldr	r0, [sp, #100]	; 0x64
   2da7c:	991a      	ldr	r1, [sp, #104]	; 0x68
   2da7e:	f8c8 1000 	str.w	r1, [r8]
   2da82:	3301      	adds	r3, #1
   2da84:	4404      	add	r4, r0
   2da86:	2b07      	cmp	r3, #7
   2da88:	9427      	str	r4, [sp, #156]	; 0x9c
   2da8a:	f8c8 0004 	str.w	r0, [r8, #4]
   2da8e:	9326      	str	r3, [sp, #152]	; 0x98
   2da90:	f300 81f5 	bgt.w	2de7e <_svfprintf_r+0x11b2>
   2da94:	f108 0808 	add.w	r8, r8, #8
   2da98:	e7ac      	b.n	2d9f4 <_svfprintf_r+0xd28>
   2da9a:	9b07      	ldr	r3, [sp, #28]
   2da9c:	07da      	lsls	r2, r3, #31
   2da9e:	f53f adfe 	bmi.w	2d69e <_svfprintf_r+0x9d2>
   2daa2:	3701      	adds	r7, #1
   2daa4:	3401      	adds	r4, #1
   2daa6:	2301      	movs	r3, #1
   2daa8:	2f07      	cmp	r7, #7
   2daaa:	9427      	str	r4, [sp, #156]	; 0x9c
   2daac:	9726      	str	r7, [sp, #152]	; 0x98
   2daae:	f8c8 6000 	str.w	r6, [r8]
   2dab2:	f8c8 3004 	str.w	r3, [r8, #4]
   2dab6:	f77f ae25 	ble.w	2d704 <_svfprintf_r+0xa38>
   2daba:	e74a      	b.n	2d952 <_svfprintf_r+0xc86>
   2dabc:	aa25      	add	r2, sp, #148	; 0x94
   2dabe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dac0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dac2:	f002 f8e7 	bl	2fc94 <__ssprint_r>
   2dac6:	2800      	cmp	r0, #0
   2dac8:	f47f a9d2 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dacc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2dace:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2dad0:	46c8      	mov	r8, r9
   2dad2:	e5f2      	b.n	2d6ba <_svfprintf_r+0x9ee>
   2dad4:	aa25      	add	r2, sp, #148	; 0x94
   2dad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dad8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dada:	f002 f8db 	bl	2fc94 <__ssprint_r>
   2dade:	2800      	cmp	r0, #0
   2dae0:	f47f a9c6 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dae4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2dae6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2dae8:	46c8      	mov	r8, r9
   2daea:	e5f5      	b.n	2d6d8 <_svfprintf_r+0xa0c>
   2daec:	464e      	mov	r6, r9
   2daee:	f7ff b9fd 	b.w	2ceec <_svfprintf_r+0x220>
   2daf2:	aa25      	add	r2, sp, #148	; 0x94
   2daf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2daf6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2daf8:	f002 f8cc 	bl	2fc94 <__ssprint_r>
   2dafc:	2800      	cmp	r0, #0
   2dafe:	f47f a9b7 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2db02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2db04:	46c8      	mov	r8, r9
   2db06:	f7ff ba72 	b.w	2cfee <_svfprintf_r+0x322>
   2db0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2db0c:	4622      	mov	r2, r4
   2db0e:	4620      	mov	r0, r4
   2db10:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2db12:	4623      	mov	r3, r4
   2db14:	4621      	mov	r1, r4
   2db16:	f7d3 fab3 	bl	1080 <__aeabi_dcmpun>
   2db1a:	2800      	cmp	r0, #0
   2db1c:	f040 8286 	bne.w	2e02c <_svfprintf_r+0x1360>
   2db20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db22:	3301      	adds	r3, #1
   2db24:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2db26:	f023 0320 	bic.w	r3, r3, #32
   2db2a:	930e      	str	r3, [sp, #56]	; 0x38
   2db2c:	f000 81e2 	beq.w	2def4 <_svfprintf_r+0x1228>
   2db30:	2b47      	cmp	r3, #71	; 0x47
   2db32:	f000 811e 	beq.w	2dd72 <_svfprintf_r+0x10a6>
   2db36:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2db3a:	9307      	str	r3, [sp, #28]
   2db3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2db3e:	1e1f      	subs	r7, r3, #0
   2db40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2db42:	9308      	str	r3, [sp, #32]
   2db44:	bfbb      	ittet	lt
   2db46:	463b      	movlt	r3, r7
   2db48:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2db4c:	2300      	movge	r3, #0
   2db4e:	232d      	movlt	r3, #45	; 0x2d
   2db50:	9310      	str	r3, [sp, #64]	; 0x40
   2db52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2db54:	2b66      	cmp	r3, #102	; 0x66
   2db56:	f000 81bb 	beq.w	2ded0 <_svfprintf_r+0x1204>
   2db5a:	2b46      	cmp	r3, #70	; 0x46
   2db5c:	f000 80df 	beq.w	2dd1e <_svfprintf_r+0x1052>
   2db60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2db62:	9a08      	ldr	r2, [sp, #32]
   2db64:	2b45      	cmp	r3, #69	; 0x45
   2db66:	bf0c      	ite	eq
   2db68:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2db6a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2db6c:	a823      	add	r0, sp, #140	; 0x8c
   2db6e:	a920      	add	r1, sp, #128	; 0x80
   2db70:	bf08      	it	eq
   2db72:	1c5d      	addeq	r5, r3, #1
   2db74:	9004      	str	r0, [sp, #16]
   2db76:	9103      	str	r1, [sp, #12]
   2db78:	a81f      	add	r0, sp, #124	; 0x7c
   2db7a:	2102      	movs	r1, #2
   2db7c:	463b      	mov	r3, r7
   2db7e:	9002      	str	r0, [sp, #8]
   2db80:	9501      	str	r5, [sp, #4]
   2db82:	9100      	str	r1, [sp, #0]
   2db84:	980c      	ldr	r0, [sp, #48]	; 0x30
   2db86:	f000 fb73 	bl	2e270 <_dtoa_r>
   2db8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2db8c:	2b67      	cmp	r3, #103	; 0x67
   2db8e:	4606      	mov	r6, r0
   2db90:	f040 81e0 	bne.w	2df54 <_svfprintf_r+0x1288>
   2db94:	f01b 0f01 	tst.w	fp, #1
   2db98:	f000 8246 	beq.w	2e028 <_svfprintf_r+0x135c>
   2db9c:	1974      	adds	r4, r6, r5
   2db9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2dba0:	9808      	ldr	r0, [sp, #32]
   2dba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2dba4:	4639      	mov	r1, r7
   2dba6:	f7d3 fa39 	bl	101c <__aeabi_dcmpeq>
   2dbaa:	2800      	cmp	r0, #0
   2dbac:	f040 8165 	bne.w	2de7a <_svfprintf_r+0x11ae>
   2dbb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2dbb2:	42a3      	cmp	r3, r4
   2dbb4:	d206      	bcs.n	2dbc4 <_svfprintf_r+0xef8>
   2dbb6:	2130      	movs	r1, #48	; 0x30
   2dbb8:	1c5a      	adds	r2, r3, #1
   2dbba:	9223      	str	r2, [sp, #140]	; 0x8c
   2dbbc:	7019      	strb	r1, [r3, #0]
   2dbbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2dbc0:	429c      	cmp	r4, r3
   2dbc2:	d8f9      	bhi.n	2dbb8 <_svfprintf_r+0xeec>
   2dbc4:	1b9b      	subs	r3, r3, r6
   2dbc6:	9313      	str	r3, [sp, #76]	; 0x4c
   2dbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dbca:	2b47      	cmp	r3, #71	; 0x47
   2dbcc:	f000 80e9 	beq.w	2dda2 <_svfprintf_r+0x10d6>
   2dbd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dbd2:	2b65      	cmp	r3, #101	; 0x65
   2dbd4:	f340 81cd 	ble.w	2df72 <_svfprintf_r+0x12a6>
   2dbd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dbda:	2b66      	cmp	r3, #102	; 0x66
   2dbdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2dbde:	9312      	str	r3, [sp, #72]	; 0x48
   2dbe0:	f000 819e 	beq.w	2df20 <_svfprintf_r+0x1254>
   2dbe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2dbe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2dbe8:	4619      	mov	r1, r3
   2dbea:	4291      	cmp	r1, r2
   2dbec:	f300 818a 	bgt.w	2df04 <_svfprintf_r+0x1238>
   2dbf0:	f01b 0f01 	tst.w	fp, #1
   2dbf4:	f040 8213 	bne.w	2e01e <_svfprintf_r+0x1352>
   2dbf8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2dbfc:	9308      	str	r3, [sp, #32]
   2dbfe:	2367      	movs	r3, #103	; 0x67
   2dc00:	920e      	str	r2, [sp, #56]	; 0x38
   2dc02:	9311      	str	r3, [sp, #68]	; 0x44
   2dc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2dc06:	2b00      	cmp	r3, #0
   2dc08:	f040 80c4 	bne.w	2dd94 <_svfprintf_r+0x10c8>
   2dc0c:	930a      	str	r3, [sp, #40]	; 0x28
   2dc0e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2dc12:	f7ff b973 	b.w	2cefc <_svfprintf_r+0x230>
   2dc16:	4635      	mov	r5, r6
   2dc18:	460c      	mov	r4, r1
   2dc1a:	4646      	mov	r6, r8
   2dc1c:	4690      	mov	r8, r2
   2dc1e:	3301      	adds	r3, #1
   2dc20:	443c      	add	r4, r7
   2dc22:	2b07      	cmp	r3, #7
   2dc24:	9427      	str	r4, [sp, #156]	; 0x9c
   2dc26:	9326      	str	r3, [sp, #152]	; 0x98
   2dc28:	e888 00a0 	stmia.w	r8, {r5, r7}
   2dc2c:	f73f aed1 	bgt.w	2d9d2 <_svfprintf_r+0xd06>
   2dc30:	f108 0808 	add.w	r8, r8, #8
   2dc34:	e6d7      	b.n	2d9e6 <_svfprintf_r+0xd1a>
   2dc36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dc38:	6813      	ldr	r3, [r2, #0]
   2dc3a:	3204      	adds	r2, #4
   2dc3c:	920f      	str	r2, [sp, #60]	; 0x3c
   2dc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2dc40:	601a      	str	r2, [r3, #0]
   2dc42:	f7ff b86a 	b.w	2cd1a <_svfprintf_r+0x4e>
   2dc46:	aa25      	add	r2, sp, #148	; 0x94
   2dc48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dc4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dc4c:	f002 f822 	bl	2fc94 <__ssprint_r>
   2dc50:	2800      	cmp	r0, #0
   2dc52:	f47f a90d 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dc56:	46c8      	mov	r8, r9
   2dc58:	e48d      	b.n	2d576 <_svfprintf_r+0x8aa>
   2dc5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2dc5c:	4a27      	ldr	r2, [pc, #156]	; (2dcfc <_svfprintf_r+0x1030>)
   2dc5e:	f8c8 2000 	str.w	r2, [r8]
   2dc62:	3301      	adds	r3, #1
   2dc64:	3401      	adds	r4, #1
   2dc66:	2201      	movs	r2, #1
   2dc68:	2b07      	cmp	r3, #7
   2dc6a:	9427      	str	r4, [sp, #156]	; 0x9c
   2dc6c:	9326      	str	r3, [sp, #152]	; 0x98
   2dc6e:	f8c8 2004 	str.w	r2, [r8, #4]
   2dc72:	dc72      	bgt.n	2dd5a <_svfprintf_r+0x108e>
   2dc74:	f108 0808 	add.w	r8, r8, #8
   2dc78:	b929      	cbnz	r1, 2dc86 <_svfprintf_r+0xfba>
   2dc7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2dc7c:	b91b      	cbnz	r3, 2dc86 <_svfprintf_r+0xfba>
   2dc7e:	9b07      	ldr	r3, [sp, #28]
   2dc80:	07d8      	lsls	r0, r3, #31
   2dc82:	f57f aa03 	bpl.w	2d08c <_svfprintf_r+0x3c0>
   2dc86:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2dc88:	9819      	ldr	r0, [sp, #100]	; 0x64
   2dc8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2dc8c:	f8c8 2000 	str.w	r2, [r8]
   2dc90:	3301      	adds	r3, #1
   2dc92:	4602      	mov	r2, r0
   2dc94:	4422      	add	r2, r4
   2dc96:	2b07      	cmp	r3, #7
   2dc98:	9227      	str	r2, [sp, #156]	; 0x9c
   2dc9a:	f8c8 0004 	str.w	r0, [r8, #4]
   2dc9e:	9326      	str	r3, [sp, #152]	; 0x98
   2dca0:	f300 818d 	bgt.w	2dfbe <_svfprintf_r+0x12f2>
   2dca4:	f108 0808 	add.w	r8, r8, #8
   2dca8:	2900      	cmp	r1, #0
   2dcaa:	f2c0 8165 	blt.w	2df78 <_svfprintf_r+0x12ac>
   2dcae:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2dcb0:	f8c8 6000 	str.w	r6, [r8]
   2dcb4:	3301      	adds	r3, #1
   2dcb6:	188c      	adds	r4, r1, r2
   2dcb8:	2b07      	cmp	r3, #7
   2dcba:	9427      	str	r4, [sp, #156]	; 0x9c
   2dcbc:	9326      	str	r3, [sp, #152]	; 0x98
   2dcbe:	f8c8 1004 	str.w	r1, [r8, #4]
   2dcc2:	f77f a9e1 	ble.w	2d088 <_svfprintf_r+0x3bc>
   2dcc6:	e52c      	b.n	2d722 <_svfprintf_r+0xa56>
   2dcc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dcca:	9909      	ldr	r1, [sp, #36]	; 0x24
   2dccc:	6813      	ldr	r3, [r2, #0]
   2dcce:	17cd      	asrs	r5, r1, #31
   2dcd0:	4608      	mov	r0, r1
   2dcd2:	3204      	adds	r2, #4
   2dcd4:	4629      	mov	r1, r5
   2dcd6:	920f      	str	r2, [sp, #60]	; 0x3c
   2dcd8:	e9c3 0100 	strd	r0, r1, [r3]
   2dcdc:	f7ff b81d 	b.w	2cd1a <_svfprintf_r+0x4e>
   2dce0:	aa25      	add	r2, sp, #148	; 0x94
   2dce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dce4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dce6:	f001 ffd5 	bl	2fc94 <__ssprint_r>
   2dcea:	2800      	cmp	r0, #0
   2dcec:	f47f a8c0 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dcf0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2dcf2:	46c8      	mov	r8, r9
   2dcf4:	e458      	b.n	2d5a8 <_svfprintf_r+0x8dc>
   2dcf6:	bf00      	nop
   2dcf8:	00034ca4 	.word	0x00034ca4
   2dcfc:	000347cc 	.word	0x000347cc
   2dd00:	2140      	movs	r1, #64	; 0x40
   2dd02:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dd04:	f7fd fe60 	bl	2b9c8 <_malloc_r>
   2dd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2dd0a:	6010      	str	r0, [r2, #0]
   2dd0c:	6110      	str	r0, [r2, #16]
   2dd0e:	2800      	cmp	r0, #0
   2dd10:	f000 81f2 	beq.w	2e0f8 <_svfprintf_r+0x142c>
   2dd14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2dd16:	2340      	movs	r3, #64	; 0x40
   2dd18:	6153      	str	r3, [r2, #20]
   2dd1a:	f7fe bfee 	b.w	2ccfa <_svfprintf_r+0x2e>
   2dd1e:	a823      	add	r0, sp, #140	; 0x8c
   2dd20:	a920      	add	r1, sp, #128	; 0x80
   2dd22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2dd24:	9004      	str	r0, [sp, #16]
   2dd26:	9103      	str	r1, [sp, #12]
   2dd28:	a81f      	add	r0, sp, #124	; 0x7c
   2dd2a:	2103      	movs	r1, #3
   2dd2c:	9002      	str	r0, [sp, #8]
   2dd2e:	9a08      	ldr	r2, [sp, #32]
   2dd30:	9401      	str	r4, [sp, #4]
   2dd32:	463b      	mov	r3, r7
   2dd34:	9100      	str	r1, [sp, #0]
   2dd36:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dd38:	f000 fa9a 	bl	2e270 <_dtoa_r>
   2dd3c:	4625      	mov	r5, r4
   2dd3e:	4606      	mov	r6, r0
   2dd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dd42:	2b46      	cmp	r3, #70	; 0x46
   2dd44:	eb06 0405 	add.w	r4, r6, r5
   2dd48:	f47f af29 	bne.w	2db9e <_svfprintf_r+0xed2>
   2dd4c:	7833      	ldrb	r3, [r6, #0]
   2dd4e:	2b30      	cmp	r3, #48	; 0x30
   2dd50:	f000 8178 	beq.w	2e044 <_svfprintf_r+0x1378>
   2dd54:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2dd56:	442c      	add	r4, r5
   2dd58:	e721      	b.n	2db9e <_svfprintf_r+0xed2>
   2dd5a:	aa25      	add	r2, sp, #148	; 0x94
   2dd5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dd5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dd60:	f001 ff98 	bl	2fc94 <__ssprint_r>
   2dd64:	2800      	cmp	r0, #0
   2dd66:	f47f a883 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dd6a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2dd6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2dd6e:	46c8      	mov	r8, r9
   2dd70:	e782      	b.n	2dc78 <_svfprintf_r+0xfac>
   2dd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dd74:	2b00      	cmp	r3, #0
   2dd76:	bf08      	it	eq
   2dd78:	2301      	moveq	r3, #1
   2dd7a:	930a      	str	r3, [sp, #40]	; 0x28
   2dd7c:	e6db      	b.n	2db36 <_svfprintf_r+0xe6a>
   2dd7e:	4630      	mov	r0, r6
   2dd80:	940a      	str	r4, [sp, #40]	; 0x28
   2dd82:	f7d2 fcbd 	bl	700 <strlen>
   2dd86:	950f      	str	r5, [sp, #60]	; 0x3c
   2dd88:	900e      	str	r0, [sp, #56]	; 0x38
   2dd8a:	f8cd b01c 	str.w	fp, [sp, #28]
   2dd8e:	4603      	mov	r3, r0
   2dd90:	f7ff b9f9 	b.w	2d186 <_svfprintf_r+0x4ba>
   2dd94:	272d      	movs	r7, #45	; 0x2d
   2dd96:	2300      	movs	r3, #0
   2dd98:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2dd9c:	930a      	str	r3, [sp, #40]	; 0x28
   2dd9e:	f7ff b8ae 	b.w	2cefe <_svfprintf_r+0x232>
   2dda2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2dda4:	9312      	str	r3, [sp, #72]	; 0x48
   2dda6:	461a      	mov	r2, r3
   2dda8:	3303      	adds	r3, #3
   2ddaa:	db04      	blt.n	2ddb6 <_svfprintf_r+0x10ea>
   2ddac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ddae:	4619      	mov	r1, r3
   2ddb0:	4291      	cmp	r1, r2
   2ddb2:	f6bf af17 	bge.w	2dbe4 <_svfprintf_r+0xf18>
   2ddb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2ddb8:	3b02      	subs	r3, #2
   2ddba:	9311      	str	r3, [sp, #68]	; 0x44
   2ddbc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2ddc0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2ddc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ddc6:	3b01      	subs	r3, #1
   2ddc8:	2b00      	cmp	r3, #0
   2ddca:	931f      	str	r3, [sp, #124]	; 0x7c
   2ddcc:	bfbd      	ittte	lt
   2ddce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2ddd0:	f1c3 0301 	rsblt	r3, r3, #1
   2ddd4:	222d      	movlt	r2, #45	; 0x2d
   2ddd6:	222b      	movge	r2, #43	; 0x2b
   2ddd8:	2b09      	cmp	r3, #9
   2ddda:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2ddde:	f340 8116 	ble.w	2e00e <_svfprintf_r+0x1342>
   2dde2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2dde6:	4620      	mov	r0, r4
   2dde8:	4dab      	ldr	r5, [pc, #684]	; (2e098 <_svfprintf_r+0x13cc>)
   2ddea:	e000      	b.n	2ddee <_svfprintf_r+0x1122>
   2ddec:	4610      	mov	r0, r2
   2ddee:	fb85 1203 	smull	r1, r2, r5, r3
   2ddf2:	17d9      	asrs	r1, r3, #31
   2ddf4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2ddf8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2ddfc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2de00:	3230      	adds	r2, #48	; 0x30
   2de02:	2909      	cmp	r1, #9
   2de04:	f800 2c01 	strb.w	r2, [r0, #-1]
   2de08:	460b      	mov	r3, r1
   2de0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2de0e:	dced      	bgt.n	2ddec <_svfprintf_r+0x1120>
   2de10:	3330      	adds	r3, #48	; 0x30
   2de12:	3802      	subs	r0, #2
   2de14:	b2d9      	uxtb	r1, r3
   2de16:	4284      	cmp	r4, r0
   2de18:	f802 1c01 	strb.w	r1, [r2, #-1]
   2de1c:	f240 8165 	bls.w	2e0ea <_svfprintf_r+0x141e>
   2de20:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2de24:	4613      	mov	r3, r2
   2de26:	e001      	b.n	2de2c <_svfprintf_r+0x1160>
   2de28:	f813 1b01 	ldrb.w	r1, [r3], #1
   2de2c:	f800 1b01 	strb.w	r1, [r0], #1
   2de30:	42a3      	cmp	r3, r4
   2de32:	d1f9      	bne.n	2de28 <_svfprintf_r+0x115c>
   2de34:	3301      	adds	r3, #1
   2de36:	1a9b      	subs	r3, r3, r2
   2de38:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2de3c:	4413      	add	r3, r2
   2de3e:	aa21      	add	r2, sp, #132	; 0x84
   2de40:	1a9b      	subs	r3, r3, r2
   2de42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2de44:	931b      	str	r3, [sp, #108]	; 0x6c
   2de46:	2a01      	cmp	r2, #1
   2de48:	4413      	add	r3, r2
   2de4a:	930e      	str	r3, [sp, #56]	; 0x38
   2de4c:	f340 8119 	ble.w	2e082 <_svfprintf_r+0x13b6>
   2de50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2de52:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2de54:	4413      	add	r3, r2
   2de56:	930e      	str	r3, [sp, #56]	; 0x38
   2de58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2de5c:	9308      	str	r3, [sp, #32]
   2de5e:	2300      	movs	r3, #0
   2de60:	9312      	str	r3, [sp, #72]	; 0x48
   2de62:	e6cf      	b.n	2dc04 <_svfprintf_r+0xf38>
   2de64:	aa25      	add	r2, sp, #148	; 0x94
   2de66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2de68:	980c      	ldr	r0, [sp, #48]	; 0x30
   2de6a:	f001 ff13 	bl	2fc94 <__ssprint_r>
   2de6e:	2800      	cmp	r0, #0
   2de70:	f47e affe 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2de74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2de76:	46c8      	mov	r8, r9
   2de78:	e4d7      	b.n	2d82a <_svfprintf_r+0xb5e>
   2de7a:	4623      	mov	r3, r4
   2de7c:	e6a2      	b.n	2dbc4 <_svfprintf_r+0xef8>
   2de7e:	aa25      	add	r2, sp, #148	; 0x94
   2de80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2de82:	980c      	ldr	r0, [sp, #48]	; 0x30
   2de84:	f001 ff06 	bl	2fc94 <__ssprint_r>
   2de88:	2800      	cmp	r0, #0
   2de8a:	f47e aff1 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2de8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2de90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2de92:	46c8      	mov	r8, r9
   2de94:	e5ae      	b.n	2d9f4 <_svfprintf_r+0xd28>
   2de96:	aa25      	add	r2, sp, #148	; 0x94
   2de98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2de9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2de9c:	f001 fefa 	bl	2fc94 <__ssprint_r>
   2dea0:	2800      	cmp	r0, #0
   2dea2:	f47e afe5 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dea6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2dea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2deaa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2deac:	1a9a      	subs	r2, r3, r2
   2deae:	46c8      	mov	r8, r9
   2deb0:	e5b8      	b.n	2da24 <_svfprintf_r+0xd58>
   2deb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2deb4:	9612      	str	r6, [sp, #72]	; 0x48
   2deb6:	2b06      	cmp	r3, #6
   2deb8:	bf28      	it	cs
   2deba:	2306      	movcs	r3, #6
   2debc:	960a      	str	r6, [sp, #40]	; 0x28
   2debe:	4637      	mov	r7, r6
   2dec0:	9308      	str	r3, [sp, #32]
   2dec2:	950f      	str	r5, [sp, #60]	; 0x3c
   2dec4:	f8cd b01c 	str.w	fp, [sp, #28]
   2dec8:	930e      	str	r3, [sp, #56]	; 0x38
   2deca:	4e74      	ldr	r6, [pc, #464]	; (2e09c <_svfprintf_r+0x13d0>)
   2decc:	f7ff b816 	b.w	2cefc <_svfprintf_r+0x230>
   2ded0:	a823      	add	r0, sp, #140	; 0x8c
   2ded2:	a920      	add	r1, sp, #128	; 0x80
   2ded4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2ded6:	9004      	str	r0, [sp, #16]
   2ded8:	9103      	str	r1, [sp, #12]
   2deda:	a81f      	add	r0, sp, #124	; 0x7c
   2dedc:	2103      	movs	r1, #3
   2dede:	9002      	str	r0, [sp, #8]
   2dee0:	9a08      	ldr	r2, [sp, #32]
   2dee2:	9501      	str	r5, [sp, #4]
   2dee4:	463b      	mov	r3, r7
   2dee6:	9100      	str	r1, [sp, #0]
   2dee8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2deea:	f000 f9c1 	bl	2e270 <_dtoa_r>
   2deee:	4606      	mov	r6, r0
   2def0:	1944      	adds	r4, r0, r5
   2def2:	e72b      	b.n	2dd4c <_svfprintf_r+0x1080>
   2def4:	2306      	movs	r3, #6
   2def6:	930a      	str	r3, [sp, #40]	; 0x28
   2def8:	e61d      	b.n	2db36 <_svfprintf_r+0xe6a>
   2defa:	272d      	movs	r7, #45	; 0x2d
   2defc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2df00:	f7ff bacd 	b.w	2d49e <_svfprintf_r+0x7d2>
   2df04:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2df06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2df08:	4413      	add	r3, r2
   2df0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2df0c:	930e      	str	r3, [sp, #56]	; 0x38
   2df0e:	2a00      	cmp	r2, #0
   2df10:	f340 80b0 	ble.w	2e074 <_svfprintf_r+0x13a8>
   2df14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2df18:	9308      	str	r3, [sp, #32]
   2df1a:	2367      	movs	r3, #103	; 0x67
   2df1c:	9311      	str	r3, [sp, #68]	; 0x44
   2df1e:	e671      	b.n	2dc04 <_svfprintf_r+0xf38>
   2df20:	2b00      	cmp	r3, #0
   2df22:	f340 80c3 	ble.w	2e0ac <_svfprintf_r+0x13e0>
   2df26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2df28:	2a00      	cmp	r2, #0
   2df2a:	f040 8099 	bne.w	2e060 <_svfprintf_r+0x1394>
   2df2e:	f01b 0f01 	tst.w	fp, #1
   2df32:	f040 8095 	bne.w	2e060 <_svfprintf_r+0x1394>
   2df36:	9308      	str	r3, [sp, #32]
   2df38:	930e      	str	r3, [sp, #56]	; 0x38
   2df3a:	e663      	b.n	2dc04 <_svfprintf_r+0xf38>
   2df3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2df3e:	9308      	str	r3, [sp, #32]
   2df40:	930e      	str	r3, [sp, #56]	; 0x38
   2df42:	900a      	str	r0, [sp, #40]	; 0x28
   2df44:	950f      	str	r5, [sp, #60]	; 0x3c
   2df46:	f8cd b01c 	str.w	fp, [sp, #28]
   2df4a:	9012      	str	r0, [sp, #72]	; 0x48
   2df4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2df50:	f7fe bfd4 	b.w	2cefc <_svfprintf_r+0x230>
   2df54:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2df56:	2b47      	cmp	r3, #71	; 0x47
   2df58:	f47f ae20 	bne.w	2db9c <_svfprintf_r+0xed0>
   2df5c:	f01b 0f01 	tst.w	fp, #1
   2df60:	f47f aeee 	bne.w	2dd40 <_svfprintf_r+0x1074>
   2df64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2df66:	1b9b      	subs	r3, r3, r6
   2df68:	9313      	str	r3, [sp, #76]	; 0x4c
   2df6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2df6c:	2b47      	cmp	r3, #71	; 0x47
   2df6e:	f43f af18 	beq.w	2dda2 <_svfprintf_r+0x10d6>
   2df72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2df74:	9312      	str	r3, [sp, #72]	; 0x48
   2df76:	e721      	b.n	2ddbc <_svfprintf_r+0x10f0>
   2df78:	424f      	negs	r7, r1
   2df7a:	3110      	adds	r1, #16
   2df7c:	4d48      	ldr	r5, [pc, #288]	; (2e0a0 <_svfprintf_r+0x13d4>)
   2df7e:	da2f      	bge.n	2dfe0 <_svfprintf_r+0x1314>
   2df80:	2410      	movs	r4, #16
   2df82:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2df86:	e004      	b.n	2df92 <_svfprintf_r+0x12c6>
   2df88:	f108 0808 	add.w	r8, r8, #8
   2df8c:	3f10      	subs	r7, #16
   2df8e:	2f10      	cmp	r7, #16
   2df90:	dd26      	ble.n	2dfe0 <_svfprintf_r+0x1314>
   2df92:	3301      	adds	r3, #1
   2df94:	3210      	adds	r2, #16
   2df96:	2b07      	cmp	r3, #7
   2df98:	9227      	str	r2, [sp, #156]	; 0x9c
   2df9a:	9326      	str	r3, [sp, #152]	; 0x98
   2df9c:	f8c8 5000 	str.w	r5, [r8]
   2dfa0:	f8c8 4004 	str.w	r4, [r8, #4]
   2dfa4:	ddf0      	ble.n	2df88 <_svfprintf_r+0x12bc>
   2dfa6:	aa25      	add	r2, sp, #148	; 0x94
   2dfa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dfaa:	4658      	mov	r0, fp
   2dfac:	f001 fe72 	bl	2fc94 <__ssprint_r>
   2dfb0:	2800      	cmp	r0, #0
   2dfb2:	f47e af5d 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dfb6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2dfb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2dfba:	46c8      	mov	r8, r9
   2dfbc:	e7e6      	b.n	2df8c <_svfprintf_r+0x12c0>
   2dfbe:	aa25      	add	r2, sp, #148	; 0x94
   2dfc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dfc2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dfc4:	f001 fe66 	bl	2fc94 <__ssprint_r>
   2dfc8:	2800      	cmp	r0, #0
   2dfca:	f47e af51 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2dfce:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2dfd0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2dfd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2dfd4:	46c8      	mov	r8, r9
   2dfd6:	e667      	b.n	2dca8 <_svfprintf_r+0xfdc>
   2dfd8:	2000      	movs	r0, #0
   2dfda:	900a      	str	r0, [sp, #40]	; 0x28
   2dfdc:	f7fe bed0 	b.w	2cd80 <_svfprintf_r+0xb4>
   2dfe0:	3301      	adds	r3, #1
   2dfe2:	443a      	add	r2, r7
   2dfe4:	2b07      	cmp	r3, #7
   2dfe6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2dfea:	9227      	str	r2, [sp, #156]	; 0x9c
   2dfec:	9326      	str	r3, [sp, #152]	; 0x98
   2dfee:	f108 0808 	add.w	r8, r8, #8
   2dff2:	f77f ae5c 	ble.w	2dcae <_svfprintf_r+0xfe2>
   2dff6:	aa25      	add	r2, sp, #148	; 0x94
   2dff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2dffa:	980c      	ldr	r0, [sp, #48]	; 0x30
   2dffc:	f001 fe4a 	bl	2fc94 <__ssprint_r>
   2e000:	2800      	cmp	r0, #0
   2e002:	f47e af35 	bne.w	2ce70 <_svfprintf_r+0x1a4>
   2e006:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2e008:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e00a:	46c8      	mov	r8, r9
   2e00c:	e64f      	b.n	2dcae <_svfprintf_r+0xfe2>
   2e00e:	3330      	adds	r3, #48	; 0x30
   2e010:	2230      	movs	r2, #48	; 0x30
   2e012:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2e016:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2e01a:	ab22      	add	r3, sp, #136	; 0x88
   2e01c:	e70f      	b.n	2de3e <_svfprintf_r+0x1172>
   2e01e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2e020:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2e022:	4413      	add	r3, r2
   2e024:	930e      	str	r3, [sp, #56]	; 0x38
   2e026:	e775      	b.n	2df14 <_svfprintf_r+0x1248>
   2e028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2e02a:	e5cb      	b.n	2dbc4 <_svfprintf_r+0xef8>
   2e02c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2e02e:	4e1d      	ldr	r6, [pc, #116]	; (2e0a4 <_svfprintf_r+0x13d8>)
   2e030:	2b00      	cmp	r3, #0
   2e032:	bfb6      	itet	lt
   2e034:	272d      	movlt	r7, #45	; 0x2d
   2e036:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2e03a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2e03e:	4b1a      	ldr	r3, [pc, #104]	; (2e0a8 <_svfprintf_r+0x13dc>)
   2e040:	f7ff ba2f 	b.w	2d4a2 <_svfprintf_r+0x7d6>
   2e044:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2e046:	9808      	ldr	r0, [sp, #32]
   2e048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2e04a:	4639      	mov	r1, r7
   2e04c:	f7d2 ffe6 	bl	101c <__aeabi_dcmpeq>
   2e050:	2800      	cmp	r0, #0
   2e052:	f47f ae7f 	bne.w	2dd54 <_svfprintf_r+0x1088>
   2e056:	f1c5 0501 	rsb	r5, r5, #1
   2e05a:	951f      	str	r5, [sp, #124]	; 0x7c
   2e05c:	442c      	add	r4, r5
   2e05e:	e59e      	b.n	2db9e <_svfprintf_r+0xed2>
   2e060:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2e062:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2e064:	4413      	add	r3, r2
   2e066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e068:	441a      	add	r2, r3
   2e06a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2e06e:	920e      	str	r2, [sp, #56]	; 0x38
   2e070:	9308      	str	r3, [sp, #32]
   2e072:	e5c7      	b.n	2dc04 <_svfprintf_r+0xf38>
   2e074:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2e076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e078:	f1c3 0301 	rsb	r3, r3, #1
   2e07c:	441a      	add	r2, r3
   2e07e:	4613      	mov	r3, r2
   2e080:	e7d0      	b.n	2e024 <_svfprintf_r+0x1358>
   2e082:	f01b 0301 	ands.w	r3, fp, #1
   2e086:	9312      	str	r3, [sp, #72]	; 0x48
   2e088:	f47f aee2 	bne.w	2de50 <_svfprintf_r+0x1184>
   2e08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e08e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2e092:	9308      	str	r3, [sp, #32]
   2e094:	e5b6      	b.n	2dc04 <_svfprintf_r+0xf38>
   2e096:	bf00      	nop
   2e098:	66666667 	.word	0x66666667
   2e09c:	00034c8c 	.word	0x00034c8c
   2e0a0:	00034ca4 	.word	0x00034ca4
   2e0a4:	00034c60 	.word	0x00034c60
   2e0a8:	00034c5c 	.word	0x00034c5c
   2e0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e0ae:	b913      	cbnz	r3, 2e0b6 <_svfprintf_r+0x13ea>
   2e0b0:	f01b 0f01 	tst.w	fp, #1
   2e0b4:	d002      	beq.n	2e0bc <_svfprintf_r+0x13f0>
   2e0b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2e0b8:	3301      	adds	r3, #1
   2e0ba:	e7d4      	b.n	2e066 <_svfprintf_r+0x139a>
   2e0bc:	2301      	movs	r3, #1
   2e0be:	e73a      	b.n	2df36 <_svfprintf_r+0x126a>
   2e0c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2e0c2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2e0c6:	6828      	ldr	r0, [r5, #0]
   2e0c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2e0cc:	900a      	str	r0, [sp, #40]	; 0x28
   2e0ce:	4628      	mov	r0, r5
   2e0d0:	3004      	adds	r0, #4
   2e0d2:	46a2      	mov	sl, r4
   2e0d4:	900f      	str	r0, [sp, #60]	; 0x3c
   2e0d6:	f7fe be51 	b.w	2cd7c <_svfprintf_r+0xb0>
   2e0da:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e0de:	f7ff b867 	b.w	2d1b0 <_svfprintf_r+0x4e4>
   2e0e2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e0e6:	f7ff ba15 	b.w	2d514 <_svfprintf_r+0x848>
   2e0ea:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2e0ee:	e6a6      	b.n	2de3e <_svfprintf_r+0x1172>
   2e0f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e0f4:	f7ff b8eb 	b.w	2d2ce <_svfprintf_r+0x602>
   2e0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2e0fa:	230c      	movs	r3, #12
   2e0fc:	6013      	str	r3, [r2, #0]
   2e0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e102:	9309      	str	r3, [sp, #36]	; 0x24
   2e104:	f7fe bebd 	b.w	2ce82 <_svfprintf_r+0x1b6>
   2e108:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e10c:	f7ff b99a 	b.w	2d444 <_svfprintf_r+0x778>
   2e110:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e114:	f7ff b976 	b.w	2d404 <_svfprintf_r+0x738>
   2e118:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e11c:	f7ff b959 	b.w	2d3d2 <_svfprintf_r+0x706>
   2e120:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2e124:	f7ff b912 	b.w	2d34c <_svfprintf_r+0x680>

0002e128 <__ascii_wctomb>:
   2e128:	b121      	cbz	r1, 2e134 <__ascii_wctomb+0xc>
   2e12a:	2aff      	cmp	r2, #255	; 0xff
   2e12c:	d804      	bhi.n	2e138 <__ascii_wctomb+0x10>
   2e12e:	700a      	strb	r2, [r1, #0]
   2e130:	2001      	movs	r0, #1
   2e132:	4770      	bx	lr
   2e134:	4608      	mov	r0, r1
   2e136:	4770      	bx	lr
   2e138:	238a      	movs	r3, #138	; 0x8a
   2e13a:	6003      	str	r3, [r0, #0]
   2e13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e140:	4770      	bx	lr
   2e142:	bf00      	nop

0002e144 <quorem>:
   2e144:	6902      	ldr	r2, [r0, #16]
   2e146:	690b      	ldr	r3, [r1, #16]
   2e148:	4293      	cmp	r3, r2
   2e14a:	f300 808d 	bgt.w	2e268 <quorem+0x124>
   2e14e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e152:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2e156:	f101 0714 	add.w	r7, r1, #20
   2e15a:	f100 0b14 	add.w	fp, r0, #20
   2e15e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2e162:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2e166:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2e16a:	b083      	sub	sp, #12
   2e16c:	3201      	adds	r2, #1
   2e16e:	fbb3 f9f2 	udiv	r9, r3, r2
   2e172:	eb0b 0304 	add.w	r3, fp, r4
   2e176:	9400      	str	r4, [sp, #0]
   2e178:	eb07 0a04 	add.w	sl, r7, r4
   2e17c:	9301      	str	r3, [sp, #4]
   2e17e:	f1b9 0f00 	cmp.w	r9, #0
   2e182:	d039      	beq.n	2e1f8 <quorem+0xb4>
   2e184:	2500      	movs	r5, #0
   2e186:	462e      	mov	r6, r5
   2e188:	46bc      	mov	ip, r7
   2e18a:	46de      	mov	lr, fp
   2e18c:	f85c 4b04 	ldr.w	r4, [ip], #4
   2e190:	f8de 3000 	ldr.w	r3, [lr]
   2e194:	b2a2      	uxth	r2, r4
   2e196:	fb09 5502 	mla	r5, r9, r2, r5
   2e19a:	0c22      	lsrs	r2, r4, #16
   2e19c:	0c2c      	lsrs	r4, r5, #16
   2e19e:	fb09 4202 	mla	r2, r9, r2, r4
   2e1a2:	b2ad      	uxth	r5, r5
   2e1a4:	1b75      	subs	r5, r6, r5
   2e1a6:	b296      	uxth	r6, r2
   2e1a8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2e1ac:	fa15 f383 	uxtah	r3, r5, r3
   2e1b0:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2e1b4:	b29b      	uxth	r3, r3
   2e1b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2e1ba:	45e2      	cmp	sl, ip
   2e1bc:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2e1c0:	f84e 3b04 	str.w	r3, [lr], #4
   2e1c4:	ea4f 4626 	mov.w	r6, r6, asr #16
   2e1c8:	d2e0      	bcs.n	2e18c <quorem+0x48>
   2e1ca:	9b00      	ldr	r3, [sp, #0]
   2e1cc:	f85b 3003 	ldr.w	r3, [fp, r3]
   2e1d0:	b993      	cbnz	r3, 2e1f8 <quorem+0xb4>
   2e1d2:	9c01      	ldr	r4, [sp, #4]
   2e1d4:	1f23      	subs	r3, r4, #4
   2e1d6:	459b      	cmp	fp, r3
   2e1d8:	d20c      	bcs.n	2e1f4 <quorem+0xb0>
   2e1da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2e1de:	b94b      	cbnz	r3, 2e1f4 <quorem+0xb0>
   2e1e0:	f1a4 0308 	sub.w	r3, r4, #8
   2e1e4:	e002      	b.n	2e1ec <quorem+0xa8>
   2e1e6:	681a      	ldr	r2, [r3, #0]
   2e1e8:	3b04      	subs	r3, #4
   2e1ea:	b91a      	cbnz	r2, 2e1f4 <quorem+0xb0>
   2e1ec:	459b      	cmp	fp, r3
   2e1ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2e1f2:	d3f8      	bcc.n	2e1e6 <quorem+0xa2>
   2e1f4:	f8c0 8010 	str.w	r8, [r0, #16]
   2e1f8:	4604      	mov	r4, r0
   2e1fa:	f001 faa9 	bl	2f750 <__mcmp>
   2e1fe:	2800      	cmp	r0, #0
   2e200:	db2e      	blt.n	2e260 <quorem+0x11c>
   2e202:	f109 0901 	add.w	r9, r9, #1
   2e206:	465d      	mov	r5, fp
   2e208:	2300      	movs	r3, #0
   2e20a:	f857 1b04 	ldr.w	r1, [r7], #4
   2e20e:	6828      	ldr	r0, [r5, #0]
   2e210:	b28a      	uxth	r2, r1
   2e212:	1a9a      	subs	r2, r3, r2
   2e214:	0c0b      	lsrs	r3, r1, #16
   2e216:	fa12 f280 	uxtah	r2, r2, r0
   2e21a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2e21e:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e222:	b292      	uxth	r2, r2
   2e224:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e228:	45ba      	cmp	sl, r7
   2e22a:	f845 2b04 	str.w	r2, [r5], #4
   2e22e:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e232:	d2ea      	bcs.n	2e20a <quorem+0xc6>
   2e234:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2e238:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2e23c:	b982      	cbnz	r2, 2e260 <quorem+0x11c>
   2e23e:	1f1a      	subs	r2, r3, #4
   2e240:	4593      	cmp	fp, r2
   2e242:	d20b      	bcs.n	2e25c <quorem+0x118>
   2e244:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2e248:	b942      	cbnz	r2, 2e25c <quorem+0x118>
   2e24a:	3b08      	subs	r3, #8
   2e24c:	e002      	b.n	2e254 <quorem+0x110>
   2e24e:	681a      	ldr	r2, [r3, #0]
   2e250:	3b04      	subs	r3, #4
   2e252:	b91a      	cbnz	r2, 2e25c <quorem+0x118>
   2e254:	459b      	cmp	fp, r3
   2e256:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2e25a:	d3f8      	bcc.n	2e24e <quorem+0x10a>
   2e25c:	f8c4 8010 	str.w	r8, [r4, #16]
   2e260:	4648      	mov	r0, r9
   2e262:	b003      	add	sp, #12
   2e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e268:	2000      	movs	r0, #0
   2e26a:	4770      	bx	lr
   2e26c:	0000      	movs	r0, r0
	...

0002e270 <_dtoa_r>:
   2e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e274:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2e276:	b09b      	sub	sp, #108	; 0x6c
   2e278:	4604      	mov	r4, r0
   2e27a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2e27c:	4692      	mov	sl, r2
   2e27e:	469b      	mov	fp, r3
   2e280:	b141      	cbz	r1, 2e294 <_dtoa_r+0x24>
   2e282:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2e284:	604a      	str	r2, [r1, #4]
   2e286:	2301      	movs	r3, #1
   2e288:	4093      	lsls	r3, r2
   2e28a:	608b      	str	r3, [r1, #8]
   2e28c:	f001 f888 	bl	2f3a0 <_Bfree>
   2e290:	2300      	movs	r3, #0
   2e292:	6423      	str	r3, [r4, #64]	; 0x40
   2e294:	f1bb 0f00 	cmp.w	fp, #0
   2e298:	465d      	mov	r5, fp
   2e29a:	db35      	blt.n	2e308 <_dtoa_r+0x98>
   2e29c:	2300      	movs	r3, #0
   2e29e:	6033      	str	r3, [r6, #0]
   2e2a0:	4b9d      	ldr	r3, [pc, #628]	; (2e518 <_dtoa_r+0x2a8>)
   2e2a2:	43ab      	bics	r3, r5
   2e2a4:	d015      	beq.n	2e2d2 <_dtoa_r+0x62>
   2e2a6:	4650      	mov	r0, sl
   2e2a8:	4659      	mov	r1, fp
   2e2aa:	2200      	movs	r2, #0
   2e2ac:	2300      	movs	r3, #0
   2e2ae:	f7d2 feb5 	bl	101c <__aeabi_dcmpeq>
   2e2b2:	4680      	mov	r8, r0
   2e2b4:	2800      	cmp	r0, #0
   2e2b6:	d02d      	beq.n	2e314 <_dtoa_r+0xa4>
   2e2b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2e2ba:	2301      	movs	r3, #1
   2e2bc:	6013      	str	r3, [r2, #0]
   2e2be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2e2c0:	2b00      	cmp	r3, #0
   2e2c2:	f000 80bd 	beq.w	2e440 <_dtoa_r+0x1d0>
   2e2c6:	4895      	ldr	r0, [pc, #596]	; (2e51c <_dtoa_r+0x2ac>)
   2e2c8:	6018      	str	r0, [r3, #0]
   2e2ca:	3801      	subs	r0, #1
   2e2cc:	b01b      	add	sp, #108	; 0x6c
   2e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2e2d4:	f242 730f 	movw	r3, #9999	; 0x270f
   2e2d8:	6013      	str	r3, [r2, #0]
   2e2da:	f1ba 0f00 	cmp.w	sl, #0
   2e2de:	d10d      	bne.n	2e2fc <_dtoa_r+0x8c>
   2e2e0:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2e2e4:	b955      	cbnz	r5, 2e2fc <_dtoa_r+0x8c>
   2e2e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2e2e8:	488d      	ldr	r0, [pc, #564]	; (2e520 <_dtoa_r+0x2b0>)
   2e2ea:	2b00      	cmp	r3, #0
   2e2ec:	d0ee      	beq.n	2e2cc <_dtoa_r+0x5c>
   2e2ee:	f100 0308 	add.w	r3, r0, #8
   2e2f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2e2f4:	6013      	str	r3, [r2, #0]
   2e2f6:	b01b      	add	sp, #108	; 0x6c
   2e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2e2fe:	4889      	ldr	r0, [pc, #548]	; (2e524 <_dtoa_r+0x2b4>)
   2e300:	2b00      	cmp	r3, #0
   2e302:	d0e3      	beq.n	2e2cc <_dtoa_r+0x5c>
   2e304:	1cc3      	adds	r3, r0, #3
   2e306:	e7f4      	b.n	2e2f2 <_dtoa_r+0x82>
   2e308:	2301      	movs	r3, #1
   2e30a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2e30e:	6033      	str	r3, [r6, #0]
   2e310:	46ab      	mov	fp, r5
   2e312:	e7c5      	b.n	2e2a0 <_dtoa_r+0x30>
   2e314:	aa18      	add	r2, sp, #96	; 0x60
   2e316:	ab19      	add	r3, sp, #100	; 0x64
   2e318:	9201      	str	r2, [sp, #4]
   2e31a:	9300      	str	r3, [sp, #0]
   2e31c:	4652      	mov	r2, sl
   2e31e:	465b      	mov	r3, fp
   2e320:	4620      	mov	r0, r4
   2e322:	f001 fab5 	bl	2f890 <__d2b>
   2e326:	0d2b      	lsrs	r3, r5, #20
   2e328:	4681      	mov	r9, r0
   2e32a:	d071      	beq.n	2e410 <_dtoa_r+0x1a0>
   2e32c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2e330:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2e334:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2e336:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2e33a:	4650      	mov	r0, sl
   2e33c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2e340:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2e344:	2200      	movs	r2, #0
   2e346:	4b78      	ldr	r3, [pc, #480]	; (2e528 <_dtoa_r+0x2b8>)
   2e348:	f7d2 fa4c 	bl	7e4 <__aeabi_dsub>
   2e34c:	a36c      	add	r3, pc, #432	; (adr r3, 2e500 <_dtoa_r+0x290>)
   2e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e352:	f7d2 fbfb 	bl	b4c <__aeabi_dmul>
   2e356:	a36c      	add	r3, pc, #432	; (adr r3, 2e508 <_dtoa_r+0x298>)
   2e358:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e35c:	f7d2 fa44 	bl	7e8 <__adddf3>
   2e360:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2e364:	4630      	mov	r0, r6
   2e366:	f7d2 fb8b 	bl	a80 <__aeabi_i2d>
   2e36a:	a369      	add	r3, pc, #420	; (adr r3, 2e510 <_dtoa_r+0x2a0>)
   2e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e370:	f7d2 fbec 	bl	b4c <__aeabi_dmul>
   2e374:	4602      	mov	r2, r0
   2e376:	460b      	mov	r3, r1
   2e378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2e37c:	f7d2 fa34 	bl	7e8 <__adddf3>
   2e380:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2e384:	f7d2 fe92 	bl	10ac <__aeabi_d2iz>
   2e388:	2200      	movs	r2, #0
   2e38a:	9002      	str	r0, [sp, #8]
   2e38c:	2300      	movs	r3, #0
   2e38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2e392:	f7d2 fe4d 	bl	1030 <__aeabi_dcmplt>
   2e396:	2800      	cmp	r0, #0
   2e398:	f040 8173 	bne.w	2e682 <_dtoa_r+0x412>
   2e39c:	9d02      	ldr	r5, [sp, #8]
   2e39e:	2d16      	cmp	r5, #22
   2e3a0:	f200 815d 	bhi.w	2e65e <_dtoa_r+0x3ee>
   2e3a4:	4b61      	ldr	r3, [pc, #388]	; (2e52c <_dtoa_r+0x2bc>)
   2e3a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2e3aa:	e9d3 0100 	ldrd	r0, r1, [r3]
   2e3ae:	4652      	mov	r2, sl
   2e3b0:	465b      	mov	r3, fp
   2e3b2:	f7d2 fe5b 	bl	106c <__aeabi_dcmpgt>
   2e3b6:	2800      	cmp	r0, #0
   2e3b8:	f000 81c5 	beq.w	2e746 <_dtoa_r+0x4d6>
   2e3bc:	1e6b      	subs	r3, r5, #1
   2e3be:	9302      	str	r3, [sp, #8]
   2e3c0:	2300      	movs	r3, #0
   2e3c2:	930e      	str	r3, [sp, #56]	; 0x38
   2e3c4:	1bbf      	subs	r7, r7, r6
   2e3c6:	1e7b      	subs	r3, r7, #1
   2e3c8:	9306      	str	r3, [sp, #24]
   2e3ca:	f100 8154 	bmi.w	2e676 <_dtoa_r+0x406>
   2e3ce:	2300      	movs	r3, #0
   2e3d0:	9308      	str	r3, [sp, #32]
   2e3d2:	9b02      	ldr	r3, [sp, #8]
   2e3d4:	2b00      	cmp	r3, #0
   2e3d6:	f2c0 8145 	blt.w	2e664 <_dtoa_r+0x3f4>
   2e3da:	9a06      	ldr	r2, [sp, #24]
   2e3dc:	930d      	str	r3, [sp, #52]	; 0x34
   2e3de:	4611      	mov	r1, r2
   2e3e0:	4419      	add	r1, r3
   2e3e2:	2300      	movs	r3, #0
   2e3e4:	9106      	str	r1, [sp, #24]
   2e3e6:	930c      	str	r3, [sp, #48]	; 0x30
   2e3e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e3ea:	2b09      	cmp	r3, #9
   2e3ec:	d82a      	bhi.n	2e444 <_dtoa_r+0x1d4>
   2e3ee:	2b05      	cmp	r3, #5
   2e3f0:	f340 865b 	ble.w	2f0aa <_dtoa_r+0xe3a>
   2e3f4:	3b04      	subs	r3, #4
   2e3f6:	9324      	str	r3, [sp, #144]	; 0x90
   2e3f8:	2500      	movs	r5, #0
   2e3fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e3fc:	3b02      	subs	r3, #2
   2e3fe:	2b03      	cmp	r3, #3
   2e400:	f200 8642 	bhi.w	2f088 <_dtoa_r+0xe18>
   2e404:	e8df f013 	tbh	[pc, r3, lsl #1]
   2e408:	02c903d4 	.word	0x02c903d4
   2e40c:	046103df 	.word	0x046103df
   2e410:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2e412:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2e414:	443e      	add	r6, r7
   2e416:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2e41a:	2b20      	cmp	r3, #32
   2e41c:	f340 818e 	ble.w	2e73c <_dtoa_r+0x4cc>
   2e420:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2e424:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2e428:	409d      	lsls	r5, r3
   2e42a:	fa2a f000 	lsr.w	r0, sl, r0
   2e42e:	4328      	orrs	r0, r5
   2e430:	f7d2 fb16 	bl	a60 <__aeabi_ui2d>
   2e434:	2301      	movs	r3, #1
   2e436:	3e01      	subs	r6, #1
   2e438:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2e43c:	9314      	str	r3, [sp, #80]	; 0x50
   2e43e:	e781      	b.n	2e344 <_dtoa_r+0xd4>
   2e440:	483b      	ldr	r0, [pc, #236]	; (2e530 <_dtoa_r+0x2c0>)
   2e442:	e743      	b.n	2e2cc <_dtoa_r+0x5c>
   2e444:	2100      	movs	r1, #0
   2e446:	6461      	str	r1, [r4, #68]	; 0x44
   2e448:	4620      	mov	r0, r4
   2e44a:	9125      	str	r1, [sp, #148]	; 0x94
   2e44c:	f000 ff82 	bl	2f354 <_Balloc>
   2e450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e454:	930a      	str	r3, [sp, #40]	; 0x28
   2e456:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2e458:	930f      	str	r3, [sp, #60]	; 0x3c
   2e45a:	2301      	movs	r3, #1
   2e45c:	9004      	str	r0, [sp, #16]
   2e45e:	6420      	str	r0, [r4, #64]	; 0x40
   2e460:	9224      	str	r2, [sp, #144]	; 0x90
   2e462:	930b      	str	r3, [sp, #44]	; 0x2c
   2e464:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2e466:	2b00      	cmp	r3, #0
   2e468:	f2c0 80d9 	blt.w	2e61e <_dtoa_r+0x3ae>
   2e46c:	9a02      	ldr	r2, [sp, #8]
   2e46e:	2a0e      	cmp	r2, #14
   2e470:	f300 80d5 	bgt.w	2e61e <_dtoa_r+0x3ae>
   2e474:	4b2d      	ldr	r3, [pc, #180]	; (2e52c <_dtoa_r+0x2bc>)
   2e476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e47e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2e482:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2e484:	2b00      	cmp	r3, #0
   2e486:	f2c0 83ba 	blt.w	2ebfe <_dtoa_r+0x98e>
   2e48a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2e48e:	4650      	mov	r0, sl
   2e490:	462a      	mov	r2, r5
   2e492:	4633      	mov	r3, r6
   2e494:	4659      	mov	r1, fp
   2e496:	f7d2 fc83 	bl	da0 <__aeabi_ddiv>
   2e49a:	f7d2 fe07 	bl	10ac <__aeabi_d2iz>
   2e49e:	4680      	mov	r8, r0
   2e4a0:	f7d2 faee 	bl	a80 <__aeabi_i2d>
   2e4a4:	462a      	mov	r2, r5
   2e4a6:	4633      	mov	r3, r6
   2e4a8:	f7d2 fb50 	bl	b4c <__aeabi_dmul>
   2e4ac:	460b      	mov	r3, r1
   2e4ae:	4602      	mov	r2, r0
   2e4b0:	4659      	mov	r1, fp
   2e4b2:	4650      	mov	r0, sl
   2e4b4:	f7d2 f996 	bl	7e4 <__aeabi_dsub>
   2e4b8:	9d04      	ldr	r5, [sp, #16]
   2e4ba:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2e4be:	702b      	strb	r3, [r5, #0]
   2e4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e4c2:	2b01      	cmp	r3, #1
   2e4c4:	4606      	mov	r6, r0
   2e4c6:	460f      	mov	r7, r1
   2e4c8:	f105 0501 	add.w	r5, r5, #1
   2e4cc:	d068      	beq.n	2e5a0 <_dtoa_r+0x330>
   2e4ce:	2200      	movs	r2, #0
   2e4d0:	4b18      	ldr	r3, [pc, #96]	; (2e534 <_dtoa_r+0x2c4>)
   2e4d2:	f7d2 fb3b 	bl	b4c <__aeabi_dmul>
   2e4d6:	2200      	movs	r2, #0
   2e4d8:	2300      	movs	r3, #0
   2e4da:	4606      	mov	r6, r0
   2e4dc:	460f      	mov	r7, r1
   2e4de:	f7d2 fd9d 	bl	101c <__aeabi_dcmpeq>
   2e4e2:	2800      	cmp	r0, #0
   2e4e4:	f040 8088 	bne.w	2e5f8 <_dtoa_r+0x388>
   2e4e8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2e4ec:	f04f 0a00 	mov.w	sl, #0
   2e4f0:	f8df b040 	ldr.w	fp, [pc, #64]	; 2e534 <_dtoa_r+0x2c4>
   2e4f4:	940c      	str	r4, [sp, #48]	; 0x30
   2e4f6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2e4fa:	e028      	b.n	2e54e <_dtoa_r+0x2de>
   2e4fc:	f3af 8000 	nop.w
   2e500:	636f4361 	.word	0x636f4361
   2e504:	3fd287a7 	.word	0x3fd287a7
   2e508:	8b60c8b3 	.word	0x8b60c8b3
   2e50c:	3fc68a28 	.word	0x3fc68a28
   2e510:	509f79fb 	.word	0x509f79fb
   2e514:	3fd34413 	.word	0x3fd34413
   2e518:	7ff00000 	.word	0x7ff00000
   2e51c:	000347cd 	.word	0x000347cd
   2e520:	00034db8 	.word	0x00034db8
   2e524:	00034dc4 	.word	0x00034dc4
   2e528:	3ff80000 	.word	0x3ff80000
   2e52c:	00034df0 	.word	0x00034df0
   2e530:	000347cc 	.word	0x000347cc
   2e534:	40240000 	.word	0x40240000
   2e538:	f7d2 fb08 	bl	b4c <__aeabi_dmul>
   2e53c:	2200      	movs	r2, #0
   2e53e:	2300      	movs	r3, #0
   2e540:	4606      	mov	r6, r0
   2e542:	460f      	mov	r7, r1
   2e544:	f7d2 fd6a 	bl	101c <__aeabi_dcmpeq>
   2e548:	2800      	cmp	r0, #0
   2e54a:	f040 83c1 	bne.w	2ecd0 <_dtoa_r+0xa60>
   2e54e:	4642      	mov	r2, r8
   2e550:	464b      	mov	r3, r9
   2e552:	4630      	mov	r0, r6
   2e554:	4639      	mov	r1, r7
   2e556:	f7d2 fc23 	bl	da0 <__aeabi_ddiv>
   2e55a:	f7d2 fda7 	bl	10ac <__aeabi_d2iz>
   2e55e:	4604      	mov	r4, r0
   2e560:	f7d2 fa8e 	bl	a80 <__aeabi_i2d>
   2e564:	4642      	mov	r2, r8
   2e566:	464b      	mov	r3, r9
   2e568:	f7d2 faf0 	bl	b4c <__aeabi_dmul>
   2e56c:	4602      	mov	r2, r0
   2e56e:	460b      	mov	r3, r1
   2e570:	4630      	mov	r0, r6
   2e572:	4639      	mov	r1, r7
   2e574:	f7d2 f936 	bl	7e4 <__aeabi_dsub>
   2e578:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2e57c:	9e04      	ldr	r6, [sp, #16]
   2e57e:	f805 eb01 	strb.w	lr, [r5], #1
   2e582:	eba5 0e06 	sub.w	lr, r5, r6
   2e586:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2e588:	45b6      	cmp	lr, r6
   2e58a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2e58e:	4652      	mov	r2, sl
   2e590:	465b      	mov	r3, fp
   2e592:	d1d1      	bne.n	2e538 <_dtoa_r+0x2c8>
   2e594:	46a0      	mov	r8, r4
   2e596:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2e59a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2e59c:	4606      	mov	r6, r0
   2e59e:	460f      	mov	r7, r1
   2e5a0:	4632      	mov	r2, r6
   2e5a2:	463b      	mov	r3, r7
   2e5a4:	4630      	mov	r0, r6
   2e5a6:	4639      	mov	r1, r7
   2e5a8:	f7d2 f91e 	bl	7e8 <__adddf3>
   2e5ac:	4606      	mov	r6, r0
   2e5ae:	460f      	mov	r7, r1
   2e5b0:	4602      	mov	r2, r0
   2e5b2:	460b      	mov	r3, r1
   2e5b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2e5b8:	f7d2 fd3a 	bl	1030 <__aeabi_dcmplt>
   2e5bc:	b948      	cbnz	r0, 2e5d2 <_dtoa_r+0x362>
   2e5be:	4632      	mov	r2, r6
   2e5c0:	463b      	mov	r3, r7
   2e5c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2e5c6:	f7d2 fd29 	bl	101c <__aeabi_dcmpeq>
   2e5ca:	b1a8      	cbz	r0, 2e5f8 <_dtoa_r+0x388>
   2e5cc:	f018 0f01 	tst.w	r8, #1
   2e5d0:	d012      	beq.n	2e5f8 <_dtoa_r+0x388>
   2e5d2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2e5d6:	9a04      	ldr	r2, [sp, #16]
   2e5d8:	1e6b      	subs	r3, r5, #1
   2e5da:	e004      	b.n	2e5e6 <_dtoa_r+0x376>
   2e5dc:	429a      	cmp	r2, r3
   2e5de:	f000 8401 	beq.w	2ede4 <_dtoa_r+0xb74>
   2e5e2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2e5e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2e5ea:	f103 0501 	add.w	r5, r3, #1
   2e5ee:	d0f5      	beq.n	2e5dc <_dtoa_r+0x36c>
   2e5f0:	f108 0801 	add.w	r8, r8, #1
   2e5f4:	f883 8000 	strb.w	r8, [r3]
   2e5f8:	4649      	mov	r1, r9
   2e5fa:	4620      	mov	r0, r4
   2e5fc:	f000 fed0 	bl	2f3a0 <_Bfree>
   2e600:	2200      	movs	r2, #0
   2e602:	9b02      	ldr	r3, [sp, #8]
   2e604:	702a      	strb	r2, [r5, #0]
   2e606:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2e608:	3301      	adds	r3, #1
   2e60a:	6013      	str	r3, [r2, #0]
   2e60c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2e60e:	2b00      	cmp	r3, #0
   2e610:	f000 839e 	beq.w	2ed50 <_dtoa_r+0xae0>
   2e614:	9804      	ldr	r0, [sp, #16]
   2e616:	601d      	str	r5, [r3, #0]
   2e618:	b01b      	add	sp, #108	; 0x6c
   2e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e61e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2e620:	2a00      	cmp	r2, #0
   2e622:	d03e      	beq.n	2e6a2 <_dtoa_r+0x432>
   2e624:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2e626:	2a01      	cmp	r2, #1
   2e628:	f340 8311 	ble.w	2ec4e <_dtoa_r+0x9de>
   2e62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e62e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2e630:	1e5f      	subs	r7, r3, #1
   2e632:	42ba      	cmp	r2, r7
   2e634:	f2c0 838f 	blt.w	2ed56 <_dtoa_r+0xae6>
   2e638:	1bd7      	subs	r7, r2, r7
   2e63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e63c:	2b00      	cmp	r3, #0
   2e63e:	f2c0 848b 	blt.w	2ef58 <_dtoa_r+0xce8>
   2e642:	9d08      	ldr	r5, [sp, #32]
   2e644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e646:	9a08      	ldr	r2, [sp, #32]
   2e648:	441a      	add	r2, r3
   2e64a:	9208      	str	r2, [sp, #32]
   2e64c:	9a06      	ldr	r2, [sp, #24]
   2e64e:	2101      	movs	r1, #1
   2e650:	441a      	add	r2, r3
   2e652:	4620      	mov	r0, r4
   2e654:	9206      	str	r2, [sp, #24]
   2e656:	f000 ff3d 	bl	2f4d4 <__i2b>
   2e65a:	4606      	mov	r6, r0
   2e65c:	e024      	b.n	2e6a8 <_dtoa_r+0x438>
   2e65e:	2301      	movs	r3, #1
   2e660:	930e      	str	r3, [sp, #56]	; 0x38
   2e662:	e6af      	b.n	2e3c4 <_dtoa_r+0x154>
   2e664:	9a08      	ldr	r2, [sp, #32]
   2e666:	9b02      	ldr	r3, [sp, #8]
   2e668:	1ad2      	subs	r2, r2, r3
   2e66a:	425b      	negs	r3, r3
   2e66c:	930c      	str	r3, [sp, #48]	; 0x30
   2e66e:	2300      	movs	r3, #0
   2e670:	9208      	str	r2, [sp, #32]
   2e672:	930d      	str	r3, [sp, #52]	; 0x34
   2e674:	e6b8      	b.n	2e3e8 <_dtoa_r+0x178>
   2e676:	f1c7 0301 	rsb	r3, r7, #1
   2e67a:	9308      	str	r3, [sp, #32]
   2e67c:	2300      	movs	r3, #0
   2e67e:	9306      	str	r3, [sp, #24]
   2e680:	e6a7      	b.n	2e3d2 <_dtoa_r+0x162>
   2e682:	9d02      	ldr	r5, [sp, #8]
   2e684:	4628      	mov	r0, r5
   2e686:	f7d2 f9fb 	bl	a80 <__aeabi_i2d>
   2e68a:	4602      	mov	r2, r0
   2e68c:	460b      	mov	r3, r1
   2e68e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2e692:	f7d2 fcc3 	bl	101c <__aeabi_dcmpeq>
   2e696:	2800      	cmp	r0, #0
   2e698:	f47f ae80 	bne.w	2e39c <_dtoa_r+0x12c>
   2e69c:	1e6b      	subs	r3, r5, #1
   2e69e:	9302      	str	r3, [sp, #8]
   2e6a0:	e67c      	b.n	2e39c <_dtoa_r+0x12c>
   2e6a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2e6a4:	9d08      	ldr	r5, [sp, #32]
   2e6a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2e6a8:	2d00      	cmp	r5, #0
   2e6aa:	dd0c      	ble.n	2e6c6 <_dtoa_r+0x456>
   2e6ac:	9906      	ldr	r1, [sp, #24]
   2e6ae:	2900      	cmp	r1, #0
   2e6b0:	460b      	mov	r3, r1
   2e6b2:	dd08      	ble.n	2e6c6 <_dtoa_r+0x456>
   2e6b4:	42a9      	cmp	r1, r5
   2e6b6:	9a08      	ldr	r2, [sp, #32]
   2e6b8:	bfa8      	it	ge
   2e6ba:	462b      	movge	r3, r5
   2e6bc:	1ad2      	subs	r2, r2, r3
   2e6be:	1aed      	subs	r5, r5, r3
   2e6c0:	1acb      	subs	r3, r1, r3
   2e6c2:	9208      	str	r2, [sp, #32]
   2e6c4:	9306      	str	r3, [sp, #24]
   2e6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e6c8:	b1d3      	cbz	r3, 2e700 <_dtoa_r+0x490>
   2e6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e6cc:	2b00      	cmp	r3, #0
   2e6ce:	f000 82b7 	beq.w	2ec40 <_dtoa_r+0x9d0>
   2e6d2:	2f00      	cmp	r7, #0
   2e6d4:	dd10      	ble.n	2e6f8 <_dtoa_r+0x488>
   2e6d6:	4631      	mov	r1, r6
   2e6d8:	463a      	mov	r2, r7
   2e6da:	4620      	mov	r0, r4
   2e6dc:	f000 ff96 	bl	2f60c <__pow5mult>
   2e6e0:	464a      	mov	r2, r9
   2e6e2:	4601      	mov	r1, r0
   2e6e4:	4606      	mov	r6, r0
   2e6e6:	4620      	mov	r0, r4
   2e6e8:	f000 fefe 	bl	2f4e8 <__multiply>
   2e6ec:	4649      	mov	r1, r9
   2e6ee:	4680      	mov	r8, r0
   2e6f0:	4620      	mov	r0, r4
   2e6f2:	f000 fe55 	bl	2f3a0 <_Bfree>
   2e6f6:	46c1      	mov	r9, r8
   2e6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e6fa:	1bda      	subs	r2, r3, r7
   2e6fc:	f040 82a1 	bne.w	2ec42 <_dtoa_r+0x9d2>
   2e700:	2101      	movs	r1, #1
   2e702:	4620      	mov	r0, r4
   2e704:	f000 fee6 	bl	2f4d4 <__i2b>
   2e708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e70a:	2b00      	cmp	r3, #0
   2e70c:	4680      	mov	r8, r0
   2e70e:	dd1c      	ble.n	2e74a <_dtoa_r+0x4da>
   2e710:	4601      	mov	r1, r0
   2e712:	461a      	mov	r2, r3
   2e714:	4620      	mov	r0, r4
   2e716:	f000 ff79 	bl	2f60c <__pow5mult>
   2e71a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e71c:	2b01      	cmp	r3, #1
   2e71e:	4680      	mov	r8, r0
   2e720:	f340 8254 	ble.w	2ebcc <_dtoa_r+0x95c>
   2e724:	2300      	movs	r3, #0
   2e726:	930c      	str	r3, [sp, #48]	; 0x30
   2e728:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e72c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2e730:	6918      	ldr	r0, [r3, #16]
   2e732:	f000 fe7f 	bl	2f434 <__hi0bits>
   2e736:	f1c0 0020 	rsb	r0, r0, #32
   2e73a:	e010      	b.n	2e75e <_dtoa_r+0x4ee>
   2e73c:	f1c3 0520 	rsb	r5, r3, #32
   2e740:	fa0a f005 	lsl.w	r0, sl, r5
   2e744:	e674      	b.n	2e430 <_dtoa_r+0x1c0>
   2e746:	900e      	str	r0, [sp, #56]	; 0x38
   2e748:	e63c      	b.n	2e3c4 <_dtoa_r+0x154>
   2e74a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e74c:	2b01      	cmp	r3, #1
   2e74e:	f340 8287 	ble.w	2ec60 <_dtoa_r+0x9f0>
   2e752:	2300      	movs	r3, #0
   2e754:	930c      	str	r3, [sp, #48]	; 0x30
   2e756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e758:	2001      	movs	r0, #1
   2e75a:	2b00      	cmp	r3, #0
   2e75c:	d1e4      	bne.n	2e728 <_dtoa_r+0x4b8>
   2e75e:	9a06      	ldr	r2, [sp, #24]
   2e760:	4410      	add	r0, r2
   2e762:	f010 001f 	ands.w	r0, r0, #31
   2e766:	f000 80a1 	beq.w	2e8ac <_dtoa_r+0x63c>
   2e76a:	f1c0 0320 	rsb	r3, r0, #32
   2e76e:	2b04      	cmp	r3, #4
   2e770:	f340 849e 	ble.w	2f0b0 <_dtoa_r+0xe40>
   2e774:	9b08      	ldr	r3, [sp, #32]
   2e776:	f1c0 001c 	rsb	r0, r0, #28
   2e77a:	4403      	add	r3, r0
   2e77c:	9308      	str	r3, [sp, #32]
   2e77e:	4613      	mov	r3, r2
   2e780:	4403      	add	r3, r0
   2e782:	4405      	add	r5, r0
   2e784:	9306      	str	r3, [sp, #24]
   2e786:	9b08      	ldr	r3, [sp, #32]
   2e788:	2b00      	cmp	r3, #0
   2e78a:	dd05      	ble.n	2e798 <_dtoa_r+0x528>
   2e78c:	4649      	mov	r1, r9
   2e78e:	461a      	mov	r2, r3
   2e790:	4620      	mov	r0, r4
   2e792:	f000 ff8b 	bl	2f6ac <__lshift>
   2e796:	4681      	mov	r9, r0
   2e798:	9b06      	ldr	r3, [sp, #24]
   2e79a:	2b00      	cmp	r3, #0
   2e79c:	dd05      	ble.n	2e7aa <_dtoa_r+0x53a>
   2e79e:	4641      	mov	r1, r8
   2e7a0:	461a      	mov	r2, r3
   2e7a2:	4620      	mov	r0, r4
   2e7a4:	f000 ff82 	bl	2f6ac <__lshift>
   2e7a8:	4680      	mov	r8, r0
   2e7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e7ac:	2b00      	cmp	r3, #0
   2e7ae:	f040 8086 	bne.w	2e8be <_dtoa_r+0x64e>
   2e7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e7b4:	2b00      	cmp	r3, #0
   2e7b6:	f340 8266 	ble.w	2ec86 <_dtoa_r+0xa16>
   2e7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e7bc:	2b00      	cmp	r3, #0
   2e7be:	f000 8098 	beq.w	2e8f2 <_dtoa_r+0x682>
   2e7c2:	2d00      	cmp	r5, #0
   2e7c4:	dd05      	ble.n	2e7d2 <_dtoa_r+0x562>
   2e7c6:	4631      	mov	r1, r6
   2e7c8:	462a      	mov	r2, r5
   2e7ca:	4620      	mov	r0, r4
   2e7cc:	f000 ff6e 	bl	2f6ac <__lshift>
   2e7d0:	4606      	mov	r6, r0
   2e7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e7d4:	2b00      	cmp	r3, #0
   2e7d6:	f040 8337 	bne.w	2ee48 <_dtoa_r+0xbd8>
   2e7da:	9606      	str	r6, [sp, #24]
   2e7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e7de:	9a04      	ldr	r2, [sp, #16]
   2e7e0:	f8dd b018 	ldr.w	fp, [sp, #24]
   2e7e4:	3b01      	subs	r3, #1
   2e7e6:	18d3      	adds	r3, r2, r3
   2e7e8:	930b      	str	r3, [sp, #44]	; 0x2c
   2e7ea:	f00a 0301 	and.w	r3, sl, #1
   2e7ee:	930c      	str	r3, [sp, #48]	; 0x30
   2e7f0:	4617      	mov	r7, r2
   2e7f2:	46c2      	mov	sl, r8
   2e7f4:	4651      	mov	r1, sl
   2e7f6:	4648      	mov	r0, r9
   2e7f8:	f7ff fca4 	bl	2e144 <quorem>
   2e7fc:	4631      	mov	r1, r6
   2e7fe:	4605      	mov	r5, r0
   2e800:	4648      	mov	r0, r9
   2e802:	f000 ffa5 	bl	2f750 <__mcmp>
   2e806:	465a      	mov	r2, fp
   2e808:	900a      	str	r0, [sp, #40]	; 0x28
   2e80a:	4651      	mov	r1, sl
   2e80c:	4620      	mov	r0, r4
   2e80e:	f000 ffbb 	bl	2f788 <__mdiff>
   2e812:	68c2      	ldr	r2, [r0, #12]
   2e814:	4680      	mov	r8, r0
   2e816:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2e81a:	2a00      	cmp	r2, #0
   2e81c:	f040 822b 	bne.w	2ec76 <_dtoa_r+0xa06>
   2e820:	4601      	mov	r1, r0
   2e822:	4648      	mov	r0, r9
   2e824:	9308      	str	r3, [sp, #32]
   2e826:	f000 ff93 	bl	2f750 <__mcmp>
   2e82a:	4641      	mov	r1, r8
   2e82c:	9006      	str	r0, [sp, #24]
   2e82e:	4620      	mov	r0, r4
   2e830:	f000 fdb6 	bl	2f3a0 <_Bfree>
   2e834:	9a06      	ldr	r2, [sp, #24]
   2e836:	9b08      	ldr	r3, [sp, #32]
   2e838:	b932      	cbnz	r2, 2e848 <_dtoa_r+0x5d8>
   2e83a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2e83c:	b921      	cbnz	r1, 2e848 <_dtoa_r+0x5d8>
   2e83e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2e840:	2a00      	cmp	r2, #0
   2e842:	f000 83ef 	beq.w	2f024 <_dtoa_r+0xdb4>
   2e846:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2e848:	990a      	ldr	r1, [sp, #40]	; 0x28
   2e84a:	2900      	cmp	r1, #0
   2e84c:	f2c0 829f 	blt.w	2ed8e <_dtoa_r+0xb1e>
   2e850:	d105      	bne.n	2e85e <_dtoa_r+0x5ee>
   2e852:	9924      	ldr	r1, [sp, #144]	; 0x90
   2e854:	b919      	cbnz	r1, 2e85e <_dtoa_r+0x5ee>
   2e856:	990c      	ldr	r1, [sp, #48]	; 0x30
   2e858:	2900      	cmp	r1, #0
   2e85a:	f000 8298 	beq.w	2ed8e <_dtoa_r+0xb1e>
   2e85e:	2a00      	cmp	r2, #0
   2e860:	f300 8306 	bgt.w	2ee70 <_dtoa_r+0xc00>
   2e864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2e866:	703b      	strb	r3, [r7, #0]
   2e868:	f107 0801 	add.w	r8, r7, #1
   2e86c:	4297      	cmp	r7, r2
   2e86e:	4645      	mov	r5, r8
   2e870:	f000 830c 	beq.w	2ee8c <_dtoa_r+0xc1c>
   2e874:	4649      	mov	r1, r9
   2e876:	2300      	movs	r3, #0
   2e878:	220a      	movs	r2, #10
   2e87a:	4620      	mov	r0, r4
   2e87c:	f000 fd9a 	bl	2f3b4 <__multadd>
   2e880:	455e      	cmp	r6, fp
   2e882:	4681      	mov	r9, r0
   2e884:	4631      	mov	r1, r6
   2e886:	f04f 0300 	mov.w	r3, #0
   2e88a:	f04f 020a 	mov.w	r2, #10
   2e88e:	4620      	mov	r0, r4
   2e890:	f000 81eb 	beq.w	2ec6a <_dtoa_r+0x9fa>
   2e894:	f000 fd8e 	bl	2f3b4 <__multadd>
   2e898:	4659      	mov	r1, fp
   2e89a:	4606      	mov	r6, r0
   2e89c:	2300      	movs	r3, #0
   2e89e:	220a      	movs	r2, #10
   2e8a0:	4620      	mov	r0, r4
   2e8a2:	f000 fd87 	bl	2f3b4 <__multadd>
   2e8a6:	4647      	mov	r7, r8
   2e8a8:	4683      	mov	fp, r0
   2e8aa:	e7a3      	b.n	2e7f4 <_dtoa_r+0x584>
   2e8ac:	201c      	movs	r0, #28
   2e8ae:	9b08      	ldr	r3, [sp, #32]
   2e8b0:	4403      	add	r3, r0
   2e8b2:	9308      	str	r3, [sp, #32]
   2e8b4:	9b06      	ldr	r3, [sp, #24]
   2e8b6:	4403      	add	r3, r0
   2e8b8:	4405      	add	r5, r0
   2e8ba:	9306      	str	r3, [sp, #24]
   2e8bc:	e763      	b.n	2e786 <_dtoa_r+0x516>
   2e8be:	4641      	mov	r1, r8
   2e8c0:	4648      	mov	r0, r9
   2e8c2:	f000 ff45 	bl	2f750 <__mcmp>
   2e8c6:	2800      	cmp	r0, #0
   2e8c8:	f6bf af73 	bge.w	2e7b2 <_dtoa_r+0x542>
   2e8cc:	9f02      	ldr	r7, [sp, #8]
   2e8ce:	4649      	mov	r1, r9
   2e8d0:	2300      	movs	r3, #0
   2e8d2:	220a      	movs	r2, #10
   2e8d4:	4620      	mov	r0, r4
   2e8d6:	3f01      	subs	r7, #1
   2e8d8:	9702      	str	r7, [sp, #8]
   2e8da:	f000 fd6b 	bl	2f3b4 <__multadd>
   2e8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2e8e0:	4681      	mov	r9, r0
   2e8e2:	2b00      	cmp	r3, #0
   2e8e4:	f040 83b6 	bne.w	2f054 <_dtoa_r+0xde4>
   2e8e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2e8ea:	2b00      	cmp	r3, #0
   2e8ec:	f340 83bf 	ble.w	2f06e <_dtoa_r+0xdfe>
   2e8f0:	930a      	str	r3, [sp, #40]	; 0x28
   2e8f2:	f8dd b010 	ldr.w	fp, [sp, #16]
   2e8f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2e8f8:	465d      	mov	r5, fp
   2e8fa:	e002      	b.n	2e902 <_dtoa_r+0x692>
   2e8fc:	f000 fd5a 	bl	2f3b4 <__multadd>
   2e900:	4681      	mov	r9, r0
   2e902:	4641      	mov	r1, r8
   2e904:	4648      	mov	r0, r9
   2e906:	f7ff fc1d 	bl	2e144 <quorem>
   2e90a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2e90e:	f805 ab01 	strb.w	sl, [r5], #1
   2e912:	eba5 030b 	sub.w	r3, r5, fp
   2e916:	42bb      	cmp	r3, r7
   2e918:	f04f 020a 	mov.w	r2, #10
   2e91c:	f04f 0300 	mov.w	r3, #0
   2e920:	4649      	mov	r1, r9
   2e922:	4620      	mov	r0, r4
   2e924:	dbea      	blt.n	2e8fc <_dtoa_r+0x68c>
   2e926:	9b04      	ldr	r3, [sp, #16]
   2e928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e92a:	2a01      	cmp	r2, #1
   2e92c:	bfac      	ite	ge
   2e92e:	189b      	addge	r3, r3, r2
   2e930:	3301      	addlt	r3, #1
   2e932:	461d      	mov	r5, r3
   2e934:	f04f 0b00 	mov.w	fp, #0
   2e938:	4649      	mov	r1, r9
   2e93a:	2201      	movs	r2, #1
   2e93c:	4620      	mov	r0, r4
   2e93e:	f000 feb5 	bl	2f6ac <__lshift>
   2e942:	4641      	mov	r1, r8
   2e944:	4681      	mov	r9, r0
   2e946:	f000 ff03 	bl	2f750 <__mcmp>
   2e94a:	2800      	cmp	r0, #0
   2e94c:	f340 823d 	ble.w	2edca <_dtoa_r+0xb5a>
   2e950:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2e954:	9904      	ldr	r1, [sp, #16]
   2e956:	1e6b      	subs	r3, r5, #1
   2e958:	e004      	b.n	2e964 <_dtoa_r+0x6f4>
   2e95a:	428b      	cmp	r3, r1
   2e95c:	f000 81ae 	beq.w	2ecbc <_dtoa_r+0xa4c>
   2e960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2e964:	2a39      	cmp	r2, #57	; 0x39
   2e966:	f103 0501 	add.w	r5, r3, #1
   2e96a:	d0f6      	beq.n	2e95a <_dtoa_r+0x6ea>
   2e96c:	3201      	adds	r2, #1
   2e96e:	701a      	strb	r2, [r3, #0]
   2e970:	4641      	mov	r1, r8
   2e972:	4620      	mov	r0, r4
   2e974:	f000 fd14 	bl	2f3a0 <_Bfree>
   2e978:	2e00      	cmp	r6, #0
   2e97a:	f43f ae3d 	beq.w	2e5f8 <_dtoa_r+0x388>
   2e97e:	f1bb 0f00 	cmp.w	fp, #0
   2e982:	d005      	beq.n	2e990 <_dtoa_r+0x720>
   2e984:	45b3      	cmp	fp, r6
   2e986:	d003      	beq.n	2e990 <_dtoa_r+0x720>
   2e988:	4659      	mov	r1, fp
   2e98a:	4620      	mov	r0, r4
   2e98c:	f000 fd08 	bl	2f3a0 <_Bfree>
   2e990:	4631      	mov	r1, r6
   2e992:	4620      	mov	r0, r4
   2e994:	f000 fd04 	bl	2f3a0 <_Bfree>
   2e998:	e62e      	b.n	2e5f8 <_dtoa_r+0x388>
   2e99a:	2300      	movs	r3, #0
   2e99c:	930b      	str	r3, [sp, #44]	; 0x2c
   2e99e:	9b02      	ldr	r3, [sp, #8]
   2e9a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2e9a2:	4413      	add	r3, r2
   2e9a4:	930f      	str	r3, [sp, #60]	; 0x3c
   2e9a6:	3301      	adds	r3, #1
   2e9a8:	2b01      	cmp	r3, #1
   2e9aa:	461f      	mov	r7, r3
   2e9ac:	461e      	mov	r6, r3
   2e9ae:	930a      	str	r3, [sp, #40]	; 0x28
   2e9b0:	bfb8      	it	lt
   2e9b2:	2701      	movlt	r7, #1
   2e9b4:	2100      	movs	r1, #0
   2e9b6:	2f17      	cmp	r7, #23
   2e9b8:	6461      	str	r1, [r4, #68]	; 0x44
   2e9ba:	d90a      	bls.n	2e9d2 <_dtoa_r+0x762>
   2e9bc:	2201      	movs	r2, #1
   2e9be:	2304      	movs	r3, #4
   2e9c0:	005b      	lsls	r3, r3, #1
   2e9c2:	f103 0014 	add.w	r0, r3, #20
   2e9c6:	4287      	cmp	r7, r0
   2e9c8:	4611      	mov	r1, r2
   2e9ca:	f102 0201 	add.w	r2, r2, #1
   2e9ce:	d2f7      	bcs.n	2e9c0 <_dtoa_r+0x750>
   2e9d0:	6461      	str	r1, [r4, #68]	; 0x44
   2e9d2:	4620      	mov	r0, r4
   2e9d4:	f000 fcbe 	bl	2f354 <_Balloc>
   2e9d8:	2e0e      	cmp	r6, #14
   2e9da:	9004      	str	r0, [sp, #16]
   2e9dc:	6420      	str	r0, [r4, #64]	; 0x40
   2e9de:	f63f ad41 	bhi.w	2e464 <_dtoa_r+0x1f4>
   2e9e2:	2d00      	cmp	r5, #0
   2e9e4:	f43f ad3e 	beq.w	2e464 <_dtoa_r+0x1f4>
   2e9e8:	9902      	ldr	r1, [sp, #8]
   2e9ea:	2900      	cmp	r1, #0
   2e9ec:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2e9f0:	f340 8202 	ble.w	2edf8 <_dtoa_r+0xb88>
   2e9f4:	4bb8      	ldr	r3, [pc, #736]	; (2ecd8 <_dtoa_r+0xa68>)
   2e9f6:	f001 020f 	and.w	r2, r1, #15
   2e9fa:	110d      	asrs	r5, r1, #4
   2e9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ea00:	06e9      	lsls	r1, r5, #27
   2ea02:	e9d3 6700 	ldrd	r6, r7, [r3]
   2ea06:	f140 81ae 	bpl.w	2ed66 <_dtoa_r+0xaf6>
   2ea0a:	4bb4      	ldr	r3, [pc, #720]	; (2ecdc <_dtoa_r+0xa6c>)
   2ea0c:	4650      	mov	r0, sl
   2ea0e:	4659      	mov	r1, fp
   2ea10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2ea14:	f7d2 f9c4 	bl	da0 <__aeabi_ddiv>
   2ea18:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2ea1c:	f005 050f 	and.w	r5, r5, #15
   2ea20:	f04f 0a03 	mov.w	sl, #3
   2ea24:	b18d      	cbz	r5, 2ea4a <_dtoa_r+0x7da>
   2ea26:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2ecdc <_dtoa_r+0xa6c>
   2ea2a:	07ea      	lsls	r2, r5, #31
   2ea2c:	d509      	bpl.n	2ea42 <_dtoa_r+0x7d2>
   2ea2e:	4630      	mov	r0, r6
   2ea30:	4639      	mov	r1, r7
   2ea32:	e9d8 2300 	ldrd	r2, r3, [r8]
   2ea36:	f7d2 f889 	bl	b4c <__aeabi_dmul>
   2ea3a:	f10a 0a01 	add.w	sl, sl, #1
   2ea3e:	4606      	mov	r6, r0
   2ea40:	460f      	mov	r7, r1
   2ea42:	106d      	asrs	r5, r5, #1
   2ea44:	f108 0808 	add.w	r8, r8, #8
   2ea48:	d1ef      	bne.n	2ea2a <_dtoa_r+0x7ba>
   2ea4a:	463b      	mov	r3, r7
   2ea4c:	4632      	mov	r2, r6
   2ea4e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2ea52:	f7d2 f9a5 	bl	da0 <__aeabi_ddiv>
   2ea56:	4607      	mov	r7, r0
   2ea58:	4688      	mov	r8, r1
   2ea5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ea5c:	b143      	cbz	r3, 2ea70 <_dtoa_r+0x800>
   2ea5e:	2200      	movs	r2, #0
   2ea60:	4b9f      	ldr	r3, [pc, #636]	; (2ece0 <_dtoa_r+0xa70>)
   2ea62:	4638      	mov	r0, r7
   2ea64:	4641      	mov	r1, r8
   2ea66:	f7d2 fae3 	bl	1030 <__aeabi_dcmplt>
   2ea6a:	2800      	cmp	r0, #0
   2ea6c:	f040 8286 	bne.w	2ef7c <_dtoa_r+0xd0c>
   2ea70:	4650      	mov	r0, sl
   2ea72:	f7d2 f805 	bl	a80 <__aeabi_i2d>
   2ea76:	463a      	mov	r2, r7
   2ea78:	4643      	mov	r3, r8
   2ea7a:	f7d2 f867 	bl	b4c <__aeabi_dmul>
   2ea7e:	4b99      	ldr	r3, [pc, #612]	; (2ece4 <_dtoa_r+0xa74>)
   2ea80:	2200      	movs	r2, #0
   2ea82:	f7d1 feb1 	bl	7e8 <__adddf3>
   2ea86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ea88:	4605      	mov	r5, r0
   2ea8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2ea8e:	2b00      	cmp	r3, #0
   2ea90:	f000 813e 	beq.w	2ed10 <_dtoa_r+0xaa0>
   2ea94:	9b02      	ldr	r3, [sp, #8]
   2ea96:	9315      	str	r3, [sp, #84]	; 0x54
   2ea98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ea9a:	9312      	str	r3, [sp, #72]	; 0x48
   2ea9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ea9e:	2b00      	cmp	r3, #0
   2eaa0:	f000 81fa 	beq.w	2ee98 <_dtoa_r+0xc28>
   2eaa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2eaa6:	4b8c      	ldr	r3, [pc, #560]	; (2ecd8 <_dtoa_r+0xa68>)
   2eaa8:	498f      	ldr	r1, [pc, #572]	; (2ece8 <_dtoa_r+0xa78>)
   2eaaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2eaae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2eab2:	2000      	movs	r0, #0
   2eab4:	f7d2 f974 	bl	da0 <__aeabi_ddiv>
   2eab8:	462a      	mov	r2, r5
   2eaba:	4633      	mov	r3, r6
   2eabc:	f7d1 fe92 	bl	7e4 <__aeabi_dsub>
   2eac0:	4682      	mov	sl, r0
   2eac2:	468b      	mov	fp, r1
   2eac4:	4638      	mov	r0, r7
   2eac6:	4641      	mov	r1, r8
   2eac8:	f7d2 faf0 	bl	10ac <__aeabi_d2iz>
   2eacc:	4605      	mov	r5, r0
   2eace:	f7d1 ffd7 	bl	a80 <__aeabi_i2d>
   2ead2:	4602      	mov	r2, r0
   2ead4:	460b      	mov	r3, r1
   2ead6:	4638      	mov	r0, r7
   2ead8:	4641      	mov	r1, r8
   2eada:	f7d1 fe83 	bl	7e4 <__aeabi_dsub>
   2eade:	3530      	adds	r5, #48	; 0x30
   2eae0:	fa5f f885 	uxtb.w	r8, r5
   2eae4:	9d04      	ldr	r5, [sp, #16]
   2eae6:	4606      	mov	r6, r0
   2eae8:	460f      	mov	r7, r1
   2eaea:	f885 8000 	strb.w	r8, [r5]
   2eaee:	4602      	mov	r2, r0
   2eaf0:	460b      	mov	r3, r1
   2eaf2:	4650      	mov	r0, sl
   2eaf4:	4659      	mov	r1, fp
   2eaf6:	3501      	adds	r5, #1
   2eaf8:	f7d2 fab8 	bl	106c <__aeabi_dcmpgt>
   2eafc:	2800      	cmp	r0, #0
   2eafe:	d154      	bne.n	2ebaa <_dtoa_r+0x93a>
   2eb00:	4632      	mov	r2, r6
   2eb02:	463b      	mov	r3, r7
   2eb04:	2000      	movs	r0, #0
   2eb06:	4976      	ldr	r1, [pc, #472]	; (2ece0 <_dtoa_r+0xa70>)
   2eb08:	f7d1 fe6c 	bl	7e4 <__aeabi_dsub>
   2eb0c:	4602      	mov	r2, r0
   2eb0e:	460b      	mov	r3, r1
   2eb10:	4650      	mov	r0, sl
   2eb12:	4659      	mov	r1, fp
   2eb14:	f7d2 faaa 	bl	106c <__aeabi_dcmpgt>
   2eb18:	2800      	cmp	r0, #0
   2eb1a:	f040 8270 	bne.w	2effe <_dtoa_r+0xd8e>
   2eb1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2eb20:	2a01      	cmp	r2, #1
   2eb22:	f000 8111 	beq.w	2ed48 <_dtoa_r+0xad8>
   2eb26:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2eb28:	9a04      	ldr	r2, [sp, #16]
   2eb2a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2eb2e:	4413      	add	r3, r2
   2eb30:	4699      	mov	r9, r3
   2eb32:	e00d      	b.n	2eb50 <_dtoa_r+0x8e0>
   2eb34:	2000      	movs	r0, #0
   2eb36:	496a      	ldr	r1, [pc, #424]	; (2ece0 <_dtoa_r+0xa70>)
   2eb38:	f7d1 fe54 	bl	7e4 <__aeabi_dsub>
   2eb3c:	4652      	mov	r2, sl
   2eb3e:	465b      	mov	r3, fp
   2eb40:	f7d2 fa76 	bl	1030 <__aeabi_dcmplt>
   2eb44:	2800      	cmp	r0, #0
   2eb46:	f040 8258 	bne.w	2effa <_dtoa_r+0xd8a>
   2eb4a:	454d      	cmp	r5, r9
   2eb4c:	f000 80fa 	beq.w	2ed44 <_dtoa_r+0xad4>
   2eb50:	4650      	mov	r0, sl
   2eb52:	4659      	mov	r1, fp
   2eb54:	2200      	movs	r2, #0
   2eb56:	4b65      	ldr	r3, [pc, #404]	; (2ecec <_dtoa_r+0xa7c>)
   2eb58:	f7d1 fff8 	bl	b4c <__aeabi_dmul>
   2eb5c:	2200      	movs	r2, #0
   2eb5e:	4b63      	ldr	r3, [pc, #396]	; (2ecec <_dtoa_r+0xa7c>)
   2eb60:	4682      	mov	sl, r0
   2eb62:	468b      	mov	fp, r1
   2eb64:	4630      	mov	r0, r6
   2eb66:	4639      	mov	r1, r7
   2eb68:	f7d1 fff0 	bl	b4c <__aeabi_dmul>
   2eb6c:	460f      	mov	r7, r1
   2eb6e:	4606      	mov	r6, r0
   2eb70:	f7d2 fa9c 	bl	10ac <__aeabi_d2iz>
   2eb74:	4680      	mov	r8, r0
   2eb76:	f7d1 ff83 	bl	a80 <__aeabi_i2d>
   2eb7a:	4602      	mov	r2, r0
   2eb7c:	460b      	mov	r3, r1
   2eb7e:	4630      	mov	r0, r6
   2eb80:	4639      	mov	r1, r7
   2eb82:	f7d1 fe2f 	bl	7e4 <__aeabi_dsub>
   2eb86:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2eb8a:	fa5f f888 	uxtb.w	r8, r8
   2eb8e:	4652      	mov	r2, sl
   2eb90:	465b      	mov	r3, fp
   2eb92:	f805 8b01 	strb.w	r8, [r5], #1
   2eb96:	4606      	mov	r6, r0
   2eb98:	460f      	mov	r7, r1
   2eb9a:	f7d2 fa49 	bl	1030 <__aeabi_dcmplt>
   2eb9e:	4632      	mov	r2, r6
   2eba0:	463b      	mov	r3, r7
   2eba2:	2800      	cmp	r0, #0
   2eba4:	d0c6      	beq.n	2eb34 <_dtoa_r+0x8c4>
   2eba6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2ebaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2ebac:	9302      	str	r3, [sp, #8]
   2ebae:	e523      	b.n	2e5f8 <_dtoa_r+0x388>
   2ebb0:	2300      	movs	r3, #0
   2ebb2:	930b      	str	r3, [sp, #44]	; 0x2c
   2ebb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ebb6:	2b00      	cmp	r3, #0
   2ebb8:	f340 80dc 	ble.w	2ed74 <_dtoa_r+0xb04>
   2ebbc:	461f      	mov	r7, r3
   2ebbe:	461e      	mov	r6, r3
   2ebc0:	930f      	str	r3, [sp, #60]	; 0x3c
   2ebc2:	930a      	str	r3, [sp, #40]	; 0x28
   2ebc4:	e6f6      	b.n	2e9b4 <_dtoa_r+0x744>
   2ebc6:	2301      	movs	r3, #1
   2ebc8:	930b      	str	r3, [sp, #44]	; 0x2c
   2ebca:	e7f3      	b.n	2ebb4 <_dtoa_r+0x944>
   2ebcc:	f1ba 0f00 	cmp.w	sl, #0
   2ebd0:	f47f ada8 	bne.w	2e724 <_dtoa_r+0x4b4>
   2ebd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2ebd8:	2b00      	cmp	r3, #0
   2ebda:	f47f adba 	bne.w	2e752 <_dtoa_r+0x4e2>
   2ebde:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2ebe2:	0d3f      	lsrs	r7, r7, #20
   2ebe4:	053f      	lsls	r7, r7, #20
   2ebe6:	2f00      	cmp	r7, #0
   2ebe8:	f000 820d 	beq.w	2f006 <_dtoa_r+0xd96>
   2ebec:	9b08      	ldr	r3, [sp, #32]
   2ebee:	3301      	adds	r3, #1
   2ebf0:	9308      	str	r3, [sp, #32]
   2ebf2:	9b06      	ldr	r3, [sp, #24]
   2ebf4:	3301      	adds	r3, #1
   2ebf6:	9306      	str	r3, [sp, #24]
   2ebf8:	2301      	movs	r3, #1
   2ebfa:	930c      	str	r3, [sp, #48]	; 0x30
   2ebfc:	e5ab      	b.n	2e756 <_dtoa_r+0x4e6>
   2ebfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ec00:	2b00      	cmp	r3, #0
   2ec02:	f73f ac42 	bgt.w	2e48a <_dtoa_r+0x21a>
   2ec06:	f040 8221 	bne.w	2f04c <_dtoa_r+0xddc>
   2ec0a:	2200      	movs	r2, #0
   2ec0c:	4b38      	ldr	r3, [pc, #224]	; (2ecf0 <_dtoa_r+0xa80>)
   2ec0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2ec12:	f7d1 ff9b 	bl	b4c <__aeabi_dmul>
   2ec16:	4652      	mov	r2, sl
   2ec18:	465b      	mov	r3, fp
   2ec1a:	f7d2 fa1d 	bl	1058 <__aeabi_dcmpge>
   2ec1e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2ec22:	4646      	mov	r6, r8
   2ec24:	2800      	cmp	r0, #0
   2ec26:	d041      	beq.n	2ecac <_dtoa_r+0xa3c>
   2ec28:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ec2a:	9d04      	ldr	r5, [sp, #16]
   2ec2c:	43db      	mvns	r3, r3
   2ec2e:	9302      	str	r3, [sp, #8]
   2ec30:	4641      	mov	r1, r8
   2ec32:	4620      	mov	r0, r4
   2ec34:	f000 fbb4 	bl	2f3a0 <_Bfree>
   2ec38:	2e00      	cmp	r6, #0
   2ec3a:	f43f acdd 	beq.w	2e5f8 <_dtoa_r+0x388>
   2ec3e:	e6a7      	b.n	2e990 <_dtoa_r+0x720>
   2ec40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ec42:	4649      	mov	r1, r9
   2ec44:	4620      	mov	r0, r4
   2ec46:	f000 fce1 	bl	2f60c <__pow5mult>
   2ec4a:	4681      	mov	r9, r0
   2ec4c:	e558      	b.n	2e700 <_dtoa_r+0x490>
   2ec4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ec50:	2a00      	cmp	r2, #0
   2ec52:	f000 8187 	beq.w	2ef64 <_dtoa_r+0xcf4>
   2ec56:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2ec5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2ec5c:	9d08      	ldr	r5, [sp, #32]
   2ec5e:	e4f2      	b.n	2e646 <_dtoa_r+0x3d6>
   2ec60:	f1ba 0f00 	cmp.w	sl, #0
   2ec64:	f47f ad75 	bne.w	2e752 <_dtoa_r+0x4e2>
   2ec68:	e7b4      	b.n	2ebd4 <_dtoa_r+0x964>
   2ec6a:	f000 fba3 	bl	2f3b4 <__multadd>
   2ec6e:	4647      	mov	r7, r8
   2ec70:	4606      	mov	r6, r0
   2ec72:	4683      	mov	fp, r0
   2ec74:	e5be      	b.n	2e7f4 <_dtoa_r+0x584>
   2ec76:	4601      	mov	r1, r0
   2ec78:	4620      	mov	r0, r4
   2ec7a:	9306      	str	r3, [sp, #24]
   2ec7c:	f000 fb90 	bl	2f3a0 <_Bfree>
   2ec80:	2201      	movs	r2, #1
   2ec82:	9b06      	ldr	r3, [sp, #24]
   2ec84:	e5e0      	b.n	2e848 <_dtoa_r+0x5d8>
   2ec86:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2ec88:	2b02      	cmp	r3, #2
   2ec8a:	f77f ad96 	ble.w	2e7ba <_dtoa_r+0x54a>
   2ec8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ec90:	2b00      	cmp	r3, #0
   2ec92:	d1c9      	bne.n	2ec28 <_dtoa_r+0x9b8>
   2ec94:	4641      	mov	r1, r8
   2ec96:	2205      	movs	r2, #5
   2ec98:	4620      	mov	r0, r4
   2ec9a:	f000 fb8b 	bl	2f3b4 <__multadd>
   2ec9e:	4601      	mov	r1, r0
   2eca0:	4680      	mov	r8, r0
   2eca2:	4648      	mov	r0, r9
   2eca4:	f000 fd54 	bl	2f750 <__mcmp>
   2eca8:	2800      	cmp	r0, #0
   2ecaa:	ddbd      	ble.n	2ec28 <_dtoa_r+0x9b8>
   2ecac:	9a02      	ldr	r2, [sp, #8]
   2ecae:	9904      	ldr	r1, [sp, #16]
   2ecb0:	2331      	movs	r3, #49	; 0x31
   2ecb2:	3201      	adds	r2, #1
   2ecb4:	9202      	str	r2, [sp, #8]
   2ecb6:	700b      	strb	r3, [r1, #0]
   2ecb8:	1c4d      	adds	r5, r1, #1
   2ecba:	e7b9      	b.n	2ec30 <_dtoa_r+0x9c0>
   2ecbc:	9a02      	ldr	r2, [sp, #8]
   2ecbe:	3201      	adds	r2, #1
   2ecc0:	9202      	str	r2, [sp, #8]
   2ecc2:	9a04      	ldr	r2, [sp, #16]
   2ecc4:	2331      	movs	r3, #49	; 0x31
   2ecc6:	7013      	strb	r3, [r2, #0]
   2ecc8:	e652      	b.n	2e970 <_dtoa_r+0x700>
   2ecca:	2301      	movs	r3, #1
   2eccc:	930b      	str	r3, [sp, #44]	; 0x2c
   2ecce:	e666      	b.n	2e99e <_dtoa_r+0x72e>
   2ecd0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2ecd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ecd6:	e48f      	b.n	2e5f8 <_dtoa_r+0x388>
   2ecd8:	00034df0 	.word	0x00034df0
   2ecdc:	00034dc8 	.word	0x00034dc8
   2ece0:	3ff00000 	.word	0x3ff00000
   2ece4:	401c0000 	.word	0x401c0000
   2ece8:	3fe00000 	.word	0x3fe00000
   2ecec:	40240000 	.word	0x40240000
   2ecf0:	40140000 	.word	0x40140000
   2ecf4:	4650      	mov	r0, sl
   2ecf6:	f7d1 fec3 	bl	a80 <__aeabi_i2d>
   2ecfa:	463a      	mov	r2, r7
   2ecfc:	4643      	mov	r3, r8
   2ecfe:	f7d1 ff25 	bl	b4c <__aeabi_dmul>
   2ed02:	2200      	movs	r2, #0
   2ed04:	4bc1      	ldr	r3, [pc, #772]	; (2f00c <_dtoa_r+0xd9c>)
   2ed06:	f7d1 fd6f 	bl	7e8 <__adddf3>
   2ed0a:	4605      	mov	r5, r0
   2ed0c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2ed10:	4641      	mov	r1, r8
   2ed12:	2200      	movs	r2, #0
   2ed14:	4bbe      	ldr	r3, [pc, #760]	; (2f010 <_dtoa_r+0xda0>)
   2ed16:	4638      	mov	r0, r7
   2ed18:	f7d1 fd64 	bl	7e4 <__aeabi_dsub>
   2ed1c:	462a      	mov	r2, r5
   2ed1e:	4633      	mov	r3, r6
   2ed20:	4682      	mov	sl, r0
   2ed22:	468b      	mov	fp, r1
   2ed24:	f7d2 f9a2 	bl	106c <__aeabi_dcmpgt>
   2ed28:	4680      	mov	r8, r0
   2ed2a:	2800      	cmp	r0, #0
   2ed2c:	f040 8110 	bne.w	2ef50 <_dtoa_r+0xce0>
   2ed30:	462a      	mov	r2, r5
   2ed32:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2ed36:	4650      	mov	r0, sl
   2ed38:	4659      	mov	r1, fp
   2ed3a:	f7d2 f979 	bl	1030 <__aeabi_dcmplt>
   2ed3e:	b118      	cbz	r0, 2ed48 <_dtoa_r+0xad8>
   2ed40:	4646      	mov	r6, r8
   2ed42:	e771      	b.n	2ec28 <_dtoa_r+0x9b8>
   2ed44:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2ed48:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2ed4c:	f7ff bb8a 	b.w	2e464 <_dtoa_r+0x1f4>
   2ed50:	9804      	ldr	r0, [sp, #16]
   2ed52:	f7ff babb 	b.w	2e2cc <_dtoa_r+0x5c>
   2ed56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ed58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2ed5a:	970c      	str	r7, [sp, #48]	; 0x30
   2ed5c:	1afb      	subs	r3, r7, r3
   2ed5e:	441a      	add	r2, r3
   2ed60:	920d      	str	r2, [sp, #52]	; 0x34
   2ed62:	2700      	movs	r7, #0
   2ed64:	e469      	b.n	2e63a <_dtoa_r+0x3ca>
   2ed66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2ed6a:	f04f 0a02 	mov.w	sl, #2
   2ed6e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2ed72:	e657      	b.n	2ea24 <_dtoa_r+0x7b4>
   2ed74:	2100      	movs	r1, #0
   2ed76:	2301      	movs	r3, #1
   2ed78:	6461      	str	r1, [r4, #68]	; 0x44
   2ed7a:	4620      	mov	r0, r4
   2ed7c:	9325      	str	r3, [sp, #148]	; 0x94
   2ed7e:	f000 fae9 	bl	2f354 <_Balloc>
   2ed82:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ed84:	9004      	str	r0, [sp, #16]
   2ed86:	6420      	str	r0, [r4, #64]	; 0x40
   2ed88:	930a      	str	r3, [sp, #40]	; 0x28
   2ed8a:	930f      	str	r3, [sp, #60]	; 0x3c
   2ed8c:	e629      	b.n	2e9e2 <_dtoa_r+0x772>
   2ed8e:	2a00      	cmp	r2, #0
   2ed90:	46d0      	mov	r8, sl
   2ed92:	f8cd b018 	str.w	fp, [sp, #24]
   2ed96:	469a      	mov	sl, r3
   2ed98:	dd11      	ble.n	2edbe <_dtoa_r+0xb4e>
   2ed9a:	4649      	mov	r1, r9
   2ed9c:	2201      	movs	r2, #1
   2ed9e:	4620      	mov	r0, r4
   2eda0:	f000 fc84 	bl	2f6ac <__lshift>
   2eda4:	4641      	mov	r1, r8
   2eda6:	4681      	mov	r9, r0
   2eda8:	f000 fcd2 	bl	2f750 <__mcmp>
   2edac:	2800      	cmp	r0, #0
   2edae:	f340 8146 	ble.w	2f03e <_dtoa_r+0xdce>
   2edb2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2edb6:	f000 8106 	beq.w	2efc6 <_dtoa_r+0xd56>
   2edba:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2edbe:	46b3      	mov	fp, r6
   2edc0:	f887 a000 	strb.w	sl, [r7]
   2edc4:	1c7d      	adds	r5, r7, #1
   2edc6:	9e06      	ldr	r6, [sp, #24]
   2edc8:	e5d2      	b.n	2e970 <_dtoa_r+0x700>
   2edca:	d104      	bne.n	2edd6 <_dtoa_r+0xb66>
   2edcc:	f01a 0f01 	tst.w	sl, #1
   2edd0:	d001      	beq.n	2edd6 <_dtoa_r+0xb66>
   2edd2:	e5bd      	b.n	2e950 <_dtoa_r+0x6e0>
   2edd4:	4615      	mov	r5, r2
   2edd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2edda:	2b30      	cmp	r3, #48	; 0x30
   2eddc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2ede0:	d0f8      	beq.n	2edd4 <_dtoa_r+0xb64>
   2ede2:	e5c5      	b.n	2e970 <_dtoa_r+0x700>
   2ede4:	9904      	ldr	r1, [sp, #16]
   2ede6:	2230      	movs	r2, #48	; 0x30
   2ede8:	700a      	strb	r2, [r1, #0]
   2edea:	9a02      	ldr	r2, [sp, #8]
   2edec:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2edf0:	3201      	adds	r2, #1
   2edf2:	9202      	str	r2, [sp, #8]
   2edf4:	f7ff bbfc 	b.w	2e5f0 <_dtoa_r+0x380>
   2edf8:	f000 80bb 	beq.w	2ef72 <_dtoa_r+0xd02>
   2edfc:	9b02      	ldr	r3, [sp, #8]
   2edfe:	425d      	negs	r5, r3
   2ee00:	4b84      	ldr	r3, [pc, #528]	; (2f014 <_dtoa_r+0xda4>)
   2ee02:	f005 020f 	and.w	r2, r5, #15
   2ee06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ee0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2ee12:	f7d1 fe9b 	bl	b4c <__aeabi_dmul>
   2ee16:	112d      	asrs	r5, r5, #4
   2ee18:	4607      	mov	r7, r0
   2ee1a:	4688      	mov	r8, r1
   2ee1c:	f000 812c 	beq.w	2f078 <_dtoa_r+0xe08>
   2ee20:	4e7d      	ldr	r6, [pc, #500]	; (2f018 <_dtoa_r+0xda8>)
   2ee22:	f04f 0a02 	mov.w	sl, #2
   2ee26:	07eb      	lsls	r3, r5, #31
   2ee28:	d509      	bpl.n	2ee3e <_dtoa_r+0xbce>
   2ee2a:	4638      	mov	r0, r7
   2ee2c:	4641      	mov	r1, r8
   2ee2e:	e9d6 2300 	ldrd	r2, r3, [r6]
   2ee32:	f7d1 fe8b 	bl	b4c <__aeabi_dmul>
   2ee36:	f10a 0a01 	add.w	sl, sl, #1
   2ee3a:	4607      	mov	r7, r0
   2ee3c:	4688      	mov	r8, r1
   2ee3e:	106d      	asrs	r5, r5, #1
   2ee40:	f106 0608 	add.w	r6, r6, #8
   2ee44:	d1ef      	bne.n	2ee26 <_dtoa_r+0xbb6>
   2ee46:	e608      	b.n	2ea5a <_dtoa_r+0x7ea>
   2ee48:	6871      	ldr	r1, [r6, #4]
   2ee4a:	4620      	mov	r0, r4
   2ee4c:	f000 fa82 	bl	2f354 <_Balloc>
   2ee50:	6933      	ldr	r3, [r6, #16]
   2ee52:	3302      	adds	r3, #2
   2ee54:	009a      	lsls	r2, r3, #2
   2ee56:	4605      	mov	r5, r0
   2ee58:	f106 010c 	add.w	r1, r6, #12
   2ee5c:	300c      	adds	r0, #12
   2ee5e:	f7d1 fa2f 	bl	2c0 <memcpy>
   2ee62:	4629      	mov	r1, r5
   2ee64:	2201      	movs	r2, #1
   2ee66:	4620      	mov	r0, r4
   2ee68:	f000 fc20 	bl	2f6ac <__lshift>
   2ee6c:	9006      	str	r0, [sp, #24]
   2ee6e:	e4b5      	b.n	2e7dc <_dtoa_r+0x56c>
   2ee70:	2b39      	cmp	r3, #57	; 0x39
   2ee72:	f8cd b018 	str.w	fp, [sp, #24]
   2ee76:	46d0      	mov	r8, sl
   2ee78:	f000 80a5 	beq.w	2efc6 <_dtoa_r+0xd56>
   2ee7c:	f103 0a01 	add.w	sl, r3, #1
   2ee80:	46b3      	mov	fp, r6
   2ee82:	f887 a000 	strb.w	sl, [r7]
   2ee86:	1c7d      	adds	r5, r7, #1
   2ee88:	9e06      	ldr	r6, [sp, #24]
   2ee8a:	e571      	b.n	2e970 <_dtoa_r+0x700>
   2ee8c:	465a      	mov	r2, fp
   2ee8e:	46d0      	mov	r8, sl
   2ee90:	46b3      	mov	fp, r6
   2ee92:	469a      	mov	sl, r3
   2ee94:	4616      	mov	r6, r2
   2ee96:	e54f      	b.n	2e938 <_dtoa_r+0x6c8>
   2ee98:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ee9a:	495e      	ldr	r1, [pc, #376]	; (2f014 <_dtoa_r+0xda4>)
   2ee9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2eea0:	462a      	mov	r2, r5
   2eea2:	4633      	mov	r3, r6
   2eea4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2eea8:	f7d1 fe50 	bl	b4c <__aeabi_dmul>
   2eeac:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2eeb0:	4638      	mov	r0, r7
   2eeb2:	4641      	mov	r1, r8
   2eeb4:	f7d2 f8fa 	bl	10ac <__aeabi_d2iz>
   2eeb8:	4605      	mov	r5, r0
   2eeba:	f7d1 fde1 	bl	a80 <__aeabi_i2d>
   2eebe:	460b      	mov	r3, r1
   2eec0:	4602      	mov	r2, r0
   2eec2:	4641      	mov	r1, r8
   2eec4:	4638      	mov	r0, r7
   2eec6:	f7d1 fc8d 	bl	7e4 <__aeabi_dsub>
   2eeca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2eecc:	460f      	mov	r7, r1
   2eece:	9904      	ldr	r1, [sp, #16]
   2eed0:	3530      	adds	r5, #48	; 0x30
   2eed2:	2b01      	cmp	r3, #1
   2eed4:	700d      	strb	r5, [r1, #0]
   2eed6:	4606      	mov	r6, r0
   2eed8:	f101 0501 	add.w	r5, r1, #1
   2eedc:	d026      	beq.n	2ef2c <_dtoa_r+0xcbc>
   2eede:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2eee0:	9a04      	ldr	r2, [sp, #16]
   2eee2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2f020 <_dtoa_r+0xdb0>
   2eee6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2eeea:	4413      	add	r3, r2
   2eeec:	f04f 0a00 	mov.w	sl, #0
   2eef0:	4699      	mov	r9, r3
   2eef2:	4652      	mov	r2, sl
   2eef4:	465b      	mov	r3, fp
   2eef6:	4630      	mov	r0, r6
   2eef8:	4639      	mov	r1, r7
   2eefa:	f7d1 fe27 	bl	b4c <__aeabi_dmul>
   2eefe:	460f      	mov	r7, r1
   2ef00:	4606      	mov	r6, r0
   2ef02:	f7d2 f8d3 	bl	10ac <__aeabi_d2iz>
   2ef06:	4680      	mov	r8, r0
   2ef08:	f7d1 fdba 	bl	a80 <__aeabi_i2d>
   2ef0c:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2ef10:	4602      	mov	r2, r0
   2ef12:	460b      	mov	r3, r1
   2ef14:	4630      	mov	r0, r6
   2ef16:	4639      	mov	r1, r7
   2ef18:	f7d1 fc64 	bl	7e4 <__aeabi_dsub>
   2ef1c:	f805 8b01 	strb.w	r8, [r5], #1
   2ef20:	454d      	cmp	r5, r9
   2ef22:	4606      	mov	r6, r0
   2ef24:	460f      	mov	r7, r1
   2ef26:	d1e4      	bne.n	2eef2 <_dtoa_r+0xc82>
   2ef28:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2ef2c:	4b3b      	ldr	r3, [pc, #236]	; (2f01c <_dtoa_r+0xdac>)
   2ef2e:	2200      	movs	r2, #0
   2ef30:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2ef34:	f7d1 fc58 	bl	7e8 <__adddf3>
   2ef38:	4632      	mov	r2, r6
   2ef3a:	463b      	mov	r3, r7
   2ef3c:	f7d2 f878 	bl	1030 <__aeabi_dcmplt>
   2ef40:	2800      	cmp	r0, #0
   2ef42:	d046      	beq.n	2efd2 <_dtoa_r+0xd62>
   2ef44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2ef46:	9302      	str	r3, [sp, #8]
   2ef48:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2ef4c:	f7ff bb43 	b.w	2e5d6 <_dtoa_r+0x366>
   2ef50:	f04f 0800 	mov.w	r8, #0
   2ef54:	4646      	mov	r6, r8
   2ef56:	e6a9      	b.n	2ecac <_dtoa_r+0xa3c>
   2ef58:	9b08      	ldr	r3, [sp, #32]
   2ef5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ef5c:	1a9d      	subs	r5, r3, r2
   2ef5e:	2300      	movs	r3, #0
   2ef60:	f7ff bb71 	b.w	2e646 <_dtoa_r+0x3d6>
   2ef64:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ef66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2ef68:	9d08      	ldr	r5, [sp, #32]
   2ef6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2ef6e:	f7ff bb6a 	b.w	2e646 <_dtoa_r+0x3d6>
   2ef72:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2ef76:	f04f 0a02 	mov.w	sl, #2
   2ef7a:	e56e      	b.n	2ea5a <_dtoa_r+0x7ea>
   2ef7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ef7e:	2b00      	cmp	r3, #0
   2ef80:	f43f aeb8 	beq.w	2ecf4 <_dtoa_r+0xa84>
   2ef84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2ef86:	2b00      	cmp	r3, #0
   2ef88:	f77f aede 	ble.w	2ed48 <_dtoa_r+0xad8>
   2ef8c:	2200      	movs	r2, #0
   2ef8e:	4b24      	ldr	r3, [pc, #144]	; (2f020 <_dtoa_r+0xdb0>)
   2ef90:	4638      	mov	r0, r7
   2ef92:	4641      	mov	r1, r8
   2ef94:	f7d1 fdda 	bl	b4c <__aeabi_dmul>
   2ef98:	4607      	mov	r7, r0
   2ef9a:	4688      	mov	r8, r1
   2ef9c:	f10a 0001 	add.w	r0, sl, #1
   2efa0:	f7d1 fd6e 	bl	a80 <__aeabi_i2d>
   2efa4:	463a      	mov	r2, r7
   2efa6:	4643      	mov	r3, r8
   2efa8:	f7d1 fdd0 	bl	b4c <__aeabi_dmul>
   2efac:	2200      	movs	r2, #0
   2efae:	4b17      	ldr	r3, [pc, #92]	; (2f00c <_dtoa_r+0xd9c>)
   2efb0:	f7d1 fc1a 	bl	7e8 <__adddf3>
   2efb4:	9a02      	ldr	r2, [sp, #8]
   2efb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2efb8:	9312      	str	r3, [sp, #72]	; 0x48
   2efba:	3a01      	subs	r2, #1
   2efbc:	4605      	mov	r5, r0
   2efbe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2efc2:	9215      	str	r2, [sp, #84]	; 0x54
   2efc4:	e56a      	b.n	2ea9c <_dtoa_r+0x82c>
   2efc6:	2239      	movs	r2, #57	; 0x39
   2efc8:	46b3      	mov	fp, r6
   2efca:	703a      	strb	r2, [r7, #0]
   2efcc:	9e06      	ldr	r6, [sp, #24]
   2efce:	1c7d      	adds	r5, r7, #1
   2efd0:	e4c0      	b.n	2e954 <_dtoa_r+0x6e4>
   2efd2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2efd6:	2000      	movs	r0, #0
   2efd8:	4910      	ldr	r1, [pc, #64]	; (2f01c <_dtoa_r+0xdac>)
   2efda:	f7d1 fc03 	bl	7e4 <__aeabi_dsub>
   2efde:	4632      	mov	r2, r6
   2efe0:	463b      	mov	r3, r7
   2efe2:	f7d2 f843 	bl	106c <__aeabi_dcmpgt>
   2efe6:	b908      	cbnz	r0, 2efec <_dtoa_r+0xd7c>
   2efe8:	e6ae      	b.n	2ed48 <_dtoa_r+0xad8>
   2efea:	4615      	mov	r5, r2
   2efec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2eff0:	2b30      	cmp	r3, #48	; 0x30
   2eff2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2eff6:	d0f8      	beq.n	2efea <_dtoa_r+0xd7a>
   2eff8:	e5d7      	b.n	2ebaa <_dtoa_r+0x93a>
   2effa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2effe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2f000:	9302      	str	r3, [sp, #8]
   2f002:	f7ff bae8 	b.w	2e5d6 <_dtoa_r+0x366>
   2f006:	970c      	str	r7, [sp, #48]	; 0x30
   2f008:	f7ff bba5 	b.w	2e756 <_dtoa_r+0x4e6>
   2f00c:	401c0000 	.word	0x401c0000
   2f010:	40140000 	.word	0x40140000
   2f014:	00034df0 	.word	0x00034df0
   2f018:	00034dc8 	.word	0x00034dc8
   2f01c:	3fe00000 	.word	0x3fe00000
   2f020:	40240000 	.word	0x40240000
   2f024:	2b39      	cmp	r3, #57	; 0x39
   2f026:	f8cd b018 	str.w	fp, [sp, #24]
   2f02a:	46d0      	mov	r8, sl
   2f02c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2f030:	469a      	mov	sl, r3
   2f032:	d0c8      	beq.n	2efc6 <_dtoa_r+0xd56>
   2f034:	f1bb 0f00 	cmp.w	fp, #0
   2f038:	f73f aebf 	bgt.w	2edba <_dtoa_r+0xb4a>
   2f03c:	e6bf      	b.n	2edbe <_dtoa_r+0xb4e>
   2f03e:	f47f aebe 	bne.w	2edbe <_dtoa_r+0xb4e>
   2f042:	f01a 0f01 	tst.w	sl, #1
   2f046:	f43f aeba 	beq.w	2edbe <_dtoa_r+0xb4e>
   2f04a:	e6b2      	b.n	2edb2 <_dtoa_r+0xb42>
   2f04c:	f04f 0800 	mov.w	r8, #0
   2f050:	4646      	mov	r6, r8
   2f052:	e5e9      	b.n	2ec28 <_dtoa_r+0x9b8>
   2f054:	4631      	mov	r1, r6
   2f056:	2300      	movs	r3, #0
   2f058:	220a      	movs	r2, #10
   2f05a:	4620      	mov	r0, r4
   2f05c:	f000 f9aa 	bl	2f3b4 <__multadd>
   2f060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f062:	2b00      	cmp	r3, #0
   2f064:	4606      	mov	r6, r0
   2f066:	dd0a      	ble.n	2f07e <_dtoa_r+0xe0e>
   2f068:	930a      	str	r3, [sp, #40]	; 0x28
   2f06a:	f7ff bbaa 	b.w	2e7c2 <_dtoa_r+0x552>
   2f06e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2f070:	2b02      	cmp	r3, #2
   2f072:	dc23      	bgt.n	2f0bc <_dtoa_r+0xe4c>
   2f074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f076:	e43b      	b.n	2e8f0 <_dtoa_r+0x680>
   2f078:	f04f 0a02 	mov.w	sl, #2
   2f07c:	e4ed      	b.n	2ea5a <_dtoa_r+0x7ea>
   2f07e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2f080:	2b02      	cmp	r3, #2
   2f082:	dc1b      	bgt.n	2f0bc <_dtoa_r+0xe4c>
   2f084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f086:	e7ef      	b.n	2f068 <_dtoa_r+0xdf8>
   2f088:	2500      	movs	r5, #0
   2f08a:	6465      	str	r5, [r4, #68]	; 0x44
   2f08c:	4629      	mov	r1, r5
   2f08e:	4620      	mov	r0, r4
   2f090:	f000 f960 	bl	2f354 <_Balloc>
   2f094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f098:	930a      	str	r3, [sp, #40]	; 0x28
   2f09a:	930f      	str	r3, [sp, #60]	; 0x3c
   2f09c:	2301      	movs	r3, #1
   2f09e:	9004      	str	r0, [sp, #16]
   2f0a0:	9525      	str	r5, [sp, #148]	; 0x94
   2f0a2:	6420      	str	r0, [r4, #64]	; 0x40
   2f0a4:	930b      	str	r3, [sp, #44]	; 0x2c
   2f0a6:	f7ff b9dd 	b.w	2e464 <_dtoa_r+0x1f4>
   2f0aa:	2501      	movs	r5, #1
   2f0ac:	f7ff b9a5 	b.w	2e3fa <_dtoa_r+0x18a>
   2f0b0:	f43f ab69 	beq.w	2e786 <_dtoa_r+0x516>
   2f0b4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2f0b8:	f7ff bbf9 	b.w	2e8ae <_dtoa_r+0x63e>
   2f0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f0be:	930a      	str	r3, [sp, #40]	; 0x28
   2f0c0:	e5e5      	b.n	2ec8e <_dtoa_r+0xa1e>
   2f0c2:	bf00      	nop

0002f0c4 <_malloc_trim_r>:
   2f0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f0c6:	4f24      	ldr	r7, [pc, #144]	; (2f158 <_malloc_trim_r+0x94>)
   2f0c8:	460c      	mov	r4, r1
   2f0ca:	4606      	mov	r6, r0
   2f0cc:	f7fd f824 	bl	2c118 <__malloc_lock>
   2f0d0:	68bb      	ldr	r3, [r7, #8]
   2f0d2:	685d      	ldr	r5, [r3, #4]
   2f0d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2f0d8:	310f      	adds	r1, #15
   2f0da:	f025 0503 	bic.w	r5, r5, #3
   2f0de:	4429      	add	r1, r5
   2f0e0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2f0e4:	f021 010f 	bic.w	r1, r1, #15
   2f0e8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2f0ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2f0f0:	db07      	blt.n	2f102 <_malloc_trim_r+0x3e>
   2f0f2:	2100      	movs	r1, #0
   2f0f4:	4630      	mov	r0, r6
   2f0f6:	f7fd f83b 	bl	2c170 <_sbrk_r>
   2f0fa:	68bb      	ldr	r3, [r7, #8]
   2f0fc:	442b      	add	r3, r5
   2f0fe:	4298      	cmp	r0, r3
   2f100:	d004      	beq.n	2f10c <_malloc_trim_r+0x48>
   2f102:	4630      	mov	r0, r6
   2f104:	f7fd f80e 	bl	2c124 <__malloc_unlock>
   2f108:	2000      	movs	r0, #0
   2f10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f10c:	4261      	negs	r1, r4
   2f10e:	4630      	mov	r0, r6
   2f110:	f7fd f82e 	bl	2c170 <_sbrk_r>
   2f114:	3001      	adds	r0, #1
   2f116:	d00d      	beq.n	2f134 <_malloc_trim_r+0x70>
   2f118:	4b10      	ldr	r3, [pc, #64]	; (2f15c <_malloc_trim_r+0x98>)
   2f11a:	68ba      	ldr	r2, [r7, #8]
   2f11c:	6819      	ldr	r1, [r3, #0]
   2f11e:	1b2d      	subs	r5, r5, r4
   2f120:	f045 0501 	orr.w	r5, r5, #1
   2f124:	4630      	mov	r0, r6
   2f126:	1b09      	subs	r1, r1, r4
   2f128:	6055      	str	r5, [r2, #4]
   2f12a:	6019      	str	r1, [r3, #0]
   2f12c:	f7fc fffa 	bl	2c124 <__malloc_unlock>
   2f130:	2001      	movs	r0, #1
   2f132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f134:	2100      	movs	r1, #0
   2f136:	4630      	mov	r0, r6
   2f138:	f7fd f81a 	bl	2c170 <_sbrk_r>
   2f13c:	68ba      	ldr	r2, [r7, #8]
   2f13e:	1a83      	subs	r3, r0, r2
   2f140:	2b0f      	cmp	r3, #15
   2f142:	ddde      	ble.n	2f102 <_malloc_trim_r+0x3e>
   2f144:	4c06      	ldr	r4, [pc, #24]	; (2f160 <_malloc_trim_r+0x9c>)
   2f146:	4905      	ldr	r1, [pc, #20]	; (2f15c <_malloc_trim_r+0x98>)
   2f148:	6824      	ldr	r4, [r4, #0]
   2f14a:	f043 0301 	orr.w	r3, r3, #1
   2f14e:	1b00      	subs	r0, r0, r4
   2f150:	6053      	str	r3, [r2, #4]
   2f152:	6008      	str	r0, [r1, #0]
   2f154:	e7d5      	b.n	2f102 <_malloc_trim_r+0x3e>
   2f156:	bf00      	nop
   2f158:	2000cbb4 	.word	0x2000cbb4
   2f15c:	20002930 	.word	0x20002930
   2f160:	2000cfbc 	.word	0x2000cfbc

0002f164 <_free_r>:
   2f164:	2900      	cmp	r1, #0
   2f166:	d044      	beq.n	2f1f2 <_free_r+0x8e>
   2f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f16c:	460d      	mov	r5, r1
   2f16e:	4680      	mov	r8, r0
   2f170:	f7fc ffd2 	bl	2c118 <__malloc_lock>
   2f174:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2f178:	4969      	ldr	r1, [pc, #420]	; (2f320 <_free_r+0x1bc>)
   2f17a:	f027 0301 	bic.w	r3, r7, #1
   2f17e:	f1a5 0408 	sub.w	r4, r5, #8
   2f182:	18e2      	adds	r2, r4, r3
   2f184:	688e      	ldr	r6, [r1, #8]
   2f186:	6850      	ldr	r0, [r2, #4]
   2f188:	42b2      	cmp	r2, r6
   2f18a:	f020 0003 	bic.w	r0, r0, #3
   2f18e:	d05e      	beq.n	2f24e <_free_r+0xea>
   2f190:	07fe      	lsls	r6, r7, #31
   2f192:	6050      	str	r0, [r2, #4]
   2f194:	d40b      	bmi.n	2f1ae <_free_r+0x4a>
   2f196:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2f19a:	1be4      	subs	r4, r4, r7
   2f19c:	f101 0e08 	add.w	lr, r1, #8
   2f1a0:	68a5      	ldr	r5, [r4, #8]
   2f1a2:	4575      	cmp	r5, lr
   2f1a4:	443b      	add	r3, r7
   2f1a6:	d06d      	beq.n	2f284 <_free_r+0x120>
   2f1a8:	68e7      	ldr	r7, [r4, #12]
   2f1aa:	60ef      	str	r7, [r5, #12]
   2f1ac:	60bd      	str	r5, [r7, #8]
   2f1ae:	1815      	adds	r5, r2, r0
   2f1b0:	686d      	ldr	r5, [r5, #4]
   2f1b2:	07ed      	lsls	r5, r5, #31
   2f1b4:	d53e      	bpl.n	2f234 <_free_r+0xd0>
   2f1b6:	f043 0201 	orr.w	r2, r3, #1
   2f1ba:	6062      	str	r2, [r4, #4]
   2f1bc:	50e3      	str	r3, [r4, r3]
   2f1be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2f1c2:	d217      	bcs.n	2f1f4 <_free_r+0x90>
   2f1c4:	08db      	lsrs	r3, r3, #3
   2f1c6:	1c58      	adds	r0, r3, #1
   2f1c8:	109a      	asrs	r2, r3, #2
   2f1ca:	684d      	ldr	r5, [r1, #4]
   2f1cc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2f1d0:	60a7      	str	r7, [r4, #8]
   2f1d2:	2301      	movs	r3, #1
   2f1d4:	4093      	lsls	r3, r2
   2f1d6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2f1da:	432b      	orrs	r3, r5
   2f1dc:	3a08      	subs	r2, #8
   2f1de:	60e2      	str	r2, [r4, #12]
   2f1e0:	604b      	str	r3, [r1, #4]
   2f1e2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2f1e6:	60fc      	str	r4, [r7, #12]
   2f1e8:	4640      	mov	r0, r8
   2f1ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f1ee:	f7fc bf99 	b.w	2c124 <__malloc_unlock>
   2f1f2:	4770      	bx	lr
   2f1f4:	0a5a      	lsrs	r2, r3, #9
   2f1f6:	2a04      	cmp	r2, #4
   2f1f8:	d852      	bhi.n	2f2a0 <_free_r+0x13c>
   2f1fa:	099a      	lsrs	r2, r3, #6
   2f1fc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2f200:	00ff      	lsls	r7, r7, #3
   2f202:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2f206:	19c8      	adds	r0, r1, r7
   2f208:	59ca      	ldr	r2, [r1, r7]
   2f20a:	3808      	subs	r0, #8
   2f20c:	4290      	cmp	r0, r2
   2f20e:	d04f      	beq.n	2f2b0 <_free_r+0x14c>
   2f210:	6851      	ldr	r1, [r2, #4]
   2f212:	f021 0103 	bic.w	r1, r1, #3
   2f216:	428b      	cmp	r3, r1
   2f218:	d232      	bcs.n	2f280 <_free_r+0x11c>
   2f21a:	6892      	ldr	r2, [r2, #8]
   2f21c:	4290      	cmp	r0, r2
   2f21e:	d1f7      	bne.n	2f210 <_free_r+0xac>
   2f220:	68c3      	ldr	r3, [r0, #12]
   2f222:	60a0      	str	r0, [r4, #8]
   2f224:	60e3      	str	r3, [r4, #12]
   2f226:	609c      	str	r4, [r3, #8]
   2f228:	60c4      	str	r4, [r0, #12]
   2f22a:	4640      	mov	r0, r8
   2f22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2f230:	f7fc bf78 	b.w	2c124 <__malloc_unlock>
   2f234:	6895      	ldr	r5, [r2, #8]
   2f236:	4f3b      	ldr	r7, [pc, #236]	; (2f324 <_free_r+0x1c0>)
   2f238:	42bd      	cmp	r5, r7
   2f23a:	4403      	add	r3, r0
   2f23c:	d040      	beq.n	2f2c0 <_free_r+0x15c>
   2f23e:	68d0      	ldr	r0, [r2, #12]
   2f240:	60e8      	str	r0, [r5, #12]
   2f242:	f043 0201 	orr.w	r2, r3, #1
   2f246:	6085      	str	r5, [r0, #8]
   2f248:	6062      	str	r2, [r4, #4]
   2f24a:	50e3      	str	r3, [r4, r3]
   2f24c:	e7b7      	b.n	2f1be <_free_r+0x5a>
   2f24e:	07ff      	lsls	r7, r7, #31
   2f250:	4403      	add	r3, r0
   2f252:	d407      	bmi.n	2f264 <_free_r+0x100>
   2f254:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2f258:	1aa4      	subs	r4, r4, r2
   2f25a:	4413      	add	r3, r2
   2f25c:	68a0      	ldr	r0, [r4, #8]
   2f25e:	68e2      	ldr	r2, [r4, #12]
   2f260:	60c2      	str	r2, [r0, #12]
   2f262:	6090      	str	r0, [r2, #8]
   2f264:	4a30      	ldr	r2, [pc, #192]	; (2f328 <_free_r+0x1c4>)
   2f266:	6812      	ldr	r2, [r2, #0]
   2f268:	f043 0001 	orr.w	r0, r3, #1
   2f26c:	4293      	cmp	r3, r2
   2f26e:	6060      	str	r0, [r4, #4]
   2f270:	608c      	str	r4, [r1, #8]
   2f272:	d3b9      	bcc.n	2f1e8 <_free_r+0x84>
   2f274:	4b2d      	ldr	r3, [pc, #180]	; (2f32c <_free_r+0x1c8>)
   2f276:	4640      	mov	r0, r8
   2f278:	6819      	ldr	r1, [r3, #0]
   2f27a:	f7ff ff23 	bl	2f0c4 <_malloc_trim_r>
   2f27e:	e7b3      	b.n	2f1e8 <_free_r+0x84>
   2f280:	4610      	mov	r0, r2
   2f282:	e7cd      	b.n	2f220 <_free_r+0xbc>
   2f284:	1811      	adds	r1, r2, r0
   2f286:	6849      	ldr	r1, [r1, #4]
   2f288:	07c9      	lsls	r1, r1, #31
   2f28a:	d444      	bmi.n	2f316 <_free_r+0x1b2>
   2f28c:	6891      	ldr	r1, [r2, #8]
   2f28e:	68d2      	ldr	r2, [r2, #12]
   2f290:	60ca      	str	r2, [r1, #12]
   2f292:	4403      	add	r3, r0
   2f294:	f043 0001 	orr.w	r0, r3, #1
   2f298:	6091      	str	r1, [r2, #8]
   2f29a:	6060      	str	r0, [r4, #4]
   2f29c:	50e3      	str	r3, [r4, r3]
   2f29e:	e7a3      	b.n	2f1e8 <_free_r+0x84>
   2f2a0:	2a14      	cmp	r2, #20
   2f2a2:	d816      	bhi.n	2f2d2 <_free_r+0x16e>
   2f2a4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2f2a8:	00ff      	lsls	r7, r7, #3
   2f2aa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2f2ae:	e7aa      	b.n	2f206 <_free_r+0xa2>
   2f2b0:	10aa      	asrs	r2, r5, #2
   2f2b2:	2301      	movs	r3, #1
   2f2b4:	684d      	ldr	r5, [r1, #4]
   2f2b6:	4093      	lsls	r3, r2
   2f2b8:	432b      	orrs	r3, r5
   2f2ba:	604b      	str	r3, [r1, #4]
   2f2bc:	4603      	mov	r3, r0
   2f2be:	e7b0      	b.n	2f222 <_free_r+0xbe>
   2f2c0:	f043 0201 	orr.w	r2, r3, #1
   2f2c4:	614c      	str	r4, [r1, #20]
   2f2c6:	610c      	str	r4, [r1, #16]
   2f2c8:	60e5      	str	r5, [r4, #12]
   2f2ca:	60a5      	str	r5, [r4, #8]
   2f2cc:	6062      	str	r2, [r4, #4]
   2f2ce:	50e3      	str	r3, [r4, r3]
   2f2d0:	e78a      	b.n	2f1e8 <_free_r+0x84>
   2f2d2:	2a54      	cmp	r2, #84	; 0x54
   2f2d4:	d806      	bhi.n	2f2e4 <_free_r+0x180>
   2f2d6:	0b1a      	lsrs	r2, r3, #12
   2f2d8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2f2dc:	00ff      	lsls	r7, r7, #3
   2f2de:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2f2e2:	e790      	b.n	2f206 <_free_r+0xa2>
   2f2e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2f2e8:	d806      	bhi.n	2f2f8 <_free_r+0x194>
   2f2ea:	0bda      	lsrs	r2, r3, #15
   2f2ec:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2f2f0:	00ff      	lsls	r7, r7, #3
   2f2f2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2f2f6:	e786      	b.n	2f206 <_free_r+0xa2>
   2f2f8:	f240 5054 	movw	r0, #1364	; 0x554
   2f2fc:	4282      	cmp	r2, r0
   2f2fe:	d806      	bhi.n	2f30e <_free_r+0x1aa>
   2f300:	0c9a      	lsrs	r2, r3, #18
   2f302:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2f306:	00ff      	lsls	r7, r7, #3
   2f308:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2f30c:	e77b      	b.n	2f206 <_free_r+0xa2>
   2f30e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2f312:	257e      	movs	r5, #126	; 0x7e
   2f314:	e777      	b.n	2f206 <_free_r+0xa2>
   2f316:	f043 0101 	orr.w	r1, r3, #1
   2f31a:	6061      	str	r1, [r4, #4]
   2f31c:	6013      	str	r3, [r2, #0]
   2f31e:	e763      	b.n	2f1e8 <_free_r+0x84>
   2f320:	2000cbb4 	.word	0x2000cbb4
   2f324:	2000cbbc 	.word	0x2000cbbc
   2f328:	2000cfc0 	.word	0x2000cfc0
   2f32c:	20002960 	.word	0x20002960

0002f330 <_localeconv_r>:
   2f330:	4a04      	ldr	r2, [pc, #16]	; (2f344 <_localeconv_r+0x14>)
   2f332:	4b05      	ldr	r3, [pc, #20]	; (2f348 <_localeconv_r+0x18>)
   2f334:	6812      	ldr	r2, [r2, #0]
   2f336:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2f338:	2800      	cmp	r0, #0
   2f33a:	bf08      	it	eq
   2f33c:	4618      	moveq	r0, r3
   2f33e:	30f0      	adds	r0, #240	; 0xf0
   2f340:	4770      	bx	lr
   2f342:	bf00      	nop
   2f344:	2000c618 	.word	0x2000c618
   2f348:	2000ca48 	.word	0x2000ca48

0002f34c <__retarget_lock_acquire_recursive>:
   2f34c:	4770      	bx	lr
   2f34e:	bf00      	nop

0002f350 <__retarget_lock_release_recursive>:
   2f350:	4770      	bx	lr
   2f352:	bf00      	nop

0002f354 <_Balloc>:
   2f354:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2f356:	b570      	push	{r4, r5, r6, lr}
   2f358:	4605      	mov	r5, r0
   2f35a:	460c      	mov	r4, r1
   2f35c:	b14b      	cbz	r3, 2f372 <_Balloc+0x1e>
   2f35e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2f362:	b180      	cbz	r0, 2f386 <_Balloc+0x32>
   2f364:	6802      	ldr	r2, [r0, #0]
   2f366:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2f36a:	2300      	movs	r3, #0
   2f36c:	6103      	str	r3, [r0, #16]
   2f36e:	60c3      	str	r3, [r0, #12]
   2f370:	bd70      	pop	{r4, r5, r6, pc}
   2f372:	2221      	movs	r2, #33	; 0x21
   2f374:	2104      	movs	r1, #4
   2f376:	f7fc fae5 	bl	2b944 <_calloc_r>
   2f37a:	64e8      	str	r0, [r5, #76]	; 0x4c
   2f37c:	4603      	mov	r3, r0
   2f37e:	2800      	cmp	r0, #0
   2f380:	d1ed      	bne.n	2f35e <_Balloc+0xa>
   2f382:	2000      	movs	r0, #0
   2f384:	bd70      	pop	{r4, r5, r6, pc}
   2f386:	2101      	movs	r1, #1
   2f388:	fa01 f604 	lsl.w	r6, r1, r4
   2f38c:	1d72      	adds	r2, r6, #5
   2f38e:	4628      	mov	r0, r5
   2f390:	0092      	lsls	r2, r2, #2
   2f392:	f7fc fad7 	bl	2b944 <_calloc_r>
   2f396:	2800      	cmp	r0, #0
   2f398:	d0f3      	beq.n	2f382 <_Balloc+0x2e>
   2f39a:	6044      	str	r4, [r0, #4]
   2f39c:	6086      	str	r6, [r0, #8]
   2f39e:	e7e4      	b.n	2f36a <_Balloc+0x16>

0002f3a0 <_Bfree>:
   2f3a0:	b131      	cbz	r1, 2f3b0 <_Bfree+0x10>
   2f3a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2f3a4:	684a      	ldr	r2, [r1, #4]
   2f3a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2f3aa:	6008      	str	r0, [r1, #0]
   2f3ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2f3b0:	4770      	bx	lr
   2f3b2:	bf00      	nop

0002f3b4 <__multadd>:
   2f3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f3b6:	690c      	ldr	r4, [r1, #16]
   2f3b8:	b083      	sub	sp, #12
   2f3ba:	460d      	mov	r5, r1
   2f3bc:	4606      	mov	r6, r0
   2f3be:	f101 0e14 	add.w	lr, r1, #20
   2f3c2:	2700      	movs	r7, #0
   2f3c4:	f8de 0000 	ldr.w	r0, [lr]
   2f3c8:	b281      	uxth	r1, r0
   2f3ca:	fb02 3301 	mla	r3, r2, r1, r3
   2f3ce:	0c01      	lsrs	r1, r0, #16
   2f3d0:	0c18      	lsrs	r0, r3, #16
   2f3d2:	fb02 0101 	mla	r1, r2, r1, r0
   2f3d6:	b29b      	uxth	r3, r3
   2f3d8:	3701      	adds	r7, #1
   2f3da:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2f3de:	42bc      	cmp	r4, r7
   2f3e0:	f84e 3b04 	str.w	r3, [lr], #4
   2f3e4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2f3e8:	dcec      	bgt.n	2f3c4 <__multadd+0x10>
   2f3ea:	b13b      	cbz	r3, 2f3fc <__multadd+0x48>
   2f3ec:	68aa      	ldr	r2, [r5, #8]
   2f3ee:	4294      	cmp	r4, r2
   2f3f0:	da07      	bge.n	2f402 <__multadd+0x4e>
   2f3f2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2f3f6:	3401      	adds	r4, #1
   2f3f8:	6153      	str	r3, [r2, #20]
   2f3fa:	612c      	str	r4, [r5, #16]
   2f3fc:	4628      	mov	r0, r5
   2f3fe:	b003      	add	sp, #12
   2f400:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f402:	6869      	ldr	r1, [r5, #4]
   2f404:	9301      	str	r3, [sp, #4]
   2f406:	3101      	adds	r1, #1
   2f408:	4630      	mov	r0, r6
   2f40a:	f7ff ffa3 	bl	2f354 <_Balloc>
   2f40e:	692a      	ldr	r2, [r5, #16]
   2f410:	3202      	adds	r2, #2
   2f412:	f105 010c 	add.w	r1, r5, #12
   2f416:	4607      	mov	r7, r0
   2f418:	0092      	lsls	r2, r2, #2
   2f41a:	300c      	adds	r0, #12
   2f41c:	f7d0 ff50 	bl	2c0 <memcpy>
   2f420:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2f422:	6869      	ldr	r1, [r5, #4]
   2f424:	9b01      	ldr	r3, [sp, #4]
   2f426:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2f42a:	6028      	str	r0, [r5, #0]
   2f42c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2f430:	463d      	mov	r5, r7
   2f432:	e7de      	b.n	2f3f2 <__multadd+0x3e>

0002f434 <__hi0bits>:
   2f434:	0c02      	lsrs	r2, r0, #16
   2f436:	0412      	lsls	r2, r2, #16
   2f438:	4603      	mov	r3, r0
   2f43a:	b9b2      	cbnz	r2, 2f46a <__hi0bits+0x36>
   2f43c:	0403      	lsls	r3, r0, #16
   2f43e:	2010      	movs	r0, #16
   2f440:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2f444:	bf04      	itt	eq
   2f446:	021b      	lsleq	r3, r3, #8
   2f448:	3008      	addeq	r0, #8
   2f44a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2f44e:	bf04      	itt	eq
   2f450:	011b      	lsleq	r3, r3, #4
   2f452:	3004      	addeq	r0, #4
   2f454:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2f458:	bf04      	itt	eq
   2f45a:	009b      	lsleq	r3, r3, #2
   2f45c:	3002      	addeq	r0, #2
   2f45e:	2b00      	cmp	r3, #0
   2f460:	db02      	blt.n	2f468 <__hi0bits+0x34>
   2f462:	005b      	lsls	r3, r3, #1
   2f464:	d403      	bmi.n	2f46e <__hi0bits+0x3a>
   2f466:	2020      	movs	r0, #32
   2f468:	4770      	bx	lr
   2f46a:	2000      	movs	r0, #0
   2f46c:	e7e8      	b.n	2f440 <__hi0bits+0xc>
   2f46e:	3001      	adds	r0, #1
   2f470:	4770      	bx	lr
   2f472:	bf00      	nop

0002f474 <__lo0bits>:
   2f474:	6803      	ldr	r3, [r0, #0]
   2f476:	f013 0207 	ands.w	r2, r3, #7
   2f47a:	4601      	mov	r1, r0
   2f47c:	d007      	beq.n	2f48e <__lo0bits+0x1a>
   2f47e:	07da      	lsls	r2, r3, #31
   2f480:	d421      	bmi.n	2f4c6 <__lo0bits+0x52>
   2f482:	0798      	lsls	r0, r3, #30
   2f484:	d421      	bmi.n	2f4ca <__lo0bits+0x56>
   2f486:	089b      	lsrs	r3, r3, #2
   2f488:	600b      	str	r3, [r1, #0]
   2f48a:	2002      	movs	r0, #2
   2f48c:	4770      	bx	lr
   2f48e:	b298      	uxth	r0, r3
   2f490:	b198      	cbz	r0, 2f4ba <__lo0bits+0x46>
   2f492:	4610      	mov	r0, r2
   2f494:	f013 0fff 	tst.w	r3, #255	; 0xff
   2f498:	bf04      	itt	eq
   2f49a:	0a1b      	lsreq	r3, r3, #8
   2f49c:	3008      	addeq	r0, #8
   2f49e:	071a      	lsls	r2, r3, #28
   2f4a0:	bf04      	itt	eq
   2f4a2:	091b      	lsreq	r3, r3, #4
   2f4a4:	3004      	addeq	r0, #4
   2f4a6:	079a      	lsls	r2, r3, #30
   2f4a8:	bf04      	itt	eq
   2f4aa:	089b      	lsreq	r3, r3, #2
   2f4ac:	3002      	addeq	r0, #2
   2f4ae:	07da      	lsls	r2, r3, #31
   2f4b0:	d407      	bmi.n	2f4c2 <__lo0bits+0x4e>
   2f4b2:	085b      	lsrs	r3, r3, #1
   2f4b4:	d104      	bne.n	2f4c0 <__lo0bits+0x4c>
   2f4b6:	2020      	movs	r0, #32
   2f4b8:	4770      	bx	lr
   2f4ba:	0c1b      	lsrs	r3, r3, #16
   2f4bc:	2010      	movs	r0, #16
   2f4be:	e7e9      	b.n	2f494 <__lo0bits+0x20>
   2f4c0:	3001      	adds	r0, #1
   2f4c2:	600b      	str	r3, [r1, #0]
   2f4c4:	4770      	bx	lr
   2f4c6:	2000      	movs	r0, #0
   2f4c8:	4770      	bx	lr
   2f4ca:	085b      	lsrs	r3, r3, #1
   2f4cc:	600b      	str	r3, [r1, #0]
   2f4ce:	2001      	movs	r0, #1
   2f4d0:	4770      	bx	lr
   2f4d2:	bf00      	nop

0002f4d4 <__i2b>:
   2f4d4:	b510      	push	{r4, lr}
   2f4d6:	460c      	mov	r4, r1
   2f4d8:	2101      	movs	r1, #1
   2f4da:	f7ff ff3b 	bl	2f354 <_Balloc>
   2f4de:	2201      	movs	r2, #1
   2f4e0:	6144      	str	r4, [r0, #20]
   2f4e2:	6102      	str	r2, [r0, #16]
   2f4e4:	bd10      	pop	{r4, pc}
   2f4e6:	bf00      	nop

0002f4e8 <__multiply>:
   2f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f4ec:	690c      	ldr	r4, [r1, #16]
   2f4ee:	6915      	ldr	r5, [r2, #16]
   2f4f0:	42ac      	cmp	r4, r5
   2f4f2:	b083      	sub	sp, #12
   2f4f4:	468b      	mov	fp, r1
   2f4f6:	4616      	mov	r6, r2
   2f4f8:	da04      	bge.n	2f504 <__multiply+0x1c>
   2f4fa:	4622      	mov	r2, r4
   2f4fc:	46b3      	mov	fp, r6
   2f4fe:	462c      	mov	r4, r5
   2f500:	460e      	mov	r6, r1
   2f502:	4615      	mov	r5, r2
   2f504:	f8db 3008 	ldr.w	r3, [fp, #8]
   2f508:	f8db 1004 	ldr.w	r1, [fp, #4]
   2f50c:	eb04 0805 	add.w	r8, r4, r5
   2f510:	4598      	cmp	r8, r3
   2f512:	bfc8      	it	gt
   2f514:	3101      	addgt	r1, #1
   2f516:	f7ff ff1d 	bl	2f354 <_Balloc>
   2f51a:	f100 0914 	add.w	r9, r0, #20
   2f51e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2f522:	45d1      	cmp	r9, sl
   2f524:	9000      	str	r0, [sp, #0]
   2f526:	d205      	bcs.n	2f534 <__multiply+0x4c>
   2f528:	464b      	mov	r3, r9
   2f52a:	2100      	movs	r1, #0
   2f52c:	f843 1b04 	str.w	r1, [r3], #4
   2f530:	459a      	cmp	sl, r3
   2f532:	d8fb      	bhi.n	2f52c <__multiply+0x44>
   2f534:	f106 0c14 	add.w	ip, r6, #20
   2f538:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2f53c:	f10b 0b14 	add.w	fp, fp, #20
   2f540:	459c      	cmp	ip, r3
   2f542:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2f546:	d24c      	bcs.n	2f5e2 <__multiply+0xfa>
   2f548:	f8cd a004 	str.w	sl, [sp, #4]
   2f54c:	469a      	mov	sl, r3
   2f54e:	f8dc 5000 	ldr.w	r5, [ip]
   2f552:	b2af      	uxth	r7, r5
   2f554:	b1ef      	cbz	r7, 2f592 <__multiply+0xaa>
   2f556:	2100      	movs	r1, #0
   2f558:	464d      	mov	r5, r9
   2f55a:	465e      	mov	r6, fp
   2f55c:	460c      	mov	r4, r1
   2f55e:	f856 2b04 	ldr.w	r2, [r6], #4
   2f562:	6828      	ldr	r0, [r5, #0]
   2f564:	b293      	uxth	r3, r2
   2f566:	b281      	uxth	r1, r0
   2f568:	fb07 1303 	mla	r3, r7, r3, r1
   2f56c:	0c12      	lsrs	r2, r2, #16
   2f56e:	0c01      	lsrs	r1, r0, #16
   2f570:	4423      	add	r3, r4
   2f572:	fb07 1102 	mla	r1, r7, r2, r1
   2f576:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2f57a:	b29b      	uxth	r3, r3
   2f57c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2f580:	45b6      	cmp	lr, r6
   2f582:	f845 3b04 	str.w	r3, [r5], #4
   2f586:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2f58a:	d8e8      	bhi.n	2f55e <__multiply+0x76>
   2f58c:	602c      	str	r4, [r5, #0]
   2f58e:	f8dc 5000 	ldr.w	r5, [ip]
   2f592:	0c2d      	lsrs	r5, r5, #16
   2f594:	d01d      	beq.n	2f5d2 <__multiply+0xea>
   2f596:	f8d9 3000 	ldr.w	r3, [r9]
   2f59a:	4648      	mov	r0, r9
   2f59c:	461c      	mov	r4, r3
   2f59e:	4659      	mov	r1, fp
   2f5a0:	2200      	movs	r2, #0
   2f5a2:	880e      	ldrh	r6, [r1, #0]
   2f5a4:	0c24      	lsrs	r4, r4, #16
   2f5a6:	fb05 4406 	mla	r4, r5, r6, r4
   2f5aa:	4422      	add	r2, r4
   2f5ac:	b29b      	uxth	r3, r3
   2f5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2f5b2:	f840 3b04 	str.w	r3, [r0], #4
   2f5b6:	f851 3b04 	ldr.w	r3, [r1], #4
   2f5ba:	6804      	ldr	r4, [r0, #0]
   2f5bc:	0c1b      	lsrs	r3, r3, #16
   2f5be:	b2a6      	uxth	r6, r4
   2f5c0:	fb05 6303 	mla	r3, r5, r3, r6
   2f5c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2f5c8:	458e      	cmp	lr, r1
   2f5ca:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2f5ce:	d8e8      	bhi.n	2f5a2 <__multiply+0xba>
   2f5d0:	6003      	str	r3, [r0, #0]
   2f5d2:	f10c 0c04 	add.w	ip, ip, #4
   2f5d6:	45e2      	cmp	sl, ip
   2f5d8:	f109 0904 	add.w	r9, r9, #4
   2f5dc:	d8b7      	bhi.n	2f54e <__multiply+0x66>
   2f5de:	f8dd a004 	ldr.w	sl, [sp, #4]
   2f5e2:	f1b8 0f00 	cmp.w	r8, #0
   2f5e6:	dd0b      	ble.n	2f600 <__multiply+0x118>
   2f5e8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2f5ec:	f1aa 0a04 	sub.w	sl, sl, #4
   2f5f0:	b11b      	cbz	r3, 2f5fa <__multiply+0x112>
   2f5f2:	e005      	b.n	2f600 <__multiply+0x118>
   2f5f4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2f5f8:	b913      	cbnz	r3, 2f600 <__multiply+0x118>
   2f5fa:	f1b8 0801 	subs.w	r8, r8, #1
   2f5fe:	d1f9      	bne.n	2f5f4 <__multiply+0x10c>
   2f600:	9800      	ldr	r0, [sp, #0]
   2f602:	f8c0 8010 	str.w	r8, [r0, #16]
   2f606:	b003      	add	sp, #12
   2f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f60c <__pow5mult>:
   2f60c:	f012 0303 	ands.w	r3, r2, #3
   2f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f614:	4614      	mov	r4, r2
   2f616:	4607      	mov	r7, r0
   2f618:	d12e      	bne.n	2f678 <__pow5mult+0x6c>
   2f61a:	460d      	mov	r5, r1
   2f61c:	10a4      	asrs	r4, r4, #2
   2f61e:	d01c      	beq.n	2f65a <__pow5mult+0x4e>
   2f620:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2f622:	b396      	cbz	r6, 2f68a <__pow5mult+0x7e>
   2f624:	07e3      	lsls	r3, r4, #31
   2f626:	f04f 0800 	mov.w	r8, #0
   2f62a:	d406      	bmi.n	2f63a <__pow5mult+0x2e>
   2f62c:	1064      	asrs	r4, r4, #1
   2f62e:	d014      	beq.n	2f65a <__pow5mult+0x4e>
   2f630:	6830      	ldr	r0, [r6, #0]
   2f632:	b1a8      	cbz	r0, 2f660 <__pow5mult+0x54>
   2f634:	4606      	mov	r6, r0
   2f636:	07e3      	lsls	r3, r4, #31
   2f638:	d5f8      	bpl.n	2f62c <__pow5mult+0x20>
   2f63a:	4632      	mov	r2, r6
   2f63c:	4629      	mov	r1, r5
   2f63e:	4638      	mov	r0, r7
   2f640:	f7ff ff52 	bl	2f4e8 <__multiply>
   2f644:	b1b5      	cbz	r5, 2f674 <__pow5mult+0x68>
   2f646:	686a      	ldr	r2, [r5, #4]
   2f648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2f64a:	1064      	asrs	r4, r4, #1
   2f64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2f650:	6029      	str	r1, [r5, #0]
   2f652:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2f656:	4605      	mov	r5, r0
   2f658:	d1ea      	bne.n	2f630 <__pow5mult+0x24>
   2f65a:	4628      	mov	r0, r5
   2f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f660:	4632      	mov	r2, r6
   2f662:	4631      	mov	r1, r6
   2f664:	4638      	mov	r0, r7
   2f666:	f7ff ff3f 	bl	2f4e8 <__multiply>
   2f66a:	6030      	str	r0, [r6, #0]
   2f66c:	f8c0 8000 	str.w	r8, [r0]
   2f670:	4606      	mov	r6, r0
   2f672:	e7e0      	b.n	2f636 <__pow5mult+0x2a>
   2f674:	4605      	mov	r5, r0
   2f676:	e7d9      	b.n	2f62c <__pow5mult+0x20>
   2f678:	1e5a      	subs	r2, r3, #1
   2f67a:	4d0b      	ldr	r5, [pc, #44]	; (2f6a8 <__pow5mult+0x9c>)
   2f67c:	2300      	movs	r3, #0
   2f67e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2f682:	f7ff fe97 	bl	2f3b4 <__multadd>
   2f686:	4605      	mov	r5, r0
   2f688:	e7c8      	b.n	2f61c <__pow5mult+0x10>
   2f68a:	2101      	movs	r1, #1
   2f68c:	4638      	mov	r0, r7
   2f68e:	f7ff fe61 	bl	2f354 <_Balloc>
   2f692:	f240 2171 	movw	r1, #625	; 0x271
   2f696:	2201      	movs	r2, #1
   2f698:	2300      	movs	r3, #0
   2f69a:	6141      	str	r1, [r0, #20]
   2f69c:	6102      	str	r2, [r0, #16]
   2f69e:	4606      	mov	r6, r0
   2f6a0:	64b8      	str	r0, [r7, #72]	; 0x48
   2f6a2:	6003      	str	r3, [r0, #0]
   2f6a4:	e7be      	b.n	2f624 <__pow5mult+0x18>
   2f6a6:	bf00      	nop
   2f6a8:	00034eb8 	.word	0x00034eb8

0002f6ac <__lshift>:
   2f6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f6b0:	4691      	mov	r9, r2
   2f6b2:	690a      	ldr	r2, [r1, #16]
   2f6b4:	688b      	ldr	r3, [r1, #8]
   2f6b6:	ea4f 1469 	mov.w	r4, r9, asr #5
   2f6ba:	eb04 0802 	add.w	r8, r4, r2
   2f6be:	f108 0501 	add.w	r5, r8, #1
   2f6c2:	429d      	cmp	r5, r3
   2f6c4:	460e      	mov	r6, r1
   2f6c6:	4607      	mov	r7, r0
   2f6c8:	6849      	ldr	r1, [r1, #4]
   2f6ca:	dd04      	ble.n	2f6d6 <__lshift+0x2a>
   2f6cc:	005b      	lsls	r3, r3, #1
   2f6ce:	429d      	cmp	r5, r3
   2f6d0:	f101 0101 	add.w	r1, r1, #1
   2f6d4:	dcfa      	bgt.n	2f6cc <__lshift+0x20>
   2f6d6:	4638      	mov	r0, r7
   2f6d8:	f7ff fe3c 	bl	2f354 <_Balloc>
   2f6dc:	2c00      	cmp	r4, #0
   2f6de:	f100 0314 	add.w	r3, r0, #20
   2f6e2:	dd06      	ble.n	2f6f2 <__lshift+0x46>
   2f6e4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2f6e8:	2100      	movs	r1, #0
   2f6ea:	f843 1b04 	str.w	r1, [r3], #4
   2f6ee:	429a      	cmp	r2, r3
   2f6f0:	d1fb      	bne.n	2f6ea <__lshift+0x3e>
   2f6f2:	6934      	ldr	r4, [r6, #16]
   2f6f4:	f106 0114 	add.w	r1, r6, #20
   2f6f8:	f019 091f 	ands.w	r9, r9, #31
   2f6fc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2f700:	d01d      	beq.n	2f73e <__lshift+0x92>
   2f702:	f1c9 0c20 	rsb	ip, r9, #32
   2f706:	2200      	movs	r2, #0
   2f708:	680c      	ldr	r4, [r1, #0]
   2f70a:	fa04 f409 	lsl.w	r4, r4, r9
   2f70e:	4314      	orrs	r4, r2
   2f710:	f843 4b04 	str.w	r4, [r3], #4
   2f714:	f851 2b04 	ldr.w	r2, [r1], #4
   2f718:	458e      	cmp	lr, r1
   2f71a:	fa22 f20c 	lsr.w	r2, r2, ip
   2f71e:	d8f3      	bhi.n	2f708 <__lshift+0x5c>
   2f720:	601a      	str	r2, [r3, #0]
   2f722:	b10a      	cbz	r2, 2f728 <__lshift+0x7c>
   2f724:	f108 0502 	add.w	r5, r8, #2
   2f728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2f72a:	6872      	ldr	r2, [r6, #4]
   2f72c:	3d01      	subs	r5, #1
   2f72e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2f732:	6105      	str	r5, [r0, #16]
   2f734:	6031      	str	r1, [r6, #0]
   2f736:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2f73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f73e:	3b04      	subs	r3, #4
   2f740:	f851 2b04 	ldr.w	r2, [r1], #4
   2f744:	f843 2f04 	str.w	r2, [r3, #4]!
   2f748:	458e      	cmp	lr, r1
   2f74a:	d8f9      	bhi.n	2f740 <__lshift+0x94>
   2f74c:	e7ec      	b.n	2f728 <__lshift+0x7c>
   2f74e:	bf00      	nop

0002f750 <__mcmp>:
   2f750:	b430      	push	{r4, r5}
   2f752:	690b      	ldr	r3, [r1, #16]
   2f754:	4605      	mov	r5, r0
   2f756:	6900      	ldr	r0, [r0, #16]
   2f758:	1ac0      	subs	r0, r0, r3
   2f75a:	d10f      	bne.n	2f77c <__mcmp+0x2c>
   2f75c:	009b      	lsls	r3, r3, #2
   2f75e:	3514      	adds	r5, #20
   2f760:	3114      	adds	r1, #20
   2f762:	4419      	add	r1, r3
   2f764:	442b      	add	r3, r5
   2f766:	e001      	b.n	2f76c <__mcmp+0x1c>
   2f768:	429d      	cmp	r5, r3
   2f76a:	d207      	bcs.n	2f77c <__mcmp+0x2c>
   2f76c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2f770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2f774:	4294      	cmp	r4, r2
   2f776:	d0f7      	beq.n	2f768 <__mcmp+0x18>
   2f778:	d302      	bcc.n	2f780 <__mcmp+0x30>
   2f77a:	2001      	movs	r0, #1
   2f77c:	bc30      	pop	{r4, r5}
   2f77e:	4770      	bx	lr
   2f780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f784:	e7fa      	b.n	2f77c <__mcmp+0x2c>
   2f786:	bf00      	nop

0002f788 <__mdiff>:
   2f788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f78c:	690f      	ldr	r7, [r1, #16]
   2f78e:	460e      	mov	r6, r1
   2f790:	6911      	ldr	r1, [r2, #16]
   2f792:	1a7f      	subs	r7, r7, r1
   2f794:	2f00      	cmp	r7, #0
   2f796:	4690      	mov	r8, r2
   2f798:	d117      	bne.n	2f7ca <__mdiff+0x42>
   2f79a:	0089      	lsls	r1, r1, #2
   2f79c:	f106 0514 	add.w	r5, r6, #20
   2f7a0:	f102 0e14 	add.w	lr, r2, #20
   2f7a4:	186b      	adds	r3, r5, r1
   2f7a6:	4471      	add	r1, lr
   2f7a8:	e001      	b.n	2f7ae <__mdiff+0x26>
   2f7aa:	429d      	cmp	r5, r3
   2f7ac:	d25c      	bcs.n	2f868 <__mdiff+0xe0>
   2f7ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2f7b2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2f7b6:	42a2      	cmp	r2, r4
   2f7b8:	d0f7      	beq.n	2f7aa <__mdiff+0x22>
   2f7ba:	d25e      	bcs.n	2f87a <__mdiff+0xf2>
   2f7bc:	4633      	mov	r3, r6
   2f7be:	462c      	mov	r4, r5
   2f7c0:	4646      	mov	r6, r8
   2f7c2:	4675      	mov	r5, lr
   2f7c4:	4698      	mov	r8, r3
   2f7c6:	2701      	movs	r7, #1
   2f7c8:	e005      	b.n	2f7d6 <__mdiff+0x4e>
   2f7ca:	db58      	blt.n	2f87e <__mdiff+0xf6>
   2f7cc:	f106 0514 	add.w	r5, r6, #20
   2f7d0:	f108 0414 	add.w	r4, r8, #20
   2f7d4:	2700      	movs	r7, #0
   2f7d6:	6871      	ldr	r1, [r6, #4]
   2f7d8:	f7ff fdbc 	bl	2f354 <_Balloc>
   2f7dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2f7e0:	6936      	ldr	r6, [r6, #16]
   2f7e2:	60c7      	str	r7, [r0, #12]
   2f7e4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2f7e8:	46a6      	mov	lr, r4
   2f7ea:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2f7ee:	f100 0414 	add.w	r4, r0, #20
   2f7f2:	2300      	movs	r3, #0
   2f7f4:	f85e 1b04 	ldr.w	r1, [lr], #4
   2f7f8:	f855 8b04 	ldr.w	r8, [r5], #4
   2f7fc:	b28a      	uxth	r2, r1
   2f7fe:	fa13 f388 	uxtah	r3, r3, r8
   2f802:	0c09      	lsrs	r1, r1, #16
   2f804:	1a9a      	subs	r2, r3, r2
   2f806:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2f80a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2f80e:	b292      	uxth	r2, r2
   2f810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2f814:	45f4      	cmp	ip, lr
   2f816:	f844 2b04 	str.w	r2, [r4], #4
   2f81a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2f81e:	d8e9      	bhi.n	2f7f4 <__mdiff+0x6c>
   2f820:	42af      	cmp	r7, r5
   2f822:	d917      	bls.n	2f854 <__mdiff+0xcc>
   2f824:	46a4      	mov	ip, r4
   2f826:	46ae      	mov	lr, r5
   2f828:	f85e 2b04 	ldr.w	r2, [lr], #4
   2f82c:	fa13 f382 	uxtah	r3, r3, r2
   2f830:	1419      	asrs	r1, r3, #16
   2f832:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2f836:	b29b      	uxth	r3, r3
   2f838:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2f83c:	4577      	cmp	r7, lr
   2f83e:	f84c 2b04 	str.w	r2, [ip], #4
   2f842:	ea4f 4321 	mov.w	r3, r1, asr #16
   2f846:	d8ef      	bhi.n	2f828 <__mdiff+0xa0>
   2f848:	43ed      	mvns	r5, r5
   2f84a:	442f      	add	r7, r5
   2f84c:	f027 0703 	bic.w	r7, r7, #3
   2f850:	3704      	adds	r7, #4
   2f852:	443c      	add	r4, r7
   2f854:	3c04      	subs	r4, #4
   2f856:	b922      	cbnz	r2, 2f862 <__mdiff+0xda>
   2f858:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2f85c:	3e01      	subs	r6, #1
   2f85e:	2b00      	cmp	r3, #0
   2f860:	d0fa      	beq.n	2f858 <__mdiff+0xd0>
   2f862:	6106      	str	r6, [r0, #16]
   2f864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f868:	2100      	movs	r1, #0
   2f86a:	f7ff fd73 	bl	2f354 <_Balloc>
   2f86e:	2201      	movs	r2, #1
   2f870:	2300      	movs	r3, #0
   2f872:	6102      	str	r2, [r0, #16]
   2f874:	6143      	str	r3, [r0, #20]
   2f876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f87a:	4674      	mov	r4, lr
   2f87c:	e7ab      	b.n	2f7d6 <__mdiff+0x4e>
   2f87e:	4633      	mov	r3, r6
   2f880:	f106 0414 	add.w	r4, r6, #20
   2f884:	f102 0514 	add.w	r5, r2, #20
   2f888:	4616      	mov	r6, r2
   2f88a:	2701      	movs	r7, #1
   2f88c:	4698      	mov	r8, r3
   2f88e:	e7a2      	b.n	2f7d6 <__mdiff+0x4e>

0002f890 <__d2b>:
   2f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f894:	b082      	sub	sp, #8
   2f896:	2101      	movs	r1, #1
   2f898:	461c      	mov	r4, r3
   2f89a:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2f89e:	4615      	mov	r5, r2
   2f8a0:	9e08      	ldr	r6, [sp, #32]
   2f8a2:	f7ff fd57 	bl	2f354 <_Balloc>
   2f8a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2f8aa:	4680      	mov	r8, r0
   2f8ac:	b10f      	cbz	r7, 2f8b2 <__d2b+0x22>
   2f8ae:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2f8b2:	9401      	str	r4, [sp, #4]
   2f8b4:	b31d      	cbz	r5, 2f8fe <__d2b+0x6e>
   2f8b6:	a802      	add	r0, sp, #8
   2f8b8:	f840 5d08 	str.w	r5, [r0, #-8]!
   2f8bc:	f7ff fdda 	bl	2f474 <__lo0bits>
   2f8c0:	2800      	cmp	r0, #0
   2f8c2:	d134      	bne.n	2f92e <__d2b+0x9e>
   2f8c4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2f8c8:	f8c8 2014 	str.w	r2, [r8, #20]
   2f8cc:	2b00      	cmp	r3, #0
   2f8ce:	bf0c      	ite	eq
   2f8d0:	2101      	moveq	r1, #1
   2f8d2:	2102      	movne	r1, #2
   2f8d4:	f8c8 3018 	str.w	r3, [r8, #24]
   2f8d8:	f8c8 1010 	str.w	r1, [r8, #16]
   2f8dc:	b9df      	cbnz	r7, 2f916 <__d2b+0x86>
   2f8de:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2f8e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2f8e6:	6030      	str	r0, [r6, #0]
   2f8e8:	6918      	ldr	r0, [r3, #16]
   2f8ea:	f7ff fda3 	bl	2f434 <__hi0bits>
   2f8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f8f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2f8f4:	6018      	str	r0, [r3, #0]
   2f8f6:	4640      	mov	r0, r8
   2f8f8:	b002      	add	sp, #8
   2f8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f8fe:	a801      	add	r0, sp, #4
   2f900:	f7ff fdb8 	bl	2f474 <__lo0bits>
   2f904:	9b01      	ldr	r3, [sp, #4]
   2f906:	f8c8 3014 	str.w	r3, [r8, #20]
   2f90a:	2101      	movs	r1, #1
   2f90c:	3020      	adds	r0, #32
   2f90e:	f8c8 1010 	str.w	r1, [r8, #16]
   2f912:	2f00      	cmp	r7, #0
   2f914:	d0e3      	beq.n	2f8de <__d2b+0x4e>
   2f916:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f918:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2f91c:	4407      	add	r7, r0
   2f91e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2f922:	6037      	str	r7, [r6, #0]
   2f924:	6018      	str	r0, [r3, #0]
   2f926:	4640      	mov	r0, r8
   2f928:	b002      	add	sp, #8
   2f92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f92e:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2f932:	f1c0 0220 	rsb	r2, r0, #32
   2f936:	fa03 f202 	lsl.w	r2, r3, r2
   2f93a:	430a      	orrs	r2, r1
   2f93c:	40c3      	lsrs	r3, r0
   2f93e:	9301      	str	r3, [sp, #4]
   2f940:	f8c8 2014 	str.w	r2, [r8, #20]
   2f944:	e7c2      	b.n	2f8cc <__d2b+0x3c>
   2f946:	bf00      	nop

0002f948 <_realloc_r>:
   2f948:	2900      	cmp	r1, #0
   2f94a:	f000 8095 	beq.w	2fa78 <_realloc_r+0x130>
   2f94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f952:	460d      	mov	r5, r1
   2f954:	4616      	mov	r6, r2
   2f956:	b083      	sub	sp, #12
   2f958:	4680      	mov	r8, r0
   2f95a:	f106 070b 	add.w	r7, r6, #11
   2f95e:	f7fc fbdb 	bl	2c118 <__malloc_lock>
   2f962:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2f966:	2f16      	cmp	r7, #22
   2f968:	f02e 0403 	bic.w	r4, lr, #3
   2f96c:	f1a5 0908 	sub.w	r9, r5, #8
   2f970:	d83c      	bhi.n	2f9ec <_realloc_r+0xa4>
   2f972:	2210      	movs	r2, #16
   2f974:	4617      	mov	r7, r2
   2f976:	42be      	cmp	r6, r7
   2f978:	d83d      	bhi.n	2f9f6 <_realloc_r+0xae>
   2f97a:	4294      	cmp	r4, r2
   2f97c:	da43      	bge.n	2fa06 <_realloc_r+0xbe>
   2f97e:	4bc4      	ldr	r3, [pc, #784]	; (2fc90 <_realloc_r+0x348>)
   2f980:	6899      	ldr	r1, [r3, #8]
   2f982:	eb09 0004 	add.w	r0, r9, r4
   2f986:	4288      	cmp	r0, r1
   2f988:	f000 80b4 	beq.w	2faf4 <_realloc_r+0x1ac>
   2f98c:	6843      	ldr	r3, [r0, #4]
   2f98e:	f023 0101 	bic.w	r1, r3, #1
   2f992:	4401      	add	r1, r0
   2f994:	6849      	ldr	r1, [r1, #4]
   2f996:	07c9      	lsls	r1, r1, #31
   2f998:	d54c      	bpl.n	2fa34 <_realloc_r+0xec>
   2f99a:	f01e 0f01 	tst.w	lr, #1
   2f99e:	f000 809b 	beq.w	2fad8 <_realloc_r+0x190>
   2f9a2:	4631      	mov	r1, r6
   2f9a4:	4640      	mov	r0, r8
   2f9a6:	f7fc f80f 	bl	2b9c8 <_malloc_r>
   2f9aa:	4606      	mov	r6, r0
   2f9ac:	2800      	cmp	r0, #0
   2f9ae:	d03a      	beq.n	2fa26 <_realloc_r+0xde>
   2f9b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2f9b4:	f023 0301 	bic.w	r3, r3, #1
   2f9b8:	444b      	add	r3, r9
   2f9ba:	f1a0 0208 	sub.w	r2, r0, #8
   2f9be:	429a      	cmp	r2, r3
   2f9c0:	f000 8121 	beq.w	2fc06 <_realloc_r+0x2be>
   2f9c4:	1f22      	subs	r2, r4, #4
   2f9c6:	2a24      	cmp	r2, #36	; 0x24
   2f9c8:	f200 8107 	bhi.w	2fbda <_realloc_r+0x292>
   2f9cc:	2a13      	cmp	r2, #19
   2f9ce:	f200 80db 	bhi.w	2fb88 <_realloc_r+0x240>
   2f9d2:	4603      	mov	r3, r0
   2f9d4:	462a      	mov	r2, r5
   2f9d6:	6811      	ldr	r1, [r2, #0]
   2f9d8:	6019      	str	r1, [r3, #0]
   2f9da:	6851      	ldr	r1, [r2, #4]
   2f9dc:	6059      	str	r1, [r3, #4]
   2f9de:	6892      	ldr	r2, [r2, #8]
   2f9e0:	609a      	str	r2, [r3, #8]
   2f9e2:	4629      	mov	r1, r5
   2f9e4:	4640      	mov	r0, r8
   2f9e6:	f7ff fbbd 	bl	2f164 <_free_r>
   2f9ea:	e01c      	b.n	2fa26 <_realloc_r+0xde>
   2f9ec:	f027 0707 	bic.w	r7, r7, #7
   2f9f0:	2f00      	cmp	r7, #0
   2f9f2:	463a      	mov	r2, r7
   2f9f4:	dabf      	bge.n	2f976 <_realloc_r+0x2e>
   2f9f6:	2600      	movs	r6, #0
   2f9f8:	230c      	movs	r3, #12
   2f9fa:	4630      	mov	r0, r6
   2f9fc:	f8c8 3000 	str.w	r3, [r8]
   2fa00:	b003      	add	sp, #12
   2fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa06:	462e      	mov	r6, r5
   2fa08:	1be3      	subs	r3, r4, r7
   2fa0a:	2b0f      	cmp	r3, #15
   2fa0c:	d81e      	bhi.n	2fa4c <_realloc_r+0x104>
   2fa0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2fa12:	f003 0301 	and.w	r3, r3, #1
   2fa16:	4323      	orrs	r3, r4
   2fa18:	444c      	add	r4, r9
   2fa1a:	f8c9 3004 	str.w	r3, [r9, #4]
   2fa1e:	6863      	ldr	r3, [r4, #4]
   2fa20:	f043 0301 	orr.w	r3, r3, #1
   2fa24:	6063      	str	r3, [r4, #4]
   2fa26:	4640      	mov	r0, r8
   2fa28:	f7fc fb7c 	bl	2c124 <__malloc_unlock>
   2fa2c:	4630      	mov	r0, r6
   2fa2e:	b003      	add	sp, #12
   2fa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa34:	f023 0303 	bic.w	r3, r3, #3
   2fa38:	18e1      	adds	r1, r4, r3
   2fa3a:	4291      	cmp	r1, r2
   2fa3c:	db1f      	blt.n	2fa7e <_realloc_r+0x136>
   2fa3e:	68c3      	ldr	r3, [r0, #12]
   2fa40:	6882      	ldr	r2, [r0, #8]
   2fa42:	462e      	mov	r6, r5
   2fa44:	60d3      	str	r3, [r2, #12]
   2fa46:	460c      	mov	r4, r1
   2fa48:	609a      	str	r2, [r3, #8]
   2fa4a:	e7dd      	b.n	2fa08 <_realloc_r+0xc0>
   2fa4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2fa50:	eb09 0107 	add.w	r1, r9, r7
   2fa54:	f002 0201 	and.w	r2, r2, #1
   2fa58:	444c      	add	r4, r9
   2fa5a:	f043 0301 	orr.w	r3, r3, #1
   2fa5e:	4317      	orrs	r7, r2
   2fa60:	f8c9 7004 	str.w	r7, [r9, #4]
   2fa64:	604b      	str	r3, [r1, #4]
   2fa66:	6863      	ldr	r3, [r4, #4]
   2fa68:	f043 0301 	orr.w	r3, r3, #1
   2fa6c:	3108      	adds	r1, #8
   2fa6e:	6063      	str	r3, [r4, #4]
   2fa70:	4640      	mov	r0, r8
   2fa72:	f7ff fb77 	bl	2f164 <_free_r>
   2fa76:	e7d6      	b.n	2fa26 <_realloc_r+0xde>
   2fa78:	4611      	mov	r1, r2
   2fa7a:	f7fb bfa5 	b.w	2b9c8 <_malloc_r>
   2fa7e:	f01e 0f01 	tst.w	lr, #1
   2fa82:	d18e      	bne.n	2f9a2 <_realloc_r+0x5a>
   2fa84:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2fa88:	eba9 0a01 	sub.w	sl, r9, r1
   2fa8c:	f8da 1004 	ldr.w	r1, [sl, #4]
   2fa90:	f021 0103 	bic.w	r1, r1, #3
   2fa94:	440b      	add	r3, r1
   2fa96:	4423      	add	r3, r4
   2fa98:	4293      	cmp	r3, r2
   2fa9a:	db25      	blt.n	2fae8 <_realloc_r+0x1a0>
   2fa9c:	68c2      	ldr	r2, [r0, #12]
   2fa9e:	6881      	ldr	r1, [r0, #8]
   2faa0:	4656      	mov	r6, sl
   2faa2:	60ca      	str	r2, [r1, #12]
   2faa4:	6091      	str	r1, [r2, #8]
   2faa6:	f8da 100c 	ldr.w	r1, [sl, #12]
   2faaa:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2faae:	1f22      	subs	r2, r4, #4
   2fab0:	2a24      	cmp	r2, #36	; 0x24
   2fab2:	60c1      	str	r1, [r0, #12]
   2fab4:	6088      	str	r0, [r1, #8]
   2fab6:	f200 8094 	bhi.w	2fbe2 <_realloc_r+0x29a>
   2faba:	2a13      	cmp	r2, #19
   2fabc:	d96f      	bls.n	2fb9e <_realloc_r+0x256>
   2fabe:	6829      	ldr	r1, [r5, #0]
   2fac0:	f8ca 1008 	str.w	r1, [sl, #8]
   2fac4:	6869      	ldr	r1, [r5, #4]
   2fac6:	f8ca 100c 	str.w	r1, [sl, #12]
   2faca:	2a1b      	cmp	r2, #27
   2facc:	f200 80a2 	bhi.w	2fc14 <_realloc_r+0x2cc>
   2fad0:	3508      	adds	r5, #8
   2fad2:	f10a 0210 	add.w	r2, sl, #16
   2fad6:	e063      	b.n	2fba0 <_realloc_r+0x258>
   2fad8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2fadc:	eba9 0a03 	sub.w	sl, r9, r3
   2fae0:	f8da 1004 	ldr.w	r1, [sl, #4]
   2fae4:	f021 0103 	bic.w	r1, r1, #3
   2fae8:	1863      	adds	r3, r4, r1
   2faea:	4293      	cmp	r3, r2
   2faec:	f6ff af59 	blt.w	2f9a2 <_realloc_r+0x5a>
   2faf0:	4656      	mov	r6, sl
   2faf2:	e7d8      	b.n	2faa6 <_realloc_r+0x15e>
   2faf4:	6841      	ldr	r1, [r0, #4]
   2faf6:	f021 0b03 	bic.w	fp, r1, #3
   2fafa:	44a3      	add	fp, r4
   2fafc:	f107 0010 	add.w	r0, r7, #16
   2fb00:	4583      	cmp	fp, r0
   2fb02:	da56      	bge.n	2fbb2 <_realloc_r+0x26a>
   2fb04:	f01e 0f01 	tst.w	lr, #1
   2fb08:	f47f af4b 	bne.w	2f9a2 <_realloc_r+0x5a>
   2fb0c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2fb10:	eba9 0a01 	sub.w	sl, r9, r1
   2fb14:	f8da 1004 	ldr.w	r1, [sl, #4]
   2fb18:	f021 0103 	bic.w	r1, r1, #3
   2fb1c:	448b      	add	fp, r1
   2fb1e:	4558      	cmp	r0, fp
   2fb20:	dce2      	bgt.n	2fae8 <_realloc_r+0x1a0>
   2fb22:	4656      	mov	r6, sl
   2fb24:	f8da 100c 	ldr.w	r1, [sl, #12]
   2fb28:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2fb2c:	1f22      	subs	r2, r4, #4
   2fb2e:	2a24      	cmp	r2, #36	; 0x24
   2fb30:	60c1      	str	r1, [r0, #12]
   2fb32:	6088      	str	r0, [r1, #8]
   2fb34:	f200 808f 	bhi.w	2fc56 <_realloc_r+0x30e>
   2fb38:	2a13      	cmp	r2, #19
   2fb3a:	f240 808a 	bls.w	2fc52 <_realloc_r+0x30a>
   2fb3e:	6829      	ldr	r1, [r5, #0]
   2fb40:	f8ca 1008 	str.w	r1, [sl, #8]
   2fb44:	6869      	ldr	r1, [r5, #4]
   2fb46:	f8ca 100c 	str.w	r1, [sl, #12]
   2fb4a:	2a1b      	cmp	r2, #27
   2fb4c:	f200 808a 	bhi.w	2fc64 <_realloc_r+0x31c>
   2fb50:	3508      	adds	r5, #8
   2fb52:	f10a 0210 	add.w	r2, sl, #16
   2fb56:	6829      	ldr	r1, [r5, #0]
   2fb58:	6011      	str	r1, [r2, #0]
   2fb5a:	6869      	ldr	r1, [r5, #4]
   2fb5c:	6051      	str	r1, [r2, #4]
   2fb5e:	68a9      	ldr	r1, [r5, #8]
   2fb60:	6091      	str	r1, [r2, #8]
   2fb62:	eb0a 0107 	add.w	r1, sl, r7
   2fb66:	ebab 0207 	sub.w	r2, fp, r7
   2fb6a:	f042 0201 	orr.w	r2, r2, #1
   2fb6e:	6099      	str	r1, [r3, #8]
   2fb70:	604a      	str	r2, [r1, #4]
   2fb72:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fb76:	f003 0301 	and.w	r3, r3, #1
   2fb7a:	431f      	orrs	r7, r3
   2fb7c:	4640      	mov	r0, r8
   2fb7e:	f8ca 7004 	str.w	r7, [sl, #4]
   2fb82:	f7fc facf 	bl	2c124 <__malloc_unlock>
   2fb86:	e751      	b.n	2fa2c <_realloc_r+0xe4>
   2fb88:	682b      	ldr	r3, [r5, #0]
   2fb8a:	6003      	str	r3, [r0, #0]
   2fb8c:	686b      	ldr	r3, [r5, #4]
   2fb8e:	6043      	str	r3, [r0, #4]
   2fb90:	2a1b      	cmp	r2, #27
   2fb92:	d82d      	bhi.n	2fbf0 <_realloc_r+0x2a8>
   2fb94:	f100 0308 	add.w	r3, r0, #8
   2fb98:	f105 0208 	add.w	r2, r5, #8
   2fb9c:	e71b      	b.n	2f9d6 <_realloc_r+0x8e>
   2fb9e:	4632      	mov	r2, r6
   2fba0:	6829      	ldr	r1, [r5, #0]
   2fba2:	6011      	str	r1, [r2, #0]
   2fba4:	6869      	ldr	r1, [r5, #4]
   2fba6:	6051      	str	r1, [r2, #4]
   2fba8:	68a9      	ldr	r1, [r5, #8]
   2fbaa:	6091      	str	r1, [r2, #8]
   2fbac:	461c      	mov	r4, r3
   2fbae:	46d1      	mov	r9, sl
   2fbb0:	e72a      	b.n	2fa08 <_realloc_r+0xc0>
   2fbb2:	eb09 0107 	add.w	r1, r9, r7
   2fbb6:	ebab 0b07 	sub.w	fp, fp, r7
   2fbba:	f04b 0201 	orr.w	r2, fp, #1
   2fbbe:	6099      	str	r1, [r3, #8]
   2fbc0:	604a      	str	r2, [r1, #4]
   2fbc2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2fbc6:	f003 0301 	and.w	r3, r3, #1
   2fbca:	431f      	orrs	r7, r3
   2fbcc:	4640      	mov	r0, r8
   2fbce:	f845 7c04 	str.w	r7, [r5, #-4]
   2fbd2:	f7fc faa7 	bl	2c124 <__malloc_unlock>
   2fbd6:	462e      	mov	r6, r5
   2fbd8:	e728      	b.n	2fa2c <_realloc_r+0xe4>
   2fbda:	4629      	mov	r1, r5
   2fbdc:	f7fc f9ea 	bl	2bfb4 <memmove>
   2fbe0:	e6ff      	b.n	2f9e2 <_realloc_r+0x9a>
   2fbe2:	4629      	mov	r1, r5
   2fbe4:	4630      	mov	r0, r6
   2fbe6:	461c      	mov	r4, r3
   2fbe8:	46d1      	mov	r9, sl
   2fbea:	f7fc f9e3 	bl	2bfb4 <memmove>
   2fbee:	e70b      	b.n	2fa08 <_realloc_r+0xc0>
   2fbf0:	68ab      	ldr	r3, [r5, #8]
   2fbf2:	6083      	str	r3, [r0, #8]
   2fbf4:	68eb      	ldr	r3, [r5, #12]
   2fbf6:	60c3      	str	r3, [r0, #12]
   2fbf8:	2a24      	cmp	r2, #36	; 0x24
   2fbfa:	d017      	beq.n	2fc2c <_realloc_r+0x2e4>
   2fbfc:	f100 0310 	add.w	r3, r0, #16
   2fc00:	f105 0210 	add.w	r2, r5, #16
   2fc04:	e6e7      	b.n	2f9d6 <_realloc_r+0x8e>
   2fc06:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2fc0a:	f023 0303 	bic.w	r3, r3, #3
   2fc0e:	441c      	add	r4, r3
   2fc10:	462e      	mov	r6, r5
   2fc12:	e6f9      	b.n	2fa08 <_realloc_r+0xc0>
   2fc14:	68a9      	ldr	r1, [r5, #8]
   2fc16:	f8ca 1010 	str.w	r1, [sl, #16]
   2fc1a:	68e9      	ldr	r1, [r5, #12]
   2fc1c:	f8ca 1014 	str.w	r1, [sl, #20]
   2fc20:	2a24      	cmp	r2, #36	; 0x24
   2fc22:	d00c      	beq.n	2fc3e <_realloc_r+0x2f6>
   2fc24:	3510      	adds	r5, #16
   2fc26:	f10a 0218 	add.w	r2, sl, #24
   2fc2a:	e7b9      	b.n	2fba0 <_realloc_r+0x258>
   2fc2c:	692b      	ldr	r3, [r5, #16]
   2fc2e:	6103      	str	r3, [r0, #16]
   2fc30:	696b      	ldr	r3, [r5, #20]
   2fc32:	6143      	str	r3, [r0, #20]
   2fc34:	f105 0218 	add.w	r2, r5, #24
   2fc38:	f100 0318 	add.w	r3, r0, #24
   2fc3c:	e6cb      	b.n	2f9d6 <_realloc_r+0x8e>
   2fc3e:	692a      	ldr	r2, [r5, #16]
   2fc40:	f8ca 2018 	str.w	r2, [sl, #24]
   2fc44:	696a      	ldr	r2, [r5, #20]
   2fc46:	f8ca 201c 	str.w	r2, [sl, #28]
   2fc4a:	3518      	adds	r5, #24
   2fc4c:	f10a 0220 	add.w	r2, sl, #32
   2fc50:	e7a6      	b.n	2fba0 <_realloc_r+0x258>
   2fc52:	4632      	mov	r2, r6
   2fc54:	e77f      	b.n	2fb56 <_realloc_r+0x20e>
   2fc56:	4629      	mov	r1, r5
   2fc58:	4630      	mov	r0, r6
   2fc5a:	9301      	str	r3, [sp, #4]
   2fc5c:	f7fc f9aa 	bl	2bfb4 <memmove>
   2fc60:	9b01      	ldr	r3, [sp, #4]
   2fc62:	e77e      	b.n	2fb62 <_realloc_r+0x21a>
   2fc64:	68a9      	ldr	r1, [r5, #8]
   2fc66:	f8ca 1010 	str.w	r1, [sl, #16]
   2fc6a:	68e9      	ldr	r1, [r5, #12]
   2fc6c:	f8ca 1014 	str.w	r1, [sl, #20]
   2fc70:	2a24      	cmp	r2, #36	; 0x24
   2fc72:	d003      	beq.n	2fc7c <_realloc_r+0x334>
   2fc74:	3510      	adds	r5, #16
   2fc76:	f10a 0218 	add.w	r2, sl, #24
   2fc7a:	e76c      	b.n	2fb56 <_realloc_r+0x20e>
   2fc7c:	692a      	ldr	r2, [r5, #16]
   2fc7e:	f8ca 2018 	str.w	r2, [sl, #24]
   2fc82:	696a      	ldr	r2, [r5, #20]
   2fc84:	f8ca 201c 	str.w	r2, [sl, #28]
   2fc88:	3518      	adds	r5, #24
   2fc8a:	f10a 0220 	add.w	r2, sl, #32
   2fc8e:	e762      	b.n	2fb56 <_realloc_r+0x20e>
   2fc90:	2000cbb4 	.word	0x2000cbb4

0002fc94 <__ssprint_r>:
   2fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc98:	6893      	ldr	r3, [r2, #8]
   2fc9a:	b083      	sub	sp, #12
   2fc9c:	4690      	mov	r8, r2
   2fc9e:	2b00      	cmp	r3, #0
   2fca0:	d070      	beq.n	2fd84 <__ssprint_r+0xf0>
   2fca2:	4682      	mov	sl, r0
   2fca4:	460c      	mov	r4, r1
   2fca6:	6817      	ldr	r7, [r2, #0]
   2fca8:	688d      	ldr	r5, [r1, #8]
   2fcaa:	6808      	ldr	r0, [r1, #0]
   2fcac:	e042      	b.n	2fd34 <__ssprint_r+0xa0>
   2fcae:	89a3      	ldrh	r3, [r4, #12]
   2fcb0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2fcb4:	d02e      	beq.n	2fd14 <__ssprint_r+0x80>
   2fcb6:	6965      	ldr	r5, [r4, #20]
   2fcb8:	6921      	ldr	r1, [r4, #16]
   2fcba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2fcbe:	eba0 0b01 	sub.w	fp, r0, r1
   2fcc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2fcc6:	f10b 0001 	add.w	r0, fp, #1
   2fcca:	106d      	asrs	r5, r5, #1
   2fccc:	4430      	add	r0, r6
   2fcce:	42a8      	cmp	r0, r5
   2fcd0:	462a      	mov	r2, r5
   2fcd2:	bf84      	itt	hi
   2fcd4:	4605      	movhi	r5, r0
   2fcd6:	462a      	movhi	r2, r5
   2fcd8:	055b      	lsls	r3, r3, #21
   2fcda:	d538      	bpl.n	2fd4e <__ssprint_r+0xba>
   2fcdc:	4611      	mov	r1, r2
   2fcde:	4650      	mov	r0, sl
   2fce0:	f7fb fe72 	bl	2b9c8 <_malloc_r>
   2fce4:	2800      	cmp	r0, #0
   2fce6:	d03c      	beq.n	2fd62 <__ssprint_r+0xce>
   2fce8:	465a      	mov	r2, fp
   2fcea:	6921      	ldr	r1, [r4, #16]
   2fcec:	9001      	str	r0, [sp, #4]
   2fcee:	f7d0 fae7 	bl	2c0 <memcpy>
   2fcf2:	89a2      	ldrh	r2, [r4, #12]
   2fcf4:	9b01      	ldr	r3, [sp, #4]
   2fcf6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2fcfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2fcfe:	81a2      	strh	r2, [r4, #12]
   2fd00:	eba5 020b 	sub.w	r2, r5, fp
   2fd04:	eb03 000b 	add.w	r0, r3, fp
   2fd08:	6165      	str	r5, [r4, #20]
   2fd0a:	6123      	str	r3, [r4, #16]
   2fd0c:	6020      	str	r0, [r4, #0]
   2fd0e:	60a2      	str	r2, [r4, #8]
   2fd10:	4635      	mov	r5, r6
   2fd12:	46b3      	mov	fp, r6
   2fd14:	465a      	mov	r2, fp
   2fd16:	4649      	mov	r1, r9
   2fd18:	f7fc f94c 	bl	2bfb4 <memmove>
   2fd1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2fd20:	68a2      	ldr	r2, [r4, #8]
   2fd22:	6820      	ldr	r0, [r4, #0]
   2fd24:	1b55      	subs	r5, r2, r5
   2fd26:	4458      	add	r0, fp
   2fd28:	1b9e      	subs	r6, r3, r6
   2fd2a:	60a5      	str	r5, [r4, #8]
   2fd2c:	6020      	str	r0, [r4, #0]
   2fd2e:	f8c8 6008 	str.w	r6, [r8, #8]
   2fd32:	b33e      	cbz	r6, 2fd84 <__ssprint_r+0xf0>
   2fd34:	687e      	ldr	r6, [r7, #4]
   2fd36:	463b      	mov	r3, r7
   2fd38:	3708      	adds	r7, #8
   2fd3a:	2e00      	cmp	r6, #0
   2fd3c:	d0fa      	beq.n	2fd34 <__ssprint_r+0xa0>
   2fd3e:	42ae      	cmp	r6, r5
   2fd40:	f8d3 9000 	ldr.w	r9, [r3]
   2fd44:	46ab      	mov	fp, r5
   2fd46:	d2b2      	bcs.n	2fcae <__ssprint_r+0x1a>
   2fd48:	4635      	mov	r5, r6
   2fd4a:	46b3      	mov	fp, r6
   2fd4c:	e7e2      	b.n	2fd14 <__ssprint_r+0x80>
   2fd4e:	4650      	mov	r0, sl
   2fd50:	f7ff fdfa 	bl	2f948 <_realloc_r>
   2fd54:	4603      	mov	r3, r0
   2fd56:	2800      	cmp	r0, #0
   2fd58:	d1d2      	bne.n	2fd00 <__ssprint_r+0x6c>
   2fd5a:	6921      	ldr	r1, [r4, #16]
   2fd5c:	4650      	mov	r0, sl
   2fd5e:	f7ff fa01 	bl	2f164 <_free_r>
   2fd62:	230c      	movs	r3, #12
   2fd64:	f8ca 3000 	str.w	r3, [sl]
   2fd68:	89a3      	ldrh	r3, [r4, #12]
   2fd6a:	2200      	movs	r2, #0
   2fd6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fd74:	81a3      	strh	r3, [r4, #12]
   2fd76:	f8c8 2008 	str.w	r2, [r8, #8]
   2fd7a:	f8c8 2004 	str.w	r2, [r8, #4]
   2fd7e:	b003      	add	sp, #12
   2fd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd84:	2000      	movs	r0, #0
   2fd86:	f8c8 0004 	str.w	r0, [r8, #4]
   2fd8a:	b003      	add	sp, #12
   2fd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
