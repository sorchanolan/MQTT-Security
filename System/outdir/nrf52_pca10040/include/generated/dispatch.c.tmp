/* auto-generated by gen_syscalls.py, don't edit */

/* Weak handler functions that get replaced by the real ones unless a system
 * call is not implemented due to kernel configuration.
 */

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_sensor_attr_set(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_sensor_sample_fetch(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_sensor_sample_fetch_chan(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_sensor_channel_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_object_access_grant(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_object_access_revoke(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_create(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sleep(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_yield(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_wakeup(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_current_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_cancel(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_abort(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_start(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_priority_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_priority_set(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_suspend(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_resume(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_is_preempt_thread(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_custom_data_set(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_thread_custom_data_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_start(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_stop(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_status_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_status_sync(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_remaining_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_user_data_set(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_timer_user_data_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_uptime_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_uptime_get_32(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_stack_init(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_stack_push(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_stack_pop(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_mutex_init(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_mutex_lock(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_mutex_unlock(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sem_init(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sem_take(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sem_give(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sem_reset(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_sem_count_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_alert_recv(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_alert_send(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_init(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_put(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_purge(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_num_free_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_msgq_num_used_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_pipe_init(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_pipe_put(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_pipe_get(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);

__weak ALIAS_OF(_handler_no_syscall)
u32_t _handler_k_str_out(u32_t arg1, u32_t arg2, u32_t arg3,
         u32_t arg4, u32_t arg5, u32_t arg6, void *ssf);


const _k_syscall_handler_t _k_syscall_table[K_SYSCALL_LIMIT] = {
	[K_SYSCALL_SENSOR_ATTR_SET] = _handler_sensor_attr_set,
	[K_SYSCALL_SENSOR_SAMPLE_FETCH] = _handler_sensor_sample_fetch,
	[K_SYSCALL_SENSOR_SAMPLE_FETCH_CHAN] = _handler_sensor_sample_fetch_chan,
	[K_SYSCALL_SENSOR_CHANNEL_GET] = _handler_sensor_channel_get,
	[K_SYSCALL_K_OBJECT_ACCESS_GRANT] = _handler_k_object_access_grant,
	[K_SYSCALL_K_OBJECT_ACCESS_REVOKE] = _handler_k_object_access_revoke,
	[K_SYSCALL_K_THREAD_CREATE] = _handler_k_thread_create,
	[K_SYSCALL_K_SLEEP] = _handler_k_sleep,
	[K_SYSCALL_K_YIELD] = _handler_k_yield,
	[K_SYSCALL_K_WAKEUP] = _handler_k_wakeup,
	[K_SYSCALL_K_CURRENT_GET] = _handler_k_current_get,
	[K_SYSCALL_K_THREAD_CANCEL] = _handler_k_thread_cancel,
	[K_SYSCALL_K_THREAD_ABORT] = _handler_k_thread_abort,
	[K_SYSCALL_K_THREAD_START] = _handler_k_thread_start,
	[K_SYSCALL_K_THREAD_PRIORITY_GET] = _handler_k_thread_priority_get,
	[K_SYSCALL_K_THREAD_PRIORITY_SET] = _handler_k_thread_priority_set,
	[K_SYSCALL_K_THREAD_SUSPEND] = _handler_k_thread_suspend,
	[K_SYSCALL_K_THREAD_RESUME] = _handler_k_thread_resume,
	[K_SYSCALL_K_IS_PREEMPT_THREAD] = _handler_k_is_preempt_thread,
	[K_SYSCALL_K_THREAD_CUSTOM_DATA_SET] = _handler_k_thread_custom_data_set,
	[K_SYSCALL_K_THREAD_CUSTOM_DATA_GET] = _handler_k_thread_custom_data_get,
	[K_SYSCALL_K_TIMER_START] = _handler_k_timer_start,
	[K_SYSCALL_K_TIMER_STOP] = _handler_k_timer_stop,
	[K_SYSCALL_K_TIMER_STATUS_GET] = _handler_k_timer_status_get,
	[K_SYSCALL_K_TIMER_STATUS_SYNC] = _handler_k_timer_status_sync,
	[K_SYSCALL_K_TIMER_REMAINING_GET] = _handler_k_timer_remaining_get,
	[K_SYSCALL_K_TIMER_USER_DATA_SET] = _handler_k_timer_user_data_set,
	[K_SYSCALL_K_TIMER_USER_DATA_GET] = _handler_k_timer_user_data_get,
	[K_SYSCALL_K_UPTIME_GET] = _handler_k_uptime_get,
	[K_SYSCALL_K_UPTIME_GET_32] = _handler_k_uptime_get_32,
	[K_SYSCALL_K_STACK_INIT] = _handler_k_stack_init,
	[K_SYSCALL_K_STACK_PUSH] = _handler_k_stack_push,
	[K_SYSCALL_K_STACK_POP] = _handler_k_stack_pop,
	[K_SYSCALL_K_MUTEX_INIT] = _handler_k_mutex_init,
	[K_SYSCALL_K_MUTEX_LOCK] = _handler_k_mutex_lock,
	[K_SYSCALL_K_MUTEX_UNLOCK] = _handler_k_mutex_unlock,
	[K_SYSCALL_K_SEM_INIT] = _handler_k_sem_init,
	[K_SYSCALL_K_SEM_TAKE] = _handler_k_sem_take,
	[K_SYSCALL_K_SEM_GIVE] = _handler_k_sem_give,
	[K_SYSCALL_K_SEM_RESET] = _handler_k_sem_reset,
	[K_SYSCALL_K_SEM_COUNT_GET] = _handler_k_sem_count_get,
	[K_SYSCALL_K_ALERT_RECV] = _handler_k_alert_recv,
	[K_SYSCALL_K_ALERT_SEND] = _handler_k_alert_send,
	[K_SYSCALL_K_MSGQ_INIT] = _handler_k_msgq_init,
	[K_SYSCALL_K_MSGQ_PUT] = _handler_k_msgq_put,
	[K_SYSCALL_K_MSGQ_GET] = _handler_k_msgq_get,
	[K_SYSCALL_K_MSGQ_PURGE] = _handler_k_msgq_purge,
	[K_SYSCALL_K_MSGQ_NUM_FREE_GET] = _handler_k_msgq_num_free_get,
	[K_SYSCALL_K_MSGQ_NUM_USED_GET] = _handler_k_msgq_num_used_get,
	[K_SYSCALL_K_PIPE_INIT] = _handler_k_pipe_init,
	[K_SYSCALL_K_PIPE_PUT] = _handler_k_pipe_put,
	[K_SYSCALL_K_PIPE_GET] = _handler_k_pipe_get,
	[K_SYSCALL_K_STR_OUT] = _handler_k_str_out,
	[K_SYSCALL_BAD] = _handler_bad_syscall
};
