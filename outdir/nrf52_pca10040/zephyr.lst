
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000ab28 	.word	0x2000ab28
       4:	00027b81 	.word	0x00027b81
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027be1 	.word	0x00027be1
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00027a15 	.word	0x00027a15
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00027a15 	.word	0x00027a15
      14:	00027a15 	.word	0x00027a15
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00027a15 	.word	0x00027a15
		for (b = 0; b < 8; b++) {
      1c:	00027a15 	.word	0x00027a15
      20:	00027a15 	.word	0x00027a15
			crc = (crc << 1);
      24:	00027a15 	.word	0x00027a15
			if (i < len) {
      28:	00027a15 	.word	0x00027a15
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00027565 	.word	0x00027565
      30:	00027a15 	.word	0x00027a15
      34:	00027a15 	.word	0x00027a15
      38:	00027521 	.word	0x00027521
      3c:	00027a15 	.word	0x00027a15

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	00027b45 0001928d 00027b45 00027b45     E{......E{..E{..
	for (i = 0; i < len + padding; i++) {
      50:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
      90:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
      b0:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	00027b45 00027b45 00027b45 00027b45     E{..E{..E{..E{..
      d0:	00027b45 00027b45 00027b45              E{..E{..E{..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002999 00000000 00027981     .....).......y..
      ec:	2000cf54 000022d3 00000000 00027981     T.. .".......y..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027981 00000000 00027981     .....y.......y..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000cf90 000026a7 00000000 00027981     ... .&.......y..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027981 00000000 00027981     .....y.......y..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027981 00000000 000192ad     .....y..........
     13c:	00000000 00027981 00000000 000192ef     .....y..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027981 00000000 00027981     .....y.......y..
     15c:	00000000 00027981 00000000 00002419     .....y.......$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027981 00000000 00027981     .....y.......y..
     17c:	00000000 00027981 00000000 00027981     .....y.......y..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027981 00000000 00027981     .....y.......y..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 000192e5 00000000 00027981     .............y..
     1ac:	00000000 00027981 00000000 00027981     .....y.......y..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027981 00000000 00027981     .....y.......y..
     1cc:	00000000 00027981 00000000 00027981     .....y.......y..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027981 00000000 00027981     .....y.......y..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027981 00000000 00027981     .....y.......y..
     1fc:	00000000 00027981 00000000 00027981     .....y.......y..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027981                       .....y..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22ed      	movs	r2, #237	; 0xed
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fd73 	bl	2f44 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fd6d 	bl	2f44 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fd6a 	bl	2f44 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002e698 	.word	0x0002e698
    1488:	0002e670 	.word	0x0002e670
    148c:	0002e5d8 	.word	0x0002e5d8
    1490:	0002e6ac 	.word	0x0002e6ac
    1494:	0002e6c8 	.word	0x0002e6c8
    1498:	00031c10 	.word	0x00031c10
    149c:	0002e68c 	.word	0x0002e68c
    14a0:	0002e67c 	.word	0x0002e67c

000014a4 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22ff      	movs	r2, #255	; 0xff
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fd49 	bl	2f44 <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002e5e4 	.word	0x0002e5e4
    14b8:	0002e640 	.word	0x0002e640

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	22be      	movs	r2, #190	; 0xbe
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fd3d 	bl	2f44 <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd37 	bl	2f44 <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd34 	bl	2f44 <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002e5c8 	.word	0x0002e5c8
    14e4:	0002e608 	.word	0x0002e608
    14e8:	0002e610 	.word	0x0002e610
    14ec:	00031c10 	.word	0x00031c10

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	22ab      	movs	r2, #171	; 0xab
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fd23 	bl	2f44 <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fd1d 	bl	2f44 <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fd1a 	bl	2f44 <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002e5bc 	.word	0x0002e5bc
    1518:	0002e608 	.word	0x0002e608
    151c:	0002e610 	.word	0x0002e610
    1520:	00031c10 	.word	0x00031c10

00001524 <encrypt_aes>:
static void encrypt_aes() {
    1524:	b500      	push	{lr}
    1526:	b0c7      	sub	sp, #284	; 0x11c
	mbedtls_aes_init( &aes_ctx );
    1528:	4668      	mov	r0, sp
    152a:	f002 fab0 	bl	3a8e <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &aes_ctx, KEY_128, 128 );
    152e:	2280      	movs	r2, #128	; 0x80
    1530:	4907      	ldr	r1, [pc, #28]	; (1550 <encrypt_aes+0x2c>)
    1532:	4668      	mov	r0, sp
    1534:	f002 faba 	bl	3aac <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, &curr_msg, encrypted_msg );
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <encrypt_aes+0x30>)
    153a:	4a07      	ldr	r2, [pc, #28]	; (1558 <encrypt_aes+0x34>)
    153c:	2101      	movs	r1, #1
    153e:	4668      	mov	r0, sp
    1540:	f002 ff58 	bl	43f4 <mbedtls_aes_crypt_ecb>
	mbedtls_aes_free( &aes_ctx );
    1544:	4668      	mov	r0, sp
    1546:	f002 faa9 	bl	3a9c <mbedtls_aes_free>
}
    154a:	b047      	add	sp, #284	; 0x11c
    154c:	f85d fb04 	ldr.w	pc, [sp], #4
    1550:	0002e620 	.word	0x0002e620
    1554:	2000008c 	.word	0x2000008c
    1558:	2000000c 	.word	0x2000000c

0000155c <message_thread>:
{
    155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    155e:	e04e      	b.n	15fe <message_thread+0xa2>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1564:	f027 fd22 	bl	28fac <_impl_k_sleep>
			start_time = k_cycle_get_32();
    1568:	f000 ffc8 	bl	24fc <_timer_cycle_get_32>
    156c:	4606      	mov	r6, r0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    156e:	4f2a      	ldr	r7, [pc, #168]	; (1618 <message_thread+0xbc>)
    1570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1574:	4638      	mov	r0, r7
    1576:	f026 fe35 	bl	281e4 <_impl_k_mutex_lock>
			memset( curr_msg, 0xBB, sizeof( curr_msg ) );
    157a:	2280      	movs	r2, #128	; 0x80
    157c:	21bb      	movs	r1, #187	; 0xbb
    157e:	4827      	ldr	r0, [pc, #156]	; (161c <message_thread+0xc0>)
    1580:	f028 fe26 	bl	2a1d0 <memset>
			encrypt_aes();
    1584:	f7ff ffce 	bl	1524 <encrypt_aes>
		 	message_changed = true;
    1588:	2201      	movs	r2, #1
    158a:	4b25      	ldr	r3, [pc, #148]	; (1620 <message_thread+0xc4>)
    158c:	701a      	strb	r2, [r3, #0]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    158e:	4638      	mov	r0, r7
    1590:	f026 fe92 	bl	282b8 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1594:	4823      	ldr	r0, [pc, #140]	; (1624 <message_thread+0xc8>)
    1596:	f027 fe48 	bl	2922a <_impl_k_sem_give>
			stop_time = k_cycle_get_32();
    159a:	f000 ffaf 	bl	24fc <_timer_cycle_get_32>
			cycles_spent = stop_time - start_time;
    159e:	1b81      	subs	r1, r0, r6
			nanoseconds_spent = nanoseconds_spent + SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent);
    15a0:	4b21      	ldr	r3, [pc, #132]	; (1628 <message_thread+0xcc>)
    15a2:	681a      	ldr	r2, [r3, #0]
    15a4:	17d7      	asrs	r7, r2, #31
    15a6:	fba2 2301 	umull	r2, r3, r2, r1
    15aa:	fb01 3307 	mla	r3, r1, r7, r3
    15ae:	015e      	lsls	r6, r3, #5
    15b0:	0150      	lsls	r0, r2, #5
    15b2:	ea46 61d2 	orr.w	r1, r6, r2, lsr #27
    15b6:	1a80      	subs	r0, r0, r2
    15b8:	eb61 0103 	sbc.w	r1, r1, r3
    15bc:	008e      	lsls	r6, r1, #2
    15be:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
    15c2:	0087      	lsls	r7, r0, #2
    15c4:	18b8      	adds	r0, r7, r2
    15c6:	eb46 0103 	adc.w	r1, r6, r3
    15ca:	00cb      	lsls	r3, r1, #3
    15cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    15d0:	00c2      	lsls	r2, r0, #3
    15d2:	4610      	mov	r0, r2
    15d4:	4619      	mov	r1, r3
    15d6:	4b15      	ldr	r3, [pc, #84]	; (162c <message_thread+0xd0>)
    15d8:	681a      	ldr	r2, [r3, #0]
    15da:	17d3      	asrs	r3, r2, #31
    15dc:	f7ff fd8e 	bl	10fc <__aeabi_uldivmod>
    15e0:	4405      	add	r5, r0
		for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    15e2:	3401      	adds	r4, #1
    15e4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    15e8:	dbba      	blt.n	1560 <message_thread+0x4>
		printk("Time spent:%" PRIu32 "\n", nanoseconds_spent);
    15ea:	4629      	mov	r1, r5
    15ec:	4810      	ldr	r0, [pc, #64]	; (1630 <message_thread+0xd4>)
    15ee:	f001 fca9 	bl	2f44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    15f2:	4809      	ldr	r0, [pc, #36]	; (1618 <message_thread+0xbc>)
    15f4:	f026 fe60 	bl	282b8 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    15f8:	480a      	ldr	r0, [pc, #40]	; (1624 <message_thread+0xc8>)
    15fa:	f027 fe16 	bl	2922a <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    15fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1602:	f027 fcd3 	bl	28fac <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    160a:	4803      	ldr	r0, [pc, #12]	; (1618 <message_thread+0xbc>)
    160c:	f026 fdea 	bl	281e4 <_impl_k_mutex_lock>
		for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    1610:	2400      	movs	r4, #0
		uint32_t nanoseconds_spent = 0;
    1612:	4625      	mov	r5, r4
		for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    1614:	e7e6      	b.n	15e4 <message_thread+0x88>
    1616:	bf00      	nop
    1618:	2000d0d8 	.word	0x2000d0d8
    161c:	2000000c 	.word	0x2000000c
    1620:	20000110 	.word	0x20000110
    1624:	2000d064 	.word	0x2000d064
    1628:	2000c580 	.word	0x2000c580
    162c:	2000c57c 	.word	0x2000c57c
    1630:	0002e658 	.word	0x0002e658

00001634 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    1634:	b530      	push	{r4, r5, lr}
    1636:	b083      	sub	sp, #12
	static char payload[128];
	snprintf(payload, sizeof(payload), "loop %d: %s\n", loop_count, encrypted_msg);
    1638:	4c07      	ldr	r4, [pc, #28]	; (1658 <get_message_payload+0x24>)
    163a:	4d08      	ldr	r5, [pc, #32]	; (165c <get_message_payload+0x28>)
    163c:	4b08      	ldr	r3, [pc, #32]	; (1660 <get_message_payload+0x2c>)
    163e:	9300      	str	r3, [sp, #0]
    1640:	6823      	ldr	r3, [r4, #0]
    1642:	4a08      	ldr	r2, [pc, #32]	; (1664 <get_message_payload+0x30>)
    1644:	2180      	movs	r1, #128	; 0x80
    1646:	4628      	mov	r0, r5
    1648:	f028 fe10 	bl	2a26c <snprintf>
	loop_count++;
    164c:	6823      	ldr	r3, [r4, #0]
    164e:	3301      	adds	r3, #1
    1650:	6023      	str	r3, [r4, #0]
	return payload;
}
    1652:	4628      	mov	r0, r5
    1654:	b003      	add	sp, #12
    1656:	bd30      	pop	{r4, r5, pc}
    1658:	2000010c 	.word	0x2000010c
    165c:	20000114 	.word	0x20000114
    1660:	2000008c 	.word	0x2000008c
    1664:	0002e630 	.word	0x0002e630

00001668 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1668:	b538      	push	{r3, r4, r5, lr}
    166a:	4604      	mov	r4, r0
    166c:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_message_payload(qos);
    166e:	4608      	mov	r0, r1
    1670:	f7ff ffe0 	bl	1634 <get_message_payload>
    1674:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1676:	f7ff f843 	bl	700 <strlen>
    167a:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    167c:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    167e:	4804      	ldr	r0, [pc, #16]	; (1690 <prepare_msg+0x28>)
    1680:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1682:	f7ff f83d 	bl	700 <strlen>
    1686:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1688:	f000 fcc2 	bl	2010 <sys_rand32_get>
    168c:	80a0      	strh	r0, [r4, #4]
    168e:	bd38      	pop	{r3, r4, r5, pc}
    1690:	0002e668 	.word	0x0002e668

00001694 <publisher_thread>:
K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;
static struct mqtt_client_ctx pub_ctx;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    1694:	b530      	push	{r4, r5, lr}
    1696:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    1698:	4c7c      	ldr	r4, [pc, #496]	; (188c <publisher_thread+0x1f8>)
    169a:	f44f 7280 	mov.w	r2, #256	; 0x100
    169e:	2100      	movs	r1, #0
    16a0:	4620      	mov	r0, r4
    16a2:	f028 fd95 	bl	2a1d0 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    16a6:	4b7a      	ldr	r3, [pc, #488]	; (1890 <publisher_thread+0x1fc>)
    16a8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    16ac:	4b79      	ldr	r3, [pc, #484]	; (1894 <publisher_thread+0x200>)
    16ae:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    16b2:	4b79      	ldr	r3, [pc, #484]	; (1898 <publisher_thread+0x204>)
    16b4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    16b8:	f242 7310 	movw	r3, #10000	; 0x2710
    16bc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    16c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    16c4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    16c8:	4b74      	ldr	r3, [pc, #464]	; (189c <publisher_thread+0x208>)
    16ca:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    16ce:	f240 735b 	movw	r3, #1883	; 0x75b
    16d2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    16d6:	4b72      	ldr	r3, [pc, #456]	; (18a0 <publisher_thread+0x20c>)
    16d8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    16dc:	4871      	ldr	r0, [pc, #452]	; (18a4 <publisher_thread+0x210>)
    16de:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    16e0:	f7ff f80e 	bl	700 <strlen>
    16e4:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    16e6:	7823      	ldrb	r3, [r4, #0]
    16e8:	f043 0301 	orr.w	r3, r3, #1
    16ec:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    16ee:	4b6e      	ldr	r3, [pc, #440]	; (18a8 <publisher_thread+0x214>)
    16f0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    16f4:	4b6d      	ldr	r3, [pc, #436]	; (18ac <publisher_thread+0x218>)
    16f6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    16fa:	4b6d      	ldr	r3, [pc, #436]	; (18b0 <publisher_thread+0x21c>)
    16fc:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1700:	e0a0      	b.n	1844 <publisher_thread+0x1b0>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    1702:	4b6c      	ldr	r3, [pc, #432]	; (18b4 <publisher_thread+0x220>)
    1704:	e0ad      	b.n	1862 <publisher_thread+0x1ce>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    1706:	4b6b      	ldr	r3, [pc, #428]	; (18b4 <publisher_thread+0x220>)
    1708:	9301      	str	r3, [sp, #4]
    170a:	9400      	str	r4, [sp, #0]
    170c:	4b6a      	ldr	r3, [pc, #424]	; (18b8 <publisher_thread+0x224>)
    170e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    1712:	496a      	ldr	r1, [pc, #424]	; (18bc <publisher_thread+0x228>)
    1714:	486a      	ldr	r0, [pc, #424]	; (18c0 <publisher_thread+0x22c>)
    1716:	f001 fc15 	bl	2f44 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    171a:	b15c      	cbz	r4, 1734 <publisher_thread+0xa0>
    171c:	1c6b      	adds	r3, r5, #1
    171e:	2d63      	cmp	r5, #99	; 0x63
    1720:	dc08      	bgt.n	1734 <publisher_thread+0xa0>
    1722:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    1724:	4867      	ldr	r0, [pc, #412]	; (18c4 <publisher_thread+0x230>)
    1726:	f024 fd71 	bl	2620c <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    172a:	4604      	mov	r4, r0
    172c:	2800      	cmp	r0, #0
    172e:	d1ea      	bne.n	1706 <publisher_thread+0x72>
    1730:	4b65      	ldr	r3, [pc, #404]	; (18c8 <publisher_thread+0x234>)
    1732:	e7e9      	b.n	1708 <publisher_thread+0x74>

		if (rc != 0) {
    1734:	b1cc      	cbz	r4, 176a <publisher_thread+0xd6>
    1736:	e0a0      	b.n	187a <publisher_thread+0x1e6>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1738:	4b5e      	ldr	r3, [pc, #376]	; (18b4 <publisher_thread+0x220>)
    173a:	9301      	str	r3, [sp, #4]
    173c:	9500      	str	r5, [sp, #0]
    173e:	4b63      	ldr	r3, [pc, #396]	; (18cc <publisher_thread+0x238>)
    1740:	f44f 72b2 	mov.w	r2, #356	; 0x164
    1744:	495d      	ldr	r1, [pc, #372]	; (18bc <publisher_thread+0x228>)
    1746:	485e      	ldr	r0, [pc, #376]	; (18c0 <publisher_thread+0x22c>)
    1748:	f001 fbfc 	bl	2f44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    174c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1750:	f027 fc2c 	bl	28fac <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    1754:	b99d      	cbnz	r5, 177e <publisher_thread+0xea>
    1756:	1c63      	adds	r3, r4, #1
    1758:	2c13      	cmp	r4, #19
    175a:	dc10      	bgt.n	177e <publisher_thread+0xea>
    175c:	4a4b      	ldr	r2, [pc, #300]	; (188c <publisher_thread+0x1f8>)
    175e:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    1762:	f012 0f02 	tst.w	r2, #2
    1766:	d10a      	bne.n	177e <publisher_thread+0xea>
    1768:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    176a:	4848      	ldr	r0, [pc, #288]	; (188c <publisher_thread+0x1f8>)
    176c:	4601      	mov	r1, r0
    176e:	3048      	adds	r0, #72	; 0x48
    1770:	f024 fb7a 	bl	25e68 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    1774:	4605      	mov	r5, r0
    1776:	2800      	cmp	r0, #0
    1778:	d1de      	bne.n	1738 <publisher_thread+0xa4>
    177a:	4b53      	ldr	r3, [pc, #332]	; (18c8 <publisher_thread+0x234>)
    177c:	e7dd      	b.n	173a <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    177e:	4b43      	ldr	r3, [pc, #268]	; (188c <publisher_thread+0x1f8>)
    1780:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    1784:	f013 0f02 	tst.w	r3, #2
    1788:	d11b      	bne.n	17c2 <publisher_thread+0x12e>
			mqtt_close(&pub_ctx.mqtt_ctx);
    178a:	484e      	ldr	r0, [pc, #312]	; (18c4 <publisher_thread+0x230>)
    178c:	f024 fd84 	bl	26298 <mqtt_close>
			goto exit_pub;
    1790:	e073      	b.n	187a <publisher_thread+0x1e6>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    1792:	2100      	movs	r1, #0
    1794:	484e      	ldr	r0, [pc, #312]	; (18d0 <publisher_thread+0x23c>)
    1796:	f7ff ff67 	bl	1668 <prepare_msg>
				message_changed=false;
    179a:	2200      	movs	r2, #0
    179c:	4b4d      	ldr	r3, [pc, #308]	; (18d4 <publisher_thread+0x240>)
    179e:	701a      	strb	r2, [r3, #0]
    17a0:	e018      	b.n	17d4 <publisher_thread+0x140>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
    17a2:	4a44      	ldr	r2, [pc, #272]	; (18b4 <publisher_thread+0x220>)
    17a4:	9201      	str	r2, [sp, #4]
    17a6:	9300      	str	r3, [sp, #0]
    17a8:	4b4b      	ldr	r3, [pc, #300]	; (18d8 <publisher_thread+0x244>)
    17aa:	f240 127b 	movw	r2, #379	; 0x17b
    17ae:	4943      	ldr	r1, [pc, #268]	; (18bc <publisher_thread+0x228>)
    17b0:	4843      	ldr	r0, [pc, #268]	; (18c0 <publisher_thread+0x22c>)
    17b2:	f001 fbc7 	bl	2f44 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    17b6:	f242 7110 	movw	r1, #10000	; 0x2710
    17ba:	4848      	ldr	r0, [pc, #288]	; (18dc <publisher_thread+0x248>)
    17bc:	f027 fd48 	bl	29250 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    17c0:	b9c0      	cbnz	r0, 17f4 <publisher_thread+0x160>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    17c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    17c6:	4846      	ldr	r0, [pc, #280]	; (18e0 <publisher_thread+0x24c>)
    17c8:	f026 fd0c 	bl	281e4 <_impl_k_mutex_lock>
			if (message_changed) {
    17cc:	4b41      	ldr	r3, [pc, #260]	; (18d4 <publisher_thread+0x240>)
    17ce:	781c      	ldrb	r4, [r3, #0]
    17d0:	2c00      	cmp	r4, #0
    17d2:	d1de      	bne.n	1792 <publisher_thread+0xfe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    17d4:	4842      	ldr	r0, [pc, #264]	; (18e0 <publisher_thread+0x24c>)
    17d6:	f026 fd6f 	bl	282b8 <_impl_k_mutex_unlock>
			if (data_changed) {
    17da:	2c00      	cmp	r4, #0
    17dc:	d0eb      	beq.n	17b6 <publisher_thread+0x122>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    17de:	482b      	ldr	r0, [pc, #172]	; (188c <publisher_thread+0x1f8>)
    17e0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    17e4:	3048      	adds	r0, #72	; 0x48
    17e6:	f024 fbcb 	bl	25f80 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    17ea:	4603      	mov	r3, r0
    17ec:	2800      	cmp	r0, #0
    17ee:	d1d8      	bne.n	17a2 <publisher_thread+0x10e>
    17f0:	4a35      	ldr	r2, [pc, #212]	; (18c8 <publisher_thread+0x234>)
    17f2:	e7d7      	b.n	17a4 <publisher_thread+0x110>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    17f4:	4833      	ldr	r0, [pc, #204]	; (18c4 <publisher_thread+0x230>)
    17f6:	f024 fb79 	bl	25eec <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    17fa:	4603      	mov	r3, r0
    17fc:	2800      	cmp	r0, #0
    17fe:	d141      	bne.n	1884 <publisher_thread+0x1f0>
    1800:	4a31      	ldr	r2, [pc, #196]	; (18c8 <publisher_thread+0x234>)
    1802:	9201      	str	r2, [sp, #4]
    1804:	9300      	str	r3, [sp, #0]
    1806:	4b37      	ldr	r3, [pc, #220]	; (18e4 <publisher_thread+0x250>)
    1808:	f44f 72c0 	mov.w	r2, #384	; 0x180
    180c:	492b      	ldr	r1, [pc, #172]	; (18bc <publisher_thread+0x228>)
    180e:	482c      	ldr	r0, [pc, #176]	; (18c0 <publisher_thread+0x22c>)
    1810:	f001 fb98 	bl	2f44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1814:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1818:	f027 fbc8 	bl	28fac <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    181c:	4829      	ldr	r0, [pc, #164]	; (18c4 <publisher_thread+0x230>)
    181e:	f024 fd3b 	bl	26298 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    1822:	4603      	mov	r3, r0
    1824:	2800      	cmp	r0, #0
    1826:	d12f      	bne.n	1888 <publisher_thread+0x1f4>
    1828:	4a27      	ldr	r2, [pc, #156]	; (18c8 <publisher_thread+0x234>)
    182a:	9201      	str	r2, [sp, #4]
    182c:	9300      	str	r3, [sp, #0]
    182e:	4b2e      	ldr	r3, [pc, #184]	; (18e8 <publisher_thread+0x254>)
    1830:	f240 1285 	movw	r2, #389	; 0x185
    1834:	4921      	ldr	r1, [pc, #132]	; (18bc <publisher_thread+0x228>)
    1836:	4822      	ldr	r0, [pc, #136]	; (18c0 <publisher_thread+0x22c>)
    1838:	f001 fb84 	bl	2f44 <printk>
    183c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1840:	f027 fbb4 	bl	28fac <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1848:	4824      	ldr	r0, [pc, #144]	; (18dc <publisher_thread+0x248>)
    184a:	f027 fd01 	bl	29250 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    184e:	b9a0      	cbnz	r0, 187a <publisher_thread+0x1e6>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    1850:	2101      	movs	r1, #1
    1852:	481c      	ldr	r0, [pc, #112]	; (18c4 <publisher_thread+0x230>)
    1854:	f024 fd0e 	bl	26274 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    1858:	4605      	mov	r5, r0
    185a:	2800      	cmp	r0, #0
    185c:	f47f af51 	bne.w	1702 <publisher_thread+0x6e>
    1860:	4b19      	ldr	r3, [pc, #100]	; (18c8 <publisher_thread+0x234>)
    1862:	9301      	str	r3, [sp, #4]
    1864:	9500      	str	r5, [sp, #0]
    1866:	4b21      	ldr	r3, [pc, #132]	; (18ec <publisher_thread+0x258>)
    1868:	f240 1251 	movw	r2, #337	; 0x151
    186c:	4913      	ldr	r1, [pc, #76]	; (18bc <publisher_thread+0x228>)
    186e:	4814      	ldr	r0, [pc, #80]	; (18c0 <publisher_thread+0x22c>)
    1870:	f001 fb68 	bl	2f44 <printk>
		if (rc != 0) {
    1874:	2d00      	cmp	r5, #0
    1876:	f43f af55 	beq.w	1724 <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    187a:	481d      	ldr	r0, [pc, #116]	; (18f0 <publisher_thread+0x25c>)
    187c:	f001 fb62 	bl	2f44 <printk>
}
    1880:	b003      	add	sp, #12
    1882:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1884:	4a0b      	ldr	r2, [pc, #44]	; (18b4 <publisher_thread+0x220>)
    1886:	e7bc      	b.n	1802 <publisher_thread+0x16e>
		PRINT_RESULT("mqtt_close", rc);
    1888:	4a0a      	ldr	r2, [pc, #40]	; (18b4 <publisher_thread+0x220>)
    188a:	e7ce      	b.n	182a <publisher_thread+0x196>
    188c:	20000194 	.word	0x20000194
    1890:	000014f1 	.word	0x000014f1
    1894:	000014bd 	.word	0x000014bd
    1898:	000014a5 	.word	0x000014a5
    189c:	0002e6e4 	.word	0x0002e6e4
    18a0:	00001435 	.word	0x00001435
    18a4:	0002e700 	.word	0x0002e700
    18a8:	0002e718 	.word	0x0002e718
    18ac:	0002e724 	.word	0x0002e724
    18b0:	0002e734 	.word	0x0002e734
    18b4:	0002e6dc 	.word	0x0002e6dc
    18b8:	0002e760 	.word	0x0002e760
    18bc:	0002e5f4 	.word	0x0002e5f4
    18c0:	0002e748 	.word	0x0002e748
    18c4:	200001dc 	.word	0x200001dc
    18c8:	0002e6d8 	.word	0x0002e6d8
    18cc:	0002e770 	.word	0x0002e770
    18d0:	200001c4 	.word	0x200001c4
    18d4:	20000110 	.word	0x20000110
    18d8:	0002e780 	.word	0x0002e780
    18dc:	2000d064 	.word	0x2000d064
    18e0:	2000d0d8 	.word	0x2000d0d8
    18e4:	0002e790 	.word	0x0002e790
    18e8:	0002e7a4 	.word	0x0002e7a4
    18ec:	0002e73c 	.word	0x0002e73c
    18f0:	0002e7b0 	.word	0x0002e7b0

000018f4 <start_publisher>:


static void start_publisher()
{
    18f4:	b500      	push	{lr}
    18f6:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    18f8:	2300      	movs	r3, #0
    18fa:	9305      	str	r3, [sp, #20]
    18fc:	9304      	str	r3, [sp, #16]
    18fe:	2205      	movs	r2, #5
    1900:	9203      	str	r2, [sp, #12]
    1902:	9302      	str	r3, [sp, #8]
    1904:	9301      	str	r3, [sp, #4]
    1906:	9300      	str	r3, [sp, #0]
    1908:	4b04      	ldr	r3, [pc, #16]	; (191c <start_publisher+0x28>)
    190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    190e:	4904      	ldr	r1, [pc, #16]	; (1920 <start_publisher+0x2c>)
    1910:	4804      	ldr	r0, [pc, #16]	; (1924 <start_publisher+0x30>)
    1912:	f027 ff09 	bl	29728 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    1916:	b007      	add	sp, #28
    1918:	f85d fb04 	ldr.w	pc, [sp], #4
    191c:	00001695 	.word	0x00001695
    1920:	20003418 	.word	0x20003418
    1924:	20002948 	.word	0x20002948

00001928 <start_message_thread>:
{
    1928:	b500      	push	{lr}
    192a:	b087      	sub	sp, #28
    192c:	2300      	movs	r3, #0
    192e:	9305      	str	r3, [sp, #20]
    1930:	9304      	str	r3, [sp, #16]
    1932:	2205      	movs	r2, #5
    1934:	9203      	str	r2, [sp, #12]
    1936:	9302      	str	r3, [sp, #8]
    1938:	9301      	str	r3, [sp, #4]
    193a:	9300      	str	r3, [sp, #0]
    193c:	4b04      	ldr	r3, [pc, #16]	; (1950 <start_message_thread+0x28>)
    193e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1942:	4904      	ldr	r1, [pc, #16]	; (1954 <start_message_thread+0x2c>)
    1944:	4804      	ldr	r0, [pc, #16]	; (1958 <start_message_thread+0x30>)
    1946:	f027 feef 	bl	29728 <_impl_k_thread_create>
}
    194a:	b007      	add	sp, #28
    194c:	f85d fb04 	ldr.w	pc, [sp], #4
    1950:	0000155d 	.word	0x0000155d
    1954:	20002c18 	.word	0x20002c18
    1958:	200028e0 	.word	0x200028e0

0000195c <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    195c:	b508      	push	{r3, lr}
	start_publisher();
    195e:	f7ff ffc9 	bl	18f4 <start_publisher>
	start_message_thread();
    1962:	f7ff ffe1 	bl	1928 <start_message_thread>
    1966:	bd08      	pop	{r3, pc}

00001968 <main>:
}


void main(void)
{
    1968:	b510      	push	{r4, lr}
	struct net_if *iface = net_if_get_default();
    196a:	f019 fca3 	bl	1b2b4 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    196e:	f3bf 8f5b 	dmb	ish
    1972:	68c3      	ldr	r3, [r0, #12]
    1974:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1978:	f013 0f01 	tst.w	r3, #1
    197c:	d010      	beq.n	19a0 <main+0x38>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    197e:	4c0c      	ldr	r4, [pc, #48]	; (19b0 <main+0x48>)
    1980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1984:	4620      	mov	r0, r4
    1986:	f026 fc2d 	bl	281e4 <_impl_k_mutex_lock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    198a:	4620      	mov	r0, r4
    198c:	f026 fc94 	bl	282b8 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1990:	4808      	ldr	r0, [pc, #32]	; (19b4 <main+0x4c>)
    1992:	f027 fc4a 	bl	2922a <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1996:	f242 7010 	movw	r0, #10000	; 0x2710
    199a:	f027 fb07 	bl	28fac <_impl_k_sleep>
    199e:	e7ee      	b.n	197e <main+0x16>
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    19a0:	4805      	ldr	r0, [pc, #20]	; (19b8 <main+0x50>)
    19a2:	4b06      	ldr	r3, [pc, #24]	; (19bc <main+0x54>)
    19a4:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    19a6:	4b06      	ldr	r3, [pc, #24]	; (19c0 <main+0x58>)
    19a8:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    19aa:	f021 fac1 	bl	22f30 <net_mgmt_add_event_callback>
    19ae:	e7e6      	b.n	197e <main+0x16>
    19b0:	2000d0d8 	.word	0x2000d0d8
    19b4:	2000d064 	.word	0x2000d064
    19b8:	20000000 	.word	0x20000000
    19bc:	0000195d 	.word	0x0000195d
    19c0:	d0010002 	.word	0xd0010002

000019c4 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    19c4:	4b08      	ldr	r3, [pc, #32]	; (19e8 <_sbrk+0x24>)
    19c6:	681a      	ldr	r2, [r3, #0]
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <_sbrk+0x28>)
    19ca:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    19cc:	4410      	add	r0, r2
    19ce:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    19d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    19d6:	4298      	cmp	r0, r3
    19d8:	d203      	bcs.n	19e2 <_sbrk+0x1e>
		heap_sz += count;
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <_sbrk+0x24>)
    19dc:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    19de:	4608      	mov	r0, r1
    19e0:	4770      	bx	lr
		return (void *)-1;
    19e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    19e6:	e7fa      	b.n	19de <_sbrk+0x1a>
    19e8:	20000294 	.word	0x20000294
    19ec:	2000d4b4 	.word	0x2000d4b4

000019f0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    19f0:	b510      	push	{r4, lr}
    19f2:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    19f4:	280a      	cmp	r0, #10
    19f6:	d007      	beq.n	1a08 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    19f8:	4b07      	ldr	r3, [pc, #28]	; (1a18 <console_out+0x28>)
    19fa:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    19fc:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    19fe:	685b      	ldr	r3, [r3, #4]
    1a00:	b2e1      	uxtb	r1, r4
    1a02:	4798      	blx	r3

	return c;
}
    1a04:	4620      	mov	r0, r4
    1a06:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1a08:	4b03      	ldr	r3, [pc, #12]	; (1a18 <console_out+0x28>)
    1a0a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a0c:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	210d      	movs	r1, #13
    1a12:	4798      	blx	r3
    1a14:	e7f0      	b.n	19f8 <console_out+0x8>
    1a16:	bf00      	nop
    1a18:	200002b8 	.word	0x200002b8

00001a1c <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1a1c:	b510      	push	{r4, lr}
    1a1e:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a20:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1a22:	691b      	ldr	r3, [r3, #16]
    1a24:	b11b      	cbz	r3, 1a2e <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1a26:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1a28:	2800      	cmp	r0, #0
    1a2a:	db02      	blt.n	1a32 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1a2c:	bd10      	pop	{r4, pc}
	}

	return 0;
    1a2e:	2000      	movs	r0, #0
    1a30:	e7fa      	b.n	1a28 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a32:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a36:	b123      	cbz	r3, 1a42 <read_uart+0x26>
		api->irq_rx_disable(dev);
    1a38:	4620      	mov	r0, r4
    1a3a:	4798      	blx	r3
		return -EIO;
    1a3c:	f06f 0004 	mvn.w	r0, #4
    1a40:	bd10      	pop	{r4, pc}
    1a42:	f06f 0004 	mvn.w	r0, #4
    1a46:	e7f1      	b.n	1a2c <read_uart+0x10>

00001a48 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1a48:	b500      	push	{lr}
    1a4a:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1a4c:	4b19      	ldr	r3, [pc, #100]	; (1ab4 <console_input_init+0x6c>)
    1a4e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a50:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a54:	b103      	cbz	r3, 1a58 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1a56:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1a58:	4b16      	ldr	r3, [pc, #88]	; (1ab4 <console_input_init+0x6c>)
    1a5a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a5c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1a5e:	699b      	ldr	r3, [r3, #24]
    1a60:	b103      	cbz	r3, 1a64 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1a62:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1a64:	4b13      	ldr	r3, [pc, #76]	; (1ab4 <console_input_init+0x6c>)
    1a66:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a68:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a6a:	b18b      	cbz	r3, 1a90 <console_input_init+0x48>
    1a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a6e:	b17b      	cbz	r3, 1a90 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1a70:	4911      	ldr	r1, [pc, #68]	; (1ab8 <console_input_init+0x70>)
    1a72:	4798      	blx	r3
    1a74:	e00c      	b.n	1a90 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1a76:	2201      	movs	r2, #1
    1a78:	f10d 0107 	add.w	r1, sp, #7
    1a7c:	4798      	blx	r3
    1a7e:	e007      	b.n	1a90 <console_input_init+0x48>
	return 0;
    1a80:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a82:	b168      	cbz	r0, 1aa0 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1a84:	4b0b      	ldr	r3, [pc, #44]	; (1ab4 <console_input_init+0x6c>)
    1a86:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a88:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1a8a:	691b      	ldr	r3, [r3, #16]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d1f2      	bne.n	1a76 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <console_input_init+0x6c>)
    1a92:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a94:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d0f1      	beq.n	1a80 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1a9c:	4798      	blx	r3
    1a9e:	e7f0      	b.n	1a82 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <console_input_init+0x6c>)
    1aa2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aa4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1aa6:	6a1b      	ldr	r3, [r3, #32]
    1aa8:	b103      	cbz	r3, 1aac <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1aaa:	4798      	blx	r3
}
    1aac:	b003      	add	sp, #12
    1aae:	f85d fb04 	ldr.w	pc, [sp], #4
    1ab2:	bf00      	nop
    1ab4:	200002b8 	.word	0x200002b8
    1ab8:	00001db5 	.word	0x00001db5

00001abc <del_char>:
{
    1abc:	b570      	push	{r4, r5, r6, lr}
    1abe:	4606      	mov	r6, r0
    1ac0:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1ac2:	4b17      	ldr	r3, [pc, #92]	; (1b20 <del_char+0x64>)
    1ac4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ac6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ac8:	685b      	ldr	r3, [r3, #4]
    1aca:	2108      	movs	r1, #8
    1acc:	4798      	blx	r3
	if (end == 0) {
    1ace:	b11d      	cbz	r5, 1ad8 <del_char+0x1c>
	printk("\x1b[s");
    1ad0:	4814      	ldr	r0, [pc, #80]	; (1b24 <del_char+0x68>)
    1ad2:	f001 fa37 	bl	2f44 <printk>
    1ad6:	e014      	b.n	1b02 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1ad8:	4c11      	ldr	r4, [pc, #68]	; (1b20 <del_char+0x64>)
    1ada:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1adc:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	2120      	movs	r1, #32
    1ae2:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1ae4:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ae6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ae8:	685b      	ldr	r3, [r3, #4]
    1aea:	2108      	movs	r1, #8
    1aec:	4798      	blx	r3
    1aee:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1af0:	7871      	ldrb	r1, [r6, #1]
    1af2:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1af6:	4b0a      	ldr	r3, [pc, #40]	; (1b20 <del_char+0x64>)
    1af8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1afa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1afc:	685b      	ldr	r3, [r3, #4]
    1afe:	4798      	blx	r3
	while (end-- > 0) {
    1b00:	4625      	mov	r5, r4
    1b02:	1e6b      	subs	r3, r5, #1
    1b04:	b2dc      	uxtb	r4, r3
    1b06:	2d00      	cmp	r5, #0
    1b08:	d1f2      	bne.n	1af0 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1b0a:	4b05      	ldr	r3, [pc, #20]	; (1b20 <del_char+0x64>)
    1b0c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b0e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b10:	685b      	ldr	r3, [r3, #4]
    1b12:	2120      	movs	r1, #32
    1b14:	4798      	blx	r3
	printk("\x1b[u");
    1b16:	4804      	ldr	r0, [pc, #16]	; (1b28 <del_char+0x6c>)
    1b18:	f001 fa14 	bl	2f44 <printk>
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
    1b1e:	bf00      	nop
    1b20:	200002b8 	.word	0x200002b8
    1b24:	0002e7cc 	.word	0x0002e7cc
    1b28:	0002e7d0 	.word	0x0002e7d0

00001b2c <insert_char>:
{
    1b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b30:	4605      	mov	r5, r0
    1b32:	4688      	mov	r8, r1
    1b34:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1b36:	4b14      	ldr	r3, [pc, #80]	; (1b88 <insert_char+0x5c>)
    1b38:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b3a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b3c:	685b      	ldr	r3, [r3, #4]
    1b3e:	4798      	blx	r3
	if (end == 0) {
    1b40:	b91c      	cbnz	r4, 1b4a <insert_char+0x1e>
		*pos = c;
    1b42:	f885 8000 	strb.w	r8, [r5]
		return;
    1b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1b4a:	462e      	mov	r6, r5
    1b4c:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1b50:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1b54:	480d      	ldr	r0, [pc, #52]	; (1b8c <insert_char+0x60>)
    1b56:	f001 f9f5 	bl	2f44 <printk>
    1b5a:	e00c      	b.n	1b76 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1b5c:	4b0a      	ldr	r3, [pc, #40]	; (1b88 <insert_char+0x5c>)
    1b5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b60:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b62:	685b      	ldr	r3, [r3, #4]
    1b64:	4639      	mov	r1, r7
    1b66:	4798      	blx	r3
		c = *pos;
    1b68:	4633      	mov	r3, r6
    1b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1b6e:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1b70:	4617      	mov	r7, r2
	while (end-- > 0) {
    1b72:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1b74:	461e      	mov	r6, r3
	while (end-- > 0) {
    1b76:	1e63      	subs	r3, r4, #1
    1b78:	b2dd      	uxtb	r5, r3
    1b7a:	2c00      	cmp	r4, #0
    1b7c:	d1ee      	bne.n	1b5c <insert_char+0x30>
	printk("\x1b[u");
    1b7e:	4804      	ldr	r0, [pc, #16]	; (1b90 <insert_char+0x64>)
    1b80:	f001 f9e0 	bl	2f44 <printk>
    1b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b88:	200002b8 	.word	0x200002b8
    1b8c:	0002e7cc 	.word	0x0002e7cc
    1b90:	0002e7d0 	.word	0x0002e7d0

00001b94 <handle_ansi>:
{
    1b94:	b538      	push	{r3, r4, r5, lr}
    1b96:	4604      	mov	r4, r0
    1b98:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b9a:	4b7f      	ldr	r3, [pc, #508]	; (1d98 <handle_ansi+0x204>)
    1b9c:	f3bf 8f5b 	dmb	ish
    1ba0:	e853 2f00 	ldrex	r2, [r3]
    1ba4:	f022 0104 	bic.w	r1, r2, #4
    1ba8:	e843 1000 	strex	r0, r1, [r3]
    1bac:	2800      	cmp	r0, #0
    1bae:	d1f7      	bne.n	1ba0 <handle_ansi+0xc>
    1bb0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1bb4:	f012 0f04 	tst.w	r2, #4
    1bb8:	d03c      	beq.n	1c34 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1bba:	f028 fa51 	bl	2a060 <__locale_ctype_ptr>
    1bbe:	4420      	add	r0, r4
    1bc0:	7843      	ldrb	r3, [r0, #1]
    1bc2:	f013 0f04 	tst.w	r3, #4
    1bc6:	d121      	bne.n	1c0c <handle_ansi+0x78>
			ansi_val = 1;
    1bc8:	2201      	movs	r2, #1
    1bca:	4b74      	ldr	r3, [pc, #464]	; (1d9c <handle_ansi+0x208>)
    1bcc:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1bce:	2c46      	cmp	r4, #70	; 0x46
    1bd0:	f000 80d0 	beq.w	1d74 <handle_ansi+0x1e0>
    1bd4:	f200 8086 	bhi.w	1ce4 <handle_ansi+0x150>
    1bd8:	2c43      	cmp	r4, #67	; 0x43
    1bda:	f000 80a7 	beq.w	1d2c <handle_ansi+0x198>
    1bde:	2c44      	cmp	r4, #68	; 0x44
    1be0:	d106      	bne.n	1bf0 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1be2:	4b6f      	ldr	r3, [pc, #444]	; (1da0 <handle_ansi+0x20c>)
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	4a6d      	ldr	r2, [pc, #436]	; (1d9c <handle_ansi+0x208>)
    1be8:	6811      	ldr	r1, [r2, #0]
    1bea:	428b      	cmp	r3, r1
    1bec:	f080 8092 	bcs.w	1d14 <handle_ansi+0x180>
    1bf0:	4b69      	ldr	r3, [pc, #420]	; (1d98 <handle_ansi+0x204>)
    1bf2:	f3bf 8f5b 	dmb	ish
    1bf6:	e853 2f00 	ldrex	r2, [r3]
    1bfa:	f022 0202 	bic.w	r2, r2, #2
    1bfe:	e843 2100 	strex	r1, r2, [r3]
    1c02:	2900      	cmp	r1, #0
    1c04:	d1f7      	bne.n	1bf6 <handle_ansi+0x62>
    1c06:	f3bf 8f5b 	dmb	ish
    1c0a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c0c:	4b62      	ldr	r3, [pc, #392]	; (1d98 <handle_ansi+0x204>)
    1c0e:	f3bf 8f5b 	dmb	ish
    1c12:	e853 2f00 	ldrex	r2, [r3]
    1c16:	f042 0208 	orr.w	r2, r2, #8
    1c1a:	e843 2100 	strex	r1, r2, [r3]
    1c1e:	2900      	cmp	r1, #0
    1c20:	d1f7      	bne.n	1c12 <handle_ansi+0x7e>
    1c22:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1c26:	3c30      	subs	r4, #48	; 0x30
    1c28:	4b5c      	ldr	r3, [pc, #368]	; (1d9c <handle_ansi+0x208>)
    1c2a:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1c2c:	2200      	movs	r2, #0
    1c2e:	4b5d      	ldr	r3, [pc, #372]	; (1da4 <handle_ansi+0x210>)
    1c30:	601a      	str	r2, [r3, #0]
		return;
    1c32:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c34:	f3bf 8f5b 	dmb	ish
    1c38:	4b57      	ldr	r3, [pc, #348]	; (1d98 <handle_ansi+0x204>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1c40:	f013 0f08 	tst.w	r3, #8
    1c44:	d0c3      	beq.n	1bce <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1c46:	f028 fa0b 	bl	2a060 <__locale_ctype_ptr>
    1c4a:	4420      	add	r0, r4
    1c4c:	7843      	ldrb	r3, [r0, #1]
    1c4e:	f013 0f04 	tst.w	r3, #4
    1c52:	d11b      	bne.n	1c8c <handle_ansi+0xf8>
		if (byte == ';' &&
    1c54:	2c3b      	cmp	r4, #59	; 0x3b
    1c56:	d034      	beq.n	1cc2 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c58:	4b4f      	ldr	r3, [pc, #316]	; (1d98 <handle_ansi+0x204>)
    1c5a:	f3bf 8f5b 	dmb	ish
    1c5e:	e853 2f00 	ldrex	r2, [r3]
    1c62:	f022 0208 	bic.w	r2, r2, #8
    1c66:	e843 2100 	strex	r1, r2, [r3]
    1c6a:	2900      	cmp	r1, #0
    1c6c:	d1f7      	bne.n	1c5e <handle_ansi+0xca>
    1c6e:	f3bf 8f5b 	dmb	ish
    1c72:	f3bf 8f5b 	dmb	ish
    1c76:	e853 2f00 	ldrex	r2, [r3]
    1c7a:	f022 0210 	bic.w	r2, r2, #16
    1c7e:	e843 2100 	strex	r1, r2, [r3]
    1c82:	2900      	cmp	r1, #0
    1c84:	d1f7      	bne.n	1c76 <handle_ansi+0xe2>
    1c86:	f3bf 8f5b 	dmb	ish
    1c8a:	e7a0      	b.n	1bce <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c8c:	f3bf 8f5b 	dmb	ish
    1c90:	4b41      	ldr	r3, [pc, #260]	; (1d98 <handle_ansi+0x204>)
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1c98:	f013 0f10 	tst.w	r3, #16
    1c9c:	d008      	beq.n	1cb0 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1c9e:	4941      	ldr	r1, [pc, #260]	; (1da4 <handle_ansi+0x210>)
    1ca0:	680a      	ldr	r2, [r1, #0]
    1ca2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1ca6:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1ca8:	4423      	add	r3, r4
    1caa:	3b30      	subs	r3, #48	; 0x30
    1cac:	600b      	str	r3, [r1, #0]
    1cae:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1cb0:	493a      	ldr	r1, [pc, #232]	; (1d9c <handle_ansi+0x208>)
    1cb2:	680a      	ldr	r2, [r1, #0]
    1cb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cb8:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1cba:	4423      	add	r3, r4
    1cbc:	3b30      	subs	r3, #48	; 0x30
    1cbe:	600b      	str	r3, [r1, #0]
    1cc0:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1cc2:	4b35      	ldr	r3, [pc, #212]	; (1d98 <handle_ansi+0x204>)
    1cc4:	f3bf 8f5b 	dmb	ish
    1cc8:	e853 2f00 	ldrex	r2, [r3]
    1ccc:	f042 0110 	orr.w	r1, r2, #16
    1cd0:	e843 1000 	strex	r0, r1, [r3]
    1cd4:	2800      	cmp	r0, #0
    1cd6:	d1f7      	bne.n	1cc8 <handle_ansi+0x134>
    1cd8:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1cdc:	f012 0f10 	tst.w	r2, #16
    1ce0:	d1ba      	bne.n	1c58 <handle_ansi+0xc4>
    1ce2:	e792      	b.n	1c0a <handle_ansi+0x76>
	switch (byte) {
    1ce4:	2c48      	cmp	r4, #72	; 0x48
    1ce6:	d034      	beq.n	1d52 <handle_ansi+0x1be>
    1ce8:	2c7e      	cmp	r4, #126	; 0x7e
    1cea:	d181      	bne.n	1bf0 <handle_ansi+0x5c>
		if (!end) {
    1cec:	4b2e      	ldr	r3, [pc, #184]	; (1da8 <handle_ansi+0x214>)
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	f43f af7d 	beq.w	1bf0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1cf6:	2101      	movs	r1, #1
    1cf8:	482c      	ldr	r0, [pc, #176]	; (1dac <handle_ansi+0x218>)
    1cfa:	f001 f923 	bl	2f44 <printk>
		del_char(&line[cur], --end);
    1cfe:	4b28      	ldr	r3, [pc, #160]	; (1da0 <handle_ansi+0x20c>)
    1d00:	7818      	ldrb	r0, [r3, #0]
    1d02:	4b29      	ldr	r3, [pc, #164]	; (1da8 <handle_ansi+0x214>)
    1d04:	7819      	ldrb	r1, [r3, #0]
    1d06:	3901      	subs	r1, #1
    1d08:	b2c9      	uxtb	r1, r1
    1d0a:	7019      	strb	r1, [r3, #0]
    1d0c:	4428      	add	r0, r5
    1d0e:	f7ff fed5 	bl	1abc <del_char>
		break;
    1d12:	e76d      	b.n	1bf0 <handle_ansi+0x5c>
		end += ansi_val;
    1d14:	b2c8      	uxtb	r0, r1
    1d16:	4c24      	ldr	r4, [pc, #144]	; (1da8 <handle_ansi+0x214>)
    1d18:	7822      	ldrb	r2, [r4, #0]
    1d1a:	4402      	add	r2, r0
    1d1c:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1d1e:	1a1b      	subs	r3, r3, r0
    1d20:	4a1f      	ldr	r2, [pc, #124]	; (1da0 <handle_ansi+0x20c>)
    1d22:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1d24:	4822      	ldr	r0, [pc, #136]	; (1db0 <handle_ansi+0x21c>)
    1d26:	f001 f90d 	bl	2f44 <printk>
    1d2a:	e761      	b.n	1bf0 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1d2c:	4b1e      	ldr	r3, [pc, #120]	; (1da8 <handle_ansi+0x214>)
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	4a1a      	ldr	r2, [pc, #104]	; (1d9c <handle_ansi+0x208>)
    1d32:	6811      	ldr	r1, [r2, #0]
    1d34:	428b      	cmp	r3, r1
    1d36:	f4ff af5b 	bcc.w	1bf0 <handle_ansi+0x5c>
		end -= ansi_val;
    1d3a:	b2ca      	uxtb	r2, r1
    1d3c:	1a9b      	subs	r3, r3, r2
    1d3e:	481a      	ldr	r0, [pc, #104]	; (1da8 <handle_ansi+0x214>)
    1d40:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1d42:	4b17      	ldr	r3, [pc, #92]	; (1da0 <handle_ansi+0x20c>)
    1d44:	7818      	ldrb	r0, [r3, #0]
    1d46:	4402      	add	r2, r0
    1d48:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1d4a:	4818      	ldr	r0, [pc, #96]	; (1dac <handle_ansi+0x218>)
    1d4c:	f001 f8fa 	bl	2f44 <printk>
    1d50:	e74e      	b.n	1bf0 <handle_ansi+0x5c>
		if (!cur) {
    1d52:	4b13      	ldr	r3, [pc, #76]	; (1da0 <handle_ansi+0x20c>)
    1d54:	7819      	ldrb	r1, [r3, #0]
    1d56:	2900      	cmp	r1, #0
    1d58:	f43f af4a 	beq.w	1bf0 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1d5c:	4814      	ldr	r0, [pc, #80]	; (1db0 <handle_ansi+0x21c>)
    1d5e:	f001 f8f1 	bl	2f44 <printk>
		end += cur;
    1d62:	4911      	ldr	r1, [pc, #68]	; (1da8 <handle_ansi+0x214>)
    1d64:	4a0e      	ldr	r2, [pc, #56]	; (1da0 <handle_ansi+0x20c>)
    1d66:	780b      	ldrb	r3, [r1, #0]
    1d68:	7810      	ldrb	r0, [r2, #0]
    1d6a:	4403      	add	r3, r0
    1d6c:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1d6e:	2300      	movs	r3, #0
    1d70:	7013      	strb	r3, [r2, #0]
		break;
    1d72:	e73d      	b.n	1bf0 <handle_ansi+0x5c>
		if (!end) {
    1d74:	4b0c      	ldr	r3, [pc, #48]	; (1da8 <handle_ansi+0x214>)
    1d76:	7819      	ldrb	r1, [r3, #0]
    1d78:	2900      	cmp	r1, #0
    1d7a:	f43f af39 	beq.w	1bf0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d7e:	480b      	ldr	r0, [pc, #44]	; (1dac <handle_ansi+0x218>)
    1d80:	f001 f8e0 	bl	2f44 <printk>
		cur += end;
    1d84:	4906      	ldr	r1, [pc, #24]	; (1da0 <handle_ansi+0x20c>)
    1d86:	4a08      	ldr	r2, [pc, #32]	; (1da8 <handle_ansi+0x214>)
    1d88:	780b      	ldrb	r3, [r1, #0]
    1d8a:	7810      	ldrb	r0, [r2, #0]
    1d8c:	4403      	add	r3, r0
    1d8e:	700b      	strb	r3, [r1, #0]
		end = 0;
    1d90:	2300      	movs	r3, #0
    1d92:	7013      	strb	r3, [r2, #0]
		break;
    1d94:	e72c      	b.n	1bf0 <handle_ansi+0x5c>
    1d96:	bf00      	nop
    1d98:	200002b0 	.word	0x200002b0
    1d9c:	20000298 	.word	0x20000298
    1da0:	200002ac 	.word	0x200002ac
    1da4:	2000029c 	.word	0x2000029c
    1da8:	200002ad 	.word	0x200002ad
    1dac:	0002e7dc 	.word	0x0002e7dc
    1db0:	0002e7d4 	.word	0x0002e7d4

00001db4 <uart_console_isr>:
{
    1db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1db8:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1dba:	e001      	b.n	1dc0 <uart_console_isr+0xc>
	return 0;
    1dbc:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1dbe:	b9d8      	cbnz	r0, 1df8 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1dc0:	4b78      	ldr	r3, [pc, #480]	; (1fa4 <uart_console_isr+0x1f0>)
    1dc2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dc4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1dc8:	2b00      	cmp	r3, #0
    1dca:	f000 80e7 	beq.w	1f9c <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1dce:	4798      	blx	r3
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d037      	beq.n	1e44 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1dd4:	4b73      	ldr	r3, [pc, #460]	; (1fa4 <uart_console_isr+0x1f0>)
    1dd6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dd8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1ddc:	2b00      	cmp	r3, #0
    1dde:	f000 80df 	beq.w	1fa0 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1de2:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1de4:	2800      	cmp	r0, #0
    1de6:	d02d      	beq.n	1e44 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1de8:	4b6e      	ldr	r3, [pc, #440]	; (1fa4 <uart_console_isr+0x1f0>)
    1dea:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dec:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1df0:	2b00      	cmp	r3, #0
    1df2:	d0e3      	beq.n	1dbc <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1df4:	4798      	blx	r3
    1df6:	e7e2      	b.n	1dbe <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1df8:	2201      	movs	r2, #1
    1dfa:	f10d 0107 	add.w	r1, sp, #7
    1dfe:	4b69      	ldr	r3, [pc, #420]	; (1fa4 <uart_console_isr+0x1f0>)
    1e00:	6818      	ldr	r0, [r3, #0]
    1e02:	f7ff fe0b 	bl	1a1c <read_uart>
		if (rx < 0) {
    1e06:	2800      	cmp	r0, #0
    1e08:	db1c      	blt.n	1e44 <uart_console_isr+0x90>
		if (!cmd) {
    1e0a:	4b67      	ldr	r3, [pc, #412]	; (1fa8 <uart_console_isr+0x1f4>)
    1e0c:	681b      	ldr	r3, [r3, #0]
    1e0e:	b183      	cbz	r3, 1e32 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e10:	f3bf 8f5b 	dmb	ish
    1e14:	4b65      	ldr	r3, [pc, #404]	; (1fac <uart_console_isr+0x1f8>)
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1e1c:	f013 0f02 	tst.w	r3, #2
    1e20:	d013      	beq.n	1e4a <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1e22:	4b61      	ldr	r3, [pc, #388]	; (1fa8 <uart_console_isr+0x1f4>)
    1e24:	6819      	ldr	r1, [r3, #0]
    1e26:	3104      	adds	r1, #4
    1e28:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e2c:	f7ff feb2 	bl	1b94 <handle_ansi>
			continue;
    1e30:	e7c6      	b.n	1dc0 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1e32:	2100      	movs	r1, #0
    1e34:	4b5e      	ldr	r3, [pc, #376]	; (1fb0 <uart_console_isr+0x1fc>)
    1e36:	6818      	ldr	r0, [r3, #0]
    1e38:	f026 fe88 	bl	28b4c <k_queue_get>
    1e3c:	4b5a      	ldr	r3, [pc, #360]	; (1fa8 <uart_console_isr+0x1f4>)
    1e3e:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1e40:	2800      	cmp	r0, #0
    1e42:	d1e5      	bne.n	1e10 <uart_console_isr+0x5c>
}
    1e44:	b002      	add	sp, #8
    1e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e4a:	4b58      	ldr	r3, [pc, #352]	; (1fac <uart_console_isr+0x1f8>)
    1e4c:	f3bf 8f5b 	dmb	ish
    1e50:	e853 2f00 	ldrex	r2, [r3]
    1e54:	f022 0101 	bic.w	r1, r2, #1
    1e58:	e843 1000 	strex	r0, r1, [r3]
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d1f7      	bne.n	1e50 <uart_console_isr+0x9c>
    1e60:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1e64:	f012 0f01 	tst.w	r2, #1
    1e68:	d01d      	beq.n	1ea6 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e6e:	2b5b      	cmp	r3, #91	; 0x5b
    1e70:	d1a6      	bne.n	1dc0 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e72:	4b4e      	ldr	r3, [pc, #312]	; (1fac <uart_console_isr+0x1f8>)
    1e74:	f3bf 8f5b 	dmb	ish
    1e78:	e853 2f00 	ldrex	r2, [r3]
    1e7c:	f042 0202 	orr.w	r2, r2, #2
    1e80:	e843 2100 	strex	r1, r2, [r3]
    1e84:	2900      	cmp	r1, #0
    1e86:	d1f7      	bne.n	1e78 <uart_console_isr+0xc4>
    1e88:	f3bf 8f5b 	dmb	ish
    1e8c:	f3bf 8f5b 	dmb	ish
    1e90:	e853 2f00 	ldrex	r2, [r3]
    1e94:	f042 0204 	orr.w	r2, r2, #4
    1e98:	e843 2100 	strex	r1, r2, [r3]
    1e9c:	2900      	cmp	r1, #0
    1e9e:	d1f7      	bne.n	1e90 <uart_console_isr+0xdc>
    1ea0:	f3bf 8f5b 	dmb	ish
			continue;
    1ea4:	e78c      	b.n	1dc0 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1ea6:	f028 f8db 	bl	2a060 <__locale_ctype_ptr>
    1eaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1eae:	4408      	add	r0, r1
    1eb0:	7843      	ldrb	r3, [r0, #1]
    1eb2:	f013 0f97 	tst.w	r3, #151	; 0x97
    1eb6:	d15f      	bne.n	1f78 <uart_console_isr+0x1c4>
			switch (byte) {
    1eb8:	290d      	cmp	r1, #13
    1eba:	d03c      	beq.n	1f36 <uart_console_isr+0x182>
    1ebc:	d916      	bls.n	1eec <uart_console_isr+0x138>
    1ebe:	291b      	cmp	r1, #27
    1ec0:	d02b      	beq.n	1f1a <uart_console_isr+0x166>
    1ec2:	297f      	cmp	r1, #127	; 0x7f
    1ec4:	f47f af7c 	bne.w	1dc0 <uart_console_isr+0xc>
				if (cur > 0) {
    1ec8:	4b3a      	ldr	r3, [pc, #232]	; (1fb4 <uart_console_isr+0x200>)
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b00      	cmp	r3, #0
    1ece:	f43f af77 	beq.w	1dc0 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1ed2:	4a35      	ldr	r2, [pc, #212]	; (1fa8 <uart_console_isr+0x1f4>)
    1ed4:	6812      	ldr	r2, [r2, #0]
    1ed6:	3b01      	subs	r3, #1
    1ed8:	b2db      	uxtb	r3, r3
    1eda:	4936      	ldr	r1, [pc, #216]	; (1fb4 <uart_console_isr+0x200>)
    1edc:	700b      	strb	r3, [r1, #0]
    1ede:	4413      	add	r3, r2
    1ee0:	4a35      	ldr	r2, [pc, #212]	; (1fb8 <uart_console_isr+0x204>)
    1ee2:	7811      	ldrb	r1, [r2, #0]
    1ee4:	1d18      	adds	r0, r3, #4
    1ee6:	f7ff fde9 	bl	1abc <del_char>
    1eea:	e769      	b.n	1dc0 <uart_console_isr+0xc>
			switch (byte) {
    1eec:	2909      	cmp	r1, #9
    1eee:	f47f af67 	bne.w	1dc0 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1ef2:	4b32      	ldr	r3, [pc, #200]	; (1fbc <uart_console_isr+0x208>)
    1ef4:	681b      	ldr	r3, [r3, #0]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	f43f af62 	beq.w	1dc0 <uart_console_isr+0xc>
    1efc:	4a2e      	ldr	r2, [pc, #184]	; (1fb8 <uart_console_isr+0x204>)
    1efe:	7812      	ldrb	r2, [r2, #0]
    1f00:	2a00      	cmp	r2, #0
    1f02:	f47f af5d 	bne.w	1dc0 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1f06:	4a28      	ldr	r2, [pc, #160]	; (1fa8 <uart_console_isr+0x1f4>)
    1f08:	6810      	ldr	r0, [r2, #0]
    1f0a:	4c2a      	ldr	r4, [pc, #168]	; (1fb4 <uart_console_isr+0x200>)
    1f0c:	7821      	ldrb	r1, [r4, #0]
    1f0e:	3004      	adds	r0, #4
    1f10:	4798      	blx	r3
    1f12:	7823      	ldrb	r3, [r4, #0]
    1f14:	4403      	add	r3, r0
    1f16:	7023      	strb	r3, [r4, #0]
			continue;
    1f18:	e752      	b.n	1dc0 <uart_console_isr+0xc>
    1f1a:	4b24      	ldr	r3, [pc, #144]	; (1fac <uart_console_isr+0x1f8>)
    1f1c:	f3bf 8f5b 	dmb	ish
    1f20:	e853 2f00 	ldrex	r2, [r3]
    1f24:	f042 0201 	orr.w	r2, r2, #1
    1f28:	e843 2100 	strex	r1, r2, [r3]
    1f2c:	2900      	cmp	r1, #0
    1f2e:	d1f7      	bne.n	1f20 <uart_console_isr+0x16c>
    1f30:	f3bf 8f5b 	dmb	ish
    1f34:	e744      	b.n	1dc0 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1f36:	4d1c      	ldr	r5, [pc, #112]	; (1fa8 <uart_console_isr+0x1f4>)
    1f38:	682b      	ldr	r3, [r5, #0]
    1f3a:	4f1e      	ldr	r7, [pc, #120]	; (1fb4 <uart_console_isr+0x200>)
    1f3c:	783a      	ldrb	r2, [r7, #0]
    1f3e:	4e1e      	ldr	r6, [pc, #120]	; (1fb8 <uart_console_isr+0x204>)
    1f40:	7831      	ldrb	r1, [r6, #0]
    1f42:	440a      	add	r2, r1
    1f44:	4413      	add	r3, r2
    1f46:	2400      	movs	r4, #0
    1f48:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1f4a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1fa4 <uart_console_isr+0x1f0>
    1f4e:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f52:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f54:	685b      	ldr	r3, [r3, #4]
    1f56:	210d      	movs	r1, #13
    1f58:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1f5a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f5e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f60:	685b      	ldr	r3, [r3, #4]
    1f62:	210a      	movs	r1, #10
    1f64:	4798      	blx	r3
				cur = 0;
    1f66:	703c      	strb	r4, [r7, #0]
				end = 0;
    1f68:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1f6a:	6829      	ldr	r1, [r5, #0]
    1f6c:	4b14      	ldr	r3, [pc, #80]	; (1fc0 <uart_console_isr+0x20c>)
    1f6e:	6818      	ldr	r0, [r3, #0]
    1f70:	f026 fdc4 	bl	28afc <k_queue_append>
				cmd = NULL;
    1f74:	602c      	str	r4, [r5, #0]
				break;
    1f76:	e723      	b.n	1dc0 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1f78:	4b0e      	ldr	r3, [pc, #56]	; (1fb4 <uart_console_isr+0x200>)
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	4a0e      	ldr	r2, [pc, #56]	; (1fb8 <uart_console_isr+0x204>)
    1f7e:	7812      	ldrb	r2, [r2, #0]
    1f80:	18d0      	adds	r0, r2, r3
    1f82:	287e      	cmp	r0, #126	; 0x7e
    1f84:	f63f af1c 	bhi.w	1dc0 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1f88:	4807      	ldr	r0, [pc, #28]	; (1fa8 <uart_console_isr+0x1f4>)
    1f8a:	6800      	ldr	r0, [r0, #0]
    1f8c:	1c5d      	adds	r5, r3, #1
    1f8e:	4c09      	ldr	r4, [pc, #36]	; (1fb4 <uart_console_isr+0x200>)
    1f90:	7025      	strb	r5, [r4, #0]
    1f92:	4418      	add	r0, r3
    1f94:	3004      	adds	r0, #4
    1f96:	f7ff fdc9 	bl	1b2c <insert_char>
    1f9a:	e711      	b.n	1dc0 <uart_console_isr+0xc>
	return 0;
    1f9c:	2000      	movs	r0, #0
    1f9e:	e717      	b.n	1dd0 <uart_console_isr+0x1c>
	return 0;
    1fa0:	2000      	movs	r0, #0
    1fa2:	e71f      	b.n	1de4 <uart_console_isr+0x30>
    1fa4:	200002b8 	.word	0x200002b8
    1fa8:	200002a4 	.word	0x200002a4
    1fac:	200002b0 	.word	0x200002b0
    1fb0:	200002a0 	.word	0x200002a0
    1fb4:	200002ac 	.word	0x200002ac
    1fb8:	200002ad 	.word	0x200002ad
    1fbc:	200002a8 	.word	0x200002a8
    1fc0:	200002b4 	.word	0x200002b4

00001fc4 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1fc4:	b508      	push	{r3, lr}
	avail_queue = avail;
    1fc6:	4b04      	ldr	r3, [pc, #16]	; (1fd8 <uart_register_input+0x14>)
    1fc8:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <uart_register_input+0x18>)
    1fcc:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    1fce:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <uart_register_input+0x1c>)
    1fd0:	601a      	str	r2, [r3, #0]

	console_input_init();
    1fd2:	f7ff fd39 	bl	1a48 <console_input_init>
    1fd6:	bd08      	pop	{r3, pc}
    1fd8:	200002a0 	.word	0x200002a0
    1fdc:	200002b4 	.word	0x200002b4
    1fe0:	200002a8 	.word	0x200002a8

00001fe4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1fe4:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1fe6:	4802      	ldr	r0, [pc, #8]	; (1ff0 <uart_console_hook_install+0xc>)
    1fe8:	f000 fe70 	bl	2ccc <__printk_hook_install>
    1fec:	bd08      	pop	{r3, pc}
    1fee:	bf00      	nop
    1ff0:	000019f1 	.word	0x000019f1

00001ff4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1ff4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1ff6:	4804      	ldr	r0, [pc, #16]	; (2008 <uart_console_init+0x14>)
    1ff8:	f025 fe50 	bl	27c9c <device_get_binding>
    1ffc:	4b03      	ldr	r3, [pc, #12]	; (200c <uart_console_init+0x18>)
    1ffe:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2000:	f7ff fff0 	bl	1fe4 <uart_console_hook_install>

	return 0;
}
    2004:	2000      	movs	r0, #0
    2006:	bd08      	pop	{r3, pc}
    2008:	0002e7e4 	.word	0x0002e7e4
    200c:	200002b8 	.word	0x200002b8

00002010 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    2010:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    2012:	f000 fa73 	bl	24fc <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2016:	4b08      	ldr	r3, [pc, #32]	; (2038 <sys_rand32_get+0x28>)
    2018:	f3bf 8f5b 	dmb	ish
    201c:	e853 2f00 	ldrex	r2, [r3]
    2020:	4906      	ldr	r1, [pc, #24]	; (203c <sys_rand32_get+0x2c>)
    2022:	1851      	adds	r1, r2, r1
    2024:	e843 1e00 	strex	lr, r1, [r3]
    2028:	f1be 0f00 	cmp.w	lr, #0
    202c:	d1f6      	bne.n	201c <sys_rand32_get+0xc>
    202e:	f3bf 8f5b 	dmb	ish
}
    2032:	4410      	add	r0, r2
    2034:	bd08      	pop	{r3, pc}
    2036:	bf00      	nop
    2038:	200002bc 	.word	0x200002bc
    203c:	3b9aca0d 	.word	0x3b9aca0d

00002040 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2040:	6803      	ldr	r3, [r0, #0]
    2042:	689b      	ldr	r3, [r3, #8]
    2044:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    2046:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    204a:	d05b      	beq.n	2104 <baudrate_set+0xc4>
    204c:	d910      	bls.n	2070 <baudrate_set+0x30>
    204e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2052:	d05e      	beq.n	2112 <baudrate_set+0xd2>
    2054:	d833      	bhi.n	20be <baudrate_set+0x7e>
    2056:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    205a:	d055      	beq.n	2108 <baudrate_set+0xc8>
    205c:	d929      	bls.n	20b2 <baudrate_set+0x72>
    205e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2062:	d054      	beq.n	210e <baudrate_set+0xce>
    2064:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2068:	d11b      	bne.n	20a2 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    206a:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    206e:	e03b      	b.n	20e8 <baudrate_set+0xa8>
	switch (baudrate) {
    2070:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2074:	d03f      	beq.n	20f6 <baudrate_set+0xb6>
    2076:	d90b      	bls.n	2090 <baudrate_set+0x50>
    2078:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    207c:	d03e      	beq.n	20fc <baudrate_set+0xbc>
    207e:	d913      	bls.n	20a8 <baudrate_set+0x68>
    2080:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2084:	d03c      	beq.n	2100 <baudrate_set+0xc0>
    2086:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    208a:	d10a      	bne.n	20a2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    208c:	4a27      	ldr	r2, [pc, #156]	; (212c <baudrate_set+0xec>)
		break;
    208e:	e02b      	b.n	20e8 <baudrate_set+0xa8>
	switch (baudrate) {
    2090:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2094:	d046      	beq.n	2124 <baudrate_set+0xe4>
    2096:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    209a:	d029      	beq.n	20f0 <baudrate_set+0xb0>
    209c:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    20a0:	d020      	beq.n	20e4 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    20a2:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    20a6:	4770      	bx	lr
	switch (baudrate) {
    20a8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    20ac:	d1f9      	bne.n	20a2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    20ae:	4a20      	ldr	r2, [pc, #128]	; (2130 <baudrate_set+0xf0>)
		break;
    20b0:	e01a      	b.n	20e8 <baudrate_set+0xa8>
	switch (baudrate) {
    20b2:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    20b6:	d1f4      	bne.n	20a2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    20b8:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    20bc:	e014      	b.n	20e8 <baudrate_set+0xa8>
	switch (baudrate) {
    20be:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    20c2:	d029      	beq.n	2118 <baudrate_set+0xd8>
    20c4:	d908      	bls.n	20d8 <baudrate_set+0x98>
    20c6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    20ca:	d028      	beq.n	211e <baudrate_set+0xde>
    20cc:	4a19      	ldr	r2, [pc, #100]	; (2134 <baudrate_set+0xf4>)
    20ce:	4291      	cmp	r1, r2
    20d0:	d1e7      	bne.n	20a2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    20d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    20d6:	e007      	b.n	20e8 <baudrate_set+0xa8>
	switch (baudrate) {
    20d8:	4a17      	ldr	r2, [pc, #92]	; (2138 <baudrate_set+0xf8>)
    20da:	4291      	cmp	r1, r2
    20dc:	d1e1      	bne.n	20a2 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    20de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    20e2:	e001      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    20e4:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    20e8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    20ec:	2000      	movs	r0, #0
    20ee:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    20f0:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    20f4:	e7f8      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    20f6:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    20fa:	e7f5      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    20fc:	4a0f      	ldr	r2, [pc, #60]	; (213c <baudrate_set+0xfc>)
		break;
    20fe:	e7f3      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    2100:	4a0f      	ldr	r2, [pc, #60]	; (2140 <baudrate_set+0x100>)
		break;
    2102:	e7f1      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2104:	4a0f      	ldr	r2, [pc, #60]	; (2144 <baudrate_set+0x104>)
		break;
    2106:	e7ef      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    2108:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    210c:	e7ec      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    210e:	4a0e      	ldr	r2, [pc, #56]	; (2148 <baudrate_set+0x108>)
		break;
    2110:	e7ea      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    2112:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    2116:	e7e7      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    2118:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    211c:	e7e4      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    211e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    2122:	e7e1      	b.n	20e8 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2124:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    2128:	e7de      	b.n	20e8 <baudrate_set+0xa8>
    212a:	bf00      	nop
    212c:	004ea000 	.word	0x004ea000
    2130:	0013b000 	.word	0x0013b000
    2134:	000f4240 	.word	0x000f4240
    2138:	0003d090 	.word	0x0003d090
    213c:	00275000 	.word	0x00275000
    2140:	003af000 	.word	0x003af000
    2144:	0075c000 	.word	0x0075c000
    2148:	013a9000 	.word	0x013a9000

0000214c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    214c:	6803      	ldr	r3, [r0, #0]
    214e:	689b      	ldr	r3, [r3, #8]
    2150:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2152:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2156:	b132      	cbz	r2, 2166 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2158:	2000      	movs	r0, #0
    215a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    215e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2162:	700b      	strb	r3, [r1, #0]

	return 0;
    2164:	4770      	bx	lr
		return -1;
    2166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    216a:	4770      	bx	lr

0000216c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    216c:	6803      	ldr	r3, [r0, #0]
    216e:	689b      	ldr	r3, [r3, #8]
    2170:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2172:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2176:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    217a:	2b00      	cmp	r3, #0
    217c:	d0fb      	beq.n	2176 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    217e:	2300      	movs	r3, #0
    2180:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    2184:	4608      	mov	r0, r1
    2186:	4770      	bx	lr

00002188 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2188:	6803      	ldr	r3, [r0, #0]
    218a:	689b      	ldr	r3, [r3, #8]
    218c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    218e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2192:	b132      	cbz	r2, 21a2 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2194:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2198:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    219c:	f000 000f 	and.w	r0, r0, #15
    21a0:	4770      	bx	lr
	u32_t error = 0;
    21a2:	2000      	movs	r0, #0
    21a4:	e7fa      	b.n	219c <uart_nrf5_err_check+0x14>

000021a6 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    21a6:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21a8:	6803      	ldr	r3, [r0, #0]
    21aa:	689b      	ldr	r3, [r3, #8]
    21ac:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    21ae:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21b0:	e007      	b.n	21c2 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    21b2:	2000      	movs	r0, #0
    21b4:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    21b8:	1c58      	adds	r0, r3, #1
    21ba:	5ccb      	ldrb	r3, [r1, r3]
    21bc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    21c0:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21c2:	4618      	mov	r0, r3
    21c4:	1ad5      	subs	r5, r2, r3
    21c6:	2d00      	cmp	r5, #0
    21c8:	dd03      	ble.n	21d2 <uart_nrf5_fifo_fill+0x2c>
    21ca:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    21ce:	2d00      	cmp	r5, #0
    21d0:	d1ef      	bne.n	21b2 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    21d2:	bc30      	pop	{r4, r5}
    21d4:	4770      	bx	lr

000021d6 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    21d6:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21d8:	6803      	ldr	r3, [r0, #0]
    21da:	689b      	ldr	r3, [r3, #8]
    21dc:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    21de:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21e0:	e007      	b.n	21f2 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    21e2:	2000      	movs	r0, #0
    21e4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    21e8:	1c58      	adds	r0, r3, #1
    21ea:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    21ee:	54cd      	strb	r5, [r1, r3]
    21f0:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21f2:	4618      	mov	r0, r3
    21f4:	1ad5      	subs	r5, r2, r3
    21f6:	2d00      	cmp	r5, #0
    21f8:	dd03      	ble.n	2202 <uart_nrf5_fifo_read+0x2c>
    21fa:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    21fe:	2d00      	cmp	r5, #0
    2200:	d1ef      	bne.n	21e2 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    2202:	bc30      	pop	{r4, r5}
    2204:	4770      	bx	lr

00002206 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2206:	6803      	ldr	r3, [r0, #0]
    2208:	689b      	ldr	r3, [r3, #8]
    220a:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    220c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2210:	f043 0308 	orr.w	r3, r3, #8
    2214:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2218:	4770      	bx	lr

0000221a <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    221a:	6803      	ldr	r3, [r0, #0]
    221c:	689b      	ldr	r3, [r3, #8]
    221e:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2220:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2224:	f043 0308 	orr.w	r3, r3, #8
    2228:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    222c:	4770      	bx	lr

0000222e <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    222e:	6803      	ldr	r3, [r0, #0]
    2230:	689b      	ldr	r3, [r3, #8]
    2232:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2234:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2238:	4770      	bx	lr

0000223a <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    223a:	6803      	ldr	r3, [r0, #0]
    223c:	689b      	ldr	r3, [r3, #8]
    223e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2240:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2244:	f043 0304 	orr.w	r3, r3, #4
    2248:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    224c:	4770      	bx	lr

0000224e <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    224e:	6803      	ldr	r3, [r0, #0]
    2250:	689b      	ldr	r3, [r3, #8]
    2252:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2254:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2258:	f043 0304 	orr.w	r3, r3, #4
    225c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2260:	4770      	bx	lr

00002262 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2262:	6803      	ldr	r3, [r0, #0]
    2264:	689b      	ldr	r3, [r3, #8]
    2266:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2268:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    226c:	fab0 f080 	clz	r0, r0
    2270:	0940      	lsrs	r0, r0, #5
    2272:	4770      	bx	lr

00002274 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2274:	6803      	ldr	r3, [r0, #0]
    2276:	689b      	ldr	r3, [r3, #8]
    2278:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    227a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    227e:	4770      	bx	lr

00002280 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2280:	6803      	ldr	r3, [r0, #0]
    2282:	689b      	ldr	r3, [r3, #8]
    2284:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    2286:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    228a:	f043 0310 	orr.w	r3, r3, #16
    228e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2292:	4770      	bx	lr

00002294 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2294:	6803      	ldr	r3, [r0, #0]
    2296:	689b      	ldr	r3, [r3, #8]
    2298:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    229a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    229e:	f043 0310 	orr.w	r3, r3, #16
    22a2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22a6:	4770      	bx	lr

000022a8 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    22a8:	b510      	push	{r4, lr}
    22aa:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22ac:	f7ff ffbf 	bl	222e <uart_nrf5_irq_tx_ready>
    22b0:	b110      	cbz	r0, 22b8 <uart_nrf5_irq_is_pending+0x10>
    22b2:	2301      	movs	r3, #1
}
    22b4:	4618      	mov	r0, r3
    22b6:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22b8:	4620      	mov	r0, r4
    22ba:	f7ff ffdb 	bl	2274 <uart_nrf5_irq_rx_ready>
    22be:	4603      	mov	r3, r0
    22c0:	2800      	cmp	r0, #0
    22c2:	d0f7      	beq.n	22b4 <uart_nrf5_irq_is_pending+0xc>
    22c4:	2301      	movs	r3, #1
    22c6:	e7f5      	b.n	22b4 <uart_nrf5_irq_is_pending+0xc>

000022c8 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    22c8:	2001      	movs	r0, #1
    22ca:	4770      	bx	lr

000022cc <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22cc:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    22ce:	6059      	str	r1, [r3, #4]
    22d0:	4770      	bx	lr

000022d2 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    22d2:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22d4:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    22d6:	685b      	ldr	r3, [r3, #4]
    22d8:	b103      	cbz	r3, 22dc <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    22da:	4798      	blx	r3
    22dc:	bd08      	pop	{r3, pc}

000022de <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    22de:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    22e0:	2200      	movs	r2, #0
    22e2:	2101      	movs	r1, #1
    22e4:	2002      	movs	r0, #2
    22e6:	f025 fb35 	bl	27954 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    22ea:	2002      	movs	r0, #2
    22ec:	f025 fb08 	bl	27900 <_arch_irq_enable>
    22f0:	bd08      	pop	{r3, pc}
	...

000022f4 <uart_nrf5_init>:
{
    22f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f6:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    22f8:	6803      	ldr	r3, [r0, #0]
    22fa:	689b      	ldr	r3, [r3, #8]
    22fc:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    22fe:	481d      	ldr	r0, [pc, #116]	; (2374 <uart_nrf5_init+0x80>)
    2300:	f025 fccc 	bl	27c9c <device_get_binding>
    2304:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    2306:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2308:	681f      	ldr	r7, [r3, #0]
    230a:	f240 1301 	movw	r3, #257	; 0x101
    230e:	2206      	movs	r2, #6
    2310:	2100      	movs	r1, #0
    2312:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2314:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    2316:	681f      	ldr	r7, [r3, #0]
    2318:	2300      	movs	r3, #0
    231a:	2208      	movs	r2, #8
    231c:	4619      	mov	r1, r3
    231e:	4630      	mov	r0, r6
    2320:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2322:	2306      	movs	r3, #6
    2324:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2328:	2308      	movs	r3, #8
    232a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    232e:	68a3      	ldr	r3, [r4, #8]
    2330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2334:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2336:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    2338:	6822      	ldr	r2, [r4, #0]
    233a:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    233c:	6852      	ldr	r2, [r2, #4]
    233e:	6819      	ldr	r1, [r3, #0]
    2340:	4620      	mov	r0, r4
    2342:	f7ff fe7d 	bl	2040 <baudrate_set>
	if (err) {
    2346:	4606      	mov	r6, r0
    2348:	b108      	cbz	r0, 234e <uart_nrf5_init+0x5a>
}
    234a:	4630      	mov	r0, r6
    234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    234e:	2304      	movs	r3, #4
    2350:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2354:	2300      	movs	r3, #0
    2356:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    235a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    235e:	2301      	movs	r3, #1
    2360:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    2362:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2364:	4b04      	ldr	r3, [pc, #16]	; (2378 <uart_nrf5_init+0x84>)
    2366:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    2368:	6823      	ldr	r3, [r4, #0]
    236a:	689b      	ldr	r3, [r3, #8]
    236c:	689b      	ldr	r3, [r3, #8]
    236e:	4620      	mov	r0, r4
    2370:	4798      	blx	r3
	return 0;
    2372:	e7ea      	b.n	234a <uart_nrf5_init+0x56>
    2374:	0002e7f8 	.word	0x0002e7f8
    2378:	0002e824 	.word	0x0002e824

0000237c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    237c:	4b08      	ldr	r3, [pc, #32]	; (23a0 <rtc_compare_set+0x24>)
    237e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    2382:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    2386:	1ac0      	subs	r0, r0, r3
    2388:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    238c:	3802      	subs	r0, #2
    238e:	4b05      	ldr	r3, [pc, #20]	; (23a4 <rtc_compare_set+0x28>)
    2390:	4298      	cmp	r0, r3
    2392:	d904      	bls.n	239e <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2394:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2398:	4b03      	ldr	r3, [pc, #12]	; (23a8 <rtc_compare_set+0x2c>)
    239a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    239e:	4770      	bx	lr
    23a0:	40011000 	.word	0x40011000
    23a4:	007ffffd 	.word	0x007ffffd
    23a8:	e000e100 	.word	0xe000e100

000023ac <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    23ac:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    23ae:	4b15      	ldr	r3, [pc, #84]	; (2404 <rtc_announce_set_next+0x58>)
    23b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    23b4:	4a14      	ldr	r2, [pc, #80]	; (2408 <rtc_announce_set_next+0x5c>)
    23b6:	6811      	ldr	r1, [r2, #0]
    23b8:	1a5b      	subs	r3, r3, r1
    23ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    23be:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    23c2:	d917      	bls.n	23f4 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23c4:	4a11      	ldr	r2, [pc, #68]	; (240c <rtc_announce_set_next+0x60>)
    23c6:	fba2 0203 	umull	r0, r2, r2, r3
    23ca:	1a9b      	subs	r3, r3, r2
    23cc:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    23d0:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    23d2:	4a0f      	ldr	r2, [pc, #60]	; (2410 <rtc_announce_set_next+0x64>)
    23d4:	6810      	ldr	r0, [r2, #0]
    23d6:	4283      	cmp	r3, r0
    23d8:	d800      	bhi.n	23dc <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23da:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    23dc:	f240 1347 	movw	r3, #327	; 0x147
    23e0:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    23e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    23e8:	4a07      	ldr	r2, [pc, #28]	; (2408 <rtc_announce_set_next+0x5c>)
    23ea:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    23ec:	4b09      	ldr	r3, [pc, #36]	; (2414 <rtc_announce_set_next+0x68>)
    23ee:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    23f0:	f026 ff9c 	bl	2932c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    23f4:	4b04      	ldr	r3, [pc, #16]	; (2408 <rtc_announce_set_next+0x5c>)
    23f6:	6818      	ldr	r0, [r3, #0]
    23f8:	f200 1047 	addw	r0, r0, #327	; 0x147
    23fc:	f7ff ffbe 	bl	237c <rtc_compare_set>
    2400:	bd08      	pop	{r3, pc}
    2402:	bf00      	nop
    2404:	40011000 	.word	0x40011000
    2408:	200002c4 	.word	0x200002c4
    240c:	90d4f121 	.word	0x90d4f121
    2410:	200002c0 	.word	0x200002c0
    2414:	2000c578 	.word	0x2000c578

00002418 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    2418:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    241a:	2200      	movs	r2, #0
    241c:	4b02      	ldr	r3, [pc, #8]	; (2428 <rtc1_nrf5_isr+0x10>)
    241e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    2422:	f7ff ffc3 	bl	23ac <rtc_announce_set_next>
    2426:	bd08      	pop	{r3, pc}
    2428:	40011000 	.word	0x40011000

0000242c <_timer_idle_enter>:
{
    242c:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    242e:	f246 4335 	movw	r3, #25653	; 0x6435
    2432:	4298      	cmp	r0, r3
    2434:	d900      	bls.n	2438 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    2436:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    2438:	4b05      	ldr	r3, [pc, #20]	; (2450 <_timer_idle_enter+0x24>)
    243a:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    243c:	4b05      	ldr	r3, [pc, #20]	; (2454 <_timer_idle_enter+0x28>)
    243e:	681b      	ldr	r3, [r3, #0]
    2440:	f240 1247 	movw	r2, #327	; 0x147
    2444:	fb02 3000 	mla	r0, r2, r0, r3
    2448:	f7ff ff98 	bl	237c <rtc_compare_set>
    244c:	bd08      	pop	{r3, pc}
    244e:	bf00      	nop
    2450:	200002c0 	.word	0x200002c0
    2454:	200002c4 	.word	0x200002c4

00002458 <_timer_idle_exit>:
{
    2458:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    245a:	2200      	movs	r2, #0
    245c:	4b06      	ldr	r3, [pc, #24]	; (2478 <_timer_idle_exit+0x20>)
    245e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2466:	4b05      	ldr	r3, [pc, #20]	; (247c <_timer_idle_exit+0x24>)
    2468:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    246c:	f7ff ff9e 	bl	23ac <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2470:	2201      	movs	r2, #1
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <_timer_idle_exit+0x28>)
    2474:	601a      	str	r2, [r3, #0]
    2476:	bd08      	pop	{r3, pc}
    2478:	40011000 	.word	0x40011000
    247c:	e000e100 	.word	0xe000e100
    2480:	200002c0 	.word	0x200002c0

00002484 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    2484:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    2486:	4818      	ldr	r0, [pc, #96]	; (24e8 <_sys_clock_driver_init+0x64>)
    2488:	f025 fc08 	bl	27c9c <device_get_binding>
	if (!clock) {
    248c:	b348      	cbz	r0, 24e2 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    248e:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    2490:	6812      	ldr	r2, [r2, #0]
    2492:	2101      	movs	r1, #1
    2494:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    2496:	2400      	movs	r4, #0
    2498:	4b14      	ldr	r3, [pc, #80]	; (24ec <_sys_clock_driver_init+0x68>)
    249a:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    249c:	2601      	movs	r6, #1
    249e:	4b14      	ldr	r3, [pc, #80]	; (24f0 <_sys_clock_driver_init+0x6c>)
    24a0:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    24a2:	4d14      	ldr	r5, [pc, #80]	; (24f4 <_sys_clock_driver_init+0x70>)
    24a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    24a8:	f240 1347 	movw	r3, #327	; 0x147
    24ac:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    24b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    24b4:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    24b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    24bc:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    24c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24c4:	4b0c      	ldr	r3, [pc, #48]	; (24f8 <_sys_clock_driver_init+0x74>)
    24c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    24ca:	4622      	mov	r2, r4
    24cc:	4631      	mov	r1, r6
    24ce:	2011      	movs	r0, #17
    24d0:	f025 fa40 	bl	27954 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    24d4:	2011      	movs	r0, #17
    24d6:	f025 fa13 	bl	27900 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    24da:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    24dc:	602e      	str	r6, [r5, #0]

	return 0;
    24de:	4620      	mov	r0, r4
    24e0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    24e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    24e6:	bd70      	pop	{r4, r5, r6, pc}
    24e8:	0002e800 	.word	0x0002e800
    24ec:	200002c4 	.word	0x200002c4
    24f0:	200002c0 	.word	0x200002c0
    24f4:	40011000 	.word	0x40011000
    24f8:	e000e100 	.word	0xe000e100

000024fc <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    24fc:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    24fe:	4b0d      	ldr	r3, [pc, #52]	; (2534 <_timer_cycle_get_32+0x38>)
    2500:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2504:	e000      	b.n	2508 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    2506:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    2508:	4b0b      	ldr	r3, [pc, #44]	; (2538 <_timer_cycle_get_32+0x3c>)
    250a:	e9d3 2300 	ldrd	r2, r3, [r3]
    250e:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2510:	f240 1047 	movw	r0, #327	; 0x147
    2514:	fb00 1212 	mls	r2, r0, r2, r1
    2518:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    251c:	4b05      	ldr	r3, [pc, #20]	; (2534 <_timer_cycle_get_32+0x38>)
    251e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    2522:	4299      	cmp	r1, r3
    2524:	d1ef      	bne.n	2506 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2526:	4b05      	ldr	r3, [pc, #20]	; (253c <_timer_cycle_get_32+0x40>)
    2528:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    252a:	fb00 2004 	mla	r0, r0, r4, r2
    252e:	bc10      	pop	{r4}
    2530:	4770      	bx	lr
    2532:	bf00      	nop
    2534:	40011000 	.word	0x40011000
    2538:	20002b70 	.word	0x20002b70
    253c:	2000c57c 	.word	0x2000c57c

00002540 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    2540:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2542:	6803      	ldr	r3, [r0, #0]
    2544:	689b      	ldr	r3, [r3, #8]
    2546:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2548:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    254a:	2000      	movs	r0, #0
    254c:	e000      	b.n	2550 <gpiote_find_channel+0x10>
    254e:	3001      	adds	r0, #1
    2550:	2807      	cmp	r0, #7
    2552:	dc0d      	bgt.n	2570 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2554:	68d3      	ldr	r3, [r2, #12]
    2556:	40c3      	lsrs	r3, r0
    2558:	f013 0f01 	tst.w	r3, #1
    255c:	d0f7      	beq.n	254e <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    255e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2562:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2566:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    256a:	428b      	cmp	r3, r1
    256c:	d1ef      	bne.n	254e <gpiote_find_channel+0xe>
    256e:	e001      	b.n	2574 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2570:	f06f 0012 	mvn.w	r0, #18
}
    2574:	bc10      	pop	{r4}
    2576:	4770      	bx	lr

00002578 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2578:	6800      	ldr	r0, [r0, #0]
    257a:	6880      	ldr	r0, [r0, #8]
    257c:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    257e:	b121      	cbz	r1, 258a <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    2580:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2584:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2586:	2000      	movs	r0, #0
    2588:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    258a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    258e:	fa21 f202 	lsr.w	r2, r1, r2
    2592:	f002 0201 	and.w	r2, r2, #1
    2596:	601a      	str	r2, [r3, #0]
    2598:	e7f5      	b.n	2586 <gpio_nrf5_read+0xe>

0000259a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    259a:	6800      	ldr	r0, [r0, #0]
    259c:	6880      	ldr	r0, [r0, #8]
    259e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25a0:	b961      	cbnz	r1, 25bc <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    25a2:	b12b      	cbz	r3, 25b0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    25a4:	2301      	movs	r3, #1
    25a6:	fa03 f202 	lsl.w	r2, r3, r2
    25aa:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    25ae:	e007      	b.n	25c0 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    25b0:	2301      	movs	r3, #1
    25b2:	fa03 f202 	lsl.w	r2, r3, r2
    25b6:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    25ba:	e001      	b.n	25c0 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    25bc:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    25c0:	2000      	movs	r0, #0
    25c2:	4770      	bx	lr

000025c4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    25c4:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25c6:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    25c8:	b14a      	cbz	r2, 25de <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    25ca:	6823      	ldr	r3, [r4, #0]
    25cc:	600b      	str	r3, [r1, #0]
	list->head = node;
    25ce:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    25d0:	6863      	ldr	r3, [r4, #4]
    25d2:	b113      	cbz	r3, 25da <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    25d4:	2000      	movs	r0, #0
    25d6:	bc10      	pop	{r4}
    25d8:	4770      	bx	lr
		list->tail = list->head;
    25da:	6061      	str	r1, [r4, #4]
    25dc:	e7fa      	b.n	25d4 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    25de:	4608      	mov	r0, r1
	return list->head;
    25e0:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    25e2:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25e4:	2b00      	cmp	r3, #0
    25e6:	d0f5      	beq.n	25d4 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    25e8:	4298      	cmp	r0, r3
    25ea:	d002      	beq.n	25f2 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    25ec:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	e7f8      	b.n	25e4 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    25f2:	b13a      	cbz	r2, 2604 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    25f4:	680b      	ldr	r3, [r1, #0]
    25f6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    25f8:	6863      	ldr	r3, [r4, #4]
    25fa:	4299      	cmp	r1, r3
    25fc:	d009      	beq.n	2612 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    25fe:	2300      	movs	r3, #0
    2600:	600b      	str	r3, [r1, #0]
    2602:	e7e7      	b.n	25d4 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2604:	680b      	ldr	r3, [r1, #0]
    2606:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    2608:	6862      	ldr	r2, [r4, #4]
    260a:	4291      	cmp	r1, r2
    260c:	d1f7      	bne.n	25fe <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    260e:	6063      	str	r3, [r4, #4]
    2610:	e7f5      	b.n	25fe <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    2612:	6062      	str	r2, [r4, #4]
    2614:	e7f3      	b.n	25fe <gpio_nrf5_manage_callback+0x3a>

00002616 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2618:	6803      	ldr	r3, [r0, #0]
    261a:	689b      	ldr	r3, [r3, #8]
    261c:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    261e:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2620:	b9b9      	cbnz	r1, 2652 <gpio_nrf5_enable_callback+0x3c>
    2622:	460d      	mov	r5, r1
    2624:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    2626:	4611      	mov	r1, r2
    2628:	f7ff ff8a 	bl	2540 <gpiote_find_channel>
		if (i < 0) {
    262c:	2800      	cmp	r0, #0
    262e:	db12      	blt.n	2656 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2630:	2301      	movs	r3, #1
    2632:	fa03 f404 	lsl.w	r4, r3, r4
    2636:	68ba      	ldr	r2, [r7, #8]
    2638:	4314      	orrs	r4, r2
    263a:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    263c:	f100 0240 	add.w	r2, r0, #64	; 0x40
    2640:	2100      	movs	r1, #0
    2642:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2646:	fa03 f000 	lsl.w	r0, r3, r0
    264a:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    264e:	4628      	mov	r0, r5
    2650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2652:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002658 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    265a:	6803      	ldr	r3, [r0, #0]
    265c:	689b      	ldr	r3, [r3, #8]
    265e:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2660:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2662:	b991      	cbnz	r1, 268a <gpio_nrf5_disable_callback+0x32>
    2664:	460d      	mov	r5, r1
    2666:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    2668:	4611      	mov	r1, r2
    266a:	f7ff ff69 	bl	2540 <gpiote_find_channel>
		if (i < 0) {
    266e:	2800      	cmp	r0, #0
    2670:	db0d      	blt.n	268e <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2672:	2301      	movs	r3, #1
    2674:	fa03 f404 	lsl.w	r4, r3, r4
    2678:	68b2      	ldr	r2, [r6, #8]
    267a:	ea22 0404 	bic.w	r4, r2, r4
    267e:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2680:	4083      	lsls	r3, r0
    2682:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2686:	4628      	mov	r0, r5
    2688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    268a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002690 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2690:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2692:	2200      	movs	r2, #0
    2694:	2101      	movs	r1, #1
    2696:	2006      	movs	r0, #6
    2698:	f025 f95c 	bl	27954 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    269c:	2006      	movs	r0, #6
    269e:	f025 f92f 	bl	27900 <_arch_irq_enable>

	return 0;
}
    26a2:	2000      	movs	r0, #0
    26a4:	bd08      	pop	{r3, pc}

000026a6 <gpio_nrf5_port_isr>:
{
    26a6:	b570      	push	{r4, r5, r6, lr}
    26a8:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26aa:	6803      	ldr	r3, [r0, #0]
    26ac:	689b      	ldr	r3, [r3, #8]
    26ae:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26b0:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26b2:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    26b4:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26b6:	e000      	b.n	26ba <gpio_nrf5_port_isr+0x14>
    26b8:	3301      	adds	r3, #1
    26ba:	2b07      	cmp	r3, #7
    26bc:	dc14      	bgt.n	26e8 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    26be:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    26c6:	2a00      	cmp	r2, #0
    26c8:	d0f6      	beq.n	26b8 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    26ca:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26ce:	2000      	movs	r0, #0
    26d0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    26d4:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    26d8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    26dc:	f3c0 2004 	ubfx	r0, r0, #8, #5
    26e0:	2201      	movs	r2, #1
    26e2:	4082      	lsls	r2, r0
    26e4:	4316      	orrs	r6, r2
    26e6:	e7e7      	b.n	26b8 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    26e8:	68a3      	ldr	r3, [r4, #8]
    26ea:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    26ec:	2006      	movs	r0, #6
    26ee:	f025 f915 	bl	2791c <_arch_irq_disable>
	return list->head;
    26f2:	6824      	ldr	r4, [r4, #0]
    26f4:	e005      	b.n	2702 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    26f6:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26f8:	b16c      	cbz	r4, 2716 <gpio_nrf5_port_isr+0x70>
	return node->next;
    26fa:	6823      	ldr	r3, [r4, #0]
    26fc:	b16b      	cbz	r3, 271a <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26fe:	b172      	cbz	r2, 271e <gpio_nrf5_port_isr+0x78>
	return node->next;
    2700:	6824      	ldr	r4, [r4, #0]
    2702:	b174      	cbz	r4, 2722 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2704:	68a3      	ldr	r3, [r4, #8]
    2706:	421e      	tst	r6, r3
    2708:	d0f5      	beq.n	26f6 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    270a:	6863      	ldr	r3, [r4, #4]
    270c:	4632      	mov	r2, r6
    270e:	4621      	mov	r1, r4
    2710:	4628      	mov	r0, r5
    2712:	4798      	blx	r3
    2714:	e7ef      	b.n	26f6 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2716:	4623      	mov	r3, r4
    2718:	e7f0      	b.n	26fc <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    271a:	2400      	movs	r4, #0
    271c:	e7f1      	b.n	2702 <gpio_nrf5_port_isr+0x5c>
    271e:	2400      	movs	r4, #0
    2720:	e7ef      	b.n	2702 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2722:	2006      	movs	r0, #6
    2724:	f025 f8ec 	bl	27900 <_arch_irq_enable>
    2728:	bd70      	pop	{r4, r5, r6, pc}
	...

0000272c <gpio_nrf5_config>:
{
    272c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2730:	6804      	ldr	r4, [r0, #0]
    2732:	68a5      	ldr	r5, [r4, #8]
    2734:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2736:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2738:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    273a:	2900      	cmp	r1, #0
    273c:	d17f      	bne.n	283e <gpio_nrf5_config+0x112>
    273e:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2740:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2744:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2748:	f403 7440 	and.w	r4, r3, #768	; 0x300
    274c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2750:	d025      	beq.n	279e <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2752:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2756:	d024      	beq.n	27a2 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    2758:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    275a:	f013 0f01 	tst.w	r3, #1
    275e:	d030      	beq.n	27c2 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2760:	2c0c      	cmp	r4, #12
    2762:	d020      	beq.n	27a6 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2764:	2c04      	cmp	r4, #4
    2766:	d025      	beq.n	27b4 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    2768:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    276c:	4938      	ldr	r1, [pc, #224]	; (2850 <gpio_nrf5_config+0x124>)
    276e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    2772:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2774:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2778:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    277c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    2780:	f013 0102 	ands.w	r1, r3, #2
    2784:	d04a      	beq.n	281c <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    2786:	f013 0f20 	tst.w	r3, #32
    278a:	d05b      	beq.n	2844 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    278c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2790:	d123      	bne.n	27da <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    2792:	f013 0f04 	tst.w	r3, #4
    2796:	d044      	beq.n	2822 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    2798:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    279c:	e01f      	b.n	27de <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    279e:	240c      	movs	r4, #12
    27a0:	e7db      	b.n	275a <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    27a2:	2404      	movs	r4, #4
    27a4:	e7d9      	b.n	275a <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    27a6:	f04f 0c01 	mov.w	ip, #1
    27aa:	fa0c fc02 	lsl.w	ip, ip, r2
    27ae:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    27b2:	e7d9      	b.n	2768 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    27b4:	f04f 0c01 	mov.w	ip, #1
    27b8:	fa0c fc02 	lsl.w	ip, ip, r2
    27bc:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    27c0:	e7d2      	b.n	2768 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    27c2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    27c6:	f8df e088 	ldr.w	lr, [pc, #136]	; 2850 <gpio_nrf5_config+0x124>
    27ca:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    27ce:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    27d0:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    27d4:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    27d8:	e7d2      	b.n	2780 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    27da:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    27de:	4614      	mov	r4, r2
    27e0:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    27e2:	68f8      	ldr	r0, [r7, #12]
    27e4:	f7fe fca2 	bl	112c <__popcountsi2>
    27e8:	2808      	cmp	r0, #8
    27ea:	d02e      	beq.n	284a <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    27ec:	4621      	mov	r1, r4
    27ee:	4628      	mov	r0, r5
    27f0:	f7ff fea6 	bl	2540 <gpiote_find_channel>
		if (i < 0) {
    27f4:	2800      	cmp	r0, #0
    27f6:	db17      	blt.n	2828 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    27f8:	2301      	movs	r3, #1
    27fa:	fa03 f200 	lsl.w	r2, r3, r0
    27fe:	68fb      	ldr	r3, [r7, #12]
    2800:	4313      	orrs	r3, r2
    2802:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2804:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    2808:	0224      	lsls	r4, r4, #8
    280a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    280e:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2812:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2816:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    281a:	4641      	mov	r1, r8
}
    281c:	4608      	mov	r0, r1
    281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2822:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    2826:	e7da      	b.n	27de <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2828:	68fb      	ldr	r3, [r7, #12]
    282a:	43db      	mvns	r3, r3
    282c:	fa93 f0a3 	rbit	r0, r3
    2830:	fab0 f080 	clz	r0, r0
    2834:	2b00      	cmp	r3, #0
    2836:	d1df      	bne.n	27f8 <gpio_nrf5_config+0xcc>
    2838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    283c:	e7dc      	b.n	27f8 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    283e:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2842:	e7eb      	b.n	281c <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2844:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2848:	e7e8      	b.n	281c <gpio_nrf5_config+0xf0>
			return -EIO;
    284a:	f06f 0104 	mvn.w	r1, #4
    284e:	e7e5      	b.n	281c <gpio_nrf5_config+0xf0>
    2850:	0002e868 	.word	0x0002e868

00002854 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2854:	f04f 0320 	mov.w	r3, #32
    2858:	f3ef 8111 	mrs	r1, BASEPRI
    285c:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2860:	4b12      	ldr	r3, [pc, #72]	; (28ac <_m16src_stop+0x58>)
    2862:	781a      	ldrb	r2, [r3, #0]
    2864:	b192      	cbz	r2, 288c <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    2866:	1e53      	subs	r3, r2, #1
    2868:	b2db      	uxtb	r3, r3
    286a:	4810      	ldr	r0, [pc, #64]	; (28ac <_m16src_stop+0x58>)
    286c:	7003      	strb	r3, [r0, #0]
    286e:	b993      	cbnz	r3, 2896 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2870:	4b0f      	ldr	r3, [pc, #60]	; (28b0 <_m16src_stop+0x5c>)
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	b99b      	cbnz	r3, 289e <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    2876:	4b0e      	ldr	r3, [pc, #56]	; (28b0 <_m16src_stop+0x5c>)
    2878:	2201      	movs	r2, #1
    287a:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    287c:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2880:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2884:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    2886:	2000      	movs	r0, #0
    2888:	7018      	strb	r0, [r3, #0]

	return 0;
}
    288a:	4770      	bx	lr
    288c:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2890:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2894:	4770      	bx	lr
    2896:	f381 8811 	msr	BASEPRI, r1
		return 0;
    289a:	2000      	movs	r0, #0
    289c:	4770      	bx	lr
		m16src_ref++;
    289e:	4b03      	ldr	r3, [pc, #12]	; (28ac <_m16src_stop+0x58>)
    28a0:	701a      	strb	r2, [r3, #0]
    28a2:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    28a6:	f06f 000a 	mvn.w	r0, #10
    28aa:	4770      	bx	lr
    28ac:	200002da 	.word	0x200002da
    28b0:	200002d9 	.word	0x200002d9

000028b4 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    28b4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    28b6:	2200      	movs	r2, #0
    28b8:	2101      	movs	r1, #1
    28ba:	4610      	mov	r0, r2
    28bc:	f025 f84a 	bl	27954 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    28c0:	2000      	movs	r0, #0
    28c2:	f025 f81d 	bl	27900 <_arch_irq_enable>

	return 0;
}
    28c6:	2000      	movs	r0, #0
    28c8:	bd08      	pop	{r3, pc}
	...

000028cc <_m16src_start>:
{
    28cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    28ce:	f04f 0320 	mov.w	r3, #32
    28d2:	f3ef 8411 	mrs	r4, BASEPRI
    28d6:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    28da:	4a2c      	ldr	r2, [pc, #176]	; (298c <_m16src_start+0xc0>)
    28dc:	7813      	ldrb	r3, [r2, #0]
    28de:	1c58      	adds	r0, r3, #1
    28e0:	7010      	strb	r0, [r2, #0]
    28e2:	b153      	cbz	r3, 28fa <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28e4:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    28e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    28f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    28f4:	d047      	beq.n	2986 <_m16src_start+0xba>
		return 0;
    28f6:	2000      	movs	r0, #0
    28f8:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    28fa:	4a25      	ldr	r2, [pc, #148]	; (2990 <_m16src_start+0xc4>)
    28fc:	7812      	ldrb	r2, [r2, #0]
    28fe:	b9a2      	cbnz	r2, 292a <_m16src_start+0x5e>
	m16src_grd = 1;
    2900:	2201      	movs	r2, #1
    2902:	4b23      	ldr	r3, [pc, #140]	; (2990 <_m16src_start+0xc4>)
    2904:	701a      	strb	r2, [r3, #0]
    2906:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    290a:	b3a1      	cbz	r1, 2976 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    290c:	2000      	movs	r0, #0
    290e:	f025 f805 	bl	2791c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2916:	2200      	movs	r2, #0
    2918:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    291c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2920:	2201      	movs	r2, #1
    2922:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2926:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2928:	e009      	b.n	293e <_m16src_start+0x72>
		m16src_ref--;
    292a:	4a18      	ldr	r2, [pc, #96]	; (298c <_m16src_start+0xc0>)
    292c:	7013      	strb	r3, [r2, #0]
    292e:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    2932:	f06f 000a 	mvn.w	r0, #10
    2936:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2938:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    293a:	bf40      	sev
  __ASM volatile ("wfe");
    293c:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    293e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2946:	2b00      	cmp	r3, #0
    2948:	d0f6      	beq.n	2938 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    294a:	2200      	movs	r2, #0
    294c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2954:	f011 0f01 	tst.w	r1, #1
    2958:	d102      	bne.n	2960 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    295a:	2201      	movs	r2, #1
    295c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2960:	2201      	movs	r2, #1
    2962:	4b0c      	ldr	r3, [pc, #48]	; (2994 <_m16src_start+0xc8>)
    2964:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2968:	2000      	movs	r0, #0
    296a:	f024 ffc9 	bl	27900 <_arch_irq_enable>
	m16src_grd = 0;
    296e:	2200      	movs	r2, #0
    2970:	4b07      	ldr	r3, [pc, #28]	; (2990 <_m16src_start+0xc4>)
    2972:	701a      	strb	r2, [r3, #0]
    2974:	e7b8      	b.n	28e8 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    297a:	2200      	movs	r2, #0
    297c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2980:	2201      	movs	r2, #1
    2982:	601a      	str	r2, [r3, #0]
    2984:	e7f3      	b.n	296e <_m16src_start+0xa2>
		return -EINPROGRESS;
    2986:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    298a:	bd10      	pop	{r4, pc}
    298c:	200002da 	.word	0x200002da
    2990:	200002d9 	.word	0x200002d9
    2994:	e000e100 	.word	0xe000e100

00002998 <_power_clock_isr>:
{
    2998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    299c:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    299e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a2:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    29a6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    29aa:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    29ae:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    29b2:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    29b6:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    29ba:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    29be:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    29c2:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    29c6:	b11d      	cbz	r5, 29d0 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    29c8:	f04f 0e00 	mov.w	lr, #0
    29cc:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    29d0:	b127      	cbz	r7, 29dc <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29d2:	2700      	movs	r7, #0
    29d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29d8:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    29dc:	b132      	cbz	r2, 29ec <_power_clock_isr+0x54>
    29de:	b129      	cbz	r1, 29ec <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29e4:	2201      	movs	r2, #1
    29e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    29ea:	611a      	str	r2, [r3, #16]
	if (lf) {
    29ec:	b126      	cbz	r6, 29f8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    29ee:	2200      	movs	r2, #0
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    29f8:	b910      	cbnz	r0, 2a00 <_power_clock_isr+0x68>
	if (ctto) {
    29fa:	b964      	cbnz	r4, 2a16 <_power_clock_isr+0x7e>
    29fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2a00:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2a04:	2100      	movs	r1, #0
    2a06:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2a0a:	4640      	mov	r0, r8
    2a0c:	f7ff ff22 	bl	2854 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2a10:	2301      	movs	r3, #1
    2a12:	6173      	str	r3, [r6, #20]
    2a14:	e7f1      	b.n	29fa <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a1a:	2100      	movs	r1, #0
    2a1c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a20:	2201      	movs	r2, #1
    2a22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a26:	4640      	mov	r0, r8
    2a28:	f7ff ff50 	bl	28cc <_m16src_start>
		if (!err) {
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d1e5      	bne.n	29fc <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a30:	2201      	movs	r2, #1
    2a32:	4b02      	ldr	r3, [pc, #8]	; (2a3c <_power_clock_isr+0xa4>)
    2a34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2a38:	e7e0      	b.n	29fc <_power_clock_isr+0x64>
    2a3a:	bf00      	nop
    2a3c:	e000e100 	.word	0xe000e100

00002a40 <_k32src_start>:
	__asm__ volatile(
    2a40:	f04f 0220 	mov.w	r2, #32
    2a44:	f3ef 8311 	mrs	r3, BASEPRI
    2a48:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2a4c:	4a38      	ldr	r2, [pc, #224]	; (2b30 <_k32src_start+0xf0>)
    2a4e:	7812      	ldrb	r2, [r2, #0]
    2a50:	b152      	cbz	r2, 2a68 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a52:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a5a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a5e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a62:	d062      	beq.n	2b2a <_k32src_start+0xea>
		return 0;
    2a64:	2000      	movs	r0, #0
    2a66:	4770      	bx	lr
{
    2a68:	b570      	push	{r4, r5, r6, lr}
    2a6a:	460d      	mov	r5, r1
    2a6c:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2a6e:	2601      	movs	r6, #1
    2a70:	4a2f      	ldr	r2, [pc, #188]	; (2b30 <_k32src_start+0xf0>)
    2a72:	7016      	strb	r6, [r2, #0]
    2a74:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a78:	2000      	movs	r0, #0
    2a7a:	f024 ff4f 	bl	2791c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a82:	2200      	movs	r2, #0
    2a84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a88:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a8c:	2102      	movs	r1, #2
    2a8e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a92:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a96:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a98:	e002      	b.n	2aa0 <_k32src_start+0x60>
    2a9a:	bf20      	wfe
  __ASM volatile ("sev");
    2a9c:	bf40      	sev
  __ASM volatile ("wfe");
    2a9e:	bf20      	wfe
    2aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aa4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d0f6      	beq.n	2a9a <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2aac:	2100      	movs	r1, #0
    2aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ab2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2ab6:	f012 0f02 	tst.w	r2, #2
    2aba:	d102      	bne.n	2ac2 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2abc:	2202      	movs	r2, #2
    2abe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ac2:	2201      	movs	r2, #1
    2ac4:	4b1b      	ldr	r3, [pc, #108]	; (2b34 <_k32src_start+0xf4>)
    2ac6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2aca:	2000      	movs	r0, #0
    2acc:	f024 ff18 	bl	27900 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ad4:	2218      	movs	r2, #24
    2ad6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2ada:	2200      	movs	r2, #0
    2adc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2ae0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2ae4:	f015 0f03 	tst.w	r5, #3
    2ae8:	d008      	beq.n	2afc <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aee:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2af2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2af6:	d015      	beq.n	2b24 <_k32src_start+0xe4>
		return 0;
    2af8:	2000      	movs	r0, #0
    2afa:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2afc:	2210      	movs	r2, #16
    2afe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b02:	2218      	movs	r2, #24
    2b04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b08:	2201      	movs	r2, #1
    2b0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b0e:	2100      	movs	r1, #0
    2b10:	4620      	mov	r0, r4
    2b12:	f7ff fedb 	bl	28cc <_m16src_start>
		if (!err) {
    2b16:	2800      	cmp	r0, #0
    2b18:	d1e7      	bne.n	2aea <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b1a:	2201      	movs	r2, #1
    2b1c:	4b05      	ldr	r3, [pc, #20]	; (2b34 <_k32src_start+0xf4>)
    2b1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b22:	e7e2      	b.n	2aea <_k32src_start+0xaa>
		return -EINPROGRESS;
    2b24:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2b28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2b2a:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2b2e:	4770      	bx	lr
    2b30:	200002d8 	.word	0x200002d8
    2b34:	e000e100 	.word	0xe000e100

00002b38 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2b38:	2000      	movs	r0, #0
    2b3a:	4770      	bx	lr

00002b3c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2b3c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2b3e:	680b      	ldr	r3, [r1, #0]
    2b40:	3301      	adds	r3, #1
    2b42:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2b44:	4b01      	ldr	r3, [pc, #4]	; (2b4c <char_out+0x10>)
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	4798      	blx	r3
}
    2b4a:	bd08      	pop	{r3, pc}
    2b4c:	2000b870 	.word	0x2000b870

00002b50 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b54:	b083      	sub	sp, #12
    2b56:	4606      	mov	r6, r0
    2b58:	9101      	str	r1, [sp, #4]
    2b5a:	4691      	mov	r9, r2
    2b5c:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2b5e:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2b60:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2b64:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2b66:	4653      	mov	r3, sl

	for (; size; size--) {
    2b68:	e009      	b.n	2b7e <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2b6a:	2809      	cmp	r0, #9
    2b6c:	d91f      	bls.n	2bae <_printk_hex_ulong+0x5e>
    2b6e:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2b70:	9901      	ldr	r1, [sp, #4]
    2b72:	4418      	add	r0, r3
    2b74:	47b0      	blx	r6
			digits++;
    2b76:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2b78:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2b7c:	462b      	mov	r3, r5
	for (; size; size--) {
    2b7e:	b323      	cbz	r3, 2bca <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b80:	1e5d      	subs	r5, r3, #1
    2b82:	00a8      	lsls	r0, r5, #2
    2b84:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2b88:	f010 000f 	ands.w	r0, r0, #15
    2b8c:	d1ed      	bne.n	2b6a <_printk_hex_ulong+0x1a>
    2b8e:	f1b8 0f00 	cmp.w	r8, #0
    2b92:	d1ea      	bne.n	2b6a <_printk_hex_ulong+0x1a>
    2b94:	2b01      	cmp	r3, #1
    2b96:	d0e8      	beq.n	2b6a <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2b98:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b9e:	459a      	cmp	sl, r3
    2ba0:	dc11      	bgt.n	2bc6 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2ba2:	2f01      	cmp	r7, #1
    2ba4:	d005      	beq.n	2bb2 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2ba6:	2f02      	cmp	r7, #2
    2ba8:	d008      	beq.n	2bbc <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2baa:	46da      	mov	sl, fp
    2bac:	e7e6      	b.n	2b7c <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2bae:	2330      	movs	r3, #48	; 0x30
    2bb0:	e7de      	b.n	2b70 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2bb2:	9901      	ldr	r1, [sp, #4]
    2bb4:	2030      	movs	r0, #48	; 0x30
    2bb6:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bb8:	46da      	mov	sl, fp
    2bba:	e7df      	b.n	2b7c <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2bbc:	9901      	ldr	r1, [sp, #4]
    2bbe:	2020      	movs	r0, #32
    2bc0:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bc2:	46da      	mov	sl, fp
    2bc4:	e7da      	b.n	2b7c <_printk_hex_ulong+0x2c>
    2bc6:	46da      	mov	sl, fp
    2bc8:	e7d8      	b.n	2b7c <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2bca:	2f03      	cmp	r7, #3
    2bcc:	d002      	beq.n	2bd4 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2bce:	b003      	add	sp, #12
    2bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bd6:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2bda:	1e65      	subs	r5, r4, #1
    2bdc:	2c00      	cmp	r4, #0
    2bde:	ddf6      	ble.n	2bce <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2be0:	9901      	ldr	r1, [sp, #4]
    2be2:	2020      	movs	r0, #32
    2be4:	47b0      	blx	r6
		while (remaining-- > 0) {
    2be6:	462c      	mov	r4, r5
    2be8:	e7f7      	b.n	2bda <_printk_hex_ulong+0x8a>
	...

00002bec <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bf0:	b083      	sub	sp, #12
    2bf2:	4682      	mov	sl, r0
    2bf4:	9101      	str	r1, [sp, #4]
    2bf6:	469b      	mov	fp, r3
    2bf8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2bfa:	2f00      	cmp	r7, #0
    2bfc:	dd07      	ble.n	2c0e <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2bfe:	4615      	mov	r5, r2
    2c00:	f04f 0901 	mov.w	r9, #1
    2c04:	260a      	movs	r6, #10
    2c06:	f04f 0800 	mov.w	r8, #0
    2c0a:	4c22      	ldr	r4, [pc, #136]	; (2c94 <_printk_dec_ulong+0xa8>)
    2c0c:	e015      	b.n	2c3a <_printk_dec_ulong+0x4e>
		min_width = 1;
    2c0e:	2701      	movs	r7, #1
    2c10:	e7f5      	b.n	2bfe <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2c12:	1c60      	adds	r0, r4, #1
    2c14:	fbb5 f0f0 	udiv	r0, r5, r0
    2c18:	9901      	ldr	r1, [sp, #4]
    2c1a:	3030      	adds	r0, #48	; 0x30
    2c1c:	47d0      	blx	sl
			digits++;
    2c1e:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2c22:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2c26:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2c28:	1c63      	adds	r3, r4, #1
    2c2a:	fbb5 f2f3 	udiv	r2, r5, r3
    2c2e:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2c32:	4b19      	ldr	r3, [pc, #100]	; (2c98 <_printk_dec_ulong+0xac>)
    2c34:	fba3 3404 	umull	r3, r4, r3, r4
    2c38:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2c3a:	2c08      	cmp	r4, #8
    2c3c:	d914      	bls.n	2c68 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2c3e:	f1b8 0f00 	cmp.w	r8, #0
    2c42:	d1e6      	bne.n	2c12 <_printk_dec_ulong+0x26>
    2c44:	42ac      	cmp	r4, r5
    2c46:	d3e4      	bcc.n	2c12 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2c48:	42be      	cmp	r6, r7
    2c4a:	dcec      	bgt.n	2c26 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2c4c:	f1bb 0f02 	cmp.w	fp, #2
    2c50:	d8e9      	bhi.n	2c26 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c52:	f1bb 0f01 	cmp.w	fp, #1
    2c56:	d005      	beq.n	2c64 <_printk_dec_ulong+0x78>
    2c58:	2020      	movs	r0, #32
    2c5a:	9901      	ldr	r1, [sp, #4]
    2c5c:	47d0      	blx	sl
			digits++;
    2c5e:	f109 0901 	add.w	r9, r9, #1
    2c62:	e7e0      	b.n	2c26 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c64:	2030      	movs	r0, #48	; 0x30
    2c66:	e7f8      	b.n	2c5a <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2c68:	9901      	ldr	r1, [sp, #4]
    2c6a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2c6e:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2c70:	f1bb 0f03 	cmp.w	fp, #3
    2c74:	d002      	beq.n	2c7c <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c76:	b003      	add	sp, #12
    2c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2c7c:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2c80:	e003      	b.n	2c8a <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2c82:	9901      	ldr	r1, [sp, #4]
    2c84:	2020      	movs	r0, #32
    2c86:	47d0      	blx	sl
		while (remaining-- > 0) {
    2c88:	4627      	mov	r7, r4
    2c8a:	1e7c      	subs	r4, r7, #1
    2c8c:	2f00      	cmp	r7, #0
    2c8e:	dcf8      	bgt.n	2c82 <_printk_dec_ulong+0x96>
    2c90:	e7f1      	b.n	2c76 <_printk_dec_ulong+0x8a>
    2c92:	bf00      	nop
    2c94:	3b9ac9ff 	.word	0x3b9ac9ff
    2c98:	cccccccd 	.word	0xcccccccd

00002c9c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2c9c:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2c9e:	680c      	ldr	r4, [r1, #0]
    2ca0:	b154      	cbz	r4, 2cb8 <str_out+0x1c>
    2ca2:	688b      	ldr	r3, [r1, #8]
    2ca4:	684a      	ldr	r2, [r1, #4]
    2ca6:	4293      	cmp	r3, r2
    2ca8:	da06      	bge.n	2cb8 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2caa:	3a01      	subs	r2, #1
    2cac:	4293      	cmp	r3, r2
    2cae:	d008      	beq.n	2cc2 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2cb0:	1c5a      	adds	r2, r3, #1
    2cb2:	608a      	str	r2, [r1, #8]
    2cb4:	54e0      	strb	r0, [r4, r3]
    2cb6:	e002      	b.n	2cbe <str_out+0x22>
		ctx->count++;
    2cb8:	688b      	ldr	r3, [r1, #8]
    2cba:	3301      	adds	r3, #1
    2cbc:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2cbe:	bc10      	pop	{r4}
    2cc0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2cc2:	1c5a      	adds	r2, r3, #1
    2cc4:	608a      	str	r2, [r1, #8]
    2cc6:	2200      	movs	r2, #0
    2cc8:	54e2      	strb	r2, [r4, r3]
    2cca:	e7f8      	b.n	2cbe <str_out+0x22>

00002ccc <__printk_hook_install>:
	_char_out = fn;
    2ccc:	4b01      	ldr	r3, [pc, #4]	; (2cd4 <__printk_hook_install+0x8>)
    2cce:	6018      	str	r0, [r3, #0]
    2cd0:	4770      	bx	lr
    2cd2:	bf00      	nop
    2cd4:	2000b870 	.word	0x2000b870

00002cd8 <_vprintk>:
{
    2cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cdc:	b084      	sub	sp, #16
    2cde:	4607      	mov	r7, r0
    2ce0:	460e      	mov	r6, r1
    2ce2:	4614      	mov	r4, r2
    2ce4:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2ce6:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2cea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2cee:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2cf0:	4645      	mov	r5, r8
	while (*fmt) {
    2cf2:	e104      	b.n	2efe <_vprintk+0x226>
			switch (*fmt) {
    2cf4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2cf8:	2b55      	cmp	r3, #85	; 0x55
    2cfa:	f200 80f1 	bhi.w	2ee0 <_vprintk+0x208>
    2cfe:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d02:	00ea      	.short	0x00ea
    2d04:	00ef00ef 	.word	0x00ef00ef
    2d08:	00ef00ef 	.word	0x00ef00ef
    2d0c:	00ef00ef 	.word	0x00ef00ef
    2d10:	010800ef 	.word	0x010800ef
    2d14:	00ef00ef 	.word	0x00ef00ef
    2d18:	00590056 	.word	0x00590056
    2d1c:	00590059 	.word	0x00590059
    2d20:	00590059 	.word	0x00590059
    2d24:	00590059 	.word	0x00590059
    2d28:	00590059 	.word	0x00590059
    2d2c:	00ef00ef 	.word	0x00ef00ef
    2d30:	00ef00ef 	.word	0x00ef00ef
    2d34:	00ef00ef 	.word	0x00ef00ef
    2d38:	00ef00ef 	.word	0x00ef00ef
    2d3c:	00ef00ef 	.word	0x00ef00ef
    2d40:	00ef00ef 	.word	0x00ef00ef
    2d44:	00ef00ef 	.word	0x00ef00ef
    2d48:	00ef00ef 	.word	0x00ef00ef
    2d4c:	00ef00ef 	.word	0x00ef00ef
    2d50:	00ef00ef 	.word	0x00ef00ef
    2d54:	00ef00ef 	.word	0x00ef00ef
    2d58:	00ef00ef 	.word	0x00ef00ef
    2d5c:	00ef00ef 	.word	0x00ef00ef
    2d60:	00ef00ef 	.word	0x00ef00ef
    2d64:	00ef00ef 	.word	0x00ef00ef
    2d68:	00ef00bc 	.word	0x00ef00bc
    2d6c:	00ef00ef 	.word	0x00ef00ef
    2d70:	00ef00ef 	.word	0x00ef00ef
    2d74:	00ef00ef 	.word	0x00ef00ef
    2d78:	00ef00ef 	.word	0x00ef00ef
    2d7c:	00e200ef 	.word	0x00e200ef
    2d80:	00ef0076 	.word	0x00ef0076
    2d84:	00ef00ef 	.word	0x00ef00ef
    2d88:	007600fd 	.word	0x007600fd
    2d8c:	00ef00ef 	.word	0x00ef00ef
    2d90:	00ef0073 	.word	0x00ef0073
    2d94:	00ef00ef 	.word	0x00ef00ef
    2d98:	00ef00b2 	.word	0x00ef00b2
    2d9c:	00d500ef 	.word	0x00d500ef
    2da0:	009900ef 	.word	0x009900ef
    2da4:	00ef00ef 	.word	0x00ef00ef
    2da8:	00ef00bc 	.word	0x00ef00bc
    2dac:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2dae:	f1ba 0f00 	cmp.w	sl, #0
    2db2:	db10      	blt.n	2dd6 <_vprintk+0xfe>
				if (min_width < 0) {
    2db4:	f1ba 0f00 	cmp.w	sl, #0
    2db8:	db13      	blt.n	2de2 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2dba:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2dbe:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2dc2:	4418      	add	r0, r3
    2dc4:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2dc8:	f1b9 0f00 	cmp.w	r9, #0
    2dcc:	f040 8096 	bne.w	2efc <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2dd0:	f04f 0902 	mov.w	r9, #2
    2dd4:	e092      	b.n	2efc <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2dd6:	f1b9 0f00 	cmp.w	r9, #0
    2dda:	d1eb      	bne.n	2db4 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2ddc:	f04f 0901 	mov.w	r9, #1
    2de0:	e08c      	b.n	2efc <_vprintk+0x224>
					min_width = *fmt - '0';
    2de2:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2de6:	e7ef      	b.n	2dc8 <_vprintk+0xf0>
				long_ctr++;
    2de8:	f108 0801 	add.w	r8, r8, #1
    2dec:	e086      	b.n	2efc <_vprintk+0x224>
				if (long_ctr < 2) {
    2dee:	f1b8 0f01 	cmp.w	r8, #1
    2df2:	dd13      	ble.n	2e1c <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2df4:	9b03      	ldr	r3, [sp, #12]
    2df6:	3307      	adds	r3, #7
    2df8:	f023 0307 	bic.w	r3, r3, #7
    2dfc:	f103 0208 	add.w	r2, r3, #8
    2e00:	9203      	str	r2, [sp, #12]
    2e02:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2e04:	2d00      	cmp	r5, #0
    2e06:	db0e      	blt.n	2e26 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2e08:	f8cd a000 	str.w	sl, [sp]
    2e0c:	464b      	mov	r3, r9
    2e0e:	462a      	mov	r2, r5
    2e10:	4631      	mov	r1, r6
    2e12:	4638      	mov	r0, r7
    2e14:	f7ff feea 	bl	2bec <_printk_dec_ulong>
			might_format = 0;
    2e18:	2500      	movs	r5, #0
				break;
    2e1a:	e06f      	b.n	2efc <_vprintk+0x224>
					d = va_arg(ap, long);
    2e1c:	9b03      	ldr	r3, [sp, #12]
    2e1e:	1d1a      	adds	r2, r3, #4
    2e20:	9203      	str	r2, [sp, #12]
    2e22:	681d      	ldr	r5, [r3, #0]
    2e24:	e7ee      	b.n	2e04 <_vprintk+0x12c>
					out((int)'-', ctx);
    2e26:	4631      	mov	r1, r6
    2e28:	202d      	movs	r0, #45	; 0x2d
    2e2a:	47b8      	blx	r7
					d = -d;
    2e2c:	426d      	negs	r5, r5
					min_width--;
    2e2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2e32:	e7e9      	b.n	2e08 <_vprintk+0x130>
				if (long_ctr < 2) {
    2e34:	f1b8 0f01 	cmp.w	r8, #1
    2e38:	dd10      	ble.n	2e5c <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2e3a:	9b03      	ldr	r3, [sp, #12]
    2e3c:	3307      	adds	r3, #7
    2e3e:	f023 0307 	bic.w	r3, r3, #7
    2e42:	f103 0208 	add.w	r2, r3, #8
    2e46:	9203      	str	r2, [sp, #12]
    2e48:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2e4a:	f8cd a000 	str.w	sl, [sp]
    2e4e:	464b      	mov	r3, r9
    2e50:	4631      	mov	r1, r6
    2e52:	4638      	mov	r0, r7
    2e54:	f7ff feca 	bl	2bec <_printk_dec_ulong>
			might_format = 0;
    2e58:	2500      	movs	r5, #0
				break;
    2e5a:	e04f      	b.n	2efc <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2e5c:	9b03      	ldr	r3, [sp, #12]
    2e5e:	1d1a      	adds	r2, r3, #4
    2e60:	9203      	str	r2, [sp, #12]
    2e62:	681a      	ldr	r2, [r3, #0]
    2e64:	e7f1      	b.n	2e4a <_vprintk+0x172>
				  out('0', ctx);
    2e66:	4631      	mov	r1, r6
    2e68:	2030      	movs	r0, #48	; 0x30
    2e6a:	47b8      	blx	r7
				  out('x', ctx);
    2e6c:	4631      	mov	r1, r6
    2e6e:	2078      	movs	r0, #120	; 0x78
    2e70:	47b8      	blx	r7
				  min_width = 8;
    2e72:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2e76:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2e7a:	f1b8 0f01 	cmp.w	r8, #1
    2e7e:	dd10      	ble.n	2ea2 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2e80:	9b03      	ldr	r3, [sp, #12]
    2e82:	3307      	adds	r3, #7
    2e84:	f023 0307 	bic.w	r3, r3, #7
    2e88:	f103 0208 	add.w	r2, r3, #8
    2e8c:	9203      	str	r2, [sp, #12]
    2e8e:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2e90:	f8cd a000 	str.w	sl, [sp]
    2e94:	464b      	mov	r3, r9
    2e96:	4631      	mov	r1, r6
    2e98:	4638      	mov	r0, r7
    2e9a:	f7ff fe59 	bl	2b50 <_printk_hex_ulong>
			might_format = 0;
    2e9e:	2500      	movs	r5, #0
				break;
    2ea0:	e02c      	b.n	2efc <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2ea2:	9b03      	ldr	r3, [sp, #12]
    2ea4:	1d1a      	adds	r2, r3, #4
    2ea6:	9203      	str	r2, [sp, #12]
    2ea8:	681a      	ldr	r2, [r3, #0]
    2eaa:	e7f1      	b.n	2e90 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2eac:	9b03      	ldr	r3, [sp, #12]
    2eae:	1d1a      	adds	r2, r3, #4
    2eb0:	9203      	str	r2, [sp, #12]
    2eb2:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2eb4:	e002      	b.n	2ebc <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2eb6:	3501      	adds	r5, #1
    2eb8:	4631      	mov	r1, r6
    2eba:	47b8      	blx	r7
				while (*s)
    2ebc:	7828      	ldrb	r0, [r5, #0]
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1f9      	bne.n	2eb6 <_vprintk+0x1de>
			might_format = 0;
    2ec2:	2500      	movs	r5, #0
    2ec4:	e01a      	b.n	2efc <_vprintk+0x224>
				int c = va_arg(ap, int);
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	1d1a      	adds	r2, r3, #4
    2eca:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2ecc:	4631      	mov	r1, r6
    2ece:	6818      	ldr	r0, [r3, #0]
    2ed0:	47b8      	blx	r7
			might_format = 0;
    2ed2:	2500      	movs	r5, #0
				break;
    2ed4:	e012      	b.n	2efc <_vprintk+0x224>
				out((int)'%', ctx);
    2ed6:	4631      	mov	r1, r6
    2ed8:	2025      	movs	r0, #37	; 0x25
    2eda:	47b8      	blx	r7
			might_format = 0;
    2edc:	2500      	movs	r5, #0
				break;
    2ede:	e00d      	b.n	2efc <_vprintk+0x224>
				out((int)'%', ctx);
    2ee0:	4631      	mov	r1, r6
    2ee2:	2025      	movs	r0, #37	; 0x25
    2ee4:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2ee6:	4631      	mov	r1, r6
    2ee8:	7820      	ldrb	r0, [r4, #0]
    2eea:	47b8      	blx	r7
			might_format = 0;
    2eec:	2500      	movs	r5, #0
				break;
    2eee:	e005      	b.n	2efc <_vprintk+0x224>
				long_ctr = 0;
    2ef0:	46a8      	mov	r8, r5
				min_width = -1;
    2ef2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2ef6:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2efa:	2501      	movs	r5, #1
		++fmt;
    2efc:	3401      	adds	r4, #1
	while (*fmt) {
    2efe:	7820      	ldrb	r0, [r4, #0]
    2f00:	b150      	cbz	r0, 2f18 <_vprintk+0x240>
		if (!might_format) {
    2f02:	2d00      	cmp	r5, #0
    2f04:	f47f aef6 	bne.w	2cf4 <_vprintk+0x1c>
			if (*fmt != '%') {
    2f08:	2825      	cmp	r0, #37	; 0x25
    2f0a:	d0f1      	beq.n	2ef0 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2f0c:	4631      	mov	r1, r6
    2f0e:	47b8      	blx	r7
    2f10:	e7f4      	b.n	2efc <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2f12:	f04f 0903 	mov.w	r9, #3
    2f16:	e7f1      	b.n	2efc <_vprintk+0x224>
}
    2f18:	b004      	add	sp, #16
    2f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002f20 <vprintk>:
{
    2f20:	b510      	push	{r4, lr}
    2f22:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2f24:	ac02      	add	r4, sp, #8
    2f26:	2300      	movs	r3, #0
    2f28:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2f2c:	460b      	mov	r3, r1
    2f2e:	4602      	mov	r2, r0
    2f30:	4621      	mov	r1, r4
    2f32:	4803      	ldr	r0, [pc, #12]	; (2f40 <vprintk+0x20>)
    2f34:	f7ff fed0 	bl	2cd8 <_vprintk>
}
    2f38:	9801      	ldr	r0, [sp, #4]
    2f3a:	b002      	add	sp, #8
    2f3c:	bd10      	pop	{r4, pc}
    2f3e:	bf00      	nop
    2f40:	00002b3d 	.word	0x00002b3d

00002f44 <printk>:
{
    2f44:	b40f      	push	{r0, r1, r2, r3}
    2f46:	b500      	push	{lr}
    2f48:	b083      	sub	sp, #12
    2f4a:	a904      	add	r1, sp, #16
    2f4c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2f50:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2f52:	f7ff ffe5 	bl	2f20 <vprintk>
}
    2f56:	b003      	add	sp, #12
    2f58:	f85d eb04 	ldr.w	lr, [sp], #4
    2f5c:	b004      	add	sp, #16
    2f5e:	4770      	bx	lr

00002f60 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2f60:	b40c      	push	{r2, r3}
    2f62:	b510      	push	{r4, lr}
    2f64:	b084      	sub	sp, #16
    2f66:	4604      	mov	r4, r0
    2f68:	ab06      	add	r3, sp, #24
    2f6a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2f6e:	9001      	str	r0, [sp, #4]
    2f70:	9102      	str	r1, [sp, #8]
    2f72:	2100      	movs	r1, #0
    2f74:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2f76:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2f78:	a901      	add	r1, sp, #4
    2f7a:	4807      	ldr	r0, [pc, #28]	; (2f98 <snprintk+0x38>)
    2f7c:	f7ff feac 	bl	2cd8 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2f80:	9b03      	ldr	r3, [sp, #12]
    2f82:	9a02      	ldr	r2, [sp, #8]
    2f84:	4293      	cmp	r3, r2
    2f86:	da01      	bge.n	2f8c <snprintk+0x2c>
		str[ctx.count] = '\0';
    2f88:	2200      	movs	r2, #0
    2f8a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2f8c:	9803      	ldr	r0, [sp, #12]
    2f8e:	b004      	add	sp, #16
    2f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f94:	b002      	add	sp, #8
    2f96:	4770      	bx	lr
    2f98:	00002c9d 	.word	0x00002c9d

00002f9c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2f9c:	4770      	bx	lr

00002f9e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2f9e:	428b      	cmp	r3, r1
    2fa0:	d901      	bls.n	2fa6 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2fa2:	2000      	movs	r0, #0
    2fa4:	4770      	bx	lr
{
    2fa6:	b510      	push	{r4, lr}
    2fa8:	461c      	mov	r4, r3
    2faa:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2fac:	461a      	mov	r2, r3
    2fae:	f7fd f987 	bl	2c0 <memcpy>
		return from_len;
    2fb2:	4620      	mov	r0, r4
    2fb4:	bd10      	pop	{r4, pc}

00002fb6 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2fb6:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2fb8:	f027 f90a 	bl	2a1d0 <memset>
    2fbc:	bd08      	pop	{r3, pc}

00002fbe <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2fbe:	09c3      	lsrs	r3, r0, #7
    2fc0:	005a      	lsls	r2, r3, #1
    2fc2:	4413      	add	r3, r2
    2fc4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2fc8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2fcc:	b2c0      	uxtb	r0, r0
    2fce:	4770      	bx	lr

00002fd0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2fd0:	b4f0      	push	{r4, r5, r6, r7}
    2fd2:	b08c      	sub	sp, #48	; 0x30
    2fd4:	4604      	mov	r4, r0
    2fd6:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2fd8:	ad01      	add	r5, sp, #4
    2fda:	4e2a      	ldr	r6, [pc, #168]	; (3084 <tc_aes128_set_encrypt_key+0xb4>)
    2fdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fe4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2fe8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2fec:	2c00      	cmp	r4, #0
    2fee:	d044      	beq.n	307a <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2ff0:	2f00      	cmp	r7, #0
    2ff2:	d044      	beq.n	307e <tc_aes128_set_encrypt_key+0xae>
    2ff4:	2200      	movs	r2, #0
    2ff6:	e00f      	b.n	3018 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2ff8:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    2ffc:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    3000:	784b      	ldrb	r3, [r1, #1]
    3002:	041b      	lsls	r3, r3, #16
    3004:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3008:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    300a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    300e:	78c9      	ldrb	r1, [r1, #3]
    3010:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3012:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    3016:	3201      	adds	r2, #1
    3018:	2a03      	cmp	r2, #3
    301a:	d9ed      	bls.n	2ff8 <tc_aes128_set_encrypt_key+0x28>
    301c:	e006      	b.n	302c <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    301e:	1f11      	subs	r1, r2, #4
    3020:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3024:	404b      	eors	r3, r1
    3026:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    302a:	3201      	adds	r2, #1
    302c:	2a2b      	cmp	r2, #43	; 0x2b
    302e:	d820      	bhi.n	3072 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    3030:	1e53      	subs	r3, r2, #1
    3032:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    3036:	f012 0f03 	tst.w	r2, #3
    303a:	d1f0      	bne.n	301e <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    303c:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3040:	0e19      	lsrs	r1, r3, #24
    3042:	4811      	ldr	r0, [pc, #68]	; (3088 <tc_aes128_set_encrypt_key+0xb8>)
    3044:	5c45      	ldrb	r5, [r0, r1]
    3046:	f3c3 4107 	ubfx	r1, r3, #16, #8
    304a:	5c41      	ldrb	r1, [r0, r1]
    304c:	0409      	lsls	r1, r1, #16
    304e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    3052:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3056:	5d45      	ldrb	r5, [r0, r5]
    3058:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    305c:	b2db      	uxtb	r3, r3
    305e:	5cc3      	ldrb	r3, [r0, r3]
    3060:	4319      	orrs	r1, r3
    3062:	f022 0303 	bic.w	r3, r2, #3
    3066:	a80c      	add	r0, sp, #48	; 0x30
    3068:	4403      	add	r3, r0
    306a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    306e:	404b      	eors	r3, r1
    3070:	e7d5      	b.n	301e <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3072:	2001      	movs	r0, #1
}
    3074:	b00c      	add	sp, #48	; 0x30
    3076:	bcf0      	pop	{r4, r5, r6, r7}
    3078:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    307a:	2000      	movs	r0, #0
    307c:	e7fa      	b.n	3074 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    307e:	2000      	movs	r0, #0
    3080:	e7f8      	b.n	3074 <tc_aes128_set_encrypt_key+0xa4>
    3082:	bf00      	nop
    3084:	0002e540 	.word	0x0002e540
    3088:	0002e8e8 	.word	0x0002e8e8

0000308c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    308c:	2800      	cmp	r0, #0
    308e:	f000 8367 	beq.w	3760 <tc_aes_encrypt+0x6d4>
{
    3092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3096:	b088      	sub	sp, #32
    3098:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    309a:	2900      	cmp	r1, #0
    309c:	f000 8362 	beq.w	3764 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    30a0:	2a00      	cmp	r2, #0
    30a2:	f000 8361 	beq.w	3768 <tc_aes_encrypt+0x6dc>
    30a6:	4617      	mov	r7, r2
    30a8:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    30aa:	2310      	movs	r3, #16
    30ac:	4619      	mov	r1, r3
    30ae:	eb0d 0003 	add.w	r0, sp, r3
    30b2:	f7ff ff74 	bl	2f9e <_copy>
	add_round_key(state, s->words);
    30b6:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    30b8:	683b      	ldr	r3, [r7, #0]
    30ba:	f89d 2010 	ldrb.w	r2, [sp, #16]
    30be:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30c2:	f88d 2010 	strb.w	r2, [sp, #16]
    30c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30ca:	f89d 1011 	ldrb.w	r1, [sp, #17]
    30ce:	404a      	eors	r2, r1
    30d0:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    30d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30d8:	f89d 1012 	ldrb.w	r1, [sp, #18]
    30dc:	404a      	eors	r2, r1
    30de:	f88d 2012 	strb.w	r2, [sp, #18]
    30e2:	b2db      	uxtb	r3, r3
    30e4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    30e8:	4053      	eors	r3, r2
    30ea:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    30f4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30f8:	f88d 2014 	strb.w	r2, [sp, #20]
    30fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3100:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3104:	404a      	eors	r2, r1
    3106:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    310a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    310e:	f89d 1016 	ldrb.w	r1, [sp, #22]
    3112:	404a      	eors	r2, r1
    3114:	f88d 2016 	strb.w	r2, [sp, #22]
    3118:	b2db      	uxtb	r3, r3
    311a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    311e:	4053      	eors	r3, r2
    3120:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3124:	68bb      	ldr	r3, [r7, #8]
    3126:	f89d 2018 	ldrb.w	r2, [sp, #24]
    312a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    312e:	f88d 2018 	strb.w	r2, [sp, #24]
    3132:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3136:	f89d 1019 	ldrb.w	r1, [sp, #25]
    313a:	404a      	eors	r2, r1
    313c:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3140:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3144:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3148:	404a      	eors	r2, r1
    314a:	f88d 201a 	strb.w	r2, [sp, #26]
    314e:	b2db      	uxtb	r3, r3
    3150:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3154:	4053      	eors	r3, r2
    3156:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    315a:	68fb      	ldr	r3, [r7, #12]
    315c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3160:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3164:	f88d 201c 	strb.w	r2, [sp, #28]
    3168:	f3c3 4207 	ubfx	r2, r3, #16, #8
    316c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3170:	404a      	eors	r2, r1
    3172:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3176:	f3c3 2207 	ubfx	r2, r3, #8, #8
    317a:	f89d 101e 	ldrb.w	r1, [sp, #30]
    317e:	404a      	eors	r2, r1
    3180:	f88d 201e 	strb.w	r2, [sp, #30]
    3184:	b2db      	uxtb	r3, r3
    3186:	f89d 201f 	ldrb.w	r2, [sp, #31]
    318a:	4053      	eors	r3, r2
    318c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    3190:	2500      	movs	r5, #0
    3192:	e210      	b.n	35b6 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    3194:	a904      	add	r1, sp, #16
    3196:	5ccc      	ldrb	r4, [r1, r3]
    3198:	4a02      	ldr	r2, [pc, #8]	; (31a4 <tc_aes_encrypt+0x118>)
    319a:	5d14      	ldrb	r4, [r2, r4]
    319c:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    319e:	3301      	adds	r3, #1
    31a0:	e002      	b.n	31a8 <tc_aes_encrypt+0x11c>
    31a2:	bf00      	nop
    31a4:	0002e8e8 	.word	0x0002e8e8
    31a8:	2b0f      	cmp	r3, #15
    31aa:	d9f3      	bls.n	3194 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    31ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
    31b0:	f88d 3000 	strb.w	r3, [sp]
    31b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    31b8:	f88d 3001 	strb.w	r3, [sp, #1]
    31bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    31c0:	f88d 3002 	strb.w	r3, [sp, #2]
    31c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31c8:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    31cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    31d0:	f88d 3004 	strb.w	r3, [sp, #4]
    31d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    31d8:	f88d 3005 	strb.w	r3, [sp, #5]
    31dc:	f89d 301e 	ldrb.w	r3, [sp, #30]
    31e0:	f88d 3006 	strb.w	r3, [sp, #6]
    31e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    31e8:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    31ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
    31f0:	f88d 3008 	strb.w	r3, [sp, #8]
    31f4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    31f8:	f88d 3009 	strb.w	r3, [sp, #9]
    31fc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3200:	f88d 300a 	strb.w	r3, [sp, #10]
    3204:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3208:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    320c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3210:	f88d 300c 	strb.w	r3, [sp, #12]
    3214:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3218:	f88d 300d 	strb.w	r3, [sp, #13]
    321c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3220:	f88d 300e 	strb.w	r3, [sp, #14]
    3224:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3228:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    322c:	2310      	movs	r3, #16
    322e:	466a      	mov	r2, sp
    3230:	4619      	mov	r1, r3
    3232:	eb0d 0003 	add.w	r0, sp, r3
    3236:	f7ff feb2 	bl	2f9e <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    323a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    323e:	f7ff febe 	bl	2fbe <_double_byte>
    3242:	4604      	mov	r4, r0
    3244:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3248:	f7ff feb9 	bl	2fbe <_double_byte>
    324c:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3250:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3254:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3258:	4048      	eors	r0, r1
    325a:	4044      	eors	r4, r0
    325c:	4062      	eors	r2, r4
    325e:	4053      	eors	r3, r2
    3260:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3264:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3268:	4608      	mov	r0, r1
    326a:	f7ff fea8 	bl	2fbe <_double_byte>
    326e:	4044      	eors	r4, r0
    3270:	b2e4      	uxtb	r4, r4
    3272:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3276:	f7ff fea2 	bl	2fbe <_double_byte>
    327a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    327e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3282:	4050      	eors	r0, r2
    3284:	4044      	eors	r4, r0
    3286:	405c      	eors	r4, r3
    3288:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    328c:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3290:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3294:	4044      	eors	r4, r0
    3296:	4610      	mov	r0, r2
    3298:	f7ff fe91 	bl	2fbe <_double_byte>
    329c:	4044      	eors	r4, r0
    329e:	b2e4      	uxtb	r4, r4
    32a0:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32a4:	f7ff fe8b 	bl	2fbe <_double_byte>
    32a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32ac:	4058      	eors	r0, r3
    32ae:	4044      	eors	r4, r0
    32b0:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    32b4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    32b8:	f7ff fe81 	bl	2fbe <_double_byte>
    32bc:	f89d 2010 	ldrb.w	r2, [sp, #16]
    32c0:	f89d 3011 	ldrb.w	r3, [sp, #17]
    32c4:	f89d 4012 	ldrb.w	r4, [sp, #18]
    32c8:	4050      	eors	r0, r2
    32ca:	4043      	eors	r3, r0
    32cc:	405c      	eors	r4, r3
    32ce:	b2e4      	uxtb	r4, r4
    32d0:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32d4:	f7ff fe73 	bl	2fbe <_double_byte>
    32d8:	4060      	eors	r0, r4
    32da:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    32de:	f89d 0014 	ldrb.w	r0, [sp, #20]
    32e2:	f7ff fe6c 	bl	2fbe <_double_byte>
    32e6:	4604      	mov	r4, r0
    32e8:	f89d 0015 	ldrb.w	r0, [sp, #21]
    32ec:	f7ff fe67 	bl	2fbe <_double_byte>
    32f0:	f89d 1015 	ldrb.w	r1, [sp, #21]
    32f4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    32f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32fc:	4048      	eors	r0, r1
    32fe:	4044      	eors	r4, r0
    3300:	4062      	eors	r2, r4
    3302:	4053      	eors	r3, r2
    3304:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3308:	f89d 4014 	ldrb.w	r4, [sp, #20]
    330c:	4608      	mov	r0, r1
    330e:	f7ff fe56 	bl	2fbe <_double_byte>
    3312:	4044      	eors	r4, r0
    3314:	b2e4      	uxtb	r4, r4
    3316:	f89d 0016 	ldrb.w	r0, [sp, #22]
    331a:	f7ff fe50 	bl	2fbe <_double_byte>
    331e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3322:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3326:	4050      	eors	r0, r2
    3328:	4044      	eors	r4, r0
    332a:	405c      	eors	r4, r3
    332c:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3330:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3334:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3338:	4044      	eors	r4, r0
    333a:	4610      	mov	r0, r2
    333c:	f7ff fe3f 	bl	2fbe <_double_byte>
    3340:	4044      	eors	r4, r0
    3342:	b2e4      	uxtb	r4, r4
    3344:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3348:	f7ff fe39 	bl	2fbe <_double_byte>
    334c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3350:	4058      	eors	r0, r3
    3352:	4044      	eors	r4, r0
    3354:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3358:	f89d 0014 	ldrb.w	r0, [sp, #20]
    335c:	f7ff fe2f 	bl	2fbe <_double_byte>
    3360:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3364:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3368:	f89d 4016 	ldrb.w	r4, [sp, #22]
    336c:	4050      	eors	r0, r2
    336e:	4043      	eors	r3, r0
    3370:	405c      	eors	r4, r3
    3372:	b2e4      	uxtb	r4, r4
    3374:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3378:	f7ff fe21 	bl	2fbe <_double_byte>
    337c:	4060      	eors	r0, r4
    337e:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3382:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3386:	f7ff fe1a 	bl	2fbe <_double_byte>
    338a:	4604      	mov	r4, r0
    338c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3390:	f7ff fe15 	bl	2fbe <_double_byte>
    3394:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3398:	f89d 201a 	ldrb.w	r2, [sp, #26]
    339c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33a0:	4048      	eors	r0, r1
    33a2:	4044      	eors	r4, r0
    33a4:	4062      	eors	r2, r4
    33a6:	4053      	eors	r3, r2
    33a8:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33ac:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33b0:	4608      	mov	r0, r1
    33b2:	f7ff fe04 	bl	2fbe <_double_byte>
    33b6:	4044      	eors	r4, r0
    33b8:	b2e4      	uxtb	r4, r4
    33ba:	f89d 001a 	ldrb.w	r0, [sp, #26]
    33be:	f7ff fdfe 	bl	2fbe <_double_byte>
    33c2:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33ca:	4050      	eors	r0, r2
    33cc:	4044      	eors	r4, r0
    33ce:	405c      	eors	r4, r3
    33d0:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33d4:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33d8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    33dc:	4044      	eors	r4, r0
    33de:	4610      	mov	r0, r2
    33e0:	f7ff fded 	bl	2fbe <_double_byte>
    33e4:	4044      	eors	r4, r0
    33e6:	b2e4      	uxtb	r4, r4
    33e8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33ec:	f7ff fde7 	bl	2fbe <_double_byte>
    33f0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33f4:	4058      	eors	r0, r3
    33f6:	4044      	eors	r4, r0
    33f8:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    33fc:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3400:	f7ff fddd 	bl	2fbe <_double_byte>
    3404:	f89d 2018 	ldrb.w	r2, [sp, #24]
    3408:	f89d 3019 	ldrb.w	r3, [sp, #25]
    340c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    3410:	4050      	eors	r0, r2
    3412:	4043      	eors	r3, r0
    3414:	405c      	eors	r4, r3
    3416:	b2e4      	uxtb	r4, r4
    3418:	f89d 001b 	ldrb.w	r0, [sp, #27]
    341c:	f7ff fdcf 	bl	2fbe <_double_byte>
    3420:	4060      	eors	r0, r4
    3422:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3426:	f89d 001c 	ldrb.w	r0, [sp, #28]
    342a:	f7ff fdc8 	bl	2fbe <_double_byte>
    342e:	4604      	mov	r4, r0
    3430:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3434:	f7ff fdc3 	bl	2fbe <_double_byte>
    3438:	f89d 101d 	ldrb.w	r1, [sp, #29]
    343c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3440:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3444:	4048      	eors	r0, r1
    3446:	4044      	eors	r4, r0
    3448:	4062      	eors	r2, r4
    344a:	4053      	eors	r3, r2
    344c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3450:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3454:	4608      	mov	r0, r1
    3456:	f7ff fdb2 	bl	2fbe <_double_byte>
    345a:	4044      	eors	r4, r0
    345c:	b2e4      	uxtb	r4, r4
    345e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    3462:	f7ff fdac 	bl	2fbe <_double_byte>
    3466:	f89d 201e 	ldrb.w	r2, [sp, #30]
    346a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    346e:	4050      	eors	r0, r2
    3470:	4044      	eors	r4, r0
    3472:	405c      	eors	r4, r3
    3474:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3478:	f89d 401c 	ldrb.w	r4, [sp, #28]
    347c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3480:	4044      	eors	r4, r0
    3482:	4610      	mov	r0, r2
    3484:	f7ff fd9b 	bl	2fbe <_double_byte>
    3488:	4044      	eors	r4, r0
    348a:	b2e4      	uxtb	r4, r4
    348c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3490:	f7ff fd95 	bl	2fbe <_double_byte>
    3494:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3498:	4058      	eors	r0, r3
    349a:	4044      	eors	r4, r0
    349c:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    34a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34a4:	f7ff fd8b 	bl	2fbe <_double_byte>
    34a8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    34ac:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34b0:	f89d 401e 	ldrb.w	r4, [sp, #30]
    34b4:	4050      	eors	r0, r2
    34b6:	4043      	eors	r3, r0
    34b8:	405c      	eors	r4, r3
    34ba:	b2e4      	uxtb	r4, r4
    34bc:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34c0:	f7ff fd7d 	bl	2fbe <_double_byte>
    34c4:	4060      	eors	r0, r4
    34c6:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    34ca:	2310      	movs	r3, #16
    34cc:	466a      	mov	r2, sp
    34ce:	4619      	mov	r1, r3
    34d0:	eb0d 0003 	add.w	r0, sp, r3
    34d4:	f7ff fd63 	bl	2f9e <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    34d8:	3501      	adds	r5, #1
    34da:	012b      	lsls	r3, r5, #4
    34dc:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    34de:	58f3      	ldr	r3, [r6, r3]
    34e0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    34e4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34e8:	f88d 1010 	strb.w	r1, [sp, #16]
    34ec:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    34f4:	4041      	eors	r1, r0
    34f6:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    34fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
    34fe:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3502:	4041      	eors	r1, r0
    3504:	f88d 1012 	strb.w	r1, [sp, #18]
    3508:	b2db      	uxtb	r3, r3
    350a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    350e:	404b      	eors	r3, r1
    3510:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3514:	6853      	ldr	r3, [r2, #4]
    3516:	f89d 1014 	ldrb.w	r1, [sp, #20]
    351a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    351e:	f88d 1014 	strb.w	r1, [sp, #20]
    3522:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3526:	f89d 0015 	ldrb.w	r0, [sp, #21]
    352a:	4041      	eors	r1, r0
    352c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3530:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3534:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3538:	4041      	eors	r1, r0
    353a:	f88d 1016 	strb.w	r1, [sp, #22]
    353e:	b2db      	uxtb	r3, r3
    3540:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3544:	404b      	eors	r3, r1
    3546:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    354a:	6893      	ldr	r3, [r2, #8]
    354c:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3550:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3554:	f88d 1018 	strb.w	r1, [sp, #24]
    3558:	f3c3 4107 	ubfx	r1, r3, #16, #8
    355c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3560:	4041      	eors	r1, r0
    3562:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3566:	f3c3 2107 	ubfx	r1, r3, #8, #8
    356a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    356e:	4041      	eors	r1, r0
    3570:	f88d 101a 	strb.w	r1, [sp, #26]
    3574:	b2db      	uxtb	r3, r3
    3576:	f89d 101b 	ldrb.w	r1, [sp, #27]
    357a:	404b      	eors	r3, r1
    357c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3580:	68d3      	ldr	r3, [r2, #12]
    3582:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3586:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    358a:	f88d 201c 	strb.w	r2, [sp, #28]
    358e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3592:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3596:	404a      	eors	r2, r1
    3598:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    359c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    35a0:	f89d 101e 	ldrb.w	r1, [sp, #30]
    35a4:	404a      	eors	r2, r1
    35a6:	f88d 201e 	strb.w	r2, [sp, #30]
    35aa:	b2db      	uxtb	r3, r3
    35ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
    35b0:	4053      	eors	r3, r2
    35b2:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    35b6:	2d08      	cmp	r5, #8
    35b8:	d801      	bhi.n	35be <tc_aes_encrypt+0x532>
    35ba:	2300      	movs	r3, #0
    35bc:	e5f4      	b.n	31a8 <tc_aes_encrypt+0x11c>
    35be:	2300      	movs	r3, #0
    35c0:	e005      	b.n	35ce <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    35c2:	aa04      	add	r2, sp, #16
    35c4:	5cd1      	ldrb	r1, [r2, r3]
    35c6:	4869      	ldr	r0, [pc, #420]	; (376c <tc_aes_encrypt+0x6e0>)
    35c8:	5c41      	ldrb	r1, [r0, r1]
    35ca:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    35cc:	3301      	adds	r3, #1
    35ce:	2b0f      	cmp	r3, #15
    35d0:	d9f7      	bls.n	35c2 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    35d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    35d6:	f88d 3000 	strb.w	r3, [sp]
    35da:	f89d 3015 	ldrb.w	r3, [sp, #21]
    35de:	f88d 3001 	strb.w	r3, [sp, #1]
    35e2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    35e6:	f88d 3002 	strb.w	r3, [sp, #2]
    35ea:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35ee:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    35f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    35f6:	f88d 3004 	strb.w	r3, [sp, #4]
    35fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
    35fe:	f88d 3005 	strb.w	r3, [sp, #5]
    3602:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3606:	f88d 3006 	strb.w	r3, [sp, #6]
    360a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    360e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3612:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3616:	f88d 3008 	strb.w	r3, [sp, #8]
    361a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    361e:	f88d 3009 	strb.w	r3, [sp, #9]
    3622:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3626:	f88d 300a 	strb.w	r3, [sp, #10]
    362a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    362e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3632:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3636:	f88d 300c 	strb.w	r3, [sp, #12]
    363a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    363e:	f88d 300d 	strb.w	r3, [sp, #13]
    3642:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3646:	f88d 300e 	strb.w	r3, [sp, #14]
    364a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    364e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3652:	2310      	movs	r3, #16
    3654:	466a      	mov	r2, sp
    3656:	4619      	mov	r1, r3
    3658:	eb0d 0003 	add.w	r0, sp, r3
    365c:	f7ff fc9f 	bl	2f9e <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3660:	1c6b      	adds	r3, r5, #1
    3662:	011b      	lsls	r3, r3, #4
    3664:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3666:	58fb      	ldr	r3, [r7, r3]
    3668:	f89d 1010 	ldrb.w	r1, [sp, #16]
    366c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3670:	f88d 1010 	strb.w	r1, [sp, #16]
    3674:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3678:	f89d 0011 	ldrb.w	r0, [sp, #17]
    367c:	4041      	eors	r1, r0
    367e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3682:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3686:	f89d 0012 	ldrb.w	r0, [sp, #18]
    368a:	4041      	eors	r1, r0
    368c:	f88d 1012 	strb.w	r1, [sp, #18]
    3690:	b2db      	uxtb	r3, r3
    3692:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3696:	404b      	eors	r3, r1
    3698:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    369c:	6853      	ldr	r3, [r2, #4]
    369e:	f89d 1014 	ldrb.w	r1, [sp, #20]
    36a2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36a6:	f88d 1014 	strb.w	r1, [sp, #20]
    36aa:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36ae:	f89d 0015 	ldrb.w	r0, [sp, #21]
    36b2:	4041      	eors	r1, r0
    36b4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    36b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36bc:	f89d 0016 	ldrb.w	r0, [sp, #22]
    36c0:	4041      	eors	r1, r0
    36c2:	f88d 1016 	strb.w	r1, [sp, #22]
    36c6:	b2db      	uxtb	r3, r3
    36c8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    36cc:	404b      	eors	r3, r1
    36ce:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    36d2:	6893      	ldr	r3, [r2, #8]
    36d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    36d8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36dc:	f88d 1018 	strb.w	r1, [sp, #24]
    36e0:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36e4:	f89d 0019 	ldrb.w	r0, [sp, #25]
    36e8:	4041      	eors	r1, r0
    36ea:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    36ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36f2:	f89d 001a 	ldrb.w	r0, [sp, #26]
    36f6:	4041      	eors	r1, r0
    36f8:	f88d 101a 	strb.w	r1, [sp, #26]
    36fc:	b2db      	uxtb	r3, r3
    36fe:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3702:	404b      	eors	r3, r1
    3704:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3708:	68d3      	ldr	r3, [r2, #12]
    370a:	f89d 201c 	ldrb.w	r2, [sp, #28]
    370e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3712:	f88d 201c 	strb.w	r2, [sp, #28]
    3716:	f3c3 4207 	ubfx	r2, r3, #16, #8
    371a:	f89d 101d 	ldrb.w	r1, [sp, #29]
    371e:	404a      	eors	r2, r1
    3720:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3724:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3728:	f89d 101e 	ldrb.w	r1, [sp, #30]
    372c:	404a      	eors	r2, r1
    372e:	f88d 201e 	strb.w	r2, [sp, #30]
    3732:	b2db      	uxtb	r3, r3
    3734:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3738:	4053      	eors	r3, r2
    373a:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    373e:	2310      	movs	r3, #16
    3740:	eb0d 0203 	add.w	r2, sp, r3
    3744:	4619      	mov	r1, r3
    3746:	4640      	mov	r0, r8
    3748:	f7ff fc29 	bl	2f9e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    374c:	2210      	movs	r2, #16
    374e:	2100      	movs	r1, #0
    3750:	eb0d 0002 	add.w	r0, sp, r2
    3754:	f7ff fc2f 	bl	2fb6 <_set>

	return TC_CRYPTO_SUCCESS;
    3758:	2001      	movs	r0, #1
}
    375a:	b008      	add	sp, #32
    375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3760:	2000      	movs	r0, #0
    3762:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3764:	2000      	movs	r0, #0
    3766:	e7f8      	b.n	375a <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    3768:	2000      	movs	r0, #0
    376a:	e7f6      	b.n	375a <tc_aes_encrypt+0x6ce>
    376c:	0002e8e8 	.word	0x0002e8e8

00003770 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3770:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    3772:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3776:	f991 3000 	ldrsb.w	r3, [r1]
    377a:	2b00      	cmp	r3, #0
    377c:	db0d      	blt.n	379a <gf_double+0x2a>
    377e:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    3780:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    3782:	1e45      	subs	r5, r0, #1
    3784:	7814      	ldrb	r4, [r2, #0]
    3786:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    378a:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    378c:	428a      	cmp	r2, r1
    378e:	d006      	beq.n	379e <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    3790:	7813      	ldrb	r3, [r2, #0]
    3792:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    3794:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    3796:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    3798:	e7f3      	b.n	3782 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    379a:	2387      	movs	r3, #135	; 0x87
    379c:	e7f0      	b.n	3780 <gf_double+0x10>
	}
}
    379e:	bc30      	pop	{r4, r5}
    37a0:	4770      	bx	lr

000037a2 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    37a2:	b130      	cbz	r0, 37b2 <tc_cmac_erase+0x10>
{
    37a4:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    37a6:	2258      	movs	r2, #88	; 0x58
    37a8:	2100      	movs	r1, #0
    37aa:	f7ff fc04 	bl	2fb6 <_set>

	return TC_CRYPTO_SUCCESS;
    37ae:	2001      	movs	r0, #1
    37b0:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    37b2:	2000      	movs	r0, #0
    37b4:	4770      	bx	lr

000037b6 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37b6:	b1a0      	cbz	r0, 37e2 <tc_cmac_init+0x2c>
{
    37b8:	b510      	push	{r4, lr}
    37ba:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37bc:	2210      	movs	r2, #16
    37be:	2100      	movs	r1, #0
    37c0:	f7ff fbf9 	bl	2fb6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    37c4:	2210      	movs	r2, #16
    37c6:	2100      	movs	r1, #0
    37c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
    37cc:	f7ff fbf3 	bl	2fb6 <_set>
	s->leftover_offset = 0;
    37d0:	2300      	movs	r3, #0
    37d2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    37d4:	2200      	movs	r2, #0
    37d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37da:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    37de:	2001      	movs	r0, #1
    37e0:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    37e2:	2000      	movs	r0, #0
    37e4:	4770      	bx	lr

000037e6 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    37e6:	b338      	cbz	r0, 3838 <tc_cmac_setup+0x52>
{
    37e8:	b570      	push	{r4, r5, r6, lr}
    37ea:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    37ec:	b331      	cbz	r1, 383c <tc_cmac_setup+0x56>
    37ee:	4616      	mov	r6, r2
    37f0:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    37f2:	2258      	movs	r2, #88	; 0x58
    37f4:	2100      	movs	r1, #0
    37f6:	f7ff fbde 	bl	2fb6 <_set>
	s->sched = sched;
    37fa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    37fc:	4629      	mov	r1, r5
    37fe:	4630      	mov	r0, r6
    3800:	f7ff fbe6 	bl	2fd0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3804:	2210      	movs	r2, #16
    3806:	2100      	movs	r1, #0
    3808:	4620      	mov	r0, r4
    380a:	f7ff fbd4 	bl	2fb6 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    380e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3810:	4621      	mov	r1, r4
    3812:	4620      	mov	r0, r4
    3814:	f7ff fc3a 	bl	308c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    3818:	f104 0510 	add.w	r5, r4, #16
    381c:	4621      	mov	r1, r4
    381e:	4628      	mov	r0, r5
    3820:	f7ff ffa6 	bl	3770 <gf_double>
	gf_double (s->K2, s->K1);
    3824:	4629      	mov	r1, r5
    3826:	f104 0020 	add.w	r0, r4, #32
    382a:	f7ff ffa1 	bl	3770 <gf_double>
	tc_cmac_init(s);
    382e:	4620      	mov	r0, r4
    3830:	f7ff ffc1 	bl	37b6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3834:	2001      	movs	r0, #1
    3836:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3838:	2000      	movs	r0, #0
    383a:	4770      	bx	lr
    383c:	2000      	movs	r0, #0
}
    383e:	bd70      	pop	{r4, r5, r6, pc}

00003840 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3840:	2800      	cmp	r0, #0
    3842:	d05f      	beq.n	3904 <tc_cmac_update+0xc4>
{
    3844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3846:	460d      	mov	r5, r1
    3848:	4616      	mov	r6, r2
    384a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    384c:	2a00      	cmp	r2, #0
    384e:	d05b      	beq.n	3908 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3850:	2900      	cmp	r1, #0
    3852:	d05b      	beq.n	390c <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3854:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3858:	ea52 0103 	orrs.w	r1, r2, r3
    385c:	d058      	beq.n	3910 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    385e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3862:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    3866:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    386a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    386c:	2800      	cmp	r0, #0
    386e:	d038      	beq.n	38e2 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3870:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3874:	42be      	cmp	r6, r7
    3876:	d30b      	bcc.n	3890 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3878:	3030      	adds	r0, #48	; 0x30
    387a:	463b      	mov	r3, r7
    387c:	462a      	mov	r2, r5
    387e:	4639      	mov	r1, r7
    3880:	4420      	add	r0, r4
    3882:	f7ff fb8c 	bl	2f9e <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    3886:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3888:	443d      	add	r5, r7
		s->leftover_offset = 0;
    388a:	2300      	movs	r3, #0
    388c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    388e:	e012      	b.n	38b6 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3890:	3030      	adds	r0, #48	; 0x30
    3892:	4633      	mov	r3, r6
    3894:	462a      	mov	r2, r5
    3896:	4631      	mov	r1, r6
    3898:	4420      	add	r0, r4
    389a:	f7ff fb80 	bl	2f9e <_copy>
			s->leftover_offset += data_length;
    389e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38a0:	4433      	add	r3, r6
    38a2:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    38a4:	2001      	movs	r0, #1
    38a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    38a8:	18e2      	adds	r2, r4, r3
    38aa:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    38ae:	5ce1      	ldrb	r1, [r4, r3]
    38b0:	404a      	eors	r2, r1
    38b2:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38b4:	3301      	adds	r3, #1
    38b6:	2b0f      	cmp	r3, #15
    38b8:	d9f6      	bls.n	38a8 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38bc:	4621      	mov	r1, r4
    38be:	4620      	mov	r0, r4
    38c0:	f7ff fbe4 	bl	308c <tc_aes_encrypt>
    38c4:	e00d      	b.n	38e2 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    38c6:	5cea      	ldrb	r2, [r5, r3]
    38c8:	5ce1      	ldrb	r1, [r4, r3]
    38ca:	404a      	eors	r2, r1
    38cc:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38ce:	3301      	adds	r3, #1
    38d0:	2b0f      	cmp	r3, #15
    38d2:	d9f8      	bls.n	38c6 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38d6:	4621      	mov	r1, r4
    38d8:	4620      	mov	r0, r4
    38da:	f7ff fbd7 	bl	308c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    38de:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    38e0:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    38e2:	2e10      	cmp	r6, #16
    38e4:	d901      	bls.n	38ea <tc_cmac_update+0xaa>
    38e6:	2300      	movs	r3, #0
    38e8:	e7f2      	b.n	38d0 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    38ea:	b90e      	cbnz	r6, 38f0 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    38ec:	2001      	movs	r0, #1
}
    38ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    38f0:	4633      	mov	r3, r6
    38f2:	462a      	mov	r2, r5
    38f4:	4631      	mov	r1, r6
    38f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    38fa:	f7ff fb50 	bl	2f9e <_copy>
		s->leftover_offset = data_length;
    38fe:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3900:	2001      	movs	r0, #1
    3902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3904:	2000      	movs	r0, #0
    3906:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    3908:	2001      	movs	r0, #1
    390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    390c:	2000      	movs	r0, #0
    390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3910:	2000      	movs	r0, #0
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003914 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3914:	b370      	cbz	r0, 3974 <tc_cmac_final+0x60>
{
    3916:	b570      	push	{r4, r5, r6, lr}
    3918:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    391a:	b369      	cbz	r1, 3978 <tc_cmac_final+0x64>
    391c:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    391e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3920:	2a10      	cmp	r2, #16
    3922:	d010      	beq.n	3946 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3924:	f102 0030 	add.w	r0, r2, #48	; 0x30
    3928:	f1c2 0210 	rsb	r2, r2, #16
    392c:	2100      	movs	r1, #0
    392e:	4428      	add	r0, r5
    3930:	f7ff fb41 	bl	2fb6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3934:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3936:	442b      	add	r3, r5
    3938:	2280      	movs	r2, #128	; 0x80
    393a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    393e:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3942:	2300      	movs	r3, #0
    3944:	e00a      	b.n	395c <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3946:	3110      	adds	r1, #16
    3948:	e7fb      	b.n	3942 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    394a:	18ea      	adds	r2, r5, r3
    394c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3950:	5ccc      	ldrb	r4, [r1, r3]
    3952:	4054      	eors	r4, r2
    3954:	5cea      	ldrb	r2, [r5, r3]
    3956:	4062      	eors	r2, r4
    3958:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    395a:	3301      	adds	r3, #1
    395c:	2b0f      	cmp	r3, #15
    395e:	d9f4      	bls.n	394a <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3960:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3962:	4629      	mov	r1, r5
    3964:	4630      	mov	r0, r6
    3966:	f7ff fb91 	bl	308c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    396a:	4628      	mov	r0, r5
    396c:	f7ff ff19 	bl	37a2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3970:	2001      	movs	r0, #1
    3972:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3974:	2000      	movs	r0, #0
    3976:	4770      	bx	lr
    3978:	2000      	movs	r0, #0
}
    397a:	bd70      	pop	{r4, r5, r6, pc}

0000397c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    397c:	2000      	movs	r0, #0
    397e:	4770      	bx	lr

00003980 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3980:	e003      	b.n	398a <mbedtls_zeroize+0xa>
    3982:	2200      	movs	r2, #0
    3984:	7002      	strb	r2, [r0, #0]
    3986:	3001      	adds	r0, #1
    3988:	4619      	mov	r1, r3
    398a:	1e4b      	subs	r3, r1, #1
    398c:	2900      	cmp	r1, #0
    398e:	d1f8      	bne.n	3982 <mbedtls_zeroize+0x2>
}
    3990:	4770      	bx	lr

00003992 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3992:	e003      	b.n	399c <mbedtls_zeroize+0xa>
    3994:	2200      	movs	r2, #0
    3996:	7002      	strb	r2, [r0, #0]
    3998:	3001      	adds	r0, #1
    399a:	4619      	mov	r1, r3
    399c:	1e4b      	subs	r3, r1, #1
    399e:	2900      	cmp	r1, #0
    39a0:	d1f8      	bne.n	3994 <mbedtls_zeroize+0x2>
}
    39a2:	4770      	bx	lr

000039a4 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39a4:	e003      	b.n	39ae <mbedtls_zeroize+0xa>
    39a6:	2200      	movs	r2, #0
    39a8:	7002      	strb	r2, [r0, #0]
    39aa:	3001      	adds	r0, #1
    39ac:	4619      	mov	r1, r3
    39ae:	1e4b      	subs	r3, r1, #1
    39b0:	2900      	cmp	r1, #0
    39b2:	d1f8      	bne.n	39a6 <mbedtls_zeroize+0x2>
}
    39b4:	4770      	bx	lr

000039b6 <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39b6:	e003      	b.n	39c0 <mbedtls_zeroize+0xa>
    39b8:	2200      	movs	r2, #0
    39ba:	7002      	strb	r2, [r0, #0]
    39bc:	3001      	adds	r0, #1
    39be:	4619      	mov	r1, r3
    39c0:	1e4b      	subs	r3, r1, #1
    39c2:	2900      	cmp	r1, #0
    39c4:	d1f8      	bne.n	39b8 <mbedtls_zeroize+0x2>
}
    39c6:	4770      	bx	lr

000039c8 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    39c8:	e003      	b.n	39d2 <mbedtls_zeroize+0xa>
    39ca:	2200      	movs	r2, #0
    39cc:	7002      	strb	r2, [r0, #0]
    39ce:	3001      	adds	r0, #1
    39d0:	4619      	mov	r1, r3
    39d2:	1e4b      	subs	r3, r1, #1
    39d4:	2900      	cmp	r1, #0
    39d6:	d1f8      	bne.n	39ca <mbedtls_zeroize+0x2>
}
    39d8:	4770      	bx	lr

000039da <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39da:	e003      	b.n	39e4 <mbedtls_zeroize+0xa>
    39dc:	2200      	movs	r2, #0
    39de:	7002      	strb	r2, [r0, #0]
    39e0:	3001      	adds	r0, #1
    39e2:	4619      	mov	r1, r3
    39e4:	1e4b      	subs	r3, r1, #1
    39e6:	2900      	cmp	r1, #0
    39e8:	d1f8      	bne.n	39dc <mbedtls_zeroize+0x2>
}
    39ea:	4770      	bx	lr

000039ec <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39ec:	e003      	b.n	39f6 <mbedtls_zeroize+0xa>
    39ee:	2200      	movs	r2, #0
    39f0:	7002      	strb	r2, [r0, #0]
    39f2:	3001      	adds	r0, #1
    39f4:	4619      	mov	r1, r3
    39f6:	1e4b      	subs	r3, r1, #1
    39f8:	2900      	cmp	r1, #0
    39fa:	d1f8      	bne.n	39ee <mbedtls_zeroize+0x2>
}
    39fc:	4770      	bx	lr

000039fe <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39fe:	e003      	b.n	3a08 <mbedtls_zeroize+0xa>
    3a00:	2200      	movs	r2, #0
    3a02:	7002      	strb	r2, [r0, #0]
    3a04:	3001      	adds	r0, #1
    3a06:	4619      	mov	r1, r3
    3a08:	1e4b      	subs	r3, r1, #1
    3a0a:	2900      	cmp	r1, #0
    3a0c:	d1f8      	bne.n	3a00 <mbedtls_zeroize+0x2>
}
    3a0e:	4770      	bx	lr

00003a10 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a10:	e003      	b.n	3a1a <mbedtls_zeroize+0xa>
    3a12:	2200      	movs	r2, #0
    3a14:	7002      	strb	r2, [r0, #0]
    3a16:	3001      	adds	r0, #1
    3a18:	4619      	mov	r1, r3
    3a1a:	1e4b      	subs	r3, r1, #1
    3a1c:	2900      	cmp	r1, #0
    3a1e:	d1f8      	bne.n	3a12 <mbedtls_zeroize+0x2>
}
    3a20:	4770      	bx	lr

00003a22 <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a22:	e003      	b.n	3a2c <mbedtls_zeroize+0xa>
    3a24:	2200      	movs	r2, #0
    3a26:	7002      	strb	r2, [r0, #0]
    3a28:	3001      	adds	r0, #1
    3a2a:	4619      	mov	r1, r3
    3a2c:	1e4b      	subs	r3, r1, #1
    3a2e:	2900      	cmp	r1, #0
    3a30:	d1f8      	bne.n	3a24 <mbedtls_zeroize+0x2>
}
    3a32:	4770      	bx	lr

00003a34 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a34:	e003      	b.n	3a3e <mbedtls_zeroize+0xa>
    3a36:	2200      	movs	r2, #0
    3a38:	7002      	strb	r2, [r0, #0]
    3a3a:	3001      	adds	r0, #1
    3a3c:	4619      	mov	r1, r3
    3a3e:	1e4b      	subs	r3, r1, #1
    3a40:	2900      	cmp	r1, #0
    3a42:	d1f8      	bne.n	3a36 <mbedtls_zeroize+0x2>
}
    3a44:	4770      	bx	lr

00003a46 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a46:	e003      	b.n	3a50 <mbedtls_zeroize+0xa>
    3a48:	2200      	movs	r2, #0
    3a4a:	7002      	strb	r2, [r0, #0]
    3a4c:	3001      	adds	r0, #1
    3a4e:	4619      	mov	r1, r3
    3a50:	1e4b      	subs	r3, r1, #1
    3a52:	2900      	cmp	r1, #0
    3a54:	d1f8      	bne.n	3a48 <mbedtls_zeroize+0x2>
}
    3a56:	4770      	bx	lr

00003a58 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a58:	e003      	b.n	3a62 <mbedtls_zeroize+0xa>
    3a5a:	2200      	movs	r2, #0
    3a5c:	7002      	strb	r2, [r0, #0]
    3a5e:	3001      	adds	r0, #1
    3a60:	4619      	mov	r1, r3
    3a62:	1e4b      	subs	r3, r1, #1
    3a64:	2900      	cmp	r1, #0
    3a66:	d1f8      	bne.n	3a5a <mbedtls_zeroize+0x2>
}
    3a68:	4770      	bx	lr

00003a6a <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a6a:	e003      	b.n	3a74 <mbedtls_zeroize+0xa>
    3a6c:	2200      	movs	r2, #0
    3a6e:	7002      	strb	r2, [r0, #0]
    3a70:	3001      	adds	r0, #1
    3a72:	4619      	mov	r1, r3
    3a74:	1e4b      	subs	r3, r1, #1
    3a76:	2900      	cmp	r1, #0
    3a78:	d1f8      	bne.n	3a6c <mbedtls_zeroize+0x2>
}
    3a7a:	4770      	bx	lr

00003a7c <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a7c:	e003      	b.n	3a86 <mbedtls_zeroize+0xa>
    3a7e:	2200      	movs	r2, #0
    3a80:	7002      	strb	r2, [r0, #0]
    3a82:	3001      	adds	r0, #1
    3a84:	4619      	mov	r1, r3
    3a86:	1e4b      	subs	r3, r1, #1
    3a88:	2900      	cmp	r1, #0
    3a8a:	d1f8      	bne.n	3a7e <mbedtls_zeroize+0x2>
}
    3a8c:	4770      	bx	lr

00003a8e <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3a8e:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3a90:	f44f 728c 	mov.w	r2, #280	; 0x118
    3a94:	2100      	movs	r1, #0
    3a96:	f026 fb9b 	bl	2a1d0 <memset>
    3a9a:	bd08      	pop	{r3, pc}

00003a9c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3a9c:	b128      	cbz	r0, 3aaa <mbedtls_aes_free+0xe>
{
    3a9e:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3aa0:	f44f 718c 	mov.w	r1, #280	; 0x118
    3aa4:	f7ff ff6c 	bl	3980 <mbedtls_zeroize>
    3aa8:	bd08      	pop	{r3, pc}
    3aaa:	4770      	bx	lr

00003aac <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3aac:	2ac0      	cmp	r2, #192	; 0xc0
    3aae:	d00f      	beq.n	3ad0 <mbedtls_aes_setkey_enc+0x24>
    3ab0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3ab4:	d00f      	beq.n	3ad6 <mbedtls_aes_setkey_enc+0x2a>
    3ab6:	2a80      	cmp	r2, #128	; 0x80
    3ab8:	d002      	beq.n	3ac0 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3aba:	f06f 001f 	mvn.w	r0, #31
    3abe:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3ac0:	230a      	movs	r3, #10
    3ac2:	6003      	str	r3, [r0, #0]
{
    3ac4:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3ac6:	f100 0308 	add.w	r3, r0, #8
    3aca:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3acc:	2500      	movs	r5, #0
    3ace:	e015      	b.n	3afc <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3ad0:	230c      	movs	r3, #12
    3ad2:	6003      	str	r3, [r0, #0]
    3ad4:	e7f6      	b.n	3ac4 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3ad6:	230e      	movs	r3, #14
    3ad8:	6003      	str	r3, [r0, #0]
    3ada:	e7f3      	b.n	3ac4 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3adc:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3ae0:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3ae4:	7877      	ldrb	r7, [r6, #1]
    3ae6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3aea:	78b7      	ldrb	r7, [r6, #2]
    3aec:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3af0:	78f6      	ldrb	r6, [r6, #3]
    3af2:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3af6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3afa:	3501      	adds	r5, #1
    3afc:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3b00:	d3ec      	bcc.n	3adc <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3b02:	6802      	ldr	r2, [r0, #0]
    3b04:	2a0c      	cmp	r2, #12
    3b06:	d05d      	beq.n	3bc4 <mbedtls_aes_setkey_enc+0x118>
    3b08:	2a0e      	cmp	r2, #14
    3b0a:	f000 80a0 	beq.w	3c4e <mbedtls_aes_setkey_enc+0x1a2>
    3b0e:	2a0a      	cmp	r2, #10
    3b10:	d029      	beq.n	3b66 <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3b12:	2000      	movs	r0, #0
    3b14:	e025      	b.n	3b62 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3b16:	681a      	ldr	r2, [r3, #0]
    3b18:	494e      	ldr	r1, [pc, #312]	; (3c54 <mbedtls_aes_setkey_enc+0x1a8>)
    3b1a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3b1e:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3b20:	68d9      	ldr	r1, [r3, #12]
    3b22:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3b26:	484c      	ldr	r0, [pc, #304]	; (3c58 <mbedtls_aes_setkey_enc+0x1ac>)
    3b28:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3b2a:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3b2c:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3b30:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3b32:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3b36:	0e0d      	lsrs	r5, r1, #24
    3b38:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3b3a:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3b3e:	b2cd      	uxtb	r5, r1
    3b40:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3b42:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3b46:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3b48:	6858      	ldr	r0, [r3, #4]
    3b4a:	4042      	eors	r2, r0
    3b4c:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3b4e:	6898      	ldr	r0, [r3, #8]
    3b50:	4042      	eors	r2, r0
    3b52:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3b54:	404a      	eors	r2, r1
    3b56:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3b58:	3401      	adds	r4, #1
    3b5a:	3310      	adds	r3, #16
    3b5c:	2c09      	cmp	r4, #9
    3b5e:	d9da      	bls.n	3b16 <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3b60:	2000      	movs	r0, #0
}
    3b62:	bcf0      	pop	{r4, r5, r6, r7}
    3b64:	4770      	bx	lr
    switch( ctx->nr )
    3b66:	2400      	movs	r4, #0
    3b68:	e7f8      	b.n	3b5c <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3b6a:	681a      	ldr	r2, [r3, #0]
    3b6c:	4939      	ldr	r1, [pc, #228]	; (3c54 <mbedtls_aes_setkey_enc+0x1a8>)
    3b6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3b72:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3b74:	6959      	ldr	r1, [r3, #20]
    3b76:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3b7a:	4c37      	ldr	r4, [pc, #220]	; (3c58 <mbedtls_aes_setkey_enc+0x1ac>)
    3b7c:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3b7e:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3b80:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3b84:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3b86:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3b8a:	0e0d      	lsrs	r5, r1, #24
    3b8c:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3b8e:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3b92:	b2cd      	uxtb	r5, r1
    3b94:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3b96:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3b9a:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3b9c:	685c      	ldr	r4, [r3, #4]
    3b9e:	4062      	eors	r2, r4
    3ba0:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3ba2:	689c      	ldr	r4, [r3, #8]
    3ba4:	4062      	eors	r2, r4
    3ba6:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3ba8:	68dc      	ldr	r4, [r3, #12]
    3baa:	4062      	eors	r2, r4
    3bac:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3bae:	691c      	ldr	r4, [r3, #16]
    3bb0:	4062      	eors	r2, r4
    3bb2:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3bb4:	404a      	eors	r2, r1
    3bb6:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3bb8:	3001      	adds	r0, #1
    3bba:	3318      	adds	r3, #24
    3bbc:	2807      	cmp	r0, #7
    3bbe:	d9d4      	bls.n	3b6a <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3bc0:	2000      	movs	r0, #0
    3bc2:	e7ce      	b.n	3b62 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3bc4:	2000      	movs	r0, #0
    3bc6:	e7f9      	b.n	3bbc <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3bc8:	681a      	ldr	r2, [r3, #0]
    3bca:	4822      	ldr	r0, [pc, #136]	; (3c54 <mbedtls_aes_setkey_enc+0x1a8>)
    3bcc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3bd0:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3bd2:	69d8      	ldr	r0, [r3, #28]
    3bd4:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3bd8:	4d1f      	ldr	r5, [pc, #124]	; (3c58 <mbedtls_aes_setkey_enc+0x1ac>)
    3bda:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3bdc:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3bde:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3be2:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3be4:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3be8:	0e04      	lsrs	r4, r0, #24
    3bea:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3bec:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3bf0:	b2c4      	uxtb	r4, r0
    3bf2:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3bf4:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3bf8:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3bfa:	685c      	ldr	r4, [r3, #4]
    3bfc:	4062      	eors	r2, r4
    3bfe:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3c00:	689c      	ldr	r4, [r3, #8]
    3c02:	4062      	eors	r2, r4
    3c04:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3c06:	68dc      	ldr	r4, [r3, #12]
    3c08:	4062      	eors	r2, r4
    3c0a:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3c0c:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3c0e:	b2d6      	uxtb	r6, r2
    3c10:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3c12:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3c14:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3c18:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3c1a:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3c1e:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3c22:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3c24:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3c28:	0e12      	lsrs	r2, r2, #24
    3c2a:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3c2c:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3c30:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3c32:	695c      	ldr	r4, [r3, #20]
    3c34:	4062      	eors	r2, r4
    3c36:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3c38:	699c      	ldr	r4, [r3, #24]
    3c3a:	4062      	eors	r2, r4
    3c3c:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3c3e:	4042      	eors	r2, r0
    3c40:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3c42:	3101      	adds	r1, #1
    3c44:	3320      	adds	r3, #32
    3c46:	2906      	cmp	r1, #6
    3c48:	d9be      	bls.n	3bc8 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3c4a:	2000      	movs	r0, #0
    3c4c:	e789      	b.n	3b62 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3c4e:	2100      	movs	r1, #0
    3c50:	e7f9      	b.n	3c46 <mbedtls_aes_setkey_enc+0x19a>
    3c52:	bf00      	nop
    3c54:	0002fc80 	.word	0x0002fc80
    3c58:	0002eb80 	.word	0x0002eb80

00003c5c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c60:	b083      	sub	sp, #12
    3c62:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3c64:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3c66:	f891 9000 	ldrb.w	r9, [r1]
    3c6a:	784b      	ldrb	r3, [r1, #1]
    3c6c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3c70:	788b      	ldrb	r3, [r1, #2]
    3c72:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3c76:	78cb      	ldrb	r3, [r1, #3]
    3c78:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3c7c:	6813      	ldr	r3, [r2, #0]
    3c7e:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3c82:	f891 a004 	ldrb.w	sl, [r1, #4]
    3c86:	794b      	ldrb	r3, [r1, #5]
    3c88:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3c8c:	798b      	ldrb	r3, [r1, #6]
    3c8e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3c92:	79cb      	ldrb	r3, [r1, #7]
    3c94:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3c98:	6853      	ldr	r3, [r2, #4]
    3c9a:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3c9e:	7a0c      	ldrb	r4, [r1, #8]
    3ca0:	7a4b      	ldrb	r3, [r1, #9]
    3ca2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3ca6:	7a8b      	ldrb	r3, [r1, #10]
    3ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3cac:	7acb      	ldrb	r3, [r1, #11]
    3cae:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3cb2:	6893      	ldr	r3, [r2, #8]
    3cb4:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3cb6:	7b0b      	ldrb	r3, [r1, #12]
    3cb8:	7b4d      	ldrb	r5, [r1, #13]
    3cba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3cbe:	7b8d      	ldrb	r5, [r1, #14]
    3cc0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3cc4:	7bc9      	ldrb	r1, [r1, #15]
    3cc6:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3cca:	f102 0610 	add.w	r6, r2, #16
    3cce:	68d3      	ldr	r3, [r2, #12]
    3cd0:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3cd2:	6803      	ldr	r3, [r0, #0]
    3cd4:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3cd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3cdc:	460b      	mov	r3, r1
    3cde:	e0bd      	b.n	3e5c <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3ce0:	6832      	ldr	r2, [r6, #0]
    3ce2:	fa5f f089 	uxtb.w	r0, r9
    3ce6:	49cb      	ldr	r1, [pc, #812]	; (4014 <mbedtls_internal_aes_encrypt+0x3b8>)
    3ce8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3cec:	ea82 0c00 	eor.w	ip, r2, r0
    3cf0:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3cf4:	4dc8      	ldr	r5, [pc, #800]	; (4018 <mbedtls_internal_aes_encrypt+0x3bc>)
    3cf6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3cfa:	ea8c 0c02 	eor.w	ip, ip, r2
    3cfe:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3d02:	48c6      	ldr	r0, [pc, #792]	; (401c <mbedtls_internal_aes_encrypt+0x3c0>)
    3d04:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3d08:	ea8c 0c02 	eor.w	ip, ip, r2
    3d0c:	0e1f      	lsrs	r7, r3, #24
    3d0e:	4ac4      	ldr	r2, [pc, #784]	; (4020 <mbedtls_internal_aes_encrypt+0x3c4>)
    3d10:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3d14:	ea8c 0c07 	eor.w	ip, ip, r7
    3d18:	fa5f fe8a 	uxtb.w	lr, sl
    3d1c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3d20:	6877      	ldr	r7, [r6, #4]
    3d22:	ea87 080e 	eor.w	r8, r7, lr
    3d26:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3d2a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3d2e:	ea88 0807 	eor.w	r8, r8, r7
    3d32:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3d36:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3d3a:	ea88 0807 	eor.w	r8, r8, r7
    3d3e:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3d42:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3d46:	ea88 0807 	eor.w	r8, r8, r7
    3d4a:	fa5f fe84 	uxtb.w	lr, r4
    3d4e:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3d52:	68b7      	ldr	r7, [r6, #8]
    3d54:	ea87 0e0e 	eor.w	lr, r7, lr
    3d58:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3d5c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3d60:	ea8e 0e07 	eor.w	lr, lr, r7
    3d64:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3d68:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3d6c:	ea8e 0e07 	eor.w	lr, lr, r7
    3d70:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3d74:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3d78:	ea8e 0e07 	eor.w	lr, lr, r7
    3d7c:	68f7      	ldr	r7, [r6, #12]
    3d7e:	b2db      	uxtb	r3, r3
    3d80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3d84:	405f      	eors	r7, r3
    3d86:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3d8a:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3d8e:	405f      	eors	r7, r3
    3d90:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3d94:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3d98:	405f      	eors	r7, r3
    3d9a:	0e24      	lsrs	r4, r4, #24
    3d9c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3da0:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3da2:	6933      	ldr	r3, [r6, #16]
    3da4:	fa5f f48c 	uxtb.w	r4, ip
    3da8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3dac:	ea83 0904 	eor.w	r9, r3, r4
    3db0:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3db4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3db8:	ea89 0903 	eor.w	r9, r9, r3
    3dbc:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3dc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3dc4:	ea89 0903 	eor.w	r9, r9, r3
    3dc8:	0e3b      	lsrs	r3, r7, #24
    3dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dce:	ea89 0903 	eor.w	r9, r9, r3
    3dd2:	6973      	ldr	r3, [r6, #20]
    3dd4:	fa5f f488 	uxtb.w	r4, r8
    3dd8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3ddc:	ea83 0a04 	eor.w	sl, r3, r4
    3de0:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3de4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3de8:	ea8a 0a03 	eor.w	sl, sl, r3
    3dec:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3df0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3df4:	ea8a 0a03 	eor.w	sl, sl, r3
    3df8:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e00:	ea8a 0a03 	eor.w	sl, sl, r3
    3e04:	69b3      	ldr	r3, [r6, #24]
    3e06:	fa5f f48e 	uxtb.w	r4, lr
    3e0a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3e0e:	405c      	eors	r4, r3
    3e10:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3e14:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e18:	405c      	eors	r4, r3
    3e1a:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3e1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3e22:	405c      	eors	r4, r3
    3e24:	ea4f 6318 	mov.w	r3, r8, lsr #24
    3e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e2c:	405c      	eors	r4, r3
    3e2e:	69f3      	ldr	r3, [r6, #28]
    3e30:	b2ff      	uxtb	r7, r7
    3e32:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3e36:	404b      	eors	r3, r1
    3e38:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    3e3c:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    3e40:	404b      	eors	r3, r1
    3e42:	f3c8 4807 	ubfx	r8, r8, #16, #8
    3e46:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    3e4a:	404b      	eors	r3, r1
    3e4c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3e50:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    3e54:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3e56:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3e5a:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3e5c:	f1bb 0f00 	cmp.w	fp, #0
    3e60:	f73f af3e 	bgt.w	3ce0 <mbedtls_internal_aes_encrypt+0x84>
    3e64:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3e66:	6833      	ldr	r3, [r6, #0]
    3e68:	fa5f f289 	uxtb.w	r2, r9
    3e6c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4014 <mbedtls_internal_aes_encrypt+0x3b8>
    3e70:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    3e74:	405a      	eors	r2, r3
    3e76:	f3ca 2307 	ubfx	r3, sl, #8, #8
    3e7a:	4f67      	ldr	r7, [pc, #412]	; (4018 <mbedtls_internal_aes_encrypt+0x3bc>)
    3e7c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3e80:	405a      	eors	r2, r3
    3e82:	f3c4 4307 	ubfx	r3, r4, #16, #8
    3e86:	4d65      	ldr	r5, [pc, #404]	; (401c <mbedtls_internal_aes_encrypt+0x3c0>)
    3e88:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e8c:	405a      	eors	r2, r3
    3e8e:	0e0b      	lsrs	r3, r1, #24
    3e90:	4863      	ldr	r0, [pc, #396]	; (4020 <mbedtls_internal_aes_encrypt+0x3c4>)
    3e92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3e96:	405a      	eors	r2, r3
    3e98:	fa5f fc8a 	uxtb.w	ip, sl
    3e9c:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    3ea0:	6873      	ldr	r3, [r6, #4]
    3ea2:	ea83 0c0c 	eor.w	ip, r3, ip
    3ea6:	f3c4 2307 	ubfx	r3, r4, #8, #8
    3eaa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3eae:	ea8c 0c03 	eor.w	ip, ip, r3
    3eb2:	f3c1 4307 	ubfx	r3, r1, #16, #8
    3eb6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3eba:	ea8c 0c03 	eor.w	ip, ip, r3
    3ebe:	ea4f 6319 	mov.w	r3, r9, lsr #24
    3ec2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3ec6:	ea8c 0c03 	eor.w	ip, ip, r3
    3eca:	fa5f f884 	uxtb.w	r8, r4
    3ece:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3ed2:	68b3      	ldr	r3, [r6, #8]
    3ed4:	ea83 0808 	eor.w	r8, r3, r8
    3ed8:	f3c1 2307 	ubfx	r3, r1, #8, #8
    3edc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3ee0:	ea88 0803 	eor.w	r8, r8, r3
    3ee4:	f3c9 4307 	ubfx	r3, r9, #16, #8
    3ee8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3eec:	ea88 0803 	eor.w	r8, r8, r3
    3ef0:	ea4f 631a 	mov.w	r3, sl, lsr #24
    3ef4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3ef8:	ea88 0803 	eor.w	r8, r8, r3
    3efc:	68f3      	ldr	r3, [r6, #12]
    3efe:	b2c9      	uxtb	r1, r1
    3f00:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    3f04:	404b      	eors	r3, r1
    3f06:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3f0a:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    3f0e:	405f      	eors	r7, r3
    3f10:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3f14:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    3f18:	405f      	eors	r7, r3
    3f1a:	0e24      	lsrs	r4, r4, #24
    3f1c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    3f20:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    3f22:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3f24:	b2d0      	uxtb	r0, r2
    3f26:	4b3f      	ldr	r3, [pc, #252]	; (4024 <mbedtls_internal_aes_encrypt+0x3c8>)
    3f28:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    3f2a:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3f2c:	f3cc 2107 	ubfx	r1, ip, #8, #8
    3f30:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3f32:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    3f36:	f3c8 4107 	ubfx	r1, r8, #16, #8
    3f3a:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3f3c:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    3f40:	0e39      	lsrs	r1, r7, #24
    3f42:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    3f44:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    3f48:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    3f4a:	fa5f f08c 	uxtb.w	r0, ip
    3f4e:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    3f50:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3f52:	f3c8 2107 	ubfx	r1, r8, #8, #8
    3f56:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    3f58:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    3f5c:	f3c7 4107 	ubfx	r1, r7, #16, #8
    3f60:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3f62:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    3f66:	0e11      	lsrs	r1, r2, #24
    3f68:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    3f6a:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    3f6e:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    3f70:	fa5f f588 	uxtb.w	r5, r8
    3f74:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    3f76:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3f78:	f3c7 2107 	ubfx	r1, r7, #8, #8
    3f7c:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    3f7e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    3f82:	f3c2 4107 	ubfx	r1, r2, #16, #8
    3f86:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3f88:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    3f8c:	ea4f 611c 	mov.w	r1, ip, lsr #24
    3f90:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    3f92:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    3f96:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    3f98:	b2ff      	uxtb	r7, r7
    3f9a:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    3f9c:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3f9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    3fa2:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    3fa4:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    3fa8:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    3fac:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3fb0:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    3fb4:	ea4f 6818 	mov.w	r8, r8, lsr #24
    3fb8:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    3fbc:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    3fc0:	9e01      	ldr	r6, [sp, #4]
    3fc2:	7034      	strb	r4, [r6, #0]
    3fc4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    3fc8:	7072      	strb	r2, [r6, #1]
    3fca:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3fce:	70b2      	strb	r2, [r6, #2]
    3fd0:	0e24      	lsrs	r4, r4, #24
    3fd2:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    3fd4:	7130      	strb	r0, [r6, #4]
    3fd6:	f3c0 2207 	ubfx	r2, r0, #8, #8
    3fda:	7172      	strb	r2, [r6, #5]
    3fdc:	f3c0 4207 	ubfx	r2, r0, #16, #8
    3fe0:	71b2      	strb	r2, [r6, #6]
    3fe2:	0e00      	lsrs	r0, r0, #24
    3fe4:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    3fe6:	7235      	strb	r5, [r6, #8]
    3fe8:	f3c5 2207 	ubfx	r2, r5, #8, #8
    3fec:	7272      	strb	r2, [r6, #9]
    3fee:	f3c5 4207 	ubfx	r2, r5, #16, #8
    3ff2:	72b2      	strb	r2, [r6, #10]
    3ff4:	0e2d      	lsrs	r5, r5, #24
    3ff6:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    3ff8:	7333      	strb	r3, [r6, #12]
    3ffa:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3ffe:	7372      	strb	r2, [r6, #13]
    4000:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4004:	73b2      	strb	r2, [r6, #14]
    4006:	0e1b      	lsrs	r3, r3, #24
    4008:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    400a:	2000      	movs	r0, #0
    400c:	b003      	add	sp, #12
    400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4012:	bf00      	nop
    4014:	0002ec80 	.word	0x0002ec80
    4018:	0002f080 	.word	0x0002f080
    401c:	0002f480 	.word	0x0002f480
    4020:	0002f880 	.word	0x0002f880
    4024:	0002eb80 	.word	0x0002eb80

00004028 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    4028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    402c:	b083      	sub	sp, #12
    402e:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    4030:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    4032:	f891 a000 	ldrb.w	sl, [r1]
    4036:	784b      	ldrb	r3, [r1, #1]
    4038:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    403c:	788b      	ldrb	r3, [r1, #2]
    403e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    4042:	78cb      	ldrb	r3, [r1, #3]
    4044:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    4048:	6813      	ldr	r3, [r2, #0]
    404a:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    404e:	f891 9004 	ldrb.w	r9, [r1, #4]
    4052:	794b      	ldrb	r3, [r1, #5]
    4054:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    4058:	798b      	ldrb	r3, [r1, #6]
    405a:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    405e:	79cb      	ldrb	r3, [r1, #7]
    4060:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    4064:	6853      	ldr	r3, [r2, #4]
    4066:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    406a:	7a0c      	ldrb	r4, [r1, #8]
    406c:	7a4b      	ldrb	r3, [r1, #9]
    406e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    4072:	7a8b      	ldrb	r3, [r1, #10]
    4074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4078:	7acb      	ldrb	r3, [r1, #11]
    407a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    407e:	6893      	ldr	r3, [r2, #8]
    4080:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    4082:	7b0b      	ldrb	r3, [r1, #12]
    4084:	7b4d      	ldrb	r5, [r1, #13]
    4086:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    408a:	7b8d      	ldrb	r5, [r1, #14]
    408c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    4090:	7bc9      	ldrb	r1, [r1, #15]
    4092:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    4096:	f102 0610 	add.w	r6, r2, #16
    409a:	68d3      	ldr	r3, [r2, #12]
    409c:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    409e:	6803      	ldr	r3, [r0, #0]
    40a0:	ea4f 0b63 	mov.w	fp, r3, asr #1
    40a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    40a8:	460b      	mov	r3, r1
    40aa:	e0bd      	b.n	4228 <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    40ac:	6832      	ldr	r2, [r6, #0]
    40ae:	fa5f f08a 	uxtb.w	r0, sl
    40b2:	49cb      	ldr	r1, [pc, #812]	; (43e0 <mbedtls_internal_aes_decrypt+0x3b8>)
    40b4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    40b8:	ea82 0800 	eor.w	r8, r2, r0
    40bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
    40c0:	4dc8      	ldr	r5, [pc, #800]	; (43e4 <mbedtls_internal_aes_decrypt+0x3bc>)
    40c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    40c6:	ea88 0802 	eor.w	r8, r8, r2
    40ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
    40ce:	48c6      	ldr	r0, [pc, #792]	; (43e8 <mbedtls_internal_aes_decrypt+0x3c0>)
    40d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    40d4:	ea88 0802 	eor.w	r8, r8, r2
    40d8:	ea4f 6719 	mov.w	r7, r9, lsr #24
    40dc:	4ac3      	ldr	r2, [pc, #780]	; (43ec <mbedtls_internal_aes_decrypt+0x3c4>)
    40de:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    40e2:	ea88 0807 	eor.w	r8, r8, r7
    40e6:	fa5f fe89 	uxtb.w	lr, r9
    40ea:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    40ee:	6877      	ldr	r7, [r6, #4]
    40f0:	ea87 0c0e 	eor.w	ip, r7, lr
    40f4:	f3ca 2707 	ubfx	r7, sl, #8, #8
    40f8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    40fc:	ea8c 0c07 	eor.w	ip, ip, r7
    4100:	f3c3 4707 	ubfx	r7, r3, #16, #8
    4104:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4108:	ea8c 0c07 	eor.w	ip, ip, r7
    410c:	0e27      	lsrs	r7, r4, #24
    410e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4112:	ea8c 0c07 	eor.w	ip, ip, r7
    4116:	fa5f fe84 	uxtb.w	lr, r4
    411a:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    411e:	68b7      	ldr	r7, [r6, #8]
    4120:	ea87 0e0e 	eor.w	lr, r7, lr
    4124:	f3c9 2707 	ubfx	r7, r9, #8, #8
    4128:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    412c:	ea8e 0e07 	eor.w	lr, lr, r7
    4130:	f3ca 4707 	ubfx	r7, sl, #16, #8
    4134:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4138:	ea8e 0e07 	eor.w	lr, lr, r7
    413c:	0e1f      	lsrs	r7, r3, #24
    413e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4142:	ea8e 0e07 	eor.w	lr, lr, r7
    4146:	68f7      	ldr	r7, [r6, #12]
    4148:	b2db      	uxtb	r3, r3
    414a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    414e:	405f      	eors	r7, r3
    4150:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4154:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4158:	405f      	eors	r7, r3
    415a:	f3c9 4907 	ubfx	r9, r9, #16, #8
    415e:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    4162:	405f      	eors	r7, r3
    4164:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4168:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    416c:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    416e:	6933      	ldr	r3, [r6, #16]
    4170:	fa5f f488 	uxtb.w	r4, r8
    4174:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4178:	ea83 0a04 	eor.w	sl, r3, r4
    417c:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4180:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4184:	ea8a 0a03 	eor.w	sl, sl, r3
    4188:	f3ce 4307 	ubfx	r3, lr, #16, #8
    418c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4190:	ea8a 0a03 	eor.w	sl, sl, r3
    4194:	ea4f 631c 	mov.w	r3, ip, lsr #24
    4198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    419c:	ea8a 0a03 	eor.w	sl, sl, r3
    41a0:	6973      	ldr	r3, [r6, #20]
    41a2:	fa5f f48c 	uxtb.w	r4, ip
    41a6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    41aa:	ea83 0904 	eor.w	r9, r3, r4
    41ae:	f3c8 2307 	ubfx	r3, r8, #8, #8
    41b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    41b6:	ea89 0903 	eor.w	r9, r9, r3
    41ba:	f3c7 4307 	ubfx	r3, r7, #16, #8
    41be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    41c2:	ea89 0903 	eor.w	r9, r9, r3
    41c6:	ea4f 631e 	mov.w	r3, lr, lsr #24
    41ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41ce:	ea89 0903 	eor.w	r9, r9, r3
    41d2:	69b3      	ldr	r3, [r6, #24]
    41d4:	fa5f f48e 	uxtb.w	r4, lr
    41d8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    41dc:	405c      	eors	r4, r3
    41de:	f3cc 2307 	ubfx	r3, ip, #8, #8
    41e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    41e6:	405c      	eors	r4, r3
    41e8:	f3c8 4307 	ubfx	r3, r8, #16, #8
    41ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    41f0:	405c      	eors	r4, r3
    41f2:	0e3b      	lsrs	r3, r7, #24
    41f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41f8:	405c      	eors	r4, r3
    41fa:	69f3      	ldr	r3, [r6, #28]
    41fc:	b2ff      	uxtb	r7, r7
    41fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    4202:	404b      	eors	r3, r1
    4204:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    4208:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    420c:	404b      	eors	r3, r1
    420e:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4212:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    4216:	404b      	eors	r3, r1
    4218:	ea4f 6818 	mov.w	r8, r8, lsr #24
    421c:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4220:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4222:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    4226:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    4228:	f1bb 0f00 	cmp.w	fp, #0
    422c:	f73f af3e 	bgt.w	40ac <mbedtls_internal_aes_decrypt+0x84>
    4230:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4232:	6833      	ldr	r3, [r6, #0]
    4234:	fa5f f28a 	uxtb.w	r2, sl
    4238:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 43e0 <mbedtls_internal_aes_decrypt+0x3b8>
    423c:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    4240:	4053      	eors	r3, r2
    4242:	f3c1 2207 	ubfx	r2, r1, #8, #8
    4246:	4f67      	ldr	r7, [pc, #412]	; (43e4 <mbedtls_internal_aes_decrypt+0x3bc>)
    4248:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    424c:	4053      	eors	r3, r2
    424e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4252:	4d65      	ldr	r5, [pc, #404]	; (43e8 <mbedtls_internal_aes_decrypt+0x3c0>)
    4254:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4258:	4053      	eors	r3, r2
    425a:	ea4f 6219 	mov.w	r2, r9, lsr #24
    425e:	4863      	ldr	r0, [pc, #396]	; (43ec <mbedtls_internal_aes_decrypt+0x3c4>)
    4260:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4264:	4053      	eors	r3, r2
    4266:	fa5f fc89 	uxtb.w	ip, r9
    426a:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    426e:	6872      	ldr	r2, [r6, #4]
    4270:	ea82 0c0c 	eor.w	ip, r2, ip
    4274:	f3ca 2207 	ubfx	r2, sl, #8, #8
    4278:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    427c:	ea8c 0c02 	eor.w	ip, ip, r2
    4280:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4284:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4288:	ea8c 0c02 	eor.w	ip, ip, r2
    428c:	0e22      	lsrs	r2, r4, #24
    428e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4292:	ea8c 0c02 	eor.w	ip, ip, r2
    4296:	fa5f f884 	uxtb.w	r8, r4
    429a:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    429e:	68b2      	ldr	r2, [r6, #8]
    42a0:	ea82 0808 	eor.w	r8, r2, r8
    42a4:	f3c9 2207 	ubfx	r2, r9, #8, #8
    42a8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    42ac:	ea88 0802 	eor.w	r8, r8, r2
    42b0:	f3ca 4207 	ubfx	r2, sl, #16, #8
    42b4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    42b8:	ea88 0802 	eor.w	r8, r8, r2
    42bc:	0e0a      	lsrs	r2, r1, #24
    42be:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    42c2:	ea88 0802 	eor.w	r8, r8, r2
    42c6:	68f2      	ldr	r2, [r6, #12]
    42c8:	b2c9      	uxtb	r1, r1
    42ca:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    42ce:	404a      	eors	r2, r1
    42d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
    42d4:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    42d8:	4057      	eors	r7, r2
    42da:	f3c9 4907 	ubfx	r9, r9, #16, #8
    42de:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    42e2:	4057      	eors	r7, r2
    42e4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    42e8:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    42ec:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    42ee:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    42f0:	b2d8      	uxtb	r0, r3
    42f2:	4a3f      	ldr	r2, [pc, #252]	; (43f0 <mbedtls_internal_aes_decrypt+0x3c8>)
    42f4:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    42f6:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    42f8:	f3c7 2107 	ubfx	r1, r7, #8, #8
    42fc:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    42fe:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    4302:	f3c8 4107 	ubfx	r1, r8, #16, #8
    4306:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4308:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    430c:	ea4f 611c 	mov.w	r1, ip, lsr #24
    4310:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    4312:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    4316:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4318:	fa5f f08c 	uxtb.w	r0, ip
    431c:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    431e:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4320:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4324:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4326:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    432a:	f3c7 4107 	ubfx	r1, r7, #16, #8
    432e:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    4330:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    4334:	ea4f 6118 	mov.w	r1, r8, lsr #24
    4338:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    433a:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    433e:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    4340:	fa5f f588 	uxtb.w	r5, r8
    4344:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    4346:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4348:	f3cc 2107 	ubfx	r1, ip, #8, #8
    434c:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    434e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4352:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4356:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4358:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    435c:	0e39      	lsrs	r1, r7, #24
    435e:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4360:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4364:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4366:	b2ff      	uxtb	r7, r7
    4368:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    436a:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    436c:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4370:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4374:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    4378:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    437c:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4380:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4384:	0e1b      	lsrs	r3, r3, #24
    4386:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    4388:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    438c:	9e01      	ldr	r6, [sp, #4]
    438e:	7034      	strb	r4, [r6, #0]
    4390:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4394:	7072      	strb	r2, [r6, #1]
    4396:	f3c4 4207 	ubfx	r2, r4, #16, #8
    439a:	70b2      	strb	r2, [r6, #2]
    439c:	0e24      	lsrs	r4, r4, #24
    439e:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    43a0:	7130      	strb	r0, [r6, #4]
    43a2:	f3c0 2207 	ubfx	r2, r0, #8, #8
    43a6:	7172      	strb	r2, [r6, #5]
    43a8:	f3c0 4207 	ubfx	r2, r0, #16, #8
    43ac:	71b2      	strb	r2, [r6, #6]
    43ae:	0e00      	lsrs	r0, r0, #24
    43b0:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    43b2:	7235      	strb	r5, [r6, #8]
    43b4:	f3c5 2207 	ubfx	r2, r5, #8, #8
    43b8:	7272      	strb	r2, [r6, #9]
    43ba:	f3c5 4207 	ubfx	r2, r5, #16, #8
    43be:	72b2      	strb	r2, [r6, #10]
    43c0:	0e2d      	lsrs	r5, r5, #24
    43c2:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    43c4:	7333      	strb	r3, [r6, #12]
    43c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    43ca:	7372      	strb	r2, [r6, #13]
    43cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    43d0:	73b2      	strb	r2, [r6, #14]
    43d2:	0e1b      	lsrs	r3, r3, #24
    43d4:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    43d6:	2000      	movs	r0, #0
    43d8:	b003      	add	sp, #12
    43da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43de:	bf00      	nop
    43e0:	0002fda8 	.word	0x0002fda8
    43e4:	000301a8 	.word	0x000301a8
    43e8:	000305a8 	.word	0x000305a8
    43ec:	000309a8 	.word	0x000309a8
    43f0:	0002fca8 	.word	0x0002fca8

000043f4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    43f4:	b510      	push	{r4, lr}
    43f6:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    43f8:	2901      	cmp	r1, #1
    43fa:	d004      	beq.n	4406 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    43fc:	461a      	mov	r2, r3
    43fe:	4621      	mov	r1, r4
    4400:	f7ff fe12 	bl	4028 <mbedtls_internal_aes_decrypt>
}
    4404:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    4406:	461a      	mov	r2, r3
    4408:	4621      	mov	r1, r4
    440a:	f7ff fc27 	bl	3c5c <mbedtls_internal_aes_encrypt>
    440e:	bd10      	pop	{r4, pc}

00004410 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    4410:	b530      	push	{r4, r5, lr}
    4412:	b085      	sub	sp, #20
    4414:	4604      	mov	r4, r0
    4416:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    4418:	2203      	movs	r2, #3
    441a:	4668      	mov	r0, sp
    441c:	f7fb ff50 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    4420:	220d      	movs	r2, #13
    4422:	2100      	movs	r1, #0
    4424:	f10d 0003 	add.w	r0, sp, #3
    4428:	f025 fed2 	bl	2a1d0 <memset>

	err = bt_encrypt_le(irk, res, res);
    442c:	466a      	mov	r2, sp
    442e:	4669      	mov	r1, sp
    4430:	4620      	mov	r0, r4
    4432:	f00d f8a1 	bl	11578 <bt_encrypt_le>
	if (err) {
    4436:	4604      	mov	r4, r0
    4438:	b110      	cbz	r0, 4440 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    443a:	4620      	mov	r0, r4
    443c:	b005      	add	sp, #20
    443e:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    4440:	2203      	movs	r2, #3
    4442:	4669      	mov	r1, sp
    4444:	4628      	mov	r0, r5
    4446:	f7fb ff3b 	bl	2c0 <memcpy>
	return 0;
    444a:	e7f6      	b.n	443a <ah+0x2a>

0000444c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    444c:	b510      	push	{r4, lr}
    444e:	b082      	sub	sp, #8
    4450:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    4452:	aa01      	add	r2, sp, #4
    4454:	3103      	adds	r1, #3
    4456:	f7ff ffdb 	bl	4410 <ah>
	if (err) {
    445a:	b110      	cbz	r0, 4462 <bt_rpa_irk_matches+0x16>
		return false;
    445c:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    445e:	b002      	add	sp, #8
    4460:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    4462:	2203      	movs	r2, #3
    4464:	a901      	add	r1, sp, #4
    4466:	4620      	mov	r0, r4
    4468:	f025 fe1e 	bl	2a0a8 <memcmp>
    446c:	fab0 f080 	clz	r0, r0
    4470:	0940      	lsrs	r0, r0, #5
    4472:	e7f4      	b.n	445e <bt_rpa_irk_matches+0x12>

00004474 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    4474:	b570      	push	{r4, r5, r6, lr}
    4476:	4606      	mov	r6, r0
    4478:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    447a:	1ccd      	adds	r5, r1, #3
    447c:	2103      	movs	r1, #3
    447e:	4628      	mov	r0, r5
    4480:	f00d f85e 	bl	11540 <bt_rand>
	if (err) {
    4484:	4603      	mov	r3, r0
    4486:	b108      	cbz	r0, 448c <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    4488:	4618      	mov	r0, r3
    448a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    448c:	f994 3005 	ldrsb.w	r3, [r4, #5]
    4490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4498:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    449a:	4622      	mov	r2, r4
    449c:	4629      	mov	r1, r5
    449e:	4630      	mov	r0, r6
    44a0:	f7ff ffb6 	bl	4410 <ah>
    44a4:	4603      	mov	r3, r0
    44a6:	e7ef      	b.n	4488 <bt_rpa_create+0x14>

000044a8 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    44a8:	b570      	push	{r4, r5, r6, lr}
    44aa:	4605      	mov	r5, r0
    44ac:	460c      	mov	r4, r1
	switch (src->type) {
    44ae:	7803      	ldrb	r3, [r0, #0]
    44b0:	2b01      	cmp	r3, #1
    44b2:	d010      	beq.n	44d6 <uuid_to_uuid128+0x2e>
    44b4:	b113      	cbz	r3, 44bc <uuid_to_uuid128+0x14>
    44b6:	2b02      	cmp	r3, #2
    44b8:	d01f      	beq.n	44fa <uuid_to_uuid128+0x52>
    44ba:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    44bc:	4e12      	ldr	r6, [pc, #72]	; (4508 <uuid_to_uuid128+0x60>)
    44be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    44c0:	6020      	str	r0, [r4, #0]
    44c2:	6061      	str	r1, [r4, #4]
    44c4:	60a2      	str	r2, [r4, #8]
    44c6:	60e3      	str	r3, [r4, #12]
    44c8:	7833      	ldrb	r3, [r6, #0]
    44ca:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    44cc:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    44ce:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    44d0:	0a1b      	lsrs	r3, r3, #8
    44d2:	73a3      	strb	r3, [r4, #14]
    44d4:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    44d6:	4e0c      	ldr	r6, [pc, #48]	; (4508 <uuid_to_uuid128+0x60>)
    44d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    44da:	6020      	str	r0, [r4, #0]
    44dc:	6061      	str	r1, [r4, #4]
    44de:	60a2      	str	r2, [r4, #8]
    44e0:	60e3      	str	r3, [r4, #12]
    44e2:	7833      	ldrb	r3, [r6, #0]
    44e4:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    44e6:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    44e8:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    44ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
    44ee:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    44f0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    44f2:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    44f4:	0a1b      	lsrs	r3, r3, #8
    44f6:	7423      	strb	r3, [r4, #16]
    44f8:	bd70      	pop	{r4, r5, r6, pc}
    44fa:	4608      	mov	r0, r1
    44fc:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    44fe:	2211      	movs	r2, #17
    4500:	f7fb fede 	bl	2c0 <memcpy>
    4504:	bd70      	pop	{r4, r5, r6, pc}
    4506:	bf00      	nop
    4508:	00030da8 	.word	0x00030da8

0000450c <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    450c:	b510      	push	{r4, lr}
    450e:	b08a      	sub	sp, #40	; 0x28
    4510:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    4512:	a905      	add	r1, sp, #20
    4514:	f7ff ffc8 	bl	44a8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    4518:	4669      	mov	r1, sp
    451a:	4620      	mov	r0, r4
    451c:	f7ff ffc4 	bl	44a8 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    4520:	2210      	movs	r2, #16
    4522:	f10d 0101 	add.w	r1, sp, #1
    4526:	f10d 0015 	add.w	r0, sp, #21
    452a:	f025 fdbd 	bl	2a0a8 <memcmp>
}
    452e:	b00a      	add	sp, #40	; 0x28
    4530:	bd10      	pop	{r4, pc}

00004532 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4532:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    4534:	7803      	ldrb	r3, [r0, #0]
    4536:	780a      	ldrb	r2, [r1, #0]
    4538:	4293      	cmp	r3, r2
    453a:	d107      	bne.n	454c <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    453c:	2b01      	cmp	r3, #1
    453e:	d00c      	beq.n	455a <bt_uuid_cmp+0x28>
    4540:	b13b      	cbz	r3, 4552 <bt_uuid_cmp+0x20>
    4542:	2b02      	cmp	r3, #2
    4544:	d00d      	beq.n	4562 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    4546:	f06f 0015 	mvn.w	r0, #21
}
    454a:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    454c:	f7ff ffde 	bl	450c <uuid128_cmp>
    4550:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    4552:	8840      	ldrh	r0, [r0, #2]
    4554:	884b      	ldrh	r3, [r1, #2]
    4556:	1ac0      	subs	r0, r0, r3
    4558:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    455a:	6840      	ldr	r0, [r0, #4]
    455c:	684b      	ldr	r3, [r1, #4]
    455e:	1ac0      	subs	r0, r0, r3
    4560:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    4562:	2210      	movs	r2, #16
    4564:	3101      	adds	r1, #1
    4566:	3001      	adds	r0, #1
    4568:	f025 fd9e 	bl	2a0a8 <memcmp>
    456c:	bd08      	pop	{r3, pc}
	...

00004570 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    4570:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4572:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    4574:	4b06      	ldr	r3, [pc, #24]	; (4590 <le_dhkey_complete+0x20>)
    4576:	681b      	ldr	r3, [r3, #0]
    4578:	b133      	cbz	r3, 4588 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    457a:	7802      	ldrb	r2, [r0, #0]
    457c:	b92a      	cbnz	r2, 458a <le_dhkey_complete+0x1a>
    457e:	3001      	adds	r0, #1
    4580:	4798      	blx	r3
		dh_key_cb = NULL;
    4582:	2200      	movs	r2, #0
    4584:	4b02      	ldr	r3, [pc, #8]	; (4590 <le_dhkey_complete+0x20>)
    4586:	601a      	str	r2, [r3, #0]
    4588:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    458a:	2000      	movs	r0, #0
    458c:	e7f8      	b.n	4580 <le_dhkey_complete+0x10>
    458e:	bf00      	nop
    4590:	200002dc 	.word	0x200002dc

00004594 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4594:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    4596:	7851      	ldrb	r1, [r2, #1]
    4598:	4b06      	ldr	r3, [pc, #24]	; (45b4 <read_local_ver_complete+0x20>)
    459a:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    459c:	8851      	ldrh	r1, [r2, #2]
    459e:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    45a0:	7911      	ldrb	r1, [r2, #4]
    45a2:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    45a4:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    45a8:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    45aa:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    45ae:	829a      	strh	r2, [r3, #20]
    45b0:	4770      	bx	lr
    45b2:	bf00      	nop
    45b4:	2000b878 	.word	0x2000b878

000045b8 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    45b8:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    45ba:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    45bc:	7a1a      	ldrb	r2, [r3, #8]
    45be:	79dc      	ldrb	r4, [r3, #7]
    45c0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    45c4:	7999      	ldrb	r1, [r3, #6]
    45c6:	795a      	ldrb	r2, [r3, #5]
    45c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    45cc:	2000      	movs	r0, #0
    45ce:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    45d2:	791c      	ldrb	r4, [r3, #4]
    45d4:	78da      	ldrb	r2, [r3, #3]
    45d6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    45da:	789c      	ldrb	r4, [r3, #2]
    45dc:	785b      	ldrb	r3, [r3, #1]
    45de:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    45e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    45e6:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    45e8:	4b02      	ldr	r3, [pc, #8]	; (45f4 <le_read_supp_states_complete+0x3c>)
    45ea:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    45ee:	bc10      	pop	{r4}
    45f0:	4770      	bx	lr
    45f2:	bf00      	nop
    45f4:	2000b878 	.word	0x2000b878

000045f8 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    45f8:	7803      	ldrb	r3, [r0, #0]
    45fa:	f013 0f01 	tst.w	r3, #1
    45fe:	d106      	bne.n	460e <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4600:	4b0c      	ldr	r3, [pc, #48]	; (4634 <valid_adv_param+0x3c>)
    4602:	7b9b      	ldrb	r3, [r3, #14]
    4604:	2b08      	cmp	r3, #8
    4606:	d802      	bhi.n	460e <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    4608:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    460a:	2b9f      	cmp	r3, #159	; 0x9f
    460c:	d90c      	bls.n	4628 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    460e:	8843      	ldrh	r3, [r0, #2]
    4610:	8882      	ldrh	r2, [r0, #4]
    4612:	4293      	cmp	r3, r2
    4614:	d80a      	bhi.n	462c <valid_adv_param+0x34>
    4616:	2b1f      	cmp	r3, #31
    4618:	d90a      	bls.n	4630 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    461a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    461e:	d801      	bhi.n	4624 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    4620:	2001      	movs	r0, #1
}
    4622:	4770      	bx	lr
		return false;
    4624:	2000      	movs	r0, #0
    4626:	4770      	bx	lr
			return false;
    4628:	2000      	movs	r0, #0
    462a:	4770      	bx	lr
		return false;
    462c:	2000      	movs	r0, #0
    462e:	4770      	bx	lr
    4630:	2000      	movs	r0, #0
    4632:	4770      	bx	lr
    4634:	2000b878 	.word	0x2000b878

00004638 <hci_reset_complete>:
	u8_t status = buf->data[0];
    4638:	6883      	ldr	r3, [r0, #8]
    463a:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    463c:	b103      	cbz	r3, 4640 <hci_reset_complete+0x8>
    463e:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    4640:	2200      	movs	r2, #0
    4642:	4b07      	ldr	r3, [pc, #28]	; (4660 <hci_reset_complete+0x28>)
    4644:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4646:	4b07      	ldr	r3, [pc, #28]	; (4664 <hci_reset_complete+0x2c>)
    4648:	2201      	movs	r2, #1
    464a:	f3bf 8f5b 	dmb	ish
    464e:	e853 1f00 	ldrex	r1, [r3]
    4652:	e843 2000 	strex	r0, r2, [r3]
    4656:	2800      	cmp	r0, #0
    4658:	d1f9      	bne.n	464e <hci_reset_complete+0x16>
    465a:	f3bf 8f5b 	dmb	ish
    465e:	e7ee      	b.n	463e <hci_reset_complete+0x6>
    4660:	20000328 	.word	0x20000328
    4664:	2000b8e8 	.word	0x2000b8e8

00004668 <read_local_features_complete>:
{
    4668:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    466a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    466c:	2208      	movs	r2, #8
    466e:	3101      	adds	r1, #1
    4670:	4801      	ldr	r0, [pc, #4]	; (4678 <read_local_features_complete+0x10>)
    4672:	f7fb fe25 	bl	2c0 <memcpy>
    4676:	bd08      	pop	{r3, pc}
    4678:	2000b88e 	.word	0x2000b88e

0000467c <read_bdaddr_complete>:
{
    467c:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    467e:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4680:	4c04      	ldr	r4, [pc, #16]	; (4694 <read_bdaddr_complete+0x18>)
    4682:	2206      	movs	r2, #6
    4684:	3101      	adds	r1, #1
    4686:	1c60      	adds	r0, r4, #1
    4688:	f7fb fe1a 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    468c:	2300      	movs	r3, #0
    468e:	7023      	strb	r3, [r4, #0]
    4690:	bd10      	pop	{r4, pc}
    4692:	bf00      	nop
    4694:	2000b878 	.word	0x2000b878

00004698 <read_supported_commands_complete>:
{
    4698:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    469a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    469c:	2240      	movs	r2, #64	; 0x40
    469e:	3101      	adds	r1, #1
    46a0:	4801      	ldr	r0, [pc, #4]	; (46a8 <read_supported_commands_complete+0x10>)
    46a2:	f7fb fe0d 	bl	2c0 <memcpy>
    46a6:	bd08      	pop	{r3, pc}
    46a8:	2000b896 	.word	0x2000b896

000046ac <read_le_features_complete>:
{
    46ac:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    46ae:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    46b0:	2208      	movs	r2, #8
    46b2:	3101      	adds	r1, #1
    46b4:	4801      	ldr	r0, [pc, #4]	; (46bc <read_le_features_complete+0x10>)
    46b6:	f7fb fe03 	bl	2c0 <memcpy>
    46ba:	bd08      	pop	{r3, pc}
    46bc:	2000b8f0 	.word	0x2000b8f0

000046c0 <le_read_buffer_size_complete>:
{
    46c0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    46c2:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    46c4:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    46c8:	b299      	uxth	r1, r3
    46ca:	4807      	ldr	r0, [pc, #28]	; (46e8 <le_read_buffer_size_complete+0x28>)
    46cc:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    46d0:	b901      	cbnz	r1, 46d4 <le_read_buffer_size_complete+0x14>
    46d2:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    46d4:	78d1      	ldrb	r1, [r2, #3]
    46d6:	2902      	cmp	r1, #2
    46d8:	bf28      	it	cs
    46da:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    46dc:	460a      	mov	r2, r1
    46de:	308c      	adds	r0, #140	; 0x8c
    46e0:	f024 fd9a 	bl	29218 <_impl_k_sem_init>
    46e4:	e7f5      	b.n	46d2 <le_read_buffer_size_complete+0x12>
    46e6:	bf00      	nop
    46e8:	2000b878 	.word	0x2000b878

000046ec <read_buffer_size_complete>:
{
    46ec:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    46ee:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    46f0:	4b09      	ldr	r3, [pc, #36]	; (4718 <read_buffer_size_complete+0x2c>)
    46f2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    46f6:	b103      	cbz	r3, 46fa <read_buffer_size_complete+0xe>
    46f8:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    46fa:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    46fe:	4806      	ldr	r0, [pc, #24]	; (4718 <read_buffer_size_complete+0x2c>)
    4700:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    4704:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    4706:	2902      	cmp	r1, #2
    4708:	bf28      	it	cs
    470a:	2102      	movcs	r1, #2
    470c:	460a      	mov	r2, r1
    470e:	308c      	adds	r0, #140	; 0x8c
    4710:	f024 fd82 	bl	29218 <_impl_k_sem_init>
    4714:	e7f0      	b.n	46f8 <read_buffer_size_complete+0xc>
    4716:	bf00      	nop
    4718:	2000b878 	.word	0x2000b878

0000471c <le_pkey_complete>:
{
    471c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    471e:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4720:	4b17      	ldr	r3, [pc, #92]	; (4780 <le_pkey_complete+0x64>)
    4722:	f3bf 8f5b 	dmb	ish
    4726:	e853 2f00 	ldrex	r2, [r3]
    472a:	f022 0210 	bic.w	r2, r2, #16
    472e:	e843 2100 	strex	r1, r2, [r3]
    4732:	2900      	cmp	r1, #0
    4734:	d1f7      	bne.n	4726 <le_pkey_complete+0xa>
    4736:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    473a:	782b      	ldrb	r3, [r5, #0]
    473c:	b113      	cbz	r3, 4744 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    473e:	4b11      	ldr	r3, [pc, #68]	; (4784 <le_pkey_complete+0x68>)
    4740:	681c      	ldr	r4, [r3, #0]
    4742:	e015      	b.n	4770 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    4744:	2240      	movs	r2, #64	; 0x40
    4746:	1c69      	adds	r1, r5, #1
    4748:	480f      	ldr	r0, [pc, #60]	; (4788 <le_pkey_complete+0x6c>)
    474a:	f7fb fdb9 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    474e:	4b0c      	ldr	r3, [pc, #48]	; (4780 <le_pkey_complete+0x64>)
    4750:	f3bf 8f5b 	dmb	ish
    4754:	e853 2f00 	ldrex	r2, [r3]
    4758:	f042 0208 	orr.w	r2, r2, #8
    475c:	e843 2100 	strex	r1, r2, [r3]
    4760:	2900      	cmp	r1, #0
    4762:	d1f7      	bne.n	4754 <le_pkey_complete+0x38>
    4764:	f3bf 8f5b 	dmb	ish
    4768:	e7e9      	b.n	473e <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    476a:	2000      	movs	r0, #0
    476c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    476e:	6864      	ldr	r4, [r4, #4]
    4770:	b12c      	cbz	r4, 477e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    4772:	6823      	ldr	r3, [r4, #0]
    4774:	782a      	ldrb	r2, [r5, #0]
    4776:	2a00      	cmp	r2, #0
    4778:	d1f7      	bne.n	476a <le_pkey_complete+0x4e>
    477a:	1c68      	adds	r0, r5, #1
    477c:	e7f6      	b.n	476c <le_pkey_complete+0x50>
}
    477e:	bd38      	pop	{r3, r4, r5, pc}
    4780:	2000b8e8 	.word	0x2000b8e8
    4784:	20000320 	.word	0x20000320
    4788:	200002e0 	.word	0x200002e0

0000478c <hci_acl>:
{
    478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    478e:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4790:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    4792:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4794:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    4796:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4798:	f100 0510 	add.w	r5, r0, #16
    479c:	89c3      	ldrh	r3, [r0, #14]
    479e:	442b      	add	r3, r5
    47a0:	3303      	adds	r3, #3
    47a2:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    47a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    47aa:	805a      	strh	r2, [r3, #2]
    47ac:	89c3      	ldrh	r3, [r0, #14]
    47ae:	442b      	add	r3, r5
    47b0:	3303      	adds	r3, #3
    47b2:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    47b6:	22ff      	movs	r2, #255	; 0xff
    47b8:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    47ba:	2104      	movs	r1, #4
    47bc:	3008      	adds	r0, #8
    47be:	f016 fa82 	bl	1acc6 <net_buf_simple_pull>
	if (buf->len != len) {
    47c2:	89a3      	ldrh	r3, [r4, #12]
    47c4:	429e      	cmp	r6, r3
    47c6:	d003      	beq.n	47d0 <hci_acl+0x44>
		net_buf_unref(buf);
    47c8:	4620      	mov	r0, r4
    47ca:	f016 f9e3 	bl	1ab94 <net_buf_unref>
		return;
    47ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d0:	89e3      	ldrh	r3, [r4, #14]
    47d2:	442b      	add	r3, r5
    47d4:	3303      	adds	r3, #3
    47d6:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    47da:	8858      	ldrh	r0, [r3, #2]
    47dc:	f002 fc7e 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    47e0:	4606      	mov	r6, r0
    47e2:	b180      	cbz	r0, 4806 <hci_acl+0x7a>
    47e4:	89e3      	ldrh	r3, [r4, #14]
    47e6:	441d      	add	r5, r3
    47e8:	3503      	adds	r5, #3
    47ea:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    47ee:	f003 f83b 	bl	7868 <bt_conn_get_id>
    47f2:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    47f4:	463a      	mov	r2, r7
    47f6:	4621      	mov	r1, r4
    47f8:	4630      	mov	r0, r6
    47fa:	f002 fb23 	bl	6e44 <bt_conn_recv>
	bt_conn_unref(conn);
    47fe:	4630      	mov	r0, r6
    4800:	f002 fcf0 	bl	71e4 <bt_conn_unref>
    4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    4806:	4620      	mov	r0, r4
    4808:	f016 f9c4 	bl	1ab94 <net_buf_unref>
		return;
    480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000480e <update_sec_level>:
{
    480e:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    4810:	7a83      	ldrb	r3, [r0, #10]
    4812:	b18b      	cbz	r3, 4838 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    4814:	6f03      	ldr	r3, [r0, #112]	; 0x70
    4816:	b1ab      	cbz	r3, 4844 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4818:	f3bf 8f5b 	dmb	ish
    481c:	689b      	ldr	r3, [r3, #8]
    481e:	f3bf 8f5b 	dmb	ish
    4822:	f013 0f01 	tst.w	r3, #1
    4826:	d00d      	beq.n	4844 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    4828:	6f03      	ldr	r3, [r0, #112]	; 0x70
    482a:	899b      	ldrh	r3, [r3, #12]
    482c:	f013 0f20 	tst.w	r3, #32
    4830:	d005      	beq.n	483e <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    4832:	2304      	movs	r3, #4
    4834:	7203      	strb	r3, [r0, #8]
    4836:	e007      	b.n	4848 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    4838:	2301      	movs	r3, #1
    483a:	7203      	strb	r3, [r0, #8]
		return;
    483c:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    483e:	2303      	movs	r3, #3
    4840:	7203      	strb	r3, [r0, #8]
    4842:	e001      	b.n	4848 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    4844:	2302      	movs	r3, #2
    4846:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    4848:	7a42      	ldrb	r2, [r0, #9]
    484a:	7a03      	ldrb	r3, [r0, #8]
    484c:	429a      	cmp	r2, r3
    484e:	d800      	bhi.n	4852 <update_sec_level+0x44>
    4850:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    4852:	2105      	movs	r1, #5
    4854:	f002 fe8a 	bl	756c <bt_conn_disconnect>
    4858:	e7fa      	b.n	4850 <update_sec_level+0x42>

0000485a <hci_encrypt_change>:
{
    485a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    485c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    485e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4862:	f002 fc3b 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    4866:	b1e0      	cbz	r0, 48a2 <hci_encrypt_change+0x48>
    4868:	4604      	mov	r4, r0
	if (evt->status) {
    486a:	782b      	ldrb	r3, [r5, #0]
    486c:	b13b      	cbz	r3, 487e <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    486e:	7883      	ldrb	r3, [r0, #2]
    4870:	b90b      	cbnz	r3, 4876 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    4872:	7a03      	ldrb	r3, [r0, #8]
    4874:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    4876:	4620      	mov	r0, r4
    4878:	f002 fcb4 	bl	71e4 <bt_conn_unref>
		return;
    487c:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    487e:	78eb      	ldrb	r3, [r5, #3]
    4880:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4882:	7882      	ldrb	r2, [r0, #2]
    4884:	b91a      	cbnz	r2, 488e <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    4886:	b96b      	cbnz	r3, 48a4 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    4888:	4620      	mov	r0, r4
    488a:	f7ff ffc0 	bl	480e <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    488e:	7829      	ldrb	r1, [r5, #0]
    4890:	4620      	mov	r0, r4
    4892:	f003 fbcb 	bl	802c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4896:	4620      	mov	r0, r4
    4898:	f002 fa9e 	bl	6dd8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    489c:	4620      	mov	r0, r4
    489e:	f002 fca1 	bl	71e4 <bt_conn_unref>
    48a2:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    48a4:	f008 fafe 	bl	cea4 <bt_smp_update_keys>
    48a8:	e7ee      	b.n	4888 <hci_encrypt_change+0x2e>

000048aa <hci_encrypt_key_refresh_complete>:
{
    48aa:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    48ac:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    48ae:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    48b2:	f002 fc13 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    48b6:	b170      	cbz	r0, 48d6 <hci_encrypt_key_refresh_complete+0x2c>
    48b8:	4604      	mov	r4, r0
	if (evt->status) {
    48ba:	7829      	ldrb	r1, [r5, #0]
    48bc:	b961      	cbnz	r1, 48d8 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    48be:	7883      	ldrb	r3, [r0, #2]
    48c0:	b16b      	cbz	r3, 48de <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    48c2:	7829      	ldrb	r1, [r5, #0]
    48c4:	4620      	mov	r0, r4
    48c6:	f003 fbb1 	bl	802c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    48ca:	4620      	mov	r0, r4
    48cc:	f002 fa84 	bl	6dd8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    48d0:	4620      	mov	r0, r4
    48d2:	f002 fc87 	bl	71e4 <bt_conn_unref>
    48d6:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    48d8:	f003 fba8 	bl	802c <bt_l2cap_encrypt_change>
		return;
    48dc:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    48de:	f008 fae1 	bl	cea4 <bt_smp_update_keys>
		update_sec_level(conn);
    48e2:	4620      	mov	r0, r4
    48e4:	f7ff ff93 	bl	480e <update_sec_level>
    48e8:	e7eb      	b.n	48c2 <hci_encrypt_key_refresh_complete+0x18>

000048ea <find_id_addr>:
{
    48ea:	b510      	push	{r4, lr}
    48ec:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    48ee:	f008 fbe3 	bl	d0b8 <bt_keys_find_irk>
		if (keys) {
    48f2:	b100      	cbz	r0, 48f6 <find_id_addr+0xc>
			return &keys->addr;
    48f4:	bd10      	pop	{r4, pc}
	return addr;
    48f6:	4620      	mov	r0, r4
}
    48f8:	bd10      	pop	{r4, pc}
	...

000048fc <update_conn_param>:
{
    48fc:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    48fe:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    4902:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    4904:	b12b      	cbz	r3, 4912 <update_conn_param+0x16>
    4906:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    490a:	4803      	ldr	r0, [pc, #12]	; (4918 <update_conn_param+0x1c>)
    490c:	f025 fad6 	bl	29ebc <k_delayed_work_submit_to_queue>
    4910:	bd08      	pop	{r3, pc}
    4912:	2200      	movs	r2, #0
    4914:	e7f9      	b.n	490a <update_conn_param+0xe>
    4916:	bf00      	nop
    4918:	20002b78 	.word	0x20002b78

0000491c <le_data_len_change>:
{
    491c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    491e:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4920:	8818      	ldrh	r0, [r3, #0]
    4922:	f002 fbdb 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    4926:	b198      	cbz	r0, 4950 <le_data_len_change+0x34>
    4928:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    492a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    492c:	f3bf 8f5b 	dmb	ish
    4930:	e853 2f00 	ldrex	r2, [r3]
    4934:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    4938:	e843 1000 	strex	r0, r1, [r3]
    493c:	2800      	cmp	r0, #0
    493e:	d1f7      	bne.n	4930 <le_data_len_change+0x14>
    4940:	f3bf 8f5b 	dmb	ish
    4944:	f412 7f80 	tst.w	r2, #256	; 0x100
    4948:	d103      	bne.n	4952 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    494a:	4620      	mov	r0, r4
    494c:	f002 fc4a 	bl	71e4 <bt_conn_unref>
    4950:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    4952:	4620      	mov	r0, r4
    4954:	f7ff ffd2 	bl	48fc <update_conn_param>
    4958:	e7f7      	b.n	494a <le_data_len_change+0x2e>
	...

0000495c <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    495c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    495e:	4b12      	ldr	r3, [pc, #72]	; (49a8 <le_data_len_change+0x4c>)
    4960:	e9d3 4500 	ldrd	r4, r5, [r3]
    4964:	2400      	movs	r4, #0
    4966:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    496a:	ea54 0305 	orrs.w	r3, r4, r5
    496e:	d008      	beq.n	4982 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4970:	4b0e      	ldr	r3, [pc, #56]	; (49ac <le_data_len_change+0x50>)
    4972:	e9d3 4500 	ldrd	r4, r5, [r3]
    4976:	f004 0440 	and.w	r4, r4, #64	; 0x40
    497a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    497c:	ea54 0305 	orrs.w	r3, r4, r5
    4980:	d100      	bne.n	4984 <le_data_len_change+0x28>
    4982:	bd38      	pop	{r3, r4, r5, pc}
    4984:	4613      	mov	r3, r2
    4986:	460d      	mov	r5, r1
    4988:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    498a:	220a      	movs	r2, #10
    498c:	2107      	movs	r1, #7
    498e:	4618      	mov	r0, r3
    4990:	f008 fcf0 	bl	d374 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    4994:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    4996:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4998:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    499a:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    499c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    499e:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    49a0:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    49a2:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    49a4:	8103      	strh	r3, [r0, #8]
    49a6:	e7ec      	b.n	4982 <le_data_len_change+0x26>
    49a8:	2000bb68 	.word	0x2000bb68
    49ac:	2000bb70 	.word	0x2000bb70

000049b0 <le_conn_update_complete>:
{
    49b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    49b2:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    49b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    49b8:	f002 fb90 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    49bc:	b128      	cbz	r0, 49ca <le_conn_update_complete+0x1a>
    49be:	4605      	mov	r5, r0
	if (!evt->status) {
    49c0:	7823      	ldrb	r3, [r4, #0]
    49c2:	b11b      	cbz	r3, 49cc <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    49c4:	4628      	mov	r0, r5
    49c6:	f002 fc0d 	bl	71e4 <bt_conn_unref>
    49ca:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    49cc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    49d0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    49d4:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    49d8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    49dc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    49e0:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    49e4:	f002 f912 	bl	6c0c <notify_le_param_updated>
    49e8:	e7ec      	b.n	49c4 <le_conn_update_complete+0x14>
	...

000049ec <le_conn_update_complete>:
{
    49ec:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    49ee:	4b14      	ldr	r3, [pc, #80]	; (4a40 <le_conn_update_complete+0x54>)
    49f0:	e9d3 4500 	ldrd	r4, r5, [r3]
    49f4:	2400      	movs	r4, #0
    49f6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    49fa:	ea54 0305 	orrs.w	r3, r4, r5
    49fe:	d008      	beq.n	4a12 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    4a00:	4b10      	ldr	r3, [pc, #64]	; (4a44 <le_conn_update_complete+0x58>)
    4a02:	e9d3 4500 	ldrd	r4, r5, [r3]
    4a06:	f004 0404 	and.w	r4, r4, #4
    4a0a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4a0c:	ea54 0305 	orrs.w	r3, r4, r5
    4a10:	d100      	bne.n	4a14 <le_conn_update_complete+0x28>
    4a12:	bd38      	pop	{r3, r4, r5, pc}
    4a14:	4613      	mov	r3, r2
    4a16:	460d      	mov	r5, r1
    4a18:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    4a1a:	2209      	movs	r2, #9
    4a1c:	2103      	movs	r1, #3
    4a1e:	4618      	mov	r0, r3
    4a20:	f008 fca8 	bl	d374 <meta_evt>
	sep->status = radio_cu->status;
    4a24:	78e3      	ldrb	r3, [r4, #3]
    4a26:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4a28:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    4a2c:	88a3      	ldrh	r3, [r4, #4]
    4a2e:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    4a32:	88e3      	ldrh	r3, [r4, #6]
    4a34:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    4a38:	8923      	ldrh	r3, [r4, #8]
    4a3a:	f8a0 3007 	strh.w	r3, [r0, #7]
    4a3e:	e7e8      	b.n	4a12 <le_conn_update_complete+0x26>
    4a40:	2000bb68 	.word	0x2000bb68
    4a44:	2000bb70 	.word	0x2000bb70

00004a48 <hci_cmd_done>:
{
    4a48:	b538      	push	{r3, r4, r5, lr}
    4a4a:	460d      	mov	r5, r1
    4a4c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4a4e:	7990      	ldrb	r0, [r2, #6]
    4a50:	f016 f826 	bl	1aaa0 <net_buf_pool_get>
    4a54:	4b0b      	ldr	r3, [pc, #44]	; (4a84 <hci_cmd_done+0x3c>)
    4a56:	4283      	cmp	r3, r0
    4a58:	d000      	beq.n	4a5c <hci_cmd_done+0x14>
    4a5a:	bd38      	pop	{r3, r4, r5, pc}
    4a5c:	f104 0210 	add.w	r2, r4, #16
    4a60:	89e3      	ldrh	r3, [r4, #14]
    4a62:	4413      	add	r3, r2
    4a64:	3303      	adds	r3, #3
    4a66:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4a6a:	6859      	ldr	r1, [r3, #4]
    4a6c:	2900      	cmp	r1, #0
    4a6e:	d0f4      	beq.n	4a5a <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4a70:	705d      	strb	r5, [r3, #1]
    4a72:	89e3      	ldrh	r3, [r4, #14]
    4a74:	441a      	add	r2, r3
    4a76:	3203      	adds	r2, #3
    4a78:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4a7c:	6850      	ldr	r0, [r2, #4]
    4a7e:	f024 fbd4 	bl	2922a <_impl_k_sem_give>
    4a82:	e7ea      	b.n	4a5a <hci_cmd_done+0x12>
    4a84:	2000d11c 	.word	0x2000d11c

00004a88 <hci_cmd_complete>:
{
    4a88:	b570      	push	{r4, r5, r6, lr}
    4a8a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4a8c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4a90:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4a94:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4a96:	2103      	movs	r1, #3
    4a98:	f016 f915 	bl	1acc6 <net_buf_simple_pull>
	status = buf->data[0];
    4a9c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4a9e:	4622      	mov	r2, r4
    4aa0:	7819      	ldrb	r1, [r3, #0]
    4aa2:	4630      	mov	r0, r6
    4aa4:	f7ff ffd0 	bl	4a48 <hci_cmd_done>
	if (ncmd) {
    4aa8:	b905      	cbnz	r5, 4aac <hci_cmd_complete+0x24>
    4aaa:	bd70      	pop	{r4, r5, r6, pc}
    4aac:	4801      	ldr	r0, [pc, #4]	; (4ab4 <hci_cmd_complete+0x2c>)
    4aae:	f024 fbbc 	bl	2922a <_impl_k_sem_give>
}
    4ab2:	e7fa      	b.n	4aaa <hci_cmd_complete+0x22>
    4ab4:	2000b920 	.word	0x2000b920

00004ab8 <hci_cmd_status>:
{
    4ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aba:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4abc:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4ac0:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4ac2:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4ac4:	2104      	movs	r1, #4
    4ac6:	f016 f8fe 	bl	1acc6 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4aca:	462a      	mov	r2, r5
    4acc:	7821      	ldrb	r1, [r4, #0]
    4ace:	4638      	mov	r0, r7
    4ad0:	f7ff ffba 	bl	4a48 <hci_cmd_done>
	if (ncmd) {
    4ad4:	b906      	cbnz	r6, 4ad8 <hci_cmd_status+0x20>
    4ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ad8:	4801      	ldr	r0, [pc, #4]	; (4ae0 <hci_cmd_status+0x28>)
    4ada:	f024 fba6 	bl	2922a <_impl_k_sem_give>
}
    4ade:	e7fa      	b.n	4ad6 <hci_cmd_status+0x1e>
    4ae0:	2000b920 	.word	0x2000b920

00004ae4 <hci_num_completed_packets>:
{
    4ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4ae8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4aec:	2700      	movs	r7, #0
    4aee:	e026      	b.n	4b3e <hci_num_completed_packets+0x5a>
    4af0:	f386 8811 	msr	BASEPRI, r6
			continue;
    4af4:	e022      	b.n	4b3c <hci_num_completed_packets+0x58>
    4af6:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4afa:	b1e1      	cbz	r1, 4b36 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4afc:	f104 001c 	add.w	r0, r4, #28
    4b00:	f023 fffc 	bl	28afc <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4b04:	4620      	mov	r0, r4
    4b06:	f002 f85f 	bl	6bc8 <bt_conn_get_pkts>
    4b0a:	f024 fb8e 	bl	2922a <_impl_k_sem_give>
		while (count--) {
    4b0e:	4635      	mov	r5, r6
    4b10:	1e6b      	subs	r3, r5, #1
    4b12:	b29e      	uxth	r6, r3
    4b14:	b17d      	cbz	r5, 4b36 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4b16:	f04f 0220 	mov.w	r2, #32
    4b1a:	f3ef 8311 	mrs	r3, BASEPRI
    4b1e:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4b22:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4b24:	2900      	cmp	r1, #0
    4b26:	d0e6      	beq.n	4af6 <hci_num_completed_packets+0x12>
	list->head = node->next;
    4b28:	680a      	ldr	r2, [r1, #0]
    4b2a:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4b2c:	69a0      	ldr	r0, [r4, #24]
    4b2e:	4281      	cmp	r1, r0
    4b30:	d1e1      	bne.n	4af6 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    4b32:	61a2      	str	r2, [r4, #24]
    4b34:	e7df      	b.n	4af6 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4b36:	4620      	mov	r0, r4
    4b38:	f002 fb54 	bl	71e4 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4b3c:	3701      	adds	r7, #1
    4b3e:	f898 3000 	ldrb.w	r3, [r8]
    4b42:	429f      	cmp	r7, r3
    4b44:	da13      	bge.n	4b6e <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4b46:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4b4a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4b4e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    4b52:	f04f 0320 	mov.w	r3, #32
    4b56:	f3ef 8611 	mrs	r6, BASEPRI
    4b5a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4b5e:	f002 fabd 	bl	70dc <bt_conn_lookup_handle>
		if (!conn) {
    4b62:	4604      	mov	r4, r0
    4b64:	2800      	cmp	r0, #0
    4b66:	d0c3      	beq.n	4af0 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4b68:	f386 8811 	msr	BASEPRI, r6
    4b6c:	e7d0      	b.n	4b10 <hci_num_completed_packets+0x2c>
}
    4b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004b74 <bt_hci_cmd_create>:
{
    4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b76:	4607      	mov	r7, r0
    4b78:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4b7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b7e:	4812      	ldr	r0, [pc, #72]	; (4bc8 <bt_hci_cmd_create+0x54>)
    4b80:	f015 ff9a 	bl	1aab8 <net_buf_alloc>
    4b84:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4b86:	2100      	movs	r1, #0
    4b88:	f015 fff1 	bl	1ab6e <net_buf_reserve>
    4b8c:	f104 0310 	add.w	r3, r4, #16
    4b90:	89e2      	ldrh	r2, [r4, #14]
    4b92:	441a      	add	r2, r3
    4b94:	3203      	adds	r2, #3
    4b96:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4b9a:	2100      	movs	r1, #0
    4b9c:	7011      	strb	r1, [r2, #0]
    4b9e:	89e2      	ldrh	r2, [r4, #14]
    4ba0:	441a      	add	r2, r3
    4ba2:	3203      	adds	r2, #3
    4ba4:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4ba8:	8057      	strh	r7, [r2, #2]
    4baa:	89e2      	ldrh	r2, [r4, #14]
    4bac:	4413      	add	r3, r2
    4bae:	3303      	adds	r3, #3
    4bb0:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4bb4:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4bb6:	2103      	movs	r1, #3
    4bb8:	f104 0008 	add.w	r0, r4, #8
    4bbc:	f016 f836 	bl	1ac2c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4bc0:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4bc2:	7085      	strb	r5, [r0, #2]
}
    4bc4:	4620      	mov	r0, r4
    4bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bc8:	2000d11c 	.word	0x2000d11c

00004bcc <bt_hci_cmd_send_sync>:
{
    4bcc:	b570      	push	{r4, r5, r6, lr}
    4bce:	b086      	sub	sp, #24
    4bd0:	4616      	mov	r6, r2
	if (!buf) {
    4bd2:	460d      	mov	r5, r1
    4bd4:	b329      	cbz	r1, 4c22 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4bd6:	2201      	movs	r2, #1
    4bd8:	2100      	movs	r1, #0
    4bda:	4668      	mov	r0, sp
    4bdc:	f024 fb1c 	bl	29218 <_impl_k_sem_init>
    4be0:	f105 0410 	add.w	r4, r5, #16
    4be4:	89eb      	ldrh	r3, [r5, #14]
    4be6:	4423      	add	r3, r4
    4be8:	3303      	adds	r3, #3
    4bea:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4bee:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4bf2:	4628      	mov	r0, r5
    4bf4:	f015 ffea 	bl	1abcc <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4bf8:	4629      	mov	r1, r5
    4bfa:	4813      	ldr	r0, [pc, #76]	; (4c48 <bt_hci_cmd_send_sync+0x7c>)
    4bfc:	f015 ffbc 	bl	1ab78 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4c00:	f242 7110 	movw	r1, #10000	; 0x2710
    4c04:	4668      	mov	r0, sp
    4c06:	f024 fb23 	bl	29250 <_impl_k_sem_take>
    4c0a:	89eb      	ldrh	r3, [r5, #14]
    4c0c:	441c      	add	r4, r3
    4c0e:	3403      	adds	r4, #3
    4c10:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4c14:	7863      	ldrb	r3, [r4, #1]
    4c16:	b963      	cbnz	r3, 4c32 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4c18:	b18e      	cbz	r6, 4c3e <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4c1a:	6035      	str	r5, [r6, #0]
		err = 0;
    4c1c:	2000      	movs	r0, #0
}
    4c1e:	b006      	add	sp, #24
    4c20:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4c22:	f7ff ffa7 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    4c26:	4605      	mov	r5, r0
    4c28:	2800      	cmp	r0, #0
    4c2a:	d1d4      	bne.n	4bd6 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4c2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4c30:	e7f5      	b.n	4c1e <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    4c32:	4628      	mov	r0, r5
    4c34:	f015 ffae 	bl	1ab94 <net_buf_unref>
		err = -EIO;
    4c38:	f06f 0004 	mvn.w	r0, #4
    4c3c:	e7ef      	b.n	4c1e <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4c3e:	4628      	mov	r0, r5
    4c40:	f015 ffa8 	bl	1ab94 <net_buf_unref>
		err = 0;
    4c44:	2000      	movs	r0, #0
    4c46:	e7ea      	b.n	4c1e <bt_hci_cmd_send_sync+0x52>
    4c48:	2000b94c 	.word	0x2000b94c

00004c4c <common_init>:
{
    4c4c:	b510      	push	{r4, lr}
    4c4e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4c50:	aa01      	add	r2, sp, #4
    4c52:	2100      	movs	r1, #0
    4c54:	f640 4003 	movw	r0, #3075	; 0xc03
    4c58:	f7ff ffb8 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4c5c:	4604      	mov	r4, r0
    4c5e:	b110      	cbz	r0, 4c66 <common_init+0x1a>
}
    4c60:	4620      	mov	r0, r4
    4c62:	b002      	add	sp, #8
    4c64:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4c66:	9801      	ldr	r0, [sp, #4]
    4c68:	f7ff fce6 	bl	4638 <hci_reset_complete>
	net_buf_unref(rsp);
    4c6c:	ac02      	add	r4, sp, #8
    4c6e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c72:	f015 ff8f 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4c76:	4622      	mov	r2, r4
    4c78:	2100      	movs	r1, #0
    4c7a:	f241 0003 	movw	r0, #4099	; 0x1003
    4c7e:	f7ff ffa5 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4c82:	4604      	mov	r4, r0
    4c84:	2800      	cmp	r0, #0
    4c86:	d1eb      	bne.n	4c60 <common_init+0x14>
	read_local_features_complete(rsp);
    4c88:	9801      	ldr	r0, [sp, #4]
    4c8a:	f7ff fced 	bl	4668 <read_local_features_complete>
	net_buf_unref(rsp);
    4c8e:	ac02      	add	r4, sp, #8
    4c90:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c94:	f015 ff7e 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4c98:	4622      	mov	r2, r4
    4c9a:	2100      	movs	r1, #0
    4c9c:	f241 0001 	movw	r0, #4097	; 0x1001
    4ca0:	f7ff ff94 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4ca4:	4604      	mov	r4, r0
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d1da      	bne.n	4c60 <common_init+0x14>
	read_local_ver_complete(rsp);
    4caa:	9801      	ldr	r0, [sp, #4]
    4cac:	f7ff fc72 	bl	4594 <read_local_ver_complete>
	net_buf_unref(rsp);
    4cb0:	ac02      	add	r4, sp, #8
    4cb2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4cb6:	f015 ff6d 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4cba:	4622      	mov	r2, r4
    4cbc:	2100      	movs	r1, #0
    4cbe:	f241 0009 	movw	r0, #4105	; 0x1009
    4cc2:	f7ff ff83 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4cc6:	4604      	mov	r4, r0
    4cc8:	2800      	cmp	r0, #0
    4cca:	d1c9      	bne.n	4c60 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4ccc:	9801      	ldr	r0, [sp, #4]
    4cce:	f7ff fcd5 	bl	467c <read_bdaddr_complete>
	net_buf_unref(rsp);
    4cd2:	ac02      	add	r4, sp, #8
    4cd4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4cd8:	f015 ff5c 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4cdc:	4622      	mov	r2, r4
    4cde:	2100      	movs	r1, #0
    4ce0:	f241 0002 	movw	r0, #4098	; 0x1002
    4ce4:	f7ff ff72 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4ce8:	4604      	mov	r4, r0
    4cea:	2800      	cmp	r0, #0
    4cec:	d1b8      	bne.n	4c60 <common_init+0x14>
	read_supported_commands_complete(rsp);
    4cee:	9801      	ldr	r0, [sp, #4]
    4cf0:	f7ff fcd2 	bl	4698 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4cf4:	9801      	ldr	r0, [sp, #4]
    4cf6:	f015 ff4d 	bl	1ab94 <net_buf_unref>
	return 0;
    4cfa:	e7b1      	b.n	4c60 <common_init+0x14>

00004cfc <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4cfc:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4cfe:	4b3a      	ldr	r3, [pc, #232]	; (4de8 <common_init+0xec>)
    4d00:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4d04:	2a00      	cmp	r2, #0
    4d06:	d15e      	bne.n	4dc6 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4d08:	2200      	movs	r2, #0
    4d0a:	4b37      	ldr	r3, [pc, #220]	; (4de8 <common_init+0xec>)
    4d0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4d10:	4c35      	ldr	r4, [pc, #212]	; (4de8 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4d12:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4d16:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4d1a:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4d1e:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4d22:	f00a fa47 	bl	f1b4 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4d26:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4d2a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4d2e:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    4d32:	462b      	mov	r3, r5
    4d34:	440a      	add	r2, r1
    4d36:	2108      	movs	r1, #8
    4d38:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4d3c:	f00a fa3a 	bl	f1b4 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4d40:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4d44:	2202      	movs	r2, #2
    4d46:	2124      	movs	r1, #36	; 0x24
    4d48:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4d4c:	f00a fa32 	bl	f1b4 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4d50:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4d54:	3a01      	subs	r2, #1
    4d56:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4d5a:	b292      	uxth	r2, r2
    4d5c:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4d60:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4d64:	f00a fa26 	bl	f1b4 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4d68:	4628      	mov	r0, r5
    4d6a:	f00a fa48 	bl	f1fe <mem_acquire>
	LL_ASSERT(link);
    4d6e:	b3a0      	cbz	r0, 4dda <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4d70:	4c1d      	ldr	r4, [pc, #116]	; (4de8 <common_init+0xec>)
    4d72:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4d76:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4d7a:	f00a faa5 	bl	f2c8 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4d7e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4d82:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4d86:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4d8a:	20ff      	movs	r0, #255	; 0xff
    4d8c:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4d90:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4d94:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4d98:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4d9c:	231f      	movs	r3, #31
    4d9e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4da2:	2325      	movs	r3, #37	; 0x25
    4da4:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4da8:	231b      	movs	r3, #27
    4daa:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4dae:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4db2:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4db6:	2303      	movs	r3, #3
    4db8:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4dbc:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4dc0:	f00c ff5a 	bl	11c78 <packet_rx_allocate>
    4dc4:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4dc6:	4618      	mov	r0, r3
    4dc8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4dcc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4dd0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4dd4:	f00a f9ee 	bl	f1b4 <mem_init>
    4dd8:	e79a      	b.n	4d10 <common_init+0x14>
	LL_ASSERT(link);
    4dda:	4040      	eors	r0, r0
    4ddc:	f380 8811 	msr	BASEPRI, r0
    4de0:	f04f 0004 	mov.w	r0, #4
    4de4:	df02      	svc	2
    4de6:	bf00      	nop
    4de8:	20000ef4 	.word	0x20000ef4

00004dec <le_set_event_mask>:
{
    4dec:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4dee:	2108      	movs	r1, #8
    4df0:	f242 0001 	movw	r0, #8193	; 0x2001
    4df4:	f7ff febe 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    4df8:	2800      	cmp	r0, #0
    4dfa:	d042      	beq.n	4e82 <le_set_event_mask+0x96>
    4dfc:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4dfe:	2108      	movs	r1, #8
    4e00:	4408      	add	r0, r1
    4e02:	f015 ff13 	bl	1ac2c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4e06:	4b20      	ldr	r3, [pc, #128]	; (4e88 <le_set_event_mask+0x9c>)
    4e08:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4e0c:	f011 0f02 	tst.w	r1, #2
    4e10:	d131      	bne.n	4e76 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4e12:	220f      	movs	r2, #15
    4e14:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4e16:	f011 0f20 	tst.w	r1, #32
    4e1a:	d001      	beq.n	4e20 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4e20:	4d19      	ldr	r5, [pc, #100]	; (4e88 <le_set_event_mask+0x9c>)
    4e22:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    4e26:	f015 0f09 	tst.w	r5, #9
    4e2a:	d001      	beq.n	4e30 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4e30:	f011 0f01 	tst.w	r1, #1
    4e34:	d001      	beq.n	4e3a <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4e36:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4e3a:	4913      	ldr	r1, [pc, #76]	; (4e88 <le_set_event_mask+0x9c>)
    4e3c:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    4e40:	f001 0106 	and.w	r1, r1, #6
    4e44:	2906      	cmp	r1, #6
    4e46:	d019      	beq.n	4e7c <le_set_event_mask+0x90>
	dst[0] = val;
    4e48:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4e4a:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4e4e:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4e50:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4e52:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4e54:	0a12      	lsrs	r2, r2, #8
    4e56:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4e58:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4e5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4e5e:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4e60:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4e62:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4e64:	0a1b      	lsrs	r3, r3, #8
    4e66:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4e68:	2200      	movs	r2, #0
    4e6a:	4621      	mov	r1, r4
    4e6c:	f242 0001 	movw	r0, #8193	; 0x2001
    4e70:	f7ff feac 	bl	4bcc <bt_hci_cmd_send_sync>
    4e74:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4e76:	222f      	movs	r2, #47	; 0x2f
    4e78:	2300      	movs	r3, #0
    4e7a:	e7cc      	b.n	4e16 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4e7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    4e80:	e7e2      	b.n	4e48 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    4e82:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4e86:	bd38      	pop	{r3, r4, r5, pc}
    4e88:	2000b878 	.word	0x2000b878

00004e8c <le_set_event_mask>:
{
    4e8c:	b570      	push	{r4, r5, r6, lr}
    4e8e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4e90:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    4e92:	79da      	ldrb	r2, [r3, #7]
    4e94:	7999      	ldrb	r1, [r3, #6]
    4e96:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4e9a:	7958      	ldrb	r0, [r3, #5]
    4e9c:	791a      	ldrb	r2, [r3, #4]
    4e9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4ea2:	2400      	movs	r4, #0
    4ea4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4ea8:	78d9      	ldrb	r1, [r3, #3]
    4eaa:	789a      	ldrb	r2, [r3, #2]
    4eac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4eb0:	7859      	ldrb	r1, [r3, #1]
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4ebc:	ea44 0003 	orr.w	r0, r4, r3
    4ec0:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    4ec2:	4b04      	ldr	r3, [pc, #16]	; (4ed4 <le_set_event_mask+0x48>)
    4ec4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4ec8:	2101      	movs	r1, #1
    4eca:	4630      	mov	r0, r6
    4ecc:	f008 f9b8 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    4ed0:	7004      	strb	r4, [r0, #0]
    4ed2:	bd70      	pop	{r4, r5, r6, pc}
    4ed4:	2000bb70 	.word	0x2000bb70

00004ed8 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    4ed8:	4b4c      	ldr	r3, [pc, #304]	; (500c <le_init+0x134>)
    4eda:	7e9b      	ldrb	r3, [r3, #26]
    4edc:	f013 0f40 	tst.w	r3, #64	; 0x40
    4ee0:	f000 808c 	beq.w	4ffc <le_init+0x124>
{
    4ee4:	b570      	push	{r4, r5, r6, lr}
    4ee6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4ee8:	aa01      	add	r2, sp, #4
    4eea:	2100      	movs	r1, #0
    4eec:	f242 0003 	movw	r0, #8195	; 0x2003
    4ef0:	f7ff fe6c 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4ef4:	4603      	mov	r3, r0
    4ef6:	b110      	cbz	r0, 4efe <le_init+0x26>
}
    4ef8:	4618      	mov	r0, r3
    4efa:	b002      	add	sp, #8
    4efc:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    4efe:	9801      	ldr	r0, [sp, #4]
    4f00:	f7ff fbd4 	bl	46ac <read_le_features_complete>
	net_buf_unref(rsp);
    4f04:	ac02      	add	r4, sp, #8
    4f06:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4f0a:	f015 fe43 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4f0e:	4622      	mov	r2, r4
    4f10:	2100      	movs	r1, #0
    4f12:	f242 0002 	movw	r0, #8194	; 0x2002
    4f16:	f7ff fe59 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    4f1a:	4603      	mov	r3, r0
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d1eb      	bne.n	4ef8 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    4f20:	9801      	ldr	r0, [sp, #4]
    4f22:	f7ff fbcd 	bl	46c0 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    4f26:	9801      	ldr	r0, [sp, #4]
    4f28:	f015 fe34 	bl	1ab94 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4f2c:	4b37      	ldr	r3, [pc, #220]	; (500c <le_init+0x134>)
    4f2e:	7e9b      	ldrb	r3, [r3, #26]
    4f30:	f013 0f20 	tst.w	r3, #32
    4f34:	d037      	beq.n	4fa6 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4f36:	4b35      	ldr	r3, [pc, #212]	; (500c <le_init+0x134>)
    4f38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    4f3c:	f013 0f08 	tst.w	r3, #8
    4f40:	d149      	bne.n	4fd6 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4f42:	4b32      	ldr	r3, [pc, #200]	; (500c <le_init+0x134>)
    4f44:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4f48:	f013 0f20 	tst.w	r3, #32
    4f4c:	d027      	beq.n	4f9e <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4f4e:	466a      	mov	r2, sp
    4f50:	2100      	movs	r1, #0
    4f52:	f242 002f 	movw	r0, #8239	; 0x202f
    4f56:	f7ff fe39 	bl	4bcc <bt_hci_cmd_send_sync>
		if (err) {
    4f5a:	4603      	mov	r3, r0
    4f5c:	2800      	cmp	r0, #0
    4f5e:	d1cb      	bne.n	4ef8 <le_init+0x20>
		rp = (void *)rsp->data;
    4f60:	9800      	ldr	r0, [sp, #0]
    4f62:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4f64:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4f68:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    4f6c:	f015 fe12 	bl	1ab94 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f70:	2104      	movs	r1, #4
    4f72:	f242 0024 	movw	r0, #8228	; 0x2024
    4f76:	f7ff fdfd 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    4f7a:	4604      	mov	r4, r0
    4f7c:	2800      	cmp	r0, #0
    4f7e:	d03a      	beq.n	4ff6 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    4f80:	2104      	movs	r1, #4
    4f82:	3008      	adds	r0, #8
    4f84:	f015 fe52 	bl	1ac2c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4f88:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4f8a:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f8c:	2200      	movs	r2, #0
    4f8e:	4621      	mov	r1, r4
    4f90:	f242 0024 	movw	r0, #8228	; 0x2024
    4f94:	f7ff fe1a 	bl	4bcc <bt_hci_cmd_send_sync>
		if (err) {
    4f98:	4603      	mov	r3, r0
    4f9a:	2800      	cmp	r0, #0
    4f9c:	d1ac      	bne.n	4ef8 <le_init+0x20>
	return  le_set_event_mask();
    4f9e:	f7ff ff25 	bl	4dec <le_set_event_mask>
    4fa2:	4603      	mov	r3, r0
    4fa4:	e7a8      	b.n	4ef8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4fa6:	2102      	movs	r1, #2
    4fa8:	f640 406d 	movw	r0, #3181	; 0xc6d
    4fac:	f7ff fde2 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    4fb0:	4604      	mov	r4, r0
    4fb2:	b338      	cbz	r0, 5004 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4fb4:	2102      	movs	r1, #2
    4fb6:	3008      	adds	r0, #8
    4fb8:	f015 fe38 	bl	1ac2c <net_buf_simple_add>
		cp_le->le = 0x01;
    4fbc:	2301      	movs	r3, #1
    4fbe:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    4fc0:	2200      	movs	r2, #0
    4fc2:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4fc4:	4621      	mov	r1, r4
    4fc6:	f640 406d 	movw	r0, #3181	; 0xc6d
    4fca:	f7ff fdff 	bl	4bcc <bt_hci_cmd_send_sync>
		if (err) {
    4fce:	4603      	mov	r3, r0
    4fd0:	2800      	cmp	r0, #0
    4fd2:	d0b0      	beq.n	4f36 <le_init+0x5e>
    4fd4:	e790      	b.n	4ef8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4fd6:	aa01      	add	r2, sp, #4
    4fd8:	2100      	movs	r1, #0
    4fda:	f242 001c 	movw	r0, #8220	; 0x201c
    4fde:	f7ff fdf5 	bl	4bcc <bt_hci_cmd_send_sync>
		if (err) {
    4fe2:	4603      	mov	r3, r0
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d187      	bne.n	4ef8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    4fe8:	9801      	ldr	r0, [sp, #4]
    4fea:	f7ff fae5 	bl	45b8 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    4fee:	9801      	ldr	r0, [sp, #4]
    4ff0:	f015 fdd0 	bl	1ab94 <net_buf_unref>
    4ff4:	e7a5      	b.n	4f42 <le_init+0x6a>
			return -ENOBUFS;
    4ff6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4ffa:	e77d      	b.n	4ef8 <le_init+0x20>
		return -ENODEV;
    4ffc:	f06f 0312 	mvn.w	r3, #18
}
    5000:	4618      	mov	r0, r3
    5002:	4770      	bx	lr
			return -ENOBUFS;
    5004:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5008:	e776      	b.n	4ef8 <le_init+0x20>
    500a:	bf00      	nop
    500c:	2000b878 	.word	0x2000b878

00005010 <br_init>:
{
    5010:	b510      	push	{r4, lr}
    5012:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    5014:	4b0b      	ldr	r3, [pc, #44]	; (5044 <br_init+0x34>)
    5016:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    501a:	b11b      	cbz	r3, 5024 <br_init+0x14>
		return 0;
    501c:	2400      	movs	r4, #0
}
    501e:	4620      	mov	r0, r4
    5020:	b002      	add	sp, #8
    5022:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5024:	aa01      	add	r2, sp, #4
    5026:	2100      	movs	r1, #0
    5028:	f241 0005 	movw	r0, #4101	; 0x1005
    502c:	f7ff fdce 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    5030:	4604      	mov	r4, r0
    5032:	2800      	cmp	r0, #0
    5034:	d1f3      	bne.n	501e <br_init+0xe>
	read_buffer_size_complete(rsp);
    5036:	9801      	ldr	r0, [sp, #4]
    5038:	f7ff fb58 	bl	46ec <read_buffer_size_complete>
	net_buf_unref(rsp);
    503c:	9801      	ldr	r0, [sp, #4]
    503e:	f015 fda9 	bl	1ab94 <net_buf_unref>
	return 0;
    5042:	e7ec      	b.n	501e <br_init+0xe>
    5044:	2000b878 	.word	0x2000b878

00005048 <set_event_mask>:
{
    5048:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    504a:	2108      	movs	r1, #8
    504c:	f640 4001 	movw	r0, #3073	; 0xc01
    5050:	f7ff fd90 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5054:	b348      	cbz	r0, 50aa <set_event_mask+0x62>
    5056:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    5058:	2108      	movs	r1, #8
    505a:	4408      	add	r0, r1
    505c:	f015 fde6 	bl	1ac2c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    5060:	4b13      	ldr	r3, [pc, #76]	; (50b0 <set_event_mask+0x68>)
    5062:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    5066:	f013 0f01 	tst.w	r3, #1
    506a:	d11b      	bne.n	50a4 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    506c:	4a11      	ldr	r2, [pc, #68]	; (50b4 <set_event_mask+0x6c>)
    506e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    5072:	b291      	uxth	r1, r2
	dst[0] = val;
    5074:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    5076:	0a09      	lsrs	r1, r1, #8
    5078:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    507a:	0c12      	lsrs	r2, r2, #16
    507c:	b291      	uxth	r1, r2
	dst[0] = val;
    507e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5080:	0a0a      	lsrs	r2, r1, #8
    5082:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    5084:	b29a      	uxth	r2, r3
	dst[0] = val;
    5086:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    5088:	0a12      	lsrs	r2, r2, #8
    508a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    508c:	0c1b      	lsrs	r3, r3, #16
    508e:	b29a      	uxth	r2, r3
	dst[0] = val;
    5090:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    5092:	0a13      	lsrs	r3, r2, #8
    5094:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5096:	2200      	movs	r2, #0
    5098:	4621      	mov	r1, r4
    509a:	f640 4001 	movw	r0, #3073	; 0xc01
    509e:	f7ff fd95 	bl	4bcc <bt_hci_cmd_send_sync>
    50a2:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    50a4:	4a04      	ldr	r2, [pc, #16]	; (50b8 <set_event_mask+0x70>)
    50a6:	4b05      	ldr	r3, [pc, #20]	; (50bc <set_event_mask+0x74>)
    50a8:	e7e3      	b.n	5072 <set_event_mask+0x2a>
		return -ENOBUFS;
    50aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    50ae:	bd10      	pop	{r4, pc}
    50b0:	2000b878 	.word	0x2000b878
    50b4:	02008810 	.word	0x02008810
    50b8:	02008890 	.word	0x02008890
    50bc:	20008000 	.word	0x20008000

000050c0 <set_event_mask>:
{
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    50c4:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    50c6:	79da      	ldrb	r2, [r3, #7]
    50c8:	7999      	ldrb	r1, [r3, #6]
    50ca:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    50ce:	7958      	ldrb	r0, [r3, #5]
    50d0:	791a      	ldrb	r2, [r3, #4]
    50d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    50d6:	2400      	movs	r4, #0
    50d8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    50dc:	78d9      	ldrb	r1, [r3, #3]
    50de:	789a      	ldrb	r2, [r3, #2]
    50e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    50e4:	7859      	ldrb	r1, [r3, #1]
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    50ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    50f0:	ea44 0003 	orr.w	r0, r4, r3
    50f4:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    50f6:	4b04      	ldr	r3, [pc, #16]	; (5108 <set_event_mask+0x48>)
    50f8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    50fc:	2101      	movs	r1, #1
    50fe:	4630      	mov	r0, r6
    5100:	f008 f89e 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    5104:	7004      	strb	r4, [r0, #0]
    5106:	bd70      	pop	{r4, r5, r6, pc}
    5108:	2000bb68 	.word	0x2000bb68

0000510c <hci_vs_init>:
{
    510c:	b510      	push	{r4, lr}
    510e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5110:	aa01      	add	r2, sp, #4
    5112:	2100      	movs	r1, #0
    5114:	f64f 4001 	movw	r0, #64513	; 0xfc01
    5118:	f7ff fd58 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    511c:	b108      	cbz	r0, 5122 <hci_vs_init+0x16>
}
    511e:	b002      	add	sp, #8
    5120:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    5122:	ac02      	add	r4, sp, #8
    5124:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5128:	f015 fd34 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    512c:	4622      	mov	r2, r4
    512e:	2100      	movs	r1, #0
    5130:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5134:	f7ff fd4a 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    5138:	2800      	cmp	r0, #0
    513a:	d1f0      	bne.n	511e <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    513c:	9b01      	ldr	r3, [sp, #4]
    513e:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5140:	2202      	movs	r2, #2
    5142:	3101      	adds	r1, #1
    5144:	480d      	ldr	r0, [pc, #52]	; (517c <hci_vs_init+0x70>)
    5146:	f7fb f8bb 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    514a:	ac02      	add	r4, sp, #8
    514c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5150:	f015 fd20 	bl	1ab94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5154:	4622      	mov	r2, r4
    5156:	2100      	movs	r1, #0
    5158:	f64f 4003 	movw	r0, #64515	; 0xfc03
    515c:	f7ff fd36 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    5160:	2800      	cmp	r0, #0
    5162:	d1dc      	bne.n	511e <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    5164:	9b01      	ldr	r3, [sp, #4]
    5166:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    5168:	2201      	movs	r2, #1
    516a:	4411      	add	r1, r2
    516c:	4804      	ldr	r0, [pc, #16]	; (5180 <hci_vs_init+0x74>)
    516e:	f7fb f8a7 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    5172:	9801      	ldr	r0, [sp, #4]
    5174:	f015 fd0e 	bl	1ab94 <net_buf_unref>
    5178:	e7d1      	b.n	511e <hci_vs_init+0x12>
    517a:	bf00      	nop
    517c:	2000b8d7 	.word	0x2000b8d7
    5180:	2000b8d6 	.word	0x2000b8d6

00005184 <set_random_address>:
{
    5184:	b570      	push	{r4, r5, r6, lr}
    5186:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5188:	2206      	movs	r2, #6
    518a:	4914      	ldr	r1, [pc, #80]	; (51dc <set_random_address+0x58>)
    518c:	f024 ff8c 	bl	2a0a8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5190:	4604      	mov	r4, r0
    5192:	b908      	cbnz	r0, 5198 <set_random_address+0x14>
}
    5194:	4620      	mov	r0, r4
    5196:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5198:	2106      	movs	r1, #6
    519a:	f242 0005 	movw	r0, #8197	; 0x2005
    519e:	f7ff fce9 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    51a2:	4604      	mov	r4, r0
    51a4:	b1b8      	cbz	r0, 51d6 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    51a6:	2206      	movs	r2, #6
    51a8:	4629      	mov	r1, r5
    51aa:	3008      	adds	r0, #8
    51ac:	f015 fd44 	bl	1ac38 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    51b0:	2200      	movs	r2, #0
    51b2:	4621      	mov	r1, r4
    51b4:	f242 0005 	movw	r0, #8197	; 0x2005
    51b8:	f7ff fd08 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    51bc:	4604      	mov	r4, r0
    51be:	2800      	cmp	r0, #0
    51c0:	d1e8      	bne.n	5194 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    51c2:	4e07      	ldr	r6, [pc, #28]	; (51e0 <set_random_address+0x5c>)
    51c4:	2206      	movs	r2, #6
    51c6:	4629      	mov	r1, r5
    51c8:	f106 0008 	add.w	r0, r6, #8
    51cc:	f7fb f878 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    51d0:	2301      	movs	r3, #1
    51d2:	71f3      	strb	r3, [r6, #7]
	return 0;
    51d4:	e7de      	b.n	5194 <set_random_address+0x10>
		return -ENOBUFS;
    51d6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    51da:	e7db      	b.n	5194 <set_random_address+0x10>
    51dc:	2000b880 	.word	0x2000b880
    51e0:	2000b878 	.word	0x2000b878

000051e4 <le_set_private_addr>:
{
    51e4:	b500      	push	{lr}
    51e6:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    51e8:	2106      	movs	r1, #6
    51ea:	4668      	mov	r0, sp
    51ec:	f00c f9a8 	bl	11540 <bt_rand>
	if (err) {
    51f0:	4603      	mov	r3, r0
    51f2:	b118      	cbz	r0, 51fc <le_set_private_addr+0x18>
}
    51f4:	4618      	mov	r0, r3
    51f6:	b003      	add	sp, #12
    51f8:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    51fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5204:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    5208:	4668      	mov	r0, sp
    520a:	f7ff ffbb 	bl	5184 <set_random_address>
    520e:	4603      	mov	r3, r0
    5210:	e7f0      	b.n	51f4 <le_set_private_addr+0x10>
	...

00005214 <bt_hci_stop_scanning>:
{
    5214:	b530      	push	{r4, r5, lr}
    5216:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5218:	f3bf 8f5b 	dmb	ish
    521c:	4b26      	ldr	r3, [pc, #152]	; (52b8 <bt_hci_stop_scanning+0xa4>)
    521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5220:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5224:	f013 0f80 	tst.w	r3, #128	; 0x80
    5228:	d03f      	beq.n	52aa <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    522a:	2102      	movs	r1, #2
    522c:	f242 000c 	movw	r0, #8204	; 0x200c
    5230:	f7ff fca0 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5234:	4604      	mov	r4, r0
    5236:	2800      	cmp	r0, #0
    5238:	d03a      	beq.n	52b0 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    523a:	2102      	movs	r1, #2
    523c:	3008      	adds	r0, #8
    523e:	f015 fcf5 	bl	1ac2c <net_buf_simple_add>
    5242:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5244:	2202      	movs	r2, #2
    5246:	2100      	movs	r1, #0
    5248:	f024 ffc2 	bl	2a1d0 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    524c:	2300      	movs	r3, #0
    524e:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    5250:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5252:	aa01      	add	r2, sp, #4
    5254:	4621      	mov	r1, r4
    5256:	f242 000c 	movw	r0, #8204	; 0x200c
    525a:	f7ff fcb7 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    525e:	4604      	mov	r4, r0
    5260:	b930      	cbnz	r0, 5270 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    5262:	9b01      	ldr	r3, [sp, #4]
    5264:	689b      	ldr	r3, [r3, #8]
    5266:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    5268:	b12c      	cbz	r4, 5276 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    526a:	9801      	ldr	r0, [sp, #4]
    526c:	f015 fc92 	bl	1ab94 <net_buf_unref>
}
    5270:	4620      	mov	r0, r4
    5272:	b003      	add	sp, #12
    5274:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5276:	4b11      	ldr	r3, [pc, #68]	; (52bc <bt_hci_stop_scanning+0xa8>)
    5278:	f3bf 8f5b 	dmb	ish
    527c:	e853 2f00 	ldrex	r2, [r3]
    5280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5284:	e843 2100 	strex	r1, r2, [r3]
    5288:	2900      	cmp	r1, #0
    528a:	d1f7      	bne.n	527c <bt_hci_stop_scanning+0x68>
    528c:	f3bf 8f5b 	dmb	ish
    5290:	f3bf 8f5b 	dmb	ish
    5294:	e853 2f00 	ldrex	r2, [r3]
    5298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    529c:	e843 2100 	strex	r1, r2, [r3]
    52a0:	2900      	cmp	r1, #0
    52a2:	d1f7      	bne.n	5294 <bt_hci_stop_scanning+0x80>
    52a4:	f3bf 8f5b 	dmb	ish
    52a8:	e7df      	b.n	526a <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    52aa:	f06f 0477 	mvn.w	r4, #119	; 0x77
    52ae:	e7df      	b.n	5270 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    52b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    52b4:	e7dc      	b.n	5270 <bt_hci_stop_scanning+0x5c>
    52b6:	bf00      	nop
    52b8:	2000b878 	.word	0x2000b878
    52bc:	2000b8e8 	.word	0x2000b8e8

000052c0 <set_advertise_enable>:
{
    52c0:	b538      	push	{r3, r4, r5, lr}
    52c2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    52c4:	2101      	movs	r1, #1
    52c6:	f242 000a 	movw	r0, #8202	; 0x200a
    52ca:	f7ff fc53 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    52ce:	b380      	cbz	r0, 5332 <set_advertise_enable+0x72>
    52d0:	4604      	mov	r4, r0
	if (enable) {
    52d2:	b1dd      	cbz	r5, 530c <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    52d4:	2101      	movs	r1, #1
    52d6:	3008      	adds	r0, #8
    52d8:	f015 fcb9 	bl	1ac4e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    52dc:	2200      	movs	r2, #0
    52de:	4621      	mov	r1, r4
    52e0:	f242 000a 	movw	r0, #8202	; 0x200a
    52e4:	f7ff fc72 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    52e8:	4603      	mov	r3, r0
    52ea:	b968      	cbnz	r0, 5308 <set_advertise_enable+0x48>
	if (enable) {
    52ec:	b99d      	cbnz	r5, 5316 <set_advertise_enable+0x56>
    52ee:	4a12      	ldr	r2, [pc, #72]	; (5338 <set_advertise_enable+0x78>)
    52f0:	f3bf 8f5b 	dmb	ish
    52f4:	e852 1f00 	ldrex	r1, [r2]
    52f8:	f021 0120 	bic.w	r1, r1, #32
    52fc:	e842 1000 	strex	r0, r1, [r2]
    5300:	2800      	cmp	r0, #0
    5302:	d1f7      	bne.n	52f4 <set_advertise_enable+0x34>
    5304:	f3bf 8f5b 	dmb	ish
}
    5308:	4618      	mov	r0, r3
    530a:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    530c:	2100      	movs	r1, #0
    530e:	3008      	adds	r0, #8
    5310:	f015 fc9d 	bl	1ac4e <net_buf_simple_add_u8>
    5314:	e7e2      	b.n	52dc <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5316:	4a08      	ldr	r2, [pc, #32]	; (5338 <set_advertise_enable+0x78>)
    5318:	f3bf 8f5b 	dmb	ish
    531c:	e852 1f00 	ldrex	r1, [r2]
    5320:	f041 0120 	orr.w	r1, r1, #32
    5324:	e842 1000 	strex	r0, r1, [r2]
    5328:	2800      	cmp	r0, #0
    532a:	d1f7      	bne.n	531c <set_advertise_enable+0x5c>
    532c:	f3bf 8f5b 	dmb	ish
    5330:	e7ea      	b.n	5308 <set_advertise_enable+0x48>
		return -ENOBUFS;
    5332:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5336:	e7e7      	b.n	5308 <set_advertise_enable+0x48>
    5338:	2000b8e8 	.word	0x2000b8e8

0000533c <hci_le_create_conn>:
{
    533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5340:	2119      	movs	r1, #25
    5342:	f242 000d 	movw	r0, #8205	; 0x200d
    5346:	f7ff fc15 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    534a:	b378      	cbz	r0, 53ac <hci_le_create_conn+0x70>
    534c:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    534e:	2119      	movs	r1, #25
    5350:	3008      	adds	r0, #8
    5352:	f015 fc6b 	bl	1ac2c <net_buf_simple_add>
    5356:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5358:	2219      	movs	r2, #25
    535a:	2100      	movs	r1, #0
    535c:	f024 ff38 	bl	2a1d0 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    5360:	2600      	movs	r6, #0
    5362:	2360      	movs	r3, #96	; 0x60
    5364:	7023      	strb	r3, [r4, #0]
    5366:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    5368:	70a3      	strb	r3, [r4, #2]
    536a:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    536c:	2207      	movs	r2, #7
    536e:	f105 0156 	add.w	r1, r5, #86	; 0x56
    5372:	1d60      	adds	r0, r4, #5
    5374:	f7fa ffa4 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    5378:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    537c:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    537e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    5382:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5386:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    538a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    538e:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    5392:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5396:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    539a:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    539e:	4632      	mov	r2, r6
    53a0:	4639      	mov	r1, r7
    53a2:	f242 000d 	movw	r0, #8205	; 0x200d
    53a6:	f7ff fc11 	bl	4bcc <bt_hci_cmd_send_sync>
    53aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    53ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    53b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000053b2 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    53b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53b6:	4682      	mov	sl, r0
    53b8:	460f      	mov	r7, r1
    53ba:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    53bc:	2120      	movs	r1, #32
    53be:	f7ff fbd9 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    53c2:	2800      	cmp	r0, #0
    53c4:	d03c      	beq.n	5440 <set_ad+0x8e>
    53c6:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    53c8:	2120      	movs	r1, #32
    53ca:	3008      	adds	r0, #8
    53cc:	f015 fc2e 	bl	1ac2c <net_buf_simple_add>
    53d0:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    53d2:	2220      	movs	r2, #32
    53d4:	2100      	movs	r1, #0
    53d6:	f024 fefb 	bl	2a1d0 <memset>

	for (i = 0; i < ad_len; i++) {
    53da:	2600      	movs	r6, #0
    53dc:	4546      	cmp	r6, r8
    53de:	d228      	bcs.n	5432 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    53e0:	7822      	ldrb	r2, [r4, #0]
    53e2:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    53e6:	786b      	ldrb	r3, [r5, #1]
    53e8:	4413      	add	r3, r2
    53ea:	3302      	adds	r3, #2
    53ec:	2b1f      	cmp	r3, #31
    53ee:	dc19      	bgt.n	5424 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    53f0:	1c53      	adds	r3, r2, #1
    53f2:	b2db      	uxtb	r3, r3
    53f4:	7023      	strb	r3, [r4, #0]
    53f6:	7869      	ldrb	r1, [r5, #1]
    53f8:	3101      	adds	r1, #1
    53fa:	4422      	add	r2, r4
    53fc:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    53fe:	1c58      	adds	r0, r3, #1
    5400:	b2c0      	uxtb	r0, r0
    5402:	7020      	strb	r0, [r4, #0]
    5404:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    5408:	4423      	add	r3, r4
    540a:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    540c:	4420      	add	r0, r4
    540e:	786a      	ldrb	r2, [r5, #1]
    5410:	6869      	ldr	r1, [r5, #4]
    5412:	3001      	adds	r0, #1
    5414:	f7fa ff54 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    5418:	786b      	ldrb	r3, [r5, #1]
    541a:	7822      	ldrb	r2, [r4, #0]
    541c:	4413      	add	r3, r2
    541e:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    5420:	3601      	adds	r6, #1
    5422:	e7db      	b.n	53dc <set_ad+0x2a>
			net_buf_unref(buf);
    5424:	4648      	mov	r0, r9
    5426:	f015 fbb5 	bl	1ab94 <net_buf_unref>
			return -EINVAL;
    542a:	f06f 0015 	mvn.w	r0, #21
    542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5432:	2200      	movs	r2, #0
    5434:	4649      	mov	r1, r9
    5436:	4650      	mov	r0, sl
    5438:	f7ff fbc8 	bl	4bcc <bt_hci_cmd_send_sync>
    543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    5440:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005448 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    5448:	8802      	ldrh	r2, [r0, #0]
    544a:	8843      	ldrh	r3, [r0, #2]
    544c:	429a      	cmp	r2, r3
    544e:	d81a      	bhi.n	5486 <bt_le_conn_params_valid+0x3e>
    5450:	2a05      	cmp	r2, #5
    5452:	d91a      	bls.n	548a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    5454:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5458:	d819      	bhi.n	548e <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    545a:	8881      	ldrh	r1, [r0, #4]
    545c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    5460:	d217      	bcs.n	5492 <bt_le_conn_params_valid+0x4a>
{
    5462:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    5464:	88c0      	ldrh	r0, [r0, #6]
    5466:	f1a0 020a 	sub.w	r2, r0, #10
    546a:	b292      	uxth	r2, r2
    546c:	f640 4476 	movw	r4, #3190	; 0xc76
    5470:	42a2      	cmp	r2, r4
    5472:	d810      	bhi.n	5496 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    5474:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    5478:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    547c:	da01      	bge.n	5482 <bt_le_conn_params_valid+0x3a>
	return true;
    547e:	2001      	movs	r0, #1
    5480:	e00a      	b.n	5498 <bt_le_conn_params_valid+0x50>
		return false;
    5482:	2000      	movs	r0, #0
    5484:	e008      	b.n	5498 <bt_le_conn_params_valid+0x50>
		return false;
    5486:	2000      	movs	r0, #0
    5488:	4770      	bx	lr
    548a:	2000      	movs	r0, #0
    548c:	4770      	bx	lr
    548e:	2000      	movs	r0, #0
    5490:	4770      	bx	lr
		return false;
    5492:	2000      	movs	r0, #0
    5494:	4770      	bx	lr
		return false;
    5496:	2000      	movs	r0, #0
}
    5498:	bc10      	pop	{r4}
    549a:	4770      	bx	lr

0000549c <bt_addr_le_create_static>:
{
    549c:	b510      	push	{r4, lr}
    549e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    54a0:	2301      	movs	r3, #1
    54a2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    54a6:	2106      	movs	r1, #6
    54a8:	f00c f84a 	bl	11540 <bt_rand>
	if (err) {
    54ac:	4602      	mov	r2, r0
    54ae:	b918      	cbnz	r0, 54b8 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    54b0:	79a3      	ldrb	r3, [r4, #6]
    54b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    54b6:	71a3      	strb	r3, [r4, #6]
}
    54b8:	4610      	mov	r0, r2
    54ba:	bd10      	pop	{r4, pc}

000054bc <set_static_addr>:
{
    54bc:	b510      	push	{r4, lr}
    54be:	b082      	sub	sp, #8
	if (bt_storage) {
    54c0:	4b2e      	ldr	r3, [pc, #184]	; (557c <set_static_addr+0xc0>)
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	b13b      	cbz	r3, 54d6 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    54c6:	681c      	ldr	r4, [r3, #0]
    54c8:	2307      	movs	r3, #7
    54ca:	4a2d      	ldr	r2, [pc, #180]	; (5580 <set_static_addr+0xc4>)
    54cc:	2100      	movs	r1, #0
    54ce:	4608      	mov	r0, r1
    54d0:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    54d2:	2807      	cmp	r0, #7
    54d4:	d02c      	beq.n	5530 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    54d6:	4b2a      	ldr	r3, [pc, #168]	; (5580 <set_static_addr+0xc4>)
    54d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    54dc:	f013 0f01 	tst.w	r3, #1
    54e0:	d018      	beq.n	5514 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    54e2:	aa01      	add	r2, sp, #4
    54e4:	2100      	movs	r1, #0
    54e6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    54ea:	f7ff fb6f 	bl	4bcc <bt_hci_cmd_send_sync>
		if (err) {
    54ee:	b988      	cbnz	r0, 5514 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    54f0:	9801      	ldr	r0, [sp, #4]
    54f2:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    54f4:	784b      	ldrb	r3, [r1, #1]
    54f6:	b15b      	cbz	r3, 5510 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    54f8:	4821      	ldr	r0, [pc, #132]	; (5580 <set_static_addr+0xc4>)
    54fa:	2301      	movs	r3, #1
    54fc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    5500:	2206      	movs	r2, #6
    5502:	3102      	adds	r1, #2
    5504:	f7fa fedc 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    5508:	9801      	ldr	r0, [sp, #4]
    550a:	f015 fb43 	bl	1ab94 <net_buf_unref>
    550e:	e00f      	b.n	5530 <set_static_addr+0x74>
		net_buf_unref(rsp);
    5510:	f015 fb40 	bl	1ab94 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    5514:	481a      	ldr	r0, [pc, #104]	; (5580 <set_static_addr+0xc4>)
    5516:	f7ff ffc1 	bl	549c <bt_addr_le_create_static>
	if (err) {
    551a:	4603      	mov	r3, r0
    551c:	b9b8      	cbnz	r0, 554e <set_static_addr+0x92>
	if (bt_storage) {
    551e:	4b17      	ldr	r3, [pc, #92]	; (557c <set_static_addr+0xc0>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	b12b      	cbz	r3, 5530 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    5524:	685c      	ldr	r4, [r3, #4]
    5526:	2307      	movs	r3, #7
    5528:	4a15      	ldr	r2, [pc, #84]	; (5580 <set_static_addr+0xc4>)
    552a:	2100      	movs	r1, #0
    552c:	4608      	mov	r0, r1
    552e:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5530:	4b13      	ldr	r3, [pc, #76]	; (5580 <set_static_addr+0xc4>)
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	2b01      	cmp	r3, #1
    5536:	d11b      	bne.n	5570 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    5538:	4b11      	ldr	r3, [pc, #68]	; (5580 <set_static_addr+0xc4>)
    553a:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    553c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5540:	2bc0      	cmp	r3, #192	; 0xc0
    5542:	d118      	bne.n	5576 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    5544:	480f      	ldr	r0, [pc, #60]	; (5584 <set_static_addr+0xc8>)
    5546:	f7ff fe1d 	bl	5184 <set_random_address>
	if (err) {
    554a:	4603      	mov	r3, r0
    554c:	b110      	cbz	r0, 5554 <set_static_addr+0x98>
}
    554e:	4618      	mov	r0, r3
    5550:	b002      	add	sp, #8
    5552:	bd10      	pop	{r4, pc}
    5554:	4a0c      	ldr	r2, [pc, #48]	; (5588 <set_static_addr+0xcc>)
    5556:	f3bf 8f5b 	dmb	ish
    555a:	e852 1f00 	ldrex	r1, [r2]
    555e:	f041 0104 	orr.w	r1, r1, #4
    5562:	e842 1000 	strex	r0, r1, [r2]
    5566:	2800      	cmp	r0, #0
    5568:	d1f7      	bne.n	555a <set_static_addr+0x9e>
    556a:	f3bf 8f5b 	dmb	ish
	return 0;
    556e:	e7ee      	b.n	554e <set_static_addr+0x92>
		return -EINVAL;
    5570:	f06f 0315 	mvn.w	r3, #21
    5574:	e7eb      	b.n	554e <set_static_addr+0x92>
    5576:	f06f 0315 	mvn.w	r3, #21
    557a:	e7e8      	b.n	554e <set_static_addr+0x92>
    557c:	200029c4 	.word	0x200029c4
    5580:	2000b878 	.word	0x2000b878
    5584:	2000b879 	.word	0x2000b879
    5588:	2000b8e8 	.word	0x2000b8e8

0000558c <hci_init>:
{
    558c:	b510      	push	{r4, lr}
    558e:	b084      	sub	sp, #16
	err = common_init();
    5590:	f7ff fb5c 	bl	4c4c <common_init>
	if (err) {
    5594:	4604      	mov	r4, r0
    5596:	b110      	cbz	r0, 559e <hci_init+0x12>
}
    5598:	4620      	mov	r0, r4
    559a:	b004      	add	sp, #16
    559c:	bd10      	pop	{r4, pc}
	err = le_init();
    559e:	f7ff fc9b 	bl	4ed8 <le_init>
	if (err) {
    55a2:	4604      	mov	r4, r0
    55a4:	2800      	cmp	r0, #0
    55a6:	d1f7      	bne.n	5598 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    55a8:	4b17      	ldr	r3, [pc, #92]	; (5608 <hci_init+0x7c>)
    55aa:	7e9b      	ldrb	r3, [r3, #26]
    55ac:	f013 0f20 	tst.w	r3, #32
    55b0:	d104      	bne.n	55bc <hci_init+0x30>
		err = br_init();
    55b2:	f7ff fd2d 	bl	5010 <br_init>
		if (err) {
    55b6:	4604      	mov	r4, r0
    55b8:	2800      	cmp	r0, #0
    55ba:	d1ed      	bne.n	5598 <hci_init+0xc>
	err = set_event_mask();
    55bc:	f7ff fd44 	bl	5048 <set_event_mask>
	if (err) {
    55c0:	4604      	mov	r4, r0
    55c2:	2800      	cmp	r0, #0
    55c4:	d1e8      	bne.n	5598 <hci_init+0xc>
	hci_vs_init();
    55c6:	f7ff fda1 	bl	510c <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    55ca:	2300      	movs	r3, #0
    55cc:	9300      	str	r3, [sp, #0]
    55ce:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    55d2:	2207      	movs	r2, #7
    55d4:	4669      	mov	r1, sp
    55d6:	480c      	ldr	r0, [pc, #48]	; (5608 <hci_init+0x7c>)
    55d8:	f024 fd66 	bl	2a0a8 <memcmp>
    55dc:	b178      	cbz	r0, 55fe <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    55de:	4b0b      	ldr	r3, [pc, #44]	; (560c <hci_init+0x80>)
    55e0:	e893 0003 	ldmia.w	r3, {r0, r1}
    55e4:	9002      	str	r0, [sp, #8]
    55e6:	f8ad 100c 	strh.w	r1, [sp, #12]
    55ea:	0c09      	lsrs	r1, r1, #16
    55ec:	f88d 100e 	strb.w	r1, [sp, #14]
    55f0:	2207      	movs	r2, #7
    55f2:	a902      	add	r1, sp, #8
    55f4:	4804      	ldr	r0, [pc, #16]	; (5608 <hci_init+0x7c>)
    55f6:	f024 fd57 	bl	2a0a8 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    55fa:	2800      	cmp	r0, #0
    55fc:	d1cc      	bne.n	5598 <hci_init+0xc>
		err = set_static_addr();
    55fe:	f7ff ff5d 	bl	54bc <set_static_addr>
    5602:	4604      	mov	r4, r0
    5604:	e7c8      	b.n	5598 <hci_init+0xc>
    5606:	bf00      	nop
    5608:	2000b878 	.word	0x2000b878
    560c:	0002e570 	.word	0x0002e570

00005610 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    5610:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    5612:	2100      	movs	r1, #0
    5614:	4608      	mov	r0, r1
    5616:	f007 ffb1 	bl	d57c <reset>
    561a:	bd08      	pop	{r3, pc}

0000561c <bt_send>:
{
    561c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    561e:	4b03      	ldr	r3, [pc, #12]	; (562c <bt_send+0x10>)
    5620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5624:	68db      	ldr	r3, [r3, #12]
    5626:	4798      	blx	r3
}
    5628:	bd08      	pop	{r3, pc}
    562a:	bf00      	nop
    562c:	2000b878 	.word	0x2000b878

00005630 <bt_hci_cmd_send>:
{
    5630:	b538      	push	{r3, r4, r5, lr}
    5632:	4605      	mov	r5, r0
	if (!buf) {
    5634:	460c      	mov	r4, r1
    5636:	b151      	cbz	r1, 564e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5638:	f640 4335 	movw	r3, #3125	; 0xc35
    563c:	429d      	cmp	r5, r3
    563e:	d00e      	beq.n	565e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5640:	4621      	mov	r1, r4
    5642:	480c      	ldr	r0, [pc, #48]	; (5674 <bt_hci_cmd_send+0x44>)
    5644:	f015 fa98 	bl	1ab78 <net_buf_put>
	return 0;
    5648:	2500      	movs	r5, #0
}
    564a:	4628      	mov	r0, r5
    564c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    564e:	f7ff fa91 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    5652:	4604      	mov	r4, r0
    5654:	2800      	cmp	r0, #0
    5656:	d1ef      	bne.n	5638 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    5658:	f06f 0568 	mvn.w	r5, #104	; 0x68
    565c:	e7f5      	b.n	564a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    565e:	4620      	mov	r0, r4
    5660:	f7ff ffdc 	bl	561c <bt_send>
		if (err) {
    5664:	4605      	mov	r5, r0
    5666:	2800      	cmp	r0, #0
    5668:	d0ef      	beq.n	564a <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    566a:	4620      	mov	r0, r4
    566c:	f015 fa92 	bl	1ab94 <net_buf_unref>
    5670:	e7eb      	b.n	564a <bt_hci_cmd_send+0x1a>
    5672:	bf00      	nop
    5674:	2000b94c 	.word	0x2000b94c

00005678 <start_le_scan>:
{
    5678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    567c:	b083      	sub	sp, #12
    567e:	4606      	mov	r6, r0
    5680:	4689      	mov	r9, r1
    5682:	4615      	mov	r5, r2
    5684:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    5686:	2107      	movs	r1, #7
    5688:	f242 000b 	movw	r0, #8203	; 0x200b
    568c:	f7ff fa72 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5690:	2800      	cmp	r0, #0
    5692:	d072      	beq.n	577a <start_le_scan+0x102>
    5694:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    5696:	2107      	movs	r1, #7
    5698:	3008      	adds	r0, #8
    569a:	f015 fac7 	bl	1ac2c <net_buf_simple_add>
    569e:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    56a0:	2207      	movs	r2, #7
    56a2:	2100      	movs	r1, #0
    56a4:	f024 fd94 	bl	2a1d0 <memset>
	set_param->scan_type = scan_type;
    56a8:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    56aa:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    56ae:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    56b2:	2300      	movs	r3, #0
    56b4:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    56b6:	4b34      	ldr	r3, [pc, #208]	; (5788 <start_le_scan+0x110>)
    56b8:	781b      	ldrb	r3, [r3, #0]
    56ba:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    56bc:	2e01      	cmp	r6, #1
    56be:	d02c      	beq.n	571a <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    56c0:	4639      	mov	r1, r7
    56c2:	f242 000b 	movw	r0, #8203	; 0x200b
    56c6:	f7ff ffb3 	bl	5630 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    56ca:	2102      	movs	r1, #2
    56cc:	f242 000c 	movw	r0, #8204	; 0x200c
    56d0:	f7ff fa50 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    56d4:	4604      	mov	r4, r0
    56d6:	2800      	cmp	r0, #0
    56d8:	d052      	beq.n	5780 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    56da:	2102      	movs	r1, #2
    56dc:	3008      	adds	r0, #8
    56de:	f015 faa5 	bl	1ac2c <net_buf_simple_add>
    56e2:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    56e4:	2202      	movs	r2, #2
    56e6:	2100      	movs	r1, #0
    56e8:	f024 fd72 	bl	2a1d0 <memset>
	scan_enable->filter_dup = filter_dup;
    56ec:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    56f0:	2301      	movs	r3, #1
    56f2:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    56f4:	aa01      	add	r2, sp, #4
    56f6:	4621      	mov	r1, r4
    56f8:	f242 000c 	movw	r0, #8204	; 0x200c
    56fc:	f7ff fa66 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    5700:	4605      	mov	r5, r0
    5702:	b930      	cbnz	r0, 5712 <start_le_scan+0x9a>
	err = rsp->data[0];
    5704:	9b01      	ldr	r3, [sp, #4]
    5706:	689b      	ldr	r3, [r3, #8]
    5708:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    570a:	b1d5      	cbz	r5, 5742 <start_le_scan+0xca>
	net_buf_unref(rsp);
    570c:	9801      	ldr	r0, [sp, #4]
    570e:	f015 fa41 	bl	1ab94 <net_buf_unref>
}
    5712:	4628      	mov	r0, r5
    5714:	b003      	add	sp, #12
    5716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    571a:	f3bf 8f5b 	dmb	ish
    571e:	4b1a      	ldr	r3, [pc, #104]	; (5788 <start_le_scan+0x110>)
    5720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5722:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    5726:	f013 0f20 	tst.w	r3, #32
    572a:	d1c9      	bne.n	56c0 <start_le_scan+0x48>
			err = le_set_private_addr();
    572c:	f7ff fd5a 	bl	51e4 <le_set_private_addr>
			if (err) {
    5730:	4605      	mov	r5, r0
    5732:	b910      	cbnz	r0, 573a <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    5734:	2301      	movs	r3, #1
    5736:	7163      	strb	r3, [r4, #5]
    5738:	e7c2      	b.n	56c0 <start_le_scan+0x48>
				net_buf_unref(buf);
    573a:	4638      	mov	r0, r7
    573c:	f015 fa2a 	bl	1ab94 <net_buf_unref>
				return err;
    5740:	e7e7      	b.n	5712 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5742:	4b12      	ldr	r3, [pc, #72]	; (578c <start_le_scan+0x114>)
    5744:	f3bf 8f5b 	dmb	ish
    5748:	e853 2f00 	ldrex	r2, [r3]
    574c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5750:	e843 2100 	strex	r1, r2, [r3]
    5754:	2900      	cmp	r1, #0
    5756:	d1f7      	bne.n	5748 <start_le_scan+0xd0>
    5758:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    575c:	2e01      	cmp	r6, #1
    575e:	d1d5      	bne.n	570c <start_le_scan+0x94>
    5760:	f3bf 8f5b 	dmb	ish
    5764:	e853 2f00 	ldrex	r2, [r3]
    5768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    576c:	e843 2100 	strex	r1, r2, [r3]
    5770:	2900      	cmp	r1, #0
    5772:	d1f7      	bne.n	5764 <start_le_scan+0xec>
    5774:	f3bf 8f5b 	dmb	ish
    5778:	e7c8      	b.n	570c <start_le_scan+0x94>
		return -ENOBUFS;
    577a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    577e:	e7c8      	b.n	5712 <start_le_scan+0x9a>
		return -ENOBUFS;
    5780:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5784:	e7c5      	b.n	5712 <start_le_scan+0x9a>
    5786:	bf00      	nop
    5788:	2000b878 	.word	0x2000b878
    578c:	2000b8e8 	.word	0x2000b8e8

00005790 <bt_le_scan_update>:
{
    5790:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5792:	f3bf 8f5b 	dmb	ish
    5796:	4b17      	ldr	r3, [pc, #92]	; (57f4 <bt_le_scan_update+0x64>)
    5798:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    579a:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    579e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    57a2:	b114      	cbz	r4, 57aa <bt_le_scan_update+0x1a>
		return 0;
    57a4:	2300      	movs	r3, #0
}
    57a6:	4618      	mov	r0, r3
    57a8:	bd38      	pop	{r3, r4, r5, pc}
    57aa:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57ac:	f3bf 8f5b 	dmb	ish
    57b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    57b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    57b6:	f013 0f80 	tst.w	r3, #128	; 0x80
    57ba:	d004      	beq.n	57c6 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    57bc:	f7ff fd2a 	bl	5214 <bt_hci_stop_scanning>
		if (err) {
    57c0:	4603      	mov	r3, r0
    57c2:	2800      	cmp	r0, #0
    57c4:	d1ef      	bne.n	57a6 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    57c6:	2101      	movs	r1, #1
    57c8:	2000      	movs	r0, #0
    57ca:	f001 fcd9 	bl	7180 <bt_conn_lookup_state_le>
		if (!conn) {
    57ce:	b170      	cbz	r0, 57ee <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    57d0:	f001 fd08 	bl	71e4 <bt_conn_unref>
		if (fast_scan) {
    57d4:	b13d      	cbz	r5, 57e6 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    57d6:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    57d8:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    57da:	2301      	movs	r3, #1
    57dc:	2000      	movs	r0, #0
    57de:	f7ff ff4b 	bl	5678 <start_le_scan>
    57e2:	4603      	mov	r3, r0
    57e4:	e7df      	b.n	57a6 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    57e6:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    57e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    57ec:	e7f5      	b.n	57da <bt_le_scan_update+0x4a>
			return 0;
    57ee:	4623      	mov	r3, r4
    57f0:	e7d9      	b.n	57a6 <bt_le_scan_update+0x16>
    57f2:	bf00      	nop
    57f4:	2000b878 	.word	0x2000b878

000057f8 <bt_init>:
{
    57f8:	b510      	push	{r4, lr}
	err = hci_init();
    57fa:	f7ff fec7 	bl	558c <hci_init>
	if (err) {
    57fe:	4604      	mov	r4, r0
    5800:	b108      	cbz	r0, 5806 <bt_init+0xe>
}
    5802:	4620      	mov	r0, r4
    5804:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    5806:	f002 f83b 	bl	7880 <bt_conn_init>
		if (err) {
    580a:	4604      	mov	r4, r0
    580c:	2800      	cmp	r0, #0
    580e:	d1f8      	bne.n	5802 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5810:	4b07      	ldr	r3, [pc, #28]	; (5830 <bt_init+0x38>)
    5812:	f3bf 8f5b 	dmb	ish
    5816:	e853 2f00 	ldrex	r2, [r3]
    581a:	f042 0202 	orr.w	r2, r2, #2
    581e:	e843 2100 	strex	r1, r2, [r3]
    5822:	2900      	cmp	r1, #0
    5824:	d1f7      	bne.n	5816 <bt_init+0x1e>
    5826:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    582a:	f7ff ffb1 	bl	5790 <bt_le_scan_update>
	return 0;
    582e:	e7e8      	b.n	5802 <bt_init+0xa>
    5830:	2000b8e8 	.word	0x2000b8e8

00005834 <init_work>:
{
    5834:	b508      	push	{r3, lr}
	err = bt_init();
    5836:	f7ff ffdf 	bl	57f8 <bt_init>
	if (ready_cb) {
    583a:	4b02      	ldr	r3, [pc, #8]	; (5844 <init_work+0x10>)
    583c:	681b      	ldr	r3, [r3, #0]
    583e:	b103      	cbz	r3, 5842 <init_work+0xe>
		ready_cb(err);
    5840:	4798      	blx	r3
    5842:	bd08      	pop	{r3, pc}
    5844:	20000324 	.word	0x20000324

00005848 <hci_disconn_complete>:
{
    5848:	b530      	push	{r4, r5, lr}
    584a:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    584c:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    584e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    5852:	7823      	ldrb	r3, [r4, #0]
    5854:	b10b      	cbz	r3, 585a <hci_disconn_complete+0x12>
}
    5856:	b005      	add	sp, #20
    5858:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    585a:	f001 fc3f 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    585e:	4605      	mov	r5, r0
    5860:	2800      	cmp	r0, #0
    5862:	d034      	beq.n	58ce <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    5864:	78e3      	ldrb	r3, [r4, #3]
    5866:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    5868:	f022 fafa 	bl	27e60 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    586c:	2200      	movs	r2, #0
	size_t unused = 0;
    586e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    5870:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    5874:	d206      	bcs.n	5884 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    5876:	4927      	ldr	r1, [pc, #156]	; (5914 <hci_disconn_complete+0xcc>)
    5878:	5c89      	ldrb	r1, [r1, r2]
    587a:	29aa      	cmp	r1, #170	; 0xaa
    587c:	d102      	bne.n	5884 <hci_disconn_complete+0x3c>
			unused++;
    587e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    5880:	3201      	adds	r2, #1
    5882:	e7f5      	b.n	5870 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    5884:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    5888:	2264      	movs	r2, #100	; 0x64
    588a:	fb02 f201 	mul.w	r2, r2, r1
    588e:	4822      	ldr	r0, [pc, #136]	; (5918 <hci_disconn_complete+0xd0>)
    5890:	fba0 0202 	umull	r0, r2, r0, r2
    5894:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    5896:	9202      	str	r2, [sp, #8]
    5898:	f44f 7220 	mov.w	r2, #640	; 0x280
    589c:	9201      	str	r2, [sp, #4]
    589e:	9100      	str	r1, [sp, #0]
    58a0:	491e      	ldr	r1, [pc, #120]	; (591c <hci_disconn_complete+0xd4>)
    58a2:	481f      	ldr	r0, [pc, #124]	; (5920 <hci_disconn_complete+0xd8>)
    58a4:	f7fd fb4e 	bl	2f44 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    58a8:	2100      	movs	r1, #0
    58aa:	4628      	mov	r0, r5
    58ac:	f001 fd28 	bl	7300 <bt_conn_set_state>
	conn->handle = 0;
    58b0:	2300      	movs	r3, #0
    58b2:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    58b4:	78ab      	ldrb	r3, [r5, #2]
    58b6:	bb03      	cbnz	r3, 58fa <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58b8:	f3bf 8f5b 	dmb	ish
    58bc:	686b      	ldr	r3, [r5, #4]
    58be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    58c2:	f013 0f01 	tst.w	r3, #1
    58c6:	d11c      	bne.n	5902 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    58c8:	4628      	mov	r0, r5
    58ca:	f001 fc8b 	bl	71e4 <bt_conn_unref>
    58ce:	f3bf 8f5b 	dmb	ish
    58d2:	4b14      	ldr	r3, [pc, #80]	; (5924 <hci_disconn_complete+0xdc>)
    58d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    58d6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    58da:	f013 0f40 	tst.w	r3, #64	; 0x40
    58de:	d0ba      	beq.n	5856 <hci_disconn_complete+0xe>
    58e0:	f3bf 8f5b 	dmb	ish
    58e4:	4b0f      	ldr	r3, [pc, #60]	; (5924 <hci_disconn_complete+0xdc>)
    58e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    58e8:	f3bf 8f5b 	dmb	ish
    58ec:	f013 0f20 	tst.w	r3, #32
    58f0:	d1b1      	bne.n	5856 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    58f2:	2001      	movs	r0, #1
    58f4:	f7ff fce4 	bl	52c0 <set_advertise_enable>
    58f8:	e7ad      	b.n	5856 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    58fa:	4628      	mov	r0, r5
    58fc:	f001 fc72 	bl	71e4 <bt_conn_unref>
		return;
    5900:	e7a9      	b.n	5856 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5902:	2101      	movs	r1, #1
    5904:	4628      	mov	r0, r5
    5906:	f001 fcfb 	bl	7300 <bt_conn_set_state>
		bt_le_scan_update(false);
    590a:	2000      	movs	r0, #0
    590c:	f7ff ff40 	bl	5790 <bt_le_scan_update>
    5910:	e7da      	b.n	58c8 <hci_disconn_complete+0x80>
    5912:	bf00      	nop
    5914:	20003c18 	.word	0x20003c18
    5918:	cccccccd 	.word	0xcccccccd
    591c:	00030dbc 	.word	0x00030dbc
    5920:	00030dc8 	.word	0x00030dc8
    5924:	2000b878 	.word	0x2000b878

00005928 <check_pending_conn>:
{
    5928:	b538      	push	{r3, r4, r5, lr}
    592a:	f3bf 8f5b 	dmb	ish
    592e:	4b23      	ldr	r3, [pc, #140]	; (59bc <check_pending_conn+0x94>)
    5930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5932:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5936:	f413 7f80 	tst.w	r3, #256	; 0x100
    593a:	d101      	bne.n	5940 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    593c:	2a01      	cmp	r2, #1
    593e:	d900      	bls.n	5942 <check_pending_conn+0x1a>
    5940:	bd38      	pop	{r3, r4, r5, pc}
    5942:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    5944:	2101      	movs	r1, #1
    5946:	f001 fc1b 	bl	7180 <bt_conn_lookup_state_le>
	if (!conn) {
    594a:	4605      	mov	r5, r0
    594c:	2800      	cmp	r0, #0
    594e:	d0f7      	beq.n	5940 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5950:	f7ff fc60 	bl	5214 <bt_hci_stop_scanning>
    5954:	b9c0      	cbnz	r0, 5988 <check_pending_conn+0x60>
    5956:	f3bf 8f5b 	dmb	ish
    595a:	4b18      	ldr	r3, [pc, #96]	; (59bc <check_pending_conn+0x94>)
    595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    595e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    5962:	f013 0f04 	tst.w	r3, #4
    5966:	d11c      	bne.n	59a2 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5968:	2207      	movs	r2, #7
    596a:	4914      	ldr	r1, [pc, #80]	; (59bc <check_pending_conn+0x94>)
    596c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5970:	f7fa fca6 	bl	2c0 <memcpy>
    5974:	2207      	movs	r2, #7
    5976:	4621      	mov	r1, r4
    5978:	f105 0056 	add.w	r0, r5, #86	; 0x56
    597c:	f7fa fca0 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5980:	4628      	mov	r0, r5
    5982:	f7ff fcdb 	bl	533c <hci_le_create_conn>
    5986:	b180      	cbz	r0, 59aa <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5988:	231f      	movs	r3, #31
    598a:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    598c:	2100      	movs	r1, #0
    598e:	4628      	mov	r0, r5
    5990:	f001 fcb6 	bl	7300 <bt_conn_set_state>
	bt_conn_unref(conn);
    5994:	4628      	mov	r0, r5
    5996:	f001 fc25 	bl	71e4 <bt_conn_unref>
	bt_le_scan_update(false);
    599a:	2000      	movs	r0, #0
    599c:	f7ff fef8 	bl	5790 <bt_le_scan_update>
    59a0:	e7ce      	b.n	5940 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    59a2:	4807      	ldr	r0, [pc, #28]	; (59c0 <check_pending_conn+0x98>)
    59a4:	f7ff fbee 	bl	5184 <set_random_address>
    59a8:	e7de      	b.n	5968 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    59aa:	2102      	movs	r1, #2
    59ac:	4628      	mov	r0, r5
    59ae:	f001 fca7 	bl	7300 <bt_conn_set_state>
	bt_conn_unref(conn);
    59b2:	4628      	mov	r0, r5
    59b4:	f001 fc16 	bl	71e4 <bt_conn_unref>
	return;
    59b8:	bd38      	pop	{r3, r4, r5, pc}
    59ba:	bf00      	nop
    59bc:	2000b878 	.word	0x2000b878
    59c0:	2000b879 	.word	0x2000b879

000059c4 <le_adv_report>:
{
    59c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59c8:	b083      	sub	sp, #12
    59ca:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    59cc:	f100 0308 	add.w	r3, r0, #8
    59d0:	9300      	str	r3, [sp, #0]
    59d2:	4618      	mov	r0, r3
    59d4:	f015 f97f 	bl	1acd6 <net_buf_simple_pull_u8>
	while (num_reports--) {
    59d8:	e00a      	b.n	59f0 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    59da:	7822      	ldrb	r2, [r4, #0]
    59dc:	4631      	mov	r1, r6
    59de:	9801      	ldr	r0, [sp, #4]
    59e0:	f7ff ffa2 	bl	5928 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    59e4:	7a21      	ldrb	r1, [r4, #8]
    59e6:	3101      	adds	r1, #1
    59e8:	9800      	ldr	r0, [sp, #0]
    59ea:	f015 f96c 	bl	1acc6 <net_buf_simple_pull>
	while (num_reports--) {
    59ee:	4638      	mov	r0, r7
    59f0:	1e43      	subs	r3, r0, #1
    59f2:	b2df      	uxtb	r7, r3
    59f4:	b368      	cbz	r0, 5a52 <le_adv_report+0x8e>
		info = (void *)buf->data;
    59f6:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    59f8:	2109      	movs	r1, #9
    59fa:	f8dd 9000 	ldr.w	r9, [sp]
    59fe:	4648      	mov	r0, r9
    5a00:	f015 f961 	bl	1acc6 <net_buf_simple_pull>
		rssi = info->data[info->length];
    5a04:	7a23      	ldrb	r3, [r4, #8]
    5a06:	4423      	add	r3, r4
    5a08:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    5a0c:	1c66      	adds	r6, r4, #1
    5a0e:	4630      	mov	r0, r6
    5a10:	f7fe ff6b 	bl	48ea <find_id_addr>
    5a14:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    5a16:	4b10      	ldr	r3, [pc, #64]	; (5a58 <le_adv_report+0x94>)
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d0dd      	beq.n	59da <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    5a1e:	f8cd 9000 	str.w	r9, [sp]
    5a22:	4648      	mov	r0, r9
    5a24:	f015 f967 	bl	1acf6 <net_buf_simple_headroom>
    5a28:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    5a2c:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    5a30:	7a23      	ldrb	r3, [r4, #8]
    5a32:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    5a34:	4b08      	ldr	r3, [pc, #32]	; (5a58 <le_adv_report+0x94>)
    5a36:	f8d3 b000 	ldr.w	fp, [r3]
    5a3a:	9b00      	ldr	r3, [sp, #0]
    5a3c:	7822      	ldrb	r2, [r4, #0]
    5a3e:	4641      	mov	r1, r8
    5a40:	9801      	ldr	r0, [sp, #4]
    5a42:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    5a44:	f105 0310 	add.w	r3, r5, #16
    5a48:	4453      	add	r3, sl
    5a4a:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    5a4c:	f8a5 900c 	strh.w	r9, [r5, #12]
    5a50:	e7c3      	b.n	59da <le_adv_report+0x16>
}
    5a52:	b003      	add	sp, #12
    5a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a58:	20000328 	.word	0x20000328

00005a5c <hci_le_read_remote_features>:
{
    5a5c:	b538      	push	{r3, r4, r5, lr}
    5a5e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5a60:	2102      	movs	r1, #2
    5a62:	f242 0016 	movw	r0, #8214	; 0x2016
    5a66:	f7ff f885 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5a6a:	b168      	cbz	r0, 5a88 <hci_le_read_remote_features+0x2c>
    5a6c:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5a6e:	2102      	movs	r1, #2
    5a70:	3008      	adds	r0, #8
    5a72:	f015 f8db 	bl	1ac2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5a76:	882b      	ldrh	r3, [r5, #0]
    5a78:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5a7a:	4621      	mov	r1, r4
    5a7c:	f242 0016 	movw	r0, #8214	; 0x2016
    5a80:	f7ff fdd6 	bl	5630 <bt_hci_cmd_send>
	return 0;
    5a84:	2000      	movs	r0, #0
    5a86:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5a88:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5a8c:	bd38      	pop	{r3, r4, r5, pc}

00005a8e <hci_le_set_phy>:
{
    5a8e:	b538      	push	{r3, r4, r5, lr}
    5a90:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5a92:	2107      	movs	r1, #7
    5a94:	f242 0032 	movw	r0, #8242	; 0x2032
    5a98:	f7ff f86c 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5a9c:	b1a0      	cbz	r0, 5ac8 <hci_le_set_phy+0x3a>
    5a9e:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5aa0:	2107      	movs	r1, #7
    5aa2:	3008      	adds	r0, #8
    5aa4:	f015 f8c2 	bl	1ac2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5aa8:	8823      	ldrh	r3, [r4, #0]
    5aaa:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5aac:	2400      	movs	r4, #0
    5aae:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5ab0:	2302      	movs	r3, #2
    5ab2:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5ab4:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5ab6:	7144      	strb	r4, [r0, #5]
    5ab8:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5aba:	4629      	mov	r1, r5
    5abc:	f242 0032 	movw	r0, #8242	; 0x2032
    5ac0:	f7ff fdb6 	bl	5630 <bt_hci_cmd_send>
	return 0;
    5ac4:	4620      	mov	r0, r4
    5ac6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5ac8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5acc:	bd38      	pop	{r3, r4, r5, pc}

00005ace <hci_le_set_data_len>:
{
    5ace:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ad0:	b083      	sub	sp, #12
    5ad2:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5ad4:	aa01      	add	r2, sp, #4
    5ad6:	2100      	movs	r1, #0
    5ad8:	f242 002f 	movw	r0, #8239	; 0x202f
    5adc:	f7ff f876 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    5ae0:	4603      	mov	r3, r0
    5ae2:	b110      	cbz	r0, 5aea <hci_le_set_data_len+0x1c>
}
    5ae4:	4618      	mov	r0, r3
    5ae6:	b003      	add	sp, #12
    5ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5aea:	9801      	ldr	r0, [sp, #4]
    5aec:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5aee:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5af2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5af6:	f015 f84d 	bl	1ab94 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5afa:	2106      	movs	r1, #6
    5afc:	f242 0022 	movw	r0, #8226	; 0x2022
    5b00:	f7ff f838 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5b04:	4605      	mov	r5, r0
    5b06:	b170      	cbz	r0, 5b26 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5b08:	2106      	movs	r1, #6
    5b0a:	3008      	adds	r0, #8
    5b0c:	f015 f88e 	bl	1ac2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5b10:	8823      	ldrh	r3, [r4, #0]
    5b12:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5b14:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5b16:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5b18:	4629      	mov	r1, r5
    5b1a:	f242 0022 	movw	r0, #8226	; 0x2022
    5b1e:	f7ff fd87 	bl	5630 <bt_hci_cmd_send>
    5b22:	4603      	mov	r3, r0
    5b24:	e7de      	b.n	5ae4 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5b26:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5b2a:	e7db      	b.n	5ae4 <hci_le_set_data_len+0x16>

00005b2c <le_conn_complete>:
{
    5b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    5b30:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5b32:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5b36:	7823      	ldrb	r3, [r4, #0]
    5b38:	b17b      	cbz	r3, 5b5a <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5b3a:	2102      	movs	r1, #2
    5b3c:	2000      	movs	r0, #0
    5b3e:	f001 fb1f 	bl	7180 <bt_conn_lookup_state_le>
		if (!conn) {
    5b42:	4605      	mov	r5, r0
    5b44:	b3d0      	cbz	r0, 5bbc <le_conn_complete+0x90>
		conn->err = evt->status;
    5b46:	7823      	ldrb	r3, [r4, #0]
    5b48:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b4a:	2100      	movs	r1, #0
    5b4c:	f001 fbd8 	bl	7300 <bt_conn_set_state>
		bt_conn_unref(conn);
    5b50:	4628      	mov	r0, r5
    5b52:	f001 fb47 	bl	71e4 <bt_conn_unref>
		return;
    5b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5b5a:	1d27      	adds	r7, r4, #4
    5b5c:	4638      	mov	r0, r7
    5b5e:	f7fe fec4 	bl	48ea <find_id_addr>
    5b62:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5b64:	2102      	movs	r1, #2
    5b66:	f001 fb0b 	bl	7180 <bt_conn_lookup_state_le>
    5b6a:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5b6c:	78e3      	ldrb	r3, [r4, #3]
    5b6e:	2b01      	cmp	r3, #1
    5b70:	d026      	beq.n	5bc0 <le_conn_complete+0x94>
	if (!conn) {
    5b72:	b31d      	cbz	r5, 5bbc <le_conn_complete+0x90>
	conn->handle   = handle;
    5b74:	4628      	mov	r0, r5
    5b76:	f820 6b48 	strh.w	r6, [r0], #72
    5b7a:	2207      	movs	r2, #7
    5b7c:	4641      	mov	r1, r8
    5b7e:	f7fa fb9f 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5b82:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5b86:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5b8a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5b8e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5b92:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5b96:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5b9a:	78e3      	ldrb	r3, [r4, #3]
    5b9c:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5b9e:	2b01      	cmp	r3, #1
    5ba0:	d022      	beq.n	5be8 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5ba2:	2103      	movs	r1, #3
    5ba4:	4628      	mov	r0, r5
    5ba6:	f001 fbab 	bl	7300 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5baa:	7b2b      	ldrb	r3, [r5, #12]
    5bac:	2b03      	cmp	r3, #3
    5bae:	d03b      	beq.n	5c28 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5bb0:	4628      	mov	r0, r5
    5bb2:	f001 fb17 	bl	71e4 <bt_conn_unref>
	bt_le_scan_update(false);
    5bb6:	2000      	movs	r0, #0
    5bb8:	f7ff fdea 	bl	5790 <bt_le_scan_update>
    5bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bc0:	4b3a      	ldr	r3, [pc, #232]	; (5cac <le_conn_complete+0x180>)
    5bc2:	f3bf 8f5b 	dmb	ish
    5bc6:	e853 2f00 	ldrex	r2, [r3]
    5bca:	f022 0220 	bic.w	r2, r2, #32
    5bce:	e843 2100 	strex	r1, r2, [r3]
    5bd2:	2900      	cmp	r1, #0
    5bd4:	d1f7      	bne.n	5bc6 <le_conn_complete+0x9a>
    5bd6:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5bda:	2d00      	cmp	r5, #0
    5bdc:	d1c9      	bne.n	5b72 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5bde:	4640      	mov	r0, r8
    5be0:	f001 fa30 	bl	7044 <bt_conn_add_le>
    5be4:	4605      	mov	r5, r0
    5be6:	e7c4      	b.n	5b72 <le_conn_complete+0x46>
    5be8:	2207      	movs	r2, #7
    5bea:	4639      	mov	r1, r7
    5bec:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5bf0:	f7fa fb66 	bl	2c0 <memcpy>
    5bf4:	4e2e      	ldr	r6, [pc, #184]	; (5cb0 <le_conn_complete+0x184>)
    5bf6:	2207      	movs	r2, #7
    5bf8:	4631      	mov	r1, r6
    5bfa:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5bfe:	f7fa fb5f 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c02:	f3bf 8f5b 	dmb	ish
    5c06:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5c08:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5c0c:	f013 0f40 	tst.w	r3, #64	; 0x40
    5c10:	d0c7      	beq.n	5ba2 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5c12:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5c16:	2200      	movs	r2, #0
    5c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5c1c:	4313      	orrs	r3, r2
    5c1e:	d0c0      	beq.n	5ba2 <le_conn_complete+0x76>
			set_advertise_enable(true);
    5c20:	2001      	movs	r0, #1
    5c22:	f7ff fb4d 	bl	52c0 <set_advertise_enable>
    5c26:	e7bc      	b.n	5ba2 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5c28:	78e3      	ldrb	r3, [r4, #3]
    5c2a:	b12b      	cbz	r3, 5c38 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5c2c:	4b20      	ldr	r3, [pc, #128]	; (5cb0 <le_conn_complete+0x184>)
    5c2e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5c32:	f013 0f08 	tst.w	r3, #8
    5c36:	d004      	beq.n	5c42 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5c38:	4628      	mov	r0, r5
    5c3a:	f7ff ff0f 	bl	5a5c <hci_le_read_remote_features>
		if (!err) {
    5c3e:	2800      	cmp	r0, #0
    5c40:	d0b6      	beq.n	5bb0 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    5c42:	4b1b      	ldr	r3, [pc, #108]	; (5cb0 <le_conn_complete+0x184>)
    5c44:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5c48:	f013 0f01 	tst.w	r3, #1
    5c4c:	d10d      	bne.n	5c6a <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5c4e:	4b18      	ldr	r3, [pc, #96]	; (5cb0 <le_conn_complete+0x184>)
    5c50:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5c54:	f013 0f20 	tst.w	r3, #32
    5c58:	d003      	beq.n	5c62 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5c5a:	4628      	mov	r0, r5
    5c5c:	f7ff ff37 	bl	5ace <hci_le_set_data_len>
		if (!err) {
    5c60:	b1b0      	cbz	r0, 5c90 <le_conn_complete+0x164>
	update_conn_param(conn);
    5c62:	4628      	mov	r0, r5
    5c64:	f7fe fe4a 	bl	48fc <update_conn_param>
    5c68:	e7a2      	b.n	5bb0 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5c6a:	4628      	mov	r0, r5
    5c6c:	f7ff ff0f 	bl	5a8e <hci_le_set_phy>
		if (!err) {
    5c70:	2800      	cmp	r0, #0
    5c72:	d1ec      	bne.n	5c4e <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5c74:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c76:	f3bf 8f5b 	dmb	ish
    5c7a:	e853 2f00 	ldrex	r2, [r3]
    5c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5c82:	e843 2100 	strex	r1, r2, [r3]
    5c86:	2900      	cmp	r1, #0
    5c88:	d1f7      	bne.n	5c7a <le_conn_complete+0x14e>
    5c8a:	f3bf 8f5b 	dmb	ish
    5c8e:	e78f      	b.n	5bb0 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5c90:	1d2b      	adds	r3, r5, #4
    5c92:	f3bf 8f5b 	dmb	ish
    5c96:	e853 2f00 	ldrex	r2, [r3]
    5c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5c9e:	e843 2100 	strex	r1, r2, [r3]
    5ca2:	2900      	cmp	r1, #0
    5ca4:	d1f7      	bne.n	5c96 <le_conn_complete+0x16a>
    5ca6:	f3bf 8f5b 	dmb	ish
    5caa:	e781      	b.n	5bb0 <le_conn_complete+0x84>
    5cac:	2000b8e8 	.word	0x2000b8e8
    5cb0:	2000b878 	.word	0x2000b878

00005cb4 <le_conn_complete>:
{
    5cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cb8:	4604      	mov	r4, r0
    5cba:	460f      	mov	r7, r1
    5cbc:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5cbe:	1d85      	adds	r5, r0, #6
    5cc0:	f100 060c 	add.w	r6, r0, #12
    5cc4:	4633      	mov	r3, r6
    5cc6:	22ff      	movs	r2, #255	; 0xff
    5cc8:	4629      	mov	r1, r5
    5cca:	7940      	ldrb	r0, [r0, #5]
    5ccc:	f014 fafa 	bl	1a2c4 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5cd0:	4b40      	ldr	r3, [pc, #256]	; (5dd4 <le_conn_complete+0x120>)
    5cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cd6:	2200      	movs	r2, #0
    5cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5cdc:	4313      	orrs	r3, r2
    5cde:	d077      	beq.n	5dd0 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5ce0:	4b3d      	ldr	r3, [pc, #244]	; (5dd8 <le_conn_complete+0x124>)
    5ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ce6:	f002 0001 	and.w	r0, r2, #1
    5cea:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5cec:	4301      	orrs	r1, r0
    5cee:	d104      	bne.n	5cfa <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5cf0:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5cf4:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5cf6:	4301      	orrs	r1, r0
    5cf8:	d06a      	beq.n	5dd0 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5cfa:	78e1      	ldrb	r1, [r4, #3]
    5cfc:	b919      	cbnz	r1, 5d06 <le_conn_complete+0x52>
		conn_count++;
    5cfe:	4837      	ldr	r0, [pc, #220]	; (5ddc <le_conn_complete+0x128>)
    5d00:	6801      	ldr	r1, [r0, #0]
    5d02:	3101      	adds	r1, #1
    5d04:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5d06:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5d0a:	2300      	movs	r3, #0
    5d0c:	4313      	orrs	r3, r2
    5d0e:	d03e      	beq.n	5d8e <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5d10:	221e      	movs	r2, #30
    5d12:	210a      	movs	r1, #10
    5d14:	4640      	mov	r0, r8
    5d16:	f007 fb2d 	bl	d374 <meta_evt>
    5d1a:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5d1c:	78e3      	ldrb	r3, [r4, #3]
    5d1e:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5d20:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5d24:	7923      	ldrb	r3, [r4, #4]
    5d26:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5d28:	7963      	ldrb	r3, [r4, #5]
    5d2a:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5d2c:	2206      	movs	r2, #6
    5d2e:	4629      	mov	r1, r5
    5d30:	3005      	adds	r0, #5
    5d32:	f7fa fac5 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5d36:	7ca3      	ldrb	r3, [r4, #18]
    5d38:	b123      	cbz	r3, 5d44 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5d3a:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5d3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5d40:	2b40      	cmp	r3, #64	; 0x40
    5d42:	d01c      	beq.n	5d7e <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5d44:	2206      	movs	r2, #6
    5d46:	2100      	movs	r1, #0
    5d48:	f108 000b 	add.w	r0, r8, #11
    5d4c:	f024 fa40 	bl	2a1d0 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5d50:	2206      	movs	r2, #6
    5d52:	4631      	mov	r1, r6
    5d54:	f108 0011 	add.w	r0, r8, #17
    5d58:	f7fa fab2 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5d5c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5d60:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5d64:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5d68:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5d6c:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5d70:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5d74:	7fe3      	ldrb	r3, [r4, #31]
    5d76:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5d7e:	2206      	movs	r2, #6
    5d80:	f104 0113 	add.w	r1, r4, #19
    5d84:	f108 000b 	add.w	r0, r8, #11
    5d88:	f7fa fa9a 	bl	2c0 <memcpy>
    5d8c:	e7e0      	b.n	5d50 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5d8e:	2212      	movs	r2, #18
    5d90:	2101      	movs	r1, #1
    5d92:	4640      	mov	r0, r8
    5d94:	f007 faee 	bl	d374 <meta_evt>
    5d98:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5d9a:	78e3      	ldrb	r3, [r4, #3]
    5d9c:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5d9e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5da2:	7923      	ldrb	r3, [r4, #4]
    5da4:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5da6:	7963      	ldrb	r3, [r4, #5]
    5da8:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5daa:	2206      	movs	r2, #6
    5dac:	4629      	mov	r1, r5
    5dae:	3005      	adds	r0, #5
    5db0:	f7fa fa86 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5db4:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5db8:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5dbc:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5dc0:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5dc4:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5dc8:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5dcc:	7fe3      	ldrb	r3, [r4, #31]
    5dce:	7473      	strb	r3, [r6, #17]
    5dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dd4:	2000bb68 	.word	0x2000bb68
    5dd8:	2000bb70 	.word	0x2000bb70
    5ddc:	20000a44 	.word	0x20000a44

00005de0 <le_remote_feat_complete>:
{
    5de0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5de2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5de4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5de8:	f001 f978 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    5dec:	b1f0      	cbz	r0, 5e2c <le_remote_feat_complete+0x4c>
    5dee:	4604      	mov	r4, r0
	if (!evt->status) {
    5df0:	782b      	ldrb	r3, [r5, #0]
    5df2:	b1e3      	cbz	r3, 5e2e <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5df4:	4b24      	ldr	r3, [pc, #144]	; (5e88 <le_remote_feat_complete+0xa8>)
    5df6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5dfa:	f013 0f01 	tst.w	r3, #1
    5dfe:	d004      	beq.n	5e0a <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5e00:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5e04:	f013 0f01 	tst.w	r3, #1
    5e08:	d117      	bne.n	5e3a <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5e0a:	4b1f      	ldr	r3, [pc, #124]	; (5e88 <le_remote_feat_complete+0xa8>)
    5e0c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5e10:	f013 0f20 	tst.w	r3, #32
    5e14:	d004      	beq.n	5e20 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5e16:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5e1a:	f013 0f20 	tst.w	r3, #32
    5e1e:	d11f      	bne.n	5e60 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    5e20:	4620      	mov	r0, r4
    5e22:	f7fe fd6b 	bl	48fc <update_conn_param>
	bt_conn_unref(conn);
    5e26:	4620      	mov	r0, r4
    5e28:	f001 f9dc 	bl	71e4 <bt_conn_unref>
    5e2c:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    5e2e:	2208      	movs	r2, #8
    5e30:	1ce9      	adds	r1, r5, #3
    5e32:	3068      	adds	r0, #104	; 0x68
    5e34:	f7fa fa44 	bl	2c0 <memcpy>
    5e38:	e7dc      	b.n	5df4 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5e3a:	4620      	mov	r0, r4
    5e3c:	f7ff fe27 	bl	5a8e <hci_le_set_phy>
		if (!err) {
    5e40:	2800      	cmp	r0, #0
    5e42:	d1e2      	bne.n	5e0a <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5e44:	1d23      	adds	r3, r4, #4
    5e46:	f3bf 8f5b 	dmb	ish
    5e4a:	e853 2f00 	ldrex	r2, [r3]
    5e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5e52:	e843 2100 	strex	r1, r2, [r3]
    5e56:	2900      	cmp	r1, #0
    5e58:	d1f7      	bne.n	5e4a <le_remote_feat_complete+0x6a>
    5e5a:	f3bf 8f5b 	dmb	ish
    5e5e:	e7e2      	b.n	5e26 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    5e60:	4620      	mov	r0, r4
    5e62:	f7ff fe34 	bl	5ace <hci_le_set_data_len>
		if (!err) {
    5e66:	2800      	cmp	r0, #0
    5e68:	d1da      	bne.n	5e20 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5e6a:	1d23      	adds	r3, r4, #4
    5e6c:	f3bf 8f5b 	dmb	ish
    5e70:	e853 2f00 	ldrex	r2, [r3]
    5e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e78:	e843 2100 	strex	r1, r2, [r3]
    5e7c:	2900      	cmp	r1, #0
    5e7e:	d1f7      	bne.n	5e70 <le_remote_feat_complete+0x90>
    5e80:	f3bf 8f5b 	dmb	ish
    5e84:	e7cf      	b.n	5e26 <le_remote_feat_complete+0x46>
    5e86:	bf00      	nop
    5e88:	2000b878 	.word	0x2000b878

00005e8c <le_remote_feat_complete>:
{
    5e8c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e8e:	4c14      	ldr	r4, [pc, #80]	; (5ee0 <le_remote_feat_complete+0x54>)
    5e90:	e9d4 4500 	ldrd	r4, r5, [r4]
    5e94:	2400      	movs	r4, #0
    5e96:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5e9a:	432c      	orrs	r4, r5
    5e9c:	d007      	beq.n	5eae <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5e9e:	4c11      	ldr	r4, [pc, #68]	; (5ee4 <le_remote_feat_complete+0x58>)
    5ea0:	e9d4 4500 	ldrd	r4, r5, [r4]
    5ea4:	f004 0408 	and.w	r4, r4, #8
    5ea8:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5eaa:	432c      	orrs	r4, r5
    5eac:	d100      	bne.n	5eb0 <le_remote_feat_complete+0x24>
    5eae:	bd70      	pop	{r4, r5, r6, pc}
    5eb0:	4615      	mov	r5, r2
    5eb2:	460e      	mov	r6, r1
    5eb4:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    5eb6:	220b      	movs	r2, #11
    5eb8:	2104      	movs	r1, #4
    5eba:	4618      	mov	r0, r3
    5ebc:	f007 fa5a 	bl	d374 <meta_evt>
	sep->status = status;
    5ec0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5ec2:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    5ec6:	b12c      	cbz	r4, 5ed4 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5ec8:	2208      	movs	r2, #8
    5eca:	2100      	movs	r1, #0
    5ecc:	3003      	adds	r0, #3
    5ece:	f024 f97f 	bl	2a1d0 <memset>
    5ed2:	e7ec      	b.n	5eae <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    5ed4:	2208      	movs	r2, #8
    5ed6:	1d31      	adds	r1, r6, #4
    5ed8:	3003      	adds	r0, #3
    5eda:	f7fa f9f1 	bl	2c0 <memcpy>
    5ede:	bd70      	pop	{r4, r5, r6, pc}
    5ee0:	2000bb68 	.word	0x2000bb68
    5ee4:	2000bb70 	.word	0x2000bb70

00005ee8 <le_phy_update_complete>:
{
    5ee8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    5eea:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5eec:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    5ef0:	f001 f8f4 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    5ef4:	b308      	cbz	r0, 5f3a <le_phy_update_complete+0x52>
    5ef6:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5ef8:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5efa:	f3bf 8f5b 	dmb	ish
    5efe:	e855 3f00 	ldrex	r3, [r5]
    5f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    5f06:	e845 2100 	strex	r1, r2, [r5]
    5f0a:	2900      	cmp	r1, #0
    5f0c:	d1f7      	bne.n	5efe <le_phy_update_complete+0x16>
    5f0e:	f3bf 8f5b 	dmb	ish
    5f12:	f013 0f80 	tst.w	r3, #128	; 0x80
    5f16:	d00d      	beq.n	5f34 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5f18:	4b11      	ldr	r3, [pc, #68]	; (5f60 <le_phy_update_complete+0x78>)
    5f1a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5f1e:	f013 0f20 	tst.w	r3, #32
    5f22:	d004      	beq.n	5f2e <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5f24:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5f28:	f013 0f20 	tst.w	r3, #32
    5f2c:	d106      	bne.n	5f3c <le_phy_update_complete+0x54>
	update_conn_param(conn);
    5f2e:	4620      	mov	r0, r4
    5f30:	f7fe fce4 	bl	48fc <update_conn_param>
	bt_conn_unref(conn);
    5f34:	4620      	mov	r0, r4
    5f36:	f001 f955 	bl	71e4 <bt_conn_unref>
    5f3a:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    5f3c:	4620      	mov	r0, r4
    5f3e:	f7ff fdc6 	bl	5ace <hci_le_set_data_len>
		if (!err) {
    5f42:	2800      	cmp	r0, #0
    5f44:	d1f3      	bne.n	5f2e <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f46:	f3bf 8f5b 	dmb	ish
    5f4a:	e855 3f00 	ldrex	r3, [r5]
    5f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5f52:	e845 3200 	strex	r2, r3, [r5]
    5f56:	2a00      	cmp	r2, #0
    5f58:	d1f7      	bne.n	5f4a <le_phy_update_complete+0x62>
    5f5a:	f3bf 8f5b 	dmb	ish
    5f5e:	e7e9      	b.n	5f34 <le_phy_update_complete+0x4c>
    5f60:	2000b878 	.word	0x2000b878

00005f64 <le_conn_param_neg_reply>:
{
    5f64:	b570      	push	{r4, r5, r6, lr}
    5f66:	4606      	mov	r6, r0
    5f68:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5f6a:	2103      	movs	r1, #3
    5f6c:	f242 0021 	movw	r0, #8225	; 0x2021
    5f70:	f7fe fe00 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5f74:	b160      	cbz	r0, 5f90 <le_conn_param_neg_reply+0x2c>
    5f76:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5f78:	2103      	movs	r1, #3
    5f7a:	3008      	adds	r0, #8
    5f7c:	f014 fe56 	bl	1ac2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    5f80:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    5f82:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5f84:	4621      	mov	r1, r4
    5f86:	f242 0021 	movw	r0, #8225	; 0x2021
    5f8a:	f7ff fb51 	bl	5630 <bt_hci_cmd_send>
    5f8e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5f90:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5f94:	bd70      	pop	{r4, r5, r6, pc}

00005f96 <le_conn_param_req_reply>:
{
    5f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f98:	4607      	mov	r7, r0
    5f9a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5f9c:	210e      	movs	r1, #14
    5f9e:	f242 0020 	movw	r0, #8224	; 0x2020
    5fa2:	f7fe fde7 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    5fa6:	b1c0      	cbz	r0, 5fda <le_conn_param_req_reply+0x44>
    5fa8:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5faa:	210e      	movs	r1, #14
    5fac:	3008      	adds	r0, #8
    5fae:	f014 fe3d 	bl	1ac2c <net_buf_simple_add>
    5fb2:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5fb4:	220e      	movs	r2, #14
    5fb6:	2100      	movs	r1, #0
    5fb8:	f024 f90a 	bl	2a1d0 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    5fbc:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5fbe:	882b      	ldrh	r3, [r5, #0]
    5fc0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5fc2:	886b      	ldrh	r3, [r5, #2]
    5fc4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5fc6:	88ab      	ldrh	r3, [r5, #4]
    5fc8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5fca:	88eb      	ldrh	r3, [r5, #6]
    5fcc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5fce:	4631      	mov	r1, r6
    5fd0:	f242 0020 	movw	r0, #8224	; 0x2020
    5fd4:	f7ff fb2c 	bl	5630 <bt_hci_cmd_send>
    5fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    5fda:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005fe0 <le_conn_param_req_reply>:
{
    5fe0:	b570      	push	{r4, r5, r6, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    5fe6:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    5fe8:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    5fea:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    5fec:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    5fee:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5ff0:	9201      	str	r2, [sp, #4]
    5ff2:	9100      	str	r1, [sp, #0]
    5ff4:	2200      	movs	r2, #0
    5ff6:	2102      	movs	r1, #2
    5ff8:	b2a0      	uxth	r0, r4
    5ffa:	f012 f929 	bl	18250 <ll_conn_update>
    5ffe:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    6000:	2103      	movs	r1, #3
    6002:	4630      	mov	r0, r6
    6004:	f007 f91c 	bl	d240 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6008:	b12d      	cbz	r5, 6016 <le_conn_param_req_reply+0x36>
    600a:	230c      	movs	r3, #12
    600c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    600e:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    6012:	b002      	add	sp, #8
    6014:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6016:	2300      	movs	r3, #0
    6018:	e7f8      	b.n	600c <le_conn_param_req_reply+0x2c>
	...

0000601c <le_conn_param_req>:
{
    601c:	b530      	push	{r4, r5, lr}
    601e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6020:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6022:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6024:	885a      	ldrh	r2, [r3, #2]
    6026:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    602a:	889a      	ldrh	r2, [r3, #4]
    602c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6030:	88da      	ldrh	r2, [r3, #6]
    6032:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6036:	891b      	ldrh	r3, [r3, #8]
    6038:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    603c:	4620      	mov	r0, r4
    603e:	f001 f84d 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    6042:	b178      	cbz	r0, 6064 <le_conn_param_req+0x48>
    6044:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    6046:	4669      	mov	r1, sp
    6048:	f000 fdf6 	bl	6c38 <le_param_req>
    604c:	b980      	cbnz	r0, 6070 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    604e:	211e      	movs	r1, #30
    6050:	4620      	mov	r0, r4
    6052:	f7ff ff87 	bl	5f64 <le_conn_param_neg_reply>
    6056:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    6058:	4628      	mov	r0, r5
    605a:	f001 f8c3 	bl	71e4 <bt_conn_unref>
}
    605e:	4620      	mov	r0, r4
    6060:	b003      	add	sp, #12
    6062:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    6064:	2102      	movs	r1, #2
    6066:	4620      	mov	r0, r4
    6068:	f7ff ff7c 	bl	5f64 <le_conn_param_neg_reply>
    606c:	4604      	mov	r4, r0
    606e:	e7f6      	b.n	605e <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    6070:	4669      	mov	r1, sp
    6072:	4620      	mov	r0, r4
    6074:	f7ff ff8f 	bl	5f96 <le_conn_param_req_reply>
    6078:	4604      	mov	r4, r0
    607a:	e7ed      	b.n	6058 <le_conn_param_req+0x3c>

0000607c <le_conn_param_req>:
{
    607c:	b530      	push	{r4, r5, lr}
    607e:	b083      	sub	sp, #12
    6080:	4604      	mov	r4, r0
    6082:	460d      	mov	r5, r1
    6084:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6086:	4b14      	ldr	r3, [pc, #80]	; (60d8 <le_conn_param_req+0x5c>)
    6088:	e9d3 2300 	ldrd	r2, r3, [r3]
    608c:	2200      	movs	r2, #0
    608e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6092:	4313      	orrs	r3, r2
    6094:	d007      	beq.n	60a6 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    6096:	4b11      	ldr	r3, [pc, #68]	; (60dc <le_conn_param_req+0x60>)
    6098:	e9d3 2300 	ldrd	r2, r3, [r3]
    609c:	f002 0220 	and.w	r2, r2, #32
    60a0:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    60a2:	4313      	orrs	r3, r2
    60a4:	d109      	bne.n	60ba <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    60a6:	2300      	movs	r3, #0
    60a8:	9301      	str	r3, [sp, #4]
    60aa:	9300      	str	r3, [sp, #0]
    60ac:	221a      	movs	r2, #26
    60ae:	2102      	movs	r1, #2
    60b0:	4628      	mov	r0, r5
    60b2:	f012 f8cd 	bl	18250 <ll_conn_update>
}
    60b6:	b003      	add	sp, #12
    60b8:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    60ba:	220a      	movs	r2, #10
    60bc:	2106      	movs	r1, #6
    60be:	f007 f959 	bl	d374 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    60c2:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    60c4:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    60c6:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    60c8:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    60ca:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    60cc:	8923      	ldrh	r3, [r4, #8]
    60ce:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    60d0:	8963      	ldrh	r3, [r4, #10]
    60d2:	8103      	strh	r3, [r0, #8]
    60d4:	e7ef      	b.n	60b6 <le_conn_param_req+0x3a>
    60d6:	bf00      	nop
    60d8:	2000bb68 	.word	0x2000bb68
    60dc:	2000bb70 	.word	0x2000bb70

000060e0 <le_ltk_request>:
{
    60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e2:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    60e4:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    60e6:	8820      	ldrh	r0, [r4, #0]
    60e8:	f000 fff8 	bl	70dc <bt_conn_lookup_handle>
	if (!conn) {
    60ec:	2800      	cmp	r0, #0
    60ee:	d040      	beq.n	6172 <le_ltk_request+0x92>
    60f0:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    60f2:	f8d4 2002 	ldr.w	r2, [r4, #2]
    60f6:	f8d4 3006 	ldr.w	r3, [r4, #6]
    60fa:	4313      	orrs	r3, r2
    60fc:	d102      	bne.n	6104 <le_ltk_request+0x24>
    60fe:	8963      	ldrh	r3, [r4, #10]
    6100:	2b00      	cmp	r3, #0
    6102:	d038      	beq.n	6176 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    6104:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6106:	2b00      	cmp	r3, #0
    6108:	d053      	beq.n	61b2 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    610a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    610c:	b16b      	cbz	r3, 612a <le_ltk_request+0x4a>
    610e:	899a      	ldrh	r2, [r3, #12]
    6110:	f012 0f20 	tst.w	r2, #32
    6114:	d009      	beq.n	612a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    6116:	f8d4 0002 	ldr.w	r0, [r4, #2]
    611a:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    611e:	ea50 0201 	orrs.w	r2, r0, r1
    6122:	d102      	bne.n	612a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    6124:	8962      	ldrh	r2, [r4, #10]
    6126:	2a00      	cmp	r2, #0
    6128:	d052      	beq.n	61d0 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    612a:	b16b      	cbz	r3, 6148 <le_ltk_request+0x68>
    612c:	899a      	ldrh	r2, [r3, #12]
    612e:	f012 0f01 	tst.w	r2, #1
    6132:	d009      	beq.n	6148 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    6134:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    6138:	f8d4 6002 	ldr.w	r6, [r4, #2]
    613c:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    6140:	42b9      	cmp	r1, r7
    6142:	bf08      	it	eq
    6144:	42b0      	cmpeq	r0, r6
    6146:	d06a      	beq.n	621e <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    6148:	2102      	movs	r1, #2
    614a:	f242 001b 	movw	r0, #8219	; 0x201b
    614e:	f7fe fd11 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    6152:	4606      	mov	r6, r0
    6154:	b150      	cbz	r0, 616c <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    6156:	2102      	movs	r1, #2
    6158:	3008      	adds	r0, #8
    615a:	f014 fd67 	bl	1ac2c <net_buf_simple_add>
	cp->handle = evt->handle;
    615e:	8823      	ldrh	r3, [r4, #0]
    6160:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6162:	4631      	mov	r1, r6
    6164:	f242 001b 	movw	r0, #8219	; 0x201b
    6168:	f7ff fa62 	bl	5630 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    616c:	4628      	mov	r0, r5
    616e:	f001 f839 	bl	71e4 <bt_conn_unref>
}
    6172:	b005      	add	sp, #20
    6174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    6176:	4669      	mov	r1, sp
    6178:	f006 ff14 	bl	cfa4 <bt_smp_get_tk>
    617c:	2800      	cmp	r0, #0
    617e:	d0c1      	beq.n	6104 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6180:	2112      	movs	r1, #18
    6182:	f242 001a 	movw	r0, #8218	; 0x201a
    6186:	f7fe fcf5 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    618a:	4606      	mov	r6, r0
    618c:	2800      	cmp	r0, #0
    618e:	d0ed      	beq.n	616c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6190:	2112      	movs	r1, #18
    6192:	3008      	adds	r0, #8
    6194:	f014 fd4a 	bl	1ac2c <net_buf_simple_add>
		cp->handle = evt->handle;
    6198:	8823      	ldrh	r3, [r4, #0]
    619a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    619e:	2210      	movs	r2, #16
    61a0:	4669      	mov	r1, sp
    61a2:	f7fa f88d 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    61a6:	4631      	mov	r1, r6
    61a8:	f242 001a 	movw	r0, #8218	; 0x201a
    61ac:	f7ff fa40 	bl	5630 <bt_hci_cmd_send>
		goto done;
    61b0:	e7dc      	b.n	616c <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    61b2:	f105 0648 	add.w	r6, r5, #72	; 0x48
    61b6:	4631      	mov	r1, r6
    61b8:	2020      	movs	r0, #32
    61ba:	f006 ff59 	bl	d070 <bt_keys_find>
    61be:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    61c0:	2800      	cmp	r0, #0
    61c2:	d1a2      	bne.n	610a <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    61c4:	4631      	mov	r1, r6
    61c6:	2001      	movs	r0, #1
    61c8:	f006 ff52 	bl	d070 <bt_keys_find>
    61cc:	6728      	str	r0, [r5, #112]	; 0x70
    61ce:	e79c      	b.n	610a <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    61d0:	2112      	movs	r1, #18
    61d2:	f242 001a 	movw	r0, #8218	; 0x201a
    61d6:	f7fe fccd 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    61da:	4606      	mov	r6, r0
    61dc:	2800      	cmp	r0, #0
    61de:	d0c5      	beq.n	616c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    61e0:	2112      	movs	r1, #18
    61e2:	3008      	adds	r0, #8
    61e4:	f014 fd22 	bl	1ac2c <net_buf_simple_add>
		cp->handle = evt->handle;
    61e8:	8823      	ldrh	r3, [r4, #0]
    61ea:	4604      	mov	r4, r0
    61ec:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    61f0:	6f29      	ldr	r1, [r5, #112]	; 0x70
    61f2:	79ca      	ldrb	r2, [r1, #7]
    61f4:	311a      	adds	r1, #26
    61f6:	4620      	mov	r0, r4
    61f8:	f7fa f862 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    61fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    61fe:	79d8      	ldrb	r0, [r3, #7]
    6200:	280f      	cmp	r0, #15
    6202:	d905      	bls.n	6210 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6204:	4631      	mov	r1, r6
    6206:	f242 001a 	movw	r0, #8218	; 0x201a
    620a:	f7ff fa11 	bl	5630 <bt_hci_cmd_send>
		goto done;
    620e:	e7ad      	b.n	616c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6210:	f1c0 0210 	rsb	r2, r0, #16
    6214:	2100      	movs	r1, #0
    6216:	4420      	add	r0, r4
    6218:	f023 ffda 	bl	2a1d0 <memset>
    621c:	e7f2      	b.n	6204 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    621e:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    6222:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    6224:	429a      	cmp	r2, r3
    6226:	d18f      	bne.n	6148 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6228:	2112      	movs	r1, #18
    622a:	f242 001a 	movw	r0, #8218	; 0x201a
    622e:	f7fe fca1 	bl	4b74 <bt_hci_cmd_create>
		if (!buf) {
    6232:	4606      	mov	r6, r0
    6234:	2800      	cmp	r0, #0
    6236:	d099      	beq.n	616c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6238:	2112      	movs	r1, #18
    623a:	3008      	adds	r0, #8
    623c:	f014 fcf6 	bl	1ac2c <net_buf_simple_add>
		cp->handle = evt->handle;
    6240:	8823      	ldrh	r3, [r4, #0]
    6242:	4604      	mov	r4, r0
    6244:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    6248:	6f29      	ldr	r1, [r5, #112]	; 0x70
    624a:	79ca      	ldrb	r2, [r1, #7]
    624c:	317a      	adds	r1, #122	; 0x7a
    624e:	4620      	mov	r0, r4
    6250:	f7fa f836 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6254:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6256:	79d8      	ldrb	r0, [r3, #7]
    6258:	280f      	cmp	r0, #15
    625a:	d905      	bls.n	6268 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    625c:	4631      	mov	r1, r6
    625e:	f242 001a 	movw	r0, #8218	; 0x201a
    6262:	f7ff f9e5 	bl	5630 <bt_hci_cmd_send>
		goto done;
    6266:	e781      	b.n	616c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6268:	f1c0 0210 	rsb	r2, r0, #16
    626c:	2100      	movs	r1, #0
    626e:	4420      	add	r0, r4
    6270:	f023 ffae 	bl	2a1d0 <memset>
    6274:	e7f2      	b.n	625c <le_ltk_request+0x17c>
	...

00006278 <le_ltk_request>:
{
    6278:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    627a:	4b15      	ldr	r3, [pc, #84]	; (62d0 <le_ltk_request+0x58>)
    627c:	e9d3 4500 	ldrd	r4, r5, [r3]
    6280:	2400      	movs	r4, #0
    6282:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6286:	ea54 0305 	orrs.w	r3, r4, r5
    628a:	d008      	beq.n	629e <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    628c:	4b11      	ldr	r3, [pc, #68]	; (62d4 <le_ltk_request+0x5c>)
    628e:	e9d3 4500 	ldrd	r4, r5, [r3]
    6292:	f004 0410 	and.w	r4, r4, #16
    6296:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6298:	ea54 0305 	orrs.w	r3, r4, r5
    629c:	d100      	bne.n	62a0 <le_ltk_request+0x28>
    629e:	bd70      	pop	{r4, r5, r6, pc}
    62a0:	4613      	mov	r3, r2
    62a2:	460d      	mov	r5, r1
    62a4:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    62a6:	220c      	movs	r2, #12
    62a8:	2105      	movs	r1, #5
    62aa:	4618      	mov	r0, r3
    62ac:	f007 f862 	bl	d374 <meta_evt>
    62b0:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    62b2:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    62b6:	2208      	movs	r2, #8
    62b8:	1d21      	adds	r1, r4, #4
    62ba:	f7fa f801 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    62be:	2202      	movs	r2, #2
    62c0:	f104 010c 	add.w	r1, r4, #12
    62c4:	f106 000a 	add.w	r0, r6, #10
    62c8:	f7f9 fffa 	bl	2c0 <memcpy>
    62cc:	e7e7      	b.n	629e <le_ltk_request+0x26>
    62ce:	bf00      	nop
    62d0:	2000bb68 	.word	0x2000bb68
    62d4:	2000bb70 	.word	0x2000bb70

000062d8 <hci_le_meta_event>:
{
    62d8:	b538      	push	{r3, r4, r5, lr}
    62da:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    62dc:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    62e0:	2101      	movs	r1, #1
    62e2:	f014 fcf0 	bl	1acc6 <net_buf_simple_pull>
	switch (evt->subevent) {
    62e6:	782b      	ldrb	r3, [r5, #0]
    62e8:	3b01      	subs	r3, #1
    62ea:	2b0b      	cmp	r3, #11
    62ec:	d82e      	bhi.n	634c <hci_le_meta_event+0x74>
    62ee:	e8df f003 	tbb	[pc, r3]
    62f2:	2a06      	.short	0x2a06
    62f4:	121e0e0a 	.word	0x121e0e0a
    62f8:	2d262216 	.word	0x2d262216
    62fc:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    62fe:	4620      	mov	r0, r4
    6300:	f7ff fc14 	bl	5b2c <le_conn_complete>
		break;
    6304:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    6306:	4620      	mov	r0, r4
    6308:	f7fe fb52 	bl	49b0 <le_conn_update_complete>
		break;
    630c:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    630e:	4620      	mov	r0, r4
    6310:	f7ff fd66 	bl	5de0 <le_remote_feat_complete>
		break;
    6314:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    6316:	4620      	mov	r0, r4
    6318:	f7ff fe80 	bl	601c <le_conn_param_req>
		break;
    631c:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    631e:	4620      	mov	r0, r4
    6320:	f7fe fafc 	bl	491c <le_data_len_change>
		break;
    6324:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    6326:	4620      	mov	r0, r4
    6328:	f7ff fdde 	bl	5ee8 <le_phy_update_complete>
		break;
    632c:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    632e:	4620      	mov	r0, r4
    6330:	f7ff fed6 	bl	60e0 <le_ltk_request>
		break;
    6334:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    6336:	4620      	mov	r0, r4
    6338:	f7fe f9f0 	bl	471c <le_pkey_complete>
		break;
    633c:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    633e:	4620      	mov	r0, r4
    6340:	f7fe f916 	bl	4570 <le_dhkey_complete>
		break;
    6344:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    6346:	4620      	mov	r0, r4
    6348:	f7ff fb3c 	bl	59c4 <le_adv_report>
    634c:	bd38      	pop	{r3, r4, r5, pc}

0000634e <hci_event>:
{
    634e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6350:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6352:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    6354:	2b0e      	cmp	r3, #14
    6356:	d316      	bcc.n	6386 <hci_event+0x38>
    6358:	2b0f      	cmp	r3, #15
    635a:	d901      	bls.n	6360 <hci_event+0x12>
    635c:	2b13      	cmp	r3, #19
    635e:	d112      	bne.n	6386 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    6360:	2301      	movs	r3, #1
    6362:	b993      	cbnz	r3, 638a <hci_event+0x3c>
    6364:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6366:	2102      	movs	r1, #2
    6368:	3008      	adds	r0, #8
    636a:	f014 fcac 	bl	1acc6 <net_buf_simple_pull>
	switch (hdr->evt) {
    636e:	782b      	ldrb	r3, [r5, #0]
    6370:	2b08      	cmp	r3, #8
    6372:	d019      	beq.n	63a8 <hci_event+0x5a>
    6374:	d90f      	bls.n	6396 <hci_event+0x48>
    6376:	2b30      	cmp	r3, #48	; 0x30
    6378:	d01a      	beq.n	63b0 <hci_event+0x62>
    637a:	2b3e      	cmp	r3, #62	; 0x3e
    637c:	d110      	bne.n	63a0 <hci_event+0x52>
		hci_le_meta_event(buf);
    637e:	4620      	mov	r0, r4
    6380:	f7ff ffaa 	bl	62d8 <hci_le_meta_event>
		break;
    6384:	e00c      	b.n	63a0 <hci_event+0x52>
	default:
		return false;
    6386:	2300      	movs	r3, #0
    6388:	e7eb      	b.n	6362 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    638a:	4040      	eors	r0, r0
    638c:	f380 8811 	msr	BASEPRI, r0
    6390:	f04f 0004 	mov.w	r0, #4
    6394:	df02      	svc	2
	switch (hdr->evt) {
    6396:	2b05      	cmp	r3, #5
    6398:	d102      	bne.n	63a0 <hci_event+0x52>
		hci_disconn_complete(buf);
    639a:	4620      	mov	r0, r4
    639c:	f7ff fa54 	bl	5848 <hci_disconn_complete>
	net_buf_unref(buf);
    63a0:	4620      	mov	r0, r4
    63a2:	f014 fbf7 	bl	1ab94 <net_buf_unref>
    63a6:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    63a8:	4620      	mov	r0, r4
    63aa:	f7fe fa56 	bl	485a <hci_encrypt_change>
		break;
    63ae:	e7f7      	b.n	63a0 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    63b0:	4620      	mov	r0, r4
    63b2:	f7fe fa7a 	bl	48aa <hci_encrypt_key_refresh_complete>
		break;
    63b6:	e7f3      	b.n	63a0 <hci_event+0x52>

000063b8 <send_cmd>:
{
    63b8:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    63ba:	2100      	movs	r1, #0
    63bc:	4820      	ldr	r0, [pc, #128]	; (6440 <send_cmd+0x88>)
    63be:	f014 fbbc 	bl	1ab3a <net_buf_get>
	BT_ASSERT(buf);
    63c2:	b1d0      	cbz	r0, 63fa <send_cmd+0x42>
    63c4:	4604      	mov	r4, r0
    63c6:	4d1f      	ldr	r5, [pc, #124]	; (6444 <send_cmd+0x8c>)
    63c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    63cc:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    63d0:	f022 ff3e 	bl	29250 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    63d4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    63d8:	b120      	cbz	r0, 63e4 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    63da:	f014 fbdb 	bl	1ab94 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    63de:	2200      	movs	r2, #0
    63e0:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    63e4:	4620      	mov	r0, r4
    63e6:	f014 fbf1 	bl	1abcc <net_buf_ref>
    63ea:	4b16      	ldr	r3, [pc, #88]	; (6444 <send_cmd+0x8c>)
    63ec:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    63f0:	4620      	mov	r0, r4
    63f2:	f7ff f913 	bl	561c <bt_send>
	if (err) {
    63f6:	b930      	cbnz	r0, 6406 <send_cmd+0x4e>
    63f8:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    63fa:	4040      	eors	r0, r0
    63fc:	f380 8811 	msr	BASEPRI, r0
    6400:	f04f 0004 	mov.w	r0, #4
    6404:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6406:	4d0f      	ldr	r5, [pc, #60]	; (6444 <send_cmd+0x8c>)
    6408:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    640c:	f022 ff0d 	bl	2922a <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    6410:	f104 0310 	add.w	r3, r4, #16
    6414:	89e2      	ldrh	r2, [r4, #14]
    6416:	4413      	add	r3, r2
    6418:	3303      	adds	r3, #3
    641a:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    641e:	2200      	movs	r2, #0
    6420:	211f      	movs	r1, #31
    6422:	8858      	ldrh	r0, [r3, #2]
    6424:	f7fe fb10 	bl	4a48 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6428:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    642c:	f014 fbb2 	bl	1ab94 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6430:	2300      	movs	r3, #0
    6432:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    6436:	4620      	mov	r0, r4
    6438:	f014 fbac 	bl	1ab94 <net_buf_unref>
}
    643c:	e7dc      	b.n	63f8 <send_cmd+0x40>
    643e:	bf00      	nop
    6440:	2000b94c 	.word	0x2000b94c
    6444:	2000b878 	.word	0x2000b878

00006448 <process_events>:
{
    6448:	b538      	push	{r3, r4, r5, lr}
    644a:	4604      	mov	r4, r0
    644c:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    644e:	e003      	b.n	6458 <process_events+0x10>
				send_cmd();
    6450:	f7ff ffb2 	bl	63b8 <send_cmd>
	for (; count; ev++, count--) {
    6454:	3414      	adds	r4, #20
    6456:	3d01      	subs	r5, #1
    6458:	b1a5      	cbz	r5, 6484 <process_events+0x3c>
		switch (ev->state) {
    645a:	7b63      	ldrb	r3, [r4, #13]
    645c:	091b      	lsrs	r3, r3, #4
    645e:	2b04      	cmp	r3, #4
    6460:	d1f8      	bne.n	6454 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6462:	7b23      	ldrb	r3, [r4, #12]
    6464:	2b00      	cmp	r3, #0
    6466:	d0f3      	beq.n	6450 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6468:	2b01      	cmp	r3, #1
    646a:	d006      	beq.n	647a <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    646c:	2b02      	cmp	r3, #2
    646e:	d1f1      	bne.n	6454 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6470:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    6472:	382c      	subs	r0, #44	; 0x2c
    6474:	f001 f9c8 	bl	7808 <bt_conn_process_tx>
    6478:	e7ec      	b.n	6454 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    647a:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    647c:	381c      	subs	r0, #28
    647e:	f000 fd65 	bl	6f4c <bt_conn_notify_tx>
    6482:	e7e7      	b.n	6454 <process_events+0xc>
}
    6484:	bd38      	pop	{r3, r4, r5, pc}
	...

00006488 <hci_tx_thread>:
{
    6488:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    648a:	4c0f      	ldr	r4, [pc, #60]	; (64c8 <hci_tx_thread+0x40>)
    648c:	7b63      	ldrb	r3, [r4, #13]
    648e:	f36f 1307 	bfc	r3, #4, #4
    6492:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    6494:	f104 0014 	add.w	r0, r4, #20
    6498:	f000 feca 	bl	7230 <bt_conn_prepare_events>
    649c:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    649e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64a2:	4629      	mov	r1, r5
    64a4:	4620      	mov	r0, r4
    64a6:	f022 f81f 	bl	284e8 <k_poll>
		BT_ASSERT(err == 0);
    64aa:	b930      	cbnz	r0, 64ba <hci_tx_thread+0x32>
		process_events(events, ev_count);
    64ac:	4629      	mov	r1, r5
    64ae:	4806      	ldr	r0, [pc, #24]	; (64c8 <hci_tx_thread+0x40>)
    64b0:	f7ff ffca 	bl	6448 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    64b4:	f022 fd60 	bl	28f78 <_impl_k_yield>
    64b8:	e7e7      	b.n	648a <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    64ba:	4040      	eors	r0, r0
    64bc:	f380 8811 	msr	BASEPRI, r0
    64c0:	f04f 0004 	mov.w	r0, #4
    64c4:	df02      	svc	2
    64c6:	bf00      	nop
    64c8:	2000b960 	.word	0x2000b960

000064cc <bt_recv>:
{
    64cc:	b510      	push	{r4, lr}
    64ce:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    64d0:	7980      	ldrb	r0, [r0, #6]
    64d2:	f014 fae5 	bl	1aaa0 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    64d6:	8ac3      	ldrh	r3, [r0, #22]
    64d8:	2b03      	cmp	r3, #3
    64da:	d910      	bls.n	64fe <bt_recv+0x32>
    64dc:	f104 0310 	add.w	r3, r4, #16
    64e0:	89e2      	ldrh	r2, [r4, #14]
    64e2:	4413      	add	r3, r2
    64e4:	3303      	adds	r3, #3
    64e6:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    64ea:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    64ec:	2b01      	cmp	r3, #1
    64ee:	d00c      	beq.n	650a <bt_recv+0x3e>
    64f0:	2b03      	cmp	r3, #3
    64f2:	d10f      	bne.n	6514 <bt_recv+0x48>
		hci_acl(buf);
    64f4:	4620      	mov	r0, r4
    64f6:	f7fe f949 	bl	478c <hci_acl>
		return 0;
    64fa:	2000      	movs	r0, #0
    64fc:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    64fe:	4620      	mov	r0, r4
    6500:	f014 fb48 	bl	1ab94 <net_buf_unref>
		return -EINVAL;
    6504:	f06f 0015 	mvn.w	r0, #21
    6508:	bd10      	pop	{r4, pc}
		hci_event(buf);
    650a:	4620      	mov	r0, r4
    650c:	f7ff ff1f 	bl	634e <hci_event>
		return 0;
    6510:	2000      	movs	r0, #0
    6512:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    6514:	4620      	mov	r0, r4
    6516:	f014 fb3d 	bl	1ab94 <net_buf_unref>
		return -EINVAL;
    651a:	f06f 0015 	mvn.w	r0, #21
}
    651e:	bd10      	pop	{r4, pc}

00006520 <bt_recv_prio>:
{
    6520:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6522:	6885      	ldr	r5, [r0, #8]
    6524:	f100 0310 	add.w	r3, r0, #16
    6528:	89c2      	ldrh	r2, [r0, #14]
    652a:	4413      	add	r3, r2
    652c:	3303      	adds	r3, #3
    652e:	f023 0303 	bic.w	r3, r3, #3
    6532:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6534:	2b01      	cmp	r3, #1
    6536:	d120      	bne.n	657a <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6538:	8983      	ldrh	r3, [r0, #12]
    653a:	2b01      	cmp	r3, #1
    653c:	d923      	bls.n	6586 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    653e:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    6540:	2b0e      	cmp	r3, #14
    6542:	d326      	bcc.n	6592 <bt_recv_prio+0x72>
    6544:	2b0f      	cmp	r3, #15
    6546:	d901      	bls.n	654c <bt_recv_prio+0x2c>
    6548:	2b13      	cmp	r3, #19
    654a:	d122      	bne.n	6592 <bt_recv_prio+0x72>
		return true;
    654c:	2301      	movs	r3, #1
    654e:	b313      	cbz	r3, 6596 <bt_recv_prio+0x76>
    6550:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6552:	2102      	movs	r1, #2
    6554:	3008      	adds	r0, #8
    6556:	f014 fbb6 	bl	1acc6 <net_buf_simple_pull>
	switch (hdr->evt) {
    655a:	782b      	ldrb	r3, [r5, #0]
    655c:	2b0f      	cmp	r3, #15
    655e:	d028      	beq.n	65b2 <bt_recv_prio+0x92>
    6560:	2b13      	cmp	r3, #19
    6562:	d02a      	beq.n	65ba <bt_recv_prio+0x9a>
    6564:	2b0e      	cmp	r3, #14
    6566:	d01c      	beq.n	65a2 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    6568:	4620      	mov	r0, r4
    656a:	f014 fb13 	bl	1ab94 <net_buf_unref>
		BT_ASSERT(0);
    656e:	4040      	eors	r0, r0
    6570:	f380 8811 	msr	BASEPRI, r0
    6574:	f04f 0004 	mov.w	r0, #4
    6578:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    657a:	4040      	eors	r0, r0
    657c:	f380 8811 	msr	BASEPRI, r0
    6580:	f04f 0004 	mov.w	r0, #4
    6584:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6586:	4040      	eors	r0, r0
    6588:	f380 8811 	msr	BASEPRI, r0
    658c:	f04f 0004 	mov.w	r0, #4
    6590:	df02      	svc	2
		return false;
    6592:	2300      	movs	r3, #0
    6594:	e7db      	b.n	654e <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6596:	4040      	eors	r0, r0
    6598:	f380 8811 	msr	BASEPRI, r0
    659c:	f04f 0004 	mov.w	r0, #4
    65a0:	df02      	svc	2
		hci_cmd_complete(buf);
    65a2:	4620      	mov	r0, r4
    65a4:	f7fe fa70 	bl	4a88 <hci_cmd_complete>
	net_buf_unref(buf);
    65a8:	4620      	mov	r0, r4
    65aa:	f014 faf3 	bl	1ab94 <net_buf_unref>
}
    65ae:	2000      	movs	r0, #0
    65b0:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    65b2:	4620      	mov	r0, r4
    65b4:	f7fe fa80 	bl	4ab8 <hci_cmd_status>
		break;
    65b8:	e7f6      	b.n	65a8 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    65ba:	4620      	mov	r0, r4
    65bc:	f7fe fa92 	bl	4ae4 <hci_num_completed_packets>
		break;
    65c0:	e7f2      	b.n	65a8 <bt_recv_prio+0x88>
	...

000065c4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    65c4:	4b0a      	ldr	r3, [pc, #40]	; (65f0 <bt_hci_driver_register+0x2c>)
    65c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    65ca:	b943      	cbnz	r3, 65de <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    65cc:	6883      	ldr	r3, [r0, #8]
    65ce:	b14b      	cbz	r3, 65e4 <bt_hci_driver_register+0x20>
    65d0:	68c3      	ldr	r3, [r0, #12]
    65d2:	b153      	cbz	r3, 65ea <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    65d4:	4b06      	ldr	r3, [pc, #24]	; (65f0 <bt_hci_driver_register+0x2c>)
    65d6:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    65da:	2000      	movs	r0, #0
    65dc:	4770      	bx	lr
		return -EALREADY;
    65de:	f06f 0077 	mvn.w	r0, #119	; 0x77
    65e2:	4770      	bx	lr
		return -EINVAL;
    65e4:	f06f 0015 	mvn.w	r0, #21
    65e8:	4770      	bx	lr
    65ea:	f06f 0015 	mvn.w	r0, #21
}
    65ee:	4770      	bx	lr
    65f0:	2000b878 	.word	0x2000b878

000065f4 <bt_enable>:
{
    65f4:	b530      	push	{r4, r5, lr}
    65f6:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    65f8:	4b29      	ldr	r3, [pc, #164]	; (66a0 <bt_enable+0xac>)
    65fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    65fe:	2b00      	cmp	r3, #0
    6600:	d047      	beq.n	6692 <bt_enable+0x9e>
    6602:	4b28      	ldr	r3, [pc, #160]	; (66a4 <bt_enable+0xb0>)
    6604:	f3bf 8f5b 	dmb	ish
    6608:	e853 2f00 	ldrex	r2, [r3]
    660c:	f042 0101 	orr.w	r1, r2, #1
    6610:	e843 1400 	strex	r4, r1, [r3]
    6614:	2c00      	cmp	r4, #0
    6616:	d1f7      	bne.n	6608 <bt_enable+0x14>
    6618:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    661c:	f012 0f01 	tst.w	r2, #1
    6620:	d13a      	bne.n	6698 <bt_enable+0xa4>
    6622:	4604      	mov	r4, r0
	ready_cb = cb;
    6624:	4b20      	ldr	r3, [pc, #128]	; (66a8 <bt_enable+0xb4>)
    6626:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    6628:	2300      	movs	r3, #0
    662a:	9305      	str	r3, [sp, #20]
    662c:	9304      	str	r3, [sp, #16]
    662e:	f06f 0208 	mvn.w	r2, #8
    6632:	9203      	str	r2, [sp, #12]
    6634:	9302      	str	r3, [sp, #8]
    6636:	9301      	str	r3, [sp, #4]
    6638:	9300      	str	r3, [sp, #0]
    663a:	4b1c      	ldr	r3, [pc, #112]	; (66ac <bt_enable+0xb8>)
    663c:	f44f 7220 	mov.w	r2, #640	; 0x280
    6640:	491b      	ldr	r1, [pc, #108]	; (66b0 <bt_enable+0xbc>)
    6642:	481c      	ldr	r0, [pc, #112]	; (66b4 <bt_enable+0xc0>)
    6644:	f023 f870 	bl	29728 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    6648:	4b15      	ldr	r3, [pc, #84]	; (66a0 <bt_enable+0xac>)
    664a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    664e:	689b      	ldr	r3, [r3, #8]
    6650:	4798      	blx	r3
	if (err) {
    6652:	4605      	mov	r5, r0
    6654:	b980      	cbnz	r0, 6678 <bt_enable+0x84>
	if (!cb) {
    6656:	b194      	cbz	r4, 667e <bt_enable+0x8a>
    6658:	4b17      	ldr	r3, [pc, #92]	; (66b8 <bt_enable+0xc4>)
    665a:	f3bf 8f5b 	dmb	ish
    665e:	e853 2f00 	ldrex	r2, [r3]
    6662:	f042 0101 	orr.w	r1, r2, #1
    6666:	e843 1000 	strex	r0, r1, [r3]
    666a:	2800      	cmp	r0, #0
    666c:	d1f7      	bne.n	665e <bt_enable+0x6a>
    666e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6672:	f012 0f01 	tst.w	r2, #1
    6676:	d006      	beq.n	6686 <bt_enable+0x92>
}
    6678:	4628      	mov	r0, r5
    667a:	b007      	add	sp, #28
    667c:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    667e:	f7ff f8bb 	bl	57f8 <bt_init>
    6682:	4605      	mov	r5, r0
    6684:	e7f8      	b.n	6678 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    6686:	f1a3 0108 	sub.w	r1, r3, #8
    668a:	480c      	ldr	r0, [pc, #48]	; (66bc <bt_enable+0xc8>)
    668c:	f022 fa36 	bl	28afc <k_queue_append>
    6690:	e7f2      	b.n	6678 <bt_enable+0x84>
		return -ENODEV;
    6692:	f06f 0512 	mvn.w	r5, #18
    6696:	e7ef      	b.n	6678 <bt_enable+0x84>
		return -EALREADY;
    6698:	f06f 0577 	mvn.w	r5, #119	; 0x77
    669c:	e7ec      	b.n	6678 <bt_enable+0x84>
    669e:	bf00      	nop
    66a0:	2000b878 	.word	0x2000b878
    66a4:	2000b8e8 	.word	0x2000b8e8
    66a8:	20000324 	.word	0x20000324
    66ac:	00006489 	.word	0x00006489
    66b0:	20003c18 	.word	0x20003c18
    66b4:	2000032c 	.word	0x2000032c
    66b8:	2000b8e4 	.word	0x2000b8e4
    66bc:	20002b78 	.word	0x20002b78

000066c0 <bt_addr_le_is_bonded>:
{
    66c0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    66c2:	f006 fd51 	bl	d168 <bt_keys_find_addr>
		return keys && keys->keys;
    66c6:	b118      	cbz	r0, 66d0 <bt_addr_le_is_bonded+0x10>
    66c8:	8983      	ldrh	r3, [r0, #12]
    66ca:	b91b      	cbnz	r3, 66d4 <bt_addr_le_is_bonded+0x14>
    66cc:	2000      	movs	r0, #0
    66ce:	bd08      	pop	{r3, pc}
    66d0:	2000      	movs	r0, #0
    66d2:	bd08      	pop	{r3, pc}
    66d4:	2001      	movs	r0, #1
}
    66d6:	bd08      	pop	{r3, pc}

000066d8 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    66d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66dc:	4605      	mov	r5, r0
    66de:	460c      	mov	r4, r1
    66e0:	4617      	mov	r7, r2
    66e2:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    66e4:	f7fd ff88 	bl	45f8 <valid_adv_param>
    66e8:	2800      	cmp	r0, #0
    66ea:	f000 808d 	beq.w	6808 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    66ee:	f3bf 8f5b 	dmb	ish
    66f2:	4b4b      	ldr	r3, [pc, #300]	; (6820 <bt_le_adv_start+0x148>)
    66f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    66f6:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    66fa:	f013 0f20 	tst.w	r3, #32
    66fe:	f040 8086 	bne.w	680e <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    6702:	463a      	mov	r2, r7
    6704:	4621      	mov	r1, r4
    6706:	f242 0008 	movw	r0, #8200	; 0x2008
    670a:	f7fe fe52 	bl	53b2 <set_ad>
	if (err) {
    670e:	4604      	mov	r4, r0
    6710:	2800      	cmp	r0, #0
    6712:	d13b      	bne.n	678c <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6714:	2e00      	cmp	r6, #0
    6716:	d03c      	beq.n	6792 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6718:	9a06      	ldr	r2, [sp, #24]
    671a:	4631      	mov	r1, r6
    671c:	f242 0009 	movw	r0, #8201	; 0x2009
    6720:	f7fe fe47 	bl	53b2 <set_ad>
		if (err) {
    6724:	4604      	mov	r4, r0
    6726:	bb88      	cbnz	r0, 678c <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    6728:	210f      	movs	r1, #15
    672a:	f242 0006 	movw	r0, #8198	; 0x2006
    672e:	f7fe fa21 	bl	4b74 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    6732:	4680      	mov	r8, r0
    6734:	2800      	cmp	r0, #0
    6736:	d06d      	beq.n	6814 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    6738:	210f      	movs	r1, #15
    673a:	3008      	adds	r0, #8
    673c:	f014 fa76 	bl	1ac2c <net_buf_simple_add>
    6740:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    6742:	220f      	movs	r2, #15
    6744:	2100      	movs	r1, #0
    6746:	f023 fd43 	bl	2a1d0 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    674a:	886b      	ldrh	r3, [r5, #2]
    674c:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    674e:	88ab      	ldrh	r3, [r5, #4]
    6750:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    6752:	2307      	movs	r3, #7
    6754:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    6756:	782b      	ldrb	r3, [r5, #0]
    6758:	f013 0f01 	tst.w	r3, #1
    675c:	d11e      	bne.n	679c <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    675e:	68a8      	ldr	r0, [r5, #8]
    6760:	b378      	cbz	r0, 67c2 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    6762:	7943      	ldrb	r3, [r0, #5]
    6764:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6768:	d157      	bne.n	681a <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    676a:	f7fe fd0b 	bl	5184 <set_random_address>
    676e:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    6770:	bb5c      	cbnz	r4, 67ca <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    6772:	2301      	movs	r3, #1
    6774:	717b      	strb	r3, [r7, #5]

		if (sd) {
    6776:	b366      	cbz	r6, 67d2 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    6778:	2302      	movs	r3, #2
    677a:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    677c:	2200      	movs	r2, #0
    677e:	4641      	mov	r1, r8
    6780:	f242 0006 	movw	r0, #8198	; 0x2006
    6784:	f7fe fa22 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    6788:	4604      	mov	r4, r0
    678a:	b328      	cbz	r0, 67d8 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    678c:	4620      	mov	r0, r4
    678e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6792:	782b      	ldrb	r3, [r5, #0]
    6794:	f013 0f01 	tst.w	r3, #1
    6798:	d0c6      	beq.n	6728 <bt_le_adv_start+0x50>
    679a:	e7bd      	b.n	6718 <bt_le_adv_start+0x40>
    679c:	f3bf 8f5b 	dmb	ish
    67a0:	4b1f      	ldr	r3, [pc, #124]	; (6820 <bt_le_adv_start+0x148>)
    67a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    67a4:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    67a8:	f013 0f04 	tst.w	r3, #4
    67ac:	d105      	bne.n	67ba <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    67ae:	4b1c      	ldr	r3, [pc, #112]	; (6820 <bt_le_adv_start+0x148>)
    67b0:	781b      	ldrb	r3, [r3, #0]
    67b2:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    67b4:	2300      	movs	r3, #0
    67b6:	713b      	strb	r3, [r7, #4]
    67b8:	e7e0      	b.n	677c <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    67ba:	481a      	ldr	r0, [pc, #104]	; (6824 <bt_le_adv_start+0x14c>)
    67bc:	f7fe fce2 	bl	5184 <set_random_address>
    67c0:	e7f5      	b.n	67ae <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    67c2:	f7fe fd0f 	bl	51e4 <le_set_private_addr>
    67c6:	4604      	mov	r4, r0
    67c8:	e7d2      	b.n	6770 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    67ca:	4640      	mov	r0, r8
    67cc:	f014 f9e2 	bl	1ab94 <net_buf_unref>
			return err;
    67d0:	e7dc      	b.n	678c <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    67d2:	2303      	movs	r3, #3
    67d4:	713b      	strb	r3, [r7, #4]
    67d6:	e7d1      	b.n	677c <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    67d8:	2001      	movs	r0, #1
    67da:	f7fe fd71 	bl	52c0 <set_advertise_enable>
	if (err) {
    67de:	4604      	mov	r4, r0
    67e0:	2800      	cmp	r0, #0
    67e2:	d1d3      	bne.n	678c <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    67e4:	782b      	ldrb	r3, [r5, #0]
    67e6:	f013 0f02 	tst.w	r3, #2
    67ea:	d1cf      	bne.n	678c <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    67ec:	4b0e      	ldr	r3, [pc, #56]	; (6828 <bt_le_adv_start+0x150>)
    67ee:	f3bf 8f5b 	dmb	ish
    67f2:	e853 2f00 	ldrex	r2, [r3]
    67f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    67fa:	e843 2100 	strex	r1, r2, [r3]
    67fe:	2900      	cmp	r1, #0
    6800:	d1f7      	bne.n	67f2 <bt_le_adv_start+0x11a>
    6802:	f3bf 8f5b 	dmb	ish
    6806:	e7c1      	b.n	678c <bt_le_adv_start+0xb4>
		return -EINVAL;
    6808:	f06f 0415 	mvn.w	r4, #21
    680c:	e7be      	b.n	678c <bt_le_adv_start+0xb4>
		return -EALREADY;
    680e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6812:	e7bb      	b.n	678c <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    6814:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6818:	e7b8      	b.n	678c <bt_le_adv_start+0xb4>
				return -EINVAL;
    681a:	f06f 0415 	mvn.w	r4, #21
    681e:	e7b5      	b.n	678c <bt_le_adv_start+0xb4>
    6820:	2000b878 	.word	0x2000b878
    6824:	2000b879 	.word	0x2000b879
    6828:	2000b8e8 	.word	0x2000b8e8

0000682c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    682c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    682e:	4b16      	ldr	r3, [pc, #88]	; (6888 <bt_le_adv_stop+0x5c>)
    6830:	f103 0270 	add.w	r2, r3, #112	; 0x70
    6834:	f3bf 8f5b 	dmb	ish
    6838:	e852 1f00 	ldrex	r1, [r2]
    683c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    6840:	e842 1000 	strex	r0, r1, [r2]
    6844:	2800      	cmp	r0, #0
    6846:	d1f7      	bne.n	6838 <bt_le_adv_stop+0xc>
    6848:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    684c:	f3bf 8f5b 	dmb	ish
    6850:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    6852:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6856:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    685a:	b90c      	cbnz	r4, 6860 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    685c:	4620      	mov	r0, r4
    685e:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6860:	2000      	movs	r0, #0
    6862:	f7fe fd2d 	bl	52c0 <set_advertise_enable>
	if (err) {
    6866:	4604      	mov	r4, r0
    6868:	2800      	cmp	r0, #0
    686a:	d1f7      	bne.n	685c <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    686c:	f3bf 8f5b 	dmb	ish
    6870:	4b05      	ldr	r3, [pc, #20]	; (6888 <bt_le_adv_stop+0x5c>)
    6872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6874:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6878:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    687c:	b90b      	cbnz	r3, 6882 <bt_le_adv_stop+0x56>
	return 0;
    687e:	461c      	mov	r4, r3
    6880:	e7ec      	b.n	685c <bt_le_adv_stop+0x30>
			le_set_private_addr();
    6882:	f7fe fcaf 	bl	51e4 <le_set_private_addr>
    6886:	e7e9      	b.n	685c <bt_le_adv_stop+0x30>
    6888:	2000b878 	.word	0x2000b878

0000688c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    688c:	b538      	push	{r3, r4, r5, lr}
    688e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6890:	4808      	ldr	r0, [pc, #32]	; (68b4 <bt_buf_get_rx+0x28>)
    6892:	f014 f911 	bl	1aab8 <net_buf_alloc>
#endif

	if (buf) {
    6896:	4604      	mov	r4, r0
    6898:	b150      	cbz	r0, 68b0 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    689a:	2100      	movs	r1, #0
    689c:	f014 f967 	bl	1ab6e <net_buf_reserve>
    68a0:	f104 0310 	add.w	r3, r4, #16
    68a4:	89e2      	ldrh	r2, [r4, #14]
    68a6:	4413      	add	r3, r2
    68a8:	3303      	adds	r3, #3
    68aa:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    68ae:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    68b0:	4620      	mov	r0, r4
    68b2:	bd38      	pop	{r3, r4, r5, pc}
    68b4:	2000d13c 	.word	0x2000d13c

000068b8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    68b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    68ba:	f04f 0320 	mov.w	r3, #32
    68be:	f3ef 8211 	mrs	r2, BASEPRI
    68c2:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    68c6:	4b0f      	ldr	r3, [pc, #60]	; (6904 <bt_buf_get_cmd_complete+0x4c>)
    68c8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    68cc:	2500      	movs	r5, #0
    68ce:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    68d2:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    68d6:	b17c      	cbz	r4, 68f8 <bt_buf_get_cmd_complete+0x40>
    68d8:	f104 0310 	add.w	r3, r4, #16
    68dc:	89e2      	ldrh	r2, [r4, #14]
    68de:	4413      	add	r3, r2
    68e0:	3303      	adds	r3, #3
    68e2:	f023 0303 	bic.w	r3, r3, #3
    68e6:	2201      	movs	r2, #1
    68e8:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    68ea:	4629      	mov	r1, r5
    68ec:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    68ee:	4620      	mov	r0, r4
    68f0:	f014 f93d 	bl	1ab6e <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    68f4:	4620      	mov	r0, r4
    68f6:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    68f8:	4601      	mov	r1, r0
    68fa:	2001      	movs	r0, #1
    68fc:	f7ff ffc6 	bl	688c <bt_buf_get_rx>
    6900:	4604      	mov	r4, r0
    6902:	e7f7      	b.n	68f4 <bt_buf_get_cmd_complete+0x3c>
    6904:	2000b878 	.word	0x2000b878

00006908 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6908:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    690a:	4b29      	ldr	r3, [pc, #164]	; (69b0 <bt_pub_key_gen+0xa8>)
    690c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    6910:	f003 0306 	and.w	r3, r3, #6
    6914:	2b06      	cmp	r3, #6
    6916:	d148      	bne.n	69aa <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    6918:	4b26      	ldr	r3, [pc, #152]	; (69b4 <bt_pub_key_gen+0xac>)
    691a:	681a      	ldr	r2, [r3, #0]
    691c:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    691e:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6920:	4b25      	ldr	r3, [pc, #148]	; (69b8 <bt_pub_key_gen+0xb0>)
    6922:	f3bf 8f5b 	dmb	ish
    6926:	e853 2f00 	ldrex	r2, [r3]
    692a:	f042 0110 	orr.w	r1, r2, #16
    692e:	e843 1400 	strex	r4, r1, [r3]
    6932:	2c00      	cmp	r4, #0
    6934:	d1f7      	bne.n	6926 <bt_pub_key_gen+0x1e>
    6936:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    693a:	f012 0f10 	tst.w	r2, #16
    693e:	d002      	beq.n	6946 <bt_pub_key_gen+0x3e>
		return 0;
    6940:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    6942:	4630      	mov	r0, r6
    6944:	bd70      	pop	{r4, r5, r6, pc}
    6946:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6948:	f3bf 8f5b 	dmb	ish
    694c:	e853 2f00 	ldrex	r2, [r3]
    6950:	f022 0208 	bic.w	r2, r2, #8
    6954:	e843 2100 	strex	r1, r2, [r3]
    6958:	2900      	cmp	r1, #0
    695a:	d1f7      	bne.n	694c <bt_pub_key_gen+0x44>
    695c:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6960:	2200      	movs	r2, #0
    6962:	4611      	mov	r1, r2
    6964:	f242 0025 	movw	r0, #8229	; 0x2025
    6968:	f7fe f930 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    696c:	4606      	mov	r6, r0
    696e:	b910      	cbnz	r0, 6976 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6970:	4b10      	ldr	r3, [pc, #64]	; (69b4 <bt_pub_key_gen+0xac>)
    6972:	681c      	ldr	r4, [r3, #0]
    6974:	e011      	b.n	699a <bt_pub_key_gen+0x92>
    6976:	4b10      	ldr	r3, [pc, #64]	; (69b8 <bt_pub_key_gen+0xb0>)
    6978:	f3bf 8f5b 	dmb	ish
    697c:	e853 2f00 	ldrex	r2, [r3]
    6980:	f022 0210 	bic.w	r2, r2, #16
    6984:	e843 2100 	strex	r1, r2, [r3]
    6988:	2900      	cmp	r1, #0
    698a:	d1f7      	bne.n	697c <bt_pub_key_gen+0x74>
    698c:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6990:	2200      	movs	r2, #0
    6992:	4b08      	ldr	r3, [pc, #32]	; (69b4 <bt_pub_key_gen+0xac>)
    6994:	601a      	str	r2, [r3, #0]
		return err;
    6996:	e7d4      	b.n	6942 <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6998:	6864      	ldr	r4, [r4, #4]
    699a:	2c00      	cmp	r4, #0
    699c:	d0d1      	beq.n	6942 <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    699e:	42ac      	cmp	r4, r5
    69a0:	d0fa      	beq.n	6998 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    69a2:	6823      	ldr	r3, [r4, #0]
    69a4:	2000      	movs	r0, #0
    69a6:	4798      	blx	r3
    69a8:	e7f6      	b.n	6998 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    69aa:	f06f 0685 	mvn.w	r6, #133	; 0x85
    69ae:	e7c8      	b.n	6942 <bt_pub_key_gen+0x3a>
    69b0:	2000b878 	.word	0x2000b878
    69b4:	20000320 	.word	0x20000320
    69b8:	2000b8e8 	.word	0x2000b8e8

000069bc <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    69bc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    69be:	4b21      	ldr	r3, [pc, #132]	; (6a44 <bt_dh_key_gen+0x88>)
    69c0:	681b      	ldr	r3, [r3, #0]
    69c2:	bbab      	cbnz	r3, 6a30 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    69c4:	f3bf 8f5b 	dmb	ish
    69c8:	4b1f      	ldr	r3, [pc, #124]	; (6a48 <bt_dh_key_gen+0x8c>)
    69ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    69cc:	f3bf 8f5b 	dmb	ish
    69d0:	f013 0f10 	tst.w	r3, #16
    69d4:	d130      	bne.n	6a38 <bt_dh_key_gen+0x7c>
    69d6:	f3bf 8f5b 	dmb	ish
    69da:	4b1b      	ldr	r3, [pc, #108]	; (6a48 <bt_dh_key_gen+0x8c>)
    69dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    69de:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    69e2:	f013 0f08 	tst.w	r3, #8
    69e6:	d02a      	beq.n	6a3e <bt_dh_key_gen+0x82>
    69e8:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    69ea:	4b16      	ldr	r3, [pc, #88]	; (6a44 <bt_dh_key_gen+0x88>)
    69ec:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    69ee:	2140      	movs	r1, #64	; 0x40
    69f0:	f242 0026 	movw	r0, #8230	; 0x2026
    69f4:	f7fe f8be 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    69f8:	4605      	mov	r5, r0
    69fa:	b198      	cbz	r0, 6a24 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    69fc:	2140      	movs	r1, #64	; 0x40
    69fe:	3008      	adds	r0, #8
    6a00:	f014 f914 	bl	1ac2c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6a04:	2240      	movs	r2, #64	; 0x40
    6a06:	4621      	mov	r1, r4
    6a08:	f7f9 fc5a 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6a0c:	2200      	movs	r2, #0
    6a0e:	4629      	mov	r1, r5
    6a10:	f242 0026 	movw	r0, #8230	; 0x2026
    6a14:	f7fe f8da 	bl	4bcc <bt_hci_cmd_send_sync>
	if (err) {
    6a18:	4603      	mov	r3, r0
    6a1a:	b158      	cbz	r0, 6a34 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6a1c:	2100      	movs	r1, #0
    6a1e:	4a09      	ldr	r2, [pc, #36]	; (6a44 <bt_dh_key_gen+0x88>)
    6a20:	6011      	str	r1, [r2, #0]
		return err;
    6a22:	e007      	b.n	6a34 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6a24:	2200      	movs	r2, #0
    6a26:	4b07      	ldr	r3, [pc, #28]	; (6a44 <bt_dh_key_gen+0x88>)
    6a28:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    6a2a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    6a2e:	e001      	b.n	6a34 <bt_dh_key_gen+0x78>
		return -EBUSY;
    6a30:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    6a34:	4618      	mov	r0, r3
    6a36:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    6a38:	f06f 030f 	mvn.w	r3, #15
    6a3c:	e7fa      	b.n	6a34 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    6a3e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    6a42:	e7f7      	b.n	6a34 <bt_dh_key_gen+0x78>
    6a44:	200002dc 	.word	0x200002dc
    6a48:	2000b878 	.word	0x2000b878

00006a4c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6a4c:	b538      	push	{r3, r4, r5, lr}
    6a4e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6a50:	4b06      	ldr	r3, [pc, #24]	; (6a6c <notify_connected+0x20>)
    6a52:	681c      	ldr	r4, [r3, #0]
    6a54:	e000      	b.n	6a58 <notify_connected+0xc>
    6a56:	69a4      	ldr	r4, [r4, #24]
    6a58:	b134      	cbz	r4, 6a68 <notify_connected+0x1c>
		if (cb->connected) {
    6a5a:	6823      	ldr	r3, [r4, #0]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d0fa      	beq.n	6a56 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6a60:	7ae9      	ldrb	r1, [r5, #11]
    6a62:	4628      	mov	r0, r5
    6a64:	4798      	blx	r3
    6a66:	e7f6      	b.n	6a56 <notify_connected+0xa>
		}
	}
}
    6a68:	bd38      	pop	{r3, r4, r5, pc}
    6a6a:	bf00      	nop
    6a6c:	200003fc 	.word	0x200003fc

00006a70 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6a70:	b538      	push	{r3, r4, r5, lr}
    6a72:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6a74:	4b06      	ldr	r3, [pc, #24]	; (6a90 <notify_disconnected+0x20>)
    6a76:	681c      	ldr	r4, [r3, #0]
    6a78:	e000      	b.n	6a7c <notify_disconnected+0xc>
    6a7a:	69a4      	ldr	r4, [r4, #24]
    6a7c:	b134      	cbz	r4, 6a8c <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6a7e:	6863      	ldr	r3, [r4, #4]
    6a80:	2b00      	cmp	r3, #0
    6a82:	d0fa      	beq.n	6a7a <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6a84:	7ae9      	ldrb	r1, [r5, #11]
    6a86:	4628      	mov	r0, r5
    6a88:	4798      	blx	r3
    6a8a:	e7f6      	b.n	6a7a <notify_disconnected+0xa>
		}
	}
}
    6a8c:	bd38      	pop	{r3, r4, r5, pc}
    6a8e:	bf00      	nop
    6a90:	200003fc 	.word	0x200003fc

00006a94 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6a94:	2300      	movs	r3, #0
    6a96:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6a98:	4b04      	ldr	r3, [pc, #16]	; (6aac <tx_free+0x18>)
    6a9a:	681a      	ldr	r2, [r3, #0]
    6a9c:	6002      	str	r2, [r0, #0]
	list->head = node;
    6a9e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6aa0:	685b      	ldr	r3, [r3, #4]
    6aa2:	b103      	cbz	r3, 6aa6 <tx_free+0x12>
    6aa4:	4770      	bx	lr
		list->tail = list->head;
    6aa6:	4b01      	ldr	r3, [pc, #4]	; (6aac <tx_free+0x18>)
    6aa8:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6aaa:	e7fb      	b.n	6aa4 <tx_free+0x10>
    6aac:	2000059c 	.word	0x2000059c

00006ab0 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6ab0:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6ab2:	4a0f      	ldr	r2, [pc, #60]	; (6af0 <add_pending_tx+0x40>)
    6ab4:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6ab6:	681c      	ldr	r4, [r3, #0]
    6ab8:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6aba:	6852      	ldr	r2, [r2, #4]
    6abc:	4293      	cmp	r3, r2
    6abe:	d011      	beq.n	6ae4 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6ac0:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6ac2:	f04f 0220 	mov.w	r2, #32
    6ac6:	f3ef 8111 	mrs	r1, BASEPRI
    6aca:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6ace:	2200      	movs	r2, #0
    6ad0:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6ad2:	6982      	ldr	r2, [r0, #24]
    6ad4:	b14a      	cbz	r2, 6aea <add_pending_tx+0x3a>
		list->tail->next = node;
    6ad6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6ad8:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6ada:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6ade:	4618      	mov	r0, r3
    6ae0:	bc10      	pop	{r4}
    6ae2:	4770      	bx	lr
		list->tail = list->head;
    6ae4:	4a02      	ldr	r2, [pc, #8]	; (6af0 <add_pending_tx+0x40>)
    6ae6:	6054      	str	r4, [r2, #4]
    6ae8:	e7ea      	b.n	6ac0 <add_pending_tx+0x10>
		list->tail = node;
    6aea:	6183      	str	r3, [r0, #24]
		list->head = node;
    6aec:	6143      	str	r3, [r0, #20]
    6aee:	e7f4      	b.n	6ada <add_pending_tx+0x2a>
    6af0:	2000059c 	.word	0x2000059c

00006af4 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6af4:	b510      	push	{r4, lr}
	__asm__ volatile(
    6af6:	f04f 0320 	mov.w	r3, #32
    6afa:	f3ef 8411 	mrs	r4, BASEPRI
    6afe:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6b02:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6b04:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6b06:	b163      	cbz	r3, 6b22 <remove_pending_tx+0x2e>
		if (test == node) {
    6b08:	4299      	cmp	r1, r3
    6b0a:	d002      	beq.n	6b12 <remove_pending_tx+0x1e>
		prev = test;
    6b0c:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6b0e:	681b      	ldr	r3, [r3, #0]
    6b10:	e7f9      	b.n	6b06 <remove_pending_tx+0x12>
	if (!prev_node) {
    6b12:	b162      	cbz	r2, 6b2e <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6b14:	680b      	ldr	r3, [r1, #0]
    6b16:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6b18:	6983      	ldr	r3, [r0, #24]
    6b1a:	4299      	cmp	r1, r3
    6b1c:	d00e      	beq.n	6b3c <remove_pending_tx+0x48>
	node->next = NULL;
    6b1e:	2300      	movs	r3, #0
    6b20:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6b22:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6b26:	4608      	mov	r0, r1
    6b28:	f7ff ffb4 	bl	6a94 <tx_free>
    6b2c:	bd10      	pop	{r4, pc}
		list->head = node->next;
    6b2e:	680b      	ldr	r3, [r1, #0]
    6b30:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    6b32:	6982      	ldr	r2, [r0, #24]
    6b34:	4291      	cmp	r1, r2
    6b36:	d1f2      	bne.n	6b1e <remove_pending_tx+0x2a>
			list->tail = list->head;
    6b38:	6183      	str	r3, [r0, #24]
    6b3a:	e7f0      	b.n	6b1e <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6b3c:	6182      	str	r2, [r0, #24]
    6b3e:	e7ee      	b.n	6b1e <remove_pending_tx+0x2a>

00006b40 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6b40:	884b      	ldrh	r3, [r1, #2]
    6b42:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6b46:	888b      	ldrh	r3, [r1, #4]
    6b48:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6b4c:	88cb      	ldrh	r3, [r1, #6]
    6b4e:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    6b52:	4770      	bx	lr

00006b54 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6b54:	89c3      	ldrh	r3, [r0, #14]
    6b56:	b903      	cbnz	r3, 6b5a <bt_conn_reset_rx_state+0x6>
    6b58:	4770      	bx	lr
{
    6b5a:	b510      	push	{r4, lr}
    6b5c:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6b5e:	6900      	ldr	r0, [r0, #16]
    6b60:	f014 f818 	bl	1ab94 <net_buf_unref>
	conn->rx = NULL;
    6b64:	2300      	movs	r3, #0
    6b66:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6b68:	81e3      	strh	r3, [r4, #14]
    6b6a:	bd10      	pop	{r4, pc}

00006b6c <conn_new>:
{
    6b6c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6b6e:	2300      	movs	r3, #0
    6b70:	b1ab      	cbz	r3, 6b9e <conn_new+0x32>
	struct bt_conn *conn = NULL;
    6b72:	2400      	movs	r4, #0
	if (!conn) {
    6b74:	b18c      	cbz	r4, 6b9a <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6b76:	229c      	movs	r2, #156	; 0x9c
    6b78:	2100      	movs	r1, #0
    6b7a:	4620      	mov	r0, r4
    6b7c:	f023 fb28 	bl	2a1d0 <memset>
	atomic_set(&conn->ref, 1);
    6b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b84:	2201      	movs	r2, #1
    6b86:	f3bf 8f5b 	dmb	ish
    6b8a:	e853 1f00 	ldrex	r1, [r3]
    6b8e:	e843 2000 	strex	r0, r2, [r3]
    6b92:	2800      	cmp	r0, #0
    6b94:	d1f9      	bne.n	6b8a <conn_new+0x1e>
    6b96:	f3bf 8f5b 	dmb	ish
}
    6b9a:	4620      	mov	r0, r4
    6b9c:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6b9e:	229c      	movs	r2, #156	; 0x9c
    6ba0:	fb02 f203 	mul.w	r2, r2, r3
    6ba4:	3240      	adds	r2, #64	; 0x40
    6ba6:	4907      	ldr	r1, [pc, #28]	; (6bc4 <conn_new+0x58>)
    6ba8:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6baa:	f3bf 8f5b 	dmb	ish
    6bae:	6852      	ldr	r2, [r2, #4]
    6bb0:	f3bf 8f5b 	dmb	ish
    6bb4:	b10a      	cbz	r2, 6bba <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6bb6:	3301      	adds	r3, #1
    6bb8:	e7da      	b.n	6b70 <conn_new+0x4>
			conn = &conns[i];
    6bba:	229c      	movs	r2, #156	; 0x9c
    6bbc:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6bc0:	e7d8      	b.n	6b74 <conn_new+0x8>
    6bc2:	bf00      	nop
    6bc4:	20000410 	.word	0x20000410

00006bc8 <bt_conn_get_pkts>:
}
    6bc8:	4800      	ldr	r0, [pc, #0]	; (6bcc <bt_conn_get_pkts+0x4>)
    6bca:	4770      	bx	lr
    6bcc:	2000b904 	.word	0x2000b904

00006bd0 <process_unack_tx>:
{
    6bd0:	b510      	push	{r4, lr}
    6bd2:	4604      	mov	r4, r0
    6bd4:	e009      	b.n	6bea <process_unack_tx+0x1a>
    6bd6:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6bda:	b1b0      	cbz	r0, 6c0a <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6bdc:	f7ff ff5a 	bl	6a94 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6be0:	4620      	mov	r0, r4
    6be2:	f7ff fff1 	bl	6bc8 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6be6:	f022 fb20 	bl	2922a <_impl_k_sem_give>
	__asm__ volatile(
    6bea:	f04f 0220 	mov.w	r2, #32
    6bee:	f3ef 8311 	mrs	r3, BASEPRI
    6bf2:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6bf6:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6bf8:	2800      	cmp	r0, #0
    6bfa:	d0ec      	beq.n	6bd6 <process_unack_tx+0x6>
	list->head = node->next;
    6bfc:	6802      	ldr	r2, [r0, #0]
    6bfe:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6c00:	69a1      	ldr	r1, [r4, #24]
    6c02:	4288      	cmp	r0, r1
    6c04:	d1e7      	bne.n	6bd6 <process_unack_tx+0x6>
		list->tail = list->head;
    6c06:	61a2      	str	r2, [r4, #24]
    6c08:	e7e5      	b.n	6bd6 <process_unack_tx+0x6>
    6c0a:	bd10      	pop	{r4, pc}

00006c0c <notify_le_param_updated>:
{
    6c0c:	b570      	push	{r4, r5, r6, lr}
    6c0e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6c10:	4b08      	ldr	r3, [pc, #32]	; (6c34 <notify_le_param_updated+0x28>)
    6c12:	681c      	ldr	r4, [r3, #0]
    6c14:	e000      	b.n	6c18 <notify_le_param_updated+0xc>
    6c16:	69a4      	ldr	r4, [r4, #24]
    6c18:	b15c      	cbz	r4, 6c32 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6c1a:	68e6      	ldr	r6, [r4, #12]
    6c1c:	2e00      	cmp	r6, #0
    6c1e:	d0fa      	beq.n	6c16 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6c20:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6c24:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6c28:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6c2c:	4628      	mov	r0, r5
    6c2e:	47b0      	blx	r6
    6c30:	e7f1      	b.n	6c16 <notify_le_param_updated+0xa>
}
    6c32:	bd70      	pop	{r4, r5, r6, pc}
    6c34:	200003fc 	.word	0x200003fc

00006c38 <le_param_req>:
{
    6c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c3a:	4606      	mov	r6, r0
    6c3c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6c3e:	4608      	mov	r0, r1
    6c40:	f7fe fc02 	bl	5448 <bt_le_conn_params_valid>
    6c44:	4607      	mov	r7, r0
    6c46:	b198      	cbz	r0, 6c70 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6c48:	4b0a      	ldr	r3, [pc, #40]	; (6c74 <le_param_req+0x3c>)
    6c4a:	681c      	ldr	r4, [r3, #0]
    6c4c:	e000      	b.n	6c50 <le_param_req+0x18>
    6c4e:	69a4      	ldr	r4, [r4, #24]
    6c50:	b174      	cbz	r4, 6c70 <le_param_req+0x38>
		if (!cb->le_param_req) {
    6c52:	68a3      	ldr	r3, [r4, #8]
    6c54:	2b00      	cmp	r3, #0
    6c56:	d0fa      	beq.n	6c4e <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6c58:	4629      	mov	r1, r5
    6c5a:	4630      	mov	r0, r6
    6c5c:	4798      	blx	r3
    6c5e:	b130      	cbz	r0, 6c6e <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6c60:	4628      	mov	r0, r5
    6c62:	f7fe fbf1 	bl	5448 <bt_le_conn_params_valid>
    6c66:	2800      	cmp	r0, #0
    6c68:	d1f1      	bne.n	6c4e <le_param_req+0x16>
			return false;
    6c6a:	4607      	mov	r7, r0
    6c6c:	e000      	b.n	6c70 <le_param_req+0x38>
			return false;
    6c6e:	4607      	mov	r7, r0
}
    6c70:	4638      	mov	r0, r7
    6c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c74:	200003fc 	.word	0x200003fc

00006c78 <bt_conn_identity_resolved>:
{
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6c7c:	78c3      	ldrb	r3, [r0, #3]
    6c7e:	b923      	cbnz	r3, 6c8a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6c80:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6c84:	4b08      	ldr	r3, [pc, #32]	; (6ca8 <bt_conn_identity_resolved+0x30>)
    6c86:	681c      	ldr	r4, [r3, #0]
    6c88:	e003      	b.n	6c92 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6c8a:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6c8e:	e7f9      	b.n	6c84 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6c90:	69a4      	ldr	r4, [r4, #24]
    6c92:	b144      	cbz	r4, 6ca6 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6c94:	6923      	ldr	r3, [r4, #16]
    6c96:	2b00      	cmp	r3, #0
    6c98:	d0fa      	beq.n	6c90 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6c9a:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6c9e:	4631      	mov	r1, r6
    6ca0:	4628      	mov	r0, r5
    6ca2:	4798      	blx	r3
    6ca4:	e7f4      	b.n	6c90 <bt_conn_identity_resolved+0x18>
}
    6ca6:	bd70      	pop	{r4, r5, r6, pc}
    6ca8:	200003fc 	.word	0x200003fc

00006cac <bt_conn_le_start_encryption>:
{
    6cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cb0:	4680      	mov	r8, r0
    6cb2:	4617      	mov	r7, r2
    6cb4:	461c      	mov	r4, r3
    6cb6:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6cb8:	211c      	movs	r1, #28
    6cba:	f242 0019 	movw	r0, #8217	; 0x2019
    6cbe:	f7fd ff59 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    6cc2:	b338      	cbz	r0, 6d14 <bt_conn_le_start_encryption+0x68>
    6cc4:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6cc6:	211c      	movs	r1, #28
    6cc8:	3008      	adds	r0, #8
    6cca:	f013 ffaf 	bl	1ac2c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6cce:	f8b8 2000 	ldrh.w	r2, [r8]
    6cd2:	4603      	mov	r3, r0
    6cd4:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6cd8:	f8c0 7002 	str.w	r7, [r0, #2]
    6cdc:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6cde:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6ce2:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6ce4:	f100 040c 	add.w	r4, r0, #12
    6ce8:	462a      	mov	r2, r5
    6cea:	9907      	ldr	r1, [sp, #28]
    6cec:	4620      	mov	r0, r4
    6cee:	f7f9 fae7 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6cf2:	2d0f      	cmp	r5, #15
    6cf4:	d907      	bls.n	6d06 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6cf6:	2200      	movs	r2, #0
    6cf8:	4631      	mov	r1, r6
    6cfa:	f242 0019 	movw	r0, #8217	; 0x2019
    6cfe:	f7fd ff65 	bl	4bcc <bt_hci_cmd_send_sync>
    6d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6d06:	f1c5 0210 	rsb	r2, r5, #16
    6d0a:	2100      	movs	r1, #0
    6d0c:	1960      	adds	r0, r4, r5
    6d0e:	f023 fa5f 	bl	2a1d0 <memset>
    6d12:	e7f0      	b.n	6cf6 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6d14:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006d1c <start_security>:
{
    6d1c:	b530      	push	{r4, r5, lr}
    6d1e:	b085      	sub	sp, #20
    6d20:	4604      	mov	r4, r0
	switch (conn->role) {
    6d22:	78c3      	ldrb	r3, [r0, #3]
    6d24:	b123      	cbz	r3, 6d30 <start_security+0x14>
    6d26:	2b01      	cmp	r3, #1
    6d28:	d052      	beq.n	6dd0 <start_security+0xb4>
		return -EINVAL;
    6d2a:	f06f 0015 	mvn.w	r0, #21
    6d2e:	e051      	b.n	6dd4 <start_security+0xb8>
		if (!conn->le.keys) {
    6d30:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6d32:	b353      	cbz	r3, 6d8a <start_security+0x6e>
		if (!conn->le.keys ||
    6d34:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6d36:	2b00      	cmp	r3, #0
    6d38:	d036      	beq.n	6da8 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6d3a:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6d3c:	f012 0f24 	tst.w	r2, #36	; 0x24
    6d40:	d032      	beq.n	6da8 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6d42:	7a62      	ldrb	r2, [r4, #9]
    6d44:	2a02      	cmp	r2, #2
    6d46:	d833      	bhi.n	6db0 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6d48:	7a63      	ldrb	r3, [r4, #9]
    6d4a:	2b03      	cmp	r3, #3
    6d4c:	d90d      	bls.n	6d6a <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6d4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6d50:	f3bf 8f5b 	dmb	ish
    6d54:	689b      	ldr	r3, [r3, #8]
    6d56:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6d5a:	f013 0f01 	tst.w	r3, #1
    6d5e:	d104      	bne.n	6d6a <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6d60:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6d62:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6d64:	f013 0f20 	tst.w	r3, #32
    6d68:	d02e      	beq.n	6dc8 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6d6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6d6c:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6d70:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    6d72:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6d76:	9502      	str	r5, [sp, #8]
    6d78:	9201      	str	r2, [sp, #4]
    6d7a:	8b1b      	ldrh	r3, [r3, #24]
    6d7c:	9300      	str	r3, [sp, #0]
    6d7e:	4602      	mov	r2, r0
    6d80:	460b      	mov	r3, r1
    6d82:	4620      	mov	r0, r4
    6d84:	f7ff ff92 	bl	6cac <bt_conn_le_start_encryption>
    6d88:	e024      	b.n	6dd4 <start_security+0xb8>
						     &conn->le.dst);
    6d8a:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6d8e:	4629      	mov	r1, r5
    6d90:	2020      	movs	r0, #32
    6d92:	f006 f96d 	bl	d070 <bt_keys_find>
    6d96:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6d98:	2800      	cmp	r0, #0
    6d9a:	d1cb      	bne.n	6d34 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6d9c:	4629      	mov	r1, r5
    6d9e:	2004      	movs	r0, #4
    6da0:	f006 f966 	bl	d070 <bt_keys_find>
    6da4:	6720      	str	r0, [r4, #112]	; 0x70
    6da6:	e7c5      	b.n	6d34 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6da8:	4620      	mov	r0, r4
    6daa:	f005 ff14 	bl	cbd6 <bt_smp_send_pairing_req>
    6dae:	e011      	b.n	6dd4 <start_security+0xb8>
    6db0:	f3bf 8f5b 	dmb	ish
    6db4:	689b      	ldr	r3, [r3, #8]
    6db6:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6dba:	f013 0f01 	tst.w	r3, #1
    6dbe:	d1c3      	bne.n	6d48 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6dc0:	4620      	mov	r0, r4
    6dc2:	f005 ff08 	bl	cbd6 <bt_smp_send_pairing_req>
    6dc6:	e005      	b.n	6dd4 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6dc8:	4620      	mov	r0, r4
    6dca:	f005 ff04 	bl	cbd6 <bt_smp_send_pairing_req>
    6dce:	e001      	b.n	6dd4 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6dd0:	f005 feae 	bl	cb30 <bt_smp_send_security_req>
}
    6dd4:	b005      	add	sp, #20
    6dd6:	bd30      	pop	{r4, r5, pc}

00006dd8 <bt_conn_security_changed>:
{
    6dd8:	b538      	push	{r3, r4, r5, lr}
    6dda:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6ddc:	4b06      	ldr	r3, [pc, #24]	; (6df8 <bt_conn_security_changed+0x20>)
    6dde:	681c      	ldr	r4, [r3, #0]
    6de0:	e000      	b.n	6de4 <bt_conn_security_changed+0xc>
    6de2:	69a4      	ldr	r4, [r4, #24]
    6de4:	b134      	cbz	r4, 6df4 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6de6:	6963      	ldr	r3, [r4, #20]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d0fa      	beq.n	6de2 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6dec:	7a29      	ldrb	r1, [r5, #8]
    6dee:	4628      	mov	r0, r5
    6df0:	4798      	blx	r3
    6df2:	e7f6      	b.n	6de2 <bt_conn_security_changed+0xa>
}
    6df4:	bd38      	pop	{r3, r4, r5, pc}
    6df6:	bf00      	nop
    6df8:	200003fc 	.word	0x200003fc

00006dfc <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6dfc:	7b03      	ldrb	r3, [r0, #12]
    6dfe:	2b03      	cmp	r3, #3
    6e00:	d112      	bne.n	6e28 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6e02:	7a03      	ldrb	r3, [r0, #8]
    6e04:	428b      	cmp	r3, r1
    6e06:	d212      	bcs.n	6e2e <bt_conn_security+0x32>
    6e08:	7a43      	ldrb	r3, [r0, #9]
    6e0a:	4299      	cmp	r1, r3
    6e0c:	d801      	bhi.n	6e12 <bt_conn_security+0x16>
		return 0;
    6e0e:	2300      	movs	r3, #0
    6e10:	e00e      	b.n	6e30 <bt_conn_security+0x34>
{
    6e12:	b510      	push	{r4, lr}
    6e14:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6e16:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6e18:	f7ff ff80 	bl	6d1c <start_security>
	if (err) {
    6e1c:	4603      	mov	r3, r0
    6e1e:	b108      	cbz	r0, 6e24 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    6e20:	7a22      	ldrb	r2, [r4, #8]
    6e22:	7262      	strb	r2, [r4, #9]
}
    6e24:	4618      	mov	r0, r3
    6e26:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6e28:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6e2c:	e000      	b.n	6e30 <bt_conn_security+0x34>
		return 0;
    6e2e:	2300      	movs	r3, #0
}
    6e30:	4618      	mov	r0, r3
    6e32:	4770      	bx	lr

00006e34 <bt_conn_cb_register>:
	cb->_next = callback_list;
    6e34:	4b02      	ldr	r3, [pc, #8]	; (6e40 <bt_conn_cb_register+0xc>)
    6e36:	681a      	ldr	r2, [r3, #0]
    6e38:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6e3a:	6018      	str	r0, [r3, #0]
    6e3c:	4770      	bx	lr
    6e3e:	bf00      	nop
    6e40:	200003fc 	.word	0x200003fc

00006e44 <bt_conn_recv>:
{
    6e44:	b570      	push	{r4, r5, r6, lr}
    6e46:	4605      	mov	r5, r0
    6e48:	460c      	mov	r4, r1
	switch (flags) {
    6e4a:	2a01      	cmp	r2, #1
    6e4c:	d01a      	beq.n	6e84 <bt_conn_recv+0x40>
    6e4e:	2a02      	cmp	r2, #2
    6e50:	d149      	bne.n	6ee6 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    6e52:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6e54:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6e56:	89c3      	ldrh	r3, [r0, #14]
    6e58:	b97b      	cbnz	r3, 6e7a <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6e5a:	89a3      	ldrh	r3, [r4, #12]
    6e5c:	1af3      	subs	r3, r6, r3
    6e5e:	3304      	adds	r3, #4
    6e60:	b29b      	uxth	r3, r3
    6e62:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6e64:	b963      	cbnz	r3, 6e80 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6e66:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6e68:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6e6a:	3304      	adds	r3, #4
    6e6c:	89a2      	ldrh	r2, [r4, #12]
    6e6e:	4293      	cmp	r3, r2
    6e70:	d03f      	beq.n	6ef2 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    6e72:	4620      	mov	r0, r4
    6e74:	f013 fe8e 	bl	1ab94 <net_buf_unref>
		return;
    6e78:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6e7a:	f7ff fe6b 	bl	6b54 <bt_conn_reset_rx_state>
    6e7e:	e7ec      	b.n	6e5a <bt_conn_recv+0x16>
			conn->rx = buf;
    6e80:	612c      	str	r4, [r5, #16]
			return;
    6e82:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6e84:	89c3      	ldrh	r3, [r0, #14]
    6e86:	b1db      	cbz	r3, 6ec0 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6e88:	898e      	ldrh	r6, [r1, #12]
    6e8a:	42b3      	cmp	r3, r6
    6e8c:	d31e      	bcc.n	6ecc <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6e8e:	6900      	ldr	r0, [r0, #16]
    6e90:	3008      	adds	r0, #8
    6e92:	f013 ff34 	bl	1acfe <net_buf_simple_tailroom>
    6e96:	4286      	cmp	r6, r0
    6e98:	d81e      	bhi.n	6ed8 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6e9a:	6928      	ldr	r0, [r5, #16]
    6e9c:	89a2      	ldrh	r2, [r4, #12]
    6e9e:	68a1      	ldr	r1, [r4, #8]
    6ea0:	3008      	adds	r0, #8
    6ea2:	f013 fec9 	bl	1ac38 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6ea6:	89a2      	ldrh	r2, [r4, #12]
    6ea8:	89eb      	ldrh	r3, [r5, #14]
    6eaa:	1a9b      	subs	r3, r3, r2
    6eac:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    6eae:	4620      	mov	r0, r4
    6eb0:	f013 fe70 	bl	1ab94 <net_buf_unref>
		if (conn->rx_len) {
    6eb4:	89eb      	ldrh	r3, [r5, #14]
    6eb6:	bb03      	cbnz	r3, 6efa <bt_conn_recv+0xb6>
		buf = conn->rx;
    6eb8:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    6eba:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6ebc:	81eb      	strh	r3, [r5, #14]
		break;
    6ebe:	e7d2      	b.n	6e66 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    6ec0:	f7ff fe48 	bl	6b54 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6ec4:	4620      	mov	r0, r4
    6ec6:	f013 fe65 	bl	1ab94 <net_buf_unref>
			return;
    6eca:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6ecc:	f7ff fe42 	bl	6b54 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6ed0:	4620      	mov	r0, r4
    6ed2:	f013 fe5f 	bl	1ab94 <net_buf_unref>
			return;
    6ed6:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6ed8:	4628      	mov	r0, r5
    6eda:	f7ff fe3b 	bl	6b54 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6ede:	4620      	mov	r0, r4
    6ee0:	f013 fe58 	bl	1ab94 <net_buf_unref>
			return;
    6ee4:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    6ee6:	f7ff fe35 	bl	6b54 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    6eea:	4620      	mov	r0, r4
    6eec:	f013 fe52 	bl	1ab94 <net_buf_unref>
		return;
    6ef0:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    6ef2:	4621      	mov	r1, r4
    6ef4:	4628      	mov	r0, r5
    6ef6:	f001 fd06 	bl	8906 <bt_l2cap_recv>
    6efa:	bd70      	pop	{r4, r5, r6, pc}

00006efc <bt_conn_send_cb>:
{
    6efc:	b570      	push	{r4, r5, r6, lr}
    6efe:	4605      	mov	r5, r0
    6f00:	460c      	mov	r4, r1
    6f02:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    6f04:	7988      	ldrb	r0, [r1, #6]
    6f06:	f013 fdcb 	bl	1aaa0 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6f0a:	8ac3      	ldrh	r3, [r0, #22]
    6f0c:	2b03      	cmp	r3, #3
    6f0e:	d911      	bls.n	6f34 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    6f10:	7b2b      	ldrb	r3, [r5, #12]
    6f12:	2b03      	cmp	r3, #3
    6f14:	d114      	bne.n	6f40 <bt_conn_send_cb+0x44>
    6f16:	f104 0310 	add.w	r3, r4, #16
    6f1a:	89e2      	ldrh	r2, [r4, #14]
    6f1c:	4413      	add	r3, r2
    6f1e:	3303      	adds	r3, #3
    6f20:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    6f24:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    6f26:	4621      	mov	r1, r4
    6f28:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    6f2c:	f013 fe24 	bl	1ab78 <net_buf_put>
	return 0;
    6f30:	2000      	movs	r0, #0
}
    6f32:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6f34:	4620      	mov	r0, r4
    6f36:	f013 fe2d 	bl	1ab94 <net_buf_unref>
		return -EINVAL;
    6f3a:	f06f 0015 	mvn.w	r0, #21
    6f3e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6f40:	4620      	mov	r0, r4
    6f42:	f013 fe27 	bl	1ab94 <net_buf_unref>
		return -ENOTCONN;
    6f46:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    6f4a:	bd70      	pop	{r4, r5, r6, pc}

00006f4c <bt_conn_notify_tx>:
{
    6f4c:	b538      	push	{r3, r4, r5, lr}
    6f4e:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6f50:	e002      	b.n	6f58 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    6f52:	4620      	mov	r0, r4
    6f54:	f7ff fd9e 	bl	6a94 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6f58:	2100      	movs	r1, #0
    6f5a:	f105 001c 	add.w	r0, r5, #28
    6f5e:	f021 fdf5 	bl	28b4c <k_queue_get>
    6f62:	4604      	mov	r4, r0
    6f64:	b128      	cbz	r0, 6f72 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    6f66:	6863      	ldr	r3, [r4, #4]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d0f2      	beq.n	6f52 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    6f6c:	4628      	mov	r0, r5
    6f6e:	4798      	blx	r3
    6f70:	e7ef      	b.n	6f52 <bt_conn_notify_tx+0x6>
}
    6f72:	bd38      	pop	{r3, r4, r5, pc}

00006f74 <notify_tx>:
{
    6f74:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6f76:	2400      	movs	r4, #0
    6f78:	b104      	cbz	r4, 6f7c <notify_tx+0x8>
}
    6f7a:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6f7c:	239c      	movs	r3, #156	; 0x9c
    6f7e:	fb03 f304 	mul.w	r3, r3, r4
    6f82:	3340      	adds	r3, #64	; 0x40
    6f84:	4a0b      	ldr	r2, [pc, #44]	; (6fb4 <notify_tx+0x40>)
    6f86:	4413      	add	r3, r2
    6f88:	f3bf 8f5b 	dmb	ish
    6f8c:	685b      	ldr	r3, [r3, #4]
    6f8e:	f3bf 8f5b 	dmb	ish
    6f92:	b13b      	cbz	r3, 6fa4 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6f94:	239c      	movs	r3, #156	; 0x9c
    6f96:	fb03 2304 	mla	r3, r3, r4, r2
    6f9a:	7b1b      	ldrb	r3, [r3, #12]
    6f9c:	3b03      	subs	r3, #3
    6f9e:	b2db      	uxtb	r3, r3
    6fa0:	2b01      	cmp	r3, #1
    6fa2:	d901      	bls.n	6fa8 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6fa4:	3401      	adds	r4, #1
    6fa6:	e7e7      	b.n	6f78 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    6fa8:	209c      	movs	r0, #156	; 0x9c
    6faa:	fb00 2004 	mla	r0, r0, r4, r2
    6fae:	f7ff ffcd 	bl	6f4c <bt_conn_notify_tx>
    6fb2:	e7f7      	b.n	6fa4 <notify_tx+0x30>
    6fb4:	20000410 	.word	0x20000410

00006fb8 <send_frag>:
{
    6fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fbc:	4606      	mov	r6, r0
    6fbe:	460d      	mov	r5, r1
    6fc0:	4690      	mov	r8, r2
    6fc2:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    6fc4:	f7ff fe00 	bl	6bc8 <bt_conn_get_pkts>
    6fc8:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6fca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6fce:	f022 f93f 	bl	29250 <_impl_k_sem_take>
	notify_tx();
    6fd2:	f7ff ffcf 	bl	6f74 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    6fd6:	7b33      	ldrb	r3, [r6, #12]
    6fd8:	2b03      	cmp	r3, #3
    6fda:	d006      	beq.n	6fea <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6fdc:	4638      	mov	r0, r7
    6fde:	f022 f924 	bl	2922a <_impl_k_sem_give>
	if (always_consume) {
    6fe2:	bb4c      	cbnz	r4, 7038 <send_frag+0x80>
}
    6fe4:	4620      	mov	r0, r4
    6fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    6fea:	2104      	movs	r1, #4
    6fec:	f105 0008 	add.w	r0, r5, #8
    6ff0:	f013 fe53 	bl	1ac9a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6ff4:	f9b6 3000 	ldrsh.w	r3, [r6]
    6ff8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    6ffc:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7000:	89ab      	ldrh	r3, [r5, #12]
    7002:	3b04      	subs	r3, #4
    7004:	8043      	strh	r3, [r0, #2]
    7006:	f105 0310 	add.w	r3, r5, #16
    700a:	89ea      	ldrh	r2, [r5, #14]
    700c:	4413      	add	r3, r2
    700e:	3303      	adds	r3, #3
    7010:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    7014:	6819      	ldr	r1, [r3, #0]
    7016:	2202      	movs	r2, #2
    7018:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    701a:	4630      	mov	r0, r6
    701c:	f7ff fd48 	bl	6ab0 <add_pending_tx>
    7020:	4680      	mov	r8, r0
	err = bt_send(buf);
    7022:	4628      	mov	r0, r5
    7024:	f7fe fafa 	bl	561c <bt_send>
	if (err) {
    7028:	b908      	cbnz	r0, 702e <send_frag+0x76>
	return true;
    702a:	2401      	movs	r4, #1
    702c:	e7da      	b.n	6fe4 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    702e:	4641      	mov	r1, r8
    7030:	4630      	mov	r0, r6
    7032:	f7ff fd5f 	bl	6af4 <remove_pending_tx>
		goto fail;
    7036:	e7d1      	b.n	6fdc <send_frag+0x24>
		net_buf_unref(buf);
    7038:	4628      	mov	r0, r5
    703a:	f013 fdab 	bl	1ab94 <net_buf_unref>
	return false;
    703e:	2400      	movs	r4, #0
    7040:	e7d0      	b.n	6fe4 <send_frag+0x2c>
	...

00007044 <bt_conn_add_le>:
{
    7044:	b538      	push	{r3, r4, r5, lr}
    7046:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    7048:	f7ff fd90 	bl	6b6c <conn_new>
	if (!conn) {
    704c:	4604      	mov	r4, r0
    704e:	b1a0      	cbz	r0, 707a <bt_conn_add_le+0x36>
    7050:	2207      	movs	r2, #7
    7052:	4629      	mov	r1, r5
    7054:	3048      	adds	r0, #72	; 0x48
    7056:	f7f9 f933 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    705a:	2301      	movs	r3, #1
    705c:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    705e:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    7060:	2300      	movs	r3, #0
    7062:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7064:	2318      	movs	r3, #24
    7066:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    706a:	2328      	movs	r3, #40	; 0x28
    706c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    7070:	4903      	ldr	r1, [pc, #12]	; (7080 <bt_conn_add_le+0x3c>)
    7072:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7076:	f022 fea9 	bl	29dcc <k_delayed_work_init>
}
    707a:	4620      	mov	r0, r4
    707c:	bd38      	pop	{r3, r4, r5, pc}
    707e:	bf00      	nop
    7080:	00007681 	.word	0x00007681

00007084 <bt_conn_addr_le_cmp>:
{
    7084:	b538      	push	{r3, r4, r5, lr}
    7086:	4604      	mov	r4, r0
    7088:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    708a:	2207      	movs	r2, #7
    708c:	f100 0148 	add.w	r1, r0, #72	; 0x48
    7090:	4628      	mov	r0, r5
    7092:	f023 f809 	bl	2a0a8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    7096:	4603      	mov	r3, r0
    7098:	b140      	cbz	r0, 70ac <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    709a:	78e3      	ldrb	r3, [r4, #3]
    709c:	b143      	cbz	r3, 70b0 <bt_conn_addr_le_cmp+0x2c>
    709e:	2207      	movs	r2, #7
    70a0:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    70a4:	4628      	mov	r0, r5
    70a6:	f022 ffff 	bl	2a0a8 <memcmp>
    70aa:	4603      	mov	r3, r0
}
    70ac:	4618      	mov	r0, r3
    70ae:	bd38      	pop	{r3, r4, r5, pc}
    70b0:	2207      	movs	r2, #7
    70b2:	f104 0156 	add.w	r1, r4, #86	; 0x56
    70b6:	4628      	mov	r0, r5
    70b8:	f022 fff6 	bl	2a0a8 <memcmp>
    70bc:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    70be:	e7f5      	b.n	70ac <bt_conn_addr_le_cmp+0x28>

000070c0 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    70c0:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    70c4:	f3bf 8f5b 	dmb	ish
    70c8:	e853 2f00 	ldrex	r2, [r3]
    70cc:	3201      	adds	r2, #1
    70ce:	e843 2100 	strex	r1, r2, [r3]
    70d2:	2900      	cmp	r1, #0
    70d4:	d1f8      	bne.n	70c8 <bt_conn_ref+0x8>
    70d6:	f3bf 8f5b 	dmb	ish
}
    70da:	4770      	bx	lr

000070dc <bt_conn_lookup_handle>:
{
    70dc:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    70de:	2300      	movs	r3, #0
    70e0:	b10b      	cbz	r3, 70e6 <bt_conn_lookup_handle+0xa>
	return NULL;
    70e2:	2000      	movs	r0, #0
}
    70e4:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    70e6:	229c      	movs	r2, #156	; 0x9c
    70e8:	fb02 f203 	mul.w	r2, r2, r3
    70ec:	3240      	adds	r2, #64	; 0x40
    70ee:	490f      	ldr	r1, [pc, #60]	; (712c <bt_conn_lookup_handle+0x50>)
    70f0:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70f2:	f3bf 8f5b 	dmb	ish
    70f6:	6852      	ldr	r2, [r2, #4]
    70f8:	f3bf 8f5b 	dmb	ish
    70fc:	b13a      	cbz	r2, 710e <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    70fe:	229c      	movs	r2, #156	; 0x9c
    7100:	fb02 1203 	mla	r2, r2, r3, r1
    7104:	7b12      	ldrb	r2, [r2, #12]
    7106:	3a03      	subs	r2, #3
    7108:	b2d2      	uxtb	r2, r2
    710a:	2a01      	cmp	r2, #1
    710c:	d901      	bls.n	7112 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    710e:	3301      	adds	r3, #1
    7110:	e7e6      	b.n	70e0 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    7112:	229c      	movs	r2, #156	; 0x9c
    7114:	fb02 f203 	mul.w	r2, r2, r3
    7118:	5a8a      	ldrh	r2, [r1, r2]
    711a:	4282      	cmp	r2, r0
    711c:	d1f7      	bne.n	710e <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    711e:	209c      	movs	r0, #156	; 0x9c
    7120:	fb00 1003 	mla	r0, r0, r3, r1
    7124:	f7ff ffcc 	bl	70c0 <bt_conn_ref>
    7128:	bd08      	pop	{r3, pc}
    712a:	bf00      	nop
    712c:	20000410 	.word	0x20000410

00007130 <bt_conn_lookup_addr_le>:
{
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7134:	2400      	movs	r4, #0
    7136:	b10c      	cbz	r4, 713c <bt_conn_lookup_addr_le+0xc>
	return NULL;
    7138:	2000      	movs	r0, #0
}
    713a:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    713c:	239c      	movs	r3, #156	; 0x9c
    713e:	fb03 f304 	mul.w	r3, r3, r4
    7142:	3340      	adds	r3, #64	; 0x40
    7144:	4a0d      	ldr	r2, [pc, #52]	; (717c <bt_conn_lookup_addr_le+0x4c>)
    7146:	4413      	add	r3, r2
    7148:	f3bf 8f5b 	dmb	ish
    714c:	685b      	ldr	r3, [r3, #4]
    714e:	f3bf 8f5b 	dmb	ish
    7152:	b123      	cbz	r3, 715e <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7154:	239c      	movs	r3, #156	; 0x9c
    7156:	fb03 2304 	mla	r3, r3, r4, r2
    715a:	789b      	ldrb	r3, [r3, #2]
    715c:	b10b      	cbz	r3, 7162 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    715e:	3401      	adds	r4, #1
    7160:	e7e9      	b.n	7136 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    7162:	269c      	movs	r6, #156	; 0x9c
    7164:	fb06 2604 	mla	r6, r6, r4, r2
    7168:	4629      	mov	r1, r5
    716a:	4630      	mov	r0, r6
    716c:	f7ff ff8a 	bl	7084 <bt_conn_addr_le_cmp>
    7170:	2800      	cmp	r0, #0
    7172:	d1f4      	bne.n	715e <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    7174:	4630      	mov	r0, r6
    7176:	f7ff ffa3 	bl	70c0 <bt_conn_ref>
    717a:	bd70      	pop	{r4, r5, r6, pc}
    717c:	20000410 	.word	0x20000410

00007180 <bt_conn_lookup_state_le>:
{
    7180:	b570      	push	{r4, r5, r6, lr}
    7182:	4605      	mov	r5, r0
    7184:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7186:	2400      	movs	r4, #0
    7188:	b10c      	cbz	r4, 718e <bt_conn_lookup_state_le+0xe>
	return NULL;
    718a:	2000      	movs	r0, #0
}
    718c:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    718e:	239c      	movs	r3, #156	; 0x9c
    7190:	fb03 f304 	mul.w	r3, r3, r4
    7194:	3340      	adds	r3, #64	; 0x40
    7196:	4a12      	ldr	r2, [pc, #72]	; (71e0 <bt_conn_lookup_state_le+0x60>)
    7198:	4413      	add	r3, r2
    719a:	f3bf 8f5b 	dmb	ish
    719e:	685b      	ldr	r3, [r3, #4]
    71a0:	f3bf 8f5b 	dmb	ish
    71a4:	b19b      	cbz	r3, 71ce <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    71a6:	239c      	movs	r3, #156	; 0x9c
    71a8:	fb03 2304 	mla	r3, r3, r4, r2
    71ac:	789b      	ldrb	r3, [r3, #2]
    71ae:	b973      	cbnz	r3, 71ce <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    71b0:	b135      	cbz	r5, 71c0 <bt_conn_lookup_state_le+0x40>
    71b2:	4629      	mov	r1, r5
    71b4:	209c      	movs	r0, #156	; 0x9c
    71b6:	fb00 2004 	mla	r0, r0, r4, r2
    71ba:	f7ff ff63 	bl	7084 <bt_conn_addr_le_cmp>
    71be:	b930      	cbnz	r0, 71ce <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    71c0:	239c      	movs	r3, #156	; 0x9c
    71c2:	4a07      	ldr	r2, [pc, #28]	; (71e0 <bt_conn_lookup_state_le+0x60>)
    71c4:	fb03 2304 	mla	r3, r3, r4, r2
    71c8:	7b1b      	ldrb	r3, [r3, #12]
    71ca:	42b3      	cmp	r3, r6
    71cc:	d001      	beq.n	71d2 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    71ce:	3401      	adds	r4, #1
    71d0:	e7da      	b.n	7188 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    71d2:	209c      	movs	r0, #156	; 0x9c
    71d4:	fb00 2004 	mla	r0, r0, r4, r2
    71d8:	f7ff ff72 	bl	70c0 <bt_conn_ref>
    71dc:	bd70      	pop	{r4, r5, r6, pc}
    71de:	bf00      	nop
    71e0:	20000410 	.word	0x20000410

000071e4 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    71e4:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    71e6:	f3bf 8f5b 	dmb	ish
    71ea:	e850 3f00 	ldrex	r3, [r0]
    71ee:	3b01      	subs	r3, #1
    71f0:	e840 3200 	strex	r2, r3, [r0]
    71f4:	2a00      	cmp	r2, #0
    71f6:	d1f8      	bne.n	71ea <bt_conn_unref+0x6>
    71f8:	f3bf 8f5b 	dmb	ish
    71fc:	4770      	bx	lr

000071fe <conn_cleanup>:
{
    71fe:	b510      	push	{r4, lr}
    7200:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7202:	e002      	b.n	720a <conn_cleanup+0xc>
		net_buf_unref(buf);
    7204:	4618      	mov	r0, r3
    7206:	f013 fcc5 	bl	1ab94 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    720a:	2100      	movs	r1, #0
    720c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7210:	f013 fc93 	bl	1ab3a <net_buf_get>
    7214:	4603      	mov	r3, r0
    7216:	2800      	cmp	r0, #0
    7218:	d1f4      	bne.n	7204 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    721a:	4620      	mov	r0, r4
    721c:	f7ff fe96 	bl	6f4c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    7220:	4620      	mov	r0, r4
    7222:	f7ff fc97 	bl	6b54 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    7226:	4620      	mov	r0, r4
    7228:	f7ff ffdc 	bl	71e4 <bt_conn_unref>
    722c:	bd10      	pop	{r4, pc}
	...

00007230 <bt_conn_prepare_events>:
{
    7230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7234:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    7236:	4b30      	ldr	r3, [pc, #192]	; (72f8 <bt_conn_prepare_events+0xc8>)
    7238:	2400      	movs	r4, #0
    723a:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    723c:	4622      	mov	r2, r4
    723e:	2101      	movs	r1, #1
    7240:	f021 f93e 	bl	284c0 <k_poll_event_init>
    7244:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7246:	b114      	cbz	r4, 724e <bt_conn_prepare_events+0x1e>
}
    7248:	4628      	mov	r0, r5
    724a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    724e:	4a2b      	ldr	r2, [pc, #172]	; (72fc <bt_conn_prepare_events+0xcc>)
    7250:	239c      	movs	r3, #156	; 0x9c
    7252:	fb03 f304 	mul.w	r3, r3, r4
    7256:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    7258:	3340      	adds	r3, #64	; 0x40
    725a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    725c:	f3bf 8f5b 	dmb	ish
    7260:	685b      	ldr	r3, [r3, #4]
    7262:	f3bf 8f5b 	dmb	ish
    7266:	b143      	cbz	r3, 727a <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7268:	7b03      	ldrb	r3, [r0, #12]
    726a:	b143      	cbz	r3, 727e <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    726c:	239c      	movs	r3, #156	; 0x9c
    726e:	4a23      	ldr	r2, [pc, #140]	; (72fc <bt_conn_prepare_events+0xcc>)
    7270:	fb03 2304 	mla	r3, r3, r4, r2
    7274:	7b1b      	ldrb	r3, [r3, #12]
    7276:	2b03      	cmp	r3, #3
    7278:	d015      	beq.n	72a6 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    727a:	3401      	adds	r4, #1
    727c:	e7e3      	b.n	7246 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    727e:	4603      	mov	r3, r0
    7280:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7282:	f3bf 8f5b 	dmb	ish
    7286:	e853 2f00 	ldrex	r2, [r3]
    728a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    728e:	e843 1700 	strex	r7, r1, [r3]
    7292:	2f00      	cmp	r7, #0
    7294:	d1f7      	bne.n	7286 <bt_conn_prepare_events+0x56>
    7296:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    729a:	f012 0f40 	tst.w	r2, #64	; 0x40
    729e:	d0e5      	beq.n	726c <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    72a0:	f7ff ffad 	bl	71fe <conn_cleanup>
			continue;
    72a4:	e7e9      	b.n	727a <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    72a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    72aa:	ea4f 0883 	mov.w	r8, r3, lsl #2
    72ae:	44b0      	add	r8, r6
				  &conn->tx_notify);
    72b0:	4691      	mov	r9, r2
    72b2:	279c      	movs	r7, #156	; 0x9c
    72b4:	fb07 f704 	mul.w	r7, r7, r4
    72b8:	f107 0318 	add.w	r3, r7, #24
    72bc:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    72be:	3304      	adds	r3, #4
    72c0:	2200      	movs	r2, #0
    72c2:	2104      	movs	r1, #4
    72c4:	4640      	mov	r0, r8
    72c6:	f021 f8fb 	bl	284c0 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    72ca:	1c6b      	adds	r3, r5, #1
    72cc:	2201      	movs	r2, #1
    72ce:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    72d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    72d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    72da:	44b0      	add	r8, r6
				  &conn->tx_queue);
    72dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    72e0:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    72e2:	3304      	adds	r3, #4
    72e4:	2200      	movs	r2, #0
    72e6:	2104      	movs	r1, #4
    72e8:	4640      	mov	r0, r8
    72ea:	f021 f8e9 	bl	284c0 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    72ee:	3502      	adds	r5, #2
    72f0:	2302      	movs	r3, #2
    72f2:	f888 300c 	strb.w	r3, [r8, #12]
    72f6:	e7c0      	b.n	727a <bt_conn_prepare_events+0x4a>
    72f8:	2000b9b0 	.word	0x2000b9b0
    72fc:	20000410 	.word	0x20000410

00007300 <bt_conn_set_state>:
{
    7300:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    7302:	7b05      	ldrb	r5, [r0, #12]
    7304:	428d      	cmp	r5, r1
    7306:	d00a      	beq.n	731e <bt_conn_set_state+0x1e>
    7308:	4604      	mov	r4, r0
	conn->state = state;
    730a:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    730c:	b145      	cbz	r5, 7320 <bt_conn_set_state+0x20>
    730e:	2d02      	cmp	r5, #2
    7310:	d009      	beq.n	7326 <bt_conn_set_state+0x26>
	switch (conn->state) {
    7312:	7b23      	ldrb	r3, [r4, #12]
    7314:	2b02      	cmp	r3, #2
    7316:	d068      	beq.n	73ea <bt_conn_set_state+0xea>
    7318:	2b03      	cmp	r3, #3
    731a:	d00b      	beq.n	7334 <bt_conn_set_state+0x34>
    731c:	b31b      	cbz	r3, 7366 <bt_conn_set_state+0x66>
    731e:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    7320:	f7ff fece 	bl	70c0 <bt_conn_ref>
		break;
    7324:	e7f5      	b.n	7312 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    7326:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7328:	2b00      	cmp	r3, #0
    732a:	d1f2      	bne.n	7312 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    732c:	3074      	adds	r0, #116	; 0x74
    732e:	f022 fd6b 	bl	29e08 <k_delayed_work_cancel>
    7332:	e7ee      	b.n	7312 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7334:	78a3      	ldrb	r3, [r4, #2]
    7336:	2b02      	cmp	r3, #2
    7338:	d0f1      	beq.n	731e <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    733a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    733e:	f021 fbaa 	bl	28a96 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    7342:	f104 001c 	add.w	r0, r4, #28
    7346:	f021 fba6 	bl	28a96 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    734a:	2100      	movs	r1, #0
    734c:	482d      	ldr	r0, [pc, #180]	; (7404 <bt_conn_set_state+0x104>)
    734e:	f021 fb43 	bl	289d8 <k_poll_signal>
	list->head = NULL;
    7352:	2300      	movs	r3, #0
    7354:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    7356:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    7358:	4620      	mov	r0, r4
    735a:	f001 f87d 	bl	8458 <bt_l2cap_connected>
		notify_connected(conn);
    735e:	4620      	mov	r0, r4
    7360:	f7ff fb74 	bl	6a4c <notify_connected>
		break;
    7364:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    7366:	78a3      	ldrb	r3, [r4, #2]
    7368:	2b02      	cmp	r3, #2
    736a:	d00d      	beq.n	7388 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    736c:	1eeb      	subs	r3, r5, #3
    736e:	b2db      	uxtb	r3, r3
    7370:	2b01      	cmp	r3, #1
    7372:	d90d      	bls.n	7390 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    7374:	2d02      	cmp	r5, #2
    7376:	d02d      	beq.n	73d4 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    7378:	2d01      	cmp	r5, #1
    737a:	d1d0      	bne.n	731e <bt_conn_set_state+0x1e>
			if (conn->err) {
    737c:	7ae3      	ldrb	r3, [r4, #11]
    737e:	bb83      	cbnz	r3, 73e2 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    7380:	4620      	mov	r0, r4
    7382:	f7ff ff2f 	bl	71e4 <bt_conn_unref>
    7386:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7388:	4620      	mov	r0, r4
    738a:	f7ff ff2b 	bl	71e4 <bt_conn_unref>
			break;
    738e:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    7390:	4620      	mov	r0, r4
    7392:	f000 fd21 	bl	7dd8 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    7396:	4620      	mov	r0, r4
    7398:	f7ff fb6a 	bl	6a70 <notify_disconnected>
			process_unack_tx(conn);
    739c:	4620      	mov	r0, r4
    739e:	f7ff fc17 	bl	6bd0 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    73a2:	78a3      	ldrb	r3, [r4, #2]
    73a4:	b18b      	cbz	r3, 73ca <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    73a6:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    73a8:	f3bf 8f5b 	dmb	ish
    73ac:	e854 3f00 	ldrex	r3, [r4]
    73b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    73b4:	e844 3200 	strex	r2, r3, [r4]
    73b8:	2a00      	cmp	r2, #0
    73ba:	d1f7      	bne.n	73ac <bt_conn_set_state+0xac>
    73bc:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    73c0:	2100      	movs	r1, #0
    73c2:	4810      	ldr	r0, [pc, #64]	; (7404 <bt_conn_set_state+0x104>)
    73c4:	f021 fb08 	bl	289d8 <k_poll_signal>
    73c8:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    73ca:	f104 0074 	add.w	r0, r4, #116	; 0x74
    73ce:	f022 fd1b 	bl	29e08 <k_delayed_work_cancel>
    73d2:	e7e8      	b.n	73a6 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    73d4:	4620      	mov	r0, r4
    73d6:	f7ff fb39 	bl	6a4c <notify_connected>
			bt_conn_unref(conn);
    73da:	4620      	mov	r0, r4
    73dc:	f7ff ff02 	bl	71e4 <bt_conn_unref>
    73e0:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    73e2:	4620      	mov	r0, r4
    73e4:	f7ff fb32 	bl	6a4c <notify_connected>
    73e8:	e7ca      	b.n	7380 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    73ea:	78a3      	ldrb	r3, [r4, #2]
    73ec:	2b02      	cmp	r3, #2
    73ee:	d096      	beq.n	731e <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    73f0:	2b00      	cmp	r3, #0
    73f2:	d194      	bne.n	731e <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    73f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    73f8:	f104 0174 	add.w	r1, r4, #116	; 0x74
    73fc:	4802      	ldr	r0, [pc, #8]	; (7408 <bt_conn_set_state+0x108>)
    73fe:	f022 fd5d 	bl	29ebc <k_delayed_work_submit_to_queue>
    7402:	e78c      	b.n	731e <bt_conn_set_state+0x1e>
    7404:	2000b9b0 	.word	0x2000b9b0
    7408:	20002b78 	.word	0x20002b78

0000740c <bt_hci_disconnect>:
{
    740c:	b570      	push	{r4, r5, r6, lr}
    740e:	4605      	mov	r5, r0
    7410:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    7412:	2103      	movs	r1, #3
    7414:	f240 4006 	movw	r0, #1030	; 0x406
    7418:	f7fd fbac 	bl	4b74 <bt_hci_cmd_create>
	if (!buf) {
    741c:	b1a8      	cbz	r0, 744a <bt_hci_disconnect+0x3e>
    741e:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    7420:	2103      	movs	r1, #3
    7422:	3008      	adds	r0, #8
    7424:	f013 fc02 	bl	1ac2c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    7428:	882b      	ldrh	r3, [r5, #0]
    742a:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    742c:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    742e:	4621      	mov	r1, r4
    7430:	f240 4006 	movw	r0, #1030	; 0x406
    7434:	f7fe f8fc 	bl	5630 <bt_hci_cmd_send>
	if (err) {
    7438:	4604      	mov	r4, r0
    743a:	b108      	cbz	r0, 7440 <bt_hci_disconnect+0x34>
}
    743c:	4620      	mov	r0, r4
    743e:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7440:	2104      	movs	r1, #4
    7442:	4628      	mov	r0, r5
    7444:	f7ff ff5c 	bl	7300 <bt_conn_set_state>
	return 0;
    7448:	e7f8      	b.n	743c <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    744a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    744e:	e7f5      	b.n	743c <bt_hci_disconnect+0x30>

00007450 <bt_conn_get_info>:
	info->type = conn->type;
    7450:	7883      	ldrb	r3, [r0, #2]
    7452:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    7454:	78c3      	ldrb	r3, [r0, #3]
    7456:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    7458:	7883      	ldrb	r3, [r0, #2]
    745a:	b9cb      	cbnz	r3, 7490 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    745c:	78c3      	ldrb	r3, [r0, #3]
    745e:	b983      	cbnz	r3, 7482 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    7460:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7464:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    7466:	f100 0356 	add.w	r3, r0, #86	; 0x56
    746a:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    746c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7470:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    7472:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    7476:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    7478:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    747c:	820b      	strh	r3, [r1, #16]
		return 0;
    747e:	2000      	movs	r0, #0
    7480:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    7482:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7486:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    7488:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    748c:	608b      	str	r3, [r1, #8]
    748e:	e7ed      	b.n	746c <bt_conn_get_info+0x1c>
	return -EINVAL;
    7490:	f06f 0015 	mvn.w	r0, #21
}
    7494:	4770      	bx	lr
	...

00007498 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7498:	b570      	push	{r4, r5, r6, lr}
    749a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    749c:	460d      	mov	r5, r1
    749e:	b121      	cbz	r1, 74aa <bt_le_set_auto_conn+0x12>
    74a0:	4608      	mov	r0, r1
    74a2:	f7fd ffd1 	bl	5448 <bt_le_conn_params_valid>
    74a6:	2800      	cmp	r0, #0
    74a8:	d05a      	beq.n	7560 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    74aa:	4630      	mov	r0, r6
    74ac:	f7ff fe40 	bl	7130 <bt_conn_lookup_addr_le>
	if (!conn) {
    74b0:	4604      	mov	r4, r0
    74b2:	b1d8      	cbz	r0, 74ec <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    74b4:	b33d      	cbz	r5, 7506 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    74b6:	4629      	mov	r1, r5
    74b8:	4620      	mov	r0, r4
    74ba:	f7ff fb41 	bl	6b40 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    74be:	1d23      	adds	r3, r4, #4
    74c0:	f3bf 8f5b 	dmb	ish
    74c4:	e853 2f00 	ldrex	r2, [r3]
    74c8:	f042 0101 	orr.w	r1, r2, #1
    74cc:	e843 1000 	strex	r0, r1, [r3]
    74d0:	2800      	cmp	r0, #0
    74d2:	d1f7      	bne.n	74c4 <bt_le_set_auto_conn+0x2c>
    74d4:	f3bf 8f5b 	dmb	ish
    74d8:	f012 0f01 	tst.w	r2, #1
    74dc:	d00f      	beq.n	74fe <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    74de:	7b23      	ldrb	r3, [r4, #12]
    74e0:	b363      	cbz	r3, 753c <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    74e2:	4620      	mov	r0, r4
    74e4:	f7ff fe7e 	bl	71e4 <bt_conn_unref>

	return 0;
    74e8:	2000      	movs	r0, #0
    74ea:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    74ec:	4630      	mov	r0, r6
    74ee:	f7ff fda9 	bl	7044 <bt_conn_add_le>
		if (!conn) {
    74f2:	4604      	mov	r4, r0
    74f4:	2800      	cmp	r0, #0
    74f6:	d1dd      	bne.n	74b4 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    74f8:	f06f 000b 	mvn.w	r0, #11
}
    74fc:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    74fe:	4620      	mov	r0, r4
    7500:	f7ff fdde 	bl	70c0 <bt_conn_ref>
    7504:	e7eb      	b.n	74de <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    7506:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7508:	f3bf 8f5b 	dmb	ish
    750c:	e853 2f00 	ldrex	r2, [r3]
    7510:	f022 0101 	bic.w	r1, r2, #1
    7514:	e843 1000 	strex	r0, r1, [r3]
    7518:	2800      	cmp	r0, #0
    751a:	d1f7      	bne.n	750c <bt_le_set_auto_conn+0x74>
    751c:	f3bf 8f5b 	dmb	ish
    7520:	f012 0f01 	tst.w	r2, #1
    7524:	d0db      	beq.n	74de <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    7526:	4620      	mov	r0, r4
    7528:	f7ff fe5c 	bl	71e4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    752c:	7b23      	ldrb	r3, [r4, #12]
    752e:	2b01      	cmp	r3, #1
    7530:	d1d5      	bne.n	74de <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7532:	2100      	movs	r1, #0
    7534:	4620      	mov	r0, r4
    7536:	f7ff fee3 	bl	7300 <bt_conn_set_state>
    753a:	e7d0      	b.n	74de <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    753c:	f3bf 8f5b 	dmb	ish
    7540:	4b09      	ldr	r3, [pc, #36]	; (7568 <bt_le_set_auto_conn+0xd0>)
    7542:	681b      	ldr	r3, [r3, #0]
    7544:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7548:	f013 0f02 	tst.w	r3, #2
    754c:	d0c9      	beq.n	74e2 <bt_le_set_auto_conn+0x4a>
		if (param) {
    754e:	b11d      	cbz	r5, 7558 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7550:	2101      	movs	r1, #1
    7552:	4620      	mov	r0, r4
    7554:	f7ff fed4 	bl	7300 <bt_conn_set_state>
		bt_le_scan_update(false);
    7558:	2000      	movs	r0, #0
    755a:	f7fe f919 	bl	5790 <bt_le_scan_update>
    755e:	e7c0      	b.n	74e2 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    7560:	f06f 0015 	mvn.w	r0, #21
    7564:	bd70      	pop	{r4, r5, r6, pc}
    7566:	bf00      	nop
    7568:	2000b8e8 	.word	0x2000b8e8

0000756c <bt_conn_disconnect>:
{
    756c:	b538      	push	{r3, r4, r5, lr}
    756e:	4604      	mov	r4, r0
    7570:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    7572:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7574:	b13b      	cbz	r3, 7586 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    7576:	7b23      	ldrb	r3, [r4, #12]
    7578:	3b01      	subs	r3, #1
    757a:	2b03      	cmp	r3, #3
    757c:	d823      	bhi.n	75c6 <bt_conn_disconnect+0x5a>
    757e:	e8df f003 	tbb	[pc, r3]
    7582:	1309      	.short	0x1309
    7584:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7586:	2100      	movs	r1, #0
    7588:	3048      	adds	r0, #72	; 0x48
    758a:	f7ff ff85 	bl	7498 <bt_le_set_auto_conn>
    758e:	e7f2      	b.n	7576 <bt_conn_disconnect+0xa>
		return 0;
    7590:	2000      	movs	r0, #0
    7592:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    7594:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7596:	2100      	movs	r1, #0
    7598:	4620      	mov	r0, r4
    759a:	f7ff feb1 	bl	7300 <bt_conn_set_state>
		bt_le_scan_update(false);
    759e:	2000      	movs	r0, #0
    75a0:	f7fe f8f6 	bl	5790 <bt_le_scan_update>
		return 0;
    75a4:	2000      	movs	r0, #0
    75a6:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    75a8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    75ac:	f022 fc2c 	bl	29e08 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    75b0:	2100      	movs	r1, #0
    75b2:	f242 000e 	movw	r0, #8206	; 0x200e
    75b6:	f7fe f83b 	bl	5630 <bt_hci_cmd_send>
    75ba:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    75bc:	4629      	mov	r1, r5
    75be:	4620      	mov	r0, r4
    75c0:	f7ff ff24 	bl	740c <bt_hci_disconnect>
    75c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    75c6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    75ca:	bd38      	pop	{r3, r4, r5, pc}

000075cc <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    75cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75ce:	4607      	mov	r7, r0
    75d0:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    75d2:	210e      	movs	r1, #14
    75d4:	f242 0013 	movw	r0, #8211	; 0x2013
    75d8:	f7fd facc 	bl	4b74 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    75dc:	b1c8      	cbz	r0, 7612 <bt_conn_le_conn_update+0x46>
    75de:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    75e0:	210e      	movs	r1, #14
    75e2:	3008      	adds	r0, #8
    75e4:	f013 fb22 	bl	1ac2c <net_buf_simple_add>
    75e8:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    75ea:	220e      	movs	r2, #14
    75ec:	2100      	movs	r1, #0
    75ee:	f022 fdef 	bl	2a1d0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    75f2:	883b      	ldrh	r3, [r7, #0]
    75f4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    75f6:	882b      	ldrh	r3, [r5, #0]
    75f8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    75fa:	886b      	ldrh	r3, [r5, #2]
    75fc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    75fe:	88ab      	ldrh	r3, [r5, #4]
    7600:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    7602:	88eb      	ldrh	r3, [r5, #6]
    7604:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    7606:	4631      	mov	r1, r6
    7608:	f242 0013 	movw	r0, #8211	; 0x2013
    760c:	f7fe f810 	bl	5630 <bt_hci_cmd_send>
    7610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    7612:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    7616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007618 <bt_conn_le_param_update>:
{
    7618:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    761a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    761e:	880a      	ldrh	r2, [r1, #0]
    7620:	4293      	cmp	r3, r2
    7622:	d307      	bcc.n	7634 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    7624:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    7626:	4293      	cmp	r3, r2
    7628:	d804      	bhi.n	7634 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    762a:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    762e:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    7630:	429a      	cmp	r2, r3
    7632:	d016      	beq.n	7662 <bt_conn_le_param_update+0x4a>
    7634:	460d      	mov	r5, r1
    7636:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    7638:	3074      	adds	r0, #116	; 0x74
    763a:	f022 fbe5 	bl	29e08 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    763e:	4b0f      	ldr	r3, [pc, #60]	; (767c <bt_conn_le_param_update+0x64>)
    7640:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7644:	f013 0f02 	tst.w	r3, #2
    7648:	d004      	beq.n	7654 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    764a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    764e:	f013 0f02 	tst.w	r3, #2
    7652:	d101      	bne.n	7658 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    7654:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7656:	b963      	cbnz	r3, 7672 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    7658:	4629      	mov	r1, r5
    765a:	4620      	mov	r0, r4
    765c:	f7ff ffb6 	bl	75cc <bt_conn_le_conn_update>
    7660:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    7662:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    7666:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    7668:	429a      	cmp	r2, r3
    766a:	d1e3      	bne.n	7634 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    766c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7670:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    7672:	4629      	mov	r1, r5
    7674:	4620      	mov	r0, r4
    7676:	f001 f821 	bl	86bc <bt_l2cap_update_conn_param>
    767a:	bd38      	pop	{r3, r4, r5, pc}
    767c:	2000b878 	.word	0x2000b878

00007680 <le_conn_update>:
{
    7680:	b500      	push	{lr}
    7682:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7684:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    7688:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    768c:	2b02      	cmp	r3, #2
    768e:	d016      	beq.n	76be <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7690:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    7694:	f8ad 3000 	strh.w	r3, [sp]
    7698:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    769c:	f8ad 3002 	strh.w	r3, [sp, #2]
    76a0:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    76a4:	f8ad 3004 	strh.w	r3, [sp, #4]
    76a8:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    76ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    76b0:	4669      	mov	r1, sp
    76b2:	4610      	mov	r0, r2
    76b4:	f7ff ffb0 	bl	7618 <bt_conn_le_param_update>
}
    76b8:	b003      	add	sp, #12
    76ba:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    76be:	2113      	movs	r1, #19
    76c0:	4610      	mov	r0, r2
    76c2:	f7ff ff53 	bl	756c <bt_conn_disconnect>
		return;
    76c6:	e7f7      	b.n	76b8 <le_conn_update+0x38>

000076c8 <le_conn_update>:
{
    76c8:	b510      	push	{r4, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    76ce:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    76d0:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    76d2:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    76d4:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    76d6:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    76d8:	9201      	str	r2, [sp, #4]
    76da:	9100      	str	r1, [sp, #0]
    76dc:	2200      	movs	r2, #0
    76de:	4611      	mov	r1, r2
    76e0:	f010 fdb6 	bl	18250 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    76e4:	b100      	cbz	r0, 76e8 <le_conn_update+0x20>
    76e6:	200c      	movs	r0, #12
    76e8:	f005 fd82 	bl	d1f0 <cmd_status>
    76ec:	6020      	str	r0, [r4, #0]
}
    76ee:	b002      	add	sp, #8
    76f0:	bd10      	pop	{r4, pc}
	...

000076f4 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    76f4:	b538      	push	{r3, r4, r5, lr}
    76f6:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    76f8:	4603      	mov	r3, r0
    76fa:	b150      	cbz	r0, 7712 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    76fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7700:	4618      	mov	r0, r3
    7702:	f013 f9d9 	bl	1aab8 <net_buf_alloc>
    7706:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    7708:	1d29      	adds	r1, r5, #4
    770a:	f013 fa30 	bl	1ab6e <net_buf_reserve>

	return buf;
}
    770e:	4620      	mov	r0, r4
    7710:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    7712:	4b01      	ldr	r3, [pc, #4]	; (7718 <bt_conn_create_pdu+0x24>)
    7714:	e7f2      	b.n	76fc <bt_conn_create_pdu+0x8>
    7716:	bf00      	nop
    7718:	2000d0fc 	.word	0x2000d0fc

0000771c <create_frag>:
{
    771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    771e:	4606      	mov	r6, r0
    7720:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    7722:	2100      	movs	r1, #0
    7724:	4608      	mov	r0, r1
    7726:	f7ff ffe5 	bl	76f4 <bt_conn_create_pdu>
    772a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    772c:	7b33      	ldrb	r3, [r6, #12]
    772e:	2b03      	cmp	r3, #3
    7730:	d121      	bne.n	7776 <create_frag+0x5a>
    7732:	f100 0310 	add.w	r3, r0, #16
    7736:	89c2      	ldrh	r2, [r0, #14]
    7738:	4413      	add	r3, r2
    773a:	3303      	adds	r3, #3
    773c:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    7740:	2200      	movs	r2, #0
    7742:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    7744:	4b10      	ldr	r3, [pc, #64]	; (7788 <create_frag+0x6c>)
    7746:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    774a:	f100 0608 	add.w	r6, r0, #8
    774e:	4630      	mov	r0, r6
    7750:	f013 fad5 	bl	1acfe <net_buf_simple_tailroom>
    7754:	4287      	cmp	r7, r0
    7756:	d212      	bcs.n	777e <create_frag+0x62>
	return bt_dev.le.mtu;
    7758:	4b0b      	ldr	r3, [pc, #44]	; (7788 <create_frag+0x6c>)
    775a:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    775e:	463a      	mov	r2, r7
    7760:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7764:	4630      	mov	r0, r6
    7766:	f013 fa67 	bl	1ac38 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    776a:	4639      	mov	r1, r7
    776c:	4620      	mov	r0, r4
    776e:	f013 faaa 	bl	1acc6 <net_buf_simple_pull>
}
    7772:	4628      	mov	r0, r5
    7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    7776:	f013 fa0d 	bl	1ab94 <net_buf_unref>
		return NULL;
    777a:	2500      	movs	r5, #0
    777c:	e7f9      	b.n	7772 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    777e:	4630      	mov	r0, r6
    7780:	f013 fabd 	bl	1acfe <net_buf_simple_tailroom>
    7784:	b287      	uxth	r7, r0
    7786:	e7ea      	b.n	775e <create_frag+0x42>
    7788:	2000b878 	.word	0x2000b878

0000778c <send_buf>:
{
    778c:	b538      	push	{r3, r4, r5, lr}
    778e:	4605      	mov	r5, r0
    7790:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    7792:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    7794:	4b1b      	ldr	r3, [pc, #108]	; (7804 <send_buf+0x78>)
    7796:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    779a:	429a      	cmp	r2, r3
    779c:	d91f      	bls.n	77de <send_buf+0x52>
	frag = create_frag(conn, buf);
    779e:	f7ff ffbd 	bl	771c <create_frag>
	if (!frag) {
    77a2:	4601      	mov	r1, r0
    77a4:	b350      	cbz	r0, 77fc <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    77a6:	2301      	movs	r3, #1
    77a8:	2200      	movs	r2, #0
    77aa:	4628      	mov	r0, r5
    77ac:	f7ff fc04 	bl	6fb8 <send_frag>
    77b0:	4603      	mov	r3, r0
    77b2:	b1c8      	cbz	r0, 77e8 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    77b4:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    77b6:	4a13      	ldr	r2, [pc, #76]	; (7804 <send_buf+0x78>)
    77b8:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    77bc:	429a      	cmp	r2, r3
    77be:	d215      	bcs.n	77ec <send_buf+0x60>
		frag = create_frag(conn, buf);
    77c0:	4621      	mov	r1, r4
    77c2:	4628      	mov	r0, r5
    77c4:	f7ff ffaa 	bl	771c <create_frag>
		if (!frag) {
    77c8:	4601      	mov	r1, r0
    77ca:	b1c8      	cbz	r0, 7800 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    77cc:	2301      	movs	r3, #1
    77ce:	461a      	mov	r2, r3
    77d0:	4628      	mov	r0, r5
    77d2:	f7ff fbf1 	bl	6fb8 <send_frag>
    77d6:	4603      	mov	r3, r0
    77d8:	2800      	cmp	r0, #0
    77da:	d1eb      	bne.n	77b4 <send_buf+0x28>
    77dc:	e004      	b.n	77e8 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    77de:	2300      	movs	r3, #0
    77e0:	461a      	mov	r2, r3
    77e2:	f7ff fbe9 	bl	6fb8 <send_frag>
    77e6:	4603      	mov	r3, r0
}
    77e8:	4618      	mov	r0, r3
    77ea:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    77ec:	2300      	movs	r3, #0
    77ee:	2201      	movs	r2, #1
    77f0:	4621      	mov	r1, r4
    77f2:	4628      	mov	r0, r5
    77f4:	f7ff fbe0 	bl	6fb8 <send_frag>
    77f8:	4603      	mov	r3, r0
    77fa:	e7f5      	b.n	77e8 <send_buf+0x5c>
		return false;
    77fc:	2300      	movs	r3, #0
    77fe:	e7f3      	b.n	77e8 <send_buf+0x5c>
			return false;
    7800:	2300      	movs	r3, #0
    7802:	e7f1      	b.n	77e8 <send_buf+0x5c>
    7804:	2000b878 	.word	0x2000b878

00007808 <bt_conn_process_tx>:
{
    7808:	b538      	push	{r3, r4, r5, lr}
    780a:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    780c:	7b03      	ldrb	r3, [r0, #12]
    780e:	b97b      	cbnz	r3, 7830 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    7810:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7812:	f3bf 8f5b 	dmb	ish
    7816:	e853 2f00 	ldrex	r2, [r3]
    781a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    781e:	e843 1000 	strex	r0, r1, [r3]
    7822:	2800      	cmp	r0, #0
    7824:	d1f7      	bne.n	7816 <bt_conn_process_tx+0xe>
    7826:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    782a:	f012 0f40 	tst.w	r2, #64	; 0x40
    782e:	d10c      	bne.n	784a <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7830:	2100      	movs	r1, #0
    7832:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7836:	f013 f980 	bl	1ab3a <net_buf_get>
	BT_ASSERT(buf);
    783a:	4605      	mov	r5, r0
    783c:	b148      	cbz	r0, 7852 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    783e:	4601      	mov	r1, r0
    7840:	4620      	mov	r0, r4
    7842:	f7ff ffa3 	bl	778c <send_buf>
    7846:	b150      	cbz	r0, 785e <bt_conn_process_tx+0x56>
    7848:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    784a:	4620      	mov	r0, r4
    784c:	f7ff fcd7 	bl	71fe <conn_cleanup>
		return;
    7850:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    7852:	4040      	eors	r0, r0
    7854:	f380 8811 	msr	BASEPRI, r0
    7858:	f04f 0004 	mov.w	r0, #4
    785c:	df02      	svc	2
		net_buf_unref(buf);
    785e:	4628      	mov	r0, r5
    7860:	f013 f998 	bl	1ab94 <net_buf_unref>
    7864:	e7f0      	b.n	7848 <bt_conn_process_tx+0x40>
	...

00007868 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    7868:	4b03      	ldr	r3, [pc, #12]	; (7878 <bt_conn_get_id+0x10>)
    786a:	1ac0      	subs	r0, r0, r3
    786c:	1080      	asrs	r0, r0, #2
    786e:	4b03      	ldr	r3, [pc, #12]	; (787c <bt_conn_get_id+0x14>)
    7870:	fb03 f000 	mul.w	r0, r3, r0
}
    7874:	b2c0      	uxtb	r0, r0
    7876:	4770      	bx	lr
    7878:	20000410 	.word	0x20000410
    787c:	96f96f97 	.word	0x96f96f97

00007880 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7880:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7882:	2300      	movs	r3, #0
    7884:	e000      	b.n	7888 <bt_conn_init+0x8>
    7886:	3301      	adds	r3, #1
    7888:	2b01      	cmp	r3, #1
    788a:	d80d      	bhi.n	78a8 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    788c:	491a      	ldr	r1, [pc, #104]	; (78f8 <bt_conn_init+0x78>)
    788e:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    7892:	4a1a      	ldr	r2, [pc, #104]	; (78fc <bt_conn_init+0x7c>)
    7894:	6814      	ldr	r4, [r2, #0]
    7896:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    789a:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    789c:	6852      	ldr	r2, [r2, #4]
    789e:	2a00      	cmp	r2, #0
    78a0:	d1f1      	bne.n	7886 <bt_conn_init+0x6>
		list->tail = list->head;
    78a2:	4a16      	ldr	r2, [pc, #88]	; (78fc <bt_conn_init+0x7c>)
    78a4:	6050      	str	r0, [r2, #4]
    78a6:	e7ee      	b.n	7886 <bt_conn_init+0x6>
	}

	bt_att_init();
    78a8:	f002 fa68 	bl	9d7c <bt_att_init>

	err = bt_smp_init();
    78ac:	f005 fba2 	bl	cff4 <bt_smp_init>
	if (err) {
    78b0:	4605      	mov	r5, r0
    78b2:	b108      	cbz	r0, 78b8 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    78b4:	4628      	mov	r0, r5
    78b6:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    78b8:	f000 ff20 	bl	86fc <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    78bc:	462c      	mov	r4, r5
    78be:	2c00      	cmp	r4, #0
    78c0:	d1f8      	bne.n	78b4 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    78c2:	4a0f      	ldr	r2, [pc, #60]	; (7900 <bt_conn_init+0x80>)
    78c4:	239c      	movs	r3, #156	; 0x9c
    78c6:	fb03 f304 	mul.w	r3, r3, r4
    78ca:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    78cc:	3340      	adds	r3, #64	; 0x40
    78ce:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    78d0:	f3bf 8f5b 	dmb	ish
    78d4:	685b      	ldr	r3, [r3, #4]
    78d6:	f3bf 8f5b 	dmb	ish
    78da:	b90b      	cbnz	r3, 78e0 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    78dc:	3401      	adds	r4, #1
    78de:	e7ee      	b.n	78be <bt_conn_init+0x3e>
    78e0:	f3bf 8f5b 	dmb	ish
    78e4:	6843      	ldr	r3, [r0, #4]
    78e6:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    78ea:	f013 0f01 	tst.w	r3, #1
    78ee:	d0f5      	beq.n	78dc <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    78f0:	2101      	movs	r1, #1
    78f2:	f7ff fd05 	bl	7300 <bt_conn_set_state>
    78f6:	e7f1      	b.n	78dc <bt_conn_init+0x5c>
    78f8:	20000400 	.word	0x20000400
    78fc:	2000059c 	.word	0x2000059c
    7900:	20000410 	.word	0x20000410

00007904 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7904:	4a05      	ldr	r2, [pc, #20]	; (791c <get_ident+0x18>)
    7906:	7813      	ldrb	r3, [r2, #0]
    7908:	3301      	adds	r3, #1
    790a:	b2db      	uxtb	r3, r3
    790c:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    790e:	b90b      	cbnz	r3, 7914 <get_ident+0x10>
		ident++;
    7910:	3301      	adds	r3, #1
    7912:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    7914:	4b01      	ldr	r3, [pc, #4]	; (791c <get_ident+0x18>)
    7916:	7818      	ldrb	r0, [r3, #0]
    7918:	4770      	bx	lr
    791a:	bf00      	nop
    791c:	20000640 	.word	0x20000640

00007920 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    7920:	b430      	push	{r4, r5}
	return list->head;
    7922:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7924:	b113      	cbz	r3, 792c <__l2cap_lookup_ident+0xc>
    7926:	3b08      	subs	r3, #8
    7928:	2400      	movs	r4, #0
    792a:	e01b      	b.n	7964 <__l2cap_lookup_ident+0x44>
    792c:	2300      	movs	r3, #0
    792e:	e7fb      	b.n	7928 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    7930:	b35a      	cbz	r2, 798a <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    7932:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    7936:	b144      	cbz	r4, 794a <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    7938:	6899      	ldr	r1, [r3, #8]
    793a:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    793c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    793e:	428a      	cmp	r2, r1
    7940:	d00a      	beq.n	7958 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    7942:	2200      	movs	r2, #0
    7944:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    7946:	4618      	mov	r0, r3
    7948:	e01d      	b.n	7986 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    794a:	6899      	ldr	r1, [r3, #8]
    794c:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    794e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7950:	4294      	cmp	r4, r2
    7952:	d1f6      	bne.n	7942 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    7954:	6401      	str	r1, [r0, #64]	; 0x40
    7956:	e7f4      	b.n	7942 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7958:	6404      	str	r4, [r0, #64]	; 0x40
    795a:	e7f2      	b.n	7942 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    795c:	4625      	mov	r5, r4
    795e:	e00a      	b.n	7976 <__l2cap_lookup_ident+0x56>
    7960:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7962:	3b08      	subs	r3, #8
    7964:	b173      	cbz	r3, 7984 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    7966:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    796a:	428d      	cmp	r5, r1
    796c:	d0e0      	beq.n	7930 <__l2cap_lookup_ident+0x10>
    796e:	f113 0408 	adds.w	r4, r3, #8
    7972:	d0f3      	beq.n	795c <__l2cap_lookup_ident+0x3c>
	return node->next;
    7974:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7976:	b11d      	cbz	r5, 7980 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7978:	2c00      	cmp	r4, #0
    797a:	d0f1      	beq.n	7960 <__l2cap_lookup_ident+0x40>
	return node->next;
    797c:	689b      	ldr	r3, [r3, #8]
    797e:	e7f0      	b.n	7962 <__l2cap_lookup_ident+0x42>
    7980:	2300      	movs	r3, #0
    7982:	e7ef      	b.n	7964 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    7984:	2000      	movs	r0, #0
}
    7986:	bc30      	pop	{r4, r5}
    7988:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    798a:	4618      	mov	r0, r3
    798c:	e7fb      	b.n	7986 <__l2cap_lookup_ident+0x66>
	...

00007990 <l2cap_server_lookup_psm>:
	return list->head;
    7990:	4b0d      	ldr	r3, [pc, #52]	; (79c8 <l2cap_server_lookup_psm+0x38>)
    7992:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7994:	b10b      	cbz	r3, 799a <l2cap_server_lookup_psm+0xa>
    7996:	3b08      	subs	r3, #8
    7998:	e006      	b.n	79a8 <l2cap_server_lookup_psm+0x18>
    799a:	2300      	movs	r3, #0
    799c:	e004      	b.n	79a8 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    799e:	4611      	mov	r1, r2
    79a0:	e00a      	b.n	79b8 <l2cap_server_lookup_psm+0x28>
	return node->next;
    79a2:	689a      	ldr	r2, [r3, #8]
    79a4:	f1a2 0308 	sub.w	r3, r2, #8
    79a8:	b163      	cbz	r3, 79c4 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    79aa:	881a      	ldrh	r2, [r3, #0]
    79ac:	4282      	cmp	r2, r0
    79ae:	d009      	beq.n	79c4 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79b0:	f113 0208 	adds.w	r2, r3, #8
    79b4:	d0f3      	beq.n	799e <l2cap_server_lookup_psm+0xe>
	return node->next;
    79b6:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    79b8:	b111      	cbz	r1, 79c0 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79ba:	2a00      	cmp	r2, #0
    79bc:	d1f1      	bne.n	79a2 <l2cap_server_lookup_psm+0x12>
    79be:	e7f1      	b.n	79a4 <l2cap_server_lookup_psm+0x14>
    79c0:	2300      	movs	r3, #0
    79c2:	e7f1      	b.n	79a8 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    79c4:	4618      	mov	r0, r3
    79c6:	4770      	bx	lr
    79c8:	2000064c 	.word	0x2000064c

000079cc <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    79cc:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    79d0:	b29b      	uxth	r3, r3
    79d2:	2b3f      	cmp	r3, #63	; 0x3f
    79d4:	d835      	bhi.n	7a42 <l2cap_remove_tx_cid+0x76>
	return list->head;
    79d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    79d8:	b12b      	cbz	r3, 79e6 <l2cap_remove_tx_cid+0x1a>
    79da:	3b08      	subs	r3, #8
    79dc:	2200      	movs	r2, #0
    79de:	2b00      	cmp	r3, #0
    79e0:	d031      	beq.n	7a46 <l2cap_remove_tx_cid+0x7a>
{
    79e2:	b410      	push	{r4}
    79e4:	e01c      	b.n	7a20 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    79e6:	2300      	movs	r3, #0
    79e8:	e7f8      	b.n	79dc <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    79ea:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    79ee:	b14a      	cbz	r2, 7a04 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    79f0:	689c      	ldr	r4, [r3, #8]
    79f2:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    79f4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    79f6:	42a1      	cmp	r1, r4
    79f8:	d00b      	beq.n	7a12 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    79fa:	2200      	movs	r2, #0
    79fc:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    79fe:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    7a00:	bc10      	pop	{r4}
    7a02:	4770      	bx	lr
		list->head = node->next;
    7a04:	689a      	ldr	r2, [r3, #8]
    7a06:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7a08:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7a0a:	428c      	cmp	r4, r1
    7a0c:	d1f5      	bne.n	79fa <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    7a0e:	6402      	str	r2, [r0, #64]	; 0x40
    7a10:	e7f3      	b.n	79fa <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    7a12:	6402      	str	r2, [r0, #64]	; 0x40
    7a14:	e7f1      	b.n	79fa <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a16:	4614      	mov	r4, r2
    7a18:	e00a      	b.n	7a30 <l2cap_remove_tx_cid+0x64>
    7a1a:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7a1c:	3b08      	subs	r3, #8
    7a1e:	b173      	cbz	r3, 7a3e <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7a20:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    7a24:	42a1      	cmp	r1, r4
    7a26:	d0e0      	beq.n	79ea <l2cap_remove_tx_cid+0x1e>
    7a28:	f113 0208 	adds.w	r2, r3, #8
    7a2c:	d0f3      	beq.n	7a16 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    7a2e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7a30:	b11c      	cbz	r4, 7a3a <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a32:	2a00      	cmp	r2, #0
    7a34:	d0f1      	beq.n	7a1a <l2cap_remove_tx_cid+0x4e>
	return node->next;
    7a36:	689b      	ldr	r3, [r3, #8]
    7a38:	e7f0      	b.n	7a1c <l2cap_remove_tx_cid+0x50>
    7a3a:	2300      	movs	r3, #0
    7a3c:	e7ef      	b.n	7a1e <l2cap_remove_tx_cid+0x52>
	return NULL;
    7a3e:	2000      	movs	r0, #0
    7a40:	e7de      	b.n	7a00 <l2cap_remove_tx_cid+0x34>
		return NULL;
    7a42:	2000      	movs	r0, #0
    7a44:	4770      	bx	lr
	return NULL;
    7a46:	2000      	movs	r0, #0
}
    7a48:	4770      	bx	lr

00007a4a <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    7a4a:	4770      	bx	lr

00007a4c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    7a4c:	4770      	bx	lr
	...

00007a50 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7a50:	2000      	movs	r0, #0
    7a52:	b110      	cbz	r0, 7a5a <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7a54:	f06f 000b 	mvn.w	r0, #11
}
    7a58:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7a5a:	239c      	movs	r3, #156	; 0x9c
    7a5c:	fb03 f300 	mul.w	r3, r3, r0
    7a60:	4a06      	ldr	r2, [pc, #24]	; (7a7c <l2cap_accept+0x2c>)
    7a62:	58d3      	ldr	r3, [r2, r3]
    7a64:	b10b      	cbz	r3, 7a6a <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7a66:	3001      	adds	r0, #1
    7a68:	e7f3      	b.n	7a52 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7a6a:	239c      	movs	r3, #156	; 0x9c
    7a6c:	4a03      	ldr	r2, [pc, #12]	; (7a7c <l2cap_accept+0x2c>)
    7a6e:	fb03 2300 	mla	r3, r3, r0, r2
    7a72:	4a03      	ldr	r2, [pc, #12]	; (7a80 <l2cap_accept+0x30>)
    7a74:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7a76:	600b      	str	r3, [r1, #0]
		return 0;
    7a78:	4770      	bx	lr
    7a7a:	bf00      	nop
    7a7c:	200005a4 	.word	0x200005a4
    7a80:	2000b9cc 	.word	0x2000b9cc

00007a84 <l2cap_alloc_frag>:
{
    7a84:	b538      	push	{r3, r4, r5, lr}
    7a86:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7a88:	6843      	ldr	r3, [r0, #4]
    7a8a:	68db      	ldr	r3, [r3, #12]
    7a8c:	4798      	blx	r3
	if (!frag) {
    7a8e:	4604      	mov	r4, r0
    7a90:	b120      	cbz	r0, 7a9c <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7a92:	4601      	mov	r1, r0
    7a94:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7a98:	f013 f8ad 	bl	1abf6 <net_buf_frag_add>
}
    7a9c:	4620      	mov	r0, r4
    7a9e:	bd38      	pop	{r3, r4, r5, pc}

00007aa0 <l2cap_chan_rx_give_credits>:
{
    7aa0:	b538      	push	{r3, r4, r5, lr}
    7aa2:	4605      	mov	r5, r0
	while (credits--) {
    7aa4:	e004      	b.n	7ab0 <l2cap_chan_rx_give_credits+0x10>
    7aa6:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7aaa:	f021 fbbe 	bl	2922a <_impl_k_sem_give>
    7aae:	4621      	mov	r1, r4
    7ab0:	1e4b      	subs	r3, r1, #1
    7ab2:	b29c      	uxth	r4, r3
    7ab4:	2900      	cmp	r1, #0
    7ab6:	d1f6      	bne.n	7aa6 <l2cap_chan_rx_give_credits+0x6>
}
    7ab8:	bd38      	pop	{r3, r4, r5, pc}

00007aba <l2cap_chan_tx_give_credits>:
{
    7aba:	b538      	push	{r3, r4, r5, lr}
    7abc:	4605      	mov	r5, r0
	while (credits--) {
    7abe:	e004      	b.n	7aca <l2cap_chan_tx_give_credits+0x10>
    7ac0:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7ac4:	f021 fbb1 	bl	2922a <_impl_k_sem_give>
    7ac8:	4621      	mov	r1, r4
    7aca:	1e4b      	subs	r3, r1, #1
    7acc:	b29c      	uxth	r4, r3
    7ace:	2900      	cmp	r1, #0
    7ad0:	d1f6      	bne.n	7ac0 <l2cap_chan_tx_give_credits+0x6>
}
    7ad2:	bd38      	pop	{r3, r4, r5, pc}

00007ad4 <l2cap_chan_destroy>:
{
    7ad4:	b510      	push	{r4, lr}
    7ad6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7ad8:	3010      	adds	r0, #16
    7ada:	f022 f995 	bl	29e08 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7ade:	e002      	b.n	7ae6 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7ae0:	4618      	mov	r0, r3
    7ae2:	f013 f857 	bl	1ab94 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7ae6:	2100      	movs	r1, #0
    7ae8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7aec:	f013 f825 	bl	1ab3a <net_buf_get>
    7af0:	4603      	mov	r3, r0
    7af2:	2800      	cmp	r0, #0
    7af4:	d1f4      	bne.n	7ae0 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7af6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7afa:	b130      	cbz	r0, 7b0a <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7afc:	f013 f84a 	bl	1ab94 <net_buf_unref>
		ch->_sdu = NULL;
    7b00:	2300      	movs	r3, #0
    7b02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7b06:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7b0a:	bd10      	pop	{r4, pc}

00007b0c <l2cap_chan_le_get_tx_buf>:
{
    7b0c:	b508      	push	{r3, lr}
    7b0e:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7b10:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7b14:	b118      	cbz	r0, 7b1e <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7b16:	2200      	movs	r2, #0
    7b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7b1c:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7b1e:	2100      	movs	r1, #0
    7b20:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7b24:	f013 f809 	bl	1ab3a <net_buf_get>
}
    7b28:	bd08      	pop	{r3, pc}

00007b2a <l2cap_chan_tx_init>:
{
    7b2a:	b510      	push	{r4, lr}
    7b2c:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    7b2e:	2220      	movs	r2, #32
    7b30:	2100      	movs	r1, #0
    7b32:	3060      	adds	r0, #96	; 0x60
    7b34:	f022 fb4c 	bl	2a1d0 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b3c:	2100      	movs	r1, #0
    7b3e:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7b42:	f021 fb69 	bl	29218 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7b46:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7b4a:	f020 ffa4 	bl	28a96 <k_queue_init>
    7b4e:	bd10      	pop	{r4, pc}

00007b50 <l2cap_chan_rx_init>:
{
    7b50:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    7b52:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b56:	b913      	cbnz	r3, 7b5e <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7b58:	2342      	movs	r3, #66	; 0x42
    7b5a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7b5e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    7b62:	b96b      	cbnz	r3, 7b80 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7b64:	6843      	ldr	r3, [r0, #4]
    7b66:	68db      	ldr	r3, [r3, #12]
    7b68:	b1cb      	cbz	r3, 7b9e <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7b6a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b6e:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7b70:	4a0d      	ldr	r2, [pc, #52]	; (7ba8 <l2cap_chan_rx_init+0x58>)
    7b72:	fb82 1203 	smull	r1, r2, r2, r3
    7b76:	17db      	asrs	r3, r3, #31
    7b78:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7b7c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7b80:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b84:	3302      	adds	r3, #2
    7b86:	2b44      	cmp	r3, #68	; 0x44
    7b88:	bfa8      	it	ge
    7b8a:	2344      	movge	r3, #68	; 0x44
    7b8c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b94:	2100      	movs	r1, #0
    7b96:	3048      	adds	r0, #72	; 0x48
    7b98:	f021 fb3e 	bl	29218 <_impl_k_sem_init>
    7b9c:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7b9e:	2302      	movs	r3, #2
    7ba0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7ba4:	e7ec      	b.n	7b80 <l2cap_chan_rx_init+0x30>
    7ba6:	bf00      	nop
    7ba8:	78787879 	.word	0x78787879

00007bac <l2cap_change_security>:
{
    7bac:	b508      	push	{r3, lr}
	switch (err) {
    7bae:	2905      	cmp	r1, #5
    7bb0:	d00e      	beq.n	7bd0 <l2cap_change_security+0x24>
    7bb2:	2908      	cmp	r1, #8
    7bb4:	d120      	bne.n	7bf8 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7bb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7bba:	2b01      	cmp	r3, #1
    7bbc:	d81f      	bhi.n	7bfe <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7bbe:	2302      	movs	r3, #2
    7bc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7bc4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7bc8:	6800      	ldr	r0, [r0, #0]
    7bca:	f7ff f917 	bl	6dfc <bt_conn_security>
    7bce:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7bd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7bd4:	2b01      	cmp	r3, #1
    7bd6:	d905      	bls.n	7be4 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7bd8:	2b02      	cmp	r3, #2
    7bda:	d807      	bhi.n	7bec <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7bdc:	2303      	movs	r3, #3
    7bde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7be2:	e7ef      	b.n	7bc4 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7be4:	2302      	movs	r3, #2
    7be6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7bea:	e7eb      	b.n	7bc4 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7bec:	2b03      	cmp	r3, #3
    7bee:	d809      	bhi.n	7c04 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7bf0:	2304      	movs	r3, #4
    7bf2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7bf6:	e7e5      	b.n	7bc4 <l2cap_change_security+0x18>
		return -EINVAL;
    7bf8:	f06f 0015 	mvn.w	r0, #21
    7bfc:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7bfe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7c02:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7c04:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7c08:	bd08      	pop	{r3, pc}
	...

00007c0c <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7c0c:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7c10:	2200      	movs	r2, #0
    7c12:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7c14:	4a05      	ldr	r2, [pc, #20]	; (7c2c <bt_l2cap_le_fixed_chan_register+0x20>)
    7c16:	6852      	ldr	r2, [r2, #4]
    7c18:	b11a      	cbz	r2, 7c22 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7c1a:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7c1c:	4a03      	ldr	r2, [pc, #12]	; (7c2c <bt_l2cap_le_fixed_chan_register+0x20>)
    7c1e:	6053      	str	r3, [r2, #4]
    7c20:	4770      	bx	lr
		list->tail = node;
    7c22:	4a02      	ldr	r2, [pc, #8]	; (7c2c <bt_l2cap_le_fixed_chan_register+0x20>)
    7c24:	6053      	str	r3, [r2, #4]
		list->head = node;
    7c26:	6013      	str	r3, [r2, #0]
    7c28:	4770      	bx	lr
    7c2a:	bf00      	nop
    7c2c:	20000644 	.word	0x20000644

00007c30 <bt_l2cap_chan_remove>:
	return list->head;
    7c30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c32:	b123      	cbz	r3, 7c3e <bt_l2cap_chan_remove+0xe>
    7c34:	3b08      	subs	r3, #8
    7c36:	2200      	movs	r2, #0
    7c38:	b35b      	cbz	r3, 7c92 <bt_l2cap_chan_remove+0x62>
{
    7c3a:	b410      	push	{r4}
    7c3c:	e01c      	b.n	7c78 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c3e:	2300      	movs	r3, #0
    7c40:	e7f9      	b.n	7c36 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7c42:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7c46:	b142      	cbz	r2, 7c5a <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7c48:	689c      	ldr	r4, [r3, #8]
    7c4a:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7c4c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7c4e:	42a1      	cmp	r1, r4
    7c50:	d00a      	beq.n	7c68 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    7c52:	2200      	movs	r2, #0
    7c54:	609a      	str	r2, [r3, #8]
}
    7c56:	bc10      	pop	{r4}
    7c58:	4770      	bx	lr
		list->head = node->next;
    7c5a:	689a      	ldr	r2, [r3, #8]
    7c5c:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7c5e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7c60:	428c      	cmp	r4, r1
    7c62:	d1f6      	bne.n	7c52 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7c64:	6402      	str	r2, [r0, #64]	; 0x40
    7c66:	e7f4      	b.n	7c52 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7c68:	6402      	str	r2, [r0, #64]	; 0x40
    7c6a:	e7f2      	b.n	7c52 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c6c:	4614      	mov	r4, r2
    7c6e:	e009      	b.n	7c84 <bt_l2cap_chan_remove+0x54>
    7c70:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c72:	3b08      	subs	r3, #8
    7c74:	2b00      	cmp	r3, #0
    7c76:	d0ee      	beq.n	7c56 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7c78:	428b      	cmp	r3, r1
    7c7a:	d0e2      	beq.n	7c42 <bt_l2cap_chan_remove+0x12>
    7c7c:	f113 0208 	adds.w	r2, r3, #8
    7c80:	d0f4      	beq.n	7c6c <bt_l2cap_chan_remove+0x3c>
	return node->next;
    7c82:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c84:	b11c      	cbz	r4, 7c8e <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c86:	2a00      	cmp	r2, #0
    7c88:	d0f2      	beq.n	7c70 <bt_l2cap_chan_remove+0x40>
	return node->next;
    7c8a:	689b      	ldr	r3, [r3, #8]
    7c8c:	e7f1      	b.n	7c72 <bt_l2cap_chan_remove+0x42>
    7c8e:	2300      	movs	r3, #0
    7c90:	e7f0      	b.n	7c74 <bt_l2cap_chan_remove+0x44>
    7c92:	4770      	bx	lr

00007c94 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7c94:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7c98:	4770      	bx	lr

00007c9a <bt_l2cap_chan_del>:
{
    7c9a:	b510      	push	{r4, lr}
    7c9c:	4604      	mov	r4, r0
	if (!chan->conn) {
    7c9e:	6803      	ldr	r3, [r0, #0]
    7ca0:	b12b      	cbz	r3, 7cae <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7ca2:	6843      	ldr	r3, [r0, #4]
    7ca4:	685b      	ldr	r3, [r3, #4]
    7ca6:	b103      	cbz	r3, 7caa <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7ca8:	4798      	blx	r3
	chan->conn = NULL;
    7caa:	2300      	movs	r3, #0
    7cac:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7cae:	2100      	movs	r1, #0
    7cb0:	4620      	mov	r0, r4
    7cb2:	f7ff ffef 	bl	7c94 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7cb6:	2300      	movs	r3, #0
    7cb8:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7cba:	68e3      	ldr	r3, [r4, #12]
    7cbc:	b10b      	cbz	r3, 7cc2 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7cbe:	4620      	mov	r0, r4
    7cc0:	4798      	blx	r3
    7cc2:	bd10      	pop	{r4, pc}

00007cc4 <l2cap_rtx_timeout>:
{
    7cc4:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7cc6:	f1a0 0410 	sub.w	r4, r0, #16
    7cca:	4621      	mov	r1, r4
    7ccc:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7cd0:	f7ff ffae 	bl	7c30 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7cd4:	4620      	mov	r0, r4
    7cd6:	f7ff ffe0 	bl	7c9a <bt_l2cap_chan_del>
    7cda:	bd10      	pop	{r4, pc}

00007cdc <le_conn_rsp>:
{
    7cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7ce0:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7ce2:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7ce4:	8992      	ldrh	r2, [r2, #12]
    7ce6:	2a09      	cmp	r2, #9
    7ce8:	d927      	bls.n	7d3a <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7cea:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7cee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7cf2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7cf6:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7cf8:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7cfa:	b14d      	cbz	r5, 7d10 <le_conn_rsp+0x34>
    7cfc:	2d05      	cmp	r5, #5
    7cfe:	d007      	beq.n	7d10 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7d00:	2d08      	cmp	r5, #8
    7d02:	d005      	beq.n	7d10 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7d04:	2201      	movs	r2, #1
    7d06:	4630      	mov	r0, r6
    7d08:	f7ff fe0a 	bl	7920 <__l2cap_lookup_ident>
    7d0c:	4604      	mov	r4, r0
    7d0e:	e004      	b.n	7d1a <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7d10:	2200      	movs	r2, #0
    7d12:	4630      	mov	r0, r6
    7d14:	f7ff fe04 	bl	7920 <__l2cap_lookup_ident>
    7d18:	4604      	mov	r4, r0
	if (!chan) {
    7d1a:	b174      	cbz	r4, 7d3a <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7d1c:	f104 0010 	add.w	r0, r4, #16
    7d20:	f022 f872 	bl	29e08 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7d24:	2300      	movs	r3, #0
    7d26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7d2a:	2d05      	cmp	r5, #5
    7d2c:	d021      	beq.n	7d72 <le_conn_rsp+0x96>
    7d2e:	2d08      	cmp	r5, #8
    7d30:	d01f      	beq.n	7d72 <le_conn_rsp+0x96>
    7d32:	b125      	cbz	r5, 7d3e <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7d34:	4620      	mov	r0, r4
    7d36:	f7ff ffb0 	bl	7c9a <bt_l2cap_chan_del>
    7d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7d3e:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    7d42:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7d46:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7d4a:	2103      	movs	r1, #3
    7d4c:	4620      	mov	r0, r4
    7d4e:	f7ff ffa1 	bl	7c94 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    7d52:	6863      	ldr	r3, [r4, #4]
    7d54:	681b      	ldr	r3, [r3, #0]
    7d56:	b10b      	cbz	r3, 7d5c <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7d58:	4620      	mov	r0, r4
    7d5a:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7d5c:	4639      	mov	r1, r7
    7d5e:	4620      	mov	r0, r4
    7d60:	f7ff feab 	bl	7aba <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7d64:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7d68:	4620      	mov	r0, r4
    7d6a:	f7ff fe99 	bl	7aa0 <l2cap_chan_rx_give_credits>
		break;
    7d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    7d72:	4629      	mov	r1, r5
    7d74:	4620      	mov	r0, r4
    7d76:	f7ff ff19 	bl	7bac <l2cap_change_security>
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d0dd      	beq.n	7d3a <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7d7e:	4621      	mov	r1, r4
    7d80:	4630      	mov	r0, r6
    7d82:	f7ff ff55 	bl	7c30 <bt_l2cap_chan_remove>
    7d86:	e7d5      	b.n	7d34 <le_conn_rsp+0x58>

00007d88 <le_disconn_rsp>:
{
    7d88:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7d8a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7d8c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7d8e:	8993      	ldrh	r3, [r2, #12]
    7d90:	2b03      	cmp	r3, #3
    7d92:	d800      	bhi.n	7d96 <le_disconn_rsp+0xe>
    7d94:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7d96:	8809      	ldrh	r1, [r1, #0]
    7d98:	f7ff fe18 	bl	79cc <l2cap_remove_tx_cid>
	if (!chan) {
    7d9c:	2800      	cmp	r0, #0
    7d9e:	d0f9      	beq.n	7d94 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7da0:	f7ff ff7b 	bl	7c9a <bt_l2cap_chan_del>
    7da4:	e7f6      	b.n	7d94 <le_disconn_rsp+0xc>

00007da6 <reject_cmd>:
{
    7da6:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7da8:	2201      	movs	r2, #1
    7daa:	6800      	ldr	r0, [r0, #0]
    7dac:	f7ff fdb8 	bl	7920 <__l2cap_lookup_ident>
	if (!chan) {
    7db0:	b108      	cbz	r0, 7db6 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7db2:	f7ff ff72 	bl	7c9a <bt_l2cap_chan_del>
    7db6:	bd08      	pop	{r3, pc}

00007db8 <bt_l2cap_chan_add>:
{
    7db8:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7dba:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7dbe:	2400      	movs	r4, #0
    7dc0:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7dc2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7dc4:	b12c      	cbz	r4, 7dd2 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7dc6:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7dc8:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7dca:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7dcc:	60ca      	str	r2, [r1, #12]
}
    7dce:	bc10      	pop	{r4}
    7dd0:	4770      	bx	lr
		list->tail = node;
    7dd2:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7dd4:	63c3      	str	r3, [r0, #60]	; 0x3c
    7dd6:	e7f8      	b.n	7dca <bt_l2cap_chan_add+0x12>

00007dd8 <bt_l2cap_disconnected>:
{
    7dd8:	b510      	push	{r4, lr}
	return list->head;
    7dda:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7ddc:	b140      	cbz	r0, 7df0 <bt_l2cap_disconnected+0x18>
    7dde:	3808      	subs	r0, #8
    7de0:	b140      	cbz	r0, 7df4 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7de2:	f110 0408 	adds.w	r4, r0, #8
    7de6:	d000      	beq.n	7dea <bt_l2cap_disconnected+0x12>
	return node->next;
    7de8:	6884      	ldr	r4, [r0, #8]
    7dea:	b12c      	cbz	r4, 7df8 <bt_l2cap_disconnected+0x20>
    7dec:	3c08      	subs	r4, #8
    7dee:	e00a      	b.n	7e06 <bt_l2cap_disconnected+0x2e>
    7df0:	2000      	movs	r0, #0
    7df2:	e7f5      	b.n	7de0 <bt_l2cap_disconnected+0x8>
    7df4:	4604      	mov	r4, r0
    7df6:	e006      	b.n	7e06 <bt_l2cap_disconnected+0x2e>
    7df8:	2400      	movs	r4, #0
    7dfa:	e004      	b.n	7e06 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7dfc:	461a      	mov	r2, r3
    7dfe:	e00a      	b.n	7e16 <bt_l2cap_disconnected+0x3e>
    7e00:	3b08      	subs	r3, #8
    7e02:	4620      	mov	r0, r4
    7e04:	461c      	mov	r4, r3
    7e06:	b178      	cbz	r0, 7e28 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    7e08:	f7ff ff47 	bl	7c9a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7e0c:	b144      	cbz	r4, 7e20 <bt_l2cap_disconnected+0x48>
    7e0e:	f114 0308 	adds.w	r3, r4, #8
    7e12:	d0f3      	beq.n	7dfc <bt_l2cap_disconnected+0x24>
	return node->next;
    7e14:	68a2      	ldr	r2, [r4, #8]
    7e16:	b12a      	cbz	r2, 7e24 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d0f1      	beq.n	7e00 <bt_l2cap_disconnected+0x28>
	return node->next;
    7e1c:	68a3      	ldr	r3, [r4, #8]
    7e1e:	e7ef      	b.n	7e00 <bt_l2cap_disconnected+0x28>
    7e20:	4623      	mov	r3, r4
    7e22:	e7ee      	b.n	7e02 <bt_l2cap_disconnected+0x2a>
    7e24:	2300      	movs	r3, #0
    7e26:	e7ec      	b.n	7e02 <bt_l2cap_disconnected+0x2a>
}
    7e28:	bd10      	pop	{r4, pc}

00007e2a <bt_l2cap_create_pdu>:
{
    7e2a:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7e2c:	3104      	adds	r1, #4
    7e2e:	f7ff fc61 	bl	76f4 <bt_conn_create_pdu>
}
    7e32:	bd08      	pop	{r3, pc}

00007e34 <l2cap_create_le_sig_pdu>:
{
    7e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e36:	460f      	mov	r7, r1
    7e38:	4616      	mov	r6, r2
    7e3a:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7e3c:	2100      	movs	r1, #0
    7e3e:	4608      	mov	r0, r1
    7e40:	f7ff fff3 	bl	7e2a <bt_l2cap_create_pdu>
    7e44:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7e46:	2104      	movs	r1, #4
    7e48:	3008      	adds	r0, #8
    7e4a:	f012 feef 	bl	1ac2c <net_buf_simple_add>
	hdr->code = code;
    7e4e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    7e50:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7e52:	8045      	strh	r5, [r0, #2]
}
    7e54:	4620      	mov	r0, r4
    7e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007e58 <l2cap_chan_create_seg>:
{
    7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e5c:	4605      	mov	r5, r0
    7e5e:	460c      	mov	r4, r1
    7e60:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7e62:	7988      	ldrb	r0, [r1, #6]
    7e64:	f012 fe1c 	bl	1aaa0 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7e68:	89a3      	ldrh	r3, [r4, #12]
    7e6a:	4443      	add	r3, r8
    7e6c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    7e70:	4293      	cmp	r3, r2
    7e72:	d802      	bhi.n	7e7a <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7e74:	8ac3      	ldrh	r3, [r0, #22]
    7e76:	2b03      	cmp	r3, #3
    7e78:	d815      	bhi.n	7ea6 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7e7a:	79a0      	ldrb	r0, [r4, #6]
    7e7c:	f012 fe10 	bl	1aaa0 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7e80:	8ac3      	ldrh	r3, [r0, #22]
    7e82:	2b03      	cmp	r3, #3
    7e84:	d902      	bls.n	7e8c <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    7e86:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7e88:	2b4b      	cmp	r3, #75	; 0x4b
    7e8a:	d82e      	bhi.n	7eea <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7e8c:	2100      	movs	r1, #0
    7e8e:	4608      	mov	r0, r1
    7e90:	f7ff ffcb 	bl	7e2a <bt_l2cap_create_pdu>
    7e94:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    7e96:	f1b8 0f00 	cmp.w	r8, #0
    7e9a:	d038      	beq.n	7f0e <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7e9c:	f106 0008 	add.w	r0, r6, #8
    7ea0:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    7ea2:	2100      	movs	r1, #0
    7ea4:	e02e      	b.n	7f04 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7ea6:	fa1f f688 	uxth.w	r6, r8
    7eaa:	3608      	adds	r6, #8
    7eac:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7eae:	f104 0708 	add.w	r7, r4, #8
    7eb2:	4638      	mov	r0, r7
    7eb4:	f012 ff1f 	bl	1acf6 <net_buf_simple_headroom>
    7eb8:	42b0      	cmp	r0, r6
    7eba:	d3de      	bcc.n	7e7a <l2cap_chan_create_seg+0x22>
    7ebc:	6823      	ldr	r3, [r4, #0]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d1db      	bne.n	7e7a <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    7ec2:	f1b8 0f00 	cmp.w	r8, #0
    7ec6:	d00b      	beq.n	7ee0 <l2cap_chan_create_seg+0x88>
    7ec8:	4623      	mov	r3, r4
    7eca:	2100      	movs	r1, #0
    7ecc:	e002      	b.n	7ed4 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    7ece:	899a      	ldrh	r2, [r3, #12]
    7ed0:	4411      	add	r1, r2
		buf = buf->frags;
    7ed2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	d1fa      	bne.n	7ece <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    7ed8:	b289      	uxth	r1, r1
    7eda:	4638      	mov	r0, r7
    7edc:	f012 fee5 	bl	1acaa <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    7ee0:	4620      	mov	r0, r4
    7ee2:	f012 fe73 	bl	1abcc <net_buf_ref>
    7ee6:	4606      	mov	r6, r0
    7ee8:	e02f      	b.n	7f4a <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    7eea:	2100      	movs	r1, #0
    7eec:	f012 fde4 	bl	1aab8 <net_buf_alloc>
		if (seg) {
    7ef0:	4606      	mov	r6, r0
    7ef2:	2800      	cmp	r0, #0
    7ef4:	d0ca      	beq.n	7e8c <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    7ef6:	2108      	movs	r1, #8
    7ef8:	f012 fe39 	bl	1ab6e <net_buf_reserve>
    7efc:	e7cb      	b.n	7e96 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    7efe:	899a      	ldrh	r2, [r3, #12]
    7f00:	4411      	add	r1, r2
		buf = buf->frags;
    7f02:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7f04:	2b00      	cmp	r3, #0
    7f06:	d1fa      	bne.n	7efe <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7f08:	b289      	uxth	r1, r1
    7f0a:	f012 fea7 	bl	1ac5c <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7f0e:	f106 0708 	add.w	r7, r6, #8
    7f12:	4638      	mov	r0, r7
    7f14:	f012 fef3 	bl	1acfe <net_buf_simple_tailroom>
    7f18:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    7f1c:	eba5 0308 	sub.w	r3, r5, r8
    7f20:	4298      	cmp	r0, r3
    7f22:	d315      	bcc.n	7f50 <l2cap_chan_create_seg+0xf8>
    7f24:	fa1f f888 	uxth.w	r8, r8
    7f28:	eba5 0508 	sub.w	r5, r5, r8
    7f2c:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    7f2e:	89a0      	ldrh	r0, [r4, #12]
    7f30:	4285      	cmp	r5, r0
    7f32:	bf28      	it	cs
    7f34:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    7f36:	462a      	mov	r2, r5
    7f38:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7f3c:	4638      	mov	r0, r7
    7f3e:	f012 fe7b 	bl	1ac38 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    7f42:	4629      	mov	r1, r5
    7f44:	4620      	mov	r0, r4
    7f46:	f012 febe 	bl	1acc6 <net_buf_simple_pull>
}
    7f4a:	4630      	mov	r0, r6
    7f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7f50:	4638      	mov	r0, r7
    7f52:	f012 fed4 	bl	1acfe <net_buf_simple_tailroom>
    7f56:	b285      	uxth	r5, r0
    7f58:	e7e9      	b.n	7f2e <l2cap_chan_create_seg+0xd6>

00007f5a <bt_l2cap_send_cb>:
{
    7f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f5c:	4605      	mov	r5, r0
    7f5e:	460f      	mov	r7, r1
    7f60:	4614      	mov	r4, r2
    7f62:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    7f64:	2104      	movs	r1, #4
    7f66:	f102 0008 	add.w	r0, r2, #8
    7f6a:	f012 fe96 	bl	1ac9a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7f6e:	89a3      	ldrh	r3, [r4, #12]
    7f70:	3b04      	subs	r3, #4
    7f72:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    7f74:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    7f76:	4632      	mov	r2, r6
    7f78:	4621      	mov	r1, r4
    7f7a:	4628      	mov	r0, r5
    7f7c:	f7fe ffbe 	bl	6efc <bt_conn_send_cb>
    7f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007f84 <l2cap_chan_send_req>:
{
    7f84:	b538      	push	{r3, r4, r5, lr}
    7f86:	4604      	mov	r4, r0
    7f88:	460d      	mov	r5, r1
	if (timeout) {
    7f8a:	b94a      	cbnz	r2, 7fa0 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7f8c:	3010      	adds	r0, #16
    7f8e:	f021 ff3b 	bl	29e08 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    7f92:	2300      	movs	r3, #0
    7f94:	462a      	mov	r2, r5
    7f96:	2105      	movs	r1, #5
    7f98:	6820      	ldr	r0, [r4, #0]
    7f9a:	f7ff ffde 	bl	7f5a <bt_l2cap_send_cb>
    7f9e:	bd38      	pop	{r3, r4, r5, pc}
    7fa0:	f100 0110 	add.w	r1, r0, #16
    7fa4:	4801      	ldr	r0, [pc, #4]	; (7fac <l2cap_chan_send_req+0x28>)
    7fa6:	f021 ff89 	bl	29ebc <k_delayed_work_submit_to_queue>
    7faa:	e7f2      	b.n	7f92 <l2cap_chan_send_req+0xe>
    7fac:	20002b78 	.word	0x20002b78

00007fb0 <l2cap_le_conn_req>:
{
    7fb0:	b538      	push	{r3, r4, r5, lr}
    7fb2:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7fb4:	f7ff fca6 	bl	7904 <get_ident>
    7fb8:	4602      	mov	r2, r0
    7fba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7fbe:	230a      	movs	r3, #10
    7fc0:	2114      	movs	r1, #20
    7fc2:	2000      	movs	r0, #0
    7fc4:	f7ff ff36 	bl	7e34 <l2cap_create_le_sig_pdu>
    7fc8:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7fca:	210a      	movs	r1, #10
    7fcc:	3008      	adds	r0, #8
    7fce:	f012 fe2d 	bl	1ac2c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    7fd2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    7fd4:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7fd6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7fda:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7fdc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7fe0:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    7fe2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    7fe6:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7fe8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    7fec:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    7fee:	f649 4240 	movw	r2, #40000	; 0x9c40
    7ff2:	4629      	mov	r1, r5
    7ff4:	4620      	mov	r0, r4
    7ff6:	f7ff ffc5 	bl	7f84 <l2cap_chan_send_req>
}
    7ffa:	2000      	movs	r0, #0
    7ffc:	bd38      	pop	{r3, r4, r5, pc}

00007ffe <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    7ffe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8002:	2b01      	cmp	r3, #1
    8004:	d000      	beq.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    8006:	4770      	bx	lr
    8008:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    800c:	2b00      	cmp	r3, #0
    800e:	d1fa      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
{
    8010:	b510      	push	{r4, lr}
    8012:	4604      	mov	r4, r0
	if (status) {
    8014:	b911      	cbnz	r1, 801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    8016:	f7ff ffcb 	bl	7fb0 <l2cap_le_conn_req>
    801a:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    801c:	4601      	mov	r1, r0
    801e:	6800      	ldr	r0, [r0, #0]
    8020:	f7ff fe06 	bl	7c30 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    8024:	4620      	mov	r0, r4
    8026:	f7ff fe38 	bl	7c9a <bt_l2cap_chan_del>
		return;
    802a:	bd10      	pop	{r4, pc}

0000802c <bt_l2cap_encrypt_change>:
{
    802c:	b538      	push	{r3, r4, r5, lr}
    802e:	460d      	mov	r5, r1
	return list->head;
    8030:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8032:	b10c      	cbz	r4, 8038 <bt_l2cap_encrypt_change+0xc>
    8034:	3c08      	subs	r4, #8
    8036:	e00a      	b.n	804e <bt_l2cap_encrypt_change+0x22>
    8038:	2400      	movs	r4, #0
    803a:	e008      	b.n	804e <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    803c:	f114 0308 	adds.w	r3, r4, #8
    8040:	d012      	beq.n	8068 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    8042:	68a2      	ldr	r2, [r4, #8]
    8044:	b192      	cbz	r2, 806c <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8046:	b103      	cbz	r3, 804a <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    8048:	68a3      	ldr	r3, [r4, #8]
    804a:	f1a3 0408 	sub.w	r4, r3, #8
    804e:	b17c      	cbz	r4, 8070 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    8050:	4629      	mov	r1, r5
    8052:	4620      	mov	r0, r4
    8054:	f7ff ffd3 	bl	7ffe <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    8058:	6863      	ldr	r3, [r4, #4]
    805a:	689b      	ldr	r3, [r3, #8]
    805c:	2b00      	cmp	r3, #0
    805e:	d0ed      	beq.n	803c <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    8060:	4629      	mov	r1, r5
    8062:	4620      	mov	r0, r4
    8064:	4798      	blx	r3
    8066:	e7e9      	b.n	803c <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8068:	461a      	mov	r2, r3
    806a:	e7eb      	b.n	8044 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    806c:	2400      	movs	r4, #0
    806e:	e7ee      	b.n	804e <bt_l2cap_encrypt_change+0x22>
}
    8070:	bd38      	pop	{r3, r4, r5, pc}

00008072 <l2cap_chan_update_credits>:
{
    8072:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    8074:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    8076:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    807a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    807e:	d900      	bls.n	8082 <l2cap_chan_update_credits+0x10>
    8080:	bd70      	pop	{r4, r5, r6, pc}
    8082:	460e      	mov	r6, r1
    8084:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    8086:	b2a4      	uxth	r4, r4
    8088:	1b1b      	subs	r3, r3, r4
    808a:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    808c:	4621      	mov	r1, r4
    808e:	f7ff fd07 	bl	7aa0 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    8092:	f7ff fc37 	bl	7904 <get_ident>
    8096:	2304      	movs	r3, #4
    8098:	4602      	mov	r2, r0
    809a:	2116      	movs	r1, #22
    809c:	4630      	mov	r0, r6
    809e:	f7ff fec9 	bl	7e34 <l2cap_create_le_sig_pdu>
    80a2:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    80a4:	2104      	movs	r1, #4
    80a6:	3008      	adds	r0, #8
    80a8:	f012 fdc0 	bl	1ac2c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    80ac:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    80b0:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    80b2:	8044      	strh	r4, [r0, #2]
    80b4:	2300      	movs	r3, #0
    80b6:	4632      	mov	r2, r6
    80b8:	2105      	movs	r1, #5
    80ba:	6828      	ldr	r0, [r5, #0]
    80bc:	f7ff ff4d 	bl	7f5a <bt_l2cap_send_cb>
}
    80c0:	e7de      	b.n	8080 <l2cap_chan_update_credits+0xe>

000080c2 <l2cap_chan_le_send>:
{
    80c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80c4:	4604      	mov	r4, r0
    80c6:	460d      	mov	r5, r1
    80c8:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    80ca:	2100      	movs	r1, #0
    80cc:	3068      	adds	r0, #104	; 0x68
    80ce:	f021 f8bf 	bl	29250 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    80d2:	b9b0      	cbnz	r0, 8102 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    80d4:	4632      	mov	r2, r6
    80d6:	4629      	mov	r1, r5
    80d8:	4620      	mov	r0, r4
    80da:	f7ff febd 	bl	7e58 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    80de:	6827      	ldr	r7, [r4, #0]
    80e0:	b157      	cbz	r7, 80f8 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    80e2:	8985      	ldrh	r5, [r0, #12]
    80e4:	1bad      	subs	r5, r5, r6
    80e6:	2300      	movs	r3, #0
    80e8:	4602      	mov	r2, r0
    80ea:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    80ee:	4638      	mov	r0, r7
    80f0:	f7ff ff33 	bl	7f5a <bt_l2cap_send_cb>
}
    80f4:	4628      	mov	r0, r5
    80f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    80f8:	f012 fd4c 	bl	1ab94 <net_buf_unref>
		return -ECONNRESET;
    80fc:	f06f 0567 	mvn.w	r5, #103	; 0x67
    8100:	e7f8      	b.n	80f4 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    8102:	f06f 050a 	mvn.w	r5, #10
    8106:	e7f5      	b.n	80f4 <l2cap_chan_le_send+0x32>

00008108 <l2cap_chan_le_send_sdu>:
{
    8108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    810c:	b082      	sub	sp, #8
    810e:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    8110:	680d      	ldr	r5, [r1, #0]
    8112:	462b      	mov	r3, r5
	size_t bytes = 0;
    8114:	2200      	movs	r2, #0
    8116:	e002      	b.n	811e <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    8118:	899c      	ldrh	r4, [r3, #12]
    811a:	4422      	add	r2, r4
		buf = buf->frags;
    811c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    811e:	2b00      	cmp	r3, #0
    8120:	d1fa      	bne.n	8118 <l2cap_chan_le_send_sdu+0x10>
    8122:	9b01      	ldr	r3, [sp, #4]
    8124:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    8126:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    812a:	4294      	cmp	r4, r2
    812c:	dc54      	bgt.n	81d8 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    812e:	89aa      	ldrh	r2, [r5, #12]
    8130:	b912      	cbnz	r2, 8138 <l2cap_chan_le_send_sdu+0x30>
    8132:	682a      	ldr	r2, [r5, #0]
    8134:	b102      	cbz	r2, 8138 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    8136:	4615      	mov	r5, r2
    8138:	4688      	mov	r8, r1
    813a:	4607      	mov	r7, r0
	if (!sent) {
    813c:	b10b      	cbz	r3, 8142 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    813e:	2600      	movs	r6, #0
    8140:	e024      	b.n	818c <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    8142:	2202      	movs	r2, #2
    8144:	4629      	mov	r1, r5
    8146:	f7ff ffbc 	bl	80c2 <l2cap_chan_le_send>
		if (ret < 0) {
    814a:	1e06      	subs	r6, r0, #0
    814c:	db01      	blt.n	8152 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    814e:	9601      	str	r6, [sp, #4]
    8150:	e7f5      	b.n	813e <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    8152:	f116 0f0b 	cmn.w	r6, #11
    8156:	d002      	beq.n	815e <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    8158:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    815c:	e038      	b.n	81d0 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    815e:	f105 0010 	add.w	r0, r5, #16
    8162:	89eb      	ldrh	r3, [r5, #14]
    8164:	4418      	add	r0, r3
    8166:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8168:	2204      	movs	r2, #4
    816a:	eb0d 0102 	add.w	r1, sp, r2
    816e:	f020 0003 	bic.w	r0, r0, #3
    8172:	f7f8 f8a5 	bl	2c0 <memcpy>
    8176:	e7ef      	b.n	8158 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    8178:	2200      	movs	r2, #0
    817a:	4629      	mov	r1, r5
    817c:	4638      	mov	r0, r7
    817e:	f7ff ffa0 	bl	80c2 <l2cap_chan_le_send>
		if (ret < 0) {
    8182:	1e06      	subs	r6, r0, #0
    8184:	db0e      	blt.n	81a4 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    8186:	9b01      	ldr	r3, [sp, #4]
    8188:	4433      	add	r3, r6
    818a:	9301      	str	r3, [sp, #4]
    818c:	9b01      	ldr	r3, [sp, #4]
    818e:	429c      	cmp	r4, r3
    8190:	dd1b      	ble.n	81ca <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    8192:	89ab      	ldrh	r3, [r5, #12]
    8194:	2b00      	cmp	r3, #0
    8196:	d1ef      	bne.n	8178 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    8198:	4629      	mov	r1, r5
    819a:	2000      	movs	r0, #0
    819c:	f012 fd3a 	bl	1ac14 <net_buf_frag_del>
    81a0:	4605      	mov	r5, r0
    81a2:	e7e9      	b.n	8178 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    81a4:	f116 0f0b 	cmn.w	r6, #11
    81a8:	d002      	beq.n	81b0 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    81aa:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    81ae:	e00f      	b.n	81d0 <l2cap_chan_le_send_sdu+0xc8>
    81b0:	f105 0010 	add.w	r0, r5, #16
    81b4:	89eb      	ldrh	r3, [r5, #14]
    81b6:	4418      	add	r0, r3
    81b8:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    81ba:	2204      	movs	r2, #4
    81bc:	eb0d 0102 	add.w	r1, sp, r2
    81c0:	f020 0003 	bic.w	r0, r0, #3
    81c4:	f7f8 f87c 	bl	2c0 <memcpy>
    81c8:	e7ef      	b.n	81aa <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    81ca:	4628      	mov	r0, r5
    81cc:	f012 fce2 	bl	1ab94 <net_buf_unref>
}
    81d0:	4630      	mov	r0, r6
    81d2:	b002      	add	sp, #8
    81d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    81d8:	f06f 0679 	mvn.w	r6, #121	; 0x79
    81dc:	e7f8      	b.n	81d0 <l2cap_chan_le_send_sdu+0xc8>

000081de <l2cap_chan_le_send_resume>:
{
    81de:	b510      	push	{r4, lr}
    81e0:	b082      	sub	sp, #8
    81e2:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    81e4:	4620      	mov	r0, r4
    81e6:	f7ff fc91 	bl	7b0c <l2cap_chan_le_get_tx_buf>
    81ea:	9001      	str	r0, [sp, #4]
    81ec:	b180      	cbz	r0, 8210 <l2cap_chan_le_send_resume+0x32>
    81ee:	f100 0310 	add.w	r3, r0, #16
    81f2:	89c2      	ldrh	r2, [r0, #14]
    81f4:	4413      	add	r3, r2
    81f6:	3303      	adds	r3, #3
    81f8:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    81fc:	681a      	ldr	r2, [r3, #0]
    81fe:	a901      	add	r1, sp, #4
    8200:	4620      	mov	r0, r4
    8202:	f7ff ff81 	bl	8108 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    8206:	2800      	cmp	r0, #0
    8208:	daec      	bge.n	81e4 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    820a:	f110 0f0b 	cmn.w	r0, #11
    820e:	d001      	beq.n	8214 <l2cap_chan_le_send_resume+0x36>
}
    8210:	b002      	add	sp, #8
    8212:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    8214:	9b01      	ldr	r3, [sp, #4]
    8216:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    821a:	e7f9      	b.n	8210 <l2cap_chan_le_send_resume+0x32>

0000821c <l2cap_send_reject>:
{
    821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8220:	4680      	mov	r8, r0
    8222:	4691      	mov	r9, r2
    8224:	461e      	mov	r6, r3
    8226:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    822a:	1cbb      	adds	r3, r7, #2
    822c:	460a      	mov	r2, r1
    822e:	2101      	movs	r1, #1
    8230:	2000      	movs	r0, #0
    8232:	f7ff fdff 	bl	7e34 <l2cap_create_le_sig_pdu>
    8236:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    8238:	f100 0508 	add.w	r5, r0, #8
    823c:	2102      	movs	r1, #2
    823e:	4628      	mov	r0, r5
    8240:	f012 fcf4 	bl	1ac2c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    8244:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    8248:	b126      	cbz	r6, 8254 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    824a:	463a      	mov	r2, r7
    824c:	4631      	mov	r1, r6
    824e:	4628      	mov	r0, r5
    8250:	f012 fcf2 	bl	1ac38 <net_buf_simple_add_mem>
    8254:	2300      	movs	r3, #0
    8256:	4622      	mov	r2, r4
    8258:	2105      	movs	r1, #5
    825a:	4640      	mov	r0, r8
    825c:	f7ff fe7d 	bl	7f5a <bt_l2cap_send_cb>
    8260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008264 <le_conn_param_update_req>:
{
    8264:	b570      	push	{r4, r5, r6, lr}
    8266:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8268:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    826a:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    826c:	8990      	ldrh	r0, [r2, #12]
    826e:	2807      	cmp	r0, #7
    8270:	d908      	bls.n	8284 <le_conn_param_update_req+0x20>
    8272:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8274:	78e2      	ldrb	r2, [r4, #3]
    8276:	b13a      	cbz	r2, 8288 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8278:	2200      	movs	r2, #0
    827a:	9200      	str	r2, [sp, #0]
    827c:	4613      	mov	r3, r2
    827e:	4620      	mov	r0, r4
    8280:	f7ff ffcc 	bl	821c <l2cap_send_reject>
}
    8284:	b004      	add	sp, #16
    8286:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    8288:	881a      	ldrh	r2, [r3, #0]
    828a:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    828e:	885a      	ldrh	r2, [r3, #2]
    8290:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8294:	889a      	ldrh	r2, [r3, #4]
    8296:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    829a:	88db      	ldrh	r3, [r3, #6]
    829c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    82a0:	2302      	movs	r3, #2
    82a2:	460a      	mov	r2, r1
    82a4:	2113      	movs	r1, #19
    82a6:	f7ff fdc5 	bl	7e34 <l2cap_create_le_sig_pdu>
    82aa:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    82ac:	a902      	add	r1, sp, #8
    82ae:	4620      	mov	r0, r4
    82b0:	f7fe fcc2 	bl	6c38 <le_param_req>
    82b4:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    82b6:	2102      	movs	r1, #2
    82b8:	f106 0008 	add.w	r0, r6, #8
    82bc:	f012 fcb6 	bl	1ac2c <net_buf_simple_add>
	if (accepted) {
    82c0:	b17d      	cbz	r5, 82e2 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    82c2:	2300      	movs	r3, #0
    82c4:	7003      	strb	r3, [r0, #0]
    82c6:	7043      	strb	r3, [r0, #1]
    82c8:	2300      	movs	r3, #0
    82ca:	4632      	mov	r2, r6
    82cc:	2105      	movs	r1, #5
    82ce:	4620      	mov	r0, r4
    82d0:	f7ff fe43 	bl	7f5a <bt_l2cap_send_cb>
	if (accepted) {
    82d4:	2d00      	cmp	r5, #0
    82d6:	d0d5      	beq.n	8284 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    82d8:	a902      	add	r1, sp, #8
    82da:	4620      	mov	r0, r4
    82dc:	f7ff f976 	bl	75cc <bt_conn_le_conn_update>
    82e0:	e7d0      	b.n	8284 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    82e2:	2301      	movs	r3, #1
    82e4:	7003      	strb	r3, [r0, #0]
    82e6:	2300      	movs	r3, #0
    82e8:	7043      	strb	r3, [r0, #1]
    82ea:	e7ed      	b.n	82c8 <le_conn_param_update_req+0x64>

000082ec <le_disconn_req>:
{
    82ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f0:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    82f2:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    82f4:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    82f6:	8993      	ldrh	r3, [r2, #12]
    82f8:	2b03      	cmp	r3, #3
    82fa:	d802      	bhi.n	8302 <le_disconn_req+0x16>
}
    82fc:	b004      	add	sp, #16
    82fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8302:	4614      	mov	r4, r2
    8304:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    8306:	8879      	ldrh	r1, [r7, #2]
    8308:	4630      	mov	r0, r6
    830a:	f7ff fb5f 	bl	79cc <l2cap_remove_tx_cid>
	if (!chan) {
    830e:	4680      	mov	r8, r0
    8310:	b1d0      	cbz	r0, 8348 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    8312:	2304      	movs	r3, #4
    8314:	462a      	mov	r2, r5
    8316:	2107      	movs	r1, #7
    8318:	4620      	mov	r0, r4
    831a:	f7ff fd8b 	bl	7e34 <l2cap_create_le_sig_pdu>
    831e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8320:	2104      	movs	r1, #4
    8322:	3008      	adds	r0, #8
    8324:	f012 fc82 	bl	1ac2c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    8328:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    832c:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    832e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    8332:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    8334:	4640      	mov	r0, r8
    8336:	f7ff fcb0 	bl	7c9a <bt_l2cap_chan_del>
    833a:	2300      	movs	r3, #0
    833c:	4622      	mov	r2, r4
    833e:	2105      	movs	r1, #5
    8340:	4630      	mov	r0, r6
    8342:	f7ff fe0a 	bl	7f5a <bt_l2cap_send_cb>
    8346:	e7d9      	b.n	82fc <le_disconn_req+0x10>
		data.scid = req->scid;
    8348:	887b      	ldrh	r3, [r7, #2]
    834a:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    834e:	883b      	ldrh	r3, [r7, #0]
    8350:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    8354:	2304      	movs	r3, #4
    8356:	9300      	str	r3, [sp, #0]
    8358:	ab03      	add	r3, sp, #12
    835a:	2202      	movs	r2, #2
    835c:	4629      	mov	r1, r5
    835e:	4630      	mov	r0, r6
    8360:	f7ff ff5c 	bl	821c <l2cap_send_reject>
    8364:	e7ca      	b.n	82fc <le_disconn_req+0x10>

00008366 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    8366:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8368:	b108      	cbz	r0, 836e <bt_l2cap_le_lookup_tx_cid+0x8>
    836a:	3808      	subs	r0, #8
    836c:	e006      	b.n	837c <bt_l2cap_le_lookup_tx_cid+0x16>
    836e:	2000      	movs	r0, #0
    8370:	e004      	b.n	837c <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8372:	461a      	mov	r2, r3
    8374:	e00b      	b.n	838e <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    8376:	6883      	ldr	r3, [r0, #8]
    8378:	f1a3 0008 	sub.w	r0, r3, #8
    837c:	b168      	cbz	r0, 839a <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    837e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    8382:	428b      	cmp	r3, r1
    8384:	d009      	beq.n	839a <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8386:	f110 0308 	adds.w	r3, r0, #8
    838a:	d0f2      	beq.n	8372 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    838c:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    838e:	b112      	cbz	r2, 8396 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8390:	2b00      	cmp	r3, #0
    8392:	d1f0      	bne.n	8376 <bt_l2cap_le_lookup_tx_cid+0x10>
    8394:	e7f0      	b.n	8378 <bt_l2cap_le_lookup_tx_cid+0x12>
    8396:	2000      	movs	r0, #0
    8398:	e7f0      	b.n	837c <bt_l2cap_le_lookup_tx_cid+0x16>
}
    839a:	4770      	bx	lr

0000839c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    839c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    839e:	b108      	cbz	r0, 83a4 <bt_l2cap_le_lookup_rx_cid+0x8>
    83a0:	3808      	subs	r0, #8
    83a2:	e006      	b.n	83b2 <bt_l2cap_le_lookup_rx_cid+0x16>
    83a4:	2000      	movs	r0, #0
    83a6:	e004      	b.n	83b2 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    83a8:	461a      	mov	r2, r3
    83aa:	e00b      	b.n	83c4 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    83ac:	6883      	ldr	r3, [r0, #8]
    83ae:	f1a3 0008 	sub.w	r0, r3, #8
    83b2:	b168      	cbz	r0, 83d0 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    83b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    83b8:	428b      	cmp	r3, r1
    83ba:	d009      	beq.n	83d0 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    83bc:	f110 0308 	adds.w	r3, r0, #8
    83c0:	d0f2      	beq.n	83a8 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    83c2:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    83c4:	b112      	cbz	r2, 83cc <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    83c6:	2b00      	cmp	r3, #0
    83c8:	d1f0      	bne.n	83ac <bt_l2cap_le_lookup_rx_cid+0x10>
    83ca:	e7f0      	b.n	83ae <bt_l2cap_le_lookup_rx_cid+0x12>
    83cc:	2000      	movs	r0, #0
    83ce:	e7f0      	b.n	83b2 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    83d0:	4770      	bx	lr

000083d2 <l2cap_chan_alloc_cid>:
{
    83d2:	b570      	push	{r4, r5, r6, lr}
    83d4:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    83d6:	460d      	mov	r5, r1
    83d8:	b1a1      	cbz	r1, 8404 <l2cap_chan_alloc_cid+0x32>
    83da:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    83de:	b9ab      	cbnz	r3, 840c <l2cap_chan_alloc_cid+0x3a>
    83e0:	2440      	movs	r4, #64	; 0x40
    83e2:	e001      	b.n	83e8 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    83e4:	3401      	adds	r4, #1
    83e6:	b2a4      	uxth	r4, r4
    83e8:	2c7f      	cmp	r4, #127	; 0x7f
    83ea:	d80d      	bhi.n	8408 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    83ec:	2d00      	cmp	r5, #0
    83ee:	d0f9      	beq.n	83e4 <l2cap_chan_alloc_cid+0x12>
    83f0:	4621      	mov	r1, r4
    83f2:	4630      	mov	r0, r6
    83f4:	f7ff ffd2 	bl	839c <bt_l2cap_le_lookup_rx_cid>
    83f8:	2800      	cmp	r0, #0
    83fa:	d1f3      	bne.n	83e4 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    83fc:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    8400:	4628      	mov	r0, r5
    8402:	bd70      	pop	{r4, r5, r6, pc}
    8404:	2440      	movs	r4, #64	; 0x40
    8406:	e7ef      	b.n	83e8 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    8408:	2000      	movs	r0, #0
    840a:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    840c:	4608      	mov	r0, r1
}
    840e:	bd70      	pop	{r4, r5, r6, pc}

00008410 <l2cap_chan_add>:
{
    8410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8412:	4606      	mov	r6, r0
    8414:	460c      	mov	r4, r1
    8416:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    8418:	f7ff ffdb 	bl	83d2 <l2cap_chan_alloc_cid>
	if (!ch) {
    841c:	b1c0      	cbz	r0, 8450 <l2cap_chan_add+0x40>
    841e:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8420:	490c      	ldr	r1, [pc, #48]	; (8454 <l2cap_chan_add+0x44>)
    8422:	f104 0010 	add.w	r0, r4, #16
    8426:	f021 fcd1 	bl	29dcc <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    842a:	463a      	mov	r2, r7
    842c:	4621      	mov	r1, r4
    842e:	4630      	mov	r0, r6
    8430:	f7ff fcc2 	bl	7db8 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8434:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8438:	3b40      	subs	r3, #64	; 0x40
    843a:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    843c:	2b3f      	cmp	r3, #63	; 0x3f
    843e:	d901      	bls.n	8444 <l2cap_chan_add+0x34>
	return true;
    8440:	2001      	movs	r0, #1
}
    8442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    8444:	2101      	movs	r1, #1
    8446:	4620      	mov	r0, r4
    8448:	f7ff fc24 	bl	7c94 <bt_l2cap_chan_set_state>
	return true;
    844c:	2001      	movs	r0, #1
    844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    8450:	2000      	movs	r0, #0
    8452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8454:	00007cc5 	.word	0x00007cc5

00008458 <bt_l2cap_connected>:
{
    8458:	b530      	push	{r4, r5, lr}
    845a:	b083      	sub	sp, #12
    845c:	4605      	mov	r5, r0
	return list->head;
    845e:	4b18      	ldr	r3, [pc, #96]	; (84c0 <bt_l2cap_connected+0x68>)
    8460:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8462:	b10c      	cbz	r4, 8468 <bt_l2cap_connected+0x10>
    8464:	3c08      	subs	r4, #8
    8466:	e00a      	b.n	847e <bt_l2cap_connected+0x26>
    8468:	2400      	movs	r4, #0
    846a:	e008      	b.n	847e <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    846c:	f114 0308 	adds.w	r3, r4, #8
    8470:	d01f      	beq.n	84b2 <bt_l2cap_connected+0x5a>
	return node->next;
    8472:	68a2      	ldr	r2, [r4, #8]
    8474:	b1fa      	cbz	r2, 84b6 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8476:	b103      	cbz	r3, 847a <bt_l2cap_connected+0x22>
	return node->next;
    8478:	68a3      	ldr	r3, [r4, #8]
    847a:	f1a3 0408 	sub.w	r4, r3, #8
    847e:	b1e4      	cbz	r4, 84ba <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    8480:	6863      	ldr	r3, [r4, #4]
    8482:	a901      	add	r1, sp, #4
    8484:	4628      	mov	r0, r5
    8486:	4798      	blx	r3
    8488:	2800      	cmp	r0, #0
    848a:	dbef      	blt.n	846c <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    848c:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    848e:	8823      	ldrh	r3, [r4, #0]
    8490:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    8494:	8823      	ldrh	r3, [r4, #0]
    8496:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    849a:	2200      	movs	r2, #0
    849c:	4628      	mov	r0, r5
    849e:	f7ff ffb7 	bl	8410 <l2cap_chan_add>
    84a2:	b150      	cbz	r0, 84ba <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    84a4:	9801      	ldr	r0, [sp, #4]
    84a6:	6843      	ldr	r3, [r0, #4]
    84a8:	681b      	ldr	r3, [r3, #0]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d0de      	beq.n	846c <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    84ae:	4798      	blx	r3
    84b0:	e7dc      	b.n	846c <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    84b2:	461a      	mov	r2, r3
    84b4:	e7de      	b.n	8474 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    84b6:	2400      	movs	r4, #0
    84b8:	e7e1      	b.n	847e <bt_l2cap_connected+0x26>
}
    84ba:	b003      	add	sp, #12
    84bc:	bd30      	pop	{r4, r5, pc}
    84be:	bf00      	nop
    84c0:	20000644 	.word	0x20000644

000084c4 <le_conn_req>:
{
    84c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84c8:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    84ca:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    84cc:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    84ce:	8990      	ldrh	r0, [r2, #12]
    84d0:	2809      	cmp	r0, #9
    84d2:	d912      	bls.n	84fa <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    84d4:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    84d8:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    84dc:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    84e0:	889e      	ldrh	r6, [r3, #4]
    84e2:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    84e4:	88df      	ldrh	r7, [r3, #6]
    84e6:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    84ea:	891d      	ldrh	r5, [r3, #8]
    84ec:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    84f0:	2816      	cmp	r0, #22
    84f2:	d902      	bls.n	84fa <le_conn_req+0x36>
    84f4:	f1be 0f16 	cmp.w	lr, #22
    84f8:	d802      	bhi.n	8500 <le_conn_req+0x3c>
}
    84fa:	b005      	add	sp, #20
    84fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8500:	4610      	mov	r0, r2
    8502:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    8504:	230a      	movs	r3, #10
    8506:	2115      	movs	r1, #21
    8508:	f7ff fc94 	bl	7e34 <l2cap_create_le_sig_pdu>
    850c:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    850e:	210a      	movs	r1, #10
    8510:	3008      	adds	r0, #8
    8512:	f012 fb8b 	bl	1ac2c <net_buf_simple_add>
    8516:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    8518:	220a      	movs	r2, #10
    851a:	2100      	movs	r1, #0
    851c:	f021 fe58 	bl	2a1d0 <memset>
	server = l2cap_server_lookup_psm(psm);
    8520:	4648      	mov	r0, r9
    8522:	f7ff fa35 	bl	7990 <l2cap_server_lookup_psm>
	if (!server) {
    8526:	4681      	mov	r9, r0
    8528:	b168      	cbz	r0, 8546 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    852a:	7a22      	ldrb	r2, [r4, #8]
    852c:	7883      	ldrb	r3, [r0, #2]
    852e:	429a      	cmp	r2, r3
    8530:	d20d      	bcs.n	854e <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    8532:	2305      	movs	r3, #5
    8534:	9a01      	ldr	r2, [sp, #4]
    8536:	8113      	strh	r3, [r2, #8]
    8538:	2300      	movs	r3, #0
    853a:	9a00      	ldr	r2, [sp, #0]
    853c:	2105      	movs	r1, #5
    853e:	4620      	mov	r0, r4
    8540:	f7ff fd0b 	bl	7f5a <bt_l2cap_send_cb>
    8544:	e7d9      	b.n	84fa <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    8546:	2302      	movs	r3, #2
    8548:	9a01      	ldr	r2, [sp, #4]
    854a:	8113      	strh	r3, [r2, #8]
		goto rsp;
    854c:	e7f4      	b.n	8538 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    854e:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    8552:	b29b      	uxth	r3, r3
    8554:	2b3f      	cmp	r3, #63	; 0x3f
    8556:	d903      	bls.n	8560 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    8558:	2309      	movs	r3, #9
    855a:	9a01      	ldr	r2, [sp, #4]
    855c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    855e:	e7eb      	b.n	8538 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8560:	4651      	mov	r1, sl
    8562:	4620      	mov	r0, r4
    8564:	f7ff feff 	bl	8366 <bt_l2cap_le_lookup_tx_cid>
    8568:	9003      	str	r0, [sp, #12]
	if (chan) {
    856a:	b118      	cbz	r0, 8574 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    856c:	230a      	movs	r3, #10
    856e:	9a01      	ldr	r2, [sp, #4]
    8570:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8572:	e7e1      	b.n	8538 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    8574:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8578:	a903      	add	r1, sp, #12
    857a:	4620      	mov	r0, r4
    857c:	4798      	blx	r3
    857e:	2800      	cmp	r0, #0
    8580:	da03      	bge.n	858a <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    8582:	2304      	movs	r3, #4
    8584:	9a01      	ldr	r2, [sp, #4]
    8586:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8588:	e7d6      	b.n	8538 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    858a:	9903      	ldr	r1, [sp, #12]
    858c:	f899 3002 	ldrb.w	r3, [r9, #2]
    8590:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8594:	4a1e      	ldr	r2, [pc, #120]	; (8610 <le_conn_req+0x14c>)
    8596:	4620      	mov	r0, r4
    8598:	f7ff ff3a 	bl	8410 <l2cap_chan_add>
    859c:	b918      	cbnz	r0, 85a6 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    859e:	2304      	movs	r3, #4
    85a0:	9a01      	ldr	r2, [sp, #4]
    85a2:	8113      	strh	r3, [r2, #8]
    85a4:	e7c8      	b.n	8538 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    85a6:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    85aa:	4650      	mov	r0, sl
    85ac:	f7ff fabd 	bl	7b2a <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    85b0:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    85b4:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    85b8:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    85bc:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    85c0:	4659      	mov	r1, fp
    85c2:	4650      	mov	r0, sl
    85c4:	f7ff fa79 	bl	7aba <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    85c8:	4650      	mov	r0, sl
    85ca:	f7ff fac1 	bl	7b50 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    85ce:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    85d2:	4650      	mov	r0, sl
    85d4:	f7ff fa64 	bl	7aa0 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    85d8:	9803      	ldr	r0, [sp, #12]
    85da:	f8b9 3000 	ldrh.w	r3, [r9]
    85de:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    85e0:	2103      	movs	r1, #3
    85e2:	f7ff fb57 	bl	7c94 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    85e6:	9803      	ldr	r0, [sp, #12]
    85e8:	6843      	ldr	r3, [r0, #4]
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	b103      	cbz	r3, 85f0 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    85ee:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    85f0:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    85f4:	9901      	ldr	r1, [sp, #4]
    85f6:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    85f8:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    85fc:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    85fe:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    8602:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    8604:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    8608:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    860a:	2300      	movs	r3, #0
    860c:	810b      	strh	r3, [r1, #8]
    860e:	e793      	b.n	8538 <le_conn_req+0x74>
    8610:	00007ad5 	.word	0x00007ad5

00008614 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    8614:	1e53      	subs	r3, r2, #1
    8616:	b29b      	uxth	r3, r3
    8618:	2bfe      	cmp	r3, #254	; 0xfe
    861a:	d814      	bhi.n	8646 <l2cap_le_connect+0x32>
{
    861c:	b570      	push	{r4, r5, r6, lr}
    861e:	4615      	mov	r5, r2
    8620:	460c      	mov	r4, r1
    8622:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    8624:	4608      	mov	r0, r1
    8626:	f7ff fa80 	bl	7b2a <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    862a:	4620      	mov	r0, r4
    862c:	f7ff fa90 	bl	7b50 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    8630:	4a08      	ldr	r2, [pc, #32]	; (8654 <l2cap_le_connect+0x40>)
    8632:	4621      	mov	r1, r4
    8634:	4630      	mov	r0, r6
    8636:	f7ff feeb 	bl	8410 <l2cap_chan_add>
    863a:	b138      	cbz	r0, 864c <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    863c:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    863e:	4620      	mov	r0, r4
    8640:	f7ff fcb6 	bl	7fb0 <l2cap_le_conn_req>
    8644:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    8646:	f06f 0015 	mvn.w	r0, #21
    864a:	4770      	bx	lr
		return -ENOMEM;
    864c:	f06f 000b 	mvn.w	r0, #11
}
    8650:	bd70      	pop	{r4, r5, r6, pc}
    8652:	bf00      	nop
    8654:	00007ad5 	.word	0x00007ad5

00008658 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    8658:	8802      	ldrh	r2, [r0, #0]
    865a:	1e53      	subs	r3, r2, #1
    865c:	b29b      	uxth	r3, r3
    865e:	2bfe      	cmp	r3, #254	; 0xfe
    8660:	d81d      	bhi.n	869e <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    8662:	6843      	ldr	r3, [r0, #4]
    8664:	b1f3      	cbz	r3, 86a4 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    8666:	7883      	ldrb	r3, [r0, #2]
    8668:	2b04      	cmp	r3, #4
    866a:	d81e      	bhi.n	86aa <bt_l2cap_server_register+0x52>
{
    866c:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    866e:	b90b      	cbnz	r3, 8674 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    8670:	2301      	movs	r3, #1
    8672:	7083      	strb	r3, [r0, #2]
    8674:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    8676:	4610      	mov	r0, r2
    8678:	f7ff f98a 	bl	7990 <l2cap_server_lookup_psm>
    867c:	b9c0      	cbnz	r0, 86b0 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    867e:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    8682:	2200      	movs	r2, #0
    8684:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    8686:	4a0c      	ldr	r2, [pc, #48]	; (86b8 <bt_l2cap_server_register+0x60>)
    8688:	6852      	ldr	r2, [r2, #4]
    868a:	b122      	cbz	r2, 8696 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    868c:	6013      	str	r3, [r2, #0]
		list->tail = node;
    868e:	4a0a      	ldr	r2, [pc, #40]	; (86b8 <bt_l2cap_server_register+0x60>)
    8690:	6053      	str	r3, [r2, #4]
	return 0;
    8692:	2000      	movs	r0, #0
    8694:	bd10      	pop	{r4, pc}
		list->tail = node;
    8696:	4a08      	ldr	r2, [pc, #32]	; (86b8 <bt_l2cap_server_register+0x60>)
    8698:	6053      	str	r3, [r2, #4]
		list->head = node;
    869a:	6013      	str	r3, [r2, #0]
    869c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    869e:	f06f 0015 	mvn.w	r0, #21
    86a2:	4770      	bx	lr
    86a4:	f06f 0015 	mvn.w	r0, #21
    86a8:	4770      	bx	lr
		return -EINVAL;
    86aa:	f06f 0015 	mvn.w	r0, #21
    86ae:	4770      	bx	lr
		return -EADDRINUSE;
    86b0:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    86b4:	bd10      	pop	{r4, pc}
    86b6:	bf00      	nop
    86b8:	2000064c 	.word	0x2000064c

000086bc <bt_l2cap_update_conn_param>:
{
    86bc:	b570      	push	{r4, r5, r6, lr}
    86be:	4606      	mov	r6, r0
    86c0:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    86c2:	f7ff f91f 	bl	7904 <get_ident>
    86c6:	2308      	movs	r3, #8
    86c8:	4602      	mov	r2, r0
    86ca:	2112      	movs	r1, #18
    86cc:	2000      	movs	r0, #0
    86ce:	f7ff fbb1 	bl	7e34 <l2cap_create_le_sig_pdu>
    86d2:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    86d4:	2108      	movs	r1, #8
    86d6:	4408      	add	r0, r1
    86d8:	f012 faa8 	bl	1ac2c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    86dc:	8823      	ldrh	r3, [r4, #0]
    86de:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    86e0:	8863      	ldrh	r3, [r4, #2]
    86e2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    86e4:	88a3      	ldrh	r3, [r4, #4]
    86e6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    86e8:	88e3      	ldrh	r3, [r4, #6]
    86ea:	80c3      	strh	r3, [r0, #6]
    86ec:	2300      	movs	r3, #0
    86ee:	462a      	mov	r2, r5
    86f0:	2105      	movs	r1, #5
    86f2:	4630      	mov	r0, r6
    86f4:	f7ff fc31 	bl	7f5a <bt_l2cap_send_cb>
}
    86f8:	2000      	movs	r0, #0
    86fa:	bd70      	pop	{r4, r5, r6, pc}

000086fc <bt_l2cap_init>:
{
    86fc:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    86fe:	4802      	ldr	r0, [pc, #8]	; (8708 <bt_l2cap_init+0xc>)
    8700:	f7ff fa84 	bl	7c0c <bt_l2cap_le_fixed_chan_register>
    8704:	bd08      	pop	{r3, pc}
    8706:	bf00      	nop
    8708:	2000b9c0 	.word	0x2000b9c0

0000870c <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    870c:	b188      	cbz	r0, 8732 <bt_l2cap_chan_connect+0x26>
{
    870e:	b508      	push	{r3, lr}
    8710:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    8712:	7b00      	ldrb	r0, [r0, #12]
    8714:	2803      	cmp	r0, #3
    8716:	d10f      	bne.n	8738 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    8718:	b189      	cbz	r1, 873e <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    871a:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    871e:	2804      	cmp	r0, #4
    8720:	d810      	bhi.n	8744 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    8722:	b910      	cbnz	r0, 872a <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    8724:	2001      	movs	r0, #1
    8726:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    872a:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    872c:	f7ff ff72 	bl	8614 <l2cap_le_connect>
    8730:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    8732:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8736:	4770      	bx	lr
    8738:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    873c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    873e:	f06f 0015 	mvn.w	r0, #21
    8742:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8744:	f06f 0015 	mvn.w	r0, #21
}
    8748:	bd08      	pop	{r3, pc}

0000874a <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    874a:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    874c:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    874e:	b30b      	cbz	r3, 8794 <bt_l2cap_chan_disconnect+0x4a>
    8750:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    8752:	f7ff f8d7 	bl	7904 <get_ident>
    8756:	4602      	mov	r2, r0
    8758:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    875c:	2304      	movs	r3, #4
    875e:	2106      	movs	r1, #6
    8760:	2000      	movs	r0, #0
    8762:	f7ff fb67 	bl	7e34 <l2cap_create_le_sig_pdu>
    8766:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    8768:	2104      	movs	r1, #4
    876a:	3008      	adds	r0, #8
    876c:	f012 fa5e 	bl	1ac2c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    8770:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8774:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8776:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    877a:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    877c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    8780:	4629      	mov	r1, r5
    8782:	4620      	mov	r0, r4
    8784:	f7ff fbfe 	bl	7f84 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    8788:	2104      	movs	r1, #4
    878a:	4620      	mov	r0, r4
    878c:	f7ff fa82 	bl	7c94 <bt_l2cap_chan_set_state>

	return 0;
    8790:	2000      	movs	r0, #0
    8792:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8794:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    8798:	bd38      	pop	{r3, r4, r5, pc}

0000879a <l2cap_chan_le_recv_sdu>:
{
    879a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    879e:	4681      	mov	r9, r0
    87a0:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    87a2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    87a6:	4603      	mov	r3, r0
	size_t bytes = 0;
    87a8:	2200      	movs	r2, #0
    87aa:	e002      	b.n	87b2 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    87ac:	8999      	ldrh	r1, [r3, #12]
    87ae:	440a      	add	r2, r1
		buf = buf->frags;
    87b0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    87b2:	2b00      	cmp	r3, #0
    87b4:	d1fa      	bne.n	87ac <l2cap_chan_le_recv_sdu+0x12>
    87b6:	89b3      	ldrh	r3, [r6, #12]
    87b8:	441a      	add	r2, r3
    87ba:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    87be:	429a      	cmp	r2, r3
    87c0:	d803      	bhi.n	87ca <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    87c2:	f012 fa07 	bl	1abd4 <net_buf_frag_last>
    87c6:	4680      	mov	r8, r0
	while (buf->len) {
    87c8:	e017      	b.n	87fa <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    87ca:	4648      	mov	r0, r9
    87cc:	f7ff ffbd 	bl	874a <bt_l2cap_chan_disconnect>
		return;
    87d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    87d4:	f108 0708 	add.w	r7, r8, #8
    87d8:	4638      	mov	r0, r7
    87da:	f012 fa90 	bl	1acfe <net_buf_simple_tailroom>
    87de:	89b4      	ldrh	r4, [r6, #12]
    87e0:	42a0      	cmp	r0, r4
    87e2:	d31d      	bcc.n	8820 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    87e4:	4635      	mov	r5, r6
    87e6:	4622      	mov	r2, r4
    87e8:	f855 1f08 	ldr.w	r1, [r5, #8]!
    87ec:	4638      	mov	r0, r7
    87ee:	f012 fa23 	bl	1ac38 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    87f2:	4621      	mov	r1, r4
    87f4:	4628      	mov	r0, r5
    87f6:	f012 fa66 	bl	1acc6 <net_buf_simple_pull>
	while (buf->len) {
    87fa:	89b3      	ldrh	r3, [r6, #12]
    87fc:	b1ab      	cbz	r3, 882a <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    87fe:	f108 0008 	add.w	r0, r8, #8
    8802:	f012 fa7c 	bl	1acfe <net_buf_simple_tailroom>
    8806:	2800      	cmp	r0, #0
    8808:	d1e4      	bne.n	87d4 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    880a:	4648      	mov	r0, r9
    880c:	f7ff f93a 	bl	7a84 <l2cap_alloc_frag>
			if (!frag) {
    8810:	4680      	mov	r8, r0
    8812:	2800      	cmp	r0, #0
    8814:	d1de      	bne.n	87d4 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    8816:	4648      	mov	r0, r9
    8818:	f7ff ff97 	bl	874a <bt_l2cap_chan_disconnect>
				return;
    881c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    8820:	4638      	mov	r0, r7
    8822:	f012 fa6c 	bl	1acfe <net_buf_simple_tailroom>
    8826:	b284      	uxth	r4, r0
    8828:	e7dc      	b.n	87e4 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    882a:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    882e:	460b      	mov	r3, r1
	size_t bytes = 0;
    8830:	2200      	movs	r2, #0
    8832:	e002      	b.n	883a <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    8834:	8998      	ldrh	r0, [r3, #12]
    8836:	4402      	add	r2, r0
		buf = buf->frags;
    8838:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    883a:	2b00      	cmp	r3, #0
    883c:	d1fa      	bne.n	8834 <l2cap_chan_le_recv_sdu+0x9a>
    883e:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    8842:	4293      	cmp	r3, r2
    8844:	d005      	beq.n	8852 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    8846:	4631      	mov	r1, r6
    8848:	4648      	mov	r0, r9
    884a:	f7ff fc12 	bl	8072 <l2cap_chan_update_credits>
    884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    8852:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8856:	691b      	ldr	r3, [r3, #16]
    8858:	4648      	mov	r0, r9
    885a:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    885c:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    8860:	f012 f998 	bl	1ab94 <net_buf_unref>
		chan->_sdu = NULL;
    8864:	2300      	movs	r3, #0
    8866:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    886a:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    886e:	e7ea      	b.n	8846 <l2cap_chan_le_recv_sdu+0xac>

00008870 <l2cap_chan_le_recv>:
{
    8870:	b570      	push	{r4, r5, r6, lr}
    8872:	4604      	mov	r4, r0
    8874:	460d      	mov	r5, r1
    8876:	2100      	movs	r1, #0
    8878:	3048      	adds	r0, #72	; 0x48
    887a:	f020 fce9 	bl	29250 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    887e:	b938      	cbnz	r0, 8890 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    8880:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    8884:	b143      	cbz	r3, 8898 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    8886:	4629      	mov	r1, r5
    8888:	4620      	mov	r0, r4
    888a:	f7ff ff86 	bl	879a <l2cap_chan_le_recv_sdu>
		return;
    888e:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8890:	4620      	mov	r0, r4
    8892:	f7ff ff5a 	bl	874a <bt_l2cap_chan_disconnect>
		return;
    8896:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    8898:	f105 0008 	add.w	r0, r5, #8
    889c:	f012 fa23 	bl	1ace6 <net_buf_simple_pull_le16>
    88a0:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    88a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    88a6:	4298      	cmp	r0, r3
    88a8:	d80e      	bhi.n	88c8 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    88aa:	6862      	ldr	r2, [r4, #4]
    88ac:	68d3      	ldr	r3, [r2, #12]
    88ae:	b19b      	cbz	r3, 88d8 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    88b0:	4620      	mov	r0, r4
    88b2:	4798      	blx	r3
    88b4:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    88b8:	b150      	cbz	r0, 88d0 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    88ba:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    88be:	4629      	mov	r1, r5
    88c0:	4620      	mov	r0, r4
    88c2:	f7ff ff6a 	bl	879a <l2cap_chan_le_recv_sdu>
		return;
    88c6:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    88c8:	4620      	mov	r0, r4
    88ca:	f7ff ff3e 	bl	874a <bt_l2cap_chan_disconnect>
		return;
    88ce:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    88d0:	4620      	mov	r0, r4
    88d2:	f7ff ff3a 	bl	874a <bt_l2cap_chan_disconnect>
			return;
    88d6:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    88d8:	6913      	ldr	r3, [r2, #16]
    88da:	4629      	mov	r1, r5
    88dc:	4620      	mov	r0, r4
    88de:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    88e0:	4629      	mov	r1, r5
    88e2:	4620      	mov	r0, r4
    88e4:	f7ff fbc5 	bl	8072 <l2cap_chan_update_credits>
    88e8:	bd70      	pop	{r4, r5, r6, pc}

000088ea <l2cap_chan_recv>:
{
    88ea:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    88ec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    88f0:	3b40      	subs	r3, #64	; 0x40
    88f2:	b29b      	uxth	r3, r3
    88f4:	2b3f      	cmp	r3, #63	; 0x3f
    88f6:	d903      	bls.n	8900 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    88f8:	6843      	ldr	r3, [r0, #4]
    88fa:	691b      	ldr	r3, [r3, #16]
    88fc:	4798      	blx	r3
    88fe:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    8900:	f7ff ffb6 	bl	8870 <l2cap_chan_le_recv>
		return;
    8904:	bd08      	pop	{r3, pc}

00008906 <bt_l2cap_recv>:
{
    8906:	b570      	push	{r4, r5, r6, lr}
    8908:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    890a:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    890c:	898b      	ldrh	r3, [r1, #12]
    890e:	2b03      	cmp	r3, #3
    8910:	d912      	bls.n	8938 <bt_l2cap_recv+0x32>
    8912:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    8914:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8916:	2104      	movs	r1, #4
    8918:	f104 0008 	add.w	r0, r4, #8
    891c:	f012 f9d3 	bl	1acc6 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8920:	4631      	mov	r1, r6
    8922:	4628      	mov	r0, r5
    8924:	f7ff fd3a 	bl	839c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8928:	b150      	cbz	r0, 8940 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    892a:	4621      	mov	r1, r4
    892c:	f7ff ffdd 	bl	88ea <l2cap_chan_recv>
	net_buf_unref(buf);
    8930:	4620      	mov	r0, r4
    8932:	f012 f92f 	bl	1ab94 <net_buf_unref>
    8936:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8938:	4608      	mov	r0, r1
    893a:	f012 f92b 	bl	1ab94 <net_buf_unref>
		return;
    893e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8940:	4620      	mov	r0, r4
    8942:	f012 f927 	bl	1ab94 <net_buf_unref>
		return;
    8946:	bd70      	pop	{r4, r5, r6, pc}

00008948 <le_credits>:
{
    8948:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    894a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    894c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    894e:	8993      	ldrh	r3, [r2, #12]
    8950:	2b03      	cmp	r3, #3
    8952:	d800      	bhi.n	8956 <le_credits+0xe>
    8954:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    8956:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8958:	8809      	ldrh	r1, [r1, #0]
    895a:	f7ff fd04 	bl	8366 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    895e:	4604      	mov	r4, r0
    8960:	2800      	cmp	r0, #0
    8962:	d0f7      	beq.n	8954 <le_credits+0xc>
    8964:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8966:	442b      	add	r3, r5
    8968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    896c:	d206      	bcs.n	897c <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    896e:	4629      	mov	r1, r5
    8970:	f7ff f8a3 	bl	7aba <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    8974:	4620      	mov	r0, r4
    8976:	f7ff fc32 	bl	81de <l2cap_chan_le_send_resume>
    897a:	e7eb      	b.n	8954 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    897c:	f7ff fee5 	bl	874a <bt_l2cap_chan_disconnect>
		return;
    8980:	bd38      	pop	{r3, r4, r5, pc}
	...

00008984 <l2cap_recv>:
{
    8984:	b5f0      	push	{r4, r5, r6, r7, lr}
    8986:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8988:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    898a:	898b      	ldrh	r3, [r1, #12]
    898c:	2b03      	cmp	r3, #3
    898e:	d801      	bhi.n	8994 <l2cap_recv+0x10>
}
    8990:	b003      	add	sp, #12
    8992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8994:	460c      	mov	r4, r1
    8996:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8998:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    899a:	2104      	movs	r1, #4
    899c:	f104 0008 	add.w	r0, r4, #8
    89a0:	f012 f991 	bl	1acc6 <net_buf_simple_pull>
	if (buf->len != len) {
    89a4:	89a3      	ldrh	r3, [r4, #12]
    89a6:	429f      	cmp	r7, r3
    89a8:	d1f2      	bne.n	8990 <l2cap_recv+0xc>
	if (!hdr->ident) {
    89aa:	7871      	ldrb	r1, [r6, #1]
    89ac:	2900      	cmp	r1, #0
    89ae:	d0ef      	beq.n	8990 <l2cap_recv+0xc>
	switch (hdr->code) {
    89b0:	7833      	ldrb	r3, [r6, #0]
    89b2:	3b01      	subs	r3, #1
    89b4:	2b15      	cmp	r3, #21
    89b6:	d852      	bhi.n	8a5e <l2cap_recv+0xda>
    89b8:	a201      	add	r2, pc, #4	; (adr r2, 89c0 <l2cap_recv+0x3c>)
    89ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    89be:	bf00      	nop
    89c0:	00008a55 	.word	0x00008a55
    89c4:	00008a5f 	.word	0x00008a5f
    89c8:	00008a5f 	.word	0x00008a5f
    89cc:	00008a5f 	.word	0x00008a5f
    89d0:	00008a5f 	.word	0x00008a5f
    89d4:	00008a37 	.word	0x00008a37
    89d8:	00008a41 	.word	0x00008a41
    89dc:	00008a5f 	.word	0x00008a5f
    89e0:	00008a5f 	.word	0x00008a5f
    89e4:	00008a5f 	.word	0x00008a5f
    89e8:	00008a5f 	.word	0x00008a5f
    89ec:	00008a5f 	.word	0x00008a5f
    89f0:	00008a5f 	.word	0x00008a5f
    89f4:	00008a5f 	.word	0x00008a5f
    89f8:	00008a5f 	.word	0x00008a5f
    89fc:	00008a5f 	.word	0x00008a5f
    8a00:	00008a5f 	.word	0x00008a5f
    8a04:	00008a19 	.word	0x00008a19
    8a08:	00008991 	.word	0x00008991
    8a0c:	00008a23 	.word	0x00008a23
    8a10:	00008a2d 	.word	0x00008a2d
    8a14:	00008a4b 	.word	0x00008a4b
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    8a18:	4622      	mov	r2, r4
    8a1a:	4628      	mov	r0, r5
    8a1c:	f7ff fc22 	bl	8264 <le_conn_param_update_req>
		break;
    8a20:	e7b6      	b.n	8990 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    8a22:	4622      	mov	r2, r4
    8a24:	4628      	mov	r0, r5
    8a26:	f7ff fd4d 	bl	84c4 <le_conn_req>
		break;
    8a2a:	e7b1      	b.n	8990 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    8a2c:	4622      	mov	r2, r4
    8a2e:	4628      	mov	r0, r5
    8a30:	f7ff f954 	bl	7cdc <le_conn_rsp>
		break;
    8a34:	e7ac      	b.n	8990 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    8a36:	4622      	mov	r2, r4
    8a38:	4628      	mov	r0, r5
    8a3a:	f7ff fc57 	bl	82ec <le_disconn_req>
		break;
    8a3e:	e7a7      	b.n	8990 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    8a40:	4622      	mov	r2, r4
    8a42:	4628      	mov	r0, r5
    8a44:	f7ff f9a0 	bl	7d88 <le_disconn_rsp>
		break;
    8a48:	e7a2      	b.n	8990 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    8a4a:	4622      	mov	r2, r4
    8a4c:	4628      	mov	r0, r5
    8a4e:	f7ff ff7b 	bl	8948 <le_credits>
		break;
    8a52:	e79d      	b.n	8990 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8a54:	4622      	mov	r2, r4
    8a56:	4628      	mov	r0, r5
    8a58:	f7ff f9a5 	bl	7da6 <reject_cmd>
		break;
    8a5c:	e798      	b.n	8990 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8a5e:	6828      	ldr	r0, [r5, #0]
    8a60:	2200      	movs	r2, #0
    8a62:	9200      	str	r2, [sp, #0]
    8a64:	4613      	mov	r3, r2
    8a66:	f7ff fbd9 	bl	821c <l2cap_send_reject>
		break;
    8a6a:	e791      	b.n	8990 <l2cap_recv+0xc>

00008a6c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8a6c:	b510      	push	{r4, lr}
    8a6e:	b082      	sub	sp, #8
    8a70:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    8a72:	b1f9      	cbz	r1, 8ab4 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8a74:	6803      	ldr	r3, [r0, #0]
    8a76:	b303      	cbz	r3, 8aba <bt_l2cap_chan_send+0x4e>
    8a78:	7b1b      	ldrb	r3, [r3, #12]
    8a7a:	2b03      	cmp	r3, #3
    8a7c:	d120      	bne.n	8ac0 <bt_l2cap_chan_send+0x54>
    8a7e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8a80:	2200      	movs	r2, #0
    8a82:	a901      	add	r1, sp, #4
    8a84:	f7ff fb40 	bl	8108 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8a88:	2800      	cmp	r0, #0
    8a8a:	db01      	blt.n	8a90 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8a8c:	b002      	add	sp, #8
    8a8e:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8a90:	f110 0f0b 	cmn.w	r0, #11
    8a94:	d1fa      	bne.n	8a8c <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8a96:	9901      	ldr	r1, [sp, #4]
    8a98:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8a9c:	f012 f86c 	bl	1ab78 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8aa0:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8aa2:	f102 0310 	add.w	r3, r2, #16
    8aa6:	89d2      	ldrh	r2, [r2, #14]
    8aa8:	4413      	add	r3, r2
    8aaa:	3303      	adds	r3, #3
    8aac:	f023 0303 	bic.w	r3, r3, #3
    8ab0:	6818      	ldr	r0, [r3, #0]
    8ab2:	e7eb      	b.n	8a8c <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8ab4:	f06f 0015 	mvn.w	r0, #21
    8ab8:	e7e8      	b.n	8a8c <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8aba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8abe:	e7e5      	b.n	8a8c <bt_l2cap_chan_send+0x20>
    8ac0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8ac4:	e7e2      	b.n	8a8c <bt_l2cap_chan_send+0x20>

00008ac6 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8ac6:	b100      	cbz	r0, 8aca <range_is_valid+0x4>
    8ac8:	b919      	cbnz	r1, 8ad2 <range_is_valid+0xc>
		if (err) {
    8aca:	b142      	cbz	r2, 8ade <range_is_valid+0x18>
			*err = 0;
    8acc:	2000      	movs	r0, #0
    8ace:	8010      	strh	r0, [r2, #0]
    8ad0:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8ad2:	4288      	cmp	r0, r1
    8ad4:	d905      	bls.n	8ae2 <range_is_valid+0x1c>
		if (err) {
    8ad6:	b132      	cbz	r2, 8ae6 <range_is_valid+0x20>
			*err = start;
    8ad8:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8ada:	2000      	movs	r0, #0
    8adc:	4770      	bx	lr
		return false;
    8ade:	2000      	movs	r0, #0
    8ae0:	4770      	bx	lr
	}

	return true;
    8ae2:	2001      	movs	r0, #1
    8ae4:	4770      	bx	lr
		return false;
    8ae6:	2000      	movs	r0, #0
}
    8ae8:	4770      	bx	lr

00008aea <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8aea:	f012 0f01 	tst.w	r2, #1
    8aee:	d007      	beq.n	8b00 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8af0:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8af2:	f013 0f15 	tst.w	r3, #21
    8af6:	d101      	bne.n	8afc <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8af8:	2002      	movs	r0, #2
    8afa:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8afc:	684b      	ldr	r3, [r1, #4]
    8afe:	b1eb      	cbz	r3, 8b3c <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8b00:	f012 0f02 	tst.w	r2, #2
    8b04:	d007      	beq.n	8b16 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8b06:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8b08:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8b0c:	d101      	bne.n	8b12 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8b0e:	2003      	movs	r0, #3
    8b10:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8b12:	688b      	ldr	r3, [r1, #8]
    8b14:	b1a3      	cbz	r3, 8b40 <check_perm+0x56>
	}

	mask &= attr->perm;
    8b16:	7c8b      	ldrb	r3, [r1, #18]
    8b18:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8b1a:	f012 0f30 	tst.w	r2, #48	; 0x30
    8b1e:	d004      	beq.n	8b2a <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8b20:	7a03      	ldrb	r3, [r0, #8]
    8b22:	2b02      	cmp	r3, #2
    8b24:	d801      	bhi.n	8b2a <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    8b26:	2005      	movs	r0, #5
    8b28:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8b2a:	f012 0f0c 	tst.w	r2, #12
    8b2e:	d009      	beq.n	8b44 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    8b30:	7a83      	ldrb	r3, [r0, #10]
    8b32:	b90b      	cbnz	r3, 8b38 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8b34:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8b36:	4770      	bx	lr
	return 0;
    8b38:	2000      	movs	r0, #0
    8b3a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8b3c:	2002      	movs	r0, #2
    8b3e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8b40:	2003      	movs	r0, #3
    8b42:	4770      	bx	lr
	return 0;
    8b44:	2000      	movs	r0, #0
    8b46:	4770      	bx	lr

00008b48 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8b48:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8b4c:	2bfe      	cmp	r3, #254	; 0xfe
    8b4e:	d901      	bls.n	8b54 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8b50:	200e      	movs	r0, #14
}
    8b52:	4770      	bx	lr
		return -err;
    8b54:	4240      	negs	r0, r0
    8b56:	b2c0      	uxtb	r0, r0
    8b58:	4770      	bx	lr

00008b5a <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b5e:	b082      	sub	sp, #8
    8b60:	4606      	mov	r6, r0
    8b62:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8b64:	680f      	ldr	r7, [r1, #0]
    8b66:	222a      	movs	r2, #42	; 0x2a
    8b68:	4601      	mov	r1, r0
    8b6a:	4638      	mov	r0, r7
    8b6c:	f7ff ffbd 	bl	8aea <check_perm>
    8b70:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8b72:	b120      	cbz	r0, 8b7e <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8b74:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8b76:	4628      	mov	r0, r5
    8b78:	b002      	add	sp, #8
    8b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b7e:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8b80:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8b84:	7c23      	ldrb	r3, [r4, #16]
    8b86:	8a62      	ldrh	r2, [r4, #18]
    8b88:	2100      	movs	r1, #0
    8b8a:	9101      	str	r1, [sp, #4]
    8b8c:	9200      	str	r2, [sp, #0]
    8b8e:	68e2      	ldr	r2, [r4, #12]
    8b90:	4631      	mov	r1, r6
    8b92:	4638      	mov	r0, r7
    8b94:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8b96:	2800      	cmp	r0, #0
    8b98:	db02      	blt.n	8ba0 <write_cb+0x46>
    8b9a:	7c23      	ldrb	r3, [r4, #16]
    8b9c:	4298      	cmp	r0, r3
    8b9e:	d003      	beq.n	8ba8 <write_cb+0x4e>
		data->err = err_to_att(write);
    8ba0:	f7ff ffd2 	bl	8b48 <err_to_att>
    8ba4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8ba6:	e7e6      	b.n	8b76 <write_cb+0x1c>
	data->err = 0;
    8ba8:	2300      	movs	r3, #0
    8baa:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8bac:	2501      	movs	r5, #1
    8bae:	e7e2      	b.n	8b76 <write_cb+0x1c>

00008bb0 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8bb0:	2006      	movs	r0, #6
    8bb2:	4770      	bx	lr

00008bb4 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8bb4:	2006      	movs	r0, #6
    8bb6:	4770      	bx	lr

00008bb8 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bb8:	2300      	movs	r3, #0
    8bba:	2b1a      	cmp	r3, #26
    8bbc:	d80b      	bhi.n	8bd6 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8bbe:	4a09      	ldr	r2, [pc, #36]	; (8be4 <att_op_get_type+0x2c>)
    8bc0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8bc4:	4282      	cmp	r2, r0
    8bc6:	d001      	beq.n	8bcc <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bc8:	3301      	adds	r3, #1
    8bca:	e7f6      	b.n	8bba <att_op_get_type+0x2>
			return handlers[i].type;
    8bcc:	4a05      	ldr	r2, [pc, #20]	; (8be4 <att_op_get_type+0x2c>)
    8bce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8bd2:	7898      	ldrb	r0, [r3, #2]
    8bd4:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8bd6:	f010 0f40 	tst.w	r0, #64	; 0x40
    8bda:	d101      	bne.n	8be0 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8bdc:	2006      	movs	r0, #6
}
    8bde:	4770      	bx	lr
		return ATT_COMMAND;
    8be0:	2000      	movs	r0, #0
    8be2:	4770      	bx	lr
    8be4:	00030dfc 	.word	0x00030dfc

00008be8 <att_cb>:
{
    8be8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8bea:	6883      	ldr	r3, [r0, #8]
    8bec:	7818      	ldrb	r0, [r3, #0]
    8bee:	f7ff ffe3 	bl	8bb8 <att_op_get_type>
    8bf2:	3801      	subs	r0, #1
    8bf4:	2804      	cmp	r0, #4
    8bf6:	d808      	bhi.n	8c0a <att_cb+0x22>
    8bf8:	e8df f000 	tbb	[pc, r0]
    8bfc:	09070305 	.word	0x09070305
    8c00:	05          	.byte	0x05
    8c01:	00          	.byte	0x00
		return att_rsp_sent;
    8c02:	4804      	ldr	r0, [pc, #16]	; (8c14 <att_cb+0x2c>)
    8c04:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8c06:	4804      	ldr	r0, [pc, #16]	; (8c18 <att_cb+0x30>)
    8c08:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8c0a:	4804      	ldr	r0, [pc, #16]	; (8c1c <att_cb+0x34>)
    8c0c:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8c0e:	4804      	ldr	r0, [pc, #16]	; (8c20 <att_cb+0x38>)
}
    8c10:	bd08      	pop	{r3, pc}
    8c12:	bf00      	nop
    8c14:	00008d5b 	.word	0x00008d5b
    8c18:	00008dcd 	.word	0x00008dcd
    8c1c:	00008d85 	.word	0x00008d85
    8c20:	00008d93 	.word	0x00008d93

00008c24 <read_cb>:
{
    8c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8c28:	b083      	sub	sp, #12
    8c2a:	4606      	mov	r6, r0
    8c2c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8c2e:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    8c32:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8c36:	6888      	ldr	r0, [r1, #8]
    8c38:	2100      	movs	r1, #0
    8c3a:	3008      	adds	r0, #8
    8c3c:	f011 fff6 	bl	1ac2c <net_buf_simple_add>
    8c40:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8c42:	2300      	movs	r3, #0
    8c44:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8c46:	2215      	movs	r2, #21
    8c48:	4631      	mov	r1, r6
    8c4a:	4638      	mov	r0, r7
    8c4c:	f7ff ff4d 	bl	8aea <check_perm>
    8c50:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8c52:	b120      	cbz	r0, 8c5e <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8c54:	2500      	movs	r5, #0
}
    8c56:	4628      	mov	r0, r5
    8c58:	b003      	add	sp, #12
    8c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8c5e:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8c60:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8c64:	68a3      	ldr	r3, [r4, #8]
    8c66:	6899      	ldr	r1, [r3, #8]
    8c68:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8c6a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8c6e:	1a9b      	subs	r3, r3, r2
    8c70:	88a0      	ldrh	r0, [r4, #4]
    8c72:	9000      	str	r0, [sp, #0]
    8c74:	b29b      	uxth	r3, r3
    8c76:	440a      	add	r2, r1
    8c78:	4631      	mov	r1, r6
    8c7a:	4638      	mov	r0, r7
    8c7c:	47c8      	blx	r9
	if (read < 0) {
    8c7e:	1e01      	subs	r1, r0, #0
    8c80:	db05      	blt.n	8c8e <read_cb+0x6a>
	net_buf_add(data->buf, read);
    8c82:	68a0      	ldr	r0, [r4, #8]
    8c84:	3008      	adds	r0, #8
    8c86:	f011 ffd1 	bl	1ac2c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8c8a:	2501      	movs	r5, #1
    8c8c:	e7e3      	b.n	8c56 <read_cb+0x32>
		data->err = err_to_att(read);
    8c8e:	4608      	mov	r0, r1
    8c90:	f7ff ff5a 	bl	8b48 <err_to_att>
    8c94:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8c96:	e7de      	b.n	8c56 <read_cb+0x32>

00008c98 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8c98:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8c9a:	7b03      	ldrb	r3, [r0, #12]
    8c9c:	2b03      	cmp	r3, #3
    8c9e:	d10f      	bne.n	8cc0 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8ca0:	2104      	movs	r1, #4
    8ca2:	f7ff fb7b 	bl	839c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8ca6:	b168      	cbz	r0, 8cc4 <att_chan_get+0x2c>
    8ca8:	f3bf 8f5b 	dmb	ish
    8cac:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8cb0:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8cb4:	f012 0f04 	tst.w	r2, #4
    8cb8:	d100      	bne.n	8cbc <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8cba:	bd08      	pop	{r3, pc}
		return NULL;
    8cbc:	2000      	movs	r0, #0
    8cbe:	bd08      	pop	{r3, pc}
		return NULL;
    8cc0:	2000      	movs	r0, #0
    8cc2:	bd08      	pop	{r3, pc}
		return NULL;
    8cc4:	2000      	movs	r0, #0
    8cc6:	bd08      	pop	{r3, pc}

00008cc8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8cca:	2400      	movs	r4, #0
    8ccc:	b11c      	cbz	r4, 8cd6 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8cce:	f06f 040b 	mvn.w	r4, #11
}
    8cd2:	4620      	mov	r0, r4
    8cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8cd6:	23ec      	movs	r3, #236	; 0xec
    8cd8:	fb03 f304 	mul.w	r3, r3, r4
    8cdc:	4a12      	ldr	r2, [pc, #72]	; (8d28 <bt_att_accept+0x60>)
    8cde:	58d3      	ldr	r3, [r2, r3]
    8ce0:	b10b      	cbz	r3, 8ce6 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8ce2:	3401      	adds	r4, #1
    8ce4:	e7f2      	b.n	8ccc <bt_att_accept+0x4>
    8ce6:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8ce8:	480f      	ldr	r0, [pc, #60]	; (8d28 <bt_att_accept+0x60>)
    8cea:	23ec      	movs	r3, #236	; 0xec
    8cec:	fb03 f304 	mul.w	r3, r3, r4
    8cf0:	18c6      	adds	r6, r0, r3
    8cf2:	4a0e      	ldr	r2, [pc, #56]	; (8d2c <bt_att_accept+0x64>)
    8cf4:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8cf6:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8cfa:	4402      	add	r2, r0
    8cfc:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8cfe:	2100      	movs	r1, #0
    8d00:	f3bf 8f5b 	dmb	ish
    8d04:	e852 7f00 	ldrex	r7, [r2]
    8d08:	e842 1e00 	strex	lr, r1, [r2]
    8d0c:	f1be 0f00 	cmp.w	lr, #0
    8d10:	d1f8      	bne.n	8d04 <bt_att_accept+0x3c>
    8d12:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8d16:	33d0      	adds	r3, #208	; 0xd0
    8d18:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8d1a:	2202      	movs	r2, #2
    8d1c:	4611      	mov	r1, r2
    8d1e:	3004      	adds	r0, #4
    8d20:	f020 fa7a 	bl	29218 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8d24:	602e      	str	r6, [r5, #0]
		return 0;
    8d26:	e7d4      	b.n	8cd2 <bt_att_accept+0xa>
    8d28:	20000654 	.word	0x20000654
    8d2c:	2000b9ec 	.word	0x2000b9ec

00008d30 <att_req_destroy>:
{
    8d30:	b510      	push	{r4, lr}
    8d32:	4604      	mov	r4, r0
	if (req->buf) {
    8d34:	6900      	ldr	r0, [r0, #16]
    8d36:	b108      	cbz	r0, 8d3c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8d38:	f011 ff2c 	bl	1ab94 <net_buf_unref>
	if (req->destroy) {
    8d3c:	68a3      	ldr	r3, [r4, #8]
    8d3e:	b10b      	cbz	r3, 8d44 <att_req_destroy+0x14>
		req->destroy(req);
    8d40:	4620      	mov	r0, r4
    8d42:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8d44:	2218      	movs	r2, #24
    8d46:	2100      	movs	r1, #0
    8d48:	4620      	mov	r0, r4
    8d4a:	f021 fa41 	bl	2a1d0 <memset>
    8d4e:	bd10      	pop	{r4, pc}

00008d50 <att_get>:
{
    8d50:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8d52:	2104      	movs	r1, #4
    8d54:	f7ff fb07 	bl	8366 <bt_l2cap_le_lookup_tx_cid>
}
    8d58:	bd08      	pop	{r3, pc}

00008d5a <att_rsp_sent>:
{
    8d5a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d5c:	f7ff fff8 	bl	8d50 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8d60:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8d64:	f3bf 8f5b 	dmb	ish
    8d68:	e853 2f00 	ldrex	r2, [r3]
    8d6c:	f022 0201 	bic.w	r2, r2, #1
    8d70:	e843 2100 	strex	r1, r2, [r3]
    8d74:	2900      	cmp	r1, #0
    8d76:	d1f7      	bne.n	8d68 <att_rsp_sent+0xe>
    8d78:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8d7c:	30d4      	adds	r0, #212	; 0xd4
    8d7e:	f020 fa54 	bl	2922a <_impl_k_sem_give>
    8d82:	bd08      	pop	{r3, pc}

00008d84 <att_pdu_sent>:
{
    8d84:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d86:	f7ff ffe3 	bl	8d50 <att_get>
    8d8a:	30d4      	adds	r0, #212	; 0xd4
    8d8c:	f020 fa4d 	bl	2922a <_impl_k_sem_give>
    8d90:	bd08      	pop	{r3, pc}

00008d92 <att_cfm_sent>:
{
    8d92:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d94:	f7ff ffdc 	bl	8d50 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8d98:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8d9c:	f3bf 8f5b 	dmb	ish
    8da0:	e853 2f00 	ldrex	r2, [r3]
    8da4:	f022 0202 	bic.w	r2, r2, #2
    8da8:	e843 2100 	strex	r1, r2, [r3]
    8dac:	2900      	cmp	r1, #0
    8dae:	d1f7      	bne.n	8da0 <att_cfm_sent+0xe>
    8db0:	f3bf 8f5b 	dmb	ish
    8db4:	30d4      	adds	r0, #212	; 0xd4
    8db6:	f020 fa38 	bl	2922a <_impl_k_sem_give>
    8dba:	bd08      	pop	{r3, pc}

00008dbc <att_notify>:
{
    8dbc:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8dbe:	f101 0008 	add.w	r0, r1, #8
    8dc2:	f011 ff90 	bl	1ace6 <net_buf_simple_pull_le16>
}
    8dc6:	2000      	movs	r0, #0
    8dc8:	bd08      	pop	{r3, pc}
	...

00008dcc <att_req_sent>:
{
    8dcc:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8dce:	f7ff ffbf 	bl	8d50 <att_get>
    8dd2:	4604      	mov	r4, r0
    8dd4:	30d4      	adds	r0, #212	; 0xd4
    8dd6:	f020 fa28 	bl	2922a <_impl_k_sem_give>
	if (att->req) {
    8dda:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8dde:	b133      	cbz	r3, 8dee <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8de0:	f247 5230 	movw	r2, #30000	; 0x7530
    8de4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8de8:	4801      	ldr	r0, [pc, #4]	; (8df0 <att_req_sent+0x24>)
    8dea:	f021 f867 	bl	29ebc <k_delayed_work_submit_to_queue>
    8dee:	bd10      	pop	{r4, pc}
    8df0:	20002b78 	.word	0x20002b78

00008df4 <read_group_cb>:
{
    8df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8df8:	b084      	sub	sp, #16
    8dfa:	4605      	mov	r5, r0
    8dfc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8dfe:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8e00:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8e02:	2300      	movs	r3, #0
    8e04:	f88d 3008 	strb.w	r3, [sp, #8]
    8e08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8e0c:	f8ad 300a 	strh.w	r3, [sp, #10]
    8e10:	a902      	add	r1, sp, #8
    8e12:	6800      	ldr	r0, [r0, #0]
    8e14:	f7fb fb8d 	bl	4532 <bt_uuid_cmp>
    8e18:	b1a8      	cbz	r0, 8e46 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8e1a:	2300      	movs	r3, #0
    8e1c:	f88d 300c 	strb.w	r3, [sp, #12]
    8e20:	f642 0301 	movw	r3, #10241	; 0x2801
    8e24:	f8ad 300e 	strh.w	r3, [sp, #14]
    8e28:	a903      	add	r1, sp, #12
    8e2a:	6828      	ldr	r0, [r5, #0]
    8e2c:	f7fb fb81 	bl	4532 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8e30:	b148      	cbz	r0, 8e46 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    8e32:	6923      	ldr	r3, [r4, #16]
    8e34:	2b00      	cmp	r3, #0
    8e36:	d04c      	beq.n	8ed2 <read_group_cb+0xde>
    8e38:	8a2a      	ldrh	r2, [r5, #16]
    8e3a:	8859      	ldrh	r1, [r3, #2]
    8e3c:	428a      	cmp	r2, r1
    8e3e:	d94a      	bls.n	8ed6 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8e40:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8e42:	2001      	movs	r0, #1
    8e44:	e039      	b.n	8eba <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8e46:	6861      	ldr	r1, [r4, #4]
    8e48:	6828      	ldr	r0, [r5, #0]
    8e4a:	f7fb fb72 	bl	4532 <bt_uuid_cmp>
    8e4e:	2800      	cmp	r0, #0
    8e50:	d130      	bne.n	8eb4 <read_group_cb+0xc0>
	if (data->rsp->len &&
    8e52:	68e3      	ldr	r3, [r4, #12]
    8e54:	781a      	ldrb	r2, [r3, #0]
    8e56:	b132      	cbz	r2, 8e66 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8e58:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8e5c:	68a1      	ldr	r1, [r4, #8]
    8e5e:	8989      	ldrh	r1, [r1, #12]
    8e60:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8e62:	4293      	cmp	r3, r2
    8e64:	db39      	blt.n	8eda <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8e66:	68a0      	ldr	r0, [r4, #8]
    8e68:	2104      	movs	r1, #4
    8e6a:	3008      	adds	r0, #8
    8e6c:	f011 fede 	bl	1ac2c <net_buf_simple_add>
    8e70:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8e72:	8a2b      	ldrh	r3, [r5, #16]
    8e74:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8e76:	6923      	ldr	r3, [r4, #16]
    8e78:	8a2a      	ldrh	r2, [r5, #16]
    8e7a:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e7c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8e80:	68a3      	ldr	r3, [r4, #8]
    8e82:	6899      	ldr	r1, [r3, #8]
    8e84:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8e86:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e8a:	1a9b      	subs	r3, r3, r2
    8e8c:	2000      	movs	r0, #0
    8e8e:	9000      	str	r0, [sp, #0]
    8e90:	b29b      	uxth	r3, r3
    8e92:	440a      	add	r2, r1
    8e94:	4629      	mov	r1, r5
    8e96:	4638      	mov	r0, r7
    8e98:	47c0      	blx	r8
	if (read < 0) {
    8e9a:	1e01      	subs	r1, r0, #0
    8e9c:	db1f      	blt.n	8ede <read_group_cb+0xea>
	if (!data->rsp->len) {
    8e9e:	68e2      	ldr	r2, [r4, #12]
    8ea0:	7813      	ldrb	r3, [r2, #0]
    8ea2:	b96b      	cbnz	r3, 8ec0 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    8ea4:	1d0b      	adds	r3, r1, #4
    8ea6:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8ea8:	68a0      	ldr	r0, [r4, #8]
    8eaa:	3008      	adds	r0, #8
    8eac:	f011 febe 	bl	1ac2c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8eb0:	2001      	movs	r0, #1
    8eb2:	e002      	b.n	8eba <read_group_cb+0xc6>
		data->group = NULL;
    8eb4:	2300      	movs	r3, #0
    8eb6:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8eb8:	2001      	movs	r0, #1
}
    8eba:	b004      	add	sp, #16
    8ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    8ec0:	1d0a      	adds	r2, r1, #4
    8ec2:	4293      	cmp	r3, r2
    8ec4:	d0f0      	beq.n	8ea8 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    8ec6:	68a2      	ldr	r2, [r4, #8]
    8ec8:	8993      	ldrh	r3, [r2, #12]
    8eca:	3b04      	subs	r3, #4
    8ecc:	8193      	strh	r3, [r2, #12]
		return false;
    8ece:	2000      	movs	r0, #0
    8ed0:	e7f3      	b.n	8eba <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    8ed2:	2001      	movs	r0, #1
    8ed4:	e7f1      	b.n	8eba <read_group_cb+0xc6>
    8ed6:	2001      	movs	r0, #1
    8ed8:	e7ef      	b.n	8eba <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8eda:	2000      	movs	r0, #0
    8edc:	e7ed      	b.n	8eba <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8ede:	2000      	movs	r0, #0
    8ee0:	e7eb      	b.n	8eba <read_group_cb+0xc6>

00008ee2 <read_type_cb>:
{
    8ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ee6:	b082      	sub	sp, #8
    8ee8:	4606      	mov	r6, r0
    8eea:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8eec:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8eee:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8ef2:	6849      	ldr	r1, [r1, #4]
    8ef4:	6800      	ldr	r0, [r0, #0]
    8ef6:	f7fb fb1c 	bl	4532 <bt_uuid_cmp>
    8efa:	2800      	cmp	r0, #0
    8efc:	d14d      	bne.n	8f9a <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8efe:	2215      	movs	r2, #21
    8f00:	4631      	mov	r1, r6
    8f02:	4640      	mov	r0, r8
    8f04:	f7ff fdf1 	bl	8aea <check_perm>
    8f08:	4605      	mov	r5, r0
    8f0a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8f0c:	b130      	cbz	r0, 8f1c <read_type_cb+0x3a>
		if (data->rsp->len) {
    8f0e:	68e3      	ldr	r3, [r4, #12]
    8f10:	781d      	ldrb	r5, [r3, #0]
    8f12:	2d00      	cmp	r5, #0
    8f14:	d042      	beq.n	8f9c <read_type_cb+0xba>
			data->err = 0x00;
    8f16:	2500      	movs	r5, #0
    8f18:	7525      	strb	r5, [r4, #20]
    8f1a:	e03f      	b.n	8f9c <read_type_cb+0xba>
	data->err = 0x00;
    8f1c:	f04f 0900 	mov.w	r9, #0
    8f20:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    8f24:	68a0      	ldr	r0, [r4, #8]
    8f26:	2102      	movs	r1, #2
    8f28:	3008      	adds	r0, #8
    8f2a:	f011 fe7f 	bl	1ac2c <net_buf_simple_add>
    8f2e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    8f30:	8a33      	ldrh	r3, [r6, #16]
    8f32:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8f34:	f8d6 a004 	ldr.w	sl, [r6, #4]
    8f38:	68a3      	ldr	r3, [r4, #8]
    8f3a:	6899      	ldr	r1, [r3, #8]
    8f3c:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8f3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8f42:	1a9b      	subs	r3, r3, r2
    8f44:	f8cd 9000 	str.w	r9, [sp]
    8f48:	b29b      	uxth	r3, r3
    8f4a:	440a      	add	r2, r1
    8f4c:	4631      	mov	r1, r6
    8f4e:	4640      	mov	r0, r8
    8f50:	47d0      	blx	sl
	if (read < 0) {
    8f52:	1e01      	subs	r1, r0, #0
    8f54:	db14      	blt.n	8f80 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    8f56:	68e2      	ldr	r2, [r4, #12]
    8f58:	7813      	ldrb	r3, [r2, #0]
    8f5a:	b9b3      	cbnz	r3, 8f8a <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    8f5c:	1c8b      	adds	r3, r1, #2
    8f5e:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8f60:	68a0      	ldr	r0, [r4, #8]
    8f62:	3008      	adds	r0, #8
    8f64:	f011 fe62 	bl	1ac2c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    8f68:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    8f6c:	68a3      	ldr	r3, [r4, #8]
    8f6e:	899b      	ldrh	r3, [r3, #12]
    8f70:	1aed      	subs	r5, r5, r3
    8f72:	68e3      	ldr	r3, [r4, #12]
    8f74:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8f76:	429d      	cmp	r5, r3
    8f78:	bfd4      	ite	le
    8f7a:	2500      	movle	r5, #0
    8f7c:	2501      	movgt	r5, #1
    8f7e:	e00d      	b.n	8f9c <read_type_cb+0xba>
		data->err = err_to_att(read);
    8f80:	4608      	mov	r0, r1
    8f82:	f7ff fde1 	bl	8b48 <err_to_att>
    8f86:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8f88:	e008      	b.n	8f9c <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    8f8a:	1c8a      	adds	r2, r1, #2
    8f8c:	4293      	cmp	r3, r2
    8f8e:	d0e7      	beq.n	8f60 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    8f90:	68a2      	ldr	r2, [r4, #8]
    8f92:	8993      	ldrh	r3, [r2, #12]
    8f94:	3b02      	subs	r3, #2
    8f96:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    8f98:	e000      	b.n	8f9c <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    8f9a:	2501      	movs	r5, #1
}
    8f9c:	4628      	mov	r0, r5
    8f9e:	b002      	add	sp, #8
    8fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008fa4 <uuid_create>:
{
    8fa4:	b510      	push	{r4, lr}
    8fa6:	4604      	mov	r4, r0
	switch (buf->len) {
    8fa8:	898b      	ldrh	r3, [r1, #12]
    8faa:	2b02      	cmp	r3, #2
    8fac:	d003      	beq.n	8fb6 <uuid_create+0x12>
    8fae:	2b10      	cmp	r3, #16
    8fb0:	d00a      	beq.n	8fc8 <uuid_create+0x24>
	return false;
    8fb2:	2000      	movs	r0, #0
}
    8fb4:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    8fb6:	2300      	movs	r3, #0
    8fb8:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    8fba:	f101 0008 	add.w	r0, r1, #8
    8fbe:	f011 fe92 	bl	1ace6 <net_buf_simple_pull_le16>
    8fc2:	8060      	strh	r0, [r4, #2]
		return true;
    8fc4:	2001      	movs	r0, #1
    8fc6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    8fc8:	2302      	movs	r3, #2
    8fca:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    8fce:	898a      	ldrh	r2, [r1, #12]
    8fd0:	6889      	ldr	r1, [r1, #8]
    8fd2:	f7f7 f975 	bl	2c0 <memcpy>
		return true;
    8fd6:	2001      	movs	r0, #1
    8fd8:	bd10      	pop	{r4, pc}

00008fda <find_info_cb>:
{
    8fda:	b570      	push	{r4, r5, r6, lr}
    8fdc:	4605      	mov	r5, r0
    8fde:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8fe0:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    8fe2:	688b      	ldr	r3, [r1, #8]
    8fe4:	b13b      	cbz	r3, 8ff6 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    8fe6:	68a3      	ldr	r3, [r4, #8]
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	2b01      	cmp	r3, #1
    8fec:	d011      	beq.n	9012 <find_info_cb+0x38>
    8fee:	2b02      	cmp	r3, #2
    8ff0:	d02b      	beq.n	904a <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    8ff2:	2000      	movs	r0, #0
    8ff4:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8ff6:	6848      	ldr	r0, [r1, #4]
    8ff8:	2101      	movs	r1, #1
    8ffa:	3008      	adds	r0, #8
    8ffc:	f011 fe16 	bl	1ac2c <net_buf_simple_add>
    9000:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    9002:	682b      	ldr	r3, [r5, #0]
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	b913      	cbnz	r3, 900e <find_info_cb+0x34>
    9008:	2301      	movs	r3, #1
    900a:	7003      	strb	r3, [r0, #0]
    900c:	e7eb      	b.n	8fe6 <find_info_cb+0xc>
    900e:	2302      	movs	r3, #2
    9010:	e7fb      	b.n	900a <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    9012:	682b      	ldr	r3, [r5, #0]
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	b10b      	cbz	r3, 901c <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    9018:	2000      	movs	r0, #0
    901a:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    901c:	6860      	ldr	r0, [r4, #4]
    901e:	2104      	movs	r1, #4
    9020:	3008      	adds	r0, #8
    9022:	f011 fe03 	bl	1ac2c <net_buf_simple_add>
    9026:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    9028:	8a2b      	ldrh	r3, [r5, #16]
    902a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    902c:	68e3      	ldr	r3, [r4, #12]
    902e:	682a      	ldr	r2, [r5, #0]
    9030:	8852      	ldrh	r2, [r2, #2]
    9032:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    9034:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9038:	6862      	ldr	r2, [r4, #4]
    903a:	8992      	ldrh	r2, [r2, #12]
    903c:	1a9b      	subs	r3, r3, r2
    903e:	2b04      	cmp	r3, #4
    9040:	d801      	bhi.n	9046 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    9042:	2000      	movs	r0, #0
    9044:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    9046:	2001      	movs	r0, #1
    9048:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    904a:	682b      	ldr	r3, [r5, #0]
    904c:	781b      	ldrb	r3, [r3, #0]
    904e:	2b02      	cmp	r3, #2
    9050:	d001      	beq.n	9056 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    9052:	2000      	movs	r0, #0
    9054:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    9056:	6860      	ldr	r0, [r4, #4]
    9058:	2112      	movs	r1, #18
    905a:	3008      	adds	r0, #8
    905c:	f011 fde6 	bl	1ac2c <net_buf_simple_add>
    9060:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    9062:	8a2b      	ldrh	r3, [r5, #16]
    9064:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    9066:	68e0      	ldr	r0, [r4, #12]
    9068:	6829      	ldr	r1, [r5, #0]
    906a:	2210      	movs	r2, #16
    906c:	3101      	adds	r1, #1
    906e:	3002      	adds	r0, #2
    9070:	f7f7 f926 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    9074:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9078:	6862      	ldr	r2, [r4, #4]
    907a:	8992      	ldrh	r2, [r2, #12]
    907c:	1a9b      	subs	r3, r3, r2
    907e:	2b12      	cmp	r3, #18
    9080:	d901      	bls.n	9086 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    9082:	2001      	movs	r0, #1
    9084:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    9086:	2000      	movs	r0, #0
}
    9088:	bd70      	pop	{r4, r5, r6, pc}

0000908a <find_type_cb>:
{
    908a:	b5f0      	push	{r4, r5, r6, r7, lr}
    908c:	b089      	sub	sp, #36	; 0x24
    908e:	4605      	mov	r5, r0
    9090:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9092:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9094:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9096:	2300      	movs	r3, #0
    9098:	f88d 3018 	strb.w	r3, [sp, #24]
    909c:	f642 0301 	movw	r3, #10241	; 0x2801
    90a0:	f8ad 301a 	strh.w	r3, [sp, #26]
    90a4:	a906      	add	r1, sp, #24
    90a6:	6800      	ldr	r0, [r0, #0]
    90a8:	f7fb fa43 	bl	4532 <bt_uuid_cmp>
    90ac:	b920      	cbnz	r0, 90b8 <find_type_cb+0x2e>
		data->group = NULL;
    90ae:	2300      	movs	r3, #0
    90b0:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    90b2:	2001      	movs	r0, #1
}
    90b4:	b009      	add	sp, #36	; 0x24
    90b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    90b8:	2300      	movs	r3, #0
    90ba:	f88d 301c 	strb.w	r3, [sp, #28]
    90be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    90c2:	f8ad 301e 	strh.w	r3, [sp, #30]
    90c6:	a907      	add	r1, sp, #28
    90c8:	6828      	ldr	r0, [r5, #0]
    90ca:	f7fb fa32 	bl	4532 <bt_uuid_cmp>
    90ce:	b148      	cbz	r0, 90e4 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    90d0:	68a3      	ldr	r3, [r4, #8]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d039      	beq.n	914a <find_type_cb+0xc0>
    90d6:	8a2a      	ldrh	r2, [r5, #16]
    90d8:	8859      	ldrh	r1, [r3, #2]
    90da:	428a      	cmp	r2, r1
    90dc:	d937      	bls.n	914e <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    90de:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    90e0:	2001      	movs	r0, #1
    90e2:	e7e7      	b.n	90b4 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    90e4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    90e8:	6862      	ldr	r2, [r4, #4]
    90ea:	8992      	ldrh	r2, [r2, #12]
    90ec:	1a9b      	subs	r3, r3, r2
    90ee:	2b03      	cmp	r3, #3
    90f0:	d801      	bhi.n	90f6 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    90f2:	2000      	movs	r0, #0
    90f4:	e7de      	b.n	90b4 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    90f6:	686e      	ldr	r6, [r5, #4]
    90f8:	2300      	movs	r3, #0
    90fa:	9300      	str	r3, [sp, #0]
    90fc:	2310      	movs	r3, #16
    90fe:	aa02      	add	r2, sp, #8
    9100:	4629      	mov	r1, r5
    9102:	4638      	mov	r0, r7
    9104:	47b0      	blx	r6
	if (read < 0) {
    9106:	1e02      	subs	r2, r0, #0
    9108:	db06      	blt.n	9118 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    910a:	7c23      	ldrb	r3, [r4, #16]
    910c:	429a      	cmp	r2, r3
    910e:	d007      	beq.n	9120 <find_type_cb+0x96>
		data->group = NULL;
    9110:	2300      	movs	r3, #0
    9112:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9114:	2001      	movs	r0, #1
    9116:	e7cd      	b.n	90b4 <find_type_cb+0x2a>
		data->group = NULL;
    9118:	2300      	movs	r3, #0
    911a:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    911c:	2001      	movs	r0, #1
    911e:	e7c9      	b.n	90b4 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9120:	a902      	add	r1, sp, #8
    9122:	68e0      	ldr	r0, [r4, #12]
    9124:	f020 ffc0 	bl	2a0a8 <memcmp>
    9128:	2800      	cmp	r0, #0
    912a:	d1f1      	bne.n	9110 <find_type_cb+0x86>
	data->err = 0x00;
    912c:	2300      	movs	r3, #0
    912e:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9130:	6860      	ldr	r0, [r4, #4]
    9132:	2104      	movs	r1, #4
    9134:	3008      	adds	r0, #8
    9136:	f011 fd79 	bl	1ac2c <net_buf_simple_add>
    913a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    913c:	8a2b      	ldrh	r3, [r5, #16]
    913e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9140:	68a3      	ldr	r3, [r4, #8]
    9142:	8a2a      	ldrh	r2, [r5, #16]
    9144:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    9146:	2001      	movs	r0, #1
    9148:	e7b4      	b.n	90b4 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    914a:	2001      	movs	r0, #1
    914c:	e7b2      	b.n	90b4 <find_type_cb+0x2a>
    914e:	2001      	movs	r0, #1
    9150:	e7b0      	b.n	90b4 <find_type_cb+0x2a>

00009152 <att_change_security>:
{
    9152:	b508      	push	{r3, lr}
	switch (err) {
    9154:	2905      	cmp	r1, #5
    9156:	d008      	beq.n	916a <att_change_security+0x18>
    9158:	290f      	cmp	r1, #15
    915a:	d113      	bne.n	9184 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    915c:	7a03      	ldrb	r3, [r0, #8]
    915e:	2b01      	cmp	r3, #1
    9160:	d813      	bhi.n	918a <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    9162:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    9164:	f7fd fe4a 	bl	6dfc <bt_conn_security>
    9168:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    916a:	7a03      	ldrb	r3, [r0, #8]
    916c:	2b01      	cmp	r3, #1
    916e:	d905      	bls.n	917c <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    9170:	2b02      	cmp	r3, #2
    9172:	d905      	bls.n	9180 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    9174:	2b03      	cmp	r3, #3
    9176:	d80b      	bhi.n	9190 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    9178:	2104      	movs	r1, #4
    917a:	e7f3      	b.n	9164 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    917c:	2102      	movs	r1, #2
    917e:	e7f1      	b.n	9164 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    9180:	2103      	movs	r1, #3
    9182:	e7ef      	b.n	9164 <att_change_security+0x12>
		return -EINVAL;
    9184:	f06f 0015 	mvn.w	r0, #21
    9188:	bd08      	pop	{r3, pc}
			return -EALREADY;
    918a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    918e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    9190:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    9194:	bd08      	pop	{r3, pc}
	...

00009198 <bt_att_connected>:
{
    9198:	b510      	push	{r4, lr}
    919a:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    919c:	2317      	movs	r3, #23
    919e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    91a2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    91a6:	4906      	ldr	r1, [pc, #24]	; (91c0 <bt_att_connected+0x28>)
    91a8:	30ac      	adds	r0, #172	; 0xac
    91aa:	f020 fe0f 	bl	29dcc <k_delayed_work_init>
	list->head = NULL;
    91ae:	2300      	movs	r3, #0
    91b0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    91b4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    91b8:	6820      	ldr	r0, [r4, #0]
    91ba:	f001 fadd 	bl	a778 <bt_gatt_connected>
    91be:	bd10      	pop	{r4, pc}
    91c0:	0000951f 	.word	0x0000951f

000091c4 <att_send_req>:
{
    91c4:	b570      	push	{r4, r5, r6, lr}
    91c6:	4605      	mov	r5, r0
    91c8:	460c      	mov	r4, r1
	att->req = req;
    91ca:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    91ce:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    91d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    91d6:	4630      	mov	r0, r6
    91d8:	f020 f83a 	bl	29250 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    91dc:	682b      	ldr	r3, [r5, #0]
    91de:	7b1b      	ldrb	r3, [r3, #12]
    91e0:	2b03      	cmp	r3, #3
    91e2:	d019      	beq.n	9218 <att_send_req+0x54>
    91e4:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    91e6:	b323      	cbz	r3, 9232 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    91e8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    91ea:	f106 0008 	add.w	r0, r6, #8
    91ee:	f011 fd82 	bl	1acf6 <net_buf_simple_headroom>
    91f2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    91f4:	89b3      	ldrh	r3, [r6, #12]
    91f6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    91f8:	682d      	ldr	r5, [r5, #0]
    91fa:	6920      	ldr	r0, [r4, #16]
    91fc:	f011 fce6 	bl	1abcc <net_buf_ref>
    9200:	4606      	mov	r6, r0
    9202:	6920      	ldr	r0, [r4, #16]
    9204:	f7ff fcf0 	bl	8be8 <att_cb>
    9208:	4603      	mov	r3, r0
    920a:	4632      	mov	r2, r6
    920c:	2104      	movs	r1, #4
    920e:	4628      	mov	r0, r5
    9210:	f7fe fea3 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9214:	2000      	movs	r0, #0
}
    9216:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9218:	f3bf 8f5b 	dmb	ish
    921c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9220:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9224:	f013 0f04 	tst.w	r3, #4
    9228:	d101      	bne.n	922e <att_send_req+0x6a>
    922a:	2301      	movs	r3, #1
    922c:	e7db      	b.n	91e6 <att_send_req+0x22>
    922e:	2300      	movs	r3, #0
    9230:	e7d9      	b.n	91e6 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9232:	4630      	mov	r0, r6
    9234:	f01f fff9 	bl	2922a <_impl_k_sem_give>
		return -ENOTCONN;
    9238:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    923c:	bd70      	pop	{r4, r5, r6, pc}

0000923e <att_process>:
{
    923e:	b508      	push	{r3, lr}
	return (!list->head);
    9240:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9244:	b131      	cbz	r1, 9254 <att_process+0x16>
	list->head = node->next;
    9246:	680b      	ldr	r3, [r1, #0]
    9248:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    924c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9250:	4291      	cmp	r1, r2
    9252:	d003      	beq.n	925c <att_process+0x1e>
	if (!node) {
    9254:	b109      	cbz	r1, 925a <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    9256:	f7ff ffb5 	bl	91c4 <att_send_req>
    925a:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    925c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9260:	e7f8      	b.n	9254 <att_process+0x16>

00009262 <att_handle_rsp>:
{
    9262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9266:	b082      	sub	sp, #8
    9268:	4604      	mov	r4, r0
    926a:	460e      	mov	r6, r1
    926c:	4617      	mov	r7, r2
    926e:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    9270:	30ac      	adds	r0, #172	; 0xac
    9272:	f020 fdc9 	bl	29e08 <k_delayed_work_cancel>
	if (!att->req) {
    9276:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    927a:	b1e3      	cbz	r3, 92b6 <att_handle_rsp+0x54>
	if (att->req->buf) {
    927c:	6918      	ldr	r0, [r3, #16]
    927e:	b128      	cbz	r0, 928c <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    9280:	f011 fc88 	bl	1ab94 <net_buf_unref>
		att->req->buf = NULL;
    9284:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9288:	2200      	movs	r2, #0
    928a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    928c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9290:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    9294:	2200      	movs	r2, #0
    9296:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9298:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    929c:	9300      	str	r3, [sp, #0]
    929e:	463b      	mov	r3, r7
    92a0:	4632      	mov	r2, r6
    92a2:	4629      	mov	r1, r5
    92a4:	6820      	ldr	r0, [r4, #0]
    92a6:	47c0      	blx	r8
	if (!att->req->func) {
    92a8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    92ac:	6843      	ldr	r3, [r0, #4]
    92ae:	b14b      	cbz	r3, 92c4 <att_handle_rsp+0x62>
	att->req = NULL;
    92b0:	2300      	movs	r3, #0
    92b2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    92b6:	4620      	mov	r0, r4
    92b8:	f7ff ffc1 	bl	923e <att_process>
}
    92bc:	2000      	movs	r0, #0
    92be:	b002      	add	sp, #8
    92c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    92c4:	f7ff fd34 	bl	8d30 <att_req_destroy>
    92c8:	e7f2      	b.n	92b0 <att_handle_rsp+0x4e>

000092ca <att_confirm>:
{
    92ca:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92cc:	2300      	movs	r3, #0
    92ce:	898a      	ldrh	r2, [r1, #12]
    92d0:	6889      	ldr	r1, [r1, #8]
    92d2:	f7ff ffc6 	bl	9262 <att_handle_rsp>
}
    92d6:	bd08      	pop	{r3, pc}

000092d8 <att_handle_exec_write_rsp>:
{
    92d8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92da:	2300      	movs	r3, #0
    92dc:	898a      	ldrh	r2, [r1, #12]
    92de:	6889      	ldr	r1, [r1, #8]
    92e0:	f7ff ffbf 	bl	9262 <att_handle_rsp>
}
    92e4:	bd08      	pop	{r3, pc}

000092e6 <att_handle_prepare_write_rsp>:
{
    92e6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92e8:	2300      	movs	r3, #0
    92ea:	898a      	ldrh	r2, [r1, #12]
    92ec:	6889      	ldr	r1, [r1, #8]
    92ee:	f7ff ffb8 	bl	9262 <att_handle_rsp>
}
    92f2:	bd08      	pop	{r3, pc}

000092f4 <att_handle_write_rsp>:
{
    92f4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92f6:	2300      	movs	r3, #0
    92f8:	898a      	ldrh	r2, [r1, #12]
    92fa:	6889      	ldr	r1, [r1, #8]
    92fc:	f7ff ffb1 	bl	9262 <att_handle_rsp>
}
    9300:	bd08      	pop	{r3, pc}

00009302 <att_handle_read_mult_rsp>:
{
    9302:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9304:	2300      	movs	r3, #0
    9306:	898a      	ldrh	r2, [r1, #12]
    9308:	6889      	ldr	r1, [r1, #8]
    930a:	f7ff ffaa 	bl	9262 <att_handle_rsp>
}
    930e:	bd08      	pop	{r3, pc}

00009310 <att_handle_read_blob_rsp>:
{
    9310:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9312:	2300      	movs	r3, #0
    9314:	898a      	ldrh	r2, [r1, #12]
    9316:	6889      	ldr	r1, [r1, #8]
    9318:	f7ff ffa3 	bl	9262 <att_handle_rsp>
}
    931c:	bd08      	pop	{r3, pc}

0000931e <att_handle_read_rsp>:
{
    931e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9320:	2300      	movs	r3, #0
    9322:	898a      	ldrh	r2, [r1, #12]
    9324:	6889      	ldr	r1, [r1, #8]
    9326:	f7ff ff9c 	bl	9262 <att_handle_rsp>
}
    932a:	bd08      	pop	{r3, pc}

0000932c <att_handle_read_type_rsp>:
{
    932c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    932e:	2300      	movs	r3, #0
    9330:	898a      	ldrh	r2, [r1, #12]
    9332:	6889      	ldr	r1, [r1, #8]
    9334:	f7ff ff95 	bl	9262 <att_handle_rsp>
}
    9338:	bd08      	pop	{r3, pc}

0000933a <att_handle_find_type_rsp>:
{
    933a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    933c:	2300      	movs	r3, #0
    933e:	898a      	ldrh	r2, [r1, #12]
    9340:	6889      	ldr	r1, [r1, #8]
    9342:	f7ff ff8e 	bl	9262 <att_handle_rsp>
}
    9346:	bd08      	pop	{r3, pc}

00009348 <att_handle_find_info_rsp>:
{
    9348:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    934a:	2300      	movs	r3, #0
    934c:	898a      	ldrh	r2, [r1, #12]
    934e:	6889      	ldr	r1, [r1, #8]
    9350:	f7ff ff87 	bl	9262 <att_handle_rsp>
}
    9354:	bd08      	pop	{r3, pc}

00009356 <att_mtu_rsp>:
	if (!att) {
    9356:	b1b8      	cbz	r0, 9388 <att_mtu_rsp+0x32>
{
    9358:	b508      	push	{r3, lr}
    935a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    935c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    935e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    9360:	2b16      	cmp	r3, #22
    9362:	d90b      	bls.n	937c <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    9364:	2b41      	cmp	r3, #65	; 0x41
    9366:	bf28      	it	cs
    9368:	2341      	movcs	r3, #65	; 0x41
    936a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    936e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    9372:	2300      	movs	r3, #0
    9374:	8992      	ldrh	r2, [r2, #12]
    9376:	f7ff ff74 	bl	9262 <att_handle_rsp>
    937a:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    937c:	2304      	movs	r3, #4
    937e:	2200      	movs	r2, #0
    9380:	4611      	mov	r1, r2
    9382:	f7ff ff6e 	bl	9262 <att_handle_rsp>
    9386:	bd08      	pop	{r3, pc}
		return 0;
    9388:	2000      	movs	r0, #0
    938a:	4770      	bx	lr

0000938c <bt_att_encrypt_change>:
{
    938c:	b570      	push	{r4, r5, r6, lr}
    938e:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    9390:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    9392:	b941      	cbnz	r1, 93a6 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    9394:	7a2b      	ldrb	r3, [r5, #8]
    9396:	2b01      	cmp	r3, #1
    9398:	d004      	beq.n	93a4 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    939a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    939e:	b10b      	cbz	r3, 93a4 <bt_att_encrypt_change+0x18>
    93a0:	7d1b      	ldrb	r3, [r3, #20]
    93a2:	b933      	cbnz	r3, 93b2 <bt_att_encrypt_change+0x26>
    93a4:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    93a6:	2305      	movs	r3, #5
    93a8:	2200      	movs	r2, #0
    93aa:	4611      	mov	r1, r2
    93ac:	f7ff ff59 	bl	9262 <att_handle_rsp>
		return;
    93b0:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    93b2:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    93b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    93ba:	4630      	mov	r0, r6
    93bc:	f01f ff48 	bl	29250 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    93c0:	6823      	ldr	r3, [r4, #0]
    93c2:	7b1b      	ldrb	r3, [r3, #12]
    93c4:	2b03      	cmp	r3, #3
    93c6:	d012      	beq.n	93ee <bt_att_encrypt_change+0x62>
    93c8:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    93ca:	b1eb      	cbz	r3, 9408 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    93cc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93d0:	691e      	ldr	r6, [r3, #16]
    93d2:	4630      	mov	r0, r6
    93d4:	f7ff fc08 	bl	8be8 <att_cb>
    93d8:	4603      	mov	r3, r0
    93da:	4632      	mov	r2, r6
    93dc:	2104      	movs	r1, #4
    93de:	4628      	mov	r0, r5
    93e0:	f7fe fdbb 	bl	7f5a <bt_l2cap_send_cb>
	att->req->buf = NULL;
    93e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93e8:	2200      	movs	r2, #0
    93ea:	611a      	str	r2, [r3, #16]
    93ec:	e7da      	b.n	93a4 <bt_att_encrypt_change+0x18>
    93ee:	f3bf 8f5b 	dmb	ish
    93f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    93f6:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    93fa:	f013 0f04 	tst.w	r3, #4
    93fe:	d101      	bne.n	9404 <bt_att_encrypt_change+0x78>
    9400:	2301      	movs	r3, #1
    9402:	e7e2      	b.n	93ca <bt_att_encrypt_change+0x3e>
    9404:	2300      	movs	r3, #0
    9406:	e7e0      	b.n	93ca <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9408:	4630      	mov	r0, r6
    940a:	f01f ff0e 	bl	2922a <_impl_k_sem_give>
    940e:	bd70      	pop	{r4, r5, r6, pc}

00009410 <att_error_rsp>:
{
    9410:	b538      	push	{r3, r4, r5, lr}
    9412:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    9414:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    9416:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    941a:	b1fb      	cbz	r3, 945c <att_error_rsp+0x4c>
	if (att->req->buf) {
    941c:	691a      	ldr	r2, [r3, #16]
    941e:	b132      	cbz	r2, 942e <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    9420:	f102 0110 	add.w	r1, r2, #16
    9424:	899d      	ldrh	r5, [r3, #12]
    9426:	4429      	add	r1, r5
    9428:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    942a:	89db      	ldrh	r3, [r3, #14]
    942c:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    942e:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    9430:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9434:	7d1b      	ldrb	r3, [r3, #20]
    9436:	b133      	cbz	r3, 9446 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    9438:	462b      	mov	r3, r5
    943a:	2200      	movs	r2, #0
    943c:	4611      	mov	r1, r2
    943e:	4620      	mov	r0, r4
    9440:	f7ff ff0f 	bl	9262 <att_handle_rsp>
}
    9444:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    9446:	4629      	mov	r1, r5
    9448:	6820      	ldr	r0, [r4, #0]
    944a:	f7ff fe82 	bl	9152 <att_change_security>
    944e:	2800      	cmp	r0, #0
    9450:	d1f2      	bne.n	9438 <att_error_rsp+0x28>
		att->req->retrying = true;
    9452:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9456:	2201      	movs	r2, #1
    9458:	751a      	strb	r2, [r3, #20]
		return 0;
    945a:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    945c:	250e      	movs	r5, #14
    945e:	e7eb      	b.n	9438 <att_error_rsp+0x28>

00009460 <att_reset>:
{
    9460:	b5f0      	push	{r4, r5, r6, r7, lr}
    9462:	b083      	sub	sp, #12
    9464:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    9466:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    946a:	f3bf 8f5b 	dmb	ish
    946e:	e853 2f00 	ldrex	r2, [r3]
    9472:	f042 0204 	orr.w	r2, r2, #4
    9476:	e843 2100 	strex	r1, r2, [r3]
    947a:	2900      	cmp	r1, #0
    947c:	d1f7      	bne.n	946e <att_reset+0xe>
    947e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    9482:	2400      	movs	r4, #0
    9484:	e004      	b.n	9490 <att_reset+0x30>
    9486:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    948a:	f01f fece 	bl	2922a <_impl_k_sem_give>
    948e:	3401      	adds	r4, #1
    9490:	2c01      	cmp	r4, #1
    9492:	ddf8      	ble.n	9486 <att_reset+0x26>
	return list->head;
    9494:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9498:	b11d      	cbz	r5, 94a2 <att_reset+0x42>
    949a:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    949c:	b145      	cbz	r5, 94b0 <att_reset+0x50>
	return node->next;
    949e:	682c      	ldr	r4, [r5, #0]
    94a0:	e006      	b.n	94b0 <att_reset+0x50>
    94a2:	462c      	mov	r4, r5
    94a4:	e004      	b.n	94b0 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94a6:	4623      	mov	r3, r4
    94a8:	e014      	b.n	94d4 <att_reset+0x74>
    94aa:	4623      	mov	r3, r4
    94ac:	4625      	mov	r5, r4
    94ae:	461c      	mov	r4, r3
    94b0:	b1c5      	cbz	r5, 94e4 <att_reset+0x84>
		if (req->func) {
    94b2:	686e      	ldr	r6, [r5, #4]
    94b4:	b12e      	cbz	r6, 94c2 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    94b6:	9500      	str	r5, [sp, #0]
    94b8:	2300      	movs	r3, #0
    94ba:	461a      	mov	r2, r3
    94bc:	210e      	movs	r1, #14
    94be:	4618      	mov	r0, r3
    94c0:	47b0      	blx	r6
		att_req_destroy(req);
    94c2:	4628      	mov	r0, r5
    94c4:	f7ff fc34 	bl	8d30 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    94c8:	2c00      	cmp	r4, #0
    94ca:	d0ee      	beq.n	94aa <att_reset+0x4a>
    94cc:	4622      	mov	r2, r4
    94ce:	2c00      	cmp	r4, #0
    94d0:	d0e9      	beq.n	94a6 <att_reset+0x46>
	return node->next;
    94d2:	6823      	ldr	r3, [r4, #0]
    94d4:	b113      	cbz	r3, 94dc <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94d6:	b11a      	cbz	r2, 94e0 <att_reset+0x80>
	return node->next;
    94d8:	6823      	ldr	r3, [r4, #0]
    94da:	e7e7      	b.n	94ac <att_reset+0x4c>
    94dc:	2300      	movs	r3, #0
    94de:	e7e5      	b.n	94ac <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    94e0:	2300      	movs	r3, #0
    94e2:	e7e3      	b.n	94ac <att_reset+0x4c>
	list->head = NULL;
    94e4:	2300      	movs	r3, #0
    94e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    94ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    94ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    94f2:	b12b      	cbz	r3, 9500 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    94f4:	230e      	movs	r3, #14
    94f6:	2200      	movs	r2, #0
    94f8:	4611      	mov	r1, r2
    94fa:	4638      	mov	r0, r7
    94fc:	f7ff feb1 	bl	9262 <att_handle_rsp>
}
    9500:	b003      	add	sp, #12
    9502:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009504 <bt_att_disconnected>:
{
    9504:	b510      	push	{r4, lr}
    9506:	4604      	mov	r4, r0
	att_reset(att);
    9508:	f7ff ffaa 	bl	9460 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    950c:	6820      	ldr	r0, [r4, #0]
    950e:	f001 f93f 	bl	a790 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    9512:	22ec      	movs	r2, #236	; 0xec
    9514:	2100      	movs	r1, #0
    9516:	4620      	mov	r0, r4
    9518:	f020 fe5a 	bl	2a1d0 <memset>
    951c:	bd10      	pop	{r4, pc}

0000951e <att_timeout>:
{
    951e:	b510      	push	{r4, lr}
    9520:	4604      	mov	r4, r0
	att_reset(att);
    9522:	38ac      	subs	r0, #172	; 0xac
    9524:	f7ff ff9c 	bl	9460 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9528:	f854 0cac 	ldr.w	r0, [r4, #-172]
    952c:	f001 f930 	bl	a790 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9530:	2300      	movs	r3, #0
    9532:	f844 3cac 	str.w	r3, [r4, #-172]
    9536:	bd10      	pop	{r4, pc}

00009538 <bt_att_create_pdu>:
{
    9538:	b538      	push	{r3, r4, r5, lr}
    953a:	460d      	mov	r5, r1
    953c:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    953e:	f7ff fbab 	bl	8c98 <att_chan_get>
	if (!att) {
    9542:	b180      	cbz	r0, 9566 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9544:	3401      	adds	r4, #1
    9546:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    954a:	429c      	cmp	r4, r3
    954c:	d80d      	bhi.n	956a <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    954e:	2100      	movs	r1, #0
    9550:	4608      	mov	r0, r1
    9552:	f7fe fc6a 	bl	7e2a <bt_l2cap_create_pdu>
    9556:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9558:	2101      	movs	r1, #1
    955a:	3008      	adds	r0, #8
    955c:	f011 fb66 	bl	1ac2c <net_buf_simple_add>
	hdr->code = op;
    9560:	7005      	strb	r5, [r0, #0]
}
    9562:	4620      	mov	r0, r4
    9564:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    9566:	2400      	movs	r4, #0
    9568:	e7fb      	b.n	9562 <bt_att_create_pdu+0x2a>
		return NULL;
    956a:	2400      	movs	r4, #0
    956c:	e7f9      	b.n	9562 <bt_att_create_pdu+0x2a>
	...

00009570 <att_indicate>:
{
    9570:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9572:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9574:	f101 0008 	add.w	r0, r1, #8
    9578:	f011 fbb5 	bl	1ace6 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    957c:	2200      	movs	r2, #0
    957e:	211e      	movs	r1, #30
    9580:	4620      	mov	r0, r4
    9582:	f7ff ffd9 	bl	9538 <bt_att_create_pdu>
	if (!buf) {
    9586:	b128      	cbz	r0, 9594 <att_indicate+0x24>
    9588:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    958a:	4b03      	ldr	r3, [pc, #12]	; (9598 <att_indicate+0x28>)
    958c:	2104      	movs	r1, #4
    958e:	4620      	mov	r0, r4
    9590:	f7fe fce3 	bl	7f5a <bt_l2cap_send_cb>
}
    9594:	2000      	movs	r0, #0
    9596:	bd10      	pop	{r4, pc}
    9598:	00008d93 	.word	0x00008d93

0000959c <att_mtu_req>:
{
    959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    95a0:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    95a2:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    95a4:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    95a6:	2d16      	cmp	r5, #22
    95a8:	d802      	bhi.n	95b0 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    95aa:	2004      	movs	r0, #4
    95ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95b0:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    95b2:	2202      	movs	r2, #2
    95b4:	2103      	movs	r1, #3
    95b6:	4638      	mov	r0, r7
    95b8:	f7ff ffbe 	bl	9538 <bt_att_create_pdu>
	if (!pdu) {
    95bc:	4680      	mov	r8, r0
    95be:	b1b8      	cbz	r0, 95f0 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    95c0:	2102      	movs	r1, #2
    95c2:	3008      	adds	r0, #8
    95c4:	f011 fb32 	bl	1ac2c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    95c8:	2600      	movs	r6, #0
    95ca:	2341      	movs	r3, #65	; 0x41
    95cc:	7003      	strb	r3, [r0, #0]
    95ce:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    95d0:	4b09      	ldr	r3, [pc, #36]	; (95f8 <att_mtu_req+0x5c>)
    95d2:	4642      	mov	r2, r8
    95d4:	2104      	movs	r1, #4
    95d6:	4638      	mov	r0, r7
    95d8:	f7fe fcbf 	bl	7f5a <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    95dc:	2d41      	cmp	r5, #65	; 0x41
    95de:	bf28      	it	cs
    95e0:	2541      	movcs	r5, #65	; 0x41
    95e2:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    95e6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    95ea:	4630      	mov	r0, r6
    95ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    95f0:	200e      	movs	r0, #14
}
    95f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95f6:	bf00      	nop
    95f8:	00008d5b 	.word	0x00008d5b

000095fc <send_err_rsp>:
	if (!req) {
    95fc:	b901      	cbnz	r1, 9600 <send_err_rsp+0x4>
    95fe:	4770      	bx	lr
{
    9600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9604:	460f      	mov	r7, r1
    9606:	461d      	mov	r5, r3
    9608:	4616      	mov	r6, r2
    960a:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    960c:	2204      	movs	r2, #4
    960e:	2101      	movs	r1, #1
    9610:	f7ff ff92 	bl	9538 <bt_att_create_pdu>
	if (!buf) {
    9614:	4680      	mov	r8, r0
    9616:	b168      	cbz	r0, 9634 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9618:	2104      	movs	r1, #4
    961a:	3008      	adds	r0, #8
    961c:	f011 fb06 	bl	1ac2c <net_buf_simple_add>
	rsp->request = req;
    9620:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    9622:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    9626:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9628:	4b03      	ldr	r3, [pc, #12]	; (9638 <send_err_rsp+0x3c>)
    962a:	4642      	mov	r2, r8
    962c:	2104      	movs	r1, #4
    962e:	4620      	mov	r0, r4
    9630:	f7fe fc93 	bl	7f5a <bt_l2cap_send_cb>
    9634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9638:	00008d5b 	.word	0x00008d5b

0000963c <bt_att_recv>:
{
    963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    963e:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9640:	898b      	ldrh	r3, [r1, #12]
    9642:	b903      	cbnz	r3, 9646 <bt_att_recv+0xa>
    9644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9646:	460e      	mov	r6, r1
    9648:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    964a:	2101      	movs	r1, #1
    964c:	f106 0008 	add.w	r0, r6, #8
    9650:	f011 fb39 	bl	1acc6 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9654:	2300      	movs	r3, #0
    9656:	2b1a      	cmp	r3, #26
    9658:	d822      	bhi.n	96a0 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    965a:	782c      	ldrb	r4, [r5, #0]
    965c:	4a2c      	ldr	r2, [pc, #176]	; (9710 <bt_att_recv+0xd4>)
    965e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    9662:	4294      	cmp	r4, r2
    9664:	d001      	beq.n	966a <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9666:	3301      	adds	r3, #1
    9668:	e7f5      	b.n	9656 <bt_att_recv+0x1a>
			handler = &handlers[i];
    966a:	4c29      	ldr	r4, [pc, #164]	; (9710 <bt_att_recv+0xd4>)
    966c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    9670:	b1c4      	cbz	r4, 96a4 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    9672:	78a3      	ldrb	r3, [r4, #2]
    9674:	2b01      	cmp	r3, #1
    9676:	d022      	beq.n	96be <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    9678:	78a3      	ldrb	r3, [r4, #2]
    967a:	2b05      	cmp	r3, #5
    967c:	d031      	beq.n	96e2 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    967e:	89b2      	ldrh	r2, [r6, #12]
    9680:	7863      	ldrb	r3, [r4, #1]
    9682:	429a      	cmp	r2, r3
    9684:	d23f      	bcs.n	9706 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    9686:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    9688:	78a2      	ldrb	r2, [r4, #2]
    968a:	2a01      	cmp	r2, #1
    968c:	d1da      	bne.n	9644 <bt_att_recv+0x8>
    968e:	2800      	cmp	r0, #0
    9690:	d0d8      	beq.n	9644 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9692:	4603      	mov	r3, r0
    9694:	2200      	movs	r2, #0
    9696:	7829      	ldrb	r1, [r5, #0]
    9698:	6838      	ldr	r0, [r7, #0]
    969a:	f7ff ffaf 	bl	95fc <send_err_rsp>
    969e:	e7d1      	b.n	9644 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    96a0:	2400      	movs	r4, #0
    96a2:	e7e5      	b.n	9670 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    96a4:	782c      	ldrb	r4, [r5, #0]
    96a6:	4620      	mov	r0, r4
    96a8:	f7ff fa86 	bl	8bb8 <att_op_get_type>
    96ac:	2800      	cmp	r0, #0
    96ae:	d0c9      	beq.n	9644 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    96b0:	2306      	movs	r3, #6
    96b2:	2200      	movs	r2, #0
    96b4:	4621      	mov	r1, r4
    96b6:	6838      	ldr	r0, [r7, #0]
    96b8:	f7ff ffa0 	bl	95fc <send_err_rsp>
    96bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    96be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    96c2:	f3bf 8f5b 	dmb	ish
    96c6:	e853 2f00 	ldrex	r2, [r3]
    96ca:	f042 0101 	orr.w	r1, r2, #1
    96ce:	e843 1000 	strex	r0, r1, [r3]
    96d2:	2800      	cmp	r0, #0
    96d4:	d1f7      	bne.n	96c6 <bt_att_recv+0x8a>
    96d6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    96da:	f012 0f01 	tst.w	r2, #1
    96de:	d0cb      	beq.n	9678 <bt_att_recv+0x3c>
    96e0:	e7b0      	b.n	9644 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    96e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    96e6:	f3bf 8f5b 	dmb	ish
    96ea:	e853 2f00 	ldrex	r2, [r3]
    96ee:	f042 0102 	orr.w	r1, r2, #2
    96f2:	e843 1000 	strex	r0, r1, [r3]
    96f6:	2800      	cmp	r0, #0
    96f8:	d1f7      	bne.n	96ea <bt_att_recv+0xae>
    96fa:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    96fe:	f012 0f02 	tst.w	r2, #2
    9702:	d0bc      	beq.n	967e <bt_att_recv+0x42>
    9704:	e79e      	b.n	9644 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    9706:	6863      	ldr	r3, [r4, #4]
    9708:	4631      	mov	r1, r6
    970a:	4638      	mov	r0, r7
    970c:	4798      	blx	r3
    970e:	e7bb      	b.n	9688 <bt_att_recv+0x4c>
    9710:	00030dfc 	.word	0x00030dfc

00009714 <att_write_rsp>:
{
    9714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9718:	b086      	sub	sp, #24
	if (!handle) {
    971a:	b923      	cbnz	r3, 9726 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    971c:	2401      	movs	r4, #1
}
    971e:	4620      	mov	r0, r4
    9720:	b006      	add	sp, #24
    9722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9726:	4698      	mov	r8, r3
    9728:	4617      	mov	r7, r2
    972a:	460e      	mov	r6, r1
    972c:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    972e:	2218      	movs	r2, #24
    9730:	2100      	movs	r1, #0
    9732:	4668      	mov	r0, sp
    9734:	f020 fd4c 	bl	2a1d0 <memset>
	if (rsp) {
    9738:	b137      	cbz	r7, 9748 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    973a:	2200      	movs	r2, #0
    973c:	4639      	mov	r1, r7
    973e:	4628      	mov	r0, r5
    9740:	f7ff fefa 	bl	9538 <bt_att_create_pdu>
    9744:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9746:	b3a0      	cbz	r0, 97b2 <att_write_rsp+0x9e>
	data.conn = conn;
    9748:	9500      	str	r5, [sp, #0]
	data.op = op;
    974a:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    974e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9752:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9758:	9303      	str	r3, [sp, #12]
	data.len = len;
    975a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    975e:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9762:	2301      	movs	r3, #1
    9764:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9768:	466b      	mov	r3, sp
    976a:	4a13      	ldr	r2, [pc, #76]	; (97b8 <att_write_rsp+0xa4>)
    976c:	4641      	mov	r1, r8
    976e:	4640      	mov	r0, r8
    9770:	f000 ff26 	bl	a5c0 <bt_gatt_foreach_attr>
	if (data.err) {
    9774:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9778:	b194      	cbz	r4, 97a0 <att_write_rsp+0x8c>
		if (rsp) {
    977a:	b91f      	cbnz	r7, 9784 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    977c:	2e18      	cmp	r6, #24
    977e:	d00c      	beq.n	979a <att_write_rsp+0x86>
    9780:	2400      	movs	r4, #0
    9782:	e7cc      	b.n	971e <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    9784:	9801      	ldr	r0, [sp, #4]
    9786:	f011 fa05 	bl	1ab94 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    978a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    978e:	4642      	mov	r2, r8
    9790:	4631      	mov	r1, r6
    9792:	4628      	mov	r0, r5
    9794:	f7ff ff32 	bl	95fc <send_err_rsp>
    9798:	e7f0      	b.n	977c <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    979a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    979e:	e7be      	b.n	971e <att_write_rsp+0xa>
	if (data.buf) {
    97a0:	9a01      	ldr	r2, [sp, #4]
    97a2:	2a00      	cmp	r2, #0
    97a4:	d0bb      	beq.n	971e <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    97a6:	4b05      	ldr	r3, [pc, #20]	; (97bc <att_write_rsp+0xa8>)
    97a8:	2104      	movs	r1, #4
    97aa:	4628      	mov	r0, r5
    97ac:	f7fe fbd5 	bl	7f5a <bt_l2cap_send_cb>
    97b0:	e7b5      	b.n	971e <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    97b2:	240e      	movs	r4, #14
    97b4:	e7b3      	b.n	971e <att_write_rsp+0xa>
    97b6:	bf00      	nop
    97b8:	00008b5b 	.word	0x00008b5b
    97bc:	00008d5b 	.word	0x00008d5b

000097c0 <att_signed_write_cmd>:
{
    97c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    97c2:	b085      	sub	sp, #20
    97c4:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    97c6:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    97c8:	460c      	mov	r4, r1
    97ca:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    97ce:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    97d0:	2101      	movs	r1, #1
    97d2:	4620      	mov	r0, r4
    97d4:	f011 fa61 	bl	1ac9a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    97d8:	4629      	mov	r1, r5
    97da:	4630      	mov	r0, r6
    97dc:	f003 faf2 	bl	cdc4 <bt_smp_sign_verify>
	if (err) {
    97e0:	b110      	cbz	r0, 97e8 <att_signed_write_cmd+0x28>
		return 0;
    97e2:	2000      	movs	r0, #0
}
    97e4:	b005      	add	sp, #20
    97e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    97e8:	2101      	movs	r1, #1
    97ea:	4620      	mov	r0, r4
    97ec:	f011 fa6b 	bl	1acc6 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    97f0:	2102      	movs	r1, #2
    97f2:	4620      	mov	r0, r4
    97f4:	f011 fa67 	bl	1acc6 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    97f8:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    97fa:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    97fc:	3b0c      	subs	r3, #12
    97fe:	b2db      	uxtb	r3, r3
    9800:	9302      	str	r3, [sp, #8]
    9802:	9201      	str	r2, [sp, #4]
    9804:	2100      	movs	r1, #0
    9806:	9100      	str	r1, [sp, #0]
    9808:	463b      	mov	r3, r7
    980a:	460a      	mov	r2, r1
    980c:	4630      	mov	r0, r6
    980e:	f7ff ff81 	bl	9714 <att_write_rsp>
    9812:	e7e7      	b.n	97e4 <att_signed_write_cmd+0x24>

00009814 <att_write_cmd>:
{
    9814:	b530      	push	{r4, r5, lr}
    9816:	b085      	sub	sp, #20
    9818:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    981a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    981c:	f101 0008 	add.w	r0, r1, #8
    9820:	f011 fa61 	bl	1ace6 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    9824:	68a3      	ldr	r3, [r4, #8]
    9826:	7b22      	ldrb	r2, [r4, #12]
    9828:	9202      	str	r2, [sp, #8]
    982a:	9301      	str	r3, [sp, #4]
    982c:	2100      	movs	r1, #0
    982e:	9100      	str	r1, [sp, #0]
    9830:	4603      	mov	r3, r0
    9832:	460a      	mov	r2, r1
    9834:	4628      	mov	r0, r5
    9836:	f7ff ff6d 	bl	9714 <att_write_rsp>
}
    983a:	b005      	add	sp, #20
    983c:	bd30      	pop	{r4, r5, pc}

0000983e <att_write_req>:
{
    983e:	b530      	push	{r4, r5, lr}
    9840:	b085      	sub	sp, #20
    9842:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9844:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9846:	f101 0008 	add.w	r0, r1, #8
    984a:	f011 fa4c 	bl	1ace6 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    984e:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9850:	7b22      	ldrb	r2, [r4, #12]
    9852:	9202      	str	r2, [sp, #8]
    9854:	9301      	str	r3, [sp, #4]
    9856:	2300      	movs	r3, #0
    9858:	9300      	str	r3, [sp, #0]
    985a:	4603      	mov	r3, r0
    985c:	2213      	movs	r2, #19
    985e:	2112      	movs	r1, #18
    9860:	4628      	mov	r0, r5
    9862:	f7ff ff57 	bl	9714 <att_write_rsp>
}
    9866:	b005      	add	sp, #20
    9868:	bd30      	pop	{r4, r5, pc}
	...

0000986c <att_read_group_rsp>:
{
    986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9870:	b086      	sub	sp, #24
    9872:	4604      	mov	r4, r0
    9874:	4688      	mov	r8, r1
    9876:	4616      	mov	r6, r2
    9878:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    987a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    987c:	2214      	movs	r2, #20
    987e:	2100      	movs	r1, #0
    9880:	a801      	add	r0, sp, #4
    9882:	f020 fca5 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9886:	2201      	movs	r2, #1
    9888:	2111      	movs	r1, #17
    988a:	4628      	mov	r0, r5
    988c:	f7ff fe54 	bl	9538 <bt_att_create_pdu>
    9890:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9892:	b328      	cbz	r0, 98e0 <att_read_group_rsp+0x74>
	data.att = att;
    9894:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    9896:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    989a:	2101      	movs	r1, #1
    989c:	3008      	adds	r0, #8
    989e:	f011 f9c5 	bl	1ac2c <net_buf_simple_add>
    98a2:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    98a4:	2300      	movs	r3, #0
    98a6:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    98a8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    98aa:	ab01      	add	r3, sp, #4
    98ac:	4a0f      	ldr	r2, [pc, #60]	; (98ec <att_read_group_rsp+0x80>)
    98ae:	4639      	mov	r1, r7
    98b0:	4630      	mov	r0, r6
    98b2:	f000 fe85 	bl	a5c0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    98b6:	9b04      	ldr	r3, [sp, #16]
    98b8:	781c      	ldrb	r4, [r3, #0]
    98ba:	b13c      	cbz	r4, 98cc <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    98bc:	4b0c      	ldr	r3, [pc, #48]	; (98f0 <att_read_group_rsp+0x84>)
    98be:	9a03      	ldr	r2, [sp, #12]
    98c0:	2104      	movs	r1, #4
    98c2:	4628      	mov	r0, r5
    98c4:	f7fe fb49 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    98c8:	2400      	movs	r4, #0
    98ca:	e00a      	b.n	98e2 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    98cc:	9803      	ldr	r0, [sp, #12]
    98ce:	f011 f961 	bl	1ab94 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    98d2:	230a      	movs	r3, #10
    98d4:	4632      	mov	r2, r6
    98d6:	2110      	movs	r1, #16
    98d8:	4628      	mov	r0, r5
    98da:	f7ff fe8f 	bl	95fc <send_err_rsp>
		return 0;
    98de:	e000      	b.n	98e2 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    98e0:	240e      	movs	r4, #14
}
    98e2:	4620      	mov	r0, r4
    98e4:	b006      	add	sp, #24
    98e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ea:	bf00      	nop
    98ec:	00008df5 	.word	0x00008df5
    98f0:	00008d5b 	.word	0x00008d5b

000098f4 <att_read_group_req>:
{
    98f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98f8:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    98fa:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    98fc:	898b      	ldrh	r3, [r1, #12]
    98fe:	2b06      	cmp	r3, #6
    9900:	d005      	beq.n	990e <att_read_group_req+0x1a>
    9902:	2b14      	cmp	r3, #20
    9904:	d003      	beq.n	990e <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9906:	2004      	movs	r0, #4
}
    9908:	b008      	add	sp, #32
    990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    990e:	460c      	mov	r4, r1
    9910:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9912:	4608      	mov	r0, r1
    9914:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9918:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    991a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    991e:	2104      	movs	r1, #4
    9920:	f011 f9d1 	bl	1acc6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9924:	4621      	mov	r1, r4
    9926:	a801      	add	r0, sp, #4
    9928:	f7ff fb3c 	bl	8fa4 <uuid_create>
    992c:	b908      	cbnz	r0, 9932 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    992e:	200e      	movs	r0, #14
    9930:	e7ea      	b.n	9908 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9932:	f10d 0216 	add.w	r2, sp, #22
    9936:	4641      	mov	r1, r8
    9938:	4638      	mov	r0, r7
    993a:	f7ff f8c4 	bl	8ac6 <range_is_valid>
    993e:	b1f0      	cbz	r0, 997e <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9940:	2300      	movs	r3, #0
    9942:	f88d 3018 	strb.w	r3, [sp, #24]
    9946:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    994a:	f8ad 301a 	strh.w	r3, [sp, #26]
    994e:	a906      	add	r1, sp, #24
    9950:	a801      	add	r0, sp, #4
    9952:	f7fa fdee 	bl	4532 <bt_uuid_cmp>
    9956:	b158      	cbz	r0, 9970 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9958:	2300      	movs	r3, #0
    995a:	f88d 301c 	strb.w	r3, [sp, #28]
    995e:	f642 0301 	movw	r3, #10241	; 0x2801
    9962:	f8ad 301e 	strh.w	r3, [sp, #30]
    9966:	a907      	add	r1, sp, #28
    9968:	a801      	add	r0, sp, #4
    996a:	f7fa fde2 	bl	4532 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    996e:	b978      	cbnz	r0, 9990 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9970:	4643      	mov	r3, r8
    9972:	463a      	mov	r2, r7
    9974:	a901      	add	r1, sp, #4
    9976:	4628      	mov	r0, r5
    9978:	f7ff ff78 	bl	986c <att_read_group_rsp>
    997c:	e7c4      	b.n	9908 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    997e:	2301      	movs	r3, #1
    9980:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9984:	2110      	movs	r1, #16
    9986:	4630      	mov	r0, r6
    9988:	f7ff fe38 	bl	95fc <send_err_rsp>
		return 0;
    998c:	2000      	movs	r0, #0
    998e:	e7bb      	b.n	9908 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9990:	2310      	movs	r3, #16
    9992:	463a      	mov	r2, r7
    9994:	4619      	mov	r1, r3
    9996:	4630      	mov	r0, r6
    9998:	f7ff fe30 	bl	95fc <send_err_rsp>
		return 0;
    999c:	2000      	movs	r0, #0
    999e:	e7b3      	b.n	9908 <att_read_group_req+0x14>

000099a0 <att_read_mult_req>:
{
    99a0:	b570      	push	{r4, r5, r6, lr}
    99a2:	b086      	sub	sp, #24
    99a4:	4605      	mov	r5, r0
    99a6:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    99a8:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    99aa:	2214      	movs	r2, #20
    99ac:	2100      	movs	r1, #0
    99ae:	a801      	add	r0, sp, #4
    99b0:	f020 fc0e 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    99b4:	2200      	movs	r2, #0
    99b6:	210f      	movs	r1, #15
    99b8:	4630      	mov	r0, r6
    99ba:	f7ff fdbd 	bl	9538 <bt_att_create_pdu>
    99be:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    99c0:	b348      	cbz	r0, 9a16 <att_read_mult_req+0x76>
	data.att = att;
    99c2:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    99c4:	89a3      	ldrh	r3, [r4, #12]
    99c6:	2b01      	cmp	r3, #1
    99c8:	d91c      	bls.n	9a04 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    99ca:	f104 0008 	add.w	r0, r4, #8
    99ce:	f011 f98a 	bl	1ace6 <net_buf_simple_pull_le16>
    99d2:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    99d4:	2301      	movs	r3, #1
    99d6:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    99da:	ab01      	add	r3, sp, #4
    99dc:	4a0f      	ldr	r2, [pc, #60]	; (9a1c <att_read_mult_req+0x7c>)
    99de:	4601      	mov	r1, r0
    99e0:	f000 fdee 	bl	a5c0 <bt_gatt_foreach_attr>
		if (data.err) {
    99e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d0eb      	beq.n	99c4 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    99ec:	9803      	ldr	r0, [sp, #12]
    99ee:	f011 f8d1 	bl	1ab94 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    99f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    99f6:	462a      	mov	r2, r5
    99f8:	210e      	movs	r1, #14
    99fa:	4630      	mov	r0, r6
    99fc:	f7ff fdfe 	bl	95fc <send_err_rsp>
			return 0;
    9a00:	2000      	movs	r0, #0
    9a02:	e006      	b.n	9a12 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a04:	4b06      	ldr	r3, [pc, #24]	; (9a20 <att_read_mult_req+0x80>)
    9a06:	9a03      	ldr	r2, [sp, #12]
    9a08:	2104      	movs	r1, #4
    9a0a:	4630      	mov	r0, r6
    9a0c:	f7fe faa5 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9a10:	2000      	movs	r0, #0
}
    9a12:	b006      	add	sp, #24
    9a14:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    9a16:	200e      	movs	r0, #14
    9a18:	e7fb      	b.n	9a12 <att_read_mult_req+0x72>
    9a1a:	bf00      	nop
    9a1c:	00008c25 	.word	0x00008c25
    9a20:	00008d5b 	.word	0x00008d5b

00009a24 <att_read_rsp>:
{
    9a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a28:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9a2a:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    9a2c:	b923      	cbnz	r3, 9a38 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    9a2e:	2401      	movs	r4, #1
}
    9a30:	4620      	mov	r0, r4
    9a32:	b006      	add	sp, #24
    9a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a38:	461d      	mov	r5, r3
    9a3a:	4616      	mov	r6, r2
    9a3c:	4688      	mov	r8, r1
    9a3e:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    9a40:	2214      	movs	r2, #20
    9a42:	2100      	movs	r1, #0
    9a44:	a801      	add	r0, sp, #4
    9a46:	f020 fbc3 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9a4a:	2200      	movs	r2, #0
    9a4c:	4631      	mov	r1, r6
    9a4e:	4638      	mov	r0, r7
    9a50:	f7ff fd72 	bl	9538 <bt_att_create_pdu>
    9a54:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9a56:	b318      	cbz	r0, 9aa0 <att_read_rsp+0x7c>
	data.att = att;
    9a58:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9a5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9a5e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9a62:	2301      	movs	r3, #1
    9a64:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9a68:	ab01      	add	r3, sp, #4
    9a6a:	4a0e      	ldr	r2, [pc, #56]	; (9aa4 <att_read_rsp+0x80>)
    9a6c:	4629      	mov	r1, r5
    9a6e:	4628      	mov	r0, r5
    9a70:	f000 fda6 	bl	a5c0 <bt_gatt_foreach_attr>
	if (data.err) {
    9a74:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9a78:	b934      	cbnz	r4, 9a88 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a7a:	4b0b      	ldr	r3, [pc, #44]	; (9aa8 <att_read_rsp+0x84>)
    9a7c:	9a03      	ldr	r2, [sp, #12]
    9a7e:	2104      	movs	r1, #4
    9a80:	4638      	mov	r0, r7
    9a82:	f7fe fa6a 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9a86:	e7d3      	b.n	9a30 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9a88:	9803      	ldr	r0, [sp, #12]
    9a8a:	f011 f883 	bl	1ab94 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9a8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9a92:	462a      	mov	r2, r5
    9a94:	4641      	mov	r1, r8
    9a96:	4638      	mov	r0, r7
    9a98:	f7ff fdb0 	bl	95fc <send_err_rsp>
		return 0;
    9a9c:	2400      	movs	r4, #0
    9a9e:	e7c7      	b.n	9a30 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9aa0:	240e      	movs	r4, #14
    9aa2:	e7c5      	b.n	9a30 <att_read_rsp+0xc>
    9aa4:	00008c25 	.word	0x00008c25
    9aa8:	00008d5b 	.word	0x00008d5b

00009aac <att_read_blob_req>:
{
    9aac:	b500      	push	{lr}
    9aae:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9ab0:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9ab2:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9ab4:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9ab6:	9200      	str	r2, [sp, #0]
    9ab8:	220d      	movs	r2, #13
    9aba:	210c      	movs	r1, #12
    9abc:	f7ff ffb2 	bl	9a24 <att_read_rsp>
}
    9ac0:	b003      	add	sp, #12
    9ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00009ac6 <att_read_req>:
{
    9ac6:	b500      	push	{lr}
    9ac8:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9aca:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9acc:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9ace:	2200      	movs	r2, #0
    9ad0:	9200      	str	r2, [sp, #0]
    9ad2:	220b      	movs	r2, #11
    9ad4:	210a      	movs	r1, #10
    9ad6:	f7ff ffa5 	bl	9a24 <att_read_rsp>
}
    9ada:	b003      	add	sp, #12
    9adc:	f85d fb04 	ldr.w	pc, [sp], #4

00009ae0 <att_read_type_rsp>:
{
    9ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ae4:	b086      	sub	sp, #24
    9ae6:	4604      	mov	r4, r0
    9ae8:	4688      	mov	r8, r1
    9aea:	4616      	mov	r6, r2
    9aec:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9aee:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9af0:	2218      	movs	r2, #24
    9af2:	2100      	movs	r1, #0
    9af4:	4668      	mov	r0, sp
    9af6:	f020 fb6b 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9afa:	2201      	movs	r2, #1
    9afc:	2109      	movs	r1, #9
    9afe:	4628      	mov	r0, r5
    9b00:	f7ff fd1a 	bl	9538 <bt_att_create_pdu>
    9b04:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9b06:	b340      	cbz	r0, 9b5a <att_read_type_rsp+0x7a>
	data.att = att;
    9b08:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9b0a:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9b0e:	2101      	movs	r1, #1
    9b10:	3008      	adds	r0, #8
    9b12:	f011 f88b 	bl	1ac2c <net_buf_simple_add>
    9b16:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9b18:	2300      	movs	r3, #0
    9b1a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9b1c:	230a      	movs	r3, #10
    9b1e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9b22:	466b      	mov	r3, sp
    9b24:	4a0f      	ldr	r2, [pc, #60]	; (9b64 <att_read_type_rsp+0x84>)
    9b26:	4639      	mov	r1, r7
    9b28:	4630      	mov	r0, r6
    9b2a:	f000 fd49 	bl	a5c0 <bt_gatt_foreach_attr>
	if (data.err) {
    9b2e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9b32:	b934      	cbnz	r4, 9b42 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9b34:	4b0c      	ldr	r3, [pc, #48]	; (9b68 <att_read_type_rsp+0x88>)
    9b36:	9a02      	ldr	r2, [sp, #8]
    9b38:	2104      	movs	r1, #4
    9b3a:	4628      	mov	r0, r5
    9b3c:	f7fe fa0d 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9b40:	e00c      	b.n	9b5c <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    9b42:	9802      	ldr	r0, [sp, #8]
    9b44:	f011 f826 	bl	1ab94 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9b48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b4c:	4632      	mov	r2, r6
    9b4e:	2108      	movs	r1, #8
    9b50:	4628      	mov	r0, r5
    9b52:	f7ff fd53 	bl	95fc <send_err_rsp>
		return 0;
    9b56:	2400      	movs	r4, #0
    9b58:	e000      	b.n	9b5c <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9b5a:	240e      	movs	r4, #14
}
    9b5c:	4620      	mov	r0, r4
    9b5e:	b006      	add	sp, #24
    9b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b64:	00008ee3 	.word	0x00008ee3
    9b68:	00008d5b 	.word	0x00008d5b

00009b6c <att_read_type_req>:
{
    9b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b70:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9b72:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9b74:	898b      	ldrh	r3, [r1, #12]
    9b76:	2b06      	cmp	r3, #6
    9b78:	d005      	beq.n	9b86 <att_read_type_req+0x1a>
    9b7a:	2b14      	cmp	r3, #20
    9b7c:	d003      	beq.n	9b86 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9b7e:	2004      	movs	r0, #4
}
    9b80:	b006      	add	sp, #24
    9b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b86:	460c      	mov	r4, r1
    9b88:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9b8a:	4608      	mov	r0, r1
    9b8c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9b90:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9b92:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9b96:	2104      	movs	r1, #4
    9b98:	f011 f895 	bl	1acc6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9b9c:	4621      	mov	r1, r4
    9b9e:	a801      	add	r0, sp, #4
    9ba0:	f7ff fa00 	bl	8fa4 <uuid_create>
    9ba4:	b908      	cbnz	r0, 9baa <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9ba6:	200e      	movs	r0, #14
    9ba8:	e7ea      	b.n	9b80 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9baa:	f10d 0216 	add.w	r2, sp, #22
    9bae:	4641      	mov	r1, r8
    9bb0:	4638      	mov	r0, r7
    9bb2:	f7fe ff88 	bl	8ac6 <range_is_valid>
    9bb6:	b130      	cbz	r0, 9bc6 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9bb8:	4643      	mov	r3, r8
    9bba:	463a      	mov	r2, r7
    9bbc:	a901      	add	r1, sp, #4
    9bbe:	4628      	mov	r0, r5
    9bc0:	f7ff ff8e 	bl	9ae0 <att_read_type_rsp>
    9bc4:	e7dc      	b.n	9b80 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9bc6:	2301      	movs	r3, #1
    9bc8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9bcc:	2108      	movs	r1, #8
    9bce:	4630      	mov	r0, r6
    9bd0:	f7ff fd14 	bl	95fc <send_err_rsp>
		return 0;
    9bd4:	2000      	movs	r0, #0
    9bd6:	e7d3      	b.n	9b80 <att_read_type_req+0x14>

00009bd8 <att_find_type_rsp>:
{
    9bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bdc:	b086      	sub	sp, #24
    9bde:	4604      	mov	r4, r0
    9be0:	460e      	mov	r6, r1
    9be2:	4617      	mov	r7, r2
    9be4:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9be6:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9be8:	2214      	movs	r2, #20
    9bea:	2100      	movs	r1, #0
    9bec:	a801      	add	r0, sp, #4
    9bee:	f020 faef 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9bf2:	2200      	movs	r2, #0
    9bf4:	2107      	movs	r1, #7
    9bf6:	4628      	mov	r0, r5
    9bf8:	f7ff fc9e 	bl	9538 <bt_att_create_pdu>
    9bfc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9bfe:	b338      	cbz	r0, 9c50 <att_find_type_rsp+0x78>
	data.att = att;
    9c00:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9c02:	2300      	movs	r3, #0
    9c04:	9303      	str	r3, [sp, #12]
	data.value = value;
    9c06:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9c0a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9c0e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9c12:	230a      	movs	r3, #10
    9c14:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9c18:	ab01      	add	r3, sp, #4
    9c1a:	4a10      	ldr	r2, [pc, #64]	; (9c5c <att_find_type_rsp+0x84>)
    9c1c:	4639      	mov	r1, r7
    9c1e:	4630      	mov	r0, r6
    9c20:	f000 fcce 	bl	a5c0 <bt_gatt_foreach_attr>
	if (data.err) {
    9c24:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9c28:	b934      	cbnz	r4, 9c38 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c2a:	4b0d      	ldr	r3, [pc, #52]	; (9c60 <att_find_type_rsp+0x88>)
    9c2c:	9a02      	ldr	r2, [sp, #8]
    9c2e:	2104      	movs	r1, #4
    9c30:	4628      	mov	r0, r5
    9c32:	f7fe f992 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9c36:	e00c      	b.n	9c52 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9c38:	9802      	ldr	r0, [sp, #8]
    9c3a:	f010 ffab 	bl	1ab94 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9c3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9c42:	4632      	mov	r2, r6
    9c44:	2106      	movs	r1, #6
    9c46:	4628      	mov	r0, r5
    9c48:	f7ff fcd8 	bl	95fc <send_err_rsp>
		return 0;
    9c4c:	2400      	movs	r4, #0
    9c4e:	e000      	b.n	9c52 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9c50:	240e      	movs	r4, #14
}
    9c52:	4620      	mov	r0, r4
    9c54:	b006      	add	sp, #24
    9c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c5a:	bf00      	nop
    9c5c:	0000908b 	.word	0x0000908b
    9c60:	00008d5b 	.word	0x00008d5b

00009c64 <att_find_type_req>:
{
    9c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c68:	b084      	sub	sp, #16
    9c6a:	4605      	mov	r5, r0
    9c6c:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9c6e:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    9c72:	4608      	mov	r0, r1
    9c74:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9c78:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9c7a:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9c7c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9c80:	2106      	movs	r1, #6
    9c82:	f011 f820 	bl	1acc6 <net_buf_simple_pull>
    9c86:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9c88:	f10d 020e 	add.w	r2, sp, #14
    9c8c:	4631      	mov	r1, r6
    9c8e:	4620      	mov	r0, r4
    9c90:	f7fe ff19 	bl	8ac6 <range_is_valid>
    9c94:	b160      	cbz	r0, 9cb0 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9c96:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9c9a:	d012      	beq.n	9cc2 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9c9c:	230a      	movs	r3, #10
    9c9e:	4622      	mov	r2, r4
    9ca0:	2106      	movs	r1, #6
    9ca2:	4648      	mov	r0, r9
    9ca4:	f7ff fcaa 	bl	95fc <send_err_rsp>
		return 0;
    9ca8:	2000      	movs	r0, #0
}
    9caa:	b004      	add	sp, #16
    9cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9cb0:	2301      	movs	r3, #1
    9cb2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9cb6:	2106      	movs	r1, #6
    9cb8:	4648      	mov	r0, r9
    9cba:	f7ff fc9f 	bl	95fc <send_err_rsp>
		return 0;
    9cbe:	2000      	movs	r0, #0
    9cc0:	e7f3      	b.n	9caa <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9cc2:	7b3b      	ldrb	r3, [r7, #12]
    9cc4:	9300      	str	r3, [sp, #0]
    9cc6:	4653      	mov	r3, sl
    9cc8:	4632      	mov	r2, r6
    9cca:	4621      	mov	r1, r4
    9ccc:	4628      	mov	r0, r5
    9cce:	f7ff ff83 	bl	9bd8 <att_find_type_rsp>
    9cd2:	e7ea      	b.n	9caa <att_find_type_req+0x46>

00009cd4 <att_find_info_rsp>:
{
    9cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd6:	b085      	sub	sp, #20
    9cd8:	4605      	mov	r5, r0
    9cda:	460e      	mov	r6, r1
    9cdc:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9cde:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9ce0:	2210      	movs	r2, #16
    9ce2:	2100      	movs	r1, #0
    9ce4:	4668      	mov	r0, sp
    9ce6:	f020 fa73 	bl	2a1d0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9cea:	2200      	movs	r2, #0
    9cec:	2105      	movs	r1, #5
    9cee:	4620      	mov	r0, r4
    9cf0:	f7ff fc22 	bl	9538 <bt_att_create_pdu>
    9cf4:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9cf6:	b1e8      	cbz	r0, 9d34 <att_find_info_rsp+0x60>
	data.att = att;
    9cf8:	ab04      	add	r3, sp, #16
    9cfa:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9cfe:	4a0e      	ldr	r2, [pc, #56]	; (9d38 <att_find_info_rsp+0x64>)
    9d00:	4639      	mov	r1, r7
    9d02:	4630      	mov	r0, r6
    9d04:	f000 fc5c 	bl	a5c0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9d08:	9b02      	ldr	r3, [sp, #8]
    9d0a:	b143      	cbz	r3, 9d1e <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9d0c:	4b0b      	ldr	r3, [pc, #44]	; (9d3c <att_find_info_rsp+0x68>)
    9d0e:	9a01      	ldr	r2, [sp, #4]
    9d10:	2104      	movs	r1, #4
    9d12:	4620      	mov	r0, r4
    9d14:	f7fe f921 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    9d18:	2000      	movs	r0, #0
}
    9d1a:	b005      	add	sp, #20
    9d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9d1e:	9801      	ldr	r0, [sp, #4]
    9d20:	f010 ff38 	bl	1ab94 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9d24:	230a      	movs	r3, #10
    9d26:	4632      	mov	r2, r6
    9d28:	2104      	movs	r1, #4
    9d2a:	4620      	mov	r0, r4
    9d2c:	f7ff fc66 	bl	95fc <send_err_rsp>
		return 0;
    9d30:	2000      	movs	r0, #0
    9d32:	e7f2      	b.n	9d1a <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9d34:	200e      	movs	r0, #14
    9d36:	e7f0      	b.n	9d1a <att_find_info_rsp+0x46>
    9d38:	00008fdb 	.word	0x00008fdb
    9d3c:	00008d5b 	.word	0x00008d5b

00009d40 <att_find_info_req>:
{
    9d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d42:	b083      	sub	sp, #12
    9d44:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9d46:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9d48:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9d4a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9d4c:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9d4e:	f10d 0206 	add.w	r2, sp, #6
    9d52:	4631      	mov	r1, r6
    9d54:	4628      	mov	r0, r5
    9d56:	f7fe feb6 	bl	8ac6 <range_is_valid>
    9d5a:	b130      	cbz	r0, 9d6a <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9d5c:	4632      	mov	r2, r6
    9d5e:	4629      	mov	r1, r5
    9d60:	4620      	mov	r0, r4
    9d62:	f7ff ffb7 	bl	9cd4 <att_find_info_rsp>
}
    9d66:	b003      	add	sp, #12
    9d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9d6a:	2301      	movs	r3, #1
    9d6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9d70:	2104      	movs	r1, #4
    9d72:	4638      	mov	r0, r7
    9d74:	f7ff fc42 	bl	95fc <send_err_rsp>
		return 0;
    9d78:	2000      	movs	r0, #0
    9d7a:	e7f4      	b.n	9d66 <att_find_info_req+0x26>

00009d7c <bt_att_init>:

void bt_att_init(void)
{
    9d7c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9d7e:	4803      	ldr	r0, [pc, #12]	; (9d8c <bt_att_init+0x10>)
    9d80:	f7fd ff44 	bl	7c0c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9d84:	f000 fb3c 	bl	a400 <bt_gatt_init>
    9d88:	bd08      	pop	{r3, pc}
    9d8a:	bf00      	nop
    9d8c:	2000b9e0 	.word	0x2000b9e0

00009d90 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9d92:	2800      	cmp	r0, #0
    9d94:	d043      	beq.n	9e1e <bt_att_send+0x8e>
    9d96:	4606      	mov	r6, r0
    9d98:	2900      	cmp	r1, #0
    9d9a:	d043      	beq.n	9e24 <bt_att_send+0x94>
    9d9c:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9d9e:	f7fe ff7b 	bl	8c98 <att_chan_get>
	if (!att) {
    9da2:	4605      	mov	r5, r0
    9da4:	2800      	cmp	r0, #0
    9da6:	d040      	beq.n	9e2a <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9da8:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9db0:	4638      	mov	r0, r7
    9db2:	f01f fa4d 	bl	29250 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9db6:	682b      	ldr	r3, [r5, #0]
    9db8:	7b1b      	ldrb	r3, [r3, #12]
    9dba:	2b03      	cmp	r3, #3
    9dbc:	d011      	beq.n	9de2 <bt_att_send+0x52>
    9dbe:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9dc0:	b1e3      	cbz	r3, 9dfc <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9dc2:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	2bd2      	cmp	r3, #210	; 0xd2
    9dc8:	d01e      	beq.n	9e08 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9dca:	4620      	mov	r0, r4
    9dcc:	f7fe ff0c 	bl	8be8 <att_cb>
    9dd0:	4603      	mov	r3, r0
    9dd2:	4622      	mov	r2, r4
    9dd4:	2104      	movs	r1, #4
    9dd6:	4630      	mov	r0, r6
    9dd8:	f7fe f8bf 	bl	7f5a <bt_l2cap_send_cb>

	return 0;
    9ddc:	2500      	movs	r5, #0
}
    9dde:	4628      	mov	r0, r5
    9de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9de2:	f3bf 8f5b 	dmb	ish
    9de6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9dea:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9dee:	f013 0f04 	tst.w	r3, #4
    9df2:	d101      	bne.n	9df8 <bt_att_send+0x68>
    9df4:	2301      	movs	r3, #1
    9df6:	e7e3      	b.n	9dc0 <bt_att_send+0x30>
    9df8:	2300      	movs	r3, #0
    9dfa:	e7e1      	b.n	9dc0 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9dfc:	4638      	mov	r0, r7
    9dfe:	f01f fa14 	bl	2922a <_impl_k_sem_give>
		return -ENOTCONN;
    9e02:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9e06:	e7ea      	b.n	9dde <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9e08:	4621      	mov	r1, r4
    9e0a:	4630      	mov	r0, r6
    9e0c:	f003 f81a 	bl	ce44 <bt_smp_sign>
		if (err) {
    9e10:	4605      	mov	r5, r0
    9e12:	2800      	cmp	r0, #0
    9e14:	d0d9      	beq.n	9dca <bt_att_send+0x3a>
    9e16:	4638      	mov	r0, r7
    9e18:	f01f fa07 	bl	2922a <_impl_k_sem_give>
			return err;
    9e1c:	e7df      	b.n	9dde <bt_att_send+0x4e>
		return -EINVAL;
    9e1e:	f06f 0515 	mvn.w	r5, #21
    9e22:	e7dc      	b.n	9dde <bt_att_send+0x4e>
    9e24:	f06f 0515 	mvn.w	r5, #21
    9e28:	e7d9      	b.n	9dde <bt_att_send+0x4e>
		return -ENOTCONN;
    9e2a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9e2e:	e7d6      	b.n	9dde <bt_att_send+0x4e>

00009e30 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    9e30:	b1e0      	cbz	r0, 9e6c <bt_att_req_send+0x3c>
    9e32:	b1f1      	cbz	r1, 9e72 <bt_att_req_send+0x42>
{
    9e34:	b510      	push	{r4, lr}
    9e36:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9e38:	f7fe ff2e 	bl	8c98 <att_chan_get>
	if (!att) {
    9e3c:	b1e0      	cbz	r0, 9e78 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    9e3e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9e42:	b17a      	cbz	r2, 9e64 <bt_att_req_send+0x34>
	node->next = NULL;
    9e44:	2200      	movs	r2, #0
    9e46:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9e48:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9e4c:	b122      	cbz	r2, 9e58 <bt_att_req_send+0x28>
		list->tail->next = node;
    9e4e:	6014      	str	r4, [r2, #0]
		list->tail = node;
    9e50:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9e54:	2000      	movs	r0, #0
    9e56:	bd10      	pop	{r4, pc}
		list->tail = node;
    9e58:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9e5c:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    9e60:	2000      	movs	r0, #0
    9e62:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9e64:	4621      	mov	r1, r4
    9e66:	f7ff f9ad 	bl	91c4 <att_send_req>
    9e6a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9e6c:	f06f 0015 	mvn.w	r0, #21
    9e70:	4770      	bx	lr
    9e72:	f06f 0015 	mvn.w	r0, #21
    9e76:	4770      	bx	lr
		return -ENOTCONN;
    9e78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9e7c:	bd10      	pop	{r4, pc}

00009e7e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    9e7e:	4770      	bx	lr

00009e80 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    9e80:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    9e82:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    9e84:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    9e86:	4a1c      	ldr	r2, [pc, #112]	; (9ef8 <gatt_register+0x78>)
    9e88:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9e8a:	b172      	cbz	r2, 9eaa <gatt_register+0x2a>
	return list->tail;
    9e8c:	4a1a      	ldr	r2, [pc, #104]	; (9ef8 <gatt_register+0x78>)
    9e8e:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9e90:	b14a      	cbz	r2, 9ea6 <gatt_register+0x26>
    9e92:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    9e94:	6815      	ldr	r5, [r2, #0]
    9e96:	8892      	ldrh	r2, [r2, #4]
    9e98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9e9c:	0091      	lsls	r1, r2, #2
    9e9e:	3914      	subs	r1, #20
    9ea0:	4429      	add	r1, r5
    9ea2:	8a0a      	ldrh	r2, [r1, #16]
    9ea4:	e009      	b.n	9eba <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9ea6:	2200      	movs	r2, #0
    9ea8:	e7f4      	b.n	9e94 <gatt_register+0x14>
		handle = 0;
    9eaa:	2200      	movs	r2, #0
    9eac:	e005      	b.n	9eba <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    9eae:	428a      	cmp	r2, r1
    9eb0:	d21e      	bcs.n	9ef0 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    9eb2:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    9eb4:	3414      	adds	r4, #20
    9eb6:	3b01      	subs	r3, #1
    9eb8:	b29b      	uxth	r3, r3
    9eba:	b13c      	cbz	r4, 9ecc <gatt_register+0x4c>
    9ebc:	b133      	cbz	r3, 9ecc <gatt_register+0x4c>
		if (!attrs->handle) {
    9ebe:	8a21      	ldrh	r1, [r4, #16]
    9ec0:	2900      	cmp	r1, #0
    9ec2:	d1f4      	bne.n	9eae <gatt_register+0x2e>
			attrs->handle = ++handle;
    9ec4:	3201      	adds	r2, #1
    9ec6:	b292      	uxth	r2, r2
    9ec8:	8222      	strh	r2, [r4, #16]
    9eca:	e7f3      	b.n	9eb4 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9ecc:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    9ed0:	2200      	movs	r2, #0
    9ed2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    9ed4:	4a08      	ldr	r2, [pc, #32]	; (9ef8 <gatt_register+0x78>)
    9ed6:	6852      	ldr	r2, [r2, #4]
    9ed8:	b12a      	cbz	r2, 9ee6 <gatt_register+0x66>
		list->tail->next = node;
    9eda:	6013      	str	r3, [r2, #0]
		list->tail = node;
    9edc:	4a06      	ldr	r2, [pc, #24]	; (9ef8 <gatt_register+0x78>)
    9ede:	6053      	str	r3, [r2, #4]

	return 0;
    9ee0:	2000      	movs	r0, #0
}
    9ee2:	bc30      	pop	{r4, r5}
    9ee4:	4770      	bx	lr
		list->tail = node;
    9ee6:	4a04      	ldr	r2, [pc, #16]	; (9ef8 <gatt_register+0x78>)
    9ee8:	6053      	str	r3, [r2, #4]
		list->head = node;
    9eea:	6013      	str	r3, [r2, #0]
	return 0;
    9eec:	2000      	movs	r0, #0
    9eee:	e7f8      	b.n	9ee2 <gatt_register+0x62>
			return -EINVAL;
    9ef0:	f06f 0015 	mvn.w	r0, #21
    9ef4:	e7f5      	b.n	9ee2 <gatt_register+0x62>
    9ef6:	bf00      	nop
    9ef8:	20000740 	.word	0x20000740

00009efc <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    9efc:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    9efe:	8804      	ldrh	r4, [r0, #0]
    9f00:	4294      	cmp	r4, r2
    9f02:	d802      	bhi.n	9f0a <update_range+0xe>
    9f04:	880d      	ldrh	r5, [r1, #0]
    9f06:	429d      	cmp	r5, r3
    9f08:	d209      	bcs.n	9f1e <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    9f0a:	4294      	cmp	r4, r2
    9f0c:	d900      	bls.n	9f10 <update_range+0x14>
		*start = new_start;
    9f0e:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    9f10:	880a      	ldrh	r2, [r1, #0]
    9f12:	4293      	cmp	r3, r2
    9f14:	d905      	bls.n	9f22 <update_range+0x26>
		*end = new_end;
    9f16:	800b      	strh	r3, [r1, #0]
	}

	return true;
    9f18:	2001      	movs	r0, #1
}
    9f1a:	bc30      	pop	{r4, r5}
    9f1c:	4770      	bx	lr
		return false;
    9f1e:	2000      	movs	r0, #0
    9f20:	e7fb      	b.n	9f1a <update_range+0x1e>
	return true;
    9f22:	2001      	movs	r0, #1
    9f24:	e7f9      	b.n	9f1a <update_range+0x1e>

00009f26 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    9f26:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    9f28:	2000      	movs	r0, #0
    9f2a:	4770      	bx	lr

00009f2c <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    9f2c:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    9f2e:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    9f30:	4623      	mov	r3, r4
    9f32:	e000      	b.n	9f36 <gatt_ccc_changed+0xa>
    9f34:	3301      	adds	r3, #1
    9f36:	684a      	ldr	r2, [r1, #4]
    9f38:	429a      	cmp	r2, r3
    9f3a:	d907      	bls.n	9f4c <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    9f3c:	680a      	ldr	r2, [r1, #0]
    9f3e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    9f42:	8912      	ldrh	r2, [r2, #8]
    9f44:	4294      	cmp	r4, r2
    9f46:	d2f5      	bcs.n	9f34 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    9f48:	4614      	mov	r4, r2
    9f4a:	e7f3      	b.n	9f34 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    9f4c:	890b      	ldrh	r3, [r1, #8]
    9f4e:	429c      	cmp	r4, r3
    9f50:	d003      	beq.n	9f5a <gatt_ccc_changed+0x2e>
		ccc->value = value;
    9f52:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    9f54:	68cb      	ldr	r3, [r1, #12]
    9f56:	4621      	mov	r1, r4
    9f58:	4798      	blx	r3
    9f5a:	bd10      	pop	{r4, pc}

00009f5c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    9f5c:	b510      	push	{r4, lr}
    9f5e:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    9f60:	69dc      	ldr	r4, [r3, #28]
    9f62:	460a      	mov	r2, r1
    9f64:	6999      	ldr	r1, [r3, #24]
    9f66:	47a0      	blx	r4
    9f68:	bd10      	pop	{r4, pc}
	...

00009f6c <sc_indicate_rsp>:
{
    9f6c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f6e:	4b0f      	ldr	r3, [pc, #60]	; (9fac <sc_indicate_rsp+0x40>)
    9f70:	f103 0254 	add.w	r2, r3, #84	; 0x54
    9f74:	f3bf 8f5b 	dmb	ish
    9f78:	e852 1f00 	ldrex	r1, [r2]
    9f7c:	f021 0102 	bic.w	r1, r1, #2
    9f80:	e842 1000 	strex	r0, r1, [r2]
    9f84:	2800      	cmp	r0, #0
    9f86:	d1f7      	bne.n	9f78 <sc_indicate_rsp+0xc>
    9f88:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f8c:	f3bf 8f5b 	dmb	ish
    9f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9f92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9f96:	f013 0f01 	tst.w	r3, #1
    9f9a:	d100      	bne.n	9f9e <sc_indicate_rsp+0x32>
    9f9c:	bd08      	pop	{r3, pc}
    9f9e:	2200      	movs	r2, #0
    9fa0:	4903      	ldr	r1, [pc, #12]	; (9fb0 <sc_indicate_rsp+0x44>)
    9fa2:	4804      	ldr	r0, [pc, #16]	; (9fb4 <sc_indicate_rsp+0x48>)
    9fa4:	f01f ff8a 	bl	29ebc <k_delayed_work_submit_to_queue>
}
    9fa8:	e7f8      	b.n	9f9c <sc_indicate_rsp+0x30>
    9faa:	bf00      	nop
    9fac:	20000748 	.word	0x20000748
    9fb0:	20000774 	.word	0x20000774
    9fb4:	20002b78 	.word	0x20002b78

00009fb8 <sc_indicate>:
{
    9fb8:	b510      	push	{r4, lr}
    9fba:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9fbc:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9fbe:	f3bf 8f5b 	dmb	ish
    9fc2:	e850 3f00 	ldrex	r3, [r0]
    9fc6:	f043 0e01 	orr.w	lr, r3, #1
    9fca:	e840 ec00 	strex	ip, lr, [r0]
    9fce:	f1bc 0f00 	cmp.w	ip, #0
    9fd2:	d1f6      	bne.n	9fc2 <sc_indicate+0xa>
    9fd4:	f3bf 8f5b 	dmb	ish
    9fd8:	f013 0f01 	tst.w	r3, #1
    9fdc:	d10a      	bne.n	9ff4 <sc_indicate+0x3c>
		sc->start = start;
    9fde:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    9fe0:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fe2:	f3bf 8f5b 	dmb	ish
    9fe6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9fe8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    9fec:	f013 0f02 	tst.w	r3, #2
    9ff0:	d00b      	beq.n	a00a <sc_indicate+0x52>
    9ff2:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    9ff4:	4613      	mov	r3, r2
    9ff6:	460a      	mov	r2, r1
    9ff8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9ffc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a000:	f7ff ff7c 	bl	9efc <update_range>
    a004:	2800      	cmp	r0, #0
    a006:	d1ec      	bne.n	9fe2 <sc_indicate+0x2a>
    a008:	e7f3      	b.n	9ff2 <sc_indicate+0x3a>
    a00a:	220a      	movs	r2, #10
    a00c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a010:	4801      	ldr	r0, [pc, #4]	; (a018 <sc_indicate+0x60>)
    a012:	f01f ff53 	bl	29ebc <k_delayed_work_submit_to_queue>
    a016:	e7ec      	b.n	9ff2 <sc_indicate+0x3a>
    a018:	20002b78 	.word	0x20002b78

0000a01c <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    a01c:	b510      	push	{r4, lr}
    a01e:	b082      	sub	sp, #8
    a020:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    a022:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    a024:	6a09      	ldr	r1, [r1, #32]
    a026:	a801      	add	r0, sp, #4
    a028:	f7f6 f94a 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    a02c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    a030:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    a034:	89a1      	ldrh	r1, [r4, #12]
    a036:	b909      	cbnz	r1, a03c <sc_save+0x20>
    a038:	89e1      	ldrh	r1, [r4, #14]
    a03a:	b139      	cbz	r1, a04c <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    a03c:	f104 010e 	add.w	r1, r4, #14
    a040:	f104 000c 	add.w	r0, r4, #12
    a044:	f7ff ff5a 	bl	9efc <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    a048:	b002      	add	sp, #8
    a04a:	bd10      	pop	{r4, pc}
		*stored = data;
    a04c:	9801      	ldr	r0, [sp, #4]
    a04e:	60e0      	str	r0, [r4, #12]
		goto done;
    a050:	e7fa      	b.n	a048 <sc_save+0x2c>

0000a052 <bt_gatt_attr_write_ccc>:
{
    a052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a056:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a05a:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a05c:	2c02      	cmp	r4, #2
    a05e:	d84f      	bhi.n	a100 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a060:	4698      	mov	r8, r3
    a062:	441c      	add	r4, r3
    a064:	2c02      	cmp	r4, #2
    a066:	d84e      	bhi.n	a106 <bt_gatt_attr_write_ccc+0xb4>
    a068:	460f      	mov	r7, r1
    a06a:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a06c:	7853      	ldrb	r3, [r2, #1]
    a06e:	7816      	ldrb	r6, [r2, #0]
    a070:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a074:	2400      	movs	r4, #0
    a076:	686b      	ldr	r3, [r5, #4]
    a078:	429c      	cmp	r4, r3
    a07a:	d209      	bcs.n	a090 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a07c:	6829      	ldr	r1, [r5, #0]
    a07e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a082:	3101      	adds	r1, #1
    a084:	4648      	mov	r0, r9
    a086:	f7fc fffd 	bl	7084 <bt_conn_addr_le_cmp>
    a08a:	b108      	cbz	r0, a090 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a08c:	3401      	adds	r4, #1
    a08e:	e7f2      	b.n	a076 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a090:	686b      	ldr	r3, [r5, #4]
    a092:	429c      	cmp	r4, r3
    a094:	d026      	beq.n	a0e4 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a096:	b91e      	cbnz	r6, a0a0 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a098:	682a      	ldr	r2, [r5, #0]
    a09a:	0123      	lsls	r3, r4, #4
    a09c:	2100      	movs	r1, #0
    a09e:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a0a0:	682b      	ldr	r3, [r5, #0]
    a0a2:	0124      	lsls	r4, r4, #4
    a0a4:	4423      	add	r3, r4
    a0a6:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a0a8:	682b      	ldr	r3, [r5, #0]
    a0aa:	441c      	add	r4, r3
    a0ac:	8922      	ldrh	r2, [r4, #8]
    a0ae:	892b      	ldrh	r3, [r5, #8]
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d003      	beq.n	a0bc <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a0b4:	4629      	mov	r1, r5
    a0b6:	4638      	mov	r0, r7
    a0b8:	f7ff ff38 	bl	9f2c <gatt_ccc_changed>
}
    a0bc:	4640      	mov	r0, r8
    a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a0c2:	2207      	movs	r2, #7
    a0c4:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a0c8:	3001      	adds	r0, #1
    a0ca:	f7f6 f8f9 	bl	2c0 <memcpy>
			if (value) {
    a0ce:	b11e      	cbz	r6, a0d8 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a0d0:	682b      	ldr	r3, [r5, #0]
    a0d2:	2201      	movs	r2, #1
    a0d4:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a0d8:	686b      	ldr	r3, [r5, #4]
    a0da:	429c      	cmp	r4, r3
    a0dc:	d1e0      	bne.n	a0a0 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a0de:	f06f 0810 	mvn.w	r8, #16
    a0e2:	e7eb      	b.n	a0bc <bt_gatt_attr_write_ccc+0x6a>
    a0e4:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a0e6:	429c      	cmp	r4, r3
    a0e8:	d2f6      	bcs.n	a0d8 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a0ea:	682a      	ldr	r2, [r5, #0]
    a0ec:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a0f0:	eb02 000a 	add.w	r0, r2, sl
    a0f4:	f812 200a 	ldrb.w	r2, [r2, sl]
    a0f8:	2a00      	cmp	r2, #0
    a0fa:	d0e2      	beq.n	a0c2 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a0fc:	3401      	adds	r4, #1
    a0fe:	e7f2      	b.n	a0e6 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a100:	f06f 0806 	mvn.w	r8, #6
    a104:	e7da      	b.n	a0bc <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a106:	f06f 080c 	mvn.w	r8, #12
    a10a:	e7d7      	b.n	a0bc <bt_gatt_attr_write_ccc+0x6a>

0000a10c <gatt_send>:
{
    a10c:	b538      	push	{r3, r4, r5, lr}
    a10e:	460d      	mov	r5, r1
	if (params) {
    a110:	b153      	cbz	r3, a128 <gatt_send+0x1c>
    a112:	4619      	mov	r1, r3
		req->buf = buf;
    a114:	611d      	str	r5, [r3, #16]
		req->func = func;
    a116:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a118:	9b04      	ldr	r3, [sp, #16]
    a11a:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a11c:	f7ff fe88 	bl	9e30 <bt_att_req_send>
    a120:	4604      	mov	r4, r0
	if (err) {
    a122:	b92c      	cbnz	r4, a130 <gatt_send+0x24>
}
    a124:	4620      	mov	r0, r4
    a126:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a128:	f7ff fe32 	bl	9d90 <bt_att_send>
    a12c:	4604      	mov	r4, r0
    a12e:	e7f8      	b.n	a122 <gatt_send+0x16>
		net_buf_unref(buf);
    a130:	4628      	mov	r0, r5
    a132:	f010 fd2f 	bl	1ab94 <net_buf_unref>
	return err;
    a136:	e7f5      	b.n	a124 <gatt_send+0x18>

0000a138 <gatt_indicate>:
{
    a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a13c:	b082      	sub	sp, #8
    a13e:	4680      	mov	r8, r0
    a140:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a142:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a144:	3202      	adds	r2, #2
    a146:	211d      	movs	r1, #29
    a148:	f7ff f9f6 	bl	9538 <bt_att_create_pdu>
	if (!buf) {
    a14c:	b1f8      	cbz	r0, a18e <gatt_indicate+0x56>
    a14e:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a150:	f100 0708 	add.w	r7, r0, #8
    a154:	2102      	movs	r1, #2
    a156:	4638      	mov	r0, r7
    a158:	f010 fd68 	bl	1ac2c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a15c:	69a3      	ldr	r3, [r4, #24]
    a15e:	8a1b      	ldrh	r3, [r3, #16]
    a160:	4605      	mov	r5, r0
    a162:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a166:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a168:	4638      	mov	r0, r7
    a16a:	f010 fd5f 	bl	1ac2c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a16e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a170:	6a21      	ldr	r1, [r4, #32]
    a172:	4628      	mov	r0, r5
    a174:	f7f6 f8a4 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a178:	2300      	movs	r3, #0
    a17a:	9300      	str	r3, [sp, #0]
    a17c:	4623      	mov	r3, r4
    a17e:	4a05      	ldr	r2, [pc, #20]	; (a194 <gatt_indicate+0x5c>)
    a180:	4631      	mov	r1, r6
    a182:	4640      	mov	r0, r8
    a184:	f7ff ffc2 	bl	a10c <gatt_send>
}
    a188:	b002      	add	sp, #8
    a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    a18e:	f06f 000b 	mvn.w	r0, #11
    a192:	e7f9      	b.n	a188 <gatt_indicate+0x50>
    a194:	00009f5d 	.word	0x00009f5d

0000a198 <gatt_notify>:
{
    a198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a19c:	4680      	mov	r8, r0
    a19e:	468a      	mov	sl, r1
    a1a0:	4691      	mov	r9, r2
    a1a2:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a1a4:	1c9a      	adds	r2, r3, #2
    a1a6:	211b      	movs	r1, #27
    a1a8:	f7ff f9c6 	bl	9538 <bt_att_create_pdu>
	if (!buf) {
    a1ac:	b1d8      	cbz	r0, a1e6 <gatt_notify+0x4e>
    a1ae:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    a1b0:	f100 0708 	add.w	r7, r0, #8
    a1b4:	2102      	movs	r1, #2
    a1b6:	4638      	mov	r0, r7
    a1b8:	f010 fd38 	bl	1ac2c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a1bc:	4605      	mov	r5, r0
    a1be:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    a1c2:	4621      	mov	r1, r4
    a1c4:	4638      	mov	r0, r7
    a1c6:	f010 fd31 	bl	1ac2c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a1ca:	4622      	mov	r2, r4
    a1cc:	4649      	mov	r1, r9
    a1ce:	4628      	mov	r0, r5
    a1d0:	f7f6 f876 	bl	2c0 <memcpy>
    a1d4:	2300      	movs	r3, #0
    a1d6:	4632      	mov	r2, r6
    a1d8:	2104      	movs	r1, #4
    a1da:	4640      	mov	r0, r8
    a1dc:	f7fd febd 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    a1e0:	2000      	movs	r0, #0
    a1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    a1e6:	f06f 000b 	mvn.w	r0, #11
}
    a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a1f0 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1f4:	b082      	sub	sp, #8
    a1f6:	4604      	mov	r4, r0
    a1f8:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a1fa:	2300      	movs	r3, #0
    a1fc:	f88d 3000 	strb.w	r3, [sp]
    a200:	f642 1302 	movw	r3, #10498	; 0x2902
    a204:	f8ad 3002 	strh.w	r3, [sp, #2]
    a208:	4669      	mov	r1, sp
    a20a:	6800      	ldr	r0, [r0, #0]
    a20c:	f7fa f991 	bl	4532 <bt_uuid_cmp>
    a210:	b938      	cbnz	r0, a222 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a212:	68a2      	ldr	r2, [r4, #8]
    a214:	4b29      	ldr	r3, [pc, #164]	; (a2bc <notify_cb+0xcc>)
    a216:	429a      	cmp	r2, r3
    a218:	d012      	beq.n	a240 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    a21a:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    a21c:	b002      	add	sp, #8
    a21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a222:	6820      	ldr	r0, [r4, #0]
    a224:	2300      	movs	r3, #0
    a226:	f88d 3004 	strb.w	r3, [sp, #4]
    a22a:	f642 0303 	movw	r3, #10243	; 0x2803
    a22e:	f8ad 3006 	strh.w	r3, [sp, #6]
    a232:	a901      	add	r1, sp, #4
    a234:	f7fa f97d 	bl	4532 <bt_uuid_cmp>
    a238:	2800      	cmp	r0, #0
    a23a:	d0ef      	beq.n	a21c <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    a23c:	2001      	movs	r0, #1
    a23e:	e7ed      	b.n	a21c <notify_cb+0x2c>
	ccc = attr->user_data;
    a240:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a242:	2400      	movs	r4, #0
    a244:	e01a      	b.n	a27c <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    a246:	6828      	ldr	r0, [r5, #0]
    a248:	4b1d      	ldr	r3, [pc, #116]	; (a2c0 <notify_cb+0xd0>)
    a24a:	4298      	cmp	r0, r3
    a24c:	d115      	bne.n	a27a <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    a24e:	6979      	ldr	r1, [r7, #20]
    a250:	4430      	add	r0, r6
    a252:	f7ff fee3 	bl	a01c <sc_save>
			continue;
    a256:	e010      	b.n	a27a <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a258:	88bb      	ldrh	r3, [r7, #4]
    a25a:	2b02      	cmp	r3, #2
    a25c:	d024      	beq.n	a2a8 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    a25e:	68b9      	ldr	r1, [r7, #8]
    a260:	8a3b      	ldrh	r3, [r7, #16]
    a262:	68fa      	ldr	r2, [r7, #12]
    a264:	8a09      	ldrh	r1, [r1, #16]
    a266:	f7ff ff97 	bl	a198 <gatt_notify>
    a26a:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    a26c:	4640      	mov	r0, r8
    a26e:	f7fc ffb9 	bl	71e4 <bt_conn_unref>
		if (err < 0) {
    a272:	2e00      	cmp	r6, #0
    a274:	db1f      	blt.n	a2b6 <notify_cb+0xc6>
		data->err = 0;
    a276:	2300      	movs	r3, #0
    a278:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    a27a:	3401      	adds	r4, #1
    a27c:	686b      	ldr	r3, [r5, #4]
    a27e:	429c      	cmp	r4, r3
    a280:	d217      	bcs.n	a2b2 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    a282:	6828      	ldr	r0, [r5, #0]
    a284:	0126      	lsls	r6, r4, #4
    a286:	4430      	add	r0, r6
    a288:	8902      	ldrh	r2, [r0, #8]
    a28a:	88bb      	ldrh	r3, [r7, #4]
    a28c:	429a      	cmp	r2, r3
    a28e:	d1f4      	bne.n	a27a <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a290:	3001      	adds	r0, #1
    a292:	f7fc ff4d 	bl	7130 <bt_conn_lookup_addr_le>
		if (!conn) {
    a296:	4680      	mov	r8, r0
    a298:	2800      	cmp	r0, #0
    a29a:	d0d4      	beq.n	a246 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    a29c:	7b03      	ldrb	r3, [r0, #12]
    a29e:	2b03      	cmp	r3, #3
    a2a0:	d0da      	beq.n	a258 <notify_cb+0x68>
			bt_conn_unref(conn);
    a2a2:	f7fc ff9f 	bl	71e4 <bt_conn_unref>
			continue;
    a2a6:	e7e8      	b.n	a27a <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    a2a8:	6979      	ldr	r1, [r7, #20]
    a2aa:	f7ff ff45 	bl	a138 <gatt_indicate>
    a2ae:	4606      	mov	r6, r0
    a2b0:	e7dc      	b.n	a26c <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    a2b2:	2001      	movs	r0, #1
    a2b4:	e7b2      	b.n	a21c <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    a2b6:	2000      	movs	r0, #0
    a2b8:	e7b0      	b.n	a21c <notify_cb+0x2c>
    a2ba:	bf00      	nop
    a2bc:	0000a053 	.word	0x0000a053
    a2c0:	200007a0 	.word	0x200007a0

0000a2c4 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    a2c4:	8981      	ldrh	r1, [r0, #12]
    a2c6:	b909      	cbnz	r1, a2cc <sc_restore+0x8>
    a2c8:	89c3      	ldrh	r3, [r0, #14]
    a2ca:	b163      	cbz	r3, a2e6 <sc_restore+0x22>
{
    a2cc:	b510      	push	{r4, lr}
    a2ce:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    a2d0:	89c2      	ldrh	r2, [r0, #14]
    a2d2:	4805      	ldr	r0, [pc, #20]	; (a2e8 <sc_restore+0x24>)
    a2d4:	f7ff fe70 	bl	9fb8 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    a2d8:	2204      	movs	r2, #4
    a2da:	2100      	movs	r1, #0
    a2dc:	f104 000c 	add.w	r0, r4, #12
    a2e0:	f01f ff76 	bl	2a1d0 <memset>
    a2e4:	bd10      	pop	{r4, pc}
    a2e6:	4770      	bx	lr
    a2e8:	20000748 	.word	0x20000748

0000a2ec <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a2ec:	6882      	ldr	r2, [r0, #8]
    a2ee:	4b16      	ldr	r3, [pc, #88]	; (a348 <connected_cb+0x5c>)
    a2f0:	429a      	cmp	r2, r3
    a2f2:	d001      	beq.n	a2f8 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    a2f4:	2001      	movs	r0, #1
    a2f6:	4770      	bx	lr
{
    a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2fc:	460f      	mov	r7, r1
    a2fe:	4680      	mov	r8, r0
	ccc = attr->user_data;
    a300:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a302:	2400      	movs	r4, #0
    a304:	e004      	b.n	a310 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    a306:	4430      	add	r0, r6
    a308:	f7ff ffdc 	bl	a2c4 <sc_restore>
    a30c:	e019      	b.n	a342 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    a30e:	3401      	adds	r4, #1
    a310:	686b      	ldr	r3, [r5, #4]
    a312:	429c      	cmp	r4, r3
    a314:	d215      	bcs.n	a342 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a316:	6829      	ldr	r1, [r5, #0]
    a318:	0126      	lsls	r6, r4, #4
    a31a:	4431      	add	r1, r6
    a31c:	3101      	adds	r1, #1
    a31e:	4638      	mov	r0, r7
    a320:	f7fc feb0 	bl	7084 <bt_conn_addr_le_cmp>
    a324:	2800      	cmp	r0, #0
    a326:	d1f2      	bne.n	a30e <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    a328:	682b      	ldr	r3, [r5, #0]
    a32a:	4433      	add	r3, r6
    a32c:	891b      	ldrh	r3, [r3, #8]
    a32e:	2b00      	cmp	r3, #0
    a330:	d0ed      	beq.n	a30e <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    a332:	4629      	mov	r1, r5
    a334:	4640      	mov	r0, r8
    a336:	f7ff fdf9 	bl	9f2c <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a33a:	6828      	ldr	r0, [r5, #0]
    a33c:	4b03      	ldr	r3, [pc, #12]	; (a34c <connected_cb+0x60>)
    a33e:	4298      	cmp	r0, r3
    a340:	d0e1      	beq.n	a306 <connected_cb+0x1a>
}
    a342:	2001      	movs	r0, #1
    a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a348:	0000a053 	.word	0x0000a053
    a34c:	200007a0 	.word	0x200007a0

0000a350 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a354:	6882      	ldr	r2, [r0, #8]
    a356:	4b29      	ldr	r3, [pc, #164]	; (a3fc <disconnected_cb+0xac>)
    a358:	429a      	cmp	r2, r3
    a35a:	d002      	beq.n	a362 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    a35c:	2001      	movs	r0, #1
    a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    a362:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a364:	892b      	ldrh	r3, [r5, #8]
    a366:	2b00      	cmp	r3, #0
    a368:	d0f8      	beq.n	a35c <disconnected_cb+0xc>
    a36a:	4688      	mov	r8, r1
    a36c:	4607      	mov	r7, r0
    a36e:	2400      	movs	r4, #0
    a370:	e012      	b.n	a398 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    a372:	f7fc ff37 	bl	71e4 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    a376:	e7f1      	b.n	a35c <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    a378:	f108 0948 	add.w	r9, r8, #72	; 0x48
    a37c:	4648      	mov	r0, r9
    a37e:	f7fc f99f 	bl	66c0 <bt_addr_le_is_bonded>
    a382:	bb28      	cbnz	r0, a3d0 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    a384:	682b      	ldr	r3, [r5, #0]
    a386:	2100      	movs	r1, #0
    a388:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    a38a:	6828      	ldr	r0, [r5, #0]
    a38c:	4430      	add	r0, r6
    a38e:	2202      	movs	r2, #2
    a390:	3008      	adds	r0, #8
    a392:	f01f ff1d 	bl	2a1d0 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    a396:	3401      	adds	r4, #1
    a398:	686b      	ldr	r3, [r5, #4]
    a39a:	429c      	cmp	r4, r3
    a39c:	d220      	bcs.n	a3e0 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    a39e:	6829      	ldr	r1, [r5, #0]
    a3a0:	0126      	lsls	r6, r4, #4
    a3a2:	4431      	add	r1, r6
    a3a4:	890b      	ldrh	r3, [r1, #8]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d0f5      	beq.n	a396 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a3aa:	3101      	adds	r1, #1
    a3ac:	4640      	mov	r0, r8
    a3ae:	f7fc fe69 	bl	7084 <bt_conn_addr_le_cmp>
    a3b2:	2800      	cmp	r0, #0
    a3b4:	d0e0      	beq.n	a378 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a3b6:	6828      	ldr	r0, [r5, #0]
    a3b8:	4430      	add	r0, r6
    a3ba:	3001      	adds	r0, #1
    a3bc:	f7fc feb8 	bl	7130 <bt_conn_lookup_addr_le>
			if (tmp) {
    a3c0:	2800      	cmp	r0, #0
    a3c2:	d0e8      	beq.n	a396 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    a3c4:	7b02      	ldrb	r2, [r0, #12]
    a3c6:	2a03      	cmp	r2, #3
    a3c8:	d0d3      	beq.n	a372 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    a3ca:	f7fc ff0b 	bl	71e4 <bt_conn_unref>
    a3ce:	e7e2      	b.n	a396 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    a3d0:	6828      	ldr	r0, [r5, #0]
    a3d2:	4430      	add	r0, r6
    a3d4:	2207      	movs	r2, #7
    a3d6:	4649      	mov	r1, r9
    a3d8:	3001      	adds	r0, #1
    a3da:	f7f5 ff71 	bl	2c0 <memcpy>
    a3de:	e7da      	b.n	a396 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    a3e0:	2202      	movs	r2, #2
    a3e2:	2100      	movs	r1, #0
    a3e4:	f105 0008 	add.w	r0, r5, #8
    a3e8:	f01f fef2 	bl	2a1d0 <memset>
	if (ccc->cfg_changed) {
    a3ec:	68eb      	ldr	r3, [r5, #12]
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d0b4      	beq.n	a35c <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    a3f2:	8929      	ldrh	r1, [r5, #8]
    a3f4:	4638      	mov	r0, r7
    a3f6:	4798      	blx	r3
    a3f8:	e7b0      	b.n	a35c <disconnected_cb+0xc>
    a3fa:	bf00      	nop
    a3fc:	0000a053 	.word	0x0000a053

0000a400 <bt_gatt_init>:
{
    a400:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    a402:	4805      	ldr	r0, [pc, #20]	; (a418 <bt_gatt_init+0x18>)
    a404:	f7ff fd3c 	bl	9e80 <gatt_register>
	gatt_register(&gatt_svc);
    a408:	4804      	ldr	r0, [pc, #16]	; (a41c <bt_gatt_init+0x1c>)
    a40a:	f7ff fd39 	bl	9e80 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a40e:	4904      	ldr	r1, [pc, #16]	; (a420 <bt_gatt_init+0x20>)
    a410:	4804      	ldr	r0, [pc, #16]	; (a424 <bt_gatt_init+0x24>)
    a412:	f01f fcdb 	bl	29dcc <k_delayed_work_init>
    a416:	bd08      	pop	{r3, pc}
    a418:	2000bad4 	.word	0x2000bad4
    a41c:	2000bb30 	.word	0x2000bb30
    a420:	0000a6f5 	.word	0x0000a6f5
    a424:	20000774 	.word	0x20000774

0000a428 <bt_gatt_service_register>:
{
    a428:	b510      	push	{r4, lr}
    a42a:	b082      	sub	sp, #8
    a42c:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a42e:	6803      	ldr	r3, [r0, #0]
    a430:	6818      	ldr	r0, [r3, #0]
    a432:	2300      	movs	r3, #0
    a434:	f88d 3000 	strb.w	r3, [sp]
    a438:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a43c:	f8ad 3002 	strh.w	r3, [sp, #2]
    a440:	4669      	mov	r1, sp
    a442:	f7fa f876 	bl	4532 <bt_uuid_cmp>
    a446:	b300      	cbz	r0, a48a <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a448:	6823      	ldr	r3, [r4, #0]
    a44a:	6818      	ldr	r0, [r3, #0]
    a44c:	2300      	movs	r3, #0
    a44e:	f88d 3004 	strb.w	r3, [sp, #4]
    a452:	f641 0301 	movw	r3, #6145	; 0x1801
    a456:	f8ad 3006 	strh.w	r3, [sp, #6]
    a45a:	a901      	add	r1, sp, #4
    a45c:	f7fa f869 	bl	4532 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a460:	b1b0      	cbz	r0, a490 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    a462:	4620      	mov	r0, r4
    a464:	f7ff fd0c 	bl	9e80 <gatt_register>
	if (err < 0) {
    a468:	2800      	cmp	r0, #0
    a46a:	db0c      	blt.n	a486 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a46c:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    a46e:	88a2      	ldrh	r2, [r4, #4]
    a470:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a474:	0093      	lsls	r3, r2, #2
    a476:	3b14      	subs	r3, #20
    a478:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a47a:	8a1a      	ldrh	r2, [r3, #16]
    a47c:	8a09      	ldrh	r1, [r1, #16]
    a47e:	4806      	ldr	r0, [pc, #24]	; (a498 <bt_gatt_service_register+0x70>)
    a480:	f7ff fd9a 	bl	9fb8 <sc_indicate>
	return 0;
    a484:	2000      	movs	r0, #0
}
    a486:	b002      	add	sp, #8
    a488:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a48a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a48e:	e7fa      	b.n	a486 <bt_gatt_service_register+0x5e>
    a490:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a494:	e7f7      	b.n	a486 <bt_gatt_service_register+0x5e>
    a496:	bf00      	nop
    a498:	20000748 	.word	0x20000748

0000a49c <bt_gatt_attr_read>:
{
    a49c:	b510      	push	{r4, lr}
    a49e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a4a2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    a4a6:	42a1      	cmp	r1, r4
    a4a8:	d80c      	bhi.n	a4c4 <bt_gatt_attr_read+0x28>
    a4aa:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    a4ac:	1a64      	subs	r4, r4, r1
    a4ae:	42a3      	cmp	r3, r4
    a4b0:	bfa8      	it	ge
    a4b2:	4623      	movge	r3, r4
    a4b4:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    a4b6:	4622      	mov	r2, r4
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	4419      	add	r1, r3
    a4bc:	f7f5 ff00 	bl	2c0 <memcpy>
}
    a4c0:	4620      	mov	r0, r4
    a4c2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a4c4:	f06f 0406 	mvn.w	r4, #6
    a4c8:	e7fa      	b.n	a4c0 <bt_gatt_attr_read+0x24>

0000a4ca <read_appearance>:
{
    a4ca:	b530      	push	{r4, r5, lr}
    a4cc:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    a4ce:	ac06      	add	r4, sp, #24
    a4d0:	2500      	movs	r5, #0
    a4d2:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    a4d6:	2502      	movs	r5, #2
    a4d8:	9502      	str	r5, [sp, #8]
    a4da:	9401      	str	r4, [sp, #4]
    a4dc:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    a4e0:	9400      	str	r4, [sp, #0]
    a4e2:	f7ff ffdb 	bl	a49c <bt_gatt_attr_read>
}
    a4e6:	b007      	add	sp, #28
    a4e8:	bd30      	pop	{r4, r5, pc}
	...

0000a4ec <read_name>:
{
    a4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4f0:	b084      	sub	sp, #16
    a4f2:	4605      	mov	r5, r0
    a4f4:	460e      	mov	r6, r1
    a4f6:	4617      	mov	r7, r2
    a4f8:	4698      	mov	r8, r3
				 strlen(gap_name));
    a4fa:	4c09      	ldr	r4, [pc, #36]	; (a520 <read_name+0x34>)
    a4fc:	4620      	mov	r0, r4
    a4fe:	f7f6 f8ff 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    a502:	b280      	uxth	r0, r0
    a504:	9002      	str	r0, [sp, #8]
    a506:	9401      	str	r4, [sp, #4]
    a508:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a50c:	9300      	str	r3, [sp, #0]
    a50e:	4643      	mov	r3, r8
    a510:	463a      	mov	r2, r7
    a512:	4631      	mov	r1, r6
    a514:	4628      	mov	r0, r5
    a516:	f7ff ffc1 	bl	a49c <bt_gatt_attr_read>
}
    a51a:	b004      	add	sp, #16
    a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a520:	00030f44 	.word	0x00030f44

0000a524 <bt_gatt_attr_read_service>:
{
    a524:	b570      	push	{r4, r5, r6, lr}
    a526:	b086      	sub	sp, #24
    a528:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    a52c:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    a52e:	7826      	ldrb	r6, [r4, #0]
    a530:	b146      	cbz	r6, a544 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    a532:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a534:	2610      	movs	r6, #16
    a536:	9602      	str	r6, [sp, #8]
    a538:	9401      	str	r4, [sp, #4]
    a53a:	9500      	str	r5, [sp, #0]
    a53c:	f7ff ffae 	bl	a49c <bt_gatt_attr_read>
}
    a540:	b006      	add	sp, #24
    a542:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    a544:	8866      	ldrh	r6, [r4, #2]
    a546:	ac06      	add	r4, sp, #24
    a548:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a54c:	2602      	movs	r6, #2
    a54e:	9602      	str	r6, [sp, #8]
    a550:	9401      	str	r4, [sp, #4]
    a552:	9500      	str	r5, [sp, #0]
    a554:	f7ff ffa2 	bl	a49c <bt_gatt_attr_read>
    a558:	e7f2      	b.n	a540 <bt_gatt_attr_read_service+0x1c>

0000a55a <bt_gatt_attr_read_ccc>:
{
    a55a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a55e:	b086      	sub	sp, #24
    a560:	4607      	mov	r7, r0
    a562:	4688      	mov	r8, r1
    a564:	4691      	mov	r9, r2
    a566:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a568:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a56a:	2400      	movs	r4, #0
    a56c:	686b      	ldr	r3, [r5, #4]
    a56e:	429c      	cmp	r4, r3
    a570:	d20e      	bcs.n	a590 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a572:	6829      	ldr	r1, [r5, #0]
    a574:	0126      	lsls	r6, r4, #4
    a576:	4431      	add	r1, r6
    a578:	3101      	adds	r1, #1
    a57a:	4638      	mov	r0, r7
    a57c:	f7fc fd82 	bl	7084 <bt_conn_addr_le_cmp>
    a580:	b108      	cbz	r0, a586 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a582:	3401      	adds	r4, #1
    a584:	e7f2      	b.n	a56c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    a586:	682b      	ldr	r3, [r5, #0]
    a588:	441e      	add	r6, r3
    a58a:	8933      	ldrh	r3, [r6, #8]
    a58c:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    a590:	686b      	ldr	r3, [r5, #4]
    a592:	429c      	cmp	r4, r3
    a594:	d010      	beq.n	a5b8 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    a596:	2302      	movs	r3, #2
    a598:	9302      	str	r3, [sp, #8]
    a59a:	f10d 0316 	add.w	r3, sp, #22
    a59e:	9301      	str	r3, [sp, #4]
    a5a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a5a4:	9300      	str	r3, [sp, #0]
    a5a6:	4653      	mov	r3, sl
    a5a8:	464a      	mov	r2, r9
    a5aa:	4641      	mov	r1, r8
    a5ac:	4638      	mov	r0, r7
    a5ae:	f7ff ff75 	bl	a49c <bt_gatt_attr_read>
}
    a5b2:	b006      	add	sp, #24
    a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    a5b8:	2300      	movs	r3, #0
    a5ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    a5be:	e7ea      	b.n	a596 <bt_gatt_attr_read_ccc+0x3c>

0000a5c0 <bt_gatt_foreach_attr>:
{
    a5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5c4:	4606      	mov	r6, r0
    a5c6:	460f      	mov	r7, r1
    a5c8:	4690      	mov	r8, r2
    a5ca:	4699      	mov	r9, r3
	return list->head;
    a5cc:	4b15      	ldr	r3, [pc, #84]	; (a624 <bt_gatt_foreach_attr+0x64>)
    a5ce:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a5d0:	b10d      	cbz	r5, a5d6 <bt_gatt_foreach_attr+0x16>
    a5d2:	3d08      	subs	r5, #8
    a5d4:	e01e      	b.n	a614 <bt_gatt_foreach_attr+0x54>
    a5d6:	2500      	movs	r5, #0
    a5d8:	e01c      	b.n	a614 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    a5da:	3401      	adds	r4, #1
    a5dc:	88ab      	ldrh	r3, [r5, #4]
    a5de:	429c      	cmp	r4, r3
    a5e0:	da0f      	bge.n	a602 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a5e2:	6828      	ldr	r0, [r5, #0]
    a5e4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a5e8:	0093      	lsls	r3, r2, #2
    a5ea:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    a5ec:	8a03      	ldrh	r3, [r0, #16]
    a5ee:	42b3      	cmp	r3, r6
    a5f0:	d3f3      	bcc.n	a5da <bt_gatt_foreach_attr+0x1a>
    a5f2:	42bb      	cmp	r3, r7
    a5f4:	d8f1      	bhi.n	a5da <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a5f6:	4649      	mov	r1, r9
    a5f8:	47c0      	blx	r8
    a5fa:	2800      	cmp	r0, #0
    a5fc:	d1ed      	bne.n	a5da <bt_gatt_foreach_attr+0x1a>
    a5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a602:	f115 0308 	adds.w	r3, r5, #8
    a606:	d009      	beq.n	a61c <bt_gatt_foreach_attr+0x5c>
	return node->next;
    a608:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a60a:	b14a      	cbz	r2, a620 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a60c:	b103      	cbz	r3, a610 <bt_gatt_foreach_attr+0x50>
	return node->next;
    a60e:	68ab      	ldr	r3, [r5, #8]
    a610:	f1a3 0508 	sub.w	r5, r3, #8
    a614:	2d00      	cmp	r5, #0
    a616:	d0f2      	beq.n	a5fe <bt_gatt_foreach_attr+0x3e>
    a618:	2400      	movs	r4, #0
    a61a:	e7df      	b.n	a5dc <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a61c:	461a      	mov	r2, r3
    a61e:	e7f4      	b.n	a60a <bt_gatt_foreach_attr+0x4a>
    a620:	2500      	movs	r5, #0
    a622:	e7f7      	b.n	a614 <bt_gatt_foreach_attr+0x54>
    a624:	20000740 	.word	0x20000740

0000a628 <bt_gatt_attr_next>:
{
    a628:	b500      	push	{lr}
    a62a:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    a62c:	ab02      	add	r3, sp, #8
    a62e:	2200      	movs	r2, #0
    a630:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    a634:	8a00      	ldrh	r0, [r0, #16]
    a636:	3001      	adds	r0, #1
    a638:	b280      	uxth	r0, r0
    a63a:	4a04      	ldr	r2, [pc, #16]	; (a64c <bt_gatt_attr_next+0x24>)
    a63c:	4601      	mov	r1, r0
    a63e:	f7ff ffbf 	bl	a5c0 <bt_gatt_foreach_attr>
}
    a642:	9801      	ldr	r0, [sp, #4]
    a644:	b003      	add	sp, #12
    a646:	f85d fb04 	ldr.w	pc, [sp], #4
    a64a:	bf00      	nop
    a64c:	00009f27 	.word	0x00009f27

0000a650 <bt_gatt_attr_read_chrc>:
{
    a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a654:	b08a      	sub	sp, #40	; 0x28
    a656:	4606      	mov	r6, r0
    a658:	460c      	mov	r4, r1
    a65a:	4617      	mov	r7, r2
    a65c:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    a65e:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    a660:	792b      	ldrb	r3, [r5, #4]
    a662:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    a666:	4608      	mov	r0, r1
    a668:	f7ff ffde 	bl	a628 <bt_gatt_attr_next>
	if (!next) {
    a66c:	b1c0      	cbz	r0, a6a0 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    a66e:	8a03      	ldrh	r3, [r0, #16]
    a670:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    a674:	6829      	ldr	r1, [r5, #0]
    a676:	780b      	ldrb	r3, [r1, #0]
    a678:	b9c3      	cbnz	r3, a6ac <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    a67a:	884b      	ldrh	r3, [r1, #2]
    a67c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    a680:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    a682:	9302      	str	r3, [sp, #8]
    a684:	ab05      	add	r3, sp, #20
    a686:	9301      	str	r3, [sp, #4]
    a688:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a68c:	9300      	str	r3, [sp, #0]
    a68e:	4643      	mov	r3, r8
    a690:	463a      	mov	r2, r7
    a692:	4621      	mov	r1, r4
    a694:	4630      	mov	r0, r6
    a696:	f7ff ff01 	bl	a49c <bt_gatt_attr_read>
}
    a69a:	b00a      	add	sp, #40	; 0x28
    a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    a6a0:	2300      	movs	r3, #0
    a6a2:	f88d 3015 	strb.w	r3, [sp, #21]
    a6a6:	f88d 3016 	strb.w	r3, [sp, #22]
    a6aa:	e7e3      	b.n	a674 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    a6ac:	2210      	movs	r2, #16
    a6ae:	3101      	adds	r1, #1
    a6b0:	f10d 0017 	add.w	r0, sp, #23
    a6b4:	f7f5 fe04 	bl	2c0 <memcpy>
		value_len += 16;
    a6b8:	2313      	movs	r3, #19
    a6ba:	e7e2      	b.n	a682 <bt_gatt_attr_read_chrc+0x32>

0000a6bc <bt_gatt_indicate>:
{
    a6bc:	b500      	push	{lr}
    a6be:	b087      	sub	sp, #28
	if (conn) {
    a6c0:	b120      	cbz	r0, a6cc <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    a6c2:	f7ff fd39 	bl	a138 <gatt_indicate>
}
    a6c6:	b007      	add	sp, #28
    a6c8:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    a6cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a6d0:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    a6d2:	2302      	movs	r3, #2
    a6d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    a6d8:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a6da:	6988      	ldr	r0, [r1, #24]
    a6dc:	466b      	mov	r3, sp
    a6de:	4a04      	ldr	r2, [pc, #16]	; (a6f0 <bt_gatt_indicate+0x34>)
    a6e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a6e4:	8a00      	ldrh	r0, [r0, #16]
    a6e6:	f7ff ff6b 	bl	a5c0 <bt_gatt_foreach_attr>
	return nfy.err;
    a6ea:	9800      	ldr	r0, [sp, #0]
    a6ec:	e7eb      	b.n	a6c6 <bt_gatt_indicate+0xa>
    a6ee:	bf00      	nop
    a6f0:	0000a1f1 	.word	0x0000a1f1

0000a6f4 <sc_process>:
{
    a6f4:	b510      	push	{r4, lr}
    a6f6:	b082      	sub	sp, #8
    a6f8:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a6fa:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    a6fe:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    a702:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    a706:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a70a:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    a70e:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a712:	f3bf 8f5b 	dmb	ish
    a716:	e854 2f00 	ldrex	r2, [r4]
    a71a:	f022 0201 	bic.w	r2, r2, #1
    a71e:	e844 2000 	strex	r0, r2, [r4]
    a722:	2800      	cmp	r0, #0
    a724:	d1f7      	bne.n	a716 <sc_process+0x22>
    a726:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    a72a:	2000      	movs	r0, #0
    a72c:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    a730:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    a734:	4a0e      	ldr	r2, [pc, #56]	; (a770 <sc_process+0x7c>)
    a736:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    a73a:	4a0e      	ldr	r2, [pc, #56]	; (a774 <sc_process+0x80>)
    a73c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    a740:	aa01      	add	r2, sp, #4
    a742:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    a746:	2204      	movs	r2, #4
    a748:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a74c:	f7ff ffb6 	bl	a6bc <bt_gatt_indicate>
    a750:	b108      	cbz	r0, a756 <sc_process+0x62>
}
    a752:	b002      	add	sp, #8
    a754:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a756:	f3bf 8f5b 	dmb	ish
    a75a:	e854 3f00 	ldrex	r3, [r4]
    a75e:	f043 0302 	orr.w	r3, r3, #2
    a762:	e844 3200 	strex	r2, r3, [r4]
    a766:	2a00      	cmp	r2, #0
    a768:	d1f7      	bne.n	a75a <sc_process+0x66>
    a76a:	f3bf 8f5b 	dmb	ish
    a76e:	e7f0      	b.n	a752 <sc_process+0x5e>
    a770:	2000bb08 	.word	0x2000bb08
    a774:	00009f6d 	.word	0x00009f6d

0000a778 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    a778:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    a77a:	4603      	mov	r3, r0
    a77c:	4a03      	ldr	r2, [pc, #12]	; (a78c <bt_gatt_connected+0x14>)
    a77e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a782:	2001      	movs	r0, #1
    a784:	f7ff ff1c 	bl	a5c0 <bt_gatt_foreach_attr>
    a788:	bd08      	pop	{r3, pc}
    a78a:	bf00      	nop
    a78c:	0000a2ed 	.word	0x0000a2ed

0000a790 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a790:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a792:	4603      	mov	r3, r0
    a794:	4a03      	ldr	r2, [pc, #12]	; (a7a4 <bt_gatt_disconnected+0x14>)
    a796:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a79a:	2001      	movs	r0, #1
    a79c:	f7ff ff10 	bl	a5c0 <bt_gatt_foreach_attr>
    a7a0:	bd08      	pop	{r3, pc}
    a7a2:	bf00      	nop
    a7a4:	0000a351 	.word	0x0000a351

0000a7a8 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    a7a8:	4b11      	ldr	r3, [pc, #68]	; (a7f0 <get_io_capa+0x48>)
    a7aa:	681b      	ldr	r3, [r3, #0]
    a7ac:	b1db      	cbz	r3, a7e6 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a7ae:	681a      	ldr	r2, [r3, #0]
    a7b0:	b152      	cbz	r2, a7c8 <get_io_capa+0x20>
    a7b2:	6859      	ldr	r1, [r3, #4]
    a7b4:	b141      	cbz	r1, a7c8 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a7b6:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a7b8:	b109      	cbz	r1, a7be <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a7ba:	2004      	movs	r0, #4
    a7bc:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a7be:	490d      	ldr	r1, [pc, #52]	; (a7f4 <get_io_capa+0x4c>)
    a7c0:	7809      	ldrb	r1, [r1, #0]
    a7c2:	b909      	cbnz	r1, a7c8 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a7c4:	2004      	movs	r0, #4
    a7c6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    a7c8:	490a      	ldr	r1, [pc, #40]	; (a7f4 <get_io_capa+0x4c>)
    a7ca:	7809      	ldrb	r1, [r1, #0]
    a7cc:	b121      	cbz	r1, a7d8 <get_io_capa+0x30>
    a7ce:	b11a      	cbz	r2, a7d8 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    a7d0:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    a7d2:	b109      	cbz	r1, a7d8 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    a7d4:	2001      	movs	r0, #1
    a7d6:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    a7d8:	685b      	ldr	r3, [r3, #4]
    a7da:	b10b      	cbz	r3, a7e0 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    a7dc:	2002      	movs	r0, #2
    a7de:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    a7e0:	b11a      	cbz	r2, a7ea <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    a7e2:	2000      	movs	r0, #0
    a7e4:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    a7e6:	2003      	movs	r0, #3
    a7e8:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    a7ea:	2003      	movs	r0, #3
}
    a7ec:	4770      	bx	lr
    a7ee:	bf00      	nop
    a7f0:	200029b0 	.word	0x200029b0
    a7f4:	200009a8 	.word	0x200009a8

0000a7f8 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a7f8:	2904      	cmp	r1, #4
    a7fa:	d811      	bhi.n	a820 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a7fc:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a800:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a804:	4313      	orrs	r3, r2
    a806:	f013 0f04 	tst.w	r3, #4
    a80a:	d00b      	beq.n	a824 <get_pair_method+0x2c>
{
    a80c:	b510      	push	{r4, lr}
    a80e:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    a810:	f7ff ffca 	bl	a7a8 <get_io_capa>
    a814:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a818:	4c03      	ldr	r4, [pc, #12]	; (a828 <get_pair_method+0x30>)
    a81a:	4421      	add	r1, r4
    a81c:	5c08      	ldrb	r0, [r1, r0]
    a81e:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    a820:	2000      	movs	r0, #0
    a822:	4770      	bx	lr
		return JUST_WORKS;
    a824:	2000      	movs	r0, #0
    a826:	4770      	bx	lr
    a828:	00030f68 	.word	0x00030f68

0000a82c <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    a82c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    a830:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    a834:	4290      	cmp	r0, r2
    a836:	bf28      	it	cs
    a838:	4610      	movcs	r0, r2
    a83a:	4770      	bx	lr

0000a83c <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    a83c:	b430      	push	{r4, r5}
	size_t len = 16;
    a83e:	2310      	movs	r3, #16

	while (len--) {
    a840:	e007      	b.n	a852 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    a842:	7803      	ldrb	r3, [r0, #0]
    a844:	780d      	ldrb	r5, [r1, #0]
    a846:	406b      	eors	r3, r5
    a848:	7013      	strb	r3, [r2, #0]
	while (len--) {
    a84a:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    a84c:	3201      	adds	r2, #1
    a84e:	3101      	adds	r1, #1
    a850:	3001      	adds	r0, #1
	while (len--) {
    a852:	1e5c      	subs	r4, r3, #1
    a854:	2b00      	cmp	r3, #0
    a856:	d1f4      	bne.n	a842 <xor_128+0x6>
	}
}
    a858:	bc30      	pop	{r4, r5}
    a85a:	4770      	bx	lr

0000a85c <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a85c:	2904      	cmp	r1, #4
    a85e:	d819      	bhi.n	a894 <legacy_get_pair_method+0x38>
{
    a860:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a862:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a866:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a86a:	4313      	orrs	r3, r2
    a86c:	f013 0f04 	tst.w	r3, #4
    a870:	d012      	beq.n	a898 <legacy_get_pair_method+0x3c>
    a872:	460c      	mov	r4, r1
    a874:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    a876:	f7ff ff97 	bl	a7a8 <get_io_capa>
    a87a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a87e:	4c08      	ldr	r4, [pc, #32]	; (a8a0 <legacy_get_pair_method+0x44>)
    a880:	4421      	add	r1, r4
    a882:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    a884:	2804      	cmp	r0, #4
    a886:	d000      	beq.n	a88a <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    a888:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a88a:	682b      	ldr	r3, [r5, #0]
    a88c:	78db      	ldrb	r3, [r3, #3]
    a88e:	b92b      	cbnz	r3, a89c <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    a890:	2002      	movs	r0, #2
    a892:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    a894:	2000      	movs	r0, #0
    a896:	4770      	bx	lr
		return JUST_WORKS;
    a898:	2000      	movs	r0, #0
    a89a:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    a89c:	2001      	movs	r0, #1
    a89e:	e7f3      	b.n	a888 <legacy_get_pair_method+0x2c>
    a8a0:	00030f4c 	.word	0x00030f4c

0000a8a4 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    a8a4:	b510      	push	{r4, lr}
	if (sc_supported) {
    a8a6:	4b09      	ldr	r3, [pc, #36]	; (a8cc <get_auth+0x28>)
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	b143      	cbz	r3, a8be <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    a8ac:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    a8b0:	f7ff ff7a 	bl	a7a8 <get_io_capa>
    a8b4:	2803      	cmp	r0, #3
    a8b6:	d005      	beq.n	a8c4 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    a8b8:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    a8bc:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    a8be:	f000 0407 	and.w	r4, r0, #7
    a8c2:	e7f5      	b.n	a8b0 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    a8c4:	f004 000b 	and.w	r0, r4, #11
    a8c8:	bd10      	pop	{r4, pc}
    a8ca:	bf00      	nop
    a8cc:	200009a8 	.word	0x200009a8

0000a8d0 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    a8d0:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    a8d2:	7a43      	ldrb	r3, [r0, #9]
    a8d4:	3b01      	subs	r3, #1
    a8d6:	2b03      	cmp	r3, #3
    a8d8:	d818      	bhi.n	a90c <sec_level_reachable+0x3c>
    a8da:	e8df f003 	tbb	[pc, r3]
    a8de:	0202      	.short	0x0202
    a8e0:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    a8e2:	2001      	movs	r0, #1
    a8e4:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    a8e6:	f7ff ff5f 	bl	a7a8 <get_io_capa>
    a8ea:	3803      	subs	r0, #3
    a8ec:	bf18      	it	ne
    a8ee:	2001      	movne	r0, #1
    a8f0:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    a8f2:	f7ff ff59 	bl	a7a8 <get_io_capa>
    a8f6:	2803      	cmp	r0, #3
    a8f8:	d004      	beq.n	a904 <sec_level_reachable+0x34>
    a8fa:	4b05      	ldr	r3, [pc, #20]	; (a910 <sec_level_reachable+0x40>)
    a8fc:	781b      	ldrb	r3, [r3, #0]
    a8fe:	b91b      	cbnz	r3, a908 <sec_level_reachable+0x38>
    a900:	2000      	movs	r0, #0
    a902:	bd08      	pop	{r3, pc}
    a904:	2000      	movs	r0, #0
    a906:	bd08      	pop	{r3, pc}
    a908:	2001      	movs	r0, #1
    a90a:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    a90c:	2000      	movs	r0, #0
	}
}
    a90e:	bd08      	pop	{r3, pc}
    a910:	200009a8 	.word	0x200009a8

0000a914 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a914:	2000      	movs	r0, #0
    a916:	b110      	cbz	r0, a91e <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    a918:	f06f 000b 	mvn.w	r0, #11
}
    a91c:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    a91e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a922:	fb03 f300 	mul.w	r3, r3, r0
    a926:	4a07      	ldr	r2, [pc, #28]	; (a944 <bt_smp_accept+0x30>)
    a928:	58d3      	ldr	r3, [r2, r3]
    a92a:	b10b      	cbz	r3, a930 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a92c:	3001      	adds	r0, #1
    a92e:	e7f2      	b.n	a916 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    a930:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a934:	4a03      	ldr	r2, [pc, #12]	; (a944 <bt_smp_accept+0x30>)
    a936:	fb03 2300 	mla	r3, r3, r0, r2
    a93a:	4a03      	ldr	r2, [pc, #12]	; (a948 <bt_smp_accept+0x34>)
    a93c:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    a93e:	600b      	str	r3, [r1, #0]
		return 0;
    a940:	4770      	bx	lr
    a942:	bf00      	nop
    a944:	200007c0 	.word	0x200007c0
    a948:	2000bb48 	.word	0x2000bb48

0000a94c <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    a94c:	4b04      	ldr	r3, [pc, #16]	; (a960 <le_sc_supported+0x14>)
    a94e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a952:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    a956:	2806      	cmp	r0, #6
    a958:	bf14      	ite	ne
    a95a:	2000      	movne	r0, #0
    a95c:	2001      	moveq	r0, #1
    a95e:	4770      	bx	lr
    a960:	2000b878 	.word	0x2000b878

0000a964 <smp_chan_get>:
{
    a964:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    a966:	2106      	movs	r1, #6
    a968:	f7fd fd18 	bl	839c <bt_l2cap_le_lookup_rx_cid>
}
    a96c:	bd08      	pop	{r3, pc}

0000a96e <smp_create_pdu>:
{
    a96e:	b538      	push	{r3, r4, r5, lr}
    a970:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    a972:	2100      	movs	r1, #0
    a974:	4608      	mov	r0, r1
    a976:	f7fd fa58 	bl	7e2a <bt_l2cap_create_pdu>
    a97a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    a97c:	2101      	movs	r1, #1
    a97e:	3008      	adds	r0, #8
    a980:	f010 f954 	bl	1ac2c <net_buf_simple_add>
	hdr->code = op;
    a984:	7005      	strb	r5, [r0, #0]
}
    a986:	4620      	mov	r0, r4
    a988:	bd38      	pop	{r3, r4, r5, pc}

0000a98a <smp_init>:
{
    a98a:	b510      	push	{r4, lr}
    a98c:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    a98e:	22e0      	movs	r2, #224	; 0xe0
    a990:	2100      	movs	r1, #0
    a992:	309c      	adds	r0, #156	; 0x9c
    a994:	f01f fc1c 	bl	2a1d0 <memset>
	if (bt_rand(smp->prnd, 16)) {
    a998:	2110      	movs	r1, #16
    a99a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a99e:	f006 fdcf 	bl	11540 <bt_rand>
    a9a2:	b110      	cbz	r0, a9aa <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    a9a4:	2308      	movs	r3, #8
}
    a9a6:	4618      	mov	r0, r3
    a9a8:	bd10      	pop	{r4, pc}
    a9aa:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a9ac:	349c      	adds	r4, #156	; 0x9c
    a9ae:	f3bf 8f5b 	dmb	ish
    a9b2:	e854 2f00 	ldrex	r2, [r4]
    a9b6:	f042 0220 	orr.w	r2, r2, #32
    a9ba:	e844 2100 	strex	r1, r2, [r4]
    a9be:	2900      	cmp	r1, #0
    a9c0:	d1f7      	bne.n	a9b2 <smp_init+0x28>
    a9c2:	f3bf 8f5b 	dmb	ish
	return 0;
    a9c6:	e7ee      	b.n	a9a6 <smp_init+0x1c>

0000a9c8 <display_passkey>:
{
    a9c8:	b538      	push	{r3, r4, r5, lr}
    a9ca:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a9cc:	2104      	movs	r1, #4
    a9ce:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    a9d2:	f006 fdb5 	bl	11540 <bt_rand>
    a9d6:	b108      	cbz	r0, a9dc <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    a9d8:	2008      	movs	r0, #8
}
    a9da:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    a9dc:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    a9e0:	4909      	ldr	r1, [pc, #36]	; (aa08 <display_passkey+0x40>)
    a9e2:	fba1 2103 	umull	r2, r1, r1, r3
    a9e6:	0c89      	lsrs	r1, r1, #18
    a9e8:	4a08      	ldr	r2, [pc, #32]	; (aa0c <display_passkey+0x44>)
    a9ea:	fb02 3111 	mls	r1, r2, r1, r3
    a9ee:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    a9f2:	2500      	movs	r5, #0
    a9f4:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a9f8:	4b05      	ldr	r3, [pc, #20]	; (aa10 <display_passkey+0x48>)
    a9fa:	681b      	ldr	r3, [r3, #0]
    a9fc:	681b      	ldr	r3, [r3, #0]
    a9fe:	6820      	ldr	r0, [r4, #0]
    aa00:	4798      	blx	r3
	return 0;
    aa02:	4628      	mov	r0, r5
    aa04:	bd38      	pop	{r3, r4, r5, pc}
    aa06:	bf00      	nop
    aa08:	431bde83 	.word	0x431bde83
    aa0c:	000f4240 	.word	0x000f4240
    aa10:	200029b0 	.word	0x200029b0

0000aa14 <smp_send>:
{
    aa14:	b510      	push	{r4, lr}
    aa16:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    aa18:	4613      	mov	r3, r2
    aa1a:	460a      	mov	r2, r1
    aa1c:	2106      	movs	r1, #6
    aa1e:	6800      	ldr	r0, [r0, #0]
    aa20:	f7fd fa9b 	bl	7f5a <bt_l2cap_send_cb>
    aa24:	f247 5230 	movw	r2, #30000	; 0x7530
    aa28:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    aa2c:	4801      	ldr	r0, [pc, #4]	; (aa34 <smp_send+0x20>)
    aa2e:	f01f fa45 	bl	29ebc <k_delayed_work_submit_to_queue>
    aa32:	bd10      	pop	{r4, pc}
    aa34:	20002b78 	.word	0x20002b78

0000aa38 <sc_smp_send_dhkey_check>:
{
    aa38:	b570      	push	{r4, r5, r6, lr}
    aa3a:	4604      	mov	r4, r0
    aa3c:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    aa3e:	2210      	movs	r2, #16
    aa40:	210d      	movs	r1, #13
    aa42:	6800      	ldr	r0, [r0, #0]
    aa44:	f7ff ff93 	bl	a96e <smp_create_pdu>
	if (!buf) {
    aa48:	b178      	cbz	r0, aa6a <sc_smp_send_dhkey_check+0x32>
    aa4a:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    aa4c:	2110      	movs	r1, #16
    aa4e:	3008      	adds	r0, #8
    aa50:	f010 f8ec 	bl	1ac2c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    aa54:	2210      	movs	r2, #16
    aa56:	4631      	mov	r1, r6
    aa58:	f7f5 fc32 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    aa5c:	2200      	movs	r2, #0
    aa5e:	4629      	mov	r1, r5
    aa60:	4620      	mov	r0, r4
    aa62:	f7ff ffd7 	bl	aa14 <smp_send>
	return 0;
    aa66:	2000      	movs	r0, #0
    aa68:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aa6a:	2008      	movs	r0, #8
}
    aa6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000aa70 <sc_send_public_key>:
{
    aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa72:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    aa74:	2240      	movs	r2, #64	; 0x40
    aa76:	210c      	movs	r1, #12
    aa78:	6800      	ldr	r0, [r0, #0]
    aa7a:	f7ff ff78 	bl	a96e <smp_create_pdu>
	if (!req_buf) {
    aa7e:	b1b0      	cbz	r0, aaae <sc_send_public_key+0x3e>
    aa80:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    aa82:	2140      	movs	r1, #64	; 0x40
    aa84:	3008      	adds	r0, #8
    aa86:	f010 f8d1 	bl	1ac2c <net_buf_simple_add>
    aa8a:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    aa8c:	4e09      	ldr	r6, [pc, #36]	; (aab4 <sc_send_public_key+0x44>)
    aa8e:	2220      	movs	r2, #32
    aa90:	4631      	mov	r1, r6
    aa92:	f7f5 fc15 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    aa96:	2220      	movs	r2, #32
    aa98:	18b1      	adds	r1, r6, r2
    aa9a:	18b8      	adds	r0, r7, r2
    aa9c:	f7f5 fc10 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    aaa0:	2200      	movs	r2, #0
    aaa2:	4629      	mov	r1, r5
    aaa4:	4620      	mov	r0, r4
    aaa6:	f7ff ffb5 	bl	aa14 <smp_send>
	return 0;
    aaaa:	2000      	movs	r0, #0
    aaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aaae:	2008      	movs	r0, #8
}
    aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aab2:	bf00      	nop
    aab4:	20000968 	.word	0x20000968

0000aab8 <send_pairing_rsp>:
{
    aab8:	b538      	push	{r3, r4, r5, lr}
    aaba:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    aabc:	2206      	movs	r2, #6
    aabe:	2102      	movs	r1, #2
    aac0:	6800      	ldr	r0, [r0, #0]
    aac2:	f7ff ff54 	bl	a96e <smp_create_pdu>
	if (!rsp_buf) {
    aac6:	b180      	cbz	r0, aaea <send_pairing_rsp+0x32>
    aac8:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    aaca:	2106      	movs	r1, #6
    aacc:	3008      	adds	r0, #8
    aace:	f010 f8ad 	bl	1ac2c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    aad2:	2206      	movs	r2, #6
    aad4:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    aad8:	f7f5 fbf2 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    aadc:	2200      	movs	r2, #0
    aade:	4629      	mov	r1, r5
    aae0:	4620      	mov	r0, r4
    aae2:	f7ff ff97 	bl	aa14 <smp_send>
	return 0;
    aae6:	2000      	movs	r0, #0
    aae8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aaea:	2008      	movs	r0, #8
}
    aaec:	bd38      	pop	{r3, r4, r5, pc}

0000aaee <smp_send_pairing_random>:
{
    aaee:	b538      	push	{r3, r4, r5, lr}
    aaf0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    aaf2:	2210      	movs	r2, #16
    aaf4:	2104      	movs	r1, #4
    aaf6:	6800      	ldr	r0, [r0, #0]
    aaf8:	f7ff ff39 	bl	a96e <smp_create_pdu>
	if (!rsp_buf) {
    aafc:	b180      	cbz	r0, ab20 <smp_send_pairing_random+0x32>
    aafe:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    ab00:	2110      	movs	r1, #16
    ab02:	3008      	adds	r0, #8
    ab04:	f010 f892 	bl	1ac2c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    ab08:	2210      	movs	r2, #16
    ab0a:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    ab0e:	f7f5 fbd7 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    ab12:	2200      	movs	r2, #0
    ab14:	4629      	mov	r1, r5
    ab16:	4620      	mov	r0, r4
    ab18:	f7ff ff7c 	bl	aa14 <smp_send>
	return 0;
    ab1c:	2000      	movs	r0, #0
    ab1e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ab20:	2008      	movs	r0, #8
}
    ab22:	bd38      	pop	{r3, r4, r5, pc}

0000ab24 <bt_smp_aes_cmac>:
{
    ab24:	b570      	push	{r4, r5, r6, lr}
    ab26:	b0c2      	sub	sp, #264	; 0x108
    ab28:	460c      	mov	r4, r1
    ab2a:	4615      	mov	r5, r2
    ab2c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    ab2e:	aa16      	add	r2, sp, #88	; 0x58
    ab30:	4601      	mov	r1, r0
    ab32:	4668      	mov	r0, sp
    ab34:	f7f8 fe57 	bl	37e6 <tc_cmac_setup>
    ab38:	b180      	cbz	r0, ab5c <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    ab3a:	462a      	mov	r2, r5
    ab3c:	4621      	mov	r1, r4
    ab3e:	4668      	mov	r0, sp
    ab40:	f7f8 fe7e 	bl	3840 <tc_cmac_update>
    ab44:	b168      	cbz	r0, ab62 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    ab46:	4669      	mov	r1, sp
    ab48:	4630      	mov	r0, r6
    ab4a:	f7f8 fee3 	bl	3914 <tc_cmac_final>
    ab4e:	b110      	cbz	r0, ab56 <bt_smp_aes_cmac+0x32>
	return 0;
    ab50:	2000      	movs	r0, #0
}
    ab52:	b042      	add	sp, #264	; 0x108
    ab54:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ab56:	f06f 0004 	mvn.w	r0, #4
    ab5a:	e7fa      	b.n	ab52 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ab5c:	f06f 0004 	mvn.w	r0, #4
    ab60:	e7f7      	b.n	ab52 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ab62:	f06f 0004 	mvn.w	r0, #4
    ab66:	e7f4      	b.n	ab52 <bt_smp_aes_cmac+0x2e>

0000ab68 <smp_sign_buf>:
{
    ab68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab6c:	b08b      	sub	sp, #44	; 0x2c
    ab6e:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ab70:	188f      	adds	r7, r1, r2
    ab72:	683b      	ldr	r3, [r7, #0]
    ab74:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    ab76:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    ab78:	2300      	movs	r3, #0
    ab7a:	e006      	b.n	ab8a <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    ab7c:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ab7e:	1af1      	subs	r1, r6, r3
    ab80:	3901      	subs	r1, #1
    ab82:	5c6c      	ldrb	r4, [r5, r1]
    ab84:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ab86:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    ab88:	3301      	adds	r3, #1
    ab8a:	ea4f 0856 	mov.w	r8, r6, lsr #1
    ab8e:	4543      	cmp	r3, r8
    ab90:	d3f4      	bcc.n	ab7c <smp_sign_buf+0x14>
	src += length - 1;
    ab92:	300f      	adds	r0, #15
    ab94:	2410      	movs	r4, #16
    ab96:	ab05      	add	r3, sp, #20
    ab98:	e004      	b.n	aba4 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ab9a:	7802      	ldrb	r2, [r0, #0]
    ab9c:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    ab9e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aba0:	3801      	subs	r0, #1
    aba2:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    aba4:	2c00      	cmp	r4, #0
    aba6:	d1f8      	bne.n	ab9a <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    aba8:	ab01      	add	r3, sp, #4
    abaa:	4632      	mov	r2, r6
    abac:	4629      	mov	r1, r5
    abae:	a805      	add	r0, sp, #20
    abb0:	f7ff ffb8 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    abb4:	4681      	mov	r9, r0
    abb6:	bb08      	cbnz	r0, abfc <smp_sign_buf+0x94>
    abb8:	4623      	mov	r3, r4
    abba:	e009      	b.n	abd0 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    abbc:	aa01      	add	r2, sp, #4
    abbe:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    abc0:	f1c3 010f 	rsb	r1, r3, #15
    abc4:	f812 e001 	ldrb.w	lr, [r2, r1]
    abc8:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    abcc:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    abce:	3301      	adds	r3, #1
    abd0:	2b07      	cmp	r3, #7
    abd2:	d9f3      	bls.n	abbc <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    abd4:	2204      	movs	r2, #4
    abd6:	a909      	add	r1, sp, #36	; 0x24
    abd8:	a802      	add	r0, sp, #8
    abda:	f7f5 fb71 	bl	2c0 <memcpy>
    abde:	e006      	b.n	abee <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    abe0:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    abe2:	1b33      	subs	r3, r6, r4
    abe4:	3b01      	subs	r3, #1
    abe6:	5ce9      	ldrb	r1, [r5, r3]
    abe8:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    abea:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    abec:	3401      	adds	r4, #1
    abee:	45a0      	cmp	r8, r4
    abf0:	d8f6      	bhi.n	abe0 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    abf2:	220c      	movs	r2, #12
    abf4:	a902      	add	r1, sp, #8
    abf6:	4638      	mov	r0, r7
    abf8:	f7f5 fb62 	bl	2c0 <memcpy>
}
    abfc:	4648      	mov	r0, r9
    abfe:	b00b      	add	sp, #44	; 0x2c
    ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000ac04 <smp_f4>:
{
    ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac06:	b097      	sub	sp, #92	; 0x5c
    ac08:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    ac0a:	301f      	adds	r0, #31
    ac0c:	2420      	movs	r4, #32
    ac0e:	ad01      	add	r5, sp, #4
    ac10:	e004      	b.n	ac1c <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac12:	7807      	ldrb	r7, [r0, #0]
    ac14:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    ac16:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac18:	3801      	subs	r0, #1
    ac1a:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    ac1c:	2c00      	cmp	r4, #0
    ac1e:	d1f8      	bne.n	ac12 <smp_f4+0xe>
	src += length - 1;
    ac20:	311f      	adds	r1, #31
    ac22:	2020      	movs	r0, #32
    ac24:	ac09      	add	r4, sp, #36	; 0x24
    ac26:	e004      	b.n	ac32 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac28:	780d      	ldrb	r5, [r1, #0]
    ac2a:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    ac2c:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac2e:	3901      	subs	r1, #1
    ac30:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    ac32:	2800      	cmp	r0, #0
    ac34:	d1f8      	bne.n	ac28 <smp_f4+0x24>
	m[64] = z;
    ac36:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    ac3a:	320f      	adds	r2, #15
    ac3c:	2410      	movs	r4, #16
    ac3e:	ab12      	add	r3, sp, #72	; 0x48
    ac40:	e004      	b.n	ac4c <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac42:	7811      	ldrb	r1, [r2, #0]
    ac44:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    ac46:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ac48:	3a01      	subs	r2, #1
    ac4a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ac4c:	2c00      	cmp	r4, #0
    ac4e:	d1f8      	bne.n	ac42 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ac50:	4633      	mov	r3, r6
    ac52:	2241      	movs	r2, #65	; 0x41
    ac54:	a901      	add	r1, sp, #4
    ac56:	a812      	add	r0, sp, #72	; 0x48
    ac58:	f7ff ff64 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    ac5c:	4605      	mov	r5, r0
    ac5e:	b138      	cbz	r0, ac70 <smp_f4+0x6c>
    ac60:	e008      	b.n	ac74 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    ac62:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ac64:	f1c4 030f 	rsb	r3, r4, #15
    ac68:	5cf1      	ldrb	r1, [r6, r3]
    ac6a:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ac6c:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    ac6e:	3401      	adds	r4, #1
    ac70:	2c07      	cmp	r4, #7
    ac72:	d9f6      	bls.n	ac62 <smp_f4+0x5e>
}
    ac74:	4628      	mov	r0, r5
    ac76:	b017      	add	sp, #92	; 0x5c
    ac78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ac7c <sc_smp_check_confirm>:
	switch (smp->method) {
    ac7c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    ac80:	2b03      	cmp	r3, #3
    ac82:	d827      	bhi.n	acd4 <sc_smp_check_confirm+0x58>
    ac84:	e8df f003 	tbb	[pc, r3]
    ac88:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ac8c:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    ac90:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    ac94:	40d3      	lsrs	r3, r2
    ac96:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ac9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ac9e:	b2db      	uxtb	r3, r3
		break;
    aca0:	e000      	b.n	aca4 <sc_smp_check_confirm+0x28>
		r = 0;
    aca2:	2300      	movs	r3, #0
{
    aca4:	b510      	push	{r4, lr}
    aca6:	b086      	sub	sp, #24
    aca8:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    acaa:	aa02      	add	r2, sp, #8
    acac:	9200      	str	r2, [sp, #0]
    acae:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    acb2:	490a      	ldr	r1, [pc, #40]	; (acdc <sc_smp_check_confirm+0x60>)
    acb4:	30f3      	adds	r0, #243	; 0xf3
    acb6:	f7ff ffa5 	bl	ac04 <smp_f4>
    acba:	b110      	cbz	r0, acc2 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    acbc:	2008      	movs	r0, #8
}
    acbe:	b006      	add	sp, #24
    acc0:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    acc2:	2210      	movs	r2, #16
    acc4:	a902      	add	r1, sp, #8
    acc6:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    acca:	f01f f9ed 	bl	2a0a8 <memcmp>
    acce:	b118      	cbz	r0, acd8 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    acd0:	2004      	movs	r0, #4
    acd2:	e7f4      	b.n	acbe <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    acd4:	2008      	movs	r0, #8
    acd6:	4770      	bx	lr
	return 0;
    acd8:	2000      	movs	r0, #0
    acda:	e7f0      	b.n	acbe <sc_smp_check_confirm+0x42>
    acdc:	20000968 	.word	0x20000968

0000ace0 <smp_f5>:
{
    ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ace4:	b09b      	sub	sp, #108	; 0x6c
    ace6:	4604      	mov	r4, r0
    ace8:	460e      	mov	r6, r1
    acea:	4615      	mov	r5, r2
    acec:	461f      	mov	r7, r3
    acee:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    acf2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    acf6:	2235      	movs	r2, #53	; 0x35
    acf8:	2100      	movs	r1, #0
    acfa:	a80c      	add	r0, sp, #48	; 0x30
    acfc:	f01f fa68 	bl	2a1d0 <memset>
    ad00:	2362      	movs	r3, #98	; 0x62
    ad02:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    ad06:	2374      	movs	r3, #116	; 0x74
    ad08:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    ad0c:	236c      	movs	r3, #108	; 0x6c
    ad0e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    ad12:	2365      	movs	r3, #101	; 0x65
    ad14:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    ad18:	2301      	movs	r3, #1
    ad1a:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    ad1e:	f104 001f 	add.w	r0, r4, #31
    ad22:	2320      	movs	r3, #32
    ad24:	466a      	mov	r2, sp
    ad26:	e004      	b.n	ad32 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad28:	7801      	ldrb	r1, [r0, #0]
    ad2a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad2c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad2e:	3801      	subs	r0, #1
    ad30:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad32:	2b00      	cmp	r3, #0
    ad34:	d1f8      	bne.n	ad28 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ad36:	ab08      	add	r3, sp, #32
    ad38:	2220      	movs	r2, #32
    ad3a:	4669      	mov	r1, sp
    ad3c:	4838      	ldr	r0, [pc, #224]	; (ae20 <smp_f5+0x140>)
    ad3e:	f7ff fef1 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    ad42:	4686      	mov	lr, r0
    ad44:	2800      	cmp	r0, #0
    ad46:	d166      	bne.n	ae16 <smp_f5+0x136>
	src += length - 1;
    ad48:	360f      	adds	r6, #15
    ad4a:	2310      	movs	r3, #16
    ad4c:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    ad50:	e004      	b.n	ad5c <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad52:	7831      	ldrb	r1, [r6, #0]
    ad54:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad56:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad58:	3e01      	subs	r6, #1
    ad5a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d1f8      	bne.n	ad52 <smp_f5+0x72>
	src += length - 1;
    ad60:	350f      	adds	r5, #15
    ad62:	2310      	movs	r3, #16
    ad64:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    ad68:	e004      	b.n	ad74 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad6a:	7829      	ldrb	r1, [r5, #0]
    ad6c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad6e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad70:	3d01      	subs	r5, #1
    ad72:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad74:	2b00      	cmp	r3, #0
    ad76:	d1f8      	bne.n	ad6a <smp_f5+0x8a>
	m[37] = a1->type;
    ad78:	f817 3b06 	ldrb.w	r3, [r7], #6
    ad7c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    ad80:	2306      	movs	r3, #6
    ad82:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    ad86:	e004      	b.n	ad92 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad88:	7839      	ldrb	r1, [r7, #0]
    ad8a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad8c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad8e:	3f01      	subs	r7, #1
    ad90:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad92:	2b00      	cmp	r3, #0
    ad94:	d1f8      	bne.n	ad88 <smp_f5+0xa8>
	m[44] = a2->type;
    ad96:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad98:	f813 2b06 	ldrb.w	r2, [r3], #6
    ad9c:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    ada0:	2406      	movs	r4, #6
    ada2:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    ada6:	e004      	b.n	adb2 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ada8:	7819      	ldrb	r1, [r3, #0]
    adaa:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    adac:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    adae:	3b01      	subs	r3, #1
    adb0:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    adb2:	2c00      	cmp	r4, #0
    adb4:	d1f8      	bne.n	ada8 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    adb6:	4643      	mov	r3, r8
    adb8:	2235      	movs	r2, #53	; 0x35
    adba:	a90c      	add	r1, sp, #48	; 0x30
    adbc:	a808      	add	r0, sp, #32
    adbe:	f7ff feb1 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    adc2:	4686      	mov	lr, r0
    adc4:	bb38      	cbnz	r0, ae16 <smp_f5+0x136>
    adc6:	4623      	mov	r3, r4
    adc8:	e00a      	b.n	ade0 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    adca:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    adce:	f1c3 020f 	rsb	r2, r3, #15
    add2:	f818 0002 	ldrb.w	r0, [r8, r2]
    add6:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    adda:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    adde:	3301      	adds	r3, #1
    ade0:	2b07      	cmp	r3, #7
    ade2:	d9f2      	bls.n	adca <smp_f5+0xea>
	m[0] = 0x01;
    ade4:	a91a      	add	r1, sp, #104	; 0x68
    ade6:	2301      	movs	r3, #1
    ade8:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    adec:	464b      	mov	r3, r9
    adee:	2235      	movs	r2, #53	; 0x35
    adf0:	a808      	add	r0, sp, #32
    adf2:	f7ff fe97 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    adf6:	4686      	mov	lr, r0
    adf8:	b158      	cbz	r0, ae12 <smp_f5+0x132>
    adfa:	e00c      	b.n	ae16 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    adfc:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ae00:	f1c4 030f 	rsb	r3, r4, #15
    ae04:	f819 1003 	ldrb.w	r1, [r9, r3]
    ae08:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ae0c:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    ae10:	3401      	adds	r4, #1
    ae12:	2c07      	cmp	r4, #7
    ae14:	d9f2      	bls.n	adfc <smp_f5+0x11c>
}
    ae16:	4670      	mov	r0, lr
    ae18:	b01b      	add	sp, #108	; 0x6c
    ae1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ae1e:	bf00      	nop
    ae20:	00030f84 	.word	0x00030f84

0000ae24 <smp_f6>:
{
    ae24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae26:	b097      	sub	sp, #92	; 0x5c
    ae28:	4604      	mov	r4, r0
    ae2a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    ae2c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    ae2e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    ae30:	310f      	adds	r1, #15
    ae32:	2010      	movs	r0, #16
    ae34:	f10d 0e04 	add.w	lr, sp, #4
    ae38:	e007      	b.n	ae4a <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae3a:	f891 c000 	ldrb.w	ip, [r1]
    ae3e:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    ae42:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae44:	3901      	subs	r1, #1
    ae46:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d1f5      	bne.n	ae3a <smp_f6+0x16>
	src += length - 1;
    ae4e:	320f      	adds	r2, #15
    ae50:	2110      	movs	r1, #16
    ae52:	a805      	add	r0, sp, #20
    ae54:	e006      	b.n	ae64 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae56:	f892 e000 	ldrb.w	lr, [r2]
    ae5a:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    ae5e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae60:	3a01      	subs	r2, #1
    ae62:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    ae64:	2900      	cmp	r1, #0
    ae66:	d1f6      	bne.n	ae56 <smp_f6+0x32>
	src += length - 1;
    ae68:	330f      	adds	r3, #15
    ae6a:	2210      	movs	r2, #16
    ae6c:	a909      	add	r1, sp, #36	; 0x24
    ae6e:	e004      	b.n	ae7a <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae70:	7818      	ldrb	r0, [r3, #0]
    ae72:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    ae74:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae76:	3b01      	subs	r3, #1
    ae78:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    ae7a:	2a00      	cmp	r2, #0
    ae7c:	d1f8      	bne.n	ae70 <smp_f6+0x4c>
	src += length - 1;
    ae7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ae80:	3302      	adds	r3, #2
    ae82:	2203      	movs	r2, #3
    ae84:	a90d      	add	r1, sp, #52	; 0x34
    ae86:	e004      	b.n	ae92 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae88:	7818      	ldrb	r0, [r3, #0]
    ae8a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    ae8c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae8e:	3b01      	subs	r3, #1
    ae90:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    ae92:	2a00      	cmp	r2, #0
    ae94:	d1f8      	bne.n	ae88 <smp_f6+0x64>
	m[51] = a1->type;
    ae96:	4631      	mov	r1, r6
    ae98:	f811 3b01 	ldrb.w	r3, [r1], #1
    ae9c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    aea0:	2206      	movs	r2, #6
    aea2:	a80e      	add	r0, sp, #56	; 0x38
    aea4:	f7f5 fa0c 	bl	2c0 <memcpy>
	src += length - 1;
    aea8:	3606      	adds	r6, #6
    aeaa:	2306      	movs	r3, #6
    aeac:	aa0e      	add	r2, sp, #56	; 0x38
    aeae:	e004      	b.n	aeba <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeb0:	7831      	ldrb	r1, [r6, #0]
    aeb2:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aeb4:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeb6:	3e01      	subs	r6, #1
    aeb8:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aeba:	2b00      	cmp	r3, #0
    aebc:	d1f8      	bne.n	aeb0 <smp_f6+0x8c>
	m[58] = a2->type;
    aebe:	4629      	mov	r1, r5
    aec0:	f811 3b01 	ldrb.w	r3, [r1], #1
    aec4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    aec8:	2206      	movs	r2, #6
    aeca:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    aece:	f7f5 f9f7 	bl	2c0 <memcpy>
	src += length - 1;
    aed2:	3506      	adds	r5, #6
    aed4:	2306      	movs	r3, #6
    aed6:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    aeda:	e004      	b.n	aee6 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aedc:	7829      	ldrb	r1, [r5, #0]
    aede:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    aee0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aee2:	3d01      	subs	r5, #1
    aee4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    aee6:	2b00      	cmp	r3, #0
    aee8:	d1f8      	bne.n	aedc <smp_f6+0xb8>
	src += length - 1;
    aeea:	f104 000f 	add.w	r0, r4, #15
    aeee:	2410      	movs	r4, #16
    aef0:	ab12      	add	r3, sp, #72	; 0x48
    aef2:	e004      	b.n	aefe <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aef4:	7802      	ldrb	r2, [r0, #0]
    aef6:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    aef8:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aefa:	3801      	subs	r0, #1
    aefc:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    aefe:	2c00      	cmp	r4, #0
    af00:	d1f8      	bne.n	aef4 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    af02:	463b      	mov	r3, r7
    af04:	2241      	movs	r2, #65	; 0x41
    af06:	a901      	add	r1, sp, #4
    af08:	a812      	add	r0, sp, #72	; 0x48
    af0a:	f7ff fe0b 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    af0e:	4605      	mov	r5, r0
    af10:	b138      	cbz	r0, af22 <smp_f6+0xfe>
    af12:	e008      	b.n	af26 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    af14:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    af16:	f1c4 030f 	rsb	r3, r4, #15
    af1a:	5cf9      	ldrb	r1, [r7, r3]
    af1c:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    af1e:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    af20:	3401      	adds	r4, #1
    af22:	2c07      	cmp	r4, #7
    af24:	d9f6      	bls.n	af14 <smp_f6+0xf0>
}
    af26:	4628      	mov	r0, r5
    af28:	b017      	add	sp, #92	; 0x5c
    af2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000af2c <compute_and_send_master_dhcheck>:
{
    af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af2e:	b08d      	sub	sp, #52	; 0x34
    af30:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    af32:	2210      	movs	r2, #16
    af34:	2100      	movs	r1, #0
    af36:	eb0d 0002 	add.w	r0, sp, r2
    af3a:	f01f f949 	bl	2a1d0 <memset>
	switch (smp->method) {
    af3e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    af42:	2b03      	cmp	r3, #3
    af44:	d84a      	bhi.n	afdc <compute_and_send_master_dhcheck+0xb0>
    af46:	e8df f003 	tbb	[pc, r3]
    af4a:	0208      	.short	0x0208
    af4c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    af4e:	2204      	movs	r2, #4
    af50:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    af54:	a804      	add	r0, sp, #16
    af56:	f7f5 f9b3 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    af5a:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    af5e:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    af62:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    af64:	f103 0256 	add.w	r2, r3, #86	; 0x56
    af68:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    af6c:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    af70:	9102      	str	r1, [sp, #8]
    af72:	9501      	str	r5, [sp, #4]
    af74:	9200      	str	r2, [sp, #0]
    af76:	334f      	adds	r3, #79	; 0x4f
    af78:	463a      	mov	r2, r7
    af7a:	4631      	mov	r1, r6
    af7c:	f204 1033 	addw	r0, r4, #307	; 0x133
    af80:	f7ff feae 	bl	ace0 <smp_f5>
    af84:	b110      	cbz	r0, af8c <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    af86:	2008      	movs	r0, #8
}
    af88:	b00d      	add	sp, #52	; 0x34
    af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    af8c:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    af90:	6823      	ldr	r3, [r4, #0]
    af92:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    af96:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    af98:	a808      	add	r0, sp, #32
    af9a:	9003      	str	r0, [sp, #12]
    af9c:	9302      	str	r3, [sp, #8]
    af9e:	9101      	str	r1, [sp, #4]
    afa0:	9200      	str	r2, [sp, #0]
    afa2:	ab04      	add	r3, sp, #16
    afa4:	463a      	mov	r2, r7
    afa6:	4631      	mov	r1, r6
    afa8:	4628      	mov	r0, r5
    afaa:	f7ff ff3b 	bl	ae24 <smp_f6>
    afae:	b108      	cbz	r0, afb4 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    afb0:	2008      	movs	r0, #8
    afb2:	e7e9      	b.n	af88 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    afb4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    afb8:	f3bf 8f5b 	dmb	ish
    afbc:	e853 2f00 	ldrex	r2, [r3]
    afc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    afc4:	e843 2100 	strex	r1, r2, [r3]
    afc8:	2900      	cmp	r1, #0
    afca:	d1f7      	bne.n	afbc <compute_and_send_master_dhcheck+0x90>
    afcc:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    afd0:	a908      	add	r1, sp, #32
    afd2:	4620      	mov	r0, r4
    afd4:	f7ff fd30 	bl	aa38 <sc_smp_send_dhkey_check>
	return 0;
    afd8:	2000      	movs	r0, #0
    afda:	e7d5      	b.n	af88 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    afdc:	2008      	movs	r0, #8
    afde:	e7d3      	b.n	af88 <compute_and_send_master_dhcheck+0x5c>

0000afe0 <compute_and_check_and_send_slave_dhcheck>:
{
    afe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    afe2:	b091      	sub	sp, #68	; 0x44
    afe4:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    afe6:	2210      	movs	r2, #16
    afe8:	2100      	movs	r1, #0
    afea:	eb0d 0002 	add.w	r0, sp, r2
    afee:	f01f f8ef 	bl	2a1d0 <memset>
	switch (smp->method) {
    aff2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    aff6:	2b03      	cmp	r3, #3
    aff8:	d866      	bhi.n	b0c8 <compute_and_check_and_send_slave_dhcheck+0xe8>
    affa:	e8df f003 	tbb	[pc, r3]
    affe:	0208      	.short	0x0208
    b000:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b002:	2204      	movs	r2, #4
    b004:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b008:	a804      	add	r0, sp, #16
    b00a:	f7f5 f959 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b00e:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    b012:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    b016:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b018:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b01c:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b020:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b024:	9102      	str	r1, [sp, #8]
    b026:	9501      	str	r5, [sp, #4]
    b028:	9200      	str	r2, [sp, #0]
    b02a:	334f      	adds	r3, #79	; 0x4f
    b02c:	463a      	mov	r2, r7
    b02e:	4631      	mov	r1, r6
    b030:	f204 1033 	addw	r0, r4, #307	; 0x133
    b034:	f7ff fe54 	bl	ace0 <smp_f5>
    b038:	b110      	cbz	r0, b040 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b03a:	2008      	movs	r0, #8
}
    b03c:	b011      	add	sp, #68	; 0x44
    b03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b040:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    b044:	6823      	ldr	r3, [r4, #0]
    b046:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b04a:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b04c:	a808      	add	r0, sp, #32
    b04e:	9003      	str	r0, [sp, #12]
    b050:	9302      	str	r3, [sp, #8]
    b052:	9101      	str	r1, [sp, #4]
    b054:	9200      	str	r2, [sp, #0]
    b056:	ab04      	add	r3, sp, #16
    b058:	4632      	mov	r2, r6
    b05a:	4639      	mov	r1, r7
    b05c:	4628      	mov	r0, r5
    b05e:	f7ff fee1 	bl	ae24 <smp_f6>
    b062:	b108      	cbz	r0, b068 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b064:	2008      	movs	r0, #8
    b066:	e7e9      	b.n	b03c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b068:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b06c:	6823      	ldr	r3, [r4, #0]
    b06e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b072:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b074:	a80c      	add	r0, sp, #48	; 0x30
    b076:	9003      	str	r0, [sp, #12]
    b078:	9302      	str	r3, [sp, #8]
    b07a:	9101      	str	r1, [sp, #4]
    b07c:	9200      	str	r2, [sp, #0]
    b07e:	ab04      	add	r3, sp, #16
    b080:	463a      	mov	r2, r7
    b082:	4631      	mov	r1, r6
    b084:	4628      	mov	r0, r5
    b086:	f7ff fecd 	bl	ae24 <smp_f6>
    b08a:	b108      	cbz	r0, b090 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b08c:	2008      	movs	r0, #8
    b08e:	e7d5      	b.n	b03c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b090:	2210      	movs	r2, #16
    b092:	a90c      	add	r1, sp, #48	; 0x30
    b094:	f204 1053 	addw	r0, r4, #339	; 0x153
    b098:	f01f f806 	bl	2a0a8 <memcmp>
    b09c:	b108      	cbz	r0, b0a2 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b09e:	200b      	movs	r0, #11
    b0a0:	e7cc      	b.n	b03c <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b0a2:	a908      	add	r1, sp, #32
    b0a4:	4620      	mov	r0, r4
    b0a6:	f7ff fcc7 	bl	aa38 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b0aa:	34a0      	adds	r4, #160	; 0xa0
    b0ac:	f3bf 8f5b 	dmb	ish
    b0b0:	e854 3f00 	ldrex	r3, [r4]
    b0b4:	f043 0302 	orr.w	r3, r3, #2
    b0b8:	e844 3200 	strex	r2, r3, [r4]
    b0bc:	2a00      	cmp	r2, #0
    b0be:	d1f7      	bne.n	b0b0 <compute_and_check_and_send_slave_dhcheck+0xd0>
    b0c0:	f3bf 8f5b 	dmb	ish
	return 0;
    b0c4:	2000      	movs	r0, #0
    b0c6:	e7b9      	b.n	b03c <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b0c8:	2008      	movs	r0, #8
    b0ca:	e7b7      	b.n	b03c <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b0cc <smp_g2>:
{
    b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0ce:	b099      	sub	sp, #100	; 0x64
    b0d0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b0d2:	301f      	adds	r0, #31
    b0d4:	2520      	movs	r5, #32
    b0d6:	ae04      	add	r6, sp, #16
    b0d8:	e004      	b.n	b0e4 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0da:	7807      	ldrb	r7, [r0, #0]
    b0dc:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b0de:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0e0:	3801      	subs	r0, #1
    b0e2:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b0e4:	2d00      	cmp	r5, #0
    b0e6:	d1f8      	bne.n	b0da <smp_g2+0xe>
	src += length - 1;
    b0e8:	311f      	adds	r1, #31
    b0ea:	2020      	movs	r0, #32
    b0ec:	ad0c      	add	r5, sp, #48	; 0x30
    b0ee:	e004      	b.n	b0fa <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0f0:	780e      	ldrb	r6, [r1, #0]
    b0f2:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b0f4:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0f6:	3901      	subs	r1, #1
    b0f8:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b0fa:	2800      	cmp	r0, #0
    b0fc:	d1f8      	bne.n	b0f0 <smp_g2+0x24>
	src += length - 1;
    b0fe:	330f      	adds	r3, #15
    b100:	2110      	movs	r1, #16
    b102:	a814      	add	r0, sp, #80	; 0x50
    b104:	e004      	b.n	b110 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b106:	781d      	ldrb	r5, [r3, #0]
    b108:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b10a:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b10c:	3b01      	subs	r3, #1
    b10e:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b110:	2900      	cmp	r1, #0
    b112:	d1f8      	bne.n	b106 <smp_g2+0x3a>
	src += length - 1;
    b114:	320f      	adds	r2, #15
    b116:	2310      	movs	r3, #16
    b118:	4669      	mov	r1, sp
    b11a:	e004      	b.n	b126 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b11c:	7810      	ldrb	r0, [r2, #0]
    b11e:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b120:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b122:	3a01      	subs	r2, #1
    b124:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b126:	2b00      	cmp	r3, #0
    b128:	d1f8      	bne.n	b11c <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b12a:	466b      	mov	r3, sp
    b12c:	2250      	movs	r2, #80	; 0x50
    b12e:	a904      	add	r1, sp, #16
    b130:	4668      	mov	r0, sp
    b132:	f7ff fcf7 	bl	ab24 <bt_smp_aes_cmac>
	if (err) {
    b136:	4605      	mov	r5, r0
    b138:	b110      	cbz	r0, b140 <smp_g2+0x74>
}
    b13a:	4628      	mov	r0, r5
    b13c:	b019      	add	sp, #100	; 0x64
    b13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b140:	2204      	movs	r2, #4
    b142:	a903      	add	r1, sp, #12
    b144:	4620      	mov	r0, r4
    b146:	f7f5 f8bb 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b14a:	6822      	ldr	r2, [r4, #0]
    b14c:	0a13      	lsrs	r3, r2, #8
    b14e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b152:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b156:	0211      	lsls	r1, r2, #8
    b158:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b15c:	430b      	orrs	r3, r1
    b15e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b162:	4a04      	ldr	r2, [pc, #16]	; (b174 <smp_g2+0xa8>)
    b164:	fba2 1203 	umull	r1, r2, r2, r3
    b168:	0c92      	lsrs	r2, r2, #18
    b16a:	4903      	ldr	r1, [pc, #12]	; (b178 <smp_g2+0xac>)
    b16c:	fb01 3212 	mls	r2, r1, r2, r3
    b170:	6022      	str	r2, [r4, #0]
	return 0;
    b172:	e7e2      	b.n	b13a <smp_g2+0x6e>
    b174:	431bde83 	.word	0x431bde83
    b178:	000f4240 	.word	0x000f4240

0000b17c <smp_send_pairing_confirm>:
{
    b17c:	b570      	push	{r4, r5, r6, lr}
    b17e:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b180:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b182:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b186:	2b03      	cmp	r3, #3
    b188:	d83f      	bhi.n	b20a <smp_send_pairing_confirm+0x8e>
    b18a:	e8df f003 	tbb	[pc, r3]
    b18e:	020d      	.short	0x020d
    b190:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b192:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    b196:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b19a:	40dd      	lsrs	r5, r3
    b19c:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    b1a0:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b1a4:	b2ed      	uxtb	r5, r5
		break;
    b1a6:	e000      	b.n	b1aa <smp_send_pairing_confirm+0x2e>
		r = 0;
    b1a8:	2500      	movs	r5, #0
    b1aa:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b1ac:	2210      	movs	r2, #16
    b1ae:	2103      	movs	r1, #3
    b1b0:	4630      	mov	r0, r6
    b1b2:	f7ff fbdc 	bl	a96e <smp_create_pdu>
	if (!buf) {
    b1b6:	4606      	mov	r6, r0
    b1b8:	b348      	cbz	r0, b20e <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    b1ba:	2110      	movs	r1, #16
    b1bc:	3008      	adds	r0, #8
    b1be:	f00f fd35 	bl	1ac2c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b1c2:	9000      	str	r0, [sp, #0]
    b1c4:	462b      	mov	r3, r5
    b1c6:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b1ca:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b1ce:	4811      	ldr	r0, [pc, #68]	; (b214 <smp_send_pairing_confirm+0x98>)
    b1d0:	f7ff fd18 	bl	ac04 <smp_f4>
    b1d4:	b120      	cbz	r0, b1e0 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    b1d6:	4630      	mov	r0, r6
    b1d8:	f00f fcdc 	bl	1ab94 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b1dc:	2008      	movs	r0, #8
    b1de:	e017      	b.n	b210 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    b1e0:	2200      	movs	r2, #0
    b1e2:	4631      	mov	r1, r6
    b1e4:	4620      	mov	r0, r4
    b1e6:	f7ff fc15 	bl	aa14 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b1ea:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b1ee:	f3bf 8f5b 	dmb	ish
    b1f2:	e850 3f00 	ldrex	r3, [r0]
    b1f6:	f023 0301 	bic.w	r3, r3, #1
    b1fa:	e840 3200 	strex	r2, r3, [r0]
    b1fe:	2a00      	cmp	r2, #0
    b200:	d1f7      	bne.n	b1f2 <smp_send_pairing_confirm+0x76>
    b202:	f3bf 8f5b 	dmb	ish
	return 0;
    b206:	2000      	movs	r0, #0
    b208:	e002      	b.n	b210 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b20a:	2008      	movs	r0, #8
    b20c:	e000      	b.n	b210 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b20e:	2008      	movs	r0, #8
}
    b210:	b002      	add	sp, #8
    b212:	bd70      	pop	{r4, r5, r6, pc}
    b214:	20000968 	.word	0x20000968

0000b218 <smp_c1>:
{
    b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b21c:	b088      	sub	sp, #32
    b21e:	4604      	mov	r4, r0
    b220:	460f      	mov	r7, r1
    b222:	4611      	mov	r1, r2
    b224:	4698      	mov	r8, r3
    b226:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b228:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    b22a:	782b      	ldrb	r3, [r5, #0]
    b22c:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    b230:	7833      	ldrb	r3, [r6, #0]
    b232:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    b236:	2207      	movs	r2, #7
    b238:	f10d 0012 	add.w	r0, sp, #18
    b23c:	f7f5 f840 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    b240:	2207      	movs	r2, #7
    b242:	4641      	mov	r1, r8
    b244:	f10d 0019 	add.w	r0, sp, #25
    b248:	f7f5 f83a 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    b24c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b24e:	a904      	add	r1, sp, #16
    b250:	4638      	mov	r0, r7
    b252:	f7ff faf3 	bl	a83c <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    b256:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b258:	4611      	mov	r1, r2
    b25a:	4620      	mov	r0, r4
    b25c:	f006 f98c 	bl	11578 <bt_encrypt_le>
	if (err) {
    b260:	4603      	mov	r3, r0
    b262:	b118      	cbz	r0, b26c <smp_c1+0x54>
}
    b264:	4618      	mov	r0, r3
    b266:	b008      	add	sp, #32
    b268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    b26c:	2206      	movs	r2, #6
    b26e:	1c71      	adds	r1, r6, #1
    b270:	4668      	mov	r0, sp
    b272:	f7f5 f825 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    b276:	2206      	movs	r2, #6
    b278:	1c69      	adds	r1, r5, #1
    b27a:	eb0d 0002 	add.w	r0, sp, r2
    b27e:	f7f5 f81f 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    b282:	2204      	movs	r2, #4
    b284:	2100      	movs	r1, #0
    b286:	a803      	add	r0, sp, #12
    b288:	f01e ffa2 	bl	2a1d0 <memset>
	xor_128(enc_data, p2, enc_data);
    b28c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b28e:	4669      	mov	r1, sp
    b290:	4610      	mov	r0, r2
    b292:	f7ff fad3 	bl	a83c <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    b296:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b298:	4611      	mov	r1, r2
    b29a:	4620      	mov	r0, r4
    b29c:	f006 f96c 	bl	11578 <bt_encrypt_le>
    b2a0:	4603      	mov	r3, r0
    b2a2:	e7df      	b.n	b264 <smp_c1+0x4c>

0000b2a4 <legacy_send_pairing_confirm>:
{
    b2a4:	b570      	push	{r4, r5, r6, lr}
    b2a6:	b084      	sub	sp, #16
    b2a8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b2aa:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b2ac:	2210      	movs	r2, #16
    b2ae:	2103      	movs	r1, #3
    b2b0:	4628      	mov	r0, r5
    b2b2:	f7ff fb5c 	bl	a96e <smp_create_pdu>
	if (!buf) {
    b2b6:	b370      	cbz	r0, b316 <legacy_send_pairing_confirm+0x72>
    b2b8:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    b2ba:	2110      	movs	r1, #16
    b2bc:	3008      	adds	r0, #8
    b2be:	f00f fcb5 	bl	1ac2c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    b2c2:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    b2c6:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    b2c8:	9002      	str	r0, [sp, #8]
    b2ca:	9501      	str	r5, [sp, #4]
    b2cc:	9300      	str	r3, [sp, #0]
    b2ce:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b2d2:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b2d6:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b2da:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    b2de:	f7ff ff9b 	bl	b218 <smp_c1>
    b2e2:	b120      	cbz	r0, b2ee <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    b2e4:	4630      	mov	r0, r6
    b2e6:	f00f fc55 	bl	1ab94 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b2ea:	2008      	movs	r0, #8
    b2ec:	e014      	b.n	b318 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    b2ee:	2200      	movs	r2, #0
    b2f0:	4631      	mov	r1, r6
    b2f2:	4620      	mov	r0, r4
    b2f4:	f7ff fb8e 	bl	aa14 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b2f8:	34a0      	adds	r4, #160	; 0xa0
    b2fa:	f3bf 8f5b 	dmb	ish
    b2fe:	e854 3f00 	ldrex	r3, [r4]
    b302:	f023 0301 	bic.w	r3, r3, #1
    b306:	e844 3200 	strex	r2, r3, [r4]
    b30a:	2a00      	cmp	r2, #0
    b30c:	d1f7      	bne.n	b2fe <legacy_send_pairing_confirm+0x5a>
    b30e:	f3bf 8f5b 	dmb	ish
	return 0;
    b312:	2000      	movs	r0, #0
    b314:	e000      	b.n	b318 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    b316:	2008      	movs	r0, #8
}
    b318:	b004      	add	sp, #16
    b31a:	bd70      	pop	{r4, r5, r6, pc}

0000b31c <legacy_pairing_confirm>:
{
    b31c:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b31e:	6803      	ldr	r3, [r0, #0]
    b320:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b322:	b1c3      	cbz	r3, b356 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b324:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b328:	f3bf 8f5b 	dmb	ish
    b32c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b330:	f3bf 8f5b 	dmb	ish
    b334:	f412 7f00 	tst.w	r2, #512	; 0x200
    b338:	d01e      	beq.n	b378 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b33a:	f3bf 8f5b 	dmb	ish
    b33e:	e853 2f00 	ldrex	r2, [r3]
    b342:	f042 0201 	orr.w	r2, r2, #1
    b346:	e843 2100 	strex	r1, r2, [r3]
    b34a:	2900      	cmp	r1, #0
    b34c:	d1f7      	bne.n	b33e <legacy_pairing_confirm+0x22>
    b34e:	f3bf 8f5b 	dmb	ish
	return 0;
    b352:	2000      	movs	r0, #0
}
    b354:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b356:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b35a:	f3bf 8f5b 	dmb	ish
    b35e:	e853 2f00 	ldrex	r2, [r3]
    b362:	f042 0208 	orr.w	r2, r2, #8
    b366:	e843 2100 	strex	r1, r2, [r3]
    b36a:	2900      	cmp	r1, #0
    b36c:	d1f7      	bne.n	b35e <legacy_pairing_confirm+0x42>
    b36e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    b372:	f7ff ff97 	bl	b2a4 <legacy_send_pairing_confirm>
    b376:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    b378:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b37c:	f3bf 8f5b 	dmb	ish
    b380:	e853 2f00 	ldrex	r2, [r3]
    b384:	f042 0210 	orr.w	r2, r2, #16
    b388:	e843 2100 	strex	r1, r2, [r3]
    b38c:	2900      	cmp	r1, #0
    b38e:	d1f7      	bne.n	b380 <legacy_pairing_confirm+0x64>
    b390:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    b394:	f7ff ff86 	bl	b2a4 <legacy_send_pairing_confirm>
    b398:	bd08      	pop	{r3, pc}

0000b39a <smp_pairing_confirm>:
{
    b39a:	b510      	push	{r4, lr}
    b39c:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    b39e:	2210      	movs	r2, #16
    b3a0:	6889      	ldr	r1, [r1, #8]
    b3a2:	30b3      	adds	r0, #179	; 0xb3
    b3a4:	f7f4 ff8c 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b3a8:	6823      	ldr	r3, [r4, #0]
    b3aa:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b3ac:	b313      	cbz	r3, b3f4 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b3ae:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3b2:	f3bf 8f5b 	dmb	ish
    b3b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b3ba:	f3bf 8f5b 	dmb	ish
    b3be:	f013 0f20 	tst.w	r3, #32
    b3c2:	d029      	beq.n	b418 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    b3c4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b3c8:	2b01      	cmp	r3, #1
    b3ca:	d029      	beq.n	b420 <smp_pairing_confirm+0x86>
    b3cc:	2b02      	cmp	r3, #2
    b3ce:	d150      	bne.n	b472 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b3d0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3d4:	f3bf 8f5b 	dmb	ish
    b3d8:	e853 2f00 	ldrex	r2, [r3]
    b3dc:	f042 0210 	orr.w	r2, r2, #16
    b3e0:	e843 2100 	strex	r1, r2, [r3]
    b3e4:	2900      	cmp	r1, #0
    b3e6:	d1f7      	bne.n	b3d8 <smp_pairing_confirm+0x3e>
    b3e8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b3ec:	4620      	mov	r0, r4
    b3ee:	f7ff fec5 	bl	b17c <smp_send_pairing_confirm>
    b3f2:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b3f4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b3f8:	f3bf 8f5b 	dmb	ish
    b3fc:	e853 2f00 	ldrex	r2, [r3]
    b400:	f042 0210 	orr.w	r2, r2, #16
    b404:	e843 2100 	strex	r1, r2, [r3]
    b408:	2900      	cmp	r1, #0
    b40a:	d1f7      	bne.n	b3fc <smp_pairing_confirm+0x62>
    b40c:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    b410:	4620      	mov	r0, r4
    b412:	f7ff fb6c 	bl	aaee <smp_send_pairing_random>
    b416:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    b418:	4620      	mov	r0, r4
    b41a:	f7ff ff7f 	bl	b31c <legacy_pairing_confirm>
    b41e:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b420:	f3bf 8f5b 	dmb	ish
    b424:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b428:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b42c:	f413 7f00 	tst.w	r3, #512	; 0x200
    b430:	d111      	bne.n	b456 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b432:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b436:	f3bf 8f5b 	dmb	ish
    b43a:	e853 2f00 	ldrex	r2, [r3]
    b43e:	f042 0210 	orr.w	r2, r2, #16
    b442:	e843 2100 	strex	r1, r2, [r3]
    b446:	2900      	cmp	r1, #0
    b448:	d1f7      	bne.n	b43a <smp_pairing_confirm+0xa0>
    b44a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b44e:	4620      	mov	r0, r4
    b450:	f7ff fe94 	bl	b17c <smp_send_pairing_confirm>
    b454:	bd10      	pop	{r4, pc}
    b456:	f3bf 8f5b 	dmb	ish
    b45a:	e852 3f00 	ldrex	r3, [r2]
    b45e:	f043 0301 	orr.w	r3, r3, #1
    b462:	e842 3100 	strex	r1, r3, [r2]
    b466:	2900      	cmp	r1, #0
    b468:	d1f7      	bne.n	b45a <smp_pairing_confirm+0xc0>
    b46a:	f3bf 8f5b 	dmb	ish
			return 0;
    b46e:	2000      	movs	r0, #0
    b470:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b472:	2008      	movs	r0, #8
}
    b474:	bd10      	pop	{r4, pc}

0000b476 <smp_s1>:
{
    b476:	b570      	push	{r4, r5, r6, lr}
    b478:	4605      	mov	r5, r0
    b47a:	460e      	mov	r6, r1
    b47c:	4611      	mov	r1, r2
    b47e:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    b480:	2208      	movs	r2, #8
    b482:	4618      	mov	r0, r3
    b484:	f7f4 ff1c 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    b488:	2208      	movs	r2, #8
    b48a:	4631      	mov	r1, r6
    b48c:	18a0      	adds	r0, r4, r2
    b48e:	f7f4 ff17 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    b492:	4622      	mov	r2, r4
    b494:	4621      	mov	r1, r4
    b496:	4628      	mov	r0, r5
    b498:	f006 f86e 	bl	11578 <bt_encrypt_le>
}
    b49c:	bd70      	pop	{r4, r5, r6, pc}

0000b49e <smp_reset>:
{
    b49e:	b538      	push	{r3, r4, r5, lr}
    b4a0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b4a2:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    b4a4:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b4a8:	f01e fcae 	bl	29e08 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    b4ac:	2200      	movs	r2, #0
    b4ae:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    b4b2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b4b6:	f3bf 8f5b 	dmb	ish
    b4ba:	e853 1f00 	ldrex	r1, [r3]
    b4be:	e843 2000 	strex	r0, r2, [r3]
    b4c2:	2800      	cmp	r0, #0
    b4c4:	d1f9      	bne.n	b4ba <smp_reset+0x1c>
    b4c6:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    b4ca:	34a0      	adds	r4, #160	; 0xa0
    b4cc:	f3bf 8f5b 	dmb	ish
    b4d0:	e854 1f00 	ldrex	r1, [r4]
    b4d4:	e844 2000 	strex	r0, r2, [r4]
    b4d8:	2800      	cmp	r0, #0
    b4da:	d1f9      	bne.n	b4d0 <smp_reset+0x32>
    b4dc:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    b4e0:	7a69      	ldrb	r1, [r5, #9]
    b4e2:	7a2a      	ldrb	r2, [r5, #8]
    b4e4:	4291      	cmp	r1, r2
    b4e6:	d000      	beq.n	b4ea <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    b4e8:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    b4ea:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b4ec:	b162      	cbz	r2, b508 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b4ee:	f3bf 8f5b 	dmb	ish
    b4f2:	e853 2f00 	ldrex	r2, [r3]
    b4f6:	f042 0202 	orr.w	r2, r2, #2
    b4fa:	e843 2100 	strex	r1, r2, [r3]
    b4fe:	2900      	cmp	r1, #0
    b500:	d1f7      	bne.n	b4f2 <smp_reset+0x54>
    b502:	f3bf 8f5b 	dmb	ish
    b506:	bd38      	pop	{r3, r4, r5, pc}
    b508:	f3bf 8f5b 	dmb	ish
    b50c:	e853 2f00 	ldrex	r2, [r3]
    b510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b514:	e843 2100 	strex	r1, r2, [r3]
    b518:	2900      	cmp	r1, #0
    b51a:	d1f7      	bne.n	b50c <smp_reset+0x6e>
    b51c:	f3bf 8f5b 	dmb	ish
    b520:	bd38      	pop	{r3, r4, r5, pc}

0000b522 <smp_pairing_complete>:
{
    b522:	b508      	push	{r3, lr}
	smp_reset(smp);
    b524:	f7ff ffbb 	bl	b49e <smp_reset>
    b528:	bd08      	pop	{r3, pc}

0000b52a <smp_error>:
{
    b52a:	b570      	push	{r4, r5, r6, lr}
    b52c:	4604      	mov	r4, r0
    b52e:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    b530:	f7ff fff7 	bl	b522 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    b534:	2201      	movs	r2, #1
    b536:	2105      	movs	r1, #5
    b538:	6820      	ldr	r0, [r4, #0]
    b53a:	f7ff fa18 	bl	a96e <smp_create_pdu>
	if (!buf) {
    b53e:	b168      	cbz	r0, b55c <smp_error+0x32>
    b540:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b542:	2101      	movs	r1, #1
    b544:	3008      	adds	r0, #8
    b546:	f00f fb71 	bl	1ac2c <net_buf_simple_add>
	rsp->reason = reason;
    b54a:	7006      	strb	r6, [r0, #0]
    b54c:	2300      	movs	r3, #0
    b54e:	462a      	mov	r2, r5
    b550:	2106      	movs	r1, #6
    b552:	6820      	ldr	r0, [r4, #0]
    b554:	f7fc fd01 	bl	7f5a <bt_l2cap_send_cb>
	return 0;
    b558:	2000      	movs	r0, #0
    b55a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b55c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b560:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b564 <bt_smp_dhkey_ready>:
{
    b564:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b566:	2400      	movs	r4, #0
    b568:	b384      	cbz	r4, b5cc <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    b56a:	2400      	movs	r4, #0
	if (!smp) {
    b56c:	b36c      	cbz	r4, b5ca <bt_smp_dhkey_ready+0x66>
    b56e:	4601      	mov	r1, r0
	if (!dhkey) {
    b570:	2800      	cmp	r0, #0
    b572:	d04b      	beq.n	b60c <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    b574:	2220      	movs	r2, #32
    b576:	f204 1033 	addw	r0, r4, #307	; 0x133
    b57a:	f7f4 fea1 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b57e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b582:	f3bf 8f5b 	dmb	ish
    b586:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b58a:	f3bf 8f5b 	dmb	ish
    b58e:	f412 7f00 	tst.w	r2, #512	; 0x200
    b592:	d140      	bne.n	b616 <bt_smp_dhkey_ready+0xb2>
    b594:	f3bf 8f5b 	dmb	ish
    b598:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b59c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    b5a0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    b5a4:	d144      	bne.n	b630 <bt_smp_dhkey_ready+0xcc>
    b5a6:	f3bf 8f5b 	dmb	ish
    b5aa:	681b      	ldr	r3, [r3, #0]
    b5ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    b5b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    b5b4:	d009      	beq.n	b5ca <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b5b6:	6823      	ldr	r3, [r4, #0]
    b5b8:	78db      	ldrb	r3, [r3, #3]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d149      	bne.n	b652 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    b5be:	4620      	mov	r0, r4
    b5c0:	f7ff fcb4 	bl	af2c <compute_and_send_master_dhcheck>
			if (err) {
    b5c4:	4601      	mov	r1, r0
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d13f      	bne.n	b64a <bt_smp_dhkey_ready+0xe6>
    b5ca:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    b5cc:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b5d0:	fb03 f304 	mul.w	r3, r3, r4
    b5d4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    b5d8:	4b23      	ldr	r3, [pc, #140]	; (b668 <bt_smp_dhkey_ready+0x104>)
    b5da:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b5dc:	f3bf 8f5b 	dmb	ish
    b5e0:	e853 2f00 	ldrex	r2, [r3]
    b5e4:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    b5e8:	e843 1e00 	strex	lr, r1, [r3]
    b5ec:	f1be 0f00 	cmp.w	lr, #0
    b5f0:	d1f6      	bne.n	b5e0 <bt_smp_dhkey_ready+0x7c>
    b5f2:	f3bf 8f5b 	dmb	ish
    b5f6:	f012 0f80 	tst.w	r2, #128	; 0x80
    b5fa:	d101      	bne.n	b600 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b5fc:	3401      	adds	r4, #1
    b5fe:	e7b3      	b.n	b568 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    b600:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b604:	4b18      	ldr	r3, [pc, #96]	; (b668 <bt_smp_dhkey_ready+0x104>)
    b606:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    b60a:	e7af      	b.n	b56c <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    b60c:	210b      	movs	r1, #11
    b60e:	4620      	mov	r0, r4
    b610:	f7ff ff8b 	bl	b52a <smp_error>
		return;
    b614:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b616:	f3bf 8f5b 	dmb	ish
    b61a:	e853 2f00 	ldrex	r2, [r3]
    b61e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b622:	e843 2100 	strex	r1, r2, [r3]
    b626:	2900      	cmp	r1, #0
    b628:	d1f7      	bne.n	b61a <bt_smp_dhkey_ready+0xb6>
    b62a:	f3bf 8f5b 	dmb	ish
    b62e:	bd10      	pop	{r4, pc}
    b630:	f3bf 8f5b 	dmb	ish
    b634:	e853 2f00 	ldrex	r2, [r3]
    b638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b63c:	e843 2100 	strex	r1, r2, [r3]
    b640:	2900      	cmp	r1, #0
    b642:	d1f7      	bne.n	b634 <bt_smp_dhkey_ready+0xd0>
    b644:	f3bf 8f5b 	dmb	ish
    b648:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    b64a:	4620      	mov	r0, r4
    b64c:	f7ff ff6d 	bl	b52a <smp_error>
    b650:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    b652:	4620      	mov	r0, r4
    b654:	f7ff fcc4 	bl	afe0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    b658:	4601      	mov	r1, r0
    b65a:	2800      	cmp	r0, #0
    b65c:	d0b5      	beq.n	b5ca <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    b65e:	4620      	mov	r0, r4
    b660:	f7ff ff63 	bl	b52a <smp_error>
    b664:	e7b1      	b.n	b5ca <bt_smp_dhkey_ready+0x66>
    b666:	bf00      	nop
    b668:	200007c0 	.word	0x200007c0

0000b66c <smp_pairing_failed>:
{
    b66c:	b538      	push	{r3, r4, r5, lr}
    b66e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b670:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b672:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    b674:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b678:	3b01      	subs	r3, #1
    b67a:	2b02      	cmp	r3, #2
    b67c:	d913      	bls.n	b6a6 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b67e:	f3bf 8f5b 	dmb	ish
    b682:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b686:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b68a:	f013 0f04 	tst.w	r3, #4
    b68e:	d004      	beq.n	b69a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    b690:	6823      	ldr	r3, [r4, #0]
    b692:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b694:	b108      	cbz	r0, b69a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b696:	f001 fd98 	bl	d1ca <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    b69a:	7829      	ldrb	r1, [r5, #0]
    b69c:	4620      	mov	r0, r4
    b69e:	f7ff ff40 	bl	b522 <smp_pairing_complete>
}
    b6a2:	2000      	movs	r0, #0
    b6a4:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    b6a6:	4b02      	ldr	r3, [pc, #8]	; (b6b0 <smp_pairing_failed+0x44>)
    b6a8:	681b      	ldr	r3, [r3, #0]
    b6aa:	68db      	ldr	r3, [r3, #12]
    b6ac:	4798      	blx	r3
		break;
    b6ae:	e7e6      	b.n	b67e <smp_pairing_failed+0x12>
    b6b0:	200029b0 	.word	0x200029b0

0000b6b4 <bt_smp_disconnected>:
{
    b6b4:	b538      	push	{r3, r4, r5, lr}
    b6b6:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    b6b8:	6803      	ldr	r3, [r0, #0]
    b6ba:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    b6bc:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b6c0:	f01e fba2 	bl	29e08 <k_delayed_work_cancel>
	if (keys) {
    b6c4:	b164      	cbz	r4, b6e0 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    b6c6:	89a3      	ldrh	r3, [r4, #12]
    b6c8:	b13b      	cbz	r3, b6da <bt_smp_disconnected+0x26>
    b6ca:	f3bf 8f5b 	dmb	ish
    b6ce:	68a3      	ldr	r3, [r4, #8]
    b6d0:	f3bf 8f5b 	dmb	ish
    b6d4:	f013 0f02 	tst.w	r3, #2
    b6d8:	d002      	beq.n	b6e0 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    b6da:	4620      	mov	r0, r4
    b6dc:	f001 fd75 	bl	d1ca <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    b6e0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b6e4:	2100      	movs	r1, #0
    b6e6:	4628      	mov	r0, r5
    b6e8:	f01e fd72 	bl	2a1d0 <memset>
    b6ec:	bd38      	pop	{r3, r4, r5, pc}

0000b6ee <smp_timeout>:
{
    b6ee:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    b6f0:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b6f4:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    b6f8:	f3bf 8f5b 	dmb	ish
    b6fc:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    b700:	f3bf 8f5b 	dmb	ish
    b704:	f013 0f04 	tst.w	r3, #4
    b708:	d004      	beq.n	b714 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    b70a:	682b      	ldr	r3, [r5, #0]
    b70c:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b70e:	b108      	cbz	r0, b714 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b710:	f001 fd5b 	bl	d1ca <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b714:	2108      	movs	r1, #8
    b716:	4628      	mov	r0, r5
    b718:	f7ff ff03 	bl	b522 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b71c:	f3bf 8f5b 	dmb	ish
    b720:	e854 3f00 	ldrex	r3, [r4]
    b724:	f043 0310 	orr.w	r3, r3, #16
    b728:	e844 3200 	strex	r2, r3, [r4]
    b72c:	2a00      	cmp	r2, #0
    b72e:	d1f7      	bne.n	b720 <smp_timeout+0x32>
    b730:	f3bf 8f5b 	dmb	ish
    b734:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b738 <legacy_distribute_keys>:
{
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73c:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    b73e:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b740:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b742:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    b746:	f013 0f01 	tst.w	r3, #1
    b74a:	d102      	bne.n	b752 <legacy_distribute_keys+0x1a>
}
    b74c:	b008      	add	sp, #32
    b74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b752:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    b754:	2110      	movs	r1, #16
    b756:	eb0d 0001 	add.w	r0, sp, r1
    b75a:	f005 fef1 	bl	11540 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    b75e:	2108      	movs	r1, #8
    b760:	eb0d 0001 	add.w	r0, sp, r1
    b764:	f005 feec 	bl	11540 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    b768:	2102      	movs	r1, #2
    b76a:	f10d 0006 	add.w	r0, sp, #6
    b76e:	f005 fee7 	bl	11540 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    b772:	2210      	movs	r2, #16
    b774:	2106      	movs	r1, #6
    b776:	4628      	mov	r0, r5
    b778:	f7ff f8f9 	bl	a96e <smp_create_pdu>
		if (!buf) {
    b77c:	4607      	mov	r7, r0
    b77e:	2800      	cmp	r0, #0
    b780:	d0e4      	beq.n	b74c <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    b782:	2110      	movs	r1, #16
    b784:	3008      	adds	r0, #8
    b786:	f00f fa51 	bl	1ac2c <net_buf_simple_add>
    b78a:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    b78c:	79f2      	ldrb	r2, [r6, #7]
    b78e:	a904      	add	r1, sp, #16
    b790:	f7f4 fd96 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b794:	79f0      	ldrb	r0, [r6, #7]
    b796:	280f      	cmp	r0, #15
    b798:	d93b      	bls.n	b812 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    b79a:	2200      	movs	r2, #0
    b79c:	4639      	mov	r1, r7
    b79e:	4620      	mov	r0, r4
    b7a0:	f7ff f938 	bl	aa14 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    b7a4:	220a      	movs	r2, #10
    b7a6:	2107      	movs	r1, #7
    b7a8:	4628      	mov	r0, r5
    b7aa:	f7ff f8e0 	bl	a96e <smp_create_pdu>
		if (!buf) {
    b7ae:	4605      	mov	r5, r0
    b7b0:	2800      	cmp	r0, #0
    b7b2:	d0cb      	beq.n	b74c <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    b7b4:	210a      	movs	r1, #10
    b7b6:	3008      	adds	r0, #8
    b7b8:	f00f fa38 	bl	1ac2c <net_buf_simple_add>
		ident->rand = rand;
    b7bc:	9b03      	ldr	r3, [sp, #12]
    b7be:	9a02      	ldr	r2, [sp, #8]
    b7c0:	f8c0 2002 	str.w	r2, [r0, #2]
    b7c4:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    b7c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b7cc:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    b7ce:	4a14      	ldr	r2, [pc, #80]	; (b820 <legacy_distribute_keys+0xe8>)
    b7d0:	4629      	mov	r1, r5
    b7d2:	4620      	mov	r0, r4
    b7d4:	f7ff f91e 	bl	aa14 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b7d8:	f3bf 8f5b 	dmb	ish
    b7dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b7e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b7e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b7e8:	d0b0      	beq.n	b74c <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b7ea:	2101      	movs	r1, #1
    b7ec:	4630      	mov	r0, r6
    b7ee:	f001 fcd5 	bl	d19c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    b7f2:	2210      	movs	r2, #16
    b7f4:	eb0d 0102 	add.w	r1, sp, r2
    b7f8:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    b7fc:	f7f4 fd60 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    b800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b804:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    b808:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b80c:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    b810:	e79c      	b.n	b74c <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    b812:	f1c0 0210 	rsb	r2, r0, #16
    b816:	2100      	movs	r1, #0
    b818:	4440      	add	r0, r8
    b81a:	f01e fcd9 	bl	2a1d0 <memset>
    b81e:	e7bc      	b.n	b79a <legacy_distribute_keys+0x62>
    b820:	0000c453 	.word	0x0000c453

0000b824 <bt_smp_distribute_keys>:
{
    b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b826:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b828:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    b82a:	b176      	cbz	r6, b84a <bt_smp_distribute_keys+0x26>
    b82c:	4604      	mov	r4, r0
    b82e:	f3bf 8f5b 	dmb	ish
    b832:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b836:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b83a:	f013 0f20 	tst.w	r3, #32
    b83e:	d005      	beq.n	b84c <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b840:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    b844:	f013 0f04 	tst.w	r3, #4
    b848:	d103      	bne.n	b852 <bt_smp_distribute_keys+0x2e>
    b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    b84c:	f7ff ff74 	bl	b738 <legacy_distribute_keys>
    b850:	e7f6      	b.n	b840 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    b852:	2210      	movs	r2, #16
    b854:	210a      	movs	r1, #10
    b856:	4628      	mov	r0, r5
    b858:	f7ff f889 	bl	a96e <smp_create_pdu>
		if (!buf) {
    b85c:	4605      	mov	r5, r0
    b85e:	2800      	cmp	r0, #0
    b860:	d0f3      	beq.n	b84a <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    b862:	2110      	movs	r1, #16
    b864:	3008      	adds	r0, #8
    b866:	f00f f9e1 	bl	1ac2c <net_buf_simple_add>
    b86a:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    b86c:	2110      	movs	r1, #16
    b86e:	f005 fe67 	bl	11540 <bt_rand>
    b872:	f3bf 8f5b 	dmb	ish
    b876:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b87a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b87e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b882:	d105      	bne.n	b890 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    b884:	4a09      	ldr	r2, [pc, #36]	; (b8ac <bt_smp_distribute_keys+0x88>)
    b886:	4629      	mov	r1, r5
    b888:	4620      	mov	r0, r4
    b88a:	f7ff f8c3 	bl	aa14 <smp_send>
    b88e:	e7dc      	b.n	b84a <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    b890:	2108      	movs	r1, #8
    b892:	4630      	mov	r0, r6
    b894:	f001 fc82 	bl	d19c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    b898:	2210      	movs	r2, #16
    b89a:	4639      	mov	r1, r7
    b89c:	f106 0048 	add.w	r0, r6, #72	; 0x48
    b8a0:	f7f4 fd0e 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    b8a4:	2300      	movs	r3, #0
    b8a6:	65b3      	str	r3, [r6, #88]	; 0x58
    b8a8:	e7ec      	b.n	b884 <bt_smp_distribute_keys+0x60>
    b8aa:	bf00      	nop
    b8ac:	0000c449 	.word	0x0000c449

0000b8b0 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    b8b0:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    b8b2:	b911      	cbnz	r1, b8ba <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    b8b4:	b108      	cbz	r0, b8ba <bt_smp_encrypt_change+0xa>
    b8b6:	7a9a      	ldrb	r2, [r3, #10]
    b8b8:	b902      	cbnz	r2, b8bc <bt_smp_encrypt_change+0xc>
    b8ba:	4770      	bx	lr
{
    b8bc:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b8be:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b8c2:	f3bf 8f5b 	dmb	ish
    b8c6:	e852 1f00 	ldrex	r1, [r2]
    b8ca:	f021 0402 	bic.w	r4, r1, #2
    b8ce:	e842 4e00 	strex	lr, r4, [r2]
    b8d2:	f1be 0f00 	cmp.w	lr, #0
    b8d6:	d1f6      	bne.n	b8c6 <bt_smp_encrypt_change+0x16>
    b8d8:	f3bf 8f5b 	dmb	ish
    b8dc:	f011 0f02 	tst.w	r1, #2
    b8e0:	d100      	bne.n	b8e4 <bt_smp_encrypt_change+0x34>
    b8e2:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b8e4:	f3bf 8f5b 	dmb	ish
    b8e8:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b8ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b8f0:	f011 0f08 	tst.w	r1, #8
    b8f4:	d04b      	beq.n	b98e <bt_smp_encrypt_change+0xde>
    b8f6:	f3bf 8f5b 	dmb	ish
    b8fa:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b8fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b902:	f011 0f20 	tst.w	r1, #32
    b906:	d015      	beq.n	b934 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b908:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b90c:	f011 0f08 	tst.w	r1, #8
    b910:	d004      	beq.n	b91c <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    b912:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b916:	f011 0f08 	tst.w	r1, #8
    b91a:	d146      	bne.n	b9aa <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    b91c:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b920:	f021 0108 	bic.w	r1, r1, #8
    b924:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    b928:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b92c:	f021 0108 	bic.w	r1, r1, #8
    b930:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    b934:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b938:	f011 0f01 	tst.w	r1, #1
    b93c:	d142      	bne.n	b9c4 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b93e:	f011 0f02 	tst.w	r1, #2
    b942:	d14f      	bne.n	b9e4 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b944:	f011 0f04 	tst.w	r1, #4
    b948:	d15c      	bne.n	ba04 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b94a:	f3bf 8f5b 	dmb	ish
    b94e:	e852 1f00 	ldrex	r1, [r2]
    b952:	f041 0104 	orr.w	r1, r1, #4
    b956:	e842 1400 	strex	r4, r1, [r2]
    b95a:	2c00      	cmp	r4, #0
    b95c:	d1f7      	bne.n	b94e <bt_smp_encrypt_change+0x9e>
    b95e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b962:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b964:	b91b      	cbnz	r3, b96e <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b966:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    b96a:	2b00      	cmp	r3, #0
    b96c:	d1b9      	bne.n	b8e2 <bt_smp_encrypt_change+0x32>
    b96e:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    b970:	f7ff ff58 	bl	b824 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    b974:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b978:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b97c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b980:	2b00      	cmp	r3, #0
    b982:	d1ae      	bne.n	b8e2 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    b984:	2100      	movs	r1, #0
    b986:	4620      	mov	r0, r4
    b988:	f7ff fdcb 	bl	b522 <smp_pairing_complete>
    b98c:	e7a9      	b.n	b8e2 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    b98e:	309c      	adds	r0, #156	; 0x9c
    b990:	f3bf 8f5b 	dmb	ish
    b994:	e850 3f00 	ldrex	r3, [r0]
    b998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    b99c:	e840 3200 	strex	r2, r3, [r0]
    b9a0:	2a00      	cmp	r2, #0
    b9a2:	d1f7      	bne.n	b994 <bt_smp_encrypt_change+0xe4>
    b9a4:	f3bf 8f5b 	dmb	ish
    b9a8:	bd10      	pop	{r4, pc}
    b9aa:	f3bf 8f5b 	dmb	ish
    b9ae:	e852 1f00 	ldrex	r1, [r2]
    b9b2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    b9b6:	e842 1400 	strex	r4, r1, [r2]
    b9ba:	2c00      	cmp	r4, #0
    b9bc:	d1f7      	bne.n	b9ae <bt_smp_encrypt_change+0xfe>
    b9be:	f3bf 8f5b 	dmb	ish
    b9c2:	e7ab      	b.n	b91c <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    b9c4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b9c8:	f3bf 8f5b 	dmb	ish
    b9cc:	e851 4f00 	ldrex	r4, [r1]
    b9d0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    b9d4:	e841 4e00 	strex	lr, r4, [r1]
    b9d8:	f1be 0f00 	cmp.w	lr, #0
    b9dc:	d1f6      	bne.n	b9cc <bt_smp_encrypt_change+0x11c>
    b9de:	f3bf 8f5b 	dmb	ish
    b9e2:	e7b2      	b.n	b94a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b9e4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b9e8:	f3bf 8f5b 	dmb	ish
    b9ec:	e851 4f00 	ldrex	r4, [r1]
    b9f0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    b9f4:	e841 4e00 	strex	lr, r4, [r1]
    b9f8:	f1be 0f00 	cmp.w	lr, #0
    b9fc:	d1f6      	bne.n	b9ec <bt_smp_encrypt_change+0x13c>
    b9fe:	f3bf 8f5b 	dmb	ish
    ba02:	e7a2      	b.n	b94a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ba04:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    ba08:	f3bf 8f5b 	dmb	ish
    ba0c:	e851 4f00 	ldrex	r4, [r1]
    ba10:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    ba14:	e841 4e00 	strex	lr, r4, [r1]
    ba18:	f1be 0f00 	cmp.w	lr, #0
    ba1c:	d1f6      	bne.n	ba0c <bt_smp_encrypt_change+0x15c>
    ba1e:	f3bf 8f5b 	dmb	ish
    ba22:	e792      	b.n	b94a <bt_smp_encrypt_change+0x9a>

0000ba24 <bt_smp_recv>:
{
    ba24:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    ba26:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    ba28:	898b      	ldrh	r3, [r1, #12]
    ba2a:	b903      	cbnz	r3, ba2e <bt_smp_recv+0xa>
    ba2c:	bd70      	pop	{r4, r5, r6, pc}
    ba2e:	460c      	mov	r4, r1
    ba30:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    ba32:	2101      	movs	r1, #1
    ba34:	f104 0008 	add.w	r0, r4, #8
    ba38:	f00f f945 	bl	1acc6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba3c:	f3bf 8f5b 	dmb	ish
    ba40:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    ba44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ba48:	f013 0f10 	tst.w	r3, #16
    ba4c:	d1ee      	bne.n	ba2c <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    ba4e:	7833      	ldrb	r3, [r6, #0]
    ba50:	2b0d      	cmp	r3, #13
    ba52:	d824      	bhi.n	ba9e <bt_smp_recv+0x7a>
    ba54:	4a21      	ldr	r2, [pc, #132]	; (badc <bt_smp_recv+0xb8>)
    ba56:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    ba5a:	b302      	cbz	r2, ba9e <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    ba5c:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ba60:	f003 001f 	and.w	r0, r3, #31
    ba64:	2101      	movs	r1, #1
    ba66:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba68:	095b      	lsrs	r3, r3, #5
    ba6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ba6e:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ba70:	f3bf 8f5b 	dmb	ish
    ba74:	e853 2f00 	ldrex	r2, [r3]
    ba78:	ea02 0e00 	and.w	lr, r2, r0
    ba7c:	e843 ec00 	strex	ip, lr, [r3]
    ba80:	f1bc 0f00 	cmp.w	ip, #0
    ba84:	d1f6      	bne.n	ba74 <bt_smp_recv+0x50>
    ba86:	f3bf 8f5b 	dmb	ish
    ba8a:	4211      	tst	r1, r2
    ba8c:	d10c      	bne.n	baa8 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    ba8e:	7833      	ldrb	r3, [r6, #0]
    ba90:	2b05      	cmp	r3, #5
    ba92:	d0cb      	beq.n	ba2c <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ba94:	2108      	movs	r1, #8
    ba96:	4628      	mov	r0, r5
    ba98:	f7ff fd47 	bl	b52a <smp_error>
    ba9c:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    ba9e:	2107      	movs	r1, #7
    baa0:	4628      	mov	r0, r5
    baa2:	f7ff fd42 	bl	b52a <smp_error>
		return;
    baa6:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    baa8:	89a1      	ldrh	r1, [r4, #12]
    baaa:	7832      	ldrb	r2, [r6, #0]
    baac:	4b0b      	ldr	r3, [pc, #44]	; (badc <bt_smp_recv+0xb8>)
    baae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bab2:	791b      	ldrb	r3, [r3, #4]
    bab4:	4299      	cmp	r1, r3
    bab6:	d004      	beq.n	bac2 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bab8:	210a      	movs	r1, #10
    baba:	4628      	mov	r0, r5
    babc:	f7ff fd35 	bl	b52a <smp_error>
		return;
    bac0:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    bac2:	4b06      	ldr	r3, [pc, #24]	; (badc <bt_smp_recv+0xb8>)
    bac4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    bac8:	4621      	mov	r1, r4
    baca:	4628      	mov	r0, r5
    bacc:	4798      	blx	r3
	if (err) {
    bace:	4601      	mov	r1, r0
    bad0:	2800      	cmp	r0, #0
    bad2:	d0ab      	beq.n	ba2c <bt_smp_recv+0x8>
		smp_error(smp, err);
    bad4:	4628      	mov	r0, r5
    bad6:	f7ff fd28 	bl	b52a <smp_error>
    bada:	e7a7      	b.n	ba2c <bt_smp_recv+0x8>
    badc:	00030ed4 	.word	0x00030ed4

0000bae0 <smp_dhkey_check>:
{
    bae0:	b570      	push	{r4, r5, r6, lr}
    bae2:	b08c      	sub	sp, #48	; 0x30
    bae4:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    bae6:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bae8:	6803      	ldr	r3, [r0, #0]
    baea:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    baec:	b12c      	cbz	r4, bafa <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    baee:	2c01      	cmp	r4, #1
    baf0:	d058      	beq.n	bba4 <smp_dhkey_check+0xc4>
	return 0;
    baf2:	2400      	movs	r4, #0
}
    baf4:	4620      	mov	r0, r4
    baf6:	b00c      	add	sp, #48	; 0x30
    baf8:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    bafa:	2210      	movs	r2, #16
    bafc:	2100      	movs	r1, #0
    bafe:	a808      	add	r0, sp, #32
    bb00:	f01e fb66 	bl	2a1d0 <memset>
		switch (smp->method) {
    bb04:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    bb08:	2b03      	cmp	r3, #3
    bb0a:	d847      	bhi.n	bb9c <smp_dhkey_check+0xbc>
    bb0c:	e8df f003 	tbb	[pc, r3]
    bb10:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bb14:	2204      	movs	r2, #4
    bb16:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    bb1a:	a808      	add	r0, sp, #32
    bb1c:	f7f4 fbd0 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bb20:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    bb24:	682b      	ldr	r3, [r5, #0]
    bb26:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    bb2a:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bb2c:	a804      	add	r0, sp, #16
    bb2e:	9003      	str	r0, [sp, #12]
    bb30:	9302      	str	r3, [sp, #8]
    bb32:	9101      	str	r1, [sp, #4]
    bb34:	9200      	str	r2, [sp, #0]
    bb36:	ab08      	add	r3, sp, #32
    bb38:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    bb3c:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    bb40:	f205 1063 	addw	r0, r5, #355	; 0x163
    bb44:	f7ff f96e 	bl	ae24 <smp_f6>
    bb48:	b108      	cbz	r0, bb4e <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    bb4a:	2408      	movs	r4, #8
    bb4c:	e7d2      	b.n	baf4 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    bb4e:	2210      	movs	r2, #16
    bb50:	4631      	mov	r1, r6
    bb52:	eb0d 0002 	add.w	r0, sp, r2
    bb56:	f01e faa7 	bl	2a0a8 <memcmp>
    bb5a:	b108      	cbz	r0, bb60 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    bb5c:	240b      	movs	r4, #11
    bb5e:	e7c9      	b.n	baf4 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    bb60:	4628      	mov	r0, r5
    bb62:	f7fe fe63 	bl	a82c <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    bb66:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    bb6a:	9002      	str	r0, [sp, #8]
    bb6c:	9301      	str	r3, [sp, #4]
    bb6e:	2300      	movs	r3, #0
    bb70:	9300      	str	r3, [sp, #0]
    bb72:	2200      	movs	r2, #0
    bb74:	2300      	movs	r3, #0
    bb76:	6828      	ldr	r0, [r5, #0]
    bb78:	f7fb f898 	bl	6cac <bt_conn_le_start_encryption>
    bb7c:	2800      	cmp	r0, #0
    bb7e:	db0f      	blt.n	bba0 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bb80:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb82:	f3bf 8f5b 	dmb	ish
    bb86:	e855 3f00 	ldrex	r3, [r5]
    bb8a:	f043 0302 	orr.w	r3, r3, #2
    bb8e:	e845 3200 	strex	r2, r3, [r5]
    bb92:	2a00      	cmp	r2, #0
    bb94:	d1f7      	bne.n	bb86 <smp_dhkey_check+0xa6>
    bb96:	f3bf 8f5b 	dmb	ish
		return 0;
    bb9a:	e7ab      	b.n	baf4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bb9c:	2408      	movs	r4, #8
    bb9e:	e7a9      	b.n	baf4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bba0:	2408      	movs	r4, #8
    bba2:	e7a7      	b.n	baf4 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bba4:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bba8:	f3bf 8f5b 	dmb	ish
    bbac:	e854 3f00 	ldrex	r3, [r4]
    bbb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bbb4:	e844 3200 	strex	r2, r3, [r4]
    bbb8:	2a00      	cmp	r2, #0
    bbba:	d1f7      	bne.n	bbac <smp_dhkey_check+0xcc>
    bbbc:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    bbc0:	2210      	movs	r2, #16
    bbc2:	4631      	mov	r1, r6
    bbc4:	f205 1053 	addw	r0, r5, #339	; 0x153
    bbc8:	f7f4 fb7a 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbcc:	f3bf 8f5b 	dmb	ish
    bbd0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bbd4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bbd8:	f013 0f80 	tst.w	r3, #128	; 0x80
    bbdc:	d10d      	bne.n	bbfa <smp_dhkey_check+0x11a>
    bbde:	f3bf 8f5b 	dmb	ish
    bbe2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bbe6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bbea:	f413 7f00 	tst.w	r3, #512	; 0x200
    bbee:	d112      	bne.n	bc16 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    bbf0:	4628      	mov	r0, r5
    bbf2:	f7ff f9f5 	bl	afe0 <compute_and_check_and_send_slave_dhcheck>
    bbf6:	4604      	mov	r4, r0
    bbf8:	e77c      	b.n	baf4 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbfa:	f3bf 8f5b 	dmb	ish
    bbfe:	e854 3f00 	ldrex	r3, [r4]
    bc02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bc06:	e844 3200 	strex	r2, r3, [r4]
    bc0a:	2a00      	cmp	r2, #0
    bc0c:	d1f7      	bne.n	bbfe <smp_dhkey_check+0x11e>
    bc0e:	f3bf 8f5b 	dmb	ish
			return 0;
    bc12:	2400      	movs	r4, #0
    bc14:	e76e      	b.n	baf4 <smp_dhkey_check+0x14>
    bc16:	f3bf 8f5b 	dmb	ish
    bc1a:	e854 3f00 	ldrex	r3, [r4]
    bc1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bc22:	e844 3200 	strex	r2, r3, [r4]
    bc26:	2a00      	cmp	r2, #0
    bc28:	d1f7      	bne.n	bc1a <smp_dhkey_check+0x13a>
    bc2a:	f3bf 8f5b 	dmb	ish
			return 0;
    bc2e:	2400      	movs	r4, #0
    bc30:	e760      	b.n	baf4 <smp_dhkey_check+0x14>

0000bc32 <legacy_pairing_random>:
{
    bc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc36:	b088      	sub	sp, #32
    bc38:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bc3a:	4605      	mov	r5, r0
    bc3c:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bc40:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bc44:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    bc48:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bc4c:	a904      	add	r1, sp, #16
    bc4e:	9102      	str	r1, [sp, #8]
    bc50:	9201      	str	r2, [sp, #4]
    bc52:	9300      	str	r3, [sp, #0]
    bc54:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    bc58:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    bc5c:	4641      	mov	r1, r8
    bc5e:	4628      	mov	r0, r5
    bc60:	f7ff fada 	bl	b218 <smp_c1>
	if (err) {
    bc64:	b120      	cbz	r0, bc70 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    bc66:	2708      	movs	r7, #8
}
    bc68:	4638      	mov	r0, r7
    bc6a:	b008      	add	sp, #32
    bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    bc70:	2210      	movs	r2, #16
    bc72:	eb0d 0102 	add.w	r1, sp, r2
    bc76:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    bc7a:	f01e fa15 	bl	2a0a8 <memcmp>
    bc7e:	b108      	cbz	r0, bc84 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    bc80:	2704      	movs	r7, #4
    bc82:	e7f1      	b.n	bc68 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    bc84:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc86:	bb3f      	cbnz	r7, bcd8 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    bc88:	ab04      	add	r3, sp, #16
    bc8a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bc8e:	4641      	mov	r1, r8
    bc90:	4628      	mov	r0, r5
    bc92:	f7ff fbf0 	bl	b476 <smp_s1>
		if (err) {
    bc96:	b108      	cbz	r0, bc9c <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    bc98:	2708      	movs	r7, #8
    bc9a:	e7e5      	b.n	bc68 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    bc9c:	4620      	mov	r0, r4
    bc9e:	f7fe fdc5 	bl	a82c <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    bca2:	9002      	str	r0, [sp, #8]
    bca4:	ab04      	add	r3, sp, #16
    bca6:	9301      	str	r3, [sp, #4]
    bca8:	2300      	movs	r3, #0
    bcaa:	9300      	str	r3, [sp, #0]
    bcac:	2200      	movs	r2, #0
    bcae:	2300      	movs	r3, #0
    bcb0:	4630      	mov	r0, r6
    bcb2:	f7fa fffb 	bl	6cac <bt_conn_le_start_encryption>
    bcb6:	b108      	cbz	r0, bcbc <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    bcb8:	2708      	movs	r7, #8
    bcba:	e7d5      	b.n	bc68 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bcbc:	34a0      	adds	r4, #160	; 0xa0
    bcbe:	f3bf 8f5b 	dmb	ish
    bcc2:	e854 3f00 	ldrex	r3, [r4]
    bcc6:	f043 0302 	orr.w	r3, r3, #2
    bcca:	e844 3200 	strex	r2, r3, [r4]
    bcce:	2a00      	cmp	r2, #0
    bcd0:	d1f7      	bne.n	bcc2 <legacy_pairing_random+0x90>
    bcd2:	f3bf 8f5b 	dmb	ish
		return 0;
    bcd6:	e7c7      	b.n	bc68 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    bcd8:	ab04      	add	r3, sp, #16
    bcda:	4642      	mov	r2, r8
    bcdc:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    bce0:	4628      	mov	r0, r5
    bce2:	f7ff fbc8 	bl	b476 <smp_s1>
		if (err) {
    bce6:	b108      	cbz	r0, bcec <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    bce8:	2708      	movs	r7, #8
    bcea:	e7bd      	b.n	bc68 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    bcec:	2210      	movs	r2, #16
    bcee:	eb0d 0102 	add.w	r1, sp, r2
    bcf2:	4628      	mov	r0, r5
    bcf4:	f7f4 fae4 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bcf8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bcfc:	f3bf 8f5b 	dmb	ish
    bd00:	e853 2f00 	ldrex	r2, [r3]
    bd04:	f042 0202 	orr.w	r2, r2, #2
    bd08:	e843 2100 	strex	r1, r2, [r3]
    bd0c:	2900      	cmp	r1, #0
    bd0e:	d1f7      	bne.n	bd00 <legacy_pairing_random+0xce>
    bd10:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    bd14:	4620      	mov	r0, r4
    bd16:	f7fe feea 	bl	aaee <smp_send_pairing_random>
	return 0;
    bd1a:	2700      	movs	r7, #0
    bd1c:	e7a4      	b.n	bc68 <legacy_pairing_random+0x36>
	...

0000bd20 <smp_pairing_random>:
{
    bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd22:	b085      	sub	sp, #20
    bd24:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bd26:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    bd2a:	2210      	movs	r2, #16
    bd2c:	6889      	ldr	r1, [r1, #8]
    bd2e:	4628      	mov	r0, r5
    bd30:	f7f4 fac6 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd34:	f3bf 8f5b 	dmb	ish
    bd38:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bd3c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bd40:	f013 0f20 	tst.w	r3, #32
    bd44:	d00d      	beq.n	bd62 <smp_pairing_random+0x42>
    bd46:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bd4a:	6823      	ldr	r3, [r4, #0]
    bd4c:	78db      	ldrb	r3, [r3, #3]
    bd4e:	b17b      	cbz	r3, bd70 <smp_pairing_random+0x50>
	switch (smp->method) {
    bd50:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bd54:	2b03      	cmp	r3, #3
    bd56:	f200 8106 	bhi.w	bf66 <smp_pairing_random+0x246>
    bd5a:	e8df f003 	tbb	[pc, r3]
    bd5e:	bfa0      	.short	0xbfa0
    bd60:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    bd62:	4620      	mov	r0, r4
    bd64:	f7ff ff65 	bl	bc32 <legacy_pairing_random>
    bd68:	4606      	mov	r6, r0
}
    bd6a:	4630      	mov	r0, r6
    bd6c:	b005      	add	sp, #20
    bd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    bd70:	4620      	mov	r0, r4
    bd72:	f7fe ff83 	bl	ac7c <sc_smp_check_confirm>
		if (err) {
    bd76:	4606      	mov	r6, r0
    bd78:	2800      	cmp	r0, #0
    bd7a:	d1f6      	bne.n	bd6a <smp_pairing_random+0x4a>
		switch (smp->method) {
    bd7c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bd80:	2b03      	cmp	r3, #3
    bd82:	f200 80ee 	bhi.w	bf62 <smp_pairing_random+0x242>
    bd86:	e8df f003 	tbb	[pc, r3]
    bd8a:	2e50      	.short	0x2e50
    bd8c:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    bd8e:	ab03      	add	r3, sp, #12
    bd90:	9300      	str	r3, [sp, #0]
    bd92:	462b      	mov	r3, r5
    bd94:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bd98:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    bd9c:	4873      	ldr	r0, [pc, #460]	; (bf6c <smp_pairing_random+0x24c>)
    bd9e:	f7ff f995 	bl	b0cc <smp_g2>
    bda2:	b108      	cbz	r0, bda8 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    bda4:	2608      	movs	r6, #8
    bda6:	e7e0      	b.n	bd6a <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bda8:	f3bf 8f5b 	dmb	ish
    bdac:	e857 3f00 	ldrex	r3, [r7]
    bdb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bdb4:	e847 3200 	strex	r2, r3, [r7]
    bdb8:	2a00      	cmp	r2, #0
    bdba:	d1f7      	bne.n	bdac <smp_pairing_random+0x8c>
    bdbc:	f3bf 8f5b 	dmb	ish
    bdc0:	f3bf 8f5b 	dmb	ish
    bdc4:	e857 3f00 	ldrex	r3, [r7]
    bdc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bdcc:	e847 3200 	strex	r2, r3, [r7]
    bdd0:	2a00      	cmp	r2, #0
    bdd2:	d1f7      	bne.n	bdc4 <smp_pairing_random+0xa4>
    bdd4:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bdd8:	4b65      	ldr	r3, [pc, #404]	; (bf70 <smp_pairing_random+0x250>)
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	689b      	ldr	r3, [r3, #8]
    bdde:	9903      	ldr	r1, [sp, #12]
    bde0:	6820      	ldr	r0, [r4, #0]
    bde2:	4798      	blx	r3
			return 0;
    bde4:	e7c1      	b.n	bd6a <smp_pairing_random+0x4a>
			smp->passkey_round++;
    bde6:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bdea:	3301      	adds	r3, #1
    bdec:	b2db      	uxtb	r3, r3
    bdee:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    bdf2:	2b14      	cmp	r3, #20
    bdf4:	d019      	beq.n	be2a <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    bdf6:	2110      	movs	r1, #16
    bdf8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bdfc:	f005 fba0 	bl	11540 <bt_rand>
    be00:	b108      	cbz	r0, be06 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    be02:	2608      	movs	r6, #8
    be04:	e7b1      	b.n	bd6a <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    be06:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    be0a:	f3bf 8f5b 	dmb	ish
    be0e:	e853 2f00 	ldrex	r2, [r3]
    be12:	f042 0208 	orr.w	r2, r2, #8
    be16:	e843 2100 	strex	r1, r2, [r3]
    be1a:	2900      	cmp	r1, #0
    be1c:	d1f7      	bne.n	be0e <smp_pairing_random+0xee>
    be1e:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    be22:	4620      	mov	r0, r4
    be24:	f7ff f9aa 	bl	b17c <smp_send_pairing_confirm>
			return 0;
    be28:	e79f      	b.n	bd6a <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be2a:	f3bf 8f5b 	dmb	ish
    be2e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    be32:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    be36:	f013 0f80 	tst.w	r3, #128	; 0x80
    be3a:	d00c      	beq.n	be56 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be3c:	f3bf 8f5b 	dmb	ish
    be40:	e857 3f00 	ldrex	r3, [r7]
    be44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    be48:	e847 3200 	strex	r2, r3, [r7]
    be4c:	2a00      	cmp	r2, #0
    be4e:	d1f7      	bne.n	be40 <smp_pairing_random+0x120>
    be50:	f3bf 8f5b 	dmb	ish
			return 0;
    be54:	e789      	b.n	bd6a <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    be56:	4620      	mov	r0, r4
    be58:	f7ff f868 	bl	af2c <compute_and_send_master_dhcheck>
    be5c:	4606      	mov	r6, r0
    be5e:	e784      	b.n	bd6a <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    be60:	ab03      	add	r3, sp, #12
    be62:	9300      	str	r3, [sp, #0]
    be64:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    be68:	462a      	mov	r2, r5
    be6a:	4940      	ldr	r1, [pc, #256]	; (bf6c <smp_pairing_random+0x24c>)
    be6c:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    be70:	f7ff f92c 	bl	b0cc <smp_g2>
    be74:	b108      	cbz	r0, be7a <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    be76:	2608      	movs	r6, #8
    be78:	e777      	b.n	bd6a <smp_pairing_random+0x4a>
    be7a:	f3bf 8f5b 	dmb	ish
    be7e:	e857 3f00 	ldrex	r3, [r7]
    be82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be86:	e847 3200 	strex	r2, r3, [r7]
    be8a:	2a00      	cmp	r2, #0
    be8c:	d1f7      	bne.n	be7e <smp_pairing_random+0x15e>
    be8e:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    be92:	4b37      	ldr	r3, [pc, #220]	; (bf70 <smp_pairing_random+0x250>)
    be94:	681b      	ldr	r3, [r3, #0]
    be96:	689b      	ldr	r3, [r3, #8]
    be98:	9903      	ldr	r1, [sp, #12]
    be9a:	6820      	ldr	r0, [r4, #0]
    be9c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    be9e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bea2:	f3bf 8f5b 	dmb	ish
    bea6:	e853 2f00 	ldrex	r2, [r3]
    beaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    beae:	e843 2100 	strex	r1, r2, [r3]
    beb2:	2900      	cmp	r1, #0
    beb4:	d1f7      	bne.n	bea6 <smp_pairing_random+0x186>
    beb6:	f3bf 8f5b 	dmb	ish
    beba:	f3bf 8f5b 	dmb	ish
    bebe:	e857 3f00 	ldrex	r3, [r7]
    bec2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bec6:	e847 3200 	strex	r2, r3, [r7]
    beca:	2a00      	cmp	r2, #0
    becc:	d1f7      	bne.n	bebe <smp_pairing_random+0x19e>
    bece:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    bed2:	4620      	mov	r0, r4
    bed4:	f7fe fe0b 	bl	aaee <smp_send_pairing_random>
	return 0;
    bed8:	2600      	movs	r6, #0
    beda:	e746      	b.n	bd6a <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    bedc:	4620      	mov	r0, r4
    bede:	f7fe fecd 	bl	ac7c <sc_smp_check_confirm>
		if (err) {
    bee2:	4606      	mov	r6, r0
    bee4:	2800      	cmp	r0, #0
    bee6:	f47f af40 	bne.w	bd6a <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    beea:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    beee:	f3bf 8f5b 	dmb	ish
    bef2:	e855 3f00 	ldrex	r3, [r5]
    bef6:	f043 0308 	orr.w	r3, r3, #8
    befa:	e845 3200 	strex	r2, r3, [r5]
    befe:	2a00      	cmp	r2, #0
    bf00:	d1f7      	bne.n	bef2 <smp_pairing_random+0x1d2>
    bf02:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    bf06:	4620      	mov	r0, r4
    bf08:	f7fe fdf1 	bl	aaee <smp_send_pairing_random>
		smp->passkey_round++;
    bf0c:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bf10:	3301      	adds	r3, #1
    bf12:	b2db      	uxtb	r3, r3
    bf14:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    bf18:	2b14      	cmp	r3, #20
    bf1a:	d009      	beq.n	bf30 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    bf1c:	2110      	movs	r1, #16
    bf1e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bf22:	f005 fb0d 	bl	11540 <bt_rand>
    bf26:	2800      	cmp	r0, #0
    bf28:	f43f af1f 	beq.w	bd6a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    bf2c:	2608      	movs	r6, #8
    bf2e:	e71c      	b.n	bd6a <smp_pairing_random+0x4a>
    bf30:	f3bf 8f5b 	dmb	ish
    bf34:	e855 3f00 	ldrex	r3, [r5]
    bf38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bf3c:	e845 3200 	strex	r2, r3, [r5]
    bf40:	2a00      	cmp	r2, #0
    bf42:	d1f7      	bne.n	bf34 <smp_pairing_random+0x214>
    bf44:	f3bf 8f5b 	dmb	ish
    bf48:	f3bf 8f5b 	dmb	ish
    bf4c:	e857 3f00 	ldrex	r3, [r7]
    bf50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bf54:	e847 3200 	strex	r2, r3, [r7]
    bf58:	2a00      	cmp	r2, #0
    bf5a:	d1f7      	bne.n	bf4c <smp_pairing_random+0x22c>
    bf5c:	f3bf 8f5b 	dmb	ish
			return 0;
    bf60:	e703      	b.n	bd6a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    bf62:	2608      	movs	r6, #8
    bf64:	e701      	b.n	bd6a <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    bf66:	2608      	movs	r6, #8
    bf68:	e6ff      	b.n	bd6a <smp_pairing_random+0x4a>
    bf6a:	bf00      	nop
    bf6c:	20000968 	.word	0x20000968
    bf70:	200029b0 	.word	0x200029b0

0000bf74 <generate_dhkey>:
{
    bf74:	b510      	push	{r4, lr}
    bf76:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    bf78:	490a      	ldr	r1, [pc, #40]	; (bfa4 <generate_dhkey+0x30>)
    bf7a:	30f3      	adds	r0, #243	; 0xf3
    bf7c:	f7fa fd1e 	bl	69bc <bt_dh_key_gen>
    bf80:	b108      	cbz	r0, bf86 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    bf82:	2008      	movs	r0, #8
}
    bf84:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    bf86:	34a0      	adds	r4, #160	; 0xa0
    bf88:	f3bf 8f5b 	dmb	ish
    bf8c:	e854 3f00 	ldrex	r3, [r4]
    bf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf94:	e844 3200 	strex	r2, r3, [r4]
    bf98:	2a00      	cmp	r2, #0
    bf9a:	d1f7      	bne.n	bf8c <generate_dhkey+0x18>
    bf9c:	f3bf 8f5b 	dmb	ish
	return 0;
    bfa0:	bd10      	pop	{r4, pc}
    bfa2:	bf00      	nop
    bfa4:	0000b565 	.word	0x0000b565

0000bfa8 <smp_public_key_slave>:
{
    bfa8:	b510      	push	{r4, lr}
    bfaa:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    bfac:	f7fe fd60 	bl	aa70 <sc_send_public_key>
	if (err) {
    bfb0:	4603      	mov	r3, r0
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d154      	bne.n	c060 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    bfb6:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bfba:	2b03      	cmp	r3, #3
    bfbc:	d852      	bhi.n	c064 <smp_public_key_slave+0xbc>
    bfbe:	e8df f003 	tbb	[pc, r3]
    bfc2:	2a02      	.short	0x2a02
    bfc4:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bfc6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bfca:	f3bf 8f5b 	dmb	ish
    bfce:	e853 2f00 	ldrex	r2, [r3]
    bfd2:	f042 0210 	orr.w	r2, r2, #16
    bfd6:	e843 2100 	strex	r1, r2, [r3]
    bfda:	2900      	cmp	r1, #0
    bfdc:	d1f7      	bne.n	bfce <smp_public_key_slave+0x26>
    bfde:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    bfe2:	4620      	mov	r0, r4
    bfe4:	f7ff f8ca 	bl	b17c <smp_send_pairing_confirm>
		if (err) {
    bfe8:	4603      	mov	r3, r0
    bfea:	b3a8      	cbz	r0, c058 <smp_public_key_slave+0xb0>
    bfec:	e038      	b.n	c060 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    bfee:	4620      	mov	r0, r4
    bff0:	f7fe fcea 	bl	a9c8 <display_passkey>
		if (err) {
    bff4:	4603      	mov	r3, r0
    bff6:	bb98      	cbnz	r0, c060 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bff8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bffc:	f3bf 8f5b 	dmb	ish
    c000:	e853 2f00 	ldrex	r2, [r3]
    c004:	f042 0208 	orr.w	r2, r2, #8
    c008:	e843 2100 	strex	r1, r2, [r3]
    c00c:	2900      	cmp	r1, #0
    c00e:	d1f7      	bne.n	c000 <smp_public_key_slave+0x58>
    c010:	f3bf 8f5b 	dmb	ish
    c014:	e020      	b.n	c058 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c016:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c01a:	f3bf 8f5b 	dmb	ish
    c01e:	e853 2f00 	ldrex	r2, [r3]
    c022:	f042 0208 	orr.w	r2, r2, #8
    c026:	e843 2100 	strex	r1, r2, [r3]
    c02a:	2900      	cmp	r1, #0
    c02c:	d1f7      	bne.n	c01e <smp_public_key_slave+0x76>
    c02e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c032:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c036:	f3bf 8f5b 	dmb	ish
    c03a:	e853 2f00 	ldrex	r2, [r3]
    c03e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c042:	e843 2100 	strex	r1, r2, [r3]
    c046:	2900      	cmp	r1, #0
    c048:	d1f7      	bne.n	c03a <smp_public_key_slave+0x92>
    c04a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    c04e:	4b06      	ldr	r3, [pc, #24]	; (c068 <smp_public_key_slave+0xc0>)
    c050:	681b      	ldr	r3, [r3, #0]
    c052:	685b      	ldr	r3, [r3, #4]
    c054:	6820      	ldr	r0, [r4, #0]
    c056:	4798      	blx	r3
	return generate_dhkey(smp);
    c058:	4620      	mov	r0, r4
    c05a:	f7ff ff8b 	bl	bf74 <generate_dhkey>
    c05e:	4603      	mov	r3, r0
}
    c060:	4618      	mov	r0, r3
    c062:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c064:	2308      	movs	r3, #8
    c066:	e7fb      	b.n	c060 <smp_public_key_slave+0xb8>
    c068:	200029b0 	.word	0x200029b0

0000c06c <bt_smp_pkey_ready>:
{
    c06c:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c06e:	b150      	cbz	r0, c086 <bt_smp_pkey_ready+0x1a>
    c070:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c072:	2240      	movs	r2, #64	; 0x40
    c074:	4826      	ldr	r0, [pc, #152]	; (c110 <bt_smp_pkey_ready+0xa4>)
    c076:	f7f4 f923 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c07a:	2201      	movs	r2, #1
    c07c:	4b25      	ldr	r3, [pc, #148]	; (c114 <bt_smp_pkey_ready+0xa8>)
    c07e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c080:	2400      	movs	r4, #0
    c082:	b124      	cbz	r4, c08e <bt_smp_pkey_ready+0x22>
    c084:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c086:	2200      	movs	r2, #0
    c088:	4b22      	ldr	r3, [pc, #136]	; (c114 <bt_smp_pkey_ready+0xa8>)
    c08a:	701a      	strb	r2, [r3, #0]
		return;
    c08c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c08e:	4a22      	ldr	r2, [pc, #136]	; (c118 <bt_smp_pkey_ready+0xac>)
    c090:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c094:	fb03 f304 	mul.w	r3, r3, r4
    c098:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c09a:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c09c:	f3bf 8f5b 	dmb	ish
    c0a0:	58d3      	ldr	r3, [r2, r3]
    c0a2:	f3bf 8f5b 	dmb	ish
    c0a6:	f013 0f40 	tst.w	r3, #64	; 0x40
    c0aa:	d020      	beq.n	c0ee <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c0ac:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c0b0:	fb03 f304 	mul.w	r3, r3, r4
    c0b4:	58d3      	ldr	r3, [r2, r3]
    c0b6:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c0b8:	b9fb      	cbnz	r3, c0fa <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c0ba:	4628      	mov	r0, r5
    c0bc:	f7fe fcd8 	bl	aa70 <sc_send_public_key>
			if (err) {
    c0c0:	4601      	mov	r1, r0
    c0c2:	b9b0      	cbnz	r0, c0f2 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c0c4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c0c8:	fb03 f304 	mul.w	r3, r3, r4
    c0cc:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c0d0:	4b11      	ldr	r3, [pc, #68]	; (c118 <bt_smp_pkey_ready+0xac>)
    c0d2:	4413      	add	r3, r2
    c0d4:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0d6:	f3bf 8f5b 	dmb	ish
    c0da:	e853 2f00 	ldrex	r2, [r3]
    c0de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c0e2:	e843 2100 	strex	r1, r2, [r3]
    c0e6:	2900      	cmp	r1, #0
    c0e8:	d1f7      	bne.n	c0da <bt_smp_pkey_ready+0x6e>
    c0ea:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c0ee:	3401      	adds	r4, #1
    c0f0:	e7c7      	b.n	c082 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c0f2:	4628      	mov	r0, r5
    c0f4:	f7ff fa19 	bl	b52a <smp_error>
    c0f8:	e7e4      	b.n	c0c4 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c0fa:	4628      	mov	r0, r5
    c0fc:	f7ff ff54 	bl	bfa8 <smp_public_key_slave>
		if (err) {
    c100:	4601      	mov	r1, r0
    c102:	2800      	cmp	r0, #0
    c104:	d0f3      	beq.n	c0ee <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c106:	4628      	mov	r0, r5
    c108:	f7ff fa0f 	bl	b52a <smp_error>
    c10c:	e7ef      	b.n	c0ee <bt_smp_pkey_ready+0x82>
    c10e:	bf00      	nop
    c110:	20000968 	.word	0x20000968
    c114:	20000964 	.word	0x20000964
    c118:	200007c0 	.word	0x200007c0

0000c11c <smp_public_key>:
{
    c11c:	b570      	push	{r4, r5, r6, lr}
    c11e:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c120:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c122:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c126:	2220      	movs	r2, #32
    c128:	4631      	mov	r1, r6
    c12a:	4628      	mov	r0, r5
    c12c:	f7f4 f8c8 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c130:	2220      	movs	r2, #32
    c132:	18b1      	adds	r1, r6, r2
    c134:	f204 1013 	addw	r0, r4, #275	; 0x113
    c138:	f7f4 f8c2 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c13c:	2240      	movs	r2, #64	; 0x40
    c13e:	493d      	ldr	r1, [pc, #244]	; (c234 <smp_public_key+0x118>)
    c140:	4628      	mov	r0, r5
    c142:	f01d ffb1 	bl	2a0a8 <memcmp>
    c146:	b158      	cbz	r0, c160 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c148:	6823      	ldr	r3, [r4, #0]
    c14a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c14c:	2b00      	cmp	r3, #0
    c14e:	d156      	bne.n	c1fe <smp_public_key+0xe2>
		switch (smp->method) {
    c150:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c154:	2b03      	cmp	r3, #3
    c156:	d86a      	bhi.n	c22e <smp_public_key+0x112>
    c158:	e8df f003 	tbb	[pc, r3]
    c15c:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c160:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c164:	f3bf 8f5b 	dmb	ish
    c168:	e853 2f00 	ldrex	r2, [r3]
    c16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c170:	e843 2100 	strex	r1, r2, [r3]
    c174:	2900      	cmp	r1, #0
    c176:	d1f7      	bne.n	c168 <smp_public_key+0x4c>
    c178:	f3bf 8f5b 	dmb	ish
    c17c:	e7e4      	b.n	c148 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c17e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c182:	f3bf 8f5b 	dmb	ish
    c186:	e853 2f00 	ldrex	r2, [r3]
    c18a:	f042 0208 	orr.w	r2, r2, #8
    c18e:	e843 2100 	strex	r1, r2, [r3]
    c192:	2900      	cmp	r1, #0
    c194:	d1f7      	bne.n	c186 <smp_public_key+0x6a>
    c196:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    c19a:	4620      	mov	r0, r4
    c19c:	f7ff feea 	bl	bf74 <generate_dhkey>
    c1a0:	4603      	mov	r3, r0
    c1a2:	e033      	b.n	c20c <smp_public_key+0xf0>
			err = display_passkey(smp);
    c1a4:	4620      	mov	r0, r4
    c1a6:	f7fe fc0f 	bl	a9c8 <display_passkey>
			if (err) {
    c1aa:	4603      	mov	r3, r0
    c1ac:	bb70      	cbnz	r0, c20c <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    c1ae:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c1b2:	f3bf 8f5b 	dmb	ish
    c1b6:	e853 2f00 	ldrex	r2, [r3]
    c1ba:	f042 0208 	orr.w	r2, r2, #8
    c1be:	e843 2100 	strex	r1, r2, [r3]
    c1c2:	2900      	cmp	r1, #0
    c1c4:	d1f7      	bne.n	c1b6 <smp_public_key+0x9a>
    c1c6:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    c1ca:	4620      	mov	r0, r4
    c1cc:	f7fe ffd6 	bl	b17c <smp_send_pairing_confirm>
			if (err) {
    c1d0:	4603      	mov	r3, r0
    c1d2:	b9d8      	cbnz	r0, c20c <smp_public_key+0xf0>
    c1d4:	e7e1      	b.n	c19a <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c1d6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c1da:	f3bf 8f5b 	dmb	ish
    c1de:	e853 2f00 	ldrex	r2, [r3]
    c1e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c1e6:	e843 2100 	strex	r1, r2, [r3]
    c1ea:	2900      	cmp	r1, #0
    c1ec:	d1f7      	bne.n	c1de <smp_public_key+0xc2>
    c1ee:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c1f2:	4b11      	ldr	r3, [pc, #68]	; (c238 <smp_public_key+0x11c>)
    c1f4:	681b      	ldr	r3, [r3, #0]
    c1f6:	685b      	ldr	r3, [r3, #4]
    c1f8:	6820      	ldr	r0, [r4, #0]
    c1fa:	4798      	blx	r3
			break;
    c1fc:	e7cd      	b.n	c19a <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    c1fe:	4b0f      	ldr	r3, [pc, #60]	; (c23c <smp_public_key+0x120>)
    c200:	781b      	ldrb	r3, [r3, #0]
    c202:	b12b      	cbz	r3, c210 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    c204:	4620      	mov	r0, r4
    c206:	f7ff fecf 	bl	bfa8 <smp_public_key_slave>
    c20a:	4603      	mov	r3, r0
}
    c20c:	4618      	mov	r0, r3
    c20e:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c210:	34a0      	adds	r4, #160	; 0xa0
    c212:	f3bf 8f5b 	dmb	ish
    c216:	e854 3f00 	ldrex	r3, [r4]
    c21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c21e:	e844 3200 	strex	r2, r3, [r4]
    c222:	2a00      	cmp	r2, #0
    c224:	d1f7      	bne.n	c216 <smp_public_key+0xfa>
    c226:	f3bf 8f5b 	dmb	ish
		return 0;
    c22a:	2300      	movs	r3, #0
    c22c:	e7ee      	b.n	c20c <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    c22e:	2308      	movs	r3, #8
    c230:	e7ec      	b.n	c20c <smp_public_key+0xf0>
    c232:	bf00      	nop
    c234:	00030f94 	.word	0x00030f94
    c238:	200029b0 	.word	0x200029b0
    c23c:	20000964 	.word	0x20000964

0000c240 <smp_signing_info>:
{
    c240:	b570      	push	{r4, r5, r6, lr}
    c242:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c244:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c246:	f3bf 8f5b 	dmb	ish
    c24a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c24e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c252:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c256:	d111      	bne.n	c27c <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c258:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c25c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c260:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c264:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c266:	b902      	cbnz	r2, c26a <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c268:	b1ab      	cbz	r3, c296 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    c26a:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c26e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c276:	b193      	cbz	r3, c29e <smp_signing_info+0x5e>
	return 0;
    c278:	2000      	movs	r0, #0
}
    c27a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    c27c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c27e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c282:	2010      	movs	r0, #16
    c284:	f000 ff8e 	bl	d1a4 <bt_keys_get_type>
		if (!keys) {
    c288:	b178      	cbz	r0, c2aa <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    c28a:	2210      	movs	r2, #16
    c28c:	4631      	mov	r1, r6
    c28e:	305c      	adds	r0, #92	; 0x5c
    c290:	f7f4 f816 	bl	2c0 <memcpy>
    c294:	e7e0      	b.n	c258 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    c296:	4620      	mov	r0, r4
    c298:	f7ff fac4 	bl	b824 <bt_smp_distribute_keys>
    c29c:	e7e5      	b.n	c26a <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    c29e:	2100      	movs	r1, #0
    c2a0:	4620      	mov	r0, r4
    c2a2:	f7ff f93e 	bl	b522 <smp_pairing_complete>
	return 0;
    c2a6:	2000      	movs	r0, #0
    c2a8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c2aa:	2008      	movs	r0, #8
    c2ac:	bd70      	pop	{r4, r5, r6, pc}

0000c2ae <smp_ident_info>:
{
    c2ae:	b538      	push	{r3, r4, r5, lr}
    c2b0:	4604      	mov	r4, r0
    c2b2:	f3bf 8f5b 	dmb	ish
    c2b6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c2ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c2be:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c2c2:	d00b      	beq.n	c2dc <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c2c4:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c2c6:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c2c8:	3148      	adds	r1, #72	; 0x48
    c2ca:	2002      	movs	r0, #2
    c2cc:	f000 ff6a 	bl	d1a4 <bt_keys_get_type>
		if (!keys) {
    c2d0:	b198      	cbz	r0, c2fa <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    c2d2:	2210      	movs	r2, #16
    c2d4:	4629      	mov	r1, r5
    c2d6:	3030      	adds	r0, #48	; 0x30
    c2d8:	f7f3 fff2 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c2dc:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2de:	f3bf 8f5b 	dmb	ish
    c2e2:	e854 3f00 	ldrex	r3, [r4]
    c2e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c2ea:	e844 3200 	strex	r2, r3, [r4]
    c2ee:	2a00      	cmp	r2, #0
    c2f0:	d1f7      	bne.n	c2e2 <smp_ident_info+0x34>
    c2f2:	f3bf 8f5b 	dmb	ish
	return 0;
    c2f6:	2000      	movs	r0, #0
    c2f8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c2fa:	2008      	movs	r0, #8
}
    c2fc:	bd38      	pop	{r3, r4, r5, pc}

0000c2fe <smp_master_ident>:
{
    c2fe:	b570      	push	{r4, r5, r6, lr}
    c300:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c302:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c304:	f3bf 8f5b 	dmb	ish
    c308:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c30c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c310:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c314:	d116      	bne.n	c344 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c316:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c31a:	f013 0f02 	tst.w	r3, #2
    c31e:	d127      	bne.n	c370 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c320:	f013 0f04 	tst.w	r3, #4
    c324:	d133      	bne.n	c38e <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c326:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c328:	b91b      	cbnz	r3, c332 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c32a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c32e:	2b00      	cmp	r3, #0
    c330:	d03c      	beq.n	c3ac <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    c332:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c336:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c33a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c33e:	b3cb      	cbz	r3, c3b4 <smp_master_ident+0xb6>
	return 0;
    c340:	2000      	movs	r0, #0
}
    c342:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    c344:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c346:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c34a:	2004      	movs	r0, #4
    c34c:	f000 ff2a 	bl	d1a4 <bt_keys_get_type>
		if (!keys) {
    c350:	b3b0      	cbz	r0, c3c0 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    c352:	8832      	ldrh	r2, [r6, #0]
    c354:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    c356:	f8d6 1002 	ldr.w	r1, [r6, #2]
    c35a:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c35e:	6101      	str	r1, [r0, #16]
    c360:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c362:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c366:	f023 0301 	bic.w	r3, r3, #1
    c36a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    c36e:	e7d2      	b.n	c316 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c370:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c374:	f3bf 8f5b 	dmb	ish
    c378:	e853 2f00 	ldrex	r2, [r3]
    c37c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c380:	e843 2100 	strex	r1, r2, [r3]
    c384:	2900      	cmp	r1, #0
    c386:	d1f7      	bne.n	c378 <smp_master_ident+0x7a>
    c388:	f3bf 8f5b 	dmb	ish
    c38c:	e7cb      	b.n	c326 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c38e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c392:	f3bf 8f5b 	dmb	ish
    c396:	e853 2f00 	ldrex	r2, [r3]
    c39a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c39e:	e843 2100 	strex	r1, r2, [r3]
    c3a2:	2900      	cmp	r1, #0
    c3a4:	d1f7      	bne.n	c396 <smp_master_ident+0x98>
    c3a6:	f3bf 8f5b 	dmb	ish
    c3aa:	e7bc      	b.n	c326 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    c3ac:	4620      	mov	r0, r4
    c3ae:	f7ff fa39 	bl	b824 <bt_smp_distribute_keys>
    c3b2:	e7be      	b.n	c332 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    c3b4:	2100      	movs	r1, #0
    c3b6:	4620      	mov	r0, r4
    c3b8:	f7ff f8b3 	bl	b522 <smp_pairing_complete>
	return 0;
    c3bc:	2000      	movs	r0, #0
    c3be:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c3c0:	2008      	movs	r0, #8
    c3c2:	bd70      	pop	{r4, r5, r6, pc}

0000c3c4 <smp_encrypt_info>:
{
    c3c4:	b538      	push	{r3, r4, r5, lr}
    c3c6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c3c8:	f3bf 8f5b 	dmb	ish
    c3cc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c3d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c3d8:	d00b      	beq.n	c3f2 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c3da:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c3dc:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c3de:	3148      	adds	r1, #72	; 0x48
    c3e0:	2004      	movs	r0, #4
    c3e2:	f000 fedf 	bl	d1a4 <bt_keys_get_type>
		if (!keys) {
    c3e6:	b198      	cbz	r0, c410 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    c3e8:	2210      	movs	r2, #16
    c3ea:	4629      	mov	r1, r5
    c3ec:	301a      	adds	r0, #26
    c3ee:	f7f3 ff67 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c3f2:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3f4:	f3bf 8f5b 	dmb	ish
    c3f8:	e854 3f00 	ldrex	r3, [r4]
    c3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c400:	e844 3200 	strex	r2, r3, [r4]
    c404:	2a00      	cmp	r2, #0
    c406:	d1f7      	bne.n	c3f8 <smp_encrypt_info+0x34>
    c408:	f3bf 8f5b 	dmb	ish
	return 0;
    c40c:	2000      	movs	r0, #0
    c40e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c410:	2008      	movs	r0, #8
}
    c412:	bd38      	pop	{r3, r4, r5, pc}

0000c414 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    c414:	7883      	ldrb	r3, [r0, #2]
    c416:	b103      	cbz	r3, c41a <smp_check_complete+0x6>
    c418:	4770      	bx	lr
{
    c41a:	b510      	push	{r4, lr}
    c41c:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c41e:	2106      	movs	r1, #6
    c420:	f7fb ffa1 	bl	8366 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    c424:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c428:	ea21 0104 	bic.w	r1, r1, r4
    c42c:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    c430:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    c434:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c438:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c43c:	b103      	cbz	r3, c440 <smp_check_complete+0x2c>
    c43e:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    c440:	2100      	movs	r1, #0
    c442:	f7ff f86e 	bl	b522 <smp_pairing_complete>
    c446:	e7fa      	b.n	c43e <smp_check_complete+0x2a>

0000c448 <sign_info_sent>:
{
    c448:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    c44a:	2104      	movs	r1, #4
    c44c:	f7ff ffe2 	bl	c414 <smp_check_complete>
    c450:	bd08      	pop	{r3, pc}

0000c452 <ident_sent>:
{
    c452:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    c454:	2101      	movs	r1, #1
    c456:	f7ff ffdd 	bl	c414 <smp_check_complete>
    c45a:	bd08      	pop	{r3, pc}

0000c45c <smp_ident_addr_info>:
{
    c45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c460:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c462:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c464:	782b      	ldrb	r3, [r5, #0]
    c466:	b153      	cbz	r3, c47e <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    c468:	79ab      	ldrb	r3, [r5, #6]
    c46a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c46e:	2bc0      	cmp	r3, #192	; 0xc0
    c470:	bf14      	ite	ne
    c472:	2300      	movne	r3, #0
    c474:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    c476:	b923      	cbnz	r3, c482 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    c478:	200a      	movs	r0, #10
    c47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    c47e:	2301      	movs	r3, #1
    c480:	e7f9      	b.n	c476 <smp_ident_addr_info+0x1a>
    c482:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c484:	f3bf 8f5b 	dmb	ish
    c488:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c48c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c490:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c494:	d119      	bne.n	c4ca <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c496:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c49a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c49e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c4a2:	f013 0f04 	tst.w	r3, #4
    c4a6:	d14f      	bne.n	c548 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c4a8:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c4aa:	b91b      	cbnz	r3, c4b4 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c4ac:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d058      	beq.n	c566 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    c4b4:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c4b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c4bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d054      	beq.n	c56e <smp_ident_addr_info+0x112>
	return 0;
    c4c4:	2000      	movs	r0, #0
}
    c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c4ca:	f106 0848 	add.w	r8, r6, #72	; 0x48
    c4ce:	4641      	mov	r1, r8
    c4d0:	2002      	movs	r0, #2
    c4d2:	f000 fe67 	bl	d1a4 <bt_keys_get_type>
		if (!keys) {
    c4d6:	4681      	mov	r9, r0
    c4d8:	2800      	cmp	r0, #0
    c4da:	d04f      	beq.n	c57c <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c4dc:	78f3      	ldrb	r3, [r6, #3]
    c4de:	bb43      	cbnz	r3, c532 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    c4e0:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c4e4:	780b      	ldrb	r3, [r1, #0]
    c4e6:	2b01      	cmp	r3, #1
    c4e8:	d026      	beq.n	c538 <smp_ident_addr_info+0xdc>
		return false;
    c4ea:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    c4ec:	2f00      	cmp	r7, #0
    c4ee:	d0d2      	beq.n	c496 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c4f0:	2206      	movs	r2, #6
    c4f2:	3101      	adds	r1, #1
    c4f4:	f109 0040 	add.w	r0, r9, #64	; 0x40
    c4f8:	f7f3 fee2 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c4fc:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    c500:	b13b      	cbz	r3, c512 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    c502:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    c506:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c50a:	2fc0      	cmp	r7, #192	; 0xc0
    c50c:	bf14      	ite	ne
    c50e:	2700      	movne	r7, #0
    c510:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c512:	2f00      	cmp	r7, #0
    c514:	d1bf      	bne.n	c496 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c516:	2207      	movs	r2, #7
    c518:	4629      	mov	r1, r5
    c51a:	4648      	mov	r0, r9
    c51c:	f7f3 fed0 	bl	2c0 <memcpy>
    c520:	2207      	movs	r2, #7
    c522:	4629      	mov	r1, r5
    c524:	4640      	mov	r0, r8
    c526:	f7f3 fecb 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    c52a:	4630      	mov	r0, r6
    c52c:	f7fa fba4 	bl	6c78 <bt_conn_identity_resolved>
    c530:	e7b1      	b.n	c496 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    c532:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    c536:	e7d5      	b.n	c4e4 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    c538:	798f      	ldrb	r7, [r1, #6]
    c53a:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c53e:	2f40      	cmp	r7, #64	; 0x40
    c540:	bf14      	ite	ne
    c542:	2700      	movne	r7, #0
    c544:	2701      	moveq	r7, #1
    c546:	e7d1      	b.n	c4ec <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c548:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c54c:	f3bf 8f5b 	dmb	ish
    c550:	e853 2f00 	ldrex	r2, [r3]
    c554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c558:	e843 2100 	strex	r1, r2, [r3]
    c55c:	2900      	cmp	r1, #0
    c55e:	d1f7      	bne.n	c550 <smp_ident_addr_info+0xf4>
    c560:	f3bf 8f5b 	dmb	ish
    c564:	e7a0      	b.n	c4a8 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    c566:	4620      	mov	r0, r4
    c568:	f7ff f95c 	bl	b824 <bt_smp_distribute_keys>
    c56c:	e7a2      	b.n	c4b4 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    c56e:	2100      	movs	r1, #0
    c570:	4620      	mov	r0, r4
    c572:	f7fe ffd6 	bl	b522 <smp_pairing_complete>
	return 0;
    c576:	2000      	movs	r0, #0
    c578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c57c:	2008      	movs	r0, #8
    c57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000c584 <legacy_request_tk>:
{
    c584:	b570      	push	{r4, r5, r6, lr}
    c586:	b082      	sub	sp, #8
    c588:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c58a:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    c58c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c590:	f000 fdea 	bl	d168 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c594:	b168      	cbz	r0, c5b2 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c596:	f3bf 8f5b 	dmb	ish
    c59a:	6883      	ldr	r3, [r0, #8]
    c59c:	f3bf 8f5b 	dmb	ish
    c5a0:	f013 0f01 	tst.w	r3, #1
    c5a4:	d005      	beq.n	c5b2 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    c5a6:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c5aa:	b913      	cbnz	r3, c5b2 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    c5ac:	2008      	movs	r0, #8
}
    c5ae:	b002      	add	sp, #8
    c5b0:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    c5b2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c5b6:	2b01      	cmp	r3, #1
    c5b8:	d025      	beq.n	c606 <legacy_request_tk+0x82>
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d037      	beq.n	c62e <legacy_request_tk+0xaa>
    c5be:	2b02      	cmp	r3, #2
    c5c0:	d001      	beq.n	c5c6 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c5c2:	2008      	movs	r0, #8
    c5c4:	e7f3      	b.n	c5ae <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    c5c6:	2104      	movs	r1, #4
    c5c8:	eb0d 0001 	add.w	r0, sp, r1
    c5cc:	f004 ffb8 	bl	11540 <bt_rand>
    c5d0:	b108      	cbz	r0, c5d6 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    c5d2:	2008      	movs	r0, #8
    c5d4:	e7eb      	b.n	c5ae <legacy_request_tk+0x2a>
		passkey %= 1000000;
    c5d6:	9b01      	ldr	r3, [sp, #4]
    c5d8:	4916      	ldr	r1, [pc, #88]	; (c634 <legacy_request_tk+0xb0>)
    c5da:	fba1 2103 	umull	r2, r1, r1, r3
    c5de:	0c89      	lsrs	r1, r1, #18
    c5e0:	4a15      	ldr	r2, [pc, #84]	; (c638 <legacy_request_tk+0xb4>)
    c5e2:	fb02 3111 	mls	r1, r2, r1, r3
    c5e6:	ae02      	add	r6, sp, #8
    c5e8:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    c5ec:	4b13      	ldr	r3, [pc, #76]	; (c63c <legacy_request_tk+0xb8>)
    c5ee:	681b      	ldr	r3, [r3, #0]
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	4628      	mov	r0, r5
    c5f4:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    c5f6:	2204      	movs	r2, #4
    c5f8:	4631      	mov	r1, r6
    c5fa:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c5fe:	f7f3 fe5f 	bl	2c0 <memcpy>
	return 0;
    c602:	2000      	movs	r0, #0
		break;
    c604:	e7d3      	b.n	c5ae <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c606:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c608:	f3bf 8f5b 	dmb	ish
    c60c:	e854 3f00 	ldrex	r3, [r4]
    c610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c614:	e844 3200 	strex	r2, r3, [r4]
    c618:	2a00      	cmp	r2, #0
    c61a:	d1f7      	bne.n	c60c <legacy_request_tk+0x88>
    c61c:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    c620:	4b06      	ldr	r3, [pc, #24]	; (c63c <legacy_request_tk+0xb8>)
    c622:	681b      	ldr	r3, [r3, #0]
    c624:	685b      	ldr	r3, [r3, #4]
    c626:	4628      	mov	r0, r5
    c628:	4798      	blx	r3
	return 0;
    c62a:	2000      	movs	r0, #0
		break;
    c62c:	e7bf      	b.n	c5ae <legacy_request_tk+0x2a>
	return 0;
    c62e:	2000      	movs	r0, #0
    c630:	e7bd      	b.n	c5ae <legacy_request_tk+0x2a>
    c632:	bf00      	nop
    c634:	431bde83 	.word	0x431bde83
    c638:	000f4240 	.word	0x000f4240
    c63c:	200029b0 	.word	0x200029b0

0000c640 <legacy_pairing_rsp>:
{
    c640:	b538      	push	{r3, r4, r5, lr}
    c642:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c644:	f7fe f90a 	bl	a85c <legacy_get_pair_method>
    c648:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c64c:	bb10      	cbnz	r0, c694 <legacy_pairing_rsp+0x54>
    c64e:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c650:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c654:	f3bf 8f5b 	dmb	ish
    c658:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c65c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c660:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c664:	d016      	beq.n	c694 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c666:	4b24      	ldr	r3, [pc, #144]	; (c6f8 <legacy_pairing_rsp+0xb8>)
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	b19b      	cbz	r3, c694 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c66c:	691b      	ldr	r3, [r3, #16]
    c66e:	b18b      	cbz	r3, c694 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c670:	f3bf 8f5b 	dmb	ish
    c674:	e852 3f00 	ldrex	r3, [r2]
    c678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c67c:	e842 3100 	strex	r1, r3, [r2]
    c680:	2900      	cmp	r1, #0
    c682:	d1f7      	bne.n	c674 <legacy_pairing_rsp+0x34>
    c684:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c688:	4b1b      	ldr	r3, [pc, #108]	; (c6f8 <legacy_pairing_rsp+0xb8>)
    c68a:	681b      	ldr	r3, [r3, #0]
    c68c:	691b      	ldr	r3, [r3, #16]
    c68e:	6828      	ldr	r0, [r5, #0]
    c690:	4798      	blx	r3
		return 0;
    c692:	e004      	b.n	c69e <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    c694:	4628      	mov	r0, r5
    c696:	f7ff ff75 	bl	c584 <legacy_request_tk>
	if (ret) {
    c69a:	4604      	mov	r4, r0
    c69c:	b108      	cbz	r0, c6a2 <legacy_pairing_rsp+0x62>
}
    c69e:	4620      	mov	r0, r4
    c6a0:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c6a2:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c6a6:	f3bf 8f5b 	dmb	ish
    c6aa:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    c6ae:	f3bf 8f5b 	dmb	ish
    c6b2:	f412 7f00 	tst.w	r2, #512	; 0x200
    c6b6:	d00c      	beq.n	c6d2 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6b8:	f3bf 8f5b 	dmb	ish
    c6bc:	e853 2f00 	ldrex	r2, [r3]
    c6c0:	f042 0201 	orr.w	r2, r2, #1
    c6c4:	e843 2100 	strex	r1, r2, [r3]
    c6c8:	2900      	cmp	r1, #0
    c6ca:	d1f7      	bne.n	c6bc <legacy_pairing_rsp+0x7c>
    c6cc:	f3bf 8f5b 	dmb	ish
	return 0;
    c6d0:	e7e5      	b.n	c69e <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c6d2:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c6d6:	f3bf 8f5b 	dmb	ish
    c6da:	e853 2f00 	ldrex	r2, [r3]
    c6de:	f042 0208 	orr.w	r2, r2, #8
    c6e2:	e843 2100 	strex	r1, r2, [r3]
    c6e6:	2900      	cmp	r1, #0
    c6e8:	d1f7      	bne.n	c6da <legacy_pairing_rsp+0x9a>
    c6ea:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    c6ee:	4628      	mov	r0, r5
    c6f0:	f7fe fdd8 	bl	b2a4 <legacy_send_pairing_confirm>
    c6f4:	4604      	mov	r4, r0
    c6f6:	e7d2      	b.n	c69e <legacy_pairing_rsp+0x5e>
    c6f8:	200029b0 	.word	0x200029b0

0000c6fc <smp_pairing_rsp>:
{
    c6fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c6fe:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c700:	78eb      	ldrb	r3, [r5, #3]
    c702:	3b07      	subs	r3, #7
    c704:	b2db      	uxtb	r3, r3
    c706:	2b09      	cmp	r3, #9
    c708:	d902      	bls.n	c710 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c70a:	2506      	movs	r5, #6
}
    c70c:	4628      	mov	r0, r5
    c70e:	bd70      	pop	{r4, r5, r6, pc}
    c710:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    c712:	792b      	ldrb	r3, [r5, #4]
    c714:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    c718:	4013      	ands	r3, r2
    c71a:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    c71e:	796b      	ldrb	r3, [r5, #5]
    c720:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    c724:	4013      	ands	r3, r2
    c726:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c72a:	2302      	movs	r3, #2
    c72c:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c730:	2206      	movs	r2, #6
    c732:	4629      	mov	r1, r5
    c734:	30ad      	adds	r0, #173	; 0xad
    c736:	f7f3 fdc3 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c73a:	78ab      	ldrb	r3, [r5, #2]
    c73c:	f013 0f08 	tst.w	r3, #8
    c740:	d004      	beq.n	c74c <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c742:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c746:	f013 0f08 	tst.w	r3, #8
    c74a:	d148      	bne.n	c7de <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c74c:	78ab      	ldrb	r3, [r5, #2]
    c74e:	f013 0f20 	tst.w	r3, #32
    c752:	d004      	beq.n	c75e <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c754:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c758:	f013 0f20 	tst.w	r3, #32
    c75c:	d14e      	bne.n	c7fc <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c75e:	78ab      	ldrb	r3, [r5, #2]
    c760:	f013 0f01 	tst.w	r3, #1
    c764:	d004      	beq.n	c770 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c766:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c76a:	f013 0f01 	tst.w	r3, #1
    c76e:	d154      	bne.n	c81a <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c770:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c774:	f3bf 8f5b 	dmb	ish
    c778:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c77c:	f3bf 8f5b 	dmb	ish
    c780:	f013 0f20 	tst.w	r3, #32
    c784:	d058      	beq.n	c838 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    c786:	7829      	ldrb	r1, [r5, #0]
    c788:	4620      	mov	r0, r4
    c78a:	f7fe f835 	bl	a7f8 <get_pair_method>
    c78e:	4605      	mov	r5, r0
    c790:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    c794:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c798:	f003 0304 	and.w	r3, r3, #4
    c79c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    c7a0:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c7a4:	f003 0306 	and.w	r3, r3, #6
    c7a8:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d049      	beq.n	c844 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    c7b0:	4b3c      	ldr	r3, [pc, #240]	; (c8a4 <smp_pairing_rsp+0x1a8>)
    c7b2:	781b      	ldrb	r3, [r3, #0]
    c7b4:	2b00      	cmp	r3, #0
    c7b6:	d067      	beq.n	c888 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c7b8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7bc:	f3bf 8f5b 	dmb	ish
    c7c0:	e853 2f00 	ldrex	r2, [r3]
    c7c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c7c8:	e843 2100 	strex	r1, r2, [r3]
    c7cc:	2900      	cmp	r1, #0
    c7ce:	d1f7      	bne.n	c7c0 <smp_pairing_rsp+0xc4>
    c7d0:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    c7d4:	4620      	mov	r0, r4
    c7d6:	f7fe f94b 	bl	aa70 <sc_send_public_key>
    c7da:	4605      	mov	r5, r0
    c7dc:	e796      	b.n	c70c <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c7de:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c7e2:	f3bf 8f5b 	dmb	ish
    c7e6:	e853 2f00 	ldrex	r2, [r3]
    c7ea:	f042 0220 	orr.w	r2, r2, #32
    c7ee:	e843 2100 	strex	r1, r2, [r3]
    c7f2:	2900      	cmp	r1, #0
    c7f4:	d1f7      	bne.n	c7e6 <smp_pairing_rsp+0xea>
    c7f6:	f3bf 8f5b 	dmb	ish
    c7fa:	e7a7      	b.n	c74c <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c7fc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c800:	f3bf 8f5b 	dmb	ish
    c804:	e853 2f00 	ldrex	r2, [r3]
    c808:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c80c:	e843 2100 	strex	r1, r2, [r3]
    c810:	2900      	cmp	r1, #0
    c812:	d1f7      	bne.n	c804 <smp_pairing_rsp+0x108>
    c814:	f3bf 8f5b 	dmb	ish
    c818:	e7a1      	b.n	c75e <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c81a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c81e:	f3bf 8f5b 	dmb	ish
    c822:	e853 2f00 	ldrex	r2, [r3]
    c826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c82a:	e843 2100 	strex	r1, r2, [r3]
    c82e:	2900      	cmp	r1, #0
    c830:	d1f7      	bne.n	c822 <smp_pairing_rsp+0x126>
    c832:	f3bf 8f5b 	dmb	ish
    c836:	e79b      	b.n	c770 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    c838:	7829      	ldrb	r1, [r5, #0]
    c83a:	4620      	mov	r0, r4
    c83c:	f7ff ff00 	bl	c640 <legacy_pairing_rsp>
    c840:	4605      	mov	r5, r0
    c842:	e763      	b.n	c70c <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c844:	f3bf 8f5b 	dmb	ish
    c848:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c84c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c850:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c854:	d0ac      	beq.n	c7b0 <smp_pairing_rsp+0xb4>
    c856:	4b14      	ldr	r3, [pc, #80]	; (c8a8 <smp_pairing_rsp+0x1ac>)
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	2b00      	cmp	r3, #0
    c85c:	d0a8      	beq.n	c7b0 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    c85e:	691b      	ldr	r3, [r3, #16]
    c860:	2b00      	cmp	r3, #0
    c862:	d0a5      	beq.n	c7b0 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c864:	f3bf 8f5b 	dmb	ish
    c868:	e856 3f00 	ldrex	r3, [r6]
    c86c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c870:	e846 3200 	strex	r2, r3, [r6]
    c874:	2a00      	cmp	r2, #0
    c876:	d1f7      	bne.n	c868 <smp_pairing_rsp+0x16c>
    c878:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c87c:	4b0a      	ldr	r3, [pc, #40]	; (c8a8 <smp_pairing_rsp+0x1ac>)
    c87e:	681b      	ldr	r3, [r3, #0]
    c880:	691b      	ldr	r3, [r3, #16]
    c882:	6820      	ldr	r0, [r4, #0]
    c884:	4798      	blx	r3
			return 0;
    c886:	e741      	b.n	c70c <smp_pairing_rsp+0x10>
    c888:	f3bf 8f5b 	dmb	ish
    c88c:	e856 3f00 	ldrex	r3, [r6]
    c890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c894:	e846 3200 	strex	r2, r3, [r6]
    c898:	2a00      	cmp	r2, #0
    c89a:	d1f7      	bne.n	c88c <smp_pairing_rsp+0x190>
    c89c:	f3bf 8f5b 	dmb	ish
		return 0;
    c8a0:	2500      	movs	r5, #0
    c8a2:	e733      	b.n	c70c <smp_pairing_rsp+0x10>
    c8a4:	20000964 	.word	0x20000964
    c8a8:	200029b0 	.word	0x200029b0

0000c8ac <legacy_pairing_req>:
{
    c8ac:	b538      	push	{r3, r4, r5, lr}
    c8ae:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c8b0:	f7fd ffd4 	bl	a85c <legacy_get_pair_method>
    c8b4:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c8b8:	bb10      	cbnz	r0, c900 <legacy_pairing_req+0x54>
    c8ba:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c8bc:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c8c0:	f3bf 8f5b 	dmb	ish
    c8c4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c8c8:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c8cc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c8d0:	d116      	bne.n	c900 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c8d2:	4b18      	ldr	r3, [pc, #96]	; (c934 <legacy_pairing_req+0x88>)
    c8d4:	681b      	ldr	r3, [r3, #0]
    c8d6:	b19b      	cbz	r3, c900 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c8d8:	691b      	ldr	r3, [r3, #16]
    c8da:	b18b      	cbz	r3, c900 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c8dc:	f3bf 8f5b 	dmb	ish
    c8e0:	e852 3f00 	ldrex	r3, [r2]
    c8e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c8e8:	e842 3100 	strex	r1, r3, [r2]
    c8ec:	2900      	cmp	r1, #0
    c8ee:	d1f7      	bne.n	c8e0 <legacy_pairing_req+0x34>
    c8f0:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c8f4:	4b0f      	ldr	r3, [pc, #60]	; (c934 <legacy_pairing_req+0x88>)
    c8f6:	681b      	ldr	r3, [r3, #0]
    c8f8:	691b      	ldr	r3, [r3, #16]
    c8fa:	6828      	ldr	r0, [r5, #0]
    c8fc:	4798      	blx	r3
		return 0;
    c8fe:	e004      	b.n	c90a <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    c900:	4628      	mov	r0, r5
    c902:	f7fe f8d9 	bl	aab8 <send_pairing_rsp>
	if (ret) {
    c906:	4604      	mov	r4, r0
    c908:	b108      	cbz	r0, c90e <legacy_pairing_req+0x62>
}
    c90a:	4620      	mov	r0, r4
    c90c:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c90e:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c912:	f3bf 8f5b 	dmb	ish
    c916:	e853 2f00 	ldrex	r2, [r3]
    c91a:	f042 0208 	orr.w	r2, r2, #8
    c91e:	e843 2100 	strex	r1, r2, [r3]
    c922:	2900      	cmp	r1, #0
    c924:	d1f7      	bne.n	c916 <legacy_pairing_req+0x6a>
    c926:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    c92a:	4628      	mov	r0, r5
    c92c:	f7ff fe2a 	bl	c584 <legacy_request_tk>
    c930:	4604      	mov	r4, r0
    c932:	e7ea      	b.n	c90a <legacy_pairing_req+0x5e>
    c934:	200029b0 	.word	0x200029b0

0000c938 <smp_pairing_req>:
{
    c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    c93a:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c93c:	78f3      	ldrb	r3, [r6, #3]
    c93e:	3b07      	subs	r3, #7
    c940:	b2db      	uxtb	r3, r3
    c942:	2b09      	cmp	r3, #9
    c944:	d902      	bls.n	c94c <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c946:	2506      	movs	r5, #6
}
    c948:	4628      	mov	r0, r5
    c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c94c:	4604      	mov	r4, r0
	ret = smp_init(smp);
    c94e:	f7fe f81c 	bl	a98a <smp_init>
	if (ret) {
    c952:	b108      	cbz	r0, c958 <smp_pairing_req+0x20>
		return ret;
    c954:	b2c5      	uxtb	r5, r0
    c956:	e7f7      	b.n	c948 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c958:	2301      	movs	r3, #1
    c95a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c95e:	2206      	movs	r2, #6
    c960:	4631      	mov	r1, r6
    c962:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c966:	f7f3 fcab 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c96a:	2302      	movs	r3, #2
    c96c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    c970:	78b0      	ldrb	r0, [r6, #2]
    c972:	f7fd ff97 	bl	a8a4 <get_auth>
    c976:	4605      	mov	r5, r0
    c978:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    c97c:	f7fd ff14 	bl	a7a8 <get_io_capa>
    c980:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c984:	2300      	movs	r3, #0
    c986:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c98a:	2310      	movs	r3, #16
    c98c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    c990:	7933      	ldrb	r3, [r6, #4]
    c992:	f003 0307 	and.w	r3, r3, #7
    c996:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    c99a:	7973      	ldrb	r3, [r6, #5]
    c99c:	f003 0305 	and.w	r3, r3, #5
    c9a0:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c9a4:	f015 0f08 	tst.w	r5, #8
    c9a8:	d003      	beq.n	c9b2 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c9aa:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c9ac:	f013 0f08 	tst.w	r3, #8
    c9b0:	d15b      	bne.n	ca6a <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c9b2:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c9b6:	f013 0f20 	tst.w	r3, #32
    c9ba:	d003      	beq.n	c9c4 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c9bc:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c9be:	f013 0f20 	tst.w	r3, #32
    c9c2:	d16d      	bne.n	caa0 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    c9c4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c9c8:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    c9cc:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    c9d0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c9d4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c9d8:	f013 0f01 	tst.w	r3, #1
    c9dc:	d003      	beq.n	c9e6 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c9de:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c9e0:	f013 0f01 	tst.w	r3, #1
    c9e4:	d16b      	bne.n	cabe <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    c9e6:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    c9ea:	f3bf 8f5b 	dmb	ish
    c9ee:	e857 3f00 	ldrex	r3, [r7]
    c9f2:	f043 0308 	orr.w	r3, r3, #8
    c9f6:	e847 3200 	strex	r2, r3, [r7]
    c9fa:	2a00      	cmp	r2, #0
    c9fc:	d1f7      	bne.n	c9ee <smp_pairing_req+0xb6>
    c9fe:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca02:	f3bf 8f5b 	dmb	ish
    ca06:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ca0a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ca0e:	f013 0f20 	tst.w	r3, #32
    ca12:	d063      	beq.n	cadc <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    ca14:	7831      	ldrb	r1, [r6, #0]
    ca16:	4620      	mov	r0, r4
    ca18:	f7fd feee 	bl	a7f8 <get_pair_method>
    ca1c:	4605      	mov	r5, r0
    ca1e:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    ca22:	2800      	cmp	r0, #0
    ca24:	d160      	bne.n	cae8 <smp_pairing_req+0x1b0>
    ca26:	f3bf 8f5b 	dmb	ish
    ca2a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ca2e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ca32:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    ca36:	d157      	bne.n	cae8 <smp_pairing_req+0x1b0>
    ca38:	4b35      	ldr	r3, [pc, #212]	; (cb10 <smp_pairing_req+0x1d8>)
    ca3a:	681b      	ldr	r3, [r3, #0]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d053      	beq.n	cae8 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    ca40:	691b      	ldr	r3, [r3, #16]
    ca42:	2b00      	cmp	r3, #0
    ca44:	d050      	beq.n	cae8 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca46:	f3bf 8f5b 	dmb	ish
    ca4a:	e857 3f00 	ldrex	r3, [r7]
    ca4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ca52:	e847 3200 	strex	r2, r3, [r7]
    ca56:	2a00      	cmp	r2, #0
    ca58:	d1f7      	bne.n	ca4a <smp_pairing_req+0x112>
    ca5a:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca5e:	4b2c      	ldr	r3, [pc, #176]	; (cb10 <smp_pairing_req+0x1d8>)
    ca60:	681b      	ldr	r3, [r3, #0]
    ca62:	691b      	ldr	r3, [r3, #16]
    ca64:	6820      	ldr	r0, [r4, #0]
    ca66:	4798      	blx	r3
			return 0;
    ca68:	e76e      	b.n	c948 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ca6a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    ca6e:	f3bf 8f5b 	dmb	ish
    ca72:	e853 2f00 	ldrex	r2, [r3]
    ca76:	f042 0220 	orr.w	r2, r2, #32
    ca7a:	e843 2100 	strex	r1, r2, [r3]
    ca7e:	2900      	cmp	r1, #0
    ca80:	d1f7      	bne.n	ca72 <smp_pairing_req+0x13a>
    ca82:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    ca86:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    ca8a:	f003 0306 	and.w	r3, r3, #6
    ca8e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ca92:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    ca96:	f003 0304 	and.w	r3, r3, #4
    ca9a:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    ca9e:	e788      	b.n	c9b2 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    caa0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    caa4:	f3bf 8f5b 	dmb	ish
    caa8:	e853 2f00 	ldrex	r2, [r3]
    caac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    cab0:	e843 2100 	strex	r1, r2, [r3]
    cab4:	2900      	cmp	r1, #0
    cab6:	d1f7      	bne.n	caa8 <smp_pairing_req+0x170>
    cab8:	f3bf 8f5b 	dmb	ish
    cabc:	e782      	b.n	c9c4 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    cabe:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cac2:	f3bf 8f5b 	dmb	ish
    cac6:	e853 2f00 	ldrex	r2, [r3]
    caca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    cace:	e843 2100 	strex	r1, r2, [r3]
    cad2:	2900      	cmp	r1, #0
    cad4:	d1f7      	bne.n	cac6 <smp_pairing_req+0x18e>
    cad6:	f3bf 8f5b 	dmb	ish
    cada:	e784      	b.n	c9e6 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    cadc:	7831      	ldrb	r1, [r6, #0]
    cade:	4620      	mov	r0, r4
    cae0:	f7ff fee4 	bl	c8ac <legacy_pairing_req>
    cae4:	4605      	mov	r5, r0
    cae6:	e72f      	b.n	c948 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    cae8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    caec:	f3bf 8f5b 	dmb	ish
    caf0:	e853 2f00 	ldrex	r2, [r3]
    caf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    caf8:	e843 2100 	strex	r1, r2, [r3]
    cafc:	2900      	cmp	r1, #0
    cafe:	d1f7      	bne.n	caf0 <smp_pairing_req+0x1b8>
    cb00:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    cb04:	4620      	mov	r0, r4
    cb06:	f7fd ffd7 	bl	aab8 <send_pairing_rsp>
    cb0a:	4605      	mov	r5, r0
    cb0c:	e71c      	b.n	c948 <smp_pairing_req+0x10>
    cb0e:	bf00      	nop
    cb10:	200029b0 	.word	0x200029b0

0000cb14 <bt_smp_connected>:
{
    cb14:	b510      	push	{r4, lr}
    cb16:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    cb18:	4904      	ldr	r1, [pc, #16]	; (cb2c <bt_smp_connected+0x18>)
    cb1a:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    cb1e:	f01d f955 	bl	29dcc <k_delayed_work_init>
	smp_reset(smp);
    cb22:	4620      	mov	r0, r4
    cb24:	f7fe fcbb 	bl	b49e <smp_reset>
    cb28:	bd10      	pop	{r4, pc}
    cb2a:	bf00      	nop
    cb2c:	0000b6ef 	.word	0x0000b6ef

0000cb30 <bt_smp_send_security_req>:
{
    cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb34:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    cb36:	f7fd ff15 	bl	a964 <smp_chan_get>
	if (!smp) {
    cb3a:	b3e8      	cbz	r0, cbb8 <bt_smp_send_security_req+0x88>
    cb3c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb3e:	f3bf 8f5b 	dmb	ish
    cb42:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cb46:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cb4a:	f013 0f10 	tst.w	r3, #16
    cb4e:	d136      	bne.n	cbbe <bt_smp_send_security_req+0x8e>
    cb50:	f3bf 8f5b 	dmb	ish
    cb54:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    cb58:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    cb5c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cb60:	bb85      	cbnz	r5, cbc4 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    cb62:	4630      	mov	r0, r6
    cb64:	f7fd feb4 	bl	a8d0 <sec_level_reachable>
    cb68:	b378      	cbz	r0, cbca <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    cb6a:	2201      	movs	r2, #1
    cb6c:	210b      	movs	r1, #11
    cb6e:	4630      	mov	r0, r6
    cb70:	f7fd fefd 	bl	a96e <smp_create_pdu>
	if (!req_buf) {
    cb74:	4607      	mov	r7, r0
    cb76:	b358      	cbz	r0, cbd0 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    cb78:	2101      	movs	r1, #1
    cb7a:	3008      	adds	r0, #8
    cb7c:	f00e f856 	bl	1ac2c <net_buf_simple_add>
    cb80:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cb82:	2009      	movs	r0, #9
    cb84:	f7fd fe8e 	bl	a8a4 <get_auth>
    cb88:	f888 0000 	strb.w	r0, [r8]
    cb8c:	2300      	movs	r3, #0
    cb8e:	463a      	mov	r2, r7
    cb90:	2106      	movs	r1, #6
    cb92:	4630      	mov	r0, r6
    cb94:	f7fb f9e1 	bl	7f5a <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cb98:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb9a:	f3bf 8f5b 	dmb	ish
    cb9e:	e854 3f00 	ldrex	r3, [r4]
    cba2:	f043 0320 	orr.w	r3, r3, #32
    cba6:	e844 3200 	strex	r2, r3, [r4]
    cbaa:	2a00      	cmp	r2, #0
    cbac:	d1f7      	bne.n	cb9e <bt_smp_send_security_req+0x6e>
    cbae:	f3bf 8f5b 	dmb	ish
}
    cbb2:	4628      	mov	r0, r5
    cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    cbb8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cbbc:	e7f9      	b.n	cbb2 <bt_smp_send_security_req+0x82>
		return -EIO;
    cbbe:	f06f 0504 	mvn.w	r5, #4
    cbc2:	e7f6      	b.n	cbb2 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    cbc4:	f06f 050f 	mvn.w	r5, #15
    cbc8:	e7f3      	b.n	cbb2 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    cbca:	f06f 0515 	mvn.w	r5, #21
    cbce:	e7f0      	b.n	cbb2 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    cbd0:	f06f 0568 	mvn.w	r5, #104	; 0x68
    cbd4:	e7ed      	b.n	cbb2 <bt_smp_send_security_req+0x82>

0000cbd6 <bt_smp_send_pairing_req>:
{
    cbd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cbda:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    cbdc:	f7fd fec2 	bl	a964 <smp_chan_get>
	if (!smp) {
    cbe0:	2800      	cmp	r0, #0
    cbe2:	d06b      	beq.n	ccbc <bt_smp_send_pairing_req+0xe6>
    cbe4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cbe6:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbea:	f3bf 8f5b 	dmb	ish
    cbee:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cbf2:	f3bf 8f5b 	dmb	ish
    cbf6:	f013 0f10 	tst.w	r3, #16
    cbfa:	d162      	bne.n	ccc2 <bt_smp_send_pairing_req+0xec>
    cbfc:	f3bf 8f5b 	dmb	ish
    cc00:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cc04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cc08:	f013 0f08 	tst.w	r3, #8
    cc0c:	d15c      	bne.n	ccc8 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    cc0e:	4628      	mov	r0, r5
    cc10:	f7fd fe5e 	bl	a8d0 <sec_level_reachable>
    cc14:	2800      	cmp	r0, #0
    cc16:	d05a      	beq.n	ccce <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    cc18:	4620      	mov	r0, r4
    cc1a:	f7fd feb6 	bl	a98a <smp_init>
    cc1e:	4680      	mov	r8, r0
    cc20:	2800      	cmp	r0, #0
    cc22:	d157      	bne.n	ccd4 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    cc24:	2206      	movs	r2, #6
    cc26:	2101      	movs	r1, #1
    cc28:	4628      	mov	r0, r5
    cc2a:	f7fd fea0 	bl	a96e <smp_create_pdu>
	if (!req_buf) {
    cc2e:	4607      	mov	r7, r0
    cc30:	2800      	cmp	r0, #0
    cc32:	d052      	beq.n	ccda <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    cc34:	2106      	movs	r1, #6
    cc36:	3008      	adds	r0, #8
    cc38:	f00d fff8 	bl	1ac2c <net_buf_simple_add>
    cc3c:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cc3e:	2009      	movs	r0, #9
    cc40:	f7fd fe30 	bl	a8a4 <get_auth>
    cc44:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    cc46:	f7fd fdaf 	bl	a7a8 <get_io_capa>
    cc4a:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cc4c:	f04f 0900 	mov.w	r9, #0
    cc50:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cc54:	2310      	movs	r3, #16
    cc56:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    cc58:	2205      	movs	r2, #5
    cc5a:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    cc5c:	2307      	movs	r3, #7
    cc5e:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    cc60:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    cc64:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cc68:	2301      	movs	r3, #1
    cc6a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    cc6e:	2206      	movs	r2, #6
    cc70:	4629      	mov	r1, r5
    cc72:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    cc76:	f7f3 fb23 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    cc7a:	464a      	mov	r2, r9
    cc7c:	4639      	mov	r1, r7
    cc7e:	4620      	mov	r0, r4
    cc80:	f7fd fec8 	bl	aa14 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    cc84:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc86:	f3bf 8f5b 	dmb	ish
    cc8a:	e854 3f00 	ldrex	r3, [r4]
    cc8e:	f043 0304 	orr.w	r3, r3, #4
    cc92:	e844 3200 	strex	r2, r3, [r4]
    cc96:	2a00      	cmp	r2, #0
    cc98:	d1f7      	bne.n	cc8a <bt_smp_send_pairing_req+0xb4>
    cc9a:	f3bf 8f5b 	dmb	ish
    cc9e:	f3bf 8f5b 	dmb	ish
    cca2:	e856 3f00 	ldrex	r3, [r6]
    cca6:	f043 0308 	orr.w	r3, r3, #8
    ccaa:	e846 3200 	strex	r2, r3, [r6]
    ccae:	2a00      	cmp	r2, #0
    ccb0:	d1f7      	bne.n	cca2 <bt_smp_send_pairing_req+0xcc>
    ccb2:	f3bf 8f5b 	dmb	ish
}
    ccb6:	4640      	mov	r0, r8
    ccb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    ccbc:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    ccc0:	e7f9      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    ccc2:	f06f 0804 	mvn.w	r8, #4
    ccc6:	e7f6      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    ccc8:	f06f 080f 	mvn.w	r8, #15
    cccc:	e7f3      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    ccce:	f06f 0815 	mvn.w	r8, #21
    ccd2:	e7f0      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ccd4:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ccd8:	e7ed      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ccda:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ccde:	e7ea      	b.n	ccb6 <bt_smp_send_pairing_req+0xe0>

0000cce0 <smp_security_request>:
{
    cce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cce2:	b085      	sub	sp, #20
    cce4:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cce6:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    cce8:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    ccea:	4a35      	ldr	r2, [pc, #212]	; (cdc0 <smp_security_request+0xe0>)
    ccec:	7812      	ldrb	r2, [r2, #0]
    ccee:	b332      	cbz	r2, cd3e <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ccf0:	781d      	ldrb	r5, [r3, #0]
    ccf2:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    ccf6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ccf8:	b32b      	cbz	r3, cd46 <smp_security_request+0x66>
	if (!conn->le.keys) {
    ccfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d039      	beq.n	cd74 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    cd00:	f015 0f04 	tst.w	r5, #4
    cd04:	d12e      	bne.n	cd64 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    cd06:	f015 0f08 	tst.w	r5, #8
    cd0a:	d004      	beq.n	cd16 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    cd0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cd0e:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    cd10:	f013 0f20 	tst.w	r3, #32
    cd14:	d02e      	beq.n	cd74 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    cd16:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    cd18:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    cd1c:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    cd1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    cd22:	9502      	str	r5, [sp, #8]
    cd24:	9201      	str	r2, [sp, #4]
    cd26:	8b1b      	ldrh	r3, [r3, #24]
    cd28:	9300      	str	r3, [sp, #0]
    cd2a:	4602      	mov	r2, r0
    cd2c:	460b      	mov	r3, r1
    cd2e:	4620      	mov	r0, r4
    cd30:	f7f9 ffbc 	bl	6cac <bt_conn_le_start_encryption>
    cd34:	2800      	cmp	r0, #0
    cd36:	da24      	bge.n	cd82 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    cd38:	2008      	movs	r0, #8
}
    cd3a:	b005      	add	sp, #20
    cd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    cd3e:	781d      	ldrb	r5, [r3, #0]
    cd40:	f005 0507 	and.w	r5, r5, #7
    cd44:	e7d7      	b.n	ccf6 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    cd46:	f104 0748 	add.w	r7, r4, #72	; 0x48
    cd4a:	4639      	mov	r1, r7
    cd4c:	2020      	movs	r0, #32
    cd4e:	f000 f98f 	bl	d070 <bt_keys_find>
    cd52:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    cd54:	2800      	cmp	r0, #0
    cd56:	d1d0      	bne.n	ccfa <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    cd58:	4639      	mov	r1, r7
    cd5a:	2004      	movs	r0, #4
    cd5c:	f000 f988 	bl	d070 <bt_keys_find>
    cd60:	6720      	str	r0, [r4, #112]	; 0x70
    cd62:	e7ca      	b.n	ccfa <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd64:	f3bf 8f5b 	dmb	ish
    cd68:	689b      	ldr	r3, [r3, #8]
    cd6a:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    cd6e:	f013 0f01 	tst.w	r3, #1
    cd72:	d1c8      	bne.n	cd06 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    cd74:	4620      	mov	r0, r4
    cd76:	f7ff ff2e 	bl	cbd6 <bt_smp_send_pairing_req>
    cd7a:	2800      	cmp	r0, #0
    cd7c:	da10      	bge.n	cda0 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    cd7e:	2008      	movs	r0, #8
    cd80:	e7db      	b.n	cd3a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    cd82:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cd84:	f3bf 8f5b 	dmb	ish
    cd88:	e856 3f00 	ldrex	r3, [r6]
    cd8c:	f043 0302 	orr.w	r3, r3, #2
    cd90:	e846 3200 	strex	r2, r3, [r6]
    cd94:	2a00      	cmp	r2, #0
    cd96:	d1f7      	bne.n	cd88 <smp_security_request+0xa8>
    cd98:	f3bf 8f5b 	dmb	ish
	return 0;
    cd9c:	2000      	movs	r0, #0
    cd9e:	e7cc      	b.n	cd3a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cda0:	36a0      	adds	r6, #160	; 0xa0
    cda2:	f3bf 8f5b 	dmb	ish
    cda6:	e856 3f00 	ldrex	r3, [r6]
    cdaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cdae:	e846 3200 	strex	r2, r3, [r6]
    cdb2:	2a00      	cmp	r2, #0
    cdb4:	d1f7      	bne.n	cda6 <smp_security_request+0xc6>
    cdb6:	f3bf 8f5b 	dmb	ish
	return 0;
    cdba:	2000      	movs	r0, #0
    cdbc:	e7bd      	b.n	cd3a <smp_security_request+0x5a>
    cdbe:	bf00      	nop
    cdc0:	200009a8 	.word	0x200009a8

0000cdc4 <bt_smp_sign_verify>:
{
    cdc4:	b530      	push	{r4, r5, lr}
    cdc6:	b085      	sub	sp, #20
    cdc8:	4605      	mov	r5, r0
    cdca:	460c      	mov	r4, r1
	return buf->data + buf->len;
    cdcc:	6889      	ldr	r1, [r1, #8]
    cdce:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    cdd0:	3b0c      	subs	r3, #12
    cdd2:	220c      	movs	r2, #12
    cdd4:	4419      	add	r1, r3
    cdd6:	a801      	add	r0, sp, #4
    cdd8:	f7f3 fa72 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    cddc:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cde0:	2010      	movs	r0, #16
    cde2:	f000 f945 	bl	d070 <bt_keys_find>
	if (!keys) {
    cde6:	b320      	cbz	r0, ce32 <bt_smp_sign_verify+0x6e>
    cde8:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    cdea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cdec:	a904      	add	r1, sp, #16
    cdee:	f841 3d10 	str.w	r3, [r1, #-16]!
    cdf2:	68a0      	ldr	r0, [r4, #8]
    cdf4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    cdf6:	3b0c      	subs	r3, #12
    cdf8:	2204      	movs	r2, #4
    cdfa:	4418      	add	r0, r3
    cdfc:	f7f3 fa60 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    ce00:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    ce02:	3a0c      	subs	r2, #12
    ce04:	b292      	uxth	r2, r2
    ce06:	68a1      	ldr	r1, [r4, #8]
    ce08:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    ce0c:	f7fd feac 	bl	ab68 <smp_sign_buf>
	if (err) {
    ce10:	b990      	cbnz	r0, ce38 <bt_smp_sign_verify+0x74>
    ce12:	68a1      	ldr	r1, [r4, #8]
    ce14:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    ce16:	3b0c      	subs	r3, #12
    ce18:	220c      	movs	r2, #12
    ce1a:	4419      	add	r1, r3
    ce1c:	a801      	add	r0, sp, #4
    ce1e:	f01d f943 	bl	2a0a8 <memcmp>
    ce22:	4602      	mov	r2, r0
    ce24:	b958      	cbnz	r0, ce3e <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    ce26:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    ce28:	3301      	adds	r3, #1
    ce2a:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    ce2c:	4610      	mov	r0, r2
    ce2e:	b005      	add	sp, #20
    ce30:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    ce32:	f06f 0201 	mvn.w	r2, #1
    ce36:	e7f9      	b.n	ce2c <bt_smp_sign_verify+0x68>
		return -EIO;
    ce38:	f06f 0204 	mvn.w	r2, #4
    ce3c:	e7f6      	b.n	ce2c <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    ce3e:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    ce42:	e7f3      	b.n	ce2c <bt_smp_sign_verify+0x68>

0000ce44 <bt_smp_sign>:
{
    ce44:	b530      	push	{r4, r5, lr}
    ce46:	b083      	sub	sp, #12
    ce48:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    ce4a:	f100 0148 	add.w	r1, r0, #72	; 0x48
    ce4e:	2008      	movs	r0, #8
    ce50:	f000 f90e 	bl	d070 <bt_keys_find>
	if (!keys) {
    ce54:	b300      	cbz	r0, ce98 <bt_smp_sign+0x54>
    ce56:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    ce58:	210c      	movs	r1, #12
    ce5a:	f104 0008 	add.w	r0, r4, #8
    ce5e:	f00d fee5 	bl	1ac2c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    ce62:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ce64:	a902      	add	r1, sp, #8
    ce66:	f841 3d04 	str.w	r3, [r1, #-4]!
    ce6a:	68a0      	ldr	r0, [r4, #8]
    ce6c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    ce6e:	3b0c      	subs	r3, #12
    ce70:	2204      	movs	r2, #4
    ce72:	4418      	add	r0, r3
    ce74:	f7f3 fa24 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    ce78:	89a2      	ldrh	r2, [r4, #12]
    ce7a:	3a0c      	subs	r2, #12
    ce7c:	b292      	uxth	r2, r2
    ce7e:	68a1      	ldr	r1, [r4, #8]
    ce80:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ce84:	f7fd fe70 	bl	ab68 <smp_sign_buf>
	if (err) {
    ce88:	4602      	mov	r2, r0
    ce8a:	b940      	cbnz	r0, ce9e <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    ce8c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ce8e:	3301      	adds	r3, #1
    ce90:	65ab      	str	r3, [r5, #88]	; 0x58
}
    ce92:	4610      	mov	r0, r2
    ce94:	b003      	add	sp, #12
    ce96:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    ce98:	f06f 0201 	mvn.w	r2, #1
    ce9c:	e7f9      	b.n	ce92 <bt_smp_sign+0x4e>
		return -EIO;
    ce9e:	f06f 0204 	mvn.w	r2, #4
    cea2:	e7f6      	b.n	ce92 <bt_smp_sign+0x4e>

0000cea4 <bt_smp_update_keys>:
{
    cea4:	b570      	push	{r4, r5, r6, lr}
    cea6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    cea8:	f7fd fd5c 	bl	a964 <smp_chan_get>
	if (!smp) {
    ceac:	2800      	cmp	r0, #0
    ceae:	d03d      	beq.n	cf2c <bt_smp_update_keys+0x88>
    ceb0:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ceb2:	f3bf 8f5b 	dmb	ish
    ceb6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ceba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cebe:	f013 0f08 	tst.w	r3, #8
    cec2:	d033      	beq.n	cf2c <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    cec4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cec6:	b108      	cbz	r0, cecc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    cec8:	f000 f97f 	bl	d1ca <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    cecc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ced0:	f000 f8a4 	bl	d01c <bt_keys_get_addr>
    ced4:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    ced6:	b348      	cbz	r0, cf2c <bt_smp_update_keys+0x88>
    ced8:	f3bf 8f5b 	dmb	ish
    cedc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    cee0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    cee4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    cee8:	d121      	bne.n	cf2e <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    ceea:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    ceee:	3b01      	subs	r3, #1
    cef0:	2b02      	cmp	r3, #2
    cef2:	d82b      	bhi.n	cf4c <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    cef4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cef6:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cef8:	f3bf 8f5b 	dmb	ish
    cefc:	e853 2f00 	ldrex	r2, [r3]
    cf00:	f042 0201 	orr.w	r2, r2, #1
    cf04:	e843 2100 	strex	r1, r2, [r3]
    cf08:	2900      	cmp	r1, #0
    cf0a:	d1f7      	bne.n	cefc <bt_smp_update_keys+0x58>
    cf0c:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    cf10:	6f26      	ldr	r6, [r4, #112]	; 0x70
    cf12:	4628      	mov	r0, r5
    cf14:	f7fd fc8a 	bl	a82c <get_encryption_key_size>
    cf18:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf1a:	f3bf 8f5b 	dmb	ish
    cf1e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    cf22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    cf26:	f013 0f20 	tst.w	r3, #32
    cf2a:	d11e      	bne.n	cf6a <bt_smp_update_keys+0xc6>
    cf2c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    cf2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf30:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf32:	f3bf 8f5b 	dmb	ish
    cf36:	e853 2f00 	ldrex	r2, [r3]
    cf3a:	f042 0202 	orr.w	r2, r2, #2
    cf3e:	e843 2100 	strex	r1, r2, [r3]
    cf42:	2900      	cmp	r1, #0
    cf44:	d1f7      	bne.n	cf36 <bt_smp_update_keys+0x92>
    cf46:	f3bf 8f5b 	dmb	ish
    cf4a:	e7ce      	b.n	ceea <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    cf4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf4e:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cf50:	f3bf 8f5b 	dmb	ish
    cf54:	e853 2f00 	ldrex	r2, [r3]
    cf58:	f022 0201 	bic.w	r2, r2, #1
    cf5c:	e843 2100 	strex	r1, r2, [r3]
    cf60:	2900      	cmp	r1, #0
    cf62:	d1f7      	bne.n	cf54 <bt_smp_update_keys+0xb0>
    cf64:	f3bf 8f5b 	dmb	ish
    cf68:	e7d2      	b.n	cf10 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf6a:	f3bf 8f5b 	dmb	ish
    cf6e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    cf72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    cf76:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cf7a:	d0d7      	beq.n	cf2c <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    cf7c:	2120      	movs	r1, #32
    cf7e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cf80:	f000 f90c 	bl	d19c <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    cf84:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cf86:	2210      	movs	r2, #16
    cf88:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    cf8c:	301a      	adds	r0, #26
    cf8e:	f7f3 f997 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    cf92:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf94:	2000      	movs	r0, #0
    cf96:	2100      	movs	r1, #0
    cf98:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    cf9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf9e:	2200      	movs	r2, #0
    cfa0:	831a      	strh	r2, [r3, #24]
    cfa2:	e7c3      	b.n	cf2c <bt_smp_update_keys+0x88>

0000cfa4 <bt_smp_get_tk>:
{
    cfa4:	b570      	push	{r4, r5, r6, lr}
    cfa6:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    cfa8:	f7fd fcdc 	bl	a964 <smp_chan_get>
	if (!smp) {
    cfac:	b300      	cbz	r0, cff0 <bt_smp_get_tk+0x4c>
    cfae:	4604      	mov	r4, r0
    cfb0:	f3bf 8f5b 	dmb	ish
    cfb4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cfb8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cfbc:	f013 0f08 	tst.w	r3, #8
    cfc0:	d101      	bne.n	cfc6 <bt_smp_get_tk+0x22>
		return false;
    cfc2:	2000      	movs	r0, #0
    cfc4:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    cfc6:	f7fd fc31 	bl	a82c <get_encryption_key_size>
    cfca:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    cfcc:	4602      	mov	r2, r0
    cfce:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    cfd2:	4628      	mov	r0, r5
    cfd4:	f7f3 f974 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    cfd8:	2e0f      	cmp	r6, #15
    cfda:	d901      	bls.n	cfe0 <bt_smp_get_tk+0x3c>
	return true;
    cfdc:	2001      	movs	r0, #1
}
    cfde:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    cfe0:	f1c6 0210 	rsb	r2, r6, #16
    cfe4:	2100      	movs	r1, #0
    cfe6:	19a8      	adds	r0, r5, r6
    cfe8:	f01d f8f2 	bl	2a1d0 <memset>
	return true;
    cfec:	2001      	movs	r0, #1
    cfee:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    cff0:	2000      	movs	r0, #0
    cff2:	bd70      	pop	{r4, r5, r6, pc}

0000cff4 <bt_smp_init>:

int bt_smp_init(void)
{
    cff4:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    cff6:	f7fd fca9 	bl	a94c <le_sc_supported>
    cffa:	4b05      	ldr	r3, [pc, #20]	; (d010 <bt_smp_init+0x1c>)
    cffc:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    cffe:	4805      	ldr	r0, [pc, #20]	; (d014 <bt_smp_init+0x20>)
    d000:	f7fa fe04 	bl	7c0c <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    d004:	4804      	ldr	r0, [pc, #16]	; (d018 <bt_smp_init+0x24>)
    d006:	f7f9 fc7f 	bl	6908 <bt_pub_key_gen>

	return smp_self_test();
}
    d00a:	2000      	movs	r0, #0
    d00c:	bd08      	pop	{r3, pc}
    d00e:	bf00      	nop
    d010:	200009a8 	.word	0x200009a8
    d014:	2000bb3c 	.word	0x2000bb3c
    d018:	2000bb5c 	.word	0x2000bb5c

0000d01c <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d01e:	b083      	sub	sp, #12
    d020:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d022:	2500      	movs	r5, #0
    d024:	b11d      	cbz	r5, d02e <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    d026:	2400      	movs	r4, #0
}
    d028:	4620      	mov	r0, r4
    d02a:	b003      	add	sp, #12
    d02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    d02e:	00eb      	lsls	r3, r5, #3
    d030:	442b      	add	r3, r5
    d032:	011a      	lsls	r2, r3, #4
    d034:	4c0d      	ldr	r4, [pc, #52]	; (d06c <bt_keys_get_addr+0x50>)
    d036:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    d038:	2207      	movs	r2, #7
    d03a:	4631      	mov	r1, r6
    d03c:	4620      	mov	r0, r4
    d03e:	f01d f833 	bl	2a0a8 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    d042:	2800      	cmp	r0, #0
    d044:	d0f0      	beq.n	d028 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    d046:	2300      	movs	r3, #0
    d048:	9300      	str	r3, [sp, #0]
    d04a:	f8cd 3003 	str.w	r3, [sp, #3]
    d04e:	2207      	movs	r2, #7
    d050:	4669      	mov	r1, sp
    d052:	4620      	mov	r0, r4
    d054:	f01d f828 	bl	2a0a8 <memcmp>
    d058:	b108      	cbz	r0, d05e <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d05a:	3501      	adds	r5, #1
    d05c:	e7e2      	b.n	d024 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d05e:	2207      	movs	r2, #7
    d060:	4631      	mov	r1, r6
    d062:	4620      	mov	r0, r4
    d064:	f7f3 f92c 	bl	2c0 <memcpy>
			return keys;
    d068:	e7de      	b.n	d028 <bt_keys_get_addr+0xc>
    d06a:	bf00      	nop
    d06c:	200009b0 	.word	0x200009b0

0000d070 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d070:	b570      	push	{r4, r5, r6, lr}
    d072:	4605      	mov	r5, r0
    d074:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d076:	2400      	movs	r4, #0
    d078:	b10c      	cbz	r4, d07e <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d07a:	2000      	movs	r0, #0
}
    d07c:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d07e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d082:	011a      	lsls	r2, r3, #4
    d084:	4b0b      	ldr	r3, [pc, #44]	; (d0b4 <bt_keys_find+0x44>)
    d086:	4413      	add	r3, r2
    d088:	899b      	ldrh	r3, [r3, #12]
    d08a:	422b      	tst	r3, r5
    d08c:	d101      	bne.n	d092 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d08e:	3401      	adds	r4, #1
    d090:	e7f2      	b.n	d078 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d092:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d096:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d098:	2207      	movs	r2, #7
    d09a:	4631      	mov	r1, r6
    d09c:	4805      	ldr	r0, [pc, #20]	; (d0b4 <bt_keys_find+0x44>)
    d09e:	4418      	add	r0, r3
    d0a0:	f01d f802 	bl	2a0a8 <memcmp>
		if ((key_pool[i].keys & type) &&
    d0a4:	2800      	cmp	r0, #0
    d0a6:	d1f2      	bne.n	d08e <bt_keys_find+0x1e>
			return &key_pool[i];
    d0a8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d0ac:	0123      	lsls	r3, r4, #4
    d0ae:	4801      	ldr	r0, [pc, #4]	; (d0b4 <bt_keys_find+0x44>)
    d0b0:	4418      	add	r0, r3
    d0b2:	bd70      	pop	{r4, r5, r6, pc}
    d0b4:	200009b0 	.word	0x200009b0

0000d0b8 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d0ba:	7803      	ldrb	r3, [r0, #0]
    d0bc:	2b01      	cmp	r3, #1
    d0be:	d004      	beq.n	d0ca <bt_keys_find_irk+0x12>
		return false;
    d0c0:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d0c2:	b153      	cbz	r3, d0da <bt_keys_find_irk+0x22>
    d0c4:	4605      	mov	r5, r0
    d0c6:	2400      	movs	r4, #0
    d0c8:	e00a      	b.n	d0e0 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d0ca:	7983      	ldrb	r3, [r0, #6]
    d0cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d0d0:	2b40      	cmp	r3, #64	; 0x40
    d0d2:	bf14      	ite	ne
    d0d4:	2300      	movne	r3, #0
    d0d6:	2301      	moveq	r3, #1
    d0d8:	e7f3      	b.n	d0c2 <bt_keys_find_irk+0xa>
		return NULL;
    d0da:	2000      	movs	r0, #0
    d0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d0de:	3401      	adds	r4, #1
    d0e0:	b9c4      	cbnz	r4, d114 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d0e2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d0e6:	011a      	lsls	r2, r3, #4
    d0e8:	4b1e      	ldr	r3, [pc, #120]	; (d164 <bt_keys_find_irk+0xac>)
    d0ea:	4413      	add	r3, r2
    d0ec:	899b      	ldrh	r3, [r3, #12]
    d0ee:	f013 0f02 	tst.w	r3, #2
    d0f2:	d0f4      	beq.n	d0de <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d0f4:	4611      	mov	r1, r2
    d0f6:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d0f8:	2206      	movs	r2, #6
    d0fa:	4b1a      	ldr	r3, [pc, #104]	; (d164 <bt_keys_find_irk+0xac>)
    d0fc:	4419      	add	r1, r3
    d0fe:	1c68      	adds	r0, r5, #1
    d100:	f01c ffd2 	bl	2a0a8 <memcmp>
    d104:	2800      	cmp	r0, #0
    d106:	d1ea      	bne.n	d0de <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d108:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d10c:	0123      	lsls	r3, r4, #4
    d10e:	4815      	ldr	r0, [pc, #84]	; (d164 <bt_keys_find_irk+0xac>)
    d110:	4418      	add	r0, r3
    d112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d114:	2400      	movs	r4, #0
    d116:	e000      	b.n	d11a <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d118:	3401      	adds	r4, #1
    d11a:	bb04      	cbnz	r4, d15e <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d11c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d120:	011a      	lsls	r2, r3, #4
    d122:	4b10      	ldr	r3, [pc, #64]	; (d164 <bt_keys_find_irk+0xac>)
    d124:	4413      	add	r3, r2
    d126:	899b      	ldrh	r3, [r3, #12]
    d128:	f013 0f02 	tst.w	r3, #2
    d12c:	d0f4      	beq.n	d118 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d12e:	4610      	mov	r0, r2
    d130:	3030      	adds	r0, #48	; 0x30
    d132:	1c6e      	adds	r6, r5, #1
    d134:	4631      	mov	r1, r6
    d136:	4b0b      	ldr	r3, [pc, #44]	; (d164 <bt_keys_find_irk+0xac>)
    d138:	4418      	add	r0, r3
    d13a:	f7f7 f987 	bl	444c <bt_rpa_irk_matches>
    d13e:	2800      	cmp	r0, #0
    d140:	d0ea      	beq.n	d118 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d142:	4d08      	ldr	r5, [pc, #32]	; (d164 <bt_keys_find_irk+0xac>)
    d144:	00e7      	lsls	r7, r4, #3
    d146:	193a      	adds	r2, r7, r4
    d148:	0113      	lsls	r3, r2, #4
    d14a:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d14c:	2206      	movs	r2, #6
    d14e:	4631      	mov	r1, r6
    d150:	18e8      	adds	r0, r5, r3
    d152:	f7f3 f8b5 	bl	2c0 <memcpy>

			return &key_pool[i];
    d156:	443c      	add	r4, r7
    d158:	0120      	lsls	r0, r4, #4
    d15a:	4428      	add	r0, r5
    d15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d15e:	2000      	movs	r0, #0
}
    d160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d162:	bf00      	nop
    d164:	200009b0 	.word	0x200009b0

0000d168 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d168:	b538      	push	{r3, r4, r5, lr}
    d16a:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d16c:	2400      	movs	r4, #0
    d16e:	b10c      	cbz	r4, d174 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d170:	2000      	movs	r0, #0
}
    d172:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d174:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d178:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d17a:	2207      	movs	r2, #7
    d17c:	4629      	mov	r1, r5
    d17e:	4806      	ldr	r0, [pc, #24]	; (d198 <bt_keys_find_addr+0x30>)
    d180:	4418      	add	r0, r3
    d182:	f01c ff91 	bl	2a0a8 <memcmp>
    d186:	b108      	cbz	r0, d18c <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d188:	3401      	adds	r4, #1
    d18a:	e7f0      	b.n	d16e <bt_keys_find_addr+0x6>
			return &key_pool[i];
    d18c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d190:	0123      	lsls	r3, r4, #4
    d192:	4801      	ldr	r0, [pc, #4]	; (d198 <bt_keys_find_addr+0x30>)
    d194:	4418      	add	r0, r3
    d196:	bd38      	pop	{r3, r4, r5, pc}
    d198:	200009b0 	.word	0x200009b0

0000d19c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    d19c:	8983      	ldrh	r3, [r0, #12]
    d19e:	4319      	orrs	r1, r3
    d1a0:	8181      	strh	r1, [r0, #12]
    d1a2:	4770      	bx	lr

0000d1a4 <bt_keys_get_type>:
{
    d1a4:	b570      	push	{r4, r5, r6, lr}
    d1a6:	4606      	mov	r6, r0
    d1a8:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    d1aa:	f7ff ff61 	bl	d070 <bt_keys_find>
	if (keys) {
    d1ae:	4604      	mov	r4, r0
    d1b0:	b108      	cbz	r0, d1b6 <bt_keys_get_type+0x12>
}
    d1b2:	4620      	mov	r0, r4
    d1b4:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    d1b6:	4628      	mov	r0, r5
    d1b8:	f7ff ff30 	bl	d01c <bt_keys_get_addr>
	if (!keys) {
    d1bc:	4604      	mov	r4, r0
    d1be:	2800      	cmp	r0, #0
    d1c0:	d0f7      	beq.n	d1b2 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    d1c2:	4631      	mov	r1, r6
    d1c4:	f7ff ffea 	bl	d19c <bt_keys_add_type>
	return keys;
    d1c8:	e7f3      	b.n	d1b2 <bt_keys_get_type+0xe>

0000d1ca <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    d1ca:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    d1cc:	2290      	movs	r2, #144	; 0x90
    d1ce:	2100      	movs	r1, #0
    d1d0:	f01c fffe 	bl	2a1d0 <memset>
    d1d4:	bd08      	pop	{r3, pc}

0000d1d6 <status_cmd_handle>:
}
    d1d6:	f06f 0015 	mvn.w	r0, #21
    d1da:	4770      	bx	lr

0000d1dc <evt_create>:
{
    d1dc:	b538      	push	{r3, r4, r5, lr}
    d1de:	460d      	mov	r5, r1
    d1e0:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    d1e2:	2102      	movs	r1, #2
    d1e4:	3008      	adds	r0, #8
    d1e6:	f00d fd21 	bl	1ac2c <net_buf_simple_add>
	hdr->evt = evt;
    d1ea:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    d1ec:	7044      	strb	r4, [r0, #1]
    d1ee:	bd38      	pop	{r3, r4, r5, pc}

0000d1f0 <cmd_status>:
{
    d1f0:	b538      	push	{r3, r4, r5, lr}
    d1f2:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    d1f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d1f8:	f7f9 fb5e 	bl	68b8 <bt_buf_get_cmd_complete>
    d1fc:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d1fe:	2204      	movs	r2, #4
    d200:	210f      	movs	r1, #15
    d202:	f7ff ffeb 	bl	d1dc <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d206:	2104      	movs	r1, #4
    d208:	f104 0008 	add.w	r0, r4, #8
    d20c:	f00d fd0e 	bl	1ac2c <net_buf_simple_add>
	cs->status = status;
    d210:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    d212:	2301      	movs	r3, #1
    d214:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d216:	4b02      	ldr	r3, [pc, #8]	; (d220 <cmd_status+0x30>)
    d218:	881b      	ldrh	r3, [r3, #0]
    d21a:	8043      	strh	r3, [r0, #2]
}
    d21c:	4620      	mov	r0, r4
    d21e:	bd38      	pop	{r3, r4, r5, pc}
    d220:	20000a40 	.word	0x20000a40

0000d224 <disconnect>:
{
    d224:	b510      	push	{r4, lr}
    d226:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    d228:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d22a:	7899      	ldrb	r1, [r3, #2]
    d22c:	8818      	ldrh	r0, [r3, #0]
    d22e:	f00b f966 	bl	184fe <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d232:	b100      	cbz	r0, d236 <disconnect+0x12>
    d234:	200c      	movs	r0, #12
    d236:	f7ff ffdb 	bl	d1f0 <cmd_status>
    d23a:	6020      	str	r0, [r4, #0]
    d23c:	bd10      	pop	{r4, pc}
	...

0000d240 <cmd_complete>:
{
    d240:	b538      	push	{r3, r4, r5, lr}
    d242:	4604      	mov	r4, r0
    d244:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    d246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d24a:	f7f9 fb35 	bl	68b8 <bt_buf_get_cmd_complete>
    d24e:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d250:	1cea      	adds	r2, r5, #3
    d252:	b2d2      	uxtb	r2, r2
    d254:	210e      	movs	r1, #14
    d256:	f7ff ffc1 	bl	d1dc <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d25a:	6820      	ldr	r0, [r4, #0]
    d25c:	2103      	movs	r1, #3
    d25e:	3008      	adds	r0, #8
    d260:	f00d fce4 	bl	1ac2c <net_buf_simple_add>
	cc->ncmd = 1;
    d264:	2301      	movs	r3, #1
    d266:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d268:	4b04      	ldr	r3, [pc, #16]	; (d27c <cmd_complete+0x3c>)
    d26a:	881b      	ldrh	r3, [r3, #0]
    d26c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d270:	6820      	ldr	r0, [r4, #0]
    d272:	4629      	mov	r1, r5
    d274:	3008      	adds	r0, #8
    d276:	f00d fcd9 	bl	1ac2c <net_buf_simple_add>
}
    d27a:	bd38      	pop	{r3, r4, r5, pc}
    d27c:	20000a40 	.word	0x20000a40

0000d280 <set_event_mask_page_2>:
{
    d280:	b570      	push	{r4, r5, r6, lr}
    d282:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    d284:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    d286:	79da      	ldrb	r2, [r3, #7]
    d288:	7999      	ldrb	r1, [r3, #6]
    d28a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d28e:	7958      	ldrb	r0, [r3, #5]
    d290:	791a      	ldrb	r2, [r3, #4]
    d292:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d296:	2400      	movs	r4, #0
    d298:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    d29c:	78d9      	ldrb	r1, [r3, #3]
    d29e:	789a      	ldrb	r2, [r3, #2]
    d2a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d2a4:	7859      	ldrb	r1, [r3, #1]
    d2a6:	781b      	ldrb	r3, [r3, #0]
    d2a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d2ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d2b0:	ea44 0003 	orr.w	r0, r4, r3
    d2b4:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d2b6:	4b04      	ldr	r3, [pc, #16]	; (d2c8 <set_event_mask_page_2+0x48>)
    d2b8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d2bc:	2101      	movs	r1, #1
    d2be:	4630      	mov	r0, r6
    d2c0:	f7ff ffbe 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    d2c4:	7004      	strb	r4, [r0, #0]
    d2c6:	bd70      	pop	{r4, r5, r6, pc}
    d2c8:	20000ad0 	.word	0x20000ad0

0000d2cc <read_local_version_info>:
{
    d2cc:	b508      	push	{r3, lr}
    d2ce:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2d0:	2109      	movs	r1, #9
    d2d2:	f7ff ffb5 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d2d6:	2300      	movs	r3, #0
    d2d8:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    d2da:	2209      	movs	r2, #9
    d2dc:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    d2de:	7083      	strb	r3, [r0, #2]
    d2e0:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d2e2:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d2e8:	7143      	strb	r3, [r0, #5]
    d2ea:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d2ec:	71c3      	strb	r3, [r0, #7]
    d2ee:	7203      	strb	r3, [r0, #8]
    d2f0:	bd08      	pop	{r3, pc}

0000d2f2 <le_read_buffer_size>:
{
    d2f2:	b508      	push	{r3, lr}
    d2f4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2f6:	2104      	movs	r1, #4
    d2f8:	f7ff ffa2 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d2fc:	2300      	movs	r3, #0
    d2fe:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d300:	221b      	movs	r2, #27
    d302:	7042      	strb	r2, [r0, #1]
    d304:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d306:	2302      	movs	r3, #2
    d308:	70c3      	strb	r3, [r0, #3]
    d30a:	bd08      	pop	{r3, pc}

0000d30c <le_read_supp_states>:
{
    d30c:	b508      	push	{r3, lr}
    d30e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d310:	2109      	movs	r1, #9
    d312:	f7ff ff95 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d316:	2200      	movs	r2, #0
    d318:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    d31a:	23ff      	movs	r3, #255	; 0xff
    d31c:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d31e:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    d320:	213f      	movs	r1, #63	; 0x3f
    d322:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    d324:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    d326:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d328:	2303      	movs	r3, #3
    d32a:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    d32c:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    d32e:	7202      	strb	r2, [r0, #8]
    d330:	bd08      	pop	{r3, pc}

0000d332 <le_read_adv_chan_tx_power>:
{
    d332:	b508      	push	{r3, lr}
    d334:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d336:	2102      	movs	r1, #2
    d338:	f7ff ff82 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d33c:	2300      	movs	r3, #0
    d33e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d340:	7043      	strb	r3, [r0, #1]
    d342:	bd08      	pop	{r3, pc}

0000d344 <vs_read_version_info>:
{
    d344:	b508      	push	{r3, lr}
    d346:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d348:	210d      	movs	r1, #13
    d34a:	f7ff ff79 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d34e:	2300      	movs	r3, #0
    d350:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d352:	2202      	movs	r2, #2
    d354:	7042      	strb	r2, [r0, #1]
    d356:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d358:	70c2      	strb	r2, [r0, #3]
    d35a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d35c:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d35e:	2201      	movs	r2, #1
    d360:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d362:	2209      	movs	r2, #9
    d364:	71c2      	strb	r2, [r0, #7]
    d366:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d368:	2263      	movs	r2, #99	; 0x63
    d36a:	7242      	strb	r2, [r0, #9]
    d36c:	7283      	strb	r3, [r0, #10]
    d36e:	72c3      	strb	r3, [r0, #11]
    d370:	7303      	strb	r3, [r0, #12]
    d372:	bd08      	pop	{r3, pc}

0000d374 <meta_evt>:
{
    d374:	b570      	push	{r4, r5, r6, lr}
    d376:	4604      	mov	r4, r0
    d378:	460e      	mov	r6, r1
    d37a:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d37c:	3201      	adds	r2, #1
    d37e:	b2d2      	uxtb	r2, r2
    d380:	213e      	movs	r1, #62	; 0x3e
    d382:	f7ff ff2b 	bl	d1dc <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    d386:	3408      	adds	r4, #8
    d388:	2101      	movs	r1, #1
    d38a:	4620      	mov	r0, r4
    d38c:	f00d fc4e 	bl	1ac2c <net_buf_simple_add>
	me->subevent = subevt;
    d390:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    d392:	4629      	mov	r1, r5
    d394:	4620      	mov	r0, r4
    d396:	f00d fc49 	bl	1ac2c <net_buf_simple_add>
}
    d39a:	bd70      	pop	{r4, r5, r6, pc}

0000d39c <le_chan_sel_algo>:
{
    d39c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d39e:	4b0f      	ldr	r3, [pc, #60]	; (d3dc <le_chan_sel_algo+0x40>)
    d3a0:	e9d3 4500 	ldrd	r4, r5, [r3]
    d3a4:	2400      	movs	r4, #0
    d3a6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d3aa:	ea54 0305 	orrs.w	r3, r4, r5
    d3ae:	d008      	beq.n	d3c2 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d3b0:	4b0b      	ldr	r3, [pc, #44]	; (d3e0 <le_chan_sel_algo+0x44>)
    d3b2:	e9d3 4500 	ldrd	r4, r5, [r3]
    d3b6:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    d3ba:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d3bc:	ea54 0305 	orrs.w	r3, r4, r5
    d3c0:	d100      	bne.n	d3c4 <le_chan_sel_algo+0x28>
    d3c2:	bd38      	pop	{r3, r4, r5, pc}
    d3c4:	4613      	mov	r3, r2
    d3c6:	460d      	mov	r5, r1
    d3c8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d3ca:	2203      	movs	r2, #3
    d3cc:	2114      	movs	r1, #20
    d3ce:	4618      	mov	r0, r3
    d3d0:	f7ff ffd0 	bl	d374 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d3d4:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d3d6:	78e3      	ldrb	r3, [r4, #3]
    d3d8:	7083      	strb	r3, [r0, #2]
    d3da:	e7f2      	b.n	d3c2 <le_chan_sel_algo+0x26>
    d3dc:	2000bb68 	.word	0x2000bb68
    d3e0:	2000bb70 	.word	0x2000bb70

0000d3e4 <disconn_complete>:
{
    d3e4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d3e6:	4b11      	ldr	r3, [pc, #68]	; (d42c <disconn_complete+0x48>)
    d3e8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d3ec:	f004 0410 	and.w	r4, r4, #16
    d3f0:	2500      	movs	r5, #0
    d3f2:	ea54 0305 	orrs.w	r3, r4, r5
    d3f6:	d100      	bne.n	d3fa <disconn_complete+0x16>
    d3f8:	bd70      	pop	{r4, r5, r6, pc}
    d3fa:	4614      	mov	r4, r2
    d3fc:	460e      	mov	r6, r1
    d3fe:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d400:	2204      	movs	r2, #4
    d402:	2105      	movs	r1, #5
    d404:	4620      	mov	r0, r4
    d406:	f7ff fee9 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d40a:	2104      	movs	r1, #4
    d40c:	f104 0008 	add.w	r0, r4, #8
    d410:	f00d fc0c 	bl	1ac2c <net_buf_simple_add>
	ep->status = 0x00;
    d414:	2300      	movs	r3, #0
    d416:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d418:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d41c:	782b      	ldrb	r3, [r5, #0]
    d41e:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d420:	4a03      	ldr	r2, [pc, #12]	; (d430 <disconn_complete+0x4c>)
    d422:	6813      	ldr	r3, [r2, #0]
    d424:	3b01      	subs	r3, #1
    d426:	6013      	str	r3, [r2, #0]
    d428:	e7e6      	b.n	d3f8 <disconn_complete+0x14>
    d42a:	bf00      	nop
    d42c:	2000bb68 	.word	0x2000bb68
    d430:	20000a44 	.word	0x20000a44

0000d434 <enc_refresh_complete>:
{
    d434:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d436:	4b0d      	ldr	r3, [pc, #52]	; (d46c <enc_refresh_complete+0x38>)
    d438:	e9d3 4500 	ldrd	r4, r5, [r3]
    d43c:	2400      	movs	r4, #0
    d43e:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    d442:	ea54 0305 	orrs.w	r3, r4, r5
    d446:	d100      	bne.n	d44a <enc_refresh_complete+0x16>
    d448:	bd38      	pop	{r3, r4, r5, pc}
    d44a:	4614      	mov	r4, r2
    d44c:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d44e:	2203      	movs	r2, #3
    d450:	2130      	movs	r1, #48	; 0x30
    d452:	4620      	mov	r0, r4
    d454:	f7ff fec2 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d458:	2103      	movs	r1, #3
    d45a:	f104 0008 	add.w	r0, r4, #8
    d45e:	f00d fbe5 	bl	1ac2c <net_buf_simple_add>
	ep->status = 0x00;
    d462:	2300      	movs	r3, #0
    d464:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d466:	f8a0 5001 	strh.w	r5, [r0, #1]
    d46a:	e7ed      	b.n	d448 <enc_refresh_complete+0x14>
    d46c:	2000bb68 	.word	0x2000bb68

0000d470 <auth_payload_timeout_exp>:
{
    d470:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d472:	4b0c      	ldr	r3, [pc, #48]	; (d4a4 <auth_payload_timeout_exp+0x34>)
    d474:	e9d3 4500 	ldrd	r4, r5, [r3]
    d478:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    d47c:	2500      	movs	r5, #0
    d47e:	ea54 0305 	orrs.w	r3, r4, r5
    d482:	d100      	bne.n	d486 <auth_payload_timeout_exp+0x16>
    d484:	bd38      	pop	{r3, r4, r5, pc}
    d486:	4614      	mov	r4, r2
    d488:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d48a:	2202      	movs	r2, #2
    d48c:	2157      	movs	r1, #87	; 0x57
    d48e:	4620      	mov	r0, r4
    d490:	f7ff fea4 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d494:	2102      	movs	r1, #2
    d496:	f104 0008 	add.w	r0, r4, #8
    d49a:	f00d fbc7 	bl	1ac2c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d49e:	8005      	strh	r5, [r0, #0]
    d4a0:	e7f0      	b.n	d484 <auth_payload_timeout_exp+0x14>
    d4a2:	bf00      	nop
    d4a4:	20000ad0 	.word	0x20000ad0

0000d4a8 <remote_version_info>:
{
    d4a8:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d4aa:	4b11      	ldr	r3, [pc, #68]	; (d4f0 <remote_version_info+0x48>)
    d4ac:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4b0:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d4b4:	2500      	movs	r5, #0
    d4b6:	ea54 0305 	orrs.w	r3, r4, r5
    d4ba:	d100      	bne.n	d4be <remote_version_info+0x16>
    d4bc:	bd70      	pop	{r4, r5, r6, pc}
    d4be:	4615      	mov	r5, r2
    d4c0:	460e      	mov	r6, r1
    d4c2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d4c4:	2208      	movs	r2, #8
    d4c6:	210c      	movs	r1, #12
    d4c8:	4628      	mov	r0, r5
    d4ca:	f7ff fe87 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d4ce:	2108      	movs	r1, #8
    d4d0:	1868      	adds	r0, r5, r1
    d4d2:	f00d fbab 	bl	1ac2c <net_buf_simple_add>
	ep->status = 0x00;
    d4d6:	2300      	movs	r3, #0
    d4d8:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d4da:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d4de:	7923      	ldrb	r3, [r4, #4]
    d4e0:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d4e2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d4e6:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d4e8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d4ec:	80c3      	strh	r3, [r0, #6]
    d4ee:	e7e5      	b.n	d4bc <remote_version_info+0x14>
    d4f0:	2000bb68 	.word	0x2000bb68

0000d4f4 <encrypt_change>:
{
    d4f4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d4f6:	4b0f      	ldr	r3, [pc, #60]	; (d534 <encrypt_change+0x40>)
    d4f8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4fc:	f004 0480 	and.w	r4, r4, #128	; 0x80
    d500:	2500      	movs	r5, #0
    d502:	ea54 0305 	orrs.w	r3, r4, r5
    d506:	d100      	bne.n	d50a <encrypt_change+0x16>
    d508:	bd70      	pop	{r4, r5, r6, pc}
    d50a:	4615      	mov	r5, r2
    d50c:	460e      	mov	r6, r1
    d50e:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d510:	2204      	movs	r2, #4
    d512:	2108      	movs	r1, #8
    d514:	4628      	mov	r0, r5
    d516:	f7ff fe61 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d51a:	2104      	movs	r1, #4
    d51c:	f105 0008 	add.w	r0, r5, #8
    d520:	f00d fb84 	bl	1ac2c <net_buf_simple_add>
	ep->status = err;
    d524:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d526:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d52a:	fab4 f384 	clz	r3, r4
    d52e:	095b      	lsrs	r3, r3, #5
    d530:	70c3      	strb	r3, [r0, #3]
    d532:	e7e9      	b.n	d508 <encrypt_change+0x14>
    d534:	2000bb68 	.word	0x2000bb68

0000d538 <read_remote_ver_info>:
{
    d538:	b510      	push	{r4, lr}
    d53a:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    d53c:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    d53e:	8818      	ldrh	r0, [r3, #0]
    d540:	f00a ffc7 	bl	184d2 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d544:	b100      	cbz	r0, d548 <read_remote_ver_info+0x10>
    d546:	200c      	movs	r0, #12
    d548:	f7ff fe52 	bl	d1f0 <cmd_status>
    d54c:	6020      	str	r0, [r4, #0]
    d54e:	bd10      	pop	{r4, pc}

0000d550 <link_control_cmd_handle>:
{
    d550:	b508      	push	{r3, lr}
    d552:	460b      	mov	r3, r1
	switch (ocf) {
    d554:	2806      	cmp	r0, #6
    d556:	d004      	beq.n	d562 <link_control_cmd_handle+0x12>
    d558:	281d      	cmp	r0, #29
    d55a:	d008      	beq.n	d56e <link_control_cmd_handle+0x1e>
		return -EINVAL;
    d55c:	f06f 0015 	mvn.w	r0, #21
}
    d560:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    d562:	4611      	mov	r1, r2
    d564:	4618      	mov	r0, r3
    d566:	f7ff fe5d 	bl	d224 <disconnect>
	return 0;
    d56a:	2000      	movs	r0, #0
		break;
    d56c:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    d56e:	4611      	mov	r1, r2
    d570:	4618      	mov	r0, r3
    d572:	f7ff ffe1 	bl	d538 <read_remote_ver_info>
	return 0;
    d576:	2000      	movs	r0, #0
		break;
    d578:	bd08      	pop	{r3, pc}
	...

0000d57c <reset>:
{
    d57c:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    d57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d582:	4b0f      	ldr	r3, [pc, #60]	; (d5c0 <reset+0x44>)
    d584:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d586:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d58a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d58e:	4b0d      	ldr	r3, [pc, #52]	; (d5c4 <reset+0x48>)
    d590:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d594:	2400      	movs	r4, #0
    d596:	2500      	movs	r5, #0
    d598:	4b0b      	ldr	r3, [pc, #44]	; (d5c8 <reset+0x4c>)
    d59a:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d59e:	241f      	movs	r4, #31
    d5a0:	2500      	movs	r5, #0
    d5a2:	4b0a      	ldr	r3, [pc, #40]	; (d5cc <reset+0x50>)
    d5a4:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    d5a8:	b140      	cbz	r0, d5bc <reset+0x40>
    d5aa:	460c      	mov	r4, r1
		ll_reset();
    d5ac:	f00a fc8c 	bl	17ec8 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    d5b0:	2101      	movs	r1, #1
    d5b2:	4620      	mov	r0, r4
    d5b4:	f7ff fe44 	bl	d240 <cmd_complete>
		ccst->status = 0x00;
    d5b8:	2300      	movs	r3, #0
    d5ba:	7003      	strb	r3, [r0, #0]
    d5bc:	bd38      	pop	{r3, r4, r5, pc}
    d5be:	bf00      	nop
    d5c0:	20000a48 	.word	0x20000a48
    d5c4:	2000bb68 	.word	0x2000bb68
    d5c8:	20000ad0 	.word	0x20000ad0
    d5cc:	2000bb70 	.word	0x2000bb70

0000d5d0 <read_tx_power_level>:
{
    d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5d2:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    d5d4:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d5d6:	881d      	ldrh	r5, [r3, #0]
    d5d8:	b2ae      	uxth	r6, r5
	type = cmd->type;
    d5da:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d5dc:	2104      	movs	r1, #4
    d5de:	4610      	mov	r0, r2
    d5e0:	f7ff fe2e 	bl	d240 <cmd_complete>
    d5e4:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    d5e6:	1cc2      	adds	r2, r0, #3
    d5e8:	4639      	mov	r1, r7
    d5ea:	4630      	mov	r0, r6
    d5ec:	f00a ff9d 	bl	1852a <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5f0:	b120      	cbz	r0, d5fc <read_tx_power_level+0x2c>
    d5f2:	2302      	movs	r3, #2
    d5f4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d5f6:	f8a4 5001 	strh.w	r5, [r4, #1]
    d5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5fc:	2300      	movs	r3, #0
    d5fe:	e7f9      	b.n	d5f4 <read_tx_power_level+0x24>

0000d600 <read_auth_payload_timeout>:
{
    d600:	b570      	push	{r4, r5, r6, lr}
    d602:	b082      	sub	sp, #8
    d604:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    d606:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d608:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d60a:	f10d 0106 	add.w	r1, sp, #6
    d60e:	b2a0      	uxth	r0, r4
    d610:	f00a ff9a 	bl	18548 <ll_apto_get>
    d614:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d616:	2105      	movs	r1, #5
    d618:	4630      	mov	r0, r6
    d61a:	f7ff fe11 	bl	d240 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d61e:	b14d      	cbz	r5, d634 <read_auth_payload_timeout+0x34>
    d620:	230c      	movs	r3, #12
    d622:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d624:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d628:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d62c:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    d630:	b002      	add	sp, #8
    d632:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d634:	2300      	movs	r3, #0
    d636:	e7f4      	b.n	d622 <read_auth_payload_timeout+0x22>

0000d638 <write_auth_payload_timeout>:
{
    d638:	b570      	push	{r4, r5, r6, lr}
    d63a:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    d63c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d63e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d640:	8859      	ldrh	r1, [r3, #2]
    d642:	b2a0      	uxth	r0, r4
    d644:	f00a ff9c 	bl	18580 <ll_apto_set>
    d648:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d64a:	2103      	movs	r1, #3
    d64c:	4630      	mov	r0, r6
    d64e:	f7ff fdf7 	bl	d240 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d652:	b125      	cbz	r5, d65e <write_auth_payload_timeout+0x26>
    d654:	230c      	movs	r3, #12
    d656:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d658:	f8a0 4001 	strh.w	r4, [r0, #1]
    d65c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d65e:	2300      	movs	r3, #0
    d660:	e7f9      	b.n	d656 <write_auth_payload_timeout+0x1e>

0000d662 <ctrl_bb_cmd_handle>:
{
    d662:	b508      	push	{r3, lr}
    d664:	460b      	mov	r3, r1
	switch (ocf) {
    d666:	282d      	cmp	r0, #45	; 0x2d
    d668:	d01f      	beq.n	d6aa <ctrl_bb_cmd_handle+0x48>
    d66a:	d908      	bls.n	d67e <ctrl_bb_cmd_handle+0x1c>
    d66c:	287b      	cmp	r0, #123	; 0x7b
    d66e:	d022      	beq.n	d6b6 <ctrl_bb_cmd_handle+0x54>
    d670:	287c      	cmp	r0, #124	; 0x7c
    d672:	d026      	beq.n	d6c2 <ctrl_bb_cmd_handle+0x60>
    d674:	2863      	cmp	r0, #99	; 0x63
    d676:	d012      	beq.n	d69e <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    d678:	f06f 0015 	mvn.w	r0, #21
}
    d67c:	bd08      	pop	{r3, pc}
	switch (ocf) {
    d67e:	2801      	cmp	r0, #1
    d680:	d007      	beq.n	d692 <ctrl_bb_cmd_handle+0x30>
    d682:	2803      	cmp	r0, #3
    d684:	d1f8      	bne.n	d678 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    d686:	4611      	mov	r1, r2
    d688:	4618      	mov	r0, r3
    d68a:	f7ff ff77 	bl	d57c <reset>
	return 0;
    d68e:	2000      	movs	r0, #0
		break;
    d690:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    d692:	4611      	mov	r1, r2
    d694:	4618      	mov	r0, r3
    d696:	f7f7 fd13 	bl	50c0 <set_event_mask>
	return 0;
    d69a:	2000      	movs	r0, #0
		break;
    d69c:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    d69e:	4611      	mov	r1, r2
    d6a0:	4618      	mov	r0, r3
    d6a2:	f7ff fded 	bl	d280 <set_event_mask_page_2>
	return 0;
    d6a6:	2000      	movs	r0, #0
		break;
    d6a8:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    d6aa:	4611      	mov	r1, r2
    d6ac:	4618      	mov	r0, r3
    d6ae:	f7ff ff8f 	bl	d5d0 <read_tx_power_level>
	return 0;
    d6b2:	2000      	movs	r0, #0
		break;
    d6b4:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    d6b6:	4611      	mov	r1, r2
    d6b8:	4618      	mov	r0, r3
    d6ba:	f7ff ffa1 	bl	d600 <read_auth_payload_timeout>
	return 0;
    d6be:	2000      	movs	r0, #0
		break;
    d6c0:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    d6c2:	4611      	mov	r1, r2
    d6c4:	4618      	mov	r0, r3
    d6c6:	f7ff ffb7 	bl	d638 <write_auth_payload_timeout>
	return 0;
    d6ca:	2000      	movs	r0, #0
		break;
    d6cc:	bd08      	pop	{r3, pc}

0000d6ce <read_supported_commands>:
{
    d6ce:	b510      	push	{r4, lr}
    d6d0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d6d2:	2141      	movs	r1, #65	; 0x41
    d6d4:	f7ff fdb4 	bl	d240 <cmd_complete>
    d6d8:	4604      	mov	r4, r0
	rp->status = 0x00;
    d6da:	2100      	movs	r1, #0
    d6dc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d6e0:	2240      	movs	r2, #64	; 0x40
    d6e2:	f01c fd75 	bl	2a1d0 <memset>
	rp->commands[2] |= BIT(7);
    d6e6:	78e3      	ldrb	r3, [r4, #3]
    d6e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d6ec:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d6ee:	79a3      	ldrb	r3, [r4, #6]
    d6f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d6f4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d6f6:	7ae3      	ldrb	r3, [r4, #11]
    d6f8:	f043 0304 	orr.w	r3, r3, #4
    d6fc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d6fe:	7be3      	ldrb	r3, [r4, #15]
    d700:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d704:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d706:	7c23      	ldrb	r3, [r4, #16]
    d708:	f043 0302 	orr.w	r3, r3, #2
    d70c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d70e:	7de3      	ldrb	r3, [r4, #23]
    d710:	f043 0304 	orr.w	r3, r3, #4
    d714:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    d716:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    d718:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d71a:	f062 0208 	orn	r2, r2, #8
    d71e:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d720:	22ff      	movs	r2, #255	; 0xff
    d722:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d724:	f043 030f 	orr.w	r3, r3, #15
    d728:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d72a:	7863      	ldrb	r3, [r4, #1]
    d72c:	f043 0320 	orr.w	r3, r3, #32
    d730:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d732:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d734:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d738:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d73c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d740:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d744:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d748:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d74c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d750:	f040 0004 	orr.w	r0, r0, #4
    d754:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    d758:	f061 010f 	orn	r1, r1, #15
    d75c:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    d760:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    d764:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d768:	f043 030f 	orr.w	r3, r3, #15
    d76c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d770:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d774:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d778:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d77c:	bd10      	pop	{r4, pc}

0000d77e <read_local_features>:
{
    d77e:	b510      	push	{r4, lr}
    d780:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d782:	2109      	movs	r1, #9
    d784:	f7ff fd5c 	bl	d240 <cmd_complete>
    d788:	4604      	mov	r4, r0
	rp->status = 0x00;
    d78a:	2100      	movs	r1, #0
    d78c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d790:	2208      	movs	r2, #8
    d792:	f01c fd1d 	bl	2a1d0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d796:	2360      	movs	r3, #96	; 0x60
    d798:	7163      	strb	r3, [r4, #5]
    d79a:	bd10      	pop	{r4, pc}

0000d79c <le_read_local_features>:
{
    d79c:	b510      	push	{r4, lr}
    d79e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d7a0:	2109      	movs	r1, #9
    d7a2:	f7ff fd4d 	bl	d240 <cmd_complete>
    d7a6:	4604      	mov	r4, r0
	rp->status = 0x00;
    d7a8:	2100      	movs	r1, #0
    d7aa:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7ae:	2208      	movs	r2, #8
    d7b0:	f01c fd0e 	bl	2a1d0 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d7b4:	23ff      	movs	r3, #255	; 0xff
    d7b6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d7b8:	2341      	movs	r3, #65	; 0x41
    d7ba:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d7bc:	2301      	movs	r3, #1
    d7be:	70e3      	strb	r3, [r4, #3]
    d7c0:	bd10      	pop	{r4, pc}

0000d7c2 <vs_read_supported_commands>:
{
    d7c2:	b510      	push	{r4, lr}
    d7c4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d7c6:	2141      	movs	r1, #65	; 0x41
    d7c8:	f7ff fd3a 	bl	d240 <cmd_complete>
    d7cc:	4604      	mov	r4, r0
	rp->status = 0x00;
    d7ce:	2100      	movs	r1, #0
    d7d0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d7d4:	2240      	movs	r2, #64	; 0x40
    d7d6:	f01c fcfb 	bl	2a1d0 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    d7da:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    d7dc:	f063 0358 	orn	r3, r3, #88	; 0x58
    d7e0:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d7e2:	78a3      	ldrb	r3, [r4, #2]
    d7e4:	f043 0303 	orr.w	r3, r3, #3
    d7e8:	70a3      	strb	r3, [r4, #2]
    d7ea:	bd10      	pop	{r4, pc}

0000d7ec <vs_read_supported_features>:
{
    d7ec:	b508      	push	{r3, lr}
    d7ee:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d7f0:	2109      	movs	r1, #9
    d7f2:	f7ff fd25 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d7f6:	2100      	movs	r1, #0
    d7f8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7fc:	2208      	movs	r2, #8
    d7fe:	f01c fce7 	bl	2a1d0 <memset>
    d802:	bd08      	pop	{r3, pc}

0000d804 <vs_read_static_addrs>:
{
    d804:	b510      	push	{r4, lr}
    d806:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d80c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d814:	d00d      	beq.n	d832 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d81a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d81e:	f013 0f01 	tst.w	r3, #1
    d822:	d110      	bne.n	d846 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    d824:	2102      	movs	r1, #2
    d826:	f7ff fd0b 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d82a:	2300      	movs	r3, #0
    d82c:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    d82e:	7043      	strb	r3, [r0, #1]
    d830:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d836:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d83a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d83c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d840:	4293      	cmp	r3, r2
    d842:	d1e8      	bne.n	d816 <vs_read_static_addrs+0x12>
    d844:	e7ee      	b.n	d824 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d846:	2118      	movs	r1, #24
    d848:	f7ff fcfa 	bl	d240 <cmd_complete>
		rp->status = 0x00;
    d84c:	2100      	movs	r1, #0
    d84e:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    d850:	2301      	movs	r3, #1
    d852:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d858:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    d85c:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    d85e:	f3c3 2407 	ubfx	r4, r3, #8, #8
    d862:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    d864:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d866:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    d868:	0a1b      	lsrs	r3, r3, #8
    d86a:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    d86c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    d870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d874:	b29b      	uxth	r3, r3
	dst[0] = val;
    d876:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    d878:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d87a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d87e:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    d880:	2210      	movs	r2, #16
    d882:	3008      	adds	r0, #8
    d884:	f01c fca4 	bl	2a1d0 <memset>
		return;
    d888:	bd10      	pop	{r4, pc}

0000d88a <vs_read_key_hierarchy_roots>:
{
    d88a:	b510      	push	{r4, lr}
    d88c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d88e:	2121      	movs	r1, #33	; 0x21
    d890:	f7ff fcd6 	bl	d240 <cmd_complete>
    d894:	4604      	mov	r4, r0
	rp->status = 0x00;
    d896:	2300      	movs	r3, #0
    d898:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d89a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8a6:	d03f      	beq.n	d928 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d8a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d8ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8b4:	d038      	beq.n	d928 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d8b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d8ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8c2:	d031      	beq.n	d928 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d8c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d8c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8d0:	d02a      	beq.n	d928 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d8d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    d8da:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d8dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d8e0:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    d8e2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d8e4:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    d8e6:	0a1b      	lsrs	r3, r3, #8
    d8e8:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    d8ea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    d8ee:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d8f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d8f4:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    d8f6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d8f8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d8fa:	0a1b      	lsrs	r3, r3, #8
    d8fc:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    d8fe:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    d902:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    d904:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d908:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    d90a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d90c:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    d90e:	0a1b      	lsrs	r3, r3, #8
    d910:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    d912:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    d916:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d918:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d91c:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    d91e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d920:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d922:	0a1b      	lsrs	r3, r3, #8
    d924:	7403      	strb	r3, [r0, #16]
    d926:	e004      	b.n	d932 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    d928:	2210      	movs	r2, #16
    d92a:	2100      	movs	r1, #0
    d92c:	1c60      	adds	r0, r4, #1
    d92e:	f01c fc4f 	bl	2a1d0 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    d93a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d93e:	d040      	beq.n	d9c2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d94c:	d039      	beq.n	d9c2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d94e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d95a:	d032      	beq.n	d9c2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    d95c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d968:	d02b      	beq.n	d9c2 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    d96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d96e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    d972:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    d974:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d978:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    d97a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d97c:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    d97e:	0a1b      	lsrs	r3, r3, #8
    d980:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    d982:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    d986:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    d988:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d98c:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    d98e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d990:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    d992:	0a1b      	lsrs	r3, r3, #8
    d994:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    d996:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    d99a:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    d99c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d9a0:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    d9a2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d9a4:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    d9a6:	0a1b      	lsrs	r3, r3, #8
    d9a8:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d9aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    d9ae:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    d9b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d9b4:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    d9b6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d9b8:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    d9ba:	0a1b      	lsrs	r3, r3, #8
    d9bc:	f884 3020 	strb.w	r3, [r4, #32]
    d9c0:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    d9c2:	2210      	movs	r2, #16
    d9c4:	2100      	movs	r1, #0
    d9c6:	f104 0011 	add.w	r0, r4, #17
    d9ca:	f01c fc01 	bl	2a1d0 <memset>
    d9ce:	bd10      	pop	{r4, pc}

0000d9d0 <read_bd_addr>:
{
    d9d0:	b508      	push	{r3, lr}
    d9d2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d9d4:	2107      	movs	r1, #7
    d9d6:	f7ff fc33 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    d9da:	2300      	movs	r3, #0
    d9dc:	4601      	mov	r1, r0
    d9de:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d9e2:	4618      	mov	r0, r3
    d9e4:	f00b fd64 	bl	194b0 <ll_addr_get>
    d9e8:	bd08      	pop	{r3, pc}

0000d9ea <info_cmd_handle>:
{
    d9ea:	b508      	push	{r3, lr}
    d9ec:	460b      	mov	r3, r1
	switch (ocf) {
    d9ee:	3801      	subs	r0, #1
    d9f0:	2808      	cmp	r0, #8
    d9f2:	d81e      	bhi.n	da32 <info_cmd_handle+0x48>
    d9f4:	e8df f000 	tbb	[pc, r0]
    d9f8:	1d110b05 	.word	0x1d110b05
    d9fc:	1d1d1d1d 	.word	0x1d1d1d1d
    da00:	17          	.byte	0x17
    da01:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    da02:	4611      	mov	r1, r2
    da04:	4618      	mov	r0, r3
    da06:	f7ff fc61 	bl	d2cc <read_local_version_info>
	return 0;
    da0a:	2000      	movs	r0, #0
		break;
    da0c:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    da0e:	4611      	mov	r1, r2
    da10:	4618      	mov	r0, r3
    da12:	f7ff fe5c 	bl	d6ce <read_supported_commands>
	return 0;
    da16:	2000      	movs	r0, #0
		break;
    da18:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    da1a:	4611      	mov	r1, r2
    da1c:	4618      	mov	r0, r3
    da1e:	f7ff feae 	bl	d77e <read_local_features>
	return 0;
    da22:	2000      	movs	r0, #0
		break;
    da24:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    da26:	4611      	mov	r1, r2
    da28:	4618      	mov	r0, r3
    da2a:	f7ff ffd1 	bl	d9d0 <read_bd_addr>
	return 0;
    da2e:	2000      	movs	r0, #0
		break;
    da30:	bd08      	pop	{r3, pc}
		return -EINVAL;
    da32:	f06f 0015 	mvn.w	r0, #21
}
    da36:	bd08      	pop	{r3, pc}

0000da38 <le_set_random_address>:
{
    da38:	b510      	push	{r4, lr}
    da3a:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    da3c:	6881      	ldr	r1, [r0, #8]
    da3e:	2001      	movs	r0, #1
    da40:	f00b fd58 	bl	194f4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    da44:	2101      	movs	r1, #1
    da46:	4620      	mov	r0, r4
    da48:	f7ff fbfa 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    da4c:	2300      	movs	r3, #0
    da4e:	7003      	strb	r3, [r0, #0]
    da50:	bd10      	pop	{r4, pc}

0000da52 <vs_write_bd_addr>:
{
    da52:	b510      	push	{r4, lr}
    da54:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    da56:	6881      	ldr	r1, [r0, #8]
    da58:	2000      	movs	r0, #0
    da5a:	f00b fd4b 	bl	194f4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    da5e:	2101      	movs	r1, #1
    da60:	4620      	mov	r0, r4
    da62:	f7ff fbed 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    da66:	2300      	movs	r3, #0
    da68:	7003      	strb	r3, [r0, #0]
    da6a:	bd10      	pop	{r4, pc}

0000da6c <le_read_wl_size>:
{
    da6c:	b510      	push	{r4, lr}
    da6e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    da70:	2102      	movs	r1, #2
    da72:	f7ff fbe5 	bl	d240 <cmd_complete>
    da76:	4604      	mov	r4, r0
	rp->status = 0x00;
    da78:	2300      	movs	r3, #0
    da7a:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    da7c:	f00b ff3a 	bl	198f4 <ll_wl_size_get>
    da80:	7060      	strb	r0, [r4, #1]
    da82:	bd10      	pop	{r4, pc}

0000da84 <le_clear_wl>:
{
    da84:	b510      	push	{r4, lr}
    da86:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    da88:	2101      	movs	r1, #1
    da8a:	f7ff fbd9 	bl	d240 <cmd_complete>
    da8e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    da90:	f00b ff32 	bl	198f8 <ll_wl_clear>
    da94:	7020      	strb	r0, [r4, #0]
    da96:	bd10      	pop	{r4, pc}

0000da98 <le_add_dev_to_wl>:
{
    da98:	b538      	push	{r3, r4, r5, lr}
    da9a:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    da9c:	6880      	ldr	r0, [r0, #8]
    da9e:	f00c f81d 	bl	19adc <ll_wl_add>
    daa2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    daa4:	2101      	movs	r1, #1
    daa6:	4628      	mov	r0, r5
    daa8:	f7ff fbca 	bl	d240 <cmd_complete>
	ccst->status = status;
    daac:	7004      	strb	r4, [r0, #0]
    daae:	bd38      	pop	{r3, r4, r5, pc}

0000dab0 <le_rem_dev_from_wl>:
{
    dab0:	b538      	push	{r3, r4, r5, lr}
    dab2:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    dab4:	6880      	ldr	r0, [r0, #8]
    dab6:	f00b ff35 	bl	19924 <ll_wl_remove>
    daba:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dabc:	2101      	movs	r1, #1
    dabe:	4628      	mov	r0, r5
    dac0:	f7ff fbbe 	bl	d240 <cmd_complete>
	ccst->status = status;
    dac4:	7004      	strb	r4, [r0, #0]
    dac6:	bd38      	pop	{r3, r4, r5, pc}

0000dac8 <le_encrypt>:
{
    dac8:	b510      	push	{r4, lr}
    daca:	b084      	sub	sp, #16
    dacc:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    dace:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    dad0:	2300      	movs	r3, #0
    dad2:	466a      	mov	r2, sp
    dad4:	f100 0110 	add.w	r1, r0, #16
    dad8:	f001 fc9e 	bl	f418 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    dadc:	2111      	movs	r1, #17
    dade:	4620      	mov	r0, r4
    dae0:	f7ff fbae 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    dae4:	2300      	movs	r3, #0
    dae6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    daea:	2210      	movs	r2, #16
    daec:	4669      	mov	r1, sp
    daee:	f7f2 fbe7 	bl	2c0 <memcpy>
}
    daf2:	b004      	add	sp, #16
    daf4:	bd10      	pop	{r4, pc}
	...

0000daf8 <vs_read_build_info>:
{
    daf8:	b570      	push	{r4, r5, r6, lr}
    dafa:	b08a      	sub	sp, #40	; 0x28
    dafc:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    dafe:	466c      	mov	r4, sp
    db00:	4d0c      	ldr	r5, [pc, #48]	; (db34 <vs_read_build_info+0x3c>)
    db02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db0a:	e895 0003 	ldmia.w	r5, {r0, r1}
    db0e:	f844 0b04 	str.w	r0, [r4], #4
    db12:	f824 1b02 	strh.w	r1, [r4], #2
    db16:	0c09      	lsrs	r1, r1, #16
    db18:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    db1a:	2128      	movs	r1, #40	; 0x28
    db1c:	4630      	mov	r0, r6
    db1e:	f7ff fb8f 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    db22:	2300      	movs	r3, #0
    db24:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    db28:	2227      	movs	r2, #39	; 0x27
    db2a:	4669      	mov	r1, sp
    db2c:	f7f2 fbc8 	bl	2c0 <memcpy>
}
    db30:	b00a      	add	sp, #40	; 0x28
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	00031028 	.word	0x00031028

0000db38 <vendor_cmd_handle>:
{
    db38:	b508      	push	{r3, lr}
    db3a:	460b      	mov	r3, r1
	switch (ocf) {
    db3c:	3801      	subs	r0, #1
    db3e:	2809      	cmp	r0, #9
    db40:	d830      	bhi.n	dba4 <vendor_cmd_handle+0x6c>
    db42:	e8df f000 	tbb	[pc, r0]
    db46:	0b05      	.short	0x0b05
    db48:	1d2f2f11 	.word	0x1d2f2f11
    db4c:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    db50:	4611      	mov	r1, r2
    db52:	4618      	mov	r0, r3
    db54:	f7ff fbf6 	bl	d344 <vs_read_version_info>
	return 0;
    db58:	2000      	movs	r0, #0
		break;
    db5a:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    db5c:	4611      	mov	r1, r2
    db5e:	4618      	mov	r0, r3
    db60:	f7ff fe2f 	bl	d7c2 <vs_read_supported_commands>
	return 0;
    db64:	2000      	movs	r0, #0
		break;
    db66:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    db68:	4611      	mov	r1, r2
    db6a:	4618      	mov	r0, r3
    db6c:	f7ff fe3e 	bl	d7ec <vs_read_supported_features>
	return 0;
    db70:	2000      	movs	r0, #0
		break;
    db72:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    db74:	4611      	mov	r1, r2
    db76:	4618      	mov	r0, r3
    db78:	f7ff ffbe 	bl	daf8 <vs_read_build_info>
	return 0;
    db7c:	2000      	movs	r0, #0
		break;
    db7e:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    db80:	4611      	mov	r1, r2
    db82:	4618      	mov	r0, r3
    db84:	f7ff ff65 	bl	da52 <vs_write_bd_addr>
	return 0;
    db88:	2000      	movs	r0, #0
		break;
    db8a:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    db8c:	4611      	mov	r1, r2
    db8e:	4618      	mov	r0, r3
    db90:	f7ff fe38 	bl	d804 <vs_read_static_addrs>
	return 0;
    db94:	2000      	movs	r0, #0
		break;
    db96:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    db98:	4611      	mov	r1, r2
    db9a:	4618      	mov	r0, r3
    db9c:	f7ff fe75 	bl	d88a <vs_read_key_hierarchy_roots>
	return 0;
    dba0:	2000      	movs	r0, #0
		break;
    dba2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dba4:	f06f 0015 	mvn.w	r0, #21
}
    dba8:	bd08      	pop	{r3, pc}

0000dbaa <le_unknown_rsp>:
{
    dbaa:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    dbac:	7903      	ldrb	r3, [r0, #4]
    dbae:	2b0e      	cmp	r3, #14
    dbb0:	d000      	beq.n	dbb4 <le_unknown_rsp+0xa>
    dbb2:	bd08      	pop	{r3, pc}
    dbb4:	4613      	mov	r3, r2
    dbb6:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dbb8:	2100      	movs	r1, #0
    dbba:	201a      	movs	r0, #26
    dbbc:	f7f8 f966 	bl	5e8c <le_remote_feat_complete>
}
    dbc0:	e7f7      	b.n	dbb2 <le_unknown_rsp+0x8>

0000dbc2 <le_rand>:
{
    dbc2:	b508      	push	{r3, lr}
    dbc4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dbc6:	2109      	movs	r1, #9
    dbc8:	f7ff fb3a 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    dbcc:	2300      	movs	r3, #0
    dbce:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    dbd2:	2108      	movs	r1, #8
    dbd4:	f003 fcb4 	bl	11540 <bt_rand>
    dbd8:	bd08      	pop	{r3, pc}

0000dbda <le_set_adv_param>:
{
    dbda:	b570      	push	{r4, r5, r6, lr}
    dbdc:	b08c      	sub	sp, #48	; 0x30
    dbde:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    dbe0:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    dbe2:	460c      	mov	r4, r1
    dbe4:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    dbe8:	790b      	ldrb	r3, [r1, #4]
    dbea:	2000      	movs	r0, #0
    dbec:	900a      	str	r0, [sp, #40]	; 0x28
    dbee:	9009      	str	r0, [sp, #36]	; 0x24
    dbf0:	9008      	str	r0, [sp, #32]
    dbf2:	9007      	str	r0, [sp, #28]
    dbf4:	9006      	str	r0, [sp, #24]
    dbf6:	9005      	str	r0, [sp, #20]
    dbf8:	7b8e      	ldrb	r6, [r1, #14]
    dbfa:	9604      	str	r6, [sp, #16]
    dbfc:	7b4e      	ldrb	r6, [r1, #13]
    dbfe:	9603      	str	r6, [sp, #12]
    dc00:	9402      	str	r4, [sp, #8]
    dc02:	798c      	ldrb	r4, [r1, #6]
    dc04:	9401      	str	r4, [sp, #4]
    dc06:	7949      	ldrb	r1, [r1, #5]
    dc08:	9100      	str	r1, [sp, #0]
    dc0a:	4601      	mov	r1, r0
    dc0c:	f00c fc42 	bl	1a494 <ll_adv_params_set>
    dc10:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc12:	2101      	movs	r1, #1
    dc14:	4628      	mov	r0, r5
    dc16:	f7ff fb13 	bl	d240 <cmd_complete>
	ccst->status = status;
    dc1a:	7004      	strb	r4, [r0, #0]
}
    dc1c:	b00c      	add	sp, #48	; 0x30
    dc1e:	bd70      	pop	{r4, r5, r6, pc}

0000dc20 <le_set_adv_data>:
{
    dc20:	b510      	push	{r4, lr}
    dc22:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    dc24:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    dc26:	1c59      	adds	r1, r3, #1
    dc28:	7818      	ldrb	r0, [r3, #0]
    dc2a:	f00c fd57 	bl	1a6dc <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc2e:	2101      	movs	r1, #1
    dc30:	4620      	mov	r0, r4
    dc32:	f7ff fb05 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    dc36:	2300      	movs	r3, #0
    dc38:	7003      	strb	r3, [r0, #0]
    dc3a:	bd10      	pop	{r4, pc}

0000dc3c <le_set_scan_rsp_data>:
{
    dc3c:	b510      	push	{r4, lr}
    dc3e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    dc40:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    dc42:	1c59      	adds	r1, r3, #1
    dc44:	7818      	ldrb	r0, [r3, #0]
    dc46:	f00c fda2 	bl	1a78e <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc4a:	2101      	movs	r1, #1
    dc4c:	4620      	mov	r0, r4
    dc4e:	f7ff faf7 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    dc52:	2300      	movs	r3, #0
    dc54:	7003      	strb	r3, [r0, #0]
    dc56:	bd10      	pop	{r4, pc}

0000dc58 <le_set_adv_enable>:
{
    dc58:	b538      	push	{r3, r4, r5, lr}
    dc5a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    dc5c:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    dc5e:	7818      	ldrb	r0, [r3, #0]
    dc60:	f00c fdda 	bl	1a818 <ll_adv_enable>
    dc64:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc66:	2101      	movs	r1, #1
    dc68:	4628      	mov	r0, r5
    dc6a:	f7ff fae9 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dc6e:	b114      	cbz	r4, dc76 <le_set_adv_enable+0x1e>
    dc70:	230c      	movs	r3, #12
    dc72:	7003      	strb	r3, [r0, #0]
    dc74:	bd38      	pop	{r3, r4, r5, pc}
    dc76:	2300      	movs	r3, #0
    dc78:	e7fb      	b.n	dc72 <le_set_adv_enable+0x1a>

0000dc7a <le_set_scan_param>:
{
    dc7a:	b530      	push	{r4, r5, lr}
    dc7c:	b083      	sub	sp, #12
    dc7e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    dc80:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    dc82:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    dc86:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    dc8a:	7820      	ldrb	r0, [r4, #0]
    dc8c:	7963      	ldrb	r3, [r4, #5]
    dc8e:	79a4      	ldrb	r4, [r4, #6]
    dc90:	9400      	str	r4, [sp, #0]
    dc92:	f00c fe53 	bl	1a93c <ll_scan_params_set>
    dc96:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc98:	2101      	movs	r1, #1
    dc9a:	4628      	mov	r0, r5
    dc9c:	f7ff fad0 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dca0:	b11c      	cbz	r4, dcaa <le_set_scan_param+0x30>
    dca2:	230c      	movs	r3, #12
    dca4:	7003      	strb	r3, [r0, #0]
}
    dca6:	b003      	add	sp, #12
    dca8:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dcaa:	2300      	movs	r3, #0
    dcac:	e7fa      	b.n	dca4 <le_set_scan_param+0x2a>
	...

0000dcb0 <le_set_scan_enable>:
{
    dcb0:	b538      	push	{r3, r4, r5, lr}
    dcb2:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    dcb4:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    dcb6:	781a      	ldrb	r2, [r3, #0]
    dcb8:	b13a      	cbz	r2, dcca <le_set_scan_enable+0x1a>
    dcba:	785a      	ldrb	r2, [r3, #1]
    dcbc:	b12a      	cbz	r2, dcca <le_set_scan_enable+0x1a>
		dup_count = 0;
    dcbe:	2200      	movs	r2, #0
    dcc0:	490b      	ldr	r1, [pc, #44]	; (dcf0 <le_set_scan_enable+0x40>)
    dcc2:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    dcc4:	490b      	ldr	r1, [pc, #44]	; (dcf4 <le_set_scan_enable+0x44>)
    dcc6:	600a      	str	r2, [r1, #0]
    dcc8:	e003      	b.n	dcd2 <le_set_scan_enable+0x22>
		dup_count = -1;
    dcca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dcce:	4a08      	ldr	r2, [pc, #32]	; (dcf0 <le_set_scan_enable+0x40>)
    dcd0:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    dcd2:	7818      	ldrb	r0, [r3, #0]
    dcd4:	f00c fe4e 	bl	1a974 <ll_scan_enable>
    dcd8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dcda:	2101      	movs	r1, #1
    dcdc:	4628      	mov	r0, r5
    dcde:	f7ff faaf 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dce2:	b114      	cbz	r4, dcea <le_set_scan_enable+0x3a>
    dce4:	230c      	movs	r3, #12
    dce6:	7003      	strb	r3, [r0, #0]
    dce8:	bd38      	pop	{r3, r4, r5, pc}
    dcea:	2300      	movs	r3, #0
    dcec:	e7fb      	b.n	dce6 <le_set_scan_enable+0x36>
    dcee:	bf00      	nop
    dcf0:	20000a48 	.word	0x20000a48
    dcf4:	20000a4c 	.word	0x20000a4c

0000dcf8 <le_create_connection>:
{
    dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcfa:	b087      	sub	sp, #28
    dcfc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    dcfe:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    dd00:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    dd02:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    dd04:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    dd08:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    dd0c:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    dd10:	7922      	ldrb	r2, [r4, #4]
    dd12:	7963      	ldrb	r3, [r4, #5]
    dd14:	1da6      	adds	r6, r4, #6
    dd16:	7b24      	ldrb	r4, [r4, #12]
    dd18:	f8cd c010 	str.w	ip, [sp, #16]
    dd1c:	f8cd e00c 	str.w	lr, [sp, #12]
    dd20:	9702      	str	r7, [sp, #8]
    dd22:	9401      	str	r4, [sp, #4]
    dd24:	9600      	str	r6, [sp, #0]
    dd26:	f00c fe65 	bl	1a9f4 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dd2a:	b100      	cbz	r0, dd2e <le_create_connection+0x36>
    dd2c:	200c      	movs	r0, #12
    dd2e:	f7ff fa5f 	bl	d1f0 <cmd_status>
    dd32:	6028      	str	r0, [r5, #0]
}
    dd34:	b007      	add	sp, #28
    dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dd38 <le_create_conn_cancel>:
{
    dd38:	b538      	push	{r3, r4, r5, lr}
    dd3a:	460d      	mov	r5, r1
	status = ll_connect_disable();
    dd3c:	f00b fa00 	bl	19140 <ll_connect_disable>
    dd40:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd42:	2101      	movs	r1, #1
    dd44:	4628      	mov	r0, r5
    dd46:	f7ff fa7b 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd4a:	b114      	cbz	r4, dd52 <le_create_conn_cancel+0x1a>
    dd4c:	230c      	movs	r3, #12
    dd4e:	7003      	strb	r3, [r0, #0]
    dd50:	bd38      	pop	{r3, r4, r5, pc}
    dd52:	2300      	movs	r3, #0
    dd54:	e7fb      	b.n	dd4e <le_create_conn_cancel+0x16>

0000dd56 <le_set_host_chan_classif>:
{
    dd56:	b538      	push	{r3, r4, r5, lr}
    dd58:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    dd5a:	6880      	ldr	r0, [r0, #8]
    dd5c:	f00a fb08 	bl	18370 <ll_chm_update>
    dd60:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd62:	2101      	movs	r1, #1
    dd64:	4628      	mov	r0, r5
    dd66:	f7ff fa6b 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd6a:	b114      	cbz	r4, dd72 <le_set_host_chan_classif+0x1c>
    dd6c:	230c      	movs	r3, #12
    dd6e:	7003      	strb	r3, [r0, #0]
    dd70:	bd38      	pop	{r3, r4, r5, pc}
    dd72:	2300      	movs	r3, #0
    dd74:	e7fb      	b.n	dd6e <le_set_host_chan_classif+0x18>

0000dd76 <le_start_encryption>:
{
    dd76:	b510      	push	{r4, lr}
    dd78:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    dd7a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd7c:	4611      	mov	r1, r2
    dd7e:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    dd82:	f102 030c 	add.w	r3, r2, #12
    dd86:	320a      	adds	r2, #10
    dd88:	f00a fe2c 	bl	189e4 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dd8c:	b100      	cbz	r0, dd90 <le_start_encryption+0x1a>
    dd8e:	200c      	movs	r0, #12
    dd90:	f7ff fa2e 	bl	d1f0 <cmd_status>
    dd94:	6020      	str	r0, [r4, #0]
    dd96:	bd10      	pop	{r4, pc}

0000dd98 <le_ltk_req_reply>:
{
    dd98:	b570      	push	{r4, r5, r6, lr}
    dd9a:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    dd9c:	6882      	ldr	r2, [r0, #8]
    dd9e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    dda2:	2100      	movs	r1, #0
    dda4:	b2a0      	uxth	r0, r4
    dda6:	f00a fb36 	bl	18416 <ll_start_enc_req_send>
    ddaa:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ddac:	2103      	movs	r1, #3
    ddae:	4630      	mov	r0, r6
    ddb0:	f7ff fa46 	bl	d240 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddb4:	b125      	cbz	r5, ddc0 <le_ltk_req_reply+0x28>
    ddb6:	230c      	movs	r3, #12
    ddb8:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ddba:	f8a0 4001 	strh.w	r4, [r0, #1]
    ddbe:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddc0:	2300      	movs	r3, #0
    ddc2:	e7f9      	b.n	ddb8 <le_ltk_req_reply+0x20>

0000ddc4 <le_ltk_req_neg_reply>:
{
    ddc4:	b570      	push	{r4, r5, r6, lr}
    ddc6:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    ddc8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ddca:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    ddcc:	2200      	movs	r2, #0
    ddce:	2106      	movs	r1, #6
    ddd0:	b2a0      	uxth	r0, r4
    ddd2:	f00a fb20 	bl	18416 <ll_start_enc_req_send>
    ddd6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ddd8:	2103      	movs	r1, #3
    ddda:	4630      	mov	r0, r6
    dddc:	f7ff fa30 	bl	d240 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dde0:	b125      	cbz	r5, ddec <le_ltk_req_neg_reply+0x28>
    dde2:	230c      	movs	r3, #12
    dde4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    dde6:	f8a0 4001 	strh.w	r4, [r0, #1]
    ddea:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ddec:	2300      	movs	r3, #0
    ddee:	e7f9      	b.n	dde4 <le_ltk_req_neg_reply+0x20>

0000ddf0 <le_read_chan_map>:
{
    ddf0:	b570      	push	{r4, r5, r6, lr}
    ddf2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    ddf4:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ddf6:	8815      	ldrh	r5, [r2, #0]
    ddf8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    ddfa:	2108      	movs	r1, #8
    ddfc:	4618      	mov	r0, r3
    ddfe:	f7ff fa1f 	bl	d240 <cmd_complete>
    de02:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    de04:	1cc1      	adds	r1, r0, #3
    de06:	4630      	mov	r0, r6
    de08:	f00a faf0 	bl	183ec <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    de0c:	b120      	cbz	r0, de18 <le_read_chan_map+0x28>
    de0e:	2302      	movs	r3, #2
    de10:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    de12:	f8a4 5001 	strh.w	r5, [r4, #1]
    de16:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    de18:	2300      	movs	r3, #0
    de1a:	e7f9      	b.n	de10 <le_read_chan_map+0x20>

0000de1c <le_read_remote_features>:
{
    de1c:	b510      	push	{r4, lr}
    de1e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    de20:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    de22:	8818      	ldrh	r0, [r3, #0]
    de24:	f00a fb3f 	bl	184a6 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    de28:	b100      	cbz	r0, de2c <le_read_remote_features+0x10>
    de2a:	200c      	movs	r0, #12
    de2c:	f7ff f9e0 	bl	d1f0 <cmd_status>
    de30:	6020      	str	r0, [r4, #0]
    de32:	bd10      	pop	{r4, pc}

0000de34 <le_conn_param_req_neg_reply>:
{
    de34:	b570      	push	{r4, r5, r6, lr}
    de36:	b082      	sub	sp, #8
    de38:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    de3a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    de3c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    de3e:	789a      	ldrb	r2, [r3, #2]
    de40:	2300      	movs	r3, #0
    de42:	9301      	str	r3, [sp, #4]
    de44:	9300      	str	r3, [sp, #0]
    de46:	2102      	movs	r1, #2
    de48:	b2a0      	uxth	r0, r4
    de4a:	f00a fa01 	bl	18250 <ll_conn_update>
    de4e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    de50:	2103      	movs	r1, #3
    de52:	4630      	mov	r0, r6
    de54:	f7ff f9f4 	bl	d240 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de58:	b12d      	cbz	r5, de66 <le_conn_param_req_neg_reply+0x32>
    de5a:	230c      	movs	r3, #12
    de5c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de5e:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    de62:	b002      	add	sp, #8
    de64:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de66:	2300      	movs	r3, #0
    de68:	e7f8      	b.n	de5c <le_conn_param_req_neg_reply+0x28>

0000de6a <le_set_data_len>:
{
    de6a:	b570      	push	{r4, r5, r6, lr}
    de6c:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    de6e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    de70:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    de72:	889a      	ldrh	r2, [r3, #4]
    de74:	8859      	ldrh	r1, [r3, #2]
    de76:	b2a0      	uxth	r0, r4
    de78:	f00a fb99 	bl	185ae <ll_length_req_send>
    de7c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    de7e:	2103      	movs	r1, #3
    de80:	4630      	mov	r0, r6
    de82:	f7ff f9dd 	bl	d240 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de86:	b125      	cbz	r5, de92 <le_set_data_len+0x28>
    de88:	230c      	movs	r3, #12
    de8a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de8c:	f8a0 4001 	strh.w	r4, [r0, #1]
    de90:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de92:	2300      	movs	r3, #0
    de94:	e7f9      	b.n	de8a <le_set_data_len+0x20>

0000de96 <le_read_default_data_len>:
{
    de96:	b510      	push	{r4, lr}
    de98:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    de9a:	2105      	movs	r1, #5
    de9c:	f7ff f9d0 	bl	d240 <cmd_complete>
    dea0:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    dea2:	1cc1      	adds	r1, r0, #3
    dea4:	3001      	adds	r0, #1
    dea6:	f00a fba9 	bl	185fc <ll_length_default_get>
	rp->status = 0x00;
    deaa:	2300      	movs	r3, #0
    deac:	7023      	strb	r3, [r4, #0]
    deae:	bd10      	pop	{r4, pc}

0000deb0 <le_write_default_data_len>:
{
    deb0:	b538      	push	{r3, r4, r5, lr}
    deb2:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    deb4:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    deb6:	8859      	ldrh	r1, [r3, #2]
    deb8:	8818      	ldrh	r0, [r3, #0]
    deba:	f00a fba9 	bl	18610 <ll_length_default_set>
    debe:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dec0:	2101      	movs	r1, #1
    dec2:	4628      	mov	r0, r5
    dec4:	f7ff f9bc 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    dec8:	b114      	cbz	r4, ded0 <le_write_default_data_len+0x20>
    deca:	231e      	movs	r3, #30
    decc:	7003      	strb	r3, [r0, #0]
    dece:	bd38      	pop	{r3, r4, r5, pc}
    ded0:	2300      	movs	r3, #0
    ded2:	e7fb      	b.n	decc <le_write_default_data_len+0x1c>

0000ded4 <le_read_max_data_len>:
{
    ded4:	b510      	push	{r4, lr}
    ded6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ded8:	2109      	movs	r1, #9
    deda:	f7ff f9b1 	bl	d240 <cmd_complete>
    dede:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    dee0:	1dc3      	adds	r3, r0, #7
    dee2:	1d42      	adds	r2, r0, #5
    dee4:	1cc1      	adds	r1, r0, #3
    dee6:	3001      	adds	r0, #1
    dee8:	f00a fb9c 	bl	18624 <ll_length_max_get>
	rp->status = 0x00;
    deec:	2300      	movs	r3, #0
    deee:	7023      	strb	r3, [r4, #0]
    def0:	bd10      	pop	{r4, pc}
	...

0000def4 <le_phy_upd_complete>:
{
    def4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    def6:	4b1a      	ldr	r3, [pc, #104]	; (df60 <le_phy_upd_complete+0x6c>)
    def8:	e9d3 4500 	ldrd	r4, r5, [r3]
    defc:	2400      	movs	r4, #0
    defe:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    df02:	ea54 0305 	orrs.w	r3, r4, r5
    df06:	d008      	beq.n	df1a <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    df08:	4b16      	ldr	r3, [pc, #88]	; (df64 <le_phy_upd_complete+0x70>)
    df0a:	e9d3 4500 	ldrd	r4, r5, [r3]
    df0e:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    df12:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df14:	ea54 0305 	orrs.w	r3, r4, r5
    df18:	d100      	bne.n	df1c <le_phy_upd_complete+0x28>
    df1a:	bd38      	pop	{r3, r4, r5, pc}
    df1c:	4613      	mov	r3, r2
    df1e:	460c      	mov	r4, r1
    df20:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    df22:	2205      	movs	r2, #5
    df24:	210c      	movs	r1, #12
    df26:	4618      	mov	r0, r3
    df28:	f7ff fa24 	bl	d374 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    df2c:	78eb      	ldrb	r3, [r5, #3]
    df2e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    df30:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    df34:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    df36:	fa92 f3a2 	rbit	r3, r2
    df3a:	fab3 f383 	clz	r3, r3
    df3e:	b90a      	cbnz	r2, df44 <le_phy_upd_complete+0x50>
    df40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df44:	3301      	adds	r3, #1
    df46:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    df48:	796a      	ldrb	r2, [r5, #5]
    df4a:	fa92 f3a2 	rbit	r3, r2
    df4e:	fab3 f383 	clz	r3, r3
    df52:	b90a      	cbnz	r2, df58 <le_phy_upd_complete+0x64>
    df54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df58:	3301      	adds	r3, #1
    df5a:	7103      	strb	r3, [r0, #4]
    df5c:	e7dd      	b.n	df1a <le_phy_upd_complete+0x26>
    df5e:	bf00      	nop
    df60:	2000bb68 	.word	0x2000bb68
    df64:	2000bb70 	.word	0x2000bb70

0000df68 <le_read_phy>:
{
    df68:	b570      	push	{r4, r5, r6, lr}
    df6a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    df6c:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df6e:	8815      	ldrh	r5, [r2, #0]
    df70:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    df72:	2105      	movs	r1, #5
    df74:	4618      	mov	r0, r3
    df76:	f7ff f963 	bl	d240 <cmd_complete>
    df7a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    df7c:	1d02      	adds	r2, r0, #4
    df7e:	1cc1      	adds	r1, r0, #3
    df80:	4630      	mov	r0, r6
    df82:	f00a fb59 	bl	18638 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df86:	b1c0      	cbz	r0, dfba <le_read_phy+0x52>
    df88:	230c      	movs	r3, #12
    df8a:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    df8c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    df90:	78e2      	ldrb	r2, [r4, #3]
    df92:	fa92 f3a2 	rbit	r3, r2
    df96:	fab3 f383 	clz	r3, r3
    df9a:	b90a      	cbnz	r2, dfa0 <le_read_phy+0x38>
    df9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dfa0:	3301      	adds	r3, #1
    dfa2:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    dfa4:	7922      	ldrb	r2, [r4, #4]
    dfa6:	fa92 f3a2 	rbit	r3, r2
    dfaa:	fab3 f383 	clz	r3, r3
    dfae:	b90a      	cbnz	r2, dfb4 <le_read_phy+0x4c>
    dfb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dfb4:	3301      	adds	r3, #1
    dfb6:	7123      	strb	r3, [r4, #4]
    dfb8:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfba:	2300      	movs	r3, #0
    dfbc:	e7e5      	b.n	df8a <le_read_phy+0x22>

0000dfbe <le_set_default_phy>:
{
    dfbe:	b538      	push	{r3, r4, r5, lr}
    dfc0:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    dfc2:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    dfc4:	781a      	ldrb	r2, [r3, #0]
    dfc6:	f012 0f01 	tst.w	r2, #1
    dfca:	d001      	beq.n	dfd0 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    dfcc:	2107      	movs	r1, #7
    dfce:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    dfd0:	f012 0f02 	tst.w	r2, #2
    dfd4:	d001      	beq.n	dfda <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    dfd6:	2207      	movs	r2, #7
    dfd8:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    dfda:	7899      	ldrb	r1, [r3, #2]
    dfdc:	7858      	ldrb	r0, [r3, #1]
    dfde:	f00a fb3f 	bl	18660 <ll_phy_default_set>
    dfe2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dfe4:	2101      	movs	r1, #1
    dfe6:	4628      	mov	r0, r5
    dfe8:	f7ff f92a 	bl	d240 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    dfec:	b114      	cbz	r4, dff4 <le_set_default_phy+0x36>
    dfee:	231e      	movs	r3, #30
    dff0:	7003      	strb	r3, [r0, #0]
    dff2:	bd38      	pop	{r3, r4, r5, pc}
    dff4:	2300      	movs	r3, #0
    dff6:	e7fb      	b.n	dff0 <le_set_default_phy+0x32>

0000dff8 <le_set_phy>:
{
    dff8:	b538      	push	{r3, r4, r5, lr}
    dffa:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    dffc:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dffe:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    e000:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e004:	788b      	ldrb	r3, [r1, #2]
    e006:	f013 0f01 	tst.w	r3, #1
    e00a:	d001      	beq.n	e010 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    e00c:	2507      	movs	r5, #7
    e00e:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e010:	f013 0f02 	tst.w	r3, #2
    e014:	d001      	beq.n	e01a <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    e016:	2307      	movs	r3, #7
    e018:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    e01a:	f012 0f03 	tst.w	r2, #3
    e01e:	d00c      	beq.n	e03a <le_set_phy+0x42>
		phy_opts -= 1;
    e020:	3a01      	subs	r2, #1
		phy_opts &= 1;
    e022:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    e026:	790b      	ldrb	r3, [r1, #4]
    e028:	78c9      	ldrb	r1, [r1, #3]
    e02a:	f00a fb23 	bl	18674 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e02e:	b100      	cbz	r0, e032 <le_set_phy+0x3a>
    e030:	200c      	movs	r0, #12
    e032:	f7ff f8dd 	bl	d1f0 <cmd_status>
    e036:	6020      	str	r0, [r4, #0]
    e038:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    e03a:	2200      	movs	r2, #0
    e03c:	e7f3      	b.n	e026 <le_set_phy+0x2e>

0000e03e <le_add_dev_to_rl>:
{
    e03e:	b538      	push	{r3, r4, r5, lr}
    e040:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    e042:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    e044:	f100 0217 	add.w	r2, r0, #23
    e048:	1dc1      	adds	r1, r0, #7
    e04a:	f00b fffd 	bl	1a048 <ll_rl_add>
    e04e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e050:	2101      	movs	r1, #1
    e052:	4628      	mov	r0, r5
    e054:	f7ff f8f4 	bl	d240 <cmd_complete>
	ccst->status = status;
    e058:	7004      	strb	r4, [r0, #0]
    e05a:	bd38      	pop	{r3, r4, r5, pc}

0000e05c <le_rem_dev_from_rl>:
{
    e05c:	b538      	push	{r3, r4, r5, lr}
    e05e:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e060:	6880      	ldr	r0, [r0, #8]
    e062:	f00c f8af 	bl	1a1c4 <ll_rl_remove>
    e066:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e068:	2101      	movs	r1, #1
    e06a:	4628      	mov	r0, r5
    e06c:	f7ff f8e8 	bl	d240 <cmd_complete>
	ccst->status = status;
    e070:	7004      	strb	r4, [r0, #0]
    e072:	bd38      	pop	{r3, r4, r5, pc}

0000e074 <le_clear_rl>:
{
    e074:	b510      	push	{r4, lr}
    e076:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e078:	2101      	movs	r1, #1
    e07a:	f7ff f8e1 	bl	d240 <cmd_complete>
    e07e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e080:	f00b ffd6 	bl	1a030 <ll_rl_clear>
    e084:	7020      	strb	r0, [r4, #0]
    e086:	bd10      	pop	{r4, pc}

0000e088 <le_read_rl_size>:
{
    e088:	b510      	push	{r4, lr}
    e08a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e08c:	2102      	movs	r1, #2
    e08e:	f7ff f8d7 	bl	d240 <cmd_complete>
    e092:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e094:	f00b ffca 	bl	1a02c <ll_rl_size_get>
    e098:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e09a:	2300      	movs	r3, #0
    e09c:	7023      	strb	r3, [r4, #0]
    e09e:	bd10      	pop	{r4, pc}

0000e0a0 <le_read_peer_rpa>:
{
    e0a0:	b510      	push	{r4, lr}
    e0a2:	b082      	sub	sp, #8
    e0a4:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e0a6:	2207      	movs	r2, #7
    e0a8:	6881      	ldr	r1, [r0, #8]
    e0aa:	4668      	mov	r0, sp
    e0ac:	f7f2 f908 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e0b0:	2107      	movs	r1, #7
    e0b2:	4620      	mov	r0, r4
    e0b4:	f7ff f8c4 	bl	d240 <cmd_complete>
    e0b8:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e0ba:	1c41      	adds	r1, r0, #1
    e0bc:	4668      	mov	r0, sp
    e0be:	f00c f925 	bl	1a30c <ll_rl_crpa_get>
    e0c2:	7020      	strb	r0, [r4, #0]
}
    e0c4:	b002      	add	sp, #8
    e0c6:	bd10      	pop	{r4, pc}

0000e0c8 <le_read_local_rpa>:
{
    e0c8:	b510      	push	{r4, lr}
    e0ca:	b082      	sub	sp, #8
    e0cc:	460c      	mov	r4, r1
    e0ce:	2207      	movs	r2, #7
    e0d0:	6881      	ldr	r1, [r0, #8]
    e0d2:	4668      	mov	r0, sp
    e0d4:	f7f2 f8f4 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e0d8:	2107      	movs	r1, #7
    e0da:	4620      	mov	r0, r4
    e0dc:	f7ff f8b0 	bl	d240 <cmd_complete>
    e0e0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e0e2:	1c41      	adds	r1, r0, #1
    e0e4:	4668      	mov	r0, sp
    e0e6:	f00c f939 	bl	1a35c <ll_rl_lrpa_get>
    e0ea:	7020      	strb	r0, [r4, #0]
}
    e0ec:	b002      	add	sp, #8
    e0ee:	bd10      	pop	{r4, pc}

0000e0f0 <le_set_addr_res_enable>:
{
    e0f0:	b538      	push	{r3, r4, r5, lr}
    e0f2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e0f4:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e0f6:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e0f8:	2101      	movs	r1, #1
    e0fa:	4618      	mov	r0, r3
    e0fc:	f7ff f8a0 	bl	d240 <cmd_complete>
    e100:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e102:	4628      	mov	r0, r5
    e104:	f00c f944 	bl	1a390 <ll_rl_enable>
    e108:	7020      	strb	r0, [r4, #0]
    e10a:	bd38      	pop	{r3, r4, r5, pc}

0000e10c <le_set_rpa_timeout>:
{
    e10c:	b510      	push	{r4, lr}
    e10e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e110:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e112:	8818      	ldrh	r0, [r3, #0]
    e114:	f00c f954 	bl	1a3c0 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e118:	2101      	movs	r1, #1
    e11a:	4620      	mov	r0, r4
    e11c:	f7ff f890 	bl	d240 <cmd_complete>
	ccst->status = 0x00;
    e120:	2300      	movs	r3, #0
    e122:	7003      	strb	r3, [r0, #0]
    e124:	bd10      	pop	{r4, pc}

0000e126 <le_set_privacy_mode>:
{
    e126:	b538      	push	{r3, r4, r5, lr}
    e128:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e12a:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e12c:	79c1      	ldrb	r1, [r0, #7]
    e12e:	f00c f951 	bl	1a3d4 <ll_priv_mode_set>
    e132:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e134:	2101      	movs	r1, #1
    e136:	4628      	mov	r0, r5
    e138:	f7ff f882 	bl	d240 <cmd_complete>
	ccst->status = status;
    e13c:	7004      	strb	r4, [r0, #0]
    e13e:	bd38      	pop	{r3, r4, r5, pc}

0000e140 <le_read_tx_power>:
{
    e140:	b508      	push	{r3, lr}
    e142:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e144:	2103      	movs	r1, #3
    e146:	f7ff f87b 	bl	d240 <cmd_complete>
	rp->status = 0x00;
    e14a:	4601      	mov	r1, r0
    e14c:	2300      	movs	r3, #0
    e14e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e152:	3001      	adds	r0, #1
    e154:	f00a f9f3 	bl	1853e <ll_tx_power_get>
    e158:	bd08      	pop	{r3, pc}

0000e15a <controller_cmd_handle>:
{
    e15a:	b508      	push	{r3, lr}
    e15c:	460b      	mov	r3, r1
	switch (ocf) {
    e15e:	3801      	subs	r0, #1
    e160:	284d      	cmp	r0, #77	; 0x4d
    e162:	f200 8164 	bhi.w	e42e <controller_cmd_handle+0x2d4>
    e166:	e8df f010 	tbh	[pc, r0, lsl #1]
    e16a:	004e      	.short	0x004e
    e16c:	005a0054 	.word	0x005a0054
    e170:	00600162 	.word	0x00600162
    e174:	00960090 	.word	0x00960090
    e178:	00a2009c 	.word	0x00a2009c
    e17c:	00ae00a8 	.word	0x00ae00a8
    e180:	00ba00b4 	.word	0x00ba00b4
    e184:	006600c0 	.word	0x006600c0
    e188:	0072006c 	.word	0x0072006c
    e18c:	00ea0078 	.word	0x00ea0078
    e190:	00de00c6 	.word	0x00de00c6
    e194:	007e00e4 	.word	0x007e00e4
    e198:	00cc0084 	.word	0x00cc0084
    e19c:	00d800d2 	.word	0x00d800d2
    e1a0:	0162008a 	.word	0x0162008a
    e1a4:	01620162 	.word	0x01620162
    e1a8:	00f600f0 	.word	0x00f600f0
    e1ac:	010200fc 	.word	0x010200fc
    e1b0:	01620108 	.word	0x01620108
    e1b4:	01260162 	.word	0x01260162
    e1b8:	0132012c 	.word	0x0132012c
    e1bc:	013e0138 	.word	0x013e0138
    e1c0:	014a0144 	.word	0x014a0144
    e1c4:	010e0150 	.word	0x010e0150
    e1c8:	011a0114 	.word	0x011a0114
    e1cc:	01620120 	.word	0x01620120
    e1d0:	01620162 	.word	0x01620162
    e1d4:	01620162 	.word	0x01620162
    e1d8:	01620162 	.word	0x01620162
    e1dc:	01620162 	.word	0x01620162
    e1e0:	01620162 	.word	0x01620162
    e1e4:	01620162 	.word	0x01620162
    e1e8:	01620162 	.word	0x01620162
    e1ec:	01620162 	.word	0x01620162
    e1f0:	01620162 	.word	0x01620162
    e1f4:	01620162 	.word	0x01620162
    e1f8:	01620162 	.word	0x01620162
    e1fc:	015c0162 	.word	0x015c0162
    e200:	01620162 	.word	0x01620162
    e204:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    e206:	4611      	mov	r1, r2
    e208:	4618      	mov	r0, r3
    e20a:	f7f6 fe3f 	bl	4e8c <le_set_event_mask>
	return 0;
    e20e:	2000      	movs	r0, #0
		break;
    e210:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    e212:	4611      	mov	r1, r2
    e214:	4618      	mov	r0, r3
    e216:	f7ff f86c 	bl	d2f2 <le_read_buffer_size>
	return 0;
    e21a:	2000      	movs	r0, #0
		break;
    e21c:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    e21e:	4611      	mov	r1, r2
    e220:	4618      	mov	r0, r3
    e222:	f7ff fabb 	bl	d79c <le_read_local_features>
	return 0;
    e226:	2000      	movs	r0, #0
		break;
    e228:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    e22a:	4611      	mov	r1, r2
    e22c:	4618      	mov	r0, r3
    e22e:	f7ff fc03 	bl	da38 <le_set_random_address>
	return 0;
    e232:	2000      	movs	r0, #0
		break;
    e234:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    e236:	4611      	mov	r1, r2
    e238:	4618      	mov	r0, r3
    e23a:	f7ff fc17 	bl	da6c <le_read_wl_size>
	return 0;
    e23e:	2000      	movs	r0, #0
		break;
    e240:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    e242:	4611      	mov	r1, r2
    e244:	4618      	mov	r0, r3
    e246:	f7ff fc1d 	bl	da84 <le_clear_wl>
	return 0;
    e24a:	2000      	movs	r0, #0
		break;
    e24c:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    e24e:	4611      	mov	r1, r2
    e250:	4618      	mov	r0, r3
    e252:	f7ff fc21 	bl	da98 <le_add_dev_to_wl>
	return 0;
    e256:	2000      	movs	r0, #0
		break;
    e258:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    e25a:	4611      	mov	r1, r2
    e25c:	4618      	mov	r0, r3
    e25e:	f7ff fc27 	bl	dab0 <le_rem_dev_from_wl>
	return 0;
    e262:	2000      	movs	r0, #0
		break;
    e264:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    e266:	4611      	mov	r1, r2
    e268:	4618      	mov	r0, r3
    e26a:	f7ff fc2d 	bl	dac8 <le_encrypt>
	return 0;
    e26e:	2000      	movs	r0, #0
		break;
    e270:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    e272:	4611      	mov	r1, r2
    e274:	4618      	mov	r0, r3
    e276:	f7ff fca4 	bl	dbc2 <le_rand>
	return 0;
    e27a:	2000      	movs	r0, #0
		break;
    e27c:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    e27e:	4611      	mov	r1, r2
    e280:	4618      	mov	r0, r3
    e282:	f7ff f843 	bl	d30c <le_read_supp_states>
	return 0;
    e286:	2000      	movs	r0, #0
		break;
    e288:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    e28a:	4611      	mov	r1, r2
    e28c:	4618      	mov	r0, r3
    e28e:	f7ff fca4 	bl	dbda <le_set_adv_param>
	return 0;
    e292:	2000      	movs	r0, #0
		break;
    e294:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    e296:	4611      	mov	r1, r2
    e298:	4618      	mov	r0, r3
    e29a:	f7ff f84a 	bl	d332 <le_read_adv_chan_tx_power>
	return 0;
    e29e:	2000      	movs	r0, #0
		break;
    e2a0:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    e2a2:	4611      	mov	r1, r2
    e2a4:	4618      	mov	r0, r3
    e2a6:	f7ff fcbb 	bl	dc20 <le_set_adv_data>
	return 0;
    e2aa:	2000      	movs	r0, #0
		break;
    e2ac:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    e2ae:	4611      	mov	r1, r2
    e2b0:	4618      	mov	r0, r3
    e2b2:	f7ff fcc3 	bl	dc3c <le_set_scan_rsp_data>
	return 0;
    e2b6:	2000      	movs	r0, #0
		break;
    e2b8:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    e2ba:	4611      	mov	r1, r2
    e2bc:	4618      	mov	r0, r3
    e2be:	f7ff fccb 	bl	dc58 <le_set_adv_enable>
	return 0;
    e2c2:	2000      	movs	r0, #0
		break;
    e2c4:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    e2c6:	4611      	mov	r1, r2
    e2c8:	4618      	mov	r0, r3
    e2ca:	f7ff fcd6 	bl	dc7a <le_set_scan_param>
	return 0;
    e2ce:	2000      	movs	r0, #0
		break;
    e2d0:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    e2d2:	4611      	mov	r1, r2
    e2d4:	4618      	mov	r0, r3
    e2d6:	f7ff fceb 	bl	dcb0 <le_set_scan_enable>
	return 0;
    e2da:	2000      	movs	r0, #0
		break;
    e2dc:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    e2de:	4611      	mov	r1, r2
    e2e0:	4618      	mov	r0, r3
    e2e2:	f7ff fd09 	bl	dcf8 <le_create_connection>
	return 0;
    e2e6:	2000      	movs	r0, #0
		break;
    e2e8:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    e2ea:	4611      	mov	r1, r2
    e2ec:	4618      	mov	r0, r3
    e2ee:	f7ff fd23 	bl	dd38 <le_create_conn_cancel>
	return 0;
    e2f2:	2000      	movs	r0, #0
		break;
    e2f4:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    e2f6:	4611      	mov	r1, r2
    e2f8:	4618      	mov	r0, r3
    e2fa:	f7ff fd2c 	bl	dd56 <le_set_host_chan_classif>
	return 0;
    e2fe:	2000      	movs	r0, #0
		break;
    e300:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    e302:	4611      	mov	r1, r2
    e304:	4618      	mov	r0, r3
    e306:	f7ff fd36 	bl	dd76 <le_start_encryption>
	return 0;
    e30a:	2000      	movs	r0, #0
		break;
    e30c:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    e30e:	4611      	mov	r1, r2
    e310:	4618      	mov	r0, r3
    e312:	f7ff fd41 	bl	dd98 <le_ltk_req_reply>
	return 0;
    e316:	2000      	movs	r0, #0
		break;
    e318:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    e31a:	4611      	mov	r1, r2
    e31c:	4618      	mov	r0, r3
    e31e:	f7ff fd51 	bl	ddc4 <le_ltk_req_neg_reply>
	return 0;
    e322:	2000      	movs	r0, #0
		break;
    e324:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    e326:	4611      	mov	r1, r2
    e328:	4618      	mov	r0, r3
    e32a:	f7ff fd61 	bl	ddf0 <le_read_chan_map>
	return 0;
    e32e:	2000      	movs	r0, #0
		break;
    e330:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    e332:	4611      	mov	r1, r2
    e334:	4618      	mov	r0, r3
    e336:	f7ff fd71 	bl	de1c <le_read_remote_features>
	return 0;
    e33a:	2000      	movs	r0, #0
		break;
    e33c:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    e33e:	4611      	mov	r1, r2
    e340:	4618      	mov	r0, r3
    e342:	f7f9 f9c1 	bl	76c8 <le_conn_update>
	return 0;
    e346:	2000      	movs	r0, #0
		break;
    e348:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    e34a:	4611      	mov	r1, r2
    e34c:	4618      	mov	r0, r3
    e34e:	f7f7 fe47 	bl	5fe0 <le_conn_param_req_reply>
	return 0;
    e352:	2000      	movs	r0, #0
		break;
    e354:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    e356:	4611      	mov	r1, r2
    e358:	4618      	mov	r0, r3
    e35a:	f7ff fd6b 	bl	de34 <le_conn_param_req_neg_reply>
	return 0;
    e35e:	2000      	movs	r0, #0
		break;
    e360:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    e362:	4611      	mov	r1, r2
    e364:	4618      	mov	r0, r3
    e366:	f7ff fd80 	bl	de6a <le_set_data_len>
	return 0;
    e36a:	2000      	movs	r0, #0
		break;
    e36c:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    e36e:	4611      	mov	r1, r2
    e370:	4618      	mov	r0, r3
    e372:	f7ff fd90 	bl	de96 <le_read_default_data_len>
	return 0;
    e376:	2000      	movs	r0, #0
		break;
    e378:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    e37a:	4611      	mov	r1, r2
    e37c:	4618      	mov	r0, r3
    e37e:	f7ff fd97 	bl	deb0 <le_write_default_data_len>
	return 0;
    e382:	2000      	movs	r0, #0
		break;
    e384:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    e386:	4611      	mov	r1, r2
    e388:	4618      	mov	r0, r3
    e38a:	f7ff fda3 	bl	ded4 <le_read_max_data_len>
	return 0;
    e38e:	2000      	movs	r0, #0
		break;
    e390:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    e392:	4611      	mov	r1, r2
    e394:	4618      	mov	r0, r3
    e396:	f7ff fde7 	bl	df68 <le_read_phy>
	return 0;
    e39a:	2000      	movs	r0, #0
		break;
    e39c:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    e39e:	4611      	mov	r1, r2
    e3a0:	4618      	mov	r0, r3
    e3a2:	f7ff fe0c 	bl	dfbe <le_set_default_phy>
	return 0;
    e3a6:	2000      	movs	r0, #0
		break;
    e3a8:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    e3aa:	4611      	mov	r1, r2
    e3ac:	4618      	mov	r0, r3
    e3ae:	f7ff fe23 	bl	dff8 <le_set_phy>
	return 0;
    e3b2:	2000      	movs	r0, #0
		break;
    e3b4:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    e3b6:	4611      	mov	r1, r2
    e3b8:	4618      	mov	r0, r3
    e3ba:	f7ff fe40 	bl	e03e <le_add_dev_to_rl>
	return 0;
    e3be:	2000      	movs	r0, #0
		break;
    e3c0:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    e3c2:	4611      	mov	r1, r2
    e3c4:	4618      	mov	r0, r3
    e3c6:	f7ff fe49 	bl	e05c <le_rem_dev_from_rl>
	return 0;
    e3ca:	2000      	movs	r0, #0
		break;
    e3cc:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    e3ce:	4611      	mov	r1, r2
    e3d0:	4618      	mov	r0, r3
    e3d2:	f7ff fe4f 	bl	e074 <le_clear_rl>
	return 0;
    e3d6:	2000      	movs	r0, #0
		break;
    e3d8:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    e3da:	4611      	mov	r1, r2
    e3dc:	4618      	mov	r0, r3
    e3de:	f7ff fe53 	bl	e088 <le_read_rl_size>
	return 0;
    e3e2:	2000      	movs	r0, #0
		break;
    e3e4:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    e3e6:	4611      	mov	r1, r2
    e3e8:	4618      	mov	r0, r3
    e3ea:	f7ff fe59 	bl	e0a0 <le_read_peer_rpa>
	return 0;
    e3ee:	2000      	movs	r0, #0
		break;
    e3f0:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    e3f2:	4611      	mov	r1, r2
    e3f4:	4618      	mov	r0, r3
    e3f6:	f7ff fe67 	bl	e0c8 <le_read_local_rpa>
	return 0;
    e3fa:	2000      	movs	r0, #0
		break;
    e3fc:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    e3fe:	4611      	mov	r1, r2
    e400:	4618      	mov	r0, r3
    e402:	f7ff fe75 	bl	e0f0 <le_set_addr_res_enable>
	return 0;
    e406:	2000      	movs	r0, #0
		break;
    e408:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    e40a:	4611      	mov	r1, r2
    e40c:	4618      	mov	r0, r3
    e40e:	f7ff fe7d 	bl	e10c <le_set_rpa_timeout>
	return 0;
    e412:	2000      	movs	r0, #0
		break;
    e414:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    e416:	4611      	mov	r1, r2
    e418:	4618      	mov	r0, r3
    e41a:	f7ff fe84 	bl	e126 <le_set_privacy_mode>
	return 0;
    e41e:	2000      	movs	r0, #0
		break;
    e420:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    e422:	4611      	mov	r1, r2
    e424:	4618      	mov	r0, r3
    e426:	f7ff fe8b 	bl	e140 <le_read_tx_power>
	return 0;
    e42a:	2000      	movs	r0, #0
		break;
    e42c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e42e:	f06f 0015 	mvn.w	r0, #21
}
    e432:	bd08      	pop	{r3, pc}

0000e434 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e434:	4b0e      	ldr	r3, [pc, #56]	; (e470 <data_buf_overflow+0x3c>)
    e436:	e9d3 2300 	ldrd	r2, r3, [r3]
    e43a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    e43e:	2300      	movs	r3, #0
    e440:	4313      	orrs	r3, r2
    e442:	d100      	bne.n	e446 <data_buf_overflow+0x12>
    e444:	4770      	bx	lr
{
    e446:	b510      	push	{r4, lr}
    e448:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e44a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e44e:	2001      	movs	r0, #1
    e450:	f7f8 fa1c 	bl	688c <bt_buf_get_rx>
    e454:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e456:	2201      	movs	r2, #1
    e458:	211a      	movs	r1, #26
    e45a:	f7fe febf 	bl	d1dc <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e45e:	6820      	ldr	r0, [r4, #0]
    e460:	2101      	movs	r1, #1
    e462:	3008      	adds	r0, #8
    e464:	f00c fbe2 	bl	1ac2c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e468:	2301      	movs	r3, #1
    e46a:	7003      	strb	r3, [r0, #0]
    e46c:	bd10      	pop	{r4, pc}
    e46e:	bf00      	nop
    e470:	2000bb68 	.word	0x2000bb68

0000e474 <encode_data_ctrl>:
{
    e474:	b510      	push	{r4, lr}
    e476:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    e478:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    e47a:	78e0      	ldrb	r0, [r4, #3]
    e47c:	3803      	subs	r0, #3
    e47e:	2812      	cmp	r0, #18
    e480:	d82e      	bhi.n	e4e0 <encode_data_ctrl+0x6c>
    e482:	e8df f000 	tbb	[pc, r0]
    e486:	2d0a      	.short	0x2d0a
    e488:	2d290e2d 	.word	0x2d290e2d
    e48c:	192d2d12 	.word	0x192d2d12
    e490:	2d212d1d 	.word	0x2d212d1d
    e494:	252d2d2d 	.word	0x252d2d2d
    e498:	25          	.byte	0x25
    e499:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    e49a:	4620      	mov	r0, r4
    e49c:	f7f7 feec 	bl	6278 <le_ltk_request>
		break;
    e4a0:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    e4a2:	2000      	movs	r0, #0
    e4a4:	f7ff f826 	bl	d4f4 <encrypt_change>
		break;
    e4a8:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e4aa:	4613      	mov	r3, r2
    e4ac:	460a      	mov	r2, r1
    e4ae:	4621      	mov	r1, r4
    e4b0:	2000      	movs	r0, #0
    e4b2:	f7f7 fceb 	bl	5e8c <le_remote_feat_complete>
		break;
    e4b6:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    e4b8:	4620      	mov	r0, r4
    e4ba:	f7fe fff5 	bl	d4a8 <remote_version_info>
		break;
    e4be:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    e4c0:	7920      	ldrb	r0, [r4, #4]
    e4c2:	f7ff f817 	bl	d4f4 <encrypt_change>
		break;
    e4c6:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    e4c8:	4620      	mov	r0, r4
    e4ca:	f7f7 fdd7 	bl	607c <le_conn_param_req>
		break;
    e4ce:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    e4d0:	4620      	mov	r0, r4
    e4d2:	f7f6 fa43 	bl	495c <le_data_len_change>
		break;
    e4d6:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    e4d8:	4620      	mov	r0, r4
    e4da:	f7ff fb66 	bl	dbaa <le_unknown_rsp>
		break;
    e4de:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e4e0:	4040      	eors	r0, r0
    e4e2:	f380 8811 	msr	BASEPRI, r0
    e4e6:	f04f 0004 	mov.w	r0, #4
    e4ea:	df02      	svc	2

0000e4ec <le_advertising_report>:
{
    e4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4f0:	b082      	sub	sp, #8
    e4f2:	4605      	mov	r5, r0
    e4f4:	460e      	mov	r6, r1
    e4f6:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e4f8:	4b90      	ldr	r3, [pc, #576]	; (e73c <le_advertising_report+0x250>)
    e4fa:	e893 0003 	ldmia.w	r3, {r0, r1}
    e4fe:	9000      	str	r0, [sp, #0]
    e500:	f8ad 1004 	strh.w	r1, [sp, #4]
    e504:	0c09      	lsrs	r1, r1, #16
    e506:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e50a:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e50c:	330b      	adds	r3, #11
    e50e:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    e512:	782b      	ldrb	r3, [r5, #0]
    e514:	f013 0f40 	tst.w	r3, #64	; 0x40
    e518:	d125      	bne.n	e566 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    e51a:	4b89      	ldr	r3, [pc, #548]	; (e740 <le_advertising_report+0x254>)
    e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e520:	2200      	movs	r2, #0
    e522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e526:	4313      	orrs	r3, r2
    e528:	f000 80b0 	beq.w	e68c <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    e52c:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e52e:	330c      	adds	r3, #12
    e530:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    e532:	b947      	cbnz	r7, e546 <le_advertising_report+0x5a>
    e534:	4b83      	ldr	r3, [pc, #524]	; (e744 <le_advertising_report+0x258>)
    e536:	e9d3 2300 	ldrd	r2, r3, [r3]
    e53a:	f002 0202 	and.w	r2, r2, #2
    e53e:	2300      	movs	r3, #0
    e540:	4313      	orrs	r3, r2
    e542:	f000 80a3 	beq.w	e68c <le_advertising_report+0x1a0>
    e546:	b147      	cbz	r7, e55a <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    e548:	4b7e      	ldr	r3, [pc, #504]	; (e744 <le_advertising_report+0x258>)
    e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e54e:	f002 020b 	and.w	r2, r2, #11
    e552:	2300      	movs	r3, #0
    e554:	4313      	orrs	r3, r2
    e556:	f000 8099 	beq.w	e68c <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    e55a:	4b7b      	ldr	r3, [pc, #492]	; (e748 <le_advertising_report+0x25c>)
    e55c:	681b      	ldr	r3, [r3, #0]
    e55e:	2b00      	cmp	r3, #0
    e560:	db08      	blt.n	e574 <le_advertising_report+0x88>
    e562:	2400      	movs	r4, #0
    e564:	e009      	b.n	e57a <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    e566:	1cab      	adds	r3, r5, #2
    e568:	4642      	mov	r2, r8
    e56a:	2100      	movs	r1, #0
    e56c:	4608      	mov	r0, r1
    e56e:	f00b fea9 	bl	1a2c4 <ll_rl_crpa_set>
    e572:	e7d2      	b.n	e51a <le_advertising_report+0x2e>
	return false;
    e574:	2300      	movs	r3, #0
    e576:	e054      	b.n	e622 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    e578:	3401      	adds	r4, #1
    e57a:	4b73      	ldr	r3, [pc, #460]	; (e748 <le_advertising_report+0x25c>)
    e57c:	681b      	ldr	r3, [r3, #0]
    e57e:	429c      	cmp	r4, r3
    e580:	da26      	bge.n	e5d0 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    e582:	4972      	ldr	r1, [pc, #456]	; (e74c <le_advertising_report+0x260>)
    e584:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    e588:	2206      	movs	r2, #6
    e58a:	3102      	adds	r1, #2
    e58c:	1ca8      	adds	r0, r5, #2
    e58e:	f01b fd8b 	bl	2a0a8 <memcmp>
    e592:	2800      	cmp	r0, #0
    e594:	d1f0      	bne.n	e578 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    e596:	782b      	ldrb	r3, [r5, #0]
    e598:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e59c:	4a6b      	ldr	r2, [pc, #428]	; (e74c <le_advertising_report+0x260>)
    e59e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    e5a2:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    e5a4:	4293      	cmp	r3, r2
    e5a6:	d1e7      	bne.n	e578 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    e5a8:	4b68      	ldr	r3, [pc, #416]	; (e74c <le_advertising_report+0x260>)
    e5aa:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    e5ae:	782b      	ldrb	r3, [r5, #0]
    e5b0:	f003 030f 	and.w	r3, r3, #15
    e5b4:	fa22 f103 	lsr.w	r1, r2, r3
    e5b8:	f011 0f01 	tst.w	r1, #1
    e5bc:	d171      	bne.n	e6a2 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    e5be:	2101      	movs	r1, #1
    e5c0:	fa01 f303 	lsl.w	r3, r1, r3
    e5c4:	431a      	orrs	r2, r3
    e5c6:	4b61      	ldr	r3, [pc, #388]	; (e74c <le_advertising_report+0x260>)
    e5c8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    e5cc:	2300      	movs	r3, #0
    e5ce:	e028      	b.n	e622 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    e5d0:	f8df a17c 	ldr.w	sl, [pc, #380]	; e750 <le_advertising_report+0x264>
    e5d4:	f8da 0000 	ldr.w	r0, [sl]
    e5d8:	4c5c      	ldr	r4, [pc, #368]	; (e74c <le_advertising_report+0x260>)
    e5da:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e5de:	2206      	movs	r2, #6
    e5e0:	1ca9      	adds	r1, r5, #2
    e5e2:	3002      	adds	r0, #2
    e5e4:	f7f1 fe6c 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    e5e8:	f8da 3000 	ldr.w	r3, [sl]
    e5ec:	782a      	ldrb	r2, [r5, #0]
    e5ee:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e5f2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    e5f6:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    e5f8:	782a      	ldrb	r2, [r5, #0]
    e5fa:	f002 010f 	and.w	r1, r2, #15
    e5fe:	2201      	movs	r2, #1
    e600:	408a      	lsls	r2, r1
    e602:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e606:	4a50      	ldr	r2, [pc, #320]	; (e748 <le_advertising_report+0x25c>)
    e608:	6812      	ldr	r2, [r2, #0]
    e60a:	2a0f      	cmp	r2, #15
    e60c:	dc41      	bgt.n	e692 <le_advertising_report+0x1a6>
			dup_count++;
    e60e:	3201      	adds	r2, #1
    e610:	4b4d      	ldr	r3, [pc, #308]	; (e748 <le_advertising_report+0x25c>)
    e612:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    e614:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e618:	4b4d      	ldr	r3, [pc, #308]	; (e750 <le_advertising_report+0x264>)
    e61a:	681b      	ldr	r3, [r3, #0]
    e61c:	2b10      	cmp	r3, #16
    e61e:	d03c      	beq.n	e69a <le_advertising_report+0x1ae>
	return false;
    e620:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    e622:	bb9b      	cbnz	r3, e68c <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e624:	782b      	ldrb	r3, [r5, #0]
    e626:	f003 030f 	and.w	r3, r3, #15
    e62a:	2b01      	cmp	r3, #1
    e62c:	d03b      	beq.n	e6a6 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    e62e:	786c      	ldrb	r4, [r5, #1]
    e630:	3c06      	subs	r4, #6
    e632:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    e634:	786a      	ldrb	r2, [r5, #1]
    e636:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e638:	f816 a002 	ldrb.w	sl, [r6, r2]
    e63c:	f1ca 0a00 	rsb	sl, sl, #0
    e640:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    e644:	2f00      	cmp	r7, #0
    e646:	d041      	beq.n	e6cc <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e648:	2b01      	cmp	r3, #1
    e64a:	d12e      	bne.n	e6aa <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e64c:	2211      	movs	r2, #17
    e64e:	210b      	movs	r1, #11
    e650:	4648      	mov	r0, r9
    e652:	f7fe fe8f 	bl	d374 <meta_evt>
    e656:	4604      	mov	r4, r0
		drp->num_reports = 1;
    e658:	2301      	movs	r3, #1
    e65a:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    e65c:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    e65e:	f00b fce5 	bl	1a02c <ll_rl_size_get>
    e662:	4580      	cmp	r8, r0
    e664:	d227      	bcs.n	e6b6 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e666:	1ce2      	adds	r2, r4, #3
    e668:	1ca1      	adds	r1, r4, #2
    e66a:	4640      	mov	r0, r8
    e66c:	f00b fa86 	bl	19b7c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    e670:	78a3      	ldrb	r3, [r4, #2]
    e672:	3302      	adds	r3, #2
    e674:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    e676:	2301      	movs	r3, #1
    e678:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    e67a:	2206      	movs	r2, #6
    e67c:	f105 0108 	add.w	r1, r5, #8
    e680:	f104 000a 	add.w	r0, r4, #10
    e684:	f7f1 fe1c 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    e688:	f884 a010 	strb.w	sl, [r4, #16]
}
    e68c:	b002      	add	sp, #8
    e68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    e692:	3301      	adds	r3, #1
    e694:	4a2e      	ldr	r2, [pc, #184]	; (e750 <le_advertising_report+0x264>)
    e696:	6013      	str	r3, [r2, #0]
    e698:	e7be      	b.n	e618 <le_advertising_report+0x12c>
			dup_curr = 0;
    e69a:	2300      	movs	r3, #0
    e69c:	4a2c      	ldr	r2, [pc, #176]	; (e750 <le_advertising_report+0x264>)
    e69e:	6013      	str	r3, [r2, #0]
    e6a0:	e7bf      	b.n	e622 <le_advertising_report+0x136>
					return true;
    e6a2:	2301      	movs	r3, #1
    e6a4:	e7bd      	b.n	e622 <le_advertising_report+0x136>
		data_len = 0;
    e6a6:	2400      	movs	r4, #0
    e6a8:	e7c4      	b.n	e634 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e6aa:	4040      	eors	r0, r0
    e6ac:	f380 8811 	msr	BASEPRI, r0
    e6b0:	f04f 0004 	mov.w	r0, #4
    e6b4:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    e6b6:	4629      	mov	r1, r5
    e6b8:	f811 3b02 	ldrb.w	r3, [r1], #2
    e6bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e6c0:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    e6c2:	2206      	movs	r2, #6
    e6c4:	1ce0      	adds	r0, r4, #3
    e6c6:	f7f1 fdfb 	bl	2c0 <memcpy>
    e6ca:	e7d4      	b.n	e676 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e6cc:	f104 020b 	add.w	r2, r4, #11
    e6d0:	b2d2      	uxtb	r2, r2
    e6d2:	2102      	movs	r1, #2
    e6d4:	4648      	mov	r0, r9
    e6d6:	f7fe fe4d 	bl	d374 <meta_evt>
    e6da:	4607      	mov	r7, r0
	sep->num_reports = 1;
    e6dc:	2301      	movs	r3, #1
    e6de:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e6e0:	782b      	ldrb	r3, [r5, #0]
    e6e2:	f003 030f 	and.w	r3, r3, #15
    e6e6:	aa02      	add	r2, sp, #8
    e6e8:	4413      	add	r3, r2
    e6ea:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    e6ee:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e6f0:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e6f2:	330b      	adds	r3, #11
    e6f4:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    e6f6:	f00b fc99 	bl	1a02c <ll_rl_size_get>
    e6fa:	4286      	cmp	r6, r0
    e6fc:	d212      	bcs.n	e724 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e6fe:	1cfa      	adds	r2, r7, #3
    e700:	1cb9      	adds	r1, r7, #2
    e702:	4630      	mov	r0, r6
    e704:	f00b fa3a 	bl	19b7c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    e708:	78bb      	ldrb	r3, [r7, #2]
    e70a:	3302      	adds	r3, #2
    e70c:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    e70e:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    e710:	370a      	adds	r7, #10
    e712:	4622      	mov	r2, r4
    e714:	f105 0108 	add.w	r1, r5, #8
    e718:	4638      	mov	r0, r7
    e71a:	f7f1 fdd1 	bl	2c0 <memcpy>
	*prssi = rssi;
    e71e:	f807 a004 	strb.w	sl, [r7, r4]
    e722:	e7b3      	b.n	e68c <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    e724:	4629      	mov	r1, r5
    e726:	f811 3b02 	ldrb.w	r3, [r1], #2
    e72a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e72e:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    e730:	2206      	movs	r2, #6
    e732:	1cf8      	adds	r0, r7, #3
    e734:	f7f1 fdc4 	bl	2c0 <memcpy>
    e738:	e7e9      	b.n	e70e <le_advertising_report+0x222>
    e73a:	bf00      	nop
    e73c:	0002e578 	.word	0x0002e578
    e740:	2000bb68 	.word	0x2000bb68
    e744:	2000bb70 	.word	0x2000bb70
    e748:	20000a48 	.word	0x20000a48
    e74c:	20000a50 	.word	0x20000a50
    e750:	20000a4c 	.word	0x20000a4c

0000e754 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    e754:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    e756:	7803      	ldrb	r3, [r0, #0]
    e758:	f003 030f 	and.w	r3, r3, #15
    e75c:	2b07      	cmp	r3, #7
    e75e:	d000      	beq.n	e762 <le_adv_ext_report+0xe>
    e760:	4770      	bx	lr
    e762:	2a00      	cmp	r2, #0
    e764:	d0fc      	beq.n	e760 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    e766:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    e768:	7883      	ldrb	r3, [r0, #2]
    e76a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    e76e:	d0f7      	beq.n	e760 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    e770:	78c3      	ldrb	r3, [r0, #3]
    e772:	f013 0f01 	tst.w	r3, #1
    e776:	d0f3      	beq.n	e760 <le_adv_ext_report+0xc>
{
    e778:	b570      	push	{r4, r5, r6, lr}
    e77a:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    e77c:	7803      	ldrb	r3, [r0, #0]
    e77e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e782:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    e786:	2206      	movs	r2, #6
    e788:	f10d 0019 	add.w	r0, sp, #25
    e78c:	f7f1 fd98 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    e790:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e794:	2b03      	cmp	r3, #3
    e796:	d830      	bhi.n	e7fa <le_adv_ext_report+0xa6>
    e798:	e8df f003 	tbb	[pc, r3]
    e79c:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e7a0:	4919      	ldr	r1, [pc, #100]	; (e808 <le_adv_ext_report+0xb4>)
    e7a2:	a808      	add	r0, sp, #32
    e7a4:	f01b fe42 	bl	2a42c <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e7a8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e7ac:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e7b0:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e7b4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e7b8:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e7bc:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e7c0:	ae08      	add	r6, sp, #32
    e7c2:	9605      	str	r6, [sp, #20]
    e7c4:	9504      	str	r5, [sp, #16]
    e7c6:	9403      	str	r4, [sp, #12]
    e7c8:	9002      	str	r0, [sp, #8]
    e7ca:	9101      	str	r1, [sp, #4]
    e7cc:	9200      	str	r2, [sp, #0]
    e7ce:	4a0f      	ldr	r2, [pc, #60]	; (e80c <le_adv_ext_report+0xb8>)
    e7d0:	211b      	movs	r1, #27
    e7d2:	a80b      	add	r0, sp, #44	; 0x2c
    e7d4:	f7f4 fbc4 	bl	2f60 <snprintk>
}
    e7d8:	b012      	add	sp, #72	; 0x48
    e7da:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e7dc:	490c      	ldr	r1, [pc, #48]	; (e810 <le_adv_ext_report+0xbc>)
    e7de:	a808      	add	r0, sp, #32
    e7e0:	f01b fe24 	bl	2a42c <strcpy>
    e7e4:	e7e0      	b.n	e7a8 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    e7e6:	490b      	ldr	r1, [pc, #44]	; (e814 <le_adv_ext_report+0xc0>)
    e7e8:	a808      	add	r0, sp, #32
    e7ea:	f01b fe1f 	bl	2a42c <strcpy>
    e7ee:	e7db      	b.n	e7a8 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    e7f0:	4909      	ldr	r1, [pc, #36]	; (e818 <le_adv_ext_report+0xc4>)
    e7f2:	a808      	add	r0, sp, #32
    e7f4:	f01b fe1a 	bl	2a42c <strcpy>
    e7f8:	e7d6      	b.n	e7a8 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e7fa:	4a08      	ldr	r2, [pc, #32]	; (e81c <le_adv_ext_report+0xc8>)
    e7fc:	210a      	movs	r1, #10
    e7fe:	a808      	add	r0, sp, #32
    e800:	f7f4 fbae 	bl	2f60 <snprintk>
    e804:	e7d0      	b.n	e7a8 <le_adv_ext_report+0x54>
    e806:	bf00      	nop
    e808:	00030fd4 	.word	0x00030fd4
    e80c:	00031004 	.word	0x00031004
    e810:	00030fdc 	.word	0x00030fdc
    e814:	00030fe4 	.word	0x00030fe4
    e818:	00030ff0 	.word	0x00030ff0
    e81c:	00030ffc 	.word	0x00030ffc

0000e820 <le_adv_ext_1M_report>:
{
    e820:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    e822:	2301      	movs	r3, #1
    e824:	f7ff ff96 	bl	e754 <le_adv_ext_report>
    e828:	bd08      	pop	{r3, pc}

0000e82a <le_adv_ext_coded_report>:
{
    e82a:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    e82c:	2304      	movs	r3, #4
    e82e:	f7ff ff91 	bl	e754 <le_adv_ext_report>
    e832:	bd08      	pop	{r3, pc}

0000e834 <le_scan_req_received>:
{
    e834:	b570      	push	{r4, r5, r6, lr}
    e836:	b092      	sub	sp, #72	; 0x48
    e838:	4604      	mov	r4, r0
    e83a:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e83c:	4b33      	ldr	r3, [pc, #204]	; (e90c <le_scan_req_received+0xd8>)
    e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e842:	2200      	movs	r2, #0
    e844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e848:	4313      	orrs	r3, r2
    e84a:	d007      	beq.n	e85c <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e84c:	4b30      	ldr	r3, [pc, #192]	; (e910 <le_scan_req_received+0xdc>)
    e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e852:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    e856:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e858:	4313      	orrs	r3, r2
    e85a:	d146      	bne.n	e8ea <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    e85c:	4621      	mov	r1, r4
    e85e:	f811 3b02 	ldrb.w	r3, [r1], #2
    e862:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e866:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e86a:	2206      	movs	r2, #6
    e86c:	f10d 0019 	add.w	r0, sp, #25
    e870:	f7f1 fd26 	bl	2c0 <memcpy>
	switch (addr->type) {
    e874:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e878:	2b03      	cmp	r3, #3
    e87a:	d830      	bhi.n	e8de <le_scan_req_received+0xaa>
    e87c:	e8df f003 	tbb	[pc, r3]
    e880:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    e884:	4923      	ldr	r1, [pc, #140]	; (e914 <le_scan_req_received+0xe0>)
    e886:	a808      	add	r0, sp, #32
    e888:	f01b fdd0 	bl	2a42c <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e88c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e890:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e894:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e898:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e89c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e8a0:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e8a4:	ae08      	add	r6, sp, #32
    e8a6:	9605      	str	r6, [sp, #20]
    e8a8:	9504      	str	r5, [sp, #16]
    e8aa:	9403      	str	r4, [sp, #12]
    e8ac:	9002      	str	r0, [sp, #8]
    e8ae:	9101      	str	r1, [sp, #4]
    e8b0:	9200      	str	r2, [sp, #0]
    e8b2:	4a19      	ldr	r2, [pc, #100]	; (e918 <le_scan_req_received+0xe4>)
    e8b4:	211b      	movs	r1, #27
    e8b6:	a80b      	add	r0, sp, #44	; 0x2c
    e8b8:	f7f4 fb52 	bl	2f60 <snprintk>
}
    e8bc:	b012      	add	sp, #72	; 0x48
    e8be:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e8c0:	4916      	ldr	r1, [pc, #88]	; (e91c <le_scan_req_received+0xe8>)
    e8c2:	a808      	add	r0, sp, #32
    e8c4:	f01b fdb2 	bl	2a42c <strcpy>
    e8c8:	e7e0      	b.n	e88c <le_scan_req_received+0x58>
		strcpy(type, "public id");
    e8ca:	4915      	ldr	r1, [pc, #84]	; (e920 <le_scan_req_received+0xec>)
    e8cc:	a808      	add	r0, sp, #32
    e8ce:	f01b fdad 	bl	2a42c <strcpy>
    e8d2:	e7db      	b.n	e88c <le_scan_req_received+0x58>
		strcpy(type, "random id");
    e8d4:	4913      	ldr	r1, [pc, #76]	; (e924 <le_scan_req_received+0xf0>)
    e8d6:	a808      	add	r0, sp, #32
    e8d8:	f01b fda8 	bl	2a42c <strcpy>
    e8dc:	e7d6      	b.n	e88c <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e8de:	4a12      	ldr	r2, [pc, #72]	; (e928 <le_scan_req_received+0xf4>)
    e8e0:	210a      	movs	r1, #10
    e8e2:	a808      	add	r0, sp, #32
    e8e4:	f7f4 fb3c 	bl	2f60 <snprintk>
    e8e8:	e7d0      	b.n	e88c <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    e8ea:	2208      	movs	r2, #8
    e8ec:	2113      	movs	r1, #19
    e8ee:	f7fe fd41 	bl	d374 <meta_evt>
	sep->handle = 0;
    e8f2:	2300      	movs	r3, #0
    e8f4:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    e8f6:	4621      	mov	r1, r4
    e8f8:	f811 3b02 	ldrb.w	r3, [r1], #2
    e8fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e900:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e902:	2206      	movs	r2, #6
    e904:	3002      	adds	r0, #2
    e906:	f7f1 fcdb 	bl	2c0 <memcpy>
    e90a:	e7d7      	b.n	e8bc <le_scan_req_received+0x88>
    e90c:	2000bb68 	.word	0x2000bb68
    e910:	2000bb70 	.word	0x2000bb70
    e914:	00030fd4 	.word	0x00030fd4
    e918:	00031004 	.word	0x00031004
    e91c:	00030fdc 	.word	0x00030fdc
    e920:	00030fe4 	.word	0x00030fe4
    e924:	00030ff0 	.word	0x00030ff0
    e928:	00030ffc 	.word	0x00030ffc

0000e92c <encode_control>:
{
    e92c:	b510      	push	{r4, lr}
    e92e:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    e930:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    e932:	7903      	ldrb	r3, [r0, #4]
    e934:	3b02      	subs	r3, #2
    e936:	2b0a      	cmp	r3, #10
    e938:	d837      	bhi.n	e9aa <encode_control+0x7e>
    e93a:	e8df f003 	tbb	[pc, r3]
    e93e:	0b06      	.short	0x0b06
    e940:	1e1a1510 	.word	0x1e1a1510
    e944:	2e2a2622 	.word	0x2e2a2622
    e948:	32          	.byte	0x32
    e949:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    e94a:	4601      	mov	r1, r0
    e94c:	4620      	mov	r0, r4
    e94e:	f7ff fdcd 	bl	e4ec <le_advertising_report>
		break;
    e952:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    e954:	4601      	mov	r1, r0
    e956:	4620      	mov	r0, r4
    e958:	f7ff ff62 	bl	e820 <le_adv_ext_1M_report>
		break;
    e95c:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    e95e:	4601      	mov	r1, r0
    e960:	4620      	mov	r0, r4
    e962:	f7ff ff62 	bl	e82a <le_adv_ext_coded_report>
		break;
    e966:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    e968:	4601      	mov	r1, r0
    e96a:	4620      	mov	r0, r4
    e96c:	f7ff ff62 	bl	e834 <le_scan_req_received>
		break;
    e970:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    e972:	4620      	mov	r0, r4
    e974:	f7f7 f99e 	bl	5cb4 <le_conn_complete>
		break;
    e978:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    e97a:	4620      	mov	r0, r4
    e97c:	f7fe fd32 	bl	d3e4 <disconn_complete>
		break;
    e980:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    e982:	4620      	mov	r0, r4
    e984:	f7f6 f832 	bl	49ec <le_conn_update_complete>
		break;
    e988:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    e98a:	4620      	mov	r0, r4
    e98c:	f7fe fd52 	bl	d434 <enc_refresh_complete>
		break;
    e990:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    e992:	4620      	mov	r0, r4
    e994:	f7fe fd6c 	bl	d470 <auth_payload_timeout_exp>
		break;
    e998:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    e99a:	4620      	mov	r0, r4
    e99c:	f7fe fcfe 	bl	d39c <le_chan_sel_algo>
		break;
    e9a0:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    e9a2:	4620      	mov	r0, r4
    e9a4:	f7ff faa6 	bl	def4 <le_phy_upd_complete>
		return;
    e9a8:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e9aa:	4040      	eors	r0, r0
    e9ac:	f380 8811 	msr	BASEPRI, r0
    e9b0:	f04f 0004 	mov.w	r0, #4
    e9b4:	df02      	svc	2
	...

0000e9b8 <hci_cmd_handle>:
{
    e9b8:	b510      	push	{r4, lr}
    e9ba:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    e9bc:	2300      	movs	r3, #0
    e9be:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    e9c0:	8983      	ldrh	r3, [r0, #12]
    e9c2:	2b02      	cmp	r3, #2
    e9c4:	d94a      	bls.n	ea5c <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    e9c6:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    e9c8:	8814      	ldrh	r4, [r2, #0]
    e9ca:	4926      	ldr	r1, [pc, #152]	; (ea64 <hci_cmd_handle+0xac>)
    e9cc:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    e9ce:	7892      	ldrb	r2, [r2, #2]
    e9d0:	4293      	cmp	r3, r2
    e9d2:	d345      	bcc.n	ea60 <hci_cmd_handle+0xa8>
    e9d4:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    e9d6:	2103      	movs	r1, #3
    e9d8:	3008      	adds	r0, #8
    e9da:	f00c f974 	bl	1acc6 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    e9de:	4b21      	ldr	r3, [pc, #132]	; (ea64 <hci_cmd_handle+0xac>)
    e9e0:	881b      	ldrh	r3, [r3, #0]
    e9e2:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    e9e6:	0a9b      	lsrs	r3, r3, #10
    e9e8:	2b04      	cmp	r3, #4
    e9ea:	d01c      	beq.n	ea26 <hci_cmd_handle+0x6e>
    e9ec:	d908      	bls.n	ea00 <hci_cmd_handle+0x48>
    e9ee:	2b08      	cmp	r3, #8
    e9f0:	d023      	beq.n	ea3a <hci_cmd_handle+0x82>
    e9f2:	2b3f      	cmp	r3, #63	; 0x3f
    e9f4:	d026      	beq.n	ea44 <hci_cmd_handle+0x8c>
    e9f6:	2b05      	cmp	r3, #5
    e9f8:	d01a      	beq.n	ea30 <hci_cmd_handle+0x78>
		err = -EINVAL;
    e9fa:	f06f 0015 	mvn.w	r0, #21
    e9fe:	e00c      	b.n	ea1a <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    ea00:	2b01      	cmp	r3, #1
    ea02:	d006      	beq.n	ea12 <hci_cmd_handle+0x5a>
    ea04:	2b03      	cmp	r3, #3
    ea06:	d1f8      	bne.n	e9fa <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    ea08:	aa01      	add	r2, sp, #4
    ea0a:	4621      	mov	r1, r4
    ea0c:	f7fe fe29 	bl	d662 <ctrl_bb_cmd_handle>
		break;
    ea10:	e003      	b.n	ea1a <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    ea12:	aa01      	add	r2, sp, #4
    ea14:	4621      	mov	r1, r4
    ea16:	f7fe fd9b 	bl	d550 <link_control_cmd_handle>
	if (err == -EINVAL) {
    ea1a:	f110 0f16 	cmn.w	r0, #22
    ea1e:	d016      	beq.n	ea4e <hci_cmd_handle+0x96>
	return evt;
    ea20:	9801      	ldr	r0, [sp, #4]
}
    ea22:	b002      	add	sp, #8
    ea24:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    ea26:	aa01      	add	r2, sp, #4
    ea28:	4621      	mov	r1, r4
    ea2a:	f7fe ffde 	bl	d9ea <info_cmd_handle>
		break;
    ea2e:	e7f4      	b.n	ea1a <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    ea30:	aa01      	add	r2, sp, #4
    ea32:	4621      	mov	r1, r4
    ea34:	f7fe fbcf 	bl	d1d6 <status_cmd_handle>
		break;
    ea38:	e7ef      	b.n	ea1a <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    ea3a:	aa01      	add	r2, sp, #4
    ea3c:	4621      	mov	r1, r4
    ea3e:	f7ff fb8c 	bl	e15a <controller_cmd_handle>
		break;
    ea42:	e7ea      	b.n	ea1a <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    ea44:	aa01      	add	r2, sp, #4
    ea46:	4621      	mov	r1, r4
    ea48:	f7ff f876 	bl	db38 <vendor_cmd_handle>
		break;
    ea4c:	e7e5      	b.n	ea1a <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    ea4e:	2101      	movs	r1, #1
    ea50:	a801      	add	r0, sp, #4
    ea52:	f7fe fbf5 	bl	d240 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    ea56:	2301      	movs	r3, #1
    ea58:	7003      	strb	r3, [r0, #0]
    ea5a:	e7e1      	b.n	ea20 <hci_cmd_handle+0x68>
		return NULL;
    ea5c:	2000      	movs	r0, #0
    ea5e:	e7e0      	b.n	ea22 <hci_cmd_handle+0x6a>
		return NULL;
    ea60:	2000      	movs	r0, #0
    ea62:	e7de      	b.n	ea22 <hci_cmd_handle+0x6a>
    ea64:	20000a40 	.word	0x20000a40

0000ea68 <hci_acl_handle>:
{
    ea68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    ea6c:	2300      	movs	r3, #0
    ea6e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ea70:	8983      	ldrh	r3, [r0, #12]
    ea72:	2b03      	cmp	r3, #3
    ea74:	d93e      	bls.n	eaf4 <hci_acl_handle+0x8c>
    ea76:	4689      	mov	r9, r1
    ea78:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    ea7a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    ea7e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ea82:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ea84:	2104      	movs	r1, #4
    ea86:	f00c f91e 	bl	1acc6 <net_buf_simple_pull>
	if (buf->len < len) {
    ea8a:	89a3      	ldrh	r3, [r4, #12]
    ea8c:	4598      	cmp	r8, r3
    ea8e:	d835      	bhi.n	eafc <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    ea90:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    ea92:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    ea96:	f009 ff1f 	bl	188d8 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    ea9a:	4605      	mov	r5, r0
    ea9c:	b140      	cbz	r0, eab0 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ea9e:	b177      	cbz	r7, eabe <hci_acl_handle+0x56>
    eaa0:	2f02      	cmp	r7, #2
    eaa2:	d00c      	beq.n	eabe <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    eaa4:	7903      	ldrb	r3, [r0, #4]
    eaa6:	2201      	movs	r2, #1
    eaa8:	f362 0301 	bfi	r3, r2, #0, #2
    eaac:	7103      	strb	r3, [r0, #4]
    eaae:	e00b      	b.n	eac8 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    eab0:	4648      	mov	r0, r9
    eab2:	f7ff fcbf 	bl	e434 <data_buf_overflow>
		return -ENOBUFS;
    eab6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    eaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    eabe:	792b      	ldrb	r3, [r5, #4]
    eac0:	2202      	movs	r2, #2
    eac2:	f362 0301 	bfi	r3, r2, #0, #2
    eac6:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    eac8:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    eacc:	4642      	mov	r2, r8
    eace:	68a1      	ldr	r1, [r4, #8]
    ead0:	1de8      	adds	r0, r5, #7
    ead2:	f7f1 fbf5 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ead6:	4629      	mov	r1, r5
    ead8:	4630      	mov	r0, r6
    eada:	f009 ff0d 	bl	188f8 <radio_tx_mem_enqueue>
    eade:	b910      	cbnz	r0, eae6 <hci_acl_handle+0x7e>
	return 0;
    eae0:	2000      	movs	r0, #0
}
    eae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    eae6:	4628      	mov	r0, r5
    eae8:	f009 fefe 	bl	188e8 <radio_tx_mem_release>
		return -EINVAL;
    eaec:	f06f 0015 	mvn.w	r0, #21
    eaf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    eaf4:	f06f 0015 	mvn.w	r0, #21
    eaf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    eafc:	f06f 0015 	mvn.w	r0, #21
    eb00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000eb04 <hci_acl_encode>:
{
    eb04:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    eb06:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    eb08:	7a03      	ldrb	r3, [r0, #8]
    eb0a:	f003 0303 	and.w	r3, r3, #3
    eb0e:	3b01      	subs	r3, #1
    eb10:	2b01      	cmp	r3, #1
    eb12:	d81d      	bhi.n	eb50 <hci_acl_encode+0x4c>
    eb14:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    eb16:	f101 0508 	add.w	r5, r1, #8
    eb1a:	2104      	movs	r1, #4
    eb1c:	4628      	mov	r0, r5
    eb1e:	f00c f885 	bl	1ac2c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    eb22:	7a23      	ldrb	r3, [r4, #8]
    eb24:	f003 0303 	and.w	r3, r3, #3
    eb28:	2b02      	cmp	r3, #2
    eb2a:	d00e      	beq.n	eb4a <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    eb2c:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    eb30:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    eb32:	7a63      	ldrb	r3, [r4, #9]
    eb34:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    eb36:	7a61      	ldrb	r1, [r4, #9]
    eb38:	4628      	mov	r0, r5
    eb3a:	f00c f877 	bl	1ac2c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    eb3e:	7a62      	ldrb	r2, [r4, #9]
    eb40:	f104 010b 	add.w	r1, r4, #11
    eb44:	f7f1 fbbc 	bl	2c0 <memcpy>
}
    eb48:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    eb4a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    eb4e:	e7ef      	b.n	eb30 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    eb50:	4040      	eors	r0, r0
    eb52:	f380 8811 	msr	BASEPRI, r0
    eb56:	f04f 0004 	mov.w	r0, #4
    eb5a:	df02      	svc	2

0000eb5c <hci_evt_encode>:
{
    eb5c:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    eb5e:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    eb62:	7903      	ldrb	r3, [r0, #4]
    eb64:	2b01      	cmp	r3, #1
    eb66:	d004      	beq.n	eb72 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    eb68:	460a      	mov	r2, r1
    eb6a:	4621      	mov	r1, r4
    eb6c:	f7ff fede 	bl	e92c <encode_control>
    eb70:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    eb72:	460a      	mov	r2, r1
    eb74:	4621      	mov	r1, r4
    eb76:	f7ff fc7d 	bl	e474 <encode_data_ctrl>
    eb7a:	bd10      	pop	{r4, pc}

0000eb7c <hci_num_cmplt_encode>:
{
    eb7c:	b570      	push	{r4, r5, r6, lr}
    eb7e:	4606      	mov	r6, r0
    eb80:	460d      	mov	r5, r1
    eb82:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    eb84:	2205      	movs	r2, #5
    eb86:	2113      	movs	r1, #19
    eb88:	f7fe fb28 	bl	d1dc <evt_create>
	ep = net_buf_add(buf, len);
    eb8c:	2105      	movs	r1, #5
    eb8e:	f106 0008 	add.w	r0, r6, #8
    eb92:	f00c f84b 	bl	1ac2c <net_buf_simple_add>
	ep->num_handles = num_handles;
    eb96:	2301      	movs	r3, #1
    eb98:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    eb9a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    eb9e:	f8a0 4003 	strh.w	r4, [r0, #3]
    eba2:	bd70      	pop	{r4, r5, r6, pc}

0000eba4 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    eba4:	7903      	ldrb	r3, [r0, #4]
    eba6:	2b01      	cmp	r3, #1
    eba8:	d011      	beq.n	ebce <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    ebaa:	3b02      	subs	r3, #2
    ebac:	2b0a      	cmp	r3, #10
    ebae:	d80b      	bhi.n	ebc8 <hci_get_class+0x24>
    ebb0:	e8df f003 	tbb	[pc, r3]
    ebb4:	06060606 	.word	0x06060606
    ebb8:	08080816 	.word	0x08080816
    ebbc:	0808      	.short	0x0808
    ebbe:	08          	.byte	0x08
    ebbf:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    ebc0:	2001      	movs	r0, #1
    ebc2:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    ebc4:	2002      	movs	r0, #2
    ebc6:	4770      	bx	lr
			return -1;
    ebc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ebcc:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    ebce:	7a03      	ldrb	r3, [r0, #8]
    ebd0:	f003 0303 	and.w	r3, r3, #3
    ebd4:	2b03      	cmp	r3, #3
    ebd6:	d001      	beq.n	ebdc <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    ebd8:	2003      	movs	r0, #3
}
    ebda:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    ebdc:	2002      	movs	r0, #2
    ebde:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    ebe0:	2000      	movs	r0, #0
    ebe2:	4770      	bx	lr

0000ebe4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    ebe4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    ebe6:	4802      	ldr	r0, [pc, #8]	; (ebf0 <_hci_driver_init+0xc>)
    ebe8:	f7f7 fcec 	bl	65c4 <bt_hci_driver_register>

	return 0;
}
    ebec:	2000      	movs	r0, #0
    ebee:	bd08      	pop	{r3, pc}
    ebf0:	00031050 	.word	0x00031050

0000ebf4 <acl_handle>:
{
    ebf4:	b510      	push	{r4, lr}
    ebf6:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    ebf8:	a901      	add	r1, sp, #4
    ebfa:	f7ff ff35 	bl	ea68 <hci_acl_handle>
    ebfe:	4604      	mov	r4, r0
	if (evt) {
    ec00:	9801      	ldr	r0, [sp, #4]
    ec02:	b108      	cbz	r0, ec08 <acl_handle+0x14>
		bt_recv_prio(evt);
    ec04:	f7f7 fc8c 	bl	6520 <bt_recv_prio>
}
    ec08:	4620      	mov	r0, r4
    ec0a:	b002      	add	sp, #8
    ec0c:	bd10      	pop	{r4, pc}

0000ec0e <cmd_handle>:
{
    ec0e:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    ec10:	f7ff fed2 	bl	e9b8 <hci_cmd_handle>
	if (evt) {
    ec14:	b108      	cbz	r0, ec1a <cmd_handle+0xc>
		bt_recv_prio(evt);
    ec16:	f7f7 fc83 	bl	6520 <bt_recv_prio>
}
    ec1a:	2000      	movs	r0, #0
    ec1c:	bd08      	pop	{r3, pc}

0000ec1e <hci_driver_send>:
{
    ec1e:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    ec20:	8983      	ldrh	r3, [r0, #12]
    ec22:	b1cb      	cbz	r3, ec58 <hci_driver_send+0x3a>
    ec24:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    ec26:	f100 0310 	add.w	r3, r0, #16
    ec2a:	89c2      	ldrh	r2, [r0, #14]
    ec2c:	4413      	add	r3, r2
    ec2e:	3303      	adds	r3, #3
    ec30:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    ec34:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    ec36:	b13b      	cbz	r3, ec48 <hci_driver_send+0x2a>
    ec38:	2b02      	cmp	r3, #2
    ec3a:	d110      	bne.n	ec5e <hci_driver_send+0x40>
		err = acl_handle(buf);
    ec3c:	f7ff ffda 	bl	ebf4 <acl_handle>
    ec40:	4605      	mov	r5, r0
	if (!err) {
    ec42:	b12d      	cbz	r5, ec50 <hci_driver_send+0x32>
}
    ec44:	4628      	mov	r0, r5
    ec46:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    ec48:	f7ff ffe1 	bl	ec0e <cmd_handle>
    ec4c:	4605      	mov	r5, r0
		break;
    ec4e:	e7f8      	b.n	ec42 <hci_driver_send+0x24>
		net_buf_unref(buf);
    ec50:	4620      	mov	r0, r4
    ec52:	f00b ff9f 	bl	1ab94 <net_buf_unref>
    ec56:	e7f5      	b.n	ec44 <hci_driver_send+0x26>
		return -EINVAL;
    ec58:	f06f 0515 	mvn.w	r5, #21
    ec5c:	e7f2      	b.n	ec44 <hci_driver_send+0x26>
		return -EINVAL;
    ec5e:	f06f 0515 	mvn.w	r5, #21
    ec62:	e7ef      	b.n	ec44 <hci_driver_send+0x26>

0000ec64 <prio_recv_thread>:
{
    ec64:	b530      	push	{r4, r5, lr}
    ec66:	b087      	sub	sp, #28
    ec68:	e00f      	b.n	ec8a <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ec6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ec6e:	2001      	movs	r0, #1
    ec70:	f7f7 fe0c 	bl	688c <bt_buf_get_rx>
    ec74:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ec76:	4622      	mov	r2, r4
    ec78:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    ec7c:	f7ff ff7e 	bl	eb7c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ec80:	4628      	mov	r0, r5
    ec82:	f7f7 fc4d 	bl	6520 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ec86:	f01a f977 	bl	28f78 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ec8a:	f10d 0112 	add.w	r1, sp, #18
    ec8e:	a805      	add	r0, sp, #20
    ec90:	f009 fd22 	bl	186d8 <radio_rx_get>
    ec94:	4604      	mov	r4, r0
    ec96:	2800      	cmp	r0, #0
    ec98:	d1e7      	bne.n	ec6a <prio_recv_thread+0x6>
		if (node_rx) {
    ec9a:	9b05      	ldr	r3, [sp, #20]
    ec9c:	b133      	cbz	r3, ecac <prio_recv_thread+0x48>
			radio_rx_dequeue();
    ec9e:	f00a fa5b 	bl	19158 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    eca2:	9905      	ldr	r1, [sp, #20]
    eca4:	481a      	ldr	r0, [pc, #104]	; (ed10 <prio_recv_thread+0xac>)
    eca6:	f019 ff29 	bl	28afc <k_queue_append>
    ecaa:	e7ee      	b.n	ec8a <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ecac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ecb0:	4818      	ldr	r0, [pc, #96]	; (ed14 <prio_recv_thread+0xb0>)
    ecb2:	f01a facd 	bl	29250 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ecb6:	f01a fb17 	bl	292e8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ecba:	4b17      	ldr	r3, [pc, #92]	; (ed18 <prio_recv_thread+0xb4>)
    ecbc:	681b      	ldr	r3, [r3, #0]
    ecbe:	1ac3      	subs	r3, r0, r3
    ecc0:	f241 3288 	movw	r2, #5000	; 0x1388
    ecc4:	4293      	cmp	r3, r2
    ecc6:	d9e0      	bls.n	ec8a <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    ecc8:	2200      	movs	r2, #0
	size_t unused = 0;
    ecca:	4613      	mov	r3, r2
    eccc:	e001      	b.n	ecd2 <prio_recv_thread+0x6e>
			unused++;
    ecce:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ecd0:	3201      	adds	r2, #1
    ecd2:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    ecd6:	d203      	bcs.n	ece0 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    ecd8:	4910      	ldr	r1, [pc, #64]	; (ed1c <prio_recv_thread+0xb8>)
    ecda:	5c89      	ldrb	r1, [r1, r2]
    ecdc:	29aa      	cmp	r1, #170	; 0xaa
    ecde:	d0f6      	beq.n	ecce <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    ece0:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    ece4:	2264      	movs	r2, #100	; 0x64
    ece6:	fb02 f201 	mul.w	r2, r2, r1
    ecea:	0992      	lsrs	r2, r2, #6
    ecec:	480c      	ldr	r0, [pc, #48]	; (ed20 <prio_recv_thread+0xbc>)
    ecee:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ecf2:	9202      	str	r2, [sp, #8]
    ecf4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ecf8:	9201      	str	r2, [sp, #4]
    ecfa:	9100      	str	r1, [sp, #0]
    ecfc:	4909      	ldr	r1, [pc, #36]	; (ed24 <prio_recv_thread+0xc0>)
    ecfe:	480a      	ldr	r0, [pc, #40]	; (ed28 <prio_recv_thread+0xc4>)
    ed00:	f7f4 f920 	bl	2f44 <printk>
    ed04:	f01a faf0 	bl	292e8 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    ed08:	4b03      	ldr	r3, [pc, #12]	; (ed18 <prio_recv_thread+0xb4>)
    ed0a:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ed0c:	e7bd      	b.n	ec8a <prio_recv_thread+0x26>
    ed0e:	bf00      	nop
    ed10:	2000d0ec 	.word	0x2000d0ec
    ed14:	2000d07c 	.word	0x2000d07c
    ed18:	20000ad8 	.word	0x20000ad8
    ed1c:	200041a0 	.word	0x200041a0
    ed20:	2492492d 	.word	0x2492492d
    ed24:	00031060 	.word	0x00031060
    ed28:	00030dc8 	.word	0x00030dc8

0000ed2c <hci_driver_open>:
{
    ed2c:	b530      	push	{r4, r5, lr}
    ed2e:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    ed30:	4814      	ldr	r0, [pc, #80]	; (ed84 <hci_driver_open+0x58>)
    ed32:	f00a fb39 	bl	193a8 <ll_init>
	if (err) {
    ed36:	4605      	mov	r5, r0
    ed38:	b110      	cbz	r0, ed40 <hci_driver_open+0x14>
}
    ed3a:	4628      	mov	r0, r5
    ed3c:	b007      	add	sp, #28
    ed3e:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    ed40:	f7f6 fc66 	bl	5610 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    ed44:	2400      	movs	r4, #0
    ed46:	9405      	str	r4, [sp, #20]
    ed48:	9404      	str	r4, [sp, #16]
    ed4a:	f06f 0309 	mvn.w	r3, #9
    ed4e:	9303      	str	r3, [sp, #12]
    ed50:	9402      	str	r4, [sp, #8]
    ed52:	9401      	str	r4, [sp, #4]
    ed54:	9400      	str	r4, [sp, #0]
    ed56:	4b0c      	ldr	r3, [pc, #48]	; (ed88 <hci_driver_open+0x5c>)
    ed58:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ed5c:	490b      	ldr	r1, [pc, #44]	; (ed8c <hci_driver_open+0x60>)
    ed5e:	480c      	ldr	r0, [pc, #48]	; (ed90 <hci_driver_open+0x64>)
    ed60:	f01a fce2 	bl	29728 <_impl_k_thread_create>
    ed64:	9405      	str	r4, [sp, #20]
    ed66:	9404      	str	r4, [sp, #16]
    ed68:	f06f 0307 	mvn.w	r3, #7
    ed6c:	9303      	str	r3, [sp, #12]
    ed6e:	9402      	str	r4, [sp, #8]
    ed70:	9401      	str	r4, [sp, #4]
    ed72:	9400      	str	r4, [sp, #0]
    ed74:	4b07      	ldr	r3, [pc, #28]	; (ed94 <hci_driver_open+0x68>)
    ed76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ed7a:	4907      	ldr	r1, [pc, #28]	; (ed98 <hci_driver_open+0x6c>)
    ed7c:	4807      	ldr	r0, [pc, #28]	; (ed9c <hci_driver_open+0x70>)
    ed7e:	f01a fcd3 	bl	29728 <_impl_k_thread_create>
	return 0;
    ed82:	e7da      	b.n	ed3a <hci_driver_open+0xe>
    ed84:	2000d07c 	.word	0x2000d07c
    ed88:	0000ec65 	.word	0x0000ec65
    ed8c:	200041a0 	.word	0x200041a0
    ed90:	20002afc 	.word	0x20002afc
    ed94:	0000eda1 	.word	0x0000eda1
    ed98:	20004360 	.word	0x20004360
    ed9c:	200029c8 	.word	0x200029c8

0000eda0 <recv_thread>:
{
    eda0:	b510      	push	{r4, lr}
    eda2:	b086      	sub	sp, #24
    eda4:	e029      	b.n	edfa <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    eda6:	2801      	cmp	r0, #1
    eda8:	d042      	beq.n	ee30 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    edaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edae:	2001      	movs	r0, #1
    edb0:	f7f7 fd6c 	bl	688c <bt_buf_get_rx>
    edb4:	4604      	mov	r4, r0
		if (buf) {
    edb6:	b11c      	cbz	r4, edc0 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    edb8:	4621      	mov	r1, r4
    edba:	9805      	ldr	r0, [sp, #20]
    edbc:	f7ff fece 	bl	eb5c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    edc0:	2100      	movs	r1, #0
    edc2:	9b05      	ldr	r3, [sp, #20]
    edc4:	88d8      	ldrh	r0, [r3, #6]
    edc6:	f009 fd4b 	bl	18860 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    edca:	a806      	add	r0, sp, #24
    edcc:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    edd0:	2200      	movs	r2, #0
    edd2:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    edd4:	f009 fcc0 	bl	18758 <radio_rx_mem_release>
		if (buf) {
    edd8:	b124      	cbz	r4, ede4 <recv_thread+0x44>
			if (buf->len) {
    edda:	89a3      	ldrh	r3, [r4, #12]
    eddc:	b3ab      	cbz	r3, ee4a <recv_thread+0xaa>
				bt_recv(buf);
    edde:	4620      	mov	r0, r4
    ede0:	f7f7 fb74 	bl	64cc <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ede4:	f01a f8c8 	bl	28f78 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ede8:	f01a fa7e 	bl	292e8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    edec:	4b29      	ldr	r3, [pc, #164]	; (ee94 <recv_thread+0xf4>)
    edee:	681b      	ldr	r3, [r3, #0]
    edf0:	1ac0      	subs	r0, r0, r3
    edf2:	f241 3388 	movw	r3, #5000	; 0x1388
    edf6:	4298      	cmp	r0, r3
    edf8:	d82b      	bhi.n	ee52 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    edfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edfe:	4826      	ldr	r0, [pc, #152]	; (ee98 <recv_thread+0xf8>)
    ee00:	f019 fea4 	bl	28b4c <k_queue_get>
		if (node_rx && !buf) {
    ee04:	b1f8      	cbz	r0, ee46 <recv_thread+0xa6>
    ee06:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    ee08:	f7ff fecc 	bl	eba4 <hci_get_class>
    ee0c:	9405      	str	r4, [sp, #20]
	switch (class) {
    ee0e:	2800      	cmp	r0, #0
    ee10:	db13      	blt.n	ee3a <recv_thread+0x9a>
    ee12:	2802      	cmp	r0, #2
    ee14:	ddc7      	ble.n	eda6 <recv_thread+0x6>
    ee16:	2803      	cmp	r0, #3
    ee18:	d10f      	bne.n	ee3a <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ee1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ee1e:	2003      	movs	r0, #3
    ee20:	f7f7 fd34 	bl	688c <bt_buf_get_rx>
    ee24:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    ee26:	4601      	mov	r1, r0
    ee28:	9805      	ldr	r0, [sp, #20]
    ee2a:	f7ff fe6b 	bl	eb04 <hci_acl_encode>
    ee2e:	e7c7      	b.n	edc0 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    ee30:	2100      	movs	r1, #0
    ee32:	f7f7 fd2b 	bl	688c <bt_buf_get_rx>
    ee36:	4604      	mov	r4, r0
    ee38:	e7bd      	b.n	edb6 <recv_thread+0x16>
		LL_ASSERT(0);
    ee3a:	4040      	eors	r0, r0
    ee3c:	f380 8811 	msr	BASEPRI, r0
    ee40:	f04f 0004 	mov.w	r0, #4
    ee44:	df02      	svc	2
		struct net_buf *buf = NULL;
    ee46:	2400      	movs	r4, #0
    ee48:	e7c6      	b.n	edd8 <recv_thread+0x38>
				net_buf_unref(buf);
    ee4a:	4620      	mov	r0, r4
    ee4c:	f00b fea2 	bl	1ab94 <net_buf_unref>
    ee50:	e7c8      	b.n	ede4 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    ee52:	2200      	movs	r2, #0
	size_t unused = 0;
    ee54:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    ee56:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    ee5a:	d206      	bcs.n	ee6a <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    ee5c:	490f      	ldr	r1, [pc, #60]	; (ee9c <recv_thread+0xfc>)
    ee5e:	5c89      	ldrb	r1, [r1, r2]
    ee60:	29aa      	cmp	r1, #170	; 0xaa
    ee62:	d102      	bne.n	ee6a <recv_thread+0xca>
			unused++;
    ee64:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ee66:	3201      	adds	r2, #1
    ee68:	e7f5      	b.n	ee56 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    ee6a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    ee6e:	2264      	movs	r2, #100	; 0x64
    ee70:	fb02 f201 	mul.w	r2, r2, r1
    ee74:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ee76:	9202      	str	r2, [sp, #8]
    ee78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee7c:	9201      	str	r2, [sp, #4]
    ee7e:	9100      	str	r1, [sp, #0]
    ee80:	4907      	ldr	r1, [pc, #28]	; (eea0 <recv_thread+0x100>)
    ee82:	4808      	ldr	r0, [pc, #32]	; (eea4 <recv_thread+0x104>)
    ee84:	f7f4 f85e 	bl	2f44 <printk>
    ee88:	f01a fa2e 	bl	292e8 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    ee8c:	4b01      	ldr	r3, [pc, #4]	; (ee94 <recv_thread+0xf4>)
    ee8e:	6018      	str	r0, [r3, #0]
    ee90:	e7b3      	b.n	edfa <recv_thread+0x5a>
    ee92:	bf00      	nop
    ee94:	20000adc 	.word	0x20000adc
    ee98:	2000d0ec 	.word	0x2000d0ec
    ee9c:	20004360 	.word	0x20004360
    eea0:	00031078 	.word	0x00031078
    eea4:	00030dc8 	.word	0x00030dc8

0000eea8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    eeaa:	2304      	movs	r3, #4
	while (callee_id--) {
    eeac:	e01d      	b.n	eeea <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    eeae:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    eeb2:	4911      	ldr	r1, [pc, #68]	; (eef8 <mayfly_init+0x50>)
    eeb4:	0065      	lsls	r5, r4, #1
    eeb6:	192b      	adds	r3, r5, r4
    eeb8:	009a      	lsls	r2, r3, #2
    eeba:	0073      	lsls	r3, r6, #1
    eebc:	eb03 0e06 	add.w	lr, r3, r6
    eec0:	ea4f 170e 	mov.w	r7, lr, lsl #4
    eec4:	46be      	mov	lr, r7
    eec6:	443a      	add	r2, r7
    eec8:	440a      	add	r2, r1
    eeca:	4425      	add	r5, r4
    eecc:	00af      	lsls	r7, r5, #2
    eece:	4477      	add	r7, lr
    eed0:	3204      	adds	r2, #4
    eed2:	4439      	add	r1, r7
    eed4:	4b09      	ldr	r3, [pc, #36]	; (eefc <mayfly_init+0x54>)
    eed6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    eeda:	f000 f9f5 	bl	f2c8 <memq_init>
		while (caller_id--) {
    eede:	4623      	mov	r3, r4
    eee0:	1e5c      	subs	r4, r3, #1
    eee2:	b2e4      	uxtb	r4, r4
    eee4:	2b00      	cmp	r3, #0
    eee6:	d1e2      	bne.n	eeae <mayfly_init+0x6>
	while (callee_id--) {
    eee8:	4633      	mov	r3, r6
    eeea:	1e5e      	subs	r6, r3, #1
    eeec:	b2f6      	uxtb	r6, r6
    eeee:	b10b      	cbz	r3, eef4 <mayfly_init+0x4c>
    eef0:	2304      	movs	r3, #4
    eef2:	e7f5      	b.n	eee0 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eef6:	bf00      	nop
    eef8:	20000b60 	.word	0x20000b60
    eefc:	20000ae0 	.word	0x20000ae0

0000ef00 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    ef00:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    ef02:	b1ea      	cbz	r2, ef40 <mayfly_enable+0x40>
    ef04:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    ef06:	0042      	lsls	r2, r0, #1
    ef08:	4402      	add	r2, r0
    ef0a:	0093      	lsls	r3, r2, #2
    ef0c:	004c      	lsls	r4, r1, #1
    ef0e:	440c      	add	r4, r1
    ef10:	0122      	lsls	r2, r4, #4
    ef12:	441a      	add	r2, r3
    ef14:	4b18      	ldr	r3, [pc, #96]	; (ef78 <mayfly_enable+0x78>)
    ef16:	4413      	add	r3, r2
    ef18:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    ef1a:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    ef1c:	429a      	cmp	r2, r3
    ef1e:	d003      	beq.n	ef28 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    ef20:	462a      	mov	r2, r5
    ef22:	f00a f9e8 	bl	192f6 <mayfly_enable_cb>
    ef26:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    ef28:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    ef2c:	00a3      	lsls	r3, r4, #2
    ef2e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    ef32:	0134      	lsls	r4, r6, #4
    ef34:	4423      	add	r3, r4
    ef36:	4c10      	ldr	r4, [pc, #64]	; (ef78 <mayfly_enable+0x78>)
    ef38:	4423      	add	r3, r4
    ef3a:	3201      	adds	r2, #1
    ef3c:	721a      	strb	r2, [r3, #8]
    ef3e:	e7ef      	b.n	ef20 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    ef40:	0042      	lsls	r2, r0, #1
    ef42:	4402      	add	r2, r0
    ef44:	0093      	lsls	r3, r2, #2
    ef46:	004c      	lsls	r4, r1, #1
    ef48:	440c      	add	r4, r1
    ef4a:	0122      	lsls	r2, r4, #4
    ef4c:	441a      	add	r2, r3
    ef4e:	4b0a      	ldr	r3, [pc, #40]	; (ef78 <mayfly_enable+0x78>)
    ef50:	4413      	add	r3, r2
    ef52:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    ef54:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    ef56:	429a      	cmp	r2, r3
    ef58:	d000      	beq.n	ef5c <mayfly_enable+0x5c>
    ef5a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    ef5c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    ef60:	00a3      	lsls	r3, r4, #2
    ef62:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    ef66:	012c      	lsls	r4, r5, #4
    ef68:	4423      	add	r3, r4
    ef6a:	4c03      	ldr	r4, [pc, #12]	; (ef78 <mayfly_enable+0x78>)
    ef6c:	4423      	add	r3, r4
    ef6e:	3201      	adds	r2, #1
    ef70:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    ef72:	f00a f9f7 	bl	19364 <mayfly_pend>
		}
	}
}
    ef76:	e7f0      	b.n	ef5a <mayfly_enable+0x5a>
    ef78:	20000b60 	.word	0x20000b60

0000ef7c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef7e:	4605      	mov	r5, r0
    ef80:	460e      	mov	r6, r1
    ef82:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef84:	b19a      	cbz	r2, efae <mayfly_enqueue+0x32>
    ef86:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef88:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    ef8a:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ef8c:	7823      	ldrb	r3, [r4, #0]
    ef8e:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    ef90:	f013 0303 	ands.w	r3, r3, #3
    ef94:	d032      	beq.n	effc <mayfly_enqueue+0x80>
		if (chain) {
    ef96:	b371      	cbz	r1, eff6 <mayfly_enqueue+0x7a>
			if (state != 1) {
    ef98:	2b01      	cmp	r3, #1
    ef9a:	d04c      	beq.n	f036 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ef9c:	3201      	adds	r2, #1
    ef9e:	b2d2      	uxtb	r2, r2
    efa0:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    efa2:	4631      	mov	r1, r6
    efa4:	4628      	mov	r0, r5
    efa6:	f00a f9dd 	bl	19364 <mayfly_pend>

				return 0;
    efaa:	2000      	movs	r0, #0
    efac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    efae:	f00a f9c6 	bl	1933e <mayfly_prio_is_equal>
    efb2:	b908      	cbnz	r0, efb8 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    efb4:	2101      	movs	r1, #1
    efb6:	e7e7      	b.n	ef88 <mayfly_enqueue+0xc>
    efb8:	4631      	mov	r1, r6
    efba:	4628      	mov	r0, r5
    efbc:	f00a f9ad 	bl	1931a <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    efc0:	b1b8      	cbz	r0, eff2 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    efc2:	481e      	ldr	r0, [pc, #120]	; (f03c <mayfly_enqueue+0xc0>)
    efc4:	0069      	lsls	r1, r5, #1
    efc6:	194a      	adds	r2, r1, r5
    efc8:	0093      	lsls	r3, r2, #2
    efca:	0072      	lsls	r2, r6, #1
    efcc:	eb02 0e06 	add.w	lr, r2, r6
    efd0:	ea4f 170e 	mov.w	r7, lr, lsl #4
    efd4:	46be      	mov	lr, r7
    efd6:	443b      	add	r3, r7
    efd8:	4403      	add	r3, r0
    efda:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    efdc:	194b      	adds	r3, r1, r5
    efde:	0099      	lsls	r1, r3, #2
    efe0:	4471      	add	r1, lr
    efe2:	4408      	add	r0, r1
    efe4:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    efe6:	429f      	cmp	r7, r3
    efe8:	d001      	beq.n	efee <mayfly_enqueue+0x72>
    efea:	2101      	movs	r1, #1
    efec:	e7cc      	b.n	ef88 <mayfly_enqueue+0xc>
    efee:	2100      	movs	r1, #0
    eff0:	e7ca      	b.n	ef88 <mayfly_enqueue+0xc>
    eff2:	2101      	movs	r1, #1
    eff4:	e7c8      	b.n	ef88 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    eff6:	1c93      	adds	r3, r2, #2
    eff8:	b2db      	uxtb	r3, r3
    effa:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    effc:	b1b1      	cbz	r1, f02c <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    effe:	3201      	adds	r2, #1
    f000:	b2d2      	uxtb	r2, r2
    f002:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    f004:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    f008:	009a      	lsls	r2, r3, #2
    f00a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f00e:	010b      	lsls	r3, r1, #4
    f010:	441a      	add	r2, r3
    f012:	4b0a      	ldr	r3, [pc, #40]	; (f03c <mayfly_enqueue+0xc0>)
    f014:	441a      	add	r2, r3
    f016:	3204      	adds	r2, #4
    f018:	6861      	ldr	r1, [r4, #4]
    f01a:	4620      	mov	r0, r4
    f01c:	f000 f957 	bl	f2ce <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f020:	4631      	mov	r1, r6
    f022:	4628      	mov	r0, r5
    f024:	f00a f99e 	bl	19364 <mayfly_pend>

	return 0;
    f028:	2000      	movs	r0, #0
    f02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    f02c:	68e3      	ldr	r3, [r4, #12]
    f02e:	68a0      	ldr	r0, [r4, #8]
    f030:	4798      	blx	r3
		return 0;
    f032:	2000      	movs	r0, #0
    f034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    f036:	2001      	movs	r0, #1
}
    f038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f03a:	bf00      	nop
    f03c:	20000b60 	.word	0x20000b60

0000f040 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f044:	b085      	sub	sp, #20
    f046:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    f048:	2304      	movs	r3, #4
	u8_t enable = 0;
    f04a:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    f04e:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f052:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f056:	fa5f f989 	uxtb.w	r9, r9
    f05a:	2b00      	cmp	r3, #0
    f05c:	f000 809b 	beq.w	f196 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f060:	aa04      	add	r2, sp, #16
    f062:	2300      	movs	r3, #0
    f064:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f068:	4657      	mov	r7, sl
    f06a:	464e      	mov	r6, r9
    f06c:	4850      	ldr	r0, [pc, #320]	; (f1b0 <mayfly_run+0x170>)
    f06e:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f072:	4449      	add	r1, r9
    f074:	008b      	lsls	r3, r1, #2
    f076:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f07a:	4451      	add	r1, sl
    f07c:	010c      	lsls	r4, r1, #4
    f07e:	4423      	add	r3, r4
    f080:	18c4      	adds	r4, r0, r3
    f082:	58c1      	ldr	r1, [r0, r3]
    f084:	6860      	ldr	r0, [r4, #4]
    f086:	f000 f929 	bl	f2dc <memq_peek>
    f08a:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f08c:	e017      	b.n	f0be <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f08e:	3a01      	subs	r2, #1
    f090:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f092:	9b03      	ldr	r3, [sp, #12]
    f094:	68da      	ldr	r2, [r3, #12]
    f096:	6898      	ldr	r0, [r3, #8]
    f098:	4790      	blx	r2
    f09a:	e01b      	b.n	f0d4 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f09c:	4944      	ldr	r1, [pc, #272]	; (f1b0 <mayfly_run+0x170>)
    f09e:	0072      	lsls	r2, r6, #1
    f0a0:	4432      	add	r2, r6
    f0a2:	0093      	lsls	r3, r2, #2
    f0a4:	007a      	lsls	r2, r7, #1
    f0a6:	443a      	add	r2, r7
    f0a8:	0110      	lsls	r0, r2, #4
    f0aa:	4403      	add	r3, r0
    f0ac:	18c8      	adds	r0, r1, r3
    f0ae:	aa03      	add	r2, sp, #12
    f0b0:	58c9      	ldr	r1, [r1, r3]
    f0b2:	6840      	ldr	r0, [r0, #4]
    f0b4:	f000 f912 	bl	f2dc <memq_peek>
    f0b8:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f0ba:	2c01      	cmp	r4, #1
    f0bc:	d026      	beq.n	f10c <mayfly_run+0xcc>
		while (link) {
    f0be:	f1b8 0f00 	cmp.w	r8, #0
    f0c2:	d030      	beq.n	f126 <mayfly_run+0xe6>
			req = m->_req;
    f0c4:	9b03      	ldr	r3, [sp, #12]
    f0c6:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f0c8:	785a      	ldrb	r2, [r3, #1]
    f0ca:	1aa4      	subs	r4, r4, r2
    f0cc:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f0d0:	2c01      	cmp	r4, #1
    f0d2:	d0dc      	beq.n	f08e <mayfly_run+0x4e>
			req = m->_req;
    f0d4:	9b03      	ldr	r3, [sp, #12]
    f0d6:	781d      	ldrb	r5, [r3, #0]
    f0d8:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f0da:	785b      	ldrb	r3, [r3, #1]
    f0dc:	1aeb      	subs	r3, r5, r3
    f0de:	f003 0303 	and.w	r3, r3, #3
    f0e2:	2b01      	cmp	r3, #1
    f0e4:	d0da      	beq.n	f09c <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f0e6:	0072      	lsls	r2, r6, #1
    f0e8:	4432      	add	r2, r6
    f0ea:	0093      	lsls	r3, r2, #2
    f0ec:	0079      	lsls	r1, r7, #1
    f0ee:	4439      	add	r1, r7
    f0f0:	010a      	lsls	r2, r1, #4
    f0f2:	441a      	add	r2, r3
    f0f4:	4b2e      	ldr	r3, [pc, #184]	; (f1b0 <mayfly_run+0x170>)
    f0f6:	4413      	add	r3, r2
    f0f8:	2200      	movs	r2, #0
    f0fa:	4619      	mov	r1, r3
    f0fc:	6858      	ldr	r0, [r3, #4]
    f0fe:	f000 f8f6 	bl	f2ee <memq_dequeue>
				m->_link = link;
    f102:	9b03      	ldr	r3, [sp, #12]
    f104:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f108:	705d      	strb	r5, [r3, #1]
    f10a:	e7c7      	b.n	f09c <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f10c:	f1b9 0f00 	cmp.w	r9, #0
    f110:	d006      	beq.n	f120 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f112:	4651      	mov	r1, sl
    f114:	4650      	mov	r0, sl
    f116:	f00a f925 	bl	19364 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f11a:	b005      	add	sp, #20
    f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f120:	2800      	cmp	r0, #0
    f122:	d0cc      	beq.n	f0be <mayfly_run+0x7e>
    f124:	e7f5      	b.n	f112 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f126:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f12a:	444a      	add	r2, r9
    f12c:	0093      	lsls	r3, r2, #2
    f12e:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f132:	4451      	add	r1, sl
    f134:	010a      	lsls	r2, r1, #4
    f136:	441a      	add	r2, r3
    f138:	4b1d      	ldr	r3, [pc, #116]	; (f1b0 <mayfly_run+0x170>)
    f13a:	4413      	add	r3, r2
    f13c:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f13e:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f140:	4299      	cmp	r1, r3
    f142:	d00b      	beq.n	f15c <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f144:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f148:	0093      	lsls	r3, r2, #2
    f14a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f14e:	0102      	lsls	r2, r0, #4
    f150:	4413      	add	r3, r2
    f152:	4a17      	ldr	r2, [pc, #92]	; (f1b0 <mayfly_run+0x170>)
    f154:	4413      	add	r3, r2
    f156:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f158:	2301      	movs	r3, #1
    f15a:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f15c:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f160:	444a      	add	r2, r9
    f162:	0093      	lsls	r3, r2, #2
    f164:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f168:	4451      	add	r1, sl
    f16a:	010a      	lsls	r2, r1, #4
    f16c:	441a      	add	r2, r3
    f16e:	4b10      	ldr	r3, [pc, #64]	; (f1b0 <mayfly_run+0x170>)
    f170:	4413      	add	r3, r2
    f172:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f174:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f176:	4299      	cmp	r1, r3
    f178:	d00b      	beq.n	f192 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f17a:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f17e:	0093      	lsls	r3, r2, #2
    f180:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f184:	0102      	lsls	r2, r0, #4
    f186:	4413      	add	r3, r2
    f188:	4a09      	ldr	r2, [pc, #36]	; (f1b0 <mayfly_run+0x170>)
    f18a:	4413      	add	r3, r2
    f18c:	7259      	strb	r1, [r3, #9]
			enable = 1;
    f18e:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    f192:	464b      	mov	r3, r9
    f194:	e75d      	b.n	f052 <mayfly_run+0x12>
	if (disable && !enable) {
    f196:	9b01      	ldr	r3, [sp, #4]
    f198:	2b00      	cmp	r3, #0
    f19a:	d0be      	beq.n	f11a <mayfly_run+0xda>
    f19c:	f1bb 0f00 	cmp.w	fp, #0
    f1a0:	d1bb      	bne.n	f11a <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f1a2:	2200      	movs	r2, #0
    f1a4:	4651      	mov	r1, sl
    f1a6:	4650      	mov	r0, sl
    f1a8:	f00a f8a5 	bl	192f6 <mayfly_enable_cb>
    f1ac:	e7b5      	b.n	f11a <mayfly_run+0xda>
    f1ae:	bf00      	nop
    f1b0:	20000b60 	.word	0x20000b60

0000f1b4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    f1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1b6:	b083      	sub	sp, #12
    f1b8:	4607      	mov	r7, r0
    f1ba:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    f1bc:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f1be:	1dfb      	adds	r3, r7, #7
    f1c0:	f023 0303 	bic.w	r3, r3, #3
    f1c4:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f1c6:	460e      	mov	r6, r1
    f1c8:	3a01      	subs	r2, #1
    f1ca:	b295      	uxth	r5, r2
    f1cc:	2204      	movs	r2, #4
    f1ce:	2100      	movs	r1, #0
    f1d0:	fb05 7000 	mla	r0, r5, r0, r7
    f1d4:	f01a fffc 	bl	2a1d0 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    f1d8:	e00b      	b.n	f1f2 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    f1da:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    f1de:	443b      	add	r3, r7
    f1e0:	a902      	add	r1, sp, #8
    f1e2:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    f1e6:	2204      	movs	r2, #4
    f1e8:	fb04 7006 	mla	r0, r4, r6, r7
    f1ec:	f7f1 f868 	bl	2c0 <memcpy>
	while (mem_count--) {
    f1f0:	4625      	mov	r5, r4
    f1f2:	1e6c      	subs	r4, r5, #1
    f1f4:	b2a4      	uxth	r4, r4
    f1f6:	2d00      	cmp	r5, #0
    f1f8:	d1ef      	bne.n	f1da <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    f1fa:	b003      	add	sp, #12
    f1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f1fe <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f1fe:	b570      	push	{r4, r5, r6, lr}
    f200:	b082      	sub	sp, #8
	if (*mem_head) {
    f202:	6805      	ldr	r5, [r0, #0]
    f204:	b1a5      	cbz	r5, f230 <mem_acquire+0x32>
    f206:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f208:	1deb      	adds	r3, r5, #7
    f20a:	f023 0303 	bic.w	r3, r3, #3
    f20e:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    f210:	3b01      	subs	r3, #1
    f212:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f214:	2204      	movs	r2, #4
    f216:	4629      	mov	r1, r5
    f218:	eb0d 0002 	add.w	r0, sp, r2
    f21c:	f7f1 f850 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f220:	9b01      	ldr	r3, [sp, #4]
    f222:	b11b      	cbz	r3, f22c <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    f224:	3307      	adds	r3, #7
    f226:	f023 0303 	bic.w	r3, r3, #3
    f22a:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    f22c:	9b01      	ldr	r3, [sp, #4]
    f22e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    f230:	4628      	mov	r0, r5
    f232:	b002      	add	sp, #8
    f234:	bd70      	pop	{r4, r5, r6, pc}

0000f236 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f236:	b570      	push	{r4, r5, r6, lr}
    f238:	4606      	mov	r6, r0
    f23a:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f23c:	680b      	ldr	r3, [r1, #0]
    f23e:	b183      	cbz	r3, f262 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f240:	3307      	adds	r3, #7
    f242:	f023 0303 	bic.w	r3, r3, #3
    f246:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    f248:	3401      	adds	r4, #1
    f24a:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    f24c:	2204      	movs	r2, #4
    f24e:	4629      	mov	r1, r5
    f250:	4630      	mov	r0, r6
    f252:	f7f1 f835 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    f256:	1df3      	adds	r3, r6, #7
    f258:	f023 0303 	bic.w	r3, r3, #3
    f25c:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    f25e:	602e      	str	r6, [r5, #0]
    f260:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    f262:	2400      	movs	r4, #0
    f264:	e7f0      	b.n	f248 <mem_release+0x12>

0000f266 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    f266:	4603      	mov	r3, r0
    f268:	b120      	cbz	r0, f274 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    f26a:	3307      	adds	r3, #7
    f26c:	f023 0303 	bic.w	r3, r3, #3
    f270:	8818      	ldrh	r0, [r3, #0]
    f272:	4770      	bx	lr
	u16_t free_count = 0;
    f274:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    f276:	4770      	bx	lr

0000f278 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    f278:	fb02 0001 	mla	r0, r2, r1, r0
    f27c:	4770      	bx	lr

0000f27e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    f27e:	1a40      	subs	r0, r0, r1
    f280:	b280      	uxth	r0, r0
}
    f282:	fbb0 f0f2 	udiv	r0, r0, r2
    f286:	4770      	bx	lr

0000f288 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    f288:	4411      	add	r1, r2
	while (len--) {
    f28a:	e004      	b.n	f296 <mem_rcopy+0xe>
		*dst++ = *--src;
    f28c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    f290:	7002      	strb	r2, [r0, #0]
	while (len--) {
    f292:	461a      	mov	r2, r3
		*dst++ = *--src;
    f294:	3001      	adds	r0, #1
	while (len--) {
    f296:	1e53      	subs	r3, r2, #1
    f298:	b29b      	uxth	r3, r3
    f29a:	2a00      	cmp	r2, #0
    f29c:	d1f6      	bne.n	f28c <mem_rcopy+0x4>
	}
}
    f29e:	4770      	bx	lr

0000f2a0 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    f2a0:	1e4b      	subs	r3, r1, #1
    f2a2:	b29b      	uxth	r3, r3
    f2a4:	b171      	cbz	r1, f2c4 <mem_nz+0x24>
{
    f2a6:	b410      	push	{r4}
		if (*src++) {
    f2a8:	1c44      	adds	r4, r0, #1
    f2aa:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    f2ac:	4619      	mov	r1, r3
		if (*src++) {
    f2ae:	b93a      	cbnz	r2, f2c0 <mem_nz+0x20>
    f2b0:	4620      	mov	r0, r4
	while (len--) {
    f2b2:	3b01      	subs	r3, #1
    f2b4:	b29b      	uxth	r3, r3
    f2b6:	2900      	cmp	r1, #0
    f2b8:	d1f6      	bne.n	f2a8 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    f2ba:	2000      	movs	r0, #0
}
    f2bc:	bc10      	pop	{r4}
    f2be:	4770      	bx	lr
			return 1;
    f2c0:	2001      	movs	r0, #1
    f2c2:	e7fb      	b.n	f2bc <mem_nz+0x1c>
	return 0;
    f2c4:	2000      	movs	r0, #0
}
    f2c6:	4770      	bx	lr

0000f2c8 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    f2c8:	6010      	str	r0, [r2, #0]
    f2ca:	6008      	str	r0, [r1, #0]

	return link;
}
    f2cc:	4770      	bx	lr

0000f2ce <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    f2ce:	6813      	ldr	r3, [r2, #0]
    f2d0:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    f2d2:	6813      	ldr	r3, [r2, #0]
    f2d4:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    f2d6:	6011      	str	r1, [r2, #0]

	return link;
}
    f2d8:	4608      	mov	r0, r1
    f2da:	4770      	bx	lr

0000f2dc <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    f2dc:	4281      	cmp	r1, r0
    f2de:	d004      	beq.n	f2ea <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    f2e0:	b10a      	cbz	r2, f2e6 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    f2e2:	684b      	ldr	r3, [r1, #4]
    f2e4:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    f2e6:	4608      	mov	r0, r1
    f2e8:	4770      	bx	lr
		return 0;
    f2ea:	2100      	movs	r1, #0
    f2ec:	e7fb      	b.n	f2e6 <memq_peek+0xa>

0000f2ee <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    f2ee:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f2f0:	4283      	cmp	r3, r0
    f2f2:	d006      	beq.n	f302 <memq_dequeue+0x14>
	if (mem) {
    f2f4:	b10a      	cbz	r2, f2fa <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    f2f6:	6858      	ldr	r0, [r3, #4]
    f2f8:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    f2fa:	681a      	ldr	r2, [r3, #0]
    f2fc:	600a      	str	r2, [r1, #0]

	return link;
}
    f2fe:	4618      	mov	r0, r3
    f300:	4770      	bx	lr
		return 0;
    f302:	2300      	movs	r3, #0
    f304:	e7f9      	b.n	f2fa <memq_dequeue+0xc>

0000f306 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    f306:	b410      	push	{r4}
	u8_t one_count = 0;
    f308:	2200      	movs	r2, #0

	while (octets_len--) {
    f30a:	e008      	b.n	f31e <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    f30c:	1e59      	subs	r1, r3, #1
    f30e:	b249      	sxtb	r1, r1
    f310:	400b      	ands	r3, r1
			one_count++;
    f312:	3201      	adds	r2, #1
    f314:	b2d2      	uxtb	r2, r2
		while (bite) {
    f316:	2b00      	cmp	r3, #0
    f318:	d1f8      	bne.n	f30c <util_ones_count_get+0x6>
		}
		octets++;
    f31a:	3001      	adds	r0, #1
	while (octets_len--) {
    f31c:	4621      	mov	r1, r4
    f31e:	1e4b      	subs	r3, r1, #1
    f320:	b2dc      	uxtb	r4, r3
    f322:	b109      	cbz	r1, f328 <util_ones_count_get+0x22>
		bite = *octets;
    f324:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    f326:	e7f6      	b.n	f316 <util_ones_count_get+0x10>
	}

	return one_count;
}
    f328:	4610      	mov	r0, r2
    f32a:	bc10      	pop	{r4}
    f32c:	4770      	bx	lr
	...

0000f330 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f330:	4b05      	ldr	r3, [pc, #20]	; (f348 <cntr_init+0x18>)
    f332:	2200      	movs	r2, #0
    f334:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    f338:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    f33c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    f340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f344:	4770      	bx	lr
    f346:	bf00      	nop
    f348:	4000b000 	.word	0x4000b000

0000f34c <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    f34c:	4a05      	ldr	r2, [pc, #20]	; (f364 <cntr_start+0x18>)
    f34e:	7813      	ldrb	r3, [r2, #0]
    f350:	1c59      	adds	r1, r3, #1
    f352:	7011      	strb	r1, [r2, #0]
    f354:	b923      	cbnz	r3, f360 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    f356:	2201      	movs	r2, #1
    f358:	4b03      	ldr	r3, [pc, #12]	; (f368 <cntr_start+0x1c>)
    f35a:	601a      	str	r2, [r3, #0]

	return 0;
    f35c:	2000      	movs	r0, #0
    f35e:	4770      	bx	lr
		return 1;
    f360:	2001      	movs	r0, #1
}
    f362:	4770      	bx	lr
    f364:	20000c20 	.word	0x20000c20
    f368:	4000b000 	.word	0x4000b000

0000f36c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f36c:	4b0a      	ldr	r3, [pc, #40]	; (f398 <cntr_stop+0x2c>)
    f36e:	781b      	ldrb	r3, [r3, #0]
    f370:	b14b      	cbz	r3, f386 <cntr_stop+0x1a>

	if (--_refcount) {
    f372:	3b01      	subs	r3, #1
    f374:	b2db      	uxtb	r3, r3
    f376:	4a08      	ldr	r2, [pc, #32]	; (f398 <cntr_stop+0x2c>)
    f378:	7013      	strb	r3, [r2, #0]
    f37a:	b953      	cbnz	r3, f392 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    f37c:	2201      	movs	r2, #1
    f37e:	4b07      	ldr	r3, [pc, #28]	; (f39c <cntr_stop+0x30>)
    f380:	605a      	str	r2, [r3, #4]

	return 0;
    f382:	2000      	movs	r0, #0
    f384:	4770      	bx	lr
	LL_ASSERT(_refcount);
    f386:	4040      	eors	r0, r0
    f388:	f380 8811 	msr	BASEPRI, r0
    f38c:	f04f 0004 	mov.w	r0, #4
    f390:	df02      	svc	2
		return 1;
    f392:	2001      	movs	r0, #1
}
    f394:	4770      	bx	lr
    f396:	bf00      	nop
    f398:	20000c20 	.word	0x20000c20
    f39c:	4000b000 	.word	0x4000b000

0000f3a0 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    f3a0:	4b01      	ldr	r3, [pc, #4]	; (f3a8 <cntr_cnt_get+0x8>)
    f3a2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    f3a6:	4770      	bx	lr
    f3a8:	4000b000 	.word	0x4000b000

0000f3ac <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    f3ac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f3b0:	4b01      	ldr	r3, [pc, #4]	; (f3b8 <cntr_cmp_set+0xc>)
    f3b2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f3b6:	4770      	bx	lr
    f3b8:	4000b000 	.word	0x4000b000

0000f3bc <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f3bc:	e009      	b.n	f3d2 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    f3be:	4b15      	ldr	r3, [pc, #84]	; (f414 <do_ecb+0x58>)
    f3c0:	2201      	movs	r2, #1
    f3c2:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f3c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f3c8:	b91b      	cbnz	r3, f3d2 <do_ecb+0x16>
    f3ca:	4b12      	ldr	r3, [pc, #72]	; (f414 <do_ecb+0x58>)
    f3cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f3d0:	b9d3      	cbnz	r3, f408 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    f3d2:	4b10      	ldr	r3, [pc, #64]	; (f414 <do_ecb+0x58>)
    f3d4:	2201      	movs	r2, #1
    f3d6:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f3d8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f3dc:	2100      	movs	r1, #0
    f3de:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f3e2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    f3e6:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f3e8:	4b0a      	ldr	r3, [pc, #40]	; (f414 <do_ecb+0x58>)
    f3ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d1e5      	bne.n	f3be <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f3f2:	4b08      	ldr	r3, [pc, #32]	; (f414 <do_ecb+0x58>)
    f3f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f3f8:	2b00      	cmp	r3, #0
    f3fa:	d1e0      	bne.n	f3be <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f3fc:	4b05      	ldr	r3, [pc, #20]	; (f414 <do_ecb+0x58>)
    f3fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f402:	2b00      	cmp	r3, #0
    f404:	d1f0      	bne.n	f3e8 <do_ecb+0x2c>
    f406:	e7da      	b.n	f3be <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    f408:	2200      	movs	r2, #0
    f40a:	4b02      	ldr	r3, [pc, #8]	; (f414 <do_ecb+0x58>)
    f40c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f410:	4770      	bx	lr
    f412:	bf00      	nop
    f414:	4000e000 	.word	0x4000e000

0000f418 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    f418:	b570      	push	{r4, r5, r6, lr}
    f41a:	b08c      	sub	sp, #48	; 0x30
    f41c:	460e      	mov	r6, r1
    f41e:	4615      	mov	r5, r2
    f420:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    f422:	2210      	movs	r2, #16
    f424:	4601      	mov	r1, r0
    f426:	4668      	mov	r0, sp
    f428:	f7ff ff2e 	bl	f288 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    f42c:	2210      	movs	r2, #16
    f42e:	4631      	mov	r1, r6
    f430:	eb0d 0002 	add.w	r0, sp, r2
    f434:	f7ff ff28 	bl	f288 <mem_rcopy>

	do_ecb(&ecb);
    f438:	4668      	mov	r0, sp
    f43a:	f7ff ffbf 	bl	f3bc <do_ecb>

	if (cipher_text_le) {
    f43e:	b125      	cbz	r5, f44a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    f440:	2210      	movs	r2, #16
    f442:	a908      	add	r1, sp, #32
    f444:	4628      	mov	r0, r5
    f446:	f7ff ff1f 	bl	f288 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    f44a:	b124      	cbz	r4, f456 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    f44c:	2210      	movs	r2, #16
    f44e:	a908      	add	r1, sp, #32
    f450:	4620      	mov	r0, r4
    f452:	f7f0 ff35 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    f456:	b00c      	add	sp, #48	; 0x30
    f458:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f45c <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    f45c:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    f45e:	4b02      	ldr	r3, [pc, #8]	; (f468 <isr_radio+0xc>)
    f460:	681b      	ldr	r3, [r3, #0]
    f462:	b103      	cbz	r3, f466 <isr_radio+0xa>
		sfp_radio_isr();
    f464:	4798      	blx	r3
    f466:	bd08      	pop	{r3, pc}
    f468:	20000e40 	.word	0x20000e40

0000f46c <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    f46c:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    f46e:	4b07      	ldr	r3, [pc, #28]	; (f48c <radio_isr_set+0x20>)
    f470:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    f472:	2210      	movs	r2, #16
    f474:	4b06      	ldr	r3, [pc, #24]	; (f490 <radio_isr_set+0x24>)
    f476:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f47a:	2202      	movs	r2, #2
    f47c:	4b05      	ldr	r3, [pc, #20]	; (f494 <radio_isr_set+0x28>)
    f47e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    f482:	2001      	movs	r0, #1
    f484:	f018 fa3c 	bl	27900 <_arch_irq_enable>
    f488:	bd08      	pop	{r3, pc}
    f48a:	bf00      	nop
    f48c:	20000e40 	.word	0x20000e40
    f490:	40001000 	.word	0x40001000
    f494:	e000e100 	.word	0xe000e100

0000f498 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    f498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4a0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    f4a4:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    f4a8:	2100      	movs	r1, #0
    f4aa:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    f4ae:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    f4b2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    f4b6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    f4ba:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    f4be:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    f4c2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    f4c6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    f4ca:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    f4ce:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    f4d2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    f4d6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    f4da:	4770      	bx	lr

0000f4dc <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    f4dc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f4de:	2001      	movs	r0, #1
    f4e0:	f018 fa1c 	bl	2791c <_arch_irq_disable>

	NRF_RADIO->POWER =
    f4e4:	4b03      	ldr	r3, [pc, #12]	; (f4f4 <radio_reset+0x18>)
    f4e6:	2200      	movs	r2, #0
    f4e8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    f4ec:	2201      	movs	r2, #1
    f4ee:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f4f2:	bd08      	pop	{r3, pc}
    f4f4:	40001000 	.word	0x40001000

0000f4f8 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    f4f8:	2802      	cmp	r0, #2
    f4fa:	d106      	bne.n	f50a <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    f4fc:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f4fe:	f003 030f 	and.w	r3, r3, #15
    f502:	4a03      	ldr	r2, [pc, #12]	; (f510 <radio_phy_set+0x18>)
    f504:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    f508:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f50a:	2303      	movs	r3, #3
    f50c:	e7f7      	b.n	f4fe <radio_phy_set+0x6>
    f50e:	bf00      	nop
    f510:	40001000 	.word	0x40001000

0000f514 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    f514:	4b01      	ldr	r3, [pc, #4]	; (f51c <radio_tx_power_set+0x8>)
    f516:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    f51a:	4770      	bx	lr
    f51c:	40001000 	.word	0x40001000

0000f520 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    f520:	4b01      	ldr	r3, [pc, #4]	; (f528 <radio_freq_chan_set+0x8>)
    f522:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    f526:	4770      	bx	lr
    f528:	40001000 	.word	0x40001000

0000f52c <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    f52c:	4b07      	ldr	r3, [pc, #28]	; (f54c <radio_whiten_iv_set+0x20>)
    f52e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f532:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f536:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f53a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f53e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f542:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f546:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    f54a:	4770      	bx	lr
    f54c:	40001000 	.word	0x40001000

0000f550 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    f550:	4a0a      	ldr	r2, [pc, #40]	; (f57c <radio_aa_set+0x2c>)
    f552:	2300      	movs	r3, #0
    f554:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    f558:	2301      	movs	r3, #1
    f55a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    f55e:	78c3      	ldrb	r3, [r0, #3]
    f560:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f564:	7881      	ldrb	r1, [r0, #2]
    f566:	7843      	ldrb	r3, [r0, #1]
    f568:	041b      	lsls	r3, r3, #16
    f56a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f56e:	7801      	ldrb	r1, [r0, #0]
    f570:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f574:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    f578:	4770      	bx	lr
    f57a:	bf00      	nop
    f57c:	40001000 	.word	0x40001000

0000f580 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    f580:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    f582:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    f586:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    f58a:	2a02      	cmp	r2, #2
    f58c:	d020      	beq.n	f5d0 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f58e:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    f590:	b10c      	cbz	r4, f596 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f596:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f59a:	f1c0 0008 	rsb	r0, r0, #8
    f59e:	0400      	lsls	r0, r0, #16
    f5a0:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    f5a4:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    f5a6:	4303      	orrs	r3, r0
    f5a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f5ac:	4a0a      	ldr	r2, [pc, #40]	; (f5d8 <radio_pkt_configure+0x58>)
    f5ae:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f5b2:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f5b6:	4b09      	ldr	r3, [pc, #36]	; (f5dc <radio_pkt_configure+0x5c>)
    f5b8:	4003      	ands	r3, r0
    f5ba:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f5be:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f5c2:	4319      	orrs	r1, r3
    f5c4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    f5c8:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    f5cc:	bc10      	pop	{r4}
    f5ce:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    f5d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f5d4:	e7dc      	b.n	f590 <radio_pkt_configure+0x10>
    f5d6:	bf00      	nop
    f5d8:	40001000 	.word	0x40001000
    f5dc:	fef80000 	.word	0xfef80000

0000f5e0 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f5e0:	4b01      	ldr	r3, [pc, #4]	; (f5e8 <radio_pkt_rx_set+0x8>)
    f5e2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f5e6:	4770      	bx	lr
    f5e8:	40001000 	.word	0x40001000

0000f5ec <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    f5ec:	4b01      	ldr	r3, [pc, #4]	; (f5f4 <radio_pkt_tx_set+0x8>)
    f5ee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f5f2:	4770      	bx	lr
    f5f4:	40001000 	.word	0x40001000

0000f5f8 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5f8:	208c      	movs	r0, #140	; 0x8c
    f5fa:	4770      	bx	lr

0000f5fc <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5fc:	2001      	movs	r0, #1
    f5fe:	4770      	bx	lr

0000f600 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f600:	208c      	movs	r0, #140	; 0x8c
    f602:	4770      	bx	lr

0000f604 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    f604:	2802      	cmp	r0, #2
    f606:	d101      	bne.n	f60c <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    f608:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f60a:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    f60c:	200a      	movs	r0, #10
    f60e:	4770      	bx	lr

0000f610 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    f610:	2201      	movs	r2, #1
    f612:	4b01      	ldr	r3, [pc, #4]	; (f618 <radio_rx_enable+0x8>)
    f614:	605a      	str	r2, [r3, #4]
    f616:	4770      	bx	lr
    f618:	40001000 	.word	0x40001000

0000f61c <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    f61c:	2201      	movs	r2, #1
    f61e:	4b01      	ldr	r3, [pc, #4]	; (f624 <radio_tx_enable+0x8>)
    f620:	601a      	str	r2, [r3, #0]
    f622:	4770      	bx	lr
    f624:	40001000 	.word	0x40001000

0000f628 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    f628:	4b03      	ldr	r3, [pc, #12]	; (f638 <radio_disable+0x10>)
    f62a:	2200      	movs	r2, #0
    f62c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    f630:	2201      	movs	r2, #1
    f632:	611a      	str	r2, [r3, #16]
    f634:	4770      	bx	lr
    f636:	bf00      	nop
    f638:	40001000 	.word	0x40001000

0000f63c <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    f63c:	4b06      	ldr	r3, [pc, #24]	; (f658 <radio_status_reset+0x1c>)
    f63e:	2200      	movs	r2, #0
    f640:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f644:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f648:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    f64c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f650:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f654:	4770      	bx	lr
    f656:	bf00      	nop
    f658:	40001000 	.word	0x40001000

0000f65c <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    f65c:	4b03      	ldr	r3, [pc, #12]	; (f66c <radio_is_ready+0x10>)
    f65e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f662:	3000      	adds	r0, #0
    f664:	bf18      	it	ne
    f666:	2001      	movne	r0, #1
    f668:	4770      	bx	lr
    f66a:	bf00      	nop
    f66c:	40001000 	.word	0x40001000

0000f670 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    f670:	4b03      	ldr	r3, [pc, #12]	; (f680 <radio_is_done+0x10>)
    f672:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f676:	3000      	adds	r0, #0
    f678:	bf18      	it	ne
    f67a:	2001      	movne	r0, #1
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	40001000 	.word	0x40001000

0000f684 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    f684:	4b03      	ldr	r3, [pc, #12]	; (f694 <radio_is_idle+0x10>)
    f686:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f68a:	fab0 f080 	clz	r0, r0
    f68e:	0940      	lsrs	r0, r0, #5
    f690:	4770      	bx	lr
    f692:	bf00      	nop
    f694:	40001000 	.word	0x40001000

0000f698 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    f698:	4b04      	ldr	r3, [pc, #16]	; (f6ac <radio_crc_configure+0x14>)
    f69a:	f240 1203 	movw	r2, #259	; 0x103
    f69e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    f6a2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f6a6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    f6aa:	4770      	bx	lr
    f6ac:	40001000 	.word	0x40001000

0000f6b0 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    f6b0:	4b03      	ldr	r3, [pc, #12]	; (f6c0 <radio_crc_is_valid+0x10>)
    f6b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f6b6:	3000      	adds	r0, #0
    f6b8:	bf18      	it	ne
    f6ba:	2001      	movne	r0, #1
    f6bc:	4770      	bx	lr
    f6be:	bf00      	nop
    f6c0:	40001000 	.word	0x40001000

0000f6c4 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    f6c4:	4800      	ldr	r0, [pc, #0]	; (f6c8 <radio_pkt_empty_get+0x4>)
    f6c6:	4770      	bx	lr
    f6c8:	20000d34 	.word	0x20000d34

0000f6cc <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    f6cc:	4800      	ldr	r0, [pc, #0]	; (f6d0 <radio_pkt_scratch_get+0x4>)
    f6ce:	4770      	bx	lr
    f6d0:	20000d38 	.word	0x20000d38

0000f6d4 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f6d4:	220b      	movs	r2, #11
    f6d6:	4b02      	ldr	r3, [pc, #8]	; (f6e0 <radio_switch_complete_and_rx+0xc>)
    f6d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f6dc:	4770      	bx	lr
    f6de:	bf00      	nop
    f6e0:	40001000 	.word	0x40001000

0000f6e4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f6e4:	2207      	movs	r2, #7
    f6e6:	4b02      	ldr	r3, [pc, #8]	; (f6f0 <radio_switch_complete_and_tx+0xc>)
    f6e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f6ec:	4770      	bx	lr
    f6ee:	bf00      	nop
    f6f0:	40001000 	.word	0x40001000

0000f6f4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f6f4:	2203      	movs	r2, #3
    f6f6:	4b02      	ldr	r3, [pc, #8]	; (f700 <radio_switch_complete_and_disable+0xc>)
    f6f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f6fc:	4770      	bx	lr
    f6fe:	bf00      	nop
    f700:	40001000 	.word	0x40001000

0000f704 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f704:	4a03      	ldr	r2, [pc, #12]	; (f714 <radio_rssi_measure+0x10>)
    f706:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f70a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f70e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    f712:	4770      	bx	lr
    f714:	40001000 	.word	0x40001000

0000f718 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f718:	4b01      	ldr	r3, [pc, #4]	; (f720 <radio_rssi_get+0x8>)
    f71a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f71e:	4770      	bx	lr
    f720:	40001000 	.word	0x40001000

0000f724 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f724:	2200      	movs	r2, #0
    f726:	4b02      	ldr	r3, [pc, #8]	; (f730 <radio_rssi_status_reset+0xc>)
    f728:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    f72c:	4770      	bx	lr
    f72e:	bf00      	nop
    f730:	40001000 	.word	0x40001000

0000f734 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f734:	4b03      	ldr	r3, [pc, #12]	; (f744 <radio_rssi_is_ready+0x10>)
    f736:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f73a:	3000      	adds	r0, #0
    f73c:	bf18      	it	ne
    f73e:	2001      	movne	r0, #1
    f740:	4770      	bx	lr
    f742:	bf00      	nop
    f744:	40001000 	.word	0x40001000

0000f748 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f748:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    f74a:	2400      	movs	r4, #0
    f74c:	e019      	b.n	f782 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f74e:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    f750:	7893      	ldrb	r3, [r2, #2]
    f752:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f754:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    f758:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    f75a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    f75e:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    f760:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f762:	4d0c      	ldr	r5, [pc, #48]	; (f794 <radio_filter_configure+0x4c>)
    f764:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    f768:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f76c:	7956      	ldrb	r6, [r2, #5]
    f76e:	7913      	ldrb	r3, [r2, #4]
    f770:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    f774:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    f778:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    f77c:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    f77e:	3401      	adds	r4, #1
    f780:	b2e4      	uxtb	r4, r4
    f782:	2c07      	cmp	r4, #7
    f784:	d9e3      	bls.n	f74e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f786:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f78a:	4b02      	ldr	r3, [pc, #8]	; (f794 <radio_filter_configure+0x4c>)
    f78c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f790:	bc70      	pop	{r4, r5, r6}
    f792:	4770      	bx	lr
    f794:	40001000 	.word	0x40001000

0000f798 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f798:	4a03      	ldr	r2, [pc, #12]	; (f7a8 <radio_filter_disable+0x10>)
    f79a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f79e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f7a2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    f7a6:	4770      	bx	lr
    f7a8:	40001000 	.word	0x40001000

0000f7ac <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f7ac:	4b03      	ldr	r3, [pc, #12]	; (f7bc <radio_filter_status_reset+0x10>)
    f7ae:	2200      	movs	r2, #0
    f7b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    f7b4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f7b8:	4770      	bx	lr
    f7ba:	bf00      	nop
    f7bc:	40001000 	.word	0x40001000

0000f7c0 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f7c0:	4b03      	ldr	r3, [pc, #12]	; (f7d0 <radio_filter_has_match+0x10>)
    f7c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f7c6:	3000      	adds	r0, #0
    f7c8:	bf18      	it	ne
    f7ca:	2001      	movne	r0, #1
    f7cc:	4770      	bx	lr
    f7ce:	bf00      	nop
    f7d0:	40001000 	.word	0x40001000

0000f7d4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f7d4:	4b01      	ldr	r3, [pc, #4]	; (f7dc <radio_filter_match_get+0x8>)
    f7d6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f7da:	4770      	bx	lr
    f7dc:	40001000 	.word	0x40001000

0000f7e0 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    f7e0:	4b04      	ldr	r3, [pc, #16]	; (f7f4 <radio_bc_configure+0x14>)
    f7e2:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f7e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f7ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f7ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f7f2:	4770      	bx	lr
    f7f4:	40001000 	.word	0x40001000

0000f7f8 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    f7f8:	2200      	movs	r2, #0
    f7fa:	4b02      	ldr	r3, [pc, #8]	; (f804 <radio_bc_status_reset+0xc>)
    f7fc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    f800:	4770      	bx	lr
    f802:	bf00      	nop
    f804:	40001000 	.word	0x40001000

0000f808 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    f808:	4b03      	ldr	r3, [pc, #12]	; (f818 <radio_bc_has_match+0x10>)
    f80a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    f80e:	3000      	adds	r0, #0
    f810:	bf18      	it	ne
    f812:	2001      	movne	r0, #1
    f814:	4770      	bx	lr
    f816:	bf00      	nop
    f818:	40001000 	.word	0x40001000

0000f81c <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    f81c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    f820:	4b04      	ldr	r3, [pc, #16]	; (f834 <radio_tmr_status_reset+0x18>)
    f822:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    f826:	f248 027f 	movw	r2, #32895	; 0x807f
    f82a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    f82e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    f832:	4770      	bx	lr
    f834:	4000b000 	.word	0x4000b000

0000f838 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    f838:	4b01      	ldr	r3, [pc, #4]	; (f840 <radio_tmr_tifs_set+0x8>)
    f83a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    f83e:	4770      	bx	lr
    f840:	40001000 	.word	0x40001000

0000f844 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    f844:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    f846:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    f84a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    f84e:	4c21      	ldr	r4, [pc, #132]	; (f8d4 <radio_tmr_start+0x90>)
    f850:	42a3      	cmp	r3, r4
    f852:	d906      	bls.n	f862 <radio_tmr_start+0x1e>
		ticks_start--;
    f854:	3901      	subs	r1, #1
		remainder += 30517578UL;
    f856:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    f85a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    f85e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    f862:	4b1d      	ldr	r3, [pc, #116]	; (f8d8 <radio_tmr_start+0x94>)
    f864:	fba3 3202 	umull	r3, r2, r3, r2
    f868:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    f86a:	4b1c      	ldr	r3, [pc, #112]	; (f8dc <radio_tmr_start+0x98>)
    f86c:	2401      	movs	r4, #1
    f86e:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    f870:	2500      	movs	r5, #0
    f872:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    f876:	2404      	movs	r4, #4
    f878:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    f87c:	2602      	movs	r6, #2
    f87e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    f882:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    f886:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    f88a:	4c15      	ldr	r4, [pc, #84]	; (f8e0 <radio_tmr_start+0x9c>)
    f88c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    f890:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    f894:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    f898:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    f89c:	4911      	ldr	r1, [pc, #68]	; (f8e4 <radio_tmr_start+0xa0>)
    f89e:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    f8a2:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    f8a6:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    f8aa:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    f8ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f8b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f8b6:	b948      	cbnz	r0, f8cc <radio_tmr_start+0x88>
    f8b8:	490b      	ldr	r1, [pc, #44]	; (f8e8 <radio_tmr_start+0xa4>)
    f8ba:	4b0a      	ldr	r3, [pc, #40]	; (f8e4 <radio_tmr_start+0xa0>)
    f8bc:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    f8c0:	2101      	movs	r1, #1
    f8c2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    f8c6:	4610      	mov	r0, r2
    f8c8:	bc70      	pop	{r4, r5, r6}
    f8ca:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f8cc:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    f8d0:	e7f3      	b.n	f8ba <radio_tmr_start+0x76>
    f8d2:	bf00      	nop
    f8d4:	7ff0bdbf 	.word	0x7ff0bdbf
    f8d8:	431bde83 	.word	0x431bde83
    f8dc:	40008000 	.word	0x40008000
    f8e0:	4000b000 	.word	0x4000b000
    f8e4:	4001f000 	.word	0x4001f000
    f8e8:	40001004 	.word	0x40001004

0000f8ec <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    f8ec:	4b02      	ldr	r3, [pc, #8]	; (f8f8 <radio_tmr_stop+0xc>)
    f8ee:	2201      	movs	r2, #1
    f8f0:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    f8f2:	611a      	str	r2, [r3, #16]
    f8f4:	4770      	bx	lr
    f8f6:	bf00      	nop
    f8f8:	40008000 	.word	0x40008000

0000f8fc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    f8fc:	4b0e      	ldr	r3, [pc, #56]	; (f938 <radio_tmr_hcto_configure+0x3c>)
    f8fe:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    f902:	2200      	movs	r2, #0
    f904:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f908:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    f90c:	4a0b      	ldr	r2, [pc, #44]	; (f93c <radio_tmr_hcto_configure+0x40>)
    f90e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f912:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f916:	3240      	adds	r2, #64	; 0x40
    f918:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    f91c:	f502 7280 	add.w	r2, r2, #256	; 0x100
    f920:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    f924:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    f928:	3a34      	subs	r2, #52	; 0x34
    f92a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    f92e:	2218      	movs	r2, #24
    f930:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f934:	4770      	bx	lr
    f936:	bf00      	nop
    f938:	40008000 	.word	0x40008000
    f93c:	40001104 	.word	0x40001104

0000f940 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    f940:	4b0b      	ldr	r3, [pc, #44]	; (f970 <radio_tmr_aa_capture+0x30>)
    f942:	4a0c      	ldr	r2, [pc, #48]	; (f974 <radio_tmr_aa_capture+0x34>)
    f944:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    f948:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f94c:	3240      	adds	r2, #64	; 0x40
    f94e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f952:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    f956:	3a3c      	subs	r2, #60	; 0x3c
    f958:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f95c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f960:	3240      	adds	r2, #64	; 0x40
    f962:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    f966:	220c      	movs	r2, #12
    f968:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f96c:	4770      	bx	lr
    f96e:	bf00      	nop
    f970:	4001f000 	.word	0x4001f000
    f974:	40001100 	.word	0x40001100

0000f978 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    f978:	4b01      	ldr	r3, [pc, #4]	; (f980 <radio_tmr_aa_get+0x8>)
    f97a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    f97e:	4770      	bx	lr
    f980:	40008000 	.word	0x40008000

0000f984 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    f984:	4b01      	ldr	r3, [pc, #4]	; (f98c <radio_tmr_aa_save+0x8>)
    f986:	6018      	str	r0, [r3, #0]
    f988:	4770      	bx	lr
    f98a:	bf00      	nop
    f98c:	20000e3c 	.word	0x20000e3c

0000f990 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    f990:	4b01      	ldr	r3, [pc, #4]	; (f998 <radio_tmr_aa_restore+0x8>)
    f992:	6818      	ldr	r0, [r3, #0]
    f994:	4770      	bx	lr
    f996:	bf00      	nop
    f998:	20000e3c 	.word	0x20000e3c

0000f99c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    f99c:	4b01      	ldr	r3, [pc, #4]	; (f9a4 <radio_tmr_ready_get+0x8>)
    f99e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    f9a2:	4770      	bx	lr
    f9a4:	40008000 	.word	0x40008000

0000f9a8 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    f9a8:	4b06      	ldr	r3, [pc, #24]	; (f9c4 <radio_tmr_end_capture+0x1c>)
    f9aa:	4a07      	ldr	r2, [pc, #28]	; (f9c8 <radio_tmr_end_capture+0x20>)
    f9ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    f9b0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f9b4:	323c      	adds	r2, #60	; 0x3c
    f9b6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    f9ba:	2220      	movs	r2, #32
    f9bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f9c0:	4770      	bx	lr
    f9c2:	bf00      	nop
    f9c4:	4001f000 	.word	0x4001f000
    f9c8:	4000110c 	.word	0x4000110c

0000f9cc <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    f9cc:	4b01      	ldr	r3, [pc, #4]	; (f9d4 <radio_tmr_end_get+0x8>)
    f9ce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f9d2:	4770      	bx	lr
    f9d4:	40008000 	.word	0x40008000

0000f9d8 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    f9d8:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    f9da:	4b18      	ldr	r3, [pc, #96]	; (fa3c <radio_ccm_rx_pkt_set+0x64>)
    f9dc:	2400      	movs	r4, #0
    f9de:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    f9e2:	2402      	movs	r4, #2
    f9e4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    f9e8:	42a1      	cmp	r1, r4
    f9ea:	d125      	bne.n	fa38 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    f9ec:	4914      	ldr	r1, [pc, #80]	; (fa40 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    f9ee:	4b13      	ldr	r3, [pc, #76]	; (fa3c <radio_ccm_rx_pkt_set+0x64>)
    f9f0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    f9f4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    f9f8:	4812      	ldr	r0, [pc, #72]	; (fa44 <radio_ccm_rx_pkt_set+0x6c>)
    f9fa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    f9fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fa02:	4a11      	ldr	r2, [pc, #68]	; (fa48 <radio_ccm_rx_pkt_set+0x70>)
    fa04:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    fa08:	2200      	movs	r2, #0
    fa0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fa0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fa12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fa16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fa1a:	4a0c      	ldr	r2, [pc, #48]	; (fa4c <radio_ccm_rx_pkt_set+0x74>)
    fa1c:	490c      	ldr	r1, [pc, #48]	; (fa50 <radio_ccm_rx_pkt_set+0x78>)
    fa1e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    fa22:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    fa26:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fa2a:	2140      	movs	r1, #64	; 0x40
    fa2c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    fa30:	2201      	movs	r2, #1
    fa32:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    fa34:	bc10      	pop	{r4}
    fa36:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fa38:	4906      	ldr	r1, [pc, #24]	; (fa54 <radio_ccm_rx_pkt_set+0x7c>)
    fa3a:	e7d8      	b.n	f9ee <radio_ccm_rx_pkt_set+0x16>
    fa3c:	4000f000 	.word	0x4000f000
    fa40:	01010001 	.word	0x01010001
    fa44:	20000d38 	.word	0x20000d38
    fa48:	20000c28 	.word	0x20000c28
    fa4c:	4001f000 	.word	0x4001f000
    fa50:	40001104 	.word	0x40001104
    fa54:	01000001 	.word	0x01000001

0000fa58 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fa58:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fa5a:	4b10      	ldr	r3, [pc, #64]	; (fa9c <radio_ccm_tx_pkt_set+0x44>)
    fa5c:	2200      	movs	r2, #0
    fa5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fa62:	2402      	movs	r4, #2
    fa64:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fa68:	4c0d      	ldr	r4, [pc, #52]	; (faa0 <radio_ccm_tx_pkt_set+0x48>)
    fa6a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fa6e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fa72:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fa76:	480b      	ldr	r0, [pc, #44]	; (faa4 <radio_ccm_tx_pkt_set+0x4c>)
    fa78:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fa7c:	490a      	ldr	r1, [pc, #40]	; (faa8 <radio_ccm_tx_pkt_set+0x50>)
    fa7e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fa82:	2101      	movs	r1, #1
    fa84:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fa88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fa8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fa90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    fa94:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    fa96:	bc10      	pop	{r4}
    fa98:	4770      	bx	lr
    fa9a:	bf00      	nop
    fa9c:	4000f000 	.word	0x4000f000
    faa0:	01010000 	.word	0x01010000
    faa4:	20000d38 	.word	0x20000d38
    faa8:	20000c28 	.word	0x20000c28

0000faac <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    faac:	2202      	movs	r2, #2
    faae:	4b0d      	ldr	r3, [pc, #52]	; (fae4 <radio_ccm_is_done+0x38>)
    fab0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fab4:	e002      	b.n	fabc <radio_ccm_is_done+0x10>
    fab6:	bf20      	wfe
  __ASM volatile ("sev");
    fab8:	bf40      	sev
  __ASM volatile ("wfe");
    faba:	bf20      	wfe
    fabc:	4b09      	ldr	r3, [pc, #36]	; (fae4 <radio_ccm_is_done+0x38>)
    fabe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fac2:	2b00      	cmp	r3, #0
    fac4:	d0f7      	beq.n	fab6 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    fac6:	4b07      	ldr	r3, [pc, #28]	; (fae4 <radio_ccm_is_done+0x38>)
    fac8:	2202      	movs	r2, #2
    faca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    face:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fad2:	4a05      	ldr	r2, [pc, #20]	; (fae8 <radio_ccm_is_done+0x3c>)
    fad4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fad8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fadc:	fab0 f080 	clz	r0, r0
    fae0:	0940      	lsrs	r0, r0, #5
    fae2:	4770      	bx	lr
    fae4:	4000f000 	.word	0x4000f000
    fae8:	e000e100 	.word	0xe000e100

0000faec <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    faec:	4b03      	ldr	r3, [pc, #12]	; (fafc <radio_ccm_mic_is_valid+0x10>)
    faee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    faf2:	3000      	adds	r0, #0
    faf4:	bf18      	it	ne
    faf6:	2001      	movne	r0, #1
    faf8:	4770      	bx	lr
    fafa:	bf00      	nop
    fafc:	4000f000 	.word	0x4000f000

0000fb00 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    fb00:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fb02:	4c13      	ldr	r4, [pc, #76]	; (fb50 <radio_ar_configure+0x50>)
    fb04:	2303      	movs	r3, #3
    fb06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    fb0a:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fb0e:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fb12:	4b10      	ldr	r3, [pc, #64]	; (fb54 <radio_ar_configure+0x54>)
    fb14:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fb18:	3b01      	subs	r3, #1
    fb1a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    fb1e:	4b0e      	ldr	r3, [pc, #56]	; (fb58 <radio_ar_configure+0x58>)
    fb20:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    fb24:	2300      	movs	r3, #0
    fb26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fb2a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fb2e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    fb32:	2040      	movs	r0, #64	; 0x40
    fb34:	f7ff fe54 	bl	f7e0 <radio_bc_configure>
	radio_bc_status_reset();
    fb38:	f7ff fe5e 	bl	f7f8 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    fb3c:	4b07      	ldr	r3, [pc, #28]	; (fb5c <radio_ar_configure+0x5c>)
    fb3e:	4a08      	ldr	r2, [pc, #32]	; (fb60 <radio_ar_configure+0x60>)
    fb40:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    fb44:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fb48:	2240      	movs	r2, #64	; 0x40
    fb4a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fb4e:	bd10      	pop	{r4, pc}
    fb50:	4000f000 	.word	0x4000f000
    fb54:	40001000 	.word	0x40001000
    fb58:	20000c24 	.word	0x20000c24
    fb5c:	4001f000 	.word	0x4001f000
    fb60:	40001128 	.word	0x40001128

0000fb64 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fb64:	4b01      	ldr	r3, [pc, #4]	; (fb6c <radio_ar_match_get+0x8>)
    fb66:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fb6a:	4770      	bx	lr
    fb6c:	4000f000 	.word	0x4000f000

0000fb70 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    fb70:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    fb72:	f7ff fe41 	bl	f7f8 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fb76:	2200      	movs	r2, #0
    fb78:	4b01      	ldr	r3, [pc, #4]	; (fb80 <radio_ar_status_reset+0x10>)
    fb7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    fb7e:	bd08      	pop	{r3, pc}
    fb80:	4000f000 	.word	0x4000f000

0000fb84 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    fb84:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    fb86:	f7ff fe3f 	bl	f808 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fb8a:	b168      	cbz	r0, fba8 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    fb8c:	4b0a      	ldr	r3, [pc, #40]	; (fbb8 <radio_ar_has_match+0x34>)
    fb8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fb92:	b15b      	cbz	r3, fbac <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    fb94:	4b08      	ldr	r3, [pc, #32]	; (fbb8 <radio_ar_has_match+0x34>)
    fb96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fb9a:	b14b      	cbz	r3, fbb0 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fb9c:	4b06      	ldr	r3, [pc, #24]	; (fbb8 <radio_ar_has_match+0x34>)
    fb9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fba2:	b13b      	cbz	r3, fbb4 <radio_ar_has_match+0x30>
    fba4:	2000      	movs	r0, #0
    fba6:	bd08      	pop	{r3, pc}
    fba8:	2000      	movs	r0, #0
    fbaa:	bd08      	pop	{r3, pc}
    fbac:	2000      	movs	r0, #0
    fbae:	bd08      	pop	{r3, pc}
    fbb0:	2000      	movs	r0, #0
    fbb2:	bd08      	pop	{r3, pc}
    fbb4:	2001      	movs	r0, #1
}
    fbb6:	bd08      	pop	{r3, pc}
    fbb8:	4000f000 	.word	0x4000f000
    fbbc:	00000000 	.word	0x00000000

0000fbc0 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    fbc0:	b1f0      	cbz	r0, fc00 <isr+0x40>
{
    fbc2:	b430      	push	{r4, r5}
    fbc4:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    fbc6:	78c0      	ldrb	r0, [r0, #3]
    fbc8:	1c43      	adds	r3, r0, #1
    fbca:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fbcc:	7815      	ldrb	r5, [r2, #0]
    fbce:	42ab      	cmp	r3, r5
    fbd0:	d012      	beq.n	fbf8 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    fbd2:	7894      	ldrb	r4, [r2, #2]
    fbd4:	42a3      	cmp	r3, r4
    fbd6:	d016      	beq.n	fc06 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    fbd8:	b1c1      	cbz	r1, fc0c <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    fbda:	490f      	ldr	r1, [pc, #60]	; (fc18 <isr+0x58>)
    fbdc:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    fbe0:	4410      	add	r0, r2
    fbe2:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    fbe4:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    fbe6:	3301      	adds	r3, #1
    fbe8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fbea:	429d      	cmp	r5, r3
    fbec:	d006      	beq.n	fbfc <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    fbee:	42a3      	cmp	r3, r4
    fbf0:	d10f      	bne.n	fc12 <isr+0x52>
		return 0;
    fbf2:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    fbf4:	bc30      	pop	{r4, r5}
    fbf6:	4770      	bx	lr
		last = 0;
    fbf8:	2300      	movs	r3, #0
    fbfa:	e7ea      	b.n	fbd2 <isr+0x12>
		last = 0;
    fbfc:	2300      	movs	r3, #0
    fbfe:	e7f6      	b.n	fbee <isr+0x2e>
		return -ENOBUFS;
    fc00:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fc04:	4770      	bx	lr
		return -ENOBUFS;
    fc06:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fc0a:	e7f3      	b.n	fbf4 <isr+0x34>
		return -EBUSY;
    fc0c:	f06f 000f 	mvn.w	r0, #15
    fc10:	e7f0      	b.n	fbf4 <isr+0x34>
	return -EBUSY;
    fc12:	f06f 000f 	mvn.w	r0, #15
    fc16:	e7ed      	b.n	fbf4 <isr+0x34>
    fc18:	4000d000 	.word	0x4000d000
    fc1c:	00000000 	.word	0x00000000

0000fc20 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    fc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fc24:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    fc26:	f7ff fd23 	bl	f670 <radio_is_done>
    fc2a:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    fc2c:	b9e4      	cbnz	r4, fc68 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fc2e:	46a0      	mov	r8, r4
    fc30:	46a1      	mov	r9, r4
    fc32:	4627      	mov	r7, r4
    fc34:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    fc36:	25ff      	movs	r5, #255	; 0xff
    fc38:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    fc3a:	f7ff fcff 	bl	f63c <radio_status_reset>
	radio_tmr_status_reset();
    fc3e:	f7ff fded 	bl	f81c <radio_tmr_status_reset>
	radio_filter_status_reset();
    fc42:	f7ff fdb3 	bl	f7ac <radio_filter_status_reset>
	radio_ar_status_reset();
    fc46:	f7ff ff93 	bl	fb70 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fc4a:	f7ff fd6b 	bl	f724 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    fc4e:	4bb6      	ldr	r3, [pc, #728]	; (ff28 <isr+0x308>)
    fc50:	7c1b      	ldrb	r3, [r3, #16]
    fc52:	2b05      	cmp	r3, #5
    fc54:	f200 8456 	bhi.w	10504 <__kernel_ram_size+0x504>
    fc58:	e8df f013 	tbh	[pc, r3, lsl #1]
    fc5c:	00e801f3 	.word	0x00e801f3
    fc60:	016e001c 	.word	0x016e001c
    fc64:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    fc68:	f7ff fd22 	bl	f6b0 <radio_crc_is_valid>
    fc6c:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    fc6e:	f7ff fda7 	bl	f7c0 <radio_filter_has_match>
    fc72:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    fc74:	f7ff fdae 	bl	f7d4 <radio_filter_match_get>
    fc78:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    fc7c:	f7ff ff82 	bl	fb84 <radio_ar_has_match>
    fc80:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    fc84:	f7ff ff6e 	bl	fb64 <radio_ar_match_get>
    fc88:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    fc8a:	f7ff fd53 	bl	f734 <radio_rssi_is_ready>
    fc8e:	fa5f f880 	uxtb.w	r8, r0
    fc92:	e7d2      	b.n	fc3a <isr+0x1a>
	_radio.state = STATE_RX;
    fc94:	4da4      	ldr	r5, [pc, #656]	; (ff28 <isr+0x308>)
    fc96:	2301      	movs	r3, #1
    fc98:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    fc9a:	f7ff fe97 	bl	f9cc <radio_tmr_end_get>
    fc9e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    fca2:	2096      	movs	r0, #150	; 0x96
    fca4:	f7ff fdc8 	bl	f838 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fca8:	7beb      	ldrb	r3, [r5, #15]
    fcaa:	3b01      	subs	r3, #1
    fcac:	2b03      	cmp	r3, #3
    fcae:	f200 80b7 	bhi.w	fe20 <isr+0x200>
    fcb2:	e8df f003 	tbb	[pc, r3]
    fcb6:	3202      	.short	0x3202
    fcb8:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fcba:	2300      	movs	r3, #0
    fcbc:	461a      	mov	r2, r3
    fcbe:	4619      	mov	r1, r3
    fcc0:	4618      	mov	r0, r3
    fcc2:	f7ff fd0f 	bl	f6e4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fcc6:	f7ff fd01 	bl	f6cc <radio_pkt_scratch_get>
    fcca:	f7ff fc89 	bl	f5e0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fcce:	f7ff fcc5 	bl	f65c <radio_is_ready>
    fcd2:	b990      	cbnz	r0, fcfa <isr+0xda>
		if (ctrl_rl_enabled()) {
    fcd4:	f00a f802 	bl	19cdc <ctrl_rl_enabled>
    fcd8:	b9a8      	cbnz	r0, fd06 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    fcda:	2100      	movs	r1, #0
    fcdc:	4608      	mov	r0, r1
    fcde:	f7ff fc91 	bl	f604 <radio_rx_chain_delay_get>
    fce2:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fce4:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fce6:	2100      	movs	r1, #0
    fce8:	4608      	mov	r0, r1
    fcea:	f7ff fc87 	bl	f5fc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fcee:	1a20      	subs	r0, r4, r0
    fcf0:	f7ff fe04 	bl	f8fc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fcf4:	f7ff fe58 	bl	f9a8 <radio_tmr_end_capture>
    fcf8:	e1a3      	b.n	10042 <__kernel_ram_size+0x42>
		LL_ASSERT(!radio_is_ready());
    fcfa:	4040      	eors	r0, r0
    fcfc:	f380 8811 	msr	BASEPRI, r0
    fd00:	f04f 0004 	mov.w	r0, #4
    fd04:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fd06:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fd0a:	f009 fd63 	bl	197d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fd0e:	4601      	mov	r1, r0
    fd10:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fd14:	f7ff fef4 	bl	fb00 <radio_ar_configure>
    fd18:	e7df      	b.n	fcda <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fd1a:	2300      	movs	r3, #0
    fd1c:	461a      	mov	r2, r3
    fd1e:	4619      	mov	r1, r3
    fd20:	4618      	mov	r0, r3
    fd22:	f7ff fcdf 	bl	f6e4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    fd26:	4b80      	ldr	r3, [pc, #512]	; (ff28 <isr+0x308>)
    fd28:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    fd2c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    fd30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    fd34:	3008      	adds	r0, #8
    fd36:	f7ff fc53 	bl	f5e0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fd3a:	f7ff fc8f 	bl	f65c <radio_is_ready>
    fd3e:	b990      	cbnz	r0, fd66 <isr+0x146>
		if (ctrl_rl_enabled()) {
    fd40:	f009 ffcc 	bl	19cdc <ctrl_rl_enabled>
    fd44:	b9a8      	cbnz	r0, fd72 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    fd46:	2100      	movs	r1, #0
    fd48:	4608      	mov	r0, r1
    fd4a:	f7ff fc5b 	bl	f604 <radio_rx_chain_delay_get>
    fd4e:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fd50:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fd52:	2100      	movs	r1, #0
    fd54:	4608      	mov	r0, r1
    fd56:	f7ff fc51 	bl	f5fc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fd5a:	1a20      	subs	r0, r4, r0
    fd5c:	f7ff fdce 	bl	f8fc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    fd60:	f7ff fcd0 	bl	f704 <radio_rssi_measure>
    fd64:	e16d      	b.n	10042 <__kernel_ram_size+0x42>
		LL_ASSERT(!radio_is_ready());
    fd66:	4040      	eors	r0, r0
    fd68:	f380 8811 	msr	BASEPRI, r0
    fd6c:	f04f 0004 	mov.w	r0, #4
    fd70:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fd72:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fd76:	f009 fd2d 	bl	197d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fd7a:	4601      	mov	r1, r0
    fd7c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fd80:	f7ff febe 	bl	fb00 <radio_ar_configure>
    fd84:	e7df      	b.n	fd46 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fd86:	4d68      	ldr	r5, [pc, #416]	; (ff28 <isr+0x308>)
    fd88:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    fd8c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    fd90:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fd94:	09d3      	lsrs	r3, r2, #7
    fd96:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    fd9a:	2100      	movs	r1, #0
    fd9c:	f000 0007 	and.w	r0, r0, #7
    fda0:	f7ff fca0 	bl	f6e4 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fda4:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    fda8:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    fdac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fdb0:	3108      	adds	r1, #8
    fdb2:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    fdb6:	f002 fad3 	bl	12360 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    fdba:	f7ff fc4f 	bl	f65c <radio_is_ready>
    fdbe:	bb20      	cbnz	r0, fe0a <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    fdc0:	4d59      	ldr	r5, [pc, #356]	; (ff28 <isr+0x308>)
    fdc2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    fdc6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fdca:	2101      	movs	r1, #1
    fdcc:	f000 0007 	and.w	r0, r0, #7
    fdd0:	f7ff fc18 	bl	f604 <radio_rx_chain_delay_get>
    fdd4:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fdd6:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    fdda:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    fdde:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    fde2:	2b02      	cmp	r3, #2
    fde4:	d01a      	beq.n	fe1c <isr+0x1fc>
    fde6:	2b04      	cmp	r3, #4
    fde8:	d015      	beq.n	fe16 <isr+0x1f6>
		return 40;
    fdea:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fdec:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    fdee:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    fdf2:	09c1      	lsrs	r1, r0, #7
    fdf4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fdf8:	f7ff fc00 	bl	f5fc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fdfc:	1a20      	subs	r0, r4, r0
    fdfe:	f7ff fd7d 	bl	f8fc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    fe02:	2001      	movs	r0, #1
    fe04:	f002 fb0a 	bl	1241c <packet_tx_enqueue>
    fe08:	e11b      	b.n	10042 <__kernel_ram_size+0x42>
		LL_ASSERT(!radio_is_ready());
    fe0a:	4040      	eors	r0, r0
    fe0c:	f380 8811 	msr	BASEPRI, r0
    fe10:	f04f 0004 	mov.w	r0, #4
    fe14:	df02      	svc	2
		return 376;
    fe16:	f44f 74bc 	mov.w	r4, #376	; 0x178
    fe1a:	e7e7      	b.n	fdec <isr+0x1cc>
		return 24;
    fe1c:	2418      	movs	r4, #24
    fe1e:	e7e5      	b.n	fdec <isr+0x1cc>
		LL_ASSERT(0);
    fe20:	4040      	eors	r0, r0
    fe22:	f380 8811 	msr	BASEPRI, r0
    fe26:	f04f 0004 	mov.w	r0, #4
    fe2a:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    fe2c:	b144      	cbz	r4, fe40 <isr+0x220>
	switch (_radio.role) {
    fe2e:	4b3e      	ldr	r3, [pc, #248]	; (ff28 <isr+0x308>)
    fe30:	7bdb      	ldrb	r3, [r3, #15]
    fe32:	3b01      	subs	r3, #1
    fe34:	2b03      	cmp	r3, #3
    fe36:	d879      	bhi.n	ff2c <isr+0x30c>
    fe38:	e8df f003 	tbb	[pc, r3]
    fe3c:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    fe40:	2203      	movs	r2, #3
    fe42:	4b39      	ldr	r3, [pc, #228]	; (ff28 <isr+0x308>)
    fe44:	741a      	strb	r2, [r3, #16]
		radio_disable();
    fe46:	f7ff fbef 	bl	f628 <radio_disable>
    fe4a:	e0fa      	b.n	10042 <__kernel_ram_size+0x42>
		if (crc_ok) {
    fe4c:	b94e      	cbnz	r6, fe62 <isr+0x242>
			err = 1;
    fe4e:	2001      	movs	r0, #1
		if (err) {
    fe50:	2800      	cmp	r0, #0
    fe52:	f000 80f6 	beq.w	10042 <__kernel_ram_size+0x42>
			_radio.state = STATE_CLOSE;
    fe56:	2203      	movs	r2, #3
    fe58:	4b33      	ldr	r3, [pc, #204]	; (ff28 <isr+0x308>)
    fe5a:	741a      	strb	r2, [r3, #16]
			radio_disable();
    fe5c:	f7ff fbe4 	bl	f628 <radio_disable>
    fe60:	e0ef      	b.n	10042 <__kernel_ram_size+0x42>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    fe62:	f8cd 8000 	str.w	r8, [sp]
    fe66:	462b      	mov	r3, r5
    fe68:	464a      	mov	r2, r9
    fe6a:	4651      	mov	r1, sl
    fe6c:	4638      	mov	r0, r7
    fe6e:	f007 fc37 	bl	176e0 <isr_rx_adv>
    fe72:	e7ed      	b.n	fe50 <isr+0x230>
		rl_idx = devmatch_ok ?
    fe74:	b9a7      	cbnz	r7, fea0 <isr+0x280>
    fe76:	f1b9 0f00 	cmp.w	r9, #0
    fe7a:	d11b      	bne.n	feb4 <isr+0x294>
    fe7c:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    fe7e:	b9f6      	cbnz	r6, febe <isr+0x29e>
			err = 1;
    fe80:	2001      	movs	r0, #1
		if (err) {
    fe82:	2800      	cmp	r0, #0
    fe84:	f000 80dd 	beq.w	10042 <__kernel_ram_size+0x42>
			_radio.state = STATE_CLOSE;
    fe88:	4c27      	ldr	r4, [pc, #156]	; (ff28 <isr+0x308>)
    fe8a:	2303      	movs	r3, #3
    fe8c:	7423      	strb	r3, [r4, #16]
			radio_disable();
    fe8e:	f7ff fbcb 	bl	f628 <radio_disable>
			_radio.scanner.state = 0;
    fe92:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    fe96:	f36f 0341 	bfc	r3, #1, #1
    fe9a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    fe9e:	e0d0      	b.n	10042 <__kernel_ram_size+0x42>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    fea0:	4b21      	ldr	r3, [pc, #132]	; (ff28 <isr+0x308>)
    fea2:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    fea6:	4651      	mov	r1, sl
    fea8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    feac:	f009 fc9c 	bl	197e8 <ctrl_rl_idx>
    feb0:	4604      	mov	r4, r0
    feb2:	e7e4      	b.n	fe7e <isr+0x25e>
    feb4:	4628      	mov	r0, r5
    feb6:	f009 fccd 	bl	19854 <ctrl_rl_irk_idx>
    feba:	4604      	mov	r4, r0
    febc:	e7df      	b.n	fe7e <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    febe:	4b1a      	ldr	r3, [pc, #104]	; (ff28 <isr+0x308>)
    fec0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fec4:	f013 0f10 	tst.w	r3, #16
    fec8:	d109      	bne.n	fede <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    feca:	b91f      	cbnz	r7, fed4 <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fecc:	2301      	movs	r3, #1
		if (crc_ok &&
    fece:	b9db      	cbnz	r3, ff08 <isr+0x2e8>
			err = 1;
    fed0:	2001      	movs	r0, #1
    fed2:	e7d6      	b.n	fe82 <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fed4:	4621      	mov	r1, r4
    fed6:	4648      	mov	r0, r9
    fed8:	f009 fe1c 	bl	19b14 <ctrl_rl_idx_allowed>
    fedc:	b980      	cbnz	r0, ff00 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fede:	4b12      	ldr	r3, [pc, #72]	; (ff28 <isr+0x308>)
    fee0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fee4:	f013 0f10 	tst.w	r3, #16
    fee8:	d00c      	beq.n	ff04 <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    feea:	b10f      	cbz	r7, fef0 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    feec:	2301      	movs	r3, #1
    feee:	e7ee      	b.n	fece <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    fef0:	4620      	mov	r0, r4
    fef2:	f009 fcd9 	bl	198a8 <ctrl_irk_whitelisted>
    fef6:	b108      	cbz	r0, fefc <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fef8:	2301      	movs	r3, #1
    fefa:	e7e8      	b.n	fece <isr+0x2ae>
    fefc:	2300      	movs	r3, #0
    fefe:	e7e6      	b.n	fece <isr+0x2ae>
    ff00:	2301      	movs	r3, #1
    ff02:	e7e4      	b.n	fece <isr+0x2ae>
    ff04:	2300      	movs	r3, #0
    ff06:	e7e2      	b.n	fece <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    ff08:	f8cd 8004 	str.w	r8, [sp, #4]
    ff0c:	9400      	str	r4, [sp, #0]
    ff0e:	462b      	mov	r3, r5
    ff10:	464a      	mov	r2, r9
    ff12:	4651      	mov	r1, sl
    ff14:	4638      	mov	r0, r7
    ff16:	f006 ffb7 	bl	16e88 <isr_rx_scan>
    ff1a:	e7b2      	b.n	fe82 <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    ff1c:	4642      	mov	r2, r8
    ff1e:	4621      	mov	r1, r4
    ff20:	4630      	mov	r0, r6
    ff22:	f004 fabb 	bl	1449c <isr_rx_conn>
    ff26:	e08c      	b.n	10042 <__kernel_ram_size+0x42>
    ff28:	20000ef4 	.word	0x20000ef4
		LL_ASSERT(0);
    ff2c:	4040      	eors	r0, r0
    ff2e:	f380 8811 	msr	BASEPRI, r0
    ff32:	f04f 0004 	mov.w	r0, #4
    ff36:	df02      	svc	2
	switch (_radio.role) {
    ff38:	4bb3      	ldr	r3, [pc, #716]	; (10208 <__kernel_ram_size+0x208>)
    ff3a:	7bdb      	ldrb	r3, [r3, #15]
    ff3c:	b2db      	uxtb	r3, r3
    ff3e:	2b04      	cmp	r3, #4
    ff40:	f200 82b2 	bhi.w	104a8 <__kernel_ram_size+0x4a8>
    ff44:	e8df f013 	tbh	[pc, r3, lsl #1]
    ff48:	000502a0 	.word	0x000502a0
    ff4c:	00b5006f 	.word	0x00b5006f
    ff50:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    ff52:	4bad      	ldr	r3, [pc, #692]	; (10208 <__kernel_ram_size+0x208>)
    ff54:	7c1b      	ldrb	r3, [r3, #16]
    ff56:	2b03      	cmp	r3, #3
    ff58:	d00f      	beq.n	ff7a <isr+0x35a>
		radio_filter_disable();
    ff5a:	f7ff fc1d 	bl	f798 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    ff5e:	4aaa      	ldr	r2, [pc, #680]	; (10208 <__kernel_ram_size+0x208>)
    ff60:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    ff64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    ff68:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    ff6c:	3320      	adds	r3, #32
    ff6e:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    ff70:	7c12      	ldrb	r2, [r2, #16]
    ff72:	2a03      	cmp	r2, #3
    ff74:	d00f      	beq.n	ff96 <isr+0x376>
	u32_t dont_close = 0;
    ff76:	2300      	movs	r3, #0
    ff78:	e060      	b.n	1003c <__kernel_ram_size+0x3c>
	    (_radio.advertiser.chan_map_current != 0)) {
    ff7a:	4ba3      	ldr	r3, [pc, #652]	; (10208 <__kernel_ram_size+0x208>)
    ff7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    ff80:	f013 0f0e 	tst.w	r3, #14
    ff84:	d0e9      	beq.n	ff5a <isr+0x33a>
		adv_setup();
    ff86:	f002 fca5 	bl	128d4 <adv_setup>
		radio_tx_enable();
    ff8a:	f7ff fb47 	bl	f61c <radio_tx_enable>
		radio_tmr_end_capture();
    ff8e:	f7ff fd0b 	bl	f9a8 <radio_tmr_end_capture>
		dont_close = 1;
    ff92:	2301      	movs	r3, #1
    ff94:	e052      	b.n	1003c <__kernel_ram_size+0x3c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    ff96:	79db      	ldrb	r3, [r3, #7]
    ff98:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    ff9c:	2b01      	cmp	r3, #1
    ff9e:	d040      	beq.n	10022 <__kernel_ram_size+0x22>
			rand_isr_get(sizeof(random_delay), &random_delay);
    ffa0:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    ffa4:	2001      	movs	r0, #1
    ffa6:	f000 fb7d 	bl	106a4 <rand_isr_get>
			random_delay %= 10;
    ffaa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ffae:	4a97      	ldr	r2, [pc, #604]	; (1020c <__kernel_ram_size+0x20c>)
    ffb0:	fba2 1203 	umull	r1, r2, r2, r3
    ffb4:	08d2      	lsrs	r2, r2, #3
    ffb6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ffba:	0051      	lsls	r1, r2, #1
    ffbc:	1a5a      	subs	r2, r3, r1
    ffbe:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    ffc0:	3201      	adds	r2, #1
    ffc2:	b2d2      	uxtb	r2, r2
    ffc4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    ffc8:	b2d2      	uxtb	r2, r2
    ffca:	4891      	ldr	r0, [pc, #580]	; (10210 <__kernel_ram_size+0x210>)
    ffcc:	fba2 0100 	umull	r0, r1, r2, r0
    ffd0:	23e8      	movs	r3, #232	; 0xe8
    ffd2:	fb03 1102 	mla	r1, r3, r2, r1
    ffd6:	a38a      	add	r3, pc, #552	; (adr r3, 10200 <__kernel_ram_size+0x200>)
    ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    ffdc:	f7f1 f88e 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
    ffe0:	f640 63a2 	movw	r3, #3746	; 0xea2
    ffe4:	9306      	str	r3, [sp, #24]
    ffe6:	4b8b      	ldr	r3, [pc, #556]	; (10214 <__kernel_ram_size+0x214>)
    ffe8:	9305      	str	r3, [sp, #20]
    ffea:	2400      	movs	r4, #0
    ffec:	9404      	str	r4, [sp, #16]
    ffee:	9403      	str	r4, [sp, #12]
    fff0:	9402      	str	r4, [sp, #8]
    fff2:	9401      	str	r4, [sp, #4]
    fff4:	9400      	str	r4, [sp, #0]
    fff6:	b283      	uxth	r3, r0
    fff8:	2205      	movs	r2, #5
    fffa:	4621      	mov	r1, r4
    fffc:	4620      	mov	r0, r4
    fffe:	f000 fe1d 	bl	10c3c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10002:	b130      	cbz	r0, 10012 <__kernel_ram_size+0x12>
   10004:	2802      	cmp	r0, #2
   10006:	d004      	beq.n	10012 <__kernel_ram_size+0x12>
   10008:	4b7f      	ldr	r3, [pc, #508]	; (10208 <__kernel_ram_size+0x208>)
   1000a:	7b9b      	ldrb	r3, [r3, #14]
   1000c:	b2db      	uxtb	r3, r3
   1000e:	2b05      	cmp	r3, #5
   10010:	d101      	bne.n	10016 <__kernel_ram_size+0x16>
	u32_t dont_close = 0;
   10012:	2300      	movs	r3, #0
   10014:	e012      	b.n	1003c <__kernel_ram_size+0x3c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10016:	4040      	eors	r0, r0
   10018:	f380 8811 	msr	BASEPRI, r0
   1001c:	f04f 0004 	mov.w	r0, #4
   10020:	df02      	svc	2
	u32_t dont_close = 0;
   10022:	2300      	movs	r3, #0
   10024:	e00a      	b.n	1003c <__kernel_ram_size+0x3c>
	if (_radio.state == STATE_CLOSE) {
   10026:	4b78      	ldr	r3, [pc, #480]	; (10208 <__kernel_ram_size+0x208>)
   10028:	7c1b      	ldrb	r3, [r3, #16]
   1002a:	2b03      	cmp	r3, #3
   1002c:	d00c      	beq.n	10048 <__kernel_ram_size+0x48>
		radio_filter_disable();
   1002e:	f7ff fbb3 	bl	f798 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10032:	4b75      	ldr	r3, [pc, #468]	; (10208 <__kernel_ram_size+0x208>)
   10034:	7c1b      	ldrb	r3, [r3, #16]
   10036:	2b05      	cmp	r3, #5
   10038:	d031      	beq.n	1009e <__kernel_ram_size+0x9e>
	u32_t dont_close = 0;
   1003a:	2300      	movs	r3, #0
	if (dont_close) {
   1003c:	2b00      	cmp	r3, #0
   1003e:	f000 8249 	beq.w	104d4 <__kernel_ram_size+0x4d4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   10042:	b00a      	add	sp, #40	; 0x28
   10044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   10048:	2096      	movs	r0, #150	; 0x96
   1004a:	f7ff fbf5 	bl	f838 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1004e:	2300      	movs	r3, #0
   10050:	461a      	mov	r2, r3
   10052:	4619      	mov	r1, r3
   10054:	4618      	mov	r0, r3
   10056:	f7ff fb45 	bl	f6e4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   1005a:	4b6b      	ldr	r3, [pc, #428]	; (10208 <__kernel_ram_size+0x208>)
   1005c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   10060:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10064:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   10068:	3008      	adds	r0, #8
   1006a:	f7ff fab9 	bl	f5e0 <radio_pkt_rx_set>
		radio_rssi_measure();
   1006e:	f7ff fb49 	bl	f704 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10072:	f009 fe33 	bl	19cdc <ctrl_rl_enabled>
   10076:	b940      	cbnz	r0, 1008a <__kernel_ram_size+0x8a>
		_radio.state = STATE_RX;
   10078:	2401      	movs	r4, #1
   1007a:	4b63      	ldr	r3, [pc, #396]	; (10208 <__kernel_ram_size+0x208>)
   1007c:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   1007e:	f7ff fac7 	bl	f610 <radio_rx_enable>
		radio_tmr_end_capture();
   10082:	f7ff fc91 	bl	f9a8 <radio_tmr_end_capture>
		dont_close = 1;
   10086:	4623      	mov	r3, r4
   10088:	e7d8      	b.n	1003c <__kernel_ram_size+0x3c>
			u8_t count, *irks = ctrl_irks_get(&count);
   1008a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1008e:	f009 fba1 	bl	197d4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10092:	4601      	mov	r1, r0
   10094:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10098:	f7ff fd32 	bl	fb00 <radio_ar_configure>
   1009c:	e7ec      	b.n	10078 <__kernel_ram_size+0x78>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1009e:	2400      	movs	r4, #0
   100a0:	9400      	str	r4, [sp, #0]
   100a2:	4623      	mov	r3, r4
   100a4:	2204      	movs	r2, #4
   100a6:	4621      	mov	r1, r4
   100a8:	4620      	mov	r0, r4
   100aa:	f000 fe15 	bl	10cd8 <ticker_stop>
	u32_t dont_close = 0;
   100ae:	4623      	mov	r3, r4
   100b0:	e7c4      	b.n	1003c <__kernel_ram_size+0x3c>
	if (_radio.conn_curr == 0) {
   100b2:	4b55      	ldr	r3, [pc, #340]	; (10208 <__kernel_ram_size+0x208>)
   100b4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   100b8:	2800      	cmp	r0, #0
   100ba:	f000 81fb 	beq.w	104b4 <__kernel_ram_size+0x4b4>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   100be:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   100c2:	b141      	cbz	r1, 100d6 <__kernel_ram_size+0xd6>
   100c4:	7bdb      	ldrb	r3, [r3, #15]
   100c6:	b2db      	uxtb	r3, r3
   100c8:	2b03      	cmp	r3, #3
   100ca:	d046      	beq.n	1015a <__kernel_ram_size+0x15a>
   100cc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   100d0:	f013 0f01 	tst.w	r3, #1
   100d4:	d141      	bne.n	1015a <__kernel_ram_size+0x15a>
	latency_event = _radio.conn_curr->latency_event;
   100d6:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   100da:	f108 0401 	add.w	r4, r8, #1
   100de:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   100e0:	4b49      	ldr	r3, [pc, #292]	; (10208 <__kernel_ram_size+0x208>)
   100e2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   100e6:	2b00      	cmp	r3, #0
   100e8:	f000 80b8 	beq.w	1025c <__kernel_ram_size+0x25c>
		if (_radio.role == ROLE_SLAVE) {
   100ec:	4b46      	ldr	r3, [pc, #280]	; (10208 <__kernel_ram_size+0x208>)
   100ee:	7bdb      	ldrb	r3, [r3, #15]
   100f0:	b2db      	uxtb	r3, r3
   100f2:	2b03      	cmp	r3, #3
   100f4:	d03c      	beq.n	10170 <__kernel_ram_size+0x170>
		} else if (reason_peer) {
   100f6:	2900      	cmp	r1, #0
   100f8:	f000 80ad 	beq.w	10256 <__kernel_ram_size+0x256>
			_radio.conn_curr->master.terminate_ack = 1;
   100fc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10100:	f043 0301 	orr.w	r3, r3, #1
   10104:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   10108:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   1010a:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   1010c:	4b3e      	ldr	r3, [pc, #248]	; (10208 <__kernel_ram_size+0x208>)
   1010e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10112:	2200      	movs	r2, #0
   10114:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   10116:	4b3c      	ldr	r3, [pc, #240]	; (10208 <__kernel_ram_size+0x208>)
   10118:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1011c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10120:	2b00      	cmp	r3, #0
   10122:	f000 80d8 	beq.w	102d6 <__kernel_ram_size+0x2d6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10126:	429c      	cmp	r4, r3
   10128:	f080 80c9 	bcs.w	102be <__kernel_ram_size+0x2be>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1012c:	1b1b      	subs	r3, r3, r4
   1012e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   10132:	4b35      	ldr	r3, [pc, #212]	; (10208 <__kernel_ram_size+0x208>)
   10134:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10138:	2100      	movs	r1, #0
   1013a:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1013c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10140:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   10144:	2a06      	cmp	r2, #6
   10146:	f240 8130 	bls.w	103aa <__kernel_ram_size+0x3aa>
			else if (_radio.role == ROLE_SLAVE) {
   1014a:	4a2f      	ldr	r2, [pc, #188]	; (10208 <__kernel_ram_size+0x208>)
   1014c:	7bd2      	ldrb	r2, [r2, #15]
   1014e:	b2d2      	uxtb	r2, r2
   10150:	2a03      	cmp	r2, #3
   10152:	f000 80a2 	beq.w	1029a <__kernel_ram_size+0x29a>
	force = 0;
   10156:	2700      	movs	r7, #0
   10158:	e0be      	b.n	102d8 <__kernel_ram_size+0x2d8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   1015a:	f004 f90b 	bl	14374 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   1015e:	4c2a      	ldr	r4, [pc, #168]	; (10208 <__kernel_ram_size+0x208>)
   10160:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10164:	f002 f9b2 	bl	124cc <connection_release>
		_radio.conn_curr = NULL;
   10168:	2300      	movs	r3, #0
   1016a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1016e:	e765      	b.n	1003c <__kernel_ram_size+0x3c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10170:	f7ff fc0e 	bl	f990 <radio_tmr_aa_restore>
   10174:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   10176:	f7ff fc11 	bl	f99c <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1017a:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   1017e:	4b22      	ldr	r3, [pc, #136]	; (10208 <__kernel_ram_size+0x208>)
   10180:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   10184:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   10188:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   1018c:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10190:	2b02      	cmp	r3, #2
   10192:	d031      	beq.n	101f8 <__kernel_ram_size+0x1f8>
   10194:	2b04      	cmp	r3, #4
   10196:	d02c      	beq.n	101f2 <__kernel_ram_size+0x1f2>
		return 40;
   10198:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   1019a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1019c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   1019e:	45ba      	cmp	sl, r7
   101a0:	d83c      	bhi.n	1021c <__kernel_ram_size+0x21c>
					TICKER_US_TO_TICKS(window_widening_event_us);
   101a2:	4e1d      	ldr	r6, [pc, #116]	; (10218 <__kernel_ram_size+0x218>)
   101a4:	a316      	add	r3, pc, #88	; (adr r3, 10200 <__kernel_ram_size+0x200>)
   101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   101aa:	fba0 0106 	umull	r0, r1, r0, r6
   101ae:	f7f0 ffa5 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   101b2:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   101b4:	eba7 000a 	sub.w	r0, r7, sl
   101b8:	a311      	add	r3, pc, #68	; (adr r3, 10200 <__kernel_ram_size+0x200>)
   101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   101be:	fba0 0106 	umull	r0, r1, r0, r6
   101c2:	f7f0 ff9b 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   101c6:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   101c8:	2200      	movs	r2, #0
   101ca:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   101ce:	4b0e      	ldr	r3, [pc, #56]	; (10208 <__kernel_ram_size+0x208>)
   101d0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   101d4:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   101d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   101da:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   101de:	b38a      	cbz	r2, 10244 <__kernel_ram_size+0x244>
				if (pdu_data_tx->len ||
   101e0:	7952      	ldrb	r2, [r2, #5]
   101e2:	b91a      	cbnz	r2, 101ec <__kernel_ram_size+0x1ec>
				    _radio.conn_curr->packet_tx_head_offset) {
   101e4:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   101e8:	2a00      	cmp	r2, #0
   101ea:	d08f      	beq.n	1010c <__kernel_ram_size+0x10c>
					_radio.conn_curr->latency_event = 0;
   101ec:	2200      	movs	r2, #0
   101ee:	855a      	strh	r2, [r3, #42]	; 0x2a
   101f0:	e78c      	b.n	1010c <__kernel_ram_size+0x10c>
		return 376;
   101f2:	f44f 76bc 	mov.w	r6, #376	; 0x178
   101f6:	e7d0      	b.n	1019a <__kernel_ram_size+0x19a>
		return 24;
   101f8:	2618      	movs	r6, #24
   101fa:	e7ce      	b.n	1019a <__kernel_ram_size+0x19a>
   101fc:	f3af 8000 	nop.w
   10200:	1afd498d 	.word	0x1afd498d
   10204:	00000007 	.word	0x00000007
   10208:	20000ef4 	.word	0x20000ef4
   1020c:	cccccccd 	.word	0xcccccccd
   10210:	d4a51000 	.word	0xd4a51000
   10214:	00011c1d 	.word	0x00011c1d
   10218:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   1021c:	4faa      	ldr	r7, [pc, #680]	; (104c8 <__kernel_ram_size+0x4c8>)
   1021e:	a3a8      	add	r3, pc, #672	; (adr r3, 104c0 <__kernel_ram_size+0x4c0>)
   10220:	e9d3 2300 	ldrd	r2, r3, [r3]
   10224:	fbaa 0107 	umull	r0, r1, sl, r7
   10228:	f7f0 ff68 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   1022c:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   1022e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   10232:	a3a3      	add	r3, pc, #652	; (adr r3, 104c0 <__kernel_ram_size+0x4c0>)
   10234:	e9d3 2300 	ldrd	r2, r3, [r3]
   10238:	fba0 0107 	umull	r0, r1, r0, r7
   1023c:	f7f0 ff5e 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10240:	b286      	uxth	r6, r0
   10242:	e7c1      	b.n	101c8 <__kernel_ram_size+0x1c8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   10244:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10248:	f012 0f01 	tst.w	r2, #1
   1024c:	f43f af5e 	beq.w	1010c <__kernel_ram_size+0x10c>
					_radio.conn_curr->latency;
   10250:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   10252:	855a      	strh	r2, [r3, #42]	; 0x2a
   10254:	e75a      	b.n	1010c <__kernel_ram_size+0x10c>
	ticks_drift_minus = 0;
   10256:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10258:	4635      	mov	r5, r6
   1025a:	e757      	b.n	1010c <__kernel_ram_size+0x10c>
	else if (_radio.conn_curr->connect_expire) {
   1025c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1025e:	b195      	cbz	r5, 10286 <__kernel_ram_size+0x286>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10260:	42ac      	cmp	r4, r5
   10262:	d204      	bcs.n	1026e <__kernel_ram_size+0x26e>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10264:	1b2d      	subs	r5, r5, r4
   10266:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10268:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   1026a:	462e      	mov	r6, r5
   1026c:	e753      	b.n	10116 <__kernel_ram_size+0x116>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1026e:	213e      	movs	r1, #62	; 0x3e
   10270:	f004 f880 	bl	14374 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10274:	4c95      	ldr	r4, [pc, #596]	; (104cc <__kernel_ram_size+0x4cc>)
   10276:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1027a:	f002 f927 	bl	124cc <connection_release>
			_radio.conn_curr = NULL;
   1027e:	2300      	movs	r3, #0
   10280:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10284:	e6da      	b.n	1003c <__kernel_ram_size+0x3c>
		if (!_radio.conn_curr->supervision_expire) {
   10286:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   1028a:	b926      	cbnz	r6, 10296 <__kernel_ram_size+0x296>
				_radio.conn_curr->supervision_reload;
   1028c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   1028e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10292:	4635      	mov	r5, r6
   10294:	e73f      	b.n	10116 <__kernel_ram_size+0x116>
	ticks_drift_minus = 0;
   10296:	462e      	mov	r6, r5
   10298:	e73d      	b.n	10116 <__kernel_ram_size+0x116>
				if (latency_event != 0) {
   1029a:	f1b8 0f00 	cmp.w	r8, #0
   1029e:	f040 8086 	bne.w	103ae <__kernel_ram_size+0x3ae>
					force = _radio.conn_curr->slave.force & 0x01;
   102a2:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   102a4:	087a      	lsrs	r2, r7, #1
   102a6:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   102a8:	f017 0701 	ands.w	r7, r7, #1
   102ac:	d014      	beq.n	102d8 <__kernel_ram_size+0x2d8>
						_radio.conn_curr->slave.force |=
   102ae:	4b87      	ldr	r3, [pc, #540]	; (104cc <__kernel_ram_size+0x4cc>)
   102b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102b4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   102b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   102ba:	66d3      	str	r3, [r2, #108]	; 0x6c
   102bc:	e00c      	b.n	102d8 <__kernel_ram_size+0x2d8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   102be:	2108      	movs	r1, #8
   102c0:	f004 f858 	bl	14374 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   102c4:	4c81      	ldr	r4, [pc, #516]	; (104cc <__kernel_ram_size+0x4cc>)
   102c6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   102ca:	f002 f8ff 	bl	124cc <connection_release>
			_radio.conn_curr = NULL;
   102ce:	2300      	movs	r3, #0
   102d0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   102d4:	e6b2      	b.n	1003c <__kernel_ram_size+0x3c>
	force = 0;
   102d6:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   102d8:	4b7c      	ldr	r3, [pc, #496]	; (104cc <__kernel_ram_size+0x4cc>)
   102da:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   102de:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   102e2:	b123      	cbz	r3, 102ee <__kernel_ram_size+0x2ee>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   102e4:	429c      	cmp	r4, r3
   102e6:	d264      	bcs.n	103b2 <__kernel_ram_size+0x3b2>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   102e8:	1b1b      	subs	r3, r3, r4
   102ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   102ee:	4b77      	ldr	r3, [pc, #476]	; (104cc <__kernel_ram_size+0x4cc>)
   102f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102f4:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   102f8:	b123      	cbz	r3, 10304 <__kernel_ram_size+0x304>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   102fa:	429c      	cmp	r4, r3
   102fc:	d265      	bcs.n	103ca <__kernel_ram_size+0x3ca>
			_radio.conn_curr->apto_expire -= elapsed_event;
   102fe:	1b1b      	subs	r3, r3, r4
   10300:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   10304:	4b71      	ldr	r3, [pc, #452]	; (104cc <__kernel_ram_size+0x4cc>)
   10306:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1030a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   1030e:	b12b      	cbz	r3, 1031c <__kernel_ram_size+0x31c>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10310:	429c      	cmp	r4, r3
   10312:	f080 8090 	bcs.w	10436 <__kernel_ram_size+0x436>
			_radio.conn_curr->appto_expire -= elapsed_event;
   10316:	1b1b      	subs	r3, r3, r4
   10318:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1031c:	4b6b      	ldr	r3, [pc, #428]	; (104cc <__kernel_ram_size+0x4cc>)
   1031e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10322:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   10326:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   1032a:	4299      	cmp	r1, r3
   1032c:	d006      	beq.n	1033c <__kernel_ram_size+0x33c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   1032e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   10332:	3b01      	subs	r3, #1
   10334:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10336:	2b01      	cmp	r3, #1
   10338:	f240 809b 	bls.w	10472 <__kernel_ram_size+0x472>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   1033c:	b937      	cbnz	r7, 1034c <__kernel_ram_size+0x34c>
   1033e:	4b63      	ldr	r3, [pc, #396]	; (104cc <__kernel_ram_size+0x4cc>)
   10340:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10346:	4598      	cmp	r8, r3
   10348:	f000 8096 	beq.w	10478 <__kernel_ram_size+0x478>
		lazy = _radio.conn_curr->latency_event + 1;
   1034c:	4b5f      	ldr	r3, [pc, #380]	; (104cc <__kernel_ram_size+0x4cc>)
   1034e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10354:	3301      	adds	r3, #1
   10356:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10358:	b925      	cbnz	r5, 10364 <__kernel_ram_size+0x364>
   1035a:	b91e      	cbnz	r6, 10364 <__kernel_ram_size+0x364>
   1035c:	b913      	cbnz	r3, 10364 <__kernel_ram_size+0x364>
	    (lazy != 0) || (force != 0)) {
   1035e:	2f00      	cmp	r7, #0
   10360:	f000 80aa 	beq.w	104b8 <__kernel_ram_size+0x4b8>
				    _radio.conn_curr->handle;
   10364:	4a59      	ldr	r2, [pc, #356]	; (104cc <__kernel_ram_size+0x4cc>)
   10366:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1036a:	f892 4020 	ldrb.w	r4, [r2, #32]
   1036e:	3407      	adds	r4, #7
   10370:	b2e4      	uxtb	r4, r4
		ticker_status =
   10372:	9406      	str	r4, [sp, #24]
   10374:	4a56      	ldr	r2, [pc, #344]	; (104d0 <__kernel_ram_size+0x4d0>)
   10376:	9205      	str	r2, [sp, #20]
   10378:	9704      	str	r7, [sp, #16]
   1037a:	9303      	str	r3, [sp, #12]
   1037c:	2000      	movs	r0, #0
   1037e:	9002      	str	r0, [sp, #8]
   10380:	9001      	str	r0, [sp, #4]
   10382:	9600      	str	r6, [sp, #0]
   10384:	462b      	mov	r3, r5
   10386:	4622      	mov	r2, r4
   10388:	4601      	mov	r1, r0
   1038a:	f000 fc57 	bl	10c3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1038e:	4603      	mov	r3, r0
   10390:	2800      	cmp	r0, #0
   10392:	f43f ae53 	beq.w	1003c <__kernel_ram_size+0x3c>
   10396:	2802      	cmp	r0, #2
   10398:	f000 8090 	beq.w	104bc <__kernel_ram_size+0x4bc>
   1039c:	4b4b      	ldr	r3, [pc, #300]	; (104cc <__kernel_ram_size+0x4cc>)
   1039e:	7b9b      	ldrb	r3, [r3, #14]
   103a0:	b2db      	uxtb	r3, r3
   103a2:	429c      	cmp	r4, r3
   103a4:	d16a      	bne.n	1047c <__kernel_ram_size+0x47c>
	u32_t dont_close = 0;
   103a6:	2300      	movs	r3, #0
   103a8:	e648      	b.n	1003c <__kernel_ram_size+0x3c>
				force = 1;
   103aa:	2701      	movs	r7, #1
   103ac:	e794      	b.n	102d8 <__kernel_ram_size+0x2d8>
					force = 1;
   103ae:	2701      	movs	r7, #1
   103b0:	e792      	b.n	102d8 <__kernel_ram_size+0x2d8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   103b2:	2122      	movs	r1, #34	; 0x22
   103b4:	f003 ffde 	bl	14374 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   103b8:	4c44      	ldr	r4, [pc, #272]	; (104cc <__kernel_ram_size+0x4cc>)
   103ba:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   103be:	f002 f885 	bl	124cc <connection_release>
			_radio.conn_curr = NULL;
   103c2:	2300      	movs	r3, #0
   103c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   103c8:	e638      	b.n	1003c <__kernel_ram_size+0x3c>
			_radio.conn_curr->apto_expire = 0;
   103ca:	2300      	movs	r3, #0
   103cc:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   103d0:	4b3e      	ldr	r3, [pc, #248]	; (104cc <__kernel_ram_size+0x4cc>)
   103d2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   103d6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   103da:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   103dc:	429a      	cmp	r2, r3
   103de:	d318      	bcc.n	10412 <__kernel_ram_size+0x412>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   103e0:	4b3a      	ldr	r3, [pc, #232]	; (104cc <__kernel_ram_size+0x4cc>)
   103e2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   103e6:	1ad3      	subs	r3, r2, r3
   103e8:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   103ea:	2b01      	cmp	r3, #1
   103ec:	d91b      	bls.n	10426 <__kernel_ram_size+0x426>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   103ee:	4b37      	ldr	r3, [pc, #220]	; (104cc <__kernel_ram_size+0x4cc>)
   103f0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   103f4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   103f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   103fc:	b1ab      	cbz	r3, 1042a <__kernel_ram_size+0x42a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   103fe:	4a33      	ldr	r2, [pc, #204]	; (104cc <__kernel_ram_size+0x4cc>)
   10400:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   10404:	8c12      	ldrh	r2, [r2, #32]
   10406:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10408:	220a      	movs	r2, #10
   1040a:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   1040c:	f003 ff3e 	bl	1428c <packet_rx_enqueue>
   10410:	e778      	b.n	10304 <__kernel_ram_size+0x304>
		return (_radio.packet_rx_count -
   10412:	492e      	ldr	r1, [pc, #184]	; (104cc <__kernel_ram_size+0x4cc>)
   10414:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   10418:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1041c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1041e:	fa52 f383 	uxtab	r3, r2, r3
   10422:	b2db      	uxtb	r3, r3
   10424:	e7e1      	b.n	103ea <__kernel_ram_size+0x3ea>
		return 0;
   10426:	2300      	movs	r3, #0
   10428:	e7e8      	b.n	103fc <__kernel_ram_size+0x3fc>
			LL_ASSERT(radio_pdu_node_rx);
   1042a:	4040      	eors	r0, r0
   1042c:	f380 8811 	msr	BASEPRI, r0
   10430:	f04f 0004 	mov.w	r0, #4
   10434:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   10436:	2300      	movs	r3, #0
   10438:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1043c:	4b23      	ldr	r3, [pc, #140]	; (104cc <__kernel_ram_size+0x4cc>)
   1043e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10442:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   10446:	2a00      	cmp	r2, #0
   10448:	f47f af68 	bne.w	1031c <__kernel_ram_size+0x31c>
			    (_radio.conn_curr->llcp_req ==
   1044c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   10450:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10454:	4291      	cmp	r1, r2
   10456:	f47f af61 	bne.w	1031c <__kernel_ram_size+0x31c>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1045a:	2207      	movs	r2, #7
   1045c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10460:	4b1a      	ldr	r3, [pc, #104]	; (104cc <__kernel_ram_size+0x4cc>)
   10462:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10466:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1046a:	3b01      	subs	r3, #1
   1046c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10470:	e754      	b.n	1031c <__kernel_ram_size+0x31c>
		_radio.conn_curr->latency_event = 0;
   10472:	2300      	movs	r3, #0
   10474:	8553      	strh	r3, [r2, #42]	; 0x2a
   10476:	e761      	b.n	1033c <__kernel_ram_size+0x33c>
	lazy = 0;
   10478:	2300      	movs	r3, #0
   1047a:	e76d      	b.n	10358 <__kernel_ram_size+0x358>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1047c:	4040      	eors	r0, r0
   1047e:	f380 8811 	msr	BASEPRI, r0
   10482:	f04f 0004 	mov.w	r0, #4
   10486:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10488:	4b10      	ldr	r3, [pc, #64]	; (104cc <__kernel_ram_size+0x4cc>)
   1048a:	7c1b      	ldrb	r3, [r3, #16]
   1048c:	3b04      	subs	r3, #4
   1048e:	b2db      	uxtb	r3, r3
   10490:	2b01      	cmp	r3, #1
   10492:	d803      	bhi.n	1049c <__kernel_ram_size+0x49c>
		_radio.state = STATE_NONE;
   10494:	2200      	movs	r2, #0
   10496:	4b0d      	ldr	r3, [pc, #52]	; (104cc <__kernel_ram_size+0x4cc>)
   10498:	741a      	strb	r2, [r3, #16]
   1049a:	e5d2      	b.n	10042 <__kernel_ram_size+0x42>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   1049c:	4040      	eors	r0, r0
   1049e:	f380 8811 	msr	BASEPRI, r0
   104a2:	f04f 0004 	mov.w	r0, #4
   104a6:	df02      	svc	2
		LL_ASSERT(0);
   104a8:	4040      	eors	r0, r0
   104aa:	f380 8811 	msr	BASEPRI, r0
   104ae:	f04f 0004 	mov.w	r0, #4
   104b2:	df02      	svc	2
	u32_t dont_close = 0;
   104b4:	2300      	movs	r3, #0
   104b6:	e5c1      	b.n	1003c <__kernel_ram_size+0x3c>
   104b8:	2300      	movs	r3, #0
   104ba:	e5bf      	b.n	1003c <__kernel_ram_size+0x3c>
   104bc:	2300      	movs	r3, #0
   104be:	e5bd      	b.n	1003c <__kernel_ram_size+0x3c>
   104c0:	1afd498d 	.word	0x1afd498d
   104c4:	00000007 	.word	0x00000007
   104c8:	3b9aca00 	.word	0x3b9aca00
   104cc:	20000ef4 	.word	0x20000ef4
   104d0:	00011c3d 	.word	0x00011c3d
	_radio.role = ROLE_NONE;
   104d4:	4d0e      	ldr	r5, [pc, #56]	; (10510 <__kernel_ram_size+0x510>)
   104d6:	2400      	movs	r4, #0
   104d8:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   104da:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   104dc:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   104de:	f7ff fa05 	bl	f8ec <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   104e2:	4623      	mov	r3, r4
   104e4:	4622      	mov	r2, r4
   104e6:	4621      	mov	r1, r4
   104e8:	4620      	mov	r0, r4
   104ea:	f001 fe29 	bl	12140 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   104ee:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   104f0:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   104f2:	685b      	ldr	r3, [r3, #4]
   104f4:	4621      	mov	r1, r4
   104f6:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   104f8:	2201      	movs	r2, #1
   104fa:	4611      	mov	r1, r2
   104fc:	4620      	mov	r0, r4
   104fe:	f7fe fcff 	bl	ef00 <mayfly_enable>
   10502:	e59e      	b.n	10042 <__kernel_ram_size+0x42>
		LL_ASSERT(0);
   10504:	4040      	eors	r0, r0
   10506:	f380 8811 	msr	BASEPRI, r0
   1050a:	f04f 0004 	mov.w	r0, #4
   1050e:	df02      	svc	2
   10510:	20000ef4 	.word	0x20000ef4

00010514 <init>:
{
   10514:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   10516:	1d1c      	adds	r4, r3, #4
   10518:	42a2      	cmp	r2, r4
   1051a:	d90e      	bls.n	1053a <init+0x26>
	*rng = (struct rand *)context;
   1051c:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   1051e:	3a04      	subs	r2, #4
   10520:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   10522:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   10524:	2300      	movs	r3, #0
   10526:	70cb      	strb	r3, [r1, #3]
   10528:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   1052a:	4b0c      	ldr	r3, [pc, #48]	; (1055c <init+0x48>)
   1052c:	681b      	ldr	r3, [r3, #0]
   1052e:	b153      	cbz	r3, 10546 <init+0x32>
   10530:	4b0b      	ldr	r3, [pc, #44]	; (10560 <init+0x4c>)
   10532:	681b      	ldr	r3, [r3, #0]
   10534:	b13b      	cbz	r3, 10546 <init+0x32>
}
   10536:	bc10      	pop	{r4}
   10538:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   1053a:	4040      	eors	r0, r0
   1053c:	f380 8811 	msr	BASEPRI, r0
   10540:	f04f 0004 	mov.w	r0, #4
   10544:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   10546:	4b07      	ldr	r3, [pc, #28]	; (10564 <init+0x50>)
   10548:	2201      	movs	r2, #1
   1054a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   1054e:	2100      	movs	r1, #0
   10550:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10554:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   10558:	601a      	str	r2, [r3, #0]
}
   1055a:	e7ec      	b.n	10536 <init+0x22>
   1055c:	20000e44 	.word	0x20000e44
   10560:	20000e48 	.word	0x20000e48
   10564:	4000d000 	.word	0x4000d000

00010568 <get>:
	LL_ASSERT(rng);
   10568:	b1d0      	cbz	r0, 105a0 <get+0x38>
{
   1056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1056e:	4607      	mov	r7, r0
	first = rng->first;
   10570:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   10574:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   10576:	45ae      	cmp	lr, r5
   10578:	d82e      	bhi.n	105d8 <get+0x70>
		d = &rand[octets];
   1057a:	440a      	add	r2, r1
		s = &rng->rand[first];
   1057c:	eb00 060e 	add.w	r6, r0, lr
   10580:	3604      	adds	r6, #4
		avail = last - first;
   10582:	eba5 040e 	sub.w	r4, r5, lr
   10586:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10588:	42a1      	cmp	r1, r4
   1058a:	d20f      	bcs.n	105ac <get+0x44>
			remaining = avail - octets;
   1058c:	b2cb      	uxtb	r3, r1
   1058e:	1ae4      	subs	r4, r4, r3
   10590:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   10594:	461c      	mov	r4, r3
		first += avail;
   10596:	44a6      	add	lr, r4
   10598:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   1059c:	1b08      	subs	r0, r1, r4
		while (avail--) {
   1059e:	e00d      	b.n	105bc <get+0x54>
	LL_ASSERT(rng);
   105a0:	4040      	eors	r0, r0
   105a2:	f380 8811 	msr	BASEPRI, r0
   105a6:	f04f 0004 	mov.w	r0, #4
   105aa:	df02      	svc	2
			remaining = 0;
   105ac:	f04f 0c00 	mov.w	ip, #0
   105b0:	e7f1      	b.n	10596 <get+0x2e>
			*(--d) = *s++;
   105b2:	7835      	ldrb	r5, [r6, #0]
   105b4:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   105b8:	461c      	mov	r4, r3
			*(--d) = *s++;
   105ba:	3601      	adds	r6, #1
		while (avail--) {
   105bc:	1e63      	subs	r3, r4, #1
   105be:	b2db      	uxtb	r3, r3
   105c0:	2c00      	cmp	r4, #0
   105c2:	d1f6      	bne.n	105b2 <get+0x4a>
		rng->first = first;
   105c4:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   105c8:	787b      	ldrb	r3, [r7, #1]
   105ca:	459c      	cmp	ip, r3
   105cc:	d202      	bcs.n	105d4 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   105ce:	2201      	movs	r2, #1
   105d0:	4b24      	ldr	r3, [pc, #144]	; (10664 <get+0xfc>)
   105d2:	601a      	str	r2, [r3, #0]
}
   105d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   105d8:	440a      	add	r2, r1
		s = &rng->rand[first];
   105da:	eb00 080e 	add.w	r8, r0, lr
   105de:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   105e2:	7804      	ldrb	r4, [r0, #0]
   105e4:	eba4 040e 	sub.w	r4, r4, lr
   105e8:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   105ea:	42a1      	cmp	r1, r4
   105ec:	d20d      	bcs.n	1060a <get+0xa2>
			remaining = avail + last - octets;
   105ee:	eb05 0c04 	add.w	ip, r5, r4
   105f2:	fa5f fc8c 	uxtb.w	ip, ip
   105f6:	b2cc      	uxtb	r4, r1
   105f8:	ebac 0c04 	sub.w	ip, ip, r4
   105fc:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   10600:	44a6      	add	lr, r4
   10602:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   10606:	1b08      	subs	r0, r1, r4
		while (avail--) {
   10608:	e00a      	b.n	10620 <get+0xb8>
			remaining = last;
   1060a:	46ac      	mov	ip, r5
			first = 0;
   1060c:	f04f 0e00 	mov.w	lr, #0
   10610:	e7f9      	b.n	10606 <get+0x9e>
			*(--d) = *s++;
   10612:	f898 6000 	ldrb.w	r6, [r8]
   10616:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   1061a:	461c      	mov	r4, r3
			*(--d) = *s++;
   1061c:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   10620:	1e63      	subs	r3, r4, #1
   10622:	b2db      	uxtb	r3, r3
   10624:	2c00      	cmp	r4, #0
   10626:	d1f4      	bne.n	10612 <get+0xaa>
		if (octets && last) {
   10628:	b1c8      	cbz	r0, 1065e <get+0xf6>
   1062a:	b1c5      	cbz	r5, 1065e <get+0xf6>
			s = &rng->rand[0];
   1062c:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   1062e:	42a8      	cmp	r0, r5
   10630:	d206      	bcs.n	10640 <get+0xd8>
				remaining = last - octets;
   10632:	fa5f fe80 	uxtb.w	lr, r0
   10636:	eba5 040e 	sub.w	r4, r5, lr
   1063a:	fa5f fc84 	uxtb.w	ip, r4
   1063e:	e001      	b.n	10644 <get+0xdc>
				remaining = 0;
   10640:	46a4      	mov	ip, r4
	last = rng->last;
   10642:	46ae      	mov	lr, r5
			octets -= last;
   10644:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   10648:	4671      	mov	r1, lr
   1064a:	e004      	b.n	10656 <get+0xee>
				*(--d) = *s++;
   1064c:	7831      	ldrb	r1, [r6, #0]
   1064e:	f802 1d01 	strb.w	r1, [r2, #-1]!
   10652:	3601      	adds	r6, #1
			while (last--) {
   10654:	4619      	mov	r1, r3
   10656:	1e4b      	subs	r3, r1, #1
   10658:	b2db      	uxtb	r3, r3
   1065a:	2900      	cmp	r1, #0
   1065c:	d1f6      	bne.n	1064c <get+0xe4>
		rng->first = first;
   1065e:	f887 e002 	strb.w	lr, [r7, #2]
   10662:	e7b1      	b.n	105c8 <get+0x60>
   10664:	4000d000 	.word	0x4000d000

00010668 <rand_init>:
{
   10668:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   1066a:	4613      	mov	r3, r2
   1066c:	460a      	mov	r2, r1
   1066e:	4601      	mov	r1, r0
   10670:	4801      	ldr	r0, [pc, #4]	; (10678 <rand_init+0x10>)
   10672:	f7ff ff4f 	bl	10514 <init>
   10676:	bd08      	pop	{r3, pc}
   10678:	20000e48 	.word	0x20000e48

0001067c <rand_isr_init>:
{
   1067c:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   1067e:	4613      	mov	r3, r2
   10680:	460a      	mov	r2, r1
   10682:	4601      	mov	r1, r0
   10684:	4801      	ldr	r0, [pc, #4]	; (1068c <rand_isr_init+0x10>)
   10686:	f7ff ff45 	bl	10514 <init>
   1068a:	bd08      	pop	{r3, pc}
   1068c:	20000e44 	.word	0x20000e44

00010690 <rand_get>:
{
   10690:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   10692:	460a      	mov	r2, r1
   10694:	4601      	mov	r1, r0
   10696:	4b02      	ldr	r3, [pc, #8]	; (106a0 <rand_get+0x10>)
   10698:	6818      	ldr	r0, [r3, #0]
   1069a:	f7ff ff65 	bl	10568 <get>
}
   1069e:	bd08      	pop	{r3, pc}
   106a0:	20000e48 	.word	0x20000e48

000106a4 <rand_isr_get>:
{
   106a4:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   106a6:	460a      	mov	r2, r1
   106a8:	4601      	mov	r1, r0
   106aa:	4b02      	ldr	r3, [pc, #8]	; (106b4 <rand_isr_get+0x10>)
   106ac:	6818      	ldr	r0, [r3, #0]
   106ae:	f7ff ff5b 	bl	10568 <get>
}
   106b2:	bd08      	pop	{r3, pc}
   106b4:	20000e44 	.word	0x20000e44

000106b8 <isr_rand>:

void isr_rand(void *param)
{
   106b8:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   106ba:	4b10      	ldr	r3, [pc, #64]	; (106fc <isr_rand+0x44>)
   106bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   106c0:	b903      	cbnz	r3, 106c4 <isr_rand+0xc>
   106c2:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   106c4:	2101      	movs	r1, #1
   106c6:	4b0e      	ldr	r3, [pc, #56]	; (10700 <isr_rand+0x48>)
   106c8:	6818      	ldr	r0, [r3, #0]
   106ca:	f7ff fa79 	bl	fbc0 <isr>
		if (ret != -EBUSY) {
   106ce:	f110 0f10 	cmn.w	r0, #16
   106d2:	d008      	beq.n	106e6 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   106d4:	f110 0f69 	cmn.w	r0, #105	; 0x69
   106d8:	bf14      	ite	ne
   106da:	2100      	movne	r1, #0
   106dc:	2101      	moveq	r1, #1
   106de:	4b09      	ldr	r3, [pc, #36]	; (10704 <isr_rand+0x4c>)
   106e0:	6818      	ldr	r0, [r3, #0]
   106e2:	f7ff fa6d 	bl	fbc0 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   106e6:	2200      	movs	r2, #0
   106e8:	4b04      	ldr	r3, [pc, #16]	; (106fc <isr_rand+0x44>)
   106ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   106ee:	f110 0f10 	cmn.w	r0, #16
   106f2:	d0e6      	beq.n	106c2 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   106f4:	2201      	movs	r2, #1
   106f6:	605a      	str	r2, [r3, #4]
		}
	}
}
   106f8:	e7e3      	b.n	106c2 <isr_rand+0xa>
   106fa:	bf00      	nop
   106fc:	4000d000 	.word	0x4000d000
   10700:	20000e44 	.word	0x20000e44
   10704:	20000e48 	.word	0x20000e48

00010708 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   10708:	29ff      	cmp	r1, #255	; 0xff
   1070a:	d012      	beq.n	10732 <ticker_by_slot_get+0x2a>
{
   1070c:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   1070e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   10712:	00a3      	lsls	r3, r4, #2
   10714:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10716:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   10718:	42aa      	cmp	r2, r5
   1071a:	d906      	bls.n	1072a <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   1071c:	8ae4      	ldrh	r4, [r4, #22]
   1071e:	b92c      	cbnz	r4, 1072c <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   10720:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   10722:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   10724:	29ff      	cmp	r1, #255	; 0xff
   10726:	d1f2      	bne.n	1070e <ticker_by_slot_get+0x6>
   10728:	e000      	b.n	1072c <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   1072a:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   1072c:	4608      	mov	r0, r1
   1072e:	bc30      	pop	{r4, r5}
   10730:	4770      	bx	lr
   10732:	4608      	mov	r0, r1
   10734:	4770      	bx	lr

00010736 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   10736:	b5f0      	push	{r4, r5, r6, r7, lr}
   10738:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   1073a:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   1073c:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   10740:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   10742:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   10746:	d004      	beq.n	10752 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   10748:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   1074a:	f8dc 4000 	ldr.w	r4, [ip]
   1074e:	4294      	cmp	r4, r2
   10750:	d005      	beq.n	1075e <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   10752:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   10754:	6940      	ldr	r0, [r0, #20]
   10756:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   1075a:	2600      	movs	r6, #0
   1075c:	e00a      	b.n	10774 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   1075e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   10762:	ea4f 028e 	mov.w	r2, lr, lsl #2
   10766:	4696      	mov	lr, r2
   10768:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   1076a:	5cbc      	ldrb	r4, [r7, r2]
   1076c:	e002      	b.n	10774 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   1076e:	68a8      	ldr	r0, [r5, #8]
   10770:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   10772:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   10774:	2cff      	cmp	r4, #255	; 0xff
   10776:	d006      	beq.n	10786 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   10778:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   1077c:	0082      	lsls	r2, r0, #2
   1077e:	18bd      	adds	r5, r7, r2
   10780:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   10782:	2800      	cmp	r0, #0
   10784:	d0f3      	beq.n	1076e <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   10786:	2cff      	cmp	r4, #255	; 0xff
   10788:	d001      	beq.n	1078e <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   1078a:	68aa      	ldr	r2, [r5, #8]
   1078c:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   1078e:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   10790:	601e      	str	r6, [r3, #0]
   10792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010794 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   10794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10798:	b085      	sub	sp, #20
   1079a:	4681      	mov	r9, r0
   1079c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   1079e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   107a0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   107a4:	009b      	lsls	r3, r3, #2
   107a6:	9303      	str	r3, [sp, #12]
   107a8:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   107ac:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   107b0:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   107b4:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   107b6:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   107b8:	23ff      	movs	r3, #255	; 0xff
   107ba:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   107bc:	e004      	b.n	107c8 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   107be:	4297      	cmp	r7, r2
   107c0:	d912      	bls.n	107e8 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   107c2:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   107c4:	46a0      	mov	r8, r4
		current = ticker_current->next;
   107c6:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   107c8:	2cff      	cmp	r4, #255	; 0xff
   107ca:	d00f      	beq.n	107ec <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   107cc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   107d0:	0093      	lsls	r3, r2, #2
   107d2:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   107d4:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   107d6:	4295      	cmp	r5, r2
   107d8:	d908      	bls.n	107ec <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   107da:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   107dc:	8ac9      	ldrh	r1, [r1, #22]
   107de:	2900      	cmp	r1, #0
   107e0:	d0ed      	beq.n	107be <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   107e2:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   107e4:	9401      	str	r4, [sp, #4]
   107e6:	e7ed      	b.n	107c4 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   107e8:	2700      	movs	r7, #0
   107ea:	e7eb      	b.n	107c4 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   107ec:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   107f0:	eb05 020b 	add.w	r2, r5, fp
   107f4:	4621      	mov	r1, r4
   107f6:	4630      	mov	r0, r6
   107f8:	f7ff ff86 	bl	10708 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   107fc:	f1bb 0f00 	cmp.w	fp, #0
   10800:	d007      	beq.n	10812 <ticker_enqueue+0x7e>
   10802:	42af      	cmp	r7, r5
   10804:	d801      	bhi.n	1080a <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   10806:	28ff      	cmp	r0, #255	; 0xff
   10808:	d003      	beq.n	10812 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   1080a:	42af      	cmp	r7, r5
   1080c:	d918      	bls.n	10840 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   1080e:	9801      	ldr	r0, [sp, #4]
   10810:	e016      	b.n	10840 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   10812:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   10816:	9b03      	ldr	r3, [sp, #12]
   10818:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   1081a:	45a0      	cmp	r8, r4
   1081c:	d013      	beq.n	10846 <ticker_enqueue+0xb2>
			node[previous].next = id;
   1081e:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   10822:	ea4f 0388 	mov.w	r3, r8, lsl #2
   10826:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1082a:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   1082c:	2cff      	cmp	r4, #255	; 0xff
   1082e:	d00f      	beq.n	10850 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   10830:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10834:	00a3      	lsls	r3, r4, #2
   10836:	441e      	add	r6, r3
   10838:	68b3      	ldr	r3, [r6, #8]
   1083a:	1b5d      	subs	r5, r3, r5
   1083c:	60b5      	str	r5, [r6, #8]
   1083e:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   10840:	b005      	add	sp, #20
   10842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   10846:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1084a:	f889 3018 	strb.w	r3, [r9, #24]
   1084e:	e7ed      	b.n	1082c <ticker_enqueue+0x98>
   10850:	9802      	ldr	r0, [sp, #8]
   10852:	e7f5      	b.n	10840 <ticker_enqueue+0xac>

00010854 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   10854:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   10856:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   10858:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   1085a:	463b      	mov	r3, r7
	total = 0;
   1085c:	2500      	movs	r5, #0
	ticker_current = 0;
   1085e:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   10860:	2bff      	cmp	r3, #255	; 0xff
   10862:	d00a      	beq.n	1087a <ticker_dequeue+0x26>

		ticker_current = &node[current];
   10864:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   10868:	00a2      	lsls	r2, r4, #2
   1086a:	18b4      	adds	r4, r6, r2

		if (current == id) {
   1086c:	428b      	cmp	r3, r1
   1086e:	d004      	beq.n	1087a <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10870:	68a7      	ldr	r7, [r4, #8]
   10872:	443d      	add	r5, r7
		previous = current;
   10874:	461f      	mov	r7, r3
		current = ticker_current->next;
   10876:	5cb3      	ldrb	r3, [r6, r2]
   10878:	e7f2      	b.n	10860 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   1087a:	2bff      	cmp	r3, #255	; 0xff
   1087c:	d017      	beq.n	108ae <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   1087e:	429f      	cmp	r7, r3
   10880:	d012      	beq.n	108a8 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   10882:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   10884:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   10888:	00bb      	lsls	r3, r7, #2
   1088a:	7822      	ldrb	r2, [r4, #0]
   1088c:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   1088e:	7823      	ldrb	r3, [r4, #0]
   10890:	2bff      	cmp	r3, #255	; 0xff
   10892:	d006      	beq.n	108a2 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   10894:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10898:	009a      	lsls	r2, r3, #2
   1089a:	4416      	add	r6, r2
   1089c:	68b3      	ldr	r3, [r6, #8]
   1089e:	4403      	add	r3, r0
   108a0:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   108a2:	4428      	add	r0, r5
}
   108a4:	bcf0      	pop	{r4, r5, r6, r7}
   108a6:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   108a8:	7823      	ldrb	r3, [r4, #0]
   108aa:	7603      	strb	r3, [r0, #24]
   108ac:	e7e9      	b.n	10882 <ticker_dequeue+0x2e>
		return 0;
   108ae:	2000      	movs	r0, #0
   108b0:	e7f8      	b.n	108a4 <ticker_dequeue+0x50>
	...

000108b4 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   108b4:	69c3      	ldr	r3, [r0, #28]
   108b6:	6a02      	ldr	r2, [r0, #32]
   108b8:	4413      	add	r3, r2
   108ba:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   108bc:	4a05      	ldr	r2, [pc, #20]	; (108d4 <ticker_remainder_inc+0x20>)
   108be:	441a      	add	r2, r3
   108c0:	4905      	ldr	r1, [pc, #20]	; (108d8 <ticker_remainder_inc+0x24>)
   108c2:	428a      	cmp	r2, r1
   108c4:	d804      	bhi.n	108d0 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   108c6:	4a05      	ldr	r2, [pc, #20]	; (108dc <ticker_remainder_inc+0x28>)
   108c8:	441a      	add	r2, r3
   108ca:	6202      	str	r2, [r0, #32]
		return 1;
   108cc:	2001      	movs	r0, #1
   108ce:	4770      	bx	lr
	}
	return 0;
   108d0:	2000      	movs	r0, #0
}
   108d2:	4770      	bx	lr
   108d4:	ff172b5a 	.word	0xff172b5a
   108d8:	7f172b59 	.word	0x7f172b59
   108dc:	fe2e56b6 	.word	0xfe2e56b6

000108e0 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   108e0:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   108e2:	6a01      	ldr	r1, [r0, #32]
   108e4:	4a07      	ldr	r2, [pc, #28]	; (10904 <ticker_remainder_dec+0x24>)
   108e6:	440a      	add	r2, r1
   108e8:	4807      	ldr	r0, [pc, #28]	; (10908 <ticker_remainder_dec+0x28>)
   108ea:	4282      	cmp	r2, r0
   108ec:	d908      	bls.n	10900 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   108ee:	4a07      	ldr	r2, [pc, #28]	; (1090c <ticker_remainder_dec+0x2c>)
   108f0:	440a      	add	r2, r1
   108f2:	621a      	str	r2, [r3, #32]
		decrement++;
   108f4:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   108f6:	69d9      	ldr	r1, [r3, #28]
   108f8:	6a1a      	ldr	r2, [r3, #32]
   108fa:	1a52      	subs	r2, r2, r1
   108fc:	621a      	str	r2, [r3, #32]

	return decrement;
}
   108fe:	4770      	bx	lr
	u8_t decrement = 0;
   10900:	2000      	movs	r0, #0
   10902:	e7f8      	b.n	108f6 <ticker_remainder_dec+0x16>
   10904:	ff172b5a 	.word	0xff172b5a
   10908:	7f172b59 	.word	0x7f172b59
   1090c:	01d1a94a 	.word	0x01d1a94a

00010910 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   10910:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10912:	2300      	movs	r3, #0
   10914:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   10916:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   10918:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1091a:	b11c      	cbz	r4, 10924 <ticker_job_op_cb+0x14>
   1091c:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1091e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10920:	4610      	mov	r0, r2
   10922:	47a0      	blx	r4
   10924:	bd10      	pop	{r4, pc}

00010926 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   10926:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   10928:	4601      	mov	r1, r0
   1092a:	2001      	movs	r0, #1
   1092c:	f7fe fd3e 	bl	f3ac <cntr_cmp_set>
   10930:	bd08      	pop	{r3, pc}

00010932 <ticker_instance0_cmp_set>:
{
   10932:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   10934:	4601      	mov	r1, r0
   10936:	2000      	movs	r0, #0
   10938:	f7fe fd38 	bl	f3ac <cntr_cmp_set>
   1093c:	bd08      	pop	{r3, pc}
	...

00010940 <ticker_instance1_sched>:
{
   10940:	b508      	push	{r3, lr}
	switch (caller_id) {
   10942:	2803      	cmp	r0, #3
   10944:	d841      	bhi.n	109ca <ticker_instance1_sched+0x8a>
   10946:	e8df f000 	tbb	[pc, r0]
   1094a:	1002      	.short	0x1002
   1094c:	331d      	.short	0x331d
		switch (callee_id) {
   1094e:	2901      	cmp	r1, #1
   10950:	d105      	bne.n	1095e <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10952:	4b21      	ldr	r3, [pc, #132]	; (109d8 <ticker_instance1_sched+0x98>)
   10954:	2102      	movs	r1, #2
   10956:	2000      	movs	r0, #0
   10958:	f7fe fb10 	bl	ef7c <mayfly_enqueue>
		break;
   1095c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1095e:	4040      	eors	r0, r0
   10960:	f380 8811 	msr	BASEPRI, r0
   10964:	f04f 0004 	mov.w	r0, #4
   10968:	df02      	svc	2
		switch (callee_id) {
   1096a:	2902      	cmp	r1, #2
   1096c:	d104      	bne.n	10978 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1096e:	4b1b      	ldr	r3, [pc, #108]	; (109dc <ticker_instance1_sched+0x9c>)
   10970:	4608      	mov	r0, r1
   10972:	f7fe fb03 	bl	ef7c <mayfly_enqueue>
		break;
   10976:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10978:	4040      	eors	r0, r0
   1097a:	f380 8811 	msr	BASEPRI, r0
   1097e:	f04f 0004 	mov.w	r0, #4
   10982:	df02      	svc	2
		switch (callee_id) {
   10984:	2901      	cmp	r1, #1
   10986:	d007      	beq.n	10998 <ticker_instance1_sched+0x58>
   10988:	2902      	cmp	r1, #2
   1098a:	d00b      	beq.n	109a4 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   1098c:	4040      	eors	r0, r0
   1098e:	f380 8811 	msr	BASEPRI, r0
   10992:	f04f 0004 	mov.w	r0, #4
   10996:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10998:	4b11      	ldr	r3, [pc, #68]	; (109e0 <ticker_instance1_sched+0xa0>)
   1099a:	2102      	movs	r1, #2
   1099c:	4608      	mov	r0, r1
   1099e:	f7fe faed 	bl	ef7c <mayfly_enqueue>
		break;
   109a2:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   109a4:	4b0f      	ldr	r3, [pc, #60]	; (109e4 <ticker_instance1_sched+0xa4>)
   109a6:	2102      	movs	r1, #2
   109a8:	4608      	mov	r0, r1
   109aa:	f7fe fae7 	bl	ef7c <mayfly_enqueue>
		break;
   109ae:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   109b0:	2902      	cmp	r1, #2
   109b2:	d104      	bne.n	109be <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   109b4:	4b0c      	ldr	r3, [pc, #48]	; (109e8 <ticker_instance1_sched+0xa8>)
   109b6:	2003      	movs	r0, #3
   109b8:	f7fe fae0 	bl	ef7c <mayfly_enqueue>
		break;
   109bc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   109be:	4040      	eors	r0, r0
   109c0:	f380 8811 	msr	BASEPRI, r0
   109c4:	f04f 0004 	mov.w	r0, #4
   109c8:	df02      	svc	2
		LL_ASSERT(0);
   109ca:	4040      	eors	r0, r0
   109cc:	f380 8811 	msr	BASEPRI, r0
   109d0:	f04f 0004 	mov.w	r0, #4
   109d4:	df02      	svc	2
   109d6:	bf00      	nop
   109d8:	2000bbc8 	.word	0x2000bbc8
   109dc:	2000bbd8 	.word	0x2000bbd8
   109e0:	2000bbe8 	.word	0x2000bbe8
   109e4:	2000bbf8 	.word	0x2000bbf8
   109e8:	2000bc08 	.word	0x2000bc08

000109ec <ticker_instance1_caller_id_get>:
	switch (user_id) {
   109ec:	1e83      	subs	r3, r0, #2
   109ee:	2b01      	cmp	r3, #1
   109f0:	d800      	bhi.n	109f4 <ticker_instance1_caller_id_get+0x8>
}
   109f2:	4770      	bx	lr
		LL_ASSERT(0);
   109f4:	4040      	eors	r0, r0
   109f6:	f380 8811 	msr	BASEPRI, r0
   109fa:	f04f 0004 	mov.w	r0, #4
   109fe:	df02      	svc	2

00010a00 <ticker_instance0_sched>:
{
   10a00:	b508      	push	{r3, lr}
	switch (caller_id) {
   10a02:	2803      	cmp	r0, #3
   10a04:	d843      	bhi.n	10a8e <ticker_instance0_sched+0x8e>
   10a06:	e8df f000 	tbb	[pc, r0]
   10a0a:	1002      	.short	0x1002
   10a0c:	341e      	.short	0x341e
		switch (callee_id) {
   10a0e:	2901      	cmp	r1, #1
   10a10:	d105      	bne.n	10a1e <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10a12:	4b22      	ldr	r3, [pc, #136]	; (10a9c <ticker_instance0_sched+0x9c>)
   10a14:	2100      	movs	r1, #0
   10a16:	4608      	mov	r0, r1
   10a18:	f7fe fab0 	bl	ef7c <mayfly_enqueue>
		break;
   10a1c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10a1e:	4040      	eors	r0, r0
   10a20:	f380 8811 	msr	BASEPRI, r0
   10a24:	f04f 0004 	mov.w	r0, #4
   10a28:	df02      	svc	2
		switch (callee_id) {
   10a2a:	2902      	cmp	r1, #2
   10a2c:	d105      	bne.n	10a3a <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10a2e:	4b1c      	ldr	r3, [pc, #112]	; (10aa0 <ticker_instance0_sched+0xa0>)
   10a30:	2101      	movs	r1, #1
   10a32:	2000      	movs	r0, #0
   10a34:	f7fe faa2 	bl	ef7c <mayfly_enqueue>
		break;
   10a38:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10a3a:	4040      	eors	r0, r0
   10a3c:	f380 8811 	msr	BASEPRI, r0
   10a40:	f04f 0004 	mov.w	r0, #4
   10a44:	df02      	svc	2
		switch (callee_id) {
   10a46:	2901      	cmp	r1, #1
   10a48:	d007      	beq.n	10a5a <ticker_instance0_sched+0x5a>
   10a4a:	2902      	cmp	r1, #2
   10a4c:	d00b      	beq.n	10a66 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   10a4e:	4040      	eors	r0, r0
   10a50:	f380 8811 	msr	BASEPRI, r0
   10a54:	f04f 0004 	mov.w	r0, #4
   10a58:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10a5a:	4b12      	ldr	r3, [pc, #72]	; (10aa4 <ticker_instance0_sched+0xa4>)
   10a5c:	2100      	movs	r1, #0
   10a5e:	2001      	movs	r0, #1
   10a60:	f7fe fa8c 	bl	ef7c <mayfly_enqueue>
		break;
   10a64:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10a66:	4b10      	ldr	r3, [pc, #64]	; (10aa8 <ticker_instance0_sched+0xa8>)
   10a68:	2101      	movs	r1, #1
   10a6a:	4608      	mov	r0, r1
   10a6c:	f7fe fa86 	bl	ef7c <mayfly_enqueue>
		break;
   10a70:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10a72:	2902      	cmp	r1, #2
   10a74:	d105      	bne.n	10a82 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10a76:	4b0d      	ldr	r3, [pc, #52]	; (10aac <ticker_instance0_sched+0xac>)
   10a78:	2101      	movs	r1, #1
   10a7a:	2003      	movs	r0, #3
   10a7c:	f7fe fa7e 	bl	ef7c <mayfly_enqueue>
		break;
   10a80:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10a82:	4040      	eors	r0, r0
   10a84:	f380 8811 	msr	BASEPRI, r0
   10a88:	f04f 0004 	mov.w	r0, #4
   10a8c:	df02      	svc	2
		LL_ASSERT(0);
   10a8e:	4040      	eors	r0, r0
   10a90:	f380 8811 	msr	BASEPRI, r0
   10a94:	f04f 0004 	mov.w	r0, #4
   10a98:	df02      	svc	2
   10a9a:	bf00      	nop
   10a9c:	2000bb78 	.word	0x2000bb78
   10aa0:	2000bb88 	.word	0x2000bb88
   10aa4:	2000bb98 	.word	0x2000bb98
   10aa8:	2000bba8 	.word	0x2000bba8
   10aac:	2000bbb8 	.word	0x2000bbb8

00010ab0 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10ab0:	2801      	cmp	r0, #1
   10ab2:	d00a      	beq.n	10aca <ticker_instance0_caller_id_get+0x1a>
   10ab4:	b138      	cbz	r0, 10ac6 <ticker_instance0_caller_id_get+0x16>
   10ab6:	2803      	cmp	r0, #3
   10ab8:	d008      	beq.n	10acc <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10aba:	4040      	eors	r0, r0
   10abc:	f380 8811 	msr	BASEPRI, r0
   10ac0:	f04f 0004 	mov.w	r0, #4
   10ac4:	df02      	svc	2
		return CALL_ID_WORKER;
   10ac6:	2001      	movs	r0, #1
   10ac8:	4770      	bx	lr
		return CALL_ID_JOB;
   10aca:	2002      	movs	r0, #2
}
   10acc:	4770      	bx	lr
	...

00010ad0 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ad2:	9d05      	ldr	r5, [sp, #20]
   10ad4:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10ad8:	4606      	mov	r6, r0
   10ada:	b118      	cbz	r0, 10ae4 <ticker_init+0x14>
   10adc:	2801      	cmp	r0, #1
   10ade:	d019      	beq.n	10b14 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10ae0:	2001      	movs	r0, #1
   10ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10ae4:	202c      	movs	r0, #44	; 0x2c
   10ae6:	4f20      	ldr	r7, [pc, #128]	; (10b68 <ticker_init+0x98>)
   10ae8:	fb00 7006 	mla	r0, r0, r6, r7
   10aec:	4f1f      	ldr	r7, [pc, #124]	; (10b6c <ticker_init+0x9c>)
   10aee:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10af0:	4f1f      	ldr	r7, [pc, #124]	; (10b70 <ticker_init+0xa0>)
   10af2:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10af4:	4f1f      	ldr	r7, [pc, #124]	; (10b74 <ticker_init+0xa4>)
   10af6:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10af8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10b68 <ticker_init+0x98>
   10afc:	202c      	movs	r0, #44	; 0x2c
   10afe:	fb00 f006 	mul.w	r0, r0, r6
   10b02:	eb0e 0700 	add.w	r7, lr, r0
   10b06:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10b08:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10b0c:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10b0e:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10b10:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10b12:	e015      	b.n	10b40 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10b14:	202c      	movs	r0, #44	; 0x2c
   10b16:	4f14      	ldr	r7, [pc, #80]	; (10b68 <ticker_init+0x98>)
   10b18:	fb00 7006 	mla	r0, r0, r6, r7
   10b1c:	4f16      	ldr	r7, [pc, #88]	; (10b78 <ticker_init+0xa8>)
   10b1e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10b20:	4f16      	ldr	r7, [pc, #88]	; (10b7c <ticker_init+0xac>)
   10b22:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10b24:	4f16      	ldr	r7, [pc, #88]	; (10b80 <ticker_init+0xb0>)
   10b26:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10b28:	e7e6      	b.n	10af8 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   10b2a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10b2e:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10b30:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   10b34:	202c      	movs	r0, #44	; 0x2c
   10b36:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10b3a:	1ae3      	subs	r3, r4, r3
   10b3c:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10b3e:	4613      	mov	r3, r2
   10b40:	1e5a      	subs	r2, r3, #1
   10b42:	b2d2      	uxtb	r2, r2
   10b44:	2b00      	cmp	r3, #0
   10b46:	d1f0      	bne.n	10b2a <ticker_init+0x5a>
	}

	if (count_op) {
   10b48:	b964      	cbnz	r4, 10b64 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10b4a:	222c      	movs	r2, #44	; 0x2c
   10b4c:	4b06      	ldr	r3, [pc, #24]	; (10b68 <ticker_init+0x98>)
   10b4e:	fb02 3606 	mla	r6, r2, r6, r3
   10b52:	23ff      	movs	r3, #255	; 0xff
   10b54:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10b56:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10b58:	2000      	movs	r0, #0
   10b5a:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10b5c:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10b5e:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10b60:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   10b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10b64:	2001      	movs	r0, #1
}
   10b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b68:	20000e4c 	.word	0x20000e4c
   10b6c:	00010ab1 	.word	0x00010ab1
   10b70:	00010a01 	.word	0x00010a01
   10b74:	00010933 	.word	0x00010933
   10b78:	000109ed 	.word	0x000109ed
   10b7c:	00010941 	.word	0x00010941
   10b80:	00010927 	.word	0x00010927

00010b84 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   10b84:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   10b86:	232c      	movs	r3, #44	; 0x2c
   10b88:	4a04      	ldr	r2, [pc, #16]	; (10b9c <ticker_trigger+0x18>)
   10b8a:	fb03 2000 	mla	r0, r3, r0, r2
   10b8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10b90:	b11b      	cbz	r3, 10b9a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10b92:	2201      	movs	r2, #1
   10b94:	4611      	mov	r1, r2
   10b96:	2000      	movs	r0, #0
   10b98:	4798      	blx	r3
   10b9a:	bd08      	pop	{r3, pc}
   10b9c:	20000e4c 	.word	0x20000e4c

00010ba0 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10ba4:	242c      	movs	r4, #44	; 0x2c
   10ba6:	4d24      	ldr	r5, [pc, #144]	; (10c38 <ticker_start+0x98>)
   10ba8:	fb04 5400 	mla	r4, r4, r0, r5
   10bac:	6866      	ldr	r6, [r4, #4]
   10bae:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10bb2:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10bb6:	1c65      	adds	r5, r4, #1
   10bb8:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10bba:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10bbe:	42b5      	cmp	r5, r6
   10bc0:	d300      	bcc.n	10bc4 <ticker_start+0x24>
		last = 0;
   10bc2:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10bc4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10bc8:	42b5      	cmp	r5, r6
   10bca:	d032      	beq.n	10c32 <ticker_start+0x92>
   10bcc:	469c      	mov	ip, r3
   10bce:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10bd0:	f8de 3004 	ldr.w	r3, [lr, #4]
   10bd4:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10bd8:	fb08 f604 	mul.w	r6, r8, r4
   10bdc:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10bde:	2003      	movs	r0, #3
   10be0:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10be2:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10be4:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10be8:	9b06      	ldr	r3, [sp, #24]
   10bea:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10bec:	9b07      	ldr	r3, [sp, #28]
   10bee:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10bf0:	9b08      	ldr	r3, [sp, #32]
   10bf2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10bf4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10bf8:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10bfa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10bfe:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c02:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10c06:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10c08:	2602      	movs	r6, #2
   10c0a:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c0e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10c12:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10c14:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c18:	4b07      	ldr	r3, [pc, #28]	; (10c38 <ticker_start+0x98>)
   10c1a:	fb08 3307 	mla	r3, r8, r7, r3
   10c1e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10c20:	6a1b      	ldr	r3, [r3, #32]
   10c22:	4608      	mov	r0, r1
   10c24:	4798      	blx	r3
   10c26:	2200      	movs	r2, #0
   10c28:	4631      	mov	r1, r6
   10c2a:	47a8      	blx	r5

	return user_op->status;
   10c2c:	6a20      	ldr	r0, [r4, #32]
   10c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10c32:	2001      	movs	r0, #1
}
   10c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c38:	20000e4c 	.word	0x20000e4c

00010c3c <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10c40:	242c      	movs	r4, #44	; 0x2c
   10c42:	4d24      	ldr	r5, [pc, #144]	; (10cd4 <ticker_update+0x98>)
   10c44:	fb04 5400 	mla	r4, r4, r0, r5
   10c48:	6866      	ldr	r6, [r4, #4]
   10c4a:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10c4e:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10c52:	1c65      	adds	r5, r4, #1
   10c54:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10c56:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10c5a:	42b5      	cmp	r5, r6
   10c5c:	d300      	bcc.n	10c60 <ticker_update+0x24>
		last = 0;
   10c5e:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10c60:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10c64:	42b5      	cmp	r5, r6
   10c66:	d031      	beq.n	10ccc <ticker_update+0x90>
   10c68:	469c      	mov	ip, r3
   10c6a:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10c6c:	f8de 3004 	ldr.w	r3, [lr, #4]
   10c70:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10c74:	fb08 f604 	mul.w	r6, r8, r4
   10c78:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10c7a:	2004      	movs	r0, #4
   10c7c:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10c7e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10c80:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10c84:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10c88:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10c8a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10c8e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10c90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10c94:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10c96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10c9a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10c9c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10ca0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10ca2:	2602      	movs	r6, #2
   10ca4:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10ca8:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10cac:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10cae:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10cb2:	4b08      	ldr	r3, [pc, #32]	; (10cd4 <ticker_update+0x98>)
   10cb4:	fb08 3307 	mla	r3, r8, r7, r3
   10cb8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10cba:	6a1b      	ldr	r3, [r3, #32]
   10cbc:	4608      	mov	r0, r1
   10cbe:	4798      	blx	r3
   10cc0:	2200      	movs	r2, #0
   10cc2:	4631      	mov	r1, r6
   10cc4:	47a8      	blx	r5

	return user_op->status;
   10cc6:	6a20      	ldr	r0, [r4, #32]
   10cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10ccc:	2001      	movs	r0, #1
}
   10cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cd2:	bf00      	nop
   10cd4:	20000e4c 	.word	0x20000e4c

00010cd8 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10cdc:	242c      	movs	r4, #44	; 0x2c
   10cde:	4d1b      	ldr	r5, [pc, #108]	; (10d4c <ticker_stop+0x74>)
   10ce0:	fb04 5400 	mla	r4, r4, r0, r5
   10ce4:	6866      	ldr	r6, [r4, #4]
   10ce6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10cea:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10cee:	1c6c      	adds	r4, r5, #1
   10cf0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10cf2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10cf6:	42b4      	cmp	r4, r6
   10cf8:	d300      	bcc.n	10cfc <ticker_stop+0x24>
		last = 0;
   10cfa:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10cfc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10d00:	42b4      	cmp	r4, r6
   10d02:	d020      	beq.n	10d46 <ticker_stop+0x6e>
   10d04:	4698      	mov	r8, r3
   10d06:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10d08:	f8de 3004 	ldr.w	r3, [lr, #4]
   10d0c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10d10:	fb0c f505 	mul.w	r5, ip, r5
   10d14:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10d16:	2005      	movs	r0, #5
   10d18:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10d1a:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10d1c:	2502      	movs	r5, #2
   10d1e:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10d20:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10d24:	9b06      	ldr	r3, [sp, #24]
   10d26:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10d28:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10d2c:	4b07      	ldr	r3, [pc, #28]	; (10d4c <ticker_stop+0x74>)
   10d2e:	fb0c 3307 	mla	r3, ip, r7, r3
   10d32:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10d34:	6a1b      	ldr	r3, [r3, #32]
   10d36:	4608      	mov	r0, r1
   10d38:	4798      	blx	r3
   10d3a:	2200      	movs	r2, #0
   10d3c:	4629      	mov	r1, r5
   10d3e:	47a0      	blx	r4

	return user_op->status;
   10d40:	6a30      	ldr	r0, [r6, #32]
   10d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10d46:	2001      	movs	r0, #1
}
   10d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d4c:	20000e4c 	.word	0x20000e4c

00010d50 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d54:	242c      	movs	r4, #44	; 0x2c
   10d56:	4d1f      	ldr	r5, [pc, #124]	; (10dd4 <ticker_next_slot_get+0x84>)
   10d58:	fb04 5400 	mla	r4, r4, r0, r5
   10d5c:	6866      	ldr	r6, [r4, #4]
   10d5e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d62:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10d66:	1c6c      	adds	r4, r5, #1
   10d68:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10d6a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10d6e:	42b4      	cmp	r4, r6
   10d70:	d300      	bcc.n	10d74 <ticker_next_slot_get+0x24>
		last = 0;
   10d72:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10d74:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10d78:	42b4      	cmp	r4, r6
   10d7a:	d027      	beq.n	10dcc <ticker_next_slot_get+0x7c>
   10d7c:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10d7e:	f8de 3004 	ldr.w	r3, [lr, #4]
   10d82:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10d86:	fb09 f605 	mul.w	r6, r9, r5
   10d8a:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10d8c:	f04f 0802 	mov.w	r8, #2
   10d90:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10d94:	23ff      	movs	r3, #255	; 0xff
   10d96:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10d98:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10d9a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10d9e:	9b08      	ldr	r3, [sp, #32]
   10da0:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10da2:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10da8:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10dac:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10dae:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10db2:	4b08      	ldr	r3, [pc, #32]	; (10dd4 <ticker_next_slot_get+0x84>)
   10db4:	fb09 3300 	mla	r3, r9, r0, r3
   10db8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10dba:	6a1b      	ldr	r3, [r3, #32]
   10dbc:	4608      	mov	r0, r1
   10dbe:	4798      	blx	r3
   10dc0:	2200      	movs	r2, #0
   10dc2:	4641      	mov	r1, r8
   10dc4:	47a0      	blx	r4

	return user_op->status;
   10dc6:	6a28      	ldr	r0, [r5, #32]
   10dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10dcc:	2001      	movs	r0, #1
}
   10dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10dd2:	bf00      	nop
   10dd4:	20000e4c 	.word	0x20000e4c

00010dd8 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10ddc:	242c      	movs	r4, #44	; 0x2c
   10dde:	4d1b      	ldr	r5, [pc, #108]	; (10e4c <ticker_job_idle_get+0x74>)
   10de0:	fb04 5400 	mla	r4, r4, r0, r5
   10de4:	6866      	ldr	r6, [r4, #4]
   10de6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10dea:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10dee:	1c6c      	adds	r4, r5, #1
   10df0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10df2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10df6:	42b4      	cmp	r4, r6
   10df8:	d300      	bcc.n	10dfc <ticker_job_idle_get+0x24>
		last = 0;
   10dfa:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10dfc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10e00:	42b4      	cmp	r4, r6
   10e02:	d020      	beq.n	10e46 <ticker_job_idle_get+0x6e>
   10e04:	4698      	mov	r8, r3
   10e06:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10e08:	f8de 3004 	ldr.w	r3, [lr, #4]
   10e0c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10e10:	fb0c f505 	mul.w	r5, ip, r5
   10e14:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10e16:	2001      	movs	r0, #1
   10e18:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10e1a:	23ff      	movs	r3, #255	; 0xff
   10e1c:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10e1e:	2502      	movs	r5, #2
   10e20:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10e22:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10e24:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10e28:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e2c:	4b07      	ldr	r3, [pc, #28]	; (10e4c <ticker_job_idle_get+0x74>)
   10e2e:	fb0c 3307 	mla	r3, ip, r7, r3
   10e32:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10e34:	6a1b      	ldr	r3, [r3, #32]
   10e36:	4608      	mov	r0, r1
   10e38:	4798      	blx	r3
   10e3a:	2200      	movs	r2, #0
   10e3c:	4629      	mov	r1, r5
   10e3e:	47a0      	blx	r4

	return user_op->status;
   10e40:	6a30      	ldr	r0, [r6, #32]
   10e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10e46:	2001      	movs	r0, #1
}
   10e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e4c:	20000e4c 	.word	0x20000e4c

00010e50 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10e50:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e52:	232c      	movs	r3, #44	; 0x2c
   10e54:	4a05      	ldr	r2, [pc, #20]	; (10e6c <ticker_job_sched+0x1c>)
   10e56:	fb03 2000 	mla	r0, r3, r0, r2
   10e5a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10e5c:	6a03      	ldr	r3, [r0, #32]
   10e5e:	4608      	mov	r0, r1
   10e60:	4798      	blx	r3
   10e62:	2200      	movs	r2, #0
   10e64:	2102      	movs	r1, #2
   10e66:	47a0      	blx	r4
   10e68:	bd10      	pop	{r4, pc}
   10e6a:	bf00      	nop
   10e6c:	20000e4c 	.word	0x20000e4c

00010e70 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10e70:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   10e72:	f7fe fa95 	bl	f3a0 <cntr_cnt_get>
}
   10e76:	bd08      	pop	{r3, pc}

00010e78 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10e78:	1a40      	subs	r0, r0, r1
}
   10e7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10e7e:	4770      	bx	lr

00010e80 <ticker_worker>:
{
   10e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   10e84:	2301      	movs	r3, #1
   10e86:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10e88:	f890 901c 	ldrb.w	r9, [r0, #28]
   10e8c:	f1b9 0f00 	cmp.w	r9, #0
   10e90:	d147      	bne.n	10f22 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   10e92:	7e03      	ldrb	r3, [r0, #24]
   10e94:	2bff      	cmp	r3, #255	; 0xff
   10e96:	d030      	beq.n	10efa <ticker_worker+0x7a>
   10e98:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10e9a:	f7fe fa81 	bl	f3a0 <cntr_cnt_get>
   10e9e:	6979      	ldr	r1, [r7, #20]
   10ea0:	f7ff ffea 	bl	10e78 <ticker_ticks_diff_get>
   10ea4:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   10ea6:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10ea8:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   10eac:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   10eae:	2cff      	cmp	r4, #255	; 0xff
   10eb0:	d027      	beq.n	10f02 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   10eb2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10eb6:	00a3      	lsls	r3, r4, #2
   10eb8:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10ebc:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10ebe:	4295      	cmp	r5, r2
   10ec0:	d31f      	bcc.n	10f02 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   10ec2:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   10ec4:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   10ec6:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10eca:	784b      	ldrb	r3, [r1, #1]
   10ecc:	788a      	ldrb	r2, [r1, #2]
   10ece:	1a9b      	subs	r3, r3, r2
   10ed0:	b2db      	uxtb	r3, r3
   10ed2:	2b01      	cmp	r3, #1
   10ed4:	d1eb      	bne.n	10eae <ticker_worker+0x2e>
		ticker->ack--;
   10ed6:	3a01      	subs	r2, #1
   10ed8:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   10eda:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   10ede:	f1ba 0f00 	cmp.w	sl, #0
   10ee2:	d0e4      	beq.n	10eae <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   10ee4:	6978      	ldr	r0, [r7, #20]
   10ee6:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   10ee8:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   10eea:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   10eec:	690b      	ldr	r3, [r1, #16]
   10eee:	8b4a      	ldrh	r2, [r1, #26]
   10ef0:	6a09      	ldr	r1, [r1, #32]
   10ef2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10ef6:	47d0      	blx	sl
   10ef8:	e7d9      	b.n	10eae <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   10efa:	2300      	movs	r3, #0
   10efc:	7743      	strb	r3, [r0, #29]
		return;
   10efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10f02:	7aba      	ldrb	r2, [r7, #10]
   10f04:	7afb      	ldrb	r3, [r7, #11]
   10f06:	429a      	cmp	r2, r3
   10f08:	d00d      	beq.n	10f26 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10f0a:	7afb      	ldrb	r3, [r7, #11]
   10f0c:	3302      	adds	r3, #2
   10f0e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10f12:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   10f14:	2300      	movs	r3, #0
   10f16:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   10f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10f1a:	2201      	movs	r2, #1
   10f1c:	2102      	movs	r1, #2
   10f1e:	4610      	mov	r0, r2
   10f20:	4798      	blx	r3
   10f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   10f26:	3301      	adds	r3, #1
   10f28:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   10f2a:	2b02      	cmp	r3, #2
   10f2c:	d001      	beq.n	10f32 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   10f2e:	72fb      	strb	r3, [r7, #11]
   10f30:	e7eb      	b.n	10f0a <ticker_worker+0x8a>
			last = 0;
   10f32:	464b      	mov	r3, r9
   10f34:	e7fb      	b.n	10f2e <ticker_worker+0xae>

00010f36 <ticks_to_expire_prep>:
{
   10f36:	b570      	push	{r4, r5, r6, lr}
   10f38:	4606      	mov	r6, r0
   10f3a:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10f3c:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10f3e:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   10f40:	1a51      	subs	r1, r2, r1
   10f42:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   10f46:	d10c      	bne.n	10f62 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10f48:	4601      	mov	r1, r0
   10f4a:	4610      	mov	r0, r2
   10f4c:	f7ff ff94 	bl	10e78 <ticker_ticks_diff_get>
   10f50:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   10f52:	42a8      	cmp	r0, r5
   10f54:	d812      	bhi.n	10f7c <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   10f56:	1a28      	subs	r0, r5, r0
   10f58:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   10f5a:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10f5c:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10f5e:	82b5      	strh	r5, [r6, #20]
   10f60:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   10f62:	4611      	mov	r1, r2
   10f64:	f7ff ff88 	bl	10e78 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   10f68:	4284      	cmp	r4, r0
   10f6a:	d901      	bls.n	10f70 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   10f6c:	1a20      	subs	r0, r4, r0
   10f6e:	e7f0      	b.n	10f52 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   10f70:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   10f72:	fa15 f080 	uxtah	r0, r5, r0
   10f76:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   10f78:	2000      	movs	r0, #0
   10f7a:	e7ea      	b.n	10f52 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   10f7c:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   10f7e:	2500      	movs	r5, #0
   10f80:	e7ec      	b.n	10f5c <ticks_to_expire_prep+0x26>

00010f82 <ticker_job>:
{
   10f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f86:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   10f88:	7f43      	ldrb	r3, [r0, #29]
   10f8a:	9301      	str	r3, [sp, #4]
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	f040 8254 	bne.w	1143a <ticker_job+0x4b8>
	instance->job_guard = 1;
   10f92:	2301      	movs	r3, #1
   10f94:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   10f96:	6943      	ldr	r3, [r0, #20]
   10f98:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10f9a:	7a83      	ldrb	r3, [r0, #10]
   10f9c:	7ac2      	ldrb	r2, [r0, #11]
   10f9e:	4293      	cmp	r3, r2
   10fa0:	d021      	beq.n	10fe6 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   10fa2:	3301      	adds	r3, #1
   10fa4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   10fa6:	2b02      	cmp	r3, #2
   10fa8:	d100      	bne.n	10fac <ticker_job+0x2a>
			first = 0;
   10faa:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   10fac:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   10fae:	3302      	adds	r3, #2
   10fb0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   10fb4:	685b      	ldr	r3, [r3, #4]
   10fb6:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10fba:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   10fbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10fc0:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   10fc2:	2301      	movs	r3, #1
   10fc4:	9304      	str	r3, [sp, #16]
   10fc6:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   10fc8:	7e03      	ldrb	r3, [r0, #24]
   10fca:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   10fcc:	6803      	ldr	r3, [r0, #0]
   10fce:	4619      	mov	r1, r3
	users = &instance->user[0];
   10fd0:	6843      	ldr	r3, [r0, #4]
   10fd2:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   10fd4:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   10fd6:	9a01      	ldr	r2, [sp, #4]
   10fd8:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10fda:	f04f 0bff 	mov.w	fp, #255	; 0xff
   10fde:	f8cd b01c 	str.w	fp, [sp, #28]
   10fe2:	468b      	mov	fp, r1
   10fe4:	e0cc      	b.n	11180 <ticker_job+0x1fe>
		flag_elapsed = 0;
   10fe6:	9b01      	ldr	r3, [sp, #4]
   10fe8:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   10fea:	2300      	movs	r3, #0
   10fec:	9303      	str	r3, [sp, #12]
   10fee:	e7ea      	b.n	10fc6 <ticker_job+0x44>
				middle = 0;
   10ff0:	9b01      	ldr	r3, [sp, #4]
   10ff2:	e01d      	b.n	11030 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   10ff4:	6872      	ldr	r2, [r6, #4]
   10ff6:	bb82      	cbnz	r2, 1105a <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   10ff8:	68b2      	ldr	r2, [r6, #8]
   10ffa:	bb72      	cbnz	r2, 1105a <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   10ffc:	68f2      	ldr	r2, [r6, #12]
   10ffe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   11002:	d12a      	bne.n	1105a <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   11004:	2101      	movs	r1, #1
   11006:	4630      	mov	r0, r6
   11008:	f7ff fc82 	bl	10910 <ticker_job_op_cb>
		while (user->middle != user->last) {
   1100c:	f894 a002 	ldrb.w	sl, [r4, #2]
   11010:	78e3      	ldrb	r3, [r4, #3]
   11012:	459a      	cmp	sl, r3
   11014:	f000 80b3 	beq.w	1117e <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   11018:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1101c:	fb09 f90a 	mul.w	r9, r9, sl
   11020:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   11024:	f10a 0301 	add.w	r3, sl, #1
   11028:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1102a:	7822      	ldrb	r2, [r4, #0]
   1102c:	4293      	cmp	r3, r2
   1102e:	d0df      	beq.n	10ff0 <ticker_job+0x6e>
			user->middle = middle;
   11030:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   11032:	7873      	ldrb	r3, [r6, #1]
   11034:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11038:	009f      	lsls	r7, r3, #2
   1103a:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1103e:	f818 2009 	ldrb.w	r2, [r8, r9]
   11042:	2a03      	cmp	r2, #3
   11044:	d9e2      	bls.n	1100c <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   11046:	786b      	ldrb	r3, [r5, #1]
   11048:	78a9      	ldrb	r1, [r5, #2]
   1104a:	1a5b      	subs	r3, r3, r1
   1104c:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   1104e:	2a05      	cmp	r2, #5
   11050:	d8d8      	bhi.n	11004 <ticker_job+0x82>
   11052:	2b00      	cmp	r3, #0
   11054:	d0d6      	beq.n	11004 <ticker_job+0x82>
			    (state == 0) ||
   11056:	2a04      	cmp	r2, #4
   11058:	d0cc      	beq.n	10ff4 <ticker_job+0x72>
			if (state == 1) {
   1105a:	2b01      	cmp	r3, #1
   1105c:	f040 8085 	bne.w	1116a <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11060:	7871      	ldrb	r1, [r6, #1]
   11062:	9800      	ldr	r0, [sp, #0]
   11064:	f7ff fbf6 	bl	10854 <ticker_dequeue>
   11068:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1106a:	f818 3009 	ldrb.w	r3, [r8, r9]
   1106e:	2b04      	cmp	r3, #4
   11070:	d00b      	beq.n	1108a <ticker_job+0x108>
		ticker->req = ticker->ack;
   11072:	78ab      	ldrb	r3, [r5, #2]
   11074:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11076:	9b00      	ldr	r3, [sp, #0]
   11078:	7e5a      	ldrb	r2, [r3, #25]
   1107a:	7873      	ldrb	r3, [r6, #1]
   1107c:	429a      	cmp	r2, r3
   1107e:	d06e      	beq.n	1115e <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11080:	2100      	movs	r1, #0
   11082:	4630      	mov	r0, r6
   11084:	f7ff fc44 	bl	10910 <ticker_job_op_cb>
   11088:	e7c0      	b.n	1100c <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1108a:	9b00      	ldr	r3, [sp, #0]
   1108c:	695b      	ldr	r3, [r3, #20]
   1108e:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11090:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   11092:	f7fe f985 	bl	f3a0 <cntr_cnt_get>
   11096:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11098:	9906      	ldr	r1, [sp, #24]
   1109a:	f7ff feed 	bl	10e78 <ticker_ticks_diff_get>
   1109e:	9b03      	ldr	r3, [sp, #12]
   110a0:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   110a2:	4581      	cmp	r9, r0
   110a4:	d909      	bls.n	110ba <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   110a6:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   110aa:	686b      	ldr	r3, [r5, #4]
   110ac:	b37b      	cbz	r3, 1110e <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   110ae:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   110b0:	b36b      	cbz	r3, 1110e <ticker_job+0x18c>
		user_op->params.update.lazy--;
   110b2:	3b01      	subs	r3, #1
   110b4:	81b3      	strh	r3, [r6, #12]
   110b6:	46a2      	mov	sl, r4
   110b8:	e011      	b.n	110de <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   110ba:	eba0 0909 	sub.w	r9, r0, r9
   110be:	8aab      	ldrh	r3, [r5, #20]
   110c0:	fa13 f389 	uxtah	r3, r3, r9
   110c4:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   110c6:	f04f 0900 	mov.w	r9, #0
   110ca:	e7ee      	b.n	110aa <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   110cc:	4628      	mov	r0, r5
   110ce:	f7ff fc07 	bl	108e0 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   110d2:	4420      	add	r0, r4
   110d4:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   110d8:	8b6b      	ldrh	r3, [r5, #26]
   110da:	3b01      	subs	r3, #1
   110dc:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   110de:	686c      	ldr	r4, [r5, #4]
   110e0:	454c      	cmp	r4, r9
   110e2:	d237      	bcs.n	11154 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   110e4:	8b6a      	ldrh	r2, [r5, #26]
   110e6:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   110e8:	429a      	cmp	r2, r3
   110ea:	d8ef      	bhi.n	110cc <ticker_job+0x14a>
   110ec:	4654      	mov	r4, sl
   110ee:	e009      	b.n	11104 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   110f0:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   110f4:	4628      	mov	r0, r5
   110f6:	f7ff fbdd 	bl	108b4 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   110fa:	4450      	add	r0, sl
   110fc:	4481      	add	r9, r0
			ticker->lazy_current++;
   110fe:	8b6b      	ldrh	r3, [r5, #26]
   11100:	3301      	adds	r3, #1
   11102:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11104:	8b6a      	ldrh	r2, [r5, #26]
   11106:	89b3      	ldrh	r3, [r6, #12]
   11108:	429a      	cmp	r2, r3
   1110a:	d3f1      	bcc.n	110f0 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   1110c:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   1110e:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   11110:	444b      	add	r3, r9
   11112:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   11114:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   11116:	8aaa      	ldrh	r2, [r5, #20]
   11118:	4413      	add	r3, r2
   1111a:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1111c:	9a08      	ldr	r2, [sp, #32]
   1111e:	9906      	ldr	r1, [sp, #24]
   11120:	4628      	mov	r0, r5
   11122:	f7ff ff08 	bl	10f36 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11126:	8933      	ldrh	r3, [r6, #8]
   11128:	8aea      	ldrh	r2, [r5, #22]
   1112a:	4413      	add	r3, r2
   1112c:	b29b      	uxth	r3, r3
   1112e:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11130:	8972      	ldrh	r2, [r6, #10]
   11132:	4293      	cmp	r3, r2
   11134:	d910      	bls.n	11158 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11136:	1a9b      	subs	r3, r3, r2
   11138:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   1113a:	7bb3      	ldrb	r3, [r6, #14]
   1113c:	b103      	cbz	r3, 11140 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   1113e:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   11140:	f89d 301c 	ldrb.w	r3, [sp, #28]
   11144:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   11148:	7873      	ldrb	r3, [r6, #1]
   1114a:	9307      	str	r3, [sp, #28]
		ticker->req++;
   1114c:	786b      	ldrb	r3, [r5, #1]
   1114e:	3301      	adds	r3, #1
   11150:	706b      	strb	r3, [r5, #1]
   11152:	e795      	b.n	11080 <ticker_job+0xfe>
   11154:	4654      	mov	r4, sl
   11156:	e7d5      	b.n	11104 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   11158:	2300      	movs	r3, #0
   1115a:	82eb      	strh	r3, [r5, #22]
   1115c:	e7ed      	b.n	1113a <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1115e:	23ff      	movs	r3, #255	; 0xff
   11160:	9900      	ldr	r1, [sp, #0]
   11162:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   11164:	2300      	movs	r3, #0
   11166:	834b      	strh	r3, [r1, #26]
   11168:	e78a      	b.n	11080 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   1116a:	9b00      	ldr	r3, [sp, #0]
   1116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1116e:	2201      	movs	r2, #1
   11170:	2102      	movs	r1, #2
   11172:	4608      	mov	r0, r1
   11174:	4798      	blx	r3
				user->middle = prev;
   11176:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   1117a:	2301      	movs	r3, #1
   1117c:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1117e:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   11180:	1e5a      	subs	r2, r3, #1
   11182:	b2d2      	uxtb	r2, r2
   11184:	9202      	str	r2, [sp, #8]
   11186:	b133      	cbz	r3, 11196 <ticker_job+0x214>
		user = &users[count_user];
   11188:	9b05      	ldr	r3, [sp, #20]
   1118a:	9a02      	ldr	r2, [sp, #8]
   1118c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   11190:	f8d4 8004 	ldr.w	r8, [r4, #4]
   11194:	e73a      	b.n	1100c <ticker_job+0x8a>
   11196:	9306      	str	r3, [sp, #24]
   11198:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1119c:	9b00      	ldr	r3, [sp, #0]
   1119e:	7e1b      	ldrb	r3, [r3, #24]
   111a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111a2:	429a      	cmp	r2, r3
   111a4:	d00a      	beq.n	111bc <ticker_job+0x23a>
		flag_compare_update = 1;
   111a6:	2301      	movs	r3, #1
   111a8:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   111aa:	9b04      	ldr	r3, [sp, #16]
   111ac:	b94b      	cbnz	r3, 111c2 <ticker_job+0x240>
	node = &instance->node[0];
   111ae:	9a00      	ldr	r2, [sp, #0]
   111b0:	6813      	ldr	r3, [r2, #0]
   111b2:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   111b4:	6853      	ldr	r3, [r2, #4]
   111b6:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   111b8:	7a53      	ldrb	r3, [r2, #9]
   111ba:	e117      	b.n	113ec <ticker_job+0x46a>
	flag_compare_update = 0;
   111bc:	9b06      	ldr	r3, [sp, #24]
   111be:	9308      	str	r3, [sp, #32]
   111c0:	e7f3      	b.n	111aa <ticker_job+0x228>
	node = &instance->node[0];
   111c2:	9e00      	ldr	r6, [sp, #0]
   111c4:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   111c8:	f04f 0a00 	mov.w	sl, #0
   111cc:	f8cd b004 	str.w	fp, [sp, #4]
   111d0:	e02f      	b.n	11232 <ticker_job+0x2b0>
   111d2:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   111d6:	1a9b      	subs	r3, r3, r2
   111d8:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   111da:	9b00      	ldr	r3, [sp, #0]
   111dc:	7e1b      	ldrb	r3, [r3, #24]
   111de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111e0:	429a      	cmp	r2, r3
   111e2:	d0e4      	beq.n	111ae <ticker_job+0x22c>
			flag_compare_update = 1;
   111e4:	9b04      	ldr	r3, [sp, #16]
   111e6:	9308      	str	r3, [sp, #32]
   111e8:	e7e1      	b.n	111ae <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   111ea:	23ff      	movs	r3, #255	; 0xff
   111ec:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   111ee:	2300      	movs	r3, #0
   111f0:	8373      	strh	r3, [r6, #26]
   111f2:	e036      	b.n	11262 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   111f4:	686c      	ldr	r4, [r5, #4]
   111f6:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   111f8:	4628      	mov	r0, r5
   111fa:	f7ff fb5b 	bl	108b4 <ticker_remainder_inc>
   111fe:	4420      	add	r0, r4
			while (count--) {
   11200:	463b      	mov	r3, r7
   11202:	1e5f      	subs	r7, r3, #1
   11204:	2b00      	cmp	r3, #0
   11206:	d1f5      	bne.n	111f4 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   11208:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1120a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1120c:	eb03 020a 	add.w	r2, r3, sl
   11210:	6971      	ldr	r1, [r6, #20]
   11212:	4628      	mov	r0, r5
   11214:	f7ff fe8f 	bl	10f36 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   11218:	8b2b      	ldrh	r3, [r5, #24]
   1121a:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   1121c:	2300      	movs	r3, #0
   1121e:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   11220:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11224:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   11228:	786b      	ldrb	r3, [r5, #1]
   1122a:	3301      	adds	r3, #1
   1122c:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   1122e:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   11232:	f896 8018 	ldrb.w	r8, [r6, #24]
   11236:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1123a:	d026      	beq.n	1128a <ticker_job+0x308>
		ticker = &node[id_expired];
   1123c:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   11240:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   11244:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   11248:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1124a:	9a03      	ldr	r2, [sp, #12]
   1124c:	4293      	cmp	r3, r2
   1124e:	d8c0      	bhi.n	111d2 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   11250:	9a03      	ldr	r2, [sp, #12]
   11252:	1ad2      	subs	r2, r2, r3
   11254:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   11256:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11258:	8b72      	ldrh	r2, [r6, #26]
   1125a:	4293      	cmp	r3, r2
   1125c:	d2c5      	bcs.n	111ea <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   1125e:	1ad3      	subs	r3, r2, r3
   11260:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   11262:	8aeb      	ldrh	r3, [r5, #22]
   11264:	b11b      	cbz	r3, 1126e <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   11266:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1126a:	8aeb      	ldrh	r3, [r5, #22]
   1126c:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   1126e:	2300      	movs	r3, #0
   11270:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   11272:	f819 300b 	ldrb.w	r3, [r9, fp]
   11276:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   11278:	686b      	ldr	r3, [r5, #4]
   1127a:	b11b      	cbz	r3, 11284 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   1127c:	8b2b      	ldrh	r3, [r5, #24]
   1127e:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   11280:	2000      	movs	r0, #0
   11282:	e7be      	b.n	11202 <ticker_job+0x280>
			ticker->req = ticker->ack;
   11284:	78ab      	ldrb	r3, [r5, #2]
   11286:	706b      	strb	r3, [r5, #1]
   11288:	e7d3      	b.n	11232 <ticker_job+0x2b0>
   1128a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1128e:	e7a4      	b.n	111da <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   11290:	232c      	movs	r3, #44	; 0x2c
   11292:	9a03      	ldr	r2, [sp, #12]
   11294:	fb03 f302 	mul.w	r3, r3, r2
   11298:	9905      	ldr	r1, [sp, #20]
   1129a:	4419      	add	r1, r3
   1129c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   1129e:	3201      	adds	r2, #1
   112a0:	b2d2      	uxtb	r2, r2
   112a2:	4611      	mov	r1, r2
   112a4:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   112a6:	9a04      	ldr	r2, [sp, #16]
   112a8:	7812      	ldrb	r2, [r2, #0]
   112aa:	4291      	cmp	r1, r2
   112ac:	d013      	beq.n	112d6 <ticker_job+0x354>
				id_insert = user_op->id;
   112ae:	9a01      	ldr	r2, [sp, #4]
   112b0:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   112b2:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   112b6:	0094      	lsls	r4, r2, #2
   112b8:	9a02      	ldr	r2, [sp, #8]
   112ba:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   112bc:	9a05      	ldr	r2, [sp, #20]
   112be:	5cd3      	ldrb	r3, [r2, r3]
   112c0:	2b03      	cmp	r3, #3
   112c2:	d16b      	bne.n	1139c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   112c4:	7862      	ldrb	r2, [r4, #1]
   112c6:	78a3      	ldrb	r3, [r4, #2]
   112c8:	429a      	cmp	r2, r3
   112ca:	d007      	beq.n	112dc <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   112cc:	2101      	movs	r1, #1
   112ce:	9801      	ldr	r0, [sp, #4]
   112d0:	f7ff fb1e 	bl	10910 <ticker_job_op_cb>
   112d4:	e062      	b.n	1139c <ticker_job+0x41a>
					first = 0;
   112d6:	9a06      	ldr	r2, [sp, #24]
   112d8:	9203      	str	r2, [sp, #12]
   112da:	e7e8      	b.n	112ae <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   112dc:	9b00      	ldr	r3, [sp, #0]
   112de:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   112e0:	9801      	ldr	r0, [sp, #4]
   112e2:	68c3      	ldr	r3, [r0, #12]
   112e4:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   112e6:	6903      	ldr	r3, [r0, #16]
   112e8:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   112ea:	8a83      	ldrh	r3, [r0, #20]
   112ec:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   112ee:	8ac3      	ldrh	r3, [r0, #22]
   112f0:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   112f2:	6983      	ldr	r3, [r0, #24]
   112f4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   112f6:	69c3      	ldr	r3, [r0, #28]
   112f8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   112fa:	6883      	ldr	r3, [r0, #8]
   112fc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   112fe:	2500      	movs	r5, #0
   11300:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11302:	6842      	ldr	r2, [r0, #4]
   11304:	4620      	mov	r0, r4
   11306:	f7ff fe16 	bl	10f36 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   1130a:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   1130c:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   1130e:	2301      	movs	r3, #1
   11310:	70e3      	strb	r3, [r4, #3]
   11312:	e054      	b.n	113be <ticker_job+0x43c>
		skip = 0;
   11314:	f04f 0a00 	mov.w	sl, #0
   11318:	e00e      	b.n	11338 <ticker_job+0x3b6>
				skip_collide = 0;
   1131a:	2300      	movs	r3, #0
   1131c:	e021      	b.n	11362 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   1131e:	6865      	ldr	r5, [r4, #4]
   11320:	2d00      	cmp	r5, #0
   11322:	d05b      	beq.n	113dc <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   11324:	4620      	mov	r0, r4
   11326:	f7ff fac5 	bl	108b4 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1132a:	4428      	add	r0, r5
   1132c:	68a5      	ldr	r5, [r4, #8]
   1132e:	4405      	add	r5, r0
   11330:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   11332:	8b63      	ldrh	r3, [r4, #26]
   11334:	3301      	adds	r3, #1
   11336:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   11338:	4639      	mov	r1, r7
   1133a:	9800      	ldr	r0, [sp, #0]
   1133c:	f7ff fa2a 	bl	10794 <ticker_enqueue>
   11340:	4605      	mov	r5, r0
   11342:	4287      	cmp	r7, r0
   11344:	d021      	beq.n	1138a <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   11346:	2dff      	cmp	r5, #255	; 0xff
   11348:	d0e9      	beq.n	1131e <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   1134a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1134e:	ea4f 0883 	mov.w	r8, r3, lsl #2
   11352:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   11356:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   11358:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   1135a:	4293      	cmp	r3, r2
   1135c:	d9dd      	bls.n	1131a <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   1135e:	1a9b      	subs	r3, r3, r2
   11360:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   11362:	6872      	ldr	r2, [r6, #4]
   11364:	2a00      	cmp	r2, #0
   11366:	d0da      	beq.n	1131e <ticker_job+0x39c>
   11368:	4553      	cmp	r3, sl
   1136a:	d8d8      	bhi.n	1131e <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   1136c:	78f2      	ldrb	r2, [r6, #3]
   1136e:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   11370:	429a      	cmp	r2, r3
   11372:	d2d4      	bcs.n	1131e <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   11374:	4629      	mov	r1, r5
   11376:	9800      	ldr	r0, [sp, #0]
   11378:	f7ff fa6c 	bl	10854 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   1137c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   1137e:	78b3      	ldrb	r3, [r6, #2]
   11380:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   11382:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   11386:	46ab      	mov	fp, r5
   11388:	e7d6      	b.n	11338 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   1138a:	78a3      	ldrb	r3, [r4, #2]
   1138c:	3301      	adds	r3, #1
   1138e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11390:	2100      	movs	r1, #0
			if (user_op) {
   11392:	9b01      	ldr	r3, [sp, #4]
   11394:	b113      	cbz	r3, 1139c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   11396:	4618      	mov	r0, r3
   11398:	f7ff faba 	bl	10910 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1139c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   113a0:	d01e      	beq.n	113e0 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   113a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   113a6:	f43f af73 	beq.w	11290 <ticker_job+0x30e>
				ticker = &node[id_insert];
   113aa:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   113ae:	0093      	lsls	r3, r2, #2
   113b0:	9a02      	ldr	r2, [sp, #8]
   113b2:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   113b4:	465f      	mov	r7, fp
				insert_head = ticker->next;
   113b6:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   113ba:	2300      	movs	r3, #0
   113bc:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   113be:	9b00      	ldr	r3, [sp, #0]
   113c0:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   113c4:	23ff      	movs	r3, #255	; 0xff
   113c6:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   113c8:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   113cc:	8b23      	ldrh	r3, [r4, #24]
   113ce:	459a      	cmp	sl, r3
   113d0:	d9a0      	bls.n	11314 <ticker_job+0x392>
		skip = ticker->lazy_current -
   113d2:	ebaa 0a03 	sub.w	sl, sl, r3
   113d6:	fa1f fa8a 	uxth.w	sl, sl
   113da:	e7ad      	b.n	11338 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   113dc:	2101      	movs	r1, #1
   113de:	e7d8      	b.n	11392 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   113e0:	9b04      	ldr	r3, [sp, #16]
   113e2:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   113e4:	9a03      	ldr	r2, [sp, #12]
   113e6:	429a      	cmp	r2, r3
   113e8:	d1db      	bne.n	113a2 <ticker_job+0x420>
	while (count_user--) {
   113ea:	9b07      	ldr	r3, [sp, #28]
   113ec:	1e5a      	subs	r2, r3, #1
   113ee:	b2d2      	uxtb	r2, r2
   113f0:	9207      	str	r2, [sp, #28]
   113f2:	b153      	cbz	r3, 1140a <ticker_job+0x488>
		user = &users[count_user];
   113f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113f6:	9a07      	ldr	r2, [sp, #28]
   113f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   113fc:	461a      	mov	r2, r3
   113fe:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   11400:	685b      	ldr	r3, [r3, #4]
   11402:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   11404:	7853      	ldrb	r3, [r2, #1]
   11406:	9303      	str	r3, [sp, #12]
   11408:	e7c8      	b.n	1139c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1140a:	9b00      	ldr	r3, [sp, #0]
   1140c:	7e1b      	ldrb	r3, [r3, #24]
   1140e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11410:	429a      	cmp	r2, r3
   11412:	d001      	beq.n	11418 <ticker_job+0x496>
		flag_compare_update = 1;
   11414:	2301      	movs	r3, #1
   11416:	9308      	str	r3, [sp, #32]
	if (!pending) {
   11418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1141a:	b18b      	cbz	r3, 11440 <ticker_job+0x4be>
	instance->job_guard = 0;
   1141c:	2300      	movs	r3, #0
   1141e:	9a00      	ldr	r2, [sp, #0]
   11420:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   11422:	9b08      	ldr	r3, [sp, #32]
   11424:	2b00      	cmp	r3, #0
   11426:	d13f      	bne.n	114a8 <ticker_job+0x526>
	if (instance->worker_trigger) {
   11428:	9b00      	ldr	r3, [sp, #0]
   1142a:	7f5b      	ldrb	r3, [r3, #29]
   1142c:	b12b      	cbz	r3, 1143a <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   1142e:	9b00      	ldr	r3, [sp, #0]
   11430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11432:	2201      	movs	r2, #1
   11434:	4611      	mov	r1, r2
   11436:	2002      	movs	r0, #2
   11438:	4798      	blx	r3
}
   1143a:	b00d      	add	sp, #52	; 0x34
   1143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   11440:	9a00      	ldr	r2, [sp, #0]
   11442:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   11446:	7a53      	ldrb	r3, [r2, #9]
   11448:	e026      	b.n	11498 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   1144a:	2300      	movs	r3, #0
   1144c:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   1144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   11450:	b113      	cbz	r3, 11458 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   11452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11454:	6a38      	ldr	r0, [r7, #32]
   11456:	4798      	blx	r3
			first = user->first + 1;
   11458:	7863      	ldrb	r3, [r4, #1]
   1145a:	3301      	adds	r3, #1
   1145c:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   1145e:	7822      	ldrb	r2, [r4, #0]
   11460:	4293      	cmp	r3, r2
   11462:	d016      	beq.n	11492 <ticker_job+0x510>
			user->first = first;
   11464:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11466:	7862      	ldrb	r2, [r4, #1]
   11468:	78e3      	ldrb	r3, [r4, #3]
   1146a:	429a      	cmp	r2, r3
   1146c:	d013      	beq.n	11496 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1146e:	232c      	movs	r3, #44	; 0x2c
   11470:	fb03 f302 	mul.w	r3, r3, r2
   11474:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   11476:	5ceb      	ldrb	r3, [r5, r3]
   11478:	2b01      	cmp	r3, #1
   1147a:	d0e6      	beq.n	1144a <ticker_job+0x4c8>
   1147c:	2b02      	cmp	r3, #2
   1147e:	d106      	bne.n	1148e <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   11480:	68fb      	ldr	r3, [r7, #12]
   11482:	68ba      	ldr	r2, [r7, #8]
   11484:	6879      	ldr	r1, [r7, #4]
   11486:	9800      	ldr	r0, [sp, #0]
   11488:	f7ff f955 	bl	10736 <ticker_by_next_slot_get>
   1148c:	e7dd      	b.n	1144a <ticker_job+0x4c8>
	fp_op_func = NULL;
   1148e:	2300      	movs	r3, #0
   11490:	e7de      	b.n	11450 <ticker_job+0x4ce>
				first = 0;
   11492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11494:	e7e6      	b.n	11464 <ticker_job+0x4e2>
	while (count_user--) {
   11496:	4633      	mov	r3, r6
   11498:	1e5e      	subs	r6, r3, #1
   1149a:	b2f6      	uxtb	r6, r6
   1149c:	2b00      	cmp	r3, #0
   1149e:	d0bd      	beq.n	1141c <ticker_job+0x49a>
		user = &users[count_user];
   114a0:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   114a4:	6865      	ldr	r5, [r4, #4]
   114a6:	e7de      	b.n	11466 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   114a8:	7e13      	ldrb	r3, [r2, #24]
   114aa:	2bff      	cmp	r3, #255	; 0xff
   114ac:	d02f      	beq.n	1150e <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   114ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114b0:	2bff      	cmp	r3, #255	; 0xff
   114b2:	d034      	beq.n	1151e <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   114b4:	9800      	ldr	r0, [sp, #0]
   114b6:	6802      	ldr	r2, [r0, #0]
   114b8:	7e03      	ldrb	r3, [r0, #24]
   114ba:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   114be:	0099      	lsls	r1, r3, #2
   114c0:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   114c2:	6897      	ldr	r7, [r2, #8]
	i = 10;
   114c4:	250a      	movs	r5, #10
   114c6:	4680      	mov	r8, r0
		LL_ASSERT(i);
   114c8:	b39d      	cbz	r5, 11532 <ticker_job+0x5b0>
		i--;
   114ca:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   114cc:	f7fd ff68 	bl	f3a0 <cntr_cnt_get>
   114d0:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   114d2:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   114d6:	4621      	mov	r1, r4
   114d8:	f7ff fcce 	bl	10e78 <ticker_ticks_diff_get>
   114dc:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   114de:	4287      	cmp	r7, r0
   114e0:	bf2c      	ite	cs
   114e2:	19e4      	addcs	r4, r4, r7
   114e4:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   114e6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   114ea:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   114ee:	4620      	mov	r0, r4
   114f0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   114f2:	f7fd ff55 	bl	f3a0 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   114f6:	4631      	mov	r1, r6
   114f8:	f7ff fcbe 	bl	10e78 <ticker_ticks_diff_get>
   114fc:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   11500:	4631      	mov	r1, r6
   11502:	4620      	mov	r0, r4
   11504:	f7ff fcb8 	bl	10e78 <ticker_ticks_diff_get>
   11508:	4581      	cmp	r9, r0
   1150a:	d8dd      	bhi.n	114c8 <ticker_job+0x546>
   1150c:	e78c      	b.n	11428 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   1150e:	f7fd ff2d 	bl	f36c <cntr_stop>
   11512:	2800      	cmp	r0, #0
   11514:	d188      	bne.n	11428 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   11516:	2300      	movs	r3, #0
   11518:	9a00      	ldr	r2, [sp, #0]
   1151a:	8353      	strh	r3, [r2, #26]
   1151c:	e784      	b.n	11428 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   1151e:	f7fd ff3f 	bl	f3a0 <cntr_cnt_get>
   11522:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11524:	f7fd ff12 	bl	f34c <cntr_start>
   11528:	2800      	cmp	r0, #0
   1152a:	d1c3      	bne.n	114b4 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   1152c:	9b00      	ldr	r3, [sp, #0]
   1152e:	615c      	str	r4, [r3, #20]
   11530:	e7c0      	b.n	114b4 <ticker_job+0x532>
		LL_ASSERT(i);
   11532:	4040      	eors	r0, r0
   11534:	f380 8811 	msr	BASEPRI, r0
   11538:	f04f 0004 	mov.w	r0, #4
   1153c:	df02      	svc	2
	...

00011540 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   11540:	b570      	push	{r4, r5, r6, lr}
   11542:	4606      	mov	r6, r0
   11544:	460c      	mov	r4, r1
	while (len) {
   11546:	b19c      	cbz	r4, 11570 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   11548:	4d0a      	ldr	r5, [pc, #40]	; (11574 <bt_rand+0x34>)
   1154a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1154e:	4628      	mov	r0, r5
   11550:	f016 fe48 	bl	281e4 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   11554:	4631      	mov	r1, r6
   11556:	4620      	mov	r0, r4
   11558:	f7ff f89a 	bl	10690 <rand_get>
   1155c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   1155e:	4628      	mov	r0, r5
   11560:	f016 feaa 	bl	282b8 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   11564:	2c00      	cmp	r4, #0
   11566:	d0ee      	beq.n	11546 <bt_rand+0x6>
   11568:	bf20      	wfe
  __ASM volatile ("sev");
   1156a:	bf40      	sev
  __ASM volatile ("wfe");
   1156c:	bf20      	wfe
   1156e:	e7ea      	b.n	11546 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   11570:	2000      	movs	r0, #0
   11572:	bd70      	pop	{r4, r5, r6, pc}
   11574:	2000d0c4 	.word	0x2000d0c4

00011578 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   11578:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1157a:	2300      	movs	r3, #0
   1157c:	f7fd ff4c 	bl	f418 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11580:	2000      	movs	r0, #0
   11582:	bd08      	pop	{r3, pc}

00011584 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   11584:	6008      	str	r0, [r1, #0]
   11586:	4770      	bx	lr

00011588 <mayfly_xtal_start>:
{
   11588:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   1158a:	4b03      	ldr	r3, [pc, #12]	; (11598 <mayfly_xtal_start+0x10>)
   1158c:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   1158e:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   11590:	681b      	ldr	r3, [r3, #0]
   11592:	2100      	movs	r1, #0
   11594:	4798      	blx	r3
   11596:	bd08      	pop	{r3, pc}
   11598:	20000ef4 	.word	0x20000ef4

0001159c <mayfly_xtal_stop>:
{
   1159c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   1159e:	4b03      	ldr	r3, [pc, #12]	; (115ac <mayfly_xtal_stop+0x10>)
   115a0:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   115a2:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   115a4:	685b      	ldr	r3, [r3, #4]
   115a6:	2100      	movs	r1, #0
   115a8:	4798      	blx	r3
   115aa:	bd08      	pop	{r3, pc}
   115ac:	20000ef4 	.word	0x20000ef4

000115b0 <prepare_reduced>:
	if (status == 0) {
   115b0:	b918      	cbnz	r0, 115ba <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   115b2:	680b      	ldr	r3, [r1, #0]
   115b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   115b8:	600b      	str	r3, [r1, #0]
   115ba:	4770      	bx	lr

000115bc <prepare_normal>:
	if (status == 0) {
   115bc:	b918      	cbnz	r0, 115c6 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   115be:	680b      	ldr	r3, [r1, #0]
   115c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   115c4:	600b      	str	r3, [r1, #0]
   115c6:	4770      	bx	lr

000115c8 <chan_sel_remap>:
{
   115c8:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   115ca:	2405      	movs	r4, #5
	chan_next = 0;
   115cc:	2200      	movs	r2, #0
	while (byte_count--) {
   115ce:	e011      	b.n	115f4 <chan_sel_remap+0x2c>
			chan_next++;
   115d0:	3201      	adds	r2, #1
   115d2:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   115d4:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   115d6:	461c      	mov	r4, r3
   115d8:	1e63      	subs	r3, r4, #1
   115da:	b2db      	uxtb	r3, r3
   115dc:	b134      	cbz	r4, 115ec <chan_sel_remap+0x24>
			if (bite & 0x01) {
   115de:	f015 0f01 	tst.w	r5, #1
   115e2:	d0f5      	beq.n	115d0 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   115e4:	b111      	cbz	r1, 115ec <chan_sel_remap+0x24>
				chan_index--;
   115e6:	3901      	subs	r1, #1
   115e8:	b2c9      	uxtb	r1, r1
   115ea:	e7f1      	b.n	115d0 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   115ec:	2b07      	cmp	r3, #7
   115ee:	d907      	bls.n	11600 <chan_sel_remap+0x38>
		chan_map++;
   115f0:	3001      	adds	r0, #1
	while (byte_count--) {
   115f2:	4634      	mov	r4, r6
   115f4:	1e63      	subs	r3, r4, #1
   115f6:	b2de      	uxtb	r6, r3
   115f8:	b114      	cbz	r4, 11600 <chan_sel_remap+0x38>
		bite = *chan_map;
   115fa:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   115fc:	2408      	movs	r4, #8
		while (bit_count--) {
   115fe:	e7eb      	b.n	115d8 <chan_sel_remap+0x10>
}
   11600:	4610      	mov	r0, r2
   11602:	bc70      	pop	{r4, r5, r6}
   11604:	4770      	bx	lr
	...

00011608 <chan_sel_1>:
{
   11608:	b570      	push	{r4, r5, r6, lr}
   1160a:	4605      	mov	r5, r0
   1160c:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11610:	7804      	ldrb	r4, [r0, #0]
   11612:	fb02 1101 	mla	r1, r2, r1, r1
   11616:	4421      	add	r1, r4
   11618:	4c0f      	ldr	r4, [pc, #60]	; (11658 <chan_sel_1+0x50>)
   1161a:	fb84 2401 	smull	r2, r4, r4, r1
   1161e:	1862      	adds	r2, r4, r1
   11620:	17cc      	asrs	r4, r1, #31
   11622:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   11626:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1162a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1162e:	1b0c      	subs	r4, r1, r4
   11630:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   11632:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11634:	08c2      	lsrs	r2, r0, #3
   11636:	5c9a      	ldrb	r2, [r3, r2]
   11638:	f004 0407 	and.w	r4, r4, #7
   1163c:	fa42 f404 	asr.w	r4, r2, r4
   11640:	f014 0f01 	tst.w	r4, #1
   11644:	d107      	bne.n	11656 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   11646:	fbb0 f1f6 	udiv	r1, r0, r6
   1164a:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1164e:	b2c9      	uxtb	r1, r1
   11650:	4618      	mov	r0, r3
   11652:	f7ff ffb9 	bl	115c8 <chan_sel_remap>
}
   11656:	bd70      	pop	{r4, r5, r6, pc}
   11658:	dd67c8a7 	.word	0xdd67c8a7

0001165c <chan_rev_8>:
	o = 0;
   1165c:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   1165e:	461a      	mov	r2, r3
   11660:	e007      	b.n	11672 <chan_rev_8+0x16>
		o <<= 1;
   11662:	005b      	lsls	r3, r3, #1
   11664:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   11666:	f000 0101 	and.w	r1, r0, #1
   1166a:	430b      	orrs	r3, r1
		i >>= 1;
   1166c:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   1166e:	3201      	adds	r2, #1
   11670:	b2d2      	uxtb	r2, r2
   11672:	2a07      	cmp	r2, #7
   11674:	d9f5      	bls.n	11662 <chan_rev_8+0x6>
}
   11676:	4618      	mov	r0, r3
   11678:	4770      	bx	lr

0001167a <chan_perm>:
{
   1167a:	b538      	push	{r3, r4, r5, lr}
   1167c:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1167e:	0a00      	lsrs	r0, r0, #8
   11680:	f7ff ffec 	bl	1165c <chan_rev_8>
   11684:	0205      	lsls	r5, r0, #8
   11686:	b2e0      	uxtb	r0, r4
   11688:	f7ff ffe8 	bl	1165c <chan_rev_8>
   1168c:	b200      	sxth	r0, r0
   1168e:	4328      	orrs	r0, r5
}
   11690:	b280      	uxth	r0, r0
   11692:	bd38      	pop	{r3, r4, r5, pc}

00011694 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11694:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11698:	fa11 f080 	uxtah	r0, r1, r0
}
   1169c:	b280      	uxth	r0, r0
   1169e:	4770      	bx	lr

000116a0 <chan_prn>:
{
   116a0:	b538      	push	{r3, r4, r5, lr}
   116a2:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   116a4:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   116a6:	2400      	movs	r4, #0
   116a8:	e006      	b.n	116b8 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   116aa:	f7ff ffe6 	bl	1167a <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   116ae:	4629      	mov	r1, r5
   116b0:	f7ff fff0 	bl	11694 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   116b4:	3401      	adds	r4, #1
   116b6:	b2e4      	uxtb	r4, r4
   116b8:	2c02      	cmp	r4, #2
   116ba:	d9f6      	bls.n	116aa <chan_prn+0xa>
	prn_e ^= chan_id;
   116bc:	4068      	eors	r0, r5
}
   116be:	b280      	uxth	r0, r0
   116c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000116c4 <chan_sel_2>:
{
   116c4:	b538      	push	{r3, r4, r5, lr}
   116c6:	4615      	mov	r5, r2
   116c8:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   116ca:	f7ff ffe9 	bl	116a0 <chan_prn>
   116ce:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   116d0:	4a0e      	ldr	r2, [pc, #56]	; (1170c <chan_sel_2+0x48>)
   116d2:	fba2 3200 	umull	r3, r2, r2, r0
   116d6:	1a80      	subs	r0, r0, r2
   116d8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   116dc:	0952      	lsrs	r2, r2, #5
   116de:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   116e2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   116e6:	1a8a      	subs	r2, r1, r2
   116e8:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   116ea:	08c3      	lsrs	r3, r0, #3
   116ec:	5ceb      	ldrb	r3, [r5, r3]
   116ee:	f000 0207 	and.w	r2, r0, #7
   116f2:	4113      	asrs	r3, r2
   116f4:	f013 0f01 	tst.w	r3, #1
   116f8:	d106      	bne.n	11708 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   116fa:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   116fe:	f3c1 4107 	ubfx	r1, r1, #16, #8
   11702:	4628      	mov	r0, r5
   11704:	f7ff ff60 	bl	115c8 <chan_sel_remap>
}
   11708:	bd38      	pop	{r3, r4, r5, pc}
   1170a:	bf00      	nop
   1170c:	bacf914d 	.word	0xbacf914d

00011710 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   11710:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11714:	681b      	ldr	r3, [r3, #0]
   11716:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   11718:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   1171c:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   1171e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   11722:	4770      	bx	lr

00011724 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   11724:	b538      	push	{r3, r4, r5, lr}
   11726:	4604      	mov	r4, r0
   11728:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   1172a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   1172e:	f013 0f80 	tst.w	r3, #128	; 0x80
   11732:	d11f      	bne.n	11774 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   11734:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   11738:	b1e2      	cbz	r2, 11774 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   1173a:	f013 0f08 	tst.w	r3, #8
   1173e:	d119      	bne.n	11774 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   11740:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   11744:	429a      	cmp	r2, r3
   11746:	d007      	beq.n	11758 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   11748:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1174c:	b143      	cbz	r3, 11760 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   1174e:	4629      	mov	r1, r5
   11750:	4620      	mov	r0, r4
   11752:	f7ff ffdd 	bl	11710 <ctrl_tx_last_enqueue>
   11756:	e014      	b.n	11782 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   11758:	681b      	ldr	r3, [r3, #0]
   1175a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   1175e:	e7f3      	b.n	11748 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   11760:	6813      	ldr	r3, [r2, #0]
   11762:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   11764:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11768:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   1176a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   1176e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   11772:	e006      	b.n	11782 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   11774:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11778:	b133      	cbz	r3, 11788 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   1177a:	4629      	mov	r1, r5
   1177c:	4620      	mov	r0, r4
   1177e:	f7ff ffc7 	bl	11710 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   11782:	682b      	ldr	r3, [r5, #0]
   11784:	b153      	cbz	r3, 1179c <ctrl_tx_enqueue+0x78>
   11786:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   11788:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1178c:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   1178e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   11792:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   11796:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   1179a:	e7f2      	b.n	11782 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   1179c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   117a0:	e7f1      	b.n	11786 <ctrl_tx_enqueue+0x62>

000117a2 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   117a2:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   117a4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   117a8:	f013 0f08 	tst.w	r3, #8
   117ac:	d010      	beq.n	117d0 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   117ae:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   117b2:	b13b      	cbz	r3, 117c4 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   117b4:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   117b8:	681b      	ldr	r3, [r3, #0]
   117ba:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   117bc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   117c0:	6019      	str	r1, [r3, #0]
   117c2:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   117c4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   117c8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   117ca:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   117ce:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   117d0:	f7ff ffa8 	bl	11724 <ctrl_tx_enqueue>
   117d4:	bd08      	pop	{r3, pc}
	...

000117d8 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   117d8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   117dc:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   117e0:	428b      	cmp	r3, r1
   117e2:	d001      	beq.n	117e8 <conn_update_req+0x10>
		return 1;
   117e4:	2001      	movs	r0, #1
   117e6:	4770      	bx	lr
{
   117e8:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   117ea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   117ee:	2b00      	cmp	r3, #0
   117f0:	db2a      	blt.n	11848 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   117f2:	2401      	movs	r4, #1
   117f4:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   117f8:	2200      	movs	r2, #0
   117fa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   117fe:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   11800:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   11804:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   11806:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   1180a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   1180c:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   11810:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   11814:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   11818:	4d26      	ldr	r5, [pc, #152]	; (118b4 <conn_update_req+0xdc>)
   1181a:	fb85 e503 	smull	lr, r5, r5, r3
   1181e:	17db      	asrs	r3, r3, #31
   11820:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   11824:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11828:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1182c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   11830:	b2db      	uxtb	r3, r3
   11832:	f043 0304 	orr.w	r3, r3, #4
   11836:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   1183a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   1183e:	3901      	subs	r1, #1
   11840:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   11844:	4610      	mov	r0, r2
   11846:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   11848:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1184c:	f013 0f20 	tst.w	r3, #32
   11850:	d101      	bne.n	11856 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   11852:	2002      	movs	r0, #2
   11854:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   11856:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   1185a:	f013 0f02 	tst.w	r3, #2
   1185e:	d101      	bne.n	11864 <conn_update_req+0x8c>
	return 2;
   11860:	2002      	movs	r0, #2
}
   11862:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   11864:	2300      	movs	r3, #0
   11866:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   1186a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1186c:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   11870:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   11872:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   11876:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11878:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   1187c:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   11880:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   11884:	490b      	ldr	r1, [pc, #44]	; (118b4 <conn_update_req+0xdc>)
   11886:	fb81 4102 	smull	r4, r1, r1, r2
   1188a:	17d2      	asrs	r2, r2, #31
   1188c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11890:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   11894:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   11898:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   1189c:	f363 02c3 	bfi	r2, r3, #3, #1
   118a0:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   118a4:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   118a8:	3a01      	subs	r2, #1
   118aa:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   118ae:	4618      	mov	r0, r3
   118b0:	bd30      	pop	{r4, r5, pc}
   118b2:	bf00      	nop
   118b4:	10624dd3 	.word	0x10624dd3

000118b8 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   118b8:	4a0d      	ldr	r2, [pc, #52]	; (118f0 <rx_fc_lock+0x38>)
   118ba:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   118be:	b2db      	uxtb	r3, r3
   118c0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   118c4:	4293      	cmp	r3, r2
   118c6:	d000      	beq.n	118ca <rx_fc_lock+0x12>
   118c8:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   118ca:	4a09      	ldr	r2, [pc, #36]	; (118f0 <rx_fc_lock+0x38>)
   118cc:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   118d0:	33b8      	adds	r3, #184	; 0xb8
   118d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   118d6:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   118d8:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   118dc:	3301      	adds	r3, #1
   118de:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   118e0:	2b03      	cmp	r3, #3
   118e2:	d003      	beq.n	118ec <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   118e4:	4a02      	ldr	r2, [pc, #8]	; (118f0 <rx_fc_lock+0x38>)
   118e6:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   118ea:	e7ed      	b.n	118c8 <rx_fc_lock+0x10>
			req = 0;
   118ec:	2300      	movs	r3, #0
   118ee:	e7f9      	b.n	118e4 <rx_fc_lock+0x2c>
   118f0:	20000ef4 	.word	0x20000ef4

000118f4 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   118f4:	b900      	cbnz	r0, 118f8 <ticker_success_assert+0x4>
   118f6:	4770      	bx	lr
   118f8:	4040      	eors	r0, r0
   118fa:	f380 8811 	msr	BASEPRI, r0
   118fe:	f04f 0004 	mov.w	r0, #4
   11902:	df02      	svc	2

00011904 <start_enc_rsp_send>:
{
   11904:	b510      	push	{r4, lr}
   11906:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   11908:	b171      	cbz	r1, 11928 <start_enc_rsp_send+0x24>
   1190a:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   1190c:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1190e:	781a      	ldrb	r2, [r3, #0]
   11910:	f042 0203 	orr.w	r2, r2, #3
   11914:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11916:	2201      	movs	r2, #1
   11918:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1191a:	2206      	movs	r2, #6
   1191c:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   1191e:	b111      	cbz	r1, 11926 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   11920:	4620      	mov	r0, r4
   11922:	f7ff feff 	bl	11724 <ctrl_tx_enqueue>
   11926:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11928:	4806      	ldr	r0, [pc, #24]	; (11944 <start_enc_rsp_send+0x40>)
   1192a:	f7fd fc68 	bl	f1fe <mem_acquire>
		LL_ASSERT(node_tx);
   1192e:	4601      	mov	r1, r0
   11930:	b108      	cbz	r0, 11936 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   11932:	1d03      	adds	r3, r0, #4
   11934:	e7eb      	b.n	1190e <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   11936:	4040      	eors	r0, r0
   11938:	f380 8811 	msr	BASEPRI, r0
   1193c:	f04f 0004 	mov.w	r0, #4
   11940:	df02      	svc	2
   11942:	bf00      	nop
   11944:	2000104c 	.word	0x2000104c

00011948 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11948:	2801      	cmp	r0, #1
   1194a:	d005      	beq.n	11958 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   1194c:	4b0d      	ldr	r3, [pc, #52]	; (11984 <ticker_stop_adv_assert+0x3c>)
   1194e:	7b1b      	ldrb	r3, [r3, #12]
   11950:	b2db      	uxtb	r3, r3
   11952:	2b05      	cmp	r3, #5
   11954:	d00f      	beq.n	11976 <ticker_stop_adv_assert+0x2e>
   11956:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11958:	4b0a      	ldr	r3, [pc, #40]	; (11984 <ticker_stop_adv_assert+0x3c>)
   1195a:	7b9b      	ldrb	r3, [r3, #14]
   1195c:	b2db      	uxtb	r3, r3
   1195e:	2b05      	cmp	r3, #5
   11960:	d103      	bne.n	1196a <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   11962:	2200      	movs	r2, #0
   11964:	4b07      	ldr	r3, [pc, #28]	; (11984 <ticker_stop_adv_assert+0x3c>)
   11966:	739a      	strb	r2, [r3, #14]
   11968:	4770      	bx	lr
			LL_ASSERT(0);
   1196a:	4040      	eors	r0, r0
   1196c:	f380 8811 	msr	BASEPRI, r0
   11970:	f04f 0004 	mov.w	r0, #4
   11974:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11976:	4040      	eors	r0, r0
   11978:	f380 8811 	msr	BASEPRI, r0
   1197c:	f04f 0004 	mov.w	r0, #4
   11980:	df02      	svc	2
   11982:	bf00      	nop
   11984:	20000ef4 	.word	0x20000ef4

00011988 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11988:	2801      	cmp	r0, #1
   1198a:	d005      	beq.n	11998 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   1198c:	4b0d      	ldr	r3, [pc, #52]	; (119c4 <ticker_stop_scan_assert+0x3c>)
   1198e:	7b1b      	ldrb	r3, [r3, #12]
   11990:	b2db      	uxtb	r3, r3
   11992:	2b06      	cmp	r3, #6
   11994:	d00f      	beq.n	119b6 <ticker_stop_scan_assert+0x2e>
   11996:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11998:	4b0a      	ldr	r3, [pc, #40]	; (119c4 <ticker_stop_scan_assert+0x3c>)
   1199a:	7b9b      	ldrb	r3, [r3, #14]
   1199c:	b2db      	uxtb	r3, r3
   1199e:	2b06      	cmp	r3, #6
   119a0:	d103      	bne.n	119aa <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   119a2:	2200      	movs	r2, #0
   119a4:	4b07      	ldr	r3, [pc, #28]	; (119c4 <ticker_stop_scan_assert+0x3c>)
   119a6:	739a      	strb	r2, [r3, #14]
   119a8:	4770      	bx	lr
			LL_ASSERT(0);
   119aa:	4040      	eors	r0, r0
   119ac:	f380 8811 	msr	BASEPRI, r0
   119b0:	f04f 0004 	mov.w	r0, #4
   119b4:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   119b6:	4040      	eors	r0, r0
   119b8:	f380 8811 	msr	BASEPRI, r0
   119bc:	f04f 0004 	mov.w	r0, #4
   119c0:	df02      	svc	2
   119c2:	bf00      	nop
   119c4:	20000ef4 	.word	0x20000ef4

000119c8 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   119c8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   119cc:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   119ce:	1a9b      	subs	r3, r3, r2
   119d0:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   119d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   119d6:	da5b      	bge.n	11a90 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   119d8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   119dc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   119e0:	429a      	cmp	r2, r3
   119e2:	d13d      	bne.n	11a60 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   119e4:	4b2c      	ldr	r3, [pc, #176]	; (11a98 <conn_update+0xd0>)
   119e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   119ea:	2b00      	cmp	r3, #0
   119ec:	d03e      	beq.n	11a6c <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   119ee:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   119f0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   119f4:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   119f8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   119fc:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   11a00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   11a04:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   11a08:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   11a0c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   11a10:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   11a14:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   11a18:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   11a1c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   11a20:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11a24:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   11a28:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   11a2c:	f36f 0382 	bfc	r3, #2, #1
   11a30:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11a34:	2301      	movs	r3, #1
   11a36:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   11a3a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11a3e:	3b01      	subs	r3, #1
   11a40:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11a44:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   11a48:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11a4c:	429a      	cmp	r2, r3
   11a4e:	d021      	beq.n	11a94 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11a50:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11a54:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11a58:	2b04      	cmp	r3, #4
   11a5a:	d015      	beq.n	11a88 <conn_update+0xc0>
	return 0;
   11a5c:	2000      	movs	r0, #0
}
   11a5e:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11a60:	4040      	eors	r0, r0
   11a62:	f380 8811 	msr	BASEPRI, r0
   11a66:	f04f 0004 	mov.w	r0, #4
   11a6a:	df02      	svc	2
		LL_ASSERT(conn->role);
   11a6c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11a70:	2b00      	cmp	r3, #0
   11a72:	da03      	bge.n	11a7c <conn_update+0xb4>
		_radio.conn_upd = conn;
   11a74:	4b08      	ldr	r3, [pc, #32]	; (11a98 <conn_update+0xd0>)
   11a76:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11a7a:	e7b8      	b.n	119ee <conn_update+0x26>
		LL_ASSERT(conn->role);
   11a7c:	4040      	eors	r0, r0
   11a7e:	f380 8811 	msr	BASEPRI, r0
   11a82:	f04f 0004 	mov.w	r0, #4
   11a86:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11a88:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11a8c:	2000      	movs	r0, #0
   11a8e:	4770      	bx	lr
		return 1;
   11a90:	2001      	movs	r0, #1
   11a92:	4770      	bx	lr
	return 0;
   11a94:	2000      	movs	r0, #0
   11a96:	4770      	bx	lr
   11a98:	20000ef4 	.word	0x20000ef4

00011a9c <pause_enc_rsp_send>:
{
   11a9c:	b510      	push	{r4, lr}
   11a9e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11aa0:	480b      	ldr	r0, [pc, #44]	; (11ad0 <pause_enc_rsp_send+0x34>)
   11aa2:	f7fd fbac 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11aa6:	b160      	cbz	r0, 11ac2 <pause_enc_rsp_send+0x26>
   11aa8:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11aaa:	7903      	ldrb	r3, [r0, #4]
   11aac:	f043 0303 	orr.w	r3, r3, #3
   11ab0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11ab2:	2301      	movs	r3, #1
   11ab4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11ab6:	230b      	movs	r3, #11
   11ab8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11aba:	4620      	mov	r0, r4
   11abc:	f7ff fe32 	bl	11724 <ctrl_tx_enqueue>
   11ac0:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11ac2:	4040      	eors	r0, r0
   11ac4:	f380 8811 	msr	BASEPRI, r0
   11ac8:	f04f 0004 	mov.w	r0, #4
   11acc:	df02      	svc	2
   11ace:	bf00      	nop
   11ad0:	2000104c 	.word	0x2000104c

00011ad4 <ping_resp_send>:
{
   11ad4:	b510      	push	{r4, lr}
   11ad6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ad8:	480b      	ldr	r0, [pc, #44]	; (11b08 <ping_resp_send+0x34>)
   11ada:	f7fd fb90 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11ade:	b160      	cbz	r0, 11afa <ping_resp_send+0x26>
   11ae0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ae2:	7903      	ldrb	r3, [r0, #4]
   11ae4:	f043 0303 	orr.w	r3, r3, #3
   11ae8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11aea:	2301      	movs	r3, #1
   11aec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11aee:	2313      	movs	r3, #19
   11af0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11af2:	4620      	mov	r0, r4
   11af4:	f7ff fe16 	bl	11724 <ctrl_tx_enqueue>
   11af8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11afa:	4040      	eors	r0, r0
   11afc:	f380 8811 	msr	BASEPRI, r0
   11b00:	f04f 0004 	mov.w	r0, #4
   11b04:	df02      	svc	2
   11b06:	bf00      	nop
   11b08:	2000104c 	.word	0x2000104c

00011b0c <length_resp_send>:
{
   11b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b0e:	4604      	mov	r4, r0
   11b10:	460f      	mov	r7, r1
   11b12:	4615      	mov	r5, r2
   11b14:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b16:	480e      	ldr	r0, [pc, #56]	; (11b50 <length_resp_send+0x44>)
   11b18:	f7fd fb71 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11b1c:	b190      	cbz	r0, 11b44 <length_resp_send+0x38>
   11b1e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b20:	7903      	ldrb	r3, [r0, #4]
   11b22:	f043 0303 	orr.w	r3, r3, #3
   11b26:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11b28:	2309      	movs	r3, #9
   11b2a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11b2c:	2315      	movs	r3, #21
   11b2e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11b30:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   11b32:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   11b34:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   11b36:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11b3a:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11b3c:	4620      	mov	r0, r4
   11b3e:	f7ff fdf1 	bl	11724 <ctrl_tx_enqueue>
   11b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   11b44:	4040      	eors	r0, r0
   11b46:	f380 8811 	msr	BASEPRI, r0
   11b4a:	f04f 0004 	mov.w	r0, #4
   11b4e:	df02      	svc	2
   11b50:	2000104c 	.word	0x2000104c

00011b54 <reject_ext_ind_send>:
{
   11b54:	b570      	push	{r4, r5, r6, lr}
   11b56:	4604      	mov	r4, r0
   11b58:	460e      	mov	r6, r1
   11b5a:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b5c:	480c      	ldr	r0, [pc, #48]	; (11b90 <reject_ext_ind_send+0x3c>)
   11b5e:	f7fd fb4e 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11b62:	b170      	cbz	r0, 11b82 <reject_ext_ind_send+0x2e>
   11b64:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b66:	7903      	ldrb	r3, [r0, #4]
   11b68:	f043 0303 	orr.w	r3, r3, #3
   11b6c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11b6e:	2303      	movs	r3, #3
   11b70:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11b72:	2311      	movs	r3, #17
   11b74:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   11b76:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11b78:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11b7a:	4620      	mov	r0, r4
   11b7c:	f7ff fdd2 	bl	11724 <ctrl_tx_enqueue>
   11b80:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   11b82:	4040      	eors	r0, r0
   11b84:	f380 8811 	msr	BASEPRI, r0
   11b88:	f04f 0004 	mov.w	r0, #4
   11b8c:	df02      	svc	2
   11b8e:	bf00      	nop
   11b90:	2000104c 	.word	0x2000104c

00011b94 <phy_rsp_send>:
{
   11b94:	b510      	push	{r4, lr}
   11b96:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b98:	4810      	ldr	r0, [pc, #64]	; (11bdc <phy_rsp_send+0x48>)
   11b9a:	f7fd fb30 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11b9e:	b1b0      	cbz	r0, 11bce <phy_rsp_send+0x3a>
   11ba0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ba2:	7903      	ldrb	r3, [r0, #4]
   11ba4:	f043 0303 	orr.w	r3, r3, #3
   11ba8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11baa:	2303      	movs	r3, #3
   11bac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11bae:	2317      	movs	r3, #23
   11bb0:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11bb2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11bb6:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11bba:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11bbc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11bc0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11bc4:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11bc6:	4620      	mov	r0, r4
   11bc8:	f7ff fdac 	bl	11724 <ctrl_tx_enqueue>
   11bcc:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11bce:	4040      	eors	r0, r0
   11bd0:	f380 8811 	msr	BASEPRI, r0
   11bd4:	f04f 0004 	mov.w	r0, #4
   11bd8:	df02      	svc	2
   11bda:	bf00      	nop
   11bdc:	2000104c 	.word	0x2000104c

00011be0 <unknown_rsp_send>:
{
   11be0:	b538      	push	{r3, r4, r5, lr}
   11be2:	4604      	mov	r4, r0
   11be4:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11be6:	480c      	ldr	r0, [pc, #48]	; (11c18 <unknown_rsp_send+0x38>)
   11be8:	f7fd fb09 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   11bec:	b168      	cbz	r0, 11c0a <unknown_rsp_send+0x2a>
   11bee:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11bf0:	7903      	ldrb	r3, [r0, #4]
   11bf2:	f043 0303 	orr.w	r3, r3, #3
   11bf6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11bf8:	2302      	movs	r3, #2
   11bfa:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11bfc:	2307      	movs	r3, #7
   11bfe:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11c00:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11c02:	4620      	mov	r0, r4
   11c04:	f7ff fd8e 	bl	11724 <ctrl_tx_enqueue>
   11c08:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11c0a:	4040      	eors	r0, r0
   11c0c:	f380 8811 	msr	BASEPRI, r0
   11c10:	f04f 0004 	mov.w	r0, #4
   11c14:	df02      	svc	2
   11c16:	bf00      	nop
   11c18:	2000104c 	.word	0x2000104c

00011c1c <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11c1c:	b120      	cbz	r0, 11c28 <ticker_update_adv_assert+0xc>
   11c1e:	4b06      	ldr	r3, [pc, #24]	; (11c38 <ticker_update_adv_assert+0x1c>)
   11c20:	7b9b      	ldrb	r3, [r3, #14]
   11c22:	b2db      	uxtb	r3, r3
   11c24:	2b05      	cmp	r3, #5
   11c26:	d100      	bne.n	11c2a <ticker_update_adv_assert+0xe>
   11c28:	4770      	bx	lr
   11c2a:	4040      	eors	r0, r0
   11c2c:	f380 8811 	msr	BASEPRI, r0
   11c30:	f04f 0004 	mov.w	r0, #4
   11c34:	df02      	svc	2
   11c36:	bf00      	nop
   11c38:	20000ef4 	.word	0x20000ef4

00011c3c <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11c3c:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11c3e:	b120      	cbz	r0, 11c4a <ticker_update_slave_assert+0xe>
   11c40:	4b05      	ldr	r3, [pc, #20]	; (11c58 <ticker_update_slave_assert+0x1c>)
   11c42:	7b9b      	ldrb	r3, [r3, #14]
   11c44:	b2db      	uxtb	r3, r3
   11c46:	4299      	cmp	r1, r3
   11c48:	d100      	bne.n	11c4c <ticker_update_slave_assert+0x10>
   11c4a:	4770      	bx	lr
   11c4c:	4040      	eors	r0, r0
   11c4e:	f380 8811 	msr	BASEPRI, r0
   11c52:	f04f 0004 	mov.w	r0, #4
   11c56:	df02      	svc	2
   11c58:	20000ef4 	.word	0x20000ef4

00011c5c <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11c5c:	b930      	cbnz	r0, 11c6c <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11c5e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   11c62:	f36f 0341 	bfc	r3, #1, #1
   11c66:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11c6a:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11c6c:	4040      	eors	r0, r0
   11c6e:	f380 8811 	msr	BASEPRI, r0
   11c72:	f04f 0004 	mov.w	r0, #4
   11c76:	df02      	svc	2

00011c78 <packet_rx_allocate>:
{
   11c78:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11c7a:	4b22      	ldr	r3, [pc, #136]	; (11d04 <packet_rx_allocate+0x8c>)
   11c7c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11c80:	4283      	cmp	r3, r0
   11c82:	d300      	bcc.n	11c86 <packet_rx_allocate+0xe>
   11c84:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   11c86:	4a1f      	ldr	r2, [pc, #124]	; (11d04 <packet_rx_allocate+0x8c>)
   11c88:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11c8c:	3401      	adds	r4, #1
   11c8e:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11c90:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11c94:	4294      	cmp	r4, r2
   11c96:	d10d      	bne.n	11cb4 <packet_rx_allocate+0x3c>
		acquire = 0;
   11c98:	2400      	movs	r4, #0
   11c9a:	e00b      	b.n	11cb4 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11c9c:	491a      	ldr	r1, [pc, #104]	; (11d08 <packet_rx_allocate+0x90>)
   11c9e:	4630      	mov	r0, r6
   11ca0:	f7fd fac9 	bl	f236 <mem_release>
			break;
   11ca4:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11ca6:	4a17      	ldr	r2, [pc, #92]	; (11d04 <packet_rx_allocate+0x8c>)
   11ca8:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11cac:	3b01      	subs	r3, #1
   11cae:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11cb2:	462b      	mov	r3, r5
   11cb4:	1e5d      	subs	r5, r3, #1
   11cb6:	b2ed      	uxtb	r5, r5
   11cb8:	b313      	cbz	r3, 11d00 <packet_rx_allocate+0x88>
   11cba:	4b12      	ldr	r3, [pc, #72]	; (11d04 <packet_rx_allocate+0x8c>)
   11cbc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11cc0:	b2db      	uxtb	r3, r3
   11cc2:	429c      	cmp	r4, r3
   11cc4:	d01c      	beq.n	11d00 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11cc6:	4810      	ldr	r0, [pc, #64]	; (11d08 <packet_rx_allocate+0x90>)
   11cc8:	f7fd fa99 	bl	f1fe <mem_acquire>
		if (!link) {
   11ccc:	4606      	mov	r6, r0
   11cce:	b1b8      	cbz	r0, 11d00 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11cd0:	480e      	ldr	r0, [pc, #56]	; (11d0c <packet_rx_allocate+0x94>)
   11cd2:	f7fd fa94 	bl	f1fe <mem_acquire>
		if (!radio_pdu_node_rx) {
   11cd6:	4602      	mov	r2, r0
   11cd8:	2800      	cmp	r0, #0
   11cda:	d0df      	beq.n	11c9c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11cdc:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11cde:	4b09      	ldr	r3, [pc, #36]	; (11d04 <packet_rx_allocate+0x8c>)
   11ce0:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11ce4:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11ce8:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11cec:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11cf0:	3401      	adds	r4, #1
   11cf2:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11cf4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11cf8:	429c      	cmp	r4, r3
   11cfa:	d1d4      	bne.n	11ca6 <packet_rx_allocate+0x2e>
			acquire = 0;
   11cfc:	2400      	movs	r4, #0
   11cfe:	e7d2      	b.n	11ca6 <packet_rx_allocate+0x2e>
   11d00:	bd70      	pop	{r4, r5, r6, pc}
   11d02:	bf00      	nop
   11d04:	20000ef4 	.word	0x20000ef4
   11d08:	20001038 	.word	0x20001038
   11d0c:	20001020 	.word	0x20001020

00011d10 <tx_cmplt_get>:
{
   11d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11d14:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11d16:	4294      	cmp	r4, r2
   11d18:	d043      	beq.n	11da2 <tx_cmplt_get+0x92>
   11d1a:	4690      	mov	r8, r2
   11d1c:	4689      	mov	r9, r1
   11d1e:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11d20:	4b21      	ldr	r3, [pc, #132]	; (11da8 <tx_cmplt_get+0x98>)
   11d22:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11d26:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11d2a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11d2c:	2600      	movs	r6, #0
   11d2e:	e00f      	b.n	11d50 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11d30:	2301      	movs	r3, #1
   11d32:	606b      	str	r3, [r5, #4]
			cmplt++;
   11d34:	441e      	add	r6, r3
   11d36:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11d38:	f030 0303 	bics.w	r3, r0, #3
   11d3c:	d126      	bne.n	11d8c <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11d3e:	3401      	adds	r4, #1
   11d40:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   11d42:	4b19      	ldr	r3, [pc, #100]	; (11da8 <tx_cmplt_get+0x98>)
   11d44:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11d48:	429c      	cmp	r4, r3
   11d4a:	d023      	beq.n	11d94 <tx_cmplt_get+0x84>
	} while (_first != last);
   11d4c:	4544      	cmp	r4, r8
   11d4e:	d023      	beq.n	11d98 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11d50:	883a      	ldrh	r2, [r7, #0]
   11d52:	4b15      	ldr	r3, [pc, #84]	; (11da8 <tx_cmplt_get+0x98>)
   11d54:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11d58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11d5c:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11d60:	429a      	cmp	r2, r3
   11d62:	d119      	bne.n	11d98 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   11d64:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   11d66:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11d68:	2801      	cmp	r0, #1
   11d6a:	d9e1      	bls.n	11d30 <tx_cmplt_get+0x20>
   11d6c:	f030 0203 	bics.w	r2, r0, #3
   11d70:	d009      	beq.n	11d86 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11d72:	b143      	cbz	r3, 11d86 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11d74:	7943      	ldrb	r3, [r0, #5]
   11d76:	b133      	cbz	r3, 11d86 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11d78:	7903      	ldrb	r3, [r0, #4]
   11d7a:	f003 0303 	and.w	r3, r3, #3
   11d7e:	3b01      	subs	r3, #1
   11d80:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11d82:	2b01      	cmp	r3, #1
   11d84:	d9d4      	bls.n	11d30 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   11d86:	2302      	movs	r3, #2
   11d88:	606b      	str	r3, [r5, #4]
   11d8a:	e7d5      	b.n	11d38 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11d8c:	4907      	ldr	r1, [pc, #28]	; (11dac <tx_cmplt_get+0x9c>)
   11d8e:	f7fd fa52 	bl	f236 <mem_release>
   11d92:	e7d4      	b.n	11d3e <tx_cmplt_get+0x2e>
			_first = 0;
   11d94:	2400      	movs	r4, #0
   11d96:	e7d9      	b.n	11d4c <tx_cmplt_get+0x3c>
	*first = _first;
   11d98:	f889 4000 	strb.w	r4, [r9]
}
   11d9c:	4630      	mov	r0, r6
   11d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11da2:	2600      	movs	r6, #0
   11da4:	e7fa      	b.n	11d9c <tx_cmplt_get+0x8c>
   11da6:	bf00      	nop
   11da8:	20000ef4 	.word	0x20000ef4
   11dac:	20001054 	.word	0x20001054

00011db0 <ticker_job_disable>:
{
   11db0:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11db2:	4b05      	ldr	r3, [pc, #20]	; (11dc8 <ticker_job_disable+0x18>)
   11db4:	7c1b      	ldrb	r3, [r3, #16]
   11db6:	b903      	cbnz	r3, 11dba <ticker_job_disable+0xa>
   11db8:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11dba:	2200      	movs	r2, #0
   11dbc:	2101      	movs	r1, #1
   11dbe:	4608      	mov	r0, r1
   11dc0:	f7fd f89e 	bl	ef00 <mayfly_enable>
}
   11dc4:	e7f8      	b.n	11db8 <ticker_job_disable+0x8>
   11dc6:	bf00      	nop
   11dc8:	20000ef4 	.word	0x20000ef4

00011dcc <connection_get>:
	if (handle < _radio.connection_count) {
   11dcc:	4b0d      	ldr	r3, [pc, #52]	; (11e04 <connection_get+0x38>)
   11dce:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11dd2:	4283      	cmp	r3, r0
   11dd4:	d910      	bls.n	11df8 <connection_get+0x2c>
{
   11dd6:	b510      	push	{r4, lr}
   11dd8:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11dda:	4602      	mov	r2, r0
   11ddc:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11de0:	4b08      	ldr	r3, [pc, #32]	; (11e04 <connection_get+0x38>)
   11de2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11de6:	f7fd fa47 	bl	f278 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11dea:	4603      	mov	r3, r0
   11dec:	b110      	cbz	r0, 11df4 <connection_get+0x28>
   11dee:	8c02      	ldrh	r2, [r0, #32]
   11df0:	4294      	cmp	r4, r2
   11df2:	d104      	bne.n	11dfe <connection_get+0x32>
}
   11df4:	4618      	mov	r0, r3
   11df6:	bd10      	pop	{r4, pc}
	return 0;
   11df8:	2300      	movs	r3, #0
}
   11dfa:	4618      	mov	r0, r3
   11dfc:	4770      	bx	lr
	return 0;
   11dfe:	2300      	movs	r3, #0
   11e00:	e7f8      	b.n	11df4 <connection_get+0x28>
   11e02:	bf00      	nop
   11e04:	20000ef4 	.word	0x20000ef4

00011e08 <role_disable>:
{
   11e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e0a:	b087      	sub	sp, #28
   11e0c:	4604      	mov	r4, r0
   11e0e:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11e10:	2302      	movs	r3, #2
   11e12:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11e14:	2805      	cmp	r0, #5
   11e16:	d00d      	beq.n	11e34 <role_disable+0x2c>
   11e18:	2806      	cmp	r0, #6
   11e1a:	d02a      	beq.n	11e72 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11e1c:	2806      	cmp	r0, #6
   11e1e:	d957      	bls.n	11ed0 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11e20:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11e22:	b280      	uxth	r0, r0
   11e24:	f7ff ffd2 	bl	11dcc <connection_get>
			if (!conn) {
   11e28:	2800      	cmp	r0, #0
   11e2a:	f000 8153 	beq.w	120d4 <role_disable+0x2cc>
			ticks_xtal_to_start =
   11e2e:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   11e30:	6847      	ldr	r7, [r0, #4]
		break;
   11e32:	e023      	b.n	11e7c <role_disable+0x74>
		ticks_xtal_to_start =
   11e34:	4b9f      	ldr	r3, [pc, #636]	; (120b4 <role_disable+0x2ac>)
   11e36:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11e38:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11e3a:	ab05      	add	r3, sp, #20
   11e3c:	9300      	str	r3, [sp, #0]
   11e3e:	4b9e      	ldr	r3, [pc, #632]	; (120b8 <role_disable+0x2b0>)
   11e40:	460a      	mov	r2, r1
   11e42:	2103      	movs	r1, #3
   11e44:	2000      	movs	r0, #0
   11e46:	f7fe ff47 	bl	10cd8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11e4a:	2802      	cmp	r0, #2
   11e4c:	d00d      	beq.n	11e6a <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11e4e:	9b05      	ldr	r3, [sp, #20]
   11e50:	b1a3      	cbz	r3, 11e7c <role_disable+0x74>
   11e52:	9b05      	ldr	r3, [sp, #20]
   11e54:	2b01      	cmp	r3, #1
   11e56:	d011      	beq.n	11e7c <role_disable+0x74>
   11e58:	4040      	eors	r0, r0
   11e5a:	f380 8811 	msr	BASEPRI, r0
   11e5e:	f04f 0004 	mov.w	r0, #4
   11e62:	df02      	svc	2
   11e64:	bf20      	wfe
  __ASM volatile ("sev");
   11e66:	bf40      	sev
  __ASM volatile ("wfe");
   11e68:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11e6a:	9b05      	ldr	r3, [sp, #20]
   11e6c:	2b02      	cmp	r3, #2
   11e6e:	d0f9      	beq.n	11e64 <role_disable+0x5c>
   11e70:	e7ed      	b.n	11e4e <role_disable+0x46>
		ticks_xtal_to_start =
   11e72:	4b90      	ldr	r3, [pc, #576]	; (120b4 <role_disable+0x2ac>)
   11e74:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11e78:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11e7c:	4b8d      	ldr	r3, [pc, #564]	; (120b4 <role_disable+0x2ac>)
   11e7e:	7b9b      	ldrb	r3, [r3, #14]
   11e80:	2b00      	cmp	r3, #0
   11e82:	d12b      	bne.n	11edc <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   11e84:	4b8b      	ldr	r3, [pc, #556]	; (120b4 <role_disable+0x2ac>)
   11e86:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11e88:	ab06      	add	r3, sp, #24
   11e8a:	2202      	movs	r2, #2
   11e8c:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11e90:	9300      	str	r3, [sp, #0]
   11e92:	4b89      	ldr	r3, [pc, #548]	; (120b8 <role_disable+0x2b0>)
   11e94:	4622      	mov	r2, r4
   11e96:	2103      	movs	r1, #3
   11e98:	2000      	movs	r0, #0
   11e9a:	f7fe ff1d 	bl	10cd8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11e9e:	2802      	cmp	r0, #2
   11ea0:	d022      	beq.n	11ee8 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11ea2:	9b05      	ldr	r3, [sp, #20]
   11ea4:	b973      	cbnz	r3, 11ec4 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11ea6:	4b83      	ldr	r3, [pc, #524]	; (120b4 <role_disable+0x2ac>)
   11ea8:	7b1b      	ldrb	r3, [r3, #12]
   11eaa:	b2db      	uxtb	r3, r3
   11eac:	429c      	cmp	r4, r3
   11eae:	d02d      	beq.n	11f0c <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11eb0:	4b80      	ldr	r3, [pc, #512]	; (120b4 <role_disable+0x2ac>)
   11eb2:	7b5b      	ldrb	r3, [r3, #13]
   11eb4:	b2db      	uxtb	r3, r3
   11eb6:	429c      	cmp	r4, r3
   11eb8:	d028      	beq.n	11f0c <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   11eba:	4b7e      	ldr	r3, [pc, #504]	; (120b4 <role_disable+0x2ac>)
   11ebc:	7b9b      	ldrb	r3, [r3, #14]
   11ebe:	b90b      	cbnz	r3, 11ec4 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11ec0:	2301      	movs	r3, #1
   11ec2:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   11ec4:	2200      	movs	r2, #0
   11ec6:	4b7b      	ldr	r3, [pc, #492]	; (120b4 <role_disable+0x2ac>)
   11ec8:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   11eca:	9805      	ldr	r0, [sp, #20]
}
   11ecc:	b007      	add	sp, #28
   11ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11ed0:	4040      	eors	r0, r0
   11ed2:	f380 8811 	msr	BASEPRI, r0
   11ed6:	f04f 0004 	mov.w	r0, #4
   11eda:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   11edc:	4040      	eors	r0, r0
   11ede:	f380 8811 	msr	BASEPRI, r0
   11ee2:	f04f 0004 	mov.w	r0, #4
   11ee6:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   11ee8:	4b72      	ldr	r3, [pc, #456]	; (120b4 <role_disable+0x2ac>)
   11eea:	7b5b      	ldrb	r3, [r3, #13]
   11eec:	b2db      	uxtb	r3, r3
   11eee:	429c      	cmp	r4, r3
   11ef0:	d108      	bne.n	11f04 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11ef2:	2201      	movs	r2, #1
   11ef4:	4611      	mov	r1, r2
   11ef6:	2003      	movs	r0, #3
   11ef8:	f7fd f802 	bl	ef00 <mayfly_enable>
   11efc:	e002      	b.n	11f04 <role_disable+0xfc>
   11efe:	bf20      	wfe
  __ASM volatile ("sev");
   11f00:	bf40      	sev
  __ASM volatile ("wfe");
   11f02:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   11f04:	9b05      	ldr	r3, [sp, #20]
   11f06:	2b02      	cmp	r3, #2
   11f08:	d0f9      	beq.n	11efe <role_disable+0xf6>
   11f0a:	e7ca      	b.n	11ea2 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f0c:	ab06      	add	r3, sp, #24
   11f0e:	2202      	movs	r2, #2
   11f10:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f14:	9300      	str	r3, [sp, #0]
   11f16:	4b68      	ldr	r3, [pc, #416]	; (120b8 <role_disable+0x2b0>)
   11f18:	2200      	movs	r2, #0
   11f1a:	2103      	movs	r1, #3
   11f1c:	4610      	mov	r0, r2
   11f1e:	f7fe fedb 	bl	10cd8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11f22:	2802      	cmp	r0, #2
   11f24:	d029      	beq.n	11f7a <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f26:	9b02      	ldr	r3, [sp, #8]
   11f28:	2b00      	cmp	r3, #0
   11f2a:	d17c      	bne.n	12026 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f2c:	2302      	movs	r3, #2
   11f2e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11f30:	4b60      	ldr	r3, [pc, #384]	; (120b4 <role_disable+0x2ac>)
   11f32:	7b1b      	ldrb	r3, [r3, #12]
   11f34:	2b00      	cmp	r3, #0
   11f36:	d02e      	beq.n	11f96 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   11f38:	2000      	movs	r0, #0
   11f3a:	4b5e      	ldr	r3, [pc, #376]	; (120b4 <role_disable+0x2ac>)
   11f3c:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f3e:	ab03      	add	r3, sp, #12
   11f40:	9300      	str	r3, [sp, #0]
   11f42:	4b5d      	ldr	r3, [pc, #372]	; (120b8 <role_disable+0x2b0>)
   11f44:	2201      	movs	r2, #1
   11f46:	2103      	movs	r1, #3
   11f48:	f7fe fec6 	bl	10cd8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11f4c:	2802      	cmp	r0, #2
   11f4e:	d028      	beq.n	11fa2 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f50:	9b03      	ldr	r3, [sp, #12]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d142      	bne.n	11fdc <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   11f56:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11f5a:	42b7      	cmp	r7, r6
   11f5c:	d92f      	bls.n	11fbe <role_disable+0x1b6>
				retval = mayfly_enqueue(
   11f5e:	4b57      	ldr	r3, [pc, #348]	; (120bc <role_disable+0x2b4>)
   11f60:	2200      	movs	r2, #0
   11f62:	4611      	mov	r1, r2
   11f64:	2003      	movs	r0, #3
   11f66:	f7fd f809 	bl	ef7c <mayfly_enqueue>
				LL_ASSERT(!retval);
   11f6a:	2800      	cmp	r0, #0
   11f6c:	d0a5      	beq.n	11eba <role_disable+0xb2>
   11f6e:	4040      	eors	r0, r0
   11f70:	f380 8811 	msr	BASEPRI, r0
   11f74:	f04f 0004 	mov.w	r0, #4
   11f78:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11f7a:	2201      	movs	r2, #1
   11f7c:	4611      	mov	r1, r2
   11f7e:	2003      	movs	r0, #3
   11f80:	f7fc ffbe 	bl	ef00 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11f84:	9b02      	ldr	r3, [sp, #8]
   11f86:	2b02      	cmp	r3, #2
   11f88:	d1cd      	bne.n	11f26 <role_disable+0x11e>
   11f8a:	4040      	eors	r0, r0
   11f8c:	f380 8811 	msr	BASEPRI, r0
   11f90:	f04f 0004 	mov.w	r0, #4
   11f94:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   11f96:	4040      	eors	r0, r0
   11f98:	f380 8811 	msr	BASEPRI, r0
   11f9c:	f04f 0004 	mov.w	r0, #4
   11fa0:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11fa2:	2201      	movs	r2, #1
   11fa4:	4611      	mov	r1, r2
   11fa6:	2003      	movs	r0, #3
   11fa8:	f7fc ffaa 	bl	ef00 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11fac:	9b03      	ldr	r3, [sp, #12]
   11fae:	2b02      	cmp	r3, #2
   11fb0:	d1ce      	bne.n	11f50 <role_disable+0x148>
   11fb2:	4040      	eors	r0, r0
   11fb4:	f380 8811 	msr	BASEPRI, r0
   11fb8:	f04f 0004 	mov.w	r0, #4
   11fbc:	df02      	svc	2
				retval = mayfly_enqueue(
   11fbe:	4b40      	ldr	r3, [pc, #256]	; (120c0 <role_disable+0x2b8>)
   11fc0:	2200      	movs	r2, #0
   11fc2:	4611      	mov	r1, r2
   11fc4:	2003      	movs	r0, #3
   11fc6:	f7fc ffd9 	bl	ef7c <mayfly_enqueue>
				LL_ASSERT(!retval);
   11fca:	2800      	cmp	r0, #0
   11fcc:	f43f af75 	beq.w	11eba <role_disable+0xb2>
   11fd0:	4040      	eors	r0, r0
   11fd2:	f380 8811 	msr	BASEPRI, r0
   11fd6:	f04f 0004 	mov.w	r0, #4
   11fda:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11fdc:	9b03      	ldr	r3, [sp, #12]
   11fde:	2b01      	cmp	r3, #1
   11fe0:	d11b      	bne.n	1201a <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11fe2:	4b36      	ldr	r3, [pc, #216]	; (120bc <role_disable+0x2b4>)
   11fe4:	2200      	movs	r2, #0
   11fe6:	4611      	mov	r1, r2
   11fe8:	2003      	movs	r0, #3
   11fea:	f7fc ffc7 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   11fee:	b970      	cbnz	r0, 1200e <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11ff0:	4b33      	ldr	r3, [pc, #204]	; (120c0 <role_disable+0x2b8>)
   11ff2:	2200      	movs	r2, #0
   11ff4:	4611      	mov	r1, r2
   11ff6:	2003      	movs	r0, #3
   11ff8:	f7fc ffc0 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   11ffc:	2800      	cmp	r0, #0
   11ffe:	f43f af5c 	beq.w	11eba <role_disable+0xb2>
   12002:	4040      	eors	r0, r0
   12004:	f380 8811 	msr	BASEPRI, r0
   12008:	f04f 0004 	mov.w	r0, #4
   1200c:	df02      	svc	2
			LL_ASSERT(!retval);
   1200e:	4040      	eors	r0, r0
   12010:	f380 8811 	msr	BASEPRI, r0
   12014:	f04f 0004 	mov.w	r0, #4
   12018:	df02      	svc	2
			LL_ASSERT(0);
   1201a:	4040      	eors	r0, r0
   1201c:	f380 8811 	msr	BASEPRI, r0
   12020:	f04f 0004 	mov.w	r0, #4
   12024:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12026:	9b02      	ldr	r3, [sp, #8]
   12028:	2b01      	cmp	r3, #1
   1202a:	d14d      	bne.n	120c8 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   1202c:	2dff      	cmp	r5, #255	; 0xff
   1202e:	d011      	beq.n	12054 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12030:	ab06      	add	r3, sp, #24
   12032:	2202      	movs	r2, #2
   12034:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12038:	9300      	str	r3, [sp, #0]
   1203a:	4b1f      	ldr	r3, [pc, #124]	; (120b8 <role_disable+0x2b0>)
   1203c:	462a      	mov	r2, r5
   1203e:	2103      	movs	r1, #3
   12040:	2000      	movs	r0, #0
   12042:	f7fe fe49 	bl	10cd8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   12046:	2802      	cmp	r0, #2
   12048:	d018      	beq.n	1207c <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1204a:	9b04      	ldr	r3, [sp, #16]
   1204c:	b113      	cbz	r3, 12054 <role_disable+0x24c>
   1204e:	9b04      	ldr	r3, [sp, #16]
   12050:	2b01      	cmp	r3, #1
   12052:	d121      	bne.n	12098 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   12054:	4b17      	ldr	r3, [pc, #92]	; (120b4 <role_disable+0x2ac>)
   12056:	7bdb      	ldrb	r3, [r3, #15]
   12058:	2b00      	cmp	r3, #0
   1205a:	f43f af2e 	beq.w	11eba <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1205e:	4b19      	ldr	r3, [pc, #100]	; (120c4 <role_disable+0x2bc>)
   12060:	2204      	movs	r2, #4
   12062:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12064:	2200      	movs	r2, #0
   12066:	4611      	mov	r1, r2
   12068:	2003      	movs	r0, #3
   1206a:	f7fc ff87 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   1206e:	b1e0      	cbz	r0, 120aa <role_disable+0x2a2>
   12070:	4040      	eors	r0, r0
   12072:	f380 8811 	msr	BASEPRI, r0
   12076:	f04f 0004 	mov.w	r0, #4
   1207a:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1207c:	2201      	movs	r2, #1
   1207e:	4611      	mov	r1, r2
   12080:	2003      	movs	r0, #3
   12082:	f7fc ff3d 	bl	ef00 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   12086:	9b04      	ldr	r3, [sp, #16]
   12088:	2b02      	cmp	r3, #2
   1208a:	d1de      	bne.n	1204a <role_disable+0x242>
   1208c:	4040      	eors	r0, r0
   1208e:	f380 8811 	msr	BASEPRI, r0
   12092:	f04f 0004 	mov.w	r0, #4
   12096:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12098:	4040      	eors	r0, r0
   1209a:	f380 8811 	msr	BASEPRI, r0
   1209e:	f04f 0004 	mov.w	r0, #4
   120a2:	df02      	svc	2
   120a4:	bf20      	wfe
  __ASM volatile ("sev");
   120a6:	bf40      	sev
  __ASM volatile ("wfe");
   120a8:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   120aa:	4b02      	ldr	r3, [pc, #8]	; (120b4 <role_disable+0x2ac>)
   120ac:	7bdb      	ldrb	r3, [r3, #15]
   120ae:	2b00      	cmp	r3, #0
   120b0:	d1f8      	bne.n	120a4 <role_disable+0x29c>
   120b2:	e702      	b.n	11eba <role_disable+0xb2>
   120b4:	20000ef4 	.word	0x20000ef4
   120b8:	00011585 	.word	0x00011585
   120bc:	2000bc58 	.word	0x2000bc58
   120c0:	2000bd18 	.word	0x2000bd18
   120c4:	2000bc88 	.word	0x2000bc88
		LL_ASSERT(0);
   120c8:	4040      	eors	r0, r0
   120ca:	f380 8811 	msr	BASEPRI, r0
   120ce:	f04f 0004 	mov.w	r0, #4
   120d2:	df02      	svc	2
				return 1;
   120d4:	2001      	movs	r0, #1
   120d6:	e6f9      	b.n	11ecc <role_disable+0xc4>

000120d8 <event_stop>:
{
   120d8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   120da:	4a08      	ldr	r2, [pc, #32]	; (120fc <event_stop+0x24>)
   120dc:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   120de:	4613      	mov	r3, r2
   120e0:	2200      	movs	r2, #0
   120e2:	4611      	mov	r1, r2
   120e4:	4610      	mov	r0, r2
   120e6:	f7fc ff49 	bl	ef7c <mayfly_enqueue>
	LL_ASSERT(!retval);
   120ea:	b900      	cbnz	r0, 120ee <event_stop+0x16>
   120ec:	bd08      	pop	{r3, pc}
   120ee:	4040      	eors	r0, r0
   120f0:	f380 8811 	msr	BASEPRI, r0
   120f4:	f04f 0004 	mov.w	r0, #4
   120f8:	df02      	svc	2
   120fa:	bf00      	nop
   120fc:	2000bc68 	.word	0x2000bc68

00012100 <event_adv_stop>:
{
   12100:	b500      	push	{lr}
   12102:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   12104:	2305      	movs	r3, #5
   12106:	2200      	movs	r2, #0
   12108:	4611      	mov	r1, r2
   1210a:	4610      	mov	r0, r2
   1210c:	f7ff ffe4 	bl	120d8 <event_stop>
	ticker_status =
   12110:	f241 73e4 	movw	r3, #6116	; 0x17e4
   12114:	9300      	str	r3, [sp, #0]
   12116:	4b09      	ldr	r3, [pc, #36]	; (1213c <event_adv_stop+0x3c>)
   12118:	2205      	movs	r2, #5
   1211a:	2100      	movs	r1, #0
   1211c:	4608      	mov	r0, r1
   1211e:	f7fe fddb 	bl	10cd8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12122:	b108      	cbz	r0, 12128 <event_adv_stop+0x28>
   12124:	2802      	cmp	r0, #2
   12126:	d102      	bne.n	1212e <event_adv_stop+0x2e>
}
   12128:	b003      	add	sp, #12
   1212a:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1212e:	4040      	eors	r0, r0
   12130:	f380 8811 	msr	BASEPRI, r0
   12134:	f04f 0004 	mov.w	r0, #4
   12138:	df02      	svc	2
   1213a:	bf00      	nop
   1213c:	000129c1 	.word	0x000129c1

00012140 <event_inactive>:
{
   12140:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12142:	4b07      	ldr	r3, [pc, #28]	; (12160 <event_inactive+0x20>)
   12144:	2200      	movs	r2, #0
   12146:	4611      	mov	r1, r2
   12148:	4610      	mov	r0, r2
   1214a:	f7fc ff17 	bl	ef7c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1214e:	b900      	cbnz	r0, 12152 <event_inactive+0x12>
   12150:	bd08      	pop	{r3, pc}
   12152:	4040      	eors	r0, r0
   12154:	f380 8811 	msr	BASEPRI, r0
   12158:	f04f 0004 	mov.w	r0, #4
   1215c:	df02      	svc	2
   1215e:	bf00      	nop
   12160:	2000bc38 	.word	0x2000bc38

00012164 <mayfly_xtal_retain>:
{
   12164:	b508      	push	{r3, lr}
	if (retain) {
   12166:	b1d1      	cbz	r1, 1219e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   12168:	4b1c      	ldr	r3, [pc, #112]	; (121dc <mayfly_xtal_retain+0x78>)
   1216a:	781b      	ldrb	r3, [r3, #0]
   1216c:	b953      	cbnz	r3, 12184 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1216e:	2801      	cmp	r0, #1
   12170:	d109      	bne.n	12186 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   12172:	2201      	movs	r2, #1
   12174:	4b19      	ldr	r3, [pc, #100]	; (121dc <mayfly_xtal_retain+0x78>)
   12176:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   12178:	4b19      	ldr	r3, [pc, #100]	; (121e0 <mayfly_xtal_retain+0x7c>)
   1217a:	2200      	movs	r2, #0
   1217c:	4611      	mov	r1, r2
   1217e:	f7fc fefd 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12182:	b930      	cbnz	r0, 12192 <mayfly_xtal_retain+0x2e>
   12184:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   12186:	4040      	eors	r0, r0
   12188:	f380 8811 	msr	BASEPRI, r0
   1218c:	f04f 0004 	mov.w	r0, #4
   12190:	df02      	svc	2
			LL_ASSERT(!retval);
   12192:	4040      	eors	r0, r0
   12194:	f380 8811 	msr	BASEPRI, r0
   12198:	f04f 0004 	mov.w	r0, #4
   1219c:	df02      	svc	2
		if (s_xtal_retained) {
   1219e:	4b0f      	ldr	r3, [pc, #60]	; (121dc <mayfly_xtal_retain+0x78>)
   121a0:	781b      	ldrb	r3, [r3, #0]
   121a2:	2b00      	cmp	r3, #0
   121a4:	d0ee      	beq.n	12184 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   121a6:	2200      	movs	r2, #0
   121a8:	4b0c      	ldr	r3, [pc, #48]	; (121dc <mayfly_xtal_retain+0x78>)
   121aa:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   121ac:	b138      	cbz	r0, 121be <mayfly_xtal_retain+0x5a>
   121ae:	2801      	cmp	r0, #1
   121b0:	d012      	beq.n	121d8 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   121b2:	4040      	eors	r0, r0
   121b4:	f380 8811 	msr	BASEPRI, r0
   121b8:	f04f 0004 	mov.w	r0, #4
   121bc:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   121be:	4b09      	ldr	r3, [pc, #36]	; (121e4 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   121c0:	2200      	movs	r2, #0
   121c2:	4611      	mov	r1, r2
   121c4:	f7fc feda 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   121c8:	2800      	cmp	r0, #0
   121ca:	d0db      	beq.n	12184 <mayfly_xtal_retain+0x20>
   121cc:	4040      	eors	r0, r0
   121ce:	f380 8811 	msr	BASEPRI, r0
   121d2:	f04f 0004 	mov.w	r0, #4
   121d6:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   121d8:	4b03      	ldr	r3, [pc, #12]	; (121e8 <mayfly_xtal_retain+0x84>)
   121da:	e7f1      	b.n	121c0 <mayfly_xtal_retain+0x5c>
   121dc:	2000146c 	.word	0x2000146c
   121e0:	2000bcd8 	.word	0x2000bcd8
   121e4:	2000bce8 	.word	0x2000bce8
   121e8:	2000bcf8 	.word	0x2000bcf8

000121ec <event_active>:
{
   121ec:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   121ee:	4b07      	ldr	r3, [pc, #28]	; (1220c <event_active+0x20>)
   121f0:	2200      	movs	r2, #0
   121f2:	4611      	mov	r1, r2
   121f4:	4610      	mov	r0, r2
   121f6:	f7fc fec1 	bl	ef7c <mayfly_enqueue>
	LL_ASSERT(!retval);
   121fa:	b900      	cbnz	r0, 121fe <event_active+0x12>
   121fc:	bd08      	pop	{r3, pc}
   121fe:	4040      	eors	r0, r0
   12200:	f380 8811 	msr	BASEPRI, r0
   12204:	f04f 0004 	mov.w	r0, #4
   12208:	df02      	svc	2
   1220a:	bf00      	nop
   1220c:	2000bc28 	.word	0x2000bc28

00012210 <event_xtal>:
{
   12210:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12212:	4b07      	ldr	r3, [pc, #28]	; (12230 <event_xtal+0x20>)
   12214:	2200      	movs	r2, #0
   12216:	4611      	mov	r1, r2
   12218:	4610      	mov	r0, r2
   1221a:	f7fc feaf 	bl	ef7c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1221e:	b900      	cbnz	r0, 12222 <event_xtal+0x12>
   12220:	bd08      	pop	{r3, pc}
   12222:	4040      	eors	r0, r0
   12224:	f380 8811 	msr	BASEPRI, r0
   12228:	f04f 0004 	mov.w	r0, #4
   1222c:	df02      	svc	2
   1222e:	bf00      	nop
   12230:	2000bcc8 	.word	0x2000bcc8

00012234 <mayfly_radio_active>:
{
   12234:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   12236:	b148      	cbz	r0, 1224c <mayfly_radio_active+0x18>
		if (s_active++) {
   12238:	4a0e      	ldr	r2, [pc, #56]	; (12274 <mayfly_radio_active+0x40>)
   1223a:	7813      	ldrb	r3, [r2, #0]
   1223c:	1c59      	adds	r1, r3, #1
   1223e:	7011      	strb	r1, [r2, #0]
   12240:	b103      	cbz	r3, 12244 <mayfly_radio_active+0x10>
   12242:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   12244:	2001      	movs	r0, #1
   12246:	f007 f8a5 	bl	19394 <radio_active_callback>
   1224a:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   1224c:	4b09      	ldr	r3, [pc, #36]	; (12274 <mayfly_radio_active+0x40>)
   1224e:	781b      	ldrb	r3, [r3, #0]
   12250:	b14b      	cbz	r3, 12266 <mayfly_radio_active+0x32>
		if (--s_active) {
   12252:	3b01      	subs	r3, #1
   12254:	b2db      	uxtb	r3, r3
   12256:	4a07      	ldr	r2, [pc, #28]	; (12274 <mayfly_radio_active+0x40>)
   12258:	7013      	strb	r3, [r2, #0]
   1225a:	2b00      	cmp	r3, #0
   1225c:	d1f1      	bne.n	12242 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   1225e:	2000      	movs	r0, #0
   12260:	f007 f898 	bl	19394 <radio_active_callback>
   12264:	e7ed      	b.n	12242 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   12266:	4040      	eors	r0, r0
   12268:	f380 8811 	msr	BASEPRI, r0
   1226c:	f04f 0004 	mov.w	r0, #4
   12270:	df02      	svc	2
   12272:	bf00      	nop
   12274:	200013d8 	.word	0x200013d8

00012278 <mayfly_radio_inactive>:
{
   12278:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   1227a:	2000      	movs	r0, #0
   1227c:	f7ff ffda 	bl	12234 <mayfly_radio_active>
   12280:	bd08      	pop	{r3, pc}
	...

00012284 <mayfly_radio_stop>:
{
   12284:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   12286:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12288:	1f23      	subs	r3, r4, #4
   1228a:	b2db      	uxtb	r3, r3
   1228c:	2b01      	cmp	r3, #1
   1228e:	d808      	bhi.n	122a2 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12290:	4b10      	ldr	r3, [pc, #64]	; (122d4 <mayfly_radio_stop+0x50>)
   12292:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   12294:	b16b      	cbz	r3, 122b2 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12296:	2b04      	cmp	r3, #4
   12298:	d014      	beq.n	122c4 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   1229a:	2b05      	cmp	r3, #5
   1229c:	d007      	beq.n	122ae <mayfly_radio_stop+0x2a>
   1229e:	2301      	movs	r3, #1
   122a0:	e008      	b.n	122b4 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   122a2:	4040      	eors	r0, r0
   122a4:	f380 8811 	msr	BASEPRI, r0
   122a8:	f04f 0004 	mov.w	r0, #4
   122ac:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   122ae:	2300      	movs	r3, #0
   122b0:	e000      	b.n	122b4 <mayfly_radio_stop+0x30>
   122b2:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   122b4:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   122b6:	b13b      	cbz	r3, 122c8 <mayfly_radio_stop+0x44>
		if (radio_used) {
   122b8:	b10d      	cbz	r5, 122be <mayfly_radio_stop+0x3a>
			_radio.state = state;
   122ba:	4b06      	ldr	r3, [pc, #24]	; (122d4 <mayfly_radio_stop+0x50>)
   122bc:	741c      	strb	r4, [r3, #16]
		radio_disable();
   122be:	f7fd f9b3 	bl	f628 <radio_disable>
   122c2:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   122c4:	2300      	movs	r3, #0
   122c6:	e7f5      	b.n	122b4 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   122c8:	f7fd f9dc 	bl	f684 <radio_is_idle>
   122cc:	2800      	cmp	r0, #0
   122ce:	d0f3      	beq.n	122b8 <mayfly_radio_stop+0x34>
   122d0:	e7f7      	b.n	122c2 <mayfly_radio_stop+0x3e>
   122d2:	bf00      	nop
   122d4:	20000ef4 	.word	0x20000ef4

000122d8 <adv_scan_conn_configure>:
{
   122d8:	b508      	push	{r3, lr}
	radio_reset();
   122da:	f7fd f8ff 	bl	f4dc <radio_reset>
	radio_tx_power_set(0);
   122de:	2000      	movs	r0, #0
   122e0:	f7fd f918 	bl	f514 <radio_tx_power_set>
	radio_isr_set(isr);
   122e4:	4801      	ldr	r0, [pc, #4]	; (122ec <adv_scan_conn_configure+0x14>)
   122e6:	f7fd f8c1 	bl	f46c <radio_isr_set>
   122ea:	bd08      	pop	{r3, pc}
   122ec:	0000fc21 	.word	0x0000fc21

000122f0 <adv_scan_configure>:
{
   122f0:	b570      	push	{r4, r5, r6, lr}
   122f2:	b082      	sub	sp, #8
   122f4:	4604      	mov	r4, r0
   122f6:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   122f8:	ad02      	add	r5, sp, #8
   122fa:	4b0d      	ldr	r3, [pc, #52]	; (12330 <adv_scan_configure+0x40>)
   122fc:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   12300:	f7ff ffea 	bl	122d8 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   12304:	4631      	mov	r1, r6
   12306:	4620      	mov	r0, r4
   12308:	f7fd f8f6 	bl	f4f8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   1230c:	4628      	mov	r0, r5
   1230e:	f7fd f91f 	bl	f550 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   12312:	0062      	lsls	r2, r4, #1
   12314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   12318:	2125      	movs	r1, #37	; 0x25
   1231a:	2008      	movs	r0, #8
   1231c:	f7fd f930 	bl	f580 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12320:	4904      	ldr	r1, [pc, #16]	; (12334 <adv_scan_configure+0x44>)
   12322:	f240 605b 	movw	r0, #1627	; 0x65b
   12326:	f7fd f9b7 	bl	f698 <radio_crc_configure>
}
   1232a:	b002      	add	sp, #8
   1232c:	bd70      	pop	{r4, r5, r6, pc}
   1232e:	bf00      	nop
   12330:	8e89bed6 	.word	0x8e89bed6
   12334:	00555555 	.word	0x00555555

00012338 <connection_configure>:
{
   12338:	b510      	push	{r4, lr}
   1233a:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   1233c:	f7ff ffcc 	bl	122d8 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   12340:	f104 0010 	add.w	r0, r4, #16
   12344:	f7fd f904 	bl	f550 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   12348:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   1234a:	7d63      	ldrb	r3, [r4, #21]
   1234c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   1234e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   12352:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12354:	4319      	orrs	r1, r3
   12356:	f240 605b 	movw	r0, #1627	; 0x65b
   1235a:	f7fd f99d 	bl	f698 <radio_crc_configure>
   1235e:	bd10      	pop	{r4, pc}

00012360 <rx_packet_set>:
{
   12360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12362:	4605      	mov	r5, r0
   12364:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   12366:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   12368:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   1236c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   12370:	2100      	movs	r1, #0
   12372:	4620      	mov	r0, r4
   12374:	f7fd f8c0 	bl	f4f8 <radio_phy_set>
	if (conn->enc_rx) {
   12378:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1237c:	f013 0f10 	tst.w	r3, #16
   12380:	d10a      	bne.n	12398 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12382:	0062      	lsls	r2, r4, #1
   12384:	f042 0201 	orr.w	r2, r2, #1
   12388:	b2f1      	uxtb	r1, r6
   1238a:	2008      	movs	r0, #8
   1238c:	f7fd f8f8 	bl	f580 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12390:	4638      	mov	r0, r7
   12392:	f7fd f925 	bl	f5e0 <radio_pkt_rx_set>
   12396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12398:	0062      	lsls	r2, r4, #1
   1239a:	1d31      	adds	r1, r6, #4
   1239c:	f042 0201 	orr.w	r2, r2, #1
   123a0:	b2c9      	uxtb	r1, r1
   123a2:	2008      	movs	r0, #8
   123a4:	f7fd f8ec 	bl	f580 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   123a8:	463a      	mov	r2, r7
   123aa:	4621      	mov	r1, r4
   123ac:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   123b0:	f7fd fb12 	bl	f9d8 <radio_ccm_rx_pkt_set>
   123b4:	f7fd f914 	bl	f5e0 <radio_pkt_rx_set>
   123b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000123ba <packet_rx_callback>:
{
   123ba:	b508      	push	{r3, lr}
	radio_event_callback();
   123bc:	f006 ffec 	bl	19398 <radio_event_callback>
   123c0:	bd08      	pop	{r3, pc}
	...

000123c4 <pdu_node_tx_release>:
{
   123c4:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   123c6:	4a14      	ldr	r2, [pc, #80]	; (12418 <pdu_node_tx_release+0x54>)
   123c8:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   123cc:	3301      	adds	r3, #1
   123ce:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   123d0:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   123d4:	4293      	cmp	r3, r2
   123d6:	d017      	beq.n	12408 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   123d8:	4a0f      	ldr	r2, [pc, #60]	; (12418 <pdu_node_tx_release+0x54>)
   123da:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   123de:	4293      	cmp	r3, r2
   123e0:	d014      	beq.n	1240c <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   123e2:	4a0d      	ldr	r2, [pc, #52]	; (12418 <pdu_node_tx_release+0x54>)
   123e4:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   123e8:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   123ec:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   123f0:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   123f4:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   123f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   123fc:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   123fe:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   12402:	f7ff ffda 	bl	123ba <packet_rx_callback>
   12406:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   12408:	2300      	movs	r3, #0
   1240a:	e7e5      	b.n	123d8 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   1240c:	4040      	eors	r0, r0
   1240e:	f380 8811 	msr	BASEPRI, r0
   12412:	f04f 0004 	mov.w	r0, #4
   12416:	df02      	svc	2
   12418:	20000ef4 	.word	0x20000ef4

0001241c <packet_tx_enqueue>:
{
   1241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1241e:	e016      	b.n	1244e <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   12420:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   12424:	2b00      	cmp	r3, #0
   12426:	d040      	beq.n	124aa <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   12428:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   1242c:	b103      	cbz	r3, 12430 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   1242e:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   12430:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   12434:	4a24      	ldr	r2, [pc, #144]	; (124c8 <packet_tx_enqueue+0xac>)
   12436:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   1243a:	3301      	adds	r3, #1
   1243c:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   1243e:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   12442:	4293      	cmp	r3, r2
   12444:	d03c      	beq.n	124c0 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   12446:	4a20      	ldr	r2, [pc, #128]	; (124c8 <packet_tx_enqueue+0xac>)
   12448:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1244c:	4638      	mov	r0, r7
   1244e:	1e47      	subs	r7, r0, #1
   12450:	b2ff      	uxtb	r7, r7
   12452:	2800      	cmp	r0, #0
   12454:	d036      	beq.n	124c4 <packet_tx_enqueue+0xa8>
   12456:	4a1c      	ldr	r2, [pc, #112]	; (124c8 <packet_tx_enqueue+0xac>)
   12458:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   1245c:	b2db      	uxtb	r3, r3
   1245e:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   12462:	4293      	cmp	r3, r2
   12464:	d02e      	beq.n	124c4 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12466:	4b18      	ldr	r3, [pc, #96]	; (124c8 <packet_tx_enqueue+0xac>)
   12468:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   1246c:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   12470:	b2e4      	uxtb	r4, r4
   12472:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   12476:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   12478:	2200      	movs	r2, #0
   1247a:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1247c:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   12480:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12484:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12488:	f7fc fef6 	bl	f278 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   1248c:	8c02      	ldrh	r2, [r0, #32]
   1248e:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   12492:	429a      	cmp	r2, r3
   12494:	d0c4      	beq.n	12420 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12496:	792b      	ldrb	r3, [r5, #4]
   12498:	f36f 0301 	bfc	r3, #0, #2
   1249c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1249e:	4629      	mov	r1, r5
   124a0:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   124a4:	f7ff ff8e 	bl	123c4 <pdu_node_tx_release>
   124a8:	e7c4      	b.n	12434 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   124aa:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   124ae:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   124b2:	2b00      	cmp	r3, #0
   124b4:	d1b8      	bne.n	12428 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   124b6:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   124ba:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   124be:	e7b3      	b.n	12428 <packet_tx_enqueue+0xc>
			first = 0;
   124c0:	2300      	movs	r3, #0
   124c2:	e7c0      	b.n	12446 <packet_tx_enqueue+0x2a>
   124c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124c6:	bf00      	nop
   124c8:	20000ef4 	.word	0x20000ef4

000124cc <connection_release>:
{
   124cc:	b510      	push	{r4, lr}
   124ce:	b082      	sub	sp, #8
   124d0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   124d2:	2201      	movs	r2, #1
   124d4:	4611      	mov	r1, r2
   124d6:	2000      	movs	r0, #0
   124d8:	f7fc fd12 	bl	ef00 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   124dc:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   124de:	3207      	adds	r2, #7
	ticker_status =
   124e0:	f242 2345 	movw	r3, #8773	; 0x2245
   124e4:	9300      	str	r3, [sp, #0]
   124e6:	4b46      	ldr	r3, [pc, #280]	; (12600 <connection_release+0x134>)
   124e8:	b2d2      	uxtb	r2, r2
   124ea:	2100      	movs	r1, #0
   124ec:	4608      	mov	r0, r1
   124ee:	f7fe fbf3 	bl	10cd8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124f2:	b108      	cbz	r0, 124f8 <connection_release+0x2c>
   124f4:	2802      	cmp	r0, #2
   124f6:	d12a      	bne.n	1254e <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   124f8:	4b42      	ldr	r3, [pc, #264]	; (12604 <connection_release+0x138>)
   124fa:	7c1b      	ldrb	r3, [r3, #16]
   124fc:	2b05      	cmp	r3, #5
   124fe:	d13e      	bne.n	1257e <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12500:	4b40      	ldr	r3, [pc, #256]	; (12604 <connection_release+0x138>)
   12502:	7b1a      	ldrb	r2, [r3, #12]
   12504:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   12506:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   12508:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   1250a:	429a      	cmp	r2, r3
   1250c:	d137      	bne.n	1257e <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   1250e:	2000      	movs	r0, #0
   12510:	4b3c      	ldr	r3, [pc, #240]	; (12604 <connection_release+0x138>)
   12512:	7318      	strb	r0, [r3, #12]
		ticker_status =
   12514:	f242 2356 	movw	r3, #8790	; 0x2256
   12518:	9300      	str	r3, [sp, #0]
   1251a:	4b39      	ldr	r3, [pc, #228]	; (12600 <connection_release+0x134>)
   1251c:	2201      	movs	r2, #1
   1251e:	4601      	mov	r1, r0
   12520:	f7fe fbda 	bl	10cd8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12524:	b108      	cbz	r0, 1252a <connection_release+0x5e>
   12526:	2802      	cmp	r0, #2
   12528:	d117      	bne.n	1255a <connection_release+0x8e>
		ticker_status =
   1252a:	f242 235d 	movw	r3, #8797	; 0x225d
   1252e:	9300      	str	r3, [sp, #0]
   12530:	4b33      	ldr	r3, [pc, #204]	; (12600 <connection_release+0x134>)
   12532:	2200      	movs	r2, #0
   12534:	4611      	mov	r1, r2
   12536:	4610      	mov	r0, r2
   12538:	f7fe fbce 	bl	10cd8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1253c:	b1f8      	cbz	r0, 1257e <connection_release+0xb2>
   1253e:	2802      	cmp	r0, #2
   12540:	d01d      	beq.n	1257e <connection_release+0xb2>
   12542:	4040      	eors	r0, r0
   12544:	f380 8811 	msr	BASEPRI, r0
   12548:	f04f 0004 	mov.w	r0, #4
   1254c:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1254e:	4040      	eors	r0, r0
   12550:	f380 8811 	msr	BASEPRI, r0
   12554:	f04f 0004 	mov.w	r0, #4
   12558:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1255a:	4040      	eors	r0, r0
   1255c:	f380 8811 	msr	BASEPRI, r0
   12560:	f04f 0004 	mov.w	r0, #4
   12564:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12566:	790b      	ldrb	r3, [r1, #4]
   12568:	f36f 0301 	bfc	r3, #0, #2
   1256c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1256e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12572:	681b      	ldr	r3, [r3, #0]
   12574:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12578:	8c20      	ldrh	r0, [r4, #32]
   1257a:	f7ff ff23 	bl	123c4 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1257e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12582:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12586:	4299      	cmp	r1, r3
   12588:	d00c      	beq.n	125a4 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   1258a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1258e:	4299      	cmp	r1, r3
   12590:	d1e9      	bne.n	12566 <connection_release+0x9a>
   12592:	e007      	b.n	125a4 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12594:	6803      	ldr	r3, [r0, #0]
   12596:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1259a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1259e:	491a      	ldr	r1, [pc, #104]	; (12608 <connection_release+0x13c>)
   125a0:	f7fc fe49 	bl	f236 <mem_release>
	while ((conn->pkt_tx_head) &&
   125a4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   125a8:	b118      	cbz	r0, 125b2 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   125aa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   125ae:	4298      	cmp	r0, r3
   125b0:	d1f0      	bne.n	12594 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   125b2:	2300      	movs	r3, #0
   125b4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   125b8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   125bc:	e00d      	b.n	125da <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   125be:	790b      	ldrb	r3, [r1, #4]
   125c0:	f36f 0301 	bfc	r3, #0, #2
   125c4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   125c6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   125ca:	681b      	ldr	r3, [r3, #0]
   125cc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   125d0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   125d4:	8c20      	ldrh	r0, [r4, #32]
   125d6:	f7ff fef5 	bl	123c4 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   125da:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   125de:	2900      	cmp	r1, #0
   125e0:	d1ed      	bne.n	125be <connection_release+0xf2>
	conn->handle = 0xffff;
   125e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   125e6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   125e8:	4b06      	ldr	r3, [pc, #24]	; (12604 <connection_release+0x138>)
   125ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   125ee:	429c      	cmp	r4, r3
   125f0:	d001      	beq.n	125f6 <connection_release+0x12a>
}
   125f2:	b002      	add	sp, #8
   125f4:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   125f6:	2200      	movs	r2, #0
   125f8:	4b02      	ldr	r3, [pc, #8]	; (12604 <connection_release+0x138>)
   125fa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   125fe:	e7f8      	b.n	125f2 <connection_release+0x126>
   12600:	000118f5 	.word	0x000118f5
   12604:	20000ef4 	.word	0x20000ef4
   12608:	2000104c 	.word	0x2000104c

0001260c <chan_map_update>:
{
   1260c:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   1260e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   12612:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   12614:	1a9b      	subs	r3, r3, r2
   12616:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   12618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1261c:	da22      	bge.n	12664 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1261e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   12622:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12626:	429a      	cmp	r2, r3
   12628:	d116      	bne.n	12658 <chan_map_update+0x4c>
   1262a:	460d      	mov	r5, r1
   1262c:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   1262e:	2205      	movs	r2, #5
   12630:	3104      	adds	r1, #4
   12632:	3079      	adds	r0, #121	; 0x79
   12634:	f7ed fe44 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   12638:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   1263c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   12640:	2000      	movs	r0, #0
   12642:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   12646:	2302      	movs	r3, #2
   12648:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   1264c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   12650:	3b01      	subs	r3, #1
   12652:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   12656:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12658:	4040      	eors	r0, r0
   1265a:	f380 8811 	msr	BASEPRI, r0
   1265e:	f04f 0004 	mov.w	r0, #4
   12662:	df02      	svc	2
		return 1;
   12664:	2001      	movs	r0, #1
}
   12666:	bd38      	pop	{r3, r4, r5, pc}

00012668 <feature_rsp_send>:
{
   12668:	b538      	push	{r3, r4, r5, lr}
   1266a:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1266c:	4812      	ldr	r0, [pc, #72]	; (126b8 <feature_rsp_send+0x50>)
   1266e:	f7fc fdc6 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   12672:	b1d8      	cbz	r0, 126ac <feature_rsp_send+0x44>
   12674:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12676:	7903      	ldrb	r3, [r0, #4]
   12678:	f043 0303 	orr.w	r3, r3, #3
   1267c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1267e:	2309      	movs	r3, #9
   12680:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12682:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   12684:	2208      	movs	r2, #8
   12686:	2100      	movs	r1, #0
   12688:	4410      	add	r0, r2
   1268a:	f017 fda1 	bl	2a1d0 <memset>
		conn->llcp_features & 0xFF;
   1268e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   12692:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   12694:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   12698:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   1269a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   1269c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   126a0:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   126a2:	4621      	mov	r1, r4
   126a4:	4628      	mov	r0, r5
   126a6:	f7ff f87c 	bl	117a2 <ctrl_tx_sec_enqueue>
   126aa:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   126ac:	4040      	eors	r0, r0
   126ae:	f380 8811 	msr	BASEPRI, r0
   126b2:	f04f 0004 	mov.w	r0, #4
   126b6:	df02      	svc	2
   126b8:	2000104c 	.word	0x2000104c

000126bc <empty_tx_enqueue>:
{
   126bc:	b510      	push	{r4, lr}
   126be:	4604      	mov	r4, r0
	conn->empty = 1;
   126c0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   126c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   126c8:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   126cc:	f7fc fffa 	bl	f6c4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   126d0:	7803      	ldrb	r3, [r0, #0]
   126d2:	2201      	movs	r2, #1
   126d4:	f362 0301 	bfi	r3, r2, #0, #2
   126d8:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   126da:	2300      	movs	r3, #0
   126dc:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   126de:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   126e2:	b123      	cbz	r3, 126ee <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   126e4:	7803      	ldrb	r3, [r0, #0]
   126e6:	f043 0310 	orr.w	r3, r3, #16
   126ea:	7003      	strb	r3, [r0, #0]
   126ec:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   126ee:	7803      	ldrb	r3, [r0, #0]
   126f0:	f36f 1304 	bfc	r3, #4, #1
   126f4:	7003      	strb	r3, [r0, #0]
}
   126f6:	bd10      	pop	{r4, pc}

000126f8 <prepare_pdu_data_tx>:
{
   126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126fa:	460c      	mov	r4, r1
	    conn->empty ||
   126fc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   12700:	f012 0f80 	tst.w	r2, #128	; 0x80
   12704:	d109      	bne.n	1271a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   12706:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   1270a:	b133      	cbz	r3, 1271a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   1270c:	f012 0f08 	tst.w	r2, #8
   12710:	d00e      	beq.n	12730 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   12712:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   12716:	4293      	cmp	r3, r2
   12718:	d00a      	beq.n	12730 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   1271a:	f7ff ffcf 	bl	126bc <empty_tx_enqueue>
   1271e:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   12720:	7813      	ldrb	r3, [r2, #0]
   12722:	f36f 1347 	bfc	r3, #5, #3
   12726:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   12728:	2300      	movs	r3, #0
   1272a:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   1272c:	6022      	str	r2, [r4, #0]
   1272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12730:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   12732:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12736:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   12738:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   1273c:	b911      	cbnz	r1, 12744 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   1273e:	7851      	ldrb	r1, [r2, #1]
   12740:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   12744:	b126      	cbz	r6, 12750 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12746:	5d99      	ldrb	r1, [r3, r6]
   12748:	2501      	movs	r5, #1
   1274a:	f365 0101 	bfi	r1, r5, #0, #2
   1274e:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12750:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   12754:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12758:	1a6d      	subs	r5, r5, r1
   1275a:	b2ed      	uxtb	r5, r5
   1275c:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   1275e:	5d99      	ldrb	r1, [r3, r6]
   12760:	f36f 1104 	bfc	r1, #4, #1
   12764:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   12766:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   1276a:	f001 0107 	and.w	r1, r1, #7
   1276e:	2902      	cmp	r1, #2
   12770:	d02d      	beq.n	127ce <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   12772:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12774:	08c9      	lsrs	r1, r1, #3
   12776:	390a      	subs	r1, #10
   12778:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   1277a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   1277e:	f017 0f20 	tst.w	r7, #32
   12782:	d001      	beq.n	12788 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   12784:	3904      	subs	r1, #4
   12786:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   12788:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   1278a:	42b9      	cmp	r1, r7
   1278c:	d800      	bhi.n	12790 <prepare_pdu_data_tx+0x98>
   1278e:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   12790:	b2ad      	uxth	r5, r5
   12792:	42af      	cmp	r7, r5
   12794:	d204      	bcs.n	127a0 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   12796:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   12798:	5d99      	ldrb	r1, [r3, r6]
   1279a:	f041 0110 	orr.w	r1, r1, #16
   1279e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   127a0:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   127a4:	6809      	ldr	r1, [r1, #0]
   127a6:	b119      	cbz	r1, 127b0 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   127a8:	5d99      	ldrb	r1, [r3, r6]
   127aa:	f041 0110 	orr.w	r1, r1, #16
   127ae:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   127b0:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   127b4:	2b00      	cmp	r3, #0
   127b6:	d1b3      	bne.n	12720 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   127b8:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   127bc:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   127c0:	428b      	cmp	r3, r1
   127c2:	d0ad      	beq.n	12720 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   127c4:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   127c8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   127cc:	e7a8      	b.n	12720 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   127ce:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   127d0:	0889      	lsrs	r1, r1, #2
   127d2:	390b      	subs	r1, #11
   127d4:	b289      	uxth	r1, r1
			break;
   127d6:	e7d0      	b.n	1277a <prepare_pdu_data_tx+0x82>

000127d8 <version_ind_send>:
{
   127d8:	b510      	push	{r4, lr}
   127da:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   127dc:	4810      	ldr	r0, [pc, #64]	; (12820 <version_ind_send+0x48>)
   127de:	f7fc fd0e 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   127e2:	b1b8      	cbz	r0, 12814 <version_ind_send+0x3c>
   127e4:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   127e6:	7903      	ldrb	r3, [r0, #4]
   127e8:	f043 0303 	orr.w	r3, r3, #3
   127ec:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   127ee:	2306      	movs	r3, #6
   127f0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   127f2:	230c      	movs	r3, #12
   127f4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   127f6:	2309      	movs	r3, #9
   127f8:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   127fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127fe:	7243      	strb	r3, [r0, #9]
   12800:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   12802:	72c3      	strb	r3, [r0, #11]
   12804:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   12806:	4620      	mov	r0, r4
   12808:	f7fe ffcb 	bl	117a2 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   1280c:	4620      	mov	r0, r4
   1280e:	f7ff ff55 	bl	126bc <empty_tx_enqueue>
   12812:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   12814:	4040      	eors	r0, r0
   12816:	f380 8811 	msr	BASEPRI, r0
   1281a:	f04f 0004 	mov.w	r0, #4
   1281e:	df02      	svc	2
   12820:	2000104c 	.word	0x2000104c

00012824 <tx_packet_set>:
{
   12824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12826:	4605      	mov	r5, r0
   12828:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   1282a:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   1282c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   12830:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   12834:	09c9      	lsrs	r1, r1, #7
   12836:	4620      	mov	r0, r4
   12838:	f7fc fe5e 	bl	f4f8 <radio_phy_set>
	if (conn->enc_tx) {
   1283c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12840:	f013 0f20 	tst.w	r3, #32
   12844:	d10a      	bne.n	1285c <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   12846:	0062      	lsls	r2, r4, #1
   12848:	f042 0201 	orr.w	r2, r2, #1
   1284c:	b2f1      	uxtb	r1, r6
   1284e:	2008      	movs	r0, #8
   12850:	f7fc fe96 	bl	f580 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12854:	4638      	mov	r0, r7
   12856:	f7fc fec9 	bl	f5ec <radio_pkt_tx_set>
   1285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   1285c:	0062      	lsls	r2, r4, #1
   1285e:	1d31      	adds	r1, r6, #4
   12860:	f042 0201 	orr.w	r2, r2, #1
   12864:	b2c9      	uxtb	r1, r1
   12866:	2008      	movs	r0, #8
   12868:	f7fc fe8a 	bl	f580 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   1286c:	4639      	mov	r1, r7
   1286e:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   12872:	f7fd f8f1 	bl	fa58 <radio_ccm_tx_pkt_set>
   12876:	f7fc feb9 	bl	f5ec <radio_pkt_tx_set>
   1287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001287c <chan_set>:
{
   1287c:	b510      	push	{r4, lr}
   1287e:	4604      	mov	r4, r0
	switch (chan) {
   12880:	2826      	cmp	r0, #38	; 0x26
   12882:	d013      	beq.n	128ac <chan_set+0x30>
   12884:	2827      	cmp	r0, #39	; 0x27
   12886:	d015      	beq.n	128b4 <chan_set+0x38>
   12888:	2825      	cmp	r0, #37	; 0x25
   1288a:	d008      	beq.n	1289e <chan_set+0x22>
		if (chan < 11) {
   1288c:	280a      	cmp	r0, #10
   1288e:	d915      	bls.n	128bc <chan_set+0x40>
		} else if (chan < 40) {
   12890:	2827      	cmp	r0, #39	; 0x27
   12892:	d818      	bhi.n	128c6 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12894:	3003      	adds	r0, #3
   12896:	0040      	lsls	r0, r0, #1
   12898:	f7fc fe42 	bl	f520 <radio_freq_chan_set>
   1289c:	e002      	b.n	128a4 <chan_set+0x28>
		radio_freq_chan_set(2);
   1289e:	2002      	movs	r0, #2
   128a0:	f7fc fe3e 	bl	f520 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   128a4:	4620      	mov	r0, r4
   128a6:	f7fc fe41 	bl	f52c <radio_whiten_iv_set>
   128aa:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   128ac:	201a      	movs	r0, #26
   128ae:	f7fc fe37 	bl	f520 <radio_freq_chan_set>
		break;
   128b2:	e7f7      	b.n	128a4 <chan_set+0x28>
		radio_freq_chan_set(80);
   128b4:	2050      	movs	r0, #80	; 0x50
   128b6:	f7fc fe33 	bl	f520 <radio_freq_chan_set>
		break;
   128ba:	e7f3      	b.n	128a4 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   128bc:	3002      	adds	r0, #2
   128be:	0040      	lsls	r0, r0, #1
   128c0:	f7fc fe2e 	bl	f520 <radio_freq_chan_set>
   128c4:	e7ee      	b.n	128a4 <chan_set+0x28>
			LL_ASSERT(0);
   128c6:	4040      	eors	r0, r0
   128c8:	f380 8811 	msr	BASEPRI, r0
   128cc:	f04f 0004 	mov.w	r0, #4
   128d0:	df02      	svc	2
	...

000128d4 <adv_setup>:
{
   128d4:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   128d6:	4a39      	ldr	r2, [pc, #228]	; (129bc <adv_setup+0xe8>)
   128d8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   128dc:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   128e0:	4293      	cmp	r3, r2
   128e2:	d037      	beq.n	12954 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   128e4:	3301      	adds	r3, #1
   128e6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   128e8:	2b02      	cmp	r3, #2
   128ea:	d031      	beq.n	12950 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   128ec:	4a33      	ldr	r2, [pc, #204]	; (129bc <adv_setup+0xe8>)
   128ee:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   128f2:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   128f4:	4a31      	ldr	r2, [pc, #196]	; (129bc <adv_setup+0xe8>)
   128f6:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   128fa:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   128fe:	4293      	cmp	r3, r2
   12900:	d007      	beq.n	12912 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   12902:	3301      	adds	r3, #1
   12904:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12906:	2b02      	cmp	r3, #2
   12908:	d026      	beq.n	12958 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   1290a:	4a2c      	ldr	r2, [pc, #176]	; (129bc <adv_setup+0xe8>)
   1290c:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   12910:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   12912:	4c2a      	ldr	r4, [pc, #168]	; (129bc <adv_setup+0xe8>)
   12914:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   12918:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1291c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12920:	3320      	adds	r3, #32
   12922:	441c      	add	r4, r3
   12924:	1de5      	adds	r5, r4, #7
	if (upd) {
   12926:	b9c9      	cbnz	r1, 1295c <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   12928:	4628      	mov	r0, r5
   1292a:	f7fc fe5f 	bl	f5ec <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1292e:	79e3      	ldrb	r3, [r4, #7]
   12930:	f003 030f 	and.w	r3, r3, #15
   12934:	2b02      	cmp	r3, #2
   12936:	d020      	beq.n	1297a <adv_setup+0xa6>
   12938:	2b07      	cmp	r3, #7
   1293a:	d01e      	beq.n	1297a <adv_setup+0xa6>
		_radio.state = STATE_TX;
   1293c:	2202      	movs	r2, #2
   1293e:	4b1f      	ldr	r3, [pc, #124]	; (129bc <adv_setup+0xe8>)
   12940:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   12942:	2096      	movs	r0, #150	; 0x96
   12944:	f7fc ff78 	bl	f838 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12948:	2000      	movs	r0, #0
   1294a:	f7fc fec3 	bl	f6d4 <radio_switch_complete_and_rx>
   1294e:	e019      	b.n	12984 <adv_setup+0xb0>
			first = 0;
   12950:	2300      	movs	r3, #0
   12952:	e7cb      	b.n	128ec <adv_setup+0x18>
	u8_t upd = 0;
   12954:	2100      	movs	r1, #0
   12956:	e7cd      	b.n	128f4 <adv_setup+0x20>
			first = 0;
   12958:	2300      	movs	r3, #0
   1295a:	e7d6      	b.n	1290a <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   1295c:	4817      	ldr	r0, [pc, #92]	; (129bc <adv_setup+0xe8>)
   1295e:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   12962:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12966:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1296a:	3370      	adds	r3, #112	; 0x70
   1296c:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   1296e:	2206      	movs	r2, #6
   12970:	1ca9      	adds	r1, r5, #2
   12972:	3009      	adds	r0, #9
   12974:	f7ed fca4 	bl	2c0 <memcpy>
   12978:	e7d6      	b.n	12928 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   1297a:	2203      	movs	r2, #3
   1297c:	4b0f      	ldr	r3, [pc, #60]	; (129bc <adv_setup+0xe8>)
   1297e:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12980:	f7fc feb8 	bl	f6f4 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   12984:	4b0d      	ldr	r3, [pc, #52]	; (129bc <adv_setup+0xe8>)
   12986:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1298a:	f3c2 0142 	ubfx	r1, r2, #1, #3
   1298e:	b2ca      	uxtb	r2, r1
   12990:	4613      	mov	r3, r2
	chan = 0;
   12992:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   12994:	e002      	b.n	1299c <adv_setup+0xc8>
		chan++;
   12996:	3001      	adds	r0, #1
   12998:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   1299a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   1299c:	f013 0f01 	tst.w	r3, #1
   129a0:	d0f9      	beq.n	12996 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   129a2:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   129a4:	4b05      	ldr	r3, [pc, #20]	; (129bc <adv_setup+0xe8>)
   129a6:	400a      	ands	r2, r1
   129a8:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   129ac:	f362 0143 	bfi	r1, r2, #1, #3
   129b0:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   129b4:	3025      	adds	r0, #37	; 0x25
   129b6:	f7ff ff61 	bl	1287c <chan_set>
   129ba:	bd38      	pop	{r3, r4, r5, pc}
   129bc:	20000ef4 	.word	0x20000ef4

000129c0 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   129c0:	b158      	cbz	r0, 129da <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   129c2:	4b6c      	ldr	r3, [pc, #432]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   129c4:	7b9b      	ldrb	r3, [r3, #14]
   129c6:	b2db      	uxtb	r3, r3
   129c8:	2b05      	cmp	r3, #5
   129ca:	d100      	bne.n	129ce <ticker_stop_adv_stop+0xe>
   129cc:	4770      	bx	lr
   129ce:	4040      	eors	r0, r0
   129d0:	f380 8811 	msr	BASEPRI, r0
   129d4:	f04f 0004 	mov.w	r0, #4
   129d8:	df02      	svc	2
{
   129da:	b500      	push	{lr}
   129dc:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   129de:	4b65      	ldr	r3, [pc, #404]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   129e0:	7b1b      	ldrb	r3, [r3, #12]
   129e2:	b2db      	uxtb	r3, r3
   129e4:	2b05      	cmp	r3, #5
   129e6:	d010      	beq.n	12a0a <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   129e8:	4b62      	ldr	r3, [pc, #392]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   129ea:	7b5b      	ldrb	r3, [r3, #13]
   129ec:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   129ee:	2b05      	cmp	r3, #5
   129f0:	d00b      	beq.n	12a0a <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   129f2:	4b61      	ldr	r3, [pc, #388]	; (12b78 <ticker_stop_adv_stop+0x1b8>)
   129f4:	2200      	movs	r2, #0
   129f6:	4611      	mov	r1, r2
   129f8:	2001      	movs	r0, #1
   129fa:	f7fc fabf 	bl	ef7c <mayfly_enqueue>
	LL_ASSERT(!retval);
   129fe:	2800      	cmp	r0, #0
   12a00:	f040 80b1 	bne.w	12b66 <ticker_stop_adv_stop+0x1a6>
}
   12a04:	b005      	add	sp, #20
   12a06:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12a0a:	ab04      	add	r3, sp, #16
   12a0c:	2202      	movs	r2, #2
   12a0e:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a12:	9300      	str	r3, [sp, #0]
   12a14:	4b59      	ldr	r3, [pc, #356]	; (12b7c <ticker_stop_adv_stop+0x1bc>)
   12a16:	2200      	movs	r2, #0
   12a18:	2101      	movs	r1, #1
   12a1a:	4610      	mov	r0, r2
   12a1c:	f7fe f95c 	bl	10cd8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12a20:	2802      	cmp	r0, #2
   12a22:	d02c      	beq.n	12a7e <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12a24:	9b02      	ldr	r3, [sp, #8]
   12a26:	2b00      	cmp	r3, #0
   12a28:	d17e      	bne.n	12b28 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12a2a:	2302      	movs	r3, #2
   12a2c:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12a2e:	4b51      	ldr	r3, [pc, #324]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   12a30:	7b1b      	ldrb	r3, [r3, #12]
   12a32:	2b00      	cmp	r3, #0
   12a34:	d031      	beq.n	12a9a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   12a36:	2000      	movs	r0, #0
   12a38:	4b4e      	ldr	r3, [pc, #312]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   12a3a:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a3c:	ab03      	add	r3, sp, #12
   12a3e:	9300      	str	r3, [sp, #0]
   12a40:	4b4e      	ldr	r3, [pc, #312]	; (12b7c <ticker_stop_adv_stop+0x1bc>)
   12a42:	2201      	movs	r2, #1
   12a44:	4611      	mov	r1, r2
   12a46:	f7fe f947 	bl	10cd8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12a4a:	2802      	cmp	r0, #2
   12a4c:	d02b      	beq.n	12aa6 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12a4e:	9b03      	ldr	r3, [sp, #12]
   12a50:	2b00      	cmp	r3, #0
   12a52:	d144      	bne.n	12ade <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12a54:	4b47      	ldr	r3, [pc, #284]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   12a56:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12a58:	695b      	ldr	r3, [r3, #20]
   12a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12a5e:	429a      	cmp	r2, r3
   12a60:	d92f      	bls.n	12ac2 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   12a62:	4b47      	ldr	r3, [pc, #284]	; (12b80 <ticker_stop_adv_stop+0x1c0>)
   12a64:	2200      	movs	r2, #0
   12a66:	4611      	mov	r1, r2
   12a68:	2001      	movs	r0, #1
   12a6a:	f7fc fa87 	bl	ef7c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12a6e:	2800      	cmp	r0, #0
   12a70:	d0bf      	beq.n	129f2 <ticker_stop_adv_stop+0x32>
   12a72:	4040      	eors	r0, r0
   12a74:	f380 8811 	msr	BASEPRI, r0
   12a78:	f04f 0004 	mov.w	r0, #4
   12a7c:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12a7e:	2201      	movs	r2, #1
   12a80:	4611      	mov	r1, r2
   12a82:	4610      	mov	r0, r2
   12a84:	f7fc fa3c 	bl	ef00 <mayfly_enable>
   12a88:	e003      	b.n	12a92 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a8a:	2101      	movs	r1, #1
   12a8c:	2000      	movs	r0, #0
   12a8e:	f7fe f9df 	bl	10e50 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12a92:	9b02      	ldr	r3, [sp, #8]
   12a94:	2b02      	cmp	r3, #2
   12a96:	d0f8      	beq.n	12a8a <ticker_stop_adv_stop+0xca>
   12a98:	e7c4      	b.n	12a24 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12a9a:	4040      	eors	r0, r0
   12a9c:	f380 8811 	msr	BASEPRI, r0
   12aa0:	f04f 0004 	mov.w	r0, #4
   12aa4:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12aa6:	2201      	movs	r2, #1
   12aa8:	4611      	mov	r1, r2
   12aaa:	4610      	mov	r0, r2
   12aac:	f7fc fa28 	bl	ef00 <mayfly_enable>
   12ab0:	e003      	b.n	12aba <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12ab2:	2101      	movs	r1, #1
   12ab4:	2000      	movs	r0, #0
   12ab6:	f7fe f9cb 	bl	10e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12aba:	9b03      	ldr	r3, [sp, #12]
   12abc:	2b02      	cmp	r3, #2
   12abe:	d0f8      	beq.n	12ab2 <ticker_stop_adv_stop+0xf2>
   12ac0:	e7c5      	b.n	12a4e <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12ac2:	4b30      	ldr	r3, [pc, #192]	; (12b84 <ticker_stop_adv_stop+0x1c4>)
   12ac4:	2200      	movs	r2, #0
   12ac6:	4611      	mov	r1, r2
   12ac8:	2001      	movs	r0, #1
   12aca:	f7fc fa57 	bl	ef7c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12ace:	2800      	cmp	r0, #0
   12ad0:	d08f      	beq.n	129f2 <ticker_stop_adv_stop+0x32>
   12ad2:	4040      	eors	r0, r0
   12ad4:	f380 8811 	msr	BASEPRI, r0
   12ad8:	f04f 0004 	mov.w	r0, #4
   12adc:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12ade:	9b03      	ldr	r3, [sp, #12]
   12ae0:	2b01      	cmp	r3, #1
   12ae2:	d11b      	bne.n	12b1c <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12ae4:	4b26      	ldr	r3, [pc, #152]	; (12b80 <ticker_stop_adv_stop+0x1c0>)
   12ae6:	2200      	movs	r2, #0
   12ae8:	4611      	mov	r1, r2
   12aea:	2001      	movs	r0, #1
   12aec:	f7fc fa46 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12af0:	b970      	cbnz	r0, 12b10 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12af2:	4b24      	ldr	r3, [pc, #144]	; (12b84 <ticker_stop_adv_stop+0x1c4>)
   12af4:	2200      	movs	r2, #0
   12af6:	4611      	mov	r1, r2
   12af8:	2001      	movs	r0, #1
   12afa:	f7fc fa3f 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12afe:	2800      	cmp	r0, #0
   12b00:	f43f af77 	beq.w	129f2 <ticker_stop_adv_stop+0x32>
   12b04:	4040      	eors	r0, r0
   12b06:	f380 8811 	msr	BASEPRI, r0
   12b0a:	f04f 0004 	mov.w	r0, #4
   12b0e:	df02      	svc	2
			LL_ASSERT(!retval);
   12b10:	4040      	eors	r0, r0
   12b12:	f380 8811 	msr	BASEPRI, r0
   12b16:	f04f 0004 	mov.w	r0, #4
   12b1a:	df02      	svc	2
			LL_ASSERT(0);
   12b1c:	4040      	eors	r0, r0
   12b1e:	f380 8811 	msr	BASEPRI, r0
   12b22:	f04f 0004 	mov.w	r0, #4
   12b26:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12b28:	9b02      	ldr	r3, [sp, #8]
   12b2a:	2b01      	cmp	r3, #1
   12b2c:	d115      	bne.n	12b5a <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12b2e:	4b11      	ldr	r3, [pc, #68]	; (12b74 <ticker_stop_adv_stop+0x1b4>)
   12b30:	7bdb      	ldrb	r3, [r3, #15]
   12b32:	2b00      	cmp	r3, #0
   12b34:	f43f af5d 	beq.w	129f2 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12b38:	4b13      	ldr	r3, [pc, #76]	; (12b88 <ticker_stop_adv_stop+0x1c8>)
   12b3a:	2204      	movs	r2, #4
   12b3c:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12b3e:	2200      	movs	r2, #0
   12b40:	4611      	mov	r1, r2
   12b42:	2001      	movs	r0, #1
   12b44:	f7fc fa1a 	bl	ef7c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12b48:	2800      	cmp	r0, #0
   12b4a:	f43f af52 	beq.w	129f2 <ticker_stop_adv_stop+0x32>
   12b4e:	4040      	eors	r0, r0
   12b50:	f380 8811 	msr	BASEPRI, r0
   12b54:	f04f 0004 	mov.w	r0, #4
   12b58:	df02      	svc	2
		LL_ASSERT(0);
   12b5a:	4040      	eors	r0, r0
   12b5c:	f380 8811 	msr	BASEPRI, r0
   12b60:	f04f 0004 	mov.w	r0, #4
   12b64:	df02      	svc	2
	LL_ASSERT(!retval);
   12b66:	4040      	eors	r0, r0
   12b68:	f380 8811 	msr	BASEPRI, r0
   12b6c:	f04f 0004 	mov.w	r0, #4
   12b70:	df02      	svc	2
   12b72:	bf00      	nop
   12b74:	20000ef4 	.word	0x20000ef4
   12b78:	2000bc18 	.word	0x2000bc18
   12b7c:	00011585 	.word	0x00011585
   12b80:	2000bc48 	.word	0x2000bc48
   12b84:	2000bd08 	.word	0x2000bd08
   12b88:	2000bc78 	.word	0x2000bc78
   12b8c:	00000000 	.word	0x00000000

00012b90 <sched_free_win_offset_calc>:
{
   12b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b94:	b091      	sub	sp, #68	; 0x44
   12b96:	9009      	str	r0, [sp, #36]	; 0x24
   12b98:	910a      	str	r1, [sp, #40]	; 0x28
   12b9a:	9207      	str	r2, [sp, #28]
   12b9c:	469b      	mov	fp, r3
   12b9e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12ba0:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12ba4:	6803      	ldr	r3, [r0, #0]
   12ba6:	2b00      	cmp	r3, #0
   12ba8:	db0f      	blt.n	12bca <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12baa:	2300      	movs	r3, #0
   12bac:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12bae:	27ff      	movs	r7, #255	; 0xff
   12bb0:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12bb4:	2300      	movs	r3, #0
   12bb6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12bba:	930f      	str	r3, [sp, #60]	; 0x3c
   12bbc:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12bbe:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12bc0:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12bc2:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12bc4:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12bc6:	4698      	mov	r8, r3
   12bc8:	e06d      	b.n	12ca6 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12bca:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12bcc:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12bd2:	4291      	cmp	r1, r2
   12bd4:	bf2c      	ite	cs
   12bd6:	1a5b      	subcs	r3, r3, r1
   12bd8:	1a9b      	subcc	r3, r3, r2
   12bda:	930b      	str	r3, [sp, #44]	; 0x2c
   12bdc:	e7e7      	b.n	12bae <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12bde:	2101      	movs	r1, #1
   12be0:	2000      	movs	r0, #0
   12be2:	f7fe f935 	bl	10e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12be8:	2b02      	cmp	r3, #2
   12bea:	d0f8      	beq.n	12bde <sched_free_win_offset_calc+0x4e>
   12bec:	e06c      	b.n	12cc8 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12bee:	4040      	eors	r0, r0
   12bf0:	f380 8811 	msr	BASEPRI, r0
   12bf4:	f04f 0004 	mov.w	r0, #4
   12bf8:	df02      	svc	2
			LL_ASSERT(0);
   12bfa:	4040      	eors	r0, r0
   12bfc:	f380 8811 	msr	BASEPRI, r0
   12c00:	f04f 0004 	mov.w	r0, #4
   12c04:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12c06:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12c0a:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12c12:	4291      	cmp	r1, r2
   12c14:	bf2c      	ite	cs
   12c16:	ebc3 0301 	rsbcs	r3, r3, r1
   12c1a:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12c1e:	9a05      	ldr	r2, [sp, #20]
   12c20:	441a      	add	r2, r3
   12c22:	9205      	str	r2, [sp, #20]
   12c24:	e085      	b.n	12d32 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12c26:	2202      	movs	r2, #2
   12c28:	a90d      	add	r1, sp, #52	; 0x34
   12c2a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12c2e:	f7ed fb47 	bl	2c0 <memcpy>
					offset_index++;
   12c32:	3401      	adds	r4, #1
   12c34:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12c36:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12c38:	782b      	ldrb	r3, [r5, #0]
   12c3a:	429c      	cmp	r4, r3
   12c3c:	d21f      	bcs.n	12c7e <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12c3e:	4639      	mov	r1, r7
   12c40:	9805      	ldr	r0, [sp, #20]
   12c42:	f7fe f919 	bl	10e78 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   12c46:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12c4a:	4433      	add	r3, r6
   12c4c:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12c4e:	4298      	cmp	r0, r3
   12c50:	d315      	bcc.n	12c7e <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12c52:	19bb      	adds	r3, r7, r6
   12c54:	485a      	ldr	r0, [pc, #360]	; (12dc0 <sched_free_win_offset_calc+0x230>)
   12c56:	fba3 0100 	umull	r0, r1, r3, r0
   12c5a:	2207      	movs	r2, #7
   12c5c:	fb02 1103 	mla	r1, r2, r3, r1
   12c60:	a355      	add	r3, pc, #340	; (adr r3, 12db8 <sched_free_win_offset_calc+0x228>)
   12c62:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c66:	f7ee fa49 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12c6a:	4b56      	ldr	r3, [pc, #344]	; (12dc4 <sched_free_win_offset_calc+0x234>)
   12c6c:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12c70:	f3c0 208f 	ubfx	r0, r0, #10, #16
   12c74:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12c78:	4558      	cmp	r0, fp
   12c7a:	d3d4      	bcc.n	12c26 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12c7c:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12c7e:	9b07      	ldr	r3, [sp, #28]
   12c80:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   12c82:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12c86:	459b      	cmp	fp, r3
   12c88:	d95e      	bls.n	12d48 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12c8a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12c8e:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12c92:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12c96:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12c98:	9b05      	ldr	r3, [sp, #20]
   12c9a:	9308      	str	r3, [sp, #32]
   12c9c:	e000      	b.n	12ca0 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12c9e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12ca0:	782b      	ldrb	r3, [r5, #0]
   12ca2:	429c      	cmp	r4, r3
   12ca4:	d251      	bcs.n	12d4a <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12ca6:	2302      	movs	r3, #2
   12ca8:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12caa:	ab0c      	add	r3, sp, #48	; 0x30
   12cac:	9302      	str	r3, [sp, #8]
   12cae:	4b46      	ldr	r3, [pc, #280]	; (12dc8 <sched_free_win_offset_calc+0x238>)
   12cb0:	9301      	str	r3, [sp, #4]
   12cb2:	ab0e      	add	r3, sp, #56	; 0x38
   12cb4:	9300      	str	r3, [sp, #0]
   12cb6:	ab0f      	add	r3, sp, #60	; 0x3c
   12cb8:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12cbc:	2101      	movs	r1, #1
   12cbe:	2000      	movs	r0, #0
   12cc0:	f7fe f846 	bl	10d50 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12cc4:	2802      	cmp	r0, #2
   12cc6:	d08e      	beq.n	12be6 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d18f      	bne.n	12bee <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12cce:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12cd2:	2aff      	cmp	r2, #255	; 0xff
   12cd4:	d039      	beq.n	12d4a <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12cd6:	2fff      	cmp	r7, #255	; 0xff
   12cd8:	d002      	beq.n	12ce0 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12cdc:	4598      	cmp	r8, r3
   12cde:	d18c      	bne.n	12bfa <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12ce0:	2a05      	cmp	r2, #5
   12ce2:	d9dd      	bls.n	12ca0 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12ce4:	4b39      	ldr	r3, [pc, #228]	; (12dcc <sched_free_win_offset_calc+0x23c>)
   12ce6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12cea:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12cec:	429a      	cmp	r2, r3
   12cee:	dad7      	bge.n	12ca0 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12cf0:	2a06      	cmp	r2, #6
   12cf2:	d9d4      	bls.n	12c9e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12cf4:	9b06      	ldr	r3, [sp, #24]
   12cf6:	2bff      	cmp	r3, #255	; 0xff
   12cf8:	d127      	bne.n	12d4a <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12cfa:	3a07      	subs	r2, #7
   12cfc:	b292      	uxth	r2, r2
   12cfe:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12d02:	4b32      	ldr	r3, [pc, #200]	; (12dcc <sched_free_win_offset_calc+0x23c>)
   12d04:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12d08:	f7fc fab6 	bl	f278 <mem_get>
   12d0c:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d10:	4283      	cmp	r3, r0
   12d12:	d0c5      	beq.n	12ca0 <sched_free_win_offset_calc+0x110>
   12d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12d16:	b91b      	cbnz	r3, 12d20 <sched_free_win_offset_calc+0x190>
   12d18:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	dbbf      	blt.n	12ca0 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12d24:	18d3      	adds	r3, r2, r3
   12d26:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12d28:	f8d9 3000 	ldr.w	r3, [r9]
   12d2c:	2b00      	cmp	r3, #0
   12d2e:	f6ff af6a 	blt.w	12c06 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12d32:	9b07      	ldr	r3, [sp, #28]
   12d34:	681f      	ldr	r7, [r3, #0]
   12d36:	9b05      	ldr	r3, [sp, #20]
   12d38:	42bb      	cmp	r3, r7
   12d3a:	d9a6      	bls.n	12c8a <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12d3c:	9a08      	ldr	r2, [sp, #32]
   12d3e:	42ba      	cmp	r2, r7
   12d40:	f4ff af7a 	bcc.w	12c38 <sched_free_win_offset_calc+0xa8>
   12d44:	4617      	mov	r7, r2
   12d46:	e777      	b.n	12c38 <sched_free_win_offset_calc+0xa8>
   12d48:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12d4a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12d4e:	2bff      	cmp	r3, #255	; 0xff
   12d50:	d003      	beq.n	12d5a <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   12d52:	702c      	strb	r4, [r5, #0]
}
   12d54:	b011      	add	sp, #68	; 0x44
   12d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12d5a:	9b07      	ldr	r3, [sp, #28]
   12d5c:	681f      	ldr	r7, [r3, #0]
   12d5e:	9a08      	ldr	r2, [sp, #32]
   12d60:	42ba      	cmp	r2, r7
   12d62:	d300      	bcc.n	12d66 <sched_free_win_offset_calc+0x1d6>
   12d64:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   12d66:	782b      	ldrb	r3, [r5, #0]
   12d68:	429c      	cmp	r4, r3
   12d6a:	d21f      	bcs.n	12dac <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12d6c:	19bb      	adds	r3, r7, r6
   12d6e:	4814      	ldr	r0, [pc, #80]	; (12dc0 <sched_free_win_offset_calc+0x230>)
   12d70:	fba3 0100 	umull	r0, r1, r3, r0
   12d74:	2207      	movs	r2, #7
   12d76:	fb02 1103 	mla	r1, r2, r3, r1
   12d7a:	a30f      	add	r3, pc, #60	; (adr r3, 12db8 <sched_free_win_offset_calc+0x228>)
   12d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d80:	f7ee f9bc 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   12d84:	4b0f      	ldr	r3, [pc, #60]	; (12dc4 <sched_free_win_offset_calc+0x234>)
   12d86:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12d8a:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12d8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12d92:	459b      	cmp	fp, r3
   12d94:	d909      	bls.n	12daa <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12d96:	2202      	movs	r2, #2
   12d98:	a90d      	add	r1, sp, #52	; 0x34
   12d9a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12d9e:	f7ed fa8f 	bl	2c0 <memcpy>
			offset_index++;
   12da2:	3401      	adds	r4, #1
   12da4:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12da6:	3728      	adds	r7, #40	; 0x28
   12da8:	e7dd      	b.n	12d66 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12daa:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12dac:	9b07      	ldr	r3, [sp, #28]
   12dae:	601f      	str	r7, [r3, #0]
   12db0:	e7cf      	b.n	12d52 <sched_free_win_offset_calc+0x1c2>
   12db2:	bf00      	nop
   12db4:	f3af 8000 	nop.w
   12db8:	3b9aca00 	.word	0x3b9aca00
   12dbc:	00000000 	.word	0x00000000
   12dc0:	1afd498d 	.word	0x1afd498d
   12dc4:	d1b71759 	.word	0xd1b71759
   12dc8:	00011585 	.word	0x00011585
   12dcc:	20000ef4 	.word	0x20000ef4

00012dd0 <mayfly_sched_free_win_offset_calc>:
{
   12dd0:	b500      	push	{lr}
   12dd2:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12dd4:	2300      	movs	r3, #0
   12dd6:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12dd8:	2306      	movs	r3, #6
   12dda:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12dde:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12de2:	2b00      	cmp	r3, #0
   12de4:	db0e      	blt.n	12e04 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12de6:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12de8:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12dec:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12df0:	9101      	str	r1, [sp, #4]
   12df2:	f10d 010b 	add.w	r1, sp, #11
   12df6:	9100      	str	r1, [sp, #0]
   12df8:	2100      	movs	r1, #0
   12dfa:	f7ff fec9 	bl	12b90 <sched_free_win_offset_calc>
}
   12dfe:	b005      	add	sp, #20
   12e00:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12e04:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12e06:	4602      	mov	r2, r0
   12e08:	f842 3fe4 	str.w	r3, [r2, #228]!
   12e0c:	e7ec      	b.n	12de8 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012e10 <mayfly_sched_win_offset_select>:
{
   12e10:	b570      	push	{r4, r5, r6, lr}
   12e12:	b088      	sub	sp, #32
   12e14:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12e16:	ac05      	add	r4, sp, #20
   12e18:	2500      	movs	r5, #0
   12e1a:	9505      	str	r5, [sp, #20]
   12e1c:	9506      	str	r5, [sp, #24]
   12e1e:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12e20:	2306      	movs	r3, #6
   12e22:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   12e26:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   12e2a:	4843      	ldr	r0, [pc, #268]	; (12f38 <mayfly_sched_win_offset_select+0x128>)
   12e2c:	fba2 0100 	umull	r0, r1, r2, r0
   12e30:	f240 1323 	movw	r3, #291	; 0x123
   12e34:	fb03 1102 	mla	r1, r3, r2, r1
   12e38:	a33d      	add	r3, pc, #244	; (adr r3, 12f30 <mayfly_sched_win_offset_select+0x120>)
   12e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e3e:	f7ee f95d 	bl	10fc <__aeabi_uldivmod>
   12e42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   12e46:	aa08      	add	r2, sp, #32
   12e48:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12e4c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12e50:	9401      	str	r4, [sp, #4]
   12e52:	f10d 0113 	add.w	r1, sp, #19
   12e56:	9100      	str	r1, [sp, #0]
   12e58:	2101      	movs	r1, #1
   12e5a:	4630      	mov	r0, r6
   12e5c:	f7ff fe98 	bl	12b90 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12e60:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12e62:	e018      	b.n	12e96 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   12e64:	3301      	adds	r3, #1
   12e66:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12e68:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12e6c:	428b      	cmp	r3, r1
   12e6e:	d20e      	bcs.n	12e8e <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12e70:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   12e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12e78:	4282      	cmp	r2, r0
   12e7a:	d0f3      	beq.n	12e64 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12e7c:	a808      	add	r0, sp, #32
   12e7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12e82:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   12e86:	4282      	cmp	r2, r0
   12e88:	d001      	beq.n	12e8e <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12e8a:	2401      	movs	r4, #1
   12e8c:	e7ea      	b.n	12e64 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12e8e:	428b      	cmp	r3, r1
   12e90:	d30e      	bcc.n	12eb0 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   12e92:	3501      	adds	r5, #1
   12e94:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12e96:	2d05      	cmp	r5, #5
   12e98:	d80a      	bhi.n	12eb0 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   12e9a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   12e9e:	2202      	movs	r2, #2
   12ea0:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   12ea4:	f10d 000a 	add.w	r0, sp, #10
   12ea8:	f7ed fa0a 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   12eac:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   12eae:	e7db      	b.n	12e68 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12eb0:	2d05      	cmp	r5, #5
   12eb2:	d91d      	bls.n	12ef0 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   12eb4:	b35c      	cbz	r4, 12f0e <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   12eb6:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   12eba:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   12ebe:	2200      	movs	r2, #0
   12ec0:	4b1e      	ldr	r3, [pc, #120]	; (12f3c <mayfly_sched_win_offset_select+0x12c>)
   12ec2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   12ec6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12eca:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   12ece:	f042 0203 	orr.w	r2, r2, #3
   12ed2:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   12ed6:	2203      	movs	r2, #3
   12ed8:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   12edc:	2211      	movs	r2, #17
   12ede:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12ee2:	220f      	movs	r2, #15
   12ee4:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   12ee8:	2220      	movs	r2, #32
   12eea:	701a      	strb	r2, [r3, #0]
}
   12eec:	b008      	add	sp, #32
   12eee:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   12ef0:	a908      	add	r1, sp, #32
   12ef2:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   12ef6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12efa:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12efe:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12f02:	2202      	movs	r2, #2
   12f04:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12f08:	f7ed f9da 	bl	2c0 <memcpy>
   12f0c:	e7ee      	b.n	12eec <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   12f0e:	a908      	add	r1, sp, #32
   12f10:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   12f14:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12f18:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12f1c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12f20:	2202      	movs	r2, #2
   12f22:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12f26:	f7ed f9cb 	bl	2c0 <memcpy>
   12f2a:	e7df      	b.n	12eec <mayfly_sched_win_offset_select+0xdc>
   12f2c:	f3af 8000 	nop.w
   12f30:	1afd498d 	.word	0x1afd498d
   12f34:	00000007 	.word	0x00000007
   12f38:	09ce5400 	.word	0x09ce5400
   12f3c:	20000ef4 	.word	0x20000ef4

00012f40 <sched_after_mstr_free_slot_get>:
{
   12f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f44:	b08b      	sub	sp, #44	; 0x2c
   12f46:	4604      	mov	r4, r0
   12f48:	468b      	mov	fp, r1
   12f4a:	4615      	mov	r5, r2
   12f4c:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   12f4e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   12f52:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12f56:	2300      	movs	r3, #0
   12f58:	f8ca 3000 	str.w	r3, [sl]
   12f5c:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   12f5e:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12f60:	9305      	str	r3, [sp, #20]
   12f62:	e01f      	b.n	12fa4 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12f64:	4621      	mov	r1, r4
   12f66:	2000      	movs	r0, #0
   12f68:	f7fd ff72 	bl	10e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12f6c:	9b07      	ldr	r3, [sp, #28]
   12f6e:	2b02      	cmp	r3, #2
   12f70:	d0f8      	beq.n	12f64 <sched_after_mstr_free_slot_get+0x24>
   12f72:	e028      	b.n	12fc6 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12f74:	4040      	eors	r0, r0
   12f76:	f380 8811 	msr	BASEPRI, r0
   12f7a:	f04f 0004 	mov.w	r0, #4
   12f7e:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12f80:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   12f82:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   12f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12f88:	4291      	cmp	r1, r2
   12f8a:	bf2c      	ite	cs
   12f8c:	ebc3 0301 	rsbcs	r3, r3, r1
   12f90:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12f94:	4499      	add	r9, r3
   12f96:	e03a      	b.n	1300e <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   12f98:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   12f9c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   12f9e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   12fa0:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12fa4:	2302      	movs	r3, #2
   12fa6:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12fa8:	ab07      	add	r3, sp, #28
   12faa:	9302      	str	r3, [sp, #8]
   12fac:	4b2c      	ldr	r3, [pc, #176]	; (13060 <sched_after_mstr_free_slot_get+0x120>)
   12fae:	9301      	str	r3, [sp, #4]
   12fb0:	ab08      	add	r3, sp, #32
   12fb2:	9300      	str	r3, [sp, #0]
   12fb4:	462b      	mov	r3, r5
   12fb6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12fba:	4621      	mov	r1, r4
   12fbc:	2000      	movs	r0, #0
   12fbe:	f7fd fec7 	bl	10d50 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12fc2:	2802      	cmp	r0, #2
   12fc4:	d0d2      	beq.n	12f6c <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12fc6:	9b07      	ldr	r3, [sp, #28]
   12fc8:	2b00      	cmp	r3, #0
   12fca:	d1d3      	bne.n	12f74 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   12fcc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12fd0:	2aff      	cmp	r2, #255	; 0xff
   12fd2:	d028      	beq.n	13026 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12fd4:	2a06      	cmp	r2, #6
   12fd6:	d9e5      	bls.n	12fa4 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   12fd8:	4b22      	ldr	r3, [pc, #136]	; (13064 <sched_after_mstr_free_slot_get+0x124>)
   12fda:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12fde:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12fe0:	429a      	cmp	r2, r3
   12fe2:	dadf      	bge.n	12fa4 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12fe4:	3a07      	subs	r2, #7
   12fe6:	b292      	uxth	r2, r2
   12fe8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12fec:	4b1d      	ldr	r3, [pc, #116]	; (13064 <sched_after_mstr_free_slot_get+0x124>)
   12fee:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12ff2:	f7fc f941 	bl	f278 <mem_get>
		if (conn && !conn->role) {
   12ff6:	4606      	mov	r6, r0
   12ff8:	2800      	cmp	r0, #0
   12ffa:	d0d3      	beq.n	12fa4 <sched_after_mstr_free_slot_get+0x64>
   12ffc:	f990 301d 	ldrsb.w	r3, [r0, #29]
   13000:	2b00      	cmp	r3, #0
   13002:	dbcf      	blt.n	12fa4 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   13004:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   13008:	6803      	ldr	r3, [r0, #0]
   1300a:	2b00      	cmp	r3, #0
   1300c:	dbb8      	blt.n	12f80 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   1300e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13012:	d0c1      	beq.n	12f98 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   13014:	9905      	ldr	r1, [sp, #20]
   13016:	4648      	mov	r0, r9
   13018:	f7fd ff2e 	bl	10e78 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   1301c:	eb07 030b 	add.w	r3, r7, fp
   13020:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   13022:	4298      	cmp	r0, r3
   13024:	d9b8      	bls.n	12f98 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   13026:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1302a:	d010      	beq.n	1304e <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1302c:	9b05      	ldr	r3, [sp, #20]
   1302e:	443b      	add	r3, r7
   13030:	461f      	mov	r7, r3
   13032:	480d      	ldr	r0, [pc, #52]	; (13068 <sched_after_mstr_free_slot_get+0x128>)
   13034:	fba3 0100 	umull	r0, r1, r3, r0
   13038:	2307      	movs	r3, #7
   1303a:	fb03 1107 	mla	r1, r3, r7, r1
   1303e:	a306      	add	r3, pc, #24	; (adr r3, 13058 <sched_after_mstr_free_slot_get+0x118>)
   13040:	e9d3 2300 	ldrd	r2, r3, [r3]
   13044:	f7ee f85a 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   13048:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1304a:	f8ca 0000 	str.w	r0, [sl]
}
   1304e:	b00b      	add	sp, #44	; 0x2c
   13050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13054:	f3af 8000 	nop.w
   13058:	3b9aca00 	.word	0x3b9aca00
   1305c:	00000000 	.word	0x00000000
   13060:	00011585 	.word	0x00011585
   13064:	20000ef4 	.word	0x20000ef4
   13068:	1afd498d 	.word	0x1afd498d
   1306c:	00000000 	.word	0x00000000

00013070 <sched_after_mstr_free_offset_get>:
{
   13070:	b570      	push	{r4, r5, r6, lr}
   13072:	b082      	sub	sp, #8
   13074:	4606      	mov	r6, r0
   13076:	4615      	mov	r5, r2
   13078:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   1307a:	aa02      	add	r2, sp, #8
   1307c:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   13080:	3127      	adds	r1, #39	; 0x27
   13082:	2001      	movs	r0, #1
   13084:	f7ff ff5c 	bl	12f40 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   13088:	9801      	ldr	r0, [sp, #4]
   1308a:	4285      	cmp	r5, r0
   1308c:	d011      	beq.n	130b2 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   1308e:	4629      	mov	r1, r5
   13090:	f7fd fef2 	bl	10e78 <ticker_ticks_diff_get>
   13094:	4602      	mov	r2, r0
   13096:	4810      	ldr	r0, [pc, #64]	; (130d8 <sched_after_mstr_free_offset_get+0x68>)
   13098:	fba2 0100 	umull	r0, r1, r2, r0
   1309c:	2307      	movs	r3, #7
   1309e:	fb03 1102 	mla	r1, r3, r2, r1
   130a2:	a30b      	add	r3, pc, #44	; (adr r3, 130d0 <sched_after_mstr_free_offset_get+0x60>)
   130a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   130a8:	f7ee f828 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   130ac:	6823      	ldr	r3, [r4, #0]
   130ae:	4418      	add	r0, r3
   130b0:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   130b2:	6823      	ldr	r3, [r4, #0]
   130b4:	2b00      	cmp	r3, #0
   130b6:	db09      	blt.n	130cc <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   130b8:	f240 40e2 	movw	r0, #1250	; 0x4e2
   130bc:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   130c0:	e001      	b.n	130c6 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   130c2:	1a1b      	subs	r3, r3, r0
   130c4:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   130c6:	6823      	ldr	r3, [r4, #0]
   130c8:	4298      	cmp	r0, r3
   130ca:	d3fa      	bcc.n	130c2 <sched_after_mstr_free_offset_get+0x52>
}
   130cc:	b002      	add	sp, #8
   130ce:	bd70      	pop	{r4, r5, r6, pc}
   130d0:	3b9aca00 	.word	0x3b9aca00
   130d4:	00000000 	.word	0x00000000
   130d8:	1afd498d 	.word	0x1afd498d

000130dc <mayfly_sched_win_offset_use>:
{
   130dc:	b510      	push	{r4, lr}
   130de:	b082      	sub	sp, #8
   130e0:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   130e2:	f100 0384 	add.w	r3, r0, #132	; 0x84
   130e6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   130ea:	68c1      	ldr	r1, [r0, #12]
   130ec:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   130ee:	f7ff ffbf 	bl	13070 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   130f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   130f6:	4a07      	ldr	r2, [pc, #28]	; (13114 <mayfly_sched_win_offset_use+0x38>)
   130f8:	fba2 2303 	umull	r2, r3, r2, r3
   130fc:	0a9b      	lsrs	r3, r3, #10
   130fe:	a902      	add	r1, sp, #8
   13100:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   13104:	2202      	movs	r2, #2
   13106:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   1310a:	f7ed f8d9 	bl	2c0 <memcpy>
}
   1310e:	b002      	add	sp, #8
   13110:	bd10      	pop	{r4, pc}
   13112:	bf00      	nop
   13114:	d1b71759 	.word	0xd1b71759

00013118 <mayfly_sched_after_mstr_free_offset_get>:
{
   13118:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   1311a:	4c05      	ldr	r4, [pc, #20]	; (13130 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   1311c:	f504 7380 	add.w	r3, r4, #256	; 0x100
   13120:	4602      	mov	r2, r0
   13122:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   13126:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   1312a:	f7ff ffa1 	bl	13070 <sched_after_mstr_free_offset_get>
   1312e:	bd10      	pop	{r4, pc}
   13130:	20000ef4 	.word	0x20000ef4

00013134 <enc_rsp_send>:
{
   13134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13138:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1313a:	4818      	ldr	r0, [pc, #96]	; (1319c <enc_rsp_send+0x68>)
   1313c:	f7fc f85f 	bl	f1fe <mem_acquire>
	LL_ASSERT(node_tx);
   13140:	b330      	cbz	r0, 13190 <enc_rsp_send+0x5c>
   13142:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13144:	7903      	ldrb	r3, [r0, #4]
   13146:	f043 0303 	orr.w	r3, r3, #3
   1314a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1314c:	230d      	movs	r3, #13
   1314e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   13150:	2604      	movs	r6, #4
   13152:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   13154:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   13158:	4641      	mov	r1, r8
   1315a:	2008      	movs	r0, #8
   1315c:	f7fd faa2 	bl	106a4 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   13160:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   13164:	4639      	mov	r1, r7
   13166:	4630      	mov	r0, r6
   13168:	f7fd fa9c 	bl	106a4 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1316c:	2208      	movs	r2, #8
   1316e:	4641      	mov	r1, r8
   13170:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13174:	f7ed f8a4 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   13178:	4632      	mov	r2, r6
   1317a:	4639      	mov	r1, r7
   1317c:	f505 708b 	add.w	r0, r5, #278	; 0x116
   13180:	f7ed f89e 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   13184:	4621      	mov	r1, r4
   13186:	4628      	mov	r0, r5
   13188:	f7fe facc 	bl	11724 <ctrl_tx_enqueue>
   1318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   13190:	4040      	eors	r0, r0
   13192:	f380 8811 	msr	BASEPRI, r0
   13196:	f04f 0004 	mov.w	r0, #4
   1319a:	df02      	svc	2
   1319c:	2000104c 	.word	0x2000104c

000131a0 <enc_req_reused_send>:
{
   131a0:	b538      	push	{r3, r4, r5, lr}
   131a2:	4605      	mov	r5, r0
   131a4:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   131a6:	790b      	ldrb	r3, [r1, #4]
   131a8:	f043 0303 	orr.w	r3, r3, #3
   131ac:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   131ae:	2317      	movs	r3, #23
   131b0:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   131b2:	2303      	movs	r3, #3
   131b4:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   131b6:	2208      	movs	r2, #8
   131b8:	f100 0179 	add.w	r1, r0, #121	; 0x79
   131bc:	18a0      	adds	r0, r4, r2
   131be:	f7ed f87f 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   131c2:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   131c6:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   131c8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   131cc:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   131ce:	f104 0112 	add.w	r1, r4, #18
   131d2:	2008      	movs	r0, #8
   131d4:	f7fd fa66 	bl	106a4 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   131d8:	f104 011a 	add.w	r1, r4, #26
   131dc:	2004      	movs	r0, #4
   131de:	f7fd fa61 	bl	106a4 <rand_isr_get>
   131e2:	bd38      	pop	{r3, r4, r5, pc}

000131e4 <isr_rx_conn_pkt_ctrl>:
{
   131e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   131e8:	b082      	sub	sp, #8
   131ea:	4604      	mov	r4, r0
   131ec:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   131ee:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   131f2:	4ba0      	ldr	r3, [pc, #640]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   131f4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   131f8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   131fc:	2b00      	cmp	r3, #0
   131fe:	db11      	blt.n	13224 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13200:	7ac1      	ldrb	r1, [r0, #11]
   13202:	2918      	cmp	r1, #24
   13204:	d82c      	bhi.n	13260 <isr_rx_conn_pkt_ctrl+0x7c>
   13206:	e8df f001 	tbb	[pc, r1]
   1320a:	2323      	.short	0x2323
   1320c:	2b2b232b 	.word	0x2b2b232b
   13210:	2b232b2b 	.word	0x2b232b2b
   13214:	2b2b2b23 	.word	0x2b2b2b23
   13218:	2b2b2b2b 	.word	0x2b2b2b2b
   1321c:	2b2b2b2b 	.word	0x2b2b2b2b
   13220:	2b2b      	.short	0x2b2b
   13222:	23          	.byte	0x23
   13223:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13224:	7ac1      	ldrb	r1, [r0, #11]
   13226:	1f0a      	subs	r2, r1, #4
   13228:	2a15      	cmp	r2, #21
   1322a:	d819      	bhi.n	13260 <isr_rx_conn_pkt_ctrl+0x7c>
   1322c:	e8df f002 	tbb	[pc, r2]
   13230:	18180b0b 	.word	0x18180b0b
   13234:	18181818 	.word	0x18181818
   13238:	180b1818 	.word	0x180b1818
   1323c:	1818180b 	.word	0x1818180b
   13240:	0b181818 	.word	0x0b181818
   13244:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   13246:	4628      	mov	r0, r5
   13248:	f7fe fcca 	bl	11be0 <unknown_rsp_send>
			return 0;
   1324c:	2400      	movs	r4, #0
   1324e:	e003      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   13250:	4628      	mov	r0, r5
   13252:	f7fe fcc5 	bl	11be0 <unknown_rsp_send>
			return 0;
   13256:	2400      	movs	r4, #0
}
   13258:	4620      	mov	r0, r4
   1325a:	b002      	add	sp, #8
   1325c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   13260:	7ae1      	ldrb	r1, [r4, #11]
   13262:	2919      	cmp	r1, #25
   13264:	f200 87e6 	bhi.w	14234 <isr_rx_conn_pkt_ctrl+0x1050>
   13268:	e8df f011 	tbh	[pc, r1, lsl #1]
   1326c:	002e001a 	.word	0x002e001a
   13270:	0042003d 	.word	0x0042003d
   13274:	00800065 	.word	0x00800065
   13278:	04c60099 	.word	0x04c60099
   1327c:	010600de 	.word	0x010600de
   13280:	014b012d 	.word	0x014b012d
   13284:	01ad0170 	.word	0x01ad0170
   13288:	01c400de 	.word	0x01c400de
   1328c:	0395032d 	.word	0x0395032d
   13290:	04c104bb 	.word	0x04c104bb
   13294:	05180518 	.word	0x05180518
   13298:	06de0606 	.word	0x06de0606
   1329c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   132a0:	4631      	mov	r1, r6
   132a2:	4628      	mov	r0, r5
   132a4:	f7fe fb90 	bl	119c8 <conn_update>
   132a8:	b930      	cbnz	r0, 132b8 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   132aa:	4b72      	ldr	r3, [pc, #456]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   132ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   132b0:	2400      	movs	r4, #0
   132b2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   132b6:	e7cf      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   132b8:	4b6e      	ldr	r3, [pc, #440]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   132ba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   132be:	2228      	movs	r2, #40	; 0x28
   132c0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   132c4:	2400      	movs	r4, #0
   132c6:	e7c7      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   132c8:	4631      	mov	r1, r6
   132ca:	4628      	mov	r0, r5
   132cc:	f7ff f99e 	bl	1260c <chan_map_update>
   132d0:	2800      	cmp	r0, #0
   132d2:	f000 87b5 	beq.w	14240 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   132d6:	4b67      	ldr	r3, [pc, #412]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   132d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   132dc:	2228      	movs	r2, #40	; 0x28
   132de:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   132e2:	2400      	movs	r4, #0
   132e4:	e7b8      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   132e6:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   132e8:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   132ec:	2400      	movs	r4, #0
		break;
   132ee:	e7b3      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   132f0:	2208      	movs	r2, #8
   132f2:	f104 0116 	add.w	r1, r4, #22
   132f6:	f105 0093 	add.w	r0, r5, #147	; 0x93
   132fa:	f7ec ffe1 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   132fe:	4d5d      	ldr	r5, [pc, #372]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   13300:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   13304:	2204      	movs	r2, #4
   13306:	f104 011e 	add.w	r1, r4, #30
   1330a:	f500 7089 	add.w	r0, r0, #274	; 0x112
   1330e:	f7ec ffd7 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13312:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   13316:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1331a:	f043 0304 	orr.w	r3, r3, #4
   1331e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13322:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13326:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   1332a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   1332e:	2301      	movs	r3, #1
   13330:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13332:	2400      	movs	r4, #0
		break;
   13334:	e790      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   13336:	2208      	movs	r2, #8
   13338:	f104 010c 	add.w	r1, r4, #12
   1333c:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13340:	f7ec ffbe 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   13344:	4d4b      	ldr	r5, [pc, #300]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   13346:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1334a:	2204      	movs	r2, #4
   1334c:	f104 0114 	add.w	r1, r4, #20
   13350:	f500 708b 	add.w	r0, r0, #278	; 0x116
   13354:	f7ec ffb4 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13358:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1335c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13360:	f043 0304 	orr.w	r3, r3, #4
   13364:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   13368:	2400      	movs	r4, #0
		break;
   1336a:	e775      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1336c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13370:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13374:	429a      	cmp	r2, r3
   13376:	d10c      	bne.n	13392 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13378:	2303      	movs	r3, #3
   1337a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   1337e:	4b3d      	ldr	r3, [pc, #244]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   13380:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13384:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13388:	3b01      	subs	r3, #1
   1338a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   1338e:	2400      	movs	r4, #0
		break;
   13390:	e762      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13392:	4040      	eors	r0, r0
   13394:	f380 8811 	msr	BASEPRI, r0
   13398:	f04f 0004 	mov.w	r0, #4
   1339c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   1339e:	4b35      	ldr	r3, [pc, #212]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   133a0:	7bdb      	ldrb	r3, [r3, #15]
   133a2:	b2db      	uxtb	r3, r3
   133a4:	2b03      	cmp	r3, #3
   133a6:	d027      	beq.n	133f8 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   133a8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   133ac:	f36f 0382 	bfc	r3, #2, #1
   133b0:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   133b4:	4b2f      	ldr	r3, [pc, #188]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   133b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133ba:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   133be:	f36f 02c3 	bfc	r2, #3, #1
   133c2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   133c6:	4b2b      	ldr	r3, [pc, #172]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   133c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133cc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   133d0:	f012 0f40 	tst.w	r2, #64	; 0x40
   133d4:	d007      	beq.n	133e6 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   133d6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   133da:	f36f 1286 	bfc	r2, #6, #1
   133de:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   133e2:	2309      	movs	r3, #9
   133e4:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   133e6:	2301      	movs	r3, #1
   133e8:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   133ea:	4b22      	ldr	r3, [pc, #136]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   133ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133f0:	2400      	movs	r4, #0
   133f2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   133f6:	e72f      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   133f8:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   133fc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13400:	429a      	cmp	r2, r3
   13402:	d10b      	bne.n	1341c <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13404:	2303      	movs	r3, #3
   13406:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   1340a:	4b1a      	ldr	r3, [pc, #104]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   1340c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13410:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13414:	3b01      	subs	r3, #1
   13416:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   1341a:	e7d4      	b.n	133c6 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   1341c:	4040      	eors	r0, r0
   1341e:	f380 8811 	msr	BASEPRI, r0
   13422:	f04f 0004 	mov.w	r0, #4
   13426:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13428:	7b23      	ldrb	r3, [r4, #12]
   1342a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1342e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13432:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13436:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   1343a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1343c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13440:	7ba2      	ldrb	r2, [r4, #14]
   13442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13446:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1344a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   1344e:	4013      	ands	r3, r2
   13450:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13454:	4a07      	ldr	r2, [pc, #28]	; (13474 <isr_rx_conn_pkt_ctrl+0x290>)
   13456:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1345a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1345e:	f043 0320 	orr.w	r3, r3, #32
   13462:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   13466:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1346a:	f7ff f8fd 	bl	12668 <feature_rsp_send>
	u8_t nack = 0;
   1346e:	2400      	movs	r4, #0
	break;
   13470:	e6f2      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
   13472:	bf00      	nop
   13474:	20000ef4 	.word	0x20000ef4
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13478:	7b23      	ldrb	r3, [r4, #12]
   1347a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1347e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13482:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13486:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   1348a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1348c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13490:	7ba2      	ldrb	r2, [r4, #14]
   13492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13496:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1349a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   1349e:	4013      	ands	r3, r2
   134a0:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   134a4:	4ad2      	ldr	r2, [pc, #840]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   134a6:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   134aa:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   134ae:	f043 0320 	orr.w	r3, r3, #32
   134b2:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   134b6:	2301      	movs	r3, #1
   134b8:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   134ba:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   134be:	2400      	movs	r4, #0
   134c0:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   134c4:	e6c8      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   134c6:	4628      	mov	r0, r5
   134c8:	f7fe fae8 	bl	11a9c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   134cc:	4bc8      	ldr	r3, [pc, #800]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   134ce:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   134d2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   134d6:	f042 0204 	orr.w	r2, r2, #4
   134da:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   134de:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   134e2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   134e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   134ea:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   134ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134f2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134f6:	f36f 1204 	bfc	r2, #4, #1
   134fa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   134fe:	2400      	movs	r4, #0
		break;
   13500:	e6aa      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   13502:	4bbb      	ldr	r3, [pc, #748]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13504:	7bdb      	ldrb	r3, [r3, #15]
   13506:	b2db      	uxtb	r3, r3
   13508:	2b04      	cmp	r3, #4
   1350a:	d00a      	beq.n	13522 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   1350c:	4bb8      	ldr	r3, [pc, #736]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1350e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13512:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13516:	f36f 1245 	bfc	r2, #5, #1
   1351a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   1351e:	2400      	movs	r4, #0
		break;
   13520:	e69a      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   13522:	4628      	mov	r0, r5
   13524:	f7fe faba 	bl	11a9c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   13528:	4ab1      	ldr	r2, [pc, #708]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1352a:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1352e:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13532:	f043 0304 	orr.w	r3, r3, #4
   13536:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   1353a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1353e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13542:	f36f 1204 	bfc	r2, #4, #1
   13546:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   1354a:	e7df      	b.n	1350c <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   1354c:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   1354e:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   13552:	4ba7      	ldr	r3, [pc, #668]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13554:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   13558:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   1355c:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   13560:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   13564:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   13568:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   1356c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13570:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   13574:	f003 0303 	and.w	r3, r3, #3
   13578:	2b01      	cmp	r3, #1
   1357a:	d011      	beq.n	135a0 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   1357c:	4a9c      	ldr	r2, [pc, #624]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1357e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13582:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   13586:	f043 0302 	orr.w	r3, r3, #2
   1358a:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   1358e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13592:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   13596:	f012 0f01 	tst.w	r2, #1
   1359a:	d009      	beq.n	135b0 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   1359c:	2400      	movs	r4, #0
   1359e:	e65b      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   135a0:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   135a2:	4b93      	ldr	r3, [pc, #588]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   135a4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   135a8:	2200      	movs	r2, #0
   135aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   135ae:	e7e5      	b.n	1357c <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   135b0:	f042 0201 	orr.w	r2, r2, #1
   135b4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   135b8:	4b8d      	ldr	r3, [pc, #564]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   135ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   135be:	f7ff f90b 	bl	127d8 <version_ind_send>
	u8_t nack = 0;
   135c2:	2400      	movs	r4, #0
   135c4:	e648      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   135c6:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   135ca:	f36f 0382 	bfc	r3, #2, #1
   135ce:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   135d2:	4b87      	ldr	r3, [pc, #540]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   135d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135d8:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   135dc:	f36f 01c3 	bfc	r1, #3, #1
   135e0:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   135e4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   135e8:	2400      	movs	r4, #0
   135ea:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   135ee:	2301      	movs	r3, #1
   135f0:	703b      	strb	r3, [r7, #0]
		break;
   135f2:	e631      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   135f4:	4a7e      	ldr	r2, [pc, #504]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   135f6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   135fa:	b142      	cbz	r2, 1360e <isr_rx_conn_pkt_ctrl+0x42a>
   135fc:	4295      	cmp	r5, r2
   135fe:	d006      	beq.n	1360e <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   13600:	2220      	movs	r2, #32
   13602:	210f      	movs	r1, #15
   13604:	4628      	mov	r0, r5
   13606:	f7fe faa5 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   1360a:	2400      	movs	r4, #0
			break;
   1360c:	e624      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   1360e:	2b00      	cmp	r3, #0
   13610:	f2c0 80bc 	blt.w	1378c <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   13614:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   13618:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   1361c:	429a      	cmp	r2, r3
   1361e:	d008      	beq.n	13632 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   13620:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   13624:	f013 0307 	ands.w	r3, r3, #7
   13628:	d016      	beq.n	13658 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   1362a:	2b04      	cmp	r3, #4
   1362c:	d014      	beq.n	13658 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1362e:	2b05      	cmp	r3, #5
   13630:	d012      	beq.n	13658 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13632:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13636:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1363a:	429a      	cmp	r2, r3
   1363c:	d105      	bne.n	1364a <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1363e:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   13642:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13646:	429a      	cmp	r2, r3
   13648:	d00d      	beq.n	13666 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   1364a:	222a      	movs	r2, #42	; 0x2a
   1364c:	210f      	movs	r1, #15
   1364e:	4628      	mov	r0, r5
   13650:	f7fe fa80 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   13654:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13656:	e5ff      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13658:	2223      	movs	r2, #35	; 0x23
   1365a:	210f      	movs	r1, #15
   1365c:	4628      	mov	r0, r5
   1365e:	f7fe fa79 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   13662:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13664:	e5f8      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   13666:	89a0      	ldrh	r0, [r4, #12]
   13668:	b282      	uxth	r2, r0
   1366a:	2a05      	cmp	r2, #5
   1366c:	d970      	bls.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   1366e:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13670:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13674:	d86c      	bhi.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13676:	429a      	cmp	r2, r3
   13678:	d86a      	bhi.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   1367a:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   1367c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13680:	d266      	bcs.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13682:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   13684:	2909      	cmp	r1, #9
   13686:	d963      	bls.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13688:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1368c:	d860      	bhi.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   1368e:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   13692:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13696:	da5b      	bge.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   13698:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   1369a:	4293      	cmp	r3, r2
   1369c:	d358      	bcc.n	13750 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   1369e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   136a2:	8a23      	ldrh	r3, [r4, #16]
   136a4:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   136a8:	8a62      	ldrh	r2, [r4, #18]
   136aa:	b293      	uxth	r3, r2
   136ac:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   136b0:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   136b2:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   136b6:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   136ba:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   136be:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   136c2:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   136c6:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   136ca:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   136ce:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   136d2:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   136d6:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   136da:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   136de:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   136e2:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   136e6:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   136ea:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   136ee:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   136f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   136f4:	4291      	cmp	r1, r2
   136f6:	d10f      	bne.n	13718 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   136f8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   136fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   136fe:	fb02 f201 	mul.w	r2, r2, r1
   13702:	f242 7110 	movw	r1, #10000	; 0x2710
   13706:	fb01 2303 	mla	r3, r1, r3, r2
   1370a:	3b01      	subs	r3, #1
   1370c:	fb93 f3f2 	sdiv	r3, r3, r2
   13710:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   13712:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   13714:	4293      	cmp	r3, r2
   13716:	d02c      	beq.n	13772 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   13718:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1371c:	f013 0f08 	tst.w	r3, #8
   13720:	d01d      	beq.n	1375e <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   13722:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13726:	2202      	movs	r2, #2
   13728:	f362 0302 	bfi	r3, r2, #0, #3
   1372c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   13730:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13734:	3b01      	subs	r3, #1
   13736:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   1373a:	4b2d      	ldr	r3, [pc, #180]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1373c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13740:	2b00      	cmp	r3, #0
   13742:	f040 8580 	bne.w	14246 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   13746:	4b2a      	ldr	r3, [pc, #168]	; (137f0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13748:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   1374c:	2400      	movs	r4, #0
   1374e:	e583      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   13750:	221e      	movs	r2, #30
   13752:	210f      	movs	r1, #15
   13754:	4628      	mov	r0, r5
   13756:	f7fe f9fd 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   1375a:	2400      	movs	r4, #0
					break;
   1375c:	e57c      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   1375e:	2301      	movs	r3, #1
   13760:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   13762:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13766:	2203      	movs	r2, #3
   13768:	f362 0302 	bfi	r3, r2, #0, #3
   1376c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13770:	e7de      	b.n	13730 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   13772:	2300      	movs	r3, #0
   13774:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   13778:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   1377c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13780:	2201      	movs	r2, #1
   13782:	f362 0302 	bfi	r3, r2, #0, #3
   13786:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1378a:	e7d1      	b.n	13730 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1378c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13790:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13794:	429a      	cmp	r2, r3
   13796:	d007      	beq.n	137a8 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   13798:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1379c:	f013 0307 	ands.w	r3, r3, #7
   137a0:	d002      	beq.n	137a8 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   137a2:	2b04      	cmp	r3, #4
   137a4:	f040 8089 	bne.w	138ba <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   137a8:	89a1      	ldrh	r1, [r4, #12]
   137aa:	b28a      	uxth	r2, r1
   137ac:	2a05      	cmp	r2, #5
   137ae:	d917      	bls.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   137b0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   137b2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   137b6:	d813      	bhi.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   137b8:	429a      	cmp	r2, r3
   137ba:	d811      	bhi.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   137bc:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   137be:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   137c2:	d20d      	bcs.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   137c4:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   137c6:	2809      	cmp	r0, #9
   137c8:	d90a      	bls.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   137ca:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   137ce:	d807      	bhi.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   137d0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   137d4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   137d8:	da02      	bge.n	137e0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   137da:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   137dc:	4293      	cmp	r3, r2
   137de:	d209      	bcs.n	137f4 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   137e0:	221e      	movs	r2, #30
   137e2:	210f      	movs	r1, #15
   137e4:	4628      	mov	r0, r5
   137e6:	f7fe f9b5 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   137ea:	2400      	movs	r4, #0
				break;
   137ec:	e534      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
   137ee:	bf00      	nop
   137f0:	20000ef4 	.word	0x20000ef4
			conn->llcp_conn_param.interval = cpr->interval_min;
   137f4:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   137f8:	8a23      	ldrh	r3, [r4, #16]
   137fa:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   137fe:	8a62      	ldrh	r2, [r4, #18]
   13800:	b293      	uxth	r3, r2
   13802:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   13806:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13808:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   1380c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13810:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13814:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13818:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1381c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13820:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13824:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13828:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1382c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13830:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13834:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13838:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1383c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13840:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   13844:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   13848:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   1384a:	4291      	cmp	r1, r2
   1384c:	d013      	beq.n	13876 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   1384e:	2301      	movs	r3, #1
   13850:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   13852:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13856:	2203      	movs	r2, #3
   13858:	f362 0302 	bfi	r3, r2, #0, #3
   1385c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13860:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13864:	3b01      	subs	r3, #1
   13866:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   1386a:	4bcb      	ldr	r3, [pc, #812]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1386c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13870:	b1f3      	cbz	r3, 138b0 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   13872:	2400      	movs	r4, #0
   13874:	e4f0      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13876:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13878:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1387c:	fb02 f201 	mul.w	r2, r2, r1
   13880:	f242 7110 	movw	r1, #10000	; 0x2710
   13884:	fb01 2303 	mla	r3, r1, r3, r2
   13888:	3b01      	subs	r3, #1
   1388a:	fb93 f3f2 	sdiv	r3, r3, r2
   1388e:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   13890:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   13892:	4293      	cmp	r3, r2
   13894:	d1db      	bne.n	1384e <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   13896:	2300      	movs	r3, #0
   13898:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   1389c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   138a0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   138a4:	2201      	movs	r2, #1
   138a6:	f362 0302 	bfi	r3, r2, #0, #3
   138aa:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   138ae:	e7d7      	b.n	13860 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   138b0:	4bb9      	ldr	r3, [pc, #740]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   138b2:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   138b6:	2400      	movs	r4, #0
   138b8:	e4ce      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   138ba:	4040      	eors	r0, r0
   138bc:	f380 8811 	msr	BASEPRI, r0
   138c0:	f04f 0004 	mov.w	r0, #4
   138c4:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   138c6:	2b00      	cmp	r3, #0
   138c8:	f2c0 84c0 	blt.w	1424c <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   138cc:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   138d0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   138d4:	429a      	cmp	r2, r3
   138d6:	f000 84bc 	beq.w	14252 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   138da:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   138de:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   138e2:	2b04      	cmp	r3, #4
   138e4:	d001      	beq.n	138ea <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   138e6:	2400      	movs	r4, #0
   138e8:	e4b6      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   138ea:	89a2      	ldrh	r2, [r4, #12]
   138ec:	2a05      	cmp	r2, #5
   138ee:	d917      	bls.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   138f0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   138f2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   138f6:	d813      	bhi.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   138f8:	429a      	cmp	r2, r3
   138fa:	d811      	bhi.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   138fc:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   138fe:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13902:	d20d      	bcs.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13904:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   13906:	2909      	cmp	r1, #9
   13908:	d90a      	bls.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1390a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1390e:	d807      	bhi.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13910:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13914:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13918:	da02      	bge.n	13920 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1391a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1391c:	4293      	cmp	r3, r2
   1391e:	d206      	bcs.n	1392e <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   13920:	221e      	movs	r2, #30
   13922:	2110      	movs	r1, #16
   13924:	4628      	mov	r0, r5
   13926:	f7fe f915 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   1392a:	2400      	movs	r4, #0
				break;
   1392c:	e494      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   1392e:	2300      	movs	r3, #0
   13930:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   13934:	89a2      	ldrh	r2, [r4, #12]
   13936:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   1393a:	8a22      	ldrh	r2, [r4, #16]
   1393c:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13940:	8a62      	ldrh	r2, [r4, #18]
   13942:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   13946:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13948:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   1394c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13950:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13954:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13958:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1395c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13960:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13964:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13968:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1396c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13970:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13974:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13978:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1397c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13980:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13984:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13988:	2101      	movs	r1, #1
   1398a:	f361 0202 	bfi	r2, r1, #0, #3
   1398e:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   13992:	461c      	mov	r4, r3
   13994:	e460      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13996:	4b80      	ldr	r3, [pc, #512]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13998:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1399c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   139a0:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   139a4:	4291      	cmp	r1, r2
   139a6:	d112      	bne.n	139ce <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   139a8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   139ac:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   139b0:	4291      	cmp	r1, r2
   139b2:	d14c      	bne.n	13a4e <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   139b4:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   139b8:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   139bc:	4291      	cmp	r1, r2
   139be:	f000 80ef 	beq.w	13ba0 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   139c2:	7b21      	ldrb	r1, [r4, #12]
   139c4:	2914      	cmp	r1, #20
   139c6:	f000 80cb 	beq.w	13b60 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   139ca:	2400      	movs	r4, #0
   139cc:	e444      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   139ce:	7b23      	ldrb	r3, [r4, #12]
   139d0:	2b16      	cmp	r3, #22
   139d2:	d001      	beq.n	139d8 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   139d4:	2400      	movs	r4, #0
   139d6:	e43f      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   139d8:	7b63      	ldrb	r3, [r4, #13]
   139da:	2b23      	cmp	r3, #35	; 0x23
   139dc:	d017      	beq.n	13a0e <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   139de:	4b6e      	ldr	r3, [pc, #440]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   139e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   139e4:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   139e8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   139ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   139f0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   139f4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   139f8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   139fc:	f361 0002 	bfi	r0, r1, #0, #3
   13a00:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13a04:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a08:	2200      	movs	r2, #0
   13a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   13a0e:	4b62      	ldr	r3, [pc, #392]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a10:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a14:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13a18:	f013 0f02 	tst.w	r3, #2
   13a1c:	f000 841c 	beq.w	14258 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13a20:	230c      	movs	r3, #12
   13a22:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   13a24:	7b63      	ldrb	r3, [r4, #13]
   13a26:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   13a28:	4a5b      	ldr	r2, [pc, #364]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a2a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13a32:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13a36:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   13a38:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13a40:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13a44:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   13a46:	2301      	movs	r3, #1
   13a48:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13a4a:	2400      	movs	r4, #0
   13a4c:	e404      	b.n	13258 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   13a4e:	7b23      	ldrb	r3, [r4, #12]
   13a50:	2b0f      	cmp	r3, #15
   13a52:	d002      	beq.n	13a5a <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   13a54:	2400      	movs	r4, #0
   13a56:	f7ff bbff 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13a5a:	4b4f      	ldr	r3, [pc, #316]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13a60:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13a64:	2a00      	cmp	r2, #0
   13a66:	db02      	blt.n	13a6e <isr_rx_conn_pkt_ctrl+0x88a>
   13a68:	7b62      	ldrb	r2, [r4, #13]
   13a6a:	2a1a      	cmp	r2, #26
   13a6c:	d037      	beq.n	13ade <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13a6e:	7b62      	ldrb	r2, [r4, #13]
   13a70:	2a23      	cmp	r2, #35	; 0x23
   13a72:	d012      	beq.n	13a9a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   13a74:	4a48      	ldr	r2, [pc, #288]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a76:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13a7a:	4293      	cmp	r3, r2
   13a7c:	d166      	bne.n	13b4c <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13a7e:	2200      	movs	r2, #0
   13a80:	4945      	ldr	r1, [pc, #276]	; (13b98 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a82:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   13a86:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13a8a:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13a92:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13a96:	2a00      	cmp	r2, #0
   13a98:	db5e      	blt.n	13b58 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13a9a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13a9e:	f012 0f08 	tst.w	r2, #8
   13aa2:	f000 83dc 	beq.w	1425e <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13aa6:	2208      	movs	r2, #8
   13aa8:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13aaa:	7b62      	ldrb	r2, [r4, #13]
   13aac:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13aae:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13ab0:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13ab2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13ab4:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13ab6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13ab8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13aba:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13abe:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13ac2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13ac6:	4a35      	ldr	r2, [pc, #212]	; (13b9c <isr_rx_conn_pkt_ctrl+0x9b8>)
   13ac8:	fb82 1203 	smull	r1, r2, r2, r3
   13acc:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13ace:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13ad2:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13ad4:	2301      	movs	r3, #1
   13ad6:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13ad8:	2400      	movs	r4, #0
   13ada:	f7ff bbbd 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13ade:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13ae2:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13ae6:	4282      	cmp	r2, r0
   13ae8:	d12a      	bne.n	13b40 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13aea:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13aee:	2105      	movs	r1, #5
   13af0:	f361 0202 	bfi	r2, r1, #0, #3
   13af4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13af8:	2501      	movs	r5, #1
   13afa:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13afe:	2400      	movs	r4, #0
   13b00:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13b04:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13b08:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13b0c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13b10:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13b14:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13b18:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13b1c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13b20:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13b24:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13b28:	406a      	eors	r2, r5
   13b2a:	f362 0182 	bfi	r1, r2, #2, #1
   13b2e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13b32:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   13b36:	3801      	subs	r0, #1
   13b38:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13b3c:	f7ff bb8c 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13b40:	4040      	eors	r0, r0
   13b42:	f380 8811 	msr	BASEPRI, r0
   13b46:	f04f 0004 	mov.w	r0, #4
   13b4a:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13b4c:	4040      	eors	r0, r0
   13b4e:	f380 8811 	msr	BASEPRI, r0
   13b52:	f04f 0004 	mov.w	r0, #4
   13b56:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13b58:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13b5c:	671a      	str	r2, [r3, #112]	; 0x70
   13b5e:	e79c      	b.n	13a9a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13b60:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   13b64:	2200      	movs	r2, #0
   13b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13b6a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13b6e:	f362 01c3 	bfi	r1, r2, #3, #1
   13b72:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13b76:	2109      	movs	r1, #9
   13b78:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13b7a:	2115      	movs	r1, #21
   13b7c:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13b7e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13b80:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13b82:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   13b84:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13b86:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13b88:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13b8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13b8c:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13b8e:	2301      	movs	r3, #1
   13b90:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13b92:	4614      	mov	r4, r2
   13b94:	f7ff bb60 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   13b98:	20000ef4 	.word	0x20000ef4
   13b9c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13ba0:	7b22      	ldrb	r2, [r4, #12]
   13ba2:	2a03      	cmp	r2, #3
   13ba4:	f040 835e 	bne.w	14264 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13ba8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13bac:	f36f 0282 	bfc	r2, #2, #1
   13bb0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13bb4:	4bcb      	ldr	r3, [pc, #812]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13bb6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13bba:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13bbe:	f36f 01c3 	bfc	r1, #3, #1
   13bc2:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13bc6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13bca:	2300      	movs	r3, #0
   13bcc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13bd0:	220d      	movs	r2, #13
   13bd2:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13bd4:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13bd6:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13bd8:	2201      	movs	r2, #1
   13bda:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13bdc:	461c      	mov	r4, r3
   13bde:	f7ff bb3b 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13be2:	4628      	mov	r0, r5
   13be4:	f7fd ff76 	bl	11ad4 <ping_resp_send>
	u8_t nack = 0;
   13be8:	2400      	movs	r4, #0
		break;
   13bea:	f7ff bb35 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13bee:	2400      	movs	r4, #0
   13bf0:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13bf4:	f7ff bb30 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13bf8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13bfc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13c00:	4293      	cmp	r3, r2
   13c02:	d014      	beq.n	13c2e <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13c04:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13c08:	4bb6      	ldr	r3, [pc, #728]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c0e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13c12:	f36f 02c3 	bfc	r2, #3, #1
   13c16:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13c1a:	2301      	movs	r3, #1
   13c1c:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13c1e:	4bb1      	ldr	r3, [pc, #708]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c24:	2400      	movs	r4, #0
   13c26:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13c2a:	f7ff bb15 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13c2e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   13c32:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   13c36:	4293      	cmp	r3, r2
   13c38:	d02a      	beq.n	13c90 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13c3a:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13c3e:	49a9      	ldr	r1, [pc, #676]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c40:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13c44:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13c48:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13c4c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13c50:	f362 0002 	bfi	r0, r2, #0, #3
   13c54:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13c58:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c5c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13c60:	f013 0f02 	tst.w	r3, #2
   13c64:	d0db      	beq.n	13c1e <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   13c66:	230c      	movs	r3, #12
   13c68:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13c6a:	2300      	movs	r3, #0
   13c6c:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13c6e:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13c76:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13c7a:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13c7c:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13c84:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13c88:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13c8a:	2301      	movs	r3, #1
   13c8c:	703b      	strb	r3, [r7, #0]
   13c8e:	e7c6      	b.n	13c1e <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13c90:	7b23      	ldrb	r3, [r4, #12]
   13c92:	2b12      	cmp	r3, #18
   13c94:	d0c3      	beq.n	13c1e <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13c96:	2301      	movs	r3, #1
   13c98:	703b      	strb	r3, [r7, #0]
				break;
   13c9a:	e7c0      	b.n	13c1e <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13c9c:	4b91      	ldr	r3, [pc, #580]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13ca2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13ca4:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13ca6:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13caa:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13cae:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13cb2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13cb6:	429a      	cmp	r2, r3
   13cb8:	d020      	beq.n	13cfc <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13cba:	429a      	cmp	r2, r3
   13cbc:	d007      	beq.n	13cce <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13cbe:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13cc2:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13cc6:	2b01      	cmp	r3, #1
   13cc8:	d960      	bls.n	13d8c <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13cca:	2b02      	cmp	r3, #2
   13ccc:	d062      	beq.n	13d94 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13cce:	78f3      	ldrb	r3, [r6, #3]
   13cd0:	2b15      	cmp	r3, #21
   13cd2:	f040 80cb 	bne.w	13e6c <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13cd6:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13cd8:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13cda:	2b14      	cmp	r3, #20
   13cdc:	f47f aabc 	bne.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13ce0:	2c00      	cmp	r4, #0
   13ce2:	f47f aab9 	bne.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13ce6:	4b7f      	ldr	r3, [pc, #508]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13ce8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13cec:	f8cd 8000 	str.w	r8, [sp]
   13cf0:	462b      	mov	r3, r5
   13cf2:	464a      	mov	r2, r9
   13cf4:	f7fd ff0a 	bl	11b0c <length_resp_send>
		break;
   13cf8:	f7ff baae 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13cfc:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13cfe:	2c14      	cmp	r4, #20
   13d00:	d1db      	bne.n	13cba <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13d02:	88b3      	ldrh	r3, [r6, #4]
   13d04:	2b1a      	cmp	r3, #26
   13d06:	d903      	bls.n	13d10 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13d08:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13d0a:	429d      	cmp	r5, r3
   13d0c:	bf28      	it	cs
   13d0e:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13d10:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13d14:	f1ba 0f1a 	cmp.w	sl, #26
   13d18:	d942      	bls.n	13da0 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13d1a:	f1ba 0f1b 	cmp.w	sl, #27
   13d1e:	bf28      	it	cs
   13d20:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13d24:	88f3      	ldrh	r3, [r6, #6]
   13d26:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13d2a:	d304      	bcc.n	13d36 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13d2c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13d30:	4598      	cmp	r8, r3
   13d32:	bf28      	it	cs
   13d34:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   13d36:	8973      	ldrh	r3, [r6, #10]
   13d38:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13d3c:	d305      	bcc.n	13d4a <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13d3e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13d42:	bf28      	it	cs
   13d44:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13d48:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13d4a:	4551      	cmp	r1, sl
   13d4c:	d066      	beq.n	13e1c <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13d4e:	4b65      	ldr	r3, [pc, #404]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d50:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13d54:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13d58:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13d5a:	429a      	cmp	r2, r3
   13d5c:	d322      	bcc.n	13da4 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13d5e:	4b61      	ldr	r3, [pc, #388]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d60:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13d64:	1b14      	subs	r4, r2, r4
   13d66:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13d68:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13d6a:	4b5e      	ldr	r3, [pc, #376]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d6c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13d70:	f7fb fa79 	bl	f266 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   13d74:	1823      	adds	r3, r4, r0
   13d76:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13d78:	2bff      	cmp	r3, #255	; 0xff
   13d7a:	d81d      	bhi.n	13db8 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13d7c:	4a59      	ldr	r2, [pc, #356]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d7e:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   13d82:	4293      	cmp	r3, r2
   13d84:	d01e      	beq.n	13dc4 <isr_rx_conn_pkt_ctrl+0xbe0>
   13d86:	4651      	mov	r1, sl
				nack = 1;
   13d88:	2401      	movs	r4, #1
   13d8a:	e7a5      	b.n	13cd8 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13d8c:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13d8e:	2a14      	cmp	r2, #20
   13d90:	d19b      	bne.n	13cca <isr_rx_conn_pkt_ctrl+0xae6>
   13d92:	e7b6      	b.n	13d02 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13d94:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13d96:	3b14      	subs	r3, #20
   13d98:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13d9a:	2b01      	cmp	r3, #1
   13d9c:	d897      	bhi.n	13cce <isr_rx_conn_pkt_ctrl+0xaea>
   13d9e:	e7b0      	b.n	13d02 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13da0:	468a      	mov	sl, r1
   13da2:	e7bf      	b.n	13d24 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13da4:	4b4f      	ldr	r3, [pc, #316]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13da6:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13daa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13dae:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13db0:	fa52 f484 	uxtab	r4, r2, r4
   13db4:	b2e4      	uxtb	r4, r4
   13db6:	e7d7      	b.n	13d68 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13db8:	4040      	eors	r0, r0
   13dba:	f380 8811 	msr	BASEPRI, r0
   13dbe:	f04f 0004 	mov.w	r0, #4
   13dc2:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13dc4:	4b47      	ldr	r3, [pc, #284]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13dc6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13dca:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13dcc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13dd0:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13dd4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13dd8:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13ddc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13de0:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13de4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13de8:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13dec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13df0:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13df4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13df8:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13dfc:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13dfe:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13e02:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13e06:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13e0a:	f042 0203 	orr.w	r2, r2, #3
   13e0e:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13e12:	2203      	movs	r2, #3
   13e14:	741a      	strb	r2, [r3, #16]
   13e16:	4651      	mov	r1, sl
	u8_t nack = 0;
   13e18:	2400      	movs	r4, #0
   13e1a:	e75d      	b.n	13cd8 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13e1c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13e20:	f36f 03c3 	bfc	r3, #3, #1
   13e24:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13e28:	4b2e      	ldr	r3, [pc, #184]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13e2e:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13e30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13e34:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13e38:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13e3c:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13e40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   13e44:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13e48:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13e4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e50:	2400      	movs	r4, #0
   13e52:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   13e56:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13e5a:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13e5c:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13e60:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   13e64:	2301      	movs	r3, #1
   13e66:	703b      	strb	r3, [r7, #0]
   13e68:	4651      	mov	r1, sl
   13e6a:	e735      	b.n	13cd8 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13e6c:	4040      	eors	r0, r0
   13e6e:	f380 8811 	msr	BASEPRI, r0
   13e72:	f04f 0004 	mov.w	r0, #4
   13e76:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13e78:	4b1a      	ldr	r3, [pc, #104]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e7a:	7bdb      	ldrb	r3, [r3, #15]
   13e7c:	b2db      	uxtb	r3, r3
   13e7e:	2b04      	cmp	r3, #4
   13e80:	d032      	beq.n	13ee8 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   13e82:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13e86:	2202      	movs	r2, #2
   13e88:	f362 0301 	bfi	r3, r2, #0, #2
   13e8c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13e90:	4b14      	ldr	r3, [pc, #80]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e96:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   13e9a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   13e9e:	428a      	cmp	r2, r1
   13ea0:	f000 8099 	beq.w	13fd6 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13ea4:	4a0f      	ldr	r2, [pc, #60]	; (13ee4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13ea6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13eaa:	7b61      	ldrb	r1, [r4, #13]
   13eac:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13eb0:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13eb4:	4029      	ands	r1, r5
   13eb6:	f361 0384 	bfi	r3, r1, #2, #3
   13eba:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13ebe:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13ec2:	7b21      	ldrb	r1, [r4, #12]
   13ec4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13ec8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13ecc:	f361 1347 	bfi	r3, r1, #5, #3
   13ed0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   13ed4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13ed8:	f7fd fe5c 	bl	11b94 <phy_rsp_send>
	u8_t nack = 0;
   13edc:	2400      	movs	r4, #0
   13ede:	f7ff b9bb 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   13ee2:	bf00      	nop
   13ee4:	20000ef4 	.word	0x20000ef4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13ee8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   13eec:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13ef0:	429a      	cmp	r2, r3
   13ef2:	d007      	beq.n	13f04 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   13ef4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13ef8:	f003 0303 	and.w	r3, r3, #3
   13efc:	3b01      	subs	r3, #1
   13efe:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   13f00:	2b02      	cmp	r3, #2
   13f02:	d913      	bls.n	13f2c <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   13f04:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   13f08:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   13f0c:	429a      	cmp	r2, r3
   13f0e:	d105      	bne.n	13f1c <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   13f10:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   13f14:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   13f18:	429a      	cmp	r2, r3
   13f1a:	d00f      	beq.n	13f3c <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   13f1c:	222a      	movs	r2, #42	; 0x2a
   13f1e:	2116      	movs	r1, #22
   13f20:	4628      	mov	r0, r5
   13f22:	f7fd fe17 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   13f26:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13f28:	f7ff b996 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13f2c:	2223      	movs	r2, #35	; 0x23
   13f2e:	2116      	movs	r1, #22
   13f30:	4628      	mov	r0, r5
   13f32:	f7fd fe0f 	bl	11b54 <reject_ext_ind_send>
	u8_t nack = 0;
   13f36:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13f38:	f7ff b98e 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   13f3c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13f40:	f043 0303 	orr.w	r3, r3, #3
   13f44:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   13f48:	4bce      	ldr	r3, [pc, #824]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f4a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f4e:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   13f52:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   13f56:	428b      	cmp	r3, r1
   13f58:	d01a      	beq.n	13f90 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13f5a:	49ca      	ldr	r1, [pc, #808]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f5c:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   13f60:	7b62      	ldrb	r2, [r4, #13]
   13f62:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13f66:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13f6a:	402a      	ands	r2, r5
   13f6c:	f362 0384 	bfi	r3, r2, #2, #3
   13f70:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13f74:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   13f78:	7b22      	ldrb	r2, [r4, #12]
   13f7a:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   13f7e:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   13f82:	f362 1347 	bfi	r3, r2, #5, #3
   13f86:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   13f8a:	2400      	movs	r4, #0
   13f8c:	f7ff b964 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13f90:	3b01      	subs	r3, #1
   13f92:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   13f96:	4bbb      	ldr	r3, [pc, #748]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f98:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f9c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13fa0:	f36f 0141 	bfc	r1, #1, #1
   13fa4:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   13fa8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   13fac:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   13fb0:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13fb4:	f360 0184 	bfi	r1, r0, #2, #3
   13fb8:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   13fbc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   13fc0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   13fc4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   13fc8:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   13fcc:	f362 1147 	bfi	r1, r2, #5, #3
   13fd0:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   13fd4:	e7c1      	b.n	13f5a <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   13fd6:	3a01      	subs	r2, #1
   13fd8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   13fdc:	4ba9      	ldr	r3, [pc, #676]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13fde:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fe2:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13fe6:	f36f 0141 	bfc	r1, #1, #1
   13fea:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   13fee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   13ff2:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   13ff6:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13ffa:	f360 0184 	bfi	r1, r0, #2, #3
   13ffe:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   14002:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   14006:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   1400a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   1400e:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   14012:	f361 1047 	bfi	r0, r1, #5, #3
   14016:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   1401a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   1401e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   14022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   14026:	e73d      	b.n	13ea4 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   14028:	4b96      	ldr	r3, [pc, #600]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1402a:	7bdb      	ldrb	r3, [r3, #15]
   1402c:	b2db      	uxtb	r3, r3
   1402e:	2b04      	cmp	r3, #4
   14030:	d002      	beq.n	14038 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   14032:	2400      	movs	r4, #0
   14034:	f7ff b910 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   14038:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   1403c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   14040:	429a      	cmp	r2, r3
   14042:	f000 8112 	beq.w	1426a <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   14046:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1404a:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   1404e:	2b02      	cmp	r3, #2
   14050:	d002      	beq.n	14058 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   14052:	2400      	movs	r4, #0
   14054:	f7ff b900 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   14058:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1405c:	f043 0303 	orr.w	r3, r3, #3
   14060:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14064:	4a87      	ldr	r2, [pc, #540]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14066:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1406a:	7b61      	ldrb	r1, [r4, #13]
   1406c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14070:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14074:	4029      	ands	r1, r5
   14076:	f361 0384 	bfi	r3, r1, #2, #3
   1407a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1407e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14082:	7b21      	ldrb	r1, [r4, #12]
   14084:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14088:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1408c:	f361 1347 	bfi	r3, r1, #5, #3
   14090:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   14094:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14098:	2400      	movs	r4, #0
   1409a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1409e:	f7ff b8db 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   140a2:	4b78      	ldr	r3, [pc, #480]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   140a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   140a8:	7b23      	ldrb	r3, [r4, #12]
   140aa:	7b61      	ldrb	r1, [r4, #13]
   140ac:	430b      	orrs	r3, r1
   140ae:	f013 0f07 	tst.w	r3, #7
   140b2:	d134      	bne.n	1411e <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   140b4:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   140b8:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   140bc:	428b      	cmp	r3, r1
   140be:	f000 8086 	beq.w	141ce <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   140c2:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   140c6:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   140ca:	2b02      	cmp	r3, #2
   140cc:	d00c      	beq.n	140e8 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   140ce:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   140d0:	2b00      	cmp	r3, #0
   140d2:	f000 80cd 	beq.w	14270 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   140d6:	4b6b      	ldr	r3, [pc, #428]	; (14284 <isr_rx_conn_pkt_ctrl+0x10a0>)
   140d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   140dc:	2228      	movs	r2, #40	; 0x28
   140de:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   140e2:	2400      	movs	r4, #0
   140e4:	f7ff b8b8 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   140e8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   140ec:	2300      	movs	r3, #0
   140ee:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   140f2:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   140f6:	f013 0f02 	tst.w	r3, #2
   140fa:	d06a      	beq.n	141d2 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   140fc:	230c      	movs	r3, #12
   140fe:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   14100:	2300      	movs	r3, #0
   14102:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   14104:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   14108:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1410c:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   1410e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   14112:	f3c2 0202 	ubfx	r2, r2, #0, #3
   14116:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   14118:	2201      	movs	r2, #1
   1411a:	703a      	strb	r2, [r7, #0]
   1411c:	e7d8      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   1411e:	89e3      	ldrh	r3, [r4, #14]
   14120:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   14122:	1a5b      	subs	r3, r3, r1
   14124:	b29b      	uxth	r3, r3
   14126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1412a:	da54      	bge.n	141d6 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1412c:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   14130:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   14134:	428b      	cmp	r3, r1
   14136:	d134      	bne.n	141a2 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14138:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   1413c:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   14140:	4283      	cmp	r3, r0
   14142:	d005      	beq.n	14150 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   14144:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14148:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1414c:	2b02      	cmp	r3, #2
   1414e:	d02e      	beq.n	141ae <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   14150:	7b60      	ldrb	r0, [r4, #13]
   14152:	f000 0007 	and.w	r0, r0, #7
   14156:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   1415a:	f360 0384 	bfi	r3, r0, #2, #3
   1415e:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   14162:	7b25      	ldrb	r5, [r4, #12]
   14164:	b2db      	uxtb	r3, r3
   14166:	f365 1347 	bfi	r3, r5, #5, #3
   1416a:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   1416e:	89e3      	ldrh	r3, [r4, #14]
   14170:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   14174:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   14178:	f36f 0300 	bfc	r3, #0, #1
   1417c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   14180:	2408      	movs	r4, #8
   14182:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   14186:	3901      	subs	r1, #1
   14188:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   1418c:	f003 031c 	and.w	r3, r3, #28
   14190:	b31b      	cbz	r3, 141da <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   14192:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   14196:	f360 0302 	bfi	r3, r0, #0, #3
   1419a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   1419e:	2300      	movs	r3, #0
   141a0:	e796      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   141a2:	4040      	eors	r0, r0
   141a4:	f380 8811 	msr	BASEPRI, r0
   141a8:	f04f 0004 	mov.w	r0, #4
   141ac:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   141ae:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   141b2:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   141b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   141ba:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   141be:	f363 0041 	bfi	r0, r3, #1, #1
   141c2:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   141c6:	2300      	movs	r3, #0
   141c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   141cc:	e7c0      	b.n	14150 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   141ce:	2300      	movs	r3, #0
   141d0:	e77e      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   141d2:	2300      	movs	r3, #0
   141d4:	e77c      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   141d6:	2301      	movs	r3, #1
   141d8:	e77a      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   141da:	2300      	movs	r3, #0
   141dc:	e778      	b.n	140d0 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   141de:	2b00      	cmp	r3, #0
   141e0:	db49      	blt.n	14276 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   141e2:	7b21      	ldrb	r1, [r4, #12]
   141e4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   141e8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   141ec:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   141f0:	f002 0207 	and.w	r2, r2, #7
   141f4:	4313      	orrs	r3, r2
   141f6:	4219      	tst	r1, r3
   141f8:	d040      	beq.n	1427c <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   141fa:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   141fe:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14202:	429a      	cmp	r2, r3
   14204:	d002      	beq.n	1420c <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   14206:	2400      	movs	r4, #0
   14208:	f7ff b826 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   1420c:	2205      	movs	r2, #5
   1420e:	491e      	ldr	r1, [pc, #120]	; (14288 <isr_rx_conn_pkt_ctrl+0x10a4>)
   14210:	f105 0079 	add.w	r0, r5, #121	; 0x79
   14214:	f7ec f854 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   14218:	2301      	movs	r3, #1
   1421a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   1421e:	2302      	movs	r3, #2
   14220:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   14224:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14228:	3b01      	subs	r3, #1
   1422a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   1422e:	2400      	movs	r4, #0
   14230:	f7ff b812 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   14234:	4628      	mov	r0, r5
   14236:	f7fd fcd3 	bl	11be0 <unknown_rsp_send>
	u8_t nack = 0;
   1423a:	2400      	movs	r4, #0
		break;
   1423c:	f7ff b80c 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   14240:	2400      	movs	r4, #0
   14242:	f7ff b809 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14246:	2400      	movs	r4, #0
   14248:	f7ff b806 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   1424c:	2400      	movs	r4, #0
   1424e:	f7ff b803 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14252:	2400      	movs	r4, #0
   14254:	f7ff b800 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14258:	2400      	movs	r4, #0
   1425a:	f7fe bffd 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   1425e:	2400      	movs	r4, #0
   14260:	f7fe bffa 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14264:	2400      	movs	r4, #0
   14266:	f7fe bff7 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   1426a:	2400      	movs	r4, #0
   1426c:	f7fe bff4 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14270:	2400      	movs	r4, #0
   14272:	f7fe bff1 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14276:	2400      	movs	r4, #0
   14278:	f7fe bfee 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   1427c:	2400      	movs	r4, #0
   1427e:	f7fe bfeb 	b.w	13258 <isr_rx_conn_pkt_ctrl+0x74>
   14282:	bf00      	nop
   14284:	20000ef4 	.word	0x20000ef4
   14288:	2000100a 	.word	0x2000100a

0001428c <packet_rx_enqueue>:
{
   1428c:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1428e:	4a1a      	ldr	r2, [pc, #104]	; (142f8 <packet_rx_enqueue+0x6c>)
   14290:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14294:	b2db      	uxtb	r3, r3
   14296:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   1429a:	4293      	cmp	r3, r2
   1429c:	d01d      	beq.n	142da <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1429e:	4a16      	ldr	r2, [pc, #88]	; (142f8 <packet_rx_enqueue+0x6c>)
   142a0:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   142a4:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   142a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   142ac:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   142ae:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   142b2:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   142b4:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   142b8:	3301      	adds	r3, #1
   142ba:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   142bc:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   142c0:	4293      	cmp	r3, r2
   142c2:	d010      	beq.n	142e6 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   142c4:	4a0c      	ldr	r2, [pc, #48]	; (142f8 <packet_rx_enqueue+0x6c>)
   142c6:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   142ca:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   142ce:	f7fa fffe 	bl	f2ce <memq_enqueue>
	LL_ASSERT(link);
   142d2:	b150      	cbz	r0, 142ea <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   142d4:	f7fe f871 	bl	123ba <packet_rx_callback>
   142d8:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   142da:	4040      	eors	r0, r0
   142dc:	f380 8811 	msr	BASEPRI, r0
   142e0:	f04f 0004 	mov.w	r0, #4
   142e4:	df02      	svc	2
		last = 0;
   142e6:	2300      	movs	r3, #0
   142e8:	e7ec      	b.n	142c4 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   142ea:	4040      	eors	r0, r0
   142ec:	f380 8811 	msr	BASEPRI, r0
   142f0:	f04f 0004 	mov.w	r0, #4
   142f4:	df02      	svc	2
   142f6:	bf00      	nop
   142f8:	20000ef4 	.word	0x20000ef4

000142fc <mayfly_adv_stop>:
{
   142fc:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   142fe:	4b1c      	ldr	r3, [pc, #112]	; (14370 <mayfly_adv_stop+0x74>)
   14300:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14304:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14308:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1430a:	429a      	cmp	r2, r3
   1430c:	d31d      	bcc.n	1434a <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   1430e:	4b18      	ldr	r3, [pc, #96]	; (14370 <mayfly_adv_stop+0x74>)
   14310:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14314:	1ad3      	subs	r3, r2, r3
   14316:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14318:	b30b      	cbz	r3, 1435e <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   1431a:	4b15      	ldr	r3, [pc, #84]	; (14370 <mayfly_adv_stop+0x74>)
   1431c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14320:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14324:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   14328:	b1dc      	cbz	r4, 14362 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   1432a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1432e:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14330:	2306      	movs	r3, #6
   14332:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   14334:	221d      	movs	r2, #29
   14336:	2100      	movs	r1, #0
   14338:	f104 000b 	add.w	r0, r4, #11
   1433c:	f015 ff48 	bl	2a1d0 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   14340:	233c      	movs	r3, #60	; 0x3c
   14342:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   14344:	f7ff ffa2 	bl	1428c <packet_rx_enqueue>
   14348:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   1434a:	4909      	ldr	r1, [pc, #36]	; (14370 <mayfly_adv_stop+0x74>)
   1434c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14350:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14354:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14356:	fa52 f383 	uxtab	r3, r2, r3
   1435a:	b2db      	uxtb	r3, r3
   1435c:	e7dc      	b.n	14318 <mayfly_adv_stop+0x1c>
		return 0;
   1435e:	2400      	movs	r4, #0
   14360:	e7e2      	b.n	14328 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   14362:	4040      	eors	r0, r0
   14364:	f380 8811 	msr	BASEPRI, r0
   14368:	f04f 0004 	mov.w	r0, #4
   1436c:	df02      	svc	2
   1436e:	bf00      	nop
   14370:	20000ef4 	.word	0x20000ef4

00014374 <terminate_ind_rx_enqueue>:
{
   14374:	b510      	push	{r4, lr}
   14376:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14378:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   1437c:	b1bc      	cbz	r4, 143ae <terminate_ind_rx_enqueue+0x3a>
   1437e:	30b4      	adds	r0, #180	; 0xb4
   14380:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   14382:	8c19      	ldrh	r1, [r3, #32]
   14384:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14388:	2107      	movs	r1, #7
   1438a:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   1438e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   14392:	4a0d      	ldr	r2, [pc, #52]	; (143c8 <terminate_ind_rx_enqueue+0x54>)
   14394:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14398:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   1439c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   143a0:	4621      	mov	r1, r4
   143a2:	f7fa ff94 	bl	f2ce <memq_enqueue>
	LL_ASSERT(link);
   143a6:	b140      	cbz	r0, 143ba <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   143a8:	f7fe f807 	bl	123ba <packet_rx_callback>
   143ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   143ae:	4040      	eors	r0, r0
   143b0:	f380 8811 	msr	BASEPRI, r0
   143b4:	f04f 0004 	mov.w	r0, #4
   143b8:	df02      	svc	2
	LL_ASSERT(link);
   143ba:	4040      	eors	r0, r0
   143bc:	f380 8811 	msr	BASEPRI, r0
   143c0:	f04f 0004 	mov.w	r0, #4
   143c4:	df02      	svc	2
   143c6:	bf00      	nop
   143c8:	20000ef4 	.word	0x20000ef4

000143cc <isr_rx_scan_report>:
{
   143cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   143d0:	4b31      	ldr	r3, [pc, #196]	; (14498 <isr_rx_scan_report+0xcc>)
   143d2:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   143d6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   143da:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   143dc:	429c      	cmp	r4, r3
   143de:	d327      	bcc.n	14430 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   143e0:	4b2d      	ldr	r3, [pc, #180]	; (14498 <isr_rx_scan_report+0xcc>)
   143e2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   143e6:	1ae3      	subs	r3, r4, r3
   143e8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   143ea:	2b02      	cmp	r3, #2
   143ec:	d92a      	bls.n	14444 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   143ee:	4b2a      	ldr	r3, [pc, #168]	; (14498 <isr_rx_scan_report+0xcc>)
   143f0:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   143f4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   143f8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   143fc:	2c00      	cmp	r4, #0
   143fe:	d047      	beq.n	14490 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   14400:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14404:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   14406:	4b24      	ldr	r3, [pc, #144]	; (14498 <isr_rx_scan_report+0xcc>)
   14408:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1440c:	f013 0f07 	tst.w	r3, #7
   14410:	d020      	beq.n	14454 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   14412:	4b21      	ldr	r3, [pc, #132]	; (14498 <isr_rx_scan_report+0xcc>)
   14414:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   14418:	f003 0307 	and.w	r3, r3, #7
   1441c:	2b01      	cmp	r3, #1
   1441e:	d013      	beq.n	14448 <isr_rx_scan_report+0x7c>
   14420:	2b04      	cmp	r3, #4
   14422:	d014      	beq.n	1444e <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   14424:	4040      	eors	r0, r0
   14426:	f380 8811 	msr	BASEPRI, r0
   1442a:	f04f 0004 	mov.w	r0, #4
   1442e:	df02      	svc	2
		return (_radio.packet_rx_count -
   14430:	4d19      	ldr	r5, [pc, #100]	; (14498 <isr_rx_scan_report+0xcc>)
   14432:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   14436:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1443a:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   1443c:	fa54 f383 	uxtab	r3, r4, r3
   14440:	b2db      	uxtb	r3, r3
   14442:	e7d2      	b.n	143ea <isr_rx_scan_report+0x1e>
		return 0;
   14444:	2400      	movs	r4, #0
   14446:	e7d9      	b.n	143fc <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   14448:	2303      	movs	r3, #3
   1444a:	7123      	strb	r3, [r4, #4]
			break;
   1444c:	e004      	b.n	14458 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   1444e:	2304      	movs	r3, #4
   14450:	7123      	strb	r3, [r4, #4]
			break;
   14452:	e001      	b.n	14458 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   14454:	2302      	movs	r3, #2
   14456:	7123      	strb	r3, [r4, #4]
   14458:	4615      	mov	r5, r2
   1445a:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   1445c:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   14460:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14464:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   14468:	b968      	cbnz	r0, 14486 <isr_rx_scan_report+0xba>
   1446a:	207f      	movs	r0, #127	; 0x7f
   1446c:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   14470:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14472:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   14474:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14476:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14478:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1447a:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   1447c:	f7ff ff06 	bl	1428c <packet_rx_enqueue>
	return 0;
   14480:	2000      	movs	r0, #0
   14482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   14486:	f7fb f947 	bl	f718 <radio_rssi_get>
			     pdu_adv_rx->len] =
   1448a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1448e:	e7ed      	b.n	1446c <isr_rx_scan_report+0xa0>
		return 1;
   14490:	2001      	movs	r0, #1
}
   14492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14496:	bf00      	nop
   14498:	20000ef4 	.word	0x20000ef4

0001449c <isr_rx_conn>:
{
   1449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   144a0:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   144a2:	2300      	movs	r3, #0
   144a4:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   144a8:	4bc1      	ldr	r3, [pc, #772]	; (147b0 <isr_rx_conn+0x314>)
   144aa:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   144ae:	3201      	adds	r2, #1
   144b0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   144b4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   144b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   144bc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   144c0:	2301      	movs	r3, #1
   144c2:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   144c4:	4607      	mov	r7, r0
   144c6:	2800      	cmp	r0, #0
   144c8:	d143      	bne.n	14552 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   144ca:	4bb9      	ldr	r3, [pc, #740]	; (147b0 <isr_rx_conn+0x314>)
   144cc:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   144d0:	b91b      	cbnz	r3, 144da <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   144d2:	2202      	movs	r2, #2
   144d4:	4bb6      	ldr	r3, [pc, #728]	; (147b0 <isr_rx_conn+0x314>)
   144d6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   144da:	4bb5      	ldr	r3, [pc, #724]	; (147b0 <isr_rx_conn+0x314>)
   144dc:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   144e0:	3c01      	subs	r4, #1
   144e2:	b2e4      	uxtb	r4, r4
   144e4:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   144e8:	fab4 f484 	clz	r4, r4
   144ec:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   144ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   144f2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   144f6:	2a00      	cmp	r2, #0
   144f8:	f040 8387 	bne.w	14c0a <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   144fc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   144fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   14502:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   14504:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 147b0 <isr_rx_conn+0x314>
   14508:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   1450c:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   14510:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   14514:	a903      	add	r1, sp, #12
   14516:	f7fe f8ef 	bl	126f8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1451a:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   1451e:	2b03      	cmp	r3, #3
   14520:	f000 8376 	beq.w	14c10 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14524:	2c00      	cmp	r4, #0
   14526:	f040 8372 	bne.w	14c0e <isr_rx_conn+0x772>
   1452a:	b147      	cbz	r7, 1453e <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1452c:	7a2b      	ldrb	r3, [r5, #8]
   1452e:	f013 0f10 	tst.w	r3, #16
   14532:	d104      	bne.n	1453e <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   14534:	9b03      	ldr	r3, [sp, #12]
   14536:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14538:	2b00      	cmp	r3, #0
   1453a:	f000 83aa 	beq.w	14c92 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1453e:	4b9c      	ldr	r3, [pc, #624]	; (147b0 <isr_rx_conn+0x314>)
   14540:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14544:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   14548:	2b00      	cmp	r3, #0
   1454a:	f000 83a4 	beq.w	14c96 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   1454e:	2303      	movs	r3, #3
   14550:	e35e      	b.n	14c10 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   14552:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14556:	7a2a      	ldrb	r2, [r5, #8]
   14558:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1455c:	4b94      	ldr	r3, [pc, #592]	; (147b0 <isr_rx_conn+0x314>)
   1455e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14562:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14566:	f003 0301 	and.w	r3, r3, #1
   1456a:	429a      	cmp	r2, r3
   1456c:	f000 81cd 	beq.w	1490a <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   14570:	f083 0301 	eor.w	r3, r3, #1
   14574:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14578:	f363 0200 	bfi	r2, r3, #0, #1
   1457c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14580:	4b8b      	ldr	r3, [pc, #556]	; (147b0 <isr_rx_conn+0x314>)
   14582:	7bdb      	ldrb	r3, [r3, #15]
   14584:	b2db      	uxtb	r3, r3
   14586:	2b03      	cmp	r3, #3
   14588:	d02c      	beq.n	145e4 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   1458a:	4b89      	ldr	r3, [pc, #548]	; (147b0 <isr_rx_conn+0x314>)
   1458c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14590:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14594:	f012 0f80 	tst.w	r2, #128	; 0x80
   14598:	f040 81ae 	bne.w	148f8 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   1459c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   145a0:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   145a4:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   145a8:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   145ac:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   145b0:	2c00      	cmp	r4, #0
   145b2:	f000 8145 	beq.w	14840 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   145b6:	f012 0f20 	tst.w	r2, #32
   145ba:	d00a      	beq.n	145d2 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   145bc:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   145c0:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   145c4:	3001      	adds	r0, #1
   145c6:	f141 0100 	adc.w	r1, r1, #0
   145ca:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   145ce:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   145d2:	f81c 300e 	ldrb.w	r3, [ip, lr]
   145d6:	f003 0303 	and.w	r3, r3, #3
   145da:	2b03      	cmp	r3, #3
   145dc:	d00c      	beq.n	145f8 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   145de:	f04f 0900 	mov.w	r9, #0
   145e2:	e12e      	b.n	14842 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   145e4:	4b72      	ldr	r3, [pc, #456]	; (147b0 <isr_rx_conn+0x314>)
   145e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   145ea:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   145ee:	f043 0301 	orr.w	r3, r3, #1
   145f2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   145f6:	e7c8      	b.n	1458a <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   145f8:	f899 3003 	ldrb.w	r3, [r9, #3]
   145fc:	3b02      	subs	r3, #2
   145fe:	2b16      	cmp	r3, #22
   14600:	f200 8118 	bhi.w	14834 <isr_rx_conn+0x398>
   14604:	e8df f013 	tbh	[pc, r3, lsl #1]
   14608:	00330017 	.word	0x00330017
   1460c:	01160057 	.word	0x01160057
   14610:	01160116 	.word	0x01160116
   14614:	01160116 	.word	0x01160116
   14618:	007d0063 	.word	0x007d0063
   1461c:	00970116 	.word	0x00970116
   14620:	01160116 	.word	0x01160116
   14624:	01160116 	.word	0x01160116
   14628:	01160116 	.word	0x01160116
   1462c:	011600af 	.word	0x011600af
   14630:	00e000d6 	.word	0x00e000d6
   14634:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   14636:	2203      	movs	r2, #3
   14638:	4b5d      	ldr	r3, [pc, #372]	; (147b0 <isr_rx_conn+0x314>)
   1463a:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1463c:	f7fa fff4 	bl	f628 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14640:	f7fb f80c 	bl	f65c <radio_is_ready>
   14644:	b958      	cbnz	r0, 1465e <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14646:	4b5a      	ldr	r3, [pc, #360]	; (147b0 <isr_rx_conn+0x314>)
   14648:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   1464c:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14650:	2913      	cmp	r1, #19
   14652:	d00a      	beq.n	1466a <isr_rx_conn+0x1ce>
   14654:	f7ff fe8e 	bl	14374 <terminate_ind_rx_enqueue>
		terminate = 1;
   14658:	f04f 0901 	mov.w	r9, #1
   1465c:	e0f1      	b.n	14842 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   1465e:	4040      	eors	r0, r0
   14660:	f380 8811 	msr	BASEPRI, r0
   14664:	f04f 0004 	mov.w	r0, #4
   14668:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1466a:	2116      	movs	r1, #22
   1466c:	e7f2      	b.n	14654 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   1466e:	f8df a140 	ldr.w	sl, [pc, #320]	; 147b0 <isr_rx_conn+0x314>
   14672:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14676:	2208      	movs	r2, #8
   14678:	f109 010e 	add.w	r1, r9, #14
   1467c:	3093      	adds	r0, #147	; 0x93
   1467e:	f7eb fe1f 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14682:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14686:	2204      	movs	r2, #4
   14688:	f109 0116 	add.w	r1, r9, #22
   1468c:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14690:	f7eb fe16 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14694:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   14698:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1469c:	f043 0308 	orr.w	r3, r3, #8
   146a0:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   146a4:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   146a8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   146ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   146b0:	f04f 0900 	mov.w	r9, #0
   146b4:	e0c5      	b.n	14842 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   146b6:	4b3e      	ldr	r3, [pc, #248]	; (147b0 <isr_rx_conn+0x314>)
   146b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146bc:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   146c0:	f043 0308 	orr.w	r3, r3, #8
   146c4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   146c8:	f04f 0900 	mov.w	r9, #0
   146cc:	e0b9      	b.n	14842 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   146ce:	4b38      	ldr	r3, [pc, #224]	; (147b0 <isr_rx_conn+0x314>)
   146d0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   146d4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   146d8:	f042 0208 	orr.w	r2, r2, #8
   146dc:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   146e0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   146e4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   146e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   146ec:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   146f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   146f4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   146f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   146fc:	f04f 0900 	mov.w	r9, #0
   14700:	e09f      	b.n	14842 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   14702:	4b2b      	ldr	r3, [pc, #172]	; (147b0 <isr_rx_conn+0x314>)
   14704:	7bdb      	ldrb	r3, [r3, #15]
   14706:	b2db      	uxtb	r3, r3
   14708:	2b04      	cmp	r3, #4
   1470a:	d00b      	beq.n	14724 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   1470c:	4b28      	ldr	r3, [pc, #160]	; (147b0 <isr_rx_conn+0x314>)
   1470e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14712:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14716:	f043 0308 	orr.w	r3, r3, #8
   1471a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   1471e:	f04f 0900 	mov.w	r9, #0
   14722:	e08e      	b.n	14842 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   14724:	4631      	mov	r1, r6
   14726:	4b22      	ldr	r3, [pc, #136]	; (147b0 <isr_rx_conn+0x314>)
   14728:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1472c:	f7fe fd38 	bl	131a0 <enc_req_reused_send>
			*node_tx = NULL;
   14730:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14732:	46b1      	mov	r9, r6
   14734:	e085      	b.n	14842 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   14736:	4b1e      	ldr	r3, [pc, #120]	; (147b0 <isr_rx_conn+0x314>)
   14738:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1473c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14740:	f36f 0182 	bfc	r1, #2, #1
   14744:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14748:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1474c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14750:	f36f 01c3 	bfc	r1, #3, #1
   14754:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14758:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1475c:	f04f 0900 	mov.w	r9, #0
   14760:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   14764:	e06d      	b.n	14842 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   14766:	4b12      	ldr	r3, [pc, #72]	; (147b0 <isr_rx_conn+0x314>)
   14768:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1476c:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   14770:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   14774:	4291      	cmp	r1, r2
   14776:	d060      	beq.n	1483a <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   14778:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1477c:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   14780:	2a01      	cmp	r2, #1
   14782:	d002      	beq.n	1478a <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   14784:	f04f 0900 	mov.w	r9, #0
   14788:	e05b      	b.n	14842 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   1478a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1478e:	f042 0208 	orr.w	r2, r2, #8
   14792:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   14796:	4b06      	ldr	r3, [pc, #24]	; (147b0 <isr_rx_conn+0x314>)
   14798:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1479c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   147a0:	2102      	movs	r1, #2
   147a2:	f361 0201 	bfi	r2, r1, #0, #2
   147a6:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   147aa:	f04f 0900 	mov.w	r9, #0
   147ae:	e048      	b.n	14842 <isr_rx_conn+0x3a6>
   147b0:	20000ef4 	.word	0x20000ef4
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   147b4:	4bbe      	ldr	r3, [pc, #760]	; (14ab0 <isr_rx_conn+0x614>)
   147b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   147ba:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   147be:	2102      	movs	r1, #2
   147c0:	f361 0201 	bfi	r2, r1, #0, #2
   147c4:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   147c8:	4bb9      	ldr	r3, [pc, #740]	; (14ab0 <isr_rx_conn+0x614>)
   147ca:	7bdb      	ldrb	r3, [r3, #15]
   147cc:	b2db      	uxtb	r3, r3
   147ce:	2b03      	cmp	r3, #3
   147d0:	d002      	beq.n	147d8 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   147d2:	f04f 0900 	mov.w	r9, #0
   147d6:	e034      	b.n	14842 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   147d8:	4ab6      	ldr	r2, [pc, #728]	; (14ab4 <isr_rx_conn+0x618>)
   147da:	e892 0003 	ldmia.w	r2, {r0, r1}
   147de:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   147e2:	4bb3      	ldr	r3, [pc, #716]	; (14ab0 <isr_rx_conn+0x614>)
   147e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   147e8:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   147ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
   147f0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   147f4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   147f8:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   147fa:	a904      	add	r1, sp, #16
   147fc:	440b      	add	r3, r1
   147fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   14802:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   14806:	f361 0302 	bfi	r3, r1, #0, #3
   1480a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   1480e:	f04f 0900 	mov.w	r9, #0
   14812:	e016      	b.n	14842 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   14814:	4ba6      	ldr	r3, [pc, #664]	; (14ab0 <isr_rx_conn+0x614>)
   14816:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   1481a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1481e:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   14822:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   14826:	f362 0102 	bfi	r1, r2, #0, #3
   1482a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   1482e:	f04f 0900 	mov.w	r9, #0
   14832:	e006      	b.n	14842 <isr_rx_conn+0x3a6>
   14834:	f04f 0900 	mov.w	r9, #0
   14838:	e003      	b.n	14842 <isr_rx_conn+0x3a6>
   1483a:	f04f 0900 	mov.w	r9, #0
   1483e:	e000      	b.n	14842 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   14840:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14842:	4b9b      	ldr	r3, [pc, #620]	; (14ab0 <isr_rx_conn+0x614>)
   14844:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14848:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   1484c:	4414      	add	r4, r2
   1484e:	b2e4      	uxtb	r4, r4
   14850:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   14854:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   14858:	429c      	cmp	r4, r3
   1485a:	d01c      	beq.n	14896 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   1485c:	2600      	movs	r6, #0
	if (terminate) {
   1485e:	f1b9 0f00 	cmp.w	r9, #0
   14862:	d155      	bne.n	14910 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14864:	7a2a      	ldrb	r2, [r5, #8]
   14866:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1486a:	4b91      	ldr	r3, [pc, #580]	; (14ab0 <isr_rx_conn+0x614>)
   1486c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14870:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14874:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14878:	429a      	cmp	r2, r3
   1487a:	d053      	beq.n	14924 <isr_rx_conn+0x488>
	return 0;
   1487c:	2300      	movs	r3, #0
		if (terminate) {
   1487e:	2b00      	cmp	r3, #0
   14880:	f040 81f5 	bne.w	14c6e <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   14884:	4b8a      	ldr	r3, [pc, #552]	; (14ab0 <isr_rx_conn+0x614>)
   14886:	2400      	movs	r4, #0
   14888:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   1488c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14890:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   14894:	e636      	b.n	14504 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   14896:	4b86      	ldr	r3, [pc, #536]	; (14ab0 <isr_rx_conn+0x614>)
   14898:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   1489c:	2200      	movs	r2, #0
   1489e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   148a2:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   148a6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   148aa:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   148ae:	428a      	cmp	r2, r1
   148b0:	d007      	beq.n	148c2 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   148b2:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   148b6:	428a      	cmp	r2, r1
   148b8:	d01a      	beq.n	148f0 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   148ba:	6812      	ldr	r2, [r2, #0]
   148bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   148c0:	e7cd      	b.n	1485e <isr_rx_conn+0x3c2>
		if (node_tx) {
   148c2:	2e00      	cmp	r6, #0
   148c4:	d0cb      	beq.n	1485e <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   148c6:	6812      	ldr	r2, [r2, #0]
   148c8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   148cc:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   148d0:	4281      	cmp	r1, r0
   148d2:	d007      	beq.n	148e4 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   148d4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   148d8:	4977      	ldr	r1, [pc, #476]	; (14ab8 <isr_rx_conn+0x61c>)
   148da:	4630      	mov	r0, r6
   148dc:	f7fa fcab 	bl	f236 <mem_release>
	return NULL;
   148e0:	2600      	movs	r6, #0
   148e2:	e7bc      	b.n	1485e <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   148e4:	2200      	movs	r2, #0
   148e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   148ea:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   148ee:	e7f3      	b.n	148d8 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   148f0:	6809      	ldr	r1, [r1, #0]
   148f2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   148f6:	e7e0      	b.n	148ba <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   148f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   148fc:	f36f 12c7 	bfc	r2, #7, #1
   14900:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   14904:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14906:	46b1      	mov	r9, r6
   14908:	e7a9      	b.n	1485e <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   1490a:	2600      	movs	r6, #0
	u8_t terminate = 0;
   1490c:	46b1      	mov	r9, r6
   1490e:	e7a6      	b.n	1485e <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   14910:	4c67      	ldr	r4, [pc, #412]	; (14ab0 <isr_rx_conn+0x614>)
   14912:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14916:	f7fd fdd9 	bl	124cc <connection_release>
		_radio.conn_curr = NULL;
   1491a:	2300      	movs	r3, #0
   1491c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   14920:	464b      	mov	r3, r9
   14922:	e7ac      	b.n	1487e <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   14924:	4a62      	ldr	r2, [pc, #392]	; (14ab0 <isr_rx_conn+0x614>)
   14926:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1492a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   1492e:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   14930:	4290      	cmp	r0, r2
   14932:	d347      	bcc.n	149c4 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   14934:	4b5e      	ldr	r3, [pc, #376]	; (14ab0 <isr_rx_conn+0x614>)
   14936:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1493a:	1ac3      	subs	r3, r0, r3
   1493c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1493e:	2b02      	cmp	r3, #2
   14940:	d94a      	bls.n	149d8 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   14942:	4b5b      	ldr	r3, [pc, #364]	; (14ab0 <isr_rx_conn+0x614>)
   14944:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14948:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14950:	2b00      	cmp	r3, #0
   14952:	f000 814e 	beq.w	14bf2 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   14956:	4b56      	ldr	r3, [pc, #344]	; (14ab0 <isr_rx_conn+0x614>)
   14958:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   1495c:	2b00      	cmp	r3, #0
   1495e:	d045      	beq.n	149ec <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14960:	4b53      	ldr	r3, [pc, #332]	; (14ab0 <isr_rx_conn+0x614>)
   14962:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   14966:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   1496a:	429a      	cmp	r2, r3
   1496c:	d036      	beq.n	149dc <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1496e:	4b50      	ldr	r3, [pc, #320]	; (14ab0 <isr_rx_conn+0x614>)
   14970:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   14974:	429a      	cmp	r2, r3
   14976:	f000 813e 	beq.w	14bf6 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   1497a:	4a4d      	ldr	r2, [pc, #308]	; (14ab0 <isr_rx_conn+0x614>)
   1497c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14980:	b2db      	uxtb	r3, r3
   14982:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14986:	4293      	cmp	r3, r2
   14988:	f000 8137 	beq.w	14bfa <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   1498c:	4b48      	ldr	r3, [pc, #288]	; (14ab0 <isr_rx_conn+0x614>)
   1498e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   14992:	b92b      	cbnz	r3, 149a0 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   14994:	4b46      	ldr	r3, [pc, #280]	; (14ab0 <isr_rx_conn+0x614>)
   14996:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   1499a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   1499c:	429a      	cmp	r2, r3
   1499e:	d025      	beq.n	149ec <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   149a0:	4b43      	ldr	r3, [pc, #268]	; (14ab0 <isr_rx_conn+0x614>)
   149a2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   149a6:	2b00      	cmp	r3, #0
   149a8:	f000 8129 	beq.w	14bfe <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   149ac:	4b40      	ldr	r3, [pc, #256]	; (14ab0 <isr_rx_conn+0x614>)
   149ae:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   149b2:	32b7      	adds	r2, #183	; 0xb7
   149b4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   149b8:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   149ba:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   149bc:	429a      	cmp	r2, r3
   149be:	d015      	beq.n	149ec <isr_rx_conn+0x550>
	return 0;
   149c0:	2300      	movs	r3, #0
   149c2:	e75c      	b.n	1487e <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   149c4:	4a3a      	ldr	r2, [pc, #232]	; (14ab0 <isr_rx_conn+0x614>)
   149c6:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   149ca:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   149ce:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   149d0:	fa50 f383 	uxtab	r3, r0, r3
   149d4:	b2db      	uxtb	r3, r3
   149d6:	e7b2      	b.n	1493e <isr_rx_conn+0x4a2>
		return 0;
   149d8:	2300      	movs	r3, #0
   149da:	e7b9      	b.n	14950 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   149dc:	4834      	ldr	r0, [pc, #208]	; (14ab0 <isr_rx_conn+0x614>)
   149de:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   149e2:	b2db      	uxtb	r3, r3
   149e4:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   149e8:	4283      	cmp	r3, r0
   149ea:	d1c0      	bne.n	1496e <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   149ec:	7a68      	ldrb	r0, [r5, #9]
   149ee:	2800      	cmp	r0, #0
   149f0:	f000 80b8 	beq.w	14b64 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   149f4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   149f8:	f013 0f10 	tst.w	r3, #16
   149fc:	d133      	bne.n	14a66 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   149fe:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   14a00:	4b2b      	ldr	r3, [pc, #172]	; (14ab0 <isr_rx_conn+0x614>)
   14a02:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a06:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14a0a:	f013 0f10 	tst.w	r3, #16
   14a0e:	d135      	bne.n	14a7c <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   14a10:	4b27      	ldr	r3, [pc, #156]	; (14ab0 <isr_rx_conn+0x614>)
   14a12:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a16:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14a1a:	f012 0f04 	tst.w	r2, #4
   14a1e:	f000 8082 	beq.w	14b26 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   14a22:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14a26:	7a2a      	ldrb	r2, [r5, #8]
   14a28:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14a2c:	2a03      	cmp	r2, #3
   14a2e:	d02a      	beq.n	14a86 <isr_rx_conn+0x5ea>
   14a30:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   14a32:	2a00      	cmp	r2, #0
   14a34:	d077      	beq.n	14b26 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   14a36:	2203      	movs	r2, #3
   14a38:	4b1d      	ldr	r3, [pc, #116]	; (14ab0 <isr_rx_conn+0x614>)
   14a3a:	741a      	strb	r2, [r3, #16]
				radio_disable();
   14a3c:	f7fa fdf4 	bl	f628 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14a40:	f7fa fe0c 	bl	f65c <radio_is_ready>
   14a44:	2800      	cmp	r0, #0
   14a46:	d168      	bne.n	14b1a <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14a48:	4c19      	ldr	r4, [pc, #100]	; (14ab0 <isr_rx_conn+0x614>)
   14a4a:	213d      	movs	r1, #61	; 0x3d
   14a4c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a50:	f7ff fc90 	bl	14374 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14a54:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a58:	f7fd fd38 	bl	124cc <connection_release>
				_radio.conn_curr = NULL;
   14a5c:	2300      	movs	r3, #0
   14a5e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   14a62:	2301      	movs	r3, #1
   14a64:	e70b      	b.n	1487e <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   14a66:	f7fb f821 	bl	faac <radio_ccm_is_done>
				LL_ASSERT(done);
   14a6a:	b108      	cbz	r0, 14a70 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14a6c:	2401      	movs	r4, #1
   14a6e:	e7c7      	b.n	14a00 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14a70:	4040      	eors	r0, r0
   14a72:	f380 8811 	msr	BASEPRI, r0
   14a76:	f04f 0004 	mov.w	r0, #4
   14a7a:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14a7c:	f7fb f836 	bl	faec <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14a80:	2800      	cmp	r0, #0
   14a82:	d0d8      	beq.n	14a36 <isr_rx_conn+0x59a>
   14a84:	e7c4      	b.n	14a10 <isr_rx_conn+0x574>
   14a86:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14a8a:	2a00      	cmp	r2, #0
   14a8c:	db1d      	blt.n	14aca <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14a8e:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14a92:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14a96:	d111      	bne.n	14abc <isr_rx_conn+0x620>
		((!conn->refresh &&
   14a98:	2902      	cmp	r1, #2
   14a9a:	d00f      	beq.n	14abc <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14a9c:	2905      	cmp	r1, #5
   14a9e:	d014      	beq.n	14aca <isr_rx_conn+0x62e>
   14aa0:	2906      	cmp	r1, #6
   14aa2:	d012      	beq.n	14aca <isr_rx_conn+0x62e>
   14aa4:	290d      	cmp	r1, #13
   14aa6:	d010      	beq.n	14aca <isr_rx_conn+0x62e>
   14aa8:	2911      	cmp	r1, #17
   14aaa:	d00e      	beq.n	14aca <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14aac:	2201      	movs	r2, #1
   14aae:	e7c0      	b.n	14a32 <isr_rx_conn+0x596>
   14ab0:	20000ef4 	.word	0x20000ef4
   14ab4:	0002e590 	.word	0x0002e590
   14ab8:	2000104c 	.word	0x2000104c
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14abc:	b128      	cbz	r0, 14aca <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14abe:	2902      	cmp	r1, #2
   14ac0:	d003      	beq.n	14aca <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14ac2:	290b      	cmp	r1, #11
   14ac4:	d001      	beq.n	14aca <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14ac6:	2904      	cmp	r1, #4
   14ac8:	d1e8      	bne.n	14a9c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14aca:	2a00      	cmp	r2, #0
   14acc:	db01      	blt.n	14ad2 <isr_rx_conn+0x636>
   14ace:	2200      	movs	r2, #0
   14ad0:	e7af      	b.n	14a32 <isr_rx_conn+0x596>
		((!conn->refresh &&
   14ad2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14ad6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14ada:	d109      	bne.n	14af0 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14adc:	2902      	cmp	r1, #2
   14ade:	d007      	beq.n	14af0 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14ae0:	2906      	cmp	r1, #6
   14ae2:	d014      	beq.n	14b0e <isr_rx_conn+0x672>
   14ae4:	290d      	cmp	r1, #13
   14ae6:	d014      	beq.n	14b12 <isr_rx_conn+0x676>
   14ae8:	2911      	cmp	r1, #17
   14aea:	d114      	bne.n	14b16 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14aec:	2200      	movs	r2, #0
   14aee:	e7a0      	b.n	14a32 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14af0:	b13a      	cbz	r2, 14b02 <isr_rx_conn+0x666>
		 (conn->refresh &&
   14af2:	2902      	cmp	r1, #2
   14af4:	d007      	beq.n	14b06 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14af6:	290b      	cmp	r1, #11
   14af8:	d007      	beq.n	14b0a <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14afa:	2903      	cmp	r1, #3
   14afc:	d1f0      	bne.n	14ae0 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14afe:	2200      	movs	r2, #0
   14b00:	e797      	b.n	14a32 <isr_rx_conn+0x596>
   14b02:	2200      	movs	r2, #0
   14b04:	e795      	b.n	14a32 <isr_rx_conn+0x596>
   14b06:	2200      	movs	r2, #0
   14b08:	e793      	b.n	14a32 <isr_rx_conn+0x596>
   14b0a:	2200      	movs	r2, #0
   14b0c:	e791      	b.n	14a32 <isr_rx_conn+0x596>
   14b0e:	2200      	movs	r2, #0
   14b10:	e78f      	b.n	14a32 <isr_rx_conn+0x596>
   14b12:	2200      	movs	r2, #0
   14b14:	e78d      	b.n	14a32 <isr_rx_conn+0x596>
   14b16:	2201      	movs	r2, #1
   14b18:	e78b      	b.n	14a32 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14b1a:	4040      	eors	r0, r0
   14b1c:	f380 8811 	msr	BASEPRI, r0
   14b20:	f04f 0004 	mov.w	r0, #4
   14b24:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14b26:	2200      	movs	r2, #0
   14b28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14b2c:	4b70      	ldr	r3, [pc, #448]	; (14cf0 <isr_rx_conn+0x854>)
   14b2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14b32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14b36:	7a2b      	ldrb	r3, [r5, #8]
   14b38:	f013 0303 	ands.w	r3, r3, #3
   14b3c:	d00c      	beq.n	14b58 <isr_rx_conn+0x6bc>
   14b3e:	2b02      	cmp	r3, #2
   14b40:	d905      	bls.n	14b4e <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   14b42:	f10d 010b 	add.w	r1, sp, #11
   14b46:	4628      	mov	r0, r5
   14b48:	f7fe fb4c 	bl	131e4 <isr_rx_conn_pkt_ctrl>
   14b4c:	e030      	b.n	14bb0 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14b4e:	2301      	movs	r3, #1
   14b50:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   14b54:	4648      	mov	r0, r9
   14b56:	e02b      	b.n	14bb0 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14b58:	4040      	eors	r0, r0
   14b5a:	f380 8811 	msr	BASEPRI, r0
   14b5e:	f04f 0004 	mov.w	r0, #4
   14b62:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   14b64:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14b68:	f013 0f14 	tst.w	r3, #20
   14b6c:	d01f      	beq.n	14bae <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14b6e:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   14b72:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   14b74:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   14b76:	42a2      	cmp	r2, r4
   14b78:	dd04      	ble.n	14b84 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14b7a:	1ad3      	subs	r3, r2, r3
   14b7c:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14b7e:	3b06      	subs	r3, #6
   14b80:	b29b      	uxth	r3, r3
   14b82:	e000      	b.n	14b86 <isr_rx_conn+0x6ea>
   14b84:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14b86:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14b8a:	429c      	cmp	r4, r3
   14b8c:	d004      	beq.n	14b98 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14b8e:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14b92:	2300      	movs	r3, #0
   14b94:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14b98:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14b9c:	bb3b      	cbnz	r3, 14bee <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14b9e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14ba2:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14ba6:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14baa:	4604      	mov	r4, r0
   14bac:	e000      	b.n	14bb0 <isr_rx_conn+0x714>
   14bae:	4604      	mov	r4, r0
		if (!nack) {
   14bb0:	bb38      	cbnz	r0, 14c02 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14bb2:	4b4f      	ldr	r3, [pc, #316]	; (14cf0 <isr_rx_conn+0x854>)
   14bb4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14bb8:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14bbc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14bc0:	f082 0201 	eor.w	r2, r2, #1
   14bc4:	f362 0341 	bfi	r3, r2, #1, #1
   14bc8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14bcc:	b1dc      	cbz	r4, 14c06 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14bce:	4b48      	ldr	r3, [pc, #288]	; (14cf0 <isr_rx_conn+0x854>)
   14bd0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14bd4:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14bd8:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14bdc:	3201      	adds	r2, #1
   14bde:	f143 0300 	adc.w	r3, r3, #0
   14be2:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14be6:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14bea:	2300      	movs	r3, #0
   14bec:	e647      	b.n	1487e <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14bee:	4604      	mov	r4, r0
   14bf0:	e7de      	b.n	14bb0 <isr_rx_conn+0x714>
	return 0;
   14bf2:	2300      	movs	r3, #0
   14bf4:	e643      	b.n	1487e <isr_rx_conn+0x3e2>
   14bf6:	2300      	movs	r3, #0
   14bf8:	e641      	b.n	1487e <isr_rx_conn+0x3e2>
   14bfa:	2300      	movs	r3, #0
   14bfc:	e63f      	b.n	1487e <isr_rx_conn+0x3e2>
   14bfe:	2300      	movs	r3, #0
   14c00:	e63d      	b.n	1487e <isr_rx_conn+0x3e2>
   14c02:	2300      	movs	r3, #0
   14c04:	e63b      	b.n	1487e <isr_rx_conn+0x3e2>
   14c06:	2300      	movs	r3, #0
   14c08:	e639      	b.n	1487e <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14c0a:	2600      	movs	r6, #0
   14c0c:	e47a      	b.n	14504 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14c0e:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14c10:	4a37      	ldr	r2, [pc, #220]	; (14cf0 <isr_rx_conn+0x854>)
   14c12:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14c14:	2b03      	cmp	r3, #3
   14c16:	d040      	beq.n	14c9a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14c18:	2096      	movs	r0, #150	; 0x96
   14c1a:	f7fa fe0d 	bl	f838 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14c1e:	4b34      	ldr	r3, [pc, #208]	; (14cf0 <isr_rx_conn+0x854>)
   14c20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c24:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14c28:	f000 0007 	and.w	r0, r0, #7
   14c2c:	f7fa fd52 	bl	f6d4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14c30:	f7fa feba 	bl	f9a8 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   14c34:	9a03      	ldr	r2, [sp, #12]
   14c36:	4b2e      	ldr	r3, [pc, #184]	; (14cf0 <isr_rx_conn+0x854>)
   14c38:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14c3c:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14c40:	7811      	ldrb	r1, [r2, #0]
   14c42:	f360 01c3 	bfi	r1, r0, #3, #1
   14c46:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14c48:	9903      	ldr	r1, [sp, #12]
   14c4a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14c4e:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   14c52:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14c56:	7808      	ldrb	r0, [r1, #0]
   14c58:	f362 0082 	bfi	r0, r2, #2, #1
   14c5c:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14c5e:	9903      	ldr	r1, [sp, #12]
   14c60:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14c64:	f7fd fdde 	bl	12824 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14c68:	f7fa fcf8 	bl	f65c <radio_is_ready>
   14c6c:	bb38      	cbnz	r0, 14cbe <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14c6e:	f7fa fe8f 	bl	f990 <radio_tmr_aa_restore>
   14c72:	b350      	cbz	r0, 14cca <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   14c74:	4b1e      	ldr	r3, [pc, #120]	; (14cf0 <isr_rx_conn+0x854>)
   14c76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c7a:	b13b      	cbz	r3, 14c8c <isr_rx_conn+0x7f0>
	if (tx_release) {
   14c7c:	b11e      	cbz	r6, 14c86 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14c7e:	4631      	mov	r1, r6
   14c80:	8c18      	ldrh	r0, [r3, #32]
   14c82:	f7fd fb9f 	bl	123c4 <pdu_node_tx_release>
	if (rx_enqueue) {
   14c86:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c8a:	bb1b      	cbnz	r3, 14cd4 <isr_rx_conn+0x838>
}
   14c8c:	b004      	add	sp, #16
   14c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14c92:	2303      	movs	r3, #3
   14c94:	e7bc      	b.n	14c10 <isr_rx_conn+0x774>
   14c96:	2302      	movs	r3, #2
   14c98:	e7ba      	b.n	14c10 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14c9a:	7bd3      	ldrb	r3, [r2, #15]
   14c9c:	b2db      	uxtb	r3, r3
   14c9e:	2b04      	cmp	r3, #4
   14ca0:	d002      	beq.n	14ca8 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14ca2:	f7fa fd27 	bl	f6f4 <radio_switch_complete_and_disable>
   14ca6:	e7c5      	b.n	14c34 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14ca8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14cac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14cb0:	f368 12c7 	bfi	r2, r8, #7, #1
   14cb4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14cb8:	f7fa fcb6 	bl	f628 <radio_disable>
			goto isr_rx_conn_exit;
   14cbc:	e7d7      	b.n	14c6e <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14cbe:	4040      	eors	r0, r0
   14cc0:	f380 8811 	msr	BASEPRI, r0
   14cc4:	f04f 0004 	mov.w	r0, #4
   14cc8:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14cca:	f7fa fe55 	bl	f978 <radio_tmr_aa_get>
   14cce:	f7fa fe59 	bl	f984 <radio_tmr_aa_save>
   14cd2:	e7cf      	b.n	14c74 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14cd4:	4c06      	ldr	r4, [pc, #24]	; (14cf0 <isr_rx_conn+0x854>)
   14cd6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14cda:	8c18      	ldrh	r0, [r3, #32]
   14cdc:	f7fc fdec 	bl	118b8 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14ce0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14ce4:	8c1b      	ldrh	r3, [r3, #32]
   14ce6:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14ce8:	f7ff fad0 	bl	1428c <packet_rx_enqueue>
	return;
   14cec:	e7ce      	b.n	14c8c <isr_rx_conn+0x7f0>
   14cee:	bf00      	nop
   14cf0:	20000ef4 	.word	0x20000ef4

00014cf4 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14cf4:	6803      	ldr	r3, [r0, #0]
   14cf6:	2b00      	cmp	r3, #0
   14cf8:	db00      	blt.n	14cfc <prepare_normal_set+0x8>
   14cfa:	4770      	bx	lr
{
   14cfc:	b530      	push	{r4, r5, lr}
   14cfe:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14d00:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14d02:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14d08:	42a5      	cmp	r5, r4
   14d0a:	bf2c      	ite	cs
   14d0c:	1b5b      	subcs	r3, r3, r5
   14d0e:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14d10:	b29b      	uxth	r3, r3
		ticker_status =
   14d12:	9006      	str	r0, [sp, #24]
   14d14:	480a      	ldr	r0, [pc, #40]	; (14d40 <prepare_normal_set+0x4c>)
   14d16:	9005      	str	r0, [sp, #20]
   14d18:	2000      	movs	r0, #0
   14d1a:	9004      	str	r0, [sp, #16]
   14d1c:	9003      	str	r0, [sp, #12]
   14d1e:	9002      	str	r0, [sp, #8]
   14d20:	9301      	str	r3, [sp, #4]
   14d22:	9300      	str	r3, [sp, #0]
   14d24:	4603      	mov	r3, r0
   14d26:	f7fb ff89 	bl	10c3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d2a:	b108      	cbz	r0, 14d30 <prepare_normal_set+0x3c>
   14d2c:	2802      	cmp	r0, #2
   14d2e:	d101      	bne.n	14d34 <prepare_normal_set+0x40>
}
   14d30:	b009      	add	sp, #36	; 0x24
   14d32:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d34:	4040      	eors	r0, r0
   14d36:	f380 8811 	msr	BASEPRI, r0
   14d3a:	f04f 0004 	mov.w	r0, #4
   14d3e:	df02      	svc	2
   14d40:	000115bd 	.word	0x000115bd

00014d44 <event_common_prepare>:
{
   14d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d48:	b08a      	sub	sp, #40	; 0x28
   14d4a:	4681      	mov	r9, r0
   14d4c:	468a      	mov	sl, r1
   14d4e:	4616      	mov	r6, r2
   14d50:	461f      	mov	r7, r3
   14d52:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14d56:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14d58:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14d5c:	2c00      	cmp	r4, #0
   14d5e:	db25      	blt.n	14dac <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14d60:	4544      	cmp	r4, r8
   14d62:	d828      	bhi.n	14db6 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14d64:	4544      	cmp	r4, r8
   14d66:	d251      	bcs.n	14e0c <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14d68:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14d6c:	2300      	movs	r3, #0
   14d6e:	461a      	mov	r2, r3
   14d70:	4619      	mov	r1, r3
   14d72:	4618      	mov	r0, r3
   14d74:	f7fd fa3a 	bl	121ec <event_active>
		ticker_status =
   14d78:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14d7c:	9308      	str	r3, [sp, #32]
   14d7e:	4b5e      	ldr	r3, [pc, #376]	; (14ef8 <event_common_prepare+0x1b4>)
   14d80:	9307      	str	r3, [sp, #28]
   14d82:	2000      	movs	r0, #0
   14d84:	9006      	str	r0, [sp, #24]
   14d86:	4b5d      	ldr	r3, [pc, #372]	; (14efc <event_common_prepare+0x1b8>)
   14d88:	9305      	str	r3, [sp, #20]
   14d8a:	9004      	str	r0, [sp, #16]
   14d8c:	9003      	str	r0, [sp, #12]
   14d8e:	9002      	str	r0, [sp, #8]
   14d90:	9001      	str	r0, [sp, #4]
   14d92:	9400      	str	r4, [sp, #0]
   14d94:	464b      	mov	r3, r9
   14d96:	2201      	movs	r2, #1
   14d98:	4601      	mov	r1, r0
   14d9a:	f7fb ff01 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d9e:	2800      	cmp	r0, #0
   14da0:	f000 8091 	beq.w	14ec6 <event_common_prepare+0x182>
   14da4:	2802      	cmp	r0, #2
   14da6:	d12b      	bne.n	14e00 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14da8:	4644      	mov	r4, r8
   14daa:	e03b      	b.n	14e24 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14dac:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14dae:	4544      	cmp	r4, r8
   14db0:	bf38      	it	cc
   14db2:	4644      	movcc	r4, r8
   14db4:	e7d4      	b.n	14d60 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14db6:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14dba:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14dbe:	9208      	str	r2, [sp, #32]
   14dc0:	4a4d      	ldr	r2, [pc, #308]	; (14ef8 <event_common_prepare+0x1b4>)
   14dc2:	9207      	str	r2, [sp, #28]
   14dc4:	2000      	movs	r0, #0
   14dc6:	9006      	str	r0, [sp, #24]
   14dc8:	4a4d      	ldr	r2, [pc, #308]	; (14f00 <event_common_prepare+0x1bc>)
   14dca:	9205      	str	r2, [sp, #20]
   14dcc:	9004      	str	r0, [sp, #16]
   14dce:	9003      	str	r0, [sp, #12]
   14dd0:	9002      	str	r0, [sp, #8]
   14dd2:	9001      	str	r0, [sp, #4]
   14dd4:	9300      	str	r3, [sp, #0]
   14dd6:	464b      	mov	r3, r9
   14dd8:	2201      	movs	r2, #1
   14dda:	4601      	mov	r1, r0
   14ddc:	f7fb fee0 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14de0:	b108      	cbz	r0, 14de6 <event_common_prepare+0xa2>
   14de2:	2802      	cmp	r0, #2
   14de4:	d106      	bne.n	14df4 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14de6:	2300      	movs	r3, #0
   14de8:	461a      	mov	r2, r3
   14dea:	4619      	mov	r1, r3
   14dec:	4618      	mov	r0, r3
   14dee:	f7fd fa0f 	bl	12210 <event_xtal>
   14df2:	e017      	b.n	14e24 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14df4:	4040      	eors	r0, r0
   14df6:	f380 8811 	msr	BASEPRI, r0
   14dfa:	f04f 0004 	mov.w	r0, #4
   14dfe:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e00:	4040      	eors	r0, r0
   14e02:	f380 8811 	msr	BASEPRI, r0
   14e06:	f04f 0004 	mov.w	r0, #4
   14e0a:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14e0c:	2300      	movs	r3, #0
   14e0e:	461a      	mov	r2, r3
   14e10:	4619      	mov	r1, r3
   14e12:	4618      	mov	r0, r3
   14e14:	f7fd f9ea 	bl	121ec <event_active>
		event_xtal(0, 0, 0, NULL);
   14e18:	2300      	movs	r3, #0
   14e1a:	461a      	mov	r2, r3
   14e1c:	4619      	mov	r1, r3
   14e1e:	4618      	mov	r0, r3
   14e20:	f7fd f9f6 	bl	12210 <event_xtal>
	_radio.remainder_anchor = remainder;
   14e24:	4b37      	ldr	r3, [pc, #220]	; (14f04 <event_common_prepare+0x1c0>)
   14e26:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   14e2a:	f241 43e9 	movw	r3, #5353	; 0x14e9
   14e2e:	9308      	str	r3, [sp, #32]
   14e30:	4b31      	ldr	r3, [pc, #196]	; (14ef8 <event_common_prepare+0x1b4>)
   14e32:	9307      	str	r3, [sp, #28]
   14e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14e36:	9306      	str	r3, [sp, #24]
   14e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14e3a:	9305      	str	r3, [sp, #20]
   14e3c:	2000      	movs	r0, #0
   14e3e:	9004      	str	r0, [sp, #16]
   14e40:	9003      	str	r0, [sp, #12]
   14e42:	9002      	str	r0, [sp, #8]
   14e44:	9001      	str	r0, [sp, #4]
   14e46:	9400      	str	r4, [sp, #0]
   14e48:	464b      	mov	r3, r9
   14e4a:	4602      	mov	r2, r0
   14e4c:	4601      	mov	r1, r0
   14e4e:	f7fb fea7 	bl	10ba0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e52:	b108      	cbz	r0, 14e58 <event_common_prepare+0x114>
   14e54:	2802      	cmp	r0, #2
   14e56:	d138      	bne.n	14eca <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14e58:	2305      	movs	r3, #5
   14e5a:	2200      	movs	r2, #0
   14e5c:	4611      	mov	r1, r2
   14e5e:	4610      	mov	r0, r2
   14e60:	f7fd f93a 	bl	120d8 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   14e64:	4b27      	ldr	r3, [pc, #156]	; (14f04 <event_common_prepare+0x1c0>)
   14e66:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14e6a:	4598      	cmp	r8, r3
   14e6c:	d01d      	beq.n	14eaa <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14e6e:	6832      	ldr	r2, [r6, #0]
   14e70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   14e74:	429a      	cmp	r2, r3
   14e76:	bf38      	it	cc
   14e78:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14e7a:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14e7c:	6833      	ldr	r3, [r6, #0]
   14e7e:	2b00      	cmp	r3, #0
   14e80:	db29      	blt.n	14ed6 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e82:	b2a3      	uxth	r3, r4
   14e84:	b292      	uxth	r2, r2
		ticker_status =
   14e86:	f241 5116 	movw	r1, #5398	; 0x1516
   14e8a:	9106      	str	r1, [sp, #24]
   14e8c:	491a      	ldr	r1, [pc, #104]	; (14ef8 <event_common_prepare+0x1b4>)
   14e8e:	9105      	str	r1, [sp, #20]
   14e90:	2000      	movs	r0, #0
   14e92:	9004      	str	r0, [sp, #16]
   14e94:	9003      	str	r0, [sp, #12]
   14e96:	9302      	str	r3, [sp, #8]
   14e98:	9201      	str	r2, [sp, #4]
   14e9a:	9200      	str	r2, [sp, #0]
   14e9c:	462a      	mov	r2, r5
   14e9e:	4601      	mov	r1, r0
   14ea0:	f7fb fecc 	bl	10c3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ea4:	b108      	cbz	r0, 14eaa <event_common_prepare+0x166>
   14ea6:	2802      	cmp	r0, #2
   14ea8:	d119      	bne.n	14ede <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   14eaa:	20ff      	movs	r0, #255	; 0xff
   14eac:	f7fd fab6 	bl	1241c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14eb0:	4b15      	ldr	r3, [pc, #84]	; (14f08 <event_common_prepare+0x1c4>)
   14eb2:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14eb4:	2201      	movs	r2, #1
   14eb6:	4611      	mov	r1, r2
   14eb8:	2000      	movs	r0, #0
   14eba:	f7fa f85f 	bl	ef7c <mayfly_enqueue>
		LL_ASSERT(!retval);
   14ebe:	b9a0      	cbnz	r0, 14eea <event_common_prepare+0x1a6>
}
   14ec0:	b00a      	add	sp, #40	; 0x28
   14ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   14ec6:	4644      	mov	r4, r8
   14ec8:	e7ac      	b.n	14e24 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14eca:	4040      	eors	r0, r0
   14ecc:	f380 8811 	msr	BASEPRI, r0
   14ed0:	f04f 0004 	mov.w	r0, #4
   14ed4:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   14ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14eda:	6033      	str	r3, [r6, #0]
   14edc:	e7d1      	b.n	14e82 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ede:	4040      	eors	r0, r0
   14ee0:	f380 8811 	msr	BASEPRI, r0
   14ee4:	f04f 0004 	mov.w	r0, #4
   14ee8:	df02      	svc	2
		LL_ASSERT(!retval);
   14eea:	4040      	eors	r0, r0
   14eec:	f380 8811 	msr	BASEPRI, r0
   14ef0:	f04f 0004 	mov.w	r0, #4
   14ef4:	df02      	svc	2
   14ef6:	bf00      	nop
   14ef8:	000118f5 	.word	0x000118f5
   14efc:	00012211 	.word	0x00012211
   14f00:	000121ed 	.word	0x000121ed
   14f04:	20000ef4 	.word	0x20000ef4
   14f08:	2000bd28 	.word	0x2000bd28

00014f0c <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   14f0c:	4b0d      	ldr	r3, [pc, #52]	; (14f44 <radio_event_adv_prepare+0x38>)
   14f0e:	7b1b      	ldrb	r3, [r3, #12]
   14f10:	b993      	cbnz	r3, 14f38 <radio_event_adv_prepare+0x2c>
{
   14f12:	b510      	push	{r4, lr}
   14f14:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   14f16:	4a0b      	ldr	r2, [pc, #44]	; (14f44 <radio_event_adv_prepare+0x38>)
   14f18:	2305      	movs	r3, #5
   14f1a:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   14f1c:	2400      	movs	r4, #0
   14f1e:	9403      	str	r4, [sp, #12]
   14f20:	4c09      	ldr	r4, [pc, #36]	; (14f48 <radio_event_adv_prepare+0x3c>)
   14f22:	9402      	str	r4, [sp, #8]
   14f24:	9301      	str	r3, [sp, #4]
   14f26:	69d3      	ldr	r3, [r2, #28]
   14f28:	9300      	str	r3, [sp, #0]
   14f2a:	f102 0318 	add.w	r3, r2, #24
   14f2e:	3214      	adds	r2, #20
   14f30:	f7ff ff08 	bl	14d44 <event_common_prepare>
}
   14f34:	b004      	add	sp, #16
   14f36:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14f38:	4040      	eors	r0, r0
   14f3a:	f380 8811 	msr	BASEPRI, r0
   14f3e:	f04f 0004 	mov.w	r0, #4
   14f42:	df02      	svc	2
   14f44:	20000ef4 	.word	0x20000ef4
   14f48:	00016809 	.word	0x00016809
   14f4c:	00000000 	.word	0x00000000

00014f50 <event_connection_prepare>:
{
   14f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f54:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   14f56:	4ccb      	ldr	r4, [pc, #812]	; (15284 <event_connection_prepare+0x334>)
   14f58:	7b24      	ldrb	r4, [r4, #12]
   14f5a:	2c00      	cmp	r4, #0
   14f5c:	d135      	bne.n	14fca <event_connection_prepare+0x7a>
				   conn->handle;
   14f5e:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14f60:	3507      	adds	r5, #7
   14f62:	b2ed      	uxtb	r5, r5
   14f64:	4cc7      	ldr	r4, [pc, #796]	; (15284 <event_connection_prepare+0x334>)
   14f66:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   14f68:	f993 401d 	ldrsb.w	r4, [r3, #29]
   14f6c:	2c00      	cmp	r4, #0
   14f6e:	db32      	blt.n	14fd6 <event_connection_prepare+0x86>
   14f70:	461c      	mov	r4, r3
   14f72:	910a      	str	r1, [sp, #40]	; 0x28
   14f74:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   14f76:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   14f78:	4415      	add	r5, r2
   14f7a:	b2ad      	uxth	r5, r5
   14f7c:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14f7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14f80:	441d      	add	r5, r3
   14f82:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   14f84:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14f88:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14f8c:	429a      	cmp	r2, r3
   14f8e:	d02d      	beq.n	14fec <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14f90:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14f94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14f98:	429a      	cmp	r2, r3
   14f9a:	f000 861a 	beq.w	15bd2 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   14f9e:	2305      	movs	r3, #5
   14fa0:	2200      	movs	r2, #0
   14fa2:	4611      	mov	r1, r2
   14fa4:	4610      	mov	r0, r2
   14fa6:	f7fd f897 	bl	120d8 <event_stop>
		switch (conn->llcp_type) {
   14faa:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   14fae:	3b01      	subs	r3, #1
   14fb0:	2b07      	cmp	r3, #7
   14fb2:	f201 80d6 	bhi.w	16162 <event_connection_prepare+0x1212>
   14fb6:	e8df f013 	tbh	[pc, r3, lsl #1]
   14fba:	029f      	.short	0x029f
   14fbc:	05b1054e 	.word	0x05b1054e
   14fc0:	072706ee 	.word	0x072706ee
   14fc4:	07ac08d4 	.word	0x07ac08d4
   14fc8:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   14fca:	4040      	eors	r0, r0
   14fcc:	f380 8811 	msr	BASEPRI, r0
   14fd0:	f04f 0004 	mov.w	r0, #4
   14fd4:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   14fd6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   14fd8:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   14fdc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   14fde:	442c      	add	r4, r5
   14fe0:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   14fe2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   14fe4:	42ac      	cmp	r4, r5
   14fe6:	d9c3      	bls.n	14f70 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   14fe8:	65dd      	str	r5, [r3, #92]	; 0x5c
   14fea:	e7c1      	b.n	14f70 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14fec:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   14ff0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14ff4:	429a      	cmp	r2, r3
   14ff6:	d00b      	beq.n	15010 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14ff8:	2305      	movs	r3, #5
   14ffa:	2200      	movs	r2, #0
   14ffc:	4611      	mov	r1, r2
   14ffe:	4610      	mov	r0, r2
   15000:	f7fd f86a 	bl	120d8 <event_stop>
	conn_upd = _radio.conn_upd;
   15004:	4b9f      	ldr	r3, [pc, #636]	; (15284 <event_connection_prepare+0x334>)
   15006:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   1500a:	b1fb      	cbz	r3, 1504c <event_connection_prepare+0xfc>
   1500c:	429c      	cmp	r4, r3
   1500e:	d01d      	beq.n	1504c <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15010:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   15014:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15018:	429a      	cmp	r2, r3
   1501a:	d0b9      	beq.n	14f90 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   1501c:	2305      	movs	r3, #5
   1501e:	2200      	movs	r2, #0
   15020:	4611      	mov	r1, r2
   15022:	4610      	mov	r0, r2
   15024:	f7fd f858 	bl	120d8 <event_stop>
	switch (conn->llcp_phy.state) {
   15028:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1502c:	f003 0303 	and.w	r3, r3, #3
   15030:	2b03      	cmp	r3, #3
   15032:	f200 8257 	bhi.w	154e4 <event_connection_prepare+0x594>
   15036:	a201      	add	r2, pc, #4	; (adr r2, 1503c <event_connection_prepare+0xec>)
   15038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1503c:	00015335 	.word	0x00015335
   15040:	00014f91 	.word	0x00014f91
   15044:	00014f91 	.word	0x00014f91
   15048:	000153af 	.word	0x000153af
	switch (conn->llcp_conn_param.state) {
   1504c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15050:	f003 0307 	and.w	r3, r3, #7
   15054:	2b05      	cmp	r3, #5
   15056:	f200 8167 	bhi.w	15328 <event_connection_prepare+0x3d8>
   1505a:	a201      	add	r2, pc, #4	; (adr r2, 15060 <event_connection_prepare+0x110>)
   1505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15060:	00015079 	.word	0x00015079
   15064:	00015143 	.word	0x00015143
   15068:	00015291 	.word	0x00015291
   1506c:	00015011 	.word	0x00015011
   15070:	00015011 	.word	0x00015011
   15074:	00015011 	.word	0x00015011
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15078:	4883      	ldr	r0, [pc, #524]	; (15288 <event_connection_prepare+0x338>)
   1507a:	f7fa f8c0 	bl	f1fe <mem_acquire>
	if (!node_tx) {
   1507e:	4680      	mov	r8, r0
   15080:	2800      	cmp	r0, #0
   15082:	d0c5      	beq.n	15010 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   15084:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15088:	2204      	movs	r2, #4
   1508a:	f362 0302 	bfi	r3, r2, #0, #3
   1508e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15092:	7903      	ldrb	r3, [r0, #4]
   15094:	f043 0303 	orr.w	r3, r3, #3
   15098:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1509a:	2318      	movs	r3, #24
   1509c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1509e:	230f      	movs	r3, #15
   150a0:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   150a2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   150a6:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   150a8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   150ac:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   150ae:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   150b2:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   150b4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   150b8:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   150ba:	2300      	movs	r3, #0
   150bc:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   150be:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   150c2:	74c3      	strb	r3, [r0, #19]
   150c4:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   150c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   150ca:	7543      	strb	r3, [r0, #21]
   150cc:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   150ce:	75c3      	strb	r3, [r0, #23]
   150d0:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   150d2:	7643      	strb	r3, [r0, #25]
   150d4:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   150d6:	76c3      	strb	r3, [r0, #27]
   150d8:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   150da:	7743      	strb	r3, [r0, #29]
   150dc:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   150de:	4601      	mov	r1, r0
   150e0:	4620      	mov	r0, r4
   150e2:	f7fc fb1f 	bl	11724 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   150e6:	4b67      	ldr	r3, [pc, #412]	; (15284 <event_connection_prepare+0x334>)
   150e8:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   150ec:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   150f0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   150f4:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   150f8:	6823      	ldr	r3, [r4, #0]
   150fa:	2b00      	cmp	r3, #0
   150fc:	db13      	blt.n	15126 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   150fe:	f108 0313 	add.w	r3, r8, #19
   15102:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   15106:	4b61      	ldr	r3, [pc, #388]	; (1528c <event_connection_prepare+0x33c>)
   15108:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1510a:	2201      	movs	r2, #1
   1510c:	4611      	mov	r1, r2
   1510e:	2000      	movs	r0, #0
   15110:	f7f9 ff34 	bl	ef7c <mayfly_enqueue>
		LL_ASSERT(!retval);
   15114:	2800      	cmp	r0, #0
   15116:	f43f af7b 	beq.w	15010 <event_connection_prepare+0xc0>
   1511a:	4040      	eors	r0, r0
   1511c:	f380 8811 	msr	BASEPRI, r0
   15120:	f04f 0004 	mov.w	r0, #4
   15124:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15126:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15128:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   1512a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1512e:	4291      	cmp	r1, r2
   15130:	bf2c      	ite	cs
   15132:	ebc3 0301 	rsbcs	r3, r3, r1
   15136:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   1513a:	4433      	add	r3, r6
   1513c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   15140:	e7dd      	b.n	150fe <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   15142:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   15146:	bbb3      	cbnz	r3, 151b6 <event_connection_prepare+0x266>
	if (!conn->role) {
   15148:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1514c:	2b00      	cmp	r3, #0
   1514e:	db52      	blt.n	151f6 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   15150:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15154:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15158:	429a      	cmp	r2, r3
   1515a:	f47f af59 	bne.w	15010 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1515e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   15162:	2105      	movs	r1, #5
   15164:	f361 0202 	bfi	r2, r1, #0, #3
   15168:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1516c:	2001      	movs	r0, #1
   1516e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   15172:	2100      	movs	r1, #0
   15174:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   15178:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   1517c:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   15180:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   15184:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   15188:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   1518c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15190:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   15194:	f04f 0e02 	mov.w	lr, #2
   15198:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1519c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   151a0:	4042      	eors	r2, r0
   151a2:	f362 0182 	bfi	r1, r2, #2, #1
   151a6:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   151aa:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   151ae:	3b01      	subs	r3, #1
   151b0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   151b4:	e72c      	b.n	15010 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151b6:	4834      	ldr	r0, [pc, #208]	; (15288 <event_connection_prepare+0x338>)
   151b8:	f7fa f821 	bl	f1fe <mem_acquire>
		if (!node_tx) {
   151bc:	4601      	mov	r1, r0
   151be:	2800      	cmp	r0, #0
   151c0:	f43f af26 	beq.w	15010 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   151c4:	7903      	ldrb	r3, [r0, #4]
   151c6:	f043 0303 	orr.w	r3, r3, #3
   151ca:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   151cc:	2311      	movs	r3, #17
   151ce:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   151d0:	2303      	movs	r3, #3
   151d2:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   151d4:	230f      	movs	r3, #15
   151d6:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   151d8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   151dc:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   151de:	4620      	mov	r0, r4
   151e0:	f7fc faa0 	bl	11724 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   151e4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   151e8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   151ec:	2200      	movs	r2, #0
   151ee:	4b25      	ldr	r3, [pc, #148]	; (15284 <event_connection_prepare+0x334>)
   151f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   151f4:	e70c      	b.n	15010 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151f6:	4824      	ldr	r0, [pc, #144]	; (15288 <event_connection_prepare+0x338>)
   151f8:	f7fa f801 	bl	f1fe <mem_acquire>
	if (!node_tx) {
   151fc:	4601      	mov	r1, r0
   151fe:	2800      	cmp	r0, #0
   15200:	f43f af06 	beq.w	15010 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15204:	7903      	ldrb	r3, [r0, #4]
   15206:	f043 0303 	orr.w	r3, r3, #3
   1520a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1520c:	2318      	movs	r3, #24
   1520e:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   15210:	2310      	movs	r3, #16
   15212:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   15214:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15218:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   1521a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1521e:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   15220:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15224:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15226:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1522a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1522c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   15230:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   15232:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   15236:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   1523a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   1523e:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   15242:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15246:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   1524a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   1524e:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   15252:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15256:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   1525a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   1525e:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   15262:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   15266:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   1526a:	4620      	mov	r0, r4
   1526c:	f7fc fa5a 	bl	11724 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15270:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15274:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   15278:	2200      	movs	r2, #0
   1527a:	4b02      	ldr	r3, [pc, #8]	; (15284 <event_connection_prepare+0x334>)
   1527c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15280:	e6c6      	b.n	15010 <event_connection_prepare+0xc0>
   15282:	bf00      	nop
   15284:	20000ef4 	.word	0x20000ef4
   15288:	2000104c 	.word	0x2000104c
   1528c:	2000bcb8 	.word	0x2000bcb8
	if (conn->pause_tx) {
   15290:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15294:	f013 0f08 	tst.w	r3, #8
   15298:	f47f aeba 	bne.w	15010 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   1529c:	4b94      	ldr	r3, [pc, #592]	; (154f0 <event_connection_prepare+0x5a0>)
   1529e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   152a2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   152a6:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   152a8:	429a      	cmp	r2, r3
   152aa:	d331      	bcc.n	15310 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   152ac:	4b90      	ldr	r3, [pc, #576]	; (154f0 <event_connection_prepare+0x5a0>)
   152ae:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   152b2:	1ad3      	subs	r3, r2, r3
   152b4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   152b6:	2b01      	cmp	r3, #1
   152b8:	d934      	bls.n	15324 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   152ba:	4b8d      	ldr	r3, [pc, #564]	; (154f0 <event_connection_prepare+0x5a0>)
   152bc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   152c0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   152c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   152c8:	2b00      	cmp	r3, #0
   152ca:	f43f aea1 	beq.w	15010 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   152ce:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   152d2:	2103      	movs	r1, #3
   152d4:	f361 0202 	bfi	r2, r1, #0, #3
   152d8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   152dc:	8c22      	ldrh	r2, [r4, #32]
   152de:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   152e0:	2201      	movs	r2, #1
   152e2:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   152e4:	7a1a      	ldrb	r2, [r3, #8]
   152e6:	430a      	orrs	r2, r1
   152e8:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   152ea:	2218      	movs	r2, #24
   152ec:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   152ee:	220f      	movs	r2, #15
   152f0:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   152f2:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   152f6:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   152f8:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   152fc:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   152fe:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   15302:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   15304:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   15308:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   1530a:	f7fe ffbf 	bl	1428c <packet_rx_enqueue>
   1530e:	e67f      	b.n	15010 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   15310:	4977      	ldr	r1, [pc, #476]	; (154f0 <event_connection_prepare+0x5a0>)
   15312:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15316:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1531a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1531c:	fa52 f383 	uxtab	r3, r2, r3
   15320:	b2db      	uxtb	r3, r3
   15322:	e7c8      	b.n	152b6 <event_connection_prepare+0x366>
		return 0;
   15324:	2300      	movs	r3, #0
   15326:	e7cf      	b.n	152c8 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   15328:	4040      	eors	r0, r0
   1532a:	f380 8811 	msr	BASEPRI, r0
   1532e:	f04f 0004 	mov.w	r0, #4
   15332:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15334:	486f      	ldr	r0, [pc, #444]	; (154f4 <event_connection_prepare+0x5a4>)
   15336:	f7f9 ff62 	bl	f1fe <mem_acquire>
		if (!node_tx) {
   1533a:	4601      	mov	r1, r0
   1533c:	2800      	cmp	r0, #0
   1533e:	f43f ae27 	beq.w	14f90 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   15342:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15346:	2201      	movs	r2, #1
   15348:	f362 0301 	bfi	r3, r2, #0, #2
   1534c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15350:	b2db      	uxtb	r3, r3
   15352:	f3c3 0082 	ubfx	r0, r3, #2, #3
   15356:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1535a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1535e:	095b      	lsrs	r3, r3, #5
   15360:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   15364:	f363 00c5 	bfi	r0, r3, #3, #3
   15368:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   1536c:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   15370:	4613      	mov	r3, r2
   15372:	f360 1386 	bfi	r3, r0, #6, #1
   15376:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1537a:	790b      	ldrb	r3, [r1, #4]
   1537c:	f043 0303 	orr.w	r3, r3, #3
   15380:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15382:	2303      	movs	r3, #3
   15384:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15386:	2316      	movs	r3, #22
   15388:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   1538a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1538e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15392:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   15394:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15398:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1539c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1539e:	4620      	mov	r0, r4
   153a0:	f7fc f9c0 	bl	11724 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   153a4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   153a8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   153ac:	e5f0      	b.n	14f90 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   153ae:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   153b2:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   153b6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
   153be:	f013 0f02 	tst.w	r3, #2
   153c2:	d047      	beq.n	15454 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   153c4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153c8:	2202      	movs	r2, #2
   153ca:	f362 0384 	bfi	r3, r2, #2, #3
   153ce:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   153d2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153d6:	095b      	lsrs	r3, r3, #5
   153d8:	f013 0f02 	tst.w	r3, #2
   153dc:	d057      	beq.n	1548e <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   153de:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153e2:	2202      	movs	r2, #2
   153e4:	f362 1347 	bfi	r3, r2, #5, #3
   153e8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   153ec:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153f0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   153f4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   153f8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   153fc:	4293      	cmp	r3, r2
   153fe:	d063      	beq.n	154c8 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   15400:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15404:	f363 0284 	bfi	r2, r3, #2, #3
   15408:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   1540c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15410:	095b      	lsrs	r3, r3, #5
   15412:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15416:	f002 0207 	and.w	r2, r2, #7
   1541a:	4293      	cmp	r3, r2
   1541c:	d05b      	beq.n	154d6 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   1541e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15422:	f363 1247 	bfi	r2, r3, #5, #3
   15426:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   1542a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1542e:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   15432:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15436:	f043 0301 	orr.w	r3, r3, #1
   1543a:	f362 0341 	bfi	r3, r2, #1, #1
   1543e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   15442:	2308      	movs	r3, #8
   15444:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15448:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1544c:	3b01      	subs	r3, #1
   1544e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15452:	e59d      	b.n	14f90 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   15454:	f013 0f01 	tst.w	r3, #1
   15458:	d007      	beq.n	1546a <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   1545a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1545e:	2201      	movs	r2, #1
   15460:	f362 0384 	bfi	r3, r2, #2, #3
   15464:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15468:	e7b3      	b.n	153d2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   1546a:	f013 0f04 	tst.w	r3, #4
   1546e:	d007      	beq.n	15480 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   15470:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15474:	2204      	movs	r2, #4
   15476:	f362 0384 	bfi	r3, r2, #2, #3
   1547a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1547e:	e7a8      	b.n	153d2 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   15480:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15484:	f36f 0384 	bfc	r3, #2, #3
   15488:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1548c:	e7a1      	b.n	153d2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   1548e:	f013 0f01 	tst.w	r3, #1
   15492:	d007      	beq.n	154a4 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   15494:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15498:	2201      	movs	r2, #1
   1549a:	f362 1347 	bfi	r3, r2, #5, #3
   1549e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   154a2:	e7a3      	b.n	153ec <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   154a4:	f013 0f04 	tst.w	r3, #4
   154a8:	d007      	beq.n	154ba <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   154aa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154ae:	2204      	movs	r2, #4
   154b0:	f362 1347 	bfi	r3, r2, #5, #3
   154b4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   154b8:	e798      	b.n	153ec <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   154ba:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   154be:	f36f 1347 	bfc	r3, #5, #3
   154c2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   154c6:	e791      	b.n	153ec <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   154c8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   154cc:	f36f 0384 	bfc	r3, #2, #3
   154d0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   154d4:	e79a      	b.n	1540c <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   154d6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   154da:	f36f 1347 	bfc	r3, #5, #3
   154de:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   154e2:	e7a2      	b.n	1542a <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   154e4:	4040      	eors	r0, r0
   154e6:	f380 8811 	msr	BASEPRI, r0
   154ea:	f04f 0004 	mov.w	r0, #4
   154ee:	df02      	svc	2
   154f0:	20000ef4 	.word	0x20000ef4
   154f4:	2000104c 	.word	0x2000104c
	conn_upd = _radio.conn_upd;
   154f8:	4bb7      	ldr	r3, [pc, #732]	; (157d8 <event_connection_prepare+0x888>)
   154fa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   154fe:	2b00      	cmp	r3, #0
   15500:	f000 814b 	beq.w	1579a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   15504:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   15508:	eba5 0808 	sub.w	r8, r5, r8
   1550c:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   15510:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15514:	f013 0f03 	tst.w	r3, #3
   15518:	f040 8143 	bne.w	157a2 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   1551c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   15520:	f040 8296 	bne.w	15a50 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   15524:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15528:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1552c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   15530:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   15534:	429a      	cmp	r2, r3
   15536:	d006      	beq.n	15546 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   15538:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1553c:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15540:	2b05      	cmp	r3, #5
   15542:	f000 81bb 	beq.w	158bc <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   15546:	4ba4      	ldr	r3, [pc, #656]	; (157d8 <event_connection_prepare+0x888>)
   15548:	2200      	movs	r2, #0
   1554a:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   1554c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   15550:	429c      	cmp	r4, r3
   15552:	f000 81b9 	beq.w	158c8 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   15556:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   1555a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   1555c:	429a      	cmp	r2, r3
   1555e:	f000 81b7 	beq.w	158d0 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   15562:	4b9d      	ldr	r3, [pc, #628]	; (157d8 <event_connection_prepare+0x888>)
   15564:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15568:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1556c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1556e:	429a      	cmp	r2, r3
   15570:	f0c0 81c7 	bcc.w	15902 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   15574:	4b98      	ldr	r3, [pc, #608]	; (157d8 <event_connection_prepare+0x888>)
   15576:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1557a:	1ad3      	subs	r3, r2, r3
   1557c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1557e:	2b01      	cmp	r3, #1
   15580:	f240 81c9 	bls.w	15916 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15584:	4b94      	ldr	r3, [pc, #592]	; (157d8 <event_connection_prepare+0x888>)
   15586:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1558a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   15592:	2b00      	cmp	r3, #0
   15594:	f000 81c1 	beq.w	1591a <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   15598:	8c22      	ldrh	r2, [r4, #32]
   1559a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1559c:	2208      	movs	r2, #8
   1559e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   155a0:	2200      	movs	r2, #0
   155a2:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   155a4:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   155a8:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   155aa:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   155ae:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   155b0:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   155b4:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   155b6:	f7fe fe69 	bl	1428c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   155ba:	6823      	ldr	r3, [r4, #0]
   155bc:	2b00      	cmp	r3, #0
   155be:	f2c0 81b2 	blt.w	15926 <event_connection_prepare+0x9d6>
   155c2:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   155c4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   155c6:	fb18 f303 	smulbb	r3, r8, r3
   155ca:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   155cc:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   155d0:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   155d4:	fb1a f00b 	smulbb	r0, sl, fp
   155d8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   155da:	4283      	cmp	r3, r0
   155dc:	f080 81b1 	bcs.w	15942 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   155e0:	1ac3      	subs	r3, r0, r3
   155e2:	17d9      	asrs	r1, r3, #31
   155e4:	487d      	ldr	r0, [pc, #500]	; (157dc <event_connection_prepare+0x88c>)
   155e6:	f240 1223 	movw	r2, #291	; 0x123
   155ea:	fb02 f203 	mul.w	r2, r2, r3
   155ee:	fb00 2201 	mla	r2, r0, r1, r2
   155f2:	fba3 0100 	umull	r0, r1, r3, r0
   155f6:	4411      	add	r1, r2
   155f8:	a375      	add	r3, pc, #468	; (adr r3, 157d0 <event_connection_prepare+0x880>)
   155fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   155fe:	f7eb fd7d 	bl	10fc <__aeabi_uldivmod>
   15602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   15606:	eb00 0309 	add.w	r3, r0, r9
   1560a:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   1560c:	ebab 0308 	sub.w	r3, fp, r8
   15610:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   15612:	fa12 f383 	uxtah	r3, r2, r3
   15616:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   15618:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   1561a:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   1561c:	429a      	cmp	r2, r3
   1561e:	bf38      	it	cc
   15620:	461a      	movcc	r2, r3
   15622:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   15624:	f240 49e2 	movw	r9, #1250	; 0x4e2
   15628:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   1562c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15630:	2b00      	cmp	r3, #0
   15632:	f2c0 819d 	blt.w	15970 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   15636:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1563a:	a365      	add	r3, pc, #404	; (adr r3, 157d0 <event_connection_prepare+0x880>)
   1563c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15640:	4967      	ldr	r1, [pc, #412]	; (157e0 <event_connection_prepare+0x890>)
   15642:	fba0 0101 	umull	r0, r1, r0, r1
   15646:	f7eb fd59 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   1564a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   1564e:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   15652:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   15654:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   15658:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1565c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   1565e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15662:	f242 7110 	movw	r1, #10000	; 0x2710
   15666:	fb01 9303 	mla	r3, r1, r3, r9
   1566a:	3b01      	subs	r3, #1
   1566c:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   15670:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15672:	4b5c      	ldr	r3, [pc, #368]	; (157e4 <event_connection_prepare+0x894>)
   15674:	444b      	add	r3, r9
   15676:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   1567a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1567e:	4b5a      	ldr	r3, [pc, #360]	; (157e8 <event_connection_prepare+0x898>)
   15680:	444b      	add	r3, r9
   15682:	fbb3 f9f9 	udiv	r9, r3, r9
   15686:	fa1f f989 	uxth.w	r9, r9
   1568a:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1568e:	1d93      	adds	r3, r2, #6
   15690:	4599      	cmp	r9, r3
   15692:	dd07      	ble.n	156a4 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   15694:	eba9 0902 	sub.w	r9, r9, r2
   15698:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1569c:	f1a9 0906 	sub.w	r9, r9, #6
   156a0:	fa1f f989 	uxth.w	r9, r9
   156a4:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   156a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156ac:	f013 0f04 	tst.w	r3, #4
   156b0:	d102      	bne.n	156b8 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   156b2:	2300      	movs	r3, #0
   156b4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   156b8:	2101      	movs	r1, #1
   156ba:	2000      	movs	r0, #0
   156bc:	f003 fe2d 	bl	1931a <mayfly_is_enabled>
   156c0:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   156c2:	2200      	movs	r2, #0
   156c4:	2101      	movs	r1, #1
   156c6:	4610      	mov	r0, r2
   156c8:	f7f9 fc1a 	bl	ef00 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   156cc:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   156ce:	3207      	adds	r2, #7
		ticker_status =
   156d0:	f641 13e3 	movw	r3, #6627	; 0x19e3
   156d4:	9300      	str	r3, [sp, #0]
   156d6:	4b45      	ldr	r3, [pc, #276]	; (157ec <event_connection_prepare+0x89c>)
   156d8:	b2d2      	uxtb	r2, r2
   156da:	2100      	movs	r1, #0
   156dc:	4608      	mov	r0, r1
   156de:	f7fb fafb 	bl	10cd8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   156e2:	b110      	cbz	r0, 156ea <event_connection_prepare+0x79a>
   156e4:	2802      	cmp	r0, #2
   156e6:	f040 819a 	bne.w	15a1e <event_connection_prepare+0xace>
				     conn->handle,
   156ea:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   156ee:	f10a 0a07 	add.w	sl, sl, #7
   156f2:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   156f6:	4b3a      	ldr	r3, [pc, #232]	; (157e0 <event_connection_prepare+0x890>)
   156f8:	fba8 2303 	umull	r2, r3, r8, r3
   156fc:	4617      	mov	r7, r2
   156fe:	4698      	mov	r8, r3
   15700:	a333      	add	r3, pc, #204	; (adr r3, 157d0 <event_connection_prepare+0x880>)
   15702:	e9d3 2300 	ldrd	r2, r3, [r3]
   15706:	4638      	mov	r0, r7
   15708:	4641      	mov	r1, r8
   1570a:	f7eb fcf7 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1570e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   15712:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   15714:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15718:	2100      	movs	r1, #0
   1571a:	4a35      	ldr	r2, [pc, #212]	; (157f0 <event_connection_prepare+0x8a0>)
   1571c:	2307      	movs	r3, #7
   1571e:	fb03 f300 	mul.w	r3, r3, r0
   15722:	fb02 3301 	mla	r3, r2, r1, r3
   15726:	fba0 0102 	umull	r0, r1, r0, r2
   1572a:	4419      	add	r1, r3
   1572c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15730:	2300      	movs	r3, #0
   15732:	1a3f      	subs	r7, r7, r0
   15734:	eb68 0801 	sbc.w	r8, r8, r1
   15738:	4638      	mov	r0, r7
   1573a:	4641      	mov	r1, r8
   1573c:	f7eb fcde 	bl	10fc <__aeabi_uldivmod>
   15740:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   15742:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15744:	990c      	ldr	r1, [sp, #48]	; 0x30
   15746:	440b      	add	r3, r1
   15748:	b29b      	uxth	r3, r3
   1574a:	f994 101d 	ldrsb.w	r1, [r4, #29]
   1574e:	2900      	cmp	r1, #0
   15750:	f2c0 816b 	blt.w	15a2a <event_connection_prepare+0xada>
   15754:	4927      	ldr	r1, [pc, #156]	; (157f4 <event_connection_prepare+0x8a4>)
		ticker_status =
   15756:	f641 10f3 	movw	r0, #6643	; 0x19f3
   1575a:	9008      	str	r0, [sp, #32]
   1575c:	4823      	ldr	r0, [pc, #140]	; (157ec <event_connection_prepare+0x89c>)
   1575e:	9007      	str	r0, [sp, #28]
   15760:	9406      	str	r4, [sp, #24]
   15762:	9105      	str	r1, [sp, #20]
   15764:	9304      	str	r3, [sp, #16]
   15766:	2000      	movs	r0, #0
   15768:	9003      	str	r0, [sp, #12]
   1576a:	9202      	str	r2, [sp, #8]
   1576c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1576e:	9301      	str	r3, [sp, #4]
   15770:	f8cd b000 	str.w	fp, [sp]
   15774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15776:	4652      	mov	r2, sl
   15778:	4601      	mov	r1, r0
   1577a:	f7fb fa11 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1577e:	b110      	cbz	r0, 15786 <event_connection_prepare+0x836>
   15780:	2802      	cmp	r0, #2
   15782:	f040 8154 	bne.w	15a2e <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   15786:	f1b9 0f00 	cmp.w	r9, #0
   1578a:	f040 8156 	bne.w	15a3a <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   1578e:	f1b9 0f00 	cmp.w	r9, #0
   15792:	f040 821e 	bne.w	15bd2 <event_connection_prepare+0xc82>
   15796:	f000 be59 	b.w	1644c <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   1579a:	4b0f      	ldr	r3, [pc, #60]	; (157d8 <event_connection_prepare+0x888>)
   1579c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   157a0:	e6b0      	b.n	15504 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   157a2:	4815      	ldr	r0, [pc, #84]	; (157f8 <event_connection_prepare+0x8a8>)
   157a4:	f7f9 fd2b 	bl	f1fe <mem_acquire>
		if (!node_tx) {
   157a8:	4680      	mov	r8, r0
   157aa:	2800      	cmp	r0, #0
   157ac:	f000 814d 	beq.w	15a4a <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   157b0:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   157b2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   157b6:	f002 0203 	and.w	r2, r2, #3
   157ba:	2a01      	cmp	r2, #1
   157bc:	d01e      	beq.n	157fc <event_connection_prepare+0x8ac>
   157be:	2a02      	cmp	r2, #2
   157c0:	d066      	beq.n	15890 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   157c2:	4040      	eors	r0, r0
   157c4:	f380 8811 	msr	BASEPRI, r0
   157c8:	f04f 0004 	mov.w	r0, #4
   157cc:	df02      	svc	2
   157ce:	bf00      	nop
   157d0:	1afd498d 	.word	0x1afd498d
   157d4:	00000007 	.word	0x00000007
   157d8:	20000ef4 	.word	0x20000ef4
   157dc:	09ce5400 	.word	0x09ce5400
   157e0:	3b9aca00 	.word	0x3b9aca00
   157e4:	026259ff 	.word	0x026259ff
   157e8:	01c9c37f 	.word	0x01c9c37f
   157ec:	000118f5 	.word	0x000118f5
   157f0:	1afd498d 	.word	0x1afd498d
   157f4:	000164b5 	.word	0x000164b5
   157f8:	2000104c 	.word	0x2000104c
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   157fc:	49bc      	ldr	r1, [pc, #752]	; (15af0 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   157fe:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15802:	f36f 0201 	bfc	r2, #0, #2
   15806:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   1580a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1580c:	442a      	add	r2, r5
   1580e:	b292      	uxth	r2, r2
   15810:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   15812:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15816:	f898 2004 	ldrb.w	r2, [r8, #4]
   1581a:	f042 0203 	orr.w	r2, r2, #3
   1581e:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15822:	220c      	movs	r2, #12
   15824:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   15826:	2200      	movs	r2, #0
   15828:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   1582a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   1582e:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   15830:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   15834:	48af      	ldr	r0, [pc, #700]	; (15af4 <event_connection_prepare+0xba4>)
   15836:	fba0 0202 	umull	r0, r2, r0, r2
   1583a:	0a92      	lsrs	r2, r2, #10
   1583c:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   15840:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15844:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   15848:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1584c:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   15850:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15854:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   15858:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   1585c:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   15860:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15864:	6820      	ldr	r0, [r4, #0]
   15866:	2800      	cmp	r0, #0
   15868:	db14      	blt.n	15894 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   1586a:	3305      	adds	r3, #5
   1586c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15870:	4ba1      	ldr	r3, [pc, #644]	; (15af8 <event_connection_prepare+0xba8>)
   15872:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   15874:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15876:	2201      	movs	r2, #1
   15878:	4611      	mov	r1, r2
   1587a:	2000      	movs	r0, #0
   1587c:	f7f9 fb7e 	bl	ef7c <mayfly_enqueue>
		LL_ASSERT(!retval);
   15880:	b9b0      	cbnz	r0, 158b0 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   15882:	4641      	mov	r1, r8
   15884:	4620      	mov	r0, r4
   15886:	f7fb ff4d 	bl	11724 <ctrl_tx_enqueue>
	return 1;
   1588a:	f04f 0901 	mov.w	r9, #1
   1588e:	e77e      	b.n	1578e <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   15890:	499a      	ldr	r1, [pc, #616]	; (15afc <event_connection_prepare+0xbac>)
   15892:	e7b4      	b.n	157fe <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   15894:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15896:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15898:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1589c:	4297      	cmp	r7, r2
   1589e:	bf2c      	ite	cs
   158a0:	ebce 0207 	rsbcs	r2, lr, r7
   158a4:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   158a8:	4432      	add	r2, r6
   158aa:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   158ae:	e7dc      	b.n	1586a <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   158b0:	4040      	eors	r0, r0
   158b2:	f380 8811 	msr	BASEPRI, r0
   158b6:	f04f 0004 	mov.w	r0, #4
   158ba:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   158bc:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   158c0:	2300      	movs	r3, #0
   158c2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   158c6:	e63e      	b.n	15546 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   158c8:	4b8d      	ldr	r3, [pc, #564]	; (15b00 <event_connection_prepare+0xbb0>)
   158ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   158ce:	e642      	b.n	15556 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   158d0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   158d4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   158d6:	4291      	cmp	r1, r2
   158d8:	f47f ae43 	bne.w	15562 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   158dc:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   158e0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   158e4:	fb01 f103 	mul.w	r1, r1, r3
   158e8:	f242 7310 	movw	r3, #10000	; 0x2710
   158ec:	fb03 1302 	mla	r3, r3, r2, r1
   158f0:	3b01      	subs	r3, #1
   158f2:	fb93 f3f1 	sdiv	r3, r3, r1
   158f6:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   158f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   158fa:	4293      	cmp	r3, r2
   158fc:	f47f ae31 	bne.w	15562 <event_connection_prepare+0x612>
   15900:	e65b      	b.n	155ba <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   15902:	497f      	ldr	r1, [pc, #508]	; (15b00 <event_connection_prepare+0xbb0>)
   15904:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15908:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1590c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1590e:	fa52 f383 	uxtab	r3, r2, r3
   15912:	b2db      	uxtb	r3, r3
   15914:	e633      	b.n	1557e <event_connection_prepare+0x62e>
		return 0;
   15916:	2300      	movs	r3, #0
   15918:	e63b      	b.n	15592 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   1591a:	4040      	eors	r0, r0
   1591c:	f380 8811 	msr	BASEPRI, r0
   15920:	f04f 0004 	mov.w	r0, #4
   15924:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15926:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15928:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1592a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1592e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15930:	4291      	cmp	r1, r2
   15932:	bf2c      	ite	cs
   15934:	ebc3 0301 	rsbcs	r3, r3, r1
   15938:	ebc3 0302 	rsbcc	r3, r3, r2
   1593c:	eb06 0903 	add.w	r9, r6, r3
   15940:	e640      	b.n	155c4 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   15942:	1a1b      	subs	r3, r3, r0
   15944:	17d9      	asrs	r1, r3, #31
   15946:	486f      	ldr	r0, [pc, #444]	; (15b04 <event_connection_prepare+0xbb4>)
   15948:	f240 1223 	movw	r2, #291	; 0x123
   1594c:	fb02 f203 	mul.w	r2, r2, r3
   15950:	fb00 2201 	mla	r2, r0, r1, r2
   15954:	fba3 0100 	umull	r0, r1, r3, r0
   15958:	4411      	add	r1, r2
   1595a:	a363      	add	r3, pc, #396	; (adr r3, 15ae8 <event_connection_prepare+0xb98>)
   1595c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15960:	f7eb fbcc 	bl	10fc <__aeabi_uldivmod>
   15964:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15968:	eba9 0300 	sub.w	r3, r9, r0
   1596c:	930b      	str	r3, [sp, #44]	; 0x2c
   1596e:	e64d      	b.n	1560c <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15970:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15972:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15974:	fb02 3218 	mls	r2, r2, r8, r3
   15978:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   1597a:	4b61      	ldr	r3, [pc, #388]	; (15b00 <event_connection_prepare+0xbb0>)
   1597c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15980:	4861      	ldr	r0, [pc, #388]	; (15b08 <event_connection_prepare+0xbb8>)
   15982:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15986:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1598a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1598e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   15992:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   15994:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15998:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1599c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   159a0:	495a      	ldr	r1, [pc, #360]	; (15b0c <event_connection_prepare+0xbbc>)
   159a2:	fba1 1303 	umull	r1, r3, r1, r3
   159a6:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   159aa:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   159ae:	ea4f 0359 	mov.w	r3, r9, lsr #1
   159b2:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   159b4:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   159b6:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   159ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
   159be:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   159c2:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   159c4:	2100      	movs	r1, #0
   159c6:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   159c8:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   159cc:	4402      	add	r2, r0
   159ce:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   159d0:	4293      	cmp	r3, r2
   159d2:	d200      	bcs.n	159d6 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   159d4:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   159d6:	f8df b140 	ldr.w	fp, [pc, #320]	; 15b18 <event_connection_prepare+0xbc8>
   159da:	a343      	add	r3, pc, #268	; (adr r3, 15ae8 <event_connection_prepare+0xb98>)
   159dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   159e0:	fba0 010b 	umull	r0, r1, r0, fp
   159e4:	f7eb fb8a 	bl	10fc <__aeabi_uldivmod>
   159e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   159ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   159ee:	1a1b      	subs	r3, r3, r0
   159f0:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   159f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   159f6:	4a3f      	ldr	r2, [pc, #252]	; (15af4 <event_connection_prepare+0xba4>)
   159f8:	fba2 2303 	umull	r2, r3, r2, r3
   159fc:	0a9b      	lsrs	r3, r3, #10
   159fe:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15a02:	fb00 f003 	mul.w	r0, r0, r3
   15a06:	a338      	add	r3, pc, #224	; (adr r3, 15ae8 <event_connection_prepare+0xb98>)
   15a08:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a0c:	fba0 010b 	umull	r0, r1, r0, fp
   15a10:	f7eb fb74 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15a14:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   15a18:	eba9 0808 	sub.w	r8, r9, r8
   15a1c:	e61a      	b.n	15654 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15a1e:	4040      	eors	r0, r0
   15a20:	f380 8811 	msr	BASEPRI, r0
   15a24:	f04f 0004 	mov.w	r0, #4
   15a28:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15a2a:	4939      	ldr	r1, [pc, #228]	; (15b10 <event_connection_prepare+0xbc0>)
   15a2c:	e693      	b.n	15756 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15a2e:	4040      	eors	r0, r0
   15a30:	f380 8811 	msr	BASEPRI, r0
   15a34:	f04f 0004 	mov.w	r0, #4
   15a38:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15a3a:	2201      	movs	r2, #1
   15a3c:	4611      	mov	r1, r2
   15a3e:	2000      	movs	r0, #0
   15a40:	f7f9 fa5e 	bl	ef00 <mayfly_enable>
		return 0;
   15a44:	f04f 0900 	mov.w	r9, #0
   15a48:	e6a1      	b.n	1578e <event_connection_prepare+0x83e>
			return 1;
   15a4a:	f04f 0901 	mov.w	r9, #1
   15a4e:	e69e      	b.n	1578e <event_connection_prepare+0x83e>
	return 1;
   15a50:	f04f 0901 	mov.w	r9, #1
   15a54:	e69b      	b.n	1578e <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   15a56:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15a5a:	b9f3      	cbnz	r3, 15a9a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15a5c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15a60:	1aeb      	subs	r3, r5, r3
   15a62:	b29b      	uxth	r3, r3
   15a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15a68:	f280 80b3 	bge.w	15bd2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15a6c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15a70:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15a74:	f104 0817 	add.w	r8, r4, #23
   15a78:	2205      	movs	r2, #5
   15a7a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15a7e:	4640      	mov	r0, r8
   15a80:	f7ea fc1e 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15a84:	2105      	movs	r1, #5
   15a86:	4640      	mov	r0, r8
   15a88:	f7f9 fc3d 	bl	f306 <util_ones_count_get>
		conn->data_chan_count =
   15a8c:	7f63      	ldrb	r3, [r4, #29]
   15a8e:	f360 0305 	bfi	r3, r0, #0, #6
   15a92:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15a94:	2301      	movs	r3, #1
   15a96:	7723      	strb	r3, [r4, #28]
   15a98:	e09b      	b.n	15bd2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15a9a:	481e      	ldr	r0, [pc, #120]	; (15b14 <event_connection_prepare+0xbc4>)
   15a9c:	f7f9 fbaf 	bl	f1fe <mem_acquire>
		if (node_tx) {
   15aa0:	4680      	mov	r8, r0
   15aa2:	2800      	cmp	r0, #0
   15aa4:	f000 8095 	beq.w	15bd2 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15aa8:	2300      	movs	r3, #0
   15aaa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15aae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15ab0:	442b      	add	r3, r5
   15ab2:	b29b      	uxth	r3, r3
   15ab4:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15ab6:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15aba:	7903      	ldrb	r3, [r0, #4]
   15abc:	f043 0303 	orr.w	r3, r3, #3
   15ac0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15ac2:	2308      	movs	r3, #8
   15ac4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15ac6:	2301      	movs	r3, #1
   15ac8:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15aca:	2205      	movs	r2, #5
   15acc:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15ad0:	3008      	adds	r0, #8
   15ad2:	f7ea fbf5 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15ad6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15ada:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15ade:	4641      	mov	r1, r8
   15ae0:	4620      	mov	r0, r4
   15ae2:	f7fb fe1f 	bl	11724 <ctrl_tx_enqueue>
   15ae6:	e074      	b.n	15bd2 <event_connection_prepare+0xc82>
   15ae8:	1afd498d 	.word	0x1afd498d
   15aec:	00000007 	.word	0x00000007
   15af0:	000130dd 	.word	0x000130dd
   15af4:	d1b71759 	.word	0xd1b71759
   15af8:	2000bca8 	.word	0x2000bca8
   15afc:	00012e11 	.word	0x00012e11
   15b00:	20000ef4 	.word	0x20000ef4
   15b04:	09ce5400 	.word	0x09ce5400
   15b08:	000314c0 	.word	0x000314c0
   15b0c:	431bde83 	.word	0x431bde83
   15b10:	000164ad 	.word	0x000164ad
   15b14:	2000104c 	.word	0x2000104c
   15b18:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15b1c:	48d9      	ldr	r0, [pc, #868]	; (15e84 <event_connection_prepare+0xf34>)
   15b1e:	f7f9 fb6e 	bl	f1fe <mem_acquire>
	if (node_tx) {
   15b22:	4680      	mov	r8, r0
   15b24:	2800      	cmp	r0, #0
   15b26:	d054      	beq.n	15bd2 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15b28:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15b2c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15b30:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   15b34:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	f2c0 808c 	blt.w	15c56 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15b3e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   15b42:	4653      	mov	r3, sl
   15b44:	2200      	movs	r2, #0
   15b46:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15b4a:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15b4e:	f7f9 fc63 	bl	f418 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15b52:	2210      	movs	r2, #16
   15b54:	4651      	mov	r1, sl
   15b56:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15b5a:	f7ea fbb1 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15b5e:	2208      	movs	r2, #8
   15b60:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15b64:	f204 1033 	addw	r0, r4, #307	; 0x133
   15b68:	f7ea fbaa 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15b6c:	2300      	movs	r3, #0
   15b6e:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15b72:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15b76:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15b7a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15b7e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15b82:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15b86:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15b8a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15b8e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15b92:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15b96:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15b9a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15b9e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15ba2:	f363 0200 	bfi	r2, r3, #0, #1
   15ba6:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15baa:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15bae:	f043 0301 	orr.w	r3, r3, #1
   15bb2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15bb6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15bba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15bbe:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15bc2:	4649      	mov	r1, r9
   15bc4:	4620      	mov	r0, r4
   15bc6:	f7fb fe9d 	bl	11904 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15bca:	4641      	mov	r1, r8
   15bcc:	4620      	mov	r0, r4
   15bce:	f7fb fda9 	bl	11724 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15bd2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15bd6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15bda:	429a      	cmp	r2, r3
   15bdc:	d021      	beq.n	15c22 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15bde:	2305      	movs	r3, #5
   15be0:	2200      	movs	r2, #0
   15be2:	4611      	mov	r1, r2
   15be4:	4610      	mov	r0, r2
   15be6:	f7fc fa77 	bl	120d8 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15bea:	48a6      	ldr	r0, [pc, #664]	; (15e84 <event_connection_prepare+0xf34>)
   15bec:	f7f9 fb07 	bl	f1fe <mem_acquire>
		if (node_tx) {
   15bf0:	4601      	mov	r1, r0
   15bf2:	b1b0      	cbz	r0, 15c22 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15bf4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15bf8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15bfc:	7903      	ldrb	r3, [r0, #4]
   15bfe:	f043 0303 	orr.w	r3, r3, #3
   15c02:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15c04:	2302      	movs	r3, #2
   15c06:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15c08:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15c0a:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15c0e:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15c10:	4620      	mov	r0, r4
   15c12:	f7fb fd87 	bl	11724 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15c16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15c18:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15c1c:	2b01      	cmp	r3, #1
   15c1e:	f240 82a6 	bls.w	1616e <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15c22:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15c26:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15c2a:	429a      	cmp	r2, r3
   15c2c:	f000 83f9 	beq.w	16422 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15c30:	2305      	movs	r3, #5
   15c32:	2200      	movs	r2, #0
   15c34:	4611      	mov	r1, r2
   15c36:	4610      	mov	r0, r2
   15c38:	f7fc fa4e 	bl	120d8 <event_stop>
	switch (conn->llcp_length.state) {
   15c3c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15c40:	f003 0303 	and.w	r3, r3, #3
   15c44:	2b03      	cmp	r3, #3
   15c46:	f200 8427 	bhi.w	16498 <event_connection_prepare+0x1548>
   15c4a:	e8df f013 	tbh	[pc, r3, lsl #1]
   15c4e:	0299      	.short	0x0299
   15c50:	03ea03ea 	.word	0x03ea03ea
   15c54:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   15c56:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15c5a:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15c5e:	2b08      	cmp	r3, #8
   15c60:	d079      	beq.n	15d56 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c62:	7903      	ldrb	r3, [r0, #4]
   15c64:	f043 0303 	orr.w	r3, r3, #3
   15c68:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15c6a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c6e:	b333      	cbz	r3, 15cbe <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15c70:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15c74:	f013 0f20 	tst.w	r3, #32
   15c78:	d00e      	beq.n	15c98 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15c7a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15c7e:	f013 0f04 	tst.w	r3, #4
   15c82:	d009      	beq.n	15c98 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   15c84:	2311      	movs	r3, #17
   15c86:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15c88:	2303      	movs	r3, #3
   15c8a:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15c8c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c90:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15c92:	2302      	movs	r3, #2
   15c94:	7143      	strb	r3, [r0, #5]
   15c96:	e009      	b.n	15cac <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15c98:	230d      	movs	r3, #13
   15c9a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15c9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15ca2:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15ca6:	2301      	movs	r3, #1
   15ca8:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15cac:	f898 3005 	ldrb.w	r3, [r8, #5]
   15cb0:	3301      	adds	r3, #1
   15cb2:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15cb6:	2300      	movs	r3, #0
   15cb8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15cbc:	e785      	b.n	15bca <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15cbe:	4620      	mov	r0, r4
   15cc0:	f7fd fa38 	bl	13134 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15cc4:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15cc8:	464b      	mov	r3, r9
   15cca:	2200      	movs	r2, #0
   15ccc:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15cd0:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15cd4:	f7f9 fba0 	bl	f418 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15cd8:	2210      	movs	r2, #16
   15cda:	4649      	mov	r1, r9
   15cdc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15ce0:	f7ea faee 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15ce4:	2208      	movs	r2, #8
   15ce6:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15cea:	f204 1033 	addw	r0, r4, #307	; 0x133
   15cee:	f7ea fae7 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15cf2:	2300      	movs	r3, #0
   15cf4:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15cf8:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15cfc:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15d00:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15d04:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15d08:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15d0c:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15d10:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15d14:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15d18:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15d1c:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15d20:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15d24:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15d28:	f042 0201 	orr.w	r2, r2, #1
   15d2c:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15d30:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   15d34:	f363 0200 	bfi	r2, r3, #0, #1
   15d38:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15d3c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15d40:	f043 0310 	orr.w	r3, r3, #16
   15d44:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15d48:	2301      	movs	r3, #1
   15d4a:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15d4e:	2305      	movs	r3, #5
   15d50:	f888 3007 	strb.w	r3, [r8, #7]
   15d54:	e739      	b.n	15bca <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   15d56:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15e8c <event_connection_prepare+0xf3c>
   15d5a:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15d5e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15d62:	f043 0320 	orr.w	r3, r3, #32
   15d66:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15d6a:	2100      	movs	r1, #0
   15d6c:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15d70:	f7fb fdc8 	bl	11904 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   15d74:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15d78:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15d7c:	f36f 0282 	bfc	r2, #2, #1
   15d80:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15d84:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15d88:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15d8c:	f36f 02c3 	bfc	r2, #3, #1
   15d90:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15d94:	e719      	b.n	15bca <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15d96:	483b      	ldr	r0, [pc, #236]	; (15e84 <event_connection_prepare+0xf34>)
   15d98:	f7f9 fa31 	bl	f1fe <mem_acquire>
	if (node_tx) {
   15d9c:	4680      	mov	r8, r0
   15d9e:	2800      	cmp	r0, #0
   15da0:	f43f af17 	beq.w	15bd2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15da4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15da8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15dac:	4b36      	ldr	r3, [pc, #216]	; (15e88 <event_connection_prepare+0xf38>)
   15dae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15db2:	7903      	ldrb	r3, [r0, #4]
   15db4:	f043 0303 	orr.w	r3, r3, #3
   15db8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15dba:	2309      	movs	r3, #9
   15dbc:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15dbe:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	db1e      	blt.n	15e04 <event_connection_prepare+0xeb4>
   15dc6:	2308      	movs	r3, #8
   15dc8:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15dcc:	2208      	movs	r2, #8
   15dce:	2100      	movs	r1, #0
   15dd0:	eb08 0002 	add.w	r0, r8, r2
   15dd4:	f014 f9fc 	bl	2a1d0 <memset>
			conn->llcp_features & 0xFF;
   15dd8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15ddc:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15de0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15de4:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15de6:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15dea:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15dee:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15df2:	4641      	mov	r1, r8
   15df4:	4620      	mov	r0, r4
   15df6:	f7fb fc95 	bl	11724 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15dfa:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15dfe:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15e02:	e6e6      	b.n	15bd2 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15e04:	230e      	movs	r3, #14
   15e06:	e7df      	b.n	15dc8 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15e08:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15e0c:	f013 0f01 	tst.w	r3, #1
   15e10:	d03e      	beq.n	15e90 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15e12:	f013 0f02 	tst.w	r3, #2
   15e16:	d076      	beq.n	15f06 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15e18:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15e1c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15e20:	4b1a      	ldr	r3, [pc, #104]	; (15e8c <event_connection_prepare+0xf3c>)
   15e22:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15e26:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15e2a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15e2c:	429a      	cmp	r2, r3
   15e2e:	d358      	bcc.n	15ee2 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   15e30:	4b16      	ldr	r3, [pc, #88]	; (15e8c <event_connection_prepare+0xf3c>)
   15e32:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15e36:	1ad3      	subs	r3, r2, r3
   15e38:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15e3a:	2b01      	cmp	r3, #1
   15e3c:	d95b      	bls.n	15ef6 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15e3e:	4b13      	ldr	r3, [pc, #76]	; (15e8c <event_connection_prepare+0xf3c>)
   15e40:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15e44:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15e4c:	2b00      	cmp	r3, #0
   15e4e:	d054      	beq.n	15efa <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15e50:	8c22      	ldrh	r2, [r4, #32]
   15e52:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15e54:	2201      	movs	r2, #1
   15e56:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15e58:	7a1a      	ldrb	r2, [r3, #8]
   15e5a:	f042 0203 	orr.w	r2, r2, #3
   15e5e:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15e60:	2206      	movs	r2, #6
   15e62:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15e64:	220c      	movs	r2, #12
   15e66:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15e68:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15e6c:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15e6e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15e72:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15e76:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15e7a:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15e7e:	f7fe fa05 	bl	1428c <packet_rx_enqueue>
   15e82:	e6a6      	b.n	15bd2 <event_connection_prepare+0xc82>
   15e84:	2000104c 	.word	0x2000104c
   15e88:	000141ff 	.word	0x000141ff
   15e8c:	20000ef4 	.word	0x20000ef4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15e90:	48b9      	ldr	r0, [pc, #740]	; (16178 <event_connection_prepare+0x1228>)
   15e92:	f7f9 f9b4 	bl	f1fe <mem_acquire>
		if (node_tx) {
   15e96:	4601      	mov	r1, r0
   15e98:	2800      	cmp	r0, #0
   15e9a:	f43f ae9a 	beq.w	15bd2 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   15e9e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15ea2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   15ea6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15eaa:	f043 0301 	orr.w	r3, r3, #1
   15eae:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15eb2:	7903      	ldrb	r3, [r0, #4]
   15eb4:	f043 0303 	orr.w	r3, r3, #3
   15eb8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15eba:	2306      	movs	r3, #6
   15ebc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15ebe:	230c      	movs	r3, #12
   15ec0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   15ec2:	2309      	movs	r3, #9
   15ec4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   15ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15eca:	7243      	strb	r3, [r0, #9]
   15ecc:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15ece:	72c3      	strb	r3, [r0, #11]
   15ed0:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   15ed2:	4620      	mov	r0, r4
   15ed4:	f7fb fc26 	bl	11724 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   15ed8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15edc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15ee0:	e677      	b.n	15bd2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   15ee2:	49a6      	ldr	r1, [pc, #664]	; (1617c <event_connection_prepare+0x122c>)
   15ee4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15ee8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15eec:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15eee:	fa52 f383 	uxtab	r3, r2, r3
   15ef2:	b2db      	uxtb	r3, r3
   15ef4:	e7a1      	b.n	15e3a <event_connection_prepare+0xeea>
		return 0;
   15ef6:	2300      	movs	r3, #0
   15ef8:	e7a8      	b.n	15e4c <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   15efa:	4040      	eors	r0, r0
   15efc:	f380 8811 	msr	BASEPRI, r0
   15f00:	f04f 0004 	mov.w	r0, #4
   15f04:	df02      	svc	2
		LL_ASSERT(0);
   15f06:	4040      	eors	r0, r0
   15f08:	f380 8811 	msr	BASEPRI, r0
   15f0c:	f04f 0004 	mov.w	r0, #4
   15f10:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15f12:	4899      	ldr	r0, [pc, #612]	; (16178 <event_connection_prepare+0x1228>)
   15f14:	f7f9 f973 	bl	f1fe <mem_acquire>
	if (node_tx) {
   15f18:	4601      	mov	r1, r0
   15f1a:	2800      	cmp	r0, #0
   15f1c:	f43f ae59 	beq.w	15bd2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15f20:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f24:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f28:	7903      	ldrb	r3, [r0, #4]
   15f2a:	f043 0303 	orr.w	r3, r3, #3
   15f2e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   15f30:	2301      	movs	r3, #1
   15f32:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15f34:	2312      	movs	r3, #18
   15f36:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   15f38:	4620      	mov	r0, r4
   15f3a:	f7fb fbf3 	bl	11724 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15f3e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15f42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15f46:	e644      	b.n	15bd2 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   15f48:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15f4c:	f012 0f01 	tst.w	r2, #1
   15f50:	d16b      	bne.n	1602a <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   15f52:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15f56:	1aeb      	subs	r3, r5, r3
   15f58:	b29b      	uxth	r3, r3
   15f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f5e:	f6bf ae38 	bge.w	15bd2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15f62:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f66:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   15f6a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15f6e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   15f72:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15f76:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15f7a:	f012 0f1c 	tst.w	r2, #28
   15f7e:	d009      	beq.n	15f94 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15f80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15f84:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15f88:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   15f8c:	f363 0ec5 	bfi	lr, r3, #3, #3
   15f90:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   15f94:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   15f98:	d008      	beq.n	15fac <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   15f9a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15f9e:	095b      	lsrs	r3, r3, #5
   15fa0:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   15fa4:	f363 0e02 	bfi	lr, r3, #0, #3
   15fa8:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   15fac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15fb0:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   15fb4:	f36e 13c7 	bfi	r3, lr, #7, #1
   15fb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15fbc:	f012 0f02 	tst.w	r2, #2
   15fc0:	d105      	bne.n	15fce <event_connection_prepare+0x107e>
   15fc2:	b2db      	uxtb	r3, r3
   15fc4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15fc8:	4299      	cmp	r1, r3
   15fca:	f000 80b0 	beq.w	1612e <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   15fce:	4b6b      	ldr	r3, [pc, #428]	; (1617c <event_connection_prepare+0x122c>)
   15fd0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15fd4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15fd8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15fda:	429a      	cmp	r2, r3
   15fdc:	f0c0 80af 	bcc.w	1613e <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   15fe0:	4b66      	ldr	r3, [pc, #408]	; (1617c <event_connection_prepare+0x122c>)
   15fe2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15fe6:	1ad3      	subs	r3, r2, r3
   15fe8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15fea:	2b01      	cmp	r3, #1
   15fec:	f240 80b1 	bls.w	16152 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   15ff0:	4b62      	ldr	r3, [pc, #392]	; (1617c <event_connection_prepare+0x122c>)
   15ff2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15ff6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   15ffe:	2b00      	cmp	r3, #0
   16000:	f000 80a9 	beq.w	16156 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   16004:	8c22      	ldrh	r2, [r4, #32]
   16006:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16008:	220c      	movs	r2, #12
   1600a:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   1600c:	2200      	movs	r2, #0
   1600e:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   16010:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16014:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16018:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   1601a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1601e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16022:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   16024:	f7fe f932 	bl	1428c <packet_rx_enqueue>
   16028:	e5d3      	b.n	15bd2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1602a:	4853      	ldr	r0, [pc, #332]	; (16178 <event_connection_prepare+0x1228>)
   1602c:	f7f9 f8e7 	bl	f1fe <mem_acquire>
		if (node_tx) {
   16030:	4680      	mov	r8, r0
   16032:	2800      	cmp	r0, #0
   16034:	f43f adcd 	beq.w	15bd2 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   16038:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1603c:	f36f 0300 	bfc	r3, #0, #1
   16040:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   16044:	b2db      	uxtb	r3, r3
   16046:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1604a:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   1604e:	d147      	bne.n	160e0 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   16050:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16054:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   16058:	2300      	movs	r3, #0
   1605a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1605e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16062:	f013 0f02 	tst.w	r3, #2
   16066:	d041      	beq.n	160ec <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   16068:	4b44      	ldr	r3, [pc, #272]	; (1617c <event_connection_prepare+0x122c>)
   1606a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1606e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16072:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16074:	429a      	cmp	r2, r3
   16076:	d321      	bcc.n	160bc <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   16078:	4b40      	ldr	r3, [pc, #256]	; (1617c <event_connection_prepare+0x122c>)
   1607a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1607e:	1ad3      	subs	r3, r2, r3
   16080:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16082:	2b01      	cmp	r3, #1
   16084:	d924      	bls.n	160d0 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   16086:	4b3d      	ldr	r3, [pc, #244]	; (1617c <event_connection_prepare+0x122c>)
   16088:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1608c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   16094:	b1f3      	cbz	r3, 160d4 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   16096:	8c22      	ldrh	r2, [r4, #32]
   16098:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1609a:	220c      	movs	r2, #12
   1609c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1609e:	2200      	movs	r2, #0
   160a0:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   160a2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   160a6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   160aa:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   160ac:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   160b0:	f3c2 0202 	ubfx	r2, r2, #0, #3
   160b4:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   160b6:	f7fe f8e9 	bl	1428c <packet_rx_enqueue>
   160ba:	e017      	b.n	160ec <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   160bc:	492f      	ldr	r1, [pc, #188]	; (1617c <event_connection_prepare+0x122c>)
   160be:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   160c2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   160c6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   160c8:	fa52 f383 	uxtab	r3, r2, r3
   160cc:	b2db      	uxtb	r3, r3
   160ce:	e7d8      	b.n	16082 <event_connection_prepare+0x1132>
		return 0;
   160d0:	2300      	movs	r3, #0
   160d2:	e7df      	b.n	16094 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   160d4:	4040      	eors	r0, r0
   160d6:	f380 8811 	msr	BASEPRI, r0
   160da:	f04f 0004 	mov.w	r0, #4
   160de:	df02      	svc	2
								 conn->latency +
   160e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   160e2:	442b      	add	r3, r5
   160e4:	b29b      	uxth	r3, r3
								 conn->latency +
   160e6:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   160e8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   160ec:	f898 3004 	ldrb.w	r3, [r8, #4]
   160f0:	f043 0303 	orr.w	r3, r3, #3
   160f4:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   160f8:	2305      	movs	r3, #5
   160fa:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   160fe:	2318      	movs	r3, #24
   16100:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   16104:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16108:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1610c:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   16110:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16114:	f3c3 1342 	ubfx	r3, r3, #5, #3
   16118:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   1611c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16120:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   16124:	4641      	mov	r1, r8
   16126:	4620      	mov	r0, r4
   16128:	f7fb fafc 	bl	11724 <ctrl_tx_enqueue>
   1612c:	e551      	b.n	15bd2 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   1612e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   16132:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   16136:	4298      	cmp	r0, r3
   16138:	f47f af49 	bne.w	15fce <event_connection_prepare+0x107e>
   1613c:	e549      	b.n	15bd2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1613e:	490f      	ldr	r1, [pc, #60]	; (1617c <event_connection_prepare+0x122c>)
   16140:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16144:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16148:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1614a:	fa52 f383 	uxtab	r3, r2, r3
   1614e:	b2db      	uxtb	r3, r3
   16150:	e74b      	b.n	15fea <event_connection_prepare+0x109a>
		return 0;
   16152:	2300      	movs	r3, #0
   16154:	e753      	b.n	15ffe <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   16156:	4040      	eors	r0, r0
   16158:	f380 8811 	msr	BASEPRI, r0
   1615c:	f04f 0004 	mov.w	r0, #4
   16160:	df02      	svc	2
			LL_ASSERT(0);
   16162:	4040      	eors	r0, r0
   16164:	f380 8811 	msr	BASEPRI, r0
   16168:	f04f 0004 	mov.w	r0, #4
   1616c:	df02      	svc	2
				conn->procedure_expire++;
   1616e:	3301      	adds	r3, #1
   16170:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16174:	e555      	b.n	15c22 <event_connection_prepare+0xcd2>
   16176:	bf00      	nop
   16178:	2000104c 	.word	0x2000104c
   1617c:	20000ef4 	.word	0x20000ef4
	if (_radio.packet_rx_acquire >=
   16180:	4bbf      	ldr	r3, [pc, #764]	; (16480 <event_connection_prepare+0x1530>)
   16182:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16186:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1618a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1618c:	429a      	cmp	r2, r3
   1618e:	d346      	bcc.n	1621e <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   16190:	4bbb      	ldr	r3, [pc, #748]	; (16480 <event_connection_prepare+0x1530>)
   16192:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16196:	eba2 0808 	sub.w	r8, r2, r8
   1619a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   1619e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   161a2:	4bb7      	ldr	r3, [pc, #732]	; (16480 <event_connection_prepare+0x1530>)
   161a4:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   161a8:	f7f9 f85d 	bl	f266 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   161ac:	4440      	add	r0, r8
   161ae:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   161b0:	28ff      	cmp	r0, #255	; 0xff
   161b2:	d840      	bhi.n	16236 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   161b4:	4bb2      	ldr	r3, [pc, #712]	; (16480 <event_connection_prepare+0x1530>)
   161b6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   161ba:	4298      	cmp	r0, r3
   161bc:	f040 8131 	bne.w	16422 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   161c0:	48b0      	ldr	r0, [pc, #704]	; (16484 <event_connection_prepare+0x1534>)
   161c2:	f7f9 f81c 	bl	f1fe <mem_acquire>
		if (!node_tx) {
   161c6:	4601      	mov	r1, r0
   161c8:	2800      	cmp	r0, #0
   161ca:	f000 812a 	beq.w	16422 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   161ce:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   161d2:	2201      	movs	r2, #1
   161d4:	f362 0301 	bfi	r3, r2, #0, #2
   161d8:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   161dc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   161e0:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   161e2:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   161e6:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   161e8:	7903      	ldrb	r3, [r0, #4]
   161ea:	f043 0303 	orr.w	r3, r3, #3
   161ee:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   161f0:	2309      	movs	r3, #9
   161f2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   161f4:	2314      	movs	r3, #20
   161f6:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   161f8:	231b      	movs	r3, #27
   161fa:	7203      	strb	r3, [r0, #8]
   161fc:	2300      	movs	r3, #0
   161fe:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   16200:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   16202:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   16204:	2348      	movs	r3, #72	; 0x48
   16206:	7283      	strb	r3, [r0, #10]
   16208:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   1620a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1620c:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   1620e:	4620      	mov	r0, r4
   16210:	f7fb fa88 	bl	11724 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   16214:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16218:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1621c:	e101      	b.n	16422 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   1621e:	4b98      	ldr	r3, [pc, #608]	; (16480 <event_connection_prepare+0x1530>)
   16220:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16224:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16228:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1622c:	fa52 f888 	uxtab	r8, r2, r8
   16230:	fa5f f888 	uxtb.w	r8, r8
   16234:	e7b3      	b.n	1619e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   16236:	4040      	eors	r0, r0
   16238:	f380 8811 	msr	BASEPRI, r0
   1623c:	f04f 0004 	mov.w	r0, #4
   16240:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   16242:	4b8f      	ldr	r3, [pc, #572]	; (16480 <event_connection_prepare+0x1530>)
   16244:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16248:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1624c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1624e:	429a      	cmp	r2, r3
   16250:	d352      	bcc.n	162f8 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   16252:	4b8b      	ldr	r3, [pc, #556]	; (16480 <event_connection_prepare+0x1530>)
   16254:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16258:	eba2 0808 	sub.w	r8, r2, r8
   1625c:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16260:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16264:	4b86      	ldr	r3, [pc, #536]	; (16480 <event_connection_prepare+0x1530>)
   16266:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   1626a:	f7f8 fffc 	bl	f266 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1626e:	4440      	add	r0, r8
   16270:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16272:	28ff      	cmp	r0, #255	; 0xff
   16274:	d84c      	bhi.n	16310 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16276:	4b82      	ldr	r3, [pc, #520]	; (16480 <event_connection_prepare+0x1530>)
   16278:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1627c:	4298      	cmp	r0, r3
   1627e:	d14d      	bne.n	1631c <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   16280:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16284:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   16288:	2100      	movs	r1, #0
   1628a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   1628e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 16480 <event_connection_prepare+0x1530>
   16292:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   16296:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1629a:	f361 02c3 	bfi	r2, r1, #3, #1
   1629e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   162a2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   162a6:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   162a8:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   162ac:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   162ae:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   162b2:	f7f8 ffd8 	bl	f266 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   162b6:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   162ba:	b10b      	cbz	r3, 162c0 <event_connection_prepare+0x1370>
			free_count_conn++;
   162bc:	3001      	adds	r0, #1
   162be:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   162c0:	4b6f      	ldr	r3, [pc, #444]	; (16480 <event_connection_prepare+0x1530>)
   162c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   162c6:	b10b      	cbz	r3, 162cc <event_connection_prepare+0x137c>
			free_count_conn++;
   162c8:	3001      	adds	r0, #1
   162ca:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   162cc:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   162d0:	f109 090e 	add.w	r9, r9, #14
   162d4:	fa1f f989 	uxth.w	r9, r9
   162d8:	f029 0903 	bic.w	r9, r9, #3
   162dc:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   162e0:	3001      	adds	r0, #1
   162e2:	4b67      	ldr	r3, [pc, #412]	; (16480 <event_connection_prepare+0x1530>)
   162e4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   162e8:	4298      	cmp	r0, r3
   162ea:	d038      	beq.n	1635e <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   162ec:	4b64      	ldr	r3, [pc, #400]	; (16480 <event_connection_prepare+0x1530>)
   162ee:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   162f2:	4599      	cmp	r9, r3
   162f4:	d833      	bhi.n	1635e <event_connection_prepare+0x140e>
   162f6:	e066      	b.n	163c6 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   162f8:	4b61      	ldr	r3, [pc, #388]	; (16480 <event_connection_prepare+0x1530>)
   162fa:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   162fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16302:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   16306:	fa52 f888 	uxtab	r8, r2, r8
   1630a:	fa5f f888 	uxtb.w	r8, r8
   1630e:	e7a7      	b.n	16260 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   16310:	4040      	eors	r0, r0
   16312:	f380 8811 	msr	BASEPRI, r0
   16316:	f04f 0004 	mov.w	r0, #4
   1631a:	df02      	svc	2
			LL_ASSERT(0);
   1631c:	4040      	eors	r0, r0
   1631e:	f380 8811 	msr	BASEPRI, r0
   16322:	f04f 0004 	mov.w	r0, #4
   16326:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   16328:	3b01      	subs	r3, #1
   1632a:	4a55      	ldr	r2, [pc, #340]	; (16480 <event_connection_prepare+0x1530>)
   1632c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16330:	4f53      	ldr	r7, [pc, #332]	; (16480 <event_connection_prepare+0x1530>)
   16332:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   16336:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   1633a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   1633e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   16342:	6818      	ldr	r0, [r3, #0]
   16344:	f7f8 ff77 	bl	f236 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   16348:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   1634c:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   16350:	3a01      	subs	r2, #1
   16352:	4293      	cmp	r3, r2
   16354:	da14      	bge.n	16380 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   16356:	3301      	adds	r3, #1
   16358:	4a49      	ldr	r2, [pc, #292]	; (16480 <event_connection_prepare+0x1530>)
   1635a:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   1635e:	4a48      	ldr	r2, [pc, #288]	; (16480 <event_connection_prepare+0x1530>)
   16360:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   16364:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   16368:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   1636a:	4293      	cmp	r3, r2
   1636c:	d00e      	beq.n	1638c <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   1636e:	2b00      	cmp	r3, #0
   16370:	d1da      	bne.n	16328 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   16372:	4a43      	ldr	r2, [pc, #268]	; (16480 <event_connection_prepare+0x1530>)
   16374:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   16378:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   1637a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   1637e:	e7d7      	b.n	16330 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   16380:	4040      	eors	r0, r0
   16382:	f380 8811 	msr	BASEPRI, r0
   16386:	f04f 0004 	mov.w	r0, #4
   1638a:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1638c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1638e:	2b29      	cmp	r3, #41	; 0x29
   16390:	d85f      	bhi.n	16452 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   16392:	2234      	movs	r2, #52	; 0x34
   16394:	4b3a      	ldr	r3, [pc, #232]	; (16480 <event_connection_prepare+0x1530>)
   16396:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   1639a:	4b39      	ldr	r3, [pc, #228]	; (16480 <event_connection_prepare+0x1530>)
   1639c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   163a0:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   163a4:	fbb2 f2f1 	udiv	r2, r2, r1
   163a8:	b2d2      	uxtb	r2, r2
   163aa:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   163ae:	2a00      	cmp	r2, #0
   163b0:	d053      	beq.n	1645a <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   163b2:	4833      	ldr	r0, [pc, #204]	; (16480 <event_connection_prepare+0x1530>)
   163b4:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   163b8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   163bc:	f7f8 fefa 	bl	f1b4 <mem_init>
			packet_rx_allocate(4);
   163c0:	2004      	movs	r0, #4
   163c2:	f7fb fc59 	bl	11c78 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   163c6:	4b2e      	ldr	r3, [pc, #184]	; (16480 <event_connection_prepare+0x1530>)
   163c8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   163cc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   163d0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   163d2:	429a      	cmp	r2, r3
   163d4:	d347      	bcc.n	16466 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   163d6:	4b2a      	ldr	r3, [pc, #168]	; (16480 <event_connection_prepare+0x1530>)
   163d8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   163dc:	1ad3      	subs	r3, r2, r3
   163de:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   163e0:	2b01      	cmp	r3, #1
   163e2:	d94a      	bls.n	1647a <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   163e4:	4b26      	ldr	r3, [pc, #152]	; (16480 <event_connection_prepare+0x1530>)
   163e6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   163ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   163ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   163f2:	2b00      	cmp	r3, #0
   163f4:	d04a      	beq.n	1648c <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   163f6:	8c22      	ldrh	r2, [r4, #32]
   163f8:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   163fa:	2201      	movs	r2, #1
   163fc:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   163fe:	7a1a      	ldrb	r2, [r3, #8]
   16400:	f042 0203 	orr.w	r2, r2, #3
   16404:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   16406:	2209      	movs	r2, #9
   16408:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   1640a:	2215      	movs	r2, #21
   1640c:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   1640e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   16410:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   16412:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   16414:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   16416:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   16418:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   1641a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1641c:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   1641e:	f7fd ff35 	bl	1428c <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   16422:	1d23      	adds	r3, r4, #4
   16424:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   16426:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   16428:	3207      	adds	r2, #7
   1642a:	b2d2      	uxtb	r2, r2
   1642c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   16430:	2800      	cmp	r0, #0
   16432:	db37      	blt.n	164a4 <event_connection_prepare+0x1554>
   16434:	4814      	ldr	r0, [pc, #80]	; (16488 <event_connection_prepare+0x1538>)
   16436:	9403      	str	r4, [sp, #12]
   16438:	9002      	str	r0, [sp, #8]
   1643a:	9201      	str	r2, [sp, #4]
   1643c:	9100      	str	r1, [sp, #0]
   1643e:	4622      	mov	r2, r4
   16440:	990a      	ldr	r1, [sp, #40]	; 0x28
   16442:	4630      	mov	r0, r6
   16444:	f7fe fc7e 	bl	14d44 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   16448:	3501      	adds	r5, #1
   1644a:	8465      	strh	r5, [r4, #34]	; 0x22
}
   1644c:	b00f      	add	sp, #60	; 0x3c
   1644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   16452:	4b0b      	ldr	r3, [pc, #44]	; (16480 <event_connection_prepare+0x1530>)
   16454:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   16458:	e79f      	b.n	1639a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   1645a:	4040      	eors	r0, r0
   1645c:	f380 8811 	msr	BASEPRI, r0
   16460:	f04f 0004 	mov.w	r0, #4
   16464:	df02      	svc	2
		return (_radio.packet_rx_count -
   16466:	4906      	ldr	r1, [pc, #24]	; (16480 <event_connection_prepare+0x1530>)
   16468:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1646c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16470:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16472:	fa52 f383 	uxtab	r3, r2, r3
   16476:	b2db      	uxtb	r3, r3
   16478:	e7b2      	b.n	163e0 <event_connection_prepare+0x1490>
		return 0;
   1647a:	2300      	movs	r3, #0
   1647c:	e7b9      	b.n	163f2 <event_connection_prepare+0x14a2>
   1647e:	bf00      	nop
   16480:	20000ef4 	.word	0x20000ef4
   16484:	2000104c 	.word	0x2000104c
   16488:	00016901 	.word	0x00016901
		LL_ASSERT(node_rx);
   1648c:	4040      	eors	r0, r0
   1648e:	f380 8811 	msr	BASEPRI, r0
   16492:	f04f 0004 	mov.w	r0, #4
   16496:	df02      	svc	2
		LL_ASSERT(0);
   16498:	4040      	eors	r0, r0
   1649a:	f380 8811 	msr	BASEPRI, r0
   1649e:	f04f 0004 	mov.w	r0, #4
   164a2:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   164a4:	4800      	ldr	r0, [pc, #0]	; (164a8 <event_connection_prepare+0x1558>)
   164a6:	e7c6      	b.n	16436 <event_connection_prepare+0x14e6>
   164a8:	00016a3d 	.word	0x00016a3d

000164ac <event_slave_prepare>:
{
   164ac:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   164ae:	f7fe fd4f 	bl	14f50 <event_connection_prepare>
   164b2:	bd08      	pop	{r3, pc}

000164b4 <event_master_prepare>:
{
   164b4:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   164b6:	f7fe fd4b 	bl	14f50 <event_connection_prepare>
   164ba:	bd08      	pop	{r3, pc}

000164bc <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   164bc:	4b20      	ldr	r3, [pc, #128]	; (16540 <event_scan_prepare+0x84>)
   164be:	7b1b      	ldrb	r3, [r3, #12]
   164c0:	bb23      	cbnz	r3, 1650c <event_scan_prepare+0x50>
{
   164c2:	b530      	push	{r4, r5, lr}
   164c4:	b085      	sub	sp, #20
   164c6:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   164c8:	4c1d      	ldr	r4, [pc, #116]	; (16540 <event_scan_prepare+0x84>)
   164ca:	2306      	movs	r3, #6
   164cc:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   164ce:	2200      	movs	r2, #0
   164d0:	9203      	str	r2, [sp, #12]
   164d2:	4a1c      	ldr	r2, [pc, #112]	; (16544 <event_scan_prepare+0x88>)
   164d4:	9202      	str	r2, [sp, #8]
   164d6:	9301      	str	r3, [sp, #4]
   164d8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   164dc:	9300      	str	r3, [sp, #0]
   164de:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   164e2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   164e6:	f7fe fc2d 	bl	14d44 <event_common_prepare>
	if (_radio.scanner.conn) {
   164ea:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   164ee:	b15b      	cbz	r3, 16508 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   164f0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   164f4:	2b00      	cmp	r3, #0
   164f6:	db0f      	blt.n	16518 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   164f8:	4b13      	ldr	r3, [pc, #76]	; (16548 <event_scan_prepare+0x8c>)
   164fa:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   164fc:	2201      	movs	r2, #1
   164fe:	4611      	mov	r1, r2
   16500:	2000      	movs	r0, #0
   16502:	f7f8 fd3b 	bl	ef7c <mayfly_enqueue>
		LL_ASSERT(!retval);
   16506:	b9a8      	cbnz	r0, 16534 <event_scan_prepare+0x78>
}
   16508:	b005      	add	sp, #20
   1650a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1650c:	4040      	eors	r0, r0
   1650e:	f380 8811 	msr	BASEPRI, r0
   16512:	f04f 0004 	mov.w	r0, #4
   16516:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   16518:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   1651c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   16520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   16524:	4291      	cmp	r1, r2
   16526:	bf2c      	ite	cs
   16528:	ebc3 0301 	rsbcs	r3, r3, r1
   1652c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   16530:	441d      	add	r5, r3
   16532:	e7e1      	b.n	164f8 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   16534:	4040      	eors	r0, r0
   16536:	f380 8811 	msr	BASEPRI, r0
   1653a:	f04f 0004 	mov.w	r0, #4
   1653e:	df02      	svc	2
   16540:	20000ef4 	.word	0x20000ef4
   16544:	00016bd9 	.word	0x00016bd9
   16548:	2000bc98 	.word	0x2000bc98
   1654c:	00000000 	.word	0x00000000

00016550 <mayfly_xtal_stop_calc>:
{
   16550:	b530      	push	{r4, r5, lr}
   16552:	b08d      	sub	sp, #52	; 0x34
   16554:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16556:	2302      	movs	r3, #2
   16558:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   1655a:	23ff      	movs	r3, #255	; 0xff
   1655c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   16560:	2300      	movs	r3, #0
   16562:	930a      	str	r3, [sp, #40]	; 0x28
   16564:	e012      	b.n	1658c <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   16566:	2101      	movs	r1, #1
   16568:	2000      	movs	r0, #0
   1656a:	f7fa fc71 	bl	10e50 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1656e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16570:	2b02      	cmp	r3, #2
   16572:	d0f8      	beq.n	16566 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16576:	b9cb      	cbnz	r3, 165ac <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   16578:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   1657c:	2aff      	cmp	r2, #255	; 0xff
   1657e:	d01b      	beq.n	165b8 <mayfly_xtal_stop_calc+0x68>
   16580:	4b8b      	ldr	r3, [pc, #556]	; (167b0 <mayfly_xtal_stop_calc+0x260>)
   16582:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   16586:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   16588:	429a      	cmp	r2, r3
   1658a:	db15      	blt.n	165b8 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1658c:	ab0b      	add	r3, sp, #44	; 0x2c
   1658e:	9302      	str	r3, [sp, #8]
   16590:	4b88      	ldr	r3, [pc, #544]	; (167b4 <mayfly_xtal_stop_calc+0x264>)
   16592:	9301      	str	r3, [sp, #4]
   16594:	ab0a      	add	r3, sp, #40	; 0x28
   16596:	9300      	str	r3, [sp, #0]
   16598:	ab09      	add	r3, sp, #36	; 0x24
   1659a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   1659e:	2101      	movs	r1, #1
   165a0:	2000      	movs	r0, #0
   165a2:	f7fa fbd5 	bl	10d50 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   165a6:	2802      	cmp	r0, #2
   165a8:	d1e4      	bne.n	16574 <mayfly_xtal_stop_calc+0x24>
   165aa:	e7e0      	b.n	1656e <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   165ac:	4040      	eors	r0, r0
   165ae:	f380 8811 	msr	BASEPRI, r0
   165b2:	f04f 0004 	mov.w	r0, #4
   165b6:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   165b8:	2aff      	cmp	r2, #255	; 0xff
   165ba:	d002      	beq.n	165c2 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   165bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   165be:	2ba8      	cmp	r3, #168	; 0xa8
   165c0:	d91a      	bls.n	165f8 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   165c2:	2100      	movs	r1, #0
   165c4:	2001      	movs	r0, #1
   165c6:	f7fb fdcd 	bl	12164 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   165ca:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   165ce:	1f53      	subs	r3, r2, #5
   165d0:	b2db      	uxtb	r3, r3
   165d2:	2bf9      	cmp	r3, #249	; 0xf9
   165d4:	d80e      	bhi.n	165f4 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   165d6:	2a06      	cmp	r2, #6
   165d8:	f200 80d1 	bhi.w	1677e <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   165dc:	2a05      	cmp	r2, #5
   165de:	f000 80de 	beq.w	1679e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   165e2:	2a06      	cmp	r2, #6
   165e4:	f040 80d5 	bne.w	16792 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   165e8:	4873      	ldr	r0, [pc, #460]	; (167b8 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   165ea:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   165ee:	2101      	movs	r1, #1
   165f0:	f7fe fb80 	bl	14cf4 <prepare_normal_set>
}
   165f4:	b00d      	add	sp, #52	; 0x34
   165f6:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   165f8:	2101      	movs	r1, #1
   165fa:	4608      	mov	r0, r1
   165fc:	f7fb fdb2 	bl	12164 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   16600:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   16604:	2b04      	cmp	r3, #4
   16606:	d9f5      	bls.n	165f4 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   16608:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1660a:	2b06      	cmp	r3, #6
   1660c:	d82a      	bhi.n	16664 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   1660e:	2b05      	cmp	r3, #5
   16610:	d03a      	beq.n	16688 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   16612:	2b06      	cmp	r3, #6
   16614:	d132      	bne.n	1667c <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   16616:	4968      	ldr	r1, [pc, #416]	; (167b8 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   16618:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   1661a:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   1661c:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   1661e:	429a      	cmp	r2, r3
   16620:	bf38      	it	cc
   16622:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   16624:	680b      	ldr	r3, [r1, #0]
   16626:	2b00      	cmp	r3, #0
   16628:	db31      	blt.n	1668e <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   1662a:	429a      	cmp	r2, r3
   1662c:	d336      	bcc.n	1669c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1662e:	2c06      	cmp	r4, #6
   16630:	d84e      	bhi.n	166d0 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   16632:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   16634:	2d00      	cmp	r5, #0
   16636:	d0dd      	beq.n	165f4 <mayfly_xtal_stop_calc+0xa4>
   16638:	2c00      	cmp	r4, #0
   1663a:	d0db      	beq.n	165f4 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   1663c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1663e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   16640:	4293      	cmp	r3, r2
   16642:	d1d7      	bne.n	165f4 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   16644:	b292      	uxth	r2, r2
   16646:	485d      	ldr	r0, [pc, #372]	; (167bc <mayfly_xtal_stop_calc+0x26c>)
   16648:	fba2 0100 	umull	r0, r1, r2, r0
   1664c:	f240 1323 	movw	r3, #291	; 0x123
   16650:	fb03 1102 	mla	r1, r3, r2, r1
   16654:	a354      	add	r3, pc, #336	; (adr r3, 167a8 <mayfly_xtal_stop_calc+0x258>)
   16656:	e9d3 2300 	ldrd	r2, r3, [r3]
   1665a:	f7ea fd4f 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   1665e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   16662:	e050      	b.n	16706 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   16664:	3b07      	subs	r3, #7
   16666:	b29a      	uxth	r2, r3
   16668:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1666c:	4b50      	ldr	r3, [pc, #320]	; (167b0 <mayfly_xtal_stop_calc+0x260>)
   1666e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16672:	f7f8 fe01 	bl	f278 <mem_get>
   16676:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   16678:	4601      	mov	r1, r0
   1667a:	e7ce      	b.n	1661a <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   1667c:	4040      	eors	r0, r0
   1667e:	f380 8811 	msr	BASEPRI, r0
   16682:	f04f 0004 	mov.w	r0, #4
   16686:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16688:	494d      	ldr	r1, [pc, #308]	; (167c0 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   1668a:	2500      	movs	r5, #0
   1668c:	e7c5      	b.n	1661a <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   1668e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   16692:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16696:	4413      	add	r3, r2
   16698:	930a      	str	r3, [sp, #40]	; 0x28
   1669a:	e7c8      	b.n	1662e <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   1669c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   1669e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   166a2:	b29b      	uxth	r3, r3
					ticker_status =
   166a4:	9106      	str	r1, [sp, #24]
   166a6:	4947      	ldr	r1, [pc, #284]	; (167c4 <mayfly_xtal_stop_calc+0x274>)
   166a8:	9105      	str	r1, [sp, #20]
   166aa:	2000      	movs	r0, #0
   166ac:	9004      	str	r0, [sp, #16]
   166ae:	9003      	str	r0, [sp, #12]
   166b0:	9302      	str	r3, [sp, #8]
   166b2:	9001      	str	r0, [sp, #4]
   166b4:	9000      	str	r0, [sp, #0]
   166b6:	2101      	movs	r1, #1
   166b8:	f7fa fac0 	bl	10c3c <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   166bc:	2800      	cmp	r0, #0
   166be:	d0b6      	beq.n	1662e <mayfly_xtal_stop_calc+0xde>
   166c0:	2802      	cmp	r0, #2
   166c2:	d0b4      	beq.n	1662e <mayfly_xtal_stop_calc+0xde>
   166c4:	4040      	eors	r0, r0
   166c6:	f380 8811 	msr	BASEPRI, r0
   166ca:	f04f 0004 	mov.w	r0, #4
   166ce:	df02      	svc	2
					mem_get(_radio.conn_pool,
   166d0:	3c07      	subs	r4, #7
				conn_curr =
   166d2:	b2a2      	uxth	r2, r4
   166d4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   166d8:	4b35      	ldr	r3, [pc, #212]	; (167b0 <mayfly_xtal_stop_calc+0x260>)
   166da:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   166de:	f7f8 fdcb 	bl	f278 <mem_get>
   166e2:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   166e4:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   166e6:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   166e8:	429a      	cmp	r2, r3
   166ea:	bf38      	it	cc
   166ec:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   166ee:	6803      	ldr	r3, [r0, #0]
   166f0:	2b00      	cmp	r3, #0
   166f2:	da9f      	bge.n	16634 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   166f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   166f8:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   166fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   166fc:	4413      	add	r3, r2
   166fe:	930a      	str	r3, [sp, #40]	; 0x28
   16700:	e798      	b.n	16634 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   16702:	1a1b      	subs	r3, r3, r0
   16704:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   16706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16708:	4298      	cmp	r0, r3
   1670a:	d3fa      	bcc.n	16702 <mayfly_xtal_stop_calc+0x1b2>
   1670c:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   16710:	2900      	cmp	r1, #0
   16712:	db1c      	blt.n	1674e <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   16714:	2900      	cmp	r1, #0
   16716:	f6ff af6d 	blt.w	165f4 <mayfly_xtal_stop_calc+0xa4>
   1671a:	f995 201d 	ldrsb.w	r2, [r5, #29]
   1671e:	2a00      	cmp	r2, #0
   16720:	f6bf af68 	bge.w	165f4 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   16724:	68e2      	ldr	r2, [r4, #12]
								625) +
   16726:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   16728:	4293      	cmp	r3, r2
   1672a:	f4bf af63 	bcs.w	165f4 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   1672e:	4628      	mov	r0, r5
   16730:	f7fb f852 	bl	117d8 <conn_update_req>
					if ((status == 2) &&
   16734:	2802      	cmp	r0, #2
   16736:	f47f af5d 	bne.w	165f4 <mayfly_xtal_stop_calc+0xa4>
   1673a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1673e:	f013 0f02 	tst.w	r3, #2
   16742:	f43f af57 	beq.w	165f4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   16746:	4620      	mov	r0, r4
   16748:	f7fb f846 	bl	117d8 <conn_update_req>
   1674c:	e752      	b.n	165f4 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   1674e:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16752:	2a00      	cmp	r2, #0
   16754:	dbde      	blt.n	16714 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   16756:	68e2      	ldr	r2, [r4, #12]
							 625) +
   16758:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   1675a:	4293      	cmp	r3, r2
   1675c:	d2da      	bcs.n	16714 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   1675e:	4620      	mov	r0, r4
   16760:	f7fb f83a 	bl	117d8 <conn_update_req>
					if ((status == 2) &&
   16764:	2802      	cmp	r0, #2
   16766:	f47f af45 	bne.w	165f4 <mayfly_xtal_stop_calc+0xa4>
   1676a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   1676e:	f013 0f02 	tst.w	r3, #2
   16772:	f43f af3f 	beq.w	165f4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   16776:	4628      	mov	r0, r5
   16778:	f7fb f82e 	bl	117d8 <conn_update_req>
   1677c:	e73a      	b.n	165f4 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   1677e:	3a07      	subs	r2, #7
   16780:	b292      	uxth	r2, r2
   16782:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16786:	4b0a      	ldr	r3, [pc, #40]	; (167b0 <mayfly_xtal_stop_calc+0x260>)
   16788:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1678c:	f7f8 fd74 	bl	f278 <mem_get>
   16790:	e72b      	b.n	165ea <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   16792:	4040      	eors	r0, r0
   16794:	f380 8811 	msr	BASEPRI, r0
   16798:	f04f 0004 	mov.w	r0, #4
   1679c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   1679e:	4808      	ldr	r0, [pc, #32]	; (167c0 <mayfly_xtal_stop_calc+0x270>)
   167a0:	e723      	b.n	165ea <mayfly_xtal_stop_calc+0x9a>
   167a2:	bf00      	nop
   167a4:	f3af 8000 	nop.w
   167a8:	1afd498d 	.word	0x1afd498d
   167ac:	00000007 	.word	0x00000007
   167b0:	20000ef4 	.word	0x20000ef4
   167b4:	00011585 	.word	0x00011585
   167b8:	20000fc0 	.word	0x20000fc0
   167bc:	09ce5400 	.word	0x09ce5400
   167c0:	20000f08 	.word	0x20000f08
   167c4:	000115b1 	.word	0x000115b1

000167c8 <preempt_calc>:
{
   167c8:	b570      	push	{r4, r5, r6, lr}
   167ca:	4605      	mov	r5, r0
   167cc:	460e      	mov	r6, r1
   167ce:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   167d0:	f7fa fb4e 	bl	10e70 <ticker_ticks_now_get>
	u32_t diff =
   167d4:	4621      	mov	r1, r4
   167d6:	f7fa fb4f 	bl	10e78 <ticker_ticks_diff_get>
	diff += 3;
   167da:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   167dc:	2c09      	cmp	r4, #9
   167de:	d801      	bhi.n	167e4 <preempt_calc+0x1c>
	return 0;
   167e0:	2000      	movs	r0, #0
   167e2:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   167e4:	2100      	movs	r1, #0
   167e6:	4608      	mov	r0, r1
   167e8:	f7fb fcbc 	bl	12164 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   167ec:	4632      	mov	r2, r6
   167ee:	2100      	movs	r1, #0
   167f0:	4628      	mov	r0, r5
   167f2:	f7fe fa7f 	bl	14cf4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   167f6:	68ab      	ldr	r3, [r5, #8]
   167f8:	441c      	add	r4, r3
		if (diff <
   167fa:	2c26      	cmp	r4, #38	; 0x26
   167fc:	d802      	bhi.n	16804 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   167fe:	60ac      	str	r4, [r5, #8]
		return 1;
   16800:	2001      	movs	r0, #1
   16802:	bd70      	pop	{r4, r5, r6, pc}
   16804:	2001      	movs	r0, #1
}
   16806:	bd70      	pop	{r4, r5, r6, pc}

00016808 <event_adv>:
{
   16808:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1680a:	4b3b      	ldr	r3, [pc, #236]	; (168f8 <event_adv+0xf0>)
   1680c:	7bdb      	ldrb	r3, [r3, #15]
   1680e:	2b00      	cmp	r3, #0
   16810:	d142      	bne.n	16898 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   16812:	4b39      	ldr	r3, [pc, #228]	; (168f8 <event_adv+0xf0>)
   16814:	7b1b      	ldrb	r3, [r3, #12]
   16816:	b2db      	uxtb	r3, r3
   16818:	2b05      	cmp	r3, #5
   1681a:	d143      	bne.n	168a4 <event_adv+0x9c>
   1681c:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   1681e:	4c36      	ldr	r4, [pc, #216]	; (168f8 <event_adv+0xf0>)
   16820:	2101      	movs	r1, #1
   16822:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   16824:	2300      	movs	r3, #0
   16826:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   16828:	2305      	movs	r3, #5
   1682a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   1682c:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   1682e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   16832:	f000 0007 	and.w	r0, r0, #7
   16836:	f7fb fd5b 	bl	122f0 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   1683a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1683e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16842:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   16846:	f363 0243 	bfi	r2, r3, #1, #3
   1684a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   1684e:	f7fc f841 	bl	128d4 <adv_setup>
	if (ctrl_rl_enabled()) {
   16852:	f003 fa43 	bl	19cdc <ctrl_rl_enabled>
   16856:	bb58      	cbnz	r0, 168b0 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   16858:	4b27      	ldr	r3, [pc, #156]	; (168f8 <event_adv+0xf0>)
   1685a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1685e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   16862:	d134      	bne.n	168ce <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   16864:	4c24      	ldr	r4, [pc, #144]	; (168f8 <event_adv+0xf0>)
   16866:	68a2      	ldr	r2, [r4, #8]
   16868:	f105 0109 	add.w	r1, r5, #9
   1686c:	2001      	movs	r0, #1
   1686e:	f7f8 ffe9 	bl	f844 <radio_tmr_start>
	radio_tmr_end_capture();
   16872:	f7f9 f899 	bl	f9a8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   16876:	462a      	mov	r2, r5
   16878:	2105      	movs	r1, #5
   1687a:	f104 0014 	add.w	r0, r4, #20
   1687e:	f7ff ffa3 	bl	167c8 <preempt_calc>
   16882:	bb68      	cbnz	r0, 168e0 <event_adv+0xd8>
		ticker_status =
   16884:	2300      	movs	r3, #0
   16886:	4a1d      	ldr	r2, [pc, #116]	; (168fc <event_adv+0xf4>)
   16888:	4619      	mov	r1, r3
   1688a:	4618      	mov	r0, r3
   1688c:	f7fa faa4 	bl	10dd8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16890:	b108      	cbz	r0, 16896 <event_adv+0x8e>
   16892:	2802      	cmp	r0, #2
   16894:	d129      	bne.n	168ea <event_adv+0xe2>
   16896:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16898:	4040      	eors	r0, r0
   1689a:	f380 8811 	msr	BASEPRI, r0
   1689e:	f04f 0004 	mov.w	r0, #4
   168a2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   168a4:	4040      	eors	r0, r0
   168a6:	f380 8811 	msr	BASEPRI, r0
   168aa:	f04f 0004 	mov.w	r0, #4
   168ae:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   168b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   168b4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   168b8:	bf14      	ite	ne
   168ba:	2001      	movne	r0, #1
   168bc:	2000      	moveq	r0, #0
   168be:	f003 f80f 	bl	198e0 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   168c2:	1c82      	adds	r2, r0, #2
   168c4:	7841      	ldrb	r1, [r0, #1]
   168c6:	7800      	ldrb	r0, [r0, #0]
   168c8:	f7f8 ff3e 	bl	f748 <radio_filter_configure>
   168cc:	e7ca      	b.n	16864 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   168ce:	2001      	movs	r0, #1
   168d0:	f003 f806 	bl	198e0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   168d4:	1c82      	adds	r2, r0, #2
   168d6:	7841      	ldrb	r1, [r0, #1]
   168d8:	7800      	ldrb	r0, [r0, #0]
   168da:	f7f8 ff35 	bl	f748 <radio_filter_configure>
   168de:	e7c1      	b.n	16864 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   168e0:	2204      	movs	r2, #4
   168e2:	7422      	strb	r2, [r4, #16]
		radio_disable();
   168e4:	f7f8 fea0 	bl	f628 <radio_disable>
   168e8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   168ea:	4040      	eors	r0, r0
   168ec:	f380 8811 	msr	BASEPRI, r0
   168f0:	f04f 0004 	mov.w	r0, #4
   168f4:	df02      	svc	2
   168f6:	bf00      	nop
   168f8:	20000ef4 	.word	0x20000ef4
   168fc:	00011db1 	.word	0x00011db1

00016900 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16900:	4a4c      	ldr	r2, [pc, #304]	; (16a34 <event_master+0x134>)
   16902:	7bd2      	ldrb	r2, [r2, #15]
   16904:	2a00      	cmp	r2, #0
   16906:	d174      	bne.n	169f2 <event_master+0xf2>
{
   16908:	b530      	push	{r4, r5, lr}
   1690a:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   1690c:	4a49      	ldr	r2, [pc, #292]	; (16a34 <event_master+0x134>)
   1690e:	7b12      	ldrb	r2, [r2, #12]
   16910:	b2d2      	uxtb	r2, r2
   16912:	8c19      	ldrh	r1, [r3, #32]
   16914:	1dcc      	adds	r4, r1, #7
   16916:	42a2      	cmp	r2, r4
   16918:	d171      	bne.n	169fe <event_master+0xfe>
   1691a:	461c      	mov	r4, r3
   1691c:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   1691e:	4b45      	ldr	r3, [pc, #276]	; (16a34 <event_master+0x134>)
   16920:	2204      	movs	r2, #4
   16922:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   16924:	2002      	movs	r0, #2
   16926:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   16928:	2200      	movs	r2, #0
   1692a:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   1692c:	3107      	adds	r1, #7
   1692e:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   16930:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16932:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   16934:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   16938:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   1693c:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16940:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16942:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16944:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   16946:	f7fb fd69 	bl	1241c <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   1694a:	a903      	add	r1, sp, #12
   1694c:	4620      	mov	r0, r4
   1694e:	f7fb fed3 	bl	126f8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   16952:	9b03      	ldr	r3, [sp, #12]
   16954:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16958:	781a      	ldrb	r2, [r3, #0]
   1695a:	f361 02c3 	bfi	r2, r1, #3, #1
   1695e:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16960:	9a03      	ldr	r2, [sp, #12]
   16962:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16966:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1696a:	7811      	ldrb	r1, [r2, #0]
   1696c:	f363 0182 	bfi	r1, r3, #2, #1
   16970:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   16972:	4620      	mov	r0, r4
   16974:	f7fb fce0 	bl	12338 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16978:	2096      	movs	r0, #150	; 0x96
   1697a:	f7f8 ff5d 	bl	f838 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   1697e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16982:	f000 0007 	and.w	r0, r0, #7
   16986:	f7f8 fea5 	bl	f6d4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   1698a:	9903      	ldr	r1, [sp, #12]
   1698c:	4620      	mov	r0, r4
   1698e:	f7fb ff49 	bl	12824 <tx_packet_set>
	if (conn->data_chan_sel) {
   16992:	7f63      	ldrb	r3, [r4, #29]
   16994:	f013 0f40 	tst.w	r3, #64	; 0x40
   16998:	d037      	beq.n	16a0a <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1699a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1699c:	3801      	subs	r0, #1
   1699e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   169a2:	f104 0217 	add.w	r2, r4, #23
   169a6:	8be1      	ldrh	r1, [r4, #30]
   169a8:	b280      	uxth	r0, r0
   169aa:	f7fa fe8b 	bl	116c4 <chan_sel_2>
	chan_set(data_chan_use);
   169ae:	f7fb ff65 	bl	1287c <chan_set>
		remainder_us = radio_tmr_start(1,
   169b2:	4b20      	ldr	r3, [pc, #128]	; (16a34 <event_master+0x134>)
   169b4:	689a      	ldr	r2, [r3, #8]
   169b6:	f105 0109 	add.w	r1, r5, #9
   169ba:	2001      	movs	r0, #1
   169bc:	f7f8 ff42 	bl	f844 <radio_tmr_start>
		radio_tmr_end_capture();
   169c0:	f7f8 fff2 	bl	f9a8 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   169c4:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   169c6:	3107      	adds	r1, #7
   169c8:	462a      	mov	r2, r5
   169ca:	b2c9      	uxtb	r1, r1
   169cc:	4620      	mov	r0, r4
   169ce:	f7ff fefb 	bl	167c8 <preempt_calc>
	if (0 !=
   169d2:	bb38      	cbnz	r0, 16a24 <event_master+0x124>
		ticker_status =
   169d4:	2300      	movs	r3, #0
   169d6:	4a18      	ldr	r2, [pc, #96]	; (16a38 <event_master+0x138>)
   169d8:	4619      	mov	r1, r3
   169da:	4618      	mov	r0, r3
   169dc:	f7fa f9fc 	bl	10dd8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   169e0:	b328      	cbz	r0, 16a2e <event_master+0x12e>
   169e2:	2802      	cmp	r0, #2
   169e4:	d023      	beq.n	16a2e <event_master+0x12e>
   169e6:	4040      	eors	r0, r0
   169e8:	f380 8811 	msr	BASEPRI, r0
   169ec:	f04f 0004 	mov.w	r0, #4
   169f0:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   169f2:	4040      	eors	r0, r0
   169f4:	f380 8811 	msr	BASEPRI, r0
   169f8:	f04f 0004 	mov.w	r0, #4
   169fc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   169fe:	4040      	eors	r0, r0
   16a00:	f380 8811 	msr	BASEPRI, r0
   16a04:	f04f 0004 	mov.w	r0, #4
   16a08:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16a0a:	7fa1      	ldrb	r1, [r4, #30]
   16a0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16a0e:	7f63      	ldrb	r3, [r4, #29]
   16a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16a14:	9300      	str	r3, [sp, #0]
   16a16:	f104 0317 	add.w	r3, r4, #23
   16a1a:	f104 001f 	add.w	r0, r4, #31
   16a1e:	f7fa fdf3 	bl	11608 <chan_sel_1>
   16a22:	e7c4      	b.n	169ae <event_master+0xae>
		_radio.state = STATE_STOP;
   16a24:	2204      	movs	r2, #4
   16a26:	4b03      	ldr	r3, [pc, #12]	; (16a34 <event_master+0x134>)
   16a28:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16a2a:	f7f8 fdfd 	bl	f628 <radio_disable>
}
   16a2e:	b005      	add	sp, #20
   16a30:	bd30      	pop	{r4, r5, pc}
   16a32:	bf00      	nop
   16a34:	20000ef4 	.word	0x20000ef4
   16a38:	00011db1 	.word	0x00011db1

00016a3c <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16a3c:	4a64      	ldr	r2, [pc, #400]	; (16bd0 <event_slave+0x194>)
   16a3e:	7bd2      	ldrb	r2, [r2, #15]
   16a40:	2a00      	cmp	r2, #0
   16a42:	f040 809d 	bne.w	16b80 <event_slave+0x144>
{
   16a46:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a48:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   16a4a:	4a61      	ldr	r2, [pc, #388]	; (16bd0 <event_slave+0x194>)
   16a4c:	7b11      	ldrb	r1, [r2, #12]
   16a4e:	b2c9      	uxtb	r1, r1
   16a50:	8c1a      	ldrh	r2, [r3, #32]
   16a52:	1dd4      	adds	r4, r2, #7
   16a54:	42a1      	cmp	r1, r4
   16a56:	f040 8099 	bne.w	16b8c <event_slave+0x150>
   16a5a:	461c      	mov	r4, r3
   16a5c:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16a5e:	4d5c      	ldr	r5, [pc, #368]	; (16bd0 <event_slave+0x194>)
   16a60:	2303      	movs	r3, #3
   16a62:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   16a64:	2301      	movs	r3, #1
   16a66:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16a68:	2700      	movs	r7, #0
   16a6a:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16a6c:	3207      	adds	r2, #7
   16a6e:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16a70:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16a72:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   16a74:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16a78:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16a7c:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16a80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16a82:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16a84:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   16a86:	4620      	mov	r0, r4
   16a88:	f7fb fc56 	bl	12338 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16a8c:	2096      	movs	r0, #150	; 0x96
   16a8e:	f7f8 fed3 	bl	f838 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16a92:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16a96:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16a9a:	09d3      	lsrs	r3, r2, #7
   16a9c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16aa0:	4639      	mov	r1, r7
   16aa2:	f000 0007 	and.w	r0, r0, #7
   16aa6:	f7f8 fe1d 	bl	f6e4 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16aaa:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16aae:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16ab2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16ab6:	3108      	adds	r1, #8
   16ab8:	4620      	mov	r0, r4
   16aba:	f7fb fc51 	bl	12360 <rx_packet_set>
	if (conn->data_chan_sel) {
   16abe:	7f63      	ldrb	r3, [r4, #29]
   16ac0:	f013 0f40 	tst.w	r3, #64	; 0x40
   16ac4:	d068      	beq.n	16b98 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16ac6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16ac8:	3801      	subs	r0, #1
   16aca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16ace:	f104 0217 	add.w	r2, r4, #23
   16ad2:	8be1      	ldrh	r1, [r4, #30]
   16ad4:	b280      	uxth	r0, r0
   16ad6:	f7fa fdf5 	bl	116c4 <chan_sel_2>
	chan_set(data_chan_use);
   16ada:	f7fb fecf 	bl	1287c <chan_set>
		conn->slave.window_widening_prepare_us;
   16ade:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16ae0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16ae2:	4413      	add	r3, r2
   16ae4:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16ae6:	2200      	movs	r2, #0
   16ae8:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16aea:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16aec:	4293      	cmp	r3, r2
   16aee:	d900      	bls.n	16af2 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16af0:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16af2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16af4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16af6:	4413      	add	r3, r2
   16af8:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16afa:	2700      	movs	r7, #0
   16afc:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16afe:	4b34      	ldr	r3, [pc, #208]	; (16bd0 <event_slave+0x194>)
   16b00:	689a      	ldr	r2, [r3, #8]
   16b02:	f106 0109 	add.w	r1, r6, #9
   16b06:	4638      	mov	r0, r7
   16b08:	f7f8 fe9c 	bl	f844 <radio_tmr_start>
   16b0c:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16b0e:	f7f8 ff17 	bl	f940 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16b12:	4638      	mov	r0, r7
   16b14:	f7f8 ff36 	bl	f984 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16b18:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16b1a:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16b1e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16b20:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16b22:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16b24:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16b28:	f000 0007 	and.w	r0, r0, #7
   16b2c:	f7f8 fd68 	bl	f600 <radio_rx_ready_delay_get>
   16b30:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   16b32:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16b36:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16b3a:	2802      	cmp	r0, #2
   16b3c:	d03c      	beq.n	16bb8 <event_slave+0x17c>
   16b3e:	2804      	cmp	r0, #4
   16b40:	d037      	beq.n	16bb2 <event_slave+0x176>
		return 40;
   16b42:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   16b44:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   16b46:	2101      	movs	r1, #1
   16b48:	f7f8 fd5c 	bl	f604 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16b4c:	4428      	add	r0, r5
   16b4e:	f7f8 fed5 	bl	f8fc <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   16b52:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16b54:	3107      	adds	r1, #7
   16b56:	4632      	mov	r2, r6
   16b58:	b2c9      	uxtb	r1, r1
   16b5a:	4620      	mov	r0, r4
   16b5c:	f7ff fe34 	bl	167c8 <preempt_calc>
   16b60:	bb60      	cbnz	r0, 16bbc <event_slave+0x180>
		ticker_status =
   16b62:	2300      	movs	r3, #0
   16b64:	4a1b      	ldr	r2, [pc, #108]	; (16bd4 <event_slave+0x198>)
   16b66:	4619      	mov	r1, r3
   16b68:	4618      	mov	r0, r3
   16b6a:	f7fa f935 	bl	10dd8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16b6e:	b350      	cbz	r0, 16bc6 <event_slave+0x18a>
   16b70:	2802      	cmp	r0, #2
   16b72:	d028      	beq.n	16bc6 <event_slave+0x18a>
   16b74:	4040      	eors	r0, r0
   16b76:	f380 8811 	msr	BASEPRI, r0
   16b7a:	f04f 0004 	mov.w	r0, #4
   16b7e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b80:	4040      	eors	r0, r0
   16b82:	f380 8811 	msr	BASEPRI, r0
   16b86:	f04f 0004 	mov.w	r0, #4
   16b8a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16b8c:	4040      	eors	r0, r0
   16b8e:	f380 8811 	msr	BASEPRI, r0
   16b92:	f04f 0004 	mov.w	r0, #4
   16b96:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b98:	7fa1      	ldrb	r1, [r4, #30]
   16b9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16b9c:	7f63      	ldrb	r3, [r4, #29]
   16b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16ba2:	9300      	str	r3, [sp, #0]
   16ba4:	f104 0317 	add.w	r3, r4, #23
   16ba8:	f104 001f 	add.w	r0, r4, #31
   16bac:	f7fa fd2c 	bl	11608 <chan_sel_1>
   16bb0:	e793      	b.n	16ada <event_slave+0x9e>
		return 376;
   16bb2:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16bb6:	e7c5      	b.n	16b44 <event_slave+0x108>
		return 24;
   16bb8:	2318      	movs	r3, #24
   16bba:	e7c3      	b.n	16b44 <event_slave+0x108>
		_radio.state = STATE_STOP;
   16bbc:	2204      	movs	r2, #4
   16bbe:	4b04      	ldr	r3, [pc, #16]	; (16bd0 <event_slave+0x194>)
   16bc0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16bc2:	f7f8 fd31 	bl	f628 <radio_disable>
	packet_tx_enqueue(2);
   16bc6:	2002      	movs	r0, #2
   16bc8:	f7fb fc28 	bl	1241c <packet_tx_enqueue>
}
   16bcc:	b003      	add	sp, #12
   16bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bd0:	20000ef4 	.word	0x20000ef4
   16bd4:	00011db1 	.word	0x00011db1

00016bd8 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16bd8:	4b67      	ldr	r3, [pc, #412]	; (16d78 <event_scan+0x1a0>)
   16bda:	7bdb      	ldrb	r3, [r3, #15]
   16bdc:	2b00      	cmp	r3, #0
   16bde:	f040 808b 	bne.w	16cf8 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16be2:	4b65      	ldr	r3, [pc, #404]	; (16d78 <event_scan+0x1a0>)
   16be4:	7b1b      	ldrb	r3, [r3, #12]
   16be6:	b2db      	uxtb	r3, r3
   16be8:	2b06      	cmp	r3, #6
   16bea:	f040 808b 	bne.w	16d04 <event_scan+0x12c>
{
   16bee:	b570      	push	{r4, r5, r6, lr}
   16bf0:	b08c      	sub	sp, #48	; 0x30
   16bf2:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16bf4:	4c60      	ldr	r4, [pc, #384]	; (16d78 <event_scan+0x1a0>)
   16bf6:	2302      	movs	r3, #2
   16bf8:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16bfa:	2101      	movs	r1, #1
   16bfc:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16bfe:	2200      	movs	r2, #0
   16c00:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16c02:	2306      	movs	r3, #6
   16c04:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16c06:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16c08:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16c0c:	f362 0341 	bfi	r3, r2, #1, #1
   16c10:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16c14:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16c18:	f000 0007 	and.w	r0, r0, #7
   16c1c:	f7fb fb68 	bl	122f0 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16c20:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16c24:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16c28:	1c42      	adds	r2, r0, #1
   16c2a:	f362 0383 	bfi	r3, r2, #2, #2
   16c2e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16c32:	3025      	adds	r0, #37	; 0x25
   16c34:	f7fb fe22 	bl	1287c <chan_set>
	if (_radio.scanner.chan == 3) {
   16c38:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16c3c:	f003 030c 	and.w	r3, r3, #12
   16c40:	2b0c      	cmp	r3, #12
   16c42:	d065      	beq.n	16d10 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   16c44:	2096      	movs	r0, #150	; 0x96
   16c46:	f7f8 fdf7 	bl	f838 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16c4a:	2300      	movs	r3, #0
   16c4c:	461a      	mov	r2, r3
   16c4e:	4619      	mov	r1, r3
   16c50:	4618      	mov	r0, r3
   16c52:	f7f8 fd47 	bl	f6e4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16c56:	4b48      	ldr	r3, [pc, #288]	; (16d78 <event_scan+0x1a0>)
   16c58:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16c5c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   16c64:	3008      	adds	r0, #8
   16c66:	f7f8 fcbb 	bl	f5e0 <radio_pkt_rx_set>
	radio_rssi_measure();
   16c6a:	f7f8 fd4b 	bl	f704 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16c6e:	f003 f835 	bl	19cdc <ctrl_rl_enabled>
   16c72:	2800      	cmp	r0, #0
   16c74:	d153      	bne.n	16d1e <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   16c76:	4b40      	ldr	r3, [pc, #256]	; (16d78 <event_scan+0x1a0>)
   16c78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16c7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   16c80:	d165      	bne.n	16d4e <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   16c82:	4c3d      	ldr	r4, [pc, #244]	; (16d78 <event_scan+0x1a0>)
   16c84:	68a2      	ldr	r2, [r4, #8]
   16c86:	f105 0109 	add.w	r1, r5, #9
   16c8a:	2000      	movs	r0, #0
   16c8c:	f7f8 fdda 	bl	f844 <radio_tmr_start>
	radio_tmr_end_capture();
   16c90:	f7f8 fe8a 	bl	f9a8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16c94:	462a      	mov	r2, r5
   16c96:	2106      	movs	r1, #6
   16c98:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16c9c:	f7ff fd94 	bl	167c8 <preempt_calc>
   16ca0:	2800      	cmp	r0, #0
   16ca2:	d15d      	bne.n	16d60 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16ca4:	4b34      	ldr	r3, [pc, #208]	; (16d78 <event_scan+0x1a0>)
   16ca6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16caa:	3309      	adds	r3, #9
		ticker_status =
   16cac:	f641 0287 	movw	r2, #6279	; 0x1887
   16cb0:	9208      	str	r2, [sp, #32]
   16cb2:	4a32      	ldr	r2, [pc, #200]	; (16d7c <event_scan+0x1a4>)
   16cb4:	9207      	str	r2, [sp, #28]
   16cb6:	2204      	movs	r2, #4
   16cb8:	9206      	str	r2, [sp, #24]
   16cba:	4931      	ldr	r1, [pc, #196]	; (16d80 <event_scan+0x1a8>)
   16cbc:	9105      	str	r1, [sp, #20]
   16cbe:	2000      	movs	r0, #0
   16cc0:	9004      	str	r0, [sp, #16]
   16cc2:	9003      	str	r0, [sp, #12]
   16cc4:	9002      	str	r0, [sp, #8]
   16cc6:	9001      	str	r0, [sp, #4]
   16cc8:	9300      	str	r3, [sp, #0]
   16cca:	462b      	mov	r3, r5
   16ccc:	4601      	mov	r1, r0
   16cce:	f7f9 ff67 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16cd2:	b108      	cbz	r0, 16cd8 <event_scan+0x100>
   16cd4:	2802      	cmp	r0, #2
   16cd6:	d149      	bne.n	16d6c <event_scan+0x194>
			ticker_status =
   16cd8:	2300      	movs	r3, #0
   16cda:	4a2a      	ldr	r2, [pc, #168]	; (16d84 <event_scan+0x1ac>)
   16cdc:	4619      	mov	r1, r3
   16cde:	4618      	mov	r0, r3
   16ce0:	f7fa f87a 	bl	10dd8 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16ce4:	2800      	cmp	r0, #0
   16ce6:	d03f      	beq.n	16d68 <event_scan+0x190>
   16ce8:	2802      	cmp	r0, #2
   16cea:	d03d      	beq.n	16d68 <event_scan+0x190>
   16cec:	4040      	eors	r0, r0
   16cee:	f380 8811 	msr	BASEPRI, r0
   16cf2:	f04f 0004 	mov.w	r0, #4
   16cf6:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16cf8:	4040      	eors	r0, r0
   16cfa:	f380 8811 	msr	BASEPRI, r0
   16cfe:	f04f 0004 	mov.w	r0, #4
   16d02:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16d04:	4040      	eors	r0, r0
   16d06:	f380 8811 	msr	BASEPRI, r0
   16d0a:	f04f 0004 	mov.w	r0, #4
   16d0e:	df02      	svc	2
		_radio.scanner.chan = 0;
   16d10:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16d14:	f36f 0283 	bfc	r2, #2, #2
   16d18:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16d1c:	e792      	b.n	16c44 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16d1e:	4b16      	ldr	r3, [pc, #88]	; (16d78 <event_scan+0x1a0>)
   16d20:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16d24:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16d28:	f002 fdda 	bl	198e0 <ctrl_filter_get>
   16d2c:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16d2e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   16d32:	f002 fd4f 	bl	197d4 <ctrl_irks_get>
   16d36:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16d38:	1ca2      	adds	r2, r4, #2
   16d3a:	7861      	ldrb	r1, [r4, #1]
   16d3c:	7820      	ldrb	r0, [r4, #0]
   16d3e:	f7f8 fd03 	bl	f748 <radio_filter_configure>
		radio_ar_configure(count, irks);
   16d42:	4631      	mov	r1, r6
   16d44:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16d48:	f7f8 feda 	bl	fb00 <radio_ar_configure>
   16d4c:	e799      	b.n	16c82 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16d4e:	2001      	movs	r0, #1
   16d50:	f002 fdc6 	bl	198e0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16d54:	1c82      	adds	r2, r0, #2
   16d56:	7841      	ldrb	r1, [r0, #1]
   16d58:	7800      	ldrb	r0, [r0, #0]
   16d5a:	f7f8 fcf5 	bl	f748 <radio_filter_configure>
   16d5e:	e790      	b.n	16c82 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16d60:	2204      	movs	r2, #4
   16d62:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16d64:	f7f8 fc60 	bl	f628 <radio_disable>
}
   16d68:	b00c      	add	sp, #48	; 0x30
   16d6a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16d6c:	4040      	eors	r0, r0
   16d6e:	f380 8811 	msr	BASEPRI, r0
   16d72:	f04f 0004 	mov.w	r0, #4
   16d76:	df02      	svc	2
   16d78:	20000ef4 	.word	0x20000ef4
   16d7c:	000118f5 	.word	0x000118f5
   16d80:	000120d9 	.word	0x000120d9
   16d84:	00011db1 	.word	0x00011db1

00016d88 <access_addr_get>:
{
   16d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d8a:	b083      	sub	sp, #12
	retry = 3;
   16d8c:	2403      	movs	r4, #3
   16d8e:	e059      	b.n	16e44 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16d90:	4040      	eors	r0, r0
   16d92:	f380 8811 	msr	BASEPRI, r0
   16d96:	f04f 0004 	mov.w	r0, #4
   16d9a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16d9c:	9900      	ldr	r1, [sp, #0]
   16d9e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16da0:	4607      	mov	r7, r0
	bit_idx = 31;
   16da2:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16da4:	2501      	movs	r5, #1
	while (bit_idx--) {
   16da6:	e010      	b.n	16dca <access_addr_get+0x42>
			consecutive_cnt++;
   16da8:	3501      	adds	r5, #1
   16daa:	b2ed      	uxtb	r5, r5
   16dac:	e01c      	b.n	16de8 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16dae:	b9ff      	cbnz	r7, 16df0 <access_addr_get+0x68>
			if (consecutive_bit) {
   16db0:	b319      	cbz	r1, 16dfa <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16db2:	2201      	movs	r2, #1
   16db4:	409a      	lsls	r2, r3
   16db6:	ea26 0602 	bic.w	r6, r6, r2
   16dba:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16dbc:	4601      	mov	r1, r0
			transitions++;
   16dbe:	3701      	adds	r7, #1
   16dc0:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16dc2:	2501      	movs	r5, #1
	while (bit_idx--) {
   16dc4:	461a      	mov	r2, r3
		if (transitions > 24) {
   16dc6:	2f18      	cmp	r7, #24
   16dc8:	d81d      	bhi.n	16e06 <access_addr_get+0x7e>
	while (bit_idx--) {
   16dca:	1e53      	subs	r3, r2, #1
   16dcc:	b2db      	uxtb	r3, r3
   16dce:	b32a      	cbz	r2, 16e1c <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16dd0:	9e00      	ldr	r6, [sp, #0]
   16dd2:	469e      	mov	lr, r3
   16dd4:	fa26 f203 	lsr.w	r2, r6, r3
   16dd8:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16ddc:	4291      	cmp	r1, r2
   16dde:	d0e3      	beq.n	16da8 <access_addr_get+0x20>
			transitions++;
   16de0:	3701      	adds	r7, #1
   16de2:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16de4:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16de6:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16de8:	2d06      	cmp	r5, #6
   16dea:	d8e1      	bhi.n	16db0 <access_addr_get+0x28>
   16dec:	2b1b      	cmp	r3, #27
   16dee:	d9de      	bls.n	16dae <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16df0:	2b1a      	cmp	r3, #26
   16df2:	d8e7      	bhi.n	16dc4 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16df4:	2f01      	cmp	r7, #1
   16df6:	d8e5      	bhi.n	16dc4 <access_addr_get+0x3c>
   16df8:	e7da      	b.n	16db0 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16dfa:	2101      	movs	r1, #1
   16dfc:	fa01 f203 	lsl.w	r2, r1, r3
   16e00:	4316      	orrs	r6, r2
   16e02:	9600      	str	r6, [sp, #0]
   16e04:	e7db      	b.n	16dbe <access_addr_get+0x36>
			if (consecutive_bit) {
   16e06:	2900      	cmp	r1, #0
   16e08:	d02d      	beq.n	16e66 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16e0a:	f10e 0e01 	add.w	lr, lr, #1
   16e0e:	2301      	movs	r3, #1
   16e10:	fa03 f30e 	lsl.w	r3, r3, lr
   16e14:	425b      	negs	r3, r3
   16e16:	9a00      	ldr	r2, [sp, #0]
   16e18:	4013      	ands	r3, r2
   16e1a:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16e1c:	4b19      	ldr	r3, [pc, #100]	; (16e84 <access_addr_get+0xfc>)
   16e1e:	9a00      	ldr	r2, [sp, #0]
   16e20:	4053      	eors	r3, r2
   16e22:	a802      	add	r0, sp, #8
   16e24:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16e28:	2104      	movs	r1, #4
   16e2a:	f7f8 fa6c 	bl	f306 <util_ones_count_get>
   16e2e:	2801      	cmp	r0, #1
   16e30:	d908      	bls.n	16e44 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16e32:	9800      	ldr	r0, [sp, #0]
   16e34:	b283      	uxth	r3, r0
   16e36:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16e3a:	d120      	bne.n	16e7e <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16e3c:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16e3e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   16e42:	d11c      	bne.n	16e7e <access_addr_get+0xf6>
	LL_ASSERT(retry);
   16e44:	2c00      	cmp	r4, #0
   16e46:	d0a3      	beq.n	16d90 <access_addr_get+0x8>
	retry--;
   16e48:	3c01      	subs	r4, #1
   16e4a:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16e4c:	2004      	movs	r0, #4
	while (len) {
   16e4e:	2800      	cmp	r0, #0
   16e50:	d0a4      	beq.n	16d9c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   16e52:	4669      	mov	r1, sp
   16e54:	f7f9 fc1c 	bl	10690 <rand_get>
   16e58:	b2c0      	uxtb	r0, r0
		if (len) {
   16e5a:	2800      	cmp	r0, #0
   16e5c:	d0f7      	beq.n	16e4e <access_addr_get+0xc6>
   16e5e:	bf20      	wfe
  __ASM volatile ("sev");
   16e60:	bf40      	sev
  __ASM volatile ("wfe");
   16e62:	bf20      	wfe
   16e64:	e7f3      	b.n	16e4e <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   16e66:	f10e 0e01 	add.w	lr, lr, #1
   16e6a:	2301      	movs	r3, #1
   16e6c:	fa03 fe0e 	lsl.w	lr, r3, lr
   16e70:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   16e74:	9b00      	ldr	r3, [sp, #0]
   16e76:	ea43 030e 	orr.w	r3, r3, lr
   16e7a:	9300      	str	r3, [sp, #0]
   16e7c:	e7ce      	b.n	16e1c <access_addr_get+0x94>
}
   16e7e:	b003      	add	sp, #12
   16e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e82:	bf00      	nop
   16e84:	8e89bed6 	.word	0x8e89bed6

00016e88 <isr_rx_scan>:
{
   16e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e8c:	b08f      	sub	sp, #60	; 0x3c
   16e8e:	4617      	mov	r7, r2
   16e90:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   16e94:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16e98:	4b99      	ldr	r3, [pc, #612]	; (17100 <isr_rx_scan+0x278>)
   16e9a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16e9e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   16ea2:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   16ea6:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16eaa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16eae:	b15b      	cbz	r3, 16ec8 <isr_rx_scan+0x40>
   16eb0:	4b93      	ldr	r3, [pc, #588]	; (17100 <isr_rx_scan+0x278>)
   16eb2:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   16eb6:	b34b      	cbz	r3, 16f0c <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16eb8:	4a91      	ldr	r2, [pc, #580]	; (17100 <isr_rx_scan+0x278>)
   16eba:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16ebe:	b2db      	uxtb	r3, r3
   16ec0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16ec4:	4293      	cmp	r3, r2
   16ec6:	d021      	beq.n	16f0c <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16ec8:	7a23      	ldrb	r3, [r4, #8]
   16eca:	f013 030f 	ands.w	r3, r3, #15
   16ece:	f000 82e9 	beq.w	174a4 <isr_rx_scan+0x61c>
   16ed2:	2b06      	cmp	r3, #6
   16ed4:	f000 82e6 	beq.w	174a4 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16ed8:	2b00      	cmp	r3, #0
   16eda:	f000 83d9 	beq.w	17690 <isr_rx_scan+0x808>
   16ede:	2b01      	cmp	r3, #1
   16ee0:	f000 8355 	beq.w	1758e <isr_rx_scan+0x706>
	bool dir_report = false;
   16ee4:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16ee8:	7a23      	ldrb	r3, [r4, #8]
   16eea:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   16eee:	2b02      	cmp	r3, #2
   16ef0:	f000 83d0 	beq.w	17694 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16ef4:	2b06      	cmp	r3, #6
   16ef6:	f000 83cd 	beq.w	17694 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   16efa:	2b07      	cmp	r3, #7
   16efc:	f000 839f 	beq.w	1763e <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   16f00:	2b04      	cmp	r3, #4
   16f02:	f000 83a3 	beq.w	1764c <isr_rx_scan+0x7c4>
		return 1;
   16f06:	f04f 0a01 	mov.w	sl, #1
   16f0a:	e3cb      	b.n	176a4 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16f0c:	4b7c      	ldr	r3, [pc, #496]	; (17100 <isr_rx_scan+0x278>)
   16f0e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16f12:	f013 0f10 	tst.w	r3, #16
   16f16:	d072      	beq.n	16ffe <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16f18:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16f1a:	f013 030f 	ands.w	r3, r3, #15
   16f1e:	f000 80da 	beq.w	170d6 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16f22:	2b01      	cmp	r3, #1
   16f24:	f000 808f 	beq.w	17046 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16f28:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   16f2a:	2b00      	cmp	r3, #0
   16f2c:	d0cc      	beq.n	16ec8 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   16f2e:	f7f8 fd4d 	bl	f9cc <radio_tmr_end_get>
   16f32:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   16f36:	4b72      	ldr	r3, [pc, #456]	; (17100 <isr_rx_scan+0x278>)
   16f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   16f3c:	4871      	ldr	r0, [pc, #452]	; (17104 <isr_rx_scan+0x27c>)
   16f3e:	fba3 0100 	umull	r0, r1, r3, r0
   16f42:	2207      	movs	r2, #7
   16f44:	fb02 1103 	mla	r1, r2, r3, r1
   16f48:	a36b      	add	r3, pc, #428	; (adr r3, 170f8 <isr_rx_scan+0x270>)
   16f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f4e:	f7ea f8d5 	bl	10fc <__aeabi_uldivmod>
   16f52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   16f56:	4581      	cmp	r9, r0
   16f58:	d2b6      	bcs.n	16ec8 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   16f5a:	4b69      	ldr	r3, [pc, #420]	; (17100 <isr_rx_scan+0x278>)
   16f5c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16f60:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f64:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16f66:	429a      	cmp	r2, r3
   16f68:	f0c0 80b7 	bcc.w	170da <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   16f6c:	4b64      	ldr	r3, [pc, #400]	; (17100 <isr_rx_scan+0x278>)
   16f6e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16f72:	1ad3      	subs	r3, r2, r3
   16f74:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16f76:	2b03      	cmp	r3, #3
   16f78:	f240 80b9 	bls.w	170ee <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   16f7c:	4b60      	ldr	r3, [pc, #384]	; (17100 <isr_rx_scan+0x278>)
   16f7e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16f82:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f86:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16f8a:	f1b9 0f00 	cmp.w	r9, #0
   16f8e:	f000 839a 	beq.w	176c6 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   16f92:	f8df a16c 	ldr.w	sl, [pc, #364]	; 17100 <isr_rx_scan+0x278>
   16f96:	2304      	movs	r3, #4
   16f98:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   16f9c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   16fa0:	2300      	movs	r3, #0
   16fa2:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16fa6:	f7f8 fb91 	bl	f6cc <radio_pkt_scratch_get>
   16faa:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   16fac:	7803      	ldrb	r3, [r0, #0]
   16fae:	2205      	movs	r2, #5
   16fb0:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   16fb4:	b2db      	uxtb	r3, r3
   16fb6:	f043 0320 	orr.w	r3, r3, #32
   16fba:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16fbc:	7a23      	ldrb	r3, [r4, #8]
   16fbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16fc2:	7802      	ldrb	r2, [r0, #0]
   16fc4:	f363 12c7 	bfi	r2, r3, #7, #1
   16fc8:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   16fca:	2322      	movs	r3, #34	; 0x22
   16fcc:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16fce:	4628      	mov	r0, r5
   16fd0:	f002 fbde 	bl	19790 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16fd4:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   16fd8:	f013 0f01 	tst.w	r3, #1
   16fdc:	f000 8098 	beq.w	17110 <isr_rx_scan+0x288>
   16fe0:	2800      	cmp	r0, #0
   16fe2:	f000 8095 	beq.w	17110 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   16fe6:	7832      	ldrb	r2, [r6, #0]
   16fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16fec:	4633      	mov	r3, r6
   16fee:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   16ff2:	2206      	movs	r2, #6
   16ff4:	4601      	mov	r1, r0
   16ff6:	4618      	mov	r0, r3
   16ff8:	f7e9 f962 	bl	2c0 <memcpy>
   16ffc:	e096      	b.n	1712c <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   16ffe:	2dff      	cmp	r5, #255	; 0xff
   17000:	d00a      	beq.n	17018 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   17002:	4b3f      	ldr	r3, [pc, #252]	; (17100 <isr_rx_scan+0x278>)
   17004:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   17008:	429d      	cmp	r5, r3
   1700a:	bf14      	ite	ne
   1700c:	2300      	movne	r3, #0
   1700e:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   17010:	2b00      	cmp	r3, #0
   17012:	d181      	bne.n	16f18 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17014:	2300      	movs	r3, #0
   17016:	e788      	b.n	16f2a <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   17018:	4b39      	ldr	r3, [pc, #228]	; (17100 <isr_rx_scan+0x278>)
   1701a:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1701e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17022:	7a23      	ldrb	r3, [r4, #8]
   17024:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17028:	429a      	cmp	r2, r3
   1702a:	d001      	beq.n	17030 <isr_rx_scan+0x1a8>
   1702c:	2300      	movs	r3, #0
   1702e:	e7ef      	b.n	17010 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   17030:	2206      	movs	r2, #6
   17032:	f108 0102 	add.w	r1, r8, #2
   17036:	4834      	ldr	r0, [pc, #208]	; (17108 <isr_rx_scan+0x280>)
   17038:	f013 f836 	bl	2a0a8 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1703c:	b908      	cbnz	r0, 17042 <isr_rx_scan+0x1ba>
   1703e:	2301      	movs	r3, #1
   17040:	e7e6      	b.n	17010 <isr_rx_scan+0x188>
   17042:	2300      	movs	r3, #0
   17044:	e7e4      	b.n	17010 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17046:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17048:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1704c:	462a      	mov	r2, r5
   1704e:	4651      	mov	r1, sl
   17050:	09c0      	lsrs	r0, r0, #7
   17052:	f002 fe17 	bl	19c84 <ctrl_rl_addr_resolve>
   17056:	4681      	mov	r9, r0
   17058:	b9d0      	cbnz	r0, 17090 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1705a:	4b29      	ldr	r3, [pc, #164]	; (17100 <isr_rx_scan+0x278>)
   1705c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17060:	f013 0f01 	tst.w	r3, #1
   17064:	d119      	bne.n	1709a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17066:	4b26      	ldr	r3, [pc, #152]	; (17100 <isr_rx_scan+0x278>)
   17068:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1706c:	7a23      	ldrb	r3, [r4, #8]
   1706e:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17070:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17074:	d017      	beq.n	170a6 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17076:	4b22      	ldr	r3, [pc, #136]	; (17100 <isr_rx_scan+0x278>)
   17078:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1707c:	f013 0f20 	tst.w	r3, #32
   17080:	d003      	beq.n	1708a <isr_rx_scan+0x202>
   17082:	f994 3008 	ldrsb.w	r3, [r4, #8]
   17086:	2b00      	cmp	r3, #0
   17088:	db17      	blt.n	170ba <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   1708a:	f1b9 0f00 	cmp.w	r9, #0
   1708e:	d11d      	bne.n	170cc <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17090:	f1b9 0f00 	cmp.w	r9, #0
   17094:	d01d      	beq.n	170d2 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17096:	2301      	movs	r3, #1
   17098:	e747      	b.n	16f2a <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1709a:	4628      	mov	r0, r5
   1709c:	f002 fb78 	bl	19790 <ctrl_lrpa_get>
   170a0:	2800      	cmp	r0, #0
   170a2:	d1f5      	bne.n	17090 <isr_rx_scan+0x208>
   170a4:	e7df      	b.n	17066 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   170a6:	2206      	movs	r2, #6
   170a8:	4651      	mov	r1, sl
   170aa:	4818      	ldr	r0, [pc, #96]	; (1710c <isr_rx_scan+0x284>)
   170ac:	f012 fffc 	bl	2a0a8 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   170b0:	2800      	cmp	r0, #0
   170b2:	d1e0      	bne.n	17076 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   170b4:	f04f 0901 	mov.w	r9, #1
   170b8:	e7ea      	b.n	17090 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   170ba:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   170be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   170c2:	2b40      	cmp	r3, #64	; 0x40
   170c4:	d1e1      	bne.n	1708a <isr_rx_scan+0x202>
		return true;
   170c6:	f04f 0901 	mov.w	r9, #1
   170ca:	e7de      	b.n	1708a <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   170cc:	f04f 0901 	mov.w	r9, #1
   170d0:	e7de      	b.n	17090 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   170d2:	2300      	movs	r3, #0
   170d4:	e729      	b.n	16f2a <isr_rx_scan+0xa2>
   170d6:	2301      	movs	r3, #1
   170d8:	e727      	b.n	16f2a <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   170da:	4909      	ldr	r1, [pc, #36]	; (17100 <isr_rx_scan+0x278>)
   170dc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   170e0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   170e4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   170e6:	fa52 f383 	uxtab	r3, r2, r3
   170ea:	b2db      	uxtb	r3, r3
   170ec:	e743      	b.n	16f76 <isr_rx_scan+0xee>
		return 0;
   170ee:	f04f 0900 	mov.w	r9, #0
   170f2:	e74a      	b.n	16f8a <isr_rx_scan+0x102>
   170f4:	f3af 8000 	nop.w
   170f8:	3b9aca00 	.word	0x3b9aca00
   170fc:	00000000 	.word	0x00000000
   17100:	20000ef4 	.word	0x20000ef4
   17104:	1afd498d 	.word	0x1afd498d
   17108:	20000fda 	.word	0x20000fda
   1710c:	20000fd4 	.word	0x20000fd4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17110:	4962      	ldr	r1, [pc, #392]	; (1729c <isr_rx_scan+0x414>)
   17112:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   17116:	09db      	lsrs	r3, r3, #7
   17118:	7832      	ldrb	r2, [r6, #0]
   1711a:	f363 1286 	bfi	r2, r3, #6, #1
   1711e:	4630      	mov	r0, r6
   17120:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   17124:	2206      	movs	r2, #6
   17126:	31e0      	adds	r1, #224	; 0xe0
   17128:	f7e9 f8ca 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   1712c:	f106 0308 	add.w	r3, r6, #8
   17130:	930b      	str	r3, [sp, #44]	; 0x2c
   17132:	2206      	movs	r2, #6
   17134:	f104 010a 	add.w	r1, r4, #10
   17138:	4618      	mov	r0, r3
   1713a:	f7e9 f8c1 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   1713e:	2204      	movs	r2, #4
   17140:	f108 0110 	add.w	r1, r8, #16
   17144:	f106 000e 	add.w	r0, r6, #14
   17148:	f7e9 f8ba 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   1714c:	2203      	movs	r2, #3
   1714e:	f108 0114 	add.w	r1, r8, #20
   17152:	f106 0012 	add.w	r0, r6, #18
   17156:	f7e9 f8b3 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   1715a:	2301      	movs	r3, #1
   1715c:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1715e:	4b4f      	ldr	r3, [pc, #316]	; (1729c <isr_rx_scan+0x414>)
   17160:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   17164:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17168:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1716c:	f7f8 fc2e 	bl	f9cc <radio_tmr_end_get>
   17170:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   17174:	4b49      	ldr	r3, [pc, #292]	; (1729c <isr_rx_scan+0x414>)
   17176:	689b      	ldr	r3, [r3, #8]
   17178:	2b00      	cmp	r3, #0
   1717a:	dd75      	ble.n	17268 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   1717c:	4b47      	ldr	r3, [pc, #284]	; (1729c <isr_rx_scan+0x414>)
   1717e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   17182:	2b00      	cmp	r3, #0
   17184:	d174      	bne.n	17270 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   17186:	75b3      	strb	r3, [r6, #22]
   17188:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1718a:	2100      	movs	r1, #0
   1718c:	4608      	mov	r0, r1
   1718e:	f7f8 fa33 	bl	f5f8 <radio_tx_ready_delay_get>
   17192:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17196:	2100      	movs	r1, #0
   17198:	4608      	mov	r0, r1
   1719a:	f7f8 fa2f 	bl	f5fc <radio_tx_chain_delay_get>
   1719e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   171a2:	f10a 031e 	add.w	r3, sl, #30
   171a6:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   171a8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1729c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   171ac:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   171b0:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   171b2:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   171b6:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   171b8:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   171bc:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   171be:	2205      	movs	r2, #5
   171c0:	f108 0117 	add.w	r1, r8, #23
   171c4:	f106 001e 	add.w	r0, r6, #30
   171c8:	f7e9 f87a 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   171cc:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   171d0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   171d4:	f362 0304 	bfi	r3, r2, #0, #5
   171d8:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   171dc:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   171e0:	b2db      	uxtb	r3, r3
   171e2:	f362 1347 	bfi	r3, r2, #5, #3
   171e6:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   171ea:	f7f8 fa83 	bl	f6f4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   171ee:	4630      	mov	r0, r6
   171f0:	f7f8 f9fc 	bl	f5ec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   171f4:	f7f8 fa32 	bl	f65c <radio_is_ready>
   171f8:	4682      	mov	sl, r0
   171fa:	2800      	cmp	r0, #0
   171fc:	d148      	bne.n	17290 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   171fe:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17202:	4b26      	ldr	r3, [pc, #152]	; (1729c <isr_rx_scan+0x414>)
   17204:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   17208:	4640      	mov	r0, r8
   1720a:	f7f8 f838 	bl	f27e <mem_index_get>
   1720e:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17212:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17216:	2206      	movs	r2, #6
   17218:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   1721c:	2300      	movs	r3, #0
   1721e:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   17222:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17226:	4631      	mov	r1, r6
   17228:	f811 3b02 	ldrb.w	r3, [r1], #2
   1722c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17230:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17234:	f109 001b 	add.w	r0, r9, #27
   17238:	f7e9 f842 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1723c:	b397      	cbz	r7, 172a4 <isr_rx_scan+0x41c>
   1723e:	2dff      	cmp	r5, #255	; 0xff
   17240:	d030      	beq.n	172a4 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   17242:	f109 020e 	add.w	r2, r9, #14
   17246:	f109 010d 	add.w	r1, r9, #13
   1724a:	4628      	mov	r0, r5
   1724c:	f002 fc96 	bl	19b7c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17250:	f899 300d 	ldrb.w	r3, [r9, #13]
   17254:	3302      	adds	r3, #2
   17256:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1725a:	2206      	movs	r2, #6
   1725c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1725e:	f109 0014 	add.w	r0, r9, #20
   17262:	f7e9 f82d 	bl	2c0 <memcpy>
   17266:	e02e      	b.n	172c6 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   17268:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   1726c:	e786      	b.n	1717c <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   1726e:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17270:	2b00      	cmp	r3, #0
   17272:	dbfc      	blt.n	1726e <isr_rx_scan+0x3e6>
   17274:	459a      	cmp	sl, r3
   17276:	d8fa      	bhi.n	1726e <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   17278:	eba3 020a 	sub.w	r2, r3, sl
   1727c:	4908      	ldr	r1, [pc, #32]	; (172a0 <isr_rx_scan+0x418>)
   1727e:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   17282:	0a92      	lsrs	r2, r2, #10
   17284:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   17286:	7d72      	ldrb	r2, [r6, #21]
   17288:	3201      	adds	r2, #1
   1728a:	7572      	strb	r2, [r6, #21]
   1728c:	469a      	mov	sl, r3
   1728e:	e77c      	b.n	1718a <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   17290:	4040      	eors	r0, r0
   17292:	f380 8811 	msr	BASEPRI, r0
   17296:	f04f 0004 	mov.w	r0, #4
   1729a:	df02      	svc	2
   1729c:	20000ef4 	.word	0x20000ef4
   172a0:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   172a4:	2206      	movs	r2, #6
   172a6:	2100      	movs	r1, #0
   172a8:	f109 0014 	add.w	r0, r9, #20
   172ac:	f012 ff90 	bl	2a1d0 <memset>
				pdu_adv_tx->rx_addr;
   172b0:	7833      	ldrb	r3, [r6, #0]
   172b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   172b6:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   172ba:	2206      	movs	r2, #6
   172bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   172be:	f109 000e 	add.w	r0, r9, #14
   172c2:	f7e8 fffd 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   172c6:	4dce      	ldr	r5, [pc, #824]	; (17600 <isr_rx_scan+0x778>)
   172c8:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   172cc:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   172d0:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   172d4:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   172d8:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   172dc:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   172e0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   172e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   172e8:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   172ec:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   172f0:	f7fa fae2 	bl	118b8 <rx_fc_lock>
		packet_rx_enqueue();
   172f4:	f7fc ffca 	bl	1428c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   172f8:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   172fc:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   17300:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   17302:	4291      	cmp	r1, r2
   17304:	f0c0 80b9 	bcc.w	1747a <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   17308:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1730c:	1acb      	subs	r3, r1, r3
   1730e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17310:	2b02      	cmp	r3, #2
   17312:	f240 80bc 	bls.w	1748e <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   17316:	4bba      	ldr	r3, [pc, #744]	; (17600 <isr_rx_scan+0x778>)
   17318:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1731c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17324:	2b00      	cmp	r3, #0
   17326:	f000 80b4 	beq.w	17492 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   1732a:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   1732e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17330:	220b      	movs	r2, #11
   17332:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   17334:	7a22      	ldrb	r2, [r4, #8]
   17336:	f012 0f20 	tst.w	r2, #32
   1733a:	f000 80b0 	beq.w	1749e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   1733e:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   17342:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   17346:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   1734a:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   1734e:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   17352:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17356:	f898 001d 	ldrb.w	r0, [r8, #29]
   1735a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1735e:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17362:	404a      	eors	r2, r1
   17364:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17368:	2201      	movs	r2, #1
   1736a:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   1736c:	f7fc ff8e 	bl	1428c <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17370:	4ea3      	ldr	r6, [pc, #652]	; (17600 <isr_rx_scan+0x778>)
   17372:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   17376:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1737a:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   1737e:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   17382:	2327      	movs	r3, #39	; 0x27
   17384:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   17388:	2400      	movs	r4, #0
   1738a:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   1738e:	429d      	cmp	r5, r3
   17390:	bf38      	it	cc
   17392:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17394:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   17398:	9300      	str	r3, [sp, #0]
   1739a:	4b9a      	ldr	r3, [pc, #616]	; (17604 <isr_rx_scan+0x77c>)
   1739c:	2206      	movs	r2, #6
   1739e:	4621      	mov	r1, r4
   173a0:	4620      	mov	r0, r4
   173a2:	f7f9 fc99 	bl	10cd8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   173a6:	f240 6131 	movw	r1, #1585	; 0x631
   173aa:	f7fa faed 	bl	11988 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   173ae:	9400      	str	r4, [sp, #0]
   173b0:	4623      	mov	r3, r4
   173b2:	2204      	movs	r2, #4
   173b4:	4621      	mov	r1, r4
   173b6:	4620      	mov	r0, r4
   173b8:	f7f9 fc8e 	bl	10cd8 <ticker_stop>
				     conn->handle,
   173bc:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173c0:	3307      	adds	r3, #7
   173c2:	b2db      	uxtb	r3, r3
   173c4:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   173c6:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173c8:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   173ca:	4f8f      	ldr	r7, [pc, #572]	; (17608 <isr_rx_scan+0x780>)
   173cc:	a38a      	add	r3, pc, #552	; (adr r3, 175f8 <isr_rx_scan+0x770>)
   173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   173d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   173d4:	fba1 0107 	umull	r0, r1, r1, r7
   173d8:	f7e9 fe90 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173dc:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   173e0:	fbab 1207 	umull	r1, r2, fp, r7
   173e4:	468b      	mov	fp, r1
   173e6:	4694      	mov	ip, r2
   173e8:	a383      	add	r3, pc, #524	; (adr r3, 175f8 <isr_rx_scan+0x770>)
   173ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   173ee:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   173f2:	4658      	mov	r0, fp
   173f4:	4661      	mov	r1, ip
   173f6:	f7e9 fe81 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173fa:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   173fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17402:	2100      	movs	r1, #0
   17404:	4a81      	ldr	r2, [pc, #516]	; (1760c <isr_rx_scan+0x784>)
   17406:	2307      	movs	r3, #7
   17408:	fb03 f300 	mul.w	r3, r3, r0
   1740c:	fb02 3301 	mla	r3, r2, r1, r3
   17410:	fba0 0102 	umull	r0, r1, r0, r2
   17414:	4419      	add	r1, r3
   17416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1741a:	2300      	movs	r3, #0
   1741c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   17420:	ebbb 0b00 	subs.w	fp, fp, r0
   17424:	eb6c 0c01 	sbc.w	ip, ip, r1
   17428:	4658      	mov	r0, fp
   1742a:	4661      	mov	r1, ip
   1742c:	f7e9 fe66 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   17430:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17434:	442b      	add	r3, r5
   17436:	b29b      	uxth	r3, r3
		ticker_status =
   17438:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   1743c:	9208      	str	r2, [sp, #32]
   1743e:	4a74      	ldr	r2, [pc, #464]	; (17610 <isr_rx_scan+0x788>)
   17440:	9207      	str	r2, [sp, #28]
   17442:	f8cd 8018 	str.w	r8, [sp, #24]
   17446:	4a73      	ldr	r2, [pc, #460]	; (17614 <isr_rx_scan+0x78c>)
   17448:	9205      	str	r2, [sp, #20]
   1744a:	9304      	str	r3, [sp, #16]
   1744c:	9403      	str	r4, [sp, #12]
   1744e:	9002      	str	r0, [sp, #8]
   17450:	9701      	str	r7, [sp, #4]
   17452:	f8cd 9000 	str.w	r9, [sp]
   17456:	4633      	mov	r3, r6
   17458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1745a:	4621      	mov	r1, r4
   1745c:	4620      	mov	r0, r4
   1745e:	f7f9 fb9f 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17462:	2800      	cmp	r0, #0
   17464:	f000 8132 	beq.w	176cc <isr_rx_scan+0x844>
   17468:	2802      	cmp	r0, #2
   1746a:	f000 811b 	beq.w	176a4 <isr_rx_scan+0x81c>
   1746e:	4040      	eors	r0, r0
   17470:	f380 8811 	msr	BASEPRI, r0
   17474:	f04f 0004 	mov.w	r0, #4
   17478:	df02      	svc	2
		return (_radio.packet_rx_count -
   1747a:	4a61      	ldr	r2, [pc, #388]	; (17600 <isr_rx_scan+0x778>)
   1747c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   17480:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17484:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   17486:	fa51 f383 	uxtab	r3, r1, r3
   1748a:	b2db      	uxtb	r3, r3
   1748c:	e740      	b.n	17310 <isr_rx_scan+0x488>
		return 0;
   1748e:	2300      	movs	r3, #0
   17490:	e748      	b.n	17324 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   17492:	4040      	eors	r0, r0
   17494:	f380 8811 	msr	BASEPRI, r0
   17498:	f04f 0004 	mov.w	r0, #4
   1749c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1749e:	2200      	movs	r2, #0
   174a0:	72da      	strb	r2, [r3, #11]
   174a2:	e763      	b.n	1736c <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   174a4:	4a56      	ldr	r2, [pc, #344]	; (17600 <isr_rx_scan+0x778>)
   174a6:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   174aa:	f012 0f08 	tst.w	r2, #8
   174ae:	f43f ad13 	beq.w	16ed8 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   174b2:	4a53      	ldr	r2, [pc, #332]	; (17600 <isr_rx_scan+0x778>)
   174b4:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   174b8:	2a00      	cmp	r2, #0
   174ba:	f47f ad0d 	bne.w	16ed8 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   174be:	b37f      	cbz	r7, 17520 <isr_rx_scan+0x698>
   174c0:	4629      	mov	r1, r5
   174c2:	2200      	movs	r2, #0
   174c4:	4630      	mov	r0, r6
   174c6:	f7fc ff81 	bl	143cc <isr_rx_scan_report>
		if (err) {
   174ca:	4682      	mov	sl, r0
   174cc:	2800      	cmp	r0, #0
   174ce:	f040 80e9 	bne.w	176a4 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   174d2:	f7f8 f8fb 	bl	f6cc <radio_pkt_scratch_get>
   174d6:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   174d8:	7803      	ldrb	r3, [r0, #0]
   174da:	2203      	movs	r2, #3
   174dc:	f362 0303 	bfi	r3, r2, #0, #4
   174e0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   174e2:	7a23      	ldrb	r3, [r4, #8]
   174e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   174e8:	7802      	ldrb	r2, [r0, #0]
   174ea:	f363 12c7 	bfi	r2, r3, #7, #1
   174ee:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   174f0:	230c      	movs	r3, #12
   174f2:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   174f4:	4628      	mov	r0, r5
   174f6:	f002 f94b 	bl	19790 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   174fa:	4b41      	ldr	r3, [pc, #260]	; (17600 <isr_rx_scan+0x778>)
   174fc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17500:	f013 0f01 	tst.w	r3, #1
   17504:	d00e      	beq.n	17524 <isr_rx_scan+0x69c>
   17506:	b168      	cbz	r0, 17524 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   17508:	7832      	ldrb	r2, [r6, #0]
   1750a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1750e:	4633      	mov	r3, r6
   17510:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17514:	2206      	movs	r2, #6
   17516:	4601      	mov	r1, r0
   17518:	4618      	mov	r0, r3
   1751a:	f7e8 fed1 	bl	2c0 <memcpy>
   1751e:	e00f      	b.n	17540 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   17520:	21ff      	movs	r1, #255	; 0xff
   17522:	e7ce      	b.n	174c2 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17524:	4936      	ldr	r1, [pc, #216]	; (17600 <isr_rx_scan+0x778>)
   17526:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   1752a:	09db      	lsrs	r3, r3, #7
   1752c:	7832      	ldrb	r2, [r6, #0]
   1752e:	f363 1286 	bfi	r2, r3, #6, #1
   17532:	4630      	mov	r0, r6
   17534:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17538:	2206      	movs	r2, #6
   1753a:	31e0      	adds	r1, #224	; 0xe0
   1753c:	f7e8 fec0 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   17540:	2206      	movs	r2, #6
   17542:	f104 010a 	add.w	r1, r4, #10
   17546:	f106 0008 	add.w	r0, r6, #8
   1754a:	f7e8 feb9 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   1754e:	4b2c      	ldr	r3, [pc, #176]	; (17600 <isr_rx_scan+0x778>)
   17550:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17554:	f042 0202 	orr.w	r2, r2, #2
   17558:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   1755c:	2202      	movs	r2, #2
   1755e:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   17560:	2096      	movs	r0, #150	; 0x96
   17562:	f7f8 f969 	bl	f838 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   17566:	2000      	movs	r0, #0
   17568:	f7f8 f8b4 	bl	f6d4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1756c:	4630      	mov	r0, r6
   1756e:	f7f8 f83d 	bl	f5ec <radio_pkt_tx_set>
		radio_tmr_end_capture();
   17572:	f7f8 fa19 	bl	f9a8 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   17576:	f7f8 f871 	bl	f65c <radio_is_ready>
   1757a:	4682      	mov	sl, r0
   1757c:	2800      	cmp	r0, #0
   1757e:	f000 8091 	beq.w	176a4 <isr_rx_scan+0x81c>
   17582:	4040      	eors	r0, r0
   17584:	f380 8811 	msr	BASEPRI, r0
   17588:	f04f 0004 	mov.w	r0, #4
   1758c:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1758e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17590:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17594:	462a      	mov	r2, r5
   17596:	4649      	mov	r1, r9
   17598:	09c0      	lsrs	r0, r0, #7
   1759a:	f002 fb73 	bl	19c84 <ctrl_rl_addr_resolve>
   1759e:	4682      	mov	sl, r0
   175a0:	2800      	cmp	r0, #0
   175a2:	d146      	bne.n	17632 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   175a4:	4b16      	ldr	r3, [pc, #88]	; (17600 <isr_rx_scan+0x778>)
   175a6:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   175aa:	7a23      	ldrb	r3, [r4, #8]
   175ac:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   175ae:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   175b2:	d00b      	beq.n	175cc <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   175b4:	4b12      	ldr	r3, [pc, #72]	; (17600 <isr_rx_scan+0x778>)
   175b6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   175ba:	f013 0f20 	tst.w	r3, #32
   175be:	d02d      	beq.n	1761c <isr_rx_scan+0x794>
   175c0:	f994 3008 	ldrsb.w	r3, [r4, #8]
   175c4:	2b00      	cmp	r3, #0
   175c6:	db0c      	blt.n	175e2 <isr_rx_scan+0x75a>
	bool dir_report = false;
   175c8:	46d1      	mov	r9, sl
   175ca:	e028      	b.n	1761e <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   175cc:	2206      	movs	r2, #6
   175ce:	4649      	mov	r1, r9
   175d0:	4811      	ldr	r0, [pc, #68]	; (17618 <isr_rx_scan+0x790>)
   175d2:	f012 fd69 	bl	2a0a8 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   175d6:	2800      	cmp	r0, #0
   175d8:	d1ec      	bne.n	175b4 <isr_rx_scan+0x72c>
	bool dir_report = false;
   175da:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   175dc:	f04f 0a01 	mov.w	sl, #1
   175e0:	e029      	b.n	17636 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   175e2:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   175e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   175ea:	2b40      	cmp	r3, #64	; 0x40
   175ec:	d01d      	beq.n	1762a <isr_rx_scan+0x7a2>
	bool dir_report = false;
   175ee:	46d1      	mov	r9, sl
   175f0:	e015      	b.n	1761e <isr_rx_scan+0x796>
   175f2:	bf00      	nop
   175f4:	f3af 8000 	nop.w
   175f8:	1afd498d 	.word	0x1afd498d
   175fc:	00000007 	.word	0x00000007
   17600:	20000ef4 	.word	0x20000ef4
   17604:	00011989 	.word	0x00011989
   17608:	3b9aca00 	.word	0x3b9aca00
   1760c:	1afd498d 	.word	0x1afd498d
   17610:	000118f5 	.word	0x000118f5
   17614:	000164b5 	.word	0x000164b5
   17618:	20000fd4 	.word	0x20000fd4
   1761c:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   1761e:	f1ba 0f00 	cmp.w	sl, #0
   17622:	d008      	beq.n	17636 <isr_rx_scan+0x7ae>
   17624:	f04f 0a01 	mov.w	sl, #1
   17628:	e005      	b.n	17636 <isr_rx_scan+0x7ae>
			*dir_report = true;
   1762a:	f04f 0901 	mov.w	r9, #1
		return true;
   1762e:	46ca      	mov	sl, r9
   17630:	e7f5      	b.n	1761e <isr_rx_scan+0x796>
	bool dir_report = false;
   17632:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17636:	f1ba 0f00 	cmp.w	sl, #0
   1763a:	d12b      	bne.n	17694 <isr_rx_scan+0x80c>
   1763c:	e454      	b.n	16ee8 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   1763e:	4a26      	ldr	r2, [pc, #152]	; (176d8 <isr_rx_scan+0x850>)
   17640:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   17644:	f012 0f07 	tst.w	r2, #7
   17648:	d124      	bne.n	17694 <isr_rx_scan+0x80c>
   1764a:	e459      	b.n	16f00 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   1764c:	4b22      	ldr	r3, [pc, #136]	; (176d8 <isr_rx_scan+0x850>)
   1764e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   17652:	f013 0f02 	tst.w	r3, #2
   17656:	d102      	bne.n	1765e <isr_rx_scan+0x7d6>
		return 1;
   17658:	f04f 0a01 	mov.w	sl, #1
   1765c:	e022      	b.n	176a4 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   1765e:	f7f8 f835 	bl	f6cc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17662:	7802      	ldrb	r2, [r0, #0]
   17664:	7a23      	ldrb	r3, [r4, #8]
   17666:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1766a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1766e:	d004      	beq.n	1767a <isr_rx_scan+0x7f2>
   17670:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   17672:	b97b      	cbnz	r3, 17694 <isr_rx_scan+0x80c>
		return 1;
   17674:	f04f 0a01 	mov.w	sl, #1
   17678:	e014      	b.n	176a4 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   1767a:	2206      	movs	r2, #6
   1767c:	f108 0102 	add.w	r1, r8, #2
   17680:	3008      	adds	r0, #8
   17682:	f012 fd11 	bl	2a0a8 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17686:	b108      	cbz	r0, 1768c <isr_rx_scan+0x804>
   17688:	2300      	movs	r3, #0
   1768a:	e7f2      	b.n	17672 <isr_rx_scan+0x7ea>
   1768c:	2301      	movs	r3, #1
   1768e:	e7f0      	b.n	17672 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   17690:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17694:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   17696:	b1db      	cbz	r3, 176d0 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17698:	4b0f      	ldr	r3, [pc, #60]	; (176d8 <isr_rx_scan+0x850>)
   1769a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1769e:	b12b      	cbz	r3, 176ac <isr_rx_scan+0x824>
		return 1;
   176a0:	f04f 0a01 	mov.w	sl, #1
}
   176a4:	4650      	mov	r0, sl
   176a6:	b00f      	add	sp, #60	; 0x3c
   176a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   176ac:	b907      	cbnz	r7, 176b0 <isr_rx_scan+0x828>
   176ae:	25ff      	movs	r5, #255	; 0xff
   176b0:	464a      	mov	r2, r9
   176b2:	4629      	mov	r1, r5
   176b4:	4630      	mov	r0, r6
   176b6:	f7fc fe89 	bl	143cc <isr_rx_scan_report>
		if (err) {
   176ba:	4682      	mov	sl, r0
   176bc:	2800      	cmp	r0, #0
   176be:	d1f1      	bne.n	176a4 <isr_rx_scan+0x81c>
	return 1;
   176c0:	f04f 0a01 	mov.w	sl, #1
   176c4:	e7ee      	b.n	176a4 <isr_rx_scan+0x81c>
			return 1;
   176c6:	f04f 0a01 	mov.w	sl, #1
   176ca:	e7eb      	b.n	176a4 <isr_rx_scan+0x81c>
		return 0;
   176cc:	4682      	mov	sl, r0
   176ce:	e7e9      	b.n	176a4 <isr_rx_scan+0x81c>
		return 1;
   176d0:	f04f 0a01 	mov.w	sl, #1
   176d4:	e7e6      	b.n	176a4 <isr_rx_scan+0x81c>
   176d6:	bf00      	nop
   176d8:	20000ef4 	.word	0x20000ef4
   176dc:	00000000 	.word	0x00000000

000176e0 <isr_rx_adv>:
{
   176e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e4:	b08f      	sub	sp, #60	; 0x3c
   176e6:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   176e8:	b9fa      	cbnz	r2, 1772a <isr_rx_adv+0x4a>
   176ea:	20ff      	movs	r0, #255	; 0xff
   176ec:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   176f0:	f7f7 ffec 	bl	f6cc <radio_pkt_scratch_get>
   176f4:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   176f6:	4f9d      	ldr	r7, [pc, #628]	; (1796c <isr_rx_adv+0x28c>)
   176f8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   176fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17700:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17704:	3320      	adds	r3, #32
   17706:	441f      	add	r7, r3
   17708:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1770a:	7803      	ldrb	r3, [r0, #0]
   1770c:	f003 030f 	and.w	r3, r3, #15
   17710:	2b03      	cmp	r3, #3
   17712:	d00e      	beq.n	17732 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17714:	f898 3000 	ldrb.w	r3, [r8]
   17718:	f003 030f 	and.w	r3, r3, #15
   1771c:	2b05      	cmp	r3, #5
   1771e:	d065      	beq.n	177ec <isr_rx_adv+0x10c>
	return 1;
   17720:	2301      	movs	r3, #1
}
   17722:	4618      	mov	r0, r3
   17724:	b00f      	add	sp, #60	; 0x3c
   17726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   1772a:	4618      	mov	r0, r3
   1772c:	f002 f892 	bl	19854 <ctrl_rl_irk_idx>
   17730:	e7dc      	b.n	176ec <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   17732:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17734:	2b0c      	cmp	r3, #12
   17736:	d1ed      	bne.n	17714 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17738:	4b8c      	ldr	r3, [pc, #560]	; (1796c <isr_rx_adv+0x28c>)
   1773a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1773e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17742:	d030      	beq.n	177a6 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17744:	4b89      	ldr	r3, [pc, #548]	; (1796c <isr_rx_adv+0x28c>)
   17746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   1774a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1774e:	d04b      	beq.n	177e8 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17750:	2c00      	cmp	r4, #0
   17752:	d034      	beq.n	177be <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   17754:	79fb      	ldrb	r3, [r7, #7]
   17756:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1775a:	f898 2000 	ldrb.w	r2, [r8]
   1775e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17762:	d034      	beq.n	177ce <isr_rx_adv+0xee>
   17764:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17766:	2b00      	cmp	r3, #0
   17768:	d13c      	bne.n	177e4 <isr_rx_adv+0x104>
   1776a:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   1776c:	2b00      	cmp	r3, #0
   1776e:	d0d1      	beq.n	17714 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   17770:	4c7e      	ldr	r4, [pc, #504]	; (1796c <isr_rx_adv+0x28c>)
   17772:	2303      	movs	r3, #3
   17774:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   17776:	f7f7 ffbd 	bl	f6f4 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   1777a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   1777e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17782:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17786:	3370      	adds	r3, #112	; 0x70
   17788:	4423      	add	r3, r4
   1778a:	1dd8      	adds	r0, r3, #7
   1778c:	f7f7 ff2e 	bl	f5ec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17790:	f7f7 ff64 	bl	f65c <radio_is_ready>
   17794:	4603      	mov	r3, r0
   17796:	2800      	cmp	r0, #0
   17798:	d0c3      	beq.n	17722 <isr_rx_adv+0x42>
   1779a:	4040      	eors	r0, r0
   1779c:	f380 8811 	msr	BASEPRI, r0
   177a0:	f04f 0004 	mov.w	r0, #4
   177a4:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   177a6:	4601      	mov	r1, r0
   177a8:	f811 0b02 	ldrb.w	r0, [r1], #2
   177ac:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   177b0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   177b4:	f002 fa0e 	bl	19bd4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   177b8:	2800      	cmp	r0, #0
   177ba:	d1cb      	bne.n	17754 <isr_rx_adv+0x74>
   177bc:	e7c2      	b.n	17744 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   177be:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   177c2:	f002 f871 	bl	198a8 <ctrl_irk_whitelisted>
   177c6:	2800      	cmp	r0, #0
   177c8:	d1c4      	bne.n	17754 <isr_rx_adv+0x74>
   177ca:	2300      	movs	r3, #0
   177cc:	e7ce      	b.n	1776c <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   177ce:	2206      	movs	r2, #6
   177d0:	f108 0108 	add.w	r1, r8, #8
   177d4:	1ca8      	adds	r0, r5, #2
   177d6:	f012 fc67 	bl	2a0a8 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   177da:	b908      	cbnz	r0, 177e0 <isr_rx_adv+0x100>
   177dc:	2301      	movs	r3, #1
   177de:	e7c2      	b.n	17766 <isr_rx_adv+0x86>
   177e0:	2300      	movs	r3, #0
   177e2:	e7c0      	b.n	17766 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   177e4:	2301      	movs	r3, #1
   177e6:	e7c1      	b.n	1776c <isr_rx_adv+0x8c>
   177e8:	2300      	movs	r3, #0
   177ea:	e7bf      	b.n	1776c <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   177ec:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   177f0:	2b22      	cmp	r3, #34	; 0x22
   177f2:	d001      	beq.n	177f8 <isr_rx_adv+0x118>
	return 1;
   177f4:	2301      	movs	r3, #1
   177f6:	e794      	b.n	17722 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   177f8:	79fb      	ldrb	r3, [r7, #7]
   177fa:	f003 030f 	and.w	r3, r3, #15
   177fe:	2b01      	cmp	r3, #1
   17800:	d01a      	beq.n	17838 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   17802:	4b5a      	ldr	r3, [pc, #360]	; (1796c <isr_rx_adv+0x28c>)
   17804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17808:	09db      	lsrs	r3, r3, #7
   1780a:	d06d      	beq.n	178e8 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   1780c:	4b57      	ldr	r3, [pc, #348]	; (1796c <isr_rx_adv+0x28c>)
   1780e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   17812:	09db      	lsrs	r3, r3, #7
   17814:	f000 8096 	beq.w	17944 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   17818:	2c00      	cmp	r4, #0
   1781a:	d071      	beq.n	17900 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   1781c:	79fb      	ldrb	r3, [r7, #7]
   1781e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17822:	f898 2000 	ldrb.w	r2, [r8]
   17826:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1782a:	d071      	beq.n	17910 <isr_rx_adv+0x230>
   1782c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1782e:	2b00      	cmp	r3, #0
   17830:	f000 809a 	beq.w	17968 <isr_rx_adv+0x288>
   17834:	2301      	movs	r3, #1
   17836:	e086      	b.n	17946 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   17838:	4641      	mov	r1, r8
   1783a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1783e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17842:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17846:	f002 f9c5 	bl	19bd4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   1784a:	b908      	cbnz	r0, 17850 <isr_rx_adv+0x170>
   1784c:	2300      	movs	r3, #0
   1784e:	e07a      	b.n	17946 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   17850:	79fb      	ldrb	r3, [r7, #7]
   17852:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17856:	f898 2000 	ldrb.w	r2, [r8]
   1785a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1785e:	d003      	beq.n	17868 <isr_rx_adv+0x188>
   17860:	2300      	movs	r3, #0
					    rl_idx) &&
   17862:	b9db      	cbnz	r3, 1789c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   17864:	2300      	movs	r3, #0
   17866:	e06e      	b.n	17946 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17868:	79fb      	ldrb	r3, [r7, #7]
   1786a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   1786e:	2b01      	cmp	r3, #1
   17870:	d008      	beq.n	17884 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   17872:	2206      	movs	r2, #6
   17874:	f108 0108 	add.w	r1, r8, #8
   17878:	1ca8      	adds	r0, r5, #2
   1787a:	f012 fc15 	bl	2a0a8 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   1787e:	b958      	cbnz	r0, 17898 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   17880:	2301      	movs	r3, #1
   17882:	e7ee      	b.n	17862 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17884:	2206      	movs	r2, #6
   17886:	f108 0108 	add.w	r1, r8, #8
   1788a:	1ca8      	adds	r0, r5, #2
   1788c:	f012 fc0c 	bl	2a0a8 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17890:	2800      	cmp	r0, #0
   17892:	d1ee      	bne.n	17872 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   17894:	2301      	movs	r3, #1
   17896:	e7e4      	b.n	17862 <isr_rx_adv+0x182>
   17898:	2300      	movs	r3, #0
   1789a:	e7e2      	b.n	17862 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   1789c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   178a0:	2bff      	cmp	r3, #255	; 0xff
   178a2:	d009      	beq.n	178b8 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   178a4:	4a31      	ldr	r2, [pc, #196]	; (1796c <isr_rx_adv+0x28c>)
   178a6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   178aa:	4293      	cmp	r3, r2
   178ac:	bf14      	ite	ne
   178ae:	2300      	movne	r3, #0
   178b0:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   178b2:	b9bb      	cbnz	r3, 178e4 <isr_rx_adv+0x204>
   178b4:	2300      	movs	r3, #0
   178b6:	e046      	b.n	17946 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   178b8:	79fa      	ldrb	r2, [r7, #7]
   178ba:	f898 3000 	ldrb.w	r3, [r8]
   178be:	f3c3 1380 	ubfx	r3, r3, #6, #1
   178c2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   178c6:	d001      	beq.n	178cc <isr_rx_adv+0x1ec>
   178c8:	2300      	movs	r3, #0
   178ca:	e7f2      	b.n	178b2 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   178cc:	2206      	movs	r2, #6
   178ce:	f108 0102 	add.w	r1, r8, #2
   178d2:	f105 0008 	add.w	r0, r5, #8
   178d6:	f012 fbe7 	bl	2a0a8 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   178da:	b908      	cbnz	r0, 178e0 <isr_rx_adv+0x200>
   178dc:	2301      	movs	r3, #1
   178de:	e7e8      	b.n	178b2 <isr_rx_adv+0x1d2>
   178e0:	2300      	movs	r3, #0
   178e2:	e7e6      	b.n	178b2 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   178e4:	2301      	movs	r3, #1
   178e6:	e02e      	b.n	17946 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   178e8:	4641      	mov	r1, r8
   178ea:	f811 0b02 	ldrb.w	r0, [r1], #2
   178ee:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   178f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   178f6:	f002 f96d 	bl	19bd4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   178fa:	2800      	cmp	r0, #0
   178fc:	d18e      	bne.n	1781c <isr_rx_adv+0x13c>
   178fe:	e785      	b.n	1780c <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17900:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17904:	f001 ffd0 	bl	198a8 <ctrl_irk_whitelisted>
   17908:	2800      	cmp	r0, #0
   1790a:	d187      	bne.n	1781c <isr_rx_adv+0x13c>
   1790c:	2300      	movs	r3, #0
   1790e:	e01a      	b.n	17946 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17910:	79fb      	ldrb	r3, [r7, #7]
   17912:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17916:	2b01      	cmp	r3, #1
   17918:	d008      	beq.n	1792c <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   1791a:	2206      	movs	r2, #6
   1791c:	f108 0108 	add.w	r1, r8, #8
   17920:	1ca8      	adds	r0, r5, #2
   17922:	f012 fbc1 	bl	2a0a8 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17926:	b958      	cbnz	r0, 17940 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   17928:	2301      	movs	r3, #1
   1792a:	e780      	b.n	1782e <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   1792c:	2206      	movs	r2, #6
   1792e:	f108 0108 	add.w	r1, r8, #8
   17932:	1ca8      	adds	r0, r5, #2
   17934:	f012 fbb8 	bl	2a0a8 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17938:	2800      	cmp	r0, #0
   1793a:	d1ee      	bne.n	1791a <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   1793c:	2301      	movs	r3, #1
   1793e:	e776      	b.n	1782e <isr_rx_adv+0x14e>
   17940:	2300      	movs	r3, #0
   17942:	e774      	b.n	1782e <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17944:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17946:	2b00      	cmp	r3, #0
   17948:	f000 8232 	beq.w	17db0 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   1794c:	4b07      	ldr	r3, [pc, #28]	; (1796c <isr_rx_adv+0x28c>)
   1794e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   17952:	b16b      	cbz	r3, 17970 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17954:	4a05      	ldr	r2, [pc, #20]	; (1796c <isr_rx_adv+0x28c>)
   17956:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1795a:	b2db      	uxtb	r3, r3
   1795c:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17960:	4293      	cmp	r3, r2
   17962:	d005      	beq.n	17970 <isr_rx_adv+0x290>
	return 1;
   17964:	2301      	movs	r3, #1
   17966:	e6dc      	b.n	17722 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17968:	2300      	movs	r3, #0
   1796a:	e7ec      	b.n	17946 <isr_rx_adv+0x266>
   1796c:	20000ef4 	.word	0x20000ef4
		   (_radio.advertiser.conn)) {
   17970:	4bd9      	ldr	r3, [pc, #868]	; (17cd8 <isr_rx_adv+0x5f8>)
   17972:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17976:	2b00      	cmp	r3, #0
   17978:	f000 821c 	beq.w	17db4 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   1797c:	4bd6      	ldr	r3, [pc, #856]	; (17cd8 <isr_rx_adv+0x5f8>)
   1797e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17982:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17986:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17988:	429a      	cmp	r2, r3
   1798a:	f0c0 81cf 	bcc.w	17d2c <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   1798e:	4bd2      	ldr	r3, [pc, #840]	; (17cd8 <isr_rx_adv+0x5f8>)
   17990:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17994:	1ad3      	subs	r3, r2, r3
   17996:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17998:	2b03      	cmp	r3, #3
   1799a:	f240 81d1 	bls.w	17d40 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   1799e:	4bce      	ldr	r3, [pc, #824]	; (17cd8 <isr_rx_adv+0x5f8>)
   179a0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   179a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   179a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   179ac:	2d00      	cmp	r5, #0
   179ae:	f000 8203 	beq.w	17db8 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   179b2:	4ec9      	ldr	r6, [pc, #804]	; (17cd8 <isr_rx_adv+0x5f8>)
   179b4:	f04f 0904 	mov.w	r9, #4
   179b8:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   179bc:	f7f7 fe34 	bl	f628 <radio_disable>
		conn = _radio.advertiser.conn;
   179c0:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   179c4:	2300      	movs	r3, #0
   179c6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   179ca:	f44f 72aa 	mov.w	r2, #340	; 0x154
   179ce:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   179d2:	4620      	mov	r0, r4
   179d4:	f7f7 fc53 	bl	f27e <mem_index_get>
   179d8:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   179da:	2203      	movs	r2, #3
   179dc:	f108 0112 	add.w	r1, r8, #18
   179e0:	f104 0014 	add.w	r0, r4, #20
   179e4:	f7e8 fc6c 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   179e8:	f104 0a10 	add.w	sl, r4, #16
   179ec:	464a      	mov	r2, r9
   179ee:	f108 010e 	add.w	r1, r8, #14
   179f2:	4650      	mov	r0, sl
   179f4:	f7e8 fc64 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   179f8:	f104 0617 	add.w	r6, r4, #23
   179fc:	2205      	movs	r2, #5
   179fe:	f108 011e 	add.w	r1, r8, #30
   17a02:	4630      	mov	r0, r6
   17a04:	f7e8 fc5c 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17a08:	2105      	movs	r1, #5
   17a0a:	4630      	mov	r0, r6
   17a0c:	f7f7 fc7b 	bl	f306 <util_ones_count_get>
		conn->data_chan_count =
   17a10:	7f63      	ldrb	r3, [r4, #29]
   17a12:	f360 0305 	bfi	r3, r0, #0, #6
   17a16:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   17a18:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17a1c:	f3c3 0304 	ubfx	r3, r3, #0, #5
   17a20:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   17a22:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   17a26:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   17a28:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   17a2c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   17a30:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   17a34:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   17a38:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17a3a:	464a      	mov	r2, r9
   17a3c:	4651      	mov	r1, sl
   17a3e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   17a42:	f7e8 fc3d 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   17a46:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   17a4a:	f242 7210 	movw	r2, #10000	; 0x2710
   17a4e:	fb02 6303 	mla	r3, r2, r3, r6
   17a52:	3b01      	subs	r3, #1
   17a54:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17a58:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17a5a:	4ba0      	ldr	r3, [pc, #640]	; (17cdc <isr_rx_adv+0x5fc>)
   17a5c:	4433      	add	r3, r6
   17a5e:	fbb3 f3f6 	udiv	r3, r3, r6
   17a62:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17a66:	4b9e      	ldr	r3, [pc, #632]	; (17ce0 <isr_rx_adv+0x600>)
   17a68:	4433      	add	r3, r6
   17a6a:	fbb3 f3f6 	udiv	r3, r3, r6
   17a6e:	b29b      	uxth	r3, r3
   17a70:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17a74:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   17a76:	1d91      	adds	r1, r2, #6
   17a78:	428b      	cmp	r3, r1
   17a7a:	dd03      	ble.n	17a84 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17a7c:	1a9b      	subs	r3, r3, r2
   17a7e:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17a80:	3b06      	subs	r3, #6
   17a82:	b29b      	uxth	r3, r3
   17a84:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17a88:	8c23      	ldrh	r3, [r4, #32]
   17a8a:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17a8c:	2206      	movs	r2, #6
   17a8e:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17a90:	2300      	movs	r3, #0
   17a92:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17a94:	2301      	movs	r3, #1
   17a96:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17a98:	4641      	mov	r1, r8
   17a9a:	f811 3b08 	ldrb.w	r3, [r1], #8
   17a9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17aa2:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17aa4:	f105 001b 	add.w	r0, r5, #27
   17aa8:	f7e8 fc0a 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17aac:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17ab0:	28ff      	cmp	r0, #255	; 0xff
   17ab2:	f000 8147 	beq.w	17d44 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17ab6:	f105 020e 	add.w	r2, r5, #14
   17aba:	f105 010d 	add.w	r1, r5, #13
   17abe:	f002 f85d 	bl	19b7c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17ac2:	7b6b      	ldrb	r3, [r5, #13]
   17ac4:	3302      	adds	r3, #2
   17ac6:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17ac8:	2206      	movs	r2, #6
   17aca:	f108 0102 	add.w	r1, r8, #2
   17ace:	f105 0014 	add.w	r0, r5, #20
   17ad2:	f7e8 fbf5 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17ad6:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17ada:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17ade:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17ae2:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17ae6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17aea:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17aee:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17af2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17af6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17afa:	8c20      	ldrh	r0, [r4, #32]
   17afc:	f7f9 fedc 	bl	118b8 <rx_fc_lock>
		packet_rx_enqueue();
   17b00:	f7fc fbc4 	bl	1428c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17b04:	4b74      	ldr	r3, [pc, #464]	; (17cd8 <isr_rx_adv+0x5f8>)
   17b06:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17b0a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b0e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17b10:	429a      	cmp	r2, r3
   17b12:	f0c0 8129 	bcc.w	17d68 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17b16:	4b70      	ldr	r3, [pc, #448]	; (17cd8 <isr_rx_adv+0x5f8>)
   17b18:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17b1c:	1ad3      	subs	r3, r2, r3
   17b1e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17b20:	2b02      	cmp	r3, #2
   17b22:	f240 812b 	bls.w	17d7c <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17b26:	4b6c      	ldr	r3, [pc, #432]	; (17cd8 <isr_rx_adv+0x5f8>)
   17b28:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17b2c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17b34:	2b00      	cmp	r3, #0
   17b36:	f000 8123 	beq.w	17d80 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17b3a:	8c22      	ldrh	r2, [r4, #32]
   17b3c:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17b3e:	220b      	movs	r2, #11
   17b40:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   17b42:	f898 2000 	ldrb.w	r2, [r8]
   17b46:	f012 0f20 	tst.w	r2, #32
   17b4a:	f000 811f 	beq.w	17d8c <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17b4e:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17b50:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   17b52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17b56:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17b58:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17b5a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17b5e:	7f60      	ldrb	r0, [r4, #29]
   17b60:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17b64:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17b66:	404a      	eors	r2, r1
   17b68:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17b6a:	2201      	movs	r2, #1
   17b6c:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17b6e:	f7fc fb8d 	bl	1428c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   17b72:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   17b76:	0952      	lsrs	r2, r2, #5
   17b78:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17b7c:	f362 0384 	bfi	r3, r2, #2, #3
   17b80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17b84:	4d54      	ldr	r5, [pc, #336]	; (17cd8 <isr_rx_adv+0x5f8>)
   17b86:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17b8a:	4956      	ldr	r1, [pc, #344]	; (17ce4 <isr_rx_adv+0x604>)
   17b8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17b90:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17b94:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17b96:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17b9a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17b9e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17ba2:	4a51      	ldr	r2, [pc, #324]	; (17ce8 <isr_rx_adv+0x608>)
   17ba4:	fba2 2303 	umull	r2, r3, r2, r3
   17ba8:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17baa:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17bac:	0873      	lsrs	r3, r6, #1
   17bae:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17bb0:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17bb2:	f898 3015 	ldrb.w	r3, [r8, #21]
   17bb6:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17bba:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17bbe:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17bc0:	f04f 0b00 	mov.w	fp, #0
   17bc4:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17bc8:	4658      	mov	r0, fp
   17bca:	f7f7 fd19 	bl	f600 <radio_rx_ready_delay_get>
   17bce:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17bd0:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17bd4:	a33e      	add	r3, pc, #248	; (adr r3, 17cd0 <isr_rx_adv+0x5f0>)
   17bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   17bda:	4944      	ldr	r1, [pc, #272]	; (17cec <isr_rx_adv+0x60c>)
   17bdc:	fba0 0101 	umull	r0, r1, r0, r1
   17be0:	f7e9 fa8c 	bl	10fc <__aeabi_uldivmod>
   17be4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17be8:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17bea:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17bee:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17bf0:	2327      	movs	r3, #39	; 0x27
   17bf2:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17bf4:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17bf8:	429d      	cmp	r5, r3
   17bfa:	bf38      	it	cc
   17bfc:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17bfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17c00:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17c02:	f7f7 fee3 	bl	f9cc <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17c06:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17c0a:	b292      	uxth	r2, r2
		conn_offset_us +=
   17c0c:	fb09 9902 	mla	r9, r9, r2, r9
   17c10:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17c12:	4659      	mov	r1, fp
   17c14:	4658      	mov	r0, fp
   17c16:	f7f7 fcf1 	bl	f5fc <radio_tx_chain_delay_get>
   17c1a:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17c1e:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17c22:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c26:	f240 4372 	movw	r3, #1138	; 0x472
   17c2a:	9300      	str	r3, [sp, #0]
   17c2c:	4b30      	ldr	r3, [pc, #192]	; (17cf0 <isr_rx_adv+0x610>)
   17c2e:	2205      	movs	r2, #5
   17c30:	4659      	mov	r1, fp
   17c32:	4658      	mov	r0, fp
   17c34:	f7f9 f850 	bl	10cd8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17c38:	f240 4173 	movw	r1, #1139	; 0x473
   17c3c:	f7f9 fe84 	bl	11948 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17c40:	79fb      	ldrb	r3, [r7, #7]
   17c42:	f003 030f 	and.w	r3, r3, #15
   17c46:	2b01      	cmp	r3, #1
   17c48:	f000 80a3 	beq.w	17d92 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17c4c:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c4e:	3307      	adds	r3, #7
   17c50:	b2db      	uxtb	r3, r3
   17c52:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   17c54:	4b20      	ldr	r3, [pc, #128]	; (17cd8 <isr_rx_adv+0x5f8>)
   17c56:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c58:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17c5c:	f04f 0800 	mov.w	r8, #0
   17c60:	4f22      	ldr	r7, [pc, #136]	; (17cec <isr_rx_adv+0x60c>)
   17c62:	a31b      	add	r3, pc, #108	; (adr r3, 17cd0 <isr_rx_adv+0x5f0>)
   17c64:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c68:	fbaa 0107 	umull	r0, r1, sl, r7
   17c6c:	f7e9 fa46 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c70:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   17c74:	fba6 6707 	umull	r6, r7, r6, r7
   17c78:	a315      	add	r3, pc, #84	; (adr r3, 17cd0 <isr_rx_adv+0x5f0>)
   17c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c7e:	4630      	mov	r0, r6
   17c80:	4639      	mov	r1, r7
   17c82:	f7e9 fa3b 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c86:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17c8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17c8e:	2100      	movs	r1, #0
   17c90:	4a18      	ldr	r2, [pc, #96]	; (17cf4 <isr_rx_adv+0x614>)
   17c92:	2307      	movs	r3, #7
   17c94:	fb03 f300 	mul.w	r3, r3, r0
   17c98:	fb02 3301 	mla	r3, r2, r1, r3
   17c9c:	fba0 0102 	umull	r0, r1, r0, r2
   17ca0:	4419      	add	r1, r3
   17ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17ca6:	2300      	movs	r3, #0
   17ca8:	1a30      	subs	r0, r6, r0
   17caa:	eb67 0101 	sbc.w	r1, r7, r1
   17cae:	f7e9 fa25 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17cb2:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17cb4:	442b      	add	r3, r5
   17cb6:	b29b      	uxth	r3, r3
   17cb8:	f240 428a 	movw	r2, #1162	; 0x48a
   17cbc:	9208      	str	r2, [sp, #32]
   17cbe:	4a0e      	ldr	r2, [pc, #56]	; (17cf8 <isr_rx_adv+0x618>)
   17cc0:	9207      	str	r2, [sp, #28]
   17cc2:	9406      	str	r4, [sp, #24]
   17cc4:	4a0d      	ldr	r2, [pc, #52]	; (17cfc <isr_rx_adv+0x61c>)
   17cc6:	9205      	str	r2, [sp, #20]
   17cc8:	e01a      	b.n	17d00 <isr_rx_adv+0x620>
   17cca:	bf00      	nop
   17ccc:	f3af 8000 	nop.w
   17cd0:	1afd498d 	.word	0x1afd498d
   17cd4:	00000007 	.word	0x00000007
   17cd8:	20000ef4 	.word	0x20000ef4
   17cdc:	026259ff 	.word	0x026259ff
   17ce0:	01c9c37f 	.word	0x01c9c37f
   17ce4:	000314c0 	.word	0x000314c0
   17ce8:	431bde83 	.word	0x431bde83
   17cec:	3b9aca00 	.word	0x3b9aca00
   17cf0:	00011949 	.word	0x00011949
   17cf4:	1afd498d 	.word	0x1afd498d
   17cf8:	000118f5 	.word	0x000118f5
   17cfc:	000164ad 	.word	0x000164ad
   17d00:	9304      	str	r3, [sp, #16]
   17d02:	f8cd 800c 	str.w	r8, [sp, #12]
   17d06:	9002      	str	r0, [sp, #8]
   17d08:	f8cd b004 	str.w	fp, [sp, #4]
   17d0c:	f8cd a000 	str.w	sl, [sp]
   17d10:	464b      	mov	r3, r9
   17d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17d14:	4641      	mov	r1, r8
   17d16:	4640      	mov	r0, r8
   17d18:	f7f8 ff42 	bl	10ba0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17d1c:	4603      	mov	r3, r0
   17d1e:	2800      	cmp	r0, #0
   17d20:	f43f acff 	beq.w	17722 <isr_rx_adv+0x42>
   17d24:	2802      	cmp	r0, #2
   17d26:	d13d      	bne.n	17da4 <isr_rx_adv+0x6c4>
		return 0;
   17d28:	2300      	movs	r3, #0
   17d2a:	e4fa      	b.n	17722 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17d2c:	4923      	ldr	r1, [pc, #140]	; (17dbc <isr_rx_adv+0x6dc>)
   17d2e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17d32:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17d36:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17d38:	fa52 f383 	uxtab	r3, r2, r3
   17d3c:	b2db      	uxtb	r3, r3
   17d3e:	e62b      	b.n	17998 <isr_rx_adv+0x2b8>
		return 0;
   17d40:	2500      	movs	r5, #0
   17d42:	e633      	b.n	179ac <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17d44:	2206      	movs	r2, #6
   17d46:	2100      	movs	r1, #0
   17d48:	f105 0014 	add.w	r0, r5, #20
   17d4c:	f012 fa40 	bl	2a1d0 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17d50:	4641      	mov	r1, r8
   17d52:	f811 3b02 	ldrb.w	r3, [r1], #2
   17d56:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17d5a:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17d5c:	2206      	movs	r2, #6
   17d5e:	f105 000e 	add.w	r0, r5, #14
   17d62:	f7e8 faad 	bl	2c0 <memcpy>
   17d66:	e6b6      	b.n	17ad6 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17d68:	4914      	ldr	r1, [pc, #80]	; (17dbc <isr_rx_adv+0x6dc>)
   17d6a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17d6e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17d72:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17d74:	fa52 f383 	uxtab	r3, r2, r3
   17d78:	b2db      	uxtb	r3, r3
   17d7a:	e6d1      	b.n	17b20 <isr_rx_adv+0x440>
		return 0;
   17d7c:	2300      	movs	r3, #0
   17d7e:	e6d9      	b.n	17b34 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17d80:	4040      	eors	r0, r0
   17d82:	f380 8811 	msr	BASEPRI, r0
   17d86:	f04f 0004 	mov.w	r0, #4
   17d8a:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17d8c:	2200      	movs	r2, #0
   17d8e:	72da      	strb	r2, [r3, #11]
   17d90:	e6ed      	b.n	17b6e <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d92:	4658      	mov	r0, fp
   17d94:	f8cd b000 	str.w	fp, [sp]
   17d98:	465b      	mov	r3, fp
   17d9a:	2203      	movs	r2, #3
   17d9c:	4659      	mov	r1, fp
   17d9e:	f7f8 ff9b 	bl	10cd8 <ticker_stop>
   17da2:	e753      	b.n	17c4c <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17da4:	4040      	eors	r0, r0
   17da6:	f380 8811 	msr	BASEPRI, r0
   17daa:	f04f 0004 	mov.w	r0, #4
   17dae:	df02      	svc	2
	return 1;
   17db0:	2301      	movs	r3, #1
   17db2:	e4b6      	b.n	17722 <isr_rx_adv+0x42>
   17db4:	2301      	movs	r3, #1
   17db6:	e4b4      	b.n	17722 <isr_rx_adv+0x42>
			return 1;
   17db8:	2301      	movs	r3, #1
   17dba:	e4b2      	b.n	17722 <isr_rx_adv+0x42>
   17dbc:	20000ef4 	.word	0x20000ef4

00017dc0 <radio_init>:
{
   17dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dc4:	f89d e018 	ldrb.w	lr, [sp, #24]
   17dc8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17dcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17dce:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17dd2:	4c3b      	ldr	r4, [pc, #236]	; (17ec0 <radio_init+0x100>)
   17dd4:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17dd6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17dda:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17ddc:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17de0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17de4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17de8:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17dec:	f103 0803 	add.w	r8, r3, #3
   17df0:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17df4:	f10e 0701 	add.w	r7, lr, #1
   17df8:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17dfa:	3304      	adds	r3, #4
   17dfc:	b2dd      	uxtb	r5, r3
   17dfe:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17e02:	f10e 0e02 	add.w	lr, lr, #2
   17e06:	fa5f fe8e 	uxtb.w	lr, lr
   17e0a:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17e0e:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17e12:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17e16:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17e1a:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17e1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   17e22:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   17e24:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17e28:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   17e2a:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   17e2e:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   17e32:	2b2a      	cmp	r3, #42	; 0x2a
   17e34:	d931      	bls.n	17e9a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   17e36:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17e3a:	f02c 0c03 	bic.w	ip, ip, #3
   17e3e:	fb1c f808 	smulbb	r8, ip, r8
   17e42:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17e46:	4c1e      	ldr	r4, [pc, #120]	; (17ec0 <radio_init+0x100>)
   17e48:	2334      	movs	r3, #52	; 0x34
   17e4a:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17e4e:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   17e52:	4b1c      	ldr	r3, [pc, #112]	; (17ec4 <radio_init+0x104>)
   17e54:	fba3 c30e 	umull	ip, r3, r3, lr
   17e58:	091b      	lsrs	r3, r3, #4
   17e5a:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17e5e:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   17e62:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   17e64:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17e68:	442a      	add	r2, r5
   17e6a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17e6e:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   17e72:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   17e74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17e78:	330a      	adds	r3, #10
   17e7a:	b29b      	uxth	r3, r3
   17e7c:	f023 0303 	bic.w	r3, r3, #3
   17e80:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   17e82:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   17e86:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17e8a:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17e8e:	1a3f      	subs	r7, r7, r0
   17e90:	d00d      	beq.n	17eae <radio_init+0xee>
		return (retcode + mem_size);
   17e92:	4437      	add	r7, r6
}
   17e94:	4638      	mov	r0, r7
   17e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   17e9a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   17e9e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   17ea2:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   17ea6:	4c06      	ldr	r4, [pc, #24]	; (17ec0 <radio_init+0x100>)
   17ea8:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   17eac:	e7cb      	b.n	17e46 <radio_init+0x86>
	_radio.fc_ena = 1;
   17eae:	2201      	movs	r2, #1
   17eb0:	4b03      	ldr	r3, [pc, #12]	; (17ec0 <radio_init+0x100>)
   17eb2:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   17eb6:	f7ec ff21 	bl	4cfc <common_init>
	radio_setup();
   17eba:	f7f7 faed 	bl	f498 <radio_setup>
	return retcode;
   17ebe:	e7e9      	b.n	17e94 <radio_init+0xd4>
   17ec0:	20000ef4 	.word	0x20000ef4
   17ec4:	4ec4ec4f 	.word	0x4ec4ec4f

00017ec8 <ll_reset>:
{
   17ec8:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   17eca:	2103      	movs	r1, #3
   17ecc:	2005      	movs	r0, #5
   17ece:	f7f9 ff9b 	bl	11e08 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   17ed2:	2104      	movs	r1, #4
   17ed4:	2006      	movs	r0, #6
   17ed6:	f7f9 ff97 	bl	11e08 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17eda:	2400      	movs	r4, #0
   17edc:	e006      	b.n	17eec <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   17ede:	1de0      	adds	r0, r4, #7
   17ee0:	21ff      	movs	r1, #255	; 0xff
   17ee2:	b2c0      	uxtb	r0, r0
   17ee4:	f7f9 ff90 	bl	11e08 <role_disable>
	     conn_handle++) {
   17ee8:	3401      	adds	r4, #1
   17eea:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17eec:	4b1d      	ldr	r3, [pc, #116]	; (17f64 <ll_reset+0x9c>)
   17eee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   17ef2:	429c      	cmp	r4, r3
   17ef4:	d3f3      	bcc.n	17ede <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   17ef6:	4b1b      	ldr	r3, [pc, #108]	; (17f64 <ll_reset+0x9c>)
   17ef8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   17efc:	f36f 0200 	bfc	r2, #0, #1
   17f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   17f04:	2000      	movs	r0, #0
   17f06:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   17f0a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17f0e:	f360 0200 	bfi	r2, r0, #0, #1
   17f12:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   17f16:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17f1a:	2234      	movs	r2, #52	; 0x34
   17f1c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17f20:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   17f24:	4910      	ldr	r1, [pc, #64]	; (17f68 <ll_reset+0xa0>)
   17f26:	fba1 1202 	umull	r1, r2, r1, r2
   17f2a:	0912      	lsrs	r2, r2, #4
   17f2c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   17f30:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   17f34:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   17f38:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   17f3c:	3a01      	subs	r2, #1
   17f3e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   17f42:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   17f46:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   17f4a:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   17f4e:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   17f52:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   17f56:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   17f5a:	f002 fa69 	bl	1a430 <ll_filter_reset>
	common_init();
   17f5e:	f7ec fecd 	bl	4cfc <common_init>
   17f62:	bd10      	pop	{r4, pc}
   17f64:	20000ef4 	.word	0x20000ef4
   17f68:	4ec4ec4f 	.word	0x4ec4ec4f

00017f6c <radio_adv_data_get>:
}
   17f6c:	4800      	ldr	r0, [pc, #0]	; (17f70 <radio_adv_data_get+0x4>)
   17f6e:	4770      	bx	lr
   17f70:	20000f1b 	.word	0x20000f1b

00017f74 <radio_scan_data_get>:
}
   17f74:	4800      	ldr	r0, [pc, #0]	; (17f78 <radio_scan_data_get+0x4>)
   17f76:	4770      	bx	lr
   17f78:	20000f6b 	.word	0x20000f6b

00017f7c <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   17f7c:	4b02      	ldr	r3, [pc, #8]	; (17f88 <radio_adv_is_enabled+0xc>)
   17f7e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   17f82:	f000 0001 	and.w	r0, r0, #1
   17f86:	4770      	bx	lr
   17f88:	20000ef4 	.word	0x20000ef4

00017f8c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   17f8c:	4b06      	ldr	r3, [pc, #24]	; (17fa8 <radio_adv_filter_pol_get+0x1c>)
   17f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17f92:	f013 0f01 	tst.w	r3, #1
   17f96:	d004      	beq.n	17fa2 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   17f98:	4b03      	ldr	r3, [pc, #12]	; (17fa8 <radio_adv_filter_pol_get+0x1c>)
   17f9a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   17f9e:	0980      	lsrs	r0, r0, #6
   17fa0:	4770      	bx	lr
	return 0;
   17fa2:	2000      	movs	r0, #0
}
   17fa4:	4770      	bx	lr
   17fa6:	bf00      	nop
   17fa8:	20000ef4 	.word	0x20000ef4

00017fac <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   17fac:	4b02      	ldr	r3, [pc, #8]	; (17fb8 <radio_scan_is_enabled+0xc>)
   17fae:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   17fb2:	f000 0001 	and.w	r0, r0, #1
   17fb6:	4770      	bx	lr
   17fb8:	20000ef4 	.word	0x20000ef4

00017fbc <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   17fbc:	4b06      	ldr	r3, [pc, #24]	; (17fd8 <radio_scan_filter_pol_get+0x1c>)
   17fbe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   17fc2:	f013 0f01 	tst.w	r3, #1
   17fc6:	d005      	beq.n	17fd4 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   17fc8:	4b03      	ldr	r3, [pc, #12]	; (17fd8 <radio_scan_filter_pol_get+0x1c>)
   17fca:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   17fce:	f3c0 1001 	ubfx	r0, r0, #4, #2
   17fd2:	4770      	bx	lr
	return 0;
   17fd4:	2000      	movs	r0, #0
}
   17fd6:	4770      	bx	lr
   17fd8:	20000ef4 	.word	0x20000ef4
   17fdc:	00000000 	.word	0x00000000

00017fe0 <radio_connect_enable>:
{
   17fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17fe4:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   17fe6:	4c94      	ldr	r4, [pc, #592]	; (18238 <radio_connect_enable+0x258>)
   17fe8:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   17fec:	b11c      	cbz	r4, 17ff6 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17fee:	200c      	movs	r0, #12
}
   17ff0:	b003      	add	sp, #12
   17ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17ff6:	461f      	mov	r7, r3
   17ff8:	4616      	mov	r6, r2
   17ffa:	460d      	mov	r5, r1
   17ffc:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   17ffe:	488f      	ldr	r0, [pc, #572]	; (1823c <radio_connect_enable+0x25c>)
   18000:	f7f7 f8fd 	bl	f1fe <mem_acquire>
	if (!link) {
   18004:	4681      	mov	r9, r0
   18006:	2800      	cmp	r0, #0
   18008:	f000 810f 	beq.w	1822a <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   1800c:	488c      	ldr	r0, [pc, #560]	; (18240 <radio_connect_enable+0x260>)
   1800e:	f7f7 f8f6 	bl	f1fe <mem_acquire>
   18012:	9001      	str	r0, [sp, #4]
	if (!conn) {
   18014:	2800      	cmp	r0, #0
   18016:	f000 8102 	beq.w	1821e <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1801a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 18238 <radio_connect_enable+0x258>
   1801e:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   18022:	f364 1386 	bfi	r3, r4, #6, #1
   18026:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   1802a:	2206      	movs	r2, #6
   1802c:	4629      	mov	r1, r5
   1802e:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   18032:	f7e8 f945 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   18036:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   1803a:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   1803e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18042:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   18046:	2100      	movs	r1, #0
   18048:	4608      	mov	r0, r1
   1804a:	f7f7 fad5 	bl	f5f8 <radio_tx_ready_delay_get>
   1804e:	f200 4052 	addw	r0, r0, #1106	; 0x452
   18052:	2400      	movs	r4, #0
   18054:	a376      	add	r3, pc, #472	; (adr r3, 18230 <radio_connect_enable+0x250>)
   18056:	e9d3 2300 	ldrd	r2, r3, [r3]
   1805a:	497a      	ldr	r1, [pc, #488]	; (18244 <radio_connect_enable+0x264>)
   1805c:	fba0 0101 	umull	r0, r1, r0, r1
   18060:	f7e9 f84c 	bl	10fc <__aeabi_uldivmod>
   18064:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   18068:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   1806c:	9b01      	ldr	r3, [sp, #4]
   1806e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18072:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   18074:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   18078:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   1807c:	f7fe fe84 	bl	16d88 <access_addr_get>
   18080:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   18082:	2204      	movs	r2, #4
   18084:	4669      	mov	r1, sp
   18086:	9801      	ldr	r0, [sp, #4]
   18088:	3010      	adds	r0, #16
   1808a:	f7e8 f919 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   1808e:	a902      	add	r1, sp, #8
   18090:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   18094:	2203      	movs	r2, #3
   18096:	3014      	adds	r0, #20
   18098:	f7e8 f912 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1809c:	2205      	movs	r2, #5
   1809e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   180a2:	9801      	ldr	r0, [sp, #4]
   180a4:	3017      	adds	r0, #23
   180a6:	f7e8 f90b 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   180aa:	9b01      	ldr	r3, [sp, #4]
   180ac:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   180b0:	7f5a      	ldrb	r2, [r3, #29]
   180b2:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   180b6:	f364 1286 	bfi	r2, r4, #6, #1
   180ba:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   180bc:	2506      	movs	r5, #6
   180be:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   180c0:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   180c2:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   180c4:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   180c8:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   180ca:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   180cc:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   180ce:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   180d2:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   180d4:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   180d8:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   180da:	221b      	movs	r2, #27
   180dc:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   180de:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   180e0:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   180e4:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   180e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   180ea:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   180ec:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   180ee:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   180f2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   180f6:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   180fa:	2101      	movs	r1, #1
   180fc:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   18100:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18104:	f364 12c7 	bfi	r2, r4, #7, #1
   18108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1810c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   18110:	f361 0202 	bfi	r2, r1, #0, #3
   18114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   18118:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   1811c:	b2d2      	uxtb	r2, r2
   1811e:	f366 02c5 	bfi	r2, r6, #3, #3
   18122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   18126:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   1812a:	f361 0202 	bfi	r2, r1, #0, #3
   1812e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   18132:	7f5a      	ldrb	r2, [r3, #29]
   18134:	f364 12c7 	bfi	r2, r4, #7, #1
   18138:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   1813a:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   1813c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   18140:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   18144:	f364 0200 	bfi	r2, r4, #0, #1
   18148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   1814c:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   18150:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18154:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18158:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   1815c:	f242 7510 	movw	r5, #10000	; 0x2710
   18160:	fb05 1202 	mla	r2, r5, r2, r1
   18164:	3a01      	subs	r2, #1
   18166:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   1816a:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   1816c:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18170:	4a35      	ldr	r2, [pc, #212]	; (18248 <radio_connect_enable+0x268>)
   18172:	440a      	add	r2, r1
   18174:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   18178:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   1817c:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18180:	4a32      	ldr	r2, [pc, #200]	; (1824c <radio_connect_enable+0x26c>)
   18182:	440a      	add	r2, r1
   18184:	fbb2 f2f1 	udiv	r2, r2, r1
   18188:	b292      	uxth	r2, r2
   1818a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1818e:	1d81      	adds	r1, r0, #6
   18190:	428a      	cmp	r2, r1
   18192:	dd03      	ble.n	1819c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   18194:	1a12      	subs	r2, r2, r0
   18196:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18198:	3a06      	subs	r2, #6
   1819a:	b292      	uxth	r2, r2
   1819c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   181a0:	2000      	movs	r0, #0
   181a2:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   181a6:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   181aa:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   181ae:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   181b2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   181b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   181ba:	f360 0241 	bfi	r2, r0, #1, #1
   181be:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   181c2:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   181c6:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   181ca:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   181ce:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   181d2:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   181d6:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   181da:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   181de:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   181e2:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   181e6:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   181ea:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   181ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
   181f2:	f360 12c7 	bfi	r2, r0, #7, #1
   181f6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   181fa:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   181fe:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   18202:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   18206:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1820a:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1820e:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   18212:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   18216:	4a08      	ldr	r2, [pc, #32]	; (18238 <radio_connect_enable+0x258>)
   18218:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   1821c:	e6e8      	b.n	17ff0 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   1821e:	4907      	ldr	r1, [pc, #28]	; (1823c <radio_connect_enable+0x25c>)
   18220:	4648      	mov	r0, r9
   18222:	f7f7 f808 	bl	f236 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18226:	2007      	movs	r0, #7
   18228:	e6e2      	b.n	17ff0 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1822a:	2007      	movs	r0, #7
   1822c:	e6e0      	b.n	17ff0 <radio_connect_enable+0x10>
   1822e:	bf00      	nop
   18230:	1afd498d 	.word	0x1afd498d
   18234:	00000007 	.word	0x00000007
   18238:	20000ef4 	.word	0x20000ef4
   1823c:	20001038 	.word	0x20001038
   18240:	20000ffc 	.word	0x20000ffc
   18244:	3b9aca00 	.word	0x3b9aca00
   18248:	026259ff 	.word	0x026259ff
   1824c:	01c9c37f 	.word	0x01c9c37f

00018250 <ll_conn_update>:
{
   18250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18254:	460c      	mov	r4, r1
   18256:	4690      	mov	r8, r2
   18258:	461f      	mov	r7, r3
   1825a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1825e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   18262:	f7f9 fdb3 	bl	11dcc <connection_get>
	if (!conn) {
   18266:	2800      	cmp	r0, #0
   18268:	d078      	beq.n	1835c <ll_conn_update+0x10c>
   1826a:	4603      	mov	r3, r0
	if (!cmd) {
   1826c:	b984      	cbnz	r4, 18290 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   1826e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   18272:	f012 0f20 	tst.w	r2, #32
   18276:	d007      	beq.n	18288 <ll_conn_update+0x38>
		    (conn->llcp_features &
   18278:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   1827c:	f012 0f02 	tst.w	r2, #2
   18280:	d002      	beq.n	18288 <ll_conn_update+0x38>
			cmd++;
   18282:	3401      	adds	r4, #1
   18284:	b2e4      	uxtb	r4, r4
   18286:	e003      	b.n	18290 <ll_conn_update+0x40>
		} else if (conn->role) {
   18288:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1828c:	2a00      	cmp	r2, #0
   1828e:	db68      	blt.n	18362 <ll_conn_update+0x112>
	if (!cmd) {
   18290:	bb1c      	cbnz	r4, 182da <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   18292:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   18296:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   1829a:	428a      	cmp	r2, r1
   1829c:	d002      	beq.n	182a4 <ll_conn_update+0x54>
			return 1;
   1829e:	2001      	movs	r0, #1
   182a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   182a4:	2401      	movs	r4, #1
   182a6:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   182aa:	2000      	movs	r0, #0
   182ac:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   182b0:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   182b4:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   182b8:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   182bc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   182c0:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   182c4:	f360 0182 	bfi	r1, r0, #2, #1
   182c8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   182cc:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   182d0:	4422      	add	r2, r4
   182d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   182d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   182da:	3c01      	subs	r4, #1
		if (cmd) {
   182dc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   182e0:	d01c      	beq.n	1831c <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   182e2:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   182e6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   182ea:	4291      	cmp	r1, r2
   182ec:	d03c      	beq.n	18368 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   182ee:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   182f2:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   182f6:	2a03      	cmp	r2, #3
   182f8:	d002      	beq.n	18300 <ll_conn_update+0xb0>
				return 1;
   182fa:	2001      	movs	r0, #1
   182fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   18300:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   18304:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   18308:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1830c:	b2d2      	uxtb	r2, r2
   1830e:	f042 0208 	orr.w	r2, r2, #8
   18312:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   18316:	2000      	movs	r0, #0
   18318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   1831c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   18320:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   18324:	428a      	cmp	r2, r1
   18326:	d002      	beq.n	1832e <ll_conn_update+0xde>
				return 1;
   18328:	2001      	movs	r0, #1
}
   1832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   1832e:	2000      	movs	r0, #0
   18330:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   18334:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   18338:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   1833c:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   18340:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   18344:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18348:	b2c9      	uxtb	r1, r1
   1834a:	f041 0108 	orr.w	r1, r1, #8
   1834e:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   18352:	3201      	adds	r2, #1
   18354:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   18358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   1835c:	2001      	movs	r0, #1
   1835e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   18362:	2001      	movs	r0, #1
   18364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   18368:	2001      	movs	r0, #1
   1836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00018370 <ll_chm_update>:
{
   18370:	b570      	push	{r4, r5, r6, lr}
   18372:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   18374:	4c1c      	ldr	r4, [pc, #112]	; (183e8 <ll_chm_update+0x78>)
   18376:	f504 758b 	add.w	r5, r4, #278	; 0x116
   1837a:	2205      	movs	r2, #5
   1837c:	4601      	mov	r1, r0
   1837e:	4628      	mov	r0, r5
   18380:	f7e7 ff9e 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   18384:	2105      	movs	r1, #5
   18386:	4628      	mov	r0, r5
   18388:	f7f6 ffbd 	bl	f306 <util_ones_count_get>
	_radio.data_chan_count =
   1838c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   18390:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   18394:	e000      	b.n	18398 <ll_chm_update+0x28>
{
   18396:	462b      	mov	r3, r5
	while (instance--) {
   18398:	1e5d      	subs	r5, r3, #1
   1839a:	b2ed      	uxtb	r5, r5
   1839c:	b303      	cbz	r3, 183e0 <ll_chm_update+0x70>
		conn = connection_get(instance);
   1839e:	4628      	mov	r0, r5
   183a0:	f7f9 fd14 	bl	11dcc <connection_get>
		if (!conn || conn->role) {
   183a4:	4604      	mov	r4, r0
   183a6:	2800      	cmp	r0, #0
   183a8:	d0f5      	beq.n	18396 <ll_chm_update+0x26>
   183aa:	f990 301d 	ldrsb.w	r3, [r0, #29]
   183ae:	2b00      	cmp	r3, #0
   183b0:	dbf1      	blt.n	18396 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   183b2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   183b6:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   183ba:	429a      	cmp	r2, r3
   183bc:	d112      	bne.n	183e4 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   183be:	2205      	movs	r2, #5
   183c0:	4631      	mov	r1, r6
   183c2:	3079      	adds	r0, #121	; 0x79
   183c4:	f7e7 ff7c 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   183c8:	2301      	movs	r3, #1
   183ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   183ce:	2302      	movs	r3, #2
   183d0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   183d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   183d8:	3301      	adds	r3, #1
   183da:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   183de:	e7da      	b.n	18396 <ll_chm_update+0x26>
	return 0;
   183e0:	2000      	movs	r0, #0
   183e2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   183e4:	2001      	movs	r0, #1
}
   183e6:	bd70      	pop	{r4, r5, r6, pc}
   183e8:	20000ef4 	.word	0x20000ef4

000183ec <ll_chm_get>:
{
   183ec:	b538      	push	{r3, r4, r5, lr}
   183ee:	460d      	mov	r5, r1
	conn = connection_get(handle);
   183f0:	f7f9 fcec 	bl	11dcc <connection_get>
	if (!conn) {
   183f4:	4604      	mov	r4, r0
   183f6:	b160      	cbz	r0, 18412 <ll_chm_get+0x26>
		conn->chm_update = 0;
   183f8:	2300      	movs	r3, #0
   183fa:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   183fc:	2205      	movs	r2, #5
   183fe:	f104 0117 	add.w	r1, r4, #23
   18402:	4628      	mov	r0, r5
   18404:	f7e7 ff5c 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   18408:	7f23      	ldrb	r3, [r4, #28]
   1840a:	2b00      	cmp	r3, #0
   1840c:	d1f4      	bne.n	183f8 <ll_chm_get+0xc>
	return 0;
   1840e:	2000      	movs	r0, #0
   18410:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   18412:	2001      	movs	r0, #1
}
   18414:	bd38      	pop	{r3, r4, r5, pc}

00018416 <ll_start_enc_req_send>:
{
   18416:	b570      	push	{r4, r5, r6, lr}
   18418:	460d      	mov	r5, r1
   1841a:	4616      	mov	r6, r2
	conn = connection_get(handle);
   1841c:	f7f9 fcd6 	bl	11dcc <connection_get>
	if (!conn) {
   18420:	2800      	cmp	r0, #0
   18422:	d03e      	beq.n	184a2 <ll_start_enc_req_send+0x8c>
   18424:	4604      	mov	r4, r0
	if (error_code) {
   18426:	b32d      	cbz	r5, 18474 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   18428:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1842c:	f013 0f40 	tst.w	r3, #64	; 0x40
   18430:	d111      	bne.n	18456 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   18432:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   18436:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1843a:	4293      	cmp	r3, r2
   1843c:	d001      	beq.n	18442 <ll_start_enc_req_send+0x2c>
				return 1;
   1843e:	2001      	movs	r0, #1
   18440:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   18442:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   18446:	2203      	movs	r2, #3
   18448:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   1844c:	3301      	adds	r3, #1
   1844e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   18452:	2000      	movs	r0, #0
   18454:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   18456:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   1845a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   1845e:	429a      	cmp	r2, r3
   18460:	d001      	beq.n	18466 <ll_start_enc_req_send+0x50>
				return 1;
   18462:	2001      	movs	r0, #1
   18464:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   18466:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   1846a:	3301      	adds	r3, #1
   1846c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   18470:	2000      	movs	r0, #0
   18472:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18474:	2210      	movs	r2, #16
   18476:	4631      	mov	r1, r6
   18478:	3083      	adds	r0, #131	; 0x83
   1847a:	f7e7 ff21 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   1847e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18482:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   18486:	4293      	cmp	r3, r2
   18488:	d001      	beq.n	1848e <ll_start_enc_req_send+0x78>
			return 1;
   1848a:	2001      	movs	r0, #1
}
   1848c:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   1848e:	2000      	movs	r0, #0
   18490:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   18494:	2203      	movs	r2, #3
   18496:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   1849a:	3301      	adds	r3, #1
   1849c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   184a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   184a2:	2001      	movs	r0, #1
   184a4:	bd70      	pop	{r4, r5, r6, pc}

000184a6 <ll_feature_req_send>:
{
   184a6:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   184a8:	f7f9 fc90 	bl	11dcc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   184ac:	b178      	cbz	r0, 184ce <ll_feature_req_send+0x28>
   184ae:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   184b2:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   184b6:	428a      	cmp	r2, r1
   184b8:	d001      	beq.n	184be <ll_feature_req_send+0x18>
		return 1;
   184ba:	2001      	movs	r0, #1
}
   184bc:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   184be:	2104      	movs	r1, #4
   184c0:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   184c4:	3201      	adds	r2, #1
   184c6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   184ca:	2000      	movs	r0, #0
   184cc:	bd08      	pop	{r3, pc}
		return 1;
   184ce:	2001      	movs	r0, #1
   184d0:	bd08      	pop	{r3, pc}

000184d2 <ll_version_ind_send>:
{
   184d2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   184d4:	f7f9 fc7a 	bl	11dcc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   184d8:	b178      	cbz	r0, 184fa <ll_version_ind_send+0x28>
   184da:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   184de:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   184e2:	428a      	cmp	r2, r1
   184e4:	d001      	beq.n	184ea <ll_version_ind_send+0x18>
		return 1;
   184e6:	2001      	movs	r0, #1
}
   184e8:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   184ea:	2105      	movs	r1, #5
   184ec:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   184f0:	3201      	adds	r2, #1
   184f2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   184f6:	2000      	movs	r0, #0
   184f8:	bd08      	pop	{r3, pc}
		return 1;
   184fa:	2001      	movs	r0, #1
   184fc:	bd08      	pop	{r3, pc}

000184fe <ll_terminate_ind_send>:
{
   184fe:	b510      	push	{r4, lr}
   18500:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18502:	f7f9 fc63 	bl	11dcc <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   18506:	b170      	cbz	r0, 18526 <ll_terminate_ind_send+0x28>
   18508:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   1850c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   18510:	4291      	cmp	r1, r2
   18512:	d001      	beq.n	18518 <ll_terminate_ind_send+0x1a>
		return 1;
   18514:	2001      	movs	r0, #1
}
   18516:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   18518:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1851c:	3201      	adds	r2, #1
   1851e:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   18522:	2000      	movs	r0, #0
   18524:	bd10      	pop	{r4, pc}
		return 1;
   18526:	2001      	movs	r0, #1
   18528:	bd10      	pop	{r4, pc}

0001852a <ll_tx_power_level_get>:
{
   1852a:	b510      	push	{r4, lr}
   1852c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1852e:	f7f9 fc4d 	bl	11dcc <connection_get>
	if (!conn) {
   18532:	b110      	cbz	r0, 1853a <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   18534:	2000      	movs	r0, #0
   18536:	7020      	strb	r0, [r4, #0]
	return 0;
   18538:	bd10      	pop	{r4, pc}
		return 1;
   1853a:	2001      	movs	r0, #1
}
   1853c:	bd10      	pop	{r4, pc}

0001853e <ll_tx_power_get>:
	*min = 0;
   1853e:	2300      	movs	r3, #0
   18540:	7003      	strb	r3, [r0, #0]
	*max = 0;
   18542:	700b      	strb	r3, [r1, #0]
   18544:	4770      	bx	lr
	...

00018548 <ll_apto_get>:
{
   18548:	b510      	push	{r4, lr}
   1854a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1854c:	f7f9 fc3e 	bl	11dcc <connection_get>
	if (!conn) {
   18550:	b188      	cbz	r0, 18576 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   18552:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   18556:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   18558:	fb03 f301 	mul.w	r3, r3, r1
   1855c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   18560:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18564:	4a05      	ldr	r2, [pc, #20]	; (1857c <ll_apto_get+0x34>)
   18566:	fb82 1203 	smull	r1, r2, r2, r3
   1856a:	17db      	asrs	r3, r3, #31
   1856c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   18570:	8023      	strh	r3, [r4, #0]
	return 0;
   18572:	2000      	movs	r0, #0
   18574:	bd10      	pop	{r4, pc}
		return 1;
   18576:	2001      	movs	r0, #1
}
   18578:	bd10      	pop	{r4, pc}
   1857a:	bf00      	nop
   1857c:	10624dd3 	.word	0x10624dd3

00018580 <ll_apto_set>:
{
   18580:	b510      	push	{r4, lr}
   18582:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18584:	f7f9 fc22 	bl	11dcc <connection_get>
	if (!conn) {
   18588:	b178      	cbz	r0, 185aa <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   1858a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1858c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18590:	fb03 f301 	mul.w	r3, r3, r1
   18594:	f242 7110 	movw	r1, #10000	; 0x2710
   18598:	fb01 3404 	mla	r4, r1, r4, r3
   1859c:	3c01      	subs	r4, #1
   1859e:	fb94 f4f3 	sdiv	r4, r4, r3
   185a2:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   185a6:	2000      	movs	r0, #0
   185a8:	bd10      	pop	{r4, pc}
		return 1;
   185aa:	2001      	movs	r0, #1
}
   185ac:	bd10      	pop	{r4, pc}

000185ae <ll_length_req_send>:
{
   185ae:	b538      	push	{r3, r4, r5, lr}
   185b0:	460d      	mov	r5, r1
   185b2:	4614      	mov	r4, r2
	conn = connection_get(handle);
   185b4:	f7f9 fc0a 	bl	11dcc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   185b8:	b1f0      	cbz	r0, 185f8 <ll_length_req_send+0x4a>
   185ba:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   185be:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   185c2:	4291      	cmp	r1, r2
   185c4:	d001      	beq.n	185ca <ll_length_req_send+0x1c>
		return 1;
   185c6:	2001      	movs	r0, #1
   185c8:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   185ca:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   185ce:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   185d2:	428a      	cmp	r2, r1
   185d4:	d001      	beq.n	185da <ll_length_req_send+0x2c>
		return 1;
   185d6:	2001      	movs	r0, #1
}
   185d8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   185da:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   185de:	f36f 0101 	bfc	r1, #0, #2
   185e2:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   185e6:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   185ea:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   185ee:	3201      	adds	r2, #1
   185f0:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   185f4:	2000      	movs	r0, #0
   185f6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   185f8:	2001      	movs	r0, #1
   185fa:	bd38      	pop	{r3, r4, r5, pc}

000185fc <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   185fc:	4b03      	ldr	r3, [pc, #12]	; (1860c <ll_length_default_get+0x10>)
   185fe:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   18602:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   18604:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   18608:	800b      	strh	r3, [r1, #0]
   1860a:	4770      	bx	lr
   1860c:	20000ef4 	.word	0x20000ef4

00018610 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   18610:	4b03      	ldr	r3, [pc, #12]	; (18620 <ll_length_default_set+0x10>)
   18612:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   18616:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   1861a:	2000      	movs	r0, #0
   1861c:	4770      	bx	lr
   1861e:	bf00      	nop
   18620:	20000ef4 	.word	0x20000ef4

00018624 <ll_length_max_get>:
{
   18624:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18626:	241b      	movs	r4, #27
   18628:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1862a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1862e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18630:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   18632:	8018      	strh	r0, [r3, #0]
}
   18634:	bc10      	pop	{r4}
   18636:	4770      	bx	lr

00018638 <ll_phy_get>:
{
   18638:	b538      	push	{r3, r4, r5, lr}
   1863a:	460d      	mov	r5, r1
   1863c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1863e:	f7f9 fbc5 	bl	11dcc <connection_get>
	if (!conn) {
   18642:	b158      	cbz	r0, 1865c <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   18644:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   18648:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1864c:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   1864e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18652:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18656:	7023      	strb	r3, [r4, #0]
	return 0;
   18658:	2000      	movs	r0, #0
   1865a:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1865c:	2001      	movs	r0, #1
}
   1865e:	bd38      	pop	{r3, r4, r5, pc}

00018660 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   18660:	4b03      	ldr	r3, [pc, #12]	; (18670 <ll_phy_default_set+0x10>)
   18662:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   18666:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1866a:	2000      	movs	r0, #0
   1866c:	4770      	bx	lr
   1866e:	bf00      	nop
   18670:	20000ef4 	.word	0x20000ef4

00018674 <ll_phy_req_send>:
{
   18674:	b570      	push	{r4, r5, r6, lr}
   18676:	460e      	mov	r6, r1
   18678:	4615      	mov	r5, r2
   1867a:	461c      	mov	r4, r3
	conn = connection_get(handle);
   1867c:	f7f9 fba6 	bl	11dcc <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18680:	b338      	cbz	r0, 186d2 <ll_phy_req_send+0x5e>
   18682:	4603      	mov	r3, r0
   18684:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18688:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1868c:	4291      	cmp	r1, r2
   1868e:	d001      	beq.n	18694 <ll_phy_req_send+0x20>
		return 1;
   18690:	2001      	movs	r0, #1
   18692:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   18694:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   18698:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1869c:	428a      	cmp	r2, r1
   1869e:	d001      	beq.n	186a4 <ll_phy_req_send+0x30>
		return 1;
   186a0:	2001      	movs	r0, #1
}
   186a2:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   186a4:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   186a8:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   186ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   186b0:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   186b4:	f040 0002 	orr.w	r0, r0, #2
   186b8:	f365 0000 	bfi	r0, r5, #0, #1
   186bc:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   186c0:	f364 1147 	bfi	r1, r4, #5, #3
   186c4:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   186c8:	3201      	adds	r2, #1
   186ca:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   186ce:	2000      	movs	r0, #0
   186d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   186d2:	2001      	movs	r0, #1
   186d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000186d8 <radio_rx_get>:
{
   186d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   186da:	b083      	sub	sp, #12
   186dc:	4606      	mov	r6, r0
   186de:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   186e0:	4b1b      	ldr	r3, [pc, #108]	; (18750 <radio_rx_get+0x78>)
   186e2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   186e6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   186ea:	429a      	cmp	r2, r3
   186ec:	d024      	beq.n	18738 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   186ee:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   186f0:	783a      	ldrb	r2, [r7, #0]
   186f2:	4918      	ldr	r1, [pc, #96]	; (18754 <radio_rx_get+0x7c>)
   186f4:	f7f9 fb0c 	bl	11d10 <tx_cmplt_get>
		if (!cmplt) {
   186f8:	4605      	mov	r5, r0
   186fa:	b9d0      	cbnz	r0, 18732 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   186fc:	4b14      	ldr	r3, [pc, #80]	; (18750 <radio_rx_get+0x78>)
   186fe:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   18702:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   18706:	4604      	mov	r4, r0
   18708:	e000      	b.n	1870c <radio_rx_get+0x34>
   1870a:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   1870c:	4b10      	ldr	r3, [pc, #64]	; (18750 <radio_rx_get+0x78>)
   1870e:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   18712:	f10d 0105 	add.w	r1, sp, #5
   18716:	f10d 0006 	add.w	r0, sp, #6
   1871a:	f7f9 faf9 	bl	11d10 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1871e:	2c00      	cmp	r4, #0
   18720:	d1f3      	bne.n	1870a <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   18722:	4284      	cmp	r4, r0
   18724:	d001      	beq.n	1872a <radio_rx_get+0x52>
   18726:	4604      	mov	r4, r0
   18728:	e7f0      	b.n	1870c <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   1872a:	6037      	str	r7, [r6, #0]
}
   1872c:	4628      	mov	r0, r5
   1872e:	b003      	add	sp, #12
   18730:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   18732:	2300      	movs	r3, #0
   18734:	6033      	str	r3, [r6, #0]
   18736:	e7f9      	b.n	1872c <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   18738:	4905      	ldr	r1, [pc, #20]	; (18750 <radio_rx_get+0x78>)
   1873a:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   1873e:	f201 1173 	addw	r1, r1, #371	; 0x173
   18742:	f7f9 fae5 	bl	11d10 <tx_cmplt_get>
   18746:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   18748:	2300      	movs	r3, #0
   1874a:	6033      	str	r3, [r6, #0]
   1874c:	e7ee      	b.n	1872c <radio_rx_get+0x54>
   1874e:	bf00      	nop
   18750:	20000ef4 	.word	0x20000ef4
   18754:	20001067 	.word	0x20001067

00018758 <radio_rx_mem_release>:
{
   18758:	b570      	push	{r4, r5, r6, lr}
   1875a:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   1875c:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   1875e:	e003      	b.n	18768 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   18760:	491e      	ldr	r1, [pc, #120]	; (187dc <radio_rx_mem_release+0x84>)
   18762:	f7f6 fd68 	bl	f236 <mem_release>
{
   18766:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   18768:	b398      	cbz	r0, 187d2 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   1876a:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   1876c:	7903      	ldrb	r3, [r0, #4]
   1876e:	3b01      	subs	r3, #1
   18770:	2b0b      	cmp	r3, #11
   18772:	d828      	bhi.n	187c6 <radio_rx_mem_release+0x6e>
   18774:	a201      	add	r2, pc, #4	; (adr r2, 1877c <radio_rx_mem_release+0x24>)
   18776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1877a:	bf00      	nop
   1877c:	00018761 	.word	0x00018761
   18780:	00018761 	.word	0x00018761
   18784:	00018761 	.word	0x00018761
   18788:	00018761 	.word	0x00018761
   1878c:	00018761 	.word	0x00018761
   18790:	00018761 	.word	0x00018761
   18794:	000187ad 	.word	0x000187ad
   18798:	00018761 	.word	0x00018761
   1879c:	00018761 	.word	0x00018761
   187a0:	00018761 	.word	0x00018761
   187a4:	00018761 	.word	0x00018761
   187a8:	00018761 	.word	0x00018761
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   187ac:	4d0c      	ldr	r5, [pc, #48]	; (187e0 <radio_rx_mem_release+0x88>)
   187ae:	88c2      	ldrh	r2, [r0, #6]
   187b0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   187b4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   187b8:	f7f6 fd5e 	bl	f278 <mem_get>
			mem_release(conn, &_radio.conn_free);
   187bc:	f505 7184 	add.w	r1, r5, #264	; 0x108
   187c0:	f7f6 fd39 	bl	f236 <mem_release>
			break;
   187c4:	e7cf      	b.n	18766 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   187c6:	4040      	eors	r0, r0
   187c8:	f380 8811 	msr	BASEPRI, r0
   187cc:	f04f 0004 	mov.w	r0, #4
   187d0:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   187d2:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   187d4:	20ff      	movs	r0, #255	; 0xff
   187d6:	f7f9 fa4f 	bl	11c78 <packet_rx_allocate>
   187da:	bd70      	pop	{r4, r5, r6, pc}
   187dc:	20001020 	.word	0x20001020
   187e0:	20000ef4 	.word	0x20000ef4

000187e4 <do_radio_rx_fc_set>:
	if (req == ack) {
   187e4:	4291      	cmp	r1, r2
   187e6:	d007      	beq.n	187f8 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   187e8:	bb41      	cbnz	r1, 1883c <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   187ea:	4b1c      	ldr	r3, [pc, #112]	; (1885c <do_radio_rx_fc_set+0x78>)
   187ec:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   187f0:	4298      	cmp	r0, r3
   187f2:	d023      	beq.n	1883c <do_radio_rx_fc_set+0x58>
		return 1;
   187f4:	2001      	movs	r0, #1
   187f6:	4770      	bx	lr
{
   187f8:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   187fa:	4b18      	ldr	r3, [pc, #96]	; (1885c <do_radio_rx_fc_set+0x78>)
   187fc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   18800:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18804:	429c      	cmp	r4, r3
   18806:	d002      	beq.n	1880e <do_radio_rx_fc_set+0x2a>
			return 1;
   18808:	2001      	movs	r0, #1
}
   1880a:	bc30      	pop	{r4, r5}
   1880c:	4770      	bx	lr
			if (ack1 == 0) {
   1880e:	b19a      	cbz	r2, 18838 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   18810:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   18812:	3b01      	subs	r3, #1
   18814:	b2db      	uxtb	r3, r3
   18816:	4c11      	ldr	r4, [pc, #68]	; (1885c <do_radio_rx_fc_set+0x78>)
   18818:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   1881c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   18820:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   18822:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   18826:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   1882a:	b2db      	uxtb	r3, r3
   1882c:	4299      	cmp	r1, r3
   1882e:	d00f      	beq.n	18850 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   18830:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   18834:	2001      	movs	r0, #1
   18836:	e7e8      	b.n	1880a <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   18838:	2303      	movs	r3, #3
   1883a:	e7ea      	b.n	18812 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   1883c:	b151      	cbz	r1, 18854 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1883e:	31b7      	adds	r1, #183	; 0xb7
   18840:	4b06      	ldr	r3, [pc, #24]	; (1885c <do_radio_rx_fc_set+0x78>)
   18842:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   18846:	88cb      	ldrh	r3, [r1, #6]
   18848:	4298      	cmp	r0, r3
   1884a:	d005      	beq.n	18858 <do_radio_rx_fc_set+0x74>
		return 1;
   1884c:	2001      	movs	r0, #1
   1884e:	4770      	bx	lr
	return 0;
   18850:	2000      	movs	r0, #0
   18852:	e7da      	b.n	1880a <do_radio_rx_fc_set+0x26>
   18854:	4608      	mov	r0, r1
   18856:	4770      	bx	lr
   18858:	2000      	movs	r0, #0
   1885a:	4770      	bx	lr
   1885c:	20000ef4 	.word	0x20000ef4

00018860 <radio_rx_fc_set>:
{
   18860:	b538      	push	{r3, r4, r5, lr}
   18862:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   18864:	4b1b      	ldr	r3, [pc, #108]	; (188d4 <radio_rx_fc_set+0x74>)
   18866:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   1886a:	b338      	cbz	r0, 188bc <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   1886c:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18870:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   18872:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   18876:	b141      	cbz	r1, 1888a <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   18878:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1887c:	429c      	cmp	r4, r3
   1887e:	d023      	beq.n	188c8 <radio_rx_fc_set+0x68>
   18880:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   18882:	4629      	mov	r1, r5
   18884:	f7ff ffae 	bl	187e4 <do_radio_rx_fc_set>
   18888:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1888a:	4b12      	ldr	r3, [pc, #72]	; (188d4 <radio_rx_fc_set+0x74>)
   1888c:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   18890:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18894:	4298      	cmp	r0, r3
   18896:	d001      	beq.n	1889c <radio_rx_fc_set+0x3c>
	return 0;
   18898:	4608      	mov	r0, r1
   1889a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1889c:	4295      	cmp	r5, r2
   1889e:	d015      	beq.n	188cc <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   188a0:	4b0c      	ldr	r3, [pc, #48]	; (188d4 <radio_rx_fc_set+0x74>)
   188a2:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   188a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   188aa:	4298      	cmp	r0, r3
   188ac:	d010      	beq.n	188d0 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   188ae:	4b09      	ldr	r3, [pc, #36]	; (188d4 <radio_rx_fc_set+0x74>)
   188b0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   188b4:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   188b6:	429d      	cmp	r5, r3
   188b8:	d001      	beq.n	188be <radio_rx_fc_set+0x5e>
	return 0;
   188ba:	4608      	mov	r0, r1
}
   188bc:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   188be:	4b05      	ldr	r3, [pc, #20]	; (188d4 <radio_rx_fc_set+0x74>)
   188c0:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   188c4:	4608      	mov	r0, r1
   188c6:	bd38      	pop	{r3, r4, r5, pc}
   188c8:	2000      	movs	r0, #0
   188ca:	bd38      	pop	{r3, r4, r5, pc}
   188cc:	4608      	mov	r0, r1
   188ce:	bd38      	pop	{r3, r4, r5, pc}
   188d0:	4608      	mov	r0, r1
   188d2:	bd38      	pop	{r3, r4, r5, pc}
   188d4:	20000ef4 	.word	0x20000ef4

000188d8 <radio_tx_mem_acquire>:
{
   188d8:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   188da:	4802      	ldr	r0, [pc, #8]	; (188e4 <radio_tx_mem_acquire+0xc>)
   188dc:	f7f6 fc8f 	bl	f1fe <mem_acquire>
}
   188e0:	bd08      	pop	{r3, pc}
   188e2:	bf00      	nop
   188e4:	20001054 	.word	0x20001054

000188e8 <radio_tx_mem_release>:
{
   188e8:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   188ea:	4902      	ldr	r1, [pc, #8]	; (188f4 <radio_tx_mem_release+0xc>)
   188ec:	f7f6 fca3 	bl	f236 <mem_release>
   188f0:	bd08      	pop	{r3, pc}
   188f2:	bf00      	nop
   188f4:	20001054 	.word	0x20001054

000188f8 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   188f8:	b570      	push	{r4, r5, r6, lr}
   188fa:	b088      	sub	sp, #32
   188fc:	4605      	mov	r5, r0
   188fe:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   18900:	4b36      	ldr	r3, [pc, #216]	; (189dc <radio_tx_mem_enqueue+0xe4>)
   18902:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   18906:	3401      	adds	r4, #1
   18908:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   1890a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1890e:	429c      	cmp	r4, r3
   18910:	d02a      	beq.n	18968 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   18912:	4628      	mov	r0, r5
   18914:	f7f9 fa5a 	bl	11dcc <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   18918:	4601      	mov	r1, r0
   1891a:	2800      	cmp	r0, #0
   1891c:	d057      	beq.n	189ce <radio_tx_mem_enqueue+0xd6>
   1891e:	4b2f      	ldr	r3, [pc, #188]	; (189dc <radio_tx_mem_enqueue+0xe4>)
   18920:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   18924:	b2db      	uxtb	r3, r3
   18926:	429c      	cmp	r4, r3
   18928:	d053      	beq.n	189d2 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1892a:	7972      	ldrb	r2, [r6, #5]
   1892c:	4b2b      	ldr	r3, [pc, #172]	; (189dc <radio_tx_mem_enqueue+0xe4>)
   1892e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   18932:	3b07      	subs	r3, #7
   18934:	429a      	cmp	r2, r3
   18936:	d819      	bhi.n	1896c <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   18938:	4b28      	ldr	r3, [pc, #160]	; (189dc <radio_tx_mem_enqueue+0xe4>)
   1893a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   1893e:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18942:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   18946:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   1894a:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   1894e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   18952:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   18954:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18958:	f991 301d 	ldrsb.w	r3, [r1, #29]
   1895c:	2b00      	cmp	r3, #0
   1895e:	db0b      	blt.n	18978 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18960:	2300      	movs	r3, #0
}
   18962:	4618      	mov	r0, r3
   18964:	b008      	add	sp, #32
   18966:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18968:	2400      	movs	r4, #0
   1896a:	e7d2      	b.n	18912 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1896c:	4040      	eors	r0, r0
   1896e:	f380 8811 	msr	BASEPRI, r0
   18972:	f04f 0004 	mov.w	r0, #4
   18976:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18978:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   1897a:	b363      	cbz	r3, 189d6 <radio_tx_mem_enqueue+0xde>
   1897c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18980:	f013 0f02 	tst.w	r3, #2
   18984:	d001      	beq.n	1898a <radio_tx_mem_enqueue+0x92>
	return 0;
   18986:	2300      	movs	r3, #0
   18988:	e7eb      	b.n	18962 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   1898a:	f043 0302 	orr.w	r3, r3, #2
   1898e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   18992:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18994:	3207      	adds	r2, #7
   18996:	9106      	str	r1, [sp, #24]
   18998:	4b11      	ldr	r3, [pc, #68]	; (189e0 <radio_tx_mem_enqueue+0xe8>)
   1899a:	9305      	str	r3, [sp, #20]
   1899c:	2000      	movs	r0, #0
   1899e:	9004      	str	r0, [sp, #16]
   189a0:	2301      	movs	r3, #1
   189a2:	9303      	str	r3, [sp, #12]
   189a4:	9002      	str	r0, [sp, #8]
   189a6:	9001      	str	r0, [sp, #4]
   189a8:	9000      	str	r0, [sp, #0]
   189aa:	4603      	mov	r3, r0
   189ac:	b2d2      	uxtb	r2, r2
   189ae:	2103      	movs	r1, #3
   189b0:	f7f8 f944 	bl	10c3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   189b4:	4603      	mov	r3, r0
   189b6:	2800      	cmp	r0, #0
   189b8:	d0d3      	beq.n	18962 <radio_tx_mem_enqueue+0x6a>
   189ba:	2802      	cmp	r0, #2
   189bc:	d101      	bne.n	189c2 <radio_tx_mem_enqueue+0xca>
	return 0;
   189be:	2300      	movs	r3, #0
   189c0:	e7cf      	b.n	18962 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   189c2:	4040      	eors	r0, r0
   189c4:	f380 8811 	msr	BASEPRI, r0
   189c8:	f04f 0004 	mov.w	r0, #4
   189cc:	df02      	svc	2
		return 1;
   189ce:	2301      	movs	r3, #1
   189d0:	e7c7      	b.n	18962 <radio_tx_mem_enqueue+0x6a>
   189d2:	2301      	movs	r3, #1
   189d4:	e7c5      	b.n	18962 <radio_tx_mem_enqueue+0x6a>
	return 0;
   189d6:	2300      	movs	r3, #0
   189d8:	e7c3      	b.n	18962 <radio_tx_mem_enqueue+0x6a>
   189da:	bf00      	nop
   189dc:	20000ef4 	.word	0x20000ef4
   189e0:	00011c5d 	.word	0x00011c5d

000189e4 <ll_enc_req_send>:
{
   189e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   189e8:	4680      	mov	r8, r0
   189ea:	4689      	mov	r9, r1
   189ec:	4616      	mov	r6, r2
   189ee:	461f      	mov	r7, r3
	conn = connection_get(handle);
   189f0:	f7f9 f9ec 	bl	11dcc <connection_get>
	if (!conn) {
   189f4:	2800      	cmp	r0, #0
   189f6:	d055      	beq.n	18aa4 <ll_enc_req_send+0xc0>
   189f8:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   189fa:	f7ff ff6d 	bl	188d8 <radio_tx_mem_acquire>
	if (node_tx) {
   189fe:	4604      	mov	r4, r0
   18a00:	2800      	cmp	r0, #0
   18a02:	d051      	beq.n	18aa8 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18a04:	2210      	movs	r2, #16
   18a06:	4639      	mov	r1, r7
   18a08:	f105 0083 	add.w	r0, r5, #131	; 0x83
   18a0c:	f7e7 fc58 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   18a10:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18a14:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   18a18:	d008      	beq.n	18a2c <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   18a1a:	2b30      	cmp	r3, #48	; 0x30
   18a1c:	d02d      	beq.n	18a7a <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   18a1e:	4620      	mov	r0, r4
   18a20:	f7ff ff62 	bl	188e8 <radio_tx_mem_release>
			return 1;
   18a24:	2301      	movs	r3, #1
}
   18a26:	4618      	mov	r0, r3
   18a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a2c:	7923      	ldrb	r3, [r4, #4]
   18a2e:	f043 0303 	orr.w	r3, r3, #3
   18a32:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18a34:	2317      	movs	r3, #23
   18a36:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18a38:	2303      	movs	r3, #3
   18a3a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18a3c:	2208      	movs	r2, #8
   18a3e:	4649      	mov	r1, r9
   18a40:	18a0      	adds	r0, r4, r2
   18a42:	f7e7 fc3d 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18a46:	7833      	ldrb	r3, [r6, #0]
   18a48:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   18a4a:	7873      	ldrb	r3, [r6, #1]
   18a4c:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   18a4e:	2108      	movs	r1, #8
   18a50:	f104 0012 	add.w	r0, r4, #18
   18a54:	f7f8 fd74 	bl	11540 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18a58:	2104      	movs	r1, #4
   18a5a:	f104 001a 	add.w	r0, r4, #26
   18a5e:	f7f8 fd6f 	bl	11540 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   18a62:	4621      	mov	r1, r4
   18a64:	4640      	mov	r0, r8
   18a66:	f7ff ff47 	bl	188f8 <radio_tx_mem_enqueue>
   18a6a:	4603      	mov	r3, r0
   18a6c:	2800      	cmp	r0, #0
   18a6e:	d0da      	beq.n	18a26 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18a70:	4620      	mov	r0, r4
   18a72:	f7ff ff39 	bl	188e8 <radio_tx_mem_release>
			return 1;
   18a76:	2301      	movs	r3, #1
   18a78:	e7d5      	b.n	18a26 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18a7a:	2208      	movs	r2, #8
   18a7c:	4649      	mov	r1, r9
   18a7e:	f105 0079 	add.w	r0, r5, #121	; 0x79
   18a82:	f7e7 fc1d 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   18a86:	7833      	ldrb	r3, [r6, #0]
   18a88:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18a8c:	7873      	ldrb	r3, [r6, #1]
   18a8e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a92:	7923      	ldrb	r3, [r4, #4]
   18a94:	f043 0303 	orr.w	r3, r3, #3
   18a98:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18a9a:	2301      	movs	r3, #1
   18a9c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18a9e:	230a      	movs	r3, #10
   18aa0:	71e3      	strb	r3, [r4, #7]
   18aa2:	e7de      	b.n	18a62 <ll_enc_req_send+0x7e>
		return 1;
   18aa4:	2301      	movs	r3, #1
   18aa6:	e7be      	b.n	18a26 <ll_enc_req_send+0x42>
	return 1;
   18aa8:	2301      	movs	r3, #1
   18aaa:	e7bc      	b.n	18a26 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18aac:	4770      	bx	lr

00018aae <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18aae:	b508      	push	{r3, lr}
	if (bm) {
   18ab0:	b910      	cbnz	r0, 18ab8 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18ab2:	f000 fe5f 	bl	19774 <rpa_refresh_stop>
   18ab6:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18ab8:	f000 fe48 	bl	1974c <rpa_refresh_start>
   18abc:	bd08      	pop	{r3, pc}
	...

00018ac0 <radio_adv_enable>:
{
   18ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ac4:	b08f      	sub	sp, #60	; 0x3c
   18ac6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18aca:	2202      	movs	r2, #2
   18acc:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18ace:	4aca      	ldr	r2, [pc, #808]	; (18df8 <radio_adv_enable+0x338>)
   18ad0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18ad4:	f012 0f01 	tst.w	r2, #1
   18ad8:	d003      	beq.n	18ae2 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ada:	200c      	movs	r0, #12
}
   18adc:	b00f      	add	sp, #60	; 0x3c
   18ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18ae2:	461d      	mov	r5, r3
   18ae4:	460c      	mov	r4, r1
   18ae6:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18ae8:	4bc3      	ldr	r3, [pc, #780]	; (18df8 <radio_adv_enable+0x338>)
   18aea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18aee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18af2:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18af6:	3220      	adds	r2, #32
   18af8:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18afc:	f898 3007 	ldrb.w	r3, [r8, #7]
   18b00:	f003 030f 	and.w	r3, r3, #15
   18b04:	2b01      	cmp	r3, #1
   18b06:	d97f      	bls.n	18c08 <radio_adv_enable+0x148>
		conn = NULL;
   18b08:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18b0a:	4abb      	ldr	r2, [pc, #748]	; (18df8 <radio_adv_enable+0x338>)
   18b0c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18b10:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18b14:	a80e      	add	r0, sp, #56	; 0x38
   18b16:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18b1a:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18b1e:	f365 1387 	bfi	r3, r5, #6, #2
   18b22:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18b26:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18b2a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18b2e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   18b32:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   18b34:	2327      	movs	r3, #39	; 0x27
   18b36:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18b38:	2300      	movs	r3, #0
   18b3a:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18b3c:	2101      	movs	r1, #1
   18b3e:	f7f6 fbe2 	bl	f306 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18b42:	f898 5007 	ldrb.w	r5, [r8, #7]
   18b46:	f005 050f 	and.w	r5, r5, #15
   18b4a:	2d01      	cmp	r5, #1
   18b4c:	f000 8108 	beq.w	18d60 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18b50:	2d02      	cmp	r5, #2
   18b52:	f000 8111 	beq.w	18d78 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   18b56:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18b58:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18b5c:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18b60:	0080      	lsls	r0, r0, #2
   18b62:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   18b64:	a3a2      	add	r3, pc, #648	; (adr r3, 18df0 <radio_adv_enable+0x330>)
   18b66:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b6a:	49a4      	ldr	r1, [pc, #656]	; (18dfc <radio_adv_enable+0x33c>)
   18b6c:	fba0 0101 	umull	r0, r1, r0, r1
   18b70:	f7e8 fac4 	bl	10fc <__aeabi_uldivmod>
   18b74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b78:	4a9f      	ldr	r2, [pc, #636]	; (18df8 <radio_adv_enable+0x338>)
   18b7a:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18b7c:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18b7e:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18b80:	4299      	cmp	r1, r3
   18b82:	bf38      	it	cc
   18b84:	4619      	movcc	r1, r3
   18b86:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18b88:	2d01      	cmp	r5, #1
   18b8a:	f000 80ff 	beq.w	18d8c <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b8e:	f7f8 f96f 	bl	10e70 <ticker_ticks_now_get>
   18b92:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18b94:	b2a4      	uxth	r4, r4
   18b96:	489a      	ldr	r0, [pc, #616]	; (18e00 <radio_adv_enable+0x340>)
   18b98:	fba4 0100 	umull	r0, r1, r4, r0
   18b9c:	2391      	movs	r3, #145	; 0x91
   18b9e:	fb03 1104 	mla	r1, r3, r4, r1
   18ba2:	a393      	add	r3, pc, #588	; (adr r3, 18df0 <radio_adv_enable+0x330>)
   18ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   18ba8:	f7e8 faa8 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18bac:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18bb0:	4b91      	ldr	r3, [pc, #580]	; (18df8 <radio_adv_enable+0x338>)
   18bb2:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18bb4:	4443      	add	r3, r8
   18bb6:	b29b      	uxth	r3, r3
		ret =
   18bb8:	a90d      	add	r1, sp, #52	; 0x34
   18bba:	9108      	str	r1, [sp, #32]
   18bbc:	4991      	ldr	r1, [pc, #580]	; (18e04 <radio_adv_enable+0x344>)
   18bbe:	9107      	str	r1, [sp, #28]
   18bc0:	2000      	movs	r0, #0
   18bc2:	9006      	str	r0, [sp, #24]
   18bc4:	4990      	ldr	r1, [pc, #576]	; (18e08 <radio_adv_enable+0x348>)
   18bc6:	9105      	str	r1, [sp, #20]
   18bc8:	9304      	str	r3, [sp, #16]
   18bca:	9003      	str	r0, [sp, #12]
   18bcc:	9002      	str	r0, [sp, #8]
   18bce:	9201      	str	r2, [sp, #4]
   18bd0:	9000      	str	r0, [sp, #0]
   18bd2:	463b      	mov	r3, r7
   18bd4:	2205      	movs	r2, #5
   18bd6:	2103      	movs	r1, #3
   18bd8:	f7f7 ffe2 	bl	10ba0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18bdc:	2802      	cmp	r0, #2
   18bde:	f000 813b 	beq.w	18e58 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18be4:	2b00      	cmp	r3, #0
   18be6:	f040 80f2 	bne.w	18dce <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18bea:	4b83      	ldr	r3, [pc, #524]	; (18df8 <radio_adv_enable+0x338>)
   18bec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18bf0:	f042 0201 	orr.w	r2, r2, #1
   18bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18bf8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18bfc:	f013 0f01 	tst.w	r3, #1
   18c00:	f000 812e 	beq.w	18e60 <radio_adv_enable+0x3a0>
		return 0;
   18c04:	2000      	movs	r0, #0
   18c06:	e769      	b.n	18adc <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18c08:	4b7b      	ldr	r3, [pc, #492]	; (18df8 <radio_adv_enable+0x338>)
   18c0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18c0e:	b10b      	cbz	r3, 18c14 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18c10:	200c      	movs	r0, #12
   18c12:	e763      	b.n	18adc <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18c14:	487d      	ldr	r0, [pc, #500]	; (18e0c <radio_adv_enable+0x34c>)
   18c16:	f7f6 faf2 	bl	f1fe <mem_acquire>
		if (!link) {
   18c1a:	4681      	mov	r9, r0
   18c1c:	2800      	cmp	r0, #0
   18c1e:	f000 8124 	beq.w	18e6a <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18c22:	487b      	ldr	r0, [pc, #492]	; (18e10 <radio_adv_enable+0x350>)
   18c24:	f7f6 faeb 	bl	f1fe <mem_acquire>
		if (!conn) {
   18c28:	4606      	mov	r6, r0
   18c2a:	2800      	cmp	r0, #0
   18c2c:	f000 8092 	beq.w	18d54 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18c34:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   18c36:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18c3a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18c3e:	7f43      	ldrb	r3, [r0, #29]
   18c40:	f36f 1386 	bfc	r3, #6, #1
   18c44:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   18c46:	2300      	movs	r3, #0
   18c48:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18c4a:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18c4c:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18c4e:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18c50:	4969      	ldr	r1, [pc, #420]	; (18df8 <radio_adv_enable+0x338>)
   18c52:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   18c56:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18c58:	221b      	movs	r2, #27
   18c5a:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18c5c:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18c5e:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   18c62:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   18c64:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18c68:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18c6a:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18c6c:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18c70:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   18c74:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18c78:	2001      	movs	r0, #1
   18c7a:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18c7e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18c82:	f363 12c7 	bfi	r2, r3, #7, #1
   18c86:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18c8a:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18c8e:	f360 0202 	bfi	r2, r0, #0, #3
   18c92:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18c96:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18c9a:	b2d2      	uxtb	r2, r2
   18c9c:	f36e 02c5 	bfi	r2, lr, #3, #3
   18ca0:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18ca4:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18ca8:	f360 0202 	bfi	r2, r0, #0, #3
   18cac:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18cb0:	7f72      	ldrb	r2, [r6, #29]
   18cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18cb6:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18cb8:	2206      	movs	r2, #6
   18cba:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18cbc:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18cc0:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18cc4:	f363 0241 	bfi	r2, r3, #1, #1
   18cc8:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18ccc:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18cce:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18cd0:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18cd2:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18cd6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18cda:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18cde:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18ce2:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18ce6:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18cea:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18cee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18cf2:	f363 0241 	bfi	r2, r3, #1, #1
   18cf6:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18cfa:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18cfe:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18d02:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18d06:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18d0a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18d0e:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18d12:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18d16:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18d1a:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18d1e:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18d22:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18d26:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18d2a:	f363 12c7 	bfi	r2, r3, #7, #1
   18d2e:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   18d32:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   18d36:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18d3a:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18d3e:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   18d42:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   18d46:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18d4a:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18d4e:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   18d52:	e6da      	b.n	18b0a <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   18d54:	492d      	ldr	r1, [pc, #180]	; (18e0c <radio_adv_enable+0x34c>)
   18d56:	4648      	mov	r0, r9
   18d58:	f7f6 fa6d 	bl	f236 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18d5c:	2007      	movs	r0, #7
   18d5e:	e6bd      	b.n	18adc <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18d60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18d64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18d68:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18d6c:	0080      	lsls	r0, r0, #2
   18d6e:	b280      	uxth	r0, r0
   18d70:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18d74:	b280      	uxth	r0, r0
   18d76:	e6f5      	b.n	18b64 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18d78:	b280      	uxth	r0, r0
   18d7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18d7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18d82:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18d86:	0080      	lsls	r0, r0, #2
   18d88:	b280      	uxth	r0, r0
   18d8a:	e6eb      	b.n	18b64 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18d8c:	2c00      	cmp	r4, #0
   18d8e:	f47f aefe 	bne.w	18b8e <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18d92:	f7f8 f86d 	bl	10e70 <ticker_ticks_now_get>
   18d96:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18d98:	4b17      	ldr	r3, [pc, #92]	; (18df8 <radio_adv_enable+0x338>)
   18d9a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d9c:	eb08 0203 	add.w	r2, r8, r3
   18da0:	b293      	uxth	r3, r2
   18da2:	a90d      	add	r1, sp, #52	; 0x34
   18da4:	9108      	str	r1, [sp, #32]
   18da6:	4917      	ldr	r1, [pc, #92]	; (18e04 <radio_adv_enable+0x344>)
   18da8:	9107      	str	r1, [sp, #28]
   18daa:	2000      	movs	r0, #0
   18dac:	9006      	str	r0, [sp, #24]
   18dae:	4916      	ldr	r1, [pc, #88]	; (18e08 <radio_adv_enable+0x348>)
   18db0:	9105      	str	r1, [sp, #20]
   18db2:	9304      	str	r3, [sp, #16]
   18db4:	9003      	str	r0, [sp, #12]
   18db6:	9002      	str	r0, [sp, #8]
   18db8:	9201      	str	r2, [sp, #4]
   18dba:	9000      	str	r0, [sp, #0]
   18dbc:	4623      	mov	r3, r4
   18dbe:	2205      	movs	r2, #5
   18dc0:	2103      	movs	r1, #3
   18dc2:	f7f7 feed 	bl	10ba0 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18dc6:	2802      	cmp	r0, #2
   18dc8:	d027      	beq.n	18e1a <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18dcc:	b34b      	cbz	r3, 18e22 <radio_adv_enable+0x362>
	if (conn) {
   18dce:	2e00      	cmp	r6, #0
   18dd0:	d04d      	beq.n	18e6e <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18dd2:	4c09      	ldr	r4, [pc, #36]	; (18df8 <radio_adv_enable+0x338>)
   18dd4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18dd8:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18ddc:	f7f6 fa2b 	bl	f236 <mem_release>
		mem_release(conn, &_radio.conn_free);
   18de0:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18de4:	4630      	mov	r0, r6
   18de6:	f7f6 fa26 	bl	f236 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18dea:	200c      	movs	r0, #12
   18dec:	e676      	b.n	18adc <radio_adv_enable+0x1c>
   18dee:	bf00      	nop
   18df0:	1afd498d 	.word	0x1afd498d
   18df4:	00000007 	.word	0x00000007
   18df8:	20000ef4 	.word	0x20000ef4
   18dfc:	3b9aca00 	.word	0x3b9aca00
   18e00:	84e72a00 	.word	0x84e72a00
   18e04:	00011585 	.word	0x00011585
   18e08:	00014f0d 	.word	0x00014f0d
   18e0c:	20001038 	.word	0x20001038
   18e10:	20000ffc 	.word	0x20000ffc
   18e14:	bf20      	wfe
  __ASM volatile ("sev");
   18e16:	bf40      	sev
  __ASM volatile ("wfe");
   18e18:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18e1c:	2b02      	cmp	r3, #2
   18e1e:	d0f9      	beq.n	18e14 <radio_adv_enable+0x354>
   18e20:	e7d3      	b.n	18dca <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   18e22:	ab0e      	add	r3, sp, #56	; 0x38
   18e24:	2202      	movs	r2, #2
   18e26:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   18e2a:	9308      	str	r3, [sp, #32]
   18e2c:	4b11      	ldr	r3, [pc, #68]	; (18e74 <radio_adv_enable+0x3b4>)
   18e2e:	9307      	str	r3, [sp, #28]
   18e30:	2000      	movs	r0, #0
   18e32:	9006      	str	r0, [sp, #24]
   18e34:	4b10      	ldr	r3, [pc, #64]	; (18e78 <radio_adv_enable+0x3b8>)
   18e36:	9305      	str	r3, [sp, #20]
   18e38:	9004      	str	r0, [sp, #16]
   18e3a:	9003      	str	r0, [sp, #12]
   18e3c:	9002      	str	r0, [sp, #8]
   18e3e:	9001      	str	r0, [sp, #4]
   18e40:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   18e44:	9300      	str	r3, [sp, #0]
   18e46:	4623      	mov	r3, r4
   18e48:	2203      	movs	r2, #3
   18e4a:	4611      	mov	r1, r2
   18e4c:	f7f7 fea8 	bl	10ba0 <ticker_start>
	    !interval) {
   18e50:	e6c4      	b.n	18bdc <radio_adv_enable+0x11c>
   18e52:	bf20      	wfe
  __ASM volatile ("sev");
   18e54:	bf40      	sev
  __ASM volatile ("wfe");
   18e56:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18e5a:	2b02      	cmp	r3, #2
   18e5c:	d0f9      	beq.n	18e52 <radio_adv_enable+0x392>
   18e5e:	e6c0      	b.n	18be2 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18e60:	2001      	movs	r0, #1
   18e62:	f7ff fe24 	bl	18aae <ll_adv_scan_state_cb>
		return 0;
   18e66:	2000      	movs	r0, #0
   18e68:	e638      	b.n	18adc <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18e6a:	2007      	movs	r0, #7
   18e6c:	e636      	b.n	18adc <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18e6e:	200c      	movs	r0, #12
   18e70:	e634      	b.n	18adc <radio_adv_enable+0x1c>
   18e72:	bf00      	nop
   18e74:	00011585 	.word	0x00011585
   18e78:	00012101 	.word	0x00012101

00018e7c <radio_adv_disable>:
{
   18e7c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18e7e:	2103      	movs	r1, #3
   18e80:	2005      	movs	r0, #5
   18e82:	f7f8 ffc1 	bl	11e08 <role_disable>
	if (!status) {
   18e86:	4604      	mov	r4, r0
   18e88:	b9f0      	cbnz	r0, 18ec8 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18e8a:	4b13      	ldr	r3, [pc, #76]	; (18ed8 <radio_adv_disable+0x5c>)
   18e8c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18e90:	f36f 0200 	bfc	r2, #0, #1
   18e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18e98:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18e9c:	f013 0f01 	tst.w	r3, #1
   18ea0:	d016      	beq.n	18ed0 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   18ea2:	4b0d      	ldr	r3, [pc, #52]	; (18ed8 <radio_adv_disable+0x5c>)
   18ea4:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18ea8:	b175      	cbz	r5, 18ec8 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   18eaa:	461e      	mov	r6, r3
   18eac:	2300      	movs	r3, #0
   18eae:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   18eb2:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   18eb6:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18eba:	f7f6 f9bc 	bl	f236 <mem_release>
			mem_release(conn, &_radio.conn_free);
   18ebe:	f506 7184 	add.w	r1, r6, #264	; 0x108
   18ec2:	4628      	mov	r0, r5
   18ec4:	f7f6 f9b7 	bl	f236 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18ec8:	b104      	cbz	r4, 18ecc <radio_adv_disable+0x50>
   18eca:	240c      	movs	r4, #12
}
   18ecc:	4620      	mov	r0, r4
   18ece:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18ed0:	f7ff fded 	bl	18aae <ll_adv_scan_state_cb>
   18ed4:	e7e5      	b.n	18ea2 <radio_adv_disable+0x26>
   18ed6:	bf00      	nop
   18ed8:	20000ef4 	.word	0x20000ef4
   18edc:	00000000 	.word	0x00000000

00018ee0 <radio_scan_enable>:
{
   18ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ee4:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18ee6:	2402      	movs	r4, #2
   18ee8:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   18eea:	4c77      	ldr	r4, [pc, #476]	; (190c8 <radio_scan_enable+0x1e8>)
   18eec:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   18ef0:	f014 0f01 	tst.w	r4, #1
   18ef4:	d003      	beq.n	18efe <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ef6:	200c      	movs	r0, #12
}
   18ef8:	b00f      	add	sp, #60	; 0x3c
   18efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18efe:	461d      	mov	r5, r3
   18f00:	4617      	mov	r7, r2
   18f02:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   18f04:	4c70      	ldr	r4, [pc, #448]	; (190c8 <radio_scan_enable+0x1e8>)
   18f06:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18f0a:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   18f0e:	f3c0 0042 	ubfx	r0, r0, #1, #3
   18f12:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   18f16:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   18f1a:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   18f1e:	f361 0200 	bfi	r2, r1, #0, #1
   18f22:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   18f26:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   18f2a:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   18f2e:	f366 13c7 	bfi	r3, r6, #7, #1
   18f32:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   18f36:	2206      	movs	r2, #6
   18f38:	4639      	mov	r1, r7
   18f3a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   18f3e:	f7e7 f9bf 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   18f42:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   18f46:	4e61      	ldr	r6, [pc, #388]	; (190cc <radio_scan_enable+0x1ec>)
   18f48:	f04f 0a91 	mov.w	sl, #145	; 0x91
   18f4c:	fba2 0106 	umull	r0, r1, r2, r6
   18f50:	fb0a 1102 	mla	r1, sl, r2, r1
   18f54:	a35a      	add	r3, pc, #360	; (adr r3, 190c0 <radio_scan_enable+0x1e0>)
   18f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f5a:	f7e8 f8cf 	bl	10fc <__aeabi_uldivmod>
   18f5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   18f62:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   18f66:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18f6a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   18f6e:	f362 1305 	bfi	r3, r2, #4, #2
   18f72:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   18f76:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   18f7a:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   18f7e:	2327      	movs	r3, #39	; 0x27
   18f80:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   18f84:	2300      	movs	r3, #0
   18f86:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   18f8a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   18f8e:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   18f92:	b2aa      	uxth	r2, r5
   18f94:	fba2 6706 	umull	r6, r7, r2, r6
   18f98:	fb0a 7702 	mla	r7, sl, r2, r7
   18f9c:	a348      	add	r3, pc, #288	; (adr r3, 190c0 <radio_scan_enable+0x1e0>)
   18f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18fa2:	4630      	mov	r0, r6
   18fa4:	4639      	mov	r1, r7
   18fa6:	f7e8 f8a9 	bl	10fc <__aeabi_uldivmod>
   18faa:	4604      	mov	r4, r0
   18fac:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   18fb0:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   18fb4:	4598      	cmp	r8, r3
   18fb6:	d902      	bls.n	18fbe <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   18fb8:	4a43      	ldr	r2, [pc, #268]	; (190c8 <radio_scan_enable+0x1e8>)
   18fba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   18fbe:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   18fc2:	bf38      	it	cc
   18fc4:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   18fc8:	f7f7 ff52 	bl	10e70 <ticker_ticks_now_get>
   18fcc:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   18fce:	4b3e      	ldr	r3, [pc, #248]	; (190c8 <radio_scan_enable+0x1e8>)
   18fd0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18fd4:	2b00      	cmp	r3, #0
   18fd6:	d045      	beq.n	19064 <radio_scan_enable+0x184>
		us_offset = 0;
   18fd8:	2300      	movs	r3, #0
   18fda:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   18fdc:	f04f 0800 	mov.w	r8, #0
   18fe0:	a337      	add	r3, pc, #220	; (adr r3, 190c0 <radio_scan_enable+0x1e0>)
   18fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   18fe6:	493a      	ldr	r1, [pc, #232]	; (190d0 <radio_scan_enable+0x1f0>)
   18fe8:	980c      	ldr	r0, [sp, #48]	; 0x30
   18fea:	fba0 0101 	umull	r0, r1, r0, r1
   18fee:	f7e8 f885 	bl	10fc <__aeabi_uldivmod>
   18ff2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18ff6:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   18ff8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   18ffc:	2500      	movs	r5, #0
   18ffe:	4835      	ldr	r0, [pc, #212]	; (190d4 <radio_scan_enable+0x1f4>)
   19000:	2307      	movs	r3, #7
   19002:	fb03 f304 	mul.w	r3, r3, r4
   19006:	fb00 3305 	mla	r3, r0, r5, r3
   1900a:	fba4 0100 	umull	r0, r1, r4, r0
   1900e:	4419      	add	r1, r3
   19010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19014:	2300      	movs	r3, #0
   19016:	1a30      	subs	r0, r6, r0
   19018:	eb67 0101 	sbc.w	r1, r7, r1
   1901c:	f7e8 f86e 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   19020:	4b29      	ldr	r3, [pc, #164]	; (190c8 <radio_scan_enable+0x1e8>)
   19022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19026:	4499      	add	r9, r3
   19028:	fa1f f389 	uxth.w	r3, r9
   1902c:	aa0d      	add	r2, sp, #52	; 0x34
   1902e:	9208      	str	r2, [sp, #32]
   19030:	4a29      	ldr	r2, [pc, #164]	; (190d8 <radio_scan_enable+0x1f8>)
   19032:	9207      	str	r2, [sp, #28]
   19034:	f8cd 8018 	str.w	r8, [sp, #24]
   19038:	4a28      	ldr	r2, [pc, #160]	; (190dc <radio_scan_enable+0x1fc>)
   1903a:	9205      	str	r2, [sp, #20]
   1903c:	9304      	str	r3, [sp, #16]
   1903e:	f8cd 800c 	str.w	r8, [sp, #12]
   19042:	9002      	str	r0, [sp, #8]
   19044:	f8cd a004 	str.w	sl, [sp, #4]
   19048:	f8cd 8000 	str.w	r8, [sp]
   1904c:	465b      	mov	r3, fp
   1904e:	2206      	movs	r2, #6
   19050:	2103      	movs	r1, #3
   19052:	4640      	mov	r0, r8
   19054:	f7f7 fda4 	bl	10ba0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19058:	2802      	cmp	r0, #2
   1905a:	d017      	beq.n	1908c <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1905c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1905e:	b1cb      	cbz	r3, 19094 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19060:	200c      	movs	r0, #12
   19062:	e749      	b.n	18ef8 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   19064:	2300      	movs	r3, #0
   19066:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   19068:	4b17      	ldr	r3, [pc, #92]	; (190c8 <radio_scan_enable+0x1e8>)
   1906a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1906e:	ab0c      	add	r3, sp, #48	; 0x30
   19070:	aa0b      	add	r2, sp, #44	; 0x2c
   19072:	4449      	add	r1, r9
   19074:	2003      	movs	r0, #3
   19076:	f7f9 ff63 	bl	12f40 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1907a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1907c:	2b00      	cmp	r3, #0
   1907e:	d0ad      	beq.n	18fdc <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   19080:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   19084:	e7aa      	b.n	18fdc <radio_scan_enable+0xfc>
   19086:	bf20      	wfe
  __ASM volatile ("sev");
   19088:	bf40      	sev
  __ASM volatile ("wfe");
   1908a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1908c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1908e:	2b02      	cmp	r3, #2
   19090:	d0f9      	beq.n	19086 <radio_scan_enable+0x1a6>
   19092:	e7e3      	b.n	1905c <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   19094:	4b0c      	ldr	r3, [pc, #48]	; (190c8 <radio_scan_enable+0x1e8>)
   19096:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1909a:	f042 0201 	orr.w	r2, r2, #1
   1909e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   190a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   190a6:	f013 0f01 	tst.w	r3, #1
   190aa:	d001      	beq.n	190b0 <radio_scan_enable+0x1d0>
	return 0;
   190ac:	2000      	movs	r0, #0
   190ae:	e723      	b.n	18ef8 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   190b0:	2002      	movs	r0, #2
   190b2:	f7ff fcfc 	bl	18aae <ll_adv_scan_state_cb>
	return 0;
   190b6:	2000      	movs	r0, #0
   190b8:	e71e      	b.n	18ef8 <radio_scan_enable+0x18>
   190ba:	bf00      	nop
   190bc:	f3af 8000 	nop.w
   190c0:	1afd498d 	.word	0x1afd498d
   190c4:	00000007 	.word	0x00000007
   190c8:	20000ef4 	.word	0x20000ef4
   190cc:	84e72a00 	.word	0x84e72a00
   190d0:	3b9aca00 	.word	0x3b9aca00
   190d4:	1afd498d 	.word	0x1afd498d
   190d8:	00011585 	.word	0x00011585
   190dc:	000164bd 	.word	0x000164bd

000190e0 <radio_scan_disable>:
{
   190e0:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   190e2:	2104      	movs	r1, #4
   190e4:	2006      	movs	r0, #6
   190e6:	f7f8 fe8f 	bl	11e08 <role_disable>
	if (!status) {
   190ea:	4604      	mov	r4, r0
   190ec:	b9f0      	cbnz	r0, 1912c <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   190ee:	4b13      	ldr	r3, [pc, #76]	; (1913c <radio_scan_disable+0x5c>)
   190f0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   190f4:	f36f 0200 	bfc	r2, #0, #1
   190f8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   190fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19100:	f013 0f01 	tst.w	r3, #1
   19104:	d016      	beq.n	19134 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   19106:	4b0d      	ldr	r3, [pc, #52]	; (1913c <radio_scan_disable+0x5c>)
   19108:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   1910c:	b175      	cbz	r5, 1912c <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   1910e:	461e      	mov	r6, r3
   19110:	2300      	movs	r3, #0
   19112:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   19116:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1911a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1911e:	f7f6 f88a 	bl	f236 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19122:	f506 7184 	add.w	r1, r6, #264	; 0x108
   19126:	4628      	mov	r0, r5
   19128:	f7f6 f885 	bl	f236 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1912c:	b104      	cbz	r4, 19130 <radio_scan_disable+0x50>
   1912e:	240c      	movs	r4, #12
}
   19130:	4620      	mov	r0, r4
   19132:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   19134:	f7ff fcbb 	bl	18aae <ll_adv_scan_state_cb>
   19138:	e7e5      	b.n	19106 <radio_scan_disable+0x26>
   1913a:	bf00      	nop
   1913c:	20000ef4 	.word	0x20000ef4

00019140 <ll_connect_disable>:
{
   19140:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   19142:	4b04      	ldr	r3, [pc, #16]	; (19154 <ll_connect_disable+0x14>)
   19144:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   19148:	b113      	cbz	r3, 19150 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   1914a:	f7ff ffc9 	bl	190e0 <radio_scan_disable>
	return status;
   1914e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19150:	200c      	movs	r0, #12
}
   19152:	bd08      	pop	{r3, pc}
   19154:	20000ef4 	.word	0x20000ef4

00019158 <radio_rx_dequeue>:
{
   19158:	b530      	push	{r4, r5, lr}
   1915a:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1915c:	aa02      	add	r2, sp, #8
   1915e:	2300      	movs	r3, #0
   19160:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   19164:	4947      	ldr	r1, [pc, #284]	; (19284 <radio_rx_dequeue+0x12c>)
   19166:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   1916a:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   1916e:	f7f6 f8be 	bl	f2ee <memq_dequeue>
	LL_ASSERT(link);
   19172:	b178      	cbz	r0, 19194 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   19174:	4944      	ldr	r1, [pc, #272]	; (19288 <radio_rx_dequeue+0x130>)
   19176:	f7f6 f85e 	bl	f236 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   1917a:	9a01      	ldr	r2, [sp, #4]
   1917c:	7913      	ldrb	r3, [r2, #4]
   1917e:	3b01      	subs	r3, #1
   19180:	2b0b      	cmp	r3, #11
   19182:	d824      	bhi.n	191ce <radio_rx_dequeue+0x76>
   19184:	e8df f003 	tbb	[pc, r3]
   19188:	0c0c0c0c 	.word	0x0c0c0c0c
   1918c:	0c180c0c 	.word	0x0c180c0c
   19190:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   19194:	4040      	eors	r0, r0
   19196:	f380 8811 	msr	BASEPRI, r0
   1919a:	f04f 0004 	mov.w	r0, #4
   1919e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   191a0:	4938      	ldr	r1, [pc, #224]	; (19284 <radio_rx_dequeue+0x12c>)
   191a2:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   191a6:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   191aa:	3901      	subs	r1, #1
   191ac:	428b      	cmp	r3, r1
   191ae:	da08      	bge.n	191c2 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   191b0:	3301      	adds	r3, #1
   191b2:	4934      	ldr	r1, [pc, #208]	; (19284 <radio_rx_dequeue+0x12c>)
   191b4:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   191b8:	7913      	ldrb	r3, [r2, #4]
   191ba:	2b06      	cmp	r3, #6
   191bc:	d00d      	beq.n	191da <radio_rx_dequeue+0x82>
}
   191be:	b003      	add	sp, #12
   191c0:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   191c2:	4040      	eors	r0, r0
   191c4:	f380 8811 	msr	BASEPRI, r0
   191c8:	f04f 0004 	mov.w	r0, #4
   191cc:	df02      	svc	2
		LL_ASSERT(0);
   191ce:	4040      	eors	r0, r0
   191d0:	f380 8811 	msr	BASEPRI, r0
   191d4:	f04f 0004 	mov.w	r0, #4
   191d8:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   191da:	7ad3      	ldrb	r3, [r2, #11]
   191dc:	2b3c      	cmp	r3, #60	; 0x3c
   191de:	d002      	beq.n	191e6 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   191e0:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   191e2:	2a00      	cmp	r2, #0
   191e4:	d039      	beq.n	1925a <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   191e6:	2b3c      	cmp	r3, #60	; 0x3c
   191e8:	d02a      	beq.n	19240 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   191ea:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   191ec:	4b25      	ldr	r3, [pc, #148]	; (19284 <radio_rx_dequeue+0x12c>)
   191ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   191f2:	f013 0f01 	tst.w	r3, #1
   191f6:	d02a      	beq.n	1924e <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   191f8:	4b22      	ldr	r3, [pc, #136]	; (19284 <radio_rx_dequeue+0x12c>)
   191fa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   191fe:	f36f 0200 	bfc	r2, #0, #1
   19202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   19206:	b15c      	cbz	r4, 19220 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   19208:	4d1e      	ldr	r5, [pc, #120]	; (19284 <radio_rx_dequeue+0x12c>)
   1920a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1920e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19212:	f7f6 f810 	bl	f236 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19216:	f505 7184 	add.w	r1, r5, #264	; 0x108
   1921a:	4620      	mov	r0, r4
   1921c:	f7f6 f80b 	bl	f236 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19220:	4b18      	ldr	r3, [pc, #96]	; (19284 <radio_rx_dequeue+0x12c>)
   19222:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19226:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   1922a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1922e:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   19232:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   19236:	d1c2      	bne.n	191be <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   19238:	2000      	movs	r0, #0
   1923a:	f7ff fc38 	bl	18aae <ll_adv_scan_state_cb>
}
   1923e:	e7be      	b.n	191be <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   19240:	4b10      	ldr	r3, [pc, #64]	; (19284 <radio_rx_dequeue+0x12c>)
   19242:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   19246:	2200      	movs	r2, #0
   19248:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   1924c:	e7ce      	b.n	191ec <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   1924e:	4040      	eors	r0, r0
   19250:	f380 8811 	msr	BASEPRI, r0
   19254:	f04f 0004 	mov.w	r0, #4
   19258:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   1925a:	4b0a      	ldr	r3, [pc, #40]	; (19284 <radio_rx_dequeue+0x12c>)
   1925c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19260:	f013 0f01 	tst.w	r3, #1
   19264:	d008      	beq.n	19278 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   19266:	4b07      	ldr	r3, [pc, #28]	; (19284 <radio_rx_dequeue+0x12c>)
   19268:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1926c:	f36f 0200 	bfc	r2, #0, #1
   19270:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   19274:	2400      	movs	r4, #0
   19276:	e7c6      	b.n	19206 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   19278:	4040      	eors	r0, r0
   1927a:	f380 8811 	msr	BASEPRI, r0
   1927e:	f04f 0004 	mov.w	r0, #4
   19282:	df02      	svc	2
   19284:	20000ef4 	.word	0x20000ef4
   19288:	20001038 	.word	0x20001038

0001928c <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1928c:	4668      	mov	r0, sp
   1928e:	f020 0107 	bic.w	r1, r0, #7
   19292:	468d      	mov	sp, r1
   19294:	b501      	push	{r0, lr}
{
	isr_radio();
   19296:	f7f6 f8e1 	bl	f45c <isr_radio>

	ISR_DIRECT_PM();
   1929a:	f00e fb75 	bl	27988 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1929e:	f00e f90f 	bl	274c0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   192a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   192a6:	4685      	mov	sp, r0
   192a8:	4770      	bx	lr
	...

000192ac <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   192ac:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   192ae:	4b0c      	ldr	r3, [pc, #48]	; (192e0 <rtc0_nrf5_isr+0x34>)
   192b0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   192b4:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   192b8:	b922      	cbnz	r2, 192c4 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   192ba:	b94c      	cbnz	r4, 192d0 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   192bc:	2000      	movs	r0, #0
   192be:	f7f5 febf 	bl	f040 <mayfly_run>
   192c2:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   192c4:	2000      	movs	r0, #0
   192c6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   192ca:	f7f7 fc5b 	bl	10b84 <ticker_trigger>
   192ce:	e7f4      	b.n	192ba <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   192d0:	2200      	movs	r2, #0
   192d2:	4b03      	ldr	r3, [pc, #12]	; (192e0 <rtc0_nrf5_isr+0x34>)
   192d4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   192d8:	2001      	movs	r0, #1
   192da:	f7f7 fc53 	bl	10b84 <ticker_trigger>
   192de:	e7ed      	b.n	192bc <rtc0_nrf5_isr+0x10>
   192e0:	4000b000 	.word	0x4000b000

000192e4 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   192e4:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   192e6:	2001      	movs	r0, #1
   192e8:	f7f5 feaa 	bl	f040 <mayfly_run>
   192ec:	bd08      	pop	{r3, pc}

000192ee <rng_nrf5_isr>:
{
   192ee:	b508      	push	{r3, lr}
	isr_rand(arg);
   192f0:	f7f7 f9e2 	bl	106b8 <isr_rand>
   192f4:	bd08      	pop	{r3, pc}

000192f6 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   192f6:	2901      	cmp	r1, #1
   192f8:	d105      	bne.n	19306 <mayfly_enable_cb+0x10>
{
   192fa:	b508      	push	{r3, lr}
	if (enable) {
   192fc:	b94a      	cbnz	r2, 19312 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   192fe:	2018      	movs	r0, #24
   19300:	f00e fb0c 	bl	2791c <_arch_irq_disable>
   19304:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   19306:	4040      	eors	r0, r0
   19308:	f380 8811 	msr	BASEPRI, r0
   1930c:	f04f 0004 	mov.w	r0, #4
   19310:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   19312:	2018      	movs	r0, #24
   19314:	f00e faf4 	bl	27900 <_arch_irq_enable>
   19318:	bd08      	pop	{r3, pc}

0001931a <mayfly_is_enabled>:
{
   1931a:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   1931c:	b129      	cbz	r1, 1932a <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   1931e:	2901      	cmp	r1, #1
   19320:	d107      	bne.n	19332 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   19322:	2018      	movs	r0, #24
   19324:	f00e fb08 	bl	27938 <_arch_irq_is_enabled>
   19328:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   1932a:	200b      	movs	r0, #11
   1932c:	f00e fb04 	bl	27938 <_arch_irq_is_enabled>
   19330:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   19332:	4040      	eors	r0, r0
   19334:	f380 8811 	msr	BASEPRI, r0
   19338:	f04f 0004 	mov.w	r0, #4
   1933c:	df02      	svc	2

0001933e <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1933e:	4288      	cmp	r0, r1
   19340:	d009      	beq.n	19356 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   19342:	b908      	cbnz	r0, 19348 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   19344:	2901      	cmp	r1, #1
   19346:	d008      	beq.n	1935a <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19348:	2801      	cmp	r0, #1
   1934a:	d001      	beq.n	19350 <mayfly_prio_is_equal+0x12>
   1934c:	2000      	movs	r0, #0
   1934e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   19350:	b129      	cbz	r1, 1935e <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19352:	2000      	movs	r0, #0
   19354:	4770      	bx	lr
   19356:	2001      	movs	r0, #1
   19358:	4770      	bx	lr
   1935a:	2001      	movs	r0, #1
   1935c:	4770      	bx	lr
   1935e:	2001      	movs	r0, #1
}
   19360:	4770      	bx	lr
	...

00019364 <mayfly_pend>:
	switch (callee_id) {
   19364:	b139      	cbz	r1, 19376 <mayfly_pend+0x12>
   19366:	2901      	cmp	r1, #1
   19368:	d00b      	beq.n	19382 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   1936a:	4040      	eors	r0, r0
   1936c:	f380 8811 	msr	BASEPRI, r0
   19370:	f04f 0004 	mov.w	r0, #4
   19374:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19376:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1937a:	4b05      	ldr	r3, [pc, #20]	; (19390 <mayfly_pend+0x2c>)
   1937c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19380:	4770      	bx	lr
   19382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19386:	4b02      	ldr	r3, [pc, #8]	; (19390 <mayfly_pend+0x2c>)
   19388:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1938c:	4770      	bx	lr
   1938e:	bf00      	nop
   19390:	e000e100 	.word	0xe000e100

00019394 <radio_active_callback>:
{
   19394:	4770      	bx	lr
	...

00019398 <radio_event_callback>:
{
   19398:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1939a:	4b02      	ldr	r3, [pc, #8]	; (193a4 <radio_event_callback+0xc>)
   1939c:	6818      	ldr	r0, [r3, #0]
   1939e:	f00f ff44 	bl	2922a <_impl_k_sem_give>
   193a2:	bd08      	pop	{r3, pc}
   193a4:	20001818 	.word	0x20001818

000193a8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   193a8:	b510      	push	{r4, lr}
   193aa:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   193ac:	4b37      	ldr	r3, [pc, #220]	; (1948c <ll_init+0xe4>)
   193ae:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   193b0:	2204      	movs	r2, #4
   193b2:	2109      	movs	r1, #9
   193b4:	4836      	ldr	r0, [pc, #216]	; (19490 <ll_init+0xe8>)
   193b6:	f7f7 f957 	bl	10668 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   193ba:	220c      	movs	r2, #12
   193bc:	2111      	movs	r1, #17
   193be:	4835      	ldr	r0, [pc, #212]	; (19494 <ll_init+0xec>)
   193c0:	f7f7 f95c 	bl	1067c <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   193c4:	4834      	ldr	r0, [pc, #208]	; (19498 <ll_init+0xf0>)
   193c6:	f00e fc69 	bl	27c9c <device_get_binding>
	if (!clk_k32) {
   193ca:	2800      	cmp	r0, #0
   193cc:	d054      	beq.n	19478 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   193ce:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   193d0:	6812      	ldr	r2, [r2, #0]
   193d2:	2101      	movs	r1, #1
   193d4:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   193d6:	f7f5 ffab 	bl	f330 <cntr_init>

	mayfly_init();
   193da:	f7f5 fd65 	bl	eea8 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   193de:	4b2f      	ldr	r3, [pc, #188]	; (1949c <ll_init+0xf4>)
   193e0:	2108      	movs	r1, #8
   193e2:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   193e4:	2203      	movs	r2, #3
   193e6:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   193e8:	2000      	movs	r0, #0
   193ea:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   193ec:	2202      	movs	r2, #2
   193ee:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   193f0:	4a2b      	ldr	r2, [pc, #172]	; (194a0 <ll_init+0xf8>)
   193f2:	9202      	str	r2, [sp, #8]
   193f4:	220d      	movs	r2, #13
   193f6:	9201      	str	r2, [sp, #4]
   193f8:	9300      	str	r3, [sp, #0]
   193fa:	2304      	movs	r3, #4
   193fc:	4a29      	ldr	r2, [pc, #164]	; (194a4 <ll_init+0xfc>)
   193fe:	f7f7 fb67 	bl	10ad0 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   19402:	4829      	ldr	r0, [pc, #164]	; (194a8 <ll_init+0x100>)
   19404:	f00e fc4a 	bl	27c9c <device_get_binding>
	if (!clk_m16) {
   19408:	2800      	cmp	r0, #0
   1940a:	d038      	beq.n	1947e <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   1940c:	f44f 7357 	mov.w	r3, #860	; 0x35c
   19410:	9304      	str	r3, [sp, #16]
   19412:	4b26      	ldr	r3, [pc, #152]	; (194ac <ll_init+0x104>)
   19414:	9303      	str	r3, [sp, #12]
   19416:	231b      	movs	r3, #27
   19418:	9302      	str	r3, [sp, #8]
   1941a:	9301      	str	r3, [sp, #4]
   1941c:	2302      	movs	r3, #2
   1941e:	9300      	str	r3, [sp, #0]
   19420:	2301      	movs	r3, #1
   19422:	461a      	mov	r2, r3
   19424:	2107      	movs	r1, #7
   19426:	f7fe fccb 	bl	17dc0 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   1942a:	bb58      	cbnz	r0, 19484 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   1942c:	2001      	movs	r0, #1
   1942e:	f000 ffff 	bl	1a430 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19432:	2200      	movs	r2, #0
   19434:	4611      	mov	r1, r2
   19436:	2001      	movs	r0, #1
   19438:	f00e fa8c 	bl	27954 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1943c:	2200      	movs	r2, #0
   1943e:	4611      	mov	r1, r2
   19440:	200b      	movs	r0, #11
   19442:	f00e fa87 	bl	27954 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   19446:	2200      	movs	r2, #0
   19448:	4611      	mov	r1, r2
   1944a:	2018      	movs	r0, #24
   1944c:	f00e fa82 	bl	27954 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   19450:	2200      	movs	r2, #0
   19452:	2101      	movs	r1, #1
   19454:	200d      	movs	r0, #13
   19456:	f00e fa7d 	bl	27954 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1945a:	2001      	movs	r0, #1
   1945c:	f00e fa50 	bl	27900 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19460:	200b      	movs	r0, #11
   19462:	f00e fa4d 	bl	27900 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   19466:	2018      	movs	r0, #24
   19468:	f00e fa4a 	bl	27900 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1946c:	200d      	movs	r0, #13
   1946e:	f00e fa47 	bl	27900 <_arch_irq_enable>

	return 0;
   19472:	2000      	movs	r0, #0
}
   19474:	b006      	add	sp, #24
   19476:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19478:	f06f 0012 	mvn.w	r0, #18
   1947c:	e7fa      	b.n	19474 <ll_init+0xcc>
		return -ENODEV;
   1947e:	f06f 0012 	mvn.w	r0, #18
   19482:	e7f7      	b.n	19474 <ll_init+0xcc>
		return -ENOMEM;
   19484:	f06f 000b 	mvn.w	r0, #11
   19488:	e7f4      	b.n	19474 <ll_init+0xcc>
   1948a:	bf00      	nop
   1948c:	20001818 	.word	0x20001818
   19490:	200017f8 	.word	0x200017f8
   19494:	20001804 	.word	0x20001804
   19498:	0002e800 	.word	0x0002e800
   1949c:	200017d8 	.word	0x200017d8
   194a0:	2000159c 	.word	0x2000159c
   194a4:	2000147c 	.word	0x2000147c
   194a8:	0002e80c 	.word	0x0002e80c
   194ac:	2000107c 	.word	0x2000107c

000194b0 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   194b0:	2801      	cmp	r0, #1
   194b2:	d814      	bhi.n	194de <ll_addr_get+0x2e>
{
   194b4:	b538      	push	{r3, r4, r5, lr}
   194b6:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   194b8:	b140      	cbz	r0, 194cc <ll_addr_get+0x1c>
		if (bdaddr) {
   194ba:	b191      	cbz	r1, 194e2 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   194bc:	4d0b      	ldr	r5, [pc, #44]	; (194ec <ll_addr_get+0x3c>)
   194be:	2206      	movs	r2, #6
   194c0:	4629      	mov	r1, r5
   194c2:	4620      	mov	r0, r4
   194c4:	f7e6 fefc 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   194c8:	4628      	mov	r0, r5
   194ca:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   194cc:	b159      	cbz	r1, 194e6 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   194ce:	4d08      	ldr	r5, [pc, #32]	; (194f0 <ll_addr_get+0x40>)
   194d0:	2206      	movs	r2, #6
   194d2:	4629      	mov	r1, r5
   194d4:	4620      	mov	r0, r4
   194d6:	f7e6 fef3 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   194da:	4628      	mov	r0, r5
   194dc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   194de:	2000      	movs	r0, #0
   194e0:	4770      	bx	lr
		return _ll_context.rnd_addr;
   194e2:	4802      	ldr	r0, [pc, #8]	; (194ec <ll_addr_get+0x3c>)
   194e4:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   194e6:	4802      	ldr	r0, [pc, #8]	; (194f0 <ll_addr_get+0x40>)
}
   194e8:	bd38      	pop	{r3, r4, r5, pc}
   194ea:	bf00      	nop
   194ec:	20001476 	.word	0x20001476
   194f0:	20001470 	.word	0x20001470

000194f4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   194f4:	b508      	push	{r3, lr}
	if (addr_type) {
   194f6:	b920      	cbnz	r0, 19502 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   194f8:	2206      	movs	r2, #6
   194fa:	4804      	ldr	r0, [pc, #16]	; (1950c <ll_addr_set+0x18>)
   194fc:	f7e6 fee0 	bl	2c0 <memcpy>
   19500:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   19502:	2206      	movs	r2, #6
   19504:	4802      	ldr	r0, [pc, #8]	; (19510 <ll_addr_set+0x1c>)
   19506:	f7e6 fedb 	bl	2c0 <memcpy>
   1950a:	bd08      	pop	{r3, pc}
   1950c:	20001470 	.word	0x20001470
   19510:	20001476 	.word	0x20001476

00019514 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   19514:	2300      	movs	r3, #0
   19516:	e007      	b.n	19528 <wl_clear+0x14>
		wl[i].taken = 0;
   19518:	4a05      	ldr	r2, [pc, #20]	; (19530 <wl_clear+0x1c>)
   1951a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1951e:	f36f 0100 	bfc	r1, #0, #1
   19522:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19526:	3301      	adds	r3, #1
   19528:	2b07      	cmp	r3, #7
   1952a:	ddf5      	ble.n	19518 <wl_clear+0x4>
}
   1952c:	4770      	bx	lr
   1952e:	bf00      	nop
   19530:	20001a50 	.word	0x20001a50

00019534 <filter_clear>:
	filter->enable_bitmask = 0;
   19534:	2300      	movs	r3, #0
   19536:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   19538:	7043      	strb	r3, [r0, #1]
   1953a:	4770      	bx	lr

0001953c <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1953c:	2300      	movs	r3, #0
   1953e:	e009      	b.n	19554 <rl_clear+0x18>
		rl[i].taken = 0;
   19540:	4907      	ldr	r1, [pc, #28]	; (19560 <rl_clear+0x24>)
   19542:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19546:	00c2      	lsls	r2, r0, #3
   19548:	5c88      	ldrb	r0, [r1, r2]
   1954a:	f36f 0000 	bfc	r0, #0, #1
   1954e:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19550:	3301      	adds	r3, #1
   19552:	b2db      	uxtb	r3, r3
   19554:	2b07      	cmp	r3, #7
   19556:	d9f3      	bls.n	19540 <rl_clear+0x4>
	peer_irk_count = 0;
   19558:	2200      	movs	r2, #0
   1955a:	4b02      	ldr	r3, [pc, #8]	; (19564 <rl_clear+0x28>)
   1955c:	701a      	strb	r2, [r3, #0]
   1955e:	4770      	bx	lr
   19560:	200018d8 	.word	0x200018d8
   19564:	2000184c 	.word	0x2000184c

00019568 <wl_find>:
{
   19568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1956a:	4606      	mov	r6, r0
   1956c:	460f      	mov	r7, r1
	if (free) {
   1956e:	4615      	mov	r5, r2
   19570:	b10a      	cbz	r2, 19576 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   19572:	23ff      	movs	r3, #255	; 0xff
   19574:	7013      	strb	r3, [r2, #0]
{
   19576:	2400      	movs	r4, #0
   19578:	e00c      	b.n	19594 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1957a:	4816      	ldr	r0, [pc, #88]	; (195d4 <wl_find+0x6c>)
   1957c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19580:	2206      	movs	r2, #6
   19582:	4639      	mov	r1, r7
   19584:	3002      	adds	r0, #2
   19586:	f010 fd8f 	bl	2a0a8 <memcmp>
   1958a:	b9a0      	cbnz	r0, 195b6 <wl_find+0x4e>
			return i;
   1958c:	b2e0      	uxtb	r0, r4
   1958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   19590:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   19592:	3401      	adds	r4, #1
   19594:	2c07      	cmp	r4, #7
   19596:	dc1a      	bgt.n	195ce <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19598:	4b0e      	ldr	r3, [pc, #56]	; (195d4 <wl_find+0x6c>)
   1959a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1959e:	f013 0f01 	tst.w	r3, #1
   195a2:	d008      	beq.n	195b6 <wl_find+0x4e>
   195a4:	4b0b      	ldr	r3, [pc, #44]	; (195d4 <wl_find+0x6c>)
   195a6:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   195aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   195ae:	f006 0201 	and.w	r2, r6, #1
   195b2:	4293      	cmp	r3, r2
   195b4:	d0e1      	beq.n	1957a <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   195b6:	2d00      	cmp	r5, #0
   195b8:	d0eb      	beq.n	19592 <wl_find+0x2a>
   195ba:	4b06      	ldr	r3, [pc, #24]	; (195d4 <wl_find+0x6c>)
   195bc:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   195c0:	f013 0f01 	tst.w	r3, #1
   195c4:	d1e5      	bne.n	19592 <wl_find+0x2a>
   195c6:	782b      	ldrb	r3, [r5, #0]
   195c8:	2bff      	cmp	r3, #255	; 0xff
   195ca:	d1e2      	bne.n	19592 <wl_find+0x2a>
   195cc:	e7e0      	b.n	19590 <wl_find+0x28>
	return FILTER_IDX_NONE;
   195ce:	20ff      	movs	r0, #255	; 0xff
}
   195d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195d2:	bf00      	nop
   195d4:	20001a50 	.word	0x20001a50

000195d8 <wl_remove>:
{
   195d8:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   195da:	4601      	mov	r1, r0
   195dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   195e0:	2200      	movs	r2, #0
   195e2:	f7ff ffc1 	bl	19568 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   195e6:	2807      	cmp	r0, #7
   195e8:	d901      	bls.n	195ee <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   195ea:	2002      	movs	r0, #2
}
   195ec:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   195ee:	4b0b      	ldr	r3, [pc, #44]	; (1961c <wl_remove+0x44>)
   195f0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   195f4:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   195f6:	2b07      	cmp	r3, #7
   195f8:	d807      	bhi.n	1960a <wl_remove+0x32>
			rl[j].wl = 0;
   195fa:	4909      	ldr	r1, [pc, #36]	; (19620 <wl_remove+0x48>)
   195fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19600:	00da      	lsls	r2, r3, #3
   19602:	5c8b      	ldrb	r3, [r1, r2]
   19604:	f36f 1345 	bfc	r3, #5, #1
   19608:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   1960a:	4b04      	ldr	r3, [pc, #16]	; (1961c <wl_remove+0x44>)
   1960c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19610:	f36f 0200 	bfc	r2, #0, #1
   19614:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   19618:	2000      	movs	r0, #0
   1961a:	bd08      	pop	{r3, pc}
   1961c:	20001a50 	.word	0x20001a50
   19620:	200018d8 	.word	0x200018d8

00019624 <filter_insert>:
{
   19624:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   19626:	2401      	movs	r4, #1
   19628:	fa04 f501 	lsl.w	r5, r4, r1
   1962c:	7804      	ldrb	r4, [r0, #0]
   1962e:	432c      	orrs	r4, r5
   19630:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19632:	f002 0201 	and.w	r2, r2, #1
   19636:	fa02 f401 	lsl.w	r4, r2, r1
   1963a:	7842      	ldrb	r2, [r0, #1]
   1963c:	4322      	orrs	r2, r4
   1963e:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19640:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19644:	004a      	lsls	r2, r1, #1
   19646:	4410      	add	r0, r2
   19648:	2206      	movs	r2, #6
   1964a:	4619      	mov	r1, r3
   1964c:	3002      	adds	r0, #2
   1964e:	f7e6 fe37 	bl	2c0 <memcpy>
   19652:	bd38      	pop	{r3, r4, r5, pc}

00019654 <filter_wl_update>:
{
   19654:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   19656:	481b      	ldr	r0, [pc, #108]	; (196c4 <filter_wl_update+0x70>)
   19658:	f7ff ff6c 	bl	19534 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   1965c:	2400      	movs	r4, #0
   1965e:	e00c      	b.n	1967a <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19660:	4b19      	ldr	r3, [pc, #100]	; (196c8 <filter_wl_update+0x74>)
   19662:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   19666:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1966a:	3302      	adds	r3, #2
   1966c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   19670:	4814      	ldr	r0, [pc, #80]	; (196c4 <filter_wl_update+0x70>)
   19672:	f7ff ffd7 	bl	19624 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   19676:	3401      	adds	r4, #1
   19678:	b2e4      	uxtb	r4, r4
   1967a:	2c07      	cmp	r4, #7
   1967c:	d820      	bhi.n	196c0 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   1967e:	4621      	mov	r1, r4
   19680:	4b11      	ldr	r3, [pc, #68]	; (196c8 <filter_wl_update+0x74>)
   19682:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19686:	f013 0f01 	tst.w	r3, #1
   1968a:	d0f4      	beq.n	19676 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   1968c:	4b0e      	ldr	r3, [pc, #56]	; (196c8 <filter_wl_update+0x74>)
   1968e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19692:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19694:	4a0d      	ldr	r2, [pc, #52]	; (196cc <filter_wl_update+0x78>)
   19696:	7812      	ldrb	r2, [r2, #0]
   19698:	2a00      	cmp	r2, #0
   1969a:	d0e1      	beq.n	19660 <filter_wl_update+0xc>
   1969c:	2b07      	cmp	r3, #7
   1969e:	d8df      	bhi.n	19660 <filter_wl_update+0xc>
   196a0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   196a4:	00c2      	lsls	r2, r0, #3
   196a6:	480a      	ldr	r0, [pc, #40]	; (196d0 <filter_wl_update+0x7c>)
   196a8:	5c82      	ldrb	r2, [r0, r2]
   196aa:	f012 0f04 	tst.w	r2, #4
   196ae:	d0d7      	beq.n	19660 <filter_wl_update+0xc>
		    rl[j].dev) {
   196b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   196b4:	00da      	lsls	r2, r3, #3
   196b6:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   196b8:	f013 0f10 	tst.w	r3, #16
   196bc:	d0db      	beq.n	19676 <filter_wl_update+0x22>
   196be:	e7cf      	b.n	19660 <filter_wl_update+0xc>
}
   196c0:	bd10      	pop	{r4, pc}
   196c2:	bf00      	nop
   196c4:	20001a90 	.word	0x20001a90
   196c8:	20001a50 	.word	0x20001a50
   196cc:	20001a18 	.word	0x20001a18
   196d0:	200018d8 	.word	0x200018d8

000196d4 <filter_rl_update>:
{
   196d4:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   196d6:	4810      	ldr	r0, [pc, #64]	; (19718 <filter_rl_update+0x44>)
   196d8:	f7ff ff2c 	bl	19534 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   196dc:	2400      	movs	r4, #0
   196de:	e001      	b.n	196e4 <filter_rl_update+0x10>
   196e0:	3401      	adds	r4, #1
   196e2:	b2e4      	uxtb	r4, r4
   196e4:	2c07      	cmp	r4, #7
   196e6:	d815      	bhi.n	19714 <filter_rl_update+0x40>
		if (rl[i].taken) {
   196e8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   196ec:	00d3      	lsls	r3, r2, #3
   196ee:	4a0b      	ldr	r2, [pc, #44]	; (1971c <filter_rl_update+0x48>)
   196f0:	5cd3      	ldrb	r3, [r2, r3]
   196f2:	f013 0f01 	tst.w	r3, #1
   196f6:	d0f3      	beq.n	196e0 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   196f8:	4611      	mov	r1, r2
   196fa:	00a3      	lsls	r3, r4, #2
   196fc:	4423      	add	r3, r4
   196fe:	00da      	lsls	r2, r3, #3
   19700:	188b      	adds	r3, r1, r2
   19702:	5c8a      	ldrb	r2, [r1, r2]
   19704:	3301      	adds	r3, #1
   19706:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1970a:	4621      	mov	r1, r4
   1970c:	4802      	ldr	r0, [pc, #8]	; (19718 <filter_rl_update+0x44>)
   1970e:	f7ff ff89 	bl	19624 <filter_insert>
   19712:	e7e5      	b.n	196e0 <filter_rl_update+0xc>
}
   19714:	bd10      	pop	{r4, pc}
   19716:	bf00      	nop
   19718:	20001a1c 	.word	0x20001a1c
   1971c:	200018d8 	.word	0x200018d8

00019720 <rl_access_check>:
{
   19720:	b508      	push	{r3, lr}
	if (check_ar) {
   19722:	b110      	cbz	r0, 1972a <rl_access_check+0xa>
		if (!rl_enable) {
   19724:	4b08      	ldr	r3, [pc, #32]	; (19748 <rl_access_check+0x28>)
   19726:	781b      	ldrb	r3, [r3, #0]
   19728:	b15b      	cbz	r3, 19742 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1972a:	f7fe fc27 	bl	17f7c <radio_adv_is_enabled>
   1972e:	b108      	cbz	r0, 19734 <rl_access_check+0x14>
   19730:	2000      	movs	r0, #0
   19732:	bd08      	pop	{r3, pc}
   19734:	f7fe fc3a 	bl	17fac <radio_scan_is_enabled>
   19738:	b108      	cbz	r0, 1973e <rl_access_check+0x1e>
   1973a:	2000      	movs	r0, #0
}
   1973c:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1973e:	2001      	movs	r0, #1
   19740:	bd08      	pop	{r3, pc}
			return -1;
   19742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19746:	bd08      	pop	{r3, pc}
   19748:	20001a18 	.word	0x20001a18

0001974c <rpa_refresh_start>:
{
   1974c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   1974e:	4b05      	ldr	r3, [pc, #20]	; (19764 <rpa_refresh_start+0x18>)
   19750:	781b      	ldrb	r3, [r3, #0]
   19752:	b903      	cbnz	r3, 19756 <rpa_refresh_start+0xa>
   19754:	bd08      	pop	{r3, pc}
   19756:	4b04      	ldr	r3, [pc, #16]	; (19768 <rpa_refresh_start+0x1c>)
   19758:	681a      	ldr	r2, [r3, #0]
   1975a:	4904      	ldr	r1, [pc, #16]	; (1976c <rpa_refresh_start+0x20>)
   1975c:	4804      	ldr	r0, [pc, #16]	; (19770 <rpa_refresh_start+0x24>)
   1975e:	f010 fbad 	bl	29ebc <k_delayed_work_submit_to_queue>
   19762:	e7f7      	b.n	19754 <rpa_refresh_start+0x8>
   19764:	20001a18 	.word	0x20001a18
   19768:	20002b64 	.word	0x20002b64
   1976c:	20002a30 	.word	0x20002a30
   19770:	20002b78 	.word	0x20002b78

00019774 <rpa_refresh_stop>:
{
   19774:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19776:	4b04      	ldr	r3, [pc, #16]	; (19788 <rpa_refresh_stop+0x14>)
   19778:	781b      	ldrb	r3, [r3, #0]
   1977a:	b903      	cbnz	r3, 1977e <rpa_refresh_stop+0xa>
   1977c:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   1977e:	4803      	ldr	r0, [pc, #12]	; (1978c <rpa_refresh_stop+0x18>)
   19780:	f010 fb42 	bl	29e08 <k_delayed_work_cancel>
   19784:	e7fa      	b.n	1977c <rpa_refresh_stop+0x8>
   19786:	bf00      	nop
   19788:	20001a18 	.word	0x20001a18
   1978c:	20002a30 	.word	0x20002a30

00019790 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19790:	2807      	cmp	r0, #7
   19792:	d816      	bhi.n	197c2 <ctrl_lrpa_get+0x32>
   19794:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19798:	00d3      	lsls	r3, r2, #3
   1979a:	4a0d      	ldr	r2, [pc, #52]	; (197d0 <ctrl_lrpa_get+0x40>)
   1979c:	5cd3      	ldrb	r3, [r2, r3]
   1979e:	f013 0f08 	tst.w	r3, #8
   197a2:	d010      	beq.n	197c6 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   197a4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   197a8:	00d3      	lsls	r3, r2, #3
   197aa:	4a09      	ldr	r2, [pc, #36]	; (197d0 <ctrl_lrpa_get+0x40>)
   197ac:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   197ae:	f013 0f02 	tst.w	r3, #2
   197b2:	d00a      	beq.n	197ca <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   197b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   197b8:	00c2      	lsls	r2, r0, #3
   197ba:	4b05      	ldr	r3, [pc, #20]	; (197d0 <ctrl_lrpa_get+0x40>)
   197bc:	4413      	add	r3, r2
   197be:	6a58      	ldr	r0, [r3, #36]	; 0x24
   197c0:	4770      	bx	lr
		return NULL;
   197c2:	2000      	movs	r0, #0
   197c4:	4770      	bx	lr
   197c6:	2000      	movs	r0, #0
   197c8:	4770      	bx	lr
   197ca:	2000      	movs	r0, #0
}
   197cc:	4770      	bx	lr
   197ce:	bf00      	nop
   197d0:	200018d8 	.word	0x200018d8

000197d4 <ctrl_irks_get>:
	*count = peer_irk_count;
   197d4:	4b02      	ldr	r3, [pc, #8]	; (197e0 <ctrl_irks_get+0xc>)
   197d6:	781b      	ldrb	r3, [r3, #0]
   197d8:	7003      	strb	r3, [r0, #0]
}
   197da:	4802      	ldr	r0, [pc, #8]	; (197e4 <ctrl_irks_get+0x10>)
   197dc:	4770      	bx	lr
   197de:	bf00      	nop
   197e0:	2000184c 	.word	0x2000184c
   197e4:	20001858 	.word	0x20001858

000197e8 <ctrl_rl_idx>:
	if (whitelist) {
   197e8:	b1c8      	cbz	r0, 1981e <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   197ea:	2907      	cmp	r1, #7
   197ec:	d80b      	bhi.n	19806 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   197ee:	4b17      	ldr	r3, [pc, #92]	; (1984c <ctrl_rl_idx+0x64>)
   197f0:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   197f4:	f013 0f01 	tst.w	r3, #1
   197f8:	d00b      	beq.n	19812 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   197fa:	4b14      	ldr	r3, [pc, #80]	; (1984c <ctrl_rl_idx+0x64>)
   197fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19800:	7849      	ldrb	r1, [r1, #1]
}
   19802:	4608      	mov	r0, r1
   19804:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19806:	4040      	eors	r0, r0
   19808:	f380 8811 	msr	BASEPRI, r0
   1980c:	f04f 0004 	mov.w	r0, #4
   19810:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   19812:	4040      	eors	r0, r0
   19814:	f380 8811 	msr	BASEPRI, r0
   19818:	f04f 0004 	mov.w	r0, #4
   1981c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1981e:	2907      	cmp	r1, #7
   19820:	d80d      	bhi.n	1983e <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   19822:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19826:	00d3      	lsls	r3, r2, #3
   19828:	4a09      	ldr	r2, [pc, #36]	; (19850 <ctrl_rl_idx+0x68>)
   1982a:	5cd3      	ldrb	r3, [r2, r3]
   1982c:	f013 0f01 	tst.w	r3, #1
   19830:	d1e7      	bne.n	19802 <ctrl_rl_idx+0x1a>
   19832:	4040      	eors	r0, r0
   19834:	f380 8811 	msr	BASEPRI, r0
   19838:	f04f 0004 	mov.w	r0, #4
   1983c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1983e:	4040      	eors	r0, r0
   19840:	f380 8811 	msr	BASEPRI, r0
   19844:	f04f 0004 	mov.w	r0, #4
   19848:	df02      	svc	2
   1984a:	bf00      	nop
   1984c:	20001a50 	.word	0x20001a50
   19850:	200018d8 	.word	0x200018d8

00019854 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19854:	4b11      	ldr	r3, [pc, #68]	; (1989c <ctrl_rl_irk_idx+0x48>)
   19856:	781b      	ldrb	r3, [r3, #0]
   19858:	4283      	cmp	r3, r0
   1985a:	d90c      	bls.n	19876 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   1985c:	4b10      	ldr	r3, [pc, #64]	; (198a0 <ctrl_rl_irk_idx+0x4c>)
   1985e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19860:	2807      	cmp	r0, #7
   19862:	d80e      	bhi.n	19882 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   19864:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19868:	00d3      	lsls	r3, r2, #3
   1986a:	4a0e      	ldr	r2, [pc, #56]	; (198a4 <ctrl_rl_irk_idx+0x50>)
   1986c:	5cd3      	ldrb	r3, [r2, r3]
   1986e:	f013 0f01 	tst.w	r3, #1
   19872:	d00c      	beq.n	1988e <ctrl_rl_irk_idx+0x3a>
}
   19874:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19876:	4040      	eors	r0, r0
   19878:	f380 8811 	msr	BASEPRI, r0
   1987c:	f04f 0004 	mov.w	r0, #4
   19880:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19882:	4040      	eors	r0, r0
   19884:	f380 8811 	msr	BASEPRI, r0
   19888:	f04f 0004 	mov.w	r0, #4
   1988c:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1988e:	4040      	eors	r0, r0
   19890:	f380 8811 	msr	BASEPRI, r0
   19894:	f04f 0004 	mov.w	r0, #4
   19898:	df02      	svc	2
   1989a:	bf00      	nop
   1989c:	2000184c 	.word	0x2000184c
   198a0:	20001850 	.word	0x20001850
   198a4:	200018d8 	.word	0x200018d8

000198a8 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   198a8:	2807      	cmp	r0, #7
   198aa:	d815      	bhi.n	198d8 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   198ac:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   198b0:	00d3      	lsls	r3, r2, #3
   198b2:	4a0a      	ldr	r2, [pc, #40]	; (198dc <ctrl_irk_whitelisted+0x34>)
   198b4:	5cd3      	ldrb	r3, [r2, r3]
   198b6:	f013 0f01 	tst.w	r3, #1
   198ba:	d007      	beq.n	198cc <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   198bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   198c0:	00c3      	lsls	r3, r0, #3
   198c2:	4a06      	ldr	r2, [pc, #24]	; (198dc <ctrl_irk_whitelisted+0x34>)
   198c4:	5cd0      	ldrb	r0, [r2, r3]
   198c6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   198ca:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   198cc:	4040      	eors	r0, r0
   198ce:	f380 8811 	msr	BASEPRI, r0
   198d2:	f04f 0004 	mov.w	r0, #4
   198d6:	df02      	svc	2
		return false;
   198d8:	2000      	movs	r0, #0
}
   198da:	4770      	bx	lr
   198dc:	200018d8 	.word	0x200018d8

000198e0 <ctrl_filter_get>:
	if (whitelist) {
   198e0:	b908      	cbnz	r0, 198e6 <ctrl_filter_get+0x6>
	return &rl_filter;
   198e2:	4802      	ldr	r0, [pc, #8]	; (198ec <ctrl_filter_get+0xc>)
}
   198e4:	4770      	bx	lr
		return &wl_filter;
   198e6:	4802      	ldr	r0, [pc, #8]	; (198f0 <ctrl_filter_get+0x10>)
   198e8:	4770      	bx	lr
   198ea:	bf00      	nop
   198ec:	20001a1c 	.word	0x20001a1c
   198f0:	20001a90 	.word	0x20001a90

000198f4 <ll_wl_size_get>:
}
   198f4:	2008      	movs	r0, #8
   198f6:	4770      	bx	lr

000198f8 <ll_wl_clear>:
{
   198f8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   198fa:	f7fe fb47 	bl	17f8c <radio_adv_filter_pol_get>
   198fe:	b110      	cbz	r0, 19906 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19900:	240c      	movs	r4, #12
}
   19902:	4620      	mov	r0, r4
   19904:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19906:	f7fe fb59 	bl	17fbc <radio_scan_filter_pol_get>
   1990a:	f010 0401 	ands.w	r4, r0, #1
   1990e:	d001      	beq.n	19914 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19910:	240c      	movs	r4, #12
   19912:	e7f6      	b.n	19902 <ll_wl_clear+0xa>
	wl_clear();
   19914:	f7ff fdfe 	bl	19514 <wl_clear>
	wl_anon = 0;
   19918:	2200      	movs	r2, #0
   1991a:	4b01      	ldr	r3, [pc, #4]	; (19920 <ll_wl_clear+0x28>)
   1991c:	701a      	strb	r2, [r3, #0]
	return 0;
   1991e:	e7f0      	b.n	19902 <ll_wl_clear+0xa>
   19920:	200029c0 	.word	0x200029c0

00019924 <ll_wl_remove>:
{
   19924:	b510      	push	{r4, lr}
   19926:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19928:	f7fe fb30 	bl	17f8c <radio_adv_filter_pol_get>
   1992c:	b108      	cbz	r0, 19932 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1992e:	200c      	movs	r0, #12
   19930:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19932:	f7fe fb43 	bl	17fbc <radio_scan_filter_pol_get>
   19936:	f010 0001 	ands.w	r0, r0, #1
   1993a:	d001      	beq.n	19940 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1993c:	200c      	movs	r0, #12
}
   1993e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19940:	7823      	ldrb	r3, [r4, #0]
   19942:	2bff      	cmp	r3, #255	; 0xff
   19944:	d003      	beq.n	1994e <ll_wl_remove+0x2a>
	return wl_remove(addr);
   19946:	4620      	mov	r0, r4
   19948:	f7ff fe46 	bl	195d8 <wl_remove>
   1994c:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   1994e:	2200      	movs	r2, #0
   19950:	4b01      	ldr	r3, [pc, #4]	; (19958 <ll_wl_remove+0x34>)
   19952:	701a      	strb	r2, [r3, #0]
		return 0;
   19954:	bd10      	pop	{r4, pc}
   19956:	bf00      	nop
   19958:	200029c0 	.word	0x200029c0

0001995c <ll_filters_adv_update>:
{
   1995c:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1995e:	b918      	cbnz	r0, 19968 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19960:	4b09      	ldr	r3, [pc, #36]	; (19988 <ll_filters_adv_update+0x2c>)
   19962:	781b      	ldrb	r3, [r3, #0]
   19964:	b943      	cbnz	r3, 19978 <ll_filters_adv_update+0x1c>
   19966:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19968:	f7fe fb28 	bl	17fbc <radio_scan_filter_pol_get>
   1996c:	f010 0f01 	tst.w	r0, #1
   19970:	d1f6      	bne.n	19960 <ll_filters_adv_update+0x4>
		filter_wl_update();
   19972:	f7ff fe6f 	bl	19654 <filter_wl_update>
   19976:	e7f3      	b.n	19960 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19978:	f7fe fb18 	bl	17fac <radio_scan_is_enabled>
   1997c:	2800      	cmp	r0, #0
   1997e:	d1f2      	bne.n	19966 <ll_filters_adv_update+0xa>
		filter_rl_update();
   19980:	f7ff fea8 	bl	196d4 <filter_rl_update>
}
   19984:	e7ef      	b.n	19966 <ll_filters_adv_update+0xa>
   19986:	bf00      	nop
   19988:	20001a18 	.word	0x20001a18

0001998c <ll_filters_scan_update>:
{
   1998c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1998e:	f010 0f01 	tst.w	r0, #1
   19992:	d103      	bne.n	1999c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   19994:	4b08      	ldr	r3, [pc, #32]	; (199b8 <ll_filters_scan_update+0x2c>)
   19996:	781b      	ldrb	r3, [r3, #0]
   19998:	b93b      	cbnz	r3, 199aa <ll_filters_scan_update+0x1e>
   1999a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1999c:	f7fe faf6 	bl	17f8c <radio_adv_filter_pol_get>
   199a0:	2800      	cmp	r0, #0
   199a2:	d1f7      	bne.n	19994 <ll_filters_scan_update+0x8>
		filter_wl_update();
   199a4:	f7ff fe56 	bl	19654 <filter_wl_update>
   199a8:	e7f4      	b.n	19994 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   199aa:	f7fe fae7 	bl	17f7c <radio_adv_is_enabled>
   199ae:	2800      	cmp	r0, #0
   199b0:	d1f3      	bne.n	1999a <ll_filters_scan_update+0xe>
		filter_rl_update();
   199b2:	f7ff fe8f 	bl	196d4 <filter_rl_update>
}
   199b6:	e7f0      	b.n	1999a <ll_filters_scan_update+0xe>
   199b8:	20001a18 	.word	0x20001a18

000199bc <ll_rl_find>:
{
   199bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199c0:	4607      	mov	r7, r0
   199c2:	4688      	mov	r8, r1
	if (free) {
   199c4:	4616      	mov	r6, r2
   199c6:	b10a      	cbz	r2, 199cc <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   199c8:	23ff      	movs	r3, #255	; 0xff
   199ca:	7013      	strb	r3, [r2, #0]
{
   199cc:	2400      	movs	r4, #0
   199ce:	e00e      	b.n	199ee <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   199d0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   199d4:	00d3      	lsls	r3, r2, #3
   199d6:	481a      	ldr	r0, [pc, #104]	; (19a40 <ll_rl_find+0x84>)
   199d8:	4418      	add	r0, r3
   199da:	2206      	movs	r2, #6
   199dc:	4641      	mov	r1, r8
   199de:	3001      	adds	r0, #1
   199e0:	f010 fb62 	bl	2a0a8 <memcmp>
   199e4:	b9c8      	cbnz	r0, 19a1a <ll_rl_find+0x5e>
   199e6:	e027      	b.n	19a38 <ll_rl_find+0x7c>
			*free = i;
   199e8:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   199ea:	3401      	adds	r4, #1
   199ec:	b2e4      	uxtb	r4, r4
   199ee:	2c07      	cmp	r4, #7
   199f0:	d821      	bhi.n	19a36 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   199f2:	4625      	mov	r5, r4
   199f4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   199f8:	00d3      	lsls	r3, r2, #3
   199fa:	4a11      	ldr	r2, [pc, #68]	; (19a40 <ll_rl_find+0x84>)
   199fc:	5cd3      	ldrb	r3, [r2, r3]
   199fe:	f013 0f01 	tst.w	r3, #1
   19a02:	d00a      	beq.n	19a1a <ll_rl_find+0x5e>
   19a04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19a08:	00d3      	lsls	r3, r2, #3
   19a0a:	4a0d      	ldr	r2, [pc, #52]	; (19a40 <ll_rl_find+0x84>)
   19a0c:	5cd3      	ldrb	r3, [r2, r3]
   19a0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19a12:	f007 0201 	and.w	r2, r7, #1
   19a16:	4293      	cmp	r3, r2
   19a18:	d0da      	beq.n	199d0 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19a1a:	2e00      	cmp	r6, #0
   19a1c:	d0e5      	beq.n	199ea <ll_rl_find+0x2e>
   19a1e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19a22:	00eb      	lsls	r3, r5, #3
   19a24:	4a06      	ldr	r2, [pc, #24]	; (19a40 <ll_rl_find+0x84>)
   19a26:	5cd3      	ldrb	r3, [r2, r3]
   19a28:	f013 0f01 	tst.w	r3, #1
   19a2c:	d1dd      	bne.n	199ea <ll_rl_find+0x2e>
   19a2e:	7833      	ldrb	r3, [r6, #0]
   19a30:	2bff      	cmp	r3, #255	; 0xff
   19a32:	d1da      	bne.n	199ea <ll_rl_find+0x2e>
   19a34:	e7d8      	b.n	199e8 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   19a36:	24ff      	movs	r4, #255	; 0xff
}
   19a38:	4620      	mov	r0, r4
   19a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a3e:	bf00      	nop
   19a40:	200018d8 	.word	0x200018d8

00019a44 <wl_add>:
{
   19a44:	b570      	push	{r4, r5, r6, lr}
   19a46:	b082      	sub	sp, #8
   19a48:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19a4a:	4604      	mov	r4, r0
   19a4c:	f814 0b01 	ldrb.w	r0, [r4], #1
   19a50:	f10d 0207 	add.w	r2, sp, #7
   19a54:	4621      	mov	r1, r4
   19a56:	f7ff fd87 	bl	19568 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19a5a:	2807      	cmp	r0, #7
   19a5c:	d802      	bhi.n	19a64 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19a5e:	2012      	movs	r0, #18
}
   19a60:	b002      	add	sp, #8
   19a62:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   19a64:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19a68:	2e07      	cmp	r6, #7
   19a6a:	d901      	bls.n	19a70 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19a6c:	2007      	movs	r0, #7
   19a6e:	e7f7      	b.n	19a60 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19a70:	4629      	mov	r1, r5
   19a72:	f811 2b01 	ldrb.w	r2, [r1], #1
   19a76:	4817      	ldr	r0, [pc, #92]	; (19ad4 <wl_add+0x90>)
   19a78:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19a7c:	f362 0341 	bfi	r3, r2, #1, #1
   19a80:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19a84:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19a88:	2206      	movs	r2, #6
   19a8a:	3002      	adds	r0, #2
   19a8c:	f7e6 fc18 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19a90:	2200      	movs	r2, #0
   19a92:	4621      	mov	r1, r4
   19a94:	7828      	ldrb	r0, [r5, #0]
   19a96:	f7ff ff91 	bl	199bc <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19a9a:	2807      	cmp	r0, #7
   19a9c:	d814      	bhi.n	19ac8 <wl_add+0x84>
		wl[i].rl_idx = j;
   19a9e:	4b0d      	ldr	r3, [pc, #52]	; (19ad4 <wl_add+0x90>)
   19aa0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19aa4:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19aa6:	490c      	ldr	r1, [pc, #48]	; (19ad8 <wl_add+0x94>)
   19aa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19aac:	00c3      	lsls	r3, r0, #3
   19aae:	5cca      	ldrb	r2, [r1, r3]
   19ab0:	f042 0220 	orr.w	r2, r2, #32
   19ab4:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19ab6:	4a07      	ldr	r2, [pc, #28]	; (19ad4 <wl_add+0x90>)
   19ab8:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19abc:	f043 0301 	orr.w	r3, r3, #1
   19ac0:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19ac4:	2000      	movs	r0, #0
   19ac6:	e7cb      	b.n	19a60 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19ac8:	4b02      	ldr	r3, [pc, #8]	; (19ad4 <wl_add+0x90>)
   19aca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19ace:	22ff      	movs	r2, #255	; 0xff
   19ad0:	705a      	strb	r2, [r3, #1]
   19ad2:	e7f0      	b.n	19ab6 <wl_add+0x72>
   19ad4:	20001a50 	.word	0x20001a50
   19ad8:	200018d8 	.word	0x200018d8

00019adc <ll_wl_add>:
{
   19adc:	b510      	push	{r4, lr}
   19ade:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19ae0:	f7fe fa54 	bl	17f8c <radio_adv_filter_pol_get>
   19ae4:	b108      	cbz	r0, 19aea <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ae6:	200c      	movs	r0, #12
   19ae8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19aea:	f7fe fa67 	bl	17fbc <radio_scan_filter_pol_get>
   19aee:	f010 0001 	ands.w	r0, r0, #1
   19af2:	d001      	beq.n	19af8 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19af4:	200c      	movs	r0, #12
}
   19af6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19af8:	7823      	ldrb	r3, [r4, #0]
   19afa:	2bff      	cmp	r3, #255	; 0xff
   19afc:	d003      	beq.n	19b06 <ll_wl_add+0x2a>
	return wl_add(addr);
   19afe:	4620      	mov	r0, r4
   19b00:	f7ff ffa0 	bl	19a44 <wl_add>
   19b04:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19b06:	2201      	movs	r2, #1
   19b08:	4b01      	ldr	r3, [pc, #4]	; (19b10 <ll_wl_add+0x34>)
   19b0a:	701a      	strb	r2, [r3, #0]
		return 0;
   19b0c:	bd10      	pop	{r4, pc}
   19b0e:	bf00      	nop
   19b10:	200029c0 	.word	0x200029c0

00019b14 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19b14:	4b17      	ldr	r3, [pc, #92]	; (19b74 <ctrl_rl_idx_allowed+0x60>)
   19b16:	781b      	ldrb	r3, [r3, #0]
   19b18:	b32b      	cbz	r3, 19b66 <ctrl_rl_idx_allowed+0x52>
   19b1a:	2907      	cmp	r1, #7
   19b1c:	d825      	bhi.n	19b6a <ctrl_rl_idx_allowed+0x56>
   19b1e:	bb30      	cbnz	r0, 19b6e <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19b20:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19b24:	00d3      	lsls	r3, r2, #3
   19b26:	4a14      	ldr	r2, [pc, #80]	; (19b78 <ctrl_rl_idx_allowed+0x64>)
   19b28:	5cd3      	ldrb	r3, [r2, r3]
   19b2a:	f013 0f01 	tst.w	r3, #1
   19b2e:	d010      	beq.n	19b52 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19b30:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19b34:	00d3      	lsls	r3, r2, #3
   19b36:	4a10      	ldr	r2, [pc, #64]	; (19b78 <ctrl_rl_idx_allowed+0x64>)
   19b38:	5cd3      	ldrb	r3, [r2, r3]
   19b3a:	f013 0f04 	tst.w	r3, #4
   19b3e:	d00e      	beq.n	19b5e <ctrl_rl_idx_allowed+0x4a>
   19b40:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19b44:	00cb      	lsls	r3, r1, #3
   19b46:	5cd3      	ldrb	r3, [r2, r3]
   19b48:	f013 0f10 	tst.w	r3, #16
   19b4c:	d009      	beq.n	19b62 <ctrl_rl_idx_allowed+0x4e>
   19b4e:	2001      	movs	r0, #1
   19b50:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19b52:	4040      	eors	r0, r0
   19b54:	f380 8811 	msr	BASEPRI, r0
   19b58:	f04f 0004 	mov.w	r0, #4
   19b5c:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19b5e:	2001      	movs	r0, #1
   19b60:	4770      	bx	lr
   19b62:	2000      	movs	r0, #0
   19b64:	4770      	bx	lr
		return true;
   19b66:	2001      	movs	r0, #1
   19b68:	4770      	bx	lr
   19b6a:	2001      	movs	r0, #1
   19b6c:	4770      	bx	lr
   19b6e:	2001      	movs	r0, #1
}
   19b70:	4770      	bx	lr
   19b72:	bf00      	nop
   19b74:	20001a18 	.word	0x20001a18
   19b78:	200018d8 	.word	0x200018d8

00019b7c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19b7c:	2807      	cmp	r0, #7
   19b7e:	d81a      	bhi.n	19bb6 <ll_rl_id_addr_get+0x3a>
{
   19b80:	b570      	push	{r4, r5, r6, lr}
   19b82:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   19b84:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19b88:	00ec      	lsls	r4, r5, #3
   19b8a:	4811      	ldr	r0, [pc, #68]	; (19bd0 <ll_rl_id_addr_get+0x54>)
   19b8c:	5d00      	ldrb	r0, [r0, r4]
   19b8e:	f010 0f01 	tst.w	r0, #1
   19b92:	d016      	beq.n	19bc2 <ll_rl_id_addr_get+0x46>
   19b94:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19b96:	4d0e      	ldr	r5, [pc, #56]	; (19bd0 <ll_rl_id_addr_get+0x54>)
   19b98:	009c      	lsls	r4, r3, #2
   19b9a:	18e6      	adds	r6, r4, r3
   19b9c:	00f2      	lsls	r2, r6, #3
   19b9e:	4616      	mov	r6, r2
   19ba0:	5caa      	ldrb	r2, [r5, r2]
   19ba2:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19ba6:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19ba8:	4631      	mov	r1, r6
   19baa:	4429      	add	r1, r5
   19bac:	2206      	movs	r2, #6
   19bae:	3101      	adds	r1, #1
   19bb0:	f7e6 fb86 	bl	2c0 <memcpy>
   19bb4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19bb6:	4040      	eors	r0, r0
   19bb8:	f380 8811 	msr	BASEPRI, r0
   19bbc:	f04f 0004 	mov.w	r0, #4
   19bc0:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19bc2:	4040      	eors	r0, r0
   19bc4:	f380 8811 	msr	BASEPRI, r0
   19bc8:	f04f 0004 	mov.w	r0, #4
   19bcc:	df02      	svc	2
   19bce:	bf00      	nop
   19bd0:	200018d8 	.word	0x200018d8

00019bd4 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19bd4:	4b29      	ldr	r3, [pc, #164]	; (19c7c <ctrl_rl_addr_allowed+0xa8>)
   19bd6:	781b      	ldrb	r3, [r3, #0]
   19bd8:	2b00      	cmp	r3, #0
   19bda:	d04a      	beq.n	19c72 <ctrl_rl_addr_allowed+0x9e>
   19bdc:	7813      	ldrb	r3, [r2, #0]
   19bde:	2bff      	cmp	r3, #255	; 0xff
   19be0:	d001      	beq.n	19be6 <ctrl_rl_addr_allowed+0x12>
		return true;
   19be2:	2001      	movs	r0, #1
   19be4:	4770      	bx	lr
   19be6:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19be8:	2b07      	cmp	r3, #7
   19bea:	d844      	bhi.n	19c76 <ctrl_rl_addr_allowed+0xa2>
{
   19bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bee:	e005      	b.n	19bfc <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19bf0:	2c06      	cmp	r4, #6
   19bf2:	d026      	beq.n	19c42 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bf4:	3301      	adds	r3, #1
   19bf6:	b2db      	uxtb	r3, r3
   19bf8:	2b07      	cmp	r3, #7
   19bfa:	d838      	bhi.n	19c6e <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19bfc:	461e      	mov	r6, r3
   19bfe:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19c02:	00ec      	lsls	r4, r5, #3
   19c04:	4d1e      	ldr	r5, [pc, #120]	; (19c80 <ctrl_rl_addr_allowed+0xac>)
   19c06:	5d2c      	ldrb	r4, [r5, r4]
   19c08:	f014 0f01 	tst.w	r4, #1
   19c0c:	d0f2      	beq.n	19bf4 <ctrl_rl_addr_allowed+0x20>
   19c0e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19c12:	00ec      	lsls	r4, r5, #3
   19c14:	4d1a      	ldr	r5, [pc, #104]	; (19c80 <ctrl_rl_addr_allowed+0xac>)
   19c16:	5d2c      	ldrb	r4, [r5, r4]
   19c18:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19c1c:	4284      	cmp	r4, r0
   19c1e:	d1e9      	bne.n	19bf4 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19c20:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19c24:	00ec      	lsls	r4, r5, #3
   19c26:	4d16      	ldr	r5, [pc, #88]	; (19c80 <ctrl_rl_addr_allowed+0xac>)
   19c28:	4425      	add	r5, r4
   19c2a:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19c2c:	2400      	movs	r4, #0
   19c2e:	2c05      	cmp	r4, #5
   19c30:	d8de      	bhi.n	19bf0 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   19c32:	f815 e004 	ldrb.w	lr, [r5, r4]
   19c36:	5d0f      	ldrb	r7, [r1, r4]
   19c38:	45be      	cmp	lr, r7
   19c3a:	d1d9      	bne.n	19bf0 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19c3c:	3401      	adds	r4, #1
   19c3e:	b2e4      	uxtb	r4, r4
   19c40:	e7f5      	b.n	19c2e <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   19c42:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19c44:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19c48:	00d3      	lsls	r3, r2, #3
   19c4a:	4a0d      	ldr	r2, [pc, #52]	; (19c80 <ctrl_rl_addr_allowed+0xac>)
   19c4c:	5cd3      	ldrb	r3, [r2, r3]
   19c4e:	f013 0f04 	tst.w	r3, #4
   19c52:	d00a      	beq.n	19c6a <ctrl_rl_addr_allowed+0x96>
   19c54:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19c58:	00f3      	lsls	r3, r6, #3
   19c5a:	5cd3      	ldrb	r3, [r2, r3]
   19c5c:	f013 0f10 	tst.w	r3, #16
   19c60:	d101      	bne.n	19c66 <ctrl_rl_addr_allowed+0x92>
   19c62:	2000      	movs	r0, #0
   19c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c66:	2001      	movs	r0, #1
   19c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c6a:	2001      	movs	r0, #1
   19c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19c6e:	2001      	movs	r0, #1
   19c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   19c72:	2001      	movs	r0, #1
   19c74:	4770      	bx	lr
	return true;
   19c76:	2001      	movs	r0, #1
}
   19c78:	4770      	bx	lr
   19c7a:	bf00      	nop
   19c7c:	20001a18 	.word	0x20001a18
   19c80:	200018d8 	.word	0x200018d8

00019c84 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19c84:	4b13      	ldr	r3, [pc, #76]	; (19cd4 <ctrl_rl_addr_resolve+0x50>)
   19c86:	781b      	ldrb	r3, [r3, #0]
   19c88:	b1db      	cbz	r3, 19cc2 <ctrl_rl_addr_resolve+0x3e>
   19c8a:	2a07      	cmp	r2, #7
   19c8c:	d81b      	bhi.n	19cc6 <ctrl_rl_addr_resolve+0x42>
{
   19c8e:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19c90:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19c94:	00e3      	lsls	r3, r4, #3
   19c96:	4c10      	ldr	r4, [pc, #64]	; (19cd8 <ctrl_rl_addr_resolve+0x54>)
   19c98:	5ce3      	ldrb	r3, [r4, r3]
   19c9a:	f013 0f08 	tst.w	r3, #8
   19c9e:	d014      	beq.n	19cca <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19ca0:	b1a8      	cbz	r0, 19cce <ctrl_rl_addr_resolve+0x4a>
   19ca2:	794b      	ldrb	r3, [r1, #5]
   19ca4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19ca8:	2b40      	cmp	r3, #64	; 0x40
   19caa:	d001      	beq.n	19cb0 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19cac:	2000      	movs	r0, #0
}
   19cae:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19cb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19cb4:	00d3      	lsls	r3, r2, #3
   19cb6:	4620      	mov	r0, r4
   19cb8:	4418      	add	r0, r3
   19cba:	3007      	adds	r0, #7
   19cbc:	f7ea fbc6 	bl	444c <bt_rpa_irk_matches>
   19cc0:	bd10      	pop	{r4, pc}
		return false;
   19cc2:	2000      	movs	r0, #0
   19cc4:	4770      	bx	lr
   19cc6:	2000      	movs	r0, #0
   19cc8:	4770      	bx	lr
   19cca:	2000      	movs	r0, #0
   19ccc:	bd10      	pop	{r4, pc}
	return false;
   19cce:	2000      	movs	r0, #0
   19cd0:	bd10      	pop	{r4, pc}
   19cd2:	bf00      	nop
   19cd4:	20001a18 	.word	0x20001a18
   19cd8:	200018d8 	.word	0x200018d8

00019cdc <ctrl_rl_enabled>:
	return rl_enable;
   19cdc:	4b02      	ldr	r3, [pc, #8]	; (19ce8 <ctrl_rl_enabled+0xc>)
   19cde:	7818      	ldrb	r0, [r3, #0]
}
   19ce0:	3000      	adds	r0, #0
   19ce2:	bf18      	it	ne
   19ce4:	2001      	movne	r0, #1
   19ce6:	4770      	bx	lr
   19ce8:	20001a18 	.word	0x20001a18

00019cec <ll_rl_pdu_adv_update>:
{
   19cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cee:	4605      	mov	r5, r0
   19cf0:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19cf2:	780b      	ldrb	r3, [r1, #0]
   19cf4:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19cf8:	2b04      	cmp	r3, #4
   19cfa:	d024      	beq.n	19d46 <ll_rl_pdu_adv_update+0x5a>
   19cfc:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19cfe:	f000 fbc5 	bl	1a48c <ll_adv_set_get>
   19d02:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19d04:	2d07      	cmp	r5, #7
   19d06:	d826      	bhi.n	19d56 <ll_rl_pdu_adv_update+0x6a>
   19d08:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d0c:	00d3      	lsls	r3, r2, #3
   19d0e:	4a30      	ldr	r2, [pc, #192]	; (19dd0 <ll_rl_pdu_adv_update+0xe4>)
   19d10:	5cd3      	ldrb	r3, [r2, r3]
   19d12:	f013 0f08 	tst.w	r3, #8
   19d16:	d01e      	beq.n	19d56 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19d18:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d1c:	00d3      	lsls	r3, r2, #3
   19d1e:	4a2c      	ldr	r2, [pc, #176]	; (19dd0 <ll_rl_pdu_adv_update+0xe4>)
   19d20:	5cd3      	ldrb	r3, [r2, r3]
   19d22:	f013 0f02 	tst.w	r3, #2
   19d26:	d010      	beq.n	19d4a <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19d28:	7823      	ldrb	r3, [r4, #0]
   19d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19d2e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19d30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19d34:	00da      	lsls	r2, r3, #3
   19d36:	4b26      	ldr	r3, [pc, #152]	; (19dd0 <ll_rl_pdu_adv_update+0xe4>)
   19d38:	4413      	add	r3, r2
   19d3a:	2206      	movs	r2, #6
   19d3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19d3e:	4638      	mov	r0, r7
   19d40:	f7e6 fabe 	bl	2c0 <memcpy>
   19d44:	e014      	b.n	19d70 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   19d46:	1c8f      	adds	r7, r1, #2
   19d48:	e7d9      	b.n	19cfe <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19d4a:	4040      	eors	r0, r0
   19d4c:	f380 8811 	msr	BASEPRI, r0
   19d50:	f04f 0004 	mov.w	r0, #4
   19d54:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   19d56:	7833      	ldrb	r3, [r6, #0]
   19d58:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19d5c:	7822      	ldrb	r2, [r4, #0]
   19d5e:	f363 1286 	bfi	r2, r3, #6, #1
   19d62:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   19d64:	7830      	ldrb	r0, [r6, #0]
   19d66:	4639      	mov	r1, r7
   19d68:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19d6c:	f7ff fba0 	bl	194b0 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19d70:	7823      	ldrb	r3, [r4, #0]
   19d72:	f003 030f 	and.w	r3, r3, #15
   19d76:	2b01      	cmp	r3, #1
   19d78:	d000      	beq.n	19d7c <ll_rl_pdu_adv_update+0x90>
   19d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19d7c:	2d07      	cmp	r5, #7
   19d7e:	d807      	bhi.n	19d90 <ll_rl_pdu_adv_update+0xa4>
   19d80:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d84:	00d3      	lsls	r3, r2, #3
   19d86:	4a12      	ldr	r2, [pc, #72]	; (19dd0 <ll_rl_pdu_adv_update+0xe4>)
   19d88:	5cd3      	ldrb	r3, [r2, r3]
   19d8a:	f013 0f04 	tst.w	r3, #4
   19d8e:	d10d      	bne.n	19dac <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19d90:	4631      	mov	r1, r6
   19d92:	f811 3b02 	ldrb.w	r3, [r1], #2
   19d96:	09db      	lsrs	r3, r3, #7
   19d98:	7822      	ldrb	r2, [r4, #0]
   19d9a:	f363 12c7 	bfi	r2, r3, #7, #1
   19d9e:	4620      	mov	r0, r4
   19da0:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19da4:	2206      	movs	r2, #6
   19da6:	f7e6 fa8b 	bl	2c0 <memcpy>
}
   19daa:	e7e6      	b.n	19d7a <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19dac:	7823      	ldrb	r3, [r4, #0]
   19dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19db2:	4620      	mov	r0, r4
   19db4:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19db8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19dbc:	00eb      	lsls	r3, r5, #3
   19dbe:	3318      	adds	r3, #24
   19dc0:	4611      	mov	r1, r2
   19dc2:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19dc4:	2206      	movs	r2, #6
   19dc6:	4411      	add	r1, r2
   19dc8:	f7e6 fa7a 	bl	2c0 <memcpy>
   19dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dce:	bf00      	nop
   19dd0:	200018d8 	.word	0x200018d8

00019dd4 <rpa_adv_refresh>:
{
   19dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19dd8:	f000 fb58 	bl	1a48c <ll_adv_set_get>
   19ddc:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19dde:	7803      	ldrb	r3, [r0, #0]
   19de0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19de4:	2b40      	cmp	r3, #64	; 0x40
   19de6:	d003      	beq.n	19df0 <rpa_adv_refresh+0x1c>
   19de8:	2b60      	cmp	r3, #96	; 0x60
   19dea:	d001      	beq.n	19df0 <rpa_adv_refresh+0x1c>
   19dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19df0:	f7fe f8bc 	bl	17f6c <radio_adv_data_get>
   19df4:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19df6:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19dfa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19dfe:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19e02:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19e04:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19e08:	429d      	cmp	r5, r3
   19e0a:	d02d      	beq.n	19e68 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19e0c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19e10:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19e14:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19e18:	5ca0      	ldrb	r0, [r4, r2]
   19e1a:	5ce1      	ldrb	r1, [r4, r3]
   19e1c:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19e20:	f36f 1104 	bfc	r1, #4, #1
   19e24:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   19e26:	5ca2      	ldrb	r2, [r4, r2]
   19e28:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19e2c:	b2c9      	uxtb	r1, r1
   19e2e:	f362 1145 	bfi	r1, r2, #5, #1
   19e32:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   19e34:	4631      	mov	r1, r6
   19e36:	f811 0b02 	ldrb.w	r0, [r1], #2
   19e3a:	2200      	movs	r2, #0
   19e3c:	09c0      	lsrs	r0, r0, #7
   19e3e:	f7ff fdbd 	bl	199bc <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19e42:	2807      	cmp	r0, #7
   19e44:	d816      	bhi.n	19e74 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   19e46:	4641      	mov	r1, r8
   19e48:	f7ff ff50 	bl	19cec <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19e4c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19e4e:	3a06      	subs	r2, #6
   19e50:	f107 0108 	add.w	r1, r7, #8
   19e54:	f108 0008 	add.w	r0, r8, #8
   19e58:	f7e6 fa32 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19e5c:	787b      	ldrb	r3, [r7, #1]
   19e5e:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   19e62:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19e66:	e7c1      	b.n	19dec <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19e68:	3501      	adds	r5, #1
   19e6a:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19e6c:	2d02      	cmp	r5, #2
   19e6e:	d1cd      	bne.n	19e0c <rpa_adv_refresh+0x38>
			last = 0;
   19e70:	2500      	movs	r5, #0
   19e72:	e7cb      	b.n	19e0c <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19e74:	4040      	eors	r0, r0
   19e76:	f380 8811 	msr	BASEPRI, r0
   19e7a:	f04f 0004 	mov.w	r0, #4
   19e7e:	df02      	svc	2

00019e80 <ll_rl_rpa_update>:
{
   19e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e84:	b085      	sub	sp, #20
   19e86:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19e88:	f00f fa44 	bl	29314 <_impl_k_uptime_get>
   19e8c:	4606      	mov	r6, r0
   19e8e:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19e90:	f1b9 0f00 	cmp.w	r9, #0
   19e94:	d115      	bne.n	19ec2 <ll_rl_rpa_update+0x42>
   19e96:	4b57      	ldr	r3, [pc, #348]	; (19ff4 <ll_rl_rpa_update+0x174>)
   19e98:	e9d3 0100 	ldrd	r0, r1, [r3]
   19e9c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19ea0:	bf08      	it	eq
   19ea2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19ea6:	d010      	beq.n	19eca <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19ea8:	1a30      	subs	r0, r6, r0
   19eaa:	eb67 0101 	sbc.w	r1, r7, r1
   19eae:	4b52      	ldr	r3, [pc, #328]	; (19ff8 <ll_rl_rpa_update+0x178>)
   19eb0:	681a      	ldr	r2, [r3, #0]
   19eb2:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   19eb4:	4290      	cmp	r0, r2
   19eb6:	eb71 0303 	sbcs.w	r3, r1, r3
   19eba:	db09      	blt.n	19ed0 <ll_rl_rpa_update+0x50>
   19ebc:	f04f 0801 	mov.w	r8, #1
   19ec0:	e001      	b.n	19ec6 <ll_rl_rpa_update+0x46>
   19ec2:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ec6:	2400      	movs	r4, #0
   19ec8:	e02a      	b.n	19f20 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   19eca:	f04f 0801 	mov.w	r8, #1
   19ece:	e7fa      	b.n	19ec6 <ll_rl_rpa_update+0x46>
   19ed0:	f04f 0800 	mov.w	r8, #0
   19ed4:	e7f7      	b.n	19ec6 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   19ed6:	7818      	ldrb	r0, [r3, #0]
   19ed8:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   19eda:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   19edc:	3b01      	subs	r3, #1
   19ede:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   19ee0:	2a00      	cmp	r2, #0
   19ee2:	d1f8      	bne.n	19ed6 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19ee4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19ee8:	00d3      	lsls	r3, r2, #3
   19eea:	3318      	adds	r3, #24
   19eec:	4943      	ldr	r1, [pc, #268]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19eee:	4419      	add	r1, r3
   19ef0:	3106      	adds	r1, #6
   19ef2:	4668      	mov	r0, sp
   19ef4:	f7ea fabe 	bl	4474 <bt_rpa_create>
				LL_ASSERT(!err);
   19ef8:	2800      	cmp	r0, #0
   19efa:	d13c      	bne.n	19f76 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   19efc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f00:	00d3      	lsls	r3, r2, #3
   19f02:	4a3e      	ldr	r2, [pc, #248]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f04:	5cd3      	ldrb	r3, [r2, r3]
   19f06:	f013 0f08 	tst.w	r3, #8
   19f0a:	d13a      	bne.n	19f82 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   19f0c:	493b      	ldr	r1, [pc, #236]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19f12:	00eb      	lsls	r3, r5, #3
   19f14:	5cca      	ldrb	r2, [r1, r3]
   19f16:	f042 0202 	orr.w	r2, r2, #2
   19f1a:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19f1c:	3401      	adds	r4, #1
   19f1e:	b2e4      	uxtb	r4, r4
   19f20:	2c07      	cmp	r4, #7
   19f22:	d854      	bhi.n	19fce <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   19f24:	4625      	mov	r5, r4
   19f26:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19f2a:	00d3      	lsls	r3, r2, #3
   19f2c:	4a33      	ldr	r2, [pc, #204]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f2e:	5cd3      	ldrb	r3, [r2, r3]
   19f30:	f013 0f01 	tst.w	r3, #1
   19f34:	d0f2      	beq.n	19f1c <ll_rl_rpa_update+0x9c>
   19f36:	f1b8 0f00 	cmp.w	r8, #0
   19f3a:	d107      	bne.n	19f4c <ll_rl_rpa_update+0xcc>
   19f3c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19f40:	00d3      	lsls	r3, r2, #3
   19f42:	4a2e      	ldr	r2, [pc, #184]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f44:	5cd3      	ldrb	r3, [r2, r3]
   19f46:	f013 0f02 	tst.w	r3, #2
   19f4a:	d1e7      	bne.n	19f1c <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   19f4c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f50:	00d3      	lsls	r3, r2, #3
   19f52:	4a2a      	ldr	r2, [pc, #168]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f54:	5cd3      	ldrb	r3, [r2, r3]
   19f56:	f013 0f04 	tst.w	r3, #4
   19f5a:	d0cf      	beq.n	19efc <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   19f5c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19f60:	00da      	lsls	r2, r3, #3
   19f62:	4b26      	ldr	r3, [pc, #152]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f64:	4413      	add	r3, r2
   19f66:	7dda      	ldrb	r2, [r3, #23]
   19f68:	4b25      	ldr	r3, [pc, #148]	; (1a000 <ll_rl_rpa_update+0x180>)
   19f6a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   19f6e:	330f      	adds	r3, #15
   19f70:	2210      	movs	r2, #16
   19f72:	4669      	mov	r1, sp
   19f74:	e7b4      	b.n	19ee0 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   19f76:	4040      	eors	r0, r0
   19f78:	f380 8811 	msr	BASEPRI, r0
   19f7c:	f04f 0004 	mov.w	r0, #4
   19f80:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   19f82:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f86:	00d3      	lsls	r3, r2, #3
   19f88:	481c      	ldr	r0, [pc, #112]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f8a:	4418      	add	r0, r3
   19f8c:	4669      	mov	r1, sp
   19f8e:	3007      	adds	r0, #7
   19f90:	f7ea fa70 	bl	4474 <bt_rpa_create>
				LL_ASSERT(!err);
   19f94:	b9a8      	cbnz	r0, 19fc2 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   19f96:	00ab      	lsls	r3, r5, #2
   19f98:	442b      	add	r3, r5
   19f9a:	00da      	lsls	r2, r3, #3
   19f9c:	4b17      	ldr	r3, [pc, #92]	; (19ffc <ll_rl_rpa_update+0x17c>)
   19f9e:	eb03 0a02 	add.w	sl, r3, r2
   19fa2:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   19fa6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19faa:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   19fae:	4b15      	ldr	r3, [pc, #84]	; (1a004 <ll_rl_rpa_update+0x184>)
   19fb0:	449b      	add	fp, r3
   19fb2:	2206      	movs	r2, #6
   19fb4:	4669      	mov	r1, sp
   19fb6:	4658      	mov	r0, fp
   19fb8:	f7e6 f982 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19fbc:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   19fc0:	e7a4      	b.n	19f0c <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   19fc2:	4040      	eors	r0, r0
   19fc4:	f380 8811 	msr	BASEPRI, r0
   19fc8:	f04f 0004 	mov.w	r0, #4
   19fcc:	df02      	svc	2
	if (all) {
   19fce:	f1b8 0f00 	cmp.w	r8, #0
   19fd2:	d002      	beq.n	19fda <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   19fd4:	4b07      	ldr	r3, [pc, #28]	; (19ff4 <ll_rl_rpa_update+0x174>)
   19fd6:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   19fda:	f1b9 0f00 	cmp.w	r9, #0
   19fde:	d102      	bne.n	19fe6 <ll_rl_rpa_update+0x166>
}
   19fe0:	b005      	add	sp, #20
   19fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   19fe6:	f7fd ffc9 	bl	17f7c <radio_adv_is_enabled>
   19fea:	2800      	cmp	r0, #0
   19fec:	d0f8      	beq.n	19fe0 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   19fee:	f7ff fef1 	bl	19dd4 <rpa_adv_refresh>
}
   19ff2:	e7f5      	b.n	19fe0 <ll_rl_rpa_update+0x160>
   19ff4:	200029b8 	.word	0x200029b8
   19ff8:	20002b64 	.word	0x20002b64
   19ffc:	200018d8 	.word	0x200018d8
   1a000:	20001858 	.word	0x20001858
   1a004:	2000181c 	.word	0x2000181c

0001a008 <rpa_timeout>:
{
   1a008:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1a00a:	2001      	movs	r0, #1
   1a00c:	f7ff ff38 	bl	19e80 <ll_rl_rpa_update>
   1a010:	4b03      	ldr	r3, [pc, #12]	; (1a020 <rpa_timeout+0x18>)
   1a012:	681a      	ldr	r2, [r3, #0]
   1a014:	4903      	ldr	r1, [pc, #12]	; (1a024 <rpa_timeout+0x1c>)
   1a016:	4804      	ldr	r0, [pc, #16]	; (1a028 <rpa_timeout+0x20>)
   1a018:	f00f ff50 	bl	29ebc <k_delayed_work_submit_to_queue>
   1a01c:	bd08      	pop	{r3, pc}
   1a01e:	bf00      	nop
   1a020:	20002b64 	.word	0x20002b64
   1a024:	20002a30 	.word	0x20002a30
   1a028:	20002b78 	.word	0x20002b78

0001a02c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1a02c:	2008      	movs	r0, #8
   1a02e:	4770      	bx	lr

0001a030 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1a030:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1a032:	2000      	movs	r0, #0
   1a034:	f7ff fb74 	bl	19720 <rl_access_check>
   1a038:	b908      	cbnz	r0, 1a03e <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a03a:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1a03c:	bd08      	pop	{r3, pc}
	rl_clear();
   1a03e:	f7ff fa7d 	bl	1953c <rl_clear>
	return 0;
   1a042:	2000      	movs	r0, #0
   1a044:	bd08      	pop	{r3, pc}
	...

0001a048 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1a048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a04c:	b082      	sub	sp, #8
   1a04e:	4605      	mov	r5, r0
   1a050:	460c      	mov	r4, r1
   1a052:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a054:	2000      	movs	r0, #0
   1a056:	f7ff fb63 	bl	19720 <rl_access_check>
   1a05a:	b918      	cbnz	r0, 1a064 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a05c:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a05e:	b002      	add	sp, #8
   1a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a064:	462f      	mov	r7, r5
   1a066:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a06a:	f10d 0207 	add.w	r2, sp, #7
   1a06e:	4639      	mov	r1, r7
   1a070:	f7ff fca4 	bl	199bc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a074:	2807      	cmp	r0, #7
   1a076:	d801      	bhi.n	1a07c <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a078:	2012      	movs	r0, #18
   1a07a:	e7f0      	b.n	1a05e <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a07c:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a080:	f1b8 0f07 	cmp.w	r8, #7
   1a084:	d901      	bls.n	1a08a <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a086:	2007      	movs	r0, #7
   1a088:	e7e9      	b.n	1a05e <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a08a:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a1bc <ll_rl_add+0x174>
   1a08e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a092:	4443      	add	r3, r8
   1a094:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a098:	eb0a 0009 	add.w	r0, sl, r9
   1a09c:	2206      	movs	r2, #6
   1a09e:	4639      	mov	r1, r7
   1a0a0:	3001      	adds	r0, #1
   1a0a2:	f7e6 f90d 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a0a6:	782a      	ldrb	r2, [r5, #0]
   1a0a8:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a0ac:	f362 1386 	bfi	r3, r2, #6, #1
   1a0b0:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a0b4:	2110      	movs	r1, #16
   1a0b6:	4620      	mov	r0, r4
   1a0b8:	f7f5 f8f2 	bl	f2a0 <mem_nz>
   1a0bc:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a0c0:	f360 0382 	bfi	r3, r0, #2, #1
   1a0c4:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a0c8:	2110      	movs	r1, #16
   1a0ca:	4630      	mov	r0, r6
   1a0cc:	f7f5 f8e8 	bl	f2a0 <mem_nz>
   1a0d0:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a0d4:	f360 03c3 	bfi	r3, r0, #3, #1
   1a0d8:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a0dc:	f013 0f04 	tst.w	r3, #4
   1a0e0:	d016      	beq.n	1a110 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a0e2:	4933      	ldr	r1, [pc, #204]	; (1a1b0 <ll_rl_add+0x168>)
   1a0e4:	780a      	ldrb	r2, [r1, #0]
   1a0e6:	4653      	mov	r3, sl
   1a0e8:	444b      	add	r3, r9
   1a0ea:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a0ec:	4b31      	ldr	r3, [pc, #196]	; (1a1b4 <ll_rl_add+0x16c>)
   1a0ee:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a0f2:	1c53      	adds	r3, r2, #1
   1a0f4:	700b      	strb	r3, [r1, #0]
   1a0f6:	340f      	adds	r4, #15
   1a0f8:	4b2f      	ldr	r3, [pc, #188]	; (1a1b8 <ll_rl_add+0x170>)
   1a0fa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a0fe:	2210      	movs	r2, #16
   1a100:	e004      	b.n	1a10c <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a102:	7821      	ldrb	r1, [r4, #0]
   1a104:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a106:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a108:	3c01      	subs	r4, #1
   1a10a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a10c:	2a00      	cmp	r2, #0
   1a10e:	d1f8      	bne.n	1a102 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a110:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a114:	00d3      	lsls	r3, r2, #3
   1a116:	4a29      	ldr	r2, [pc, #164]	; (1a1bc <ll_rl_add+0x174>)
   1a118:	5cd3      	ldrb	r3, [r2, r3]
   1a11a:	f013 0f08 	tst.w	r3, #8
   1a11e:	d12f      	bne.n	1a180 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a120:	4e26      	ldr	r6, [pc, #152]	; (1a1bc <ll_rl_add+0x174>)
   1a122:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a126:	eb04 0208 	add.w	r2, r4, r8
   1a12a:	00d3      	lsls	r3, r2, #3
   1a12c:	3318      	adds	r3, #24
   1a12e:	2206      	movs	r2, #6
   1a130:	2100      	movs	r1, #0
   1a132:	18f0      	adds	r0, r6, r3
   1a134:	f010 f84c 	bl	2a1d0 <memset>
	rl[i].rpas_ready = 0;
   1a138:	4444      	add	r4, r8
   1a13a:	00e2      	lsls	r2, r4, #3
   1a13c:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a13e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a142:	f36f 1304 	bfc	r3, #4, #1
   1a146:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a148:	2200      	movs	r2, #0
   1a14a:	4639      	mov	r1, r7
   1a14c:	7828      	ldrb	r0, [r5, #0]
   1a14e:	f7ff fa0b 	bl	19568 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a152:	2807      	cmp	r0, #7
   1a154:	d822      	bhi.n	1a19c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a156:	4b1a      	ldr	r3, [pc, #104]	; (1a1c0 <ll_rl_add+0x178>)
   1a158:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a15c:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a160:	00e3      	lsls	r3, r4, #3
   1a162:	5cf2      	ldrb	r2, [r6, r3]
   1a164:	f042 0220 	orr.w	r2, r2, #32
   1a168:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a16a:	4914      	ldr	r1, [pc, #80]	; (1a1bc <ll_rl_add+0x174>)
   1a16c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a170:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a174:	5cca      	ldrb	r2, [r1, r3]
   1a176:	f042 0201 	orr.w	r2, r2, #1
   1a17a:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a17c:	2000      	movs	r0, #0
   1a17e:	e76e      	b.n	1a05e <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a180:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a184:	4443      	add	r3, r8
   1a186:	00da      	lsls	r2, r3, #3
   1a188:	4c0c      	ldr	r4, [pc, #48]	; (1a1bc <ll_rl_add+0x174>)
   1a18a:	4414      	add	r4, r2
   1a18c:	2210      	movs	r2, #16
   1a18e:	4631      	mov	r1, r6
   1a190:	1de0      	adds	r0, r4, #7
   1a192:	f7e6 f895 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1a196:	2300      	movs	r3, #0
   1a198:	6263      	str	r3, [r4, #36]	; 0x24
   1a19a:	e7c1      	b.n	1a120 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1a19c:	4a07      	ldr	r2, [pc, #28]	; (1a1bc <ll_rl_add+0x174>)
   1a19e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1a1a2:	00cb      	lsls	r3, r1, #3
   1a1a4:	5cd1      	ldrb	r1, [r2, r3]
   1a1a6:	f36f 1145 	bfc	r1, #5, #1
   1a1aa:	54d1      	strb	r1, [r2, r3]
   1a1ac:	e7dd      	b.n	1a16a <ll_rl_add+0x122>
   1a1ae:	bf00      	nop
   1a1b0:	2000184c 	.word	0x2000184c
   1a1b4:	20001850 	.word	0x20001850
   1a1b8:	20001858 	.word	0x20001858
   1a1bc:	200018d8 	.word	0x200018d8
   1a1c0:	20001a50 	.word	0x20001a50

0001a1c4 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1c8:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1a1ca:	2000      	movs	r0, #0
   1a1cc:	f7ff faa8 	bl	19720 <rl_access_check>
   1a1d0:	b910      	cbnz	r0, 1a1d8 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1d2:	200c      	movs	r0, #12
   1a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a1d8:	4626      	mov	r6, r4
   1a1da:	f816 0b01 	ldrb.w	r0, [r6], #1
   1a1de:	2200      	movs	r2, #0
   1a1e0:	4631      	mov	r1, r6
   1a1e2:	f7ff fbeb 	bl	199bc <ll_rl_find>
   1a1e6:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1a1e8:	2807      	cmp	r0, #7
   1a1ea:	d902      	bls.n	1a1f2 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a1ec:	2002      	movs	r0, #2
}
   1a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1a1f2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a1f6:	00d3      	lsls	r3, r2, #3
   1a1f8:	4a2d      	ldr	r2, [pc, #180]	; (1a2b0 <ll_rl_remove+0xec>)
   1a1fa:	5cd3      	ldrb	r3, [r2, r3]
   1a1fc:	f013 0f04 	tst.w	r3, #4
   1a200:	d03e      	beq.n	1a280 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a202:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a206:	00da      	lsls	r2, r3, #3
   1a208:	4b29      	ldr	r3, [pc, #164]	; (1a2b0 <ll_rl_remove+0xec>)
   1a20a:	4413      	add	r3, r2
   1a20c:	7ddf      	ldrb	r7, [r3, #23]
   1a20e:	4b29      	ldr	r3, [pc, #164]	; (1a2b4 <ll_rl_remove+0xf0>)
   1a210:	781b      	ldrb	r3, [r3, #0]
   1a212:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1a214:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1a218:	d02e      	beq.n	1a278 <ll_rl_remove+0xb4>
   1a21a:	4547      	cmp	r7, r8
   1a21c:	d02c      	beq.n	1a278 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1a21e:	4826      	ldr	r0, [pc, #152]	; (1a2b8 <ll_rl_remove+0xf4>)
   1a220:	2210      	movs	r2, #16
   1a222:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a226:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1a22a:	f7e6 f849 	bl	2c0 <memcpy>
				for (k = 0;
   1a22e:	2300      	movs	r3, #0
   1a230:	e001      	b.n	1a236 <ll_rl_remove+0x72>
				     k++) {
   1a232:	3301      	adds	r3, #1
   1a234:	b2db      	uxtb	r3, r3
				for (k = 0;
   1a236:	2b07      	cmp	r3, #7
   1a238:	d81e      	bhi.n	1a278 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1a23a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a23e:	00ca      	lsls	r2, r1, #3
   1a240:	491b      	ldr	r1, [pc, #108]	; (1a2b0 <ll_rl_remove+0xec>)
   1a242:	5c8a      	ldrb	r2, [r1, r2]
   1a244:	f012 0f01 	tst.w	r2, #1
   1a248:	d0f3      	beq.n	1a232 <ll_rl_remove+0x6e>
   1a24a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a24e:	00ca      	lsls	r2, r1, #3
   1a250:	4917      	ldr	r1, [pc, #92]	; (1a2b0 <ll_rl_remove+0xec>)
   1a252:	5c8a      	ldrb	r2, [r1, r2]
   1a254:	f012 0f04 	tst.w	r2, #4
   1a258:	d0eb      	beq.n	1a232 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1a25a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a25e:	00d1      	lsls	r1, r2, #3
   1a260:	4a13      	ldr	r2, [pc, #76]	; (1a2b0 <ll_rl_remove+0xec>)
   1a262:	440a      	add	r2, r1
   1a264:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1a266:	4590      	cmp	r8, r2
   1a268:	d1e3      	bne.n	1a232 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1a26a:	2128      	movs	r1, #40	; 0x28
   1a26c:	4a10      	ldr	r2, [pc, #64]	; (1a2b0 <ll_rl_remove+0xec>)
   1a26e:	fb01 2003 	mla	r0, r1, r3, r2
   1a272:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1a274:	4a11      	ldr	r2, [pc, #68]	; (1a2bc <ll_rl_remove+0xf8>)
   1a276:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1a278:	4a0e      	ldr	r2, [pc, #56]	; (1a2b4 <ll_rl_remove+0xf0>)
   1a27a:	7813      	ldrb	r3, [r2, #0]
   1a27c:	3b01      	subs	r3, #1
   1a27e:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a280:	2200      	movs	r2, #0
   1a282:	4631      	mov	r1, r6
   1a284:	7820      	ldrb	r0, [r4, #0]
   1a286:	f7ff f96f 	bl	19568 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a28a:	2807      	cmp	r0, #7
   1a28c:	d804      	bhi.n	1a298 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a28e:	4b0c      	ldr	r3, [pc, #48]	; (1a2c0 <ll_rl_remove+0xfc>)
   1a290:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a294:	23ff      	movs	r3, #255	; 0xff
   1a296:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1a298:	4a05      	ldr	r2, [pc, #20]	; (1a2b0 <ll_rl_remove+0xec>)
   1a29a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a29e:	00eb      	lsls	r3, r5, #3
   1a2a0:	5cd1      	ldrb	r1, [r2, r3]
   1a2a2:	f36f 0100 	bfc	r1, #0, #1
   1a2a6:	54d1      	strb	r1, [r2, r3]
		return 0;
   1a2a8:	2000      	movs	r0, #0
   1a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2ae:	bf00      	nop
   1a2b0:	200018d8 	.word	0x200018d8
   1a2b4:	2000184c 	.word	0x2000184c
   1a2b8:	20001858 	.word	0x20001858
   1a2bc:	20001850 	.word	0x20001850
   1a2c0:	20001a50 	.word	0x20001a50

0001a2c4 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1a2c4:	b510      	push	{r4, lr}
   1a2c6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a2c8:	795b      	ldrb	r3, [r3, #5]
   1a2ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a2ce:	2b40      	cmp	r3, #64	; 0x40
   1a2d0:	d000      	beq.n	1a2d4 <ll_rl_crpa_set+0x10>
   1a2d2:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1a2d4:	b119      	cbz	r1, 1a2de <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1a2d6:	2200      	movs	r2, #0
   1a2d8:	f7ff fb70 	bl	199bc <ll_rl_find>
   1a2dc:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a2de:	2a07      	cmp	r2, #7
   1a2e0:	d8f7      	bhi.n	1a2d2 <ll_rl_crpa_set+0xe>
   1a2e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a2e6:	00cb      	lsls	r3, r1, #3
   1a2e8:	4907      	ldr	r1, [pc, #28]	; (1a308 <ll_rl_crpa_set+0x44>)
   1a2ea:	5ccb      	ldrb	r3, [r1, r3]
   1a2ec:	f013 0f01 	tst.w	r3, #1
   1a2f0:	d0ef      	beq.n	1a2d2 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a2f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a2f6:	00d0      	lsls	r0, r2, #3
   1a2f8:	3018      	adds	r0, #24
   1a2fa:	2206      	movs	r2, #6
   1a2fc:	4621      	mov	r1, r4
   1a2fe:	4b02      	ldr	r3, [pc, #8]	; (1a308 <ll_rl_crpa_set+0x44>)
   1a300:	4418      	add	r0, r3
   1a302:	f7e5 ffdd 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1a306:	e7e4      	b.n	1a2d2 <ll_rl_crpa_set+0xe>
   1a308:	200018d8 	.word	0x200018d8

0001a30c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1a30c:	b538      	push	{r3, r4, r5, lr}
   1a30e:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a310:	4601      	mov	r1, r0
   1a312:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a316:	2200      	movs	r2, #0
   1a318:	f7ff fb50 	bl	199bc <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a31c:	2807      	cmp	r0, #7
   1a31e:	d901      	bls.n	1a324 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a320:	2002      	movs	r0, #2
   1a322:	bd38      	pop	{r3, r4, r5, pc}
   1a324:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a326:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a32a:	00d8      	lsls	r0, r3, #3
   1a32c:	3018      	adds	r0, #24
   1a32e:	2106      	movs	r1, #6
   1a330:	4b09      	ldr	r3, [pc, #36]	; (1a358 <ll_rl_crpa_get+0x4c>)
   1a332:	4418      	add	r0, r3
   1a334:	f7f4 ffb4 	bl	f2a0 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a338:	b908      	cbnz	r0, 1a33e <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a33a:	2002      	movs	r0, #2
}
   1a33c:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1a33e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a342:	00e1      	lsls	r1, r4, #3
   1a344:	3118      	adds	r1, #24
   1a346:	2206      	movs	r2, #6
   1a348:	4b03      	ldr	r3, [pc, #12]	; (1a358 <ll_rl_crpa_get+0x4c>)
   1a34a:	4419      	add	r1, r3
   1a34c:	4628      	mov	r0, r5
   1a34e:	f7e5 ffb7 	bl	2c0 <memcpy>
			return 0;
   1a352:	2000      	movs	r0, #0
   1a354:	bd38      	pop	{r3, r4, r5, pc}
   1a356:	bf00      	nop
   1a358:	200018d8 	.word	0x200018d8

0001a35c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1a35c:	b510      	push	{r4, lr}
   1a35e:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a360:	4601      	mov	r1, r0
   1a362:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a366:	2200      	movs	r2, #0
   1a368:	f7ff fb28 	bl	199bc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a36c:	2807      	cmp	r0, #7
   1a36e:	d901      	bls.n	1a374 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a370:	2002      	movs	r0, #2
}
   1a372:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a374:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a378:	00c2      	lsls	r2, r0, #3
   1a37a:	4b04      	ldr	r3, [pc, #16]	; (1a38c <ll_rl_lrpa_get+0x30>)
   1a37c:	4413      	add	r3, r2
   1a37e:	2206      	movs	r2, #6
   1a380:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a382:	4620      	mov	r0, r4
   1a384:	f7e5 ff9c 	bl	2c0 <memcpy>
		return 0;
   1a388:	2000      	movs	r0, #0
   1a38a:	bd10      	pop	{r4, pc}
   1a38c:	200018d8 	.word	0x200018d8

0001a390 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1a390:	b510      	push	{r4, lr}
   1a392:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1a394:	2000      	movs	r0, #0
   1a396:	f7ff f9c3 	bl	19720 <rl_access_check>
   1a39a:	b908      	cbnz	r0, 1a3a0 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a39c:	200c      	movs	r0, #12
   1a39e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1a3a0:	b11c      	cbz	r4, 1a3aa <ll_rl_enable+0x1a>
   1a3a2:	2c01      	cmp	r4, #1
   1a3a4:	d005      	beq.n	1a3b2 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1a3a6:	2012      	movs	r0, #18
	}

	return 0;
}
   1a3a8:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1a3aa:	2000      	movs	r0, #0
   1a3ac:	4b03      	ldr	r3, [pc, #12]	; (1a3bc <ll_rl_enable+0x2c>)
   1a3ae:	7018      	strb	r0, [r3, #0]
		break;
   1a3b0:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1a3b2:	2201      	movs	r2, #1
   1a3b4:	4b01      	ldr	r3, [pc, #4]	; (1a3bc <ll_rl_enable+0x2c>)
   1a3b6:	701a      	strb	r2, [r3, #0]
	return 0;
   1a3b8:	2000      	movs	r0, #0
		break;
   1a3ba:	bd10      	pop	{r4, pc}
   1a3bc:	20001a18 	.word	0x20001a18

0001a3c0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1a3c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a3c4:	fb03 f000 	mul.w	r0, r3, r0
   1a3c8:	4b01      	ldr	r3, [pc, #4]	; (1a3d0 <ll_rl_timeout_set+0x10>)
   1a3ca:	6018      	str	r0, [r3, #0]
   1a3cc:	4770      	bx	lr
   1a3ce:	bf00      	nop
   1a3d0:	20002b64 	.word	0x20002b64

0001a3d4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1a3d4:	b538      	push	{r3, r4, r5, lr}
   1a3d6:	4604      	mov	r4, r0
   1a3d8:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1a3da:	2000      	movs	r0, #0
   1a3dc:	f7ff f9a0 	bl	19720 <rl_access_check>
   1a3e0:	b908      	cbnz	r0, 1a3e6 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a3e2:	200c      	movs	r0, #12
   1a3e4:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a3e6:	4621      	mov	r1, r4
   1a3e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a3ec:	2200      	movs	r2, #0
   1a3ee:	f7ff fae5 	bl	199bc <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a3f2:	2807      	cmp	r0, #7
   1a3f4:	d901      	bls.n	1a3fa <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a3f6:	2002      	movs	r0, #2
   1a3f8:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1a3fa:	b11d      	cbz	r5, 1a404 <ll_priv_mode_set+0x30>
   1a3fc:	2d01      	cmp	r5, #1
   1a3fe:	d00b      	beq.n	1a418 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1a400:	2012      	movs	r0, #18
	}

	return 0;
}
   1a402:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1a404:	4a09      	ldr	r2, [pc, #36]	; (1a42c <ll_priv_mode_set+0x58>)
   1a406:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a40a:	00c3      	lsls	r3, r0, #3
   1a40c:	5cd1      	ldrb	r1, [r2, r3]
   1a40e:	f36f 1104 	bfc	r1, #4, #1
   1a412:	54d1      	strb	r1, [r2, r3]
	return 0;
   1a414:	2000      	movs	r0, #0
			break;
   1a416:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1a418:	4904      	ldr	r1, [pc, #16]	; (1a42c <ll_priv_mode_set+0x58>)
   1a41a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a41e:	00c3      	lsls	r3, r0, #3
   1a420:	5cca      	ldrb	r2, [r1, r3]
   1a422:	f042 0210 	orr.w	r2, r2, #16
   1a426:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a428:	2000      	movs	r0, #0
			break;
   1a42a:	bd38      	pop	{r3, r4, r5, pc}
   1a42c:	200018d8 	.word	0x200018d8

0001a430 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1a430:	b538      	push	{r3, r4, r5, lr}
   1a432:	4605      	mov	r5, r0
	wl_anon = 0;
   1a434:	2400      	movs	r4, #0
   1a436:	4b0e      	ldr	r3, [pc, #56]	; (1a470 <ll_filter_reset+0x40>)
   1a438:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1a43a:	f7ff f86b 	bl	19514 <wl_clear>

	rl_enable = 0;
   1a43e:	4b0d      	ldr	r3, [pc, #52]	; (1a474 <ll_filter_reset+0x44>)
   1a440:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a442:	4a0d      	ldr	r2, [pc, #52]	; (1a478 <ll_filter_reset+0x48>)
   1a444:	4b0d      	ldr	r3, [pc, #52]	; (1a47c <ll_filter_reset+0x4c>)
   1a446:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1a448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a44c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a450:	4b0b      	ldr	r3, [pc, #44]	; (1a480 <ll_filter_reset+0x50>)
   1a452:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1a456:	f7ff f871 	bl	1953c <rl_clear>
	if (init) {
   1a45a:	b91d      	cbnz	r5, 1a464 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1a45c:	4809      	ldr	r0, [pc, #36]	; (1a484 <ll_filter_reset+0x54>)
   1a45e:	f00f fcd3 	bl	29e08 <k_delayed_work_cancel>
   1a462:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a464:	4908      	ldr	r1, [pc, #32]	; (1a488 <ll_filter_reset+0x58>)
   1a466:	4807      	ldr	r0, [pc, #28]	; (1a484 <ll_filter_reset+0x54>)
   1a468:	f00f fcb0 	bl	29dcc <k_delayed_work_init>
   1a46c:	bd38      	pop	{r3, r4, r5, pc}
   1a46e:	bf00      	nop
   1a470:	200029c0 	.word	0x200029c0
   1a474:	20001a18 	.word	0x20001a18
   1a478:	000dbba0 	.word	0x000dbba0
   1a47c:	20002b64 	.word	0x20002b64
   1a480:	200029b8 	.word	0x200029b8
   1a484:	20002a30 	.word	0x20002a30
   1a488:	0001a009 	.word	0x0001a009

0001a48c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1a48c:	4800      	ldr	r0, [pc, #0]	; (1a490 <ll_adv_set_get+0x4>)
   1a48e:	4770      	bx	lr
   1a490:	20001ac4 	.word	0x20001ac4

0001a494 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a498:	b087      	sub	sp, #28
   1a49a:	4689      	mov	r9, r1
   1a49c:	4614      	mov	r4, r2
   1a49e:	461e      	mov	r6, r3
   1a4a0:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1a4a4:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1a4a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a4ac:	4b89      	ldr	r3, [pc, #548]	; (1a6d4 <ll_adv_params_set+0x240>)
   1a4ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a4b2:	9004      	str	r0, [sp, #16]
   1a4b4:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1a4b8:	f7fd fd60 	bl	17f7c <radio_adv_is_enabled>
   1a4bc:	9001      	str	r0, [sp, #4]
   1a4be:	b128      	cbz	r0, 1a4cc <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a4c0:	230c      	movs	r3, #12
   1a4c2:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1a4c4:	9801      	ldr	r0, [sp, #4]
   1a4c6:	b007      	add	sp, #28
   1a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1a4cc:	4b82      	ldr	r3, [pc, #520]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a4ce:	7a1a      	ldrb	r2, [r3, #8]
   1a4d0:	2101      	movs	r1, #1
   1a4d2:	f361 0202 	bfi	r2, r1, #0, #3
   1a4d6:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1a4d8:	2e04      	cmp	r6, #4
   1a4da:	d90f      	bls.n	1a4fc <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1a4dc:	f019 0f10 	tst.w	r9, #16
   1a4e0:	d071      	beq.n	1a5c6 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1a4e2:	4b7c      	ldr	r3, [pc, #496]	; (1a6d4 <ll_adv_params_set+0x240>)
   1a4e4:	689b      	ldr	r3, [r3, #8]
   1a4e6:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1a4e8:	f009 0303 	and.w	r3, r9, #3
   1a4ec:	aa06      	add	r2, sp, #24
   1a4ee:	4413      	add	r3, r2
   1a4f0:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1a4f4:	f019 0f08 	tst.w	r9, #8
   1a4f8:	d000      	beq.n	1a4fc <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1a4fa:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1a4fc:	2e01      	cmp	r6, #1
   1a4fe:	d071      	beq.n	1a5e4 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1a500:	4b75      	ldr	r3, [pc, #468]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a502:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1a504:	4a74      	ldr	r2, [pc, #464]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a506:	7813      	ldrb	r3, [r2, #0]
   1a508:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1a50c:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1a510:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1a514:	f361 03c4 	bfi	r3, r1, #3, #2
   1a518:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1a51a:	f7fd fd27 	bl	17f6c <radio_adv_data_get>
   1a51e:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a520:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1a524:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a528:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1a52c:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1a530:	ab06      	add	r3, sp, #24
   1a532:	441e      	add	r6, r3
   1a534:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1a538:	5d03      	ldrb	r3, [r0, r4]
   1a53a:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1a53e:	f36f 1304 	bfc	r3, #4, #1
   1a542:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1a544:	f003 030f 	and.w	r3, r3, #15
   1a548:	2b01      	cmp	r3, #1
   1a54a:	d94f      	bls.n	1a5ec <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1a54c:	5d03      	ldrb	r3, [r0, r4]
   1a54e:	f36f 1345 	bfc	r3, #5, #1
   1a552:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1a554:	4a60      	ldr	r2, [pc, #384]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a556:	7813      	ldrb	r3, [r2, #0]
   1a558:	f368 1346 	bfi	r3, r8, #5, #2
   1a55c:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a55e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a562:	2b40      	cmp	r3, #64	; 0x40
   1a564:	d047      	beq.n	1a5f6 <ll_adv_params_set+0x162>
   1a566:	2b60      	cmp	r3, #96	; 0x60
   1a568:	d045      	beq.n	1a5f6 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1a56a:	f008 0801 	and.w	r8, r8, #1
   1a56e:	5d3b      	ldrb	r3, [r7, r4]
   1a570:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a574:	f36f 13c7 	bfc	r3, #7, #1
   1a578:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a57a:	f003 030f 	and.w	r3, r3, #15
   1a57e:	2b01      	cmp	r3, #1
   1a580:	d044      	beq.n	1a60c <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1a582:	2b07      	cmp	r3, #7
   1a584:	d050      	beq.n	1a628 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1a586:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a58a:	b913      	cbnz	r3, 1a592 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1a58c:	2306      	movs	r3, #6
   1a58e:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1a592:	f7fd fcef 	bl	17f74 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a596:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1a59a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1a59e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1a5a2:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a5a4:	5c83      	ldrb	r3, [r0, r2]
   1a5a6:	2404      	movs	r4, #4
   1a5a8:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1a5ac:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1a5b0:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a5b4:	f36f 13c7 	bfc	r3, #7, #1
   1a5b8:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1a5ba:	784b      	ldrb	r3, [r1, #1]
   1a5bc:	2b00      	cmp	r3, #0
   1a5be:	d181      	bne.n	1a4c4 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1a5c0:	2306      	movs	r3, #6
   1a5c2:	704b      	strb	r3, [r1, #1]
   1a5c4:	e77e      	b.n	1a4c4 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1a5c6:	f009 0303 	and.w	r3, r9, #3
   1a5ca:	2b03      	cmp	r3, #3
   1a5cc:	d07c      	beq.n	1a6c8 <ll_adv_params_set+0x234>
   1a5ce:	f009 030c 	and.w	r3, r9, #12
   1a5d2:	2b0c      	cmp	r3, #12
   1a5d4:	d07b      	beq.n	1a6ce <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1a5d6:	4b40      	ldr	r3, [pc, #256]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a5d8:	7a1a      	ldrb	r2, [r3, #8]
   1a5da:	f365 0202 	bfi	r2, r5, #0, #3
   1a5de:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1a5e0:	2605      	movs	r6, #5
   1a5e2:	e78b      	b.n	1a4fc <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1a5e4:	2200      	movs	r2, #0
   1a5e6:	4b3c      	ldr	r3, [pc, #240]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a5e8:	60da      	str	r2, [r3, #12]
   1a5ea:	e78b      	b.n	1a504 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1a5ec:	5d03      	ldrb	r3, [r0, r4]
   1a5ee:	f043 0320 	orr.w	r3, r3, #32
   1a5f2:	5503      	strb	r3, [r0, r4]
   1a5f4:	e7ae      	b.n	1a554 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1a5f6:	4838      	ldr	r0, [pc, #224]	; (1a6d8 <ll_adv_params_set+0x244>)
   1a5f8:	7803      	ldrb	r3, [r0, #0]
   1a5fa:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a5fe:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1a602:	2206      	movs	r2, #6
   1a604:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a606:	f7e5 fe5b 	bl	2c0 <memcpy>
   1a60a:	e7ae      	b.n	1a56a <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1a60c:	5d3b      	ldrb	r3, [r7, r4]
   1a60e:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a612:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1a614:	2206      	movs	r2, #6
   1a616:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a618:	f10a 0008 	add.w	r0, sl, #8
   1a61c:	f7e5 fe50 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1a620:	230c      	movs	r3, #12
   1a622:	f88a 3001 	strb.w	r3, [sl, #1]
   1a626:	e7b4      	b.n	1a592 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1a628:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1a62c:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1a630:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1a634:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1a638:	f369 1287 	bfi	r2, r9, #6, #2
   1a63c:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1a640:	2200      	movs	r2, #0
   1a642:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1a646:	f019 0f20 	tst.w	r9, #32
   1a64a:	d10e      	bne.n	1a66a <ll_adv_params_set+0x1d6>
   1a64c:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a650:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1a654:	d109      	bne.n	1a66a <ll_adv_params_set+0x1d6>
   1a656:	2d04      	cmp	r5, #4
   1a658:	d007      	beq.n	1a66a <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1a65a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a65e:	f042 0201 	orr.w	r2, r2, #1
   1a662:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1a666:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1a66a:	f019 0f40 	tst.w	r9, #64	; 0x40
   1a66e:	d006      	beq.n	1a67e <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1a670:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a678:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1a67c:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1a67e:	1acb      	subs	r3, r1, r3
   1a680:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1a682:	2b02      	cmp	r3, #2
   1a684:	d916      	bls.n	1a6b4 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1a686:	1e58      	subs	r0, r3, #1
   1a688:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a68c:	f360 0205 	bfi	r2, r0, #0, #6
   1a690:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1a694:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1a698:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1a69c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a6a0:	f43f af77 	beq.w	1a592 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1a6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a6a6:	b16b      	cbz	r3, 1a6c4 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1a6a8:	781b      	ldrb	r3, [r3, #0]
   1a6aa:	2b7f      	cmp	r3, #127	; 0x7f
   1a6ac:	d006      	beq.n	1a6bc <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1a6ae:	f801 3c01 	strb.w	r3, [r1, #-1]
   1a6b2:	e76e      	b.n	1a592 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1a6b4:	2301      	movs	r3, #1
   1a6b6:	f88a 3001 	strb.w	r3, [sl, #1]
   1a6ba:	e7ed      	b.n	1a698 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1a6bc:	2300      	movs	r3, #0
   1a6be:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a6c0:	7013      	strb	r3, [r2, #0]
   1a6c2:	e7f4      	b.n	1a6ae <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1a6c4:	2300      	movs	r3, #0
   1a6c6:	e7f2      	b.n	1a6ae <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1a6c8:	2312      	movs	r3, #18
   1a6ca:	9301      	str	r3, [sp, #4]
   1a6cc:	e6fa      	b.n	1a4c4 <ll_adv_params_set+0x30>
   1a6ce:	2312      	movs	r3, #18
   1a6d0:	9301      	str	r3, [sp, #4]
   1a6d2:	e6f7      	b.n	1a4c4 <ll_adv_params_set+0x30>
   1a6d4:	0002e598 	.word	0x0002e598
   1a6d8:	20001ac4 	.word	0x20001ac4

0001a6dc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6e0:	4606      	mov	r6, r0
   1a6e2:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1a6e4:	f7fd fc42 	bl	17f6c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a6e8:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a6ec:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a6f0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a6f4:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a6f6:	5c83      	ldrb	r3, [r0, r2]
   1a6f8:	f003 030f 	and.w	r3, r3, #15
   1a6fc:	2b01      	cmp	r3, #1
   1a6fe:	d03e      	beq.n	1a77e <ll_adv_data_set+0xa2>
   1a700:	4604      	mov	r4, r0
   1a702:	2b07      	cmp	r3, #7
   1a704:	d03b      	beq.n	1a77e <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1a706:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a70a:	429d      	cmp	r5, r3
   1a70c:	d039      	beq.n	1a782 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a70e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a712:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a716:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a71a:	f814 e002 	ldrb.w	lr, [r4, r2]
   1a71e:	5ce0      	ldrb	r0, [r4, r3]
   1a720:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1a724:	f36f 1004 	bfc	r0, #4, #1
   1a728:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1a72a:	5ca0      	ldrb	r0, [r4, r2]
   1a72c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a730:	f814 e003 	ldrb.w	lr, [r4, r3]
   1a734:	f360 1e45 	bfi	lr, r0, #5, #1
   1a738:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1a73c:	5ca0      	ldrb	r0, [r4, r2]
   1a73e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a742:	fa5f fe8e 	uxtb.w	lr, lr
   1a746:	f360 1e86 	bfi	lr, r0, #6, #1
   1a74a:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1a74e:	5ca2      	ldrb	r2, [r4, r2]
   1a750:	09d2      	lsrs	r2, r2, #7
   1a752:	fa5f f08e 	uxtb.w	r0, lr
   1a756:	f362 10c7 	bfi	r0, r2, #7, #1
   1a75a:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1a75c:	2206      	movs	r2, #6
   1a75e:	3102      	adds	r1, #2
   1a760:	f108 0002 	add.w	r0, r8, #2
   1a764:	f7e5 fdac 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1a768:	4632      	mov	r2, r6
   1a76a:	4639      	mov	r1, r7
   1a76c:	f108 0008 	add.w	r0, r8, #8
   1a770:	f7e5 fda6 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a774:	3606      	adds	r6, #6
   1a776:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1a77a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1a782:	3501      	adds	r5, #1
   1a784:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a786:	2d02      	cmp	r5, #2
   1a788:	d1c1      	bne.n	1a70e <ll_adv_data_set+0x32>
			last = 0;
   1a78a:	2500      	movs	r5, #0
   1a78c:	e7bf      	b.n	1a70e <ll_adv_data_set+0x32>

0001a78e <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1a78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a792:	4606      	mov	r6, r0
   1a794:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1a796:	f7fd fbed 	bl	17f74 <radio_scan_data_get>
   1a79a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1a79c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1a7a0:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1a7a4:	429a      	cmp	r2, r3
   1a7a6:	d031      	beq.n	1a80c <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1a7a8:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1a7aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a7ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a7b2:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1a7b4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a7b8:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a7bc:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a7c0:	5ca0      	ldrb	r0, [r4, r2]
   1a7c2:	f04f 0e04 	mov.w	lr, #4
   1a7c6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1a7ca:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1a7ce:	f36f 1045 	bfc	r0, #5, #1
   1a7d2:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1a7d4:	5ce0      	ldrb	r0, [r4, r3]
   1a7d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a7da:	5ca3      	ldrb	r3, [r4, r2]
   1a7dc:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1a7e0:	f36f 13c7 	bfc	r3, #7, #1
   1a7e4:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1a7e6:	1db3      	adds	r3, r6, #6
   1a7e8:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1a7ec:	2206      	movs	r2, #6
   1a7ee:	3102      	adds	r1, #2
   1a7f0:	f108 0002 	add.w	r0, r8, #2
   1a7f4:	f7e5 fd64 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1a7f8:	4632      	mov	r2, r6
   1a7fa:	4639      	mov	r1, r7
   1a7fc:	f108 0008 	add.w	r0, r8, #8
   1a800:	f7e5 fd5e 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1a804:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1a80c:	1c5d      	adds	r5, r3, #1
   1a80e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a810:	2d02      	cmp	r5, #2
   1a812:	d1ca      	bne.n	1a7aa <ll_scan_data_set+0x1c>
			last = 0;
   1a814:	2500      	movs	r5, #0
   1a816:	e7c8      	b.n	1a7aa <ll_scan_data_set+0x1c>

0001a818 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1a818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a81c:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1a81e:	b120      	cbz	r0, 1a82a <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1a820:	f7fd fbac 	bl	17f7c <radio_adv_is_enabled>
   1a824:	b130      	cbz	r0, 1a834 <ll_adv_enable+0x1c>
		return 0;
   1a826:	2000      	movs	r0, #0
   1a828:	e001      	b.n	1a82e <ll_adv_enable+0x16>
		return radio_adv_disable();
   1a82a:	f7fe fb27 	bl	18e7c <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1a82e:	b002      	add	sp, #8
   1a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1a834:	f7fd fb9a 	bl	17f6c <radio_adv_data_get>
   1a838:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1a83a:	f7fd fb9b 	bl	17f74 <radio_scan_data_get>
			[radio_adv_data->last][0];
   1a83e:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1a842:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a846:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1a84a:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1a84c:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1a850:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a854:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a858:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1a85a:	5d2b      	ldrb	r3, [r5, r4]
   1a85c:	f003 030f 	and.w	r3, r3, #15
   1a860:	2b07      	cmp	r3, #7
   1a862:	d023      	beq.n	1a8ac <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1a864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1a938 <ll_adv_enable+0x120>
   1a868:	f898 0000 	ldrb.w	r0, [r8]
   1a86c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1a870:	f7ff f874 	bl	1995c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a874:	f898 3000 	ldrb.w	r3, [r8]
   1a878:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a87c:	2b40      	cmp	r3, #64	; 0x40
   1a87e:	d02b      	beq.n	1a8d8 <ll_adv_enable+0xc0>
   1a880:	2b60      	cmp	r3, #96	; 0x60
   1a882:	d029      	beq.n	1a8d8 <ll_adv_enable+0xc0>
		bool priv = false;
   1a884:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a886:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d03b      	beq.n	1a906 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a88e:	4b2a      	ldr	r3, [pc, #168]	; (1a938 <ll_adv_enable+0x120>)
   1a890:	7a18      	ldrb	r0, [r3, #8]
   1a892:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1a894:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a896:	f8cd 8000 	str.w	r8, [sp]
   1a89a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1a89e:	f002 0207 	and.w	r2, r2, #7
   1a8a2:	f000 0007 	and.w	r0, r0, #7
   1a8a6:	f7fe f90b 	bl	18ac0 <radio_adv_enable>
	return status;
   1a8aa:	e7c0      	b.n	1a82e <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1a8ac:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1a8ae:	78f3      	ldrb	r3, [r6, #3]
   1a8b0:	f013 0f01 	tst.w	r3, #1
   1a8b4:	d102      	bne.n	1a8bc <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a8b6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a8ba:	e7e8      	b.n	1a88e <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1a8bc:	5d28      	ldrb	r0, [r5, r4]
   1a8be:	2100      	movs	r1, #0
   1a8c0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a8c4:	f7fe fdf4 	bl	194b0 <ll_addr_get>
   1a8c8:	2206      	movs	r2, #6
   1a8ca:	4601      	mov	r1, r0
   1a8cc:	4638      	mov	r0, r7
   1a8ce:	f7e5 fcf7 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a8d2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a8d6:	e7da      	b.n	1a88e <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1a8d8:	4917      	ldr	r1, [pc, #92]	; (1a938 <ll_adv_enable+0x120>)
   1a8da:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a8de:	2200      	movs	r2, #0
   1a8e0:	09c0      	lsrs	r0, r0, #7
   1a8e2:	f7ff f86b 	bl	199bc <ll_rl_find>
   1a8e6:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1a8e8:	28ff      	cmp	r0, #255	; 0xff
   1a8ea:	d002      	beq.n	1a8f2 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1a8ec:	2000      	movs	r0, #0
   1a8ee:	f7ff fac7 	bl	19e80 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1a8f2:	4631      	mov	r1, r6
   1a8f4:	4640      	mov	r0, r8
   1a8f6:	f7ff f9f9 	bl	19cec <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1a8fa:	4639      	mov	r1, r7
   1a8fc:	4640      	mov	r0, r8
   1a8fe:	f7ff f9f5 	bl	19cec <ll_rl_pdu_adv_update>
			priv = true;
   1a902:	2301      	movs	r3, #1
   1a904:	e7c1      	b.n	1a88a <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a906:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a908:	5d28      	ldrb	r0, [r5, r4]
   1a90a:	2100      	movs	r1, #0
   1a90c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a910:	f7fe fdce 	bl	194b0 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a914:	2206      	movs	r2, #6
   1a916:	4601      	mov	r1, r0
   1a918:	4630      	mov	r0, r6
   1a91a:	f7e5 fcd1 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a91e:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a920:	5d28      	ldrb	r0, [r5, r4]
   1a922:	2100      	movs	r1, #0
   1a924:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a928:	f7fe fdc2 	bl	194b0 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a92c:	2206      	movs	r2, #6
   1a92e:	4601      	mov	r1, r0
   1a930:	4638      	mov	r0, r7
   1a932:	f7e5 fcc5 	bl	2c0 <memcpy>
   1a936:	e7aa      	b.n	1a88e <ll_adv_enable+0x76>
   1a938:	20001ac4 	.word	0x20001ac4

0001a93c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a93e:	4607      	mov	r7, r0
   1a940:	460e      	mov	r6, r1
   1a942:	4615      	mov	r5, r2
   1a944:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1a946:	f7fd fb31 	bl	17fac <radio_scan_is_enabled>
   1a94a:	b110      	cbz	r0, 1a952 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a94c:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1a94e:	4610      	mov	r0, r2
   1a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a952:	4602      	mov	r2, r0
	ll_scan.type = type;
   1a954:	4906      	ldr	r1, [pc, #24]	; (1a970 <ll_scan_params_set+0x34>)
   1a956:	790b      	ldrb	r3, [r1, #4]
   1a958:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1a95c:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1a95e:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1a960:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1a964:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1a968:	f360 1387 	bfi	r3, r0, #6, #2
   1a96c:	710b      	strb	r3, [r1, #4]
	return 0;
   1a96e:	e7ee      	b.n	1a94e <ll_scan_params_set+0x12>
   1a970:	20001ad4 	.word	0x20001ad4

0001a974 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1a974:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a976:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1a978:	b120      	cbz	r0, 1a984 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1a97a:	f7fd fb17 	bl	17fac <radio_scan_is_enabled>
   1a97e:	b128      	cbz	r0, 1a98c <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1a980:	2000      	movs	r0, #0
   1a982:	e001      	b.n	1a988 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1a984:	f7fe fbac 	bl	190e0 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1a988:	b005      	add	sp, #20
   1a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1a98c:	4c18      	ldr	r4, [pc, #96]	; (1a9f0 <ll_scan_enable+0x7c>)
   1a98e:	7920      	ldrb	r0, [r4, #4]
   1a990:	0980      	lsrs	r0, r0, #6
   1a992:	f7fe fffb 	bl	1998c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1a996:	7923      	ldrb	r3, [r4, #4]
   1a998:	f013 0f01 	tst.w	r3, #1
   1a99c:	d00d      	beq.n	1a9ba <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a99e:	7923      	ldrb	r3, [r4, #4]
   1a9a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1a9a4:	2b20      	cmp	r3, #32
   1a9a6:	d003      	beq.n	1a9b0 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a9a8:	2b30      	cmp	r3, #48	; 0x30
   1a9aa:	d001      	beq.n	1a9b0 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1a9ac:	2700      	movs	r7, #0
   1a9ae:	e005      	b.n	1a9bc <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1a9b0:	2000      	movs	r0, #0
   1a9b2:	f7ff fa65 	bl	19e80 <ll_rl_rpa_update>
		rpa_gen = 1;
   1a9b6:	2701      	movs	r7, #1
   1a9b8:	e000      	b.n	1a9bc <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1a9ba:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a9bc:	4d0c      	ldr	r5, [pc, #48]	; (1a9f0 <ll_scan_enable+0x7c>)
   1a9be:	792c      	ldrb	r4, [r5, #4]
   1a9c0:	f004 060f 	and.w	r6, r4, #15
   1a9c4:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1a9c8:	2100      	movs	r1, #0
   1a9ca:	4620      	mov	r0, r4
   1a9cc:	f7fe fd70 	bl	194b0 <ll_addr_get>
   1a9d0:	882b      	ldrh	r3, [r5, #0]
   1a9d2:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1a9d4:	792a      	ldrb	r2, [r5, #4]
   1a9d6:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a9d8:	25ff      	movs	r5, #255	; 0xff
   1a9da:	9503      	str	r5, [sp, #12]
   1a9dc:	9702      	str	r7, [sp, #8]
   1a9de:	9201      	str	r2, [sp, #4]
   1a9e0:	9100      	str	r1, [sp, #0]
   1a9e2:	4602      	mov	r2, r0
   1a9e4:	4621      	mov	r1, r4
   1a9e6:	4630      	mov	r0, r6
   1a9e8:	f7fe fa7a 	bl	18ee0 <radio_scan_enable>
	return status;
   1a9ec:	e7cc      	b.n	1a988 <ll_scan_enable+0x14>
   1a9ee:	bf00      	nop
   1a9f0:	20001ad4 	.word	0x20001ad4

0001a9f4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1a9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9f8:	b085      	sub	sp, #20
   1a9fa:	4607      	mov	r7, r0
   1a9fc:	4688      	mov	r8, r1
   1a9fe:	4615      	mov	r5, r2
   1aa00:	461e      	mov	r6, r3
   1aa02:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1aa06:	f7fd fad1 	bl	17fac <radio_scan_is_enabled>
   1aa0a:	b120      	cbz	r0, 1aa16 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1aa0c:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1aa0e:	4618      	mov	r0, r3
   1aa10:	b005      	add	sp, #20
   1aa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1aa16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1aa1a:	9300      	str	r3, [sp, #0]
   1aa1c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1aa20:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1aa24:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aa26:	4630      	mov	r0, r6
   1aa28:	f7fd fada 	bl	17fe0 <radio_connect_enable>
	if (status) {
   1aa2c:	4603      	mov	r3, r0
   1aa2e:	2800      	cmp	r0, #0
   1aa30:	d1ed      	bne.n	1aa0e <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1aa32:	4628      	mov	r0, r5
   1aa34:	f7fe ffaa 	bl	1998c <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1aa38:	b1c5      	cbz	r5, 1aa6c <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1aa3a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1aa3e:	1ea3      	subs	r3, r4, #2
   1aa40:	b2db      	uxtb	r3, r3
   1aa42:	2b01      	cmp	r3, #1
   1aa44:	d91f      	bls.n	1aa86 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1aa46:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1aa48:	2100      	movs	r1, #0
   1aa4a:	4620      	mov	r0, r4
   1aa4c:	f7fe fd30 	bl	194b0 <ll_addr_get>
   1aa50:	f8cd 900c 	str.w	r9, [sp, #12]
   1aa54:	9602      	str	r6, [sp, #8]
   1aa56:	9501      	str	r5, [sp, #4]
   1aa58:	f8cd 8000 	str.w	r8, [sp]
   1aa5c:	463b      	mov	r3, r7
   1aa5e:	4602      	mov	r2, r0
   1aa60:	4621      	mov	r1, r4
   1aa62:	2000      	movs	r0, #0
   1aa64:	f7fe fa3c 	bl	18ee0 <radio_scan_enable>
   1aa68:	4603      	mov	r3, r0
   1aa6a:	e7d0      	b.n	1aa0e <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1aa6c:	f7ff f936 	bl	19cdc <ctrl_rl_enabled>
   1aa70:	b910      	cbnz	r0, 1aa78 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1aa72:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1aa76:	e7e2      	b.n	1aa3e <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1aa78:	2200      	movs	r2, #0
   1aa7a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aa7c:	4630      	mov	r0, r6
   1aa7e:	f7fe ff9d 	bl	199bc <ll_rl_find>
   1aa82:	4681      	mov	r9, r0
   1aa84:	e7db      	b.n	1aa3e <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1aa86:	2000      	movs	r0, #0
   1aa88:	f7ff f9fa 	bl	19e80 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1aa8c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1aa90:	2601      	movs	r6, #1
   1aa92:	e7d9      	b.n	1aa48 <ll_create_connection+0x54>

0001aa94 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1aa94:	4b01      	ldr	r3, [pc, #4]	; (1aa9c <pool_id+0x8>)
   1aa96:	1ac0      	subs	r0, r0, r3
}
   1aa98:	1140      	asrs	r0, r0, #5
   1aa9a:	4770      	bx	lr
   1aa9c:	2000d0fc 	.word	0x2000d0fc

0001aaa0 <net_buf_pool_get>:
}
   1aaa0:	4b01      	ldr	r3, [pc, #4]	; (1aaa8 <net_buf_pool_get+0x8>)
   1aaa2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1aaa6:	4770      	bx	lr
   1aaa8:	2000d0fc 	.word	0x2000d0fc

0001aaac <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1aaac:	2300      	movs	r3, #0
   1aaae:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1aab0:	f100 0310 	add.w	r3, r0, #16
   1aab4:	6083      	str	r3, [r0, #8]
   1aab6:	4770      	bx	lr

0001aab8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1aab8:	b570      	push	{r4, r5, r6, lr}
   1aaba:	4605      	mov	r5, r0
	__asm__ volatile(
   1aabc:	f04f 0320 	mov.w	r3, #32
   1aac0:	f3ef 8611 	mrs	r6, BASEPRI
   1aac4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1aac8:	8a43      	ldrh	r3, [r0, #18]
   1aaca:	b373      	cbz	r3, 1ab2a <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1aacc:	8a02      	ldrh	r2, [r0, #16]
   1aace:	4293      	cmp	r3, r2
   1aad0:	d207      	bcs.n	1aae2 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1aad2:	2100      	movs	r1, #0
   1aad4:	f00e f83a 	bl	28b4c <k_queue_get>
			if (buf) {
   1aad8:	4604      	mov	r4, r0
   1aada:	b110      	cbz	r0, 1aae2 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1aadc:	f386 8811 	msr	BASEPRI, r6
   1aae0:	e019      	b.n	1ab16 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1aae2:	8a6b      	ldrh	r3, [r5, #18]
   1aae4:	1e5a      	subs	r2, r3, #1
   1aae6:	826a      	strh	r2, [r5, #18]
   1aae8:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1aaec:	69ea      	ldr	r2, [r5, #28]
   1aaee:	8a2c      	ldrh	r4, [r5, #16]
   1aaf0:	1ae4      	subs	r4, r4, r3
   1aaf2:	8aab      	ldrh	r3, [r5, #20]
   1aaf4:	3303      	adds	r3, #3
   1aaf6:	f023 0303 	bic.w	r3, r3, #3
   1aafa:	8ae9      	ldrh	r1, [r5, #22]
   1aafc:	3103      	adds	r1, #3
   1aafe:	f021 0103 	bic.w	r1, r1, #3
   1ab02:	440b      	add	r3, r1
   1ab04:	3310      	adds	r3, #16
   1ab06:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1ab0a:	4628      	mov	r0, r5
   1ab0c:	f7ff ffc2 	bl	1aa94 <pool_id>
   1ab10:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1ab12:	8aab      	ldrh	r3, [r5, #20]
   1ab14:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1ab16:	2301      	movs	r3, #1
   1ab18:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1ab1a:	2300      	movs	r3, #0
   1ab1c:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1ab1e:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1ab20:	4620      	mov	r0, r4
   1ab22:	f7ff ffc3 	bl	1aaac <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1ab26:	4620      	mov	r0, r4
   1ab28:	bd70      	pop	{r4, r5, r6, pc}
   1ab2a:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1ab2e:	f00e f80d 	bl	28b4c <k_queue_get>
	if (!buf) {
   1ab32:	4604      	mov	r4, r0
   1ab34:	2800      	cmp	r0, #0
   1ab36:	d1ee      	bne.n	1ab16 <net_buf_alloc+0x5e>
   1ab38:	e7f5      	b.n	1ab26 <net_buf_alloc+0x6e>

0001ab3a <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1ab3a:	b570      	push	{r4, r5, r6, lr}
   1ab3c:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1ab3e:	f00e f805 	bl	28b4c <k_queue_get>
	if (!buf) {
   1ab42:	4606      	mov	r6, r0
   1ab44:	b188      	cbz	r0, 1ab6a <net_buf_get+0x30>
   1ab46:	4604      	mov	r4, r0
   1ab48:	e009      	b.n	1ab5e <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ab4a:	2100      	movs	r1, #0
   1ab4c:	4628      	mov	r0, r5
   1ab4e:	f00d fffd 	bl	28b4c <k_queue_get>
   1ab52:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1ab54:	7963      	ldrb	r3, [r4, #5]
   1ab56:	f023 0301 	bic.w	r3, r3, #1
   1ab5a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ab5c:	4604      	mov	r4, r0
   1ab5e:	7963      	ldrb	r3, [r4, #5]
   1ab60:	f013 0f01 	tst.w	r3, #1
   1ab64:	d1f1      	bne.n	1ab4a <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ab66:	2300      	movs	r3, #0
   1ab68:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ab6a:	4630      	mov	r0, r6
   1ab6c:	bd70      	pop	{r4, r5, r6, pc}

0001ab6e <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ab6e:	f100 0310 	add.w	r3, r0, #16
   1ab72:	4419      	add	r1, r3
   1ab74:	6081      	str	r1, [r0, #8]
   1ab76:	4770      	bx	lr

0001ab78 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ab78:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ab7a:	460a      	mov	r2, r1
   1ab7c:	e004      	b.n	1ab88 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1ab7e:	7953      	ldrb	r3, [r2, #5]
   1ab80:	f043 0301 	orr.w	r3, r3, #1
   1ab84:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ab86:	4622      	mov	r2, r4
   1ab88:	6814      	ldr	r4, [r2, #0]
   1ab8a:	2c00      	cmp	r4, #0
   1ab8c:	d1f7      	bne.n	1ab7e <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1ab8e:	f00d ffc1 	bl	28b14 <k_queue_append_list>
   1ab92:	bd10      	pop	{r4, pc}

0001ab94 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ab94:	b538      	push	{r3, r4, r5, lr}
   1ab96:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1ab98:	e006      	b.n	1aba8 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab9a:	79a0      	ldrb	r0, [r4, #6]
   1ab9c:	f7ff ff80 	bl	1aaa0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1aba0:	4621      	mov	r1, r4
   1aba2:	f00d ffb1 	bl	28b08 <k_queue_prepend>
{
   1aba6:	462c      	mov	r4, r5
	while (buf) {
   1aba8:	b17c      	cbz	r4, 1abca <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1abaa:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1abac:	7923      	ldrb	r3, [r4, #4]
   1abae:	3b01      	subs	r3, #1
   1abb0:	b2db      	uxtb	r3, r3
   1abb2:	7123      	strb	r3, [r4, #4]
   1abb4:	b94b      	cbnz	r3, 1abca <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1abb6:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1abb8:	79a0      	ldrb	r0, [r4, #6]
   1abba:	f7ff ff71 	bl	1aaa0 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1abbe:	6983      	ldr	r3, [r0, #24]
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d0ea      	beq.n	1ab9a <net_buf_unref+0x6>
			pool->destroy(buf);
   1abc4:	4620      	mov	r0, r4
   1abc6:	4798      	blx	r3
   1abc8:	e7ed      	b.n	1aba6 <net_buf_unref+0x12>
   1abca:	bd38      	pop	{r3, r4, r5, pc}

0001abcc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1abcc:	7903      	ldrb	r3, [r0, #4]
   1abce:	3301      	adds	r3, #1
   1abd0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1abd2:	4770      	bx	lr

0001abd4 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1abd4:	e000      	b.n	1abd8 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1abd6:	4618      	mov	r0, r3
	while (buf->frags) {
   1abd8:	6803      	ldr	r3, [r0, #0]
   1abda:	2b00      	cmp	r3, #0
   1abdc:	d1fb      	bne.n	1abd6 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1abde:	4770      	bx	lr

0001abe0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1abe0:	b570      	push	{r4, r5, r6, lr}
   1abe2:	4604      	mov	r4, r0
   1abe4:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1abe6:	6806      	ldr	r6, [r0, #0]
   1abe8:	b11e      	cbz	r6, 1abf2 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1abea:	4608      	mov	r0, r1
   1abec:	f7ff fff2 	bl	1abd4 <net_buf_frag_last>
   1abf0:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1abf2:	6025      	str	r5, [r4, #0]
   1abf4:	bd70      	pop	{r4, r5, r6, pc}

0001abf6 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1abf6:	b538      	push	{r3, r4, r5, lr}
   1abf8:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1abfa:	b138      	cbz	r0, 1ac0c <net_buf_frag_add+0x16>
   1abfc:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1abfe:	f7ff ffe9 	bl	1abd4 <net_buf_frag_last>
   1ac02:	4629      	mov	r1, r5
   1ac04:	f7ff ffec 	bl	1abe0 <net_buf_frag_insert>

	return head;
   1ac08:	4620      	mov	r0, r4
}
   1ac0a:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1ac0c:	4608      	mov	r0, r1
   1ac0e:	f7ff ffdd 	bl	1abcc <net_buf_ref>
   1ac12:	bd38      	pop	{r3, r4, r5, pc}

0001ac14 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ac14:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1ac16:	b108      	cbz	r0, 1ac1c <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1ac18:	680a      	ldr	r2, [r1, #0]
   1ac1a:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1ac1c:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1ac1e:	2300      	movs	r3, #0
   1ac20:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1ac22:	4608      	mov	r0, r1
   1ac24:	f7ff ffb6 	bl	1ab94 <net_buf_unref>
#endif

	return next_frag;
}
   1ac28:	4620      	mov	r0, r4
   1ac2a:	bd10      	pop	{r4, pc}

0001ac2c <net_buf_simple_add>:
	return buf->data + buf->len;
   1ac2c:	6802      	ldr	r2, [r0, #0]
   1ac2e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ac30:	4419      	add	r1, r3
   1ac32:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ac34:	18d0      	adds	r0, r2, r3
   1ac36:	4770      	bx	lr

0001ac38 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1ac38:	b538      	push	{r3, r4, r5, lr}
   1ac3a:	460d      	mov	r5, r1
   1ac3c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ac3e:	4611      	mov	r1, r2
   1ac40:	f7ff fff4 	bl	1ac2c <net_buf_simple_add>
   1ac44:	4622      	mov	r2, r4
   1ac46:	4629      	mov	r1, r5
   1ac48:	f7e5 fb3a 	bl	2c0 <memcpy>
}
   1ac4c:	bd38      	pop	{r3, r4, r5, pc}

0001ac4e <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1ac4e:	b510      	push	{r4, lr}
   1ac50:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1ac52:	2101      	movs	r1, #1
   1ac54:	f7ff ffea 	bl	1ac2c <net_buf_simple_add>
	*u8 = val;
   1ac58:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1ac5a:	bd10      	pop	{r4, pc}

0001ac5c <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1ac5c:	b510      	push	{r4, lr}
   1ac5e:	b082      	sub	sp, #8
   1ac60:	ac02      	add	r4, sp, #8
   1ac62:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ac66:	2102      	movs	r1, #2
   1ac68:	f7ff ffe0 	bl	1ac2c <net_buf_simple_add>
   1ac6c:	2202      	movs	r2, #2
   1ac6e:	4621      	mov	r1, r4
   1ac70:	f7e5 fb26 	bl	2c0 <memcpy>
}
   1ac74:	b002      	add	sp, #8
   1ac76:	bd10      	pop	{r4, pc}

0001ac78 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1ac78:	b510      	push	{r4, lr}
   1ac7a:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1ac7c:	0a0b      	lsrs	r3, r1, #8
   1ac7e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1ac82:	ac02      	add	r4, sp, #8
   1ac84:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ac88:	2102      	movs	r1, #2
   1ac8a:	f7ff ffcf 	bl	1ac2c <net_buf_simple_add>
   1ac8e:	2202      	movs	r2, #2
   1ac90:	4621      	mov	r1, r4
   1ac92:	f7e5 fb15 	bl	2c0 <memcpy>
}
   1ac96:	b002      	add	sp, #8
   1ac98:	bd10      	pop	{r4, pc}

0001ac9a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ac9a:	6803      	ldr	r3, [r0, #0]
   1ac9c:	1a5b      	subs	r3, r3, r1
   1ac9e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1aca0:	8882      	ldrh	r2, [r0, #4]
   1aca2:	4411      	add	r1, r2
   1aca4:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1aca6:	4618      	mov	r0, r3
   1aca8:	4770      	bx	lr

0001acaa <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1acaa:	b510      	push	{r4, lr}
   1acac:	b082      	sub	sp, #8
   1acae:	ac02      	add	r4, sp, #8
   1acb0:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1acb4:	2102      	movs	r1, #2
   1acb6:	f7ff fff0 	bl	1ac9a <net_buf_simple_push>
   1acba:	2202      	movs	r2, #2
   1acbc:	4621      	mov	r1, r4
   1acbe:	f7e5 faff 	bl	2c0 <memcpy>
}
   1acc2:	b002      	add	sp, #8
   1acc4:	bd10      	pop	{r4, pc}

0001acc6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1acc6:	8883      	ldrh	r3, [r0, #4]
   1acc8:	1a5b      	subs	r3, r3, r1
   1acca:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1accc:	6803      	ldr	r3, [r0, #0]
   1acce:	4419      	add	r1, r3
   1acd0:	6001      	str	r1, [r0, #0]
}
   1acd2:	4608      	mov	r0, r1
   1acd4:	4770      	bx	lr

0001acd6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1acd6:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1acd8:	6803      	ldr	r3, [r0, #0]
   1acda:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1acdc:	2101      	movs	r1, #1
   1acde:	f7ff fff2 	bl	1acc6 <net_buf_simple_pull>

	return val;
}
   1ace2:	4620      	mov	r0, r4
   1ace4:	bd10      	pop	{r4, pc}

0001ace6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1ace6:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1ace8:	6803      	ldr	r3, [r0, #0]
   1acea:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1acec:	2102      	movs	r1, #2
   1acee:	f7ff ffea 	bl	1acc6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1acf2:	4620      	mov	r0, r4
   1acf4:	bd10      	pop	{r4, pc}

0001acf6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1acf6:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1acfa:	1a18      	subs	r0, r3, r0
   1acfc:	4770      	bx	lr

0001acfe <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1acfe:	b538      	push	{r3, r4, r5, lr}
   1ad00:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ad02:	88c4      	ldrh	r4, [r0, #6]
   1ad04:	f7ff fff7 	bl	1acf6 <net_buf_simple_headroom>
   1ad08:	1a20      	subs	r0, r4, r0
   1ad0a:	88ab      	ldrh	r3, [r5, #4]
}
   1ad0c:	1ac0      	subs	r0, r0, r3
   1ad0e:	bd38      	pop	{r3, r4, r5, pc}

0001ad10 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1ad10:	b510      	push	{r4, lr}
   1ad12:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1ad14:	6883      	ldr	r3, [r0, #8]
   1ad16:	b18b      	cbz	r3, 1ad3c <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1ad18:	b1b1      	cbz	r1, 1ad48 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1ad1a:	68a3      	ldr	r3, [r4, #8]
   1ad1c:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1ad1e:	781b      	ldrb	r3, [r3, #0]
   1ad20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1ad24:	2b60      	cmp	r3, #96	; 0x60
   1ad26:	d01d      	beq.n	1ad64 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1ad28:	4b18      	ldr	r3, [pc, #96]	; (1ad8c <processing_data+0x7c>)
   1ad2a:	6a1a      	ldr	r2, [r3, #32]
   1ad2c:	3201      	adds	r2, #1
   1ad2e:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1ad30:	68da      	ldr	r2, [r3, #12]
   1ad32:	3201      	adds	r2, #1
   1ad34:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1ad36:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1ad38:	bb18      	cbnz	r0, 1ad82 <processing_data+0x72>
   1ad3a:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1ad3c:	4a13      	ldr	r2, [pc, #76]	; (1ad8c <processing_data+0x7c>)
   1ad3e:	6813      	ldr	r3, [r2, #0]
   1ad40:	3301      	adds	r3, #1
   1ad42:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1ad44:	2002      	movs	r0, #2
   1ad46:	e7f7      	b.n	1ad38 <processing_data+0x28>
	return pkt->iface;
   1ad48:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1ad4a:	6843      	ldr	r3, [r0, #4]
   1ad4c:	681b      	ldr	r3, [r3, #0]
   1ad4e:	4621      	mov	r1, r4
   1ad50:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1ad52:	2801      	cmp	r0, #1
   1ad54:	d0e1      	beq.n	1ad1a <processing_data+0xa>
			if (ret == NET_DROP) {
   1ad56:	2802      	cmp	r0, #2
   1ad58:	d1ee      	bne.n	1ad38 <processing_data+0x28>
   1ad5a:	4a0c      	ldr	r2, [pc, #48]	; (1ad8c <processing_data+0x7c>)
   1ad5c:	6813      	ldr	r3, [r2, #0]
   1ad5e:	3301      	adds	r3, #1
   1ad60:	6013      	str	r3, [r2, #0]
   1ad62:	e7e9      	b.n	1ad38 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1ad64:	4a09      	ldr	r2, [pc, #36]	; (1ad8c <processing_data+0x7c>)
   1ad66:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1ad68:	3301      	adds	r3, #1
   1ad6a:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1ad6c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ad70:	220a      	movs	r2, #10
   1ad72:	f362 03c6 	bfi	r3, r2, #3, #4
   1ad76:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1ad7a:	4620      	mov	r0, r4
   1ad7c:	f006 fd1e 	bl	217bc <net_ipv6_process_pkt>
   1ad80:	e7da      	b.n	1ad38 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1ad82:	4620      	mov	r0, r4
   1ad84:	f002 fc75 	bl	1d672 <net_pkt_unref>
		break;
	}
}
   1ad88:	e7d7      	b.n	1ad3a <processing_data+0x2a>
   1ad8a:	bf00      	nop
   1ad8c:	20002a58 	.word	0x20002a58

0001ad90 <net_rx_thread>:

static void net_rx_thread(void)
{
   1ad90:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1ad92:	4c16      	ldr	r4, [pc, #88]	; (1adec <net_rx_thread+0x5c>)
   1ad94:	4620      	mov	r0, r4
   1ad96:	f001 faaf 	bl	1c2f8 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ad9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad9e:	4620      	mov	r0, r4
   1ada0:	f00e fa56 	bl	29250 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1ada4:	f001 faee 	bl	1c384 <net_if_post_init>
   1ada8:	e010      	b.n	1adcc <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1adaa:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1adac:	2200      	movs	r2, #0
   1adae:	e002      	b.n	1adb6 <net_rx_thread+0x26>
		bytes += buf->len;
   1adb0:	8999      	ldrh	r1, [r3, #12]
   1adb2:	440a      	add	r2, r1
		buf = buf->frags;
   1adb4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	d1fa      	bne.n	1adb0 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1adba:	490d      	ldr	r1, [pc, #52]	; (1adf0 <net_rx_thread+0x60>)
   1adbc:	688b      	ldr	r3, [r1, #8]
   1adbe:	441a      	add	r2, r3
   1adc0:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1adc2:	2100      	movs	r1, #0
   1adc4:	f7ff ffa4 	bl	1ad10 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1adc8:	f00e f8d6 	bl	28f78 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1adcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1add0:	4808      	ldr	r0, [pc, #32]	; (1adf4 <net_rx_thread+0x64>)
   1add2:	f00d febb 	bl	28b4c <k_queue_get>
	for (i = 0; i < size; i++) {
   1add6:	2300      	movs	r3, #0
   1add8:	f240 52db 	movw	r2, #1499	; 0x5db
   1addc:	4293      	cmp	r3, r2
   1adde:	d8e4      	bhi.n	1adaa <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1ade0:	4a05      	ldr	r2, [pc, #20]	; (1adf8 <net_rx_thread+0x68>)
   1ade2:	5cd2      	ldrb	r2, [r2, r3]
   1ade4:	2aaa      	cmp	r2, #170	; 0xaa
   1ade6:	d1e0      	bne.n	1adaa <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1ade8:	3301      	adds	r3, #1
   1adea:	e7f5      	b.n	1add8 <net_rx_thread+0x48>
   1adec:	2000d094 	.word	0x2000d094
   1adf0:	20002a58 	.word	0x20002a58
   1adf4:	20001adc 	.word	0x20001adc
   1adf8:	20004760 	.word	0x20004760

0001adfc <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1adfc:	b500      	push	{lr}
   1adfe:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1ae00:	480b      	ldr	r0, [pc, #44]	; (1ae30 <init_rx_queue+0x34>)
   1ae02:	f00d fe48 	bl	28a96 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1ae06:	2300      	movs	r3, #0
   1ae08:	9305      	str	r3, [sp, #20]
   1ae0a:	2201      	movs	r2, #1
   1ae0c:	9204      	str	r2, [sp, #16]
   1ae0e:	f06f 0207 	mvn.w	r2, #7
   1ae12:	9203      	str	r2, [sp, #12]
   1ae14:	9302      	str	r3, [sp, #8]
   1ae16:	9301      	str	r3, [sp, #4]
   1ae18:	9300      	str	r3, [sp, #0]
   1ae1a:	4b06      	ldr	r3, [pc, #24]	; (1ae34 <init_rx_queue+0x38>)
   1ae1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1ae20:	4905      	ldr	r1, [pc, #20]	; (1ae38 <init_rx_queue+0x3c>)
   1ae22:	4806      	ldr	r0, [pc, #24]	; (1ae3c <init_rx_queue+0x40>)
   1ae24:	f00e fc80 	bl	29728 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1ae28:	b007      	add	sp, #28
   1ae2a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae2e:	bf00      	nop
   1ae30:	20001adc 	.word	0x20001adc
   1ae34:	0001ad91 	.word	0x0001ad91
   1ae38:	20004760 	.word	0x20004760
   1ae3c:	20001aec 	.word	0x20001aec

0001ae40 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1ae40:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1ae42:	f002 ffb2 	bl	1ddaa <net_pkt_init>

	net_context_init();
   1ae46:	f002 faf1 	bl	1d42c <net_context_init>
	net_icmpv6_init();
   1ae4a:	f004 fa0b 	bl	1f264 <net_icmpv6_init>
	net_ipv6_init();
   1ae4e:	f006 fe89 	bl	21b64 <net_ipv6_init>
	net_conn_init();
   1ae52:	f00a fb55 	bl	25500 <net_conn_init>
	net_udp_init();
   1ae56:	f008 fa6b 	bl	23330 <net_udp_init>
	net_tcp_init();
   1ae5a:	f008 fc4f 	bl	236fc <net_tcp_init>
	net_route_init();
   1ae5e:	f007 ffca 	bl	22df6 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1ae62:	f008 f8b3 	bl	22fcc <net_mgmt_event_init>

	init_rx_queue();
   1ae66:	f7ff ffc9 	bl	1adfc <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1ae6a:	2000      	movs	r0, #0
   1ae6c:	bd08      	pop	{r3, pc}
	...

0001ae70 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1ae70:	2800      	cmp	r0, #0
   1ae72:	f000 80bc 	beq.w	1afee <net_send_data+0x17e>
{
   1ae76:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae78:	b091      	sub	sp, #68	; 0x44
   1ae7a:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1ae7c:	6883      	ldr	r3, [r0, #8]
   1ae7e:	2b00      	cmp	r3, #0
   1ae80:	f000 80b8 	beq.w	1aff4 <net_send_data+0x184>
	return pkt->iface;
   1ae84:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1ae86:	2b00      	cmp	r3, #0
   1ae88:	f000 80b7 	beq.w	1affa <net_send_data+0x18a>
	return pkt->family;
   1ae8c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1ae90:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1ae94:	2b0a      	cmp	r3, #10
   1ae96:	d103      	bne.n	1aea0 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1ae98:	4a59      	ldr	r2, [pc, #356]	; (1b000 <net_send_data+0x190>)
   1ae9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ae9c:	3301      	adds	r3, #1
   1ae9e:	6293      	str	r3, [r2, #40]	; 0x28
   1aea0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1aea4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1aea8:	2b0a      	cmp	r3, #10
   1aeaa:	d00b      	beq.n	1aec4 <net_send_data+0x54>
	return 0;
   1aeac:	2000      	movs	r0, #0
	if (status < 0) {
   1aeae:	2800      	cmp	r0, #0
   1aeb0:	db06      	blt.n	1aec0 <net_send_data+0x50>
	} else if (status > 0) {
   1aeb2:	f340 8091 	ble.w	1afd8 <net_send_data+0x168>
		processing_data(pkt, true);
   1aeb6:	2101      	movs	r1, #1
   1aeb8:	4620      	mov	r0, r4
   1aeba:	f7ff ff29 	bl	1ad10 <processing_data>
		return 0;
   1aebe:	2000      	movs	r0, #0
}
   1aec0:	b011      	add	sp, #68	; 0x44
   1aec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1aec4:	68a3      	ldr	r3, [r4, #8]
   1aec6:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1aec8:	3518      	adds	r5, #24
   1aeca:	f004 fd93 	bl	1f9f4 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1aece:	2210      	movs	r2, #16
   1aed0:	4601      	mov	r1, r0
   1aed2:	4628      	mov	r0, r5
   1aed4:	f00f f8e8 	bl	2a0a8 <memcmp>
   1aed8:	2800      	cmp	r0, #0
   1aeda:	d07a      	beq.n	1afd2 <net_send_data+0x162>
   1aedc:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1aede:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1aee0:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1aee4:	b9ab      	cbnz	r3, 1af12 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1aee6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d141      	bne.n	1af70 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1aeec:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1aeee:	2b00      	cmp	r3, #0
   1aef0:	d140      	bne.n	1af74 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1aef2:	68c2      	ldr	r2, [r0, #12]
   1aef4:	0a13      	lsrs	r3, r2, #8
   1aef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1aefa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1aefe:	0211      	lsls	r1, r2, #8
   1af00:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1af04:	430b      	orrs	r3, r1
   1af06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af0a:	2b01      	cmp	r3, #1
   1af0c:	d034      	beq.n	1af78 <net_send_data+0x108>
   1af0e:	2300      	movs	r3, #0
   1af10:	e000      	b.n	1af14 <net_send_data+0xa4>
   1af12:	2300      	movs	r3, #0
   1af14:	b393      	cbz	r3, 1af7c <net_send_data+0x10c>
   1af16:	68a3      	ldr	r3, [r4, #8]
   1af18:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1af1c:	ae0c      	add	r6, sp, #48	; 0x30
   1af1e:	4675      	mov	r5, lr
   1af20:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1af24:	6869      	ldr	r1, [r5, #4]
   1af26:	68aa      	ldr	r2, [r5, #8]
   1af28:	68eb      	ldr	r3, [r5, #12]
   1af2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1af2c:	ab10      	add	r3, sp, #64	; 0x40
   1af2e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1af32:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1af36:	af08      	add	r7, sp, #32
   1af38:	4673      	mov	r3, lr
   1af3a:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1af3e:	6859      	ldr	r1, [r3, #4]
   1af40:	689a      	ldr	r2, [r3, #8]
   1af42:	68db      	ldr	r3, [r3, #12]
   1af44:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1af46:	af08      	add	r7, sp, #32
   1af48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1af4a:	f8ce 0008 	str.w	r0, [lr, #8]
   1af4e:	6069      	str	r1, [r5, #4]
   1af50:	60aa      	str	r2, [r5, #8]
   1af52:	60eb      	str	r3, [r5, #12]
   1af54:	68a3      	ldr	r3, [r4, #8]
   1af56:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1af58:	ad04      	add	r5, sp, #16
   1af5a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1af5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1af62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1af64:	61b8      	str	r0, [r7, #24]
   1af66:	61f9      	str	r1, [r7, #28]
   1af68:	623a      	str	r2, [r7, #32]
   1af6a:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1af6c:	2001      	movs	r0, #1
   1af6e:	e79e      	b.n	1aeae <net_send_data+0x3e>
   1af70:	2300      	movs	r3, #0
   1af72:	e7cf      	b.n	1af14 <net_send_data+0xa4>
   1af74:	2300      	movs	r3, #0
   1af76:	e7cd      	b.n	1af14 <net_send_data+0xa4>
   1af78:	2301      	movs	r3, #1
   1af7a:	e7cb      	b.n	1af14 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1af7c:	2100      	movs	r1, #0
   1af7e:	f000 f9c5 	bl	1b30c <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1af82:	2800      	cmp	r0, #0
   1af84:	d1c7      	bne.n	1af16 <net_send_data+0xa6>
   1af86:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1af88:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1af8a:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af8e:	b99a      	cbnz	r2, 1afb8 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1af90:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1af92:	b9aa      	cbnz	r2, 1afc0 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af94:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1af96:	b9aa      	cbnz	r2, 1afc4 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1af98:	68da      	ldr	r2, [r3, #12]
   1af9a:	0a13      	lsrs	r3, r2, #8
   1af9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1afa0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1afa4:	0211      	lsls	r1, r2, #8
   1afa6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1afaa:	430b      	orrs	r3, r1
   1afac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1afb0:	2b01      	cmp	r3, #1
   1afb2:	d009      	beq.n	1afc8 <net_send_data+0x158>
   1afb4:	2300      	movs	r3, #0
   1afb6:	e000      	b.n	1afba <net_send_data+0x14a>
   1afb8:	2300      	movs	r3, #0
   1afba:	b93b      	cbnz	r3, 1afcc <net_send_data+0x15c>
	return 0;
   1afbc:	2000      	movs	r0, #0
   1afbe:	e776      	b.n	1aeae <net_send_data+0x3e>
   1afc0:	2300      	movs	r3, #0
   1afc2:	e7fa      	b.n	1afba <net_send_data+0x14a>
   1afc4:	2300      	movs	r3, #0
   1afc6:	e7f8      	b.n	1afba <net_send_data+0x14a>
   1afc8:	2301      	movs	r3, #1
   1afca:	e7f6      	b.n	1afba <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1afcc:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1afd0:	e76d      	b.n	1aeae <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1afd2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1afd6:	e76a      	b.n	1aeae <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1afd8:	4621      	mov	r1, r4
   1afda:	6960      	ldr	r0, [r4, #20]
   1afdc:	f000 ffe0 	bl	1bfa0 <net_if_send_data>
   1afe0:	2802      	cmp	r0, #2
   1afe2:	d001      	beq.n	1afe8 <net_send_data+0x178>
	return 0;
   1afe4:	2000      	movs	r0, #0
   1afe6:	e76b      	b.n	1aec0 <net_send_data+0x50>
		return -EIO;
   1afe8:	f06f 0004 	mvn.w	r0, #4
   1afec:	e768      	b.n	1aec0 <net_send_data+0x50>
		return -ENODATA;
   1afee:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1aff2:	4770      	bx	lr
   1aff4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1aff8:	e762      	b.n	1aec0 <net_send_data+0x50>
		return -EINVAL;
   1affa:	f06f 0015 	mvn.w	r0, #21
   1affe:	e75f      	b.n	1aec0 <net_send_data+0x50>
   1b000:	20002a58 	.word	0x20002a58

0001b004 <net_recv_data>:
{
   1b004:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1b006:	688b      	ldr	r3, [r1, #8]
   1b008:	b19b      	cbz	r3, 1b032 <net_recv_data+0x2e>
   1b00a:	f3bf 8f5b 	dmb	ish
   1b00e:	68c3      	ldr	r3, [r0, #12]
   1b010:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b014:	f013 0f01 	tst.w	r3, #1
   1b018:	d00e      	beq.n	1b038 <net_recv_data+0x34>
	pkt->iface = iface;
   1b01a:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b01c:	7d43      	ldrb	r3, [r0, #21]
   1b01e:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b022:	7d43      	ldrb	r3, [r0, #21]
   1b024:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1b028:	4805      	ldr	r0, [pc, #20]	; (1b040 <net_recv_data+0x3c>)
   1b02a:	f00d fd67 	bl	28afc <k_queue_append>
	return 0;
   1b02e:	2000      	movs	r0, #0
   1b030:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1b032:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b036:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1b038:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1b03c:	bd08      	pop	{r3, pc}
   1b03e:	bf00      	nop
   1b040:	20001adc 	.word	0x20001adc

0001b044 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1b044:	2302      	movs	r3, #2
   1b046:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1b04a:	4770      	bx	lr

0001b04c <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1b04c:	2300      	movs	r3, #0
   1b04e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b052:	4770      	bx	lr

0001b054 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b054:	2300      	movs	r3, #0
   1b056:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b05a:	4770      	bx	lr

0001b05c <ipv6_addr_find>:
{
   1b05c:	b570      	push	{r4, r5, r6, lr}
   1b05e:	4605      	mov	r5, r0
   1b060:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b062:	2400      	movs	r4, #0
   1b064:	e000      	b.n	1b068 <ipv6_addr_find+0xc>
   1b066:	3401      	adds	r4, #1
   1b068:	2c02      	cmp	r4, #2
   1b06a:	dc19      	bgt.n	1b0a0 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b06c:	236c      	movs	r3, #108	; 0x6c
   1b06e:	fb03 5304 	mla	r3, r3, r4, r5
   1b072:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b076:	2b00      	cmp	r3, #0
   1b078:	d0f5      	beq.n	1b066 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b07a:	216c      	movs	r1, #108	; 0x6c
   1b07c:	fb01 f104 	mul.w	r1, r1, r4
   1b080:	3120      	adds	r1, #32
   1b082:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b084:	2210      	movs	r2, #16
   1b086:	4411      	add	r1, r2
   1b088:	4630      	mov	r0, r6
   1b08a:	f00f f80d 	bl	2a0a8 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b08e:	2800      	cmp	r0, #0
   1b090:	d1e9      	bne.n	1b066 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b092:	206c      	movs	r0, #108	; 0x6c
   1b094:	fb00 f004 	mul.w	r0, r0, r4
   1b098:	3020      	adds	r0, #32
   1b09a:	4428      	add	r0, r5
   1b09c:	300c      	adds	r0, #12
   1b09e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b0a0:	2000      	movs	r0, #0
}
   1b0a2:	bd70      	pop	{r4, r5, r6, pc}

0001b0a4 <ipv6_prefix_find>:
{
   1b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0a6:	4605      	mov	r5, r0
   1b0a8:	460e      	mov	r6, r1
   1b0aa:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b0ac:	2400      	movs	r4, #0
   1b0ae:	e000      	b.n	1b0b2 <ipv6_prefix_find+0xe>
   1b0b0:	3401      	adds	r4, #1
   1b0b2:	2c01      	cmp	r4, #1
   1b0b4:	dc21      	bgt.n	1b0fa <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b0b6:	236c      	movs	r3, #108	; 0x6c
   1b0b8:	fb03 5304 	mla	r3, r3, r4, r5
   1b0bc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b0c0:	2b00      	cmp	r3, #0
   1b0c2:	d0f5      	beq.n	1b0b0 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b0c4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b0c8:	0099      	lsls	r1, r3, #2
   1b0ca:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b0ce:	4429      	add	r1, r5
   1b0d0:	2210      	movs	r2, #16
   1b0d2:	4411      	add	r1, r2
   1b0d4:	4630      	mov	r0, r6
   1b0d6:	f00e ffe7 	bl	2a0a8 <memcmp>
   1b0da:	2800      	cmp	r0, #0
   1b0dc:	d1e8      	bne.n	1b0b0 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b0de:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b0e2:	0093      	lsls	r3, r2, #2
   1b0e4:	461a      	mov	r2, r3
   1b0e6:	442b      	add	r3, r5
   1b0e8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b0ec:	42bb      	cmp	r3, r7
   1b0ee:	d1df      	bne.n	1b0b0 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b0f0:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b0f4:	4428      	add	r0, r5
   1b0f6:	3010      	adds	r0, #16
   1b0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b0fa:	2000      	movs	r0, #0
}
   1b0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b100 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b100:	2300      	movs	r3, #0
   1b102:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b106:	f3bf 8f5b 	dmb	ish
   1b10a:	68c3      	ldr	r3, [r0, #12]
   1b10c:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b110:	f013 0f01 	tst.w	r3, #1
   1b114:	d100      	bne.n	1b118 <net_if_ipv6_start_dad+0x18>
   1b116:	4770      	bx	lr
{
   1b118:	b510      	push	{r4, lr}
   1b11a:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b11c:	2301      	movs	r3, #1
   1b11e:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b122:	f006 f969 	bl	213f8 <net_ipv6_start_dad>
   1b126:	b100      	cbz	r0, 1b12a <net_if_ipv6_start_dad+0x2a>
   1b128:	bd10      	pop	{r4, pc}
   1b12a:	2264      	movs	r2, #100	; 0x64
   1b12c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b130:	4801      	ldr	r0, [pc, #4]	; (1b138 <net_if_ipv6_start_dad+0x38>)
   1b132:	f00e fec3 	bl	29ebc <k_delayed_work_submit_to_queue>
}
   1b136:	e7f7      	b.n	1b128 <net_if_ipv6_start_dad+0x28>
   1b138:	20002b78 	.word	0x20002b78

0001b13c <net_if_ipv6_prefix_init>:
{
   1b13c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b13e:	b085      	sub	sp, #20
   1b140:	4605      	mov	r5, r0
   1b142:	460e      	mov	r6, r1
   1b144:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b146:	2301      	movs	r3, #1
   1b148:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b14c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b150:	466c      	mov	r4, sp
   1b152:	6808      	ldr	r0, [r1, #0]
   1b154:	6849      	ldr	r1, [r1, #4]
   1b156:	68b2      	ldr	r2, [r6, #8]
   1b158:	68f3      	ldr	r3, [r6, #12]
   1b15a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b15c:	466c      	mov	r4, sp
   1b15e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b160:	62a8      	str	r0, [r5, #40]	; 0x28
   1b162:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b164:	632a      	str	r2, [r5, #48]	; 0x30
   1b166:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b168:	4907      	ldr	r1, [pc, #28]	; (1b188 <net_if_ipv6_prefix_init+0x4c>)
   1b16a:	4628      	mov	r0, r5
   1b16c:	f00e fe2e 	bl	29dcc <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b170:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b174:	d004      	beq.n	1b180 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b176:	2300      	movs	r3, #0
   1b178:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b17c:	b005      	add	sp, #20
   1b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b180:	2301      	movs	r3, #1
   1b182:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b186:	e7f9      	b.n	1b17c <net_if_ipv6_prefix_init+0x40>
   1b188:	0001b04d 	.word	0x0001b04d

0001b18c <join_mcast_allnodes>:
{
   1b18c:	b500      	push	{lr}
   1b18e:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b190:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b194:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b198:	2300      	movs	r3, #0
   1b19a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b19e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b1a2:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b1a6:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b1aa:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b1ae:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b1b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b1b6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b1ba:	4669      	mov	r1, sp
   1b1bc:	f006 faa4 	bl	21708 <net_ipv6_mld_join>
}
   1b1c0:	b005      	add	sp, #20
   1b1c2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b1c6 <join_mcast_solicit_node>:
{
   1b1c6:	b500      	push	{lr}
   1b1c8:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1b1ca:	22ff      	movs	r2, #255	; 0xff
   1b1cc:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1b1d0:	2302      	movs	r3, #2
   1b1d2:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b1d6:	2300      	movs	r3, #0
   1b1d8:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b1dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b1e0:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b1e4:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b1e8:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b1ec:	2301      	movs	r3, #1
   1b1ee:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b1f2:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b1f6:	7b4b      	ldrb	r3, [r1, #13]
   1b1f8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b1fc:	89cb      	ldrh	r3, [r1, #14]
   1b1fe:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b202:	4669      	mov	r1, sp
   1b204:	f006 fa80 	bl	21708 <net_ipv6_mld_join>
}
   1b208:	b005      	add	sp, #20
   1b20a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b20e <leave_mcast_all>:
{
   1b20e:	b538      	push	{r3, r4, r5, lr}
   1b210:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b212:	2400      	movs	r4, #0
   1b214:	e000      	b.n	1b218 <leave_mcast_all+0xa>
   1b216:	3401      	adds	r4, #1
   1b218:	2c04      	cmp	r4, #4
   1b21a:	dc1a      	bgt.n	1b252 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1b21c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b220:	00d3      	lsls	r3, r2, #3
   1b222:	442b      	add	r3, r5
   1b224:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b228:	f013 0f01 	tst.w	r3, #1
   1b22c:	d0f3      	beq.n	1b216 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1b22e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b232:	00d3      	lsls	r3, r2, #3
   1b234:	461a      	mov	r2, r3
   1b236:	442b      	add	r3, r5
   1b238:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1b23c:	f013 0f02 	tst.w	r3, #2
   1b240:	d0e9      	beq.n	1b216 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1b242:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1b246:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1b248:	3118      	adds	r1, #24
   1b24a:	4628      	mov	r0, r5
   1b24c:	f006 fa96 	bl	2177c <net_ipv6_mld_leave>
   1b250:	e7e1      	b.n	1b216 <leave_mcast_all+0x8>
}
   1b252:	bd38      	pop	{r3, r4, r5, pc}

0001b254 <net_if_prepare_events>:
{
   1b254:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1b256:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b258:	4d0a      	ldr	r5, [pc, #40]	; (1b284 <net_if_prepare_events+0x30>)
   1b25a:	e00d      	b.n	1b278 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b25c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b260:	0098      	lsls	r0, r3, #2
   1b262:	f105 0318 	add.w	r3, r5, #24
   1b266:	2200      	movs	r2, #0
   1b268:	2104      	movs	r1, #4
   1b26a:	4e07      	ldr	r6, [pc, #28]	; (1b288 <net_if_prepare_events+0x34>)
   1b26c:	4430      	add	r0, r6
   1b26e:	f00d f927 	bl	284c0 <k_poll_event_init>
		ev_count++;
   1b272:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b274:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b278:	4b04      	ldr	r3, [pc, #16]	; (1b28c <net_if_prepare_events+0x38>)
   1b27a:	429d      	cmp	r5, r3
   1b27c:	d1ee      	bne.n	1b25c <net_if_prepare_events+0x8>
}
   1b27e:	4620      	mov	r0, r4
   1b280:	bd70      	pop	{r4, r5, r6, pc}
   1b282:	bf00      	nop
   1b284:	2000d1c0 	.word	0x2000d1c0
   1b288:	2000d460 	.word	0x2000d460
   1b28c:	2000d460 	.word	0x2000d460

0001b290 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b290:	4b06      	ldr	r3, [pc, #24]	; (1b2ac <net_if_lookup_by_dev+0x1c>)
   1b292:	4a07      	ldr	r2, [pc, #28]	; (1b2b0 <net_if_lookup_by_dev+0x20>)
   1b294:	4293      	cmp	r3, r2
   1b296:	d005      	beq.n	1b2a4 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1b298:	681a      	ldr	r2, [r3, #0]
   1b29a:	4282      	cmp	r2, r0
   1b29c:	d003      	beq.n	1b2a6 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b29e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1b2a2:	e7f6      	b.n	1b292 <net_if_lookup_by_dev+0x2>
	return NULL;
   1b2a4:	2300      	movs	r3, #0
}
   1b2a6:	4618      	mov	r0, r3
   1b2a8:	4770      	bx	lr
   1b2aa:	bf00      	nop
   1b2ac:	2000d1c0 	.word	0x2000d1c0
   1b2b0:	2000d460 	.word	0x2000d460

0001b2b4 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1b2b4:	4b03      	ldr	r3, [pc, #12]	; (1b2c4 <net_if_get_default+0x10>)
   1b2b6:	4a04      	ldr	r2, [pc, #16]	; (1b2c8 <net_if_get_default+0x14>)
   1b2b8:	429a      	cmp	r2, r3
   1b2ba:	d001      	beq.n	1b2c0 <net_if_get_default+0xc>
	return __net_if_start;
   1b2bc:	4802      	ldr	r0, [pc, #8]	; (1b2c8 <net_if_get_default+0x14>)
}
   1b2be:	4770      	bx	lr
		return NULL;
   1b2c0:	2000      	movs	r0, #0
   1b2c2:	4770      	bx	lr
   1b2c4:	2000d460 	.word	0x2000d460
   1b2c8:	2000d1c0 	.word	0x2000d1c0

0001b2cc <net_if_start_rs>:
{
   1b2cc:	b510      	push	{r4, lr}
   1b2ce:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1b2d0:	f006 fa16 	bl	21700 <net_ipv6_start_rs>
   1b2d4:	b100      	cbz	r0, 1b2d8 <net_if_start_rs+0xc>
   1b2d6:	bd10      	pop	{r4, pc}
   1b2d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b2dc:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1b2e0:	4801      	ldr	r0, [pc, #4]	; (1b2e8 <net_if_start_rs+0x1c>)
   1b2e2:	f00e fdeb 	bl	29ebc <k_delayed_work_submit_to_queue>
}
   1b2e6:	e7f6      	b.n	1b2d6 <net_if_start_rs+0xa>
   1b2e8:	20002b78 	.word	0x20002b78

0001b2ec <rs_timeout>:
{
   1b2ec:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1b2ee:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1b2f2:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1b2f6:	3301      	adds	r3, #1
   1b2f8:	b2db      	uxtb	r3, r3
   1b2fa:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1b2fe:	2b02      	cmp	r3, #2
   1b300:	d900      	bls.n	1b304 <rs_timeout+0x18>
   1b302:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1b304:	f7ff ffe2 	bl	1b2cc <net_if_start_rs>
}
   1b308:	e7fb      	b.n	1b302 <rs_timeout+0x16>
	...

0001b30c <net_if_ipv6_addr_lookup>:
{
   1b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b310:	4607      	mov	r7, r0
   1b312:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b314:	4d1b      	ldr	r5, [pc, #108]	; (1b384 <net_if_ipv6_addr_lookup+0x78>)
   1b316:	e02d      	b.n	1b374 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1b318:	b9ee      	cbnz	r6, 1b356 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b31a:	3401      	adds	r4, #1
   1b31c:	2c02      	cmp	r4, #2
   1b31e:	dc27      	bgt.n	1b370 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1b320:	236c      	movs	r3, #108	; 0x6c
   1b322:	fb03 5304 	mla	r3, r3, r4, r5
   1b326:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1b32a:	2e00      	cmp	r6, #0
   1b32c:	d0f5      	beq.n	1b31a <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b32e:	236c      	movs	r3, #108	; 0x6c
   1b330:	fb03 5304 	mla	r3, r3, r4, r5
   1b334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1b336:	2b0a      	cmp	r3, #10
   1b338:	d1ef      	bne.n	1b31a <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1b33a:	216c      	movs	r1, #108	; 0x6c
   1b33c:	fb01 f104 	mul.w	r1, r1, r4
   1b340:	3120      	adds	r1, #32
   1b342:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1b344:	2210      	movs	r2, #16
   1b346:	4411      	add	r1, r2
   1b348:	4638      	mov	r0, r7
   1b34a:	f00e fead 	bl	2a0a8 <memcmp>
   1b34e:	2800      	cmp	r0, #0
   1b350:	d0e2      	beq.n	1b318 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1b352:	2600      	movs	r6, #0
   1b354:	e7e0      	b.n	1b318 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1b356:	f1b8 0f00 	cmp.w	r8, #0
   1b35a:	d001      	beq.n	1b360 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1b35c:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1b360:	206c      	movs	r0, #108	; 0x6c
   1b362:	fb00 f004 	mul.w	r0, r0, r4
   1b366:	3020      	adds	r0, #32
   1b368:	4428      	add	r0, r5
   1b36a:	300c      	adds	r0, #12
   1b36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b370:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b374:	4b04      	ldr	r3, [pc, #16]	; (1b388 <net_if_ipv6_addr_lookup+0x7c>)
   1b376:	429d      	cmp	r5, r3
   1b378:	d001      	beq.n	1b37e <net_if_ipv6_addr_lookup+0x72>
   1b37a:	2400      	movs	r4, #0
   1b37c:	e7ce      	b.n	1b31c <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1b37e:	2000      	movs	r0, #0
}
   1b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b384:	2000d1c0 	.word	0x2000d1c0
   1b388:	2000d460 	.word	0x2000d460

0001b38c <dad_timeout>:
{
   1b38c:	b530      	push	{r4, r5, lr}
   1b38e:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1b390:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1b394:	a902      	add	r1, sp, #8
   1b396:	2300      	movs	r3, #0
   1b398:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1b39c:	2301      	movs	r3, #1
   1b39e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1b3a2:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1b3a6:	4620      	mov	r0, r4
   1b3a8:	f7ff ffb0 	bl	1b30c <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1b3ac:	4285      	cmp	r5, r0
   1b3ae:	d001      	beq.n	1b3b4 <dad_timeout+0x28>
}
   1b3b0:	b003      	add	sp, #12
   1b3b2:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1b3b4:	2300      	movs	r3, #0
   1b3b6:	461a      	mov	r2, r3
   1b3b8:	9901      	ldr	r1, [sp, #4]
   1b3ba:	4807      	ldr	r0, [pc, #28]	; (1b3d8 <dad_timeout+0x4c>)
   1b3bc:	f007 fdcc 	bl	22f58 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1b3c0:	4621      	mov	r1, r4
   1b3c2:	9801      	ldr	r0, [sp, #4]
   1b3c4:	f004 faf6 	bl	1f9b4 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1b3c8:	9801      	ldr	r0, [sp, #4]
   1b3ca:	f7ff fedf 	bl	1b18c <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1b3ce:	4621      	mov	r1, r4
   1b3d0:	9801      	ldr	r0, [sp, #4]
   1b3d2:	f7ff fef8 	bl	1b1c6 <join_mcast_solicit_node>
}
   1b3d6:	e7eb      	b.n	1b3b0 <dad_timeout+0x24>
   1b3d8:	f060000d 	.word	0xf060000d

0001b3dc <net_if_ipv6_addr_update_lifetime>:
{
   1b3dc:	b508      	push	{r3, lr}
   1b3de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b3e2:	fb02 f201 	mul.w	r2, r2, r1
   1b3e6:	f100 0114 	add.w	r1, r0, #20
   1b3ea:	4802      	ldr	r0, [pc, #8]	; (1b3f4 <net_if_ipv6_addr_update_lifetime+0x18>)
   1b3ec:	f00e fd66 	bl	29ebc <k_delayed_work_submit_to_queue>
   1b3f0:	bd08      	pop	{r3, pc}
   1b3f2:	bf00      	nop
   1b3f4:	20002b78 	.word	0x20002b78

0001b3f8 <net_if_ipv6_addr_add>:
{
   1b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3fc:	b084      	sub	sp, #16
   1b3fe:	4605      	mov	r5, r0
   1b400:	460e      	mov	r6, r1
   1b402:	4690      	mov	r8, r2
   1b404:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1b406:	f7ff fe29 	bl	1b05c <ipv6_addr_find>
	if (ifaddr) {
   1b40a:	4604      	mov	r4, r0
   1b40c:	b118      	cbz	r0, 1b416 <net_if_ipv6_addr_add+0x1e>
}
   1b40e:	4620      	mov	r0, r4
   1b410:	b004      	add	sp, #16
   1b412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b416:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b418:	2b02      	cmp	r3, #2
   1b41a:	dcf8      	bgt.n	1b40e <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1b41c:	226c      	movs	r2, #108	; 0x6c
   1b41e:	fb02 5203 	mla	r2, r2, r3, r5
   1b422:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b426:	b10a      	cbz	r2, 1b42c <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b428:	3301      	adds	r3, #1
   1b42a:	e7f5      	b.n	1b418 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1b42c:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1b430:	fb0e fe03 	mul.w	lr, lr, r3
   1b434:	f10e 0e20 	add.w	lr, lr, #32
   1b438:	44ae      	add	lr, r5
   1b43a:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1b43e:	2301      	movs	r3, #1
   1b440:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1b444:	230a      	movs	r3, #10
   1b446:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1b44a:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1b44e:	46ec      	mov	ip, sp
   1b450:	6830      	ldr	r0, [r6, #0]
   1b452:	6871      	ldr	r1, [r6, #4]
   1b454:	68b2      	ldr	r2, [r6, #8]
   1b456:	68f3      	ldr	r3, [r6, #12]
   1b458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b45c:	466e      	mov	r6, sp
   1b45e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b460:	f8ce 0010 	str.w	r0, [lr, #16]
   1b464:	f8ce 1014 	str.w	r1, [lr, #20]
   1b468:	f8ce 2018 	str.w	r2, [lr, #24]
   1b46c:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1b470:	4910      	ldr	r1, [pc, #64]	; (1b4b4 <net_if_ipv6_addr_add+0xbc>)
   1b472:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1b476:	f00e fca9 	bl	29dcc <k_delayed_work_init>
	if (vlifetime) {
   1b47a:	b96f      	cbnz	r7, 1b498 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1b47c:	2301      	movs	r3, #1
   1b47e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b482:	4621      	mov	r1, r4
   1b484:	4628      	mov	r0, r5
   1b486:	f7ff fe3b 	bl	1b100 <net_if_ipv6_start_dad>
   1b48a:	2300      	movs	r3, #0
   1b48c:	461a      	mov	r2, r3
   1b48e:	4629      	mov	r1, r5
   1b490:	4809      	ldr	r0, [pc, #36]	; (1b4b8 <net_if_ipv6_addr_add+0xc0>)
   1b492:	f007 fd61 	bl	22f58 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1b496:	e7ba      	b.n	1b40e <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1b498:	2300      	movs	r3, #0
   1b49a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1b49e:	4907      	ldr	r1, [pc, #28]	; (1b4bc <net_if_ipv6_addr_add+0xc4>)
   1b4a0:	f104 0014 	add.w	r0, r4, #20
   1b4a4:	f00e fc92 	bl	29dcc <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1b4a8:	4639      	mov	r1, r7
   1b4aa:	4620      	mov	r0, r4
   1b4ac:	f7ff ff96 	bl	1b3dc <net_if_ipv6_addr_update_lifetime>
   1b4b0:	e7e7      	b.n	1b482 <net_if_ipv6_addr_add+0x8a>
   1b4b2:	bf00      	nop
   1b4b4:	0001b38d 	.word	0x0001b38d
   1b4b8:	f0600001 	.word	0xf0600001
   1b4bc:	0001b045 	.word	0x0001b045

0001b4c0 <net_if_start_dad>:
{
   1b4c0:	b570      	push	{r4, r5, r6, lr}
   1b4c2:	b084      	sub	sp, #16
   1b4c4:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1b4c6:	2300      	movs	r3, #0
   1b4c8:	9302      	str	r3, [sp, #8]
   1b4ca:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1b4cc:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1b4d0:	22fe      	movs	r2, #254	; 0xfe
   1b4d2:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1b4d6:	2280      	movs	r2, #128	; 0x80
   1b4d8:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1b4dc:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1b4e0:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1b4e2:	7922      	ldrb	r2, [r4, #4]
   1b4e4:	2a06      	cmp	r2, #6
   1b4e6:	d020      	beq.n	1b52a <net_if_start_dad+0x6a>
   1b4e8:	2a08      	cmp	r2, #8
   1b4ea:	d044      	beq.n	1b576 <net_if_start_dad+0xb6>
   1b4ec:	2a02      	cmp	r2, #2
   1b4ee:	d008      	beq.n	1b502 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1b4f0:	2300      	movs	r3, #0
   1b4f2:	2201      	movs	r2, #1
   1b4f4:	4669      	mov	r1, sp
   1b4f6:	4628      	mov	r0, r5
   1b4f8:	f7ff ff7e 	bl	1b3f8 <net_if_ipv6_addr_add>
   1b4fc:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4fe:	2400      	movs	r4, #0
   1b500:	e045      	b.n	1b58e <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1b502:	7963      	ldrb	r3, [r4, #5]
   1b504:	2b01      	cmp	r3, #1
   1b506:	d1f3      	bne.n	1b4f0 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1b508:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1b50a:	22ff      	movs	r2, #255	; 0xff
   1b50c:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1b510:	22fe      	movs	r2, #254	; 0xfe
   1b512:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1b516:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1b51a:	6903      	ldr	r3, [r0, #16]
   1b51c:	781a      	ldrb	r2, [r3, #0]
   1b51e:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1b522:	785b      	ldrb	r3, [r3, #1]
   1b524:	f88d 300f 	strb.w	r3, [sp, #15]
   1b528:	e7e2      	b.n	1b4f0 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1b52a:	2203      	movs	r2, #3
   1b52c:	6901      	ldr	r1, [r0, #16]
   1b52e:	a802      	add	r0, sp, #8
   1b530:	f7e4 fec6 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1b534:	23ff      	movs	r3, #255	; 0xff
   1b536:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1b53a:	23fe      	movs	r3, #254	; 0xfe
   1b53c:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1b540:	6929      	ldr	r1, [r5, #16]
   1b542:	2203      	movs	r2, #3
   1b544:	4411      	add	r1, r2
   1b546:	f10d 000d 	add.w	r0, sp, #13
   1b54a:	f7e4 feb9 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1b54e:	7963      	ldrb	r3, [r4, #5]
   1b550:	2b02      	cmp	r3, #2
   1b552:	d009      	beq.n	1b568 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1b554:	7963      	ldrb	r3, [r4, #5]
   1b556:	2b03      	cmp	r3, #3
   1b558:	d1ca      	bne.n	1b4f0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b55a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b55e:	f083 0302 	eor.w	r3, r3, #2
   1b562:	f88d 3008 	strb.w	r3, [sp, #8]
   1b566:	e7c3      	b.n	1b4f0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b568:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b56c:	f083 0302 	eor.w	r3, r3, #2
   1b570:	f88d 3008 	strb.w	r3, [sp, #8]
   1b574:	e7ee      	b.n	1b554 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1b576:	6901      	ldr	r1, [r0, #16]
   1b578:	a802      	add	r0, sp, #8
   1b57a:	f7e4 fea1 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1b57e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b582:	f083 0302 	eor.w	r3, r3, #2
   1b586:	f88d 3008 	strb.w	r3, [sp, #8]
   1b58a:	e7b1      	b.n	1b4f0 <net_if_start_dad+0x30>
   1b58c:	3401      	adds	r4, #1
   1b58e:	2c02      	cmp	r4, #2
   1b590:	dc18      	bgt.n	1b5c4 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1b592:	236c      	movs	r3, #108	; 0x6c
   1b594:	fb03 5304 	mla	r3, r3, r4, r5
   1b598:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b59c:	2b00      	cmp	r3, #0
   1b59e:	d0f5      	beq.n	1b58c <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b5a0:	236c      	movs	r3, #108	; 0x6c
   1b5a2:	fb03 5304 	mla	r3, r3, r4, r5
   1b5a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1b5a8:	2b0a      	cmp	r3, #10
   1b5aa:	d1ef      	bne.n	1b58c <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1b5ac:	216c      	movs	r1, #108	; 0x6c
   1b5ae:	fb01 f104 	mul.w	r1, r1, r4
   1b5b2:	3120      	adds	r1, #32
   1b5b4:	4429      	add	r1, r5
   1b5b6:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b5b8:	428e      	cmp	r6, r1
   1b5ba:	d0e7      	beq.n	1b58c <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b5bc:	4628      	mov	r0, r5
   1b5be:	f7ff fd9f 	bl	1b100 <net_if_ipv6_start_dad>
   1b5c2:	e7e3      	b.n	1b58c <net_if_start_dad+0xcc>
}
   1b5c4:	b004      	add	sp, #16
   1b5c6:	bd70      	pop	{r4, r5, r6, pc}

0001b5c8 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1b5c8:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1b5ca:	2bff      	cmp	r3, #255	; 0xff
   1b5cc:	d134      	bne.n	1b638 <net_if_ipv6_maddr_add+0x70>
{
   1b5ce:	b570      	push	{r4, r5, r6, lr}
   1b5d0:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b5d2:	2c04      	cmp	r4, #4
   1b5d4:	dc2e      	bgt.n	1b634 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1b5d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b5da:	00d3      	lsls	r3, r2, #3
   1b5dc:	4403      	add	r3, r0
   1b5de:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b5e2:	f013 0f01 	tst.w	r3, #1
   1b5e6:	d001      	beq.n	1b5ec <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b5e8:	3401      	adds	r4, #1
   1b5ea:	e7f2      	b.n	1b5d2 <net_if_ipv6_maddr_add+0xa>
   1b5ec:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1b5ee:	0066      	lsls	r6, r4, #1
   1b5f0:	1932      	adds	r2, r6, r4
   1b5f2:	00d3      	lsls	r3, r2, #3
   1b5f4:	4403      	add	r3, r0
   1b5f6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b5fa:	f042 0201 	orr.w	r2, r2, #1
   1b5fe:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1b602:	220a      	movs	r2, #10
   1b604:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1b608:	1933      	adds	r3, r6, r4
   1b60a:	00d8      	lsls	r0, r3, #3
   1b60c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b610:	4428      	add	r0, r5
   1b612:	2210      	movs	r2, #16
   1b614:	3018      	adds	r0, #24
   1b616:	f7e4 fe53 	bl	2c0 <memcpy>
   1b61a:	2300      	movs	r3, #0
   1b61c:	461a      	mov	r2, r3
   1b61e:	4629      	mov	r1, r5
   1b620:	4806      	ldr	r0, [pc, #24]	; (1b63c <net_if_ipv6_maddr_add+0x74>)
   1b622:	f007 fc99 	bl	22f58 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1b626:	4434      	add	r4, r6
   1b628:	00e0      	lsls	r0, r4, #3
   1b62a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b62e:	4428      	add	r0, r5
   1b630:	3010      	adds	r0, #16
   1b632:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b634:	2000      	movs	r0, #0
   1b636:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b638:	2000      	movs	r0, #0
   1b63a:	4770      	bx	lr
   1b63c:	f0600003 	.word	0xf0600003

0001b640 <net_if_ipv6_maddr_rm>:
{
   1b640:	b570      	push	{r4, r5, r6, lr}
   1b642:	4605      	mov	r5, r0
   1b644:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b646:	2400      	movs	r4, #0
   1b648:	e000      	b.n	1b64c <net_if_ipv6_maddr_rm+0xc>
   1b64a:	3401      	adds	r4, #1
   1b64c:	2c04      	cmp	r4, #4
   1b64e:	dc25      	bgt.n	1b69c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1b650:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b654:	00d3      	lsls	r3, r2, #3
   1b656:	461a      	mov	r2, r3
   1b658:	442b      	add	r3, r5
   1b65a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b65e:	f013 0f01 	tst.w	r3, #1
   1b662:	d0f2      	beq.n	1b64a <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1b664:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1b668:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b66a:	2210      	movs	r2, #16
   1b66c:	4631      	mov	r1, r6
   1b66e:	3018      	adds	r0, #24
   1b670:	f00e fd1a 	bl	2a0a8 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b674:	2800      	cmp	r0, #0
   1b676:	d1e8      	bne.n	1b64a <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1b678:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b67c:	00e3      	lsls	r3, r4, #3
   1b67e:	442b      	add	r3, r5
   1b680:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b684:	f36f 0200 	bfc	r2, #0, #1
   1b688:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1b68c:	2300      	movs	r3, #0
   1b68e:	461a      	mov	r2, r3
   1b690:	4629      	mov	r1, r5
   1b692:	4803      	ldr	r0, [pc, #12]	; (1b6a0 <net_if_ipv6_maddr_rm+0x60>)
   1b694:	f007 fc60 	bl	22f58 <net_mgmt_event_notify_with_info>
		return true;
   1b698:	2001      	movs	r0, #1
   1b69a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b69c:	2000      	movs	r0, #0
}
   1b69e:	bd70      	pop	{r4, r5, r6, pc}
   1b6a0:	f0600004 	.word	0xf0600004

0001b6a4 <net_if_ipv6_addr_rm>:
{
   1b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b6a8:	b084      	sub	sp, #16
   1b6aa:	4606      	mov	r6, r0
   1b6ac:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b6ae:	2400      	movs	r4, #0
   1b6b0:	e009      	b.n	1b6c6 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1b6b2:	206c      	movs	r0, #108	; 0x6c
   1b6b4:	fb00 f004 	mul.w	r0, r0, r4
   1b6b8:	3030      	adds	r0, #48	; 0x30
   1b6ba:	4430      	add	r0, r6
   1b6bc:	3010      	adds	r0, #16
   1b6be:	f00e fba3 	bl	29e08 <k_delayed_work_cancel>
   1b6c2:	e01c      	b.n	1b6fe <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b6c4:	3401      	adds	r4, #1
   1b6c6:	2c02      	cmp	r4, #2
   1b6c8:	dc46      	bgt.n	1b758 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1b6ca:	236c      	movs	r3, #108	; 0x6c
   1b6cc:	fb03 6304 	mla	r3, r3, r4, r6
   1b6d0:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1b6d4:	2d00      	cmp	r5, #0
   1b6d6:	d0f5      	beq.n	1b6c4 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1b6d8:	206c      	movs	r0, #108	; 0x6c
   1b6da:	fb00 f004 	mul.w	r0, r0, r4
   1b6de:	3020      	adds	r0, #32
   1b6e0:	4430      	add	r0, r6
   1b6e2:	2210      	movs	r2, #16
   1b6e4:	4639      	mov	r1, r7
   1b6e6:	4410      	add	r0, r2
   1b6e8:	f00e fcde 	bl	2a0a8 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b6ec:	2800      	cmp	r0, #0
   1b6ee:	d1e9      	bne.n	1b6c4 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1b6f0:	236c      	movs	r3, #108	; 0x6c
   1b6f2:	fb03 6304 	mla	r3, r3, r4, r6
   1b6f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1b6fa:	2b00      	cmp	r3, #0
   1b6fc:	d0d9      	beq.n	1b6b2 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1b6fe:	236c      	movs	r3, #108	; 0x6c
   1b700:	fb03 6404 	mla	r4, r3, r4, r6
   1b704:	f04f 0800 	mov.w	r8, #0
   1b708:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1b70c:	23ff      	movs	r3, #255	; 0xff
   1b70e:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1b712:	2202      	movs	r2, #2
   1b714:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b718:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b71c:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b720:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b724:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b728:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b72c:	2201      	movs	r2, #1
   1b72e:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b732:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b736:	7b7b      	ldrb	r3, [r7, #13]
   1b738:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b73c:	89fb      	ldrh	r3, [r7, #14]
   1b73e:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1b742:	4669      	mov	r1, sp
   1b744:	4630      	mov	r0, r6
   1b746:	f7ff ff7b 	bl	1b640 <net_if_ipv6_maddr_rm>
   1b74a:	4643      	mov	r3, r8
   1b74c:	4642      	mov	r2, r8
   1b74e:	4631      	mov	r1, r6
   1b750:	4804      	ldr	r0, [pc, #16]	; (1b764 <net_if_ipv6_addr_rm+0xc0>)
   1b752:	f007 fc01 	bl	22f58 <net_mgmt_event_notify_with_info>
   1b756:	e000      	b.n	1b75a <net_if_ipv6_addr_rm+0xb6>
	return false;
   1b758:	2500      	movs	r5, #0
}
   1b75a:	4628      	mov	r0, r5
   1b75c:	b004      	add	sp, #16
   1b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b762:	bf00      	nop
   1b764:	f0600002 	.word	0xf0600002

0001b768 <net_if_ipv6_dad_failed>:
{
   1b768:	b510      	push	{r4, lr}
   1b76a:	b082      	sub	sp, #8
   1b76c:	ab02      	add	r3, sp, #8
   1b76e:	f843 0d04 	str.w	r0, [r3, #-4]!
   1b772:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1b774:	4619      	mov	r1, r3
   1b776:	4620      	mov	r0, r4
   1b778:	f7ff fdc8 	bl	1b30c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1b77c:	b160      	cbz	r0, 1b798 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1b77e:	303c      	adds	r0, #60	; 0x3c
   1b780:	f00e fb42 	bl	29e08 <k_delayed_work_cancel>
   1b784:	2300      	movs	r3, #0
   1b786:	461a      	mov	r2, r3
   1b788:	9901      	ldr	r1, [sp, #4]
   1b78a:	4804      	ldr	r0, [pc, #16]	; (1b79c <net_if_ipv6_dad_failed+0x34>)
   1b78c:	f007 fbe4 	bl	22f58 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1b790:	4621      	mov	r1, r4
   1b792:	9801      	ldr	r0, [sp, #4]
   1b794:	f7ff ff86 	bl	1b6a4 <net_if_ipv6_addr_rm>
}
   1b798:	b002      	add	sp, #8
   1b79a:	bd10      	pop	{r4, pc}
   1b79c:	f060000e 	.word	0xf060000e

0001b7a0 <net_if_ipv6_maddr_lookup>:
{
   1b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7a2:	4607      	mov	r7, r0
   1b7a4:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b7a6:	4d22      	ldr	r5, [pc, #136]	; (1b830 <net_if_ipv6_maddr_lookup+0x90>)
   1b7a8:	e034      	b.n	1b814 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1b7aa:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1b7ac:	bb13      	cbnz	r3, 1b7f4 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b7ae:	3401      	adds	r4, #1
   1b7b0:	2c04      	cmp	r4, #4
   1b7b2:	dc2d      	bgt.n	1b810 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1b7b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b7b8:	00d3      	lsls	r3, r2, #3
   1b7ba:	442b      	add	r3, r5
   1b7bc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b7c0:	f013 0f01 	tst.w	r3, #1
   1b7c4:	d0f3      	beq.n	1b7ae <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1b7c6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b7ca:	00d3      	lsls	r3, r2, #3
   1b7cc:	442b      	add	r3, r5
   1b7ce:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1b7d2:	2b0a      	cmp	r3, #10
   1b7d4:	d1eb      	bne.n	1b7ae <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1b7d6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b7da:	00d3      	lsls	r3, r2, #3
   1b7dc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1b7e0:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1b7e2:	2210      	movs	r2, #16
   1b7e4:	3118      	adds	r1, #24
   1b7e6:	4638      	mov	r0, r7
   1b7e8:	f00e fc5e 	bl	2a0a8 <memcmp>
   1b7ec:	2800      	cmp	r0, #0
   1b7ee:	d1dc      	bne.n	1b7aa <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1b7f0:	2301      	movs	r3, #1
   1b7f2:	e7db      	b.n	1b7ac <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1b7f4:	b106      	cbz	r6, 1b7f8 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1b7f6:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1b7f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b7fc:	00e3      	lsls	r3, r4, #3
   1b7fe:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1b802:	4428      	add	r0, r5
   1b804:	3010      	adds	r0, #16
   1b806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b808:	2400      	movs	r4, #0
   1b80a:	e7d1      	b.n	1b7b0 <net_if_ipv6_maddr_lookup+0x10>
   1b80c:	2400      	movs	r4, #0
   1b80e:	e7cf      	b.n	1b7b0 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b810:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b814:	4b07      	ldr	r3, [pc, #28]	; (1b834 <net_if_ipv6_maddr_lookup+0x94>)
   1b816:	429d      	cmp	r5, r3
   1b818:	d008      	beq.n	1b82c <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1b81a:	2e00      	cmp	r6, #0
   1b81c:	d0f4      	beq.n	1b808 <net_if_ipv6_maddr_lookup+0x68>
   1b81e:	6833      	ldr	r3, [r6, #0]
   1b820:	2b00      	cmp	r3, #0
   1b822:	d0f3      	beq.n	1b80c <net_if_ipv6_maddr_lookup+0x6c>
   1b824:	429d      	cmp	r5, r3
   1b826:	d1f3      	bne.n	1b810 <net_if_ipv6_maddr_lookup+0x70>
   1b828:	2400      	movs	r4, #0
   1b82a:	e7c1      	b.n	1b7b0 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1b82c:	2000      	movs	r0, #0
}
   1b82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b830:	2000d1c0 	.word	0x2000d1c0
   1b834:	2000d460 	.word	0x2000d460

0001b838 <net_if_mcast_monitor>:
{
   1b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b83a:	4605      	mov	r5, r0
   1b83c:	460e      	mov	r6, r1
   1b83e:	4617      	mov	r7, r2
	return list->head;
   1b840:	4b13      	ldr	r3, [pc, #76]	; (1b890 <net_if_mcast_monitor+0x58>)
   1b842:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b844:	b11b      	cbz	r3, 1b84e <net_if_mcast_monitor+0x16>
   1b846:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b848:	b173      	cbz	r3, 1b868 <net_if_mcast_monitor+0x30>
	return node->next;
   1b84a:	681c      	ldr	r4, [r3, #0]
   1b84c:	e00c      	b.n	1b868 <net_if_mcast_monitor+0x30>
   1b84e:	461c      	mov	r4, r3
   1b850:	e00a      	b.n	1b868 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1b852:	689b      	ldr	r3, [r3, #8]
   1b854:	463a      	mov	r2, r7
   1b856:	4631      	mov	r1, r6
   1b858:	4628      	mov	r0, r5
   1b85a:	4798      	blx	r3
   1b85c:	e008      	b.n	1b870 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b85e:	4623      	mov	r3, r4
   1b860:	e00c      	b.n	1b87c <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b862:	4622      	mov	r2, r4
   1b864:	4623      	mov	r3, r4
   1b866:	4614      	mov	r4, r2
   1b868:	b183      	cbz	r3, 1b88c <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1b86a:	685a      	ldr	r2, [r3, #4]
   1b86c:	42aa      	cmp	r2, r5
   1b86e:	d0f0      	beq.n	1b852 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b870:	2c00      	cmp	r4, #0
   1b872:	d0f6      	beq.n	1b862 <net_if_mcast_monitor+0x2a>
   1b874:	4622      	mov	r2, r4
   1b876:	2c00      	cmp	r4, #0
   1b878:	d0f1      	beq.n	1b85e <net_if_mcast_monitor+0x26>
	return node->next;
   1b87a:	6823      	ldr	r3, [r4, #0]
   1b87c:	b113      	cbz	r3, 1b884 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b87e:	b11a      	cbz	r2, 1b888 <net_if_mcast_monitor+0x50>
	return node->next;
   1b880:	6822      	ldr	r2, [r4, #0]
   1b882:	e7ef      	b.n	1b864 <net_if_mcast_monitor+0x2c>
   1b884:	2200      	movs	r2, #0
   1b886:	e7ed      	b.n	1b864 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b888:	2200      	movs	r2, #0
   1b88a:	e7eb      	b.n	1b864 <net_if_mcast_monitor+0x2c>
}
   1b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b88e:	bf00      	nop
   1b890:	20001b5c 	.word	0x20001b5c

0001b894 <net_if_ipv6_prefix_add>:
{
   1b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b898:	4605      	mov	r5, r0
   1b89a:	460e      	mov	r6, r1
   1b89c:	4617      	mov	r7, r2
   1b89e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1b8a0:	f7ff fc00 	bl	1b0a4 <ipv6_prefix_find>
	if (if_prefix) {
   1b8a4:	4604      	mov	r4, r0
   1b8a6:	b110      	cbz	r0, 1b8ae <net_if_ipv6_prefix_add+0x1a>
}
   1b8a8:	4620      	mov	r0, r4
   1b8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b8ae:	2300      	movs	r3, #0
   1b8b0:	e000      	b.n	1b8b4 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b8b2:	3301      	adds	r3, #1
   1b8b4:	2b01      	cmp	r3, #1
   1b8b6:	dcf7      	bgt.n	1b8a8 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1b8b8:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b8bc:	008a      	lsls	r2, r1, #2
   1b8be:	442a      	add	r2, r5
   1b8c0:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1b8c4:	2a00      	cmp	r2, #0
   1b8c6:	d1f4      	bne.n	1b8b2 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1b8c8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b8cc:	009a      	lsls	r2, r3, #2
   1b8ce:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1b8d2:	442c      	add	r4, r5
   1b8d4:	3410      	adds	r4, #16
   1b8d6:	4643      	mov	r3, r8
   1b8d8:	463a      	mov	r2, r7
   1b8da:	4631      	mov	r1, r6
   1b8dc:	4620      	mov	r0, r4
   1b8de:	f7ff fc2d 	bl	1b13c <net_if_ipv6_prefix_init>
   1b8e2:	2300      	movs	r3, #0
   1b8e4:	461a      	mov	r2, r3
   1b8e6:	4629      	mov	r1, r5
   1b8e8:	4801      	ldr	r0, [pc, #4]	; (1b8f0 <net_if_ipv6_prefix_add+0x5c>)
   1b8ea:	f007 fb35 	bl	22f58 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1b8ee:	e7db      	b.n	1b8a8 <net_if_ipv6_prefix_add+0x14>
   1b8f0:	f0600005 	.word	0xf0600005

0001b8f4 <net_if_ipv6_prefix_lookup>:
{
   1b8f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8f8:	4605      	mov	r5, r0
   1b8fa:	4688      	mov	r8, r1
   1b8fc:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b8fe:	2400      	movs	r4, #0
   1b900:	e01d      	b.n	1b93e <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1b902:	4652      	mov	r2, sl
   1b904:	4641      	mov	r1, r8
   1b906:	4648      	mov	r0, r9
   1b908:	f00e fbce 	bl	2a0a8 <memcmp>
   1b90c:	b9a0      	cbnz	r0, 1b938 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1b90e:	f1bb 0f00 	cmp.w	fp, #0
   1b912:	d012      	beq.n	1b93a <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b914:	f1cb 0208 	rsb	r2, fp, #8
   1b918:	23ff      	movs	r3, #255	; 0xff
   1b91a:	4093      	lsls	r3, r2
   1b91c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b920:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b924:	f819 200a 	ldrb.w	r2, [r9, sl]
   1b928:	f818 100a 	ldrb.w	r1, [r8, sl]
   1b92c:	404a      	eors	r2, r1
   1b92e:	4213      	tst	r3, r2
   1b930:	bf0c      	ite	eq
   1b932:	2601      	moveq	r6, #1
   1b934:	2600      	movne	r6, #0
   1b936:	e000      	b.n	1b93a <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1b938:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b93a:	b9e6      	cbnz	r6, 1b976 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b93c:	3401      	adds	r4, #1
   1b93e:	2c01      	cmp	r4, #1
   1b940:	dc22      	bgt.n	1b988 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1b942:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b946:	0093      	lsls	r3, r2, #2
   1b948:	442b      	add	r3, r5
   1b94a:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1b94e:	2e00      	cmp	r6, #0
   1b950:	d0f4      	beq.n	1b93c <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b952:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b956:	0093      	lsls	r3, r2, #2
   1b958:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b95c:	442b      	add	r3, r5
   1b95e:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1b962:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1b966:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1b96a:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1b96e:	2f80      	cmp	r7, #128	; 0x80
   1b970:	d9c7      	bls.n	1b902 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1b972:	2600      	movs	r6, #0
   1b974:	e7e1      	b.n	1b93a <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1b976:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1b97a:	00a3      	lsls	r3, r4, #2
   1b97c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1b980:	4428      	add	r0, r5
   1b982:	3010      	adds	r0, #16
   1b984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1b988:	2000      	movs	r0, #0
}
   1b98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001b990 <net_if_ipv6_addr_onlink>:
{
   1b990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b994:	4606      	mov	r6, r0
   1b996:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1b998:	4d2d      	ldr	r5, [pc, #180]	; (1ba50 <net_if_ipv6_addr_onlink+0xc0>)
   1b99a:	e048      	b.n	1ba2e <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1b99c:	465a      	mov	r2, fp
   1b99e:	4641      	mov	r1, r8
   1b9a0:	4648      	mov	r0, r9
   1b9a2:	f00e fb81 	bl	2a0a8 <memcmp>
   1b9a6:	b9a8      	cbnz	r0, 1b9d4 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1b9a8:	f1ba 0f00 	cmp.w	sl, #0
   1b9ac:	d013      	beq.n	1b9d6 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b9ae:	f1ca 0208 	rsb	r2, sl, #8
   1b9b2:	23ff      	movs	r3, #255	; 0xff
   1b9b4:	4093      	lsls	r3, r2
   1b9b6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b9ba:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b9be:	f819 300b 	ldrb.w	r3, [r9, fp]
   1b9c2:	f818 200b 	ldrb.w	r2, [r8, fp]
   1b9c6:	4053      	eors	r3, r2
   1b9c8:	ea1a 0f03 	tst.w	sl, r3
   1b9cc:	bf0c      	ite	eq
   1b9ce:	2701      	moveq	r7, #1
   1b9d0:	2700      	movne	r7, #0
   1b9d2:	e000      	b.n	1b9d6 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1b9d4:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1b9d6:	bb0f      	cbnz	r7, 1ba1c <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b9d8:	3401      	adds	r4, #1
   1b9da:	2c01      	cmp	r4, #1
   1b9dc:	dc25      	bgt.n	1ba2a <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1b9de:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b9e2:	0093      	lsls	r3, r2, #2
   1b9e4:	442b      	add	r3, r5
   1b9e6:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1b9ea:	2f00      	cmp	r7, #0
   1b9ec:	d0f4      	beq.n	1b9d8 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1b9ee:	0122      	lsls	r2, r4, #4
   1b9f0:	1b11      	subs	r1, r2, r4
   1b9f2:	008b      	lsls	r3, r1, #2
   1b9f4:	4619      	mov	r1, r3
   1b9f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b9fa:	442b      	add	r3, r5
   1b9fc:	f103 0910 	add.w	r9, r3, #16
   1ba00:	460a      	mov	r2, r1
   1ba02:	442a      	add	r2, r5
   1ba04:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1ba08:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1ba0c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1ba10:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1ba14:	2b80      	cmp	r3, #128	; 0x80
   1ba16:	d9c1      	bls.n	1b99c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1ba18:	2700      	movs	r7, #0
   1ba1a:	e7dc      	b.n	1b9d6 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1ba1c:	b1a6      	cbz	r6, 1ba48 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1ba1e:	6035      	str	r5, [r6, #0]
   1ba20:	e012      	b.n	1ba48 <net_if_ipv6_addr_onlink+0xb8>
   1ba22:	2400      	movs	r4, #0
   1ba24:	e7d9      	b.n	1b9da <net_if_ipv6_addr_onlink+0x4a>
   1ba26:	2400      	movs	r4, #0
   1ba28:	e7d7      	b.n	1b9da <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1ba2a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1ba2e:	4b09      	ldr	r3, [pc, #36]	; (1ba54 <net_if_ipv6_addr_onlink+0xc4>)
   1ba30:	429d      	cmp	r5, r3
   1ba32:	d008      	beq.n	1ba46 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1ba34:	2e00      	cmp	r6, #0
   1ba36:	d0f4      	beq.n	1ba22 <net_if_ipv6_addr_onlink+0x92>
   1ba38:	6833      	ldr	r3, [r6, #0]
   1ba3a:	2b00      	cmp	r3, #0
   1ba3c:	d0f3      	beq.n	1ba26 <net_if_ipv6_addr_onlink+0x96>
   1ba3e:	429d      	cmp	r5, r3
   1ba40:	d1f3      	bne.n	1ba2a <net_if_ipv6_addr_onlink+0x9a>
   1ba42:	2400      	movs	r4, #0
   1ba44:	e7c9      	b.n	1b9da <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1ba46:	2700      	movs	r7, #0
}
   1ba48:	4638      	mov	r0, r7
   1ba4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba4e:	bf00      	nop
   1ba50:	2000d1c0 	.word	0x2000d1c0
   1ba54:	2000d460 	.word	0x2000d460

0001ba58 <net_if_ipv6_prefix_set_timer>:
{
   1ba58:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1ba5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba5e:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1ba62:	4b05      	ldr	r3, [pc, #20]	; (1ba78 <net_if_ipv6_prefix_set_timer+0x20>)
   1ba64:	4299      	cmp	r1, r3
   1ba66:	d901      	bls.n	1ba6c <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1ba68:	f06f 0201 	mvn.w	r2, #1
   1ba6c:	4601      	mov	r1, r0
   1ba6e:	4803      	ldr	r0, [pc, #12]	; (1ba7c <net_if_ipv6_prefix_set_timer+0x24>)
   1ba70:	f00e fa24 	bl	29ebc <k_delayed_work_submit_to_queue>
   1ba74:	bd08      	pop	{r3, pc}
   1ba76:	bf00      	nop
   1ba78:	00418937 	.word	0x00418937
   1ba7c:	20002b78 	.word	0x20002b78

0001ba80 <net_if_ipv6_prefix_unset_timer>:
{
   1ba80:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1ba82:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1ba86:	b903      	cbnz	r3, 1ba8a <net_if_ipv6_prefix_unset_timer+0xa>
   1ba88:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1ba8a:	f00e f9bd 	bl	29e08 <k_delayed_work_cancel>
   1ba8e:	e7fb      	b.n	1ba88 <net_if_ipv6_prefix_unset_timer+0x8>

0001ba90 <net_if_ipv6_prefix_rm>:
{
   1ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba94:	4606      	mov	r6, r0
   1ba96:	460f      	mov	r7, r1
   1ba98:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba9a:	2400      	movs	r4, #0
   1ba9c:	e000      	b.n	1baa0 <net_if_ipv6_prefix_rm+0x10>
   1ba9e:	3401      	adds	r4, #1
   1baa0:	2c01      	cmp	r4, #1
   1baa2:	dc2f      	bgt.n	1bb04 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1baa4:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1baa8:	0093      	lsls	r3, r2, #2
   1baaa:	461a      	mov	r2, r3
   1baac:	4433      	add	r3, r6
   1baae:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1bab2:	2d00      	cmp	r5, #0
   1bab4:	d0f3      	beq.n	1ba9e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bab6:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1baba:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1babc:	2210      	movs	r2, #16
   1babe:	4639      	mov	r1, r7
   1bac0:	4410      	add	r0, r2
   1bac2:	f00e faf1 	bl	2a0a8 <memcmp>
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d1e9      	bne.n	1ba9e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1baca:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bace:	0093      	lsls	r3, r2, #2
   1bad0:	4433      	add	r3, r6
   1bad2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bad6:	4543      	cmp	r3, r8
   1bad8:	d1e1      	bne.n	1ba9e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1bada:	0127      	lsls	r7, r4, #4
   1badc:	1b3a      	subs	r2, r7, r4
   1bade:	0093      	lsls	r3, r2, #2
   1bae0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1bae4:	18f0      	adds	r0, r6, r3
   1bae6:	3010      	adds	r0, #16
   1bae8:	f7ff ffca 	bl	1ba80 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1baec:	1b3c      	subs	r4, r7, r4
   1baee:	00a3      	lsls	r3, r4, #2
   1baf0:	4433      	add	r3, r6
   1baf2:	2200      	movs	r2, #0
   1baf4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1baf8:	4613      	mov	r3, r2
   1bafa:	4631      	mov	r1, r6
   1bafc:	4803      	ldr	r0, [pc, #12]	; (1bb0c <net_if_ipv6_prefix_rm+0x7c>)
   1bafe:	f007 fa2b 	bl	22f58 <net_mgmt_event_notify_with_info>
		return true;
   1bb02:	e000      	b.n	1bb06 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1bb04:	2500      	movs	r5, #0
}
   1bb06:	4628      	mov	r0, r5
   1bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb0c:	f0600006 	.word	0xf0600006

0001bb10 <net_if_ipv6_router_lookup>:
{
   1bb10:	b570      	push	{r4, r5, r6, lr}
   1bb12:	4605      	mov	r5, r0
   1bb14:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb16:	2400      	movs	r4, #0
   1bb18:	2c00      	cmp	r4, #0
   1bb1a:	dd01      	ble.n	1bb20 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1bb1c:	2000      	movs	r0, #0
}
   1bb1e:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1bb20:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bb24:	009a      	lsls	r2, r3, #2
   1bb26:	4b11      	ldr	r3, [pc, #68]	; (1bb6c <net_if_ipv6_router_lookup+0x5c>)
   1bb28:	4413      	add	r3, r2
   1bb2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1bb2e:	b123      	cbz	r3, 1bb3a <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1bb30:	4b0e      	ldr	r3, [pc, #56]	; (1bb6c <net_if_ipv6_router_lookup+0x5c>)
   1bb32:	4413      	add	r3, r2
   1bb34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1bb36:	2b0a      	cmp	r3, #10
   1bb38:	d001      	beq.n	1bb3e <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb3a:	3401      	adds	r4, #1
   1bb3c:	e7ec      	b.n	1bb18 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1bb3e:	4b0b      	ldr	r3, [pc, #44]	; (1bb6c <net_if_ipv6_router_lookup+0x5c>)
   1bb40:	4413      	add	r3, r2
   1bb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1bb44:	42ab      	cmp	r3, r5
   1bb46:	d1f8      	bne.n	1bb3a <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1bb48:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1bb4c:	0093      	lsls	r3, r2, #2
   1bb4e:	3328      	adds	r3, #40	; 0x28
   1bb50:	4a06      	ldr	r2, [pc, #24]	; (1bb6c <net_if_ipv6_router_lookup+0x5c>)
   1bb52:	4413      	add	r3, r2
   1bb54:	2210      	movs	r2, #16
   1bb56:	4631      	mov	r1, r6
   1bb58:	1d18      	adds	r0, r3, #4
   1bb5a:	f00e faa5 	bl	2a0a8 <memcmp>
   1bb5e:	2800      	cmp	r0, #0
   1bb60:	d1eb      	bne.n	1bb3a <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1bb62:	2344      	movs	r3, #68	; 0x44
   1bb64:	4801      	ldr	r0, [pc, #4]	; (1bb6c <net_if_ipv6_router_lookup+0x5c>)
   1bb66:	fb03 0004 	mla	r0, r3, r4, r0
   1bb6a:	bd70      	pop	{r4, r5, r6, pc}
   1bb6c:	20001b64 	.word	0x20001b64

0001bb70 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb70:	2300      	movs	r3, #0
   1bb72:	2b00      	cmp	r3, #0
   1bb74:	dd01      	ble.n	1bb7a <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1bb76:	2000      	movs	r0, #0
}
   1bb78:	4770      	bx	lr
		if (!routers[i].is_used ||
   1bb7a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1bb7e:	0091      	lsls	r1, r2, #2
   1bb80:	4a0e      	ldr	r2, [pc, #56]	; (1bbbc <net_if_ipv6_router_find_default+0x4c>)
   1bb82:	440a      	add	r2, r1
   1bb84:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1bb88:	b14a      	cbz	r2, 1bb9e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1bb8a:	4a0c      	ldr	r2, [pc, #48]	; (1bbbc <net_if_ipv6_router_find_default+0x4c>)
   1bb8c:	440a      	add	r2, r1
   1bb8e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1bb92:	b122      	cbz	r2, 1bb9e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1bb94:	4a09      	ldr	r2, [pc, #36]	; (1bbbc <net_if_ipv6_router_find_default+0x4c>)
   1bb96:	440a      	add	r2, r1
   1bb98:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1bb9a:	2a0a      	cmp	r2, #10
   1bb9c:	d001      	beq.n	1bba2 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb9e:	3301      	adds	r3, #1
   1bba0:	e7e7      	b.n	1bb72 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1bba2:	b120      	cbz	r0, 1bbae <net_if_ipv6_router_find_default+0x3e>
   1bba4:	4a05      	ldr	r2, [pc, #20]	; (1bbbc <net_if_ipv6_router_find_default+0x4c>)
   1bba6:	440a      	add	r2, r1
   1bba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bbaa:	4290      	cmp	r0, r2
   1bbac:	d1f7      	bne.n	1bb9e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1bbae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bbb2:	009a      	lsls	r2, r3, #2
   1bbb4:	4801      	ldr	r0, [pc, #4]	; (1bbbc <net_if_ipv6_router_find_default+0x4c>)
   1bbb6:	4410      	add	r0, r2
   1bbb8:	4770      	bx	lr
   1bbba:	bf00      	nop
   1bbbc:	20001b64 	.word	0x20001b64

0001bbc0 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1bbc0:	b508      	push	{r3, lr}
   1bbc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bbc6:	fb02 f201 	mul.w	r2, r2, r1
   1bbca:	4601      	mov	r1, r0
   1bbcc:	4801      	ldr	r0, [pc, #4]	; (1bbd4 <net_if_ipv6_router_update_lifetime+0x14>)
   1bbce:	f00e f975 	bl	29ebc <k_delayed_work_submit_to_queue>
   1bbd2:	bd08      	pop	{r3, pc}
   1bbd4:	20002b78 	.word	0x20002b78

0001bbd8 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbdc:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bbde:	2300      	movs	r3, #0
   1bbe0:	2b00      	cmp	r3, #0
   1bbe2:	dd04      	ble.n	1bbee <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1bbe4:	2400      	movs	r4, #0
}
   1bbe6:	4620      	mov	r0, r4
   1bbe8:	b004      	add	sp, #16
   1bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1bbee:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1bbf2:	00a5      	lsls	r5, r4, #2
   1bbf4:	4c20      	ldr	r4, [pc, #128]	; (1bc78 <net_if_ipv6_router_add+0xa0>)
   1bbf6:	442c      	add	r4, r5
   1bbf8:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1bbfc:	b10c      	cbz	r4, 1bc02 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bbfe:	3301      	adds	r3, #1
   1bc00:	e7ee      	b.n	1bbe0 <net_if_ipv6_router_add+0x8>
   1bc02:	4616      	mov	r6, r2
   1bc04:	460f      	mov	r7, r1
   1bc06:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1bc08:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bc0c:	009a      	lsls	r2, r3, #2
   1bc0e:	4c1a      	ldr	r4, [pc, #104]	; (1bc78 <net_if_ipv6_router_add+0xa0>)
   1bc10:	4414      	add	r4, r2
	router->is_used = true;
   1bc12:	2301      	movs	r3, #1
   1bc14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1bc18:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1bc1a:	230a      	movs	r3, #10
   1bc1c:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1bc1e:	466d      	mov	r5, sp
   1bc20:	6808      	ldr	r0, [r1, #0]
   1bc22:	6849      	ldr	r1, [r1, #4]
   1bc24:	68ba      	ldr	r2, [r7, #8]
   1bc26:	68fb      	ldr	r3, [r7, #12]
   1bc28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bc2a:	466d      	mov	r5, sp
   1bc2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bc2e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1bc30:	6321      	str	r1, [r4, #48]	; 0x30
   1bc32:	6362      	str	r2, [r4, #52]	; 0x34
   1bc34:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1bc36:	b966      	cbnz	r6, 1bc52 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1bc38:	2300      	movs	r3, #0
   1bc3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1bc3e:	2301      	movs	r3, #1
   1bc40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1bc44:	2300      	movs	r3, #0
   1bc46:	461a      	mov	r2, r3
   1bc48:	4641      	mov	r1, r8
   1bc4a:	480c      	ldr	r0, [pc, #48]	; (1bc7c <net_if_ipv6_router_add+0xa4>)
   1bc4c:	f007 f984 	bl	22f58 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1bc50:	e7c9      	b.n	1bbe6 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1bc52:	2301      	movs	r3, #1
   1bc54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1bc58:	2300      	movs	r3, #0
   1bc5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1bc5e:	4908      	ldr	r1, [pc, #32]	; (1bc80 <net_if_ipv6_router_add+0xa8>)
   1bc60:	4620      	mov	r0, r4
   1bc62:	f00e f8b3 	bl	29dcc <k_delayed_work_init>
   1bc66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc6a:	fb02 f206 	mul.w	r2, r2, r6
   1bc6e:	4621      	mov	r1, r4
   1bc70:	4804      	ldr	r0, [pc, #16]	; (1bc84 <net_if_ipv6_router_add+0xac>)
   1bc72:	f00e f923 	bl	29ebc <k_delayed_work_submit_to_queue>
   1bc76:	e7e5      	b.n	1bc44 <net_if_ipv6_router_add+0x6c>
   1bc78:	20001b64 	.word	0x20001b64
   1bc7c:	f0600009 	.word	0xf0600009
   1bc80:	0001b055 	.word	0x0001b055
   1bc84:	20002b78 	.word	0x20002b78

0001bc88 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc8c:	2400      	movs	r4, #0
   1bc8e:	2c00      	cmp	r4, #0
   1bc90:	dd03      	ble.n	1bc9a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1bc92:	2500      	movs	r5, #0
}
   1bc94:	4628      	mov	r0, r5
   1bc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1bc9a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bc9e:	009a      	lsls	r2, r3, #2
   1bca0:	4b0d      	ldr	r3, [pc, #52]	; (1bcd8 <net_if_ipv6_router_rm+0x50>)
   1bca2:	4413      	add	r3, r2
   1bca4:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1bca8:	b11d      	cbz	r5, 1bcb2 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1bcaa:	4b0b      	ldr	r3, [pc, #44]	; (1bcd8 <net_if_ipv6_router_rm+0x50>)
   1bcac:	4413      	add	r3, r2
   1bcae:	4283      	cmp	r3, r0
   1bcb0:	d001      	beq.n	1bcb6 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bcb2:	3401      	adds	r4, #1
   1bcb4:	e7eb      	b.n	1bc8e <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1bcb6:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1bcd8 <net_if_ipv6_router_rm+0x50>
   1bcba:	4617      	mov	r7, r2
   1bcbc:	4447      	add	r7, r8
   1bcbe:	4638      	mov	r0, r7
   1bcc0:	f00e f8a2 	bl	29e08 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1bcc4:	2200      	movs	r2, #0
   1bcc6:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1bcca:	4613      	mov	r3, r2
   1bccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bcce:	4803      	ldr	r0, [pc, #12]	; (1bcdc <net_if_ipv6_router_rm+0x54>)
   1bcd0:	f007 f942 	bl	22f58 <net_mgmt_event_notify_with_info>
		return true;
   1bcd4:	e7de      	b.n	1bc94 <net_if_ipv6_router_rm+0xc>
   1bcd6:	bf00      	nop
   1bcd8:	20001b64 	.word	0x20001b64
   1bcdc:	f060000a 	.word	0xf060000a

0001bce0 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1bce0:	b430      	push	{r4, r5}
   1bce2:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bce4:	2300      	movs	r3, #0
   1bce6:	e006      	b.n	1bcf6 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1bce8:	226c      	movs	r2, #108	; 0x6c
   1bcea:	fb02 4203 	mla	r2, r2, r3, r4
   1bcee:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1bcf0:	2a0a      	cmp	r2, #10
   1bcf2:	d014      	beq.n	1bd1e <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bcf4:	3301      	adds	r3, #1
   1bcf6:	2b02      	cmp	r3, #2
   1bcf8:	dc1d      	bgt.n	1bd36 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1bcfa:	226c      	movs	r2, #108	; 0x6c
   1bcfc:	fb02 4203 	mla	r2, r2, r3, r4
   1bd00:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1bd04:	2a00      	cmp	r2, #0
   1bd06:	d0f5      	beq.n	1bcf4 <net_if_ipv6_get_ll+0x14>
   1bd08:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1bd0c:	d0ec      	beq.n	1bce8 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1bd0e:	226c      	movs	r2, #108	; 0x6c
   1bd10:	fb02 4203 	mla	r2, r2, r3, r4
   1bd14:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1bd18:	4291      	cmp	r1, r2
   1bd1a:	d1eb      	bne.n	1bcf4 <net_if_ipv6_get_ll+0x14>
   1bd1c:	e7e4      	b.n	1bce8 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1bd1e:	206c      	movs	r0, #108	; 0x6c
   1bd20:	fb00 f003 	mul.w	r0, r0, r3
   1bd24:	3020      	adds	r0, #32
   1bd26:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bd28:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1bd2c:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bd30:	4295      	cmp	r5, r2
   1bd32:	d1df      	bne.n	1bcf4 <net_if_ipv6_get_ll+0x14>
   1bd34:	e000      	b.n	1bd38 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1bd36:	2000      	movs	r0, #0
}
   1bd38:	bc30      	pop	{r4, r5}
   1bd3a:	4770      	bx	lr

0001bd3c <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1bd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bd40:	4607      	mov	r7, r0
   1bd42:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1bd44:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1bd48:	429a      	cmp	r2, r3
   1bd4a:	f000 80d7 	beq.w	1befc <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1bd4e:	780b      	ldrb	r3, [r1, #0]
   1bd50:	2bff      	cmp	r3, #255	; 0xff
   1bd52:	d004      	beq.n	1bd5e <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1bd54:	f04f 0900 	mov.w	r9, #0
   1bd58:	4e74      	ldr	r6, [pc, #464]	; (1bf2c <net_if_ipv6_select_src_addr+0x1f0>)
   1bd5a:	46c8      	mov	r8, r9
   1bd5c:	e05b      	b.n	1be16 <net_if_ipv6_select_src_addr+0xda>
   1bd5e:	4c73      	ldr	r4, [pc, #460]	; (1bf2c <net_if_ipv6_select_src_addr+0x1f0>)
   1bd60:	e0c0      	b.n	1bee4 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1bd62:	246c      	movs	r4, #108	; 0x6c
   1bd64:	fb04 640e 	mla	r4, r4, lr, r6
   1bd68:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bd6a:	2c0a      	cmp	r4, #10
   1bd6c:	d01e      	beq.n	1bdac <net_if_ipv6_select_src_addr+0x70>
	return false;
   1bd6e:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bd70:	bb8b      	cbnz	r3, 1bdd6 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bd72:	f10e 0e01 	add.w	lr, lr, #1
   1bd76:	fa5f fe8e 	uxtb.w	lr, lr
   1bd7a:	f1be 0f02 	cmp.w	lr, #2
   1bd7e:	d846      	bhi.n	1be0e <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bd80:	46f4      	mov	ip, lr
   1bd82:	236c      	movs	r3, #108	; 0x6c
   1bd84:	fb03 f30e 	mul.w	r3, r3, lr
   1bd88:	f103 0220 	add.w	r2, r3, #32
   1bd8c:	4432      	add	r2, r6
   1bd8e:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bd90:	4433      	add	r3, r6
   1bd92:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bd96:	2b00      	cmp	r3, #0
   1bd98:	d0ea      	beq.n	1bd70 <net_if_ipv6_select_src_addr+0x34>
   1bd9a:	246c      	movs	r4, #108	; 0x6c
   1bd9c:	fb04 640e 	mla	r4, r4, lr, r6
   1bda0:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1bda4:	2c01      	cmp	r4, #1
   1bda6:	d0dc      	beq.n	1bd62 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1bda8:	2300      	movs	r3, #0
   1bdaa:	e7e1      	b.n	1bd70 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bdac:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bdae:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bdb2:	4294      	cmp	r4, r2
   1bdb4:	d1dc      	bne.n	1bd70 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1bdb6:	2300      	movs	r3, #0
   1bdb8:	e7da      	b.n	1bd70 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bdba:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1bdbc:	2300      	movs	r3, #0
   1bdbe:	2b07      	cmp	r3, #7
   1bdc0:	d81b      	bhi.n	1bdfa <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1bdc2:	f015 0f80 	tst.w	r5, #128	; 0x80
   1bdc6:	d118      	bne.n	1bdfa <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1bdc8:	3401      	adds	r4, #1
   1bdca:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1bdcc:	006d      	lsls	r5, r5, #1
   1bdce:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1bdd0:	3301      	adds	r3, #1
   1bdd2:	b2db      	uxtb	r3, r3
   1bdd4:	e7f3      	b.n	1bdbe <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bdd6:	2400      	movs	r4, #0
   1bdd8:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1bdda:	2b0f      	cmp	r3, #15
   1bddc:	d80d      	bhi.n	1bdfa <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bdde:	5ccd      	ldrb	r5, [r1, r3]
   1bde0:	226c      	movs	r2, #108	; 0x6c
   1bde2:	fb02 620c 	mla	r2, r2, ip, r6
   1bde6:	441a      	add	r2, r3
   1bde8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bdec:	4295      	cmp	r5, r2
   1bdee:	d1e4      	bne.n	1bdba <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1bdf0:	3408      	adds	r4, #8
   1bdf2:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1bdf4:	3301      	adds	r3, #1
   1bdf6:	b2db      	uxtb	r3, r3
   1bdf8:	e7ef      	b.n	1bdda <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1bdfa:	454c      	cmp	r4, r9
   1bdfc:	d3b9      	bcc.n	1bd72 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bdfe:	206c      	movs	r0, #108	; 0x6c
   1be00:	fb00 f00c 	mul.w	r0, r0, ip
   1be04:	3020      	adds	r0, #32
   1be06:	4430      	add	r0, r6
   1be08:	3010      	adds	r0, #16
			*best_so_far = len;
   1be0a:	46a1      	mov	r9, r4
   1be0c:	e7b1      	b.n	1bd72 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1be0e:	b150      	cbz	r0, 1be26 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1be10:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1be14:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1be16:	b947      	cbnz	r7, 1be2a <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1be18:	4b45      	ldr	r3, [pc, #276]	; (1bf30 <net_if_ipv6_select_src_addr+0x1f4>)
   1be1a:	429e      	cmp	r6, r3
   1be1c:	d005      	beq.n	1be2a <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be1e:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1be22:	4670      	mov	r0, lr
   1be24:	e7a9      	b.n	1bd7a <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1be26:	4640      	mov	r0, r8
   1be28:	e7f2      	b.n	1be10 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1be2a:	2f00      	cmp	r7, #0
   1be2c:	d073      	beq.n	1bf16 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be2e:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1be30:	46a8      	mov	r8, r5
   1be32:	e009      	b.n	1be48 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1be34:	206c      	movs	r0, #108	; 0x6c
   1be36:	fb00 7005 	mla	r0, r0, r5, r7
   1be3a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1be3c:	280a      	cmp	r0, #10
   1be3e:	d01b      	beq.n	1be78 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1be40:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1be42:	bb73      	cbnz	r3, 1bea2 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1be44:	3501      	adds	r5, #1
   1be46:	b2ed      	uxtb	r5, r5
   1be48:	2d02      	cmp	r5, #2
   1be4a:	d864      	bhi.n	1bf16 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1be4c:	462e      	mov	r6, r5
   1be4e:	236c      	movs	r3, #108	; 0x6c
   1be50:	fb03 f305 	mul.w	r3, r3, r5
   1be54:	f103 0220 	add.w	r2, r3, #32
   1be58:	443a      	add	r2, r7
   1be5a:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1be5c:	443b      	add	r3, r7
   1be5e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1be62:	2b00      	cmp	r3, #0
   1be64:	d0ed      	beq.n	1be42 <net_if_ipv6_select_src_addr+0x106>
   1be66:	206c      	movs	r0, #108	; 0x6c
   1be68:	fb00 7005 	mla	r0, r0, r5, r7
   1be6c:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1be70:	2801      	cmp	r0, #1
   1be72:	d0df      	beq.n	1be34 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1be74:	2300      	movs	r3, #0
   1be76:	e7e4      	b.n	1be42 <net_if_ipv6_select_src_addr+0x106>
   1be78:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1be7a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1be7e:	4290      	cmp	r0, r2
   1be80:	d1df      	bne.n	1be42 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1be82:	2300      	movs	r3, #0
   1be84:	e7dd      	b.n	1be42 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1be86:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1be88:	2300      	movs	r3, #0
   1be8a:	2b07      	cmp	r3, #7
   1be8c:	d81b      	bhi.n	1bec6 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1be8e:	f014 0f80 	tst.w	r4, #128	; 0x80
   1be92:	d118      	bne.n	1bec6 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1be94:	3001      	adds	r0, #1
   1be96:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1be98:	0064      	lsls	r4, r4, #1
   1be9a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1be9c:	3301      	adds	r3, #1
   1be9e:	b2db      	uxtb	r3, r3
   1bea0:	e7f3      	b.n	1be8a <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bea2:	2000      	movs	r0, #0
   1bea4:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1bea6:	2b0f      	cmp	r3, #15
   1bea8:	d80d      	bhi.n	1bec6 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1beaa:	5ccc      	ldrb	r4, [r1, r3]
   1beac:	226c      	movs	r2, #108	; 0x6c
   1beae:	fb02 7206 	mla	r2, r2, r6, r7
   1beb2:	441a      	add	r2, r3
   1beb4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1beb8:	4294      	cmp	r4, r2
   1beba:	d1e4      	bne.n	1be86 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1bebc:	3008      	adds	r0, #8
   1bebe:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1bec0:	3301      	adds	r3, #1
   1bec2:	b2db      	uxtb	r3, r3
   1bec4:	e7ef      	b.n	1bea6 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1bec6:	4548      	cmp	r0, r9
   1bec8:	d3bc      	bcc.n	1be44 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1beca:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1bece:	fb08 f806 	mul.w	r8, r8, r6
   1bed2:	f108 0820 	add.w	r8, r8, #32
   1bed6:	44b8      	add	r8, r7
   1bed8:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1bedc:	4681      	mov	r9, r0
   1bede:	e7b1      	b.n	1be44 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1bee0:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1bee4:	b97f      	cbnz	r7, 1bf06 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1bee6:	4b12      	ldr	r3, [pc, #72]	; (1bf30 <net_if_ipv6_select_src_addr+0x1f4>)
   1bee8:	429c      	cmp	r4, r3
   1beea:	d009      	beq.n	1bf00 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1beec:	2101      	movs	r1, #1
   1beee:	4620      	mov	r0, r4
   1bef0:	f7ff fef6 	bl	1bce0 <net_if_ipv6_get_ll>
			if (addr) {
   1bef4:	4680      	mov	r8, r0
   1bef6:	2800      	cmp	r0, #0
   1bef8:	d0f2      	beq.n	1bee0 <net_if_ipv6_select_src_addr+0x1a4>
   1befa:	e006      	b.n	1bf0a <net_if_ipv6_select_src_addr+0x1ce>
   1befc:	4c0b      	ldr	r4, [pc, #44]	; (1bf2c <net_if_ipv6_select_src_addr+0x1f0>)
   1befe:	e7f1      	b.n	1bee4 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1bf00:	f04f 0800 	mov.w	r8, #0
   1bf04:	e001      	b.n	1bf0a <net_if_ipv6_select_src_addr+0x1ce>
   1bf06:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1bf0a:	b127      	cbz	r7, 1bf16 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1bf0c:	2101      	movs	r1, #1
   1bf0e:	4638      	mov	r0, r7
   1bf10:	f7ff fee6 	bl	1bce0 <net_if_ipv6_get_ll>
   1bf14:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1bf16:	f1b8 0f00 	cmp.w	r8, #0
   1bf1a:	d002      	beq.n	1bf22 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1bf1c:	4640      	mov	r0, r8
}
   1bf1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1bf22:	f003 fd67 	bl	1f9f4 <net_ipv6_unspecified_address>
   1bf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bf2a:	bf00      	nop
   1bf2c:	2000d1c0 	.word	0x2000d1c0
   1bf30:	2000d460 	.word	0x2000d460

0001bf34 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1bf34:	b510      	push	{r4, lr}
   1bf36:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1bf38:	f7e6 f86a 	bl	2010 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1bf3c:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1bf40:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1bf44:	fb03 0012 	mls	r0, r3, r2, r0
   1bf48:	bd10      	pop	{r4, pc}
	...

0001bf4c <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf4e:	4605      	mov	r5, r0
   1bf50:	460e      	mov	r6, r1
   1bf52:	4617      	mov	r7, r2
	return list->head;
   1bf54:	4b11      	ldr	r3, [pc, #68]	; (1bf9c <net_if_call_link_cb+0x50>)
   1bf56:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1bf58:	b11b      	cbz	r3, 1bf62 <net_if_call_link_cb+0x16>
   1bf5a:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf5c:	b143      	cbz	r3, 1bf70 <net_if_call_link_cb+0x24>
	return node->next;
   1bf5e:	681c      	ldr	r4, [r3, #0]
   1bf60:	e006      	b.n	1bf70 <net_if_call_link_cb+0x24>
   1bf62:	461c      	mov	r4, r3
   1bf64:	e004      	b.n	1bf70 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf66:	4623      	mov	r3, r4
   1bf68:	e00e      	b.n	1bf88 <net_if_call_link_cb+0x3c>
   1bf6a:	4622      	mov	r2, r4
   1bf6c:	4623      	mov	r3, r4
   1bf6e:	4614      	mov	r4, r2
   1bf70:	b193      	cbz	r3, 1bf98 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1bf72:	685b      	ldr	r3, [r3, #4]
   1bf74:	463a      	mov	r2, r7
   1bf76:	4631      	mov	r1, r6
   1bf78:	4628      	mov	r0, r5
   1bf7a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1bf7c:	2c00      	cmp	r4, #0
   1bf7e:	d0f4      	beq.n	1bf6a <net_if_call_link_cb+0x1e>
   1bf80:	4622      	mov	r2, r4
   1bf82:	2c00      	cmp	r4, #0
   1bf84:	d0ef      	beq.n	1bf66 <net_if_call_link_cb+0x1a>
	return node->next;
   1bf86:	6823      	ldr	r3, [r4, #0]
   1bf88:	b113      	cbz	r3, 1bf90 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf8a:	b11a      	cbz	r2, 1bf94 <net_if_call_link_cb+0x48>
	return node->next;
   1bf8c:	6822      	ldr	r2, [r4, #0]
   1bf8e:	e7ed      	b.n	1bf6c <net_if_call_link_cb+0x20>
   1bf90:	2200      	movs	r2, #0
   1bf92:	e7eb      	b.n	1bf6c <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf94:	2200      	movs	r2, #0
   1bf96:	e7e9      	b.n	1bf6c <net_if_call_link_cb+0x20>
	}
}
   1bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf9a:	bf00      	nop
   1bf9c:	20001b54 	.word	0x20001b54

0001bfa0 <net_if_send_data>:
{
   1bfa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfa4:	4606      	mov	r6, r0
   1bfa6:	460c      	mov	r4, r1
	return pkt->context;
   1bfa8:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1bfaa:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1bfae:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1bfb2:	f3bf 8f5b 	dmb	ish
   1bfb6:	68c3      	ldr	r3, [r0, #12]
   1bfb8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1bfbc:	f013 0f01 	tst.w	r3, #1
   1bfc0:	d10a      	bne.n	1bfd8 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1bfc2:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1bfc6:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1bfc8:	b10f      	cbz	r7, 1bfce <net_if_send_data+0x2e>
   1bfca:	2d02      	cmp	r5, #2
   1bfcc:	d02e      	beq.n	1c02c <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1bfce:	2d02      	cmp	r5, #2
   1bfd0:	d050      	beq.n	1c074 <net_if_send_data+0xd4>
}
   1bfd2:	4628      	mov	r0, r5
   1bfd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfd8:	f3bf 8f5b 	dmb	ish
   1bfdc:	68c3      	ldr	r3, [r0, #12]
   1bfde:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1bfe2:	f013 0f02 	tst.w	r3, #2
   1bfe6:	d101      	bne.n	1bfec <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1bfe8:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1bfea:	b173      	cbz	r3, 1c00a <net_if_send_data+0x6a>
	return pkt->family;
   1bfec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1bff0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bff4:	2b0a      	cmp	r3, #10
   1bff6:	d00f      	beq.n	1c018 <net_if_send_data+0x78>
   1bff8:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1bffa:	6873      	ldr	r3, [r6, #4]
   1bffc:	685b      	ldr	r3, [r3, #4]
   1bffe:	4630      	mov	r0, r6
   1c000:	4798      	blx	r3
   1c002:	4605      	mov	r5, r0
	int status = -EIO;
   1c004:	f06f 0804 	mvn.w	r8, #4
   1c008:	e7de      	b.n	1bfc8 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1c00a:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1c00c:	691a      	ldr	r2, [r3, #16]
   1c00e:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1c010:	7d1b      	ldrb	r3, [r3, #20]
   1c012:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1c016:	e7e9      	b.n	1bfec <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1c018:	4620      	mov	r0, r4
   1c01a:	f005 f9fb 	bl	21414 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1c01e:	4601      	mov	r1, r0
   1c020:	2800      	cmp	r0, #0
   1c022:	d1ea      	bne.n	1bffa <net_if_send_data+0x5a>
	int status = -EIO;
   1c024:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1c028:	2501      	movs	r5, #1
   1c02a:	e7cd      	b.n	1bfc8 <net_if_send_data+0x28>
	if (!context) {
   1c02c:	2f00      	cmp	r7, #0
   1c02e:	d0ce      	beq.n	1bfce <net_if_send_data+0x2e>
	if (context->send_cb) {
   1c030:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1c034:	f1bb 0f00 	cmp.w	fp, #0
   1c038:	d004      	beq.n	1c044 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1c03a:	683b      	ldr	r3, [r7, #0]
   1c03c:	4652      	mov	r2, sl
   1c03e:	4641      	mov	r1, r8
   1c040:	4638      	mov	r0, r7
   1c042:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1c044:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c048:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c04c:	d009      	beq.n	1c062 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1c04e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c050:	2b11      	cmp	r3, #17
   1c052:	d008      	beq.n	1c066 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c054:	2b06      	cmp	r3, #6
   1c056:	d1ba      	bne.n	1bfce <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c058:	4a0b      	ldr	r2, [pc, #44]	; (1c088 <net_if_send_data+0xe8>)
   1c05a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c05c:	3301      	adds	r3, #1
   1c05e:	6593      	str	r3, [r2, #88]	; 0x58
   1c060:	e7b5      	b.n	1bfce <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c062:	2311      	movs	r3, #17
   1c064:	e7f4      	b.n	1c050 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c066:	4a08      	ldr	r2, [pc, #32]	; (1c088 <net_if_send_data+0xe8>)
   1c068:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c06c:	3301      	adds	r3, #1
   1c06e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c072:	e7ac      	b.n	1bfce <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c076:	2b00      	cmp	r3, #0
   1c078:	d0ab      	beq.n	1bfd2 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c07a:	4642      	mov	r2, r8
   1c07c:	4649      	mov	r1, r9
   1c07e:	4630      	mov	r0, r6
   1c080:	f7ff ff64 	bl	1bf4c <net_if_call_link_cb>
   1c084:	e7a5      	b.n	1bfd2 <net_if_send_data+0x32>
   1c086:	bf00      	nop
   1c088:	20002a58 	.word	0x20002a58

0001c08c <net_if_tx>:
{
   1c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c090:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c092:	f850 3b18 	ldr.w	r3, [r0], #24
   1c096:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c09a:	2100      	movs	r1, #0
   1c09c:	f00c fd56 	bl	28b4c <k_queue_get>
	if (!pkt) {
   1c0a0:	2800      	cmp	r0, #0
   1c0a2:	d062      	beq.n	1c16a <net_if_tx+0xde>
   1c0a4:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c0a6:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c0aa:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c0ac:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c0b0:	f3bf 8f5b 	dmb	ish
   1c0b4:	68f3      	ldr	r3, [r6, #12]
   1c0b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c0ba:	f013 0f01 	tst.w	r3, #1
   1c0be:	d039      	beq.n	1c134 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c0c0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c0c2:	2400      	movs	r4, #0
   1c0c4:	e002      	b.n	1c0cc <net_if_tx+0x40>
		bytes += buf->len;
   1c0c6:	899a      	ldrh	r2, [r3, #12]
   1c0c8:	4414      	add	r4, r2
		buf = buf->frags;
   1c0ca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c0cc:	2b00      	cmp	r3, #0
   1c0ce:	d1fa      	bne.n	1c0c6 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c0d0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c0d4:	f043 0301 	orr.w	r3, r3, #1
   1c0d8:	f36f 0341 	bfc	r3, #1, #1
   1c0dc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c0e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c0e4:	4629      	mov	r1, r5
   1c0e6:	4630      	mov	r0, r6
   1c0e8:	4798      	blx	r3
   1c0ea:	4681      	mov	r9, r0
	if (status < 0) {
   1c0ec:	f1b9 0f00 	cmp.w	r9, #0
   1c0f0:	db23      	blt.n	1c13a <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c0f2:	4a21      	ldr	r2, [pc, #132]	; (1c178 <net_if_tx+0xec>)
   1c0f4:	6853      	ldr	r3, [r2, #4]
   1c0f6:	441c      	add	r4, r3
   1c0f8:	6054      	str	r4, [r2, #4]
	if (context) {
   1c0fa:	b18f      	cbz	r7, 1c120 <net_if_tx+0x94>
	if (!context) {
   1c0fc:	b187      	cbz	r7, 1c120 <net_if_tx+0x94>
	if (context->send_cb) {
   1c0fe:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c100:	b124      	cbz	r4, 1c10c <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c102:	683b      	ldr	r3, [r7, #0]
   1c104:	4652      	mov	r2, sl
   1c106:	4649      	mov	r1, r9
   1c108:	4638      	mov	r0, r7
   1c10a:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c10c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c110:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c114:	d01b      	beq.n	1c14e <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c116:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c118:	2b11      	cmp	r3, #17
   1c11a:	d01a      	beq.n	1c152 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c11c:	2b06      	cmp	r3, #6
   1c11e:	d01f      	beq.n	1c160 <net_if_tx+0xd4>
	if (dst->addr) {
   1c120:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c122:	b32b      	cbz	r3, 1c170 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c124:	464a      	mov	r2, r9
   1c126:	4641      	mov	r1, r8
   1c128:	4630      	mov	r0, r6
   1c12a:	f7ff ff0f 	bl	1bf4c <net_if_call_link_cb>
	return true;
   1c12e:	2001      	movs	r0, #1
   1c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c134:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c138:	e7d8      	b.n	1c0ec <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c13a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c13e:	f36f 0300 	bfc	r3, #0, #1
   1c142:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c146:	4628      	mov	r0, r5
   1c148:	f001 fa93 	bl	1d672 <net_pkt_unref>
   1c14c:	e7d5      	b.n	1c0fa <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c14e:	2311      	movs	r3, #17
   1c150:	e7e2      	b.n	1c118 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c152:	4a09      	ldr	r2, [pc, #36]	; (1c178 <net_if_tx+0xec>)
   1c154:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c158:	3301      	adds	r3, #1
   1c15a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c15e:	e7df      	b.n	1c120 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c160:	4a05      	ldr	r2, [pc, #20]	; (1c178 <net_if_tx+0xec>)
   1c162:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c164:	3301      	adds	r3, #1
   1c166:	6593      	str	r3, [r2, #88]	; 0x58
   1c168:	e7da      	b.n	1c120 <net_if_tx+0x94>
		return false;
   1c16a:	2000      	movs	r0, #0
   1c16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c170:	2001      	movs	r0, #1
}
   1c172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c176:	bf00      	nop
   1c178:	20002a58 	.word	0x20002a58

0001c17c <net_if_flush_tx>:
	return (!list->head);
   1c17c:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c17e:	b14b      	cbz	r3, 1c194 <net_if_flush_tx+0x18>
{
   1c180:	b510      	push	{r4, lr}
   1c182:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c184:	f00c fef8 	bl	28f78 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c188:	4620      	mov	r0, r4
   1c18a:	f7ff ff7f 	bl	1c08c <net_if_tx>
   1c18e:	2800      	cmp	r0, #0
   1c190:	d1fa      	bne.n	1c188 <net_if_flush_tx+0xc>
   1c192:	bd10      	pop	{r4, pc}
   1c194:	4770      	bx	lr

0001c196 <net_if_process_events>:
{
   1c196:	b538      	push	{r3, r4, r5, lr}
   1c198:	4604      	mov	r4, r0
   1c19a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1c19c:	e001      	b.n	1c1a2 <net_if_process_events+0xc>
   1c19e:	3414      	adds	r4, #20
   1c1a0:	3d01      	subs	r5, #1
   1c1a2:	b145      	cbz	r5, 1c1b6 <net_if_process_events+0x20>
		switch (event->state) {
   1c1a4:	7b63      	ldrb	r3, [r4, #13]
   1c1a6:	091b      	lsrs	r3, r3, #4
   1c1a8:	2b04      	cmp	r3, #4
   1c1aa:	d1f8      	bne.n	1c19e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1c1ac:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1c1ae:	3818      	subs	r0, #24
   1c1b0:	f7ff ff6c 	bl	1c08c <net_if_tx>
			break;
   1c1b4:	e7f3      	b.n	1c19e <net_if_process_events+0x8>
}
   1c1b6:	bd38      	pop	{r3, r4, r5, pc}

0001c1b8 <net_if_tx_thread>:
{
   1c1b8:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c1ba:	f00d f836 	bl	2922a <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1c1be:	f7ff f849 	bl	1b254 <net_if_prepare_events>
   1c1c2:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1c1c4:	4c06      	ldr	r4, [pc, #24]	; (1c1e0 <net_if_tx_thread+0x28>)
   1c1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c1ca:	4601      	mov	r1, r0
   1c1cc:	4620      	mov	r0, r4
   1c1ce:	f00c f98b 	bl	284e8 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1c1d2:	4629      	mov	r1, r5
   1c1d4:	4620      	mov	r0, r4
   1c1d6:	f7ff ffde 	bl	1c196 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c1da:	f00c fecd 	bl	28f78 <_impl_k_yield>
   1c1de:	e7ee      	b.n	1c1be <net_if_tx_thread+0x6>
   1c1e0:	2000d460 	.word	0x2000d460

0001c1e4 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1c1e4:	4a05      	ldr	r2, [pc, #20]	; (1c1fc <net_if_get_by_index+0x18>)
   1c1e6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1c1ea:	fb03 2000 	mla	r0, r3, r0, r2
   1c1ee:	4b04      	ldr	r3, [pc, #16]	; (1c200 <net_if_get_by_index+0x1c>)
   1c1f0:	4298      	cmp	r0, r3
   1c1f2:	d200      	bcs.n	1c1f6 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1c1f4:	4770      	bx	lr
		return NULL;
   1c1f6:	2000      	movs	r0, #0
   1c1f8:	e7fc      	b.n	1c1f4 <net_if_get_by_index+0x10>
   1c1fa:	bf00      	nop
   1c1fc:	2000d1c0 	.word	0x2000d1c0
   1c200:	2000d460 	.word	0x2000d460

0001c204 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1c204:	4b03      	ldr	r3, [pc, #12]	; (1c214 <net_if_get_by_iface+0x10>)
   1c206:	1ac0      	subs	r0, r0, r3
   1c208:	1140      	asrs	r0, r0, #5
   1c20a:	4b03      	ldr	r3, [pc, #12]	; (1c218 <net_if_get_by_iface+0x14>)
   1c20c:	fb03 f000 	mul.w	r0, r3, r0
}
   1c210:	b2c0      	uxtb	r0, r0
   1c212:	4770      	bx	lr
   1c214:	2000d1c0 	.word	0x2000d1c0
   1c218:	3cf3cf3d 	.word	0x3cf3cf3d

0001c21c <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1c21c:	b570      	push	{r4, r5, r6, lr}
   1c21e:	4606      	mov	r6, r0
   1c220:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c222:	4c05      	ldr	r4, [pc, #20]	; (1c238 <net_if_foreach+0x1c>)
   1c224:	e004      	b.n	1c230 <net_if_foreach+0x14>
		cb(iface, user_data);
   1c226:	4629      	mov	r1, r5
   1c228:	4620      	mov	r0, r4
   1c22a:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c22c:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c230:	4b02      	ldr	r3, [pc, #8]	; (1c23c <net_if_foreach+0x20>)
   1c232:	429c      	cmp	r4, r3
   1c234:	d1f7      	bne.n	1c226 <net_if_foreach+0xa>
	}
}
   1c236:	bd70      	pop	{r4, r5, r6, pc}
   1c238:	2000d1c0 	.word	0x2000d1c0
   1c23c:	2000d460 	.word	0x2000d460

0001c240 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1c240:	b570      	push	{r4, r5, r6, lr}
   1c242:	f3bf 8f5b 	dmb	ish
   1c246:	68c5      	ldr	r5, [r0, #12]
   1c248:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c24c:	f015 0501 	ands.w	r5, r5, #1
   1c250:	d123      	bne.n	1c29a <net_if_up+0x5a>
   1c252:	f100 060c 	add.w	r6, r0, #12
   1c256:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1c258:	6843      	ldr	r3, [r0, #4]
   1c25a:	68db      	ldr	r3, [r3, #12]
   1c25c:	b11b      	cbz	r3, 1c266 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1c25e:	2101      	movs	r1, #1
   1c260:	4798      	blx	r3
	if (status < 0) {
   1c262:	2800      	cmp	r0, #0
   1c264:	db1b      	blt.n	1c29e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c266:	f3bf 8f5b 	dmb	ish
   1c26a:	e856 3f00 	ldrex	r3, [r6]
   1c26e:	f043 0301 	orr.w	r3, r3, #1
   1c272:	e846 3200 	strex	r2, r3, [r6]
   1c276:	2a00      	cmp	r2, #0
   1c278:	d1f7      	bne.n	1c26a <net_if_up+0x2a>
   1c27a:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1c27e:	4620      	mov	r0, r4
   1c280:	f7ff f91e 	bl	1b4c0 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1c284:	4620      	mov	r0, r4
   1c286:	f7ff f821 	bl	1b2cc <net_if_start_rs>
   1c28a:	2300      	movs	r3, #0
   1c28c:	461a      	mov	r2, r3
   1c28e:	4621      	mov	r1, r4
   1c290:	4804      	ldr	r0, [pc, #16]	; (1c2a4 <net_if_up+0x64>)
   1c292:	f006 fe61 	bl	22f58 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c296:	4628      	mov	r0, r5
   1c298:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1c29a:	2500      	movs	r5, #0
   1c29c:	e7fb      	b.n	1c296 <net_if_up+0x56>
		return status;
   1c29e:	4605      	mov	r5, r0
   1c2a0:	e7f9      	b.n	1c296 <net_if_up+0x56>
   1c2a2:	bf00      	nop
   1c2a4:	d0010002 	.word	0xd0010002

0001c2a8 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1c2a8:	b510      	push	{r4, lr}
   1c2aa:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1c2ac:	f7fe ffaf 	bl	1b20e <leave_mcast_all>

	net_if_flush_tx(iface);
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	f7ff ff63 	bl	1c17c <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1c2b6:	6863      	ldr	r3, [r4, #4]
   1c2b8:	68db      	ldr	r3, [r3, #12]
   1c2ba:	b123      	cbz	r3, 1c2c6 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1c2bc:	2100      	movs	r1, #0
   1c2be:	4620      	mov	r0, r4
   1c2c0:	4798      	blx	r3
	if (status < 0) {
   1c2c2:	2800      	cmp	r0, #0
   1c2c4:	db14      	blt.n	1c2f0 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1c2c6:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2ca:	f3bf 8f5b 	dmb	ish
   1c2ce:	e853 2f00 	ldrex	r2, [r3]
   1c2d2:	f022 0201 	bic.w	r2, r2, #1
   1c2d6:	e843 2100 	strex	r1, r2, [r3]
   1c2da:	2900      	cmp	r1, #0
   1c2dc:	d1f7      	bne.n	1c2ce <net_if_down+0x26>
   1c2de:	f3bf 8f5b 	dmb	ish
   1c2e2:	2300      	movs	r3, #0
   1c2e4:	461a      	mov	r2, r3
   1c2e6:	4621      	mov	r1, r4
   1c2e8:	4802      	ldr	r0, [pc, #8]	; (1c2f4 <net_if_down+0x4c>)
   1c2ea:	f006 fe35 	bl	22f58 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1c2ee:	2000      	movs	r0, #0
}
   1c2f0:	bd10      	pop	{r4, pc}
   1c2f2:	bf00      	nop
   1c2f4:	d0010001 	.word	0xd0010001

0001c2f8 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1c2f8:	b570      	push	{r4, r5, r6, lr}
   1c2fa:	b086      	sub	sp, #24
   1c2fc:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c2fe:	4c1b      	ldr	r4, [pc, #108]	; (1c36c <net_if_init+0x74>)
   1c300:	e01b      	b.n	1c33a <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1c302:	4620      	mov	r0, r4
   1c304:	f850 3b18 	ldr.w	r3, [r0], #24
   1c308:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1c30a:	f00c fbc4 	bl	28a96 <k_queue_init>
	api->init(iface);
   1c30e:	682b      	ldr	r3, [r5, #0]
   1c310:	4620      	mov	r0, r4
   1c312:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1c314:	2340      	movs	r3, #64	; 0x40
   1c316:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1c31a:	f247 5330 	movw	r3, #30000	; 0x7530
   1c31e:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c322:	4620      	mov	r0, r4
   1c324:	f7ff fe06 	bl	1bf34 <net_if_ipv6_calc_reachable_time>
   1c328:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1c32c:	4910      	ldr	r1, [pc, #64]	; (1c370 <net_if_init+0x78>)
   1c32e:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1c332:	f00d fd4b 	bl	29dcc <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c336:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c33a:	4b0e      	ldr	r3, [pc, #56]	; (1c374 <net_if_init+0x7c>)
   1c33c:	429c      	cmp	r4, r3
   1c33e:	d1e0      	bne.n	1c302 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1c340:	4b0a      	ldr	r3, [pc, #40]	; (1c36c <net_if_init+0x74>)
   1c342:	429c      	cmp	r4, r3
   1c344:	d010      	beq.n	1c368 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c346:	2300      	movs	r3, #0
   1c348:	9305      	str	r3, [sp, #20]
   1c34a:	2201      	movs	r2, #1
   1c34c:	9204      	str	r2, [sp, #16]
   1c34e:	f06f 0208 	mvn.w	r2, #8
   1c352:	9203      	str	r2, [sp, #12]
   1c354:	9302      	str	r3, [sp, #8]
   1c356:	9301      	str	r3, [sp, #4]
   1c358:	9600      	str	r6, [sp, #0]
   1c35a:	4b07      	ldr	r3, [pc, #28]	; (1c378 <net_if_init+0x80>)
   1c35c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1c360:	4906      	ldr	r1, [pc, #24]	; (1c37c <net_if_init+0x84>)
   1c362:	4807      	ldr	r0, [pc, #28]	; (1c380 <net_if_init+0x88>)
   1c364:	f00d f9e0 	bl	29728 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1c368:	b006      	add	sp, #24
   1c36a:	bd70      	pop	{r4, r5, r6, pc}
   1c36c:	2000d1c0 	.word	0x2000d1c0
   1c370:	0001b2ed 	.word	0x0001b2ed
   1c374:	2000d460 	.word	0x2000d460
   1c378:	0001c1b9 	.word	0x0001c1b9
   1c37c:	20004d40 	.word	0x20004d40
   1c380:	20000394 	.word	0x20000394

0001c384 <net_if_post_init>:

void net_if_post_init(void)
{
   1c384:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c386:	4c05      	ldr	r4, [pc, #20]	; (1c39c <net_if_post_init+0x18>)
   1c388:	e004      	b.n	1c394 <net_if_post_init+0x10>
		net_if_up(iface);
   1c38a:	4620      	mov	r0, r4
   1c38c:	f7ff ff58 	bl	1c240 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c390:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c394:	4b02      	ldr	r3, [pc, #8]	; (1c3a0 <net_if_post_init+0x1c>)
   1c396:	429c      	cmp	r4, r3
   1c398:	d1f7      	bne.n	1c38a <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1c39a:	bd10      	pop	{r4, pc}
   1c39c:	2000d1c0 	.word	0x2000d1c0
   1c3a0:	2000d460 	.word	0x2000d460

0001c3a4 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c3a6:	4605      	mov	r5, r0
   1c3a8:	460e      	mov	r6, r1
   1c3aa:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c3ac:	2400      	movs	r4, #0
   1c3ae:	e003      	b.n	1c3b8 <check_used_port+0x14>
   1c3b0:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c3b2:	42ab      	cmp	r3, r5
   1c3b4:	d010      	beq.n	1c3d8 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c3b6:	3401      	adds	r4, #1
   1c3b8:	2c05      	cmp	r4, #5
   1c3ba:	dc2b      	bgt.n	1c414 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1c3bc:	2368      	movs	r3, #104	; 0x68
   1c3be:	4a16      	ldr	r2, [pc, #88]	; (1c418 <check_used_port+0x74>)
   1c3c0:	fb03 2304 	mla	r3, r3, r4, r2
   1c3c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c3c8:	f013 0f01 	tst.w	r3, #1
   1c3cc:	d0f3      	beq.n	1c3b6 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c3ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c3d2:	d0ed      	beq.n	1c3b0 <check_used_port+0xc>
		return IPPROTO_TCP;
   1c3d4:	2306      	movs	r3, #6
   1c3d6:	e7ec      	b.n	1c3b2 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1c3d8:	2368      	movs	r3, #104	; 0x68
   1c3da:	fb03 f304 	mul.w	r3, r3, r4
   1c3de:	3308      	adds	r3, #8
   1c3e0:	4a0d      	ldr	r2, [pc, #52]	; (1c418 <check_used_port+0x74>)
   1c3e2:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1c3e4:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c3e6:	42b2      	cmp	r2, r6
   1c3e8:	d1e5      	bne.n	1c3b6 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1c3ea:	883a      	ldrh	r2, [r7, #0]
   1c3ec:	2a0a      	cmp	r2, #10
   1c3ee:	d007      	beq.n	1c400 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1c3f0:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c3f2:	681a      	ldr	r2, [r3, #0]
   1c3f4:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1c3f6:	429a      	cmp	r2, r3
   1c3f8:	d1dd      	bne.n	1c3b6 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1c3fa:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c400:	2210      	movs	r2, #16
   1c402:	1d39      	adds	r1, r7, #4
   1c404:	6858      	ldr	r0, [r3, #4]
   1c406:	f00d fe4f 	bl	2a0a8 <memcmp>
			if (net_ipv6_addr_cmp(
   1c40a:	2800      	cmp	r0, #0
   1c40c:	d1d3      	bne.n	1c3b6 <check_used_port+0x12>
				return -EEXIST;
   1c40e:	f06f 0010 	mvn.w	r0, #16
   1c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1c414:	2000      	movs	r0, #0
   1c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c418:	20001ba8 	.word	0x20001ba8

0001c41c <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c41c:	b570      	push	{r4, r5, r6, lr}
   1c41e:	4606      	mov	r6, r0
   1c420:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1c422:	884c      	ldrh	r4, [r1, #2]
   1c424:	b16c      	cbz	r4, 1c442 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1c426:	4620      	mov	r0, r4
   1c428:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1c42a:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1c42c:	0a1c      	lsrs	r4, r3, #8
   1c42e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1c432:	b29c      	uxth	r4, r3
   1c434:	462a      	mov	r2, r5
   1c436:	4621      	mov	r1, r4
   1c438:	f7ff ffb4 	bl	1c3a4 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c43c:	f110 0f11 	cmn.w	r0, #17
   1c440:	d1f1      	bne.n	1c426 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1c442:	f7e5 fde5 	bl	2010 <sys_rand32_get>
   1c446:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1c44a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1c44e:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1c450:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1c454:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c458:	d0e7      	beq.n	1c42a <find_available_port+0xe>
		return IPPROTO_TCP;
   1c45a:	2006      	movs	r0, #6
   1c45c:	e7e6      	b.n	1c42c <find_available_port+0x10>

0001c45e <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1c45e:	b500      	push	{lr}
   1c460:	b087      	sub	sp, #28
   1c462:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1c464:	2200      	movs	r2, #0
   1c466:	a906      	add	r1, sp, #24
   1c468:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c46c:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1c46e:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c470:	9102      	str	r1, [sp, #8]
   1c472:	9301      	str	r3, [sp, #4]
   1c474:	9200      	str	r2, [sp, #0]
   1c476:	4613      	mov	r3, r2
   1c478:	2101      	movs	r1, #1
   1c47a:	f007 f9dd 	bl	23838 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1c47e:	b928      	cbnz	r0, 1c48c <queue_fin+0x2e>
   1c480:	9805      	ldr	r0, [sp, #20]
   1c482:	b118      	cbz	r0, 1c48c <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1c484:	f007 fcdc 	bl	23e40 <net_tcp_send_pkt>
	if (ret < 0) {
   1c488:	2800      	cmp	r0, #0
   1c48a:	db02      	blt.n	1c492 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1c48c:	b007      	add	sp, #28
   1c48e:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1c492:	9805      	ldr	r0, [sp, #20]
   1c494:	f001 f8ed 	bl	1d672 <net_pkt_unref>
   1c498:	e7f8      	b.n	1c48c <queue_fin+0x2e>

0001c49a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1c49a:	b500      	push	{lr}
   1c49c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c49e:	a901      	add	r1, sp, #4
   1c4a0:	f007 fb1c 	bl	23adc <net_tcp_get_hdr>
	if (tcp_hdr) {
   1c4a4:	b128      	cbz	r0, 1c4b2 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1c4a6:	7b00      	ldrb	r0, [r0, #12]
   1c4a8:	0900      	lsrs	r0, r0, #4
   1c4aa:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1c4ac:	b007      	add	sp, #28
   1c4ae:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1c4b2:	2000      	movs	r0, #0
   1c4b4:	e7fa      	b.n	1c4ac <tcp_hdr_len+0x12>

0001c4b6 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1c4b6:	b570      	push	{r4, r5, r6, lr}
   1c4b8:	b082      	sub	sp, #8
   1c4ba:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1c4bc:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c4be:	2400      	movs	r4, #0
   1c4c0:	e002      	b.n	1c4c8 <set_appdata_values+0x12>
		bytes += buf->len;
   1c4c2:	899a      	ldrh	r2, [r3, #12]
   1c4c4:	4414      	add	r4, r2
		buf = buf->frags;
   1c4c6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c4c8:	2b00      	cmp	r3, #0
   1c4ca:	d1fa      	bne.n	1c4c2 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1c4cc:	2911      	cmp	r1, #17
   1c4ce:	d020      	beq.n	1c512 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1c4d0:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1c4d2:	2906      	cmp	r1, #6
   1c4d4:	d01f      	beq.n	1c516 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c4d6:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1c4da:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c4de:	4419      	add	r1, r3
   1c4e0:	4431      	add	r1, r6
   1c4e2:	f10d 0206 	add.w	r2, sp, #6
   1c4e6:	b289      	uxth	r1, r1
   1c4e8:	4628      	mov	r0, r5
   1c4ea:	f001 fb91 	bl	1dc10 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1c4ee:	b120      	cbz	r0, 1c4fa <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1c4f0:	6883      	ldr	r3, [r0, #8]
   1c4f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c4f6:	4413      	add	r3, r2
	pkt->appdata = data;
   1c4f8:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c4fa:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1c4fe:	1ae3      	subs	r3, r4, r3
   1c500:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1c502:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c506:	1b1b      	subs	r3, r3, r4
   1c508:	b29b      	uxth	r3, r3
   1c50a:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1c50c:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1c50e:	b002      	add	sp, #8
   1c510:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1c512:	2608      	movs	r6, #8
   1c514:	e7dd      	b.n	1c4d2 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1c516:	4628      	mov	r0, r5
   1c518:	f7ff ffbf 	bl	1c49a <tcp_hdr_len>
   1c51c:	b286      	uxth	r6, r0
   1c51e:	e7da      	b.n	1c4d6 <set_appdata_values+0x20>

0001c520 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c522:	460d      	mov	r5, r1
   1c524:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c526:	2300      	movs	r3, #0
   1c528:	e000      	b.n	1c52c <packet_received+0xc>
   1c52a:	3301      	adds	r3, #1
   1c52c:	2b05      	cmp	r3, #5
   1c52e:	dc12      	bgt.n	1c556 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1c530:	2268      	movs	r2, #104	; 0x68
   1c532:	4926      	ldr	r1, [pc, #152]	; (1c5cc <packet_received+0xac>)
   1c534:	fb02 1203 	mla	r2, r2, r3, r1
   1c538:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c53c:	f012 0f01 	tst.w	r2, #1
   1c540:	d0f3      	beq.n	1c52a <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1c542:	2268      	movs	r2, #104	; 0x68
   1c544:	fb02 1203 	mla	r2, r2, r3, r1
   1c548:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c54a:	4290      	cmp	r0, r2
   1c54c:	d1ed      	bne.n	1c52a <packet_received+0xa>
			return &contexts[i];
   1c54e:	2268      	movs	r2, #104	; 0x68
   1c550:	fb02 1403 	mla	r4, r2, r3, r1
   1c554:	e000      	b.n	1c558 <packet_received+0x38>
	return NULL;
   1c556:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1c558:	6968      	ldr	r0, [r5, #20]
   1c55a:	f7ff fe53 	bl	1c204 <net_if_get_by_iface>
   1c55e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1c562:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1c564:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c566:	b373      	cbz	r3, 1c5c6 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c568:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c56c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c570:	d017      	beq.n	1c5a2 <packet_received+0x82>
		return IPPROTO_TCP;
   1c572:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1c574:	2a06      	cmp	r2, #6
   1c576:	d016      	beq.n	1c5a6 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1c578:	2111      	movs	r1, #17
   1c57a:	4628      	mov	r0, r5
   1c57c:	f7ff ff9b 	bl	1c4b6 <set_appdata_values>
	return pkt->appdatalen;
   1c580:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1c582:	4a13      	ldr	r2, [pc, #76]	; (1c5d0 <packet_received+0xb0>)
   1c584:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c586:	440b      	add	r3, r1
   1c588:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1c58a:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1c58c:	4633      	mov	r3, r6
   1c58e:	2200      	movs	r2, #0
   1c590:	4629      	mov	r1, r5
   1c592:	4620      	mov	r0, r4
   1c594:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c596:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c59a:	f00c fe46 	bl	2922a <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1c59e:	2000      	movs	r0, #0
   1c5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c5a2:	2211      	movs	r2, #17
   1c5a4:	e7e6      	b.n	1c574 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1c5a6:	f013 0f20 	tst.w	r3, #32
   1c5aa:	d00a      	beq.n	1c5c2 <packet_received+0xa2>
		return SOCK_STREAM;
   1c5ac:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1c5ae:	2b01      	cmp	r3, #1
   1c5b0:	d1e6      	bne.n	1c580 <packet_received+0x60>
   1c5b2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	d1e3      	bne.n	1c580 <packet_received+0x60>
			net_pkt_unref(pkt);
   1c5b8:	4628      	mov	r0, r5
   1c5ba:	f001 f85a 	bl	1d672 <net_pkt_unref>
			return NET_OK;
   1c5be:	2000      	movs	r0, #0
   1c5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1c5c2:	2302      	movs	r3, #2
   1c5c4:	e7f3      	b.n	1c5ae <packet_received+0x8e>
		return NET_DROP;
   1c5c6:	2002      	movs	r0, #2
}
   1c5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5ca:	bf00      	nop
   1c5cc:	20001ba8 	.word	0x20001ba8
   1c5d0:	20002a58 	.word	0x20002a58

0001c5d4 <send_reset>:
{
   1c5d4:	b510      	push	{r4, lr}
   1c5d6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c5d8:	aa02      	add	r2, sp, #8
   1c5da:	2300      	movs	r3, #0
   1c5dc:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1c5e0:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c5e2:	f007 f85a 	bl	2369a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1c5e6:	4604      	mov	r4, r0
   1c5e8:	b928      	cbnz	r0, 1c5f6 <send_reset+0x22>
   1c5ea:	9801      	ldr	r0, [sp, #4]
   1c5ec:	b118      	cbz	r0, 1c5f6 <send_reset+0x22>
	ret = net_send_data(pkt);
   1c5ee:	f7fe fc3f 	bl	1ae70 <net_send_data>
	if (ret < 0) {
   1c5f2:	1e04      	subs	r4, r0, #0
   1c5f4:	db02      	blt.n	1c5fc <send_reset+0x28>
}
   1c5f6:	4620      	mov	r0, r4
   1c5f8:	b002      	add	sp, #8
   1c5fa:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1c5fc:	9801      	ldr	r0, [sp, #4]
   1c5fe:	f001 f838 	bl	1d672 <net_pkt_unref>
   1c602:	e7f8      	b.n	1c5f6 <send_reset+0x22>

0001c604 <send_ack>:
{
   1c604:	b510      	push	{r4, lr}
   1c606:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c608:	2300      	movs	r3, #0
   1c60a:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1c60c:	b932      	cbnz	r2, 1c61c <send_ack+0x18>
   1c60e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c610:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1c614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1c618:	429a      	cmp	r2, r3
   1c61a:	d011      	beq.n	1c640 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1c61c:	aa01      	add	r2, sp, #4
   1c61e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c620:	f007 f99c 	bl	2395c <net_tcp_prepare_ack>
	if (ret) {
   1c624:	4604      	mov	r4, r0
   1c626:	b110      	cbz	r0, 1c62e <send_ack+0x2a>
}
   1c628:	4620      	mov	r0, r4
   1c62a:	b002      	add	sp, #8
   1c62c:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1c62e:	9801      	ldr	r0, [sp, #4]
   1c630:	f007 fc06 	bl	23e40 <net_tcp_send_pkt>
	if (ret < 0) {
   1c634:	1e04      	subs	r4, r0, #0
   1c636:	daf7      	bge.n	1c628 <send_ack+0x24>
		net_pkt_unref(pkt);
   1c638:	9801      	ldr	r0, [sp, #4]
   1c63a:	f001 f81a 	bl	1d672 <net_pkt_unref>
   1c63e:	e7f3      	b.n	1c628 <send_ack+0x24>
		return 0;
   1c640:	2400      	movs	r4, #0
   1c642:	e7f1      	b.n	1c628 <send_ack+0x24>

0001c644 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1c644:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1c646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c64a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c64e:	2b02      	cmp	r3, #2
   1c650:	d001      	beq.n	1c656 <_tcp_synack_received+0x12>
}
   1c652:	2002      	movs	r0, #2
   1c654:	4770      	bx	lr
{
   1c656:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c658:	b09f      	sub	sp, #124	; 0x7c
   1c65a:	4615      	mov	r5, r2
   1c65c:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1c65e:	6948      	ldr	r0, [r1, #20]
   1c660:	f7ff fdd0 	bl	1c204 <net_if_get_by_iface>
   1c664:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1c668:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c66a:	a911      	add	r1, sp, #68	; 0x44
   1c66c:	4620      	mov	r0, r4
   1c66e:	f007 fa35 	bl	23adc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c672:	4606      	mov	r6, r0
   1c674:	b1f8      	cbz	r0, 1c6b6 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1c676:	7b43      	ldrb	r3, [r0, #13]
   1c678:	f013 0f04 	tst.w	r3, #4
   1c67c:	d11e      	bne.n	1c6bc <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1c67e:	f013 0f02 	tst.w	r3, #2
   1c682:	d013      	beq.n	1c6ac <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1c684:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1c686:	7901      	ldrb	r1, [r0, #4]
   1c688:	7943      	ldrb	r3, [r0, #5]
   1c68a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c68e:	7980      	ldrb	r0, [r0, #6]
   1c690:	79f3      	ldrb	r3, [r6, #7]
   1c692:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c696:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1c69a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1c69c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1c6a0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1c6a2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c6a6:	3301      	adds	r3, #1
   1c6a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1c6ac:	7b73      	ldrb	r3, [r6, #13]
   1c6ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c6b2:	2b12      	cmp	r3, #18
   1c6b4:	d019      	beq.n	1c6ea <_tcp_synack_received+0xa6>
}
   1c6b6:	2002      	movs	r0, #2
   1c6b8:	b01f      	add	sp, #124	; 0x7c
   1c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c6bc:	4621      	mov	r1, r4
   1c6be:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c6c0:	f007 fa87 	bl	23bd2 <net_tcp_validate_seq>
   1c6c4:	b160      	cbz	r0, 1c6e0 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1c6c6:	4a40      	ldr	r2, [pc, #256]	; (1c7c8 <_tcp_synack_received+0x184>)
   1c6c8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c6ca:	3301      	adds	r3, #1
   1c6cc:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1c6ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	d0f0      	beq.n	1c6b6 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1c6d4:	682a      	ldr	r2, [r5, #0]
   1c6d6:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1c6da:	4628      	mov	r0, r5
   1c6dc:	4798      	blx	r3
   1c6de:	e7ea      	b.n	1c6b6 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1c6e0:	4a39      	ldr	r2, [pc, #228]	; (1c7c8 <_tcp_synack_received+0x184>)
   1c6e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c6e4:	3301      	adds	r3, #1
   1c6e6:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c6e8:	e7e5      	b.n	1c6b6 <_tcp_synack_received+0x72>
	return pkt->family;
   1c6ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c6ee:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1c6f2:	2b0a      	cmp	r3, #10
   1c6f4:	d1df      	bne.n	1c6b6 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1c6f6:	f04f 0e0a 	mov.w	lr, #10
   1c6fa:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1c6fe:	8833      	ldrh	r3, [r6, #0]
   1c700:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1c704:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1c706:	ac16      	add	r4, sp, #88	; 0x58
   1c708:	68bb      	ldr	r3, [r7, #8]
   1c70a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1c70e:	6859      	ldr	r1, [r3, #4]
   1c710:	689a      	ldr	r2, [r3, #8]
   1c712:	68db      	ldr	r3, [r3, #12]
   1c714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c716:	ac06      	add	r4, sp, #24
   1c718:	ab16      	add	r3, sp, #88	; 0x58
   1c71a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c71c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1c720:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1c724:	8872      	ldrh	r2, [r6, #2]
   1c726:	0a13      	lsrs	r3, r2, #8
   1c728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c72c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1c730:	ac1a      	add	r4, sp, #104	; 0x68
   1c732:	68bb      	ldr	r3, [r7, #8]
   1c734:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c738:	6859      	ldr	r1, [r3, #4]
   1c73a:	689a      	ldr	r2, [r3, #8]
   1c73c:	68db      	ldr	r3, [r3, #12]
   1c73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c740:	ac0c      	add	r4, sp, #48	; 0x30
   1c742:	ab1e      	add	r3, sp, #120	; 0x78
   1c744:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1c74c:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1c74e:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1c752:	f008 fcdb 	bl	2510c <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1c756:	8832      	ldrh	r2, [r6, #0]
   1c758:	0a13      	lsrs	r3, r2, #8
   1c75a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1c75e:	8871      	ldrh	r1, [r6, #2]
   1c760:	0a0a      	lsrs	r2, r1, #8
   1c762:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1c766:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c768:	9403      	str	r4, [sp, #12]
   1c76a:	9502      	str	r5, [sp, #8]
   1c76c:	4917      	ldr	r1, [pc, #92]	; (1c7cc <_tcp_synack_received+0x188>)
   1c76e:	9101      	str	r1, [sp, #4]
   1c770:	9200      	str	r2, [sp, #0]
   1c772:	b29b      	uxth	r3, r3
   1c774:	aa0b      	add	r2, sp, #44	; 0x2c
   1c776:	a905      	add	r1, sp, #20
   1c778:	2006      	movs	r0, #6
   1c77a:	f008 fce5 	bl	25148 <net_conn_register>
		if (ret < 0) {
   1c77e:	2800      	cmp	r0, #0
   1c780:	db1c      	blt.n	1c7bc <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1c782:	2104      	movs	r1, #4
   1c784:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c786:	f006 ffba 	bl	236fe <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c78a:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c78e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c792:	f043 0304 	orr.w	r3, r3, #4
   1c796:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1c79a:	2200      	movs	r2, #0
   1c79c:	a905      	add	r1, sp, #20
   1c79e:	4628      	mov	r0, r5
   1c7a0:	f7ff ff30 	bl	1c604 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1c7a4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c7a6:	30ac      	adds	r0, #172	; 0xac
   1c7a8:	f00c fd3f 	bl	2922a <_impl_k_sem_give>
		if (context->connect_cb) {
   1c7ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d081      	beq.n	1c6b6 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1c7b2:	682a      	ldr	r2, [r5, #0]
   1c7b4:	2100      	movs	r1, #0
   1c7b6:	4628      	mov	r0, r5
   1c7b8:	4798      	blx	r3
   1c7ba:	e77c      	b.n	1c6b6 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1c7bc:	a905      	add	r1, sp, #20
   1c7be:	4628      	mov	r0, r5
   1c7c0:	f7ff ff08 	bl	1c5d4 <send_reset>
			return NET_DROP;
   1c7c4:	e777      	b.n	1c6b6 <_tcp_synack_received+0x72>
   1c7c6:	bf00      	nop
   1c7c8:	20002a58 	.word	0x20002a58
   1c7cc:	0001cd25 	.word	0x0001cd25

0001c7d0 <create_udp_packet>:
{
   1c7d0:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1c7d2:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1c7d6:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c7da:	2c0a      	cmp	r4, #10
   1c7dc:	d118      	bne.n	1c810 <create_udp_packet+0x40>
   1c7de:	461e      	mov	r6, r3
   1c7e0:	4615      	mov	r5, r2
   1c7e2:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1c7e4:	1d13      	adds	r3, r2, #4
   1c7e6:	2200      	movs	r2, #0
   1c7e8:	f003 f9a4 	bl	1fb34 <net_ipv6_create>
   1c7ec:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1c7ee:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1c7f2:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1c7f6:	886b      	ldrh	r3, [r5, #2]
   1c7f8:	4402      	add	r2, r0
   1c7fa:	4620      	mov	r0, r4
   1c7fc:	f006 fd90 	bl	23320 <net_udp_insert>
		if (!tmp) {
   1c800:	4605      	mov	r5, r0
   1c802:	b140      	cbz	r0, 1c816 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1c804:	4601      	mov	r1, r0
   1c806:	4620      	mov	r0, r4
   1c808:	f003 fbf0 	bl	1ffec <net_ipv6_finalize>
	*out_pkt = pkt;
   1c80c:	6035      	str	r5, [r6, #0]
	return r;
   1c80e:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1c810:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1c814:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c816:	f06f 000b 	mvn.w	r0, #11
}
   1c81a:	bd70      	pop	{r4, r5, r6, pc}

0001c81c <send_data>:
{
   1c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c820:	4604      	mov	r4, r0
   1c822:	4615      	mov	r5, r2
   1c824:	9e06      	ldr	r6, [sp, #24]
   1c826:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1c828:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1c82a:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1c82c:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c82e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c832:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c836:	d011      	beq.n	1c85c <send_data+0x40>
		return IPPROTO_TCP;
   1c838:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c83a:	2b11      	cmp	r3, #17
   1c83c:	d010      	beq.n	1c860 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c83e:	2b06      	cmp	r3, #6
   1c840:	d113      	bne.n	1c86a <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1c842:	4620      	mov	r0, r4
   1c844:	f007 fbf8 	bl	24038 <net_tcp_send_data>
   1c848:	4680      	mov	r8, r0
		if (cb) {
   1c84a:	b125      	cbz	r5, 1c856 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1c84c:	463b      	mov	r3, r7
   1c84e:	4632      	mov	r2, r6
   1c850:	4601      	mov	r1, r0
   1c852:	4620      	mov	r0, r4
   1c854:	47a8      	blx	r5
}
   1c856:	4640      	mov	r0, r8
   1c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1c85c:	2311      	movs	r3, #17
   1c85e:	e7ec      	b.n	1c83a <send_data+0x1e>
		return net_send_data(pkt);
   1c860:	4608      	mov	r0, r1
   1c862:	f7fe fb05 	bl	1ae70 <net_send_data>
   1c866:	4680      	mov	r8, r0
   1c868:	e7f5      	b.n	1c856 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1c86a:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1c86e:	e7f2      	b.n	1c856 <send_data+0x3a>

0001c870 <net_context_get>:
{
   1c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1c874:	2802      	cmp	r0, #2
   1c876:	f000 80e9 	beq.w	1ca4c <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1c87a:	280a      	cmp	r0, #10
   1c87c:	f040 80e9 	bne.w	1ca52 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1c880:	1e4c      	subs	r4, r1, #1
   1c882:	b2e4      	uxtb	r4, r4
   1c884:	2c01      	cmp	r4, #1
   1c886:	f200 80e7 	bhi.w	1ca58 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1c88a:	2a11      	cmp	r2, #17
   1c88c:	d002      	beq.n	1c894 <net_context_get+0x24>
   1c88e:	2a06      	cmp	r2, #6
   1c890:	f040 80e5 	bne.w	1ca5e <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c894:	2901      	cmp	r1, #1
   1c896:	d01c      	beq.n	1c8d2 <net_context_get+0x62>
   1c898:	2902      	cmp	r1, #2
   1c89a:	d01f      	beq.n	1c8dc <net_context_get+0x6c>
	if (!context) {
   1c89c:	2b00      	cmp	r3, #0
   1c89e:	f000 80e1 	beq.w	1ca64 <net_context_get+0x1f4>
   1c8a2:	461f      	mov	r7, r3
   1c8a4:	4690      	mov	r8, r2
   1c8a6:	460e      	mov	r6, r1
   1c8a8:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c8aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c8ae:	4870      	ldr	r0, [pc, #448]	; (1ca70 <net_context_get+0x200>)
   1c8b0:	f00c fcce 	bl	29250 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c8b4:	2400      	movs	r4, #0
   1c8b6:	2c05      	cmp	r4, #5
   1c8b8:	f300 80c5 	bgt.w	1ca46 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1c8bc:	2568      	movs	r5, #104	; 0x68
   1c8be:	4b6d      	ldr	r3, [pc, #436]	; (1ca74 <net_context_get+0x204>)
   1c8c0:	fb05 3504 	mla	r5, r5, r4, r3
   1c8c4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1c8c8:	f013 0f01 	tst.w	r3, #1
   1c8cc:	d00b      	beq.n	1c8e6 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c8ce:	3401      	adds	r4, #1
   1c8d0:	e7f1      	b.n	1c8b6 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c8d2:	2a11      	cmp	r2, #17
   1c8d4:	d1e0      	bne.n	1c898 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1c8d6:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c8da:	e076      	b.n	1c9ca <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1c8dc:	2a06      	cmp	r2, #6
   1c8de:	d1dd      	bne.n	1c89c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1c8e0:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c8e4:	e071      	b.n	1c9ca <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1c8e6:	f1b8 0f06 	cmp.w	r8, #6
   1c8ea:	d071      	beq.n	1c9d0 <net_context_get+0x160>
		contexts[i].flags = 0;
   1c8ec:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1c8f0:	4b60      	ldr	r3, [pc, #384]	; (1ca74 <net_context_get+0x204>)
   1c8f2:	fb0a 3a04 	mla	sl, sl, r4, r3
   1c8f6:	2300      	movs	r3, #0
   1c8f8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1c8fc:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c900:	2201      	movs	r2, #1
   1c902:	f3bf 8f5b 	dmb	ish
   1c906:	e853 1f00 	ldrex	r1, [r3]
   1c90a:	e843 2000 	strex	r0, r2, [r3]
   1c90e:	2800      	cmp	r0, #0
   1c910:	d1f9      	bne.n	1c906 <net_context_get+0x96>
   1c912:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1c916:	f1b9 0f0a 	cmp.w	r9, #10
   1c91a:	d06d      	beq.n	1c9f8 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1c91c:	2368      	movs	r3, #104	; 0x68
   1c91e:	4a55      	ldr	r2, [pc, #340]	; (1ca74 <net_context_get+0x204>)
   1c920:	fb03 2304 	mla	r3, r3, r4, r2
   1c924:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c928:	f022 0210 	bic.w	r2, r2, #16
   1c92c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1c930:	2e01      	cmp	r6, #1
   1c932:	d068      	beq.n	1ca06 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1c934:	2368      	movs	r3, #104	; 0x68
   1c936:	4a4f      	ldr	r2, [pc, #316]	; (1ca74 <net_context_get+0x204>)
   1c938:	fb03 2304 	mla	r3, r3, r4, r2
   1c93c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c940:	f022 0220 	bic.w	r2, r2, #32
   1c944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1c948:	f1b8 0f06 	cmp.w	r8, #6
   1c94c:	d066      	beq.n	1ca1c <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1c94e:	2368      	movs	r3, #104	; 0x68
   1c950:	4a48      	ldr	r2, [pc, #288]	; (1ca74 <net_context_get+0x204>)
   1c952:	fb03 2304 	mla	r3, r3, r4, r2
   1c956:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c95a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1c95e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1c962:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1ca74 <net_context_get+0x204>
   1c966:	2568      	movs	r5, #104	; 0x68
   1c968:	fb05 f504 	mul.w	r5, r5, r4
   1c96c:	eb08 0305 	add.w	r3, r8, r5
   1c970:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c974:	f042 0201 	orr.w	r2, r2, #1
   1c978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1c97c:	2600      	movs	r6, #0
   1c97e:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1c982:	f105 0010 	add.w	r0, r5, #16
   1c986:	4440      	add	r0, r8
   1c988:	2218      	movs	r2, #24
   1c98a:	4631      	mov	r1, r6
   1c98c:	3004      	adds	r0, #4
   1c98e:	f00d fc1f 	bl	2a1d0 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1c992:	3508      	adds	r5, #8
   1c994:	4445      	add	r5, r8
   1c996:	220c      	movs	r2, #12
   1c998:	4631      	mov	r1, r6
   1c99a:	4628      	mov	r0, r5
   1c99c:	f00d fc18 	bl	2a1d0 <memset>
		if (family == AF_INET6) {
   1c9a0:	f1b9 0f0a 	cmp.w	r9, #10
   1c9a4:	d045      	beq.n	1ca32 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1c9a6:	2068      	movs	r0, #104	; 0x68
   1c9a8:	fb00 f404 	mul.w	r4, r0, r4
   1c9ac:	3440      	adds	r4, #64	; 0x40
   1c9ae:	4831      	ldr	r0, [pc, #196]	; (1ca74 <net_context_get+0x204>)
   1c9b0:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c9b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9b6:	2101      	movs	r1, #1
   1c9b8:	3004      	adds	r0, #4
   1c9ba:	f00c fc2d 	bl	29218 <_impl_k_sem_init>
		*context = &contexts[i];
   1c9be:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1c9c2:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c9c4:	482a      	ldr	r0, [pc, #168]	; (1ca70 <net_context_get+0x200>)
   1c9c6:	f00c fc30 	bl	2922a <_impl_k_sem_give>
}
   1c9ca:	4620      	mov	r0, r4
   1c9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1c9d0:	2568      	movs	r5, #104	; 0x68
   1c9d2:	4b28      	ldr	r3, [pc, #160]	; (1ca74 <net_context_get+0x204>)
   1c9d4:	fb05 3504 	mla	r5, r5, r4, r3
   1c9d8:	4628      	mov	r0, r5
   1c9da:	f006 fdab 	bl	23534 <net_tcp_alloc>
   1c9de:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1c9e0:	2800      	cmp	r0, #0
   1c9e2:	d042      	beq.n	1ca6a <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1c9e4:	4924      	ldr	r1, [pc, #144]	; (1ca78 <net_context_get+0x208>)
   1c9e6:	3008      	adds	r0, #8
   1c9e8:	f00d f9f0 	bl	29dcc <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1c9ec:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c9ee:	4923      	ldr	r1, [pc, #140]	; (1ca7c <net_context_get+0x20c>)
   1c9f0:	3030      	adds	r0, #48	; 0x30
   1c9f2:	f00d f9eb 	bl	29dcc <k_delayed_work_init>
   1c9f6:	e779      	b.n	1c8ec <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1c9f8:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1c9fc:	f042 0210 	orr.w	r2, r2, #16
   1ca00:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1ca04:	e794      	b.n	1c930 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1ca06:	2368      	movs	r3, #104	; 0x68
   1ca08:	4a1a      	ldr	r2, [pc, #104]	; (1ca74 <net_context_get+0x204>)
   1ca0a:	fb03 2304 	mla	r3, r3, r4, r2
   1ca0e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca12:	f042 0220 	orr.w	r2, r2, #32
   1ca16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1ca1a:	e795      	b.n	1c948 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1ca1c:	2368      	movs	r3, #104	; 0x68
   1ca1e:	4a15      	ldr	r2, [pc, #84]	; (1ca74 <net_context_get+0x204>)
   1ca20:	fb03 2304 	mla	r3, r3, r4, r2
   1ca24:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1ca28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1ca2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1ca30:	e797      	b.n	1c962 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1ca32:	4629      	mov	r1, r5
   1ca34:	4650      	mov	r0, sl
   1ca36:	f7ff fcf1 	bl	1c41c <find_available_port>
   1ca3a:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1ca3c:	2800      	cmp	r0, #0
   1ca3e:	d1b2      	bne.n	1c9a6 <net_context_get+0x136>
				return -EADDRINUSE;
   1ca40:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1ca44:	e7c1      	b.n	1c9ca <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1ca46:	f06f 0401 	mvn.w	r4, #1
   1ca4a:	e7bb      	b.n	1c9c4 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1ca4c:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1ca50:	e7bb      	b.n	1c9ca <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1ca52:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1ca56:	e7b8      	b.n	1c9ca <net_context_get+0x15a>
		return -EPROTOTYPE;
   1ca58:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1ca5c:	e7b5      	b.n	1c9ca <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1ca5e:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1ca62:	e7b2      	b.n	1c9ca <net_context_get+0x15a>
		return -EINVAL;
   1ca64:	f06f 0415 	mvn.w	r4, #21
   1ca68:	e7af      	b.n	1c9ca <net_context_get+0x15a>
				return -ENOBUFS;
   1ca6a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ca6e:	e7ac      	b.n	1c9ca <net_context_get+0x15a>
   1ca70:	20001e18 	.word	0x20001e18
   1ca74:	20001ba8 	.word	0x20001ba8
   1ca78:	0001cb49 	.word	0x0001cb49
   1ca7c:	0001cb3d 	.word	0x0001cb3d

0001ca80 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1ca80:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ca82:	f3bf 8f5b 	dmb	ish
   1ca86:	e853 0f00 	ldrex	r0, [r3]
   1ca8a:	1c42      	adds	r2, r0, #1
   1ca8c:	e843 2100 	strex	r1, r2, [r3]
   1ca90:	2900      	cmp	r1, #0
   1ca92:	d1f8      	bne.n	1ca86 <net_context_ref+0x6>
   1ca94:	f3bf 8f5b 	dmb	ish
}
   1ca98:	3001      	adds	r0, #1
   1ca9a:	4770      	bx	lr

0001ca9c <net_context_unref>:
{
   1ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1ca9e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1caa0:	f3bf 8f5b 	dmb	ish
   1caa4:	e852 3f00 	ldrex	r3, [r2]
   1caa8:	1e59      	subs	r1, r3, #1
   1caaa:	e842 1400 	strex	r4, r1, [r2]
   1caae:	2c00      	cmp	r4, #0
   1cab0:	d1f8      	bne.n	1caa4 <net_context_unref+0x8>
   1cab2:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1cab6:	2b01      	cmp	r3, #1
   1cab8:	d001      	beq.n	1cabe <net_context_unref+0x22>
		return old_rc - 1;
   1caba:	1e58      	subs	r0, r3, #1
   1cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cabe:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1cac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cac4:	481b      	ldr	r0, [pc, #108]	; (1cb34 <net_context_unref+0x98>)
   1cac6:	f00c fbc3 	bl	29250 <_impl_k_sem_take>
	if (context->tcp) {
   1caca:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cacc:	b13b      	cbz	r3, 1cade <net_context_unref+0x42>
   1cace:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cad0:	2d00      	cmp	r5, #0
   1cad2:	dd15      	ble.n	1cb00 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1cad4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cad6:	f006 fe3d 	bl	23754 <net_tcp_release>
		context->tcp = NULL;
   1cada:	2300      	movs	r3, #0
   1cadc:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1cade:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1cae0:	b118      	cbz	r0, 1caea <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1cae2:	f008 fb13 	bl	2510c <net_conn_unregister>
		context->conn_handler = NULL;
   1cae6:	2300      	movs	r3, #0
   1cae8:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1caea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1caee:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1caf2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1caf6:	480f      	ldr	r0, [pc, #60]	; (1cb34 <net_context_unref+0x98>)
   1caf8:	f00c fb97 	bl	2922a <_impl_k_sem_give>
	return 0;
   1cafc:	2000      	movs	r0, #0
}
   1cafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1cb00:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1cb04:	0113      	lsls	r3, r2, #4
   1cb06:	4a0c      	ldr	r2, [pc, #48]	; (1cb38 <net_context_unref+0x9c>)
   1cb08:	58d2      	ldr	r2, [r2, r3]
   1cb0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cb0c:	429a      	cmp	r2, r3
   1cb0e:	d001      	beq.n	1cb14 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cb10:	3501      	adds	r5, #1
   1cb12:	e7dd      	b.n	1cad0 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1cb14:	4f08      	ldr	r7, [pc, #32]	; (1cb38 <net_context_unref+0x9c>)
   1cb16:	00ae      	lsls	r6, r5, #2
   1cb18:	1972      	adds	r2, r6, r5
   1cb1a:	0113      	lsls	r3, r2, #4
   1cb1c:	3328      	adds	r3, #40	; 0x28
   1cb1e:	18f8      	adds	r0, r7, r3
   1cb20:	f00d f972 	bl	29e08 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1cb24:	442e      	add	r6, r5
   1cb26:	0130      	lsls	r0, r6, #4
   1cb28:	2250      	movs	r2, #80	; 0x50
   1cb2a:	2100      	movs	r1, #0
   1cb2c:	4438      	add	r0, r7
   1cb2e:	f00d fb4f 	bl	2a1d0 <memset>
   1cb32:	e7ed      	b.n	1cb10 <net_context_unref+0x74>
   1cb34:	20001e18 	.word	0x20001e18
   1cb38:	20001e30 	.word	0x20001e30

0001cb3c <handle_fin_timeout>:
{
   1cb3c:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1cb3e:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1cb42:	f7ff ffab 	bl	1ca9c <net_context_unref>
   1cb46:	bd08      	pop	{r3, pc}

0001cb48 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1cb48:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1cb4c:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1cb50:	2b06      	cmp	r3, #6
   1cb52:	d000      	beq.n	1cb56 <handle_ack_timeout+0xe>
   1cb54:	4770      	bx	lr
{
   1cb56:	b510      	push	{r4, lr}
   1cb58:	f1a0 0208 	sub.w	r2, r0, #8
   1cb5c:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1cb5e:	2100      	movs	r1, #0
   1cb60:	4610      	mov	r0, r2
   1cb62:	f006 fdcc 	bl	236fe <net_tcp_change_state>
		net_context_unref(tcp->context);
   1cb66:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1cb6a:	f7ff ff97 	bl	1ca9c <net_context_unref>
   1cb6e:	bd10      	pop	{r4, pc}

0001cb70 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1cb70:	b570      	push	{r4, r5, r6, lr}
   1cb72:	4605      	mov	r5, r0
   1cb74:	460e      	mov	r6, r1
   1cb76:	4614      	mov	r4, r2
   1cb78:	4610      	mov	r0, r2
   1cb7a:	f7ff ff81 	bl	1ca80 <net_context_ref>
   1cb7e:	4622      	mov	r2, r4
   1cb80:	4631      	mov	r1, r6
   1cb82:	4628      	mov	r0, r5
   1cb84:	f7ff fd5e 	bl	1c644 <_tcp_synack_received>
   1cb88:	4605      	mov	r5, r0
   1cb8a:	4620      	mov	r0, r4
   1cb8c:	f7ff ff86 	bl	1ca9c <net_context_unref>
   1cb90:	4628      	mov	r0, r5
   1cb92:	bd70      	pop	{r4, r5, r6, pc}

0001cb94 <_tcp_established>:
{
   1cb94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb98:	b087      	sub	sp, #28
   1cb9a:	4607      	mov	r7, r0
   1cb9c:	460e      	mov	r6, r1
   1cb9e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1cba0:	a901      	add	r1, sp, #4
   1cba2:	4630      	mov	r0, r6
   1cba4:	f006 ff9a 	bl	23adc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1cba8:	2800      	cmp	r0, #0
   1cbaa:	f000 80b5 	beq.w	1cd18 <_tcp_established+0x184>
   1cbae:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1cbb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cbb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1cbb6:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cbba:	2b03      	cmp	r3, #3
   1cbbc:	d804      	bhi.n	1cbc8 <_tcp_established+0x34>
		return NET_DROP;
   1cbbe:	2502      	movs	r5, #2
}
   1cbc0:	4628      	mov	r0, r5
   1cbc2:	b007      	add	sp, #28
   1cbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1cbc8:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1cbcc:	f018 0f10 	tst.w	r8, #16
   1cbd0:	d116      	bne.n	1cc00 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1cbd2:	f018 0f04 	tst.w	r8, #4
   1cbd6:	d121      	bne.n	1cc1c <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1cbd8:	792a      	ldrb	r2, [r5, #4]
   1cbda:	796b      	ldrb	r3, [r5, #5]
   1cbdc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1cbe0:	79a9      	ldrb	r1, [r5, #6]
   1cbe2:	79eb      	ldrb	r3, [r5, #7]
   1cbe4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cbe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1cbec:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1cbee:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1cbf2:	1a99      	subs	r1, r3, r2
   1cbf4:	2900      	cmp	r1, #0
   1cbf6:	db2e      	blt.n	1cc56 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1cbf8:	429a      	cmp	r2, r3
   1cbfa:	d033      	beq.n	1cc64 <_tcp_established+0xd0>
		return NET_DROP;
   1cbfc:	2502      	movs	r5, #2
   1cbfe:	e7df      	b.n	1cbc0 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1cc00:	7a03      	ldrb	r3, [r0, #8]
   1cc02:	7a41      	ldrb	r1, [r0, #9]
   1cc04:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1cc08:	7a82      	ldrb	r2, [r0, #10]
   1cc0a:	7ac3      	ldrb	r3, [r0, #11]
   1cc0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1cc10:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cc14:	4620      	mov	r0, r4
   1cc16:	f007 fa49 	bl	240ac <net_tcp_ack_received>
   1cc1a:	e7da      	b.n	1cbd2 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cc1c:	4631      	mov	r1, r6
   1cc1e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cc20:	f006 ffd7 	bl	23bd2 <net_tcp_validate_seq>
   1cc24:	b928      	cbnz	r0, 1cc32 <_tcp_established+0x9e>
   1cc26:	4a3d      	ldr	r2, [pc, #244]	; (1cd1c <_tcp_established+0x188>)
   1cc28:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cc2a:	3301      	adds	r3, #1
   1cc2c:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1cc2e:	2502      	movs	r5, #2
   1cc30:	e7c6      	b.n	1cbc0 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1cc32:	4a3a      	ldr	r2, [pc, #232]	; (1cd1c <_tcp_established+0x188>)
   1cc34:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cc36:	3301      	adds	r3, #1
   1cc38:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1cc3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1cc3c:	b135      	cbz	r5, 1cc4c <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1cc3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1cc40:	685b      	ldr	r3, [r3, #4]
   1cc42:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1cc46:	2100      	movs	r1, #0
   1cc48:	4620      	mov	r0, r4
   1cc4a:	47a8      	blx	r5
		net_context_unref(context);
   1cc4c:	4620      	mov	r0, r4
   1cc4e:	f7ff ff25 	bl	1ca9c <net_context_unref>
		return NET_DROP;
   1cc52:	2502      	movs	r5, #2
   1cc54:	e7b4      	b.n	1cbc0 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1cc56:	2201      	movs	r2, #1
   1cc58:	4639      	mov	r1, r7
   1cc5a:	4620      	mov	r0, r4
   1cc5c:	f7ff fcd2 	bl	1c604 <send_ack>
		return NET_DROP;
   1cc60:	2502      	movs	r5, #2
   1cc62:	e7ad      	b.n	1cbc0 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1cc64:	2106      	movs	r1, #6
   1cc66:	4630      	mov	r0, r6
   1cc68:	f7ff fc25 	bl	1c4b6 <set_appdata_values>
	return pkt->appdatalen;
   1cc6c:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1cc70:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cc72:	f006 fcc5 	bl	23600 <net_tcp_get_recv_wnd>
   1cc76:	4581      	cmp	r9, r0
   1cc78:	d901      	bls.n	1cc7e <_tcp_established+0xea>
		return NET_DROP;
   1cc7a:	2502      	movs	r5, #2
   1cc7c:	e7a0      	b.n	1cbc0 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1cc7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cc80:	685a      	ldr	r2, [r3, #4]
   1cc82:	4631      	mov	r1, r6
   1cc84:	4638      	mov	r0, r7
   1cc86:	f7ff fc4b 	bl	1c520 <packet_received>
   1cc8a:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1cc8c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cc8e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cc92:	444b      	add	r3, r9
   1cc94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1cc98:	f018 0f01 	tst.w	r8, #1
   1cc9c:	d022      	beq.n	1cce4 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1cc9e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cca0:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1cca4:	f043 0304 	orr.w	r3, r3, #4
   1cca8:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1ccac:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ccae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1ccb2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ccb6:	2b04      	cmp	r3, #4
   1ccb8:	d02a      	beq.n	1cd10 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1ccba:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ccbc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1ccc0:	3301      	adds	r3, #1
   1ccc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1ccc6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1ccc8:	b12e      	cbz	r6, 1ccd6 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1ccca:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1cccc:	685b      	ldr	r3, [r3, #4]
   1ccce:	2200      	movs	r2, #0
   1ccd0:	4611      	mov	r1, r2
   1ccd2:	4620      	mov	r0, r4
   1ccd4:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1ccd6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ccd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ccdc:	3108      	adds	r1, #8
   1ccde:	4810      	ldr	r0, [pc, #64]	; (1cd20 <_tcp_established+0x18c>)
   1cce0:	f00d f8ec 	bl	29ebc <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1cce4:	2200      	movs	r2, #0
   1cce6:	4639      	mov	r1, r7
   1cce8:	4620      	mov	r0, r4
   1ccea:	f7ff fc8b 	bl	1c604 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1ccee:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ccf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1ccf4:	2a00      	cmp	r2, #0
   1ccf6:	f47f af63 	bne.w	1cbc0 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1ccfa:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1ccfe:	f003 0306 	and.w	r3, r3, #6
   1cd02:	2b06      	cmp	r3, #6
   1cd04:	f47f af5c 	bne.w	1cbc0 <_tcp_established+0x2c>
		net_context_unref(context);
   1cd08:	4620      	mov	r0, r4
   1cd0a:	f7ff fec7 	bl	1ca9c <net_context_unref>
   1cd0e:	e757      	b.n	1cbc0 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1cd10:	2105      	movs	r1, #5
   1cd12:	f006 fcf4 	bl	236fe <net_tcp_change_state>
   1cd16:	e7d0      	b.n	1ccba <_tcp_established+0x126>
		return NET_DROP;
   1cd18:	2502      	movs	r5, #2
   1cd1a:	e751      	b.n	1cbc0 <_tcp_established+0x2c>
   1cd1c:	20002a58 	.word	0x20002a58
   1cd20:	20002b78 	.word	0x20002b78

0001cd24 <tcp_established>:
NET_CONN_CB(tcp_established)
   1cd24:	b570      	push	{r4, r5, r6, lr}
   1cd26:	4605      	mov	r5, r0
   1cd28:	460e      	mov	r6, r1
   1cd2a:	4614      	mov	r4, r2
   1cd2c:	4610      	mov	r0, r2
   1cd2e:	f7ff fea7 	bl	1ca80 <net_context_ref>
   1cd32:	4622      	mov	r2, r4
   1cd34:	4631      	mov	r1, r6
   1cd36:	4628      	mov	r0, r5
   1cd38:	f7ff ff2c 	bl	1cb94 <_tcp_established>
   1cd3c:	4605      	mov	r5, r0
   1cd3e:	4620      	mov	r0, r4
   1cd40:	f7ff feac 	bl	1ca9c <net_context_unref>
   1cd44:	4628      	mov	r0, r5
   1cd46:	bd70      	pop	{r4, r5, r6, pc}

0001cd48 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1cd48:	b390      	cbz	r0, 1cdb0 <net_context_put+0x68>
{
   1cd4a:	b510      	push	{r4, lr}
   1cd4c:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1cd4e:	4a1d      	ldr	r2, [pc, #116]	; (1cdc4 <net_context_put+0x7c>)
   1cd50:	4290      	cmp	r0, r2
   1cd52:	d330      	bcc.n	1cdb6 <net_context_put+0x6e>
   1cd54:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1cd58:	4290      	cmp	r0, r2
   1cd5a:	d22f      	bcs.n	1cdbc <net_context_put+0x74>
	context->connect_cb = NULL;
   1cd5c:	2200      	movs	r2, #0
   1cd5e:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1cd60:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1cd62:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1cd64:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1cd68:	f012 0f40 	tst.w	r2, #64	; 0x40
   1cd6c:	d007      	beq.n	1cd7e <net_context_put+0x36>
		return IPPROTO_TCP;
   1cd6e:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cd70:	2906      	cmp	r1, #6
   1cd72:	d006      	beq.n	1cd82 <net_context_put+0x3a>
	net_context_unref(context);
   1cd74:	4620      	mov	r0, r4
   1cd76:	f7ff fe91 	bl	1ca9c <net_context_unref>
	return 0;
   1cd7a:	2000      	movs	r0, #0
   1cd7c:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cd7e:	2111      	movs	r1, #17
   1cd80:	e7f6      	b.n	1cd70 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cd82:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1cd86:	2a02      	cmp	r2, #2
   1cd88:	d001      	beq.n	1cd8e <net_context_put+0x46>
   1cd8a:	2a03      	cmp	r2, #3
   1cd8c:	d1f2      	bne.n	1cd74 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1cd8e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1cd90:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1cd94:	f013 0f04 	tst.w	r3, #4
   1cd98:	d1ec      	bne.n	1cd74 <net_context_put+0x2c>
   1cd9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cd9e:	3130      	adds	r1, #48	; 0x30
   1cda0:	4809      	ldr	r0, [pc, #36]	; (1cdc8 <net_context_put+0x80>)
   1cda2:	f00d f88b 	bl	29ebc <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1cda6:	4620      	mov	r0, r4
   1cda8:	f7ff fb59 	bl	1c45e <queue_fin>
			return 0;
   1cdac:	2000      	movs	r0, #0
   1cdae:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cdb0:	f06f 0015 	mvn.w	r0, #21
   1cdb4:	4770      	bx	lr
   1cdb6:	f06f 0015 	mvn.w	r0, #21
   1cdba:	bd10      	pop	{r4, pc}
   1cdbc:	f06f 0015 	mvn.w	r0, #21
}
   1cdc0:	bd10      	pop	{r4, pc}
   1cdc2:	bf00      	nop
   1cdc4:	20001ba8 	.word	0x20001ba8
   1cdc8:	20002b78 	.word	0x20002b78

0001cdcc <net_context_bind>:
	if (context->conn_handler) {
   1cdcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cdce:	2b00      	cmp	r3, #0
   1cdd0:	d15c      	bne.n	1ce8c <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1cdd2:	880b      	ldrh	r3, [r1, #0]
   1cdd4:	2b0a      	cmp	r3, #10
   1cdd6:	d15d      	bne.n	1ce94 <net_context_bind+0xc8>
{
   1cdd8:	b570      	push	{r4, r5, r6, lr}
   1cdda:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1cddc:	2300      	movs	r3, #0
   1cdde:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cde0:	2a17      	cmp	r2, #23
   1cde2:	d945      	bls.n	1ce70 <net_context_bind+0xa4>
   1cde4:	460d      	mov	r5, r1
   1cde6:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1cde8:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1cdea:	2bff      	cmp	r3, #255	; 0xff
   1cdec:	d009      	beq.n	1ce02 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cdee:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cdf0:	b983      	cbnz	r3, 1ce14 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cdf2:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cdf4:	bb2b      	cbnz	r3, 1ce42 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cdf6:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cdf8:	bb2b      	cbnz	r3, 1ce46 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cdfa:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cdfc:	b32b      	cbz	r3, 1ce4a <net_context_bind+0x7e>
   1cdfe:	2300      	movs	r3, #0
   1ce00:	e009      	b.n	1ce16 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1ce02:	a901      	add	r1, sp, #4
   1ce04:	1d28      	adds	r0, r5, #4
   1ce06:	f7fe fccb 	bl	1b7a0 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1ce0a:	4606      	mov	r6, r0
   1ce0c:	2800      	cmp	r0, #0
   1ce0e:	d034      	beq.n	1ce7a <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1ce10:	3608      	adds	r6, #8
   1ce12:	e007      	b.n	1ce24 <net_context_bind+0x58>
   1ce14:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1ce16:	b1d3      	cbz	r3, 1ce4e <net_context_bind+0x82>
			iface = net_if_get_default();
   1ce18:	f7fe fa4c 	bl	1b2b4 <net_if_get_default>
   1ce1c:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1ce1e:	f002 fde9 	bl	1f9f4 <net_ipv6_unspecified_address>
   1ce22:	4606      	mov	r6, r0
		if (!iface) {
   1ce24:	9801      	ldr	r0, [sp, #4]
   1ce26:	b370      	cbz	r0, 1ce86 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1ce28:	f7ff f9ec 	bl	1c204 <net_if_get_by_iface>
   1ce2c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1ce30:	230a      	movs	r3, #10
   1ce32:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1ce34:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1ce36:	8869      	ldrh	r1, [r5, #2]
   1ce38:	b989      	cbnz	r1, 1ce5e <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1ce3a:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1ce3c:	806b      	strh	r3, [r5, #2]
		return 0;
   1ce3e:	2300      	movs	r3, #0
   1ce40:	e018      	b.n	1ce74 <net_context_bind+0xa8>
   1ce42:	2300      	movs	r3, #0
   1ce44:	e7e7      	b.n	1ce16 <net_context_bind+0x4a>
   1ce46:	2300      	movs	r3, #0
   1ce48:	e7e5      	b.n	1ce16 <net_context_bind+0x4a>
   1ce4a:	2301      	movs	r3, #1
   1ce4c:	e7e3      	b.n	1ce16 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1ce4e:	a901      	add	r1, sp, #4
   1ce50:	1d28      	adds	r0, r5, #4
   1ce52:	f7fe fa5b 	bl	1b30c <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1ce56:	4606      	mov	r6, r0
   1ce58:	b190      	cbz	r0, 1ce80 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1ce5a:	3604      	adds	r6, #4
   1ce5c:	e7e2      	b.n	1ce24 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1ce5e:	462a      	mov	r2, r5
   1ce60:	4618      	mov	r0, r3
   1ce62:	f7ff fa9f 	bl	1c3a4 <check_used_port>
			if (!ret) {
   1ce66:	4603      	mov	r3, r0
   1ce68:	b920      	cbnz	r0, 1ce74 <net_context_bind+0xa8>
					addr6->sin6_port;
   1ce6a:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1ce6c:	8162      	strh	r2, [r4, #10]
   1ce6e:	e001      	b.n	1ce74 <net_context_bind+0xa8>
			return -EINVAL;
   1ce70:	f06f 0315 	mvn.w	r3, #21
}
   1ce74:	4618      	mov	r0, r3
   1ce76:	b002      	add	sp, #8
   1ce78:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1ce7a:	f06f 0301 	mvn.w	r3, #1
   1ce7e:	e7f9      	b.n	1ce74 <net_context_bind+0xa8>
				return -ENOENT;
   1ce80:	f06f 0301 	mvn.w	r3, #1
   1ce84:	e7f6      	b.n	1ce74 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1ce86:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1ce8a:	e7f3      	b.n	1ce74 <net_context_bind+0xa8>
		return -EISCONN;
   1ce8c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1ce90:	4618      	mov	r0, r3
   1ce92:	4770      	bx	lr
	return -EINVAL;
   1ce94:	f06f 0315 	mvn.w	r3, #21
   1ce98:	e7fa      	b.n	1ce90 <net_context_bind+0xc4>

0001ce9a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ce9a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1ce9e:	f013 0f10 	tst.w	r3, #16
   1cea2:	d006      	beq.n	1ceb2 <bind_default+0x18>
		return AF_INET6;
   1cea4:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1cea6:	2b0a      	cmp	r3, #10
   1cea8:	d120      	bne.n	1ceec <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1ceaa:	68c3      	ldr	r3, [r0, #12]
   1ceac:	b11b      	cbz	r3, 1ceb6 <bind_default+0x1c>
			return 0;
   1ceae:	2000      	movs	r0, #0
   1ceb0:	4770      	bx	lr
	return AF_INET;
   1ceb2:	2302      	movs	r3, #2
   1ceb4:	e7f7      	b.n	1cea6 <bind_default+0xc>
{
   1ceb6:	b530      	push	{r4, r5, lr}
   1ceb8:	b087      	sub	sp, #28
   1ceba:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1cebc:	ad06      	add	r5, sp, #24
   1cebe:	230a      	movs	r3, #10
   1cec0:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1cec4:	f002 fd96 	bl	1f9f4 <net_ipv6_unspecified_address>
   1cec8:	2210      	movs	r2, #16
   1ceca:	4601      	mov	r1, r0
   1cecc:	a801      	add	r0, sp, #4
   1cece:	f7e3 f9f7 	bl	2c0 <memcpy>
			find_available_port(context,
   1ced2:	4629      	mov	r1, r5
   1ced4:	4620      	mov	r0, r4
   1ced6:	f7ff faa1 	bl	1c41c <find_available_port>
		addr6.sin6_port =
   1ceda:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1cede:	2218      	movs	r2, #24
   1cee0:	4629      	mov	r1, r5
   1cee2:	4620      	mov	r0, r4
   1cee4:	f7ff ff72 	bl	1cdcc <net_context_bind>
}
   1cee8:	b007      	add	sp, #28
   1ceea:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1ceec:	f06f 0015 	mvn.w	r0, #21
   1cef0:	4770      	bx	lr

0001cef2 <sendto>:
{
   1cef2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cef4:	b085      	sub	sp, #20
   1cef6:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1cef8:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1cefa:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1cefe:	f010 0f01 	tst.w	r0, #1
   1cf02:	d072      	beq.n	1cfea <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cf04:	f010 0f40 	tst.w	r0, #64	; 0x40
   1cf08:	d01f      	beq.n	1cf4a <sendto+0x58>
		return IPPROTO_TCP;
   1cf0a:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cf0e:	f1be 0f06 	cmp.w	lr, #6
   1cf12:	d01d      	beq.n	1cf50 <sendto+0x5e>
   1cf14:	461f      	mov	r7, r3
   1cf16:	4616      	mov	r6, r2
   1cf18:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1cf1a:	f1be 0f11 	cmp.w	lr, #17
   1cf1e:	d024      	beq.n	1cf6a <sendto+0x78>
	if (!dst_addr) {
   1cf20:	2c00      	cmp	r4, #0
   1cf22:	d068      	beq.n	1cff6 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1cf24:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1cf26:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1cf2a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1cf2e:	2b0a      	cmp	r3, #10
   1cf30:	d164      	bne.n	1cffc <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cf32:	2e17      	cmp	r6, #23
   1cf34:	d965      	bls.n	1d002 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf36:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf38:	b9f3      	cbnz	r3, 1cf78 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf3a:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cf3c:	bb63      	cbnz	r3, 1cf98 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf3e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cf40:	bb63      	cbnz	r3, 1cf9c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cf42:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cf44:	b363      	cbz	r3, 1cfa0 <sendto+0xae>
   1cf46:	2300      	movs	r3, #0
   1cf48:	e017      	b.n	1cf7a <sendto+0x88>
	return IPPROTO_UDP;
   1cf4a:	f04f 0e11 	mov.w	lr, #17
   1cf4e:	e7de      	b.n	1cf0e <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cf50:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1cf54:	2802      	cmp	r0, #2
   1cf56:	d14b      	bne.n	1cff0 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1cf58:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cf5a:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1cf5e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1cf62:	d0d7      	beq.n	1cf14 <sendto+0x22>
			return -ESHUTDOWN;
   1cf64:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1cf68:	e03c      	b.n	1cfe4 <sendto+0xf2>
		ret = bind_default(context);
   1cf6a:	4628      	mov	r0, r5
   1cf6c:	f7ff ff95 	bl	1ce9a <bind_default>
		if (ret) {
   1cf70:	4603      	mov	r3, r0
   1cf72:	2800      	cmp	r0, #0
   1cf74:	d0d4      	beq.n	1cf20 <sendto+0x2e>
   1cf76:	e035      	b.n	1cfe4 <sendto+0xf2>
   1cf78:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	d144      	bne.n	1d008 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cf7e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1cf82:	f013 0f40 	tst.w	r3, #64	; 0x40
   1cf86:	d00d      	beq.n	1cfa4 <sendto+0xb2>
		return IPPROTO_TCP;
   1cf88:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1cf8a:	2b11      	cmp	r3, #17
   1cf8c:	d00c      	beq.n	1cfa8 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cf8e:	2b06      	cmp	r3, #6
   1cf90:	d13d      	bne.n	1d00e <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1cf92:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1cf94:	2000      	movs	r0, #0
   1cf96:	e011      	b.n	1cfbc <sendto+0xca>
   1cf98:	2300      	movs	r3, #0
   1cf9a:	e7ee      	b.n	1cf7a <sendto+0x88>
   1cf9c:	2300      	movs	r3, #0
   1cf9e:	e7ec      	b.n	1cf7a <sendto+0x88>
   1cfa0:	2301      	movs	r3, #1
   1cfa2:	e7ea      	b.n	1cf7a <sendto+0x88>
	return IPPROTO_UDP;
   1cfa4:	2311      	movs	r3, #17
   1cfa6:	e7f0      	b.n	1cf8a <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1cfa8:	ab03      	add	r3, sp, #12
   1cfaa:	4622      	mov	r2, r4
   1cfac:	4628      	mov	r0, r5
   1cfae:	f7ff fc0f 	bl	1c7d0 <create_udp_packet>
   1cfb2:	4603      	mov	r3, r0
   1cfb4:	e009      	b.n	1cfca <sendto+0xd8>
		bytes += buf->len;
   1cfb6:	8994      	ldrh	r4, [r2, #12]
   1cfb8:	4420      	add	r0, r4
		buf = buf->frags;
   1cfba:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1cfbc:	2a00      	cmp	r2, #0
   1cfbe:	d1fa      	bne.n	1cfb6 <sendto+0xc4>
	pkt->appdatalen = len;
   1cfc0:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1cfc2:	4628      	mov	r0, r5
   1cfc4:	f006 fd08 	bl	239d8 <net_tcp_queue_data>
   1cfc8:	4603      	mov	r3, r0
	if (ret < 0) {
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	db0a      	blt.n	1cfe4 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1cfce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cfd0:	9301      	str	r3, [sp, #4]
   1cfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cfd4:	9300      	str	r3, [sp, #0]
   1cfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfd8:	463a      	mov	r2, r7
   1cfda:	9903      	ldr	r1, [sp, #12]
   1cfdc:	4628      	mov	r0, r5
   1cfde:	f7ff fc1d 	bl	1c81c <send_data>
   1cfe2:	4603      	mov	r3, r0
}
   1cfe4:	4618      	mov	r0, r3
   1cfe6:	b005      	add	sp, #20
   1cfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1cfea:	f06f 0308 	mvn.w	r3, #8
   1cfee:	e7f9      	b.n	1cfe4 <sendto+0xf2>
			return -ENOTCONN;
   1cff0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1cff4:	e7f6      	b.n	1cfe4 <sendto+0xf2>
		return -EDESTADDRREQ;
   1cff6:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1cffa:	e7f3      	b.n	1cfe4 <sendto+0xf2>
		return -EINVAL;
   1cffc:	f06f 0315 	mvn.w	r3, #21
   1d000:	e7f0      	b.n	1cfe4 <sendto+0xf2>
			return -EINVAL;
   1d002:	f06f 0315 	mvn.w	r3, #21
   1d006:	e7ed      	b.n	1cfe4 <sendto+0xf2>
			return -EDESTADDRREQ;
   1d008:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d00c:	e7ea      	b.n	1cfe4 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1d00e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1d012:	e7e7      	b.n	1cfe4 <sendto+0xf2>

0001d014 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1d014:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d016:	b08f      	sub	sp, #60	; 0x3c
   1d018:	4604      	mov	r4, r0
   1d01a:	460d      	mov	r5, r1
   1d01c:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1d01e:	2300      	movs	r3, #0
   1d020:	9304      	str	r3, [sp, #16]
   1d022:	9305      	str	r3, [sp, #20]
   1d024:	9306      	str	r3, [sp, #24]
   1d026:	9307      	str	r3, [sp, #28]
   1d028:	9308      	str	r3, [sp, #32]
   1d02a:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d02c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d030:	f013 0f10 	tst.w	r3, #16
   1d034:	d037      	beq.n	1d0a6 <recv_udp+0x92>
		return AF_INET6;
   1d036:	230a      	movs	r3, #10
   1d038:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1d03c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d03e:	b118      	cbz	r0, 1d048 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1d040:	f008 f864 	bl	2510c <net_conn_unregister>
		context->conn_handler = NULL;
   1d044:	2300      	movs	r3, #0
   1d046:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1d048:	4620      	mov	r0, r4
   1d04a:	f7ff ff26 	bl	1ce9a <bind_default>
	if (ret) {
   1d04e:	4603      	mov	r3, r0
   1d050:	bb30      	cbnz	r0, 1d0a0 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d052:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d056:	f017 0f10 	tst.w	r7, #16
   1d05a:	d026      	beq.n	1d0aa <recv_udp+0x96>
		return AF_INET6;
   1d05c:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d05e:	2b0a      	cmp	r3, #10
   1d060:	d025      	beq.n	1d0ae <recv_udp+0x9a>
	u16_t lport = 0;
   1d062:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d066:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d068:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d06a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d06e:	d037      	beq.n	1d0e0 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d070:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d072:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d076:	d135      	bne.n	1d0e4 <recv_udp+0xd0>
   1d078:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d07a:	8ae5      	ldrh	r5, [r4, #22]
   1d07c:	022b      	lsls	r3, r5, #8
   1d07e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d082:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d086:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d08a:	b2ad      	uxth	r5, r5
   1d08c:	342c      	adds	r4, #44	; 0x2c
   1d08e:	9403      	str	r4, [sp, #12]
   1d090:	9602      	str	r6, [sp, #8]
   1d092:	4c16      	ldr	r4, [pc, #88]	; (1d0ec <recv_udp+0xd8>)
   1d094:	9401      	str	r4, [sp, #4]
   1d096:	9500      	str	r5, [sp, #0]
   1d098:	b29b      	uxth	r3, r3
   1d09a:	f008 f855 	bl	25148 <net_conn_register>
   1d09e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d0a0:	4618      	mov	r0, r3
   1d0a2:	b00f      	add	sp, #60	; 0x3c
   1d0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d0a6:	2302      	movs	r3, #2
   1d0a8:	e7c6      	b.n	1d038 <recv_udp+0x24>
   1d0aa:	2302      	movs	r3, #2
   1d0ac:	e7d7      	b.n	1d05e <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d0ae:	68e3      	ldr	r3, [r4, #12]
   1d0b0:	b1a3      	cbz	r3, 1d0dc <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d0b2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d0b6:	6818      	ldr	r0, [r3, #0]
   1d0b8:	6859      	ldr	r1, [r3, #4]
   1d0ba:	689a      	ldr	r2, [r3, #8]
   1d0bc:	68db      	ldr	r3, [r3, #12]
   1d0be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d0c2:	f10d 0e14 	add.w	lr, sp, #20
   1d0c6:	ab0e      	add	r3, sp, #56	; 0x38
   1d0c8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d0cc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d0d0:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d0d2:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d0d6:	f8ad e012 	strh.w	lr, [sp, #18]
   1d0da:	e7c5      	b.n	1d068 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d0dc:	2200      	movs	r2, #0
   1d0de:	e7f8      	b.n	1d0d2 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d0e0:	2011      	movs	r0, #17
   1d0e2:	e7c6      	b.n	1d072 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d0e4:	f104 0114 	add.w	r1, r4, #20
   1d0e8:	e7c7      	b.n	1d07a <recv_udp+0x66>
   1d0ea:	bf00      	nop
   1d0ec:	0001c521 	.word	0x0001c521

0001d0f0 <net_context_connect>:
{
   1d0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0f4:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d0f6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d0fa:	f014 0f01 	tst.w	r4, #1
   1d0fe:	f000 80c9 	beq.w	1d294 <net_context_connect+0x1a4>
   1d102:	461f      	mov	r7, r3
   1d104:	4615      	mov	r5, r2
   1d106:	460e      	mov	r6, r1
   1d108:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d10a:	f7ff fec6 	bl	1ce9a <bind_default>
	if (ret) {
   1d10e:	4680      	mov	r8, r0
   1d110:	2800      	cmp	r0, #0
   1d112:	f040 80c1 	bne.w	1d298 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d116:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d118:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d11c:	f013 0f10 	tst.w	r3, #16
   1d120:	d02b      	beq.n	1d17a <net_context_connect+0x8a>
		return AF_INET6;
   1d122:	220a      	movs	r2, #10
   1d124:	4291      	cmp	r1, r2
   1d126:	f040 80bb 	bne.w	1d2a0 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d12a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d12e:	2b03      	cmp	r3, #3
   1d130:	f000 80b9 	beq.w	1d2a6 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d134:	2a0a      	cmp	r2, #10
   1d136:	f040 80b9 	bne.w	1d2ac <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d13a:	2d17      	cmp	r5, #23
   1d13c:	f240 80b9 	bls.w	1d2b2 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d140:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d142:	2bff      	cmp	r3, #255	; 0xff
   1d144:	f000 80b8 	beq.w	1d2b8 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d148:	2210      	movs	r2, #16
   1d14a:	1d31      	adds	r1, r6, #4
   1d14c:	f104 0018 	add.w	r0, r4, #24
   1d150:	f7e3 f8b6 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d154:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d158:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d15c:	230a      	movs	r3, #10
   1d15e:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d160:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d162:	b963      	cbnz	r3, 1d17e <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d164:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d166:	2b00      	cmp	r3, #0
   1d168:	d174      	bne.n	1d254 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d16a:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d16c:	2b00      	cmp	r3, #0
   1d16e:	d173      	bne.n	1d258 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d170:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d172:	2b00      	cmp	r3, #0
   1d174:	d072      	beq.n	1d25c <net_context_connect+0x16c>
   1d176:	4643      	mov	r3, r8
   1d178:	e002      	b.n	1d180 <net_context_connect+0x90>
	return AF_INET;
   1d17a:	2202      	movs	r2, #2
   1d17c:	e7d2      	b.n	1d124 <net_context_connect+0x34>
   1d17e:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d180:	f013 0f01 	tst.w	r3, #1
   1d184:	d16c      	bne.n	1d260 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d186:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d18a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d18e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d192:	230a      	movs	r3, #10
   1d194:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1d196:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1d19a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1d19e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d1a2:	68e3      	ldr	r3, [r4, #12]
   1d1a4:	2b00      	cmp	r3, #0
   1d1a6:	d062      	beq.n	1d26e <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d1a8:	ad0c      	add	r5, sp, #48	; 0x30
   1d1aa:	6818      	ldr	r0, [r3, #0]
   1d1ac:	6859      	ldr	r1, [r3, #4]
   1d1ae:	689a      	ldr	r2, [r3, #8]
   1d1b0:	68db      	ldr	r3, [r3, #12]
   1d1b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d1b4:	ad07      	add	r5, sp, #28
   1d1b6:	ab10      	add	r3, sp, #64	; 0x40
   1d1b8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d1bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d1c0:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1d1c2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d1c6:	f013 0f20 	tst.w	r3, #32
   1d1ca:	d052      	beq.n	1d272 <net_context_connect+0x182>
		return SOCK_STREAM;
   1d1cc:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1d1ce:	2b02      	cmp	r3, #2
   1d1d0:	d051      	beq.n	1d276 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1d1d2:	2b01      	cmp	r3, #1
   1d1d4:	d173      	bne.n	1d2be <net_context_connect+0x1ce>
			       ntohs(rport),
   1d1d6:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1d1da:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1d1de:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1d1e2:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1d1e6:	b289      	uxth	r1, r1
   1d1e8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1d1ec:	9003      	str	r0, [sp, #12]
   1d1ee:	9402      	str	r4, [sp, #8]
   1d1f0:	4835      	ldr	r0, [pc, #212]	; (1d2c8 <net_context_connect+0x1d8>)
   1d1f2:	9001      	str	r0, [sp, #4]
   1d1f4:	9100      	str	r1, [sp, #0]
   1d1f6:	b29b      	uxth	r3, r3
   1d1f8:	4631      	mov	r1, r6
   1d1fa:	2006      	movs	r0, #6
   1d1fc:	f007 ffa4 	bl	25148 <net_conn_register>
	if (ret < 0) {
   1d200:	2800      	cmp	r0, #0
   1d202:	db5f      	blt.n	1d2c4 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1d204:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1d206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d208:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d20a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d20e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d212:	f043 0302 	orr.w	r3, r3, #2
   1d216:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1d21a:	2102      	movs	r1, #2
   1d21c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d21e:	f006 fa6e 	bl	236fe <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1d222:	2200      	movs	r2, #0
   1d224:	ab10      	add	r3, sp, #64	; 0x40
   1d226:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1d22a:	9302      	str	r3, [sp, #8]
   1d22c:	9601      	str	r6, [sp, #4]
   1d22e:	9200      	str	r2, [sp, #0]
   1d230:	4613      	mov	r3, r2
   1d232:	2102      	movs	r1, #2
   1d234:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d236:	f006 faff 	bl	23838 <net_tcp_prepare_segment>
	if (ret) {
   1d23a:	b310      	cbz	r0, 1d282 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1d23c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d23e:	b35b      	cbz	r3, 1d298 <net_context_connect+0x1a8>
   1d240:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d242:	4619      	mov	r1, r3
   1d244:	30ac      	adds	r0, #172	; 0xac
   1d246:	f00c f803 	bl	29250 <_impl_k_sem_take>
   1d24a:	4680      	mov	r8, r0
   1d24c:	b320      	cbz	r0, 1d298 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1d24e:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1d252:	e021      	b.n	1d298 <net_context_connect+0x1a8>
   1d254:	4643      	mov	r3, r8
   1d256:	e793      	b.n	1d180 <net_context_connect+0x90>
   1d258:	4643      	mov	r3, r8
   1d25a:	e791      	b.n	1d180 <net_context_connect+0x90>
   1d25c:	2301      	movs	r3, #1
   1d25e:	e78f      	b.n	1d180 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1d260:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d268:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1d26c:	e791      	b.n	1d192 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1d26e:	2200      	movs	r2, #0
   1d270:	e7a7      	b.n	1d1c2 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1d272:	2302      	movs	r3, #2
   1d274:	e7ab      	b.n	1d1ce <net_context_connect+0xde>
		if (cb) {
   1d276:	b17f      	cbz	r7, 1d298 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1d278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d27a:	2100      	movs	r1, #0
   1d27c:	4620      	mov	r0, r4
   1d27e:	47b8      	blx	r7
   1d280:	e00a      	b.n	1d298 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1d282:	9805      	ldr	r0, [sp, #20]
   1d284:	f7fd fdf4 	bl	1ae70 <net_send_data>
	if (ret < 0) {
   1d288:	2800      	cmp	r0, #0
   1d28a:	dad7      	bge.n	1d23c <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1d28c:	9805      	ldr	r0, [sp, #20]
   1d28e:	f000 f9f0 	bl	1d672 <net_pkt_unref>
   1d292:	e7d3      	b.n	1d23c <net_context_connect+0x14c>
		return -EBADF;
   1d294:	f06f 0808 	mvn.w	r8, #8
}
   1d298:	4640      	mov	r0, r8
   1d29a:	b010      	add	sp, #64	; 0x40
   1d29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1d2a0:	f06f 0815 	mvn.w	r8, #21
   1d2a4:	e7f8      	b.n	1d298 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1d2a6:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1d2aa:	e7f5      	b.n	1d298 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1d2ac:	f06f 0815 	mvn.w	r8, #21
   1d2b0:	e7f2      	b.n	1d298 <net_context_connect+0x1a8>
			return -EINVAL;
   1d2b2:	f06f 0815 	mvn.w	r8, #21
   1d2b6:	e7ef      	b.n	1d298 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1d2b8:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1d2bc:	e7ec      	b.n	1d298 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1d2be:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1d2c2:	e7e9      	b.n	1d298 <net_context_connect+0x1a8>
		return ret;
   1d2c4:	4680      	mov	r8, r0
   1d2c6:	e7e7      	b.n	1d298 <net_context_connect+0x1a8>
   1d2c8:	0001cb71 	.word	0x0001cb71

0001d2cc <net_context_send>:
{
   1d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2ce:	b085      	sub	sp, #20
	return pkt->context;
   1d2d0:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d2d2:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1d2d6:	2d00      	cmp	r5, #0
   1d2d8:	da17      	bge.n	1d30a <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1d2da:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d2dc:	b1c5      	cbz	r5, 1d310 <net_context_send+0x44>
	return pkt->family;
   1d2de:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1d2e2:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d2e6:	2d0a      	cmp	r5, #10
   1d2e8:	d00d      	beq.n	1d306 <net_context_send+0x3a>
		addrlen = 0;
   1d2ea:	2700      	movs	r7, #0
   1d2ec:	461e      	mov	r6, r3
   1d2ee:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1d2f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d2f2:	9102      	str	r1, [sp, #8]
   1d2f4:	9601      	str	r6, [sp, #4]
   1d2f6:	9200      	str	r2, [sp, #0]
   1d2f8:	463a      	mov	r2, r7
   1d2fa:	f104 0114 	add.w	r1, r4, #20
   1d2fe:	f7ff fdf8 	bl	1cef2 <sendto>
}
   1d302:	b005      	add	sp, #20
   1d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1d306:	2718      	movs	r7, #24
   1d308:	e7f0      	b.n	1d2ec <net_context_send+0x20>
		return -EDESTADDRREQ;
   1d30a:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d30e:	e7f8      	b.n	1d302 <net_context_send+0x36>
   1d310:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d314:	e7f5      	b.n	1d302 <net_context_send+0x36>

0001d316 <net_context_sendto>:
{
   1d316:	b510      	push	{r4, lr}
   1d318:	b084      	sub	sp, #16
   1d31a:	461c      	mov	r4, r3
	return pkt->context;
   1d31c:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d31e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1d322:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d326:	d00d      	beq.n	1d344 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1d328:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d32a:	2b06      	cmp	r3, #6
   1d32c:	d00c      	beq.n	1d348 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1d32e:	9b08      	ldr	r3, [sp, #32]
   1d330:	9302      	str	r3, [sp, #8]
   1d332:	9b07      	ldr	r3, [sp, #28]
   1d334:	9301      	str	r3, [sp, #4]
   1d336:	9b06      	ldr	r3, [sp, #24]
   1d338:	9300      	str	r3, [sp, #0]
   1d33a:	4623      	mov	r3, r4
   1d33c:	f7ff fdd9 	bl	1cef2 <sendto>
}
   1d340:	b004      	add	sp, #16
   1d342:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d344:	2311      	movs	r3, #17
   1d346:	e7f0      	b.n	1d32a <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1d348:	9b08      	ldr	r3, [sp, #32]
   1d34a:	9300      	str	r3, [sp, #0]
   1d34c:	9b07      	ldr	r3, [sp, #28]
   1d34e:	9a06      	ldr	r2, [sp, #24]
   1d350:	4621      	mov	r1, r4
   1d352:	f7ff ffbb 	bl	1d2cc <net_context_send>
   1d356:	e7f3      	b.n	1d340 <net_context_sendto+0x2a>

0001d358 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1d35a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1d35e:	f014 0f01 	tst.w	r4, #1
   1d362:	d030      	beq.n	1d3c6 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d364:	f014 0f40 	tst.w	r4, #64	; 0x40
   1d368:	d023      	beq.n	1d3b2 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1d36a:	2606      	movs	r6, #6
   1d36c:	4617      	mov	r7, r2
   1d36e:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d370:	2e11      	cmp	r6, #17
   1d372:	d020      	beq.n	1d3b6 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d374:	2e06      	cmp	r6, #6
   1d376:	d129      	bne.n	1d3cc <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d378:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1d37a:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1d37e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d382:	d126      	bne.n	1d3d2 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d384:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1d388:	2c02      	cmp	r4, #2
   1d38a:	d125      	bne.n	1d3d8 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1d38c:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1d38e:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1d390:	b32f      	cbz	r7, 1d3de <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1d392:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1d396:	2100      	movs	r1, #0
   1d398:	4620      	mov	r0, r4
   1d39a:	f00b ff59 	bl	29250 <_impl_k_sem_take>
   1d39e:	4606      	mov	r6, r0
   1d3a0:	2800      	cmp	r0, #0
   1d3a2:	d1f6      	bne.n	1d392 <net_context_recv+0x3a>
   1d3a4:	4639      	mov	r1, r7
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	f00b ff52 	bl	29250 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1d3ac:	b140      	cbz	r0, 1d3c0 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1d3ae:	4630      	mov	r0, r6
   1d3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1d3b2:	2611      	movs	r6, #17
   1d3b4:	e7da      	b.n	1d36c <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1d3b6:	f7ff fe2d 	bl	1d014 <recv_udp>
		if (ret < 0) {
   1d3ba:	1e06      	subs	r6, r0, #0
   1d3bc:	dae8      	bge.n	1d390 <net_context_recv+0x38>
   1d3be:	e7f6      	b.n	1d3ae <net_context_recv+0x56>
			return -ETIMEDOUT;
   1d3c0:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1d3c4:	e7f3      	b.n	1d3ae <net_context_recv+0x56>
		return -EBADF;
   1d3c6:	f06f 0608 	mvn.w	r6, #8
   1d3ca:	e7f0      	b.n	1d3ae <net_context_recv+0x56>
		return -EPROTOTYPE;
   1d3cc:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1d3d0:	e7ed      	b.n	1d3ae <net_context_recv+0x56>
			return -ESHUTDOWN;
   1d3d2:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1d3d6:	e7ea      	b.n	1d3ae <net_context_recv+0x56>
			return -ENOTCONN;
   1d3d8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d3dc:	e7e7      	b.n	1d3ae <net_context_recv+0x56>
	return 0;
   1d3de:	2600      	movs	r6, #0
   1d3e0:	e7e5      	b.n	1d3ae <net_context_recv+0x56>
	...

0001d3e4 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1d3e4:	b570      	push	{r4, r5, r6, lr}
   1d3e6:	4606      	mov	r6, r0
   1d3e8:	460d      	mov	r5, r1
   1d3ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d3ee:	480d      	ldr	r0, [pc, #52]	; (1d424 <net_context_foreach+0x40>)
   1d3f0:	f00b ff2e 	bl	29250 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d3f4:	2400      	movs	r4, #0
   1d3f6:	e000      	b.n	1d3fa <net_context_foreach+0x16>
   1d3f8:	3401      	adds	r4, #1
   1d3fa:	2c05      	cmp	r4, #5
   1d3fc:	dc0e      	bgt.n	1d41c <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1d3fe:	2368      	movs	r3, #104	; 0x68
   1d400:	4a09      	ldr	r2, [pc, #36]	; (1d428 <net_context_foreach+0x44>)
   1d402:	fb03 2304 	mla	r3, r3, r4, r2
   1d406:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1d40a:	f013 0f01 	tst.w	r3, #1
   1d40e:	d0f3      	beq.n	1d3f8 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1d410:	4629      	mov	r1, r5
   1d412:	2068      	movs	r0, #104	; 0x68
   1d414:	fb00 2004 	mla	r0, r0, r4, r2
   1d418:	47b0      	blx	r6
   1d41a:	e7ed      	b.n	1d3f8 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d41c:	4801      	ldr	r0, [pc, #4]	; (1d424 <net_context_foreach+0x40>)
   1d41e:	f00b ff04 	bl	2922a <_impl_k_sem_give>
   1d422:	bd70      	pop	{r4, r5, r6, pc}
   1d424:	20001e18 	.word	0x20001e18
   1d428:	20001ba8 	.word	0x20001ba8

0001d42c <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1d42c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d42e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d432:	2101      	movs	r1, #1
   1d434:	4801      	ldr	r0, [pc, #4]	; (1d43c <net_context_init+0x10>)
   1d436:	f00b feef 	bl	29218 <_impl_k_sem_init>
   1d43a:	bd08      	pop	{r3, pc}
   1d43c:	20001e18 	.word	0x20001e18

0001d440 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d440:	b570      	push	{r4, r5, r6, lr}
   1d442:	b082      	sub	sp, #8
   1d444:	4604      	mov	r4, r0
   1d446:	460d      	mov	r5, r1
   1d448:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1d44a:	f00c f863 	bl	29514 <k_is_in_isr>
   1d44e:	b198      	cbz	r0, 1d478 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1d450:	2200      	movs	r2, #0
   1d452:	a901      	add	r1, sp, #4
   1d454:	4620      	mov	r0, r4
   1d456:	f00a fde9 	bl	2802c <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1d45a:	b998      	cbnz	r0, 1d484 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1d45c:	2244      	movs	r2, #68	; 0x44
   1d45e:	2100      	movs	r1, #0
   1d460:	9801      	ldr	r0, [sp, #4]
   1d462:	f00c feb5 	bl	2a1d0 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1d466:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1d468:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1d46c:	2301      	movs	r3, #1
   1d46e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1d472:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1d474:	b002      	add	sp, #8
   1d476:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1d478:	4632      	mov	r2, r6
   1d47a:	a901      	add	r1, sp, #4
   1d47c:	4620      	mov	r0, r4
   1d47e:	f00a fdd5 	bl	2802c <k_mem_slab_alloc>
   1d482:	e7ea      	b.n	1d45a <net_pkt_get_reserve+0x1a>
		return NULL;
   1d484:	2000      	movs	r0, #0
   1d486:	e7f5      	b.n	1d474 <net_pkt_get_reserve+0x34>

0001d488 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1d48a:	2900      	cmp	r1, #0
   1d48c:	d038      	beq.n	1d500 <net_pkt_get+0x78>
   1d48e:	460c      	mov	r4, r1
   1d490:	4617      	mov	r7, r2
   1d492:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1d494:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d498:	f7fe fea4 	bl	1c1e4 <net_if_get_by_index>
   1d49c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d49e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d4a2:	f013 0f10 	tst.w	r3, #16
   1d4a6:	d024      	beq.n	1d4f2 <net_pkt_get+0x6a>
		return AF_INET6;
   1d4a8:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d4aa:	2b0a      	cmp	r3, #10
   1d4ac:	d023      	beq.n	1d4f6 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1d4ae:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1d4b0:	686b      	ldr	r3, [r5, #4]
   1d4b2:	689b      	ldr	r3, [r3, #8]
   1d4b4:	4628      	mov	r0, r5
   1d4b6:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1d4b8:	463a      	mov	r2, r7
   1d4ba:	4601      	mov	r1, r0
   1d4bc:	4630      	mov	r0, r6
   1d4be:	f7ff ffbf 	bl	1d440 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1d4c2:	4603      	mov	r3, r0
   1d4c4:	b198      	cbz	r0, 1d4ee <net_pkt_get+0x66>
	pkt->context = ctx;
   1d4c6:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1d4c8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d4ca:	7d6a      	ldrb	r2, [r5, #21]
   1d4cc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d4d0:	7d6a      	ldrb	r2, [r5, #21]
   1d4d2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d4d6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1d4da:	f012 0f10 	tst.w	r2, #16
   1d4de:	d00d      	beq.n	1d4fc <net_pkt_get+0x74>
		return AF_INET6;
   1d4e0:	210a      	movs	r1, #10
	pkt->family = family;
   1d4e2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d4e6:	f361 02c6 	bfi	r2, r1, #3, #4
   1d4ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1d4ee:	4618      	mov	r0, r3
   1d4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1d4f2:	2302      	movs	r3, #2
   1d4f4:	e7d9      	b.n	1d4aa <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d4f6:	f104 0118 	add.w	r1, r4, #24
   1d4fa:	e7d9      	b.n	1d4b0 <net_pkt_get+0x28>
   1d4fc:	2102      	movs	r1, #2
   1d4fe:	e7f0      	b.n	1d4e2 <net_pkt_get+0x5a>
		return NULL;
   1d500:	2300      	movs	r3, #0
   1d502:	e7f4      	b.n	1d4ee <net_pkt_get+0x66>

0001d504 <net_pkt_get_reserve_data>:
{
   1d504:	b570      	push	{r4, r5, r6, lr}
   1d506:	4604      	mov	r4, r0
   1d508:	460d      	mov	r5, r1
   1d50a:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1d50c:	f00c f802 	bl	29514 <k_is_in_isr>
   1d510:	b158      	cbz	r0, 1d52a <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1d512:	2100      	movs	r1, #0
   1d514:	4620      	mov	r0, r4
   1d516:	f7fd facf 	bl	1aab8 <net_buf_alloc>
   1d51a:	4604      	mov	r4, r0
	if (!frag) {
   1d51c:	b11c      	cbz	r4, 1d526 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1d51e:	4629      	mov	r1, r5
   1d520:	4620      	mov	r0, r4
   1d522:	f7fd fb24 	bl	1ab6e <net_buf_reserve>
}
   1d526:	4620      	mov	r0, r4
   1d528:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1d52a:	4631      	mov	r1, r6
   1d52c:	4620      	mov	r0, r4
   1d52e:	f7fd fac3 	bl	1aab8 <net_buf_alloc>
   1d532:	4604      	mov	r4, r0
   1d534:	e7f2      	b.n	1d51c <net_pkt_get_reserve_data+0x18>

0001d536 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1d536:	b1f1      	cbz	r1, 1d576 <_pkt_get_data+0x40>
{
   1d538:	b570      	push	{r4, r5, r6, lr}
   1d53a:	460c      	mov	r4, r1
   1d53c:	4616      	mov	r6, r2
   1d53e:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1d540:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d544:	f7fe fe4e 	bl	1c1e4 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d548:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d54c:	f013 0f10 	tst.w	r3, #16
   1d550:	d00c      	beq.n	1d56c <_pkt_get_data+0x36>
		return AF_INET6;
   1d552:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d554:	2b0a      	cmp	r3, #10
   1d556:	d00b      	beq.n	1d570 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1d558:	2100      	movs	r1, #0
   1d55a:	6843      	ldr	r3, [r0, #4]
   1d55c:	689b      	ldr	r3, [r3, #8]
   1d55e:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1d560:	4632      	mov	r2, r6
   1d562:	4601      	mov	r1, r0
   1d564:	4628      	mov	r0, r5
   1d566:	f7ff ffcd 	bl	1d504 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1d56a:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1d56c:	2302      	movs	r3, #2
   1d56e:	e7f1      	b.n	1d554 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d570:	f104 0118 	add.w	r1, r4, #24
   1d574:	e7f1      	b.n	1d55a <_pkt_get_data+0x24>
		return NULL;
   1d576:	2000      	movs	r0, #0
   1d578:	4770      	bx	lr
	...

0001d57c <net_pkt_get_reserve_rx>:
{
   1d57c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1d57e:	460a      	mov	r2, r1
   1d580:	4601      	mov	r1, r0
   1d582:	4802      	ldr	r0, [pc, #8]	; (1d58c <net_pkt_get_reserve_rx+0x10>)
   1d584:	f7ff ff5c 	bl	1d440 <net_pkt_get_reserve>
}
   1d588:	bd08      	pop	{r3, pc}
   1d58a:	bf00      	nop
   1d58c:	2000cffc 	.word	0x2000cffc

0001d590 <net_pkt_get_reserve_tx>:
{
   1d590:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1d592:	460a      	mov	r2, r1
   1d594:	4601      	mov	r1, r0
   1d596:	4802      	ldr	r0, [pc, #8]	; (1d5a0 <net_pkt_get_reserve_tx+0x10>)
   1d598:	f7ff ff52 	bl	1d440 <net_pkt_get_reserve>
}
   1d59c:	bd08      	pop	{r3, pc}
   1d59e:	bf00      	nop
   1d5a0:	2000d018 	.word	0x2000d018

0001d5a4 <net_pkt_get_reserve_rx_data>:
{
   1d5a4:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1d5a6:	460a      	mov	r2, r1
   1d5a8:	4601      	mov	r1, r0
   1d5aa:	4802      	ldr	r0, [pc, #8]	; (1d5b4 <net_pkt_get_reserve_rx_data+0x10>)
   1d5ac:	f7ff ffaa 	bl	1d504 <net_pkt_get_reserve_data>
}
   1d5b0:	bd08      	pop	{r3, pc}
   1d5b2:	bf00      	nop
   1d5b4:	2000d17c 	.word	0x2000d17c

0001d5b8 <net_pkt_get_reserve_tx_data>:
{
   1d5b8:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1d5ba:	460a      	mov	r2, r1
   1d5bc:	4601      	mov	r1, r0
   1d5be:	4802      	ldr	r0, [pc, #8]	; (1d5c8 <net_pkt_get_reserve_tx_data+0x10>)
   1d5c0:	f7ff ffa0 	bl	1d504 <net_pkt_get_reserve_data>
}
   1d5c4:	bd08      	pop	{r3, pc}
   1d5c6:	bf00      	nop
   1d5c8:	2000d19c 	.word	0x2000d19c

0001d5cc <net_pkt_get_frag>:
{
   1d5cc:	b538      	push	{r3, r4, r5, lr}
   1d5ce:	4604      	mov	r4, r0
   1d5d0:	460d      	mov	r5, r1
	return pkt->context;
   1d5d2:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1d5d4:	b143      	cbz	r3, 1d5e8 <net_pkt_get_frag+0x1c>
   1d5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d5d8:	b133      	cbz	r3, 1d5e8 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1d5da:	4798      	blx	r3
   1d5dc:	462a      	mov	r2, r5
   1d5de:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1d5e2:	f7ff ff8f 	bl	1d504 <net_pkt_get_reserve_data>
   1d5e6:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1d5e8:	6862      	ldr	r2, [r4, #4]
   1d5ea:	4b07      	ldr	r3, [pc, #28]	; (1d608 <net_pkt_get_frag+0x3c>)
   1d5ec:	429a      	cmp	r2, r3
   1d5ee:	d005      	beq.n	1d5fc <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1d5f0:	4629      	mov	r1, r5
   1d5f2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d5f6:	f7ff ffdf 	bl	1d5b8 <net_pkt_get_reserve_tx_data>
}
   1d5fa:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1d5fc:	4629      	mov	r1, r5
   1d5fe:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d602:	f7ff ffcf 	bl	1d5a4 <net_pkt_get_reserve_rx_data>
   1d606:	bd38      	pop	{r3, r4, r5, pc}
   1d608:	2000cffc 	.word	0x2000cffc

0001d60c <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1d60c:	b538      	push	{r3, r4, r5, lr}
   1d60e:	4604      	mov	r4, r0
   1d610:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1d612:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d614:	b133      	cbz	r3, 1d624 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1d616:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d618:	b130      	cbz	r0, 1d628 <net_pkt_get_tx+0x1c>
   1d61a:	462a      	mov	r2, r5
   1d61c:	4621      	mov	r1, r4
   1d61e:	f7ff ff33 	bl	1d488 <net_pkt_get>
}
   1d622:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d624:	2000      	movs	r0, #0
   1d626:	e7f7      	b.n	1d618 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d628:	4800      	ldr	r0, [pc, #0]	; (1d62c <net_pkt_get_tx+0x20>)
   1d62a:	e7f6      	b.n	1d61a <net_pkt_get_tx+0xe>
   1d62c:	2000d018 	.word	0x2000d018

0001d630 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1d630:	b538      	push	{r3, r4, r5, lr}
   1d632:	4604      	mov	r4, r0
   1d634:	460d      	mov	r5, r1
	if (context->data_pool) {
   1d636:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d638:	b133      	cbz	r3, 1d648 <net_pkt_get_data+0x18>
		return context->data_pool();
   1d63a:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d63c:	b130      	cbz	r0, 1d64c <net_pkt_get_data+0x1c>
   1d63e:	462a      	mov	r2, r5
   1d640:	4621      	mov	r1, r4
   1d642:	f7ff ff78 	bl	1d536 <_pkt_get_data>
}
   1d646:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d648:	2000      	movs	r0, #0
   1d64a:	e7f7      	b.n	1d63c <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d64c:	4800      	ldr	r0, [pc, #0]	; (1d650 <net_pkt_get_data+0x20>)
   1d64e:	e7f6      	b.n	1d63e <net_pkt_get_data+0xe>
   1d650:	2000d19c 	.word	0x2000d19c

0001d654 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1d654:	4603      	mov	r3, r0
   1d656:	b120      	cbz	r0, 1d662 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1d658:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1d65c:	3201      	adds	r2, #1
   1d65e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1d662:	4618      	mov	r0, r3
   1d664:	4770      	bx	lr

0001d666 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1d666:	b118      	cbz	r0, 1d670 <net_pkt_frag_unref+0xa>
{
   1d668:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1d66a:	f7fd fa93 	bl	1ab94 <net_buf_unref>
   1d66e:	bd08      	pop	{r3, pc}
   1d670:	4770      	bx	lr

0001d672 <net_pkt_unref>:
{
   1d672:	b500      	push	{lr}
   1d674:	b083      	sub	sp, #12
   1d676:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1d678:	b188      	cbz	r0, 1d69e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1d67a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1d67e:	b173      	cbz	r3, 1d69e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1d680:	3b01      	subs	r3, #1
   1d682:	b2db      	uxtb	r3, r3
   1d684:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1d688:	b94b      	cbnz	r3, 1d69e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1d68a:	6880      	ldr	r0, [r0, #8]
   1d68c:	b108      	cbz	r0, 1d692 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1d68e:	f7ff ffea 	bl	1d666 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1d692:	a902      	add	r1, sp, #8
   1d694:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d698:	6858      	ldr	r0, [r3, #4]
   1d69a:	f00a fcf5 	bl	28088 <k_mem_slab_free>
}
   1d69e:	b003      	add	sp, #12
   1d6a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6a4 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1d6a4:	b510      	push	{r4, lr}
   1d6a6:	4604      	mov	r4, r0
   1d6a8:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1d6aa:	68a3      	ldr	r3, [r4, #8]
   1d6ac:	4293      	cmp	r3, r2
   1d6ae:	d003      	beq.n	1d6b8 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1d6b0:	4611      	mov	r1, r2
   1d6b2:	f7fd faaf 	bl	1ac14 <net_buf_frag_del>
}
   1d6b6:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1d6b8:	2900      	cmp	r1, #0
   1d6ba:	d1f9      	bne.n	1d6b0 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1d6bc:	4611      	mov	r1, r2
   1d6be:	f7fd faa9 	bl	1ac14 <net_buf_frag_del>
		pkt->frags = tmp;
   1d6c2:	60a0      	str	r0, [r4, #8]
		return tmp;
   1d6c4:	bd10      	pop	{r4, pc}

0001d6c6 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1d6c6:	6883      	ldr	r3, [r0, #8]
   1d6c8:	b143      	cbz	r3, 1d6dc <net_pkt_frag_add+0x16>
{
   1d6ca:	b510      	push	{r4, lr}
   1d6cc:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1d6ce:	4618      	mov	r0, r3
   1d6d0:	f7fd fa80 	bl	1abd4 <net_buf_frag_last>
   1d6d4:	4621      	mov	r1, r4
   1d6d6:	f7fd fa83 	bl	1abe0 <net_buf_frag_insert>
   1d6da:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1d6dc:	6081      	str	r1, [r0, #8]
		return;
   1d6de:	4770      	bx	lr

0001d6e0 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1d6e0:	b538      	push	{r3, r4, r5, lr}
   1d6e2:	4604      	mov	r4, r0
   1d6e4:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1d6e6:	4608      	mov	r0, r1
   1d6e8:	f7fd fa74 	bl	1abd4 <net_buf_frag_last>
   1d6ec:	68a3      	ldr	r3, [r4, #8]
   1d6ee:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1d6f0:	60a5      	str	r5, [r4, #8]
   1d6f2:	bd38      	pop	{r3, r4, r5, pc}

0001d6f4 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6f8:	b085      	sub	sp, #20
   1d6fa:	9002      	str	r0, [sp, #8]
   1d6fc:	460d      	mov	r5, r1
   1d6fe:	4614      	mov	r4, r2
   1d700:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1d702:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1d706:	4619      	mov	r1, r3
   1d708:	f7ff ff60 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   1d70c:	9001      	str	r0, [sp, #4]
   1d70e:	b1b8      	cbz	r0, 1d740 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1d710:	f100 0608 	add.w	r6, r0, #8
   1d714:	4630      	mov	r0, r6
   1d716:	f7fd faf2 	bl	1acfe <net_buf_simple_tailroom>
   1d71a:	42a0      	cmp	r0, r4
   1d71c:	d30b      	bcc.n	1d736 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1d71e:	4621      	mov	r1, r4
   1d720:	4630      	mov	r0, r6
   1d722:	f7fd fa83 	bl	1ac2c <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1d726:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1d72a:	b14f      	cbz	r7, 1d740 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1d72c:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1d730:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1d734:	e01c      	b.n	1d770 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1d736:	9801      	ldr	r0, [sp, #4]
   1d738:	f7ff ff95 	bl	1d666 <net_pkt_frag_unref>
		return NULL;
   1d73c:	2300      	movs	r3, #0
   1d73e:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1d740:	9801      	ldr	r0, [sp, #4]
   1d742:	b005      	add	sp, #20
   1d744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1d748:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1d74a:	eba8 0304 	sub.w	r3, r8, r4
   1d74e:	2b00      	cmp	r3, #0
   1d750:	db2e      	blt.n	1d7b0 <net_pkt_copy+0xbc>
			amount -= left_len;
   1d752:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1d754:	4621      	mov	r1, r4
   1d756:	4630      	mov	r0, r6
   1d758:	f7fd fa68 	bl	1ac2c <net_buf_simple_add>
   1d75c:	4622      	mov	r2, r4
   1d75e:	4649      	mov	r1, r9
   1d760:	f7e2 fdae 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1d764:	4630      	mov	r0, r6
   1d766:	f7fd faca 	bl	1acfe <net_buf_simple_tailroom>
   1d76a:	b180      	cbz	r0, 1d78e <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1d76c:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1d76e:	44a1      	add	r9, r4
	while (orig && amount) {
   1d770:	f1ba 0f00 	cmp.w	sl, #0
   1d774:	d0e4      	beq.n	1d740 <net_pkt_copy+0x4c>
   1d776:	2d00      	cmp	r5, #0
   1d778:	d0e2      	beq.n	1d740 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1d77a:	f10b 0608 	add.w	r6, fp, #8
   1d77e:	4630      	mov	r0, r6
   1d780:	f7fd fabd 	bl	1acfe <net_buf_simple_tailroom>
   1d784:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1d786:	42bd      	cmp	r5, r7
   1d788:	d9de      	bls.n	1d748 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1d78a:	46b8      	mov	r8, r7
   1d78c:	e7dd      	b.n	1d74a <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1d78e:	9903      	ldr	r1, [sp, #12]
   1d790:	9802      	ldr	r0, [sp, #8]
   1d792:	f7ff ff1b 	bl	1d5cc <net_pkt_get_frag>
				if (!new_frag) {
   1d796:	4606      	mov	r6, r0
   1d798:	b128      	cbz	r0, 1d7a6 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1d79a:	4601      	mov	r1, r0
   1d79c:	4658      	mov	r0, fp
   1d79e:	f7fd fa2a 	bl	1abf6 <net_buf_frag_add>
				frag = new_frag;
   1d7a2:	46b3      	mov	fp, r6
   1d7a4:	e7e2      	b.n	1d76c <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1d7a6:	9801      	ldr	r0, [sp, #4]
   1d7a8:	f7ff ff5d 	bl	1d666 <net_pkt_frag_unref>
					return NULL;
   1d7ac:	9601      	str	r6, [sp, #4]
   1d7ae:	e7c7      	b.n	1d740 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1d7b0:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1d7b4:	4641      	mov	r1, r8
   1d7b6:	4630      	mov	r0, r6
   1d7b8:	f7fd fa38 	bl	1ac2c <net_buf_simple_add>
   1d7bc:	4642      	mov	r2, r8
   1d7be:	4649      	mov	r1, r9
   1d7c0:	f7e2 fd7e 	bl	2c0 <memcpy>
		orig = orig->frags;
   1d7c4:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1d7c8:	f1ba 0f00 	cmp.w	sl, #0
   1d7cc:	d0d0      	beq.n	1d770 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1d7ce:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1d7d2:	f8da 9008 	ldr.w	r9, [sl, #8]
   1d7d6:	e7cb      	b.n	1d770 <net_pkt_copy+0x7c>

0001d7d8 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1d7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d7dc:	4680      	mov	r8, r0
   1d7de:	460e      	mov	r6, r1
   1d7e0:	4615      	mov	r5, r2
   1d7e2:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1d7e4:	89c3      	ldrh	r3, [r0, #14]
   1d7e6:	454b      	cmp	r3, r9
   1d7e8:	d206      	bcs.n	1d7f8 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1d7ea:	f06f 000b 	mvn.w	r0, #11
   1d7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1d7f2:	1a6d      	subs	r5, r5, r1
   1d7f4:	b2ad      	uxth	r5, r5
		src = src->frags;
   1d7f6:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1d7f8:	b336      	cbz	r6, 1d848 <net_frag_linear_copy+0x70>
   1d7fa:	89b1      	ldrh	r1, [r6, #12]
   1d7fc:	428d      	cmp	r5, r1
   1d7fe:	d2f8      	bcs.n	1d7f2 <net_frag_linear_copy+0x1a>
   1d800:	2700      	movs	r7, #0
   1d802:	e015      	b.n	1d830 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1d804:	89b4      	ldrh	r4, [r6, #12]
   1d806:	1b64      	subs	r4, r4, r5
   1d808:	454c      	cmp	r4, r9
   1d80a:	bfa8      	it	ge
   1d80c:	464c      	movge	r4, r9
   1d80e:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1d810:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1d814:	68b1      	ldr	r1, [r6, #8]
   1d816:	4622      	mov	r2, r4
   1d818:	4429      	add	r1, r5
   1d81a:	4438      	add	r0, r7
   1d81c:	f7e2 fd50 	bl	2c0 <memcpy>

		copied += to_copy;
   1d820:	4427      	add	r7, r4
   1d822:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1d824:	eba9 0404 	sub.w	r4, r9, r4
   1d828:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1d82c:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1d82e:	2500      	movs	r5, #0
	while (src && len > 0) {
   1d830:	b116      	cbz	r6, 1d838 <net_frag_linear_copy+0x60>
   1d832:	f1b9 0f00 	cmp.w	r9, #0
   1d836:	d1e5      	bne.n	1d804 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1d838:	f1b9 0f00 	cmp.w	r9, #0
   1d83c:	d106      	bne.n	1d84c <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1d83e:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1d842:	2000      	movs	r0, #0
   1d844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d848:	2700      	movs	r7, #0
   1d84a:	e7f1      	b.n	1d830 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1d84c:	f06f 000b 	mvn.w	r0, #11
}
   1d850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d854 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d858:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1d85a:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1d85c:	2700      	movs	r7, #0

	while (frag) {
   1d85e:	e009      	b.n	1d874 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1d860:	4630      	mov	r0, r6
   1d862:	f7fd fa4c 	bl	1acfe <net_buf_simple_tailroom>
   1d866:	4605      	mov	r5, r0
   1d868:	e011      	b.n	1d88e <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1d86a:	89a3      	ldrh	r3, [r4, #12]
   1d86c:	2b00      	cmp	r3, #0
   1d86e:	d030      	beq.n	1d8d2 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1d870:	4627      	mov	r7, r4
		frag = frag->frags;
   1d872:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1d874:	2c00      	cmp	r4, #0
   1d876:	d031      	beq.n	1d8dc <net_pkt_compact+0x88>
		if (frag->frags) {
   1d878:	6823      	ldr	r3, [r4, #0]
   1d87a:	2b00      	cmp	r3, #0
   1d87c:	d0f5      	beq.n	1d86a <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1d87e:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1d880:	f104 0608 	add.w	r6, r4, #8
   1d884:	4630      	mov	r0, r6
   1d886:	f7fd fa3a 	bl	1acfe <net_buf_simple_tailroom>
   1d88a:	4285      	cmp	r5, r0
   1d88c:	d8e8      	bhi.n	1d860 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1d88e:	68a0      	ldr	r0, [r4, #8]
   1d890:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1d892:	6821      	ldr	r1, [r4, #0]
   1d894:	462a      	mov	r2, r5
   1d896:	6889      	ldr	r1, [r1, #8]
   1d898:	4418      	add	r0, r3
   1d89a:	f7e2 fd11 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1d89e:	4629      	mov	r1, r5
   1d8a0:	4630      	mov	r0, r6
   1d8a2:	f7fd f9c3 	bl	1ac2c <net_buf_simple_add>
			memmove(frag->frags->data,
   1d8a6:	6823      	ldr	r3, [r4, #0]
   1d8a8:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1d8aa:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1d8ac:	1b52      	subs	r2, r2, r5
   1d8ae:	1941      	adds	r1, r0, r5
   1d8b0:	f00c fc2a 	bl	2a108 <memmove>
			frag->frags->len -= copy_len;
   1d8b4:	6822      	ldr	r2, [r4, #0]
   1d8b6:	8993      	ldrh	r3, [r2, #12]
   1d8b8:	1b5d      	subs	r5, r3, r5
   1d8ba:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1d8bc:	4630      	mov	r0, r6
   1d8be:	f7fd fa1e 	bl	1acfe <net_buf_simple_tailroom>
   1d8c2:	2800      	cmp	r0, #0
   1d8c4:	d0d4      	beq.n	1d870 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1d8c6:	6822      	ldr	r2, [r4, #0]
   1d8c8:	4621      	mov	r1, r4
   1d8ca:	4640      	mov	r0, r8
   1d8cc:	f7ff feea 	bl	1d6a4 <net_pkt_frag_del>
				continue;
   1d8d0:	e7d0      	b.n	1d874 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1d8d2:	4622      	mov	r2, r4
   1d8d4:	4639      	mov	r1, r7
   1d8d6:	4640      	mov	r0, r8
   1d8d8:	f7ff fee4 	bl	1d6a4 <net_pkt_frag_del>
	}

	return true;
}
   1d8dc:	2001      	movs	r0, #1
   1d8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d8e2 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1d8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1d8e6:	b3d0      	cbz	r0, 1d95e <net_pkt_append+0x7c>
   1d8e8:	460c      	mov	r4, r1
   1d8ea:	4690      	mov	r8, r2
   1d8ec:	469a      	mov	sl, r3
   1d8ee:	4681      	mov	r9, r0
   1d8f0:	b3ca      	cbz	r2, 1d966 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1d8f2:	6883      	ldr	r3, [r0, #8]
   1d8f4:	b133      	cbz	r3, 1d904 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1d8f6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1d8fa:	f7fd f96b 	bl	1abd4 <net_buf_frag_last>
   1d8fe:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1d900:	2700      	movs	r7, #0
   1d902:	e024      	b.n	1d94e <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1d904:	4651      	mov	r1, sl
   1d906:	f7ff fe61 	bl	1d5cc <net_pkt_get_frag>
		if (!frag) {
   1d90a:	4601      	mov	r1, r0
   1d90c:	b368      	cbz	r0, 1d96a <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1d90e:	4648      	mov	r0, r9
   1d910:	f7ff fed9 	bl	1d6c6 <net_pkt_frag_add>
   1d914:	e7ef      	b.n	1d8f6 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d916:	4628      	mov	r0, r5
   1d918:	f7fd f9f1 	bl	1acfe <net_buf_simple_tailroom>
   1d91c:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1d91e:	4631      	mov	r1, r6
   1d920:	4628      	mov	r0, r5
   1d922:	f7fd f983 	bl	1ac2c <net_buf_simple_add>
		memcpy(data, value, count);
   1d926:	4632      	mov	r2, r6
   1d928:	4641      	mov	r1, r8
   1d92a:	f7e2 fcc9 	bl	2c0 <memcpy>
		len -= count;
   1d92e:	1ba4      	subs	r4, r4, r6
   1d930:	b2a4      	uxth	r4, r4
		added_len += count;
   1d932:	4437      	add	r7, r6
   1d934:	b2bf      	uxth	r7, r7
		value += count;
   1d936:	44b0      	add	r8, r6
		if (len == 0) {
   1d938:	b194      	cbz	r4, 1d960 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1d93a:	4651      	mov	r1, sl
   1d93c:	4648      	mov	r0, r9
   1d93e:	f7ff fe45 	bl	1d5cc <net_pkt_get_frag>
		if (!frag) {
   1d942:	4605      	mov	r5, r0
   1d944:	b160      	cbz	r0, 1d960 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1d946:	4601      	mov	r1, r0
   1d948:	4648      	mov	r0, r9
   1d94a:	f7ff febc 	bl	1d6c6 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d94e:	3508      	adds	r5, #8
   1d950:	4628      	mov	r0, r5
   1d952:	f7fd f9d4 	bl	1acfe <net_buf_simple_tailroom>
   1d956:	4284      	cmp	r4, r0
   1d958:	d2dd      	bcs.n	1d916 <net_pkt_append+0x34>
   1d95a:	4626      	mov	r6, r4
   1d95c:	e7df      	b.n	1d91e <net_pkt_append+0x3c>
		return 0;
   1d95e:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1d960:	4638      	mov	r0, r7
   1d962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1d966:	2700      	movs	r7, #0
   1d968:	e7fa      	b.n	1d960 <net_pkt_append+0x7e>
			return 0;
   1d96a:	2700      	movs	r7, #0
   1d96c:	e7f8      	b.n	1d960 <net_pkt_append+0x7e>

0001d96e <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1d96e:	b4f0      	push	{r4, r5, r6, r7}
   1d970:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1d972:	4604      	mov	r4, r0
   1d974:	b188      	cbz	r0, 1d99a <net_frag_read+0x2c>
	while (frag) {
   1d976:	b17c      	cbz	r4, 1d998 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1d978:	89a0      	ldrh	r0, [r4, #12]
   1d97a:	4288      	cmp	r0, r1
   1d97c:	d005      	beq.n	1d98a <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1d97e:	4288      	cmp	r0, r1
   1d980:	d807      	bhi.n	1d992 <net_frag_read+0x24>
		offset -= frag->len;
   1d982:	1a09      	subs	r1, r1, r0
   1d984:	b289      	uxth	r1, r1
		frag = frag->frags;
   1d986:	6824      	ldr	r4, [r4, #0]
   1d988:	e7f5      	b.n	1d976 <net_frag_read+0x8>
			*pos = 0;
   1d98a:	2100      	movs	r1, #0
   1d98c:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1d98e:	6820      	ldr	r0, [r4, #0]
   1d990:	e003      	b.n	1d99a <net_frag_read+0x2c>
			*pos = offset;
   1d992:	8011      	strh	r1, [r2, #0]
			return frag;
   1d994:	4620      	mov	r0, r4
   1d996:	e000      	b.n	1d99a <net_frag_read+0x2c>
	return NULL;
   1d998:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1d99a:	b350      	cbz	r0, 1d9f2 <net_frag_read+0x84>
   1d99c:	2500      	movs	r5, #0
   1d99e:	e00d      	b.n	1d9bc <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1d9a0:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1d9a2:	3301      	adds	r3, #1
   1d9a4:	b29b      	uxth	r3, r3
   1d9a6:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d9a8:	8984      	ldrh	r4, [r0, #12]
   1d9aa:	42a3      	cmp	r3, r4
   1d9ac:	d304      	bcc.n	1d9b8 <net_frag_read+0x4a>
		*pos = 0;
   1d9ae:	2300      	movs	r3, #0
   1d9b0:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d9b2:	6800      	ldr	r0, [r0, #0]
   1d9b4:	e000      	b.n	1d9b8 <net_frag_read+0x4a>
						  pos, data + copy++);
   1d9b6:	4625      	mov	r5, r4
   1d9b8:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1d9ba:	b1c0      	cbz	r0, 1d9ee <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1d9bc:	1e59      	subs	r1, r3, #1
   1d9be:	b289      	uxth	r1, r1
   1d9c0:	b1db      	cbz	r3, 1d9fa <net_frag_read+0x8c>
   1d9c2:	b1d0      	cbz	r0, 1d9fa <net_frag_read+0x8c>
		if (data) {
   1d9c4:	2e00      	cmp	r6, #0
   1d9c6:	d0eb      	beq.n	1d9a0 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1d9c8:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1d9ca:	1c6c      	adds	r4, r5, #1
   1d9cc:	b2a4      	uxth	r4, r4
	if (data) {
   1d9ce:	42ee      	cmn	r6, r5
   1d9d0:	d002      	beq.n	1d9d8 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1d9d2:	6887      	ldr	r7, [r0, #8]
   1d9d4:	5cff      	ldrb	r7, [r7, r3]
   1d9d6:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1d9d8:	3301      	adds	r3, #1
   1d9da:	b29b      	uxth	r3, r3
   1d9dc:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d9de:	8985      	ldrh	r5, [r0, #12]
   1d9e0:	42ab      	cmp	r3, r5
   1d9e2:	d3e8      	bcc.n	1d9b6 <net_frag_read+0x48>
		*pos = 0;
   1d9e4:	2300      	movs	r3, #0
   1d9e6:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d9e8:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1d9ea:	4625      	mov	r5, r4
   1d9ec:	e7e4      	b.n	1d9b8 <net_frag_read+0x4a>
		if (!frag && len) {
   1d9ee:	2900      	cmp	r1, #0
   1d9f0:	d0e4      	beq.n	1d9bc <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1d9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d9f6:	8013      	strh	r3, [r2, #0]

	return NULL;
   1d9f8:	2000      	movs	r0, #0
}
   1d9fa:	bcf0      	pop	{r4, r5, r6, r7}
   1d9fc:	4770      	bx	lr

0001d9fe <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1d9fe:	b510      	push	{r4, lr}
   1da00:	b084      	sub	sp, #16
   1da02:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1da04:	ab03      	add	r3, sp, #12
   1da06:	9300      	str	r3, [sp, #0]
   1da08:	2302      	movs	r3, #2
   1da0a:	f7ff ffb0 	bl	1d96e <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1da0e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1da12:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1da16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1da1a:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1da1c:	b004      	add	sp, #16
   1da1e:	bd10      	pop	{r4, pc}

0001da20 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1da20:	b510      	push	{r4, lr}
   1da22:	b084      	sub	sp, #16
   1da24:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1da26:	ab03      	add	r3, sp, #12
   1da28:	9300      	str	r3, [sp, #0]
   1da2a:	2304      	movs	r3, #4
   1da2c:	f7ff ff9f 	bl	1d96e <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1da30:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1da34:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1da38:	041b      	lsls	r3, r3, #16
   1da3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1da3e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1da42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1da46:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1da4a:	4313      	orrs	r3, r2
   1da4c:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1da4e:	b004      	add	sp, #16
   1da50:	bd10      	pop	{r4, pc}

0001da52 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1da52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da56:	b083      	sub	sp, #12
   1da58:	9201      	str	r2, [sp, #4]
   1da5a:	469b      	mov	fp, r3
   1da5c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1da60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1da62:	2800      	cmp	r0, #0
   1da64:	d06d      	beq.n	1db42 <net_pkt_write+0xf0>
   1da66:	460c      	mov	r4, r1
   1da68:	4682      	mov	sl, r0
   1da6a:	4615      	mov	r5, r2
	if (data) {
   1da6c:	b364      	cbz	r4, 1dac8 <net_pkt_write+0x76>
		if (!frag) {
   1da6e:	2c00      	cmp	r4, #0
   1da70:	d065      	beq.n	1db3e <net_pkt_write+0xec>
		if (offset < frag->len) {
   1da72:	89a3      	ldrh	r3, [r4, #12]
   1da74:	42ab      	cmp	r3, r5
   1da76:	d863      	bhi.n	1db40 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1da78:	d032      	beq.n	1dae0 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1da7a:	42ab      	cmp	r3, r5
   1da7c:	d2f6      	bcs.n	1da6c <net_pkt_write+0x1a>
			offset -= frag->len;
   1da7e:	1aed      	subs	r5, r5, r3
   1da80:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1da82:	f104 0908 	add.w	r9, r4, #8
   1da86:	4648      	mov	r0, r9
   1da88:	f7fd f939 	bl	1acfe <net_buf_simple_tailroom>
   1da8c:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1da90:	4545      	cmp	r5, r8
   1da92:	d33a      	bcc.n	1db0a <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1da94:	4545      	cmp	r5, r8
   1da96:	d03e      	beq.n	1db16 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1da98:	4545      	cmp	r5, r8
   1da9a:	d9e7      	bls.n	1da6c <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1da9c:	b281      	uxth	r1, r0
   1da9e:	4648      	mov	r0, r9
   1daa0:	f7fd f8c4 	bl	1ac2c <net_buf_simple_add>
				offset -= tailroom;
   1daa4:	eba5 0508 	sub.w	r5, r5, r8
   1daa8:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1daaa:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1daac:	2c00      	cmp	r4, #0
   1daae:	d1dd      	bne.n	1da6c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dab0:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dab2:	4650      	mov	r0, sl
   1dab4:	f7ff fd8a 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   1dab8:	4604      	mov	r4, r0
   1daba:	2800      	cmp	r0, #0
   1dabc:	d0d6      	beq.n	1da6c <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1dabe:	4601      	mov	r1, r0
   1dac0:	4650      	mov	r0, sl
   1dac2:	f7ff fe00 	bl	1d6c6 <net_pkt_frag_add>
   1dac6:	e7d1      	b.n	1da6c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dac8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1daca:	4650      	mov	r0, sl
   1dacc:	f7ff fd7e 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   1dad0:	4604      	mov	r4, r0
   1dad2:	2800      	cmp	r0, #0
   1dad4:	d0cb      	beq.n	1da6e <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1dad6:	4601      	mov	r1, r0
   1dad8:	4650      	mov	r0, sl
   1dada:	f7ff fdf4 	bl	1d6c6 <net_pkt_frag_add>
   1dade:	e7c6      	b.n	1da6e <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1dae0:	f104 0008 	add.w	r0, r4, #8
   1dae4:	f7fd f90b 	bl	1acfe <net_buf_simple_tailroom>
   1dae8:	bb50      	cbnz	r0, 1db40 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1daea:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1daec:	b10c      	cbz	r4, 1daf2 <net_pkt_write+0xa0>
			*pos = 0;
   1daee:	2500      	movs	r5, #0
   1daf0:	e026      	b.n	1db40 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1daf2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1daf4:	4650      	mov	r0, sl
   1daf6:	f7ff fd69 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   1dafa:	4604      	mov	r4, r0
   1dafc:	2800      	cmp	r0, #0
   1dafe:	d0f6      	beq.n	1daee <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1db00:	4601      	mov	r1, r0
   1db02:	4650      	mov	r0, sl
   1db04:	f7ff fddf 	bl	1d6c6 <net_pkt_frag_add>
   1db08:	e7f1      	b.n	1daee <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1db0a:	4629      	mov	r1, r5
   1db0c:	4648      	mov	r0, r9
   1db0e:	f7fd f88d 	bl	1ac2c <net_buf_simple_add>
				*pos = frag->len;
   1db12:	89a5      	ldrh	r5, [r4, #12]
   1db14:	e014      	b.n	1db40 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1db16:	b281      	uxth	r1, r0
   1db18:	4648      	mov	r0, r9
   1db1a:	f7fd f887 	bl	1ac2c <net_buf_simple_add>
				return check_and_create_data(pkt,
   1db1e:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1db20:	b10c      	cbz	r4, 1db26 <net_pkt_write+0xd4>
				*pos = 0;
   1db22:	2500      	movs	r5, #0
   1db24:	e00c      	b.n	1db40 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1db26:	990e      	ldr	r1, [sp, #56]	; 0x38
   1db28:	4650      	mov	r0, sl
   1db2a:	f7ff fd4f 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   1db2e:	4604      	mov	r4, r0
   1db30:	2800      	cmp	r0, #0
   1db32:	d0f6      	beq.n	1db22 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1db34:	4601      	mov	r1, r0
   1db36:	4650      	mov	r0, sl
   1db38:	f7ff fdc5 	bl	1d6c6 <net_pkt_frag_add>
   1db3c:	e7f1      	b.n	1db22 <net_pkt_write+0xd0>
		if (!frag) {
   1db3e:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1db40:	b96c      	cbnz	r4, 1db5e <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1db42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1db46:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1db4a:	2000      	movs	r0, #0
   1db4c:	e02d      	b.n	1dbaa <net_pkt_write+0x158>
		len -= count;
   1db4e:	eba6 0608 	sub.w	r6, r6, r8
   1db52:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1db54:	b32e      	cbz	r6, 1dba2 <net_pkt_write+0x150>
		data += count;
   1db56:	4447      	add	r7, r8
		frag = frag->frags;
   1db58:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1db5a:	b34c      	cbz	r4, 1dbb0 <net_pkt_write+0x15e>
		offset = 0;
   1db5c:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1db5e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1db62:	f104 0908 	add.w	r9, r4, #8
   1db66:	4648      	mov	r0, r9
   1db68:	f7fd f8c5 	bl	1acf6 <net_buf_simple_headroom>
   1db6c:	eba8 0800 	sub.w	r8, r8, r0
   1db70:	fa1f f888 	uxth.w	r8, r8
   1db74:	eba8 0805 	sub.w	r8, r8, r5
   1db78:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1db7c:	45b0      	cmp	r8, r6
   1db7e:	bf28      	it	cs
   1db80:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1db82:	68a0      	ldr	r0, [r4, #8]
   1db84:	4642      	mov	r2, r8
   1db86:	4639      	mov	r1, r7
   1db88:	4428      	add	r0, r5
   1db8a:	f7e2 fb99 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1db8e:	eb05 0108 	add.w	r1, r5, r8
   1db92:	89a3      	ldrh	r3, [r4, #12]
   1db94:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1db96:	2900      	cmp	r1, #0
   1db98:	ddd9      	ble.n	1db4e <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1db9a:	4648      	mov	r0, r9
   1db9c:	f7fd f846 	bl	1ac2c <net_buf_simple_add>
   1dba0:	e7d5      	b.n	1db4e <net_pkt_write+0xfc>
			*pos = offset + count;
   1dba2:	4445      	add	r5, r8
   1dba4:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1dba8:	4620      	mov	r0, r4
}
   1dbaa:	b003      	add	sp, #12
   1dbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1dbb0:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dbb2:	4650      	mov	r0, sl
   1dbb4:	f7ff fd0a 	bl	1d5cc <net_pkt_get_frag>
			if (!frag) {
   1dbb8:	4604      	mov	r4, r0
   1dbba:	2800      	cmp	r0, #0
   1dbbc:	d0c1      	beq.n	1db42 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1dbbe:	4601      	mov	r1, r0
   1dbc0:	4650      	mov	r0, sl
   1dbc2:	f7ff fd80 	bl	1d6c6 <net_pkt_frag_add>
   1dbc6:	e7c9      	b.n	1db5c <net_pkt_write+0x10a>

0001dbc8 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1dbc8:	b170      	cbz	r0, 1dbe8 <net_pkt_get_info+0x20>
{
   1dbca:	b410      	push	{r4}
   1dbcc:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1dbce:	480c      	ldr	r0, [pc, #48]	; (1dc00 <net_pkt_get_info+0x38>)
   1dbd0:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1dbd2:	b109      	cbz	r1, 1dbd8 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1dbd4:	480b      	ldr	r0, [pc, #44]	; (1dc04 <net_pkt_get_info+0x3c>)
   1dbd6:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1dbd8:	b10a      	cbz	r2, 1dbde <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1dbda:	490b      	ldr	r1, [pc, #44]	; (1dc08 <net_pkt_get_info+0x40>)
   1dbdc:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1dbde:	b10b      	cbz	r3, 1dbe4 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1dbe0:	4a0a      	ldr	r2, [pc, #40]	; (1dc0c <net_pkt_get_info+0x44>)
   1dbe2:	601a      	str	r2, [r3, #0]
	}
}
   1dbe4:	bc10      	pop	{r4}
   1dbe6:	4770      	bx	lr
	if (tx) {
   1dbe8:	b109      	cbz	r1, 1dbee <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1dbea:	4806      	ldr	r0, [pc, #24]	; (1dc04 <net_pkt_get_info+0x3c>)
   1dbec:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1dbee:	b10a      	cbz	r2, 1dbf4 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1dbf0:	4905      	ldr	r1, [pc, #20]	; (1dc08 <net_pkt_get_info+0x40>)
   1dbf2:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1dbf4:	2b00      	cmp	r3, #0
   1dbf6:	d0f6      	beq.n	1dbe6 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1dbf8:	4a04      	ldr	r2, [pc, #16]	; (1dc0c <net_pkt_get_info+0x44>)
   1dbfa:	601a      	str	r2, [r3, #0]
   1dbfc:	4770      	bx	lr
   1dbfe:	bf00      	nop
   1dc00:	2000cffc 	.word	0x2000cffc
   1dc04:	2000d018 	.word	0x2000d018
   1dc08:	2000d17c 	.word	0x2000d17c
   1dc0c:	2000d19c 	.word	0x2000d19c

0001dc10 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1dc10:	b500      	push	{lr}
   1dc12:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1dc14:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1dc16:	2300      	movs	r3, #0
   1dc18:	9300      	str	r3, [sp, #0]
   1dc1a:	f7ff fea8 	bl	1d96e <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1dc1e:	b003      	add	sp, #12
   1dc20:	f85d fb04 	ldr.w	pc, [sp], #4

0001dc24 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1dc24:	b500      	push	{lr}
   1dc26:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc28:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dc2c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dc30:	f10d 0206 	add.w	r2, sp, #6
   1dc34:	4419      	add	r1, r3
   1dc36:	f7ff ffeb 	bl	1dc10 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc3a:	b130      	cbz	r0, 1dc4a <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1dc3c:	6880      	ldr	r0, [r0, #8]
   1dc3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc42:	4418      	add	r0, r3
}
   1dc44:	b003      	add	sp, #12
   1dc46:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dc4a:	2000      	movs	r0, #0
   1dc4c:	e7fa      	b.n	1dc44 <net_pkt_icmp_data+0x20>

0001dc4e <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1dc4e:	b500      	push	{lr}
   1dc50:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc52:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1dc56:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1dc5a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1dc5c:	4419      	add	r1, r3
   1dc5e:	f10d 0206 	add.w	r2, sp, #6
   1dc62:	b289      	uxth	r1, r1
   1dc64:	f7ff ffd4 	bl	1dc10 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc68:	b130      	cbz	r0, 1dc78 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1dc6a:	6880      	ldr	r0, [r0, #8]
   1dc6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc70:	4418      	add	r0, r3
}
   1dc72:	b003      	add	sp, #12
   1dc74:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dc78:	2000      	movs	r0, #0
   1dc7a:	e7fa      	b.n	1dc72 <net_pkt_icmp_opt_data+0x24>

0001dc7c <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1dc7c:	b500      	push	{lr}
   1dc7e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc80:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dc84:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dc88:	f10d 0206 	add.w	r2, sp, #6
   1dc8c:	4419      	add	r1, r3
   1dc8e:	f7ff ffbf 	bl	1dc10 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc92:	b130      	cbz	r0, 1dca2 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1dc94:	6880      	ldr	r0, [r0, #8]
   1dc96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc9a:	4418      	add	r0, r3
}
   1dc9c:	b003      	add	sp, #12
   1dc9e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dca2:	2000      	movs	r0, #0
   1dca4:	e7fa      	b.n	1dc9c <net_pkt_udp_data+0x20>

0001dca6 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1dca6:	b500      	push	{lr}
   1dca8:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dcaa:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dcae:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dcb2:	f10d 0206 	add.w	r2, sp, #6
   1dcb6:	4419      	add	r1, r3
   1dcb8:	f7ff ffaa 	bl	1dc10 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dcbc:	b130      	cbz	r0, 1dccc <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1dcbe:	6880      	ldr	r0, [r0, #8]
   1dcc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dcc4:	4418      	add	r0, r3
}
   1dcc6:	b003      	add	sp, #12
   1dcc8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dccc:	2000      	movs	r0, #0
   1dcce:	e7fa      	b.n	1dcc6 <net_pkt_tcp_data+0x20>

0001dcd0 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1dcd0:	b570      	push	{r4, r5, r6, lr}
   1dcd2:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1dcd4:	4605      	mov	r5, r0
   1dcd6:	2800      	cmp	r0, #0
   1dcd8:	d065      	beq.n	1dda6 <net_pkt_clone+0xd6>
   1dcda:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1dcdc:	460a      	mov	r2, r1
   1dcde:	2100      	movs	r1, #0
   1dce0:	6840      	ldr	r0, [r0, #4]
   1dce2:	f7ff fbad 	bl	1d440 <net_pkt_get_reserve>
	if (!clone) {
   1dce6:	4604      	mov	r4, r0
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d054      	beq.n	1dd96 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1dcec:	2300      	movs	r3, #0
   1dcee:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1dcf0:	68ab      	ldr	r3, [r5, #8]
   1dcf2:	b173      	cbz	r3, 1dd12 <net_pkt_clone+0x42>
   1dcf4:	2100      	movs	r1, #0
   1dcf6:	e002      	b.n	1dcfe <net_pkt_clone+0x2e>
		bytes += buf->len;
   1dcf8:	899a      	ldrh	r2, [r3, #12]
   1dcfa:	4411      	add	r1, r2
		buf = buf->frags;
   1dcfc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d1fa      	bne.n	1dcf8 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1dd02:	4633      	mov	r3, r6
   1dd04:	2200      	movs	r2, #0
   1dd06:	4628      	mov	r0, r5
   1dd08:	f7ff fcf4 	bl	1d6f4 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1dd0c:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1dd0e:	2800      	cmp	r0, #0
   1dd10:	d044      	beq.n	1dd9c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1dd12:	68eb      	ldr	r3, [r5, #12]
   1dd14:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1dd16:	692b      	ldr	r3, [r5, #16]
   1dd18:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1dd1a:	696b      	ldr	r3, [r5, #20]
   1dd1c:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1dd1e:	68a3      	ldr	r3, [r4, #8]
   1dd20:	b1db      	cbz	r3, 1dd5a <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1dd22:	f10d 0206 	add.w	r2, sp, #6
   1dd26:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1dd2a:	4620      	mov	r0, r4
   1dd2c:	f7ff ff70 	bl	1dc10 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1dd30:	6883      	ldr	r3, [r0, #8]
   1dd32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dd36:	4413      	add	r3, r2
	pkt->appdata = data;
   1dd38:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1dd3a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1dd3c:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1dd3e:	2208      	movs	r2, #8
   1dd40:	f105 0120 	add.w	r1, r5, #32
   1dd44:	f104 0020 	add.w	r0, r4, #32
   1dd48:	f7e2 faba 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1dd4c:	2208      	movs	r2, #8
   1dd4e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1dd52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1dd56:	f7e2 fab3 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1dd5e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1dd62:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1dd66:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1dd6a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1dd6e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1dd72:	f363 02c6 	bfi	r2, r3, #3, #4
   1dd76:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1dd7a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1dd7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1dd82:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1dd86:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1dd8a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1dd8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1dd92:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1dd94:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1dd96:	4620      	mov	r0, r4
   1dd98:	b002      	add	sp, #8
   1dd9a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	f7ff fc68 	bl	1d672 <net_pkt_unref>
			return NULL;
   1dda2:	2400      	movs	r4, #0
   1dda4:	e7f7      	b.n	1dd96 <net_pkt_clone+0xc6>
		return NULL;
   1dda6:	4604      	mov	r4, r0
   1dda8:	e7f5      	b.n	1dd96 <net_pkt_clone+0xc6>

0001ddaa <net_pkt_init>:

void net_pkt_init(void)
{
   1ddaa:	4770      	bx	lr

0001ddac <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1ddac:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1ddae:	2a00      	cmp	r2, #0
   1ddb0:	db03      	blt.n	1ddba <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1ddb2:	4606      	mov	r6, r0
   1ddb4:	2409      	movs	r4, #9
   1ddb6:	4b0e      	ldr	r3, [pc, #56]	; (1ddf0 <net_value_to_udec+0x44>)
   1ddb8:	e00a      	b.n	1ddd0 <net_value_to_udec+0x24>
		precision = 1;
   1ddba:	2201      	movs	r2, #1
   1ddbc:	e7f9      	b.n	1ddb2 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1ddbe:	3530      	adds	r5, #48	; 0x30
   1ddc0:	7035      	strb	r5, [r6, #0]
			precision = i;
   1ddc2:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1ddc4:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1ddc6:	3c01      	subs	r4, #1
   1ddc8:	4d0a      	ldr	r5, [pc, #40]	; (1ddf4 <net_value_to_udec+0x48>)
   1ddca:	fba5 5303 	umull	r5, r3, r5, r3
   1ddce:	08db      	lsrs	r3, r3, #3
   1ddd0:	2c00      	cmp	r4, #0
   1ddd2:	db08      	blt.n	1dde6 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1ddd4:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1ddd8:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1dddc:	42a2      	cmp	r2, r4
   1ddde:	dcee      	bgt.n	1ddbe <net_value_to_udec+0x12>
   1dde0:	2d00      	cmp	r5, #0
   1dde2:	d0f0      	beq.n	1ddc6 <net_value_to_udec+0x1a>
   1dde4:	e7eb      	b.n	1ddbe <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1dde6:	2300      	movs	r3, #0
   1dde8:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1ddea:	1a30      	subs	r0, r6, r0
   1ddec:	bc70      	pop	{r4, r5, r6}
   1ddee:	4770      	bx	lr
   1ddf0:	3b9aca00 	.word	0x3b9aca00
   1ddf4:	cccccccd 	.word	0xcccccccd

0001ddf8 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1ddf8:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1ddfa:	3a01      	subs	r2, #1
   1ddfc:	440a      	add	r2, r1

	while (ptr < end) {
   1ddfe:	e000      	b.n	1de02 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1de00:	3102      	adds	r1, #2
	while (ptr < end) {
   1de02:	4291      	cmp	r1, r2
   1de04:	d20b      	bcs.n	1de1e <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1de06:	780c      	ldrb	r4, [r1, #0]
   1de08:	784b      	ldrb	r3, [r1, #1]
   1de0a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1de0e:	b29b      	uxth	r3, r3
		sum += tmp;
   1de10:	4418      	add	r0, r3
   1de12:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1de14:	4283      	cmp	r3, r0
   1de16:	d9f3      	bls.n	1de00 <calc_chksum+0x8>
			sum++;
   1de18:	3001      	adds	r0, #1
   1de1a:	b280      	uxth	r0, r0
   1de1c:	e7f0      	b.n	1de00 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1de1e:	d001      	beq.n	1de24 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1de20:	bc10      	pop	{r4}
   1de22:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1de24:	780b      	ldrb	r3, [r1, #0]
   1de26:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1de28:	4418      	add	r0, r3
   1de2a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1de2c:	4283      	cmp	r3, r0
   1de2e:	d9f7      	bls.n	1de20 <calc_chksum+0x28>
			sum++;
   1de30:	3001      	adds	r0, #1
   1de32:	b280      	uxth	r0, r0
   1de34:	e7f4      	b.n	1de20 <calc_chksum+0x28>

0001de36 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1de36:	b530      	push	{r4, r5, lr}
   1de38:	b083      	sub	sp, #12
   1de3a:	4604      	mov	r4, r0
   1de3c:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1de3e:	220a      	movs	r2, #10
   1de40:	a901      	add	r1, sp, #4
   1de42:	f00c ff99 	bl	2ad78 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1de46:	9b01      	ldr	r3, [sp, #4]
   1de48:	429c      	cmp	r4, r3
   1de4a:	d008      	beq.n	1de5e <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1de4c:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1de4e:	b16a      	cbz	r2, 1de6c <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1de50:	781b      	ldrb	r3, [r3, #0]
   1de52:	b973      	cbnz	r3, 1de72 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1de54:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1de56:	4298      	cmp	r0, r3
   1de58:	d005      	beq.n	1de66 <convert_port+0x30>
		return false;
   1de5a:	2000      	movs	r0, #0
   1de5c:	e007      	b.n	1de6e <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1de5e:	2800      	cmp	r0, #0
   1de60:	d1f4      	bne.n	1de4c <convert_port+0x16>
		return false;
   1de62:	2000      	movs	r0, #0
   1de64:	e003      	b.n	1de6e <convert_port+0x38>
	}

	*port = tmp;
   1de66:	802b      	strh	r3, [r5, #0]

	return true;
   1de68:	2001      	movs	r0, #1
   1de6a:	e000      	b.n	1de6e <convert_port+0x38>
		return false;
   1de6c:	2000      	movs	r0, #0
}
   1de6e:	b003      	add	sp, #12
   1de70:	bd30      	pop	{r4, r5, pc}
		return false;
   1de72:	2000      	movs	r0, #0
   1de74:	e7fb      	b.n	1de6e <convert_port+0x38>

0001de76 <net_byte_to_hex>:
{
   1de76:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1de78:	090c      	lsrs	r4, r1, #4
   1de7a:	2500      	movs	r5, #0
   1de7c:	e00a      	b.n	1de94 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1de7e:	b96b      	cbnz	r3, 1de9c <net_byte_to_hex+0x26>
   1de80:	b12c      	cbz	r4, 1de8e <net_byte_to_hex+0x18>
   1de82:	e00b      	b.n	1de9c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1de84:	4414      	add	r4, r2
   1de86:	b2e4      	uxtb	r4, r4
   1de88:	3c0a      	subs	r4, #10
   1de8a:	7004      	strb	r4, [r0, #0]
   1de8c:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1de8e:	3501      	adds	r5, #1
   1de90:	f001 040f 	and.w	r4, r1, #15
   1de94:	2d01      	cmp	r5, #1
   1de96:	dc07      	bgt.n	1dea8 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1de98:	2d00      	cmp	r5, #0
   1de9a:	d0f0      	beq.n	1de7e <net_byte_to_hex+0x8>
		if (val < 10) {
   1de9c:	2c09      	cmp	r4, #9
   1de9e:	dcf1      	bgt.n	1de84 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1dea0:	3430      	adds	r4, #48	; 0x30
   1dea2:	7004      	strb	r4, [r0, #0]
   1dea4:	3001      	adds	r0, #1
   1dea6:	e7f2      	b.n	1de8e <net_byte_to_hex+0x18>
	*ptr = '\0';
   1dea8:	2300      	movs	r3, #0
   1deaa:	7003      	strb	r3, [r0, #0]
}
   1deac:	bc30      	pop	{r4, r5}
   1deae:	4770      	bx	lr

0001deb0 <net_sprint_ll_addr_buf>:
{
   1deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1deb4:	4607      	mov	r7, r0
   1deb6:	460e      	mov	r6, r1
   1deb8:	4690      	mov	r8, r2
	switch (ll_len) {
   1deba:	2906      	cmp	r1, #6
   1debc:	d002      	beq.n	1dec4 <net_sprint_ll_addr_buf+0x14>
   1debe:	2908      	cmp	r1, #8
   1dec0:	d000      	beq.n	1dec4 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1dec2:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1dec4:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1dec6:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1dec8:	2400      	movs	r4, #0
   1deca:	e00c      	b.n	1dee6 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1decc:	2301      	movs	r3, #1
   1dece:	2241      	movs	r2, #65	; 0x41
   1ded0:	5d39      	ldrb	r1, [r7, r4]
   1ded2:	f7ff ffd0 	bl	1de76 <net_byte_to_hex>
   1ded6:	4602      	mov	r2, r0
		*ptr++ = ':';
   1ded8:	3001      	adds	r0, #1
   1deda:	233a      	movs	r3, #58	; 0x3a
   1dedc:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1dede:	3d03      	subs	r5, #3
   1dee0:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1dee2:	3401      	adds	r4, #1
   1dee4:	b2e4      	uxtb	r4, r4
   1dee6:	42b4      	cmp	r4, r6
   1dee8:	d201      	bcs.n	1deee <net_sprint_ll_addr_buf+0x3e>
   1deea:	2d00      	cmp	r5, #0
   1deec:	d1ee      	bne.n	1decc <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1deee:	4540      	cmp	r0, r8
   1def0:	d005      	beq.n	1defe <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1def2:	2300      	movs	r3, #0
   1def4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1def8:	4640      	mov	r0, r8
   1defa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1defe:	2000      	movs	r0, #0
}
   1df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001df04 <net_addr_ntop>:
{
   1df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df08:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1df0a:	2300      	movs	r3, #0
   1df0c:	9304      	str	r3, [sp, #16]
   1df0e:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1df10:	280a      	cmp	r0, #10
   1df12:	d011      	beq.n	1df38 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1df14:	2802      	cmp	r0, #2
   1df16:	f040 80c8 	bne.w	1e0aa <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1df1a:	9101      	str	r1, [sp, #4]
		len = 4;
   1df1c:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1df20:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1df24:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1df28:	f04f 0a01 	mov.w	sl, #1
   1df2c:	9202      	str	r2, [sp, #8]
   1df2e:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1df30:	4616      	mov	r6, r2
	bool needcolon = false;
   1df32:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1df34:	462c      	mov	r4, r5
   1df36:	e072      	b.n	1e01e <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1df38:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1df3a:	461d      	mov	r5, r3
   1df3c:	e001      	b.n	1df42 <net_addr_ntop+0x3e>
   1df3e:	3501      	adds	r5, #1
   1df40:	b2ed      	uxtb	r5, r5
   1df42:	2d07      	cmp	r5, #7
   1df44:	d810      	bhi.n	1df68 <net_addr_ntop+0x64>
   1df46:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1df48:	2b07      	cmp	r3, #7
   1df4a:	d8f8      	bhi.n	1df3e <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1df4c:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1df50:	2900      	cmp	r1, #0
   1df52:	d1f4      	bne.n	1df3e <net_addr_ntop+0x3a>
				zeros[i]++;
   1df54:	a906      	add	r1, sp, #24
   1df56:	194c      	adds	r4, r1, r5
   1df58:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1df5c:	3101      	adds	r1, #1
   1df5e:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1df62:	3301      	adds	r3, #1
   1df64:	b2db      	uxtb	r3, r3
   1df66:	e7ef      	b.n	1df48 <net_addr_ntop+0x44>
   1df68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1df6c:	f04f 0a01 	mov.w	sl, #1
   1df70:	2300      	movs	r3, #0
   1df72:	e001      	b.n	1df78 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1df74:	3301      	adds	r3, #1
   1df76:	b2db      	uxtb	r3, r3
   1df78:	2b07      	cmp	r3, #7
   1df7a:	d809      	bhi.n	1df90 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1df7c:	a906      	add	r1, sp, #24
   1df7e:	4419      	add	r1, r3
   1df80:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1df84:	458a      	cmp	sl, r1
   1df86:	d2f5      	bcs.n	1df74 <net_addr_ntop+0x70>
				pos = i;
   1df88:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1df8c:	468a      	mov	sl, r1
   1df8e:	e7f1      	b.n	1df74 <net_addr_ntop+0x70>
		if (longest == 1) {
   1df90:	f1ba 0f01 	cmp.w	sl, #1
   1df94:	d004      	beq.n	1dfa0 <net_addr_ntop+0x9c>
		len = 8;
   1df96:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1df9a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1df9e:	e7c5      	b.n	1df2c <net_addr_ntop+0x28>
		len = 8;
   1dfa0:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1dfa4:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1dfa8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1dfac:	e7be      	b.n	1df2c <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1dfae:	9a01      	ldr	r2, [sp, #4]
   1dfb0:	5cd1      	ldrb	r1, [r2, r3]
   1dfb2:	b28b      	uxth	r3, r1
			if (value == 0) {
   1dfb4:	b93b      	cbnz	r3, 1dfc6 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1dfb6:	4633      	mov	r3, r6
   1dfb8:	2230      	movs	r2, #48	; 0x30
   1dfba:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1dfbe:	f886 b001 	strb.w	fp, [r6, #1]
   1dfc2:	461e      	mov	r6, r3
				continue;
   1dfc4:	e029      	b.n	1e01a <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1dfc6:	2200      	movs	r2, #0
   1dfc8:	4630      	mov	r0, r6
   1dfca:	f7ff feef 	bl	1ddac <net_value_to_udec>
			ptr += l;
   1dfce:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1dfd2:	1c46      	adds	r6, r0, #1
   1dfd4:	f880 b000 	strb.w	fp, [r0]
			continue;
   1dfd8:	e01f      	b.n	1e01a <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1dfda:	b905      	cbnz	r5, 1dfde <net_addr_ntop+0xda>
   1dfdc:	b95c      	cbnz	r4, 1dff6 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1dfde:	1c73      	adds	r3, r6, #1
   1dfe0:	223a      	movs	r2, #58	; 0x3a
   1dfe2:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1dfe4:	1c5e      	adds	r6, r3, #1
   1dfe6:	223a      	movs	r2, #58	; 0x3a
   1dfe8:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1dfea:	4454      	add	r4, sl
   1dfec:	b2e4      	uxtb	r4, r4
   1dfee:	3c01      	subs	r4, #1
   1dff0:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1dff2:	2500      	movs	r5, #0
			continue;
   1dff4:	e011      	b.n	1e01a <net_addr_ntop+0x116>
   1dff6:	4633      	mov	r3, r6
   1dff8:	e7f4      	b.n	1dfe4 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1dffa:	2300      	movs	r3, #0
   1dffc:	2261      	movs	r2, #97	; 0x61
   1dffe:	4630      	mov	r0, r6
   1e000:	f7ff ff39 	bl	1de76 <net_byte_to_hex>
   1e004:	e002      	b.n	1e00c <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1e006:	1c70      	adds	r0, r6, #1
   1e008:	3157      	adds	r1, #87	; 0x57
   1e00a:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e00c:	2301      	movs	r3, #1
   1e00e:	2261      	movs	r2, #97	; 0x61
   1e010:	4629      	mov	r1, r5
   1e012:	f7ff ff30 	bl	1de76 <net_byte_to_hex>
   1e016:	4606      	mov	r6, r0
		needcolon = true;
   1e018:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1e01a:	3401      	adds	r4, #1
   1e01c:	b2e4      	uxtb	r4, r4
   1e01e:	4623      	mov	r3, r4
   1e020:	45a0      	cmp	r8, r4
   1e022:	dd31      	ble.n	1e088 <net_addr_ntop+0x184>
		if (len == 4) {
   1e024:	f1b8 0f04 	cmp.w	r8, #4
   1e028:	d0c1      	beq.n	1dfae <net_addr_ntop+0xaa>
		if (i == pos) {
   1e02a:	454b      	cmp	r3, r9
   1e02c:	d0d5      	beq.n	1dfda <net_addr_ntop+0xd6>
		if (needcolon) {
   1e02e:	b115      	cbz	r5, 1e036 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1e030:	233a      	movs	r3, #58	; 0x3a
   1e032:	7033      	strb	r3, [r6, #0]
   1e034:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e036:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1e03a:	021d      	lsls	r5, r3, #8
   1e03c:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e040:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1e042:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1e046:	b2ed      	uxtb	r5, r5
		if (bh) {
   1e048:	b139      	cbz	r1, 1e05a <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1e04a:	290f      	cmp	r1, #15
   1e04c:	d8d5      	bhi.n	1dffa <net_addr_ntop+0xf6>
				if (bh < 10) {
   1e04e:	2909      	cmp	r1, #9
   1e050:	d8d9      	bhi.n	1e006 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e052:	1c70      	adds	r0, r6, #1
   1e054:	3130      	adds	r1, #48	; 0x30
   1e056:	7031      	strb	r1, [r6, #0]
   1e058:	e7d8      	b.n	1e00c <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e05a:	2d0f      	cmp	r5, #15
   1e05c:	d806      	bhi.n	1e06c <net_addr_ntop+0x168>
			if (bl < 10) {
   1e05e:	2d09      	cmp	r5, #9
   1e060:	d80d      	bhi.n	1e07e <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e062:	3530      	adds	r5, #48	; 0x30
   1e064:	7035      	strb	r5, [r6, #0]
   1e066:	3601      	adds	r6, #1
		needcolon = true;
   1e068:	2501      	movs	r5, #1
   1e06a:	e7d6      	b.n	1e01a <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e06c:	2300      	movs	r3, #0
   1e06e:	2261      	movs	r2, #97	; 0x61
   1e070:	4629      	mov	r1, r5
   1e072:	4630      	mov	r0, r6
   1e074:	f7ff feff 	bl	1de76 <net_byte_to_hex>
   1e078:	4606      	mov	r6, r0
		needcolon = true;
   1e07a:	2501      	movs	r5, #1
   1e07c:	e7cd      	b.n	1e01a <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e07e:	3557      	adds	r5, #87	; 0x57
   1e080:	7035      	strb	r5, [r6, #0]
   1e082:	3601      	adds	r6, #1
		needcolon = true;
   1e084:	2501      	movs	r5, #1
   1e086:	e7c8      	b.n	1e01a <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e088:	9b02      	ldr	r3, [sp, #8]
   1e08a:	429e      	cmp	r6, r3
   1e08c:	d00f      	beq.n	1e0ae <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e08e:	9b03      	ldr	r3, [sp, #12]
   1e090:	2b02      	cmp	r3, #2
   1e092:	d005      	beq.n	1e0a0 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e094:	2300      	movs	r3, #0
   1e096:	7033      	strb	r3, [r6, #0]
	return dst;
   1e098:	9802      	ldr	r0, [sp, #8]
}
   1e09a:	b007      	add	sp, #28
   1e09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e0a0:	2300      	movs	r3, #0
   1e0a2:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e0a6:	9802      	ldr	r0, [sp, #8]
   1e0a8:	e7f7      	b.n	1e09a <net_addr_ntop+0x196>
		return NULL;
   1e0aa:	2000      	movs	r0, #0
   1e0ac:	e7f5      	b.n	1e09a <net_addr_ntop+0x196>
		return NULL;
   1e0ae:	2000      	movs	r0, #0
   1e0b0:	e7f3      	b.n	1e09a <net_addr_ntop+0x196>

0001e0b2 <net_addr_pton>:
{
   1e0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0b6:	b082      	sub	sp, #8
   1e0b8:	460d      	mov	r5, r1
   1e0ba:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e0bc:	2802      	cmp	r0, #2
   1e0be:	d010      	beq.n	1e0e2 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e0c0:	280a      	cmp	r0, #10
   1e0c2:	f040 80c6 	bne.w	1e252 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e0c6:	212e      	movs	r1, #46	; 0x2e
   1e0c8:	4628      	mov	r0, r5
   1e0ca:	f00c f93b 	bl	2a344 <strchr>
   1e0ce:	b378      	cbz	r0, 1e130 <net_addr_pton+0x7e>
   1e0d0:	2706      	movs	r7, #6
		if (*src == ':') {
   1e0d2:	782b      	ldrb	r3, [r5, #0]
   1e0d4:	2b3a      	cmp	r3, #58	; 0x3a
   1e0d6:	d02d      	beq.n	1e134 <net_addr_pton+0x82>
		len = strlen(src);
   1e0d8:	4628      	mov	r0, r5
   1e0da:	f7e2 fb11 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e0de:	2300      	movs	r3, #0
   1e0e0:	e02b      	b.n	1e13a <net_addr_pton+0x88>
		len = strlen(src);
   1e0e2:	4608      	mov	r0, r1
   1e0e4:	f7e2 fb0c 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e0e8:	2300      	movs	r3, #0
   1e0ea:	e000      	b.n	1e0ee <net_addr_pton+0x3c>
   1e0ec:	3301      	adds	r3, #1
   1e0ee:	4283      	cmp	r3, r0
   1e0f0:	d20a      	bcs.n	1e108 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e0f2:	5ce9      	ldrb	r1, [r5, r3]
   1e0f4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e0f8:	b2d2      	uxtb	r2, r2
   1e0fa:	2a09      	cmp	r2, #9
   1e0fc:	d9f6      	bls.n	1e0ec <net_addr_pton+0x3a>
   1e0fe:	292e      	cmp	r1, #46	; 0x2e
   1e100:	d0f4      	beq.n	1e0ec <net_addr_pton+0x3a>
				return -EINVAL;
   1e102:	f06f 0015 	mvn.w	r0, #21
   1e106:	e0a9      	b.n	1e25c <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e108:	2204      	movs	r2, #4
   1e10a:	2100      	movs	r1, #0
   1e10c:	4630      	mov	r0, r6
   1e10e:	f00c f85f 	bl	2a1d0 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e112:	2400      	movs	r4, #0
   1e114:	e008      	b.n	1e128 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e116:	220a      	movs	r2, #10
   1e118:	a901      	add	r1, sp, #4
   1e11a:	4628      	mov	r0, r5
   1e11c:	f00c fd72 	bl	2ac04 <strtol>
   1e120:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e122:	3401      	adds	r4, #1
			src = ++endptr;
   1e124:	9d01      	ldr	r5, [sp, #4]
   1e126:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e128:	2c03      	cmp	r4, #3
   1e12a:	d9f4      	bls.n	1e116 <net_addr_pton+0x64>
	return 0;
   1e12c:	2000      	movs	r0, #0
   1e12e:	e095      	b.n	1e25c <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e130:	2708      	movs	r7, #8
   1e132:	e7ce      	b.n	1e0d2 <net_addr_pton+0x20>
			src++;
   1e134:	3501      	adds	r5, #1
   1e136:	e7cf      	b.n	1e0d8 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e138:	3301      	adds	r3, #1
   1e13a:	4283      	cmp	r3, r0
   1e13c:	da16      	bge.n	1e16c <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e13e:	5ce9      	ldrb	r1, [r5, r3]
   1e140:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e144:	b2d2      	uxtb	r2, r2
   1e146:	2a09      	cmp	r2, #9
   1e148:	d9f6      	bls.n	1e138 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e14a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e14e:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e150:	2a05      	cmp	r2, #5
   1e152:	d9f1      	bls.n	1e138 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e154:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e158:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e15a:	2a05      	cmp	r2, #5
   1e15c:	d9ec      	bls.n	1e138 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e15e:	292e      	cmp	r1, #46	; 0x2e
   1e160:	d0ea      	beq.n	1e138 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e162:	293a      	cmp	r1, #58	; 0x3a
   1e164:	d0e8      	beq.n	1e138 <net_addr_pton+0x86>
				return -EINVAL;
   1e166:	f06f 0015 	mvn.w	r0, #21
   1e16a:	e077      	b.n	1e25c <net_addr_pton+0x1aa>
   1e16c:	2400      	movs	r4, #0
   1e16e:	e001      	b.n	1e174 <net_addr_pton+0xc2>
				src++;
   1e170:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e172:	3401      	adds	r4, #1
   1e174:	42bc      	cmp	r4, r7
   1e176:	da3c      	bge.n	1e1f2 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e178:	2d00      	cmp	r5, #0
   1e17a:	d06d      	beq.n	1e258 <net_addr_pton+0x1a6>
   1e17c:	782b      	ldrb	r3, [r5, #0]
   1e17e:	2b00      	cmp	r3, #0
   1e180:	d06f      	beq.n	1e262 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e182:	2b3a      	cmp	r3, #58	; 0x3a
   1e184:	d023      	beq.n	1e1ce <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e186:	2210      	movs	r2, #16
   1e188:	2100      	movs	r1, #0
   1e18a:	4628      	mov	r0, r5
   1e18c:	f00c fd3a 	bl	2ac04 <strtol>
   1e190:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1e194:	2210      	movs	r2, #16
   1e196:	2100      	movs	r1, #0
   1e198:	4628      	mov	r0, r5
   1e19a:	f00c fd33 	bl	2ac04 <strtol>
   1e19e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1e1a2:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1e1a6:	213a      	movs	r1, #58	; 0x3a
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	f00c f8cb 	bl	2a344 <strchr>
				if (!src && i < expected_groups - 1) {
   1e1ae:	4605      	mov	r5, r0
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d1dd      	bne.n	1e170 <net_addr_pton+0xbe>
   1e1b4:	1e7b      	subs	r3, r7, #1
   1e1b6:	429c      	cmp	r4, r3
   1e1b8:	dada      	bge.n	1e170 <net_addr_pton+0xbe>
					return -EINVAL;
   1e1ba:	f06f 0015 	mvn.w	r0, #21
   1e1be:	e04d      	b.n	1e25c <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1e1c0:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1e1c4:	2300      	movs	r3, #0
   1e1c6:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1e1ca:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1e1cc:	3401      	adds	r4, #1
   1e1ce:	42bc      	cmp	r4, r7
   1e1d0:	dbf6      	blt.n	1e1c0 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1e1d2:	213a      	movs	r1, #58	; 0x3a
   1e1d4:	4628      	mov	r0, r5
   1e1d6:	f00c fa0b 	bl	2a5f0 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e1da:	4285      	cmp	r5, r0
   1e1dc:	d003      	beq.n	1e1e6 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1e1de:	2f06      	cmp	r7, #6
   1e1e0:	d00b      	beq.n	1e1fa <net_addr_pton+0x148>
			i = expected_groups - 1;
   1e1e2:	1e7c      	subs	r4, r7, #1
   1e1e4:	e00f      	b.n	1e206 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e1e6:	2f06      	cmp	r7, #6
   1e1e8:	d002      	beq.n	1e1f0 <net_addr_pton+0x13e>
   1e1ea:	786b      	ldrb	r3, [r5, #1]
   1e1ec:	2b00      	cmp	r3, #0
   1e1ee:	d1f6      	bne.n	1e1de <net_addr_pton+0x12c>
				src++;
   1e1f0:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1e1f2:	2f06      	cmp	r7, #6
   1e1f4:	d029      	beq.n	1e24a <net_addr_pton+0x198>
	return 0;
   1e1f6:	2000      	movs	r0, #0
   1e1f8:	e030      	b.n	1e25c <net_addr_pton+0x1aa>
				tmp--;
   1e1fa:	3801      	subs	r0, #1
   1e1fc:	e7f1      	b.n	1e1e2 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1e1fe:	1e43      	subs	r3, r0, #1
   1e200:	4285      	cmp	r5, r0
   1e202:	d005      	beq.n	1e210 <net_addr_pton+0x15e>
   1e204:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1e206:	7803      	ldrb	r3, [r0, #0]
   1e208:	2b3a      	cmp	r3, #58	; 0x3a
   1e20a:	d1f8      	bne.n	1e1fe <net_addr_pton+0x14c>
					i--;
   1e20c:	3c01      	subs	r4, #1
   1e20e:	e7f6      	b.n	1e1fe <net_addr_pton+0x14c>
			src++;
   1e210:	3501      	adds	r5, #1
   1e212:	e7ae      	b.n	1e172 <net_addr_pton+0xc0>
				src++;
   1e214:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1e216:	3401      	adds	r4, #1
   1e218:	2c03      	cmp	r4, #3
   1e21a:	dc18      	bgt.n	1e24e <net_addr_pton+0x19c>
				if (!src || !*src) {
   1e21c:	b325      	cbz	r5, 1e268 <net_addr_pton+0x1b6>
   1e21e:	782b      	ldrb	r3, [r5, #0]
   1e220:	b32b      	cbz	r3, 1e26e <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1e222:	f104 070c 	add.w	r7, r4, #12
   1e226:	220a      	movs	r2, #10
   1e228:	2100      	movs	r1, #0
   1e22a:	4628      	mov	r0, r5
   1e22c:	f00c fcea 	bl	2ac04 <strtol>
   1e230:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1e232:	212e      	movs	r1, #46	; 0x2e
   1e234:	4628      	mov	r0, r5
   1e236:	f00c f885 	bl	2a344 <strchr>
				if (!src && i < 3) {
   1e23a:	4605      	mov	r5, r0
   1e23c:	2800      	cmp	r0, #0
   1e23e:	d1e9      	bne.n	1e214 <net_addr_pton+0x162>
   1e240:	2c02      	cmp	r4, #2
   1e242:	dce7      	bgt.n	1e214 <net_addr_pton+0x162>
					return -EINVAL;
   1e244:	f06f 0015 	mvn.w	r0, #21
   1e248:	e008      	b.n	1e25c <net_addr_pton+0x1aa>
   1e24a:	2400      	movs	r4, #0
   1e24c:	e7e4      	b.n	1e218 <net_addr_pton+0x166>
	return 0;
   1e24e:	2000      	movs	r0, #0
   1e250:	e004      	b.n	1e25c <net_addr_pton+0x1aa>
		return -EINVAL;
   1e252:	f06f 0015 	mvn.w	r0, #21
   1e256:	e001      	b.n	1e25c <net_addr_pton+0x1aa>
				return -EINVAL;
   1e258:	f06f 0015 	mvn.w	r0, #21
}
   1e25c:	b002      	add	sp, #8
   1e25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1e262:	f06f 0015 	mvn.w	r0, #21
   1e266:	e7f9      	b.n	1e25c <net_addr_pton+0x1aa>
					return -EINVAL;
   1e268:	f06f 0015 	mvn.w	r0, #21
   1e26c:	e7f6      	b.n	1e25c <net_addr_pton+0x1aa>
   1e26e:	f06f 0015 	mvn.w	r0, #21
   1e272:	e7f3      	b.n	1e25c <net_addr_pton+0x1aa>

0001e274 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1e274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e278:	b08f      	sub	sp, #60	; 0x3c
   1e27a:	4605      	mov	r5, r0
   1e27c:	4688      	mov	r8, r1
   1e27e:	4617      	mov	r7, r2
   1e280:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1e282:	460c      	mov	r4, r1
   1e284:	292e      	cmp	r1, #46	; 0x2e
   1e286:	bf28      	it	cs
   1e288:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1e28a:	2300      	movs	r3, #0
   1e28c:	42a3      	cmp	r3, r4
   1e28e:	da04      	bge.n	1e29a <parse_ipv6+0x26>
		if (!str[i]) {
   1e290:	5cea      	ldrb	r2, [r5, r3]
   1e292:	b10a      	cbz	r2, 1e298 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1e294:	3301      	adds	r3, #1
   1e296:	e7f9      	b.n	1e28c <parse_ipv6+0x18>
			len = i;
   1e298:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1e29a:	b18e      	cbz	r6, 1e2c0 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1e29c:	4622      	mov	r2, r4
   1e29e:	215d      	movs	r1, #93	; 0x5d
   1e2a0:	4628      	mov	r0, r5
   1e2a2:	f7e1 ffbd 	bl	220 <memchr>
		if (!ptr) {
   1e2a6:	4681      	mov	r9, r0
   1e2a8:	2800      	cmp	r0, #0
   1e2aa:	d043      	beq.n	1e334 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1e2ac:	1c69      	adds	r1, r5, #1
   1e2ae:	1a43      	subs	r3, r0, r1
   1e2b0:	429c      	cmp	r4, r3
   1e2b2:	bfa8      	it	ge
   1e2b4:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1e2b6:	4622      	mov	r2, r4
   1e2b8:	a802      	add	r0, sp, #8
   1e2ba:	f7e2 f801 	bl	2c0 <memcpy>
   1e2be:	e006      	b.n	1e2ce <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1e2c0:	4622      	mov	r2, r4
   1e2c2:	4629      	mov	r1, r5
   1e2c4:	a802      	add	r0, sp, #8
   1e2c6:	f7e1 fffb 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1e2ca:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1e2ce:	2200      	movs	r2, #0
   1e2d0:	ab0e      	add	r3, sp, #56	; 0x38
   1e2d2:	4423      	add	r3, r4
   1e2d4:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1e2d8:	1d3a      	adds	r2, r7, #4
   1e2da:	a902      	add	r1, sp, #8
   1e2dc:	200a      	movs	r0, #10
   1e2de:	f7ff fee8 	bl	1e0b2 <net_addr_pton>
	if (ret < 0) {
   1e2e2:	2800      	cmp	r0, #0
   1e2e4:	db28      	blt.n	1e338 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1e2e6:	230a      	movs	r3, #10
   1e2e8:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1e2ea:	b33e      	cbz	r6, 1e33c <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1e2ec:	f109 0301 	add.w	r3, r9, #1
   1e2f0:	4445      	add	r5, r8
   1e2f2:	42ab      	cmp	r3, r5
   1e2f4:	d223      	bcs.n	1e33e <parse_ipv6+0xca>
   1e2f6:	f899 3001 	ldrb.w	r3, [r9, #1]
   1e2fa:	2b3a      	cmp	r3, #58	; 0x3a
   1e2fc:	d11f      	bne.n	1e33e <parse_ipv6+0xca>
		len = str_len - end;
   1e2fe:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1e302:	4622      	mov	r2, r4
   1e304:	f109 0102 	add.w	r1, r9, #2
   1e308:	a802      	add	r0, sp, #8
   1e30a:	f7e1 ffd9 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1e30e:	ab0e      	add	r3, sp, #56	; 0x38
   1e310:	441c      	add	r4, r3
   1e312:	2300      	movs	r3, #0
   1e314:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1e318:	f10d 0106 	add.w	r1, sp, #6
   1e31c:	a802      	add	r0, sp, #8
   1e31e:	f7ff fd8a 	bl	1de36 <convert_port>
		if (!ret) {
   1e322:	4606      	mov	r6, r0
   1e324:	b158      	cbz	r0, 1e33e <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1e326:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e32a:	0a13      	lsrs	r3, r2, #8
   1e32c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e330:	807b      	strh	r3, [r7, #2]
   1e332:	e004      	b.n	1e33e <parse_ipv6+0xca>
			return false;
   1e334:	2600      	movs	r6, #0
   1e336:	e002      	b.n	1e33e <parse_ipv6+0xca>
		return false;
   1e338:	2600      	movs	r6, #0
   1e33a:	e000      	b.n	1e33e <parse_ipv6+0xca>
		return true;
   1e33c:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1e33e:	4630      	mov	r0, r6
   1e340:	b00f      	add	sp, #60	; 0x3c
   1e342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e346 <net_calc_chksum>:
	return pkt->family;
   1e346:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e34a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1e34e:	2b0a      	cmp	r3, #10
   1e350:	d001      	beq.n	1e356 <net_calc_chksum+0x10>
		return 0;
   1e352:	2000      	movs	r0, #0
   1e354:	4770      	bx	lr
{
   1e356:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e358:	b085      	sub	sp, #20
   1e35a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e35c:	6885      	ldr	r5, [r0, #8]
   1e35e:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e360:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e362:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e364:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e368:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e36a:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e36e:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1e370:	fa11 f383 	uxtah	r3, r1, r3
   1e374:	2220      	movs	r2, #32
   1e376:	f100 0108 	add.w	r1, r0, #8
   1e37a:	b298      	uxth	r0, r3
   1e37c:	f7ff fd3c 	bl	1ddf8 <calc_chksum>
   1e380:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1e382:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1e386:	2300      	movs	r3, #0
   1e388:	9300      	str	r3, [sp, #0]
   1e38a:	f10d 020e 	add.w	r2, sp, #14
   1e38e:	4439      	add	r1, r7
   1e390:	4628      	mov	r0, r5
   1e392:	f7ff faec 	bl	1d96e <net_frag_read>
	if (!frag) {
   1e396:	4605      	mov	r5, r0
   1e398:	b318      	cbz	r0, 1e3e2 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1e39a:	6881      	ldr	r1, [r0, #8]
   1e39c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e3a0:	4419      	add	r1, r3
	len = frag->len - offset;
   1e3a2:	8984      	ldrh	r4, [r0, #12]
   1e3a4:	1ae4      	subs	r4, r4, r3
   1e3a6:	b224      	sxth	r4, r4
   1e3a8:	e003      	b.n	1e3b2 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1e3aa:	89ac      	ldrh	r4, [r5, #12]
   1e3ac:	3c01      	subs	r4, #1
   1e3ae:	b224      	sxth	r4, r4
			ptr++;
   1e3b0:	3101      	adds	r1, #1
	while (frag) {
   1e3b2:	b1bd      	cbz	r5, 1e3e4 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1e3b4:	b2a4      	uxth	r4, r4
   1e3b6:	4622      	mov	r2, r4
   1e3b8:	4630      	mov	r0, r6
   1e3ba:	f7ff fd1d 	bl	1ddf8 <calc_chksum>
   1e3be:	4606      	mov	r6, r0
		frag = frag->frags;
   1e3c0:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1e3c2:	b17d      	cbz	r5, 1e3e4 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1e3c4:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1e3c6:	f014 0f01 	tst.w	r4, #1
   1e3ca:	d007      	beq.n	1e3dc <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1e3cc:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1e3ce:	441e      	add	r6, r3
   1e3d0:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1e3d2:	42b3      	cmp	r3, r6
   1e3d4:	d9e9      	bls.n	1e3aa <net_calc_chksum+0x64>
				sum++;
   1e3d6:	3601      	adds	r6, #1
   1e3d8:	b2b6      	uxth	r6, r6
   1e3da:	e7e6      	b.n	1e3aa <net_calc_chksum+0x64>
			len = frag->len;
   1e3dc:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1e3e0:	e7e7      	b.n	1e3b2 <net_calc_chksum+0x6c>
		return 0;
   1e3e2:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e3e4:	b91e      	cbnz	r6, 1e3ee <net_calc_chksum+0xa8>
   1e3e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1e3ea:	b005      	add	sp, #20
   1e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e3ee:	0a30      	lsrs	r0, r6, #8
   1e3f0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1e3f4:	b280      	uxth	r0, r0
   1e3f6:	e7f8      	b.n	1e3ea <net_calc_chksum+0xa4>

0001e3f8 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1e3f8:	460b      	mov	r3, r1
   1e3fa:	b151      	cbz	r1, 1e412 <net_header_fits+0x1a>
   1e3fc:	6880      	ldr	r0, [r0, #8]
   1e3fe:	6881      	ldr	r1, [r0, #8]
   1e400:	428b      	cmp	r3, r1
   1e402:	d908      	bls.n	1e416 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1e404:	4413      	add	r3, r2
   1e406:	8982      	ldrh	r2, [r0, #12]
   1e408:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1e40a:	428b      	cmp	r3, r1
   1e40c:	d905      	bls.n	1e41a <net_header_fits+0x22>
	return false;
   1e40e:	2000      	movs	r0, #0
   1e410:	4770      	bx	lr
   1e412:	2000      	movs	r0, #0
   1e414:	4770      	bx	lr
   1e416:	2000      	movs	r0, #0
   1e418:	4770      	bx	lr
		return true;
   1e41a:	2001      	movs	r0, #1
}
   1e41c:	4770      	bx	lr

0001e41e <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1e41e:	b1d8      	cbz	r0, 1e458 <net_ipaddr_parse+0x3a>
{
   1e420:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1e422:	b1d9      	cbz	r1, 1e45c <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1e424:	7804      	ldrb	r4, [r0, #0]
   1e426:	b1dc      	cbz	r4, 1e460 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1e428:	2c5b      	cmp	r4, #91	; 0x5b
   1e42a:	d002      	beq.n	1e432 <net_ipaddr_parse+0x14>
   1e42c:	2500      	movs	r5, #0
   1e42e:	462b      	mov	r3, r5
   1e430:	e004      	b.n	1e43c <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1e432:	2301      	movs	r3, #1
   1e434:	f7ff ff1e 	bl	1e274 <parse_ipv6>
   1e438:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1e43a:	3301      	adds	r3, #1
   1e43c:	5cc4      	ldrb	r4, [r0, r3]
   1e43e:	b12c      	cbz	r4, 1e44c <net_ipaddr_parse+0x2e>
   1e440:	4299      	cmp	r1, r3
   1e442:	d903      	bls.n	1e44c <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1e444:	2c3a      	cmp	r4, #58	; 0x3a
   1e446:	d1f8      	bne.n	1e43a <net_ipaddr_parse+0x1c>
			count++;
   1e448:	3501      	adds	r5, #1
   1e44a:	e7f6      	b.n	1e43a <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1e44c:	2d01      	cmp	r5, #1
   1e44e:	d009      	beq.n	1e464 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1e450:	2300      	movs	r3, #0
   1e452:	f7ff ff0f 	bl	1e274 <parse_ipv6>
   1e456:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e458:	2000      	movs	r0, #0
   1e45a:	4770      	bx	lr
   1e45c:	2000      	movs	r0, #0
   1e45e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e460:	2000      	movs	r0, #0
   1e462:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e464:	2000      	movs	r0, #0
#endif
}
   1e466:	bd38      	pop	{r3, r4, r5, pc}

0001e468 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e468:	2000      	movs	r0, #0
   1e46a:	4770      	bx	lr

0001e46c <net_bt_enable>:
	return iface->dev;
   1e46c:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e46e:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e470:	b129      	cbz	r1, 1e47e <net_bt_enable+0x12>
   1e472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e476:	2b03      	cmp	r3, #3
   1e478:	d103      	bne.n	1e482 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1e47a:	2000      	movs	r0, #0
   1e47c:	4770      	bx	lr
   1e47e:	2000      	movs	r0, #0
   1e480:	4770      	bx	lr
		return -ENETDOWN;
   1e482:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1e486:	4770      	bx	lr

0001e488 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1e488:	4b04      	ldr	r3, [pc, #16]	; (1e49c <ipsp_accept+0x14>)
   1e48a:	685b      	ldr	r3, [r3, #4]
   1e48c:	b91b      	cbnz	r3, 1e496 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1e48e:	4b04      	ldr	r3, [pc, #16]	; (1e4a0 <ipsp_accept+0x18>)
   1e490:	600b      	str	r3, [r1, #0]

	return 0;
   1e492:	2000      	movs	r0, #0
   1e494:	4770      	bx	lr
		return -ENOMEM;
   1e496:	f06f 000b 	mvn.w	r0, #11
}
   1e49a:	4770      	bx	lr
   1e49c:	2000bd38 	.word	0x2000bd38
   1e4a0:	2000bd3c 	.word	0x2000bd3c

0001e4a4 <net_bt_send>:
{
   1e4a4:	b538      	push	{r3, r4, r5, lr}
   1e4a6:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e4a8:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1e4aa:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e4ae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1e4b2:	2b0a      	cmp	r3, #10
   1e4b4:	d001      	beq.n	1e4ba <net_bt_send+0x16>
		return NET_DROP;
   1e4b6:	2002      	movs	r0, #2
   1e4b8:	bd38      	pop	{r3, r4, r5, pc}
   1e4ba:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e4bc:	2200      	movs	r2, #0
   1e4be:	2101      	movs	r1, #1
   1e4c0:	4620      	mov	r0, r4
   1e4c2:	f003 fe95 	bl	221f0 <net_6lo_compress>
   1e4c6:	b908      	cbnz	r0, 1e4cc <net_bt_send+0x28>
		return NET_DROP;
   1e4c8:	2002      	movs	r0, #2
}
   1e4ca:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1e4cc:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1e4ce:	4621      	mov	r1, r4
   1e4d0:	3018      	adds	r0, #24
   1e4d2:	f00a fb13 	bl	28afc <k_queue_append>
	return NET_OK;
   1e4d6:	2000      	movs	r0, #0
   1e4d8:	bd38      	pop	{r3, r4, r5, pc}

0001e4da <net_bt_recv>:
{
   1e4da:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e4dc:	4608      	mov	r0, r1
   1e4de:	f004 fad4 	bl	22a8a <net_6lo_uncompress>
   1e4e2:	b908      	cbnz	r0, 1e4e8 <net_bt_recv+0xe>
		return NET_DROP;
   1e4e4:	2002      	movs	r0, #2
   1e4e6:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1e4e8:	2001      	movs	r0, #1
}
   1e4ea:	bd08      	pop	{r3, pc}

0001e4ec <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1e4ec:	b951      	cbnz	r1, 1e504 <connected+0x18>
{
   1e4ee:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1e4f0:	4b05      	ldr	r3, [pc, #20]	; (1e508 <connected+0x1c>)
   1e4f2:	681b      	ldr	r3, [r3, #0]
   1e4f4:	4283      	cmp	r3, r0
   1e4f6:	d000      	beq.n	1e4fa <connected+0xe>
   1e4f8:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e4fa:	2223      	movs	r2, #35	; 0x23
   1e4fc:	4903      	ldr	r1, [pc, #12]	; (1e50c <connected+0x20>)
   1e4fe:	f7ea f905 	bl	870c <bt_l2cap_chan_connect>
   1e502:	e7f9      	b.n	1e4f8 <connected+0xc>
   1e504:	4770      	bx	lr
   1e506:	bf00      	nop
   1e508:	20001e80 	.word	0x20001e80
   1e50c:	2000bd3c 	.word	0x2000bd3c

0001e510 <ipsp_recv>:
{
   1e510:	b570      	push	{r4, r5, r6, lr}
   1e512:	4605      	mov	r5, r0
   1e514:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e51a:	2000      	movs	r0, #0
   1e51c:	f7ff f82e 	bl	1d57c <net_pkt_get_reserve_rx>
   1e520:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1e522:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1e526:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1e528:	2206      	movs	r2, #6
   1e52a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e52e:	2302      	movs	r3, #2
   1e530:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1e534:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1e538:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1e53a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e53e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e542:	4630      	mov	r0, r6
   1e544:	f7fc fb42 	bl	1abcc <net_buf_ref>
   1e548:	4601      	mov	r1, r0
   1e54a:	4620      	mov	r0, r4
   1e54c:	f7ff f8bb 	bl	1d6c6 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e550:	4621      	mov	r1, r4
   1e552:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e556:	f7fc fd55 	bl	1b004 <net_recv_data>
   1e55a:	2800      	cmp	r0, #0
   1e55c:	db00      	blt.n	1e560 <ipsp_recv+0x50>
   1e55e:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1e560:	4620      	mov	r0, r4
   1e562:	f7ff f886 	bl	1d672 <net_pkt_unref>
}
   1e566:	e7fa      	b.n	1e55e <ipsp_recv+0x4e>

0001e568 <ipsp_alloc_buf>:
{
   1e568:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e56a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e56e:	2000      	movs	r0, #0
   1e570:	f7ff f818 	bl	1d5a4 <net_pkt_get_reserve_rx_data>
}
   1e574:	bd08      	pop	{r3, pc}
	...

0001e578 <ipsp_disconnected>:
{
   1e578:	b510      	push	{r4, lr}
   1e57a:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1e57c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e580:	f7fd fe92 	bl	1c2a8 <net_if_down>
	if (chan->conn != default_conn) {
   1e584:	6823      	ldr	r3, [r4, #0]
   1e586:	4a05      	ldr	r2, [pc, #20]	; (1e59c <ipsp_disconnected+0x24>)
   1e588:	6810      	ldr	r0, [r2, #0]
   1e58a:	4283      	cmp	r3, r0
   1e58c:	d000      	beq.n	1e590 <ipsp_disconnected+0x18>
   1e58e:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1e590:	f7e8 fe28 	bl	71e4 <bt_conn_unref>
	default_conn = NULL;
   1e594:	2200      	movs	r2, #0
   1e596:	4b01      	ldr	r3, [pc, #4]	; (1e59c <ipsp_disconnected+0x24>)
   1e598:	601a      	str	r2, [r3, #0]
   1e59a:	e7f8      	b.n	1e58e <ipsp_disconnected+0x16>
   1e59c:	20001e80 	.word	0x20001e80

0001e5a0 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e5a0:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1e5a2:	4b06      	ldr	r3, [pc, #24]	; (1e5bc <disconnected+0x1c>)
   1e5a4:	681b      	ldr	r3, [r3, #0]
   1e5a6:	4283      	cmp	r3, r0
   1e5a8:	d000      	beq.n	1e5ac <disconnected+0xc>
   1e5aa:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1e5ac:	4618      	mov	r0, r3
   1e5ae:	f7e8 fe19 	bl	71e4 <bt_conn_unref>
	default_conn = NULL;
   1e5b2:	2200      	movs	r2, #0
   1e5b4:	4b01      	ldr	r3, [pc, #4]	; (1e5bc <disconnected+0x1c>)
   1e5b6:	601a      	str	r2, [r3, #0]
   1e5b8:	e7f7      	b.n	1e5aa <disconnected+0xa>
   1e5ba:	bf00      	nop
   1e5bc:	20001e80 	.word	0x20001e80

0001e5c0 <ipsp_connected>:
{
   1e5c0:	b570      	push	{r4, r5, r6, lr}
   1e5c2:	b08e      	sub	sp, #56	; 0x38
   1e5c4:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e5c6:	a909      	add	r1, sp, #36	; 0x24
   1e5c8:	6800      	ldr	r0, [r0, #0]
   1e5ca:	f7e8 ff41 	bl	7450 <bt_conn_get_info>
   1e5ce:	2800      	cmp	r0, #0
   1e5d0:	db06      	blt.n	1e5e0 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e5d2:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1e5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1e5d8:	3306      	adds	r3, #6
   1e5da:	4631      	mov	r1, r6
   1e5dc:	2206      	movs	r2, #6
   1e5de:	e008      	b.n	1e5f2 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1e5e0:	4620      	mov	r0, r4
   1e5e2:	f7ea f8b2 	bl	874a <bt_l2cap_chan_disconnect>
   1e5e6:	e05a      	b.n	1e69e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e5e8:	7818      	ldrb	r0, [r3, #0]
   1e5ea:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1e5ec:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e5ee:	3b01      	subs	r3, #1
   1e5f0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1e5f2:	2a00      	cmp	r2, #0
   1e5f4:	d1f8      	bne.n	1e5e8 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e5f6:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1e5fc:	3306      	adds	r3, #6
   1e5fe:	4608      	mov	r0, r1
   1e600:	2206      	movs	r2, #6
   1e602:	e004      	b.n	1e60e <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e604:	781d      	ldrb	r5, [r3, #0]
   1e606:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1e608:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e60a:	3b01      	subs	r3, #1
   1e60c:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1e60e:	2a00      	cmp	r2, #0
   1e610:	d1f8      	bne.n	1e604 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e612:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e616:	f3bf 8f5b 	dmb	ish
   1e61a:	68da      	ldr	r2, [r3, #12]
   1e61c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e620:	f012 0f01 	tst.w	r2, #1
   1e624:	d104      	bne.n	1e630 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1e626:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1e628:	2206      	movs	r2, #6
   1e62a:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e62c:	2202      	movs	r2, #2
   1e62e:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1e630:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1e632:	2306      	movs	r3, #6
   1e634:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1e638:	2302      	movs	r3, #2
   1e63a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1e63e:	23fe      	movs	r3, #254	; 0xfe
   1e640:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1e644:	2380      	movs	r3, #128	; 0x80
   1e646:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e64a:	2300      	movs	r3, #0
   1e64c:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e650:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e652:	2203      	movs	r2, #3
   1e654:	a805      	add	r0, sp, #20
   1e656:	f7e1 fe33 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e65a:	23ff      	movs	r3, #255	; 0xff
   1e65c:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1e660:	23fe      	movs	r3, #254	; 0xfe
   1e662:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e666:	2203      	movs	r2, #3
   1e668:	9907      	ldr	r1, [sp, #28]
   1e66a:	4411      	add	r1, r2
   1e66c:	f10d 0019 	add.w	r0, sp, #25
   1e670:	f7e1 fe26 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e674:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e678:	2b02      	cmp	r3, #2
   1e67a:	d012      	beq.n	1e6a2 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e67c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e680:	2b03      	cmp	r3, #3
   1e682:	d015      	beq.n	1e6b0 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e684:	2305      	movs	r3, #5
   1e686:	9300      	str	r3, [sp, #0]
   1e688:	2300      	movs	r3, #0
   1e68a:	aa07      	add	r2, sp, #28
   1e68c:	a903      	add	r1, sp, #12
   1e68e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e692:	f002 f903 	bl	2089c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e696:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e69a:	f7fd fdd1 	bl	1c240 <net_if_up>
}
   1e69e:	b00e      	add	sp, #56	; 0x38
   1e6a0:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1e6a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e6a6:	f083 0302 	eor.w	r3, r3, #2
   1e6aa:	f88d 3014 	strb.w	r3, [sp, #20]
   1e6ae:	e7e5      	b.n	1e67c <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1e6b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e6b4:	f083 0302 	eor.w	r3, r3, #2
   1e6b8:	f88d 3014 	strb.w	r3, [sp, #20]
   1e6bc:	e7e2      	b.n	1e684 <ipsp_connected+0xc4>
	...

0001e6c0 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e6c0:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e6c2:	4804      	ldr	r0, [pc, #16]	; (1e6d4 <net_bt_init+0x14>)
   1e6c4:	f7e8 fbb6 	bl	6e34 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e6c8:	4803      	ldr	r0, [pc, #12]	; (1e6d8 <net_bt_init+0x18>)
   1e6ca:	f7e9 ffc5 	bl	8658 <bt_l2cap_server_register>

	return 0;
}
   1e6ce:	2000      	movs	r0, #0
   1e6d0:	bd08      	pop	{r3, pc}
   1e6d2:	bf00      	nop
   1e6d4:	2000bdec 	.word	0x2000bdec
   1e6d8:	2000be1c 	.word	0x2000be1c

0001e6dc <bt_iface_send>:
{
   1e6dc:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1e6de:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e6e0:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1e6e2:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1e6e4:	2300      	movs	r3, #0
   1e6e6:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1e6e8:	4608      	mov	r0, r1
   1e6ea:	f7fe ffc2 	bl	1d672 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e6ee:	4629      	mov	r1, r5
   1e6f0:	1d20      	adds	r0, r4, #4
   1e6f2:	f7ea f9bb 	bl	8a6c <bt_l2cap_chan_send>
}
   1e6f6:	bd38      	pop	{r3, r4, r5, pc}

0001e6f8 <bt_iface_init>:
   1e6f8:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e6fa:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1e6fc:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1e6fe:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e700:	f3bf 8f5b 	dmb	ish
   1e704:	e850 3f00 	ldrex	r3, [r0]
   1e708:	f043 0302 	orr.w	r3, r3, #2
   1e70c:	e840 3200 	strex	r2, r3, [r0]
   1e710:	2a00      	cmp	r2, #0
   1e712:	d1f7      	bne.n	1e704 <bt_iface_init+0xc>
   1e714:	f3bf 8f5b 	dmb	ish
   1e718:	4770      	bx	lr
	...

0001e71c <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e71c:	b510      	push	{r4, lr}
   1e71e:	b086      	sub	sp, #24
   1e720:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e722:	4913      	ldr	r1, [pc, #76]	; (1e770 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e724:	4610      	mov	r0, r2
   1e726:	f7e1 fe6f 	bl	408 <strcmp>
   1e72a:	b140      	cbz	r0, 1e73e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1e72c:	4911      	ldr	r1, [pc, #68]	; (1e774 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e72e:	4620      	mov	r0, r4
   1e730:	f7e1 fe6a 	bl	408 <strcmp>
   1e734:	b9c0      	cbnz	r0, 1e768 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1e736:	f7e8 f879 	bl	682c <bt_le_adv_stop>
}
   1e73a:	b006      	add	sp, #24
   1e73c:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e73e:	2300      	movs	r3, #0
   1e740:	9303      	str	r3, [sp, #12]
   1e742:	9304      	str	r3, [sp, #16]
   1e744:	9305      	str	r3, [sp, #20]
   1e746:	2301      	movs	r3, #1
   1e748:	f88d 300c 	strb.w	r3, [sp, #12]
   1e74c:	22a0      	movs	r2, #160	; 0xa0
   1e74e:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e752:	22f0      	movs	r2, #240	; 0xf0
   1e754:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e758:	9300      	str	r3, [sp, #0]
   1e75a:	4b07      	ldr	r3, [pc, #28]	; (1e778 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e75c:	2202      	movs	r2, #2
   1e75e:	4907      	ldr	r1, [pc, #28]	; (1e77c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1e760:	a803      	add	r0, sp, #12
   1e762:	f7e7 ffb9 	bl	66d8 <bt_le_adv_start>
   1e766:	e7e8      	b.n	1e73a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1e768:	f06f 0015 	mvn.w	r0, #21
   1e76c:	e7e5      	b.n	1e73a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1e76e:	bf00      	nop
   1e770:	000314e0 	.word	0x000314e0
   1e774:	000314e4 	.word	0x000314e4
   1e778:	000314e8 	.word	0x000314e8
   1e77c:	000314d0 	.word	0x000314d0

0001e780 <net_icmpv6_register_handler>:
	node->next = list->head;
   1e780:	4b04      	ldr	r3, [pc, #16]	; (1e794 <net_icmpv6_register_handler+0x14>)
   1e782:	681a      	ldr	r2, [r3, #0]
   1e784:	6002      	str	r2, [r0, #0]
	list->head = node;
   1e786:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1e788:	685b      	ldr	r3, [r3, #4]
   1e78a:	b103      	cbz	r3, 1e78e <net_icmpv6_register_handler+0xe>
   1e78c:	4770      	bx	lr
		list->tail = list->head;
   1e78e:	4b01      	ldr	r3, [pc, #4]	; (1e794 <net_icmpv6_register_handler+0x14>)
   1e790:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1e792:	e7fb      	b.n	1e78c <net_icmpv6_register_handler+0xc>
   1e794:	20001e84 	.word	0x20001e84

0001e798 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1e798:	4601      	mov	r1, r0
	return list->head;
   1e79a:	4b10      	ldr	r3, [pc, #64]	; (1e7dc <net_icmpv6_unregister_handler+0x44>)
   1e79c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1e79e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e7a0:	b1d3      	cbz	r3, 1e7d8 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1e7a2:	4299      	cmp	r1, r3
   1e7a4:	d002      	beq.n	1e7ac <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1e7a6:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e7a8:	681b      	ldr	r3, [r3, #0]
   1e7aa:	e7f9      	b.n	1e7a0 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1e7ac:	b142      	cbz	r2, 1e7c0 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1e7ae:	6803      	ldr	r3, [r0, #0]
   1e7b0:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1e7b2:	4b0a      	ldr	r3, [pc, #40]	; (1e7dc <net_icmpv6_unregister_handler+0x44>)
   1e7b4:	685b      	ldr	r3, [r3, #4]
   1e7b6:	4298      	cmp	r0, r3
   1e7b8:	d00b      	beq.n	1e7d2 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1e7ba:	2300      	movs	r3, #0
   1e7bc:	6003      	str	r3, [r0, #0]
   1e7be:	4770      	bx	lr
		list->head = node->next;
   1e7c0:	6802      	ldr	r2, [r0, #0]
   1e7c2:	4b06      	ldr	r3, [pc, #24]	; (1e7dc <net_icmpv6_unregister_handler+0x44>)
   1e7c4:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1e7c6:	685b      	ldr	r3, [r3, #4]
   1e7c8:	4298      	cmp	r0, r3
   1e7ca:	d1f6      	bne.n	1e7ba <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1e7cc:	4b03      	ldr	r3, [pc, #12]	; (1e7dc <net_icmpv6_unregister_handler+0x44>)
   1e7ce:	605a      	str	r2, [r3, #4]
   1e7d0:	e7f3      	b.n	1e7ba <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1e7d2:	4b02      	ldr	r3, [pc, #8]	; (1e7dc <net_icmpv6_unregister_handler+0x44>)
   1e7d4:	605a      	str	r2, [r3, #4]
   1e7d6:	e7f0      	b.n	1e7ba <net_icmpv6_unregister_handler+0x22>
   1e7d8:	4770      	bx	lr
   1e7da:	bf00      	nop
   1e7dc:	20001e84 	.word	0x20001e84

0001e7e0 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1e7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7e4:	b086      	sub	sp, #24
   1e7e6:	4606      	mov	r6, r0
   1e7e8:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1e7ea:	2300      	movs	r3, #0
   1e7ec:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e7f0:	f7ff fa18 	bl	1dc24 <net_pkt_icmp_data>
   1e7f4:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e7f6:	2204      	movs	r2, #4
   1e7f8:	4601      	mov	r1, r0
   1e7fa:	4630      	mov	r0, r6
   1e7fc:	f7ff fdfc 	bl	1e3f8 <net_header_fits>
   1e800:	b170      	cbz	r0, 1e820 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1e802:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e804:	b173      	cbz	r3, 1e824 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1e806:	2300      	movs	r3, #0
   1e808:	70a3      	strb	r3, [r4, #2]
   1e80a:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e80c:	213a      	movs	r1, #58	; 0x3a
   1e80e:	4630      	mov	r0, r6
   1e810:	f7ff fd99 	bl	1e346 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1e814:	43c0      	mvns	r0, r0
   1e816:	8060      	strh	r0, [r4, #2]

		return frag;
   1e818:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1e81a:	b006      	add	sp, #24
   1e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e820:	2300      	movs	r3, #0
   1e822:	e7ef      	b.n	1e804 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e824:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e828:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e82c:	441a      	add	r2, r3
   1e82e:	3202      	adds	r2, #2
   1e830:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1e834:	f8cd 8008 	str.w	r8, [sp, #8]
   1e838:	f10d 0416 	add.w	r4, sp, #22
   1e83c:	9401      	str	r4, [sp, #4]
   1e83e:	2702      	movs	r7, #2
   1e840:	9700      	str	r7, [sp, #0]
   1e842:	ab05      	add	r3, sp, #20
   1e844:	b292      	uxth	r2, r2
   1e846:	4629      	mov	r1, r5
   1e848:	4630      	mov	r0, r6
   1e84a:	f7ff f902 	bl	1da52 <net_pkt_write>
   1e84e:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e850:	213a      	movs	r1, #58	; 0x3a
   1e852:	4630      	mov	r0, r6
   1e854:	f7ff fd77 	bl	1e346 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1e858:	43c0      	mvns	r0, r0
   1e85a:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1e85e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e862:	3a02      	subs	r2, #2
   1e864:	f8cd 8008 	str.w	r8, [sp, #8]
   1e868:	9401      	str	r4, [sp, #4]
   1e86a:	9700      	str	r7, [sp, #0]
   1e86c:	ab05      	add	r3, sp, #20
   1e86e:	b292      	uxth	r2, r2
   1e870:	4629      	mov	r1, r5
   1e872:	4630      	mov	r0, r6
   1e874:	f7ff f8ed 	bl	1da52 <net_pkt_write>
	return frag;
   1e878:	e7cf      	b.n	1e81a <net_icmpv6_set_chksum+0x3a>

0001e87a <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e87a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e87c:	b085      	sub	sp, #20
   1e87e:	4605      	mov	r5, r0
   1e880:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e882:	f7ff f9cf 	bl	1dc24 <net_pkt_icmp_data>
   1e886:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e888:	2204      	movs	r2, #4
   1e88a:	4601      	mov	r1, r0
   1e88c:	4628      	mov	r0, r5
   1e88e:	f7ff fdb3 	bl	1e3f8 <net_header_fits>
   1e892:	b120      	cbz	r0, 1e89e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1e894:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e896:	b126      	cbz	r6, 1e8a2 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e898:	4620      	mov	r0, r4
   1e89a:	b005      	add	sp, #20
   1e89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1e89e:	2600      	movs	r6, #0
   1e8a0:	e7f9      	b.n	1e896 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e8a2:	68a8      	ldr	r0, [r5, #8]
   1e8a4:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1e8a8:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1e8ac:	9700      	str	r7, [sp, #0]
   1e8ae:	2301      	movs	r3, #1
   1e8b0:	f10d 020e 	add.w	r2, sp, #14
   1e8b4:	4421      	add	r1, r4
   1e8b6:	f7ff f85a 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1e8ba:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8be:	1c7b      	adds	r3, r7, #1
   1e8c0:	9300      	str	r3, [sp, #0]
   1e8c2:	2301      	movs	r3, #1
   1e8c4:	f10d 020e 	add.w	r2, sp, #14
   1e8c8:	f7ff f851 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e8cc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1e8d0:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e8d2:	9300      	str	r3, [sp, #0]
   1e8d4:	2302      	movs	r3, #2
   1e8d6:	f10d 020e 	add.w	r2, sp, #14
   1e8da:	f7ff f848 	bl	1d96e <net_frag_read>
	if (!frag) {
   1e8de:	b108      	cbz	r0, 1e8e4 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1e8e0:	463c      	mov	r4, r7
   1e8e2:	e7d9      	b.n	1e898 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1e8e4:	4634      	mov	r4, r6
   1e8e6:	e7d7      	b.n	1e898 <net_icmpv6_get_hdr+0x1e>

0001e8e8 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8ec:	b086      	sub	sp, #24
   1e8ee:	4606      	mov	r6, r0
   1e8f0:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e8f2:	2204      	movs	r2, #4
   1e8f4:	f7ff fd80 	bl	1e3f8 <net_header_fits>
   1e8f8:	b128      	cbz	r0, 1e906 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1e8fa:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1e8fc:	b12d      	cbz	r5, 1e90a <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e8fe:	4620      	mov	r0, r4
   1e900:	b006      	add	sp, #24
   1e902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e906:	2500      	movs	r5, #0
   1e908:	e7f8      	b.n	1e8fc <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e90a:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1e90e:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e912:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1e916:	9702      	str	r7, [sp, #8]
   1e918:	9401      	str	r4, [sp, #4]
   1e91a:	f04f 0801 	mov.w	r8, #1
   1e91e:	f8cd 8000 	str.w	r8, [sp]
   1e922:	f10d 0316 	add.w	r3, sp, #22
   1e926:	440a      	add	r2, r1
   1e928:	68b1      	ldr	r1, [r6, #8]
   1e92a:	4630      	mov	r0, r6
   1e92c:	f7ff f891 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1e930:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e934:	eb04 0308 	add.w	r3, r4, r8
   1e938:	9702      	str	r7, [sp, #8]
   1e93a:	9301      	str	r3, [sp, #4]
   1e93c:	f8cd 8000 	str.w	r8, [sp]
   1e940:	f10d 0316 	add.w	r3, sp, #22
   1e944:	4601      	mov	r1, r0
   1e946:	4630      	mov	r0, r6
   1e948:	f7ff f883 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e94c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1e950:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e952:	9702      	str	r7, [sp, #8]
   1e954:	9301      	str	r3, [sp, #4]
   1e956:	2302      	movs	r3, #2
   1e958:	9300      	str	r3, [sp, #0]
   1e95a:	f10d 0316 	add.w	r3, sp, #22
   1e95e:	4601      	mov	r1, r0
   1e960:	4630      	mov	r0, r6
   1e962:	f7ff f876 	bl	1da52 <net_pkt_write>
	if (!frag) {
   1e966:	2800      	cmp	r0, #0
   1e968:	d1c9      	bne.n	1e8fe <net_icmpv6_set_hdr+0x16>
		return NULL;
   1e96a:	462c      	mov	r4, r5
   1e96c:	e7c7      	b.n	1e8fe <net_icmpv6_set_hdr+0x16>
	...

0001e970 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1e970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e974:	b09a      	sub	sp, #104	; 0x68
   1e976:	4606      	mov	r6, r0
	return pkt->iface;
   1e978:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e97a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e97e:	2000      	movs	r0, #0
   1e980:	f7fe fe06 	bl	1d590 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e984:	2800      	cmp	r0, #0
   1e986:	f000 80a1 	beq.w	1eacc <handle_echo_request+0x15c>
   1e98a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e98c:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1e98e:	2100      	movs	r1, #0
   1e990:	e002      	b.n	1e998 <handle_echo_request+0x28>
		bytes += buf->len;
   1e992:	899a      	ldrh	r2, [r3, #12]
   1e994:	4411      	add	r1, r2
		buf = buf->frags;
   1e996:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1e998:	2b00      	cmp	r3, #0
   1e99a:	d1fa      	bne.n	1e992 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1e99c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e9a0:	2200      	movs	r2, #0
   1e9a2:	4630      	mov	r0, r6
   1e9a4:	f7fe fea6 	bl	1d6f4 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1e9a8:	4607      	mov	r7, r0
   1e9aa:	2800      	cmp	r0, #0
   1e9ac:	f000 808b 	beq.w	1eac6 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e9b0:	4601      	mov	r1, r0
   1e9b2:	4620      	mov	r0, r4
   1e9b4:	f7fe fe87 	bl	1d6c6 <net_pkt_frag_add>
	pkt->family = family;
   1e9b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e9bc:	220a      	movs	r2, #10
   1e9be:	f362 03c6 	bfi	r3, r2, #3, #4
   1e9c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e9c6:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e9c8:	7d6b      	ldrb	r3, [r5, #21]
   1e9ca:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e9ce:	7d6b      	ldrb	r3, [r5, #21]
   1e9d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e9d4:	f107 0008 	add.w	r0, r7, #8
   1e9d8:	f7fc f98d 	bl	1acf6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e9dc:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1e9e0:	2328      	movs	r3, #40	; 0x28
   1e9e2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1e9e6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1e9ea:	2b00      	cmp	r3, #0
   1e9ec:	d076      	beq.n	1eadc <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1e9ee:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1e9f2:	68a3      	ldr	r3, [r4, #8]
   1e9f4:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e9f6:	2260      	movs	r2, #96	; 0x60
   1e9f8:	701a      	strb	r2, [r3, #0]
   1e9fa:	68a3      	ldr	r3, [r4, #8]
   1e9fc:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e9fe:	2300      	movs	r3, #0
   1ea00:	7053      	strb	r3, [r2, #1]
   1ea02:	68a2      	ldr	r2, [r4, #8]
   1ea04:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1ea06:	7093      	strb	r3, [r2, #2]
   1ea08:	70d3      	strb	r3, [r2, #3]
   1ea0a:	68a3      	ldr	r3, [r4, #8]
   1ea0c:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1ea0e:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1ea12:	71da      	strb	r2, [r3, #7]
   1ea14:	68a3      	ldr	r3, [r4, #8]
   1ea16:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1ea1a:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1ea1e:	2bff      	cmp	r3, #255	; 0xff
   1ea20:	d060      	beq.n	1eae4 <handle_echo_request+0x174>
   1ea22:	68b3      	ldr	r3, [r6, #8]
   1ea24:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ea26:	af0e      	add	r7, sp, #56	; 0x38
   1ea28:	462b      	mov	r3, r5
   1ea2a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ea2e:	6859      	ldr	r1, [r3, #4]
   1ea30:	689a      	ldr	r2, [r3, #8]
   1ea32:	68db      	ldr	r3, [r3, #12]
   1ea34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ea36:	af01      	add	r7, sp, #4
   1ea38:	ab0e      	add	r3, sp, #56	; 0x38
   1ea3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ea3c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ea40:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1ea44:	462b      	mov	r3, r5
   1ea46:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1ea4a:	6859      	ldr	r1, [r3, #4]
   1ea4c:	689a      	ldr	r2, [r3, #8]
   1ea4e:	68db      	ldr	r3, [r3, #12]
   1ea50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ea54:	ad12      	add	r5, sp, #72	; 0x48
   1ea56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ea58:	f8cc 0008 	str.w	r0, [ip, #8]
   1ea5c:	f8cc 100c 	str.w	r1, [ip, #12]
   1ea60:	f8cc 2010 	str.w	r2, [ip, #16]
   1ea64:	f8cc 3014 	str.w	r3, [ip, #20]
   1ea68:	68a3      	ldr	r3, [r4, #8]
   1ea6a:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ea6e:	ad16      	add	r5, sp, #88	; 0x58
   1ea70:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1ea74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ea78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ea7a:	f8ce 0018 	str.w	r0, [lr, #24]
   1ea7e:	f8ce 101c 	str.w	r1, [lr, #28]
   1ea82:	f8ce 2020 	str.w	r2, [lr, #32]
   1ea86:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ea8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ea8c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ea8e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1ea92:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ea96:	2500      	movs	r5, #0
   1ea98:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ea9a:	a905      	add	r1, sp, #20
   1ea9c:	4620      	mov	r0, r4
   1ea9e:	f7ff feec 	bl	1e87a <net_icmpv6_get_hdr>
   1eaa2:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1eaa4:	2381      	movs	r3, #129	; 0x81
   1eaa6:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1eaa8:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1eaaa:	7085      	strb	r5, [r0, #2]
   1eaac:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1eaae:	4620      	mov	r0, r4
   1eab0:	f7ff ff1a 	bl	1e8e8 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1eab4:	68a1      	ldr	r1, [r4, #8]
   1eab6:	4620      	mov	r0, r4
   1eab8:	f7ff fe92 	bl	1e7e0 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1eabc:	4620      	mov	r0, r4
   1eabe:	f7fc f9d7 	bl	1ae70 <net_send_data>
   1eac2:	42a8      	cmp	r0, r5
   1eac4:	da3c      	bge.n	1eb40 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1eac6:	4620      	mov	r0, r4
   1eac8:	f7fe fdd3 	bl	1d672 <net_pkt_unref>
	net_stats.icmp.drop++;
   1eacc:	4a21      	ldr	r2, [pc, #132]	; (1eb54 <handle_echo_request+0x1e4>)
   1eace:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ead0:	3301      	adds	r3, #1
   1ead2:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1ead4:	2002      	movs	r0, #2
}
   1ead6:	b01a      	add	sp, #104	; 0x68
   1ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1eadc:	2300      	movs	r3, #0
   1eade:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1eae2:	e786      	b.n	1e9f2 <handle_echo_request+0x82>
	return pkt->frags->data;
   1eae4:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1eae6:	af06      	add	r7, sp, #24
   1eae8:	689b      	ldr	r3, [r3, #8]
   1eaea:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1eaee:	6859      	ldr	r1, [r3, #4]
   1eaf0:	689a      	ldr	r2, [r3, #8]
   1eaf2:	68db      	ldr	r3, [r3, #12]
   1eaf4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1eaf6:	af06      	add	r7, sp, #24
   1eaf8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1eafa:	f8cc 0018 	str.w	r0, [ip, #24]
   1eafe:	f8cc 101c 	str.w	r1, [ip, #28]
   1eb02:	f8cc 2020 	str.w	r2, [ip, #32]
   1eb06:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1eb0a:	68a3      	ldr	r3, [r4, #8]
   1eb0c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1eb10:	68b3      	ldr	r3, [r6, #8]
   1eb12:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1eb14:	3118      	adds	r1, #24
   1eb16:	4628      	mov	r0, r5
   1eb18:	f7fd f910 	bl	1bd3c <net_if_ipv6_select_src_addr>
   1eb1c:	4603      	mov	r3, r0
   1eb1e:	ad0a      	add	r5, sp, #40	; 0x28
   1eb20:	6800      	ldr	r0, [r0, #0]
   1eb22:	6859      	ldr	r1, [r3, #4]
   1eb24:	689a      	ldr	r2, [r3, #8]
   1eb26:	68db      	ldr	r3, [r3, #12]
   1eb28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1eb2a:	ad0a      	add	r5, sp, #40	; 0x28
   1eb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1eb2e:	f8c8 0008 	str.w	r0, [r8, #8]
   1eb32:	f8c8 100c 	str.w	r1, [r8, #12]
   1eb36:	f8c8 2010 	str.w	r2, [r8, #16]
   1eb3a:	f8c8 3014 	str.w	r3, [r8, #20]
   1eb3e:	e7a4      	b.n	1ea8a <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1eb40:	4630      	mov	r0, r6
   1eb42:	f7fe fd96 	bl	1d672 <net_pkt_unref>
	net_stats.icmp.sent++;
   1eb46:	4a03      	ldr	r2, [pc, #12]	; (1eb54 <handle_echo_request+0x1e4>)
   1eb48:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1eb4a:	3301      	adds	r3, #1
   1eb4c:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1eb4e:	4628      	mov	r0, r5
   1eb50:	e7c1      	b.n	1ead6 <handle_echo_request+0x166>
   1eb52:	bf00      	nop
   1eb54:	20002a58 	.word	0x20002a58

0001eb58 <net_icmpv6_get_ns_hdr>:
{
   1eb58:	b570      	push	{r4, r5, r6, lr}
   1eb5a:	b084      	sub	sp, #16
   1eb5c:	4605      	mov	r5, r0
   1eb5e:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eb60:	2104      	movs	r1, #4
   1eb62:	f7ff f874 	bl	1dc4e <net_pkt_icmp_opt_data>
   1eb66:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eb68:	2214      	movs	r2, #20
   1eb6a:	4601      	mov	r1, r0
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	f7ff fc43 	bl	1e3f8 <net_header_fits>
   1eb72:	b110      	cbz	r0, 1eb7a <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1eb74:	4620      	mov	r0, r4
}
   1eb76:	b004      	add	sp, #16
   1eb78:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1eb7a:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1eb7c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1eb80:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1eb84:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1eb86:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1eb88:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1eb8a:	9300      	str	r3, [sp, #0]
   1eb8c:	2310      	movs	r3, #16
   1eb8e:	f10d 020e 	add.w	r2, sp, #14
   1eb92:	b289      	uxth	r1, r1
   1eb94:	f7fe feeb 	bl	1d96e <net_frag_read>
	if (!frag) {
   1eb98:	2800      	cmp	r0, #0
   1eb9a:	d0ec      	beq.n	1eb76 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1eb9c:	4630      	mov	r0, r6
   1eb9e:	e7ea      	b.n	1eb76 <net_icmpv6_get_ns_hdr+0x1e>

0001eba0 <net_icmpv6_set_ns_hdr>:
{
   1eba0:	b570      	push	{r4, r5, r6, lr}
   1eba2:	b086      	sub	sp, #24
   1eba4:	4605      	mov	r5, r0
   1eba6:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1eba8:	2300      	movs	r3, #0
   1ebaa:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ebac:	2104      	movs	r1, #4
   1ebae:	f7ff f84e 	bl	1dc4e <net_pkt_icmp_opt_data>
   1ebb2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ebb4:	2214      	movs	r2, #20
   1ebb6:	4601      	mov	r1, r0
   1ebb8:	4628      	mov	r0, r5
   1ebba:	f7ff fc1d 	bl	1e3f8 <net_header_fits>
   1ebbe:	b110      	cbz	r0, 1ebc6 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ebc0:	4620      	mov	r0, r4
}
   1ebc2:	b006      	add	sp, #24
   1ebc4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ebc6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ebca:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ebce:	441a      	add	r2, r3
   1ebd0:	3204      	adds	r2, #4
   1ebd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ebd6:	9402      	str	r4, [sp, #8]
   1ebd8:	ab05      	add	r3, sp, #20
   1ebda:	9301      	str	r3, [sp, #4]
   1ebdc:	2304      	movs	r3, #4
   1ebde:	9300      	str	r3, [sp, #0]
   1ebe0:	f10d 0312 	add.w	r3, sp, #18
   1ebe4:	b292      	uxth	r2, r2
   1ebe6:	68a9      	ldr	r1, [r5, #8]
   1ebe8:	4628      	mov	r0, r5
   1ebea:	f7fe ff32 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ebee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ebf2:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ebf4:	9402      	str	r4, [sp, #8]
   1ebf6:	9301      	str	r3, [sp, #4]
   1ebf8:	2310      	movs	r3, #16
   1ebfa:	9300      	str	r3, [sp, #0]
   1ebfc:	f10d 0312 	add.w	r3, sp, #18
   1ec00:	4601      	mov	r1, r0
   1ec02:	4628      	mov	r0, r5
   1ec04:	f7fe ff25 	bl	1da52 <net_pkt_write>
	if (!frag) {
   1ec08:	2800      	cmp	r0, #0
   1ec0a:	d0da      	beq.n	1ebc2 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1ec0c:	4630      	mov	r0, r6
   1ec0e:	e7d8      	b.n	1ebc2 <net_icmpv6_set_ns_hdr+0x22>

0001ec10 <net_icmpv6_get_nd_opt_hdr>:
{
   1ec10:	b570      	push	{r4, r5, r6, lr}
   1ec12:	b084      	sub	sp, #16
   1ec14:	4605      	mov	r5, r0
   1ec16:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1ec18:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ec1c:	3104      	adds	r1, #4
   1ec1e:	f7ff f816 	bl	1dc4e <net_pkt_icmp_opt_data>
   1ec22:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ec24:	2202      	movs	r2, #2
   1ec26:	4601      	mov	r1, r0
   1ec28:	4628      	mov	r0, r5
   1ec2a:	f7ff fbe5 	bl	1e3f8 <net_header_fits>
   1ec2e:	b110      	cbz	r0, 1ec36 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1ec30:	4620      	mov	r0, r4
}
   1ec32:	b004      	add	sp, #16
   1ec34:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1ec36:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1ec38:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ec3c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1ec40:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1ec42:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1ec46:	4419      	add	r1, r3
   1ec48:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1ec4a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ec4c:	9600      	str	r6, [sp, #0]
   1ec4e:	2301      	movs	r3, #1
   1ec50:	f10d 020e 	add.w	r2, sp, #14
   1ec54:	b289      	uxth	r1, r1
   1ec56:	f7fe fe8a 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ec5a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ec5e:	1c73      	adds	r3, r6, #1
   1ec60:	9300      	str	r3, [sp, #0]
   1ec62:	2301      	movs	r3, #1
   1ec64:	f10d 020e 	add.w	r2, sp, #14
   1ec68:	f7fe fe81 	bl	1d96e <net_frag_read>
	if (!frag) {
   1ec6c:	2800      	cmp	r0, #0
   1ec6e:	d0e0      	beq.n	1ec32 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1ec70:	4630      	mov	r0, r6
   1ec72:	e7de      	b.n	1ec32 <net_icmpv6_get_nd_opt_hdr+0x22>

0001ec74 <net_icmpv6_get_na_hdr>:
{
   1ec74:	b570      	push	{r4, r5, r6, lr}
   1ec76:	b084      	sub	sp, #16
   1ec78:	4605      	mov	r5, r0
   1ec7a:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ec7c:	2104      	movs	r1, #4
   1ec7e:	f7fe ffe6 	bl	1dc4e <net_pkt_icmp_opt_data>
   1ec82:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ec84:	2214      	movs	r2, #20
   1ec86:	4601      	mov	r1, r0
   1ec88:	4628      	mov	r0, r5
   1ec8a:	f7ff fbb5 	bl	1e3f8 <net_header_fits>
   1ec8e:	b110      	cbz	r0, 1ec96 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ec90:	4620      	mov	r0, r4
}
   1ec92:	b004      	add	sp, #16
   1ec94:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ec96:	68a8      	ldr	r0, [r5, #8]
   1ec98:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ec9c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eca0:	4419      	add	r1, r3
   1eca2:	3104      	adds	r1, #4
   1eca4:	9600      	str	r6, [sp, #0]
   1eca6:	2301      	movs	r3, #1
   1eca8:	f10d 020e 	add.w	r2, sp, #14
   1ecac:	b289      	uxth	r1, r1
   1ecae:	f7fe fe5e 	bl	1d96e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1ecb2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1ecb6:	2300      	movs	r3, #0
   1ecb8:	9300      	str	r3, [sp, #0]
   1ecba:	2303      	movs	r3, #3
   1ecbc:	f10d 020e 	add.w	r2, sp, #14
   1ecc0:	f7fe fe55 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ecc4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1ecc8:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ecca:	9300      	str	r3, [sp, #0]
   1eccc:	2310      	movs	r3, #16
   1ecce:	f10d 020e 	add.w	r2, sp, #14
   1ecd2:	f7fe fe4c 	bl	1d96e <net_frag_read>
	if (!frag) {
   1ecd6:	2800      	cmp	r0, #0
   1ecd8:	d0db      	beq.n	1ec92 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1ecda:	4630      	mov	r0, r6
   1ecdc:	e7d9      	b.n	1ec92 <net_icmpv6_get_na_hdr+0x1e>

0001ecde <net_icmpv6_set_na_hdr>:
{
   1ecde:	b570      	push	{r4, r5, r6, lr}
   1ece0:	b086      	sub	sp, #24
   1ece2:	4605      	mov	r5, r0
   1ece4:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1ece6:	2300      	movs	r3, #0
   1ece8:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ecec:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ecf0:	2104      	movs	r1, #4
   1ecf2:	f7fe ffac 	bl	1dc4e <net_pkt_icmp_opt_data>
   1ecf6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ecf8:	2214      	movs	r2, #20
   1ecfa:	4601      	mov	r1, r0
   1ecfc:	4628      	mov	r0, r5
   1ecfe:	f7ff fb7b 	bl	1e3f8 <net_header_fits>
   1ed02:	b110      	cbz	r0, 1ed0a <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ed04:	4620      	mov	r0, r4
}
   1ed06:	b006      	add	sp, #24
   1ed08:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1ed0a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ed0e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ed12:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1ed14:	3204      	adds	r2, #4
   1ed16:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ed1a:	9402      	str	r4, [sp, #8]
   1ed1c:	9601      	str	r6, [sp, #4]
   1ed1e:	2301      	movs	r3, #1
   1ed20:	9300      	str	r3, [sp, #0]
   1ed22:	f10d 0312 	add.w	r3, sp, #18
   1ed26:	b292      	uxth	r2, r2
   1ed28:	68a9      	ldr	r1, [r5, #8]
   1ed2a:	4628      	mov	r0, r5
   1ed2c:	f7fe fe91 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1ed30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ed34:	9402      	str	r4, [sp, #8]
   1ed36:	ab05      	add	r3, sp, #20
   1ed38:	9301      	str	r3, [sp, #4]
   1ed3a:	2303      	movs	r3, #3
   1ed3c:	9300      	str	r3, [sp, #0]
   1ed3e:	f10d 0312 	add.w	r3, sp, #18
   1ed42:	4601      	mov	r1, r0
   1ed44:	4628      	mov	r0, r5
   1ed46:	f7fe fe84 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed4a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ed4e:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed50:	9402      	str	r4, [sp, #8]
   1ed52:	9301      	str	r3, [sp, #4]
   1ed54:	2310      	movs	r3, #16
   1ed56:	9300      	str	r3, [sp, #0]
   1ed58:	f10d 0312 	add.w	r3, sp, #18
   1ed5c:	4601      	mov	r1, r0
   1ed5e:	4628      	mov	r0, r5
   1ed60:	f7fe fe77 	bl	1da52 <net_pkt_write>
	if (!frag) {
   1ed64:	2800      	cmp	r0, #0
   1ed66:	d0ce      	beq.n	1ed06 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1ed68:	4630      	mov	r0, r6
   1ed6a:	e7cc      	b.n	1ed06 <net_icmpv6_set_na_hdr+0x28>

0001ed6c <net_icmpv6_get_ra_hdr>:
{
   1ed6c:	b570      	push	{r4, r5, r6, lr}
   1ed6e:	b084      	sub	sp, #16
   1ed70:	4606      	mov	r6, r0
   1ed72:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ed74:	2104      	movs	r1, #4
   1ed76:	f7fe ff6a 	bl	1dc4e <net_pkt_icmp_opt_data>
   1ed7a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed7c:	220c      	movs	r2, #12
   1ed7e:	4601      	mov	r1, r0
   1ed80:	4630      	mov	r0, r6
   1ed82:	f7ff fb39 	bl	1e3f8 <net_header_fits>
   1ed86:	b110      	cbz	r0, 1ed8e <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1ed88:	4620      	mov	r0, r4
}
   1ed8a:	b004      	add	sp, #16
   1ed8c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed8e:	68b0      	ldr	r0, [r6, #8]
   1ed90:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ed94:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed98:	4419      	add	r1, r3
   1ed9a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ed9c:	9500      	str	r5, [sp, #0]
   1ed9e:	2301      	movs	r3, #1
   1eda0:	f10d 020e 	add.w	r2, sp, #14
   1eda4:	b289      	uxth	r1, r1
   1eda6:	f7fe fde2 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1edaa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1edae:	1c6b      	adds	r3, r5, #1
   1edb0:	9300      	str	r3, [sp, #0]
   1edb2:	2301      	movs	r3, #1
   1edb4:	f10d 020e 	add.w	r2, sp, #14
   1edb8:	f7fe fdd9 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1edbc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1edc0:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1edc2:	9300      	str	r3, [sp, #0]
   1edc4:	2302      	movs	r3, #2
   1edc6:	f10d 020e 	add.w	r2, sp, #14
   1edca:	f7fe fdd0 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1edce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1edd2:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1edd4:	9300      	str	r3, [sp, #0]
   1edd6:	2304      	movs	r3, #4
   1edd8:	f10d 020e 	add.w	r2, sp, #14
   1eddc:	f7fe fdc7 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ede0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1ede4:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ede8:	9300      	str	r3, [sp, #0]
   1edea:	2304      	movs	r3, #4
   1edec:	f10d 020e 	add.w	r2, sp, #14
   1edf0:	f7fe fdbd 	bl	1d96e <net_frag_read>
	if (!frag) {
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d0c8      	beq.n	1ed8a <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1edf8:	4628      	mov	r0, r5
   1edfa:	e7c6      	b.n	1ed8a <net_icmpv6_get_ra_hdr+0x1e>

0001edfc <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1edfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee00:	b09f      	sub	sp, #124	; 0x7c
   1ee02:	4605      	mov	r5, r0
   1ee04:	4688      	mov	r8, r1
   1ee06:	4692      	mov	sl, r2
   1ee08:	4699      	mov	r9, r3
	return pkt->frags->data;
   1ee0a:	6883      	ldr	r3, [r0, #8]
   1ee0c:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1ee0e:	799b      	ldrb	r3, [r3, #6]
   1ee10:	2b3a      	cmp	r3, #58	; 0x3a
   1ee12:	d01d      	beq.n	1ee50 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1ee14:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1ee16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ee1a:	2000      	movs	r0, #0
   1ee1c:	f7fe fbb8 	bl	1d590 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1ee20:	4604      	mov	r4, r0
   1ee22:	2800      	cmp	r0, #0
   1ee24:	f000 8141 	beq.w	1f0aa <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1ee28:	68ab      	ldr	r3, [r5, #8]
   1ee2a:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1ee2c:	798b      	ldrb	r3, [r1, #6]
   1ee2e:	2b11      	cmp	r3, #17
   1ee30:	d019      	beq.n	1ee66 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1ee32:	2b06      	cmp	r3, #6
   1ee34:	d019      	beq.n	1ee6a <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1ee36:	687b      	ldr	r3, [r7, #4]
   1ee38:	689b      	ldr	r3, [r3, #8]
   1ee3a:	3118      	adds	r1, #24
   1ee3c:	4638      	mov	r0, r7
   1ee3e:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1ee40:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1ee44:	282f      	cmp	r0, #47	; 0x2f
   1ee46:	f240 80de 	bls.w	1f006 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1ee4a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1ee4e:	e00d      	b.n	1ee6c <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ee50:	a906      	add	r1, sp, #24
   1ee52:	f7ff fd12 	bl	1e87a <net_icmpv6_get_hdr>
   1ee56:	b118      	cbz	r0, 1ee60 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1ee58:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ee5c:	2b00      	cmp	r3, #0
   1ee5e:	dbd9      	blt.n	1ee14 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1ee60:	f06f 0515 	mvn.w	r5, #21
   1ee64:	e119      	b.n	1f09a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ee66:	2630      	movs	r6, #48	; 0x30
   1ee68:	e000      	b.n	1ee6c <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ee6a:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1ee6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ee70:	2230      	movs	r2, #48	; 0x30
   1ee72:	4631      	mov	r1, r6
   1ee74:	4628      	mov	r0, r5
   1ee76:	f7fe fc3d 	bl	1d6f4 <net_pkt_copy>
	if (!frag) {
   1ee7a:	4683      	mov	fp, r0
   1ee7c:	2800      	cmp	r0, #0
   1ee7e:	f000 8104 	beq.w	1f08a <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1ee82:	4601      	mov	r1, r0
   1ee84:	4620      	mov	r0, r4
   1ee86:	f7fe fc1e 	bl	1d6c6 <net_pkt_frag_add>
	pkt->family = family;
   1ee8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ee8e:	220a      	movs	r2, #10
   1ee90:	f362 03c6 	bfi	r3, r2, #3, #4
   1ee94:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1ee98:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ee9a:	7d7b      	ldrb	r3, [r7, #21]
   1ee9c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1eea0:	7d7b      	ldrb	r3, [r7, #21]
   1eea2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1eea6:	f10b 0008 	add.w	r0, fp, #8
   1eeaa:	f7fb ff24 	bl	1acf6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1eeae:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1eeb2:	2000      	movs	r0, #0
   1eeb4:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1eeb8:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1eeba:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1eebe:	f88d 8014 	strb.w	r8, [sp, #20]
   1eec2:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1eec6:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1eec8:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1eeca:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1eecc:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1eed0:	f882 e000 	strb.w	lr, [r2]
   1eed4:	68a2      	ldr	r2, [r4, #8]
   1eed6:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1eed8:	7050      	strb	r0, [r2, #1]
   1eeda:	68a2      	ldr	r2, [r4, #8]
   1eedc:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1eede:	7090      	strb	r0, [r2, #2]
   1eee0:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1eee2:	3608      	adds	r6, #8
   1eee4:	b2b6      	uxth	r6, r6
   1eee6:	68a2      	ldr	r2, [r4, #8]
   1eee8:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1eeea:	0a30      	lsrs	r0, r6, #8
   1eeec:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1eeee:	7156      	strb	r6, [r2, #5]
   1eef0:	68a2      	ldr	r2, [r4, #8]
   1eef2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1eef4:	203a      	movs	r0, #58	; 0x3a
   1eef6:	7190      	strb	r0, [r2, #6]
   1eef8:	68a2      	ldr	r2, [r4, #8]
   1eefa:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1eefc:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1eefe:	2228      	movs	r2, #40	; 0x28
   1ef00:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1ef04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1ef08:	9602      	str	r6, [sp, #8]
   1ef0a:	ab05      	add	r3, sp, #20
   1ef0c:	9301      	str	r3, [sp, #4]
   1ef0e:	f04f 0a01 	mov.w	sl, #1
   1ef12:	f8cd a000 	str.w	sl, [sp]
   1ef16:	f10d 0316 	add.w	r3, sp, #22
   1ef1a:	4620      	mov	r0, r4
   1ef1c:	f7fe fd99 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1ef20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ef24:	9602      	str	r6, [sp, #8]
   1ef26:	f10d 0315 	add.w	r3, sp, #21
   1ef2a:	9301      	str	r3, [sp, #4]
   1ef2c:	f8cd a000 	str.w	sl, [sp]
   1ef30:	f10d 0316 	add.w	r3, sp, #22
   1ef34:	4601      	mov	r1, r0
   1ef36:	4620      	mov	r0, r4
   1ef38:	f7fe fd8b 	bl	1da52 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1ef3c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ef40:	9602      	str	r6, [sp, #8]
   1ef42:	ab06      	add	r3, sp, #24
   1ef44:	9301      	str	r3, [sp, #4]
   1ef46:	2304      	movs	r3, #4
   1ef48:	9300      	str	r3, [sp, #0]
   1ef4a:	f10d 0316 	add.w	r3, sp, #22
   1ef4e:	4601      	mov	r1, r0
   1ef50:	4620      	mov	r0, r4
   1ef52:	f7fe fd7e 	bl	1da52 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1ef56:	f1b8 0f04 	cmp.w	r8, #4
   1ef5a:	d056      	beq.n	1f00a <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1ef5c:	68ab      	ldr	r3, [r5, #8]
   1ef5e:	689e      	ldr	r6, [r3, #8]
   1ef60:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1ef62:	2bff      	cmp	r3, #255	; 0xff
   1ef64:	d05f      	beq.n	1f026 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ef66:	af12      	add	r7, sp, #72	; 0x48
   1ef68:	4633      	mov	r3, r6
   1ef6a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ef6e:	6859      	ldr	r1, [r3, #4]
   1ef70:	689a      	ldr	r2, [r3, #8]
   1ef72:	68db      	ldr	r3, [r3, #12]
   1ef74:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ef76:	af06      	add	r7, sp, #24
   1ef78:	ab12      	add	r3, sp, #72	; 0x48
   1ef7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ef7c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1ef80:	68a3      	ldr	r3, [r4, #8]
   1ef82:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ef86:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1ef8a:	4633      	mov	r3, r6
   1ef8c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1ef90:	6859      	ldr	r1, [r3, #4]
   1ef92:	689a      	ldr	r2, [r3, #8]
   1ef94:	68db      	ldr	r3, [r3, #12]
   1ef96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ef9a:	ae16      	add	r6, sp, #88	; 0x58
   1ef9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ef9e:	f8cc 0008 	str.w	r0, [ip, #8]
   1efa2:	f8cc 100c 	str.w	r1, [ip, #12]
   1efa6:	f8cc 2010 	str.w	r2, [ip, #16]
   1efaa:	f8cc 3014 	str.w	r3, [ip, #20]
   1efae:	68a3      	ldr	r3, [r4, #8]
   1efb0:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1efb4:	ae1a      	add	r6, sp, #104	; 0x68
   1efb6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1efba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1efbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1efc0:	f8ce 0018 	str.w	r0, [lr, #24]
   1efc4:	f8ce 101c 	str.w	r1, [lr, #28]
   1efc8:	f8ce 2020 	str.w	r2, [lr, #32]
   1efcc:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1efd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1efd2:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1efd4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1efd8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1efdc:	6a2b      	ldr	r3, [r5, #32]
   1efde:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1efe0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1efe4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1efe8:	68a1      	ldr	r1, [r4, #8]
   1efea:	4620      	mov	r0, r4
   1efec:	f7ff fbf8 	bl	1e7e0 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1eff0:	4620      	mov	r0, r4
   1eff2:	f7fb ff3d 	bl	1ae70 <net_send_data>
   1eff6:	2800      	cmp	r0, #0
   1eff8:	db4a      	blt.n	1f090 <net_icmpv6_send_error+0x294>
   1effa:	4a2d      	ldr	r2, [pc, #180]	; (1f0b0 <net_icmpv6_send_error+0x2b4>)
   1effc:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1effe:	3301      	adds	r3, #1
   1f000:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f002:	2500      	movs	r5, #0
   1f004:	e04d      	b.n	1f0a2 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1f006:	2600      	movs	r6, #0
   1f008:	e730      	b.n	1ee6c <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1f00a:	4620      	mov	r0, r4
   1f00c:	f7fe fe0a 	bl	1dc24 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1f010:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1f014:	0a1a      	lsrs	r2, r3, #8
   1f016:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1f018:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1f01a:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1f01e:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1f020:	f880 9007 	strb.w	r9, [r0, #7]
   1f024:	e79a      	b.n	1ef5c <net_icmpv6_send_error+0x160>
   1f026:	68a3      	ldr	r3, [r4, #8]
   1f028:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f02c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1f030:	4633      	mov	r3, r6
   1f032:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f036:	6859      	ldr	r1, [r3, #4]
   1f038:	689a      	ldr	r2, [r3, #8]
   1f03a:	68db      	ldr	r3, [r3, #12]
   1f03c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f040:	ae0a      	add	r6, sp, #40	; 0x28
   1f042:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f044:	f8cc 0018 	str.w	r0, [ip, #24]
   1f048:	f8cc 101c 	str.w	r1, [ip, #28]
   1f04c:	f8cc 2020 	str.w	r2, [ip, #32]
   1f050:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f054:	68a3      	ldr	r3, [r4, #8]
   1f056:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f05a:	68ab      	ldr	r3, [r5, #8]
   1f05c:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f05e:	3118      	adds	r1, #24
   1f060:	4638      	mov	r0, r7
   1f062:	f7fc fe6b 	bl	1bd3c <net_if_ipv6_select_src_addr>
   1f066:	4603      	mov	r3, r0
   1f068:	ae0e      	add	r6, sp, #56	; 0x38
   1f06a:	6800      	ldr	r0, [r0, #0]
   1f06c:	6859      	ldr	r1, [r3, #4]
   1f06e:	689a      	ldr	r2, [r3, #8]
   1f070:	68db      	ldr	r3, [r3, #12]
   1f072:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f074:	ae0e      	add	r6, sp, #56	; 0x38
   1f076:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f078:	f8c8 0008 	str.w	r0, [r8, #8]
   1f07c:	f8c8 100c 	str.w	r1, [r8, #12]
   1f080:	f8c8 2010 	str.w	r2, [r8, #16]
   1f084:	f8c8 3014 	str.w	r3, [r8, #20]
   1f088:	e7a2      	b.n	1efd0 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f08a:	f06f 050b 	mvn.w	r5, #11
   1f08e:	e001      	b.n	1f094 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f090:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f094:	4620      	mov	r0, r4
   1f096:	f7fe faec 	bl	1d672 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f09a:	4a05      	ldr	r2, [pc, #20]	; (1f0b0 <net_icmpv6_send_error+0x2b4>)
   1f09c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f09e:	3301      	adds	r3, #1
   1f0a0:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f0a2:	4628      	mov	r0, r5
   1f0a4:	b01f      	add	sp, #124	; 0x7c
   1f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f0aa:	f06f 050b 	mvn.w	r5, #11
   1f0ae:	e7f4      	b.n	1f09a <net_icmpv6_send_error+0x29e>
   1f0b0:	20002a58 	.word	0x20002a58

0001f0b4 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0b8:	b08d      	sub	sp, #52	; 0x34
   1f0ba:	4605      	mov	r5, r0
   1f0bc:	460e      	mov	r6, r1
   1f0be:	4692      	mov	sl, r2
   1f0c0:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f0c2:	f7fc fe3b 	bl	1bd3c <net_if_ipv6_select_src_addr>
   1f0c6:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f0c8:	686b      	ldr	r3, [r5, #4]
   1f0ca:	689b      	ldr	r3, [r3, #8]
   1f0cc:	4631      	mov	r1, r6
   1f0ce:	4628      	mov	r0, r5
   1f0d0:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f0d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f0d6:	f7fe fa5b 	bl	1d590 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f0da:	273a      	movs	r7, #58	; 0x3a
   1f0dc:	9700      	str	r7, [sp, #0]
   1f0de:	462b      	mov	r3, r5
   1f0e0:	4632      	mov	r2, r6
   1f0e2:	4641      	mov	r1, r8
   1f0e4:	f000 fcc1 	bl	1fa6a <net_ipv6_create_raw>
   1f0e8:	4604      	mov	r4, r0
	pkt->family = family;
   1f0ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f0ee:	220a      	movs	r2, #10
   1f0f0:	f362 03c6 	bfi	r3, r2, #3, #4
   1f0f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f0f8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f0fa:	7d6b      	ldrb	r3, [r5, #21]
   1f0fc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f100:	7d6b      	ldrb	r3, [r5, #21]
   1f102:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f106:	aa0c      	add	r2, sp, #48	; 0x30
   1f108:	2380      	movs	r3, #128	; 0x80
   1f10a:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f10e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f112:	2101      	movs	r1, #1
   1f114:	f7fe fbe5 	bl	1d8e2 <net_pkt_append>
   1f118:	f04f 0b00 	mov.w	fp, #0
   1f11c:	aa0c      	add	r2, sp, #48	; 0x30
   1f11e:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f126:	2101      	movs	r1, #1
   1f128:	4620      	mov	r0, r4
   1f12a:	f7fe fbda 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f12e:	ad0c      	add	r5, sp, #48	; 0x30
   1f130:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f138:	462a      	mov	r2, r5
   1f13a:	2102      	movs	r1, #2
   1f13c:	4620      	mov	r0, r4
   1f13e:	f7fe fbd0 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f142:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f146:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f14a:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f152:	462a      	mov	r2, r5
   1f154:	2102      	movs	r1, #2
   1f156:	4620      	mov	r0, r4
   1f158:	f7fe fbc3 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f15c:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f160:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f164:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f16c:	462a      	mov	r2, r5
   1f16e:	2102      	movs	r1, #2
   1f170:	4620      	mov	r0, r4
   1f172:	f7fe fbb6 	bl	1d8e2 <net_pkt_append>
	return pkt->frags->data;
   1f176:	68a3      	ldr	r3, [r4, #8]
   1f178:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f17c:	ad04      	add	r5, sp, #16
   1f17e:	f8d8 0000 	ldr.w	r0, [r8]
   1f182:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f186:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f18a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f18e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f190:	ad04      	add	r5, sp, #16
   1f192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f194:	f8cc 0008 	str.w	r0, [ip, #8]
   1f198:	f8cc 100c 	str.w	r1, [ip, #12]
   1f19c:	f8cc 2010 	str.w	r2, [ip, #16]
   1f1a0:	f8cc 3014 	str.w	r3, [ip, #20]
   1f1a4:	68a3      	ldr	r3, [r4, #8]
   1f1a6:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f1aa:	ad08      	add	r5, sp, #32
   1f1ac:	6830      	ldr	r0, [r6, #0]
   1f1ae:	6871      	ldr	r1, [r6, #4]
   1f1b0:	68b2      	ldr	r2, [r6, #8]
   1f1b2:	68f3      	ldr	r3, [r6, #12]
   1f1b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f1b6:	ad08      	add	r5, sp, #32
   1f1b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f1ba:	f8ce 0018 	str.w	r0, [lr, #24]
   1f1be:	f8ce 101c 	str.w	r1, [lr, #28]
   1f1c2:	f8ce 2020 	str.w	r2, [lr, #32]
   1f1c6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f1ca:	68a1      	ldr	r1, [r4, #8]
   1f1cc:	4620      	mov	r0, r4
   1f1ce:	f7ff fb07 	bl	1e7e0 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1f1d2:	4639      	mov	r1, r7
   1f1d4:	4620      	mov	r0, r4
   1f1d6:	f000 fce6 	bl	1fba6 <net_ipv6_finalize_raw>
   1f1da:	4558      	cmp	r0, fp
   1f1dc:	db0c      	blt.n	1f1f8 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f1de:	4620      	mov	r0, r4
   1f1e0:	f7fb fe46 	bl	1ae70 <net_send_data>
   1f1e4:	4558      	cmp	r0, fp
   1f1e6:	db07      	blt.n	1f1f8 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1f1e8:	4a08      	ldr	r2, [pc, #32]	; (1f20c <net_icmpv6_send_echo_request+0x158>)
   1f1ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f1ec:	3301      	adds	r3, #1
   1f1ee:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f1f0:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1f1f2:	b00d      	add	sp, #52	; 0x34
   1f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1f1f8:	4620      	mov	r0, r4
   1f1fa:	f7fe fa3a 	bl	1d672 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f1fe:	4a03      	ldr	r2, [pc, #12]	; (1f20c <net_icmpv6_send_echo_request+0x158>)
   1f200:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f202:	3301      	adds	r3, #1
   1f204:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1f206:	f06f 0004 	mvn.w	r0, #4
   1f20a:	e7f2      	b.n	1f1f2 <net_icmpv6_send_echo_request+0x13e>
   1f20c:	20002a58 	.word	0x20002a58

0001f210 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1f210:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1f212:	4c12      	ldr	r4, [pc, #72]	; (1f25c <net_icmpv6_input+0x4c>)
   1f214:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f216:	3301      	adds	r3, #1
   1f218:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1f21a:	4b11      	ldr	r3, [pc, #68]	; (1f260 <net_icmpv6_input+0x50>)
   1f21c:	681b      	ldr	r3, [r3, #0]
   1f21e:	e005      	b.n	1f22c <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f220:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f222:	b17b      	cbz	r3, 1f244 <net_icmpv6_input+0x34>
	return node->next;
   1f224:	681c      	ldr	r4, [r3, #0]
   1f226:	b18c      	cbz	r4, 1f24c <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f228:	b175      	cbz	r5, 1f248 <net_icmpv6_input+0x38>
	return node->next;
   1f22a:	681b      	ldr	r3, [r3, #0]
   1f22c:	b183      	cbz	r3, 1f250 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1f22e:	791c      	ldrb	r4, [r3, #4]
   1f230:	428c      	cmp	r4, r1
   1f232:	d1f5      	bne.n	1f220 <net_icmpv6_input+0x10>
   1f234:	795c      	ldrb	r4, [r3, #5]
   1f236:	4294      	cmp	r4, r2
   1f238:	d001      	beq.n	1f23e <net_icmpv6_input+0x2e>
   1f23a:	2c00      	cmp	r4, #0
   1f23c:	d1f0      	bne.n	1f220 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1f23e:	689b      	ldr	r3, [r3, #8]
   1f240:	4798      	blx	r3
   1f242:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f244:	461c      	mov	r4, r3
   1f246:	e7ee      	b.n	1f226 <net_icmpv6_input+0x16>
   1f248:	2300      	movs	r3, #0
   1f24a:	e7ef      	b.n	1f22c <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f24c:	2300      	movs	r3, #0
   1f24e:	e7ed      	b.n	1f22c <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1f250:	4a02      	ldr	r2, [pc, #8]	; (1f25c <net_icmpv6_input+0x4c>)
   1f252:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f254:	3301      	adds	r3, #1
   1f256:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1f258:	2002      	movs	r0, #2
}
   1f25a:	bd38      	pop	{r3, r4, r5, pc}
   1f25c:	20002a58 	.word	0x20002a58
   1f260:	20001e84 	.word	0x20001e84

0001f264 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1f264:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1f266:	4802      	ldr	r0, [pc, #8]	; (1f270 <net_icmpv6_init+0xc>)
   1f268:	f7ff fa8a 	bl	1e780 <net_icmpv6_register_handler>
   1f26c:	bd08      	pop	{r3, pc}
   1f26e:	bf00      	nop
   1f270:	2000be28 	.word	0x2000be28

0001f274 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1f274:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1f276:	7803      	ldrb	r3, [r0, #0]
   1f278:	3b01      	subs	r3, #1
   1f27a:	b2db      	uxtb	r3, r3
   1f27c:	7003      	strb	r3, [r0, #0]
   1f27e:	b913      	cbnz	r3, 1f286 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1f280:	6903      	ldr	r3, [r0, #16]
   1f282:	b103      	cbz	r3, 1f286 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1f284:	4798      	blx	r3
   1f286:	bd08      	pop	{r3, pc}

0001f288 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1f288:	7803      	ldrb	r3, [r0, #0]
   1f28a:	3301      	adds	r3, #1
   1f28c:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1f28e:	4770      	bx	lr

0001f290 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1f290:	2100      	movs	r1, #0
   1f292:	8903      	ldrh	r3, [r0, #8]
   1f294:	4299      	cmp	r1, r3
   1f296:	da17      	bge.n	1f2c8 <net_nbr_get+0x38>
{
   1f298:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1f29a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1f29c:	8853      	ldrh	r3, [r2, #2]
   1f29e:	8894      	ldrh	r4, [r2, #4]
   1f2a0:	4423      	add	r3, r4
   1f2a2:	3314      	adds	r3, #20
   1f2a4:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1f2a8:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1f2aa:	5cd3      	ldrb	r3, [r2, r3]
   1f2ac:	b12b      	cbz	r3, 1f2ba <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1f2ae:	3101      	adds	r1, #1
   1f2b0:	8903      	ldrh	r3, [r0, #8]
   1f2b2:	4299      	cmp	r1, r3
   1f2b4:	dbf1      	blt.n	1f29a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1f2b6:	2000      	movs	r0, #0
}
   1f2b8:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1f2ba:	f104 0314 	add.w	r3, r4, #20
   1f2be:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f7ff ffe1 	bl	1f288 <net_nbr_ref>
   1f2c6:	bd10      	pop	{r4, pc}
	return NULL;
   1f2c8:	2000      	movs	r0, #0
   1f2ca:	4770      	bx	lr

0001f2cc <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f2cc:	7843      	ldrb	r3, [r0, #1]
   1f2ce:	2bff      	cmp	r3, #255	; 0xff
   1f2d0:	d158      	bne.n	1f384 <net_nbr_link+0xb8>
{
   1f2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2d6:	4690      	mov	r8, r2
   1f2d8:	460f      	mov	r7, r1
   1f2da:	4606      	mov	r6, r0
   1f2dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f2e0:	2400      	movs	r4, #0
   1f2e2:	e008      	b.n	1f2f6 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f2e4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f2e8:	4b2a      	ldr	r3, [pc, #168]	; (1f394 <net_nbr_link+0xc8>)
   1f2ea:	4413      	add	r3, r2
   1f2ec:	7a1b      	ldrb	r3, [r3, #8]
   1f2ee:	b933      	cbnz	r3, 1f2fe <net_nbr_link+0x32>
			avail = i;
   1f2f0:	4625      	mov	r5, r4
   1f2f2:	e004      	b.n	1f2fe <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f2f4:	3401      	adds	r4, #1
   1f2f6:	2c07      	cmp	r4, #7
   1f2f8:	dc1e      	bgt.n	1f338 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f2fa:	2d00      	cmp	r5, #0
   1f2fc:	dbf2      	blt.n	1f2e4 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1f2fe:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f302:	4b24      	ldr	r3, [pc, #144]	; (1f394 <net_nbr_link+0xc8>)
   1f304:	4413      	add	r3, r2
   1f306:	7a1b      	ldrb	r3, [r3, #8]
   1f308:	2b00      	cmp	r3, #0
   1f30a:	d0f3      	beq.n	1f2f4 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1f30c:	4921      	ldr	r1, [pc, #132]	; (1f394 <net_nbr_link+0xc8>)
   1f30e:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1f310:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f314:	3102      	adds	r1, #2
   1f316:	f8d8 0000 	ldr.w	r0, [r8]
   1f31a:	f00a fec5 	bl	2a0a8 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1f31e:	4603      	mov	r3, r0
   1f320:	2800      	cmp	r0, #0
   1f322:	d1e7      	bne.n	1f2f4 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1f324:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1f328:	4a1a      	ldr	r2, [pc, #104]	; (1f394 <net_nbr_link+0xc8>)
   1f32a:	440a      	add	r2, r1
   1f32c:	7a11      	ldrb	r1, [r2, #8]
   1f32e:	3101      	adds	r1, #1
   1f330:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1f332:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1f334:	60b7      	str	r7, [r6, #8]

			return 0;
   1f336:	e019      	b.n	1f36c <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1f338:	2d00      	cmp	r5, #0
   1f33a:	db27      	blt.n	1f38c <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1f33c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1f340:	4b14      	ldr	r3, [pc, #80]	; (1f394 <net_nbr_link+0xc8>)
   1f342:	4413      	add	r3, r2
   1f344:	7a1a      	ldrb	r2, [r3, #8]
   1f346:	3201      	adds	r2, #1
   1f348:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1f34a:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1f34c:	f8d8 1000 	ldr.w	r1, [r8]
   1f350:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1f354:	b109      	cbz	r1, 1f35a <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f356:	2a06      	cmp	r2, #6
   1f358:	d90b      	bls.n	1f372 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1f35a:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f35e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1f362:	4b0c      	ldr	r3, [pc, #48]	; (1f394 <net_nbr_link+0xc8>)
   1f364:	441d      	add	r5, r3
   1f366:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1f368:	60b7      	str	r7, [r6, #8]

	return 0;
   1f36a:	2300      	movs	r3, #0
}
   1f36c:	4618      	mov	r0, r3
   1f36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1f372:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f376:	4807      	ldr	r0, [pc, #28]	; (1f394 <net_nbr_link+0xc8>)
   1f378:	4418      	add	r0, r3
   1f37a:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f37c:	3002      	adds	r0, #2
   1f37e:	f7e0 ff9f 	bl	2c0 <memcpy>
   1f382:	e7ea      	b.n	1f35a <net_nbr_link+0x8e>
		return -EALREADY;
   1f384:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1f388:	4618      	mov	r0, r3
   1f38a:	4770      	bx	lr
		return -ENOENT;
   1f38c:	f06f 0301 	mvn.w	r3, #1
   1f390:	e7ec      	b.n	1f36c <net_nbr_link+0xa0>
   1f392:	bf00      	nop
   1f394:	20001e8c 	.word	0x20001e8c

0001f398 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1f398:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1f39c:	4b01      	ldr	r3, [pc, #4]	; (1f3a4 <net_nbr_get_lladdr+0xc>)
   1f39e:	4418      	add	r0, r3
   1f3a0:	4770      	bx	lr
   1f3a2:	bf00      	nop
   1f3a4:	20001e8c 	.word	0x20001e8c

0001f3a8 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1f3a8:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1f3aa:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1f3ae:	428b      	cmp	r3, r1
   1f3b0:	d003      	beq.n	1f3ba <ipv6_nbr_set_state+0x12>
   1f3b2:	2b05      	cmp	r3, #5
   1f3b4:	d001      	beq.n	1f3ba <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1f3b6:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1f3ba:	4770      	bx	lr

0001f3bc <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f3bc:	b570      	push	{r4, r5, r6, lr}
   1f3be:	4605      	mov	r5, r0
   1f3c0:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f3c2:	2400      	movs	r4, #0
   1f3c4:	e000      	b.n	1f3c8 <iface_cb+0xc>
   1f3c6:	3401      	adds	r4, #1
   1f3c8:	2c07      	cmp	r4, #7
   1f3ca:	dc0c      	bgt.n	1f3e6 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1f3cc:	4a06      	ldr	r2, [pc, #24]	; (1f3e8 <iface_cb+0x2c>)
   1f3ce:	01e3      	lsls	r3, r4, #7
   1f3d0:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1f3d2:	5cd3      	ldrb	r3, [r2, r3]
   1f3d4:	2b00      	cmp	r3, #0
   1f3d6:	d0f6      	beq.n	1f3c6 <iface_cb+0xa>
   1f3d8:	6883      	ldr	r3, [r0, #8]
   1f3da:	42ab      	cmp	r3, r5
   1f3dc:	d1f3      	bne.n	1f3c6 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1f3de:	6833      	ldr	r3, [r6, #0]
   1f3e0:	6871      	ldr	r1, [r6, #4]
   1f3e2:	4798      	blx	r3
   1f3e4:	e7ef      	b.n	1f3c6 <iface_cb+0xa>
	}
}
   1f3e6:	bd70      	pop	{r4, r5, r6, pc}
   1f3e8:	2000be58 	.word	0x2000be58

0001f3ec <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ee:	b085      	sub	sp, #20
   1f3f0:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1f3f2:	a903      	add	r1, sp, #12
   1f3f4:	f004 ff0a 	bl	2420c <iface2str>
   1f3f8:	4602      	mov	r2, r0
   1f3fa:	4629      	mov	r1, r5
   1f3fc:	4885      	ldr	r0, [pc, #532]	; (1f614 <iface_cb+0x228>)
   1f3fe:	f7e3 fda1 	bl	2f44 <printk>
	printk("=======================%s\n", extra);
   1f402:	9903      	ldr	r1, [sp, #12]
   1f404:	4884      	ldr	r0, [pc, #528]	; (1f618 <iface_cb+0x22c>)
   1f406:	f7e3 fd9d 	bl	2f44 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f40a:	f3bf 8f5b 	dmb	ish
   1f40e:	68eb      	ldr	r3, [r5, #12]
   1f410:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1f414:	f013 0f01 	tst.w	r3, #1
   1f418:	d014      	beq.n	1f444 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1f41a:	2318      	movs	r3, #24
   1f41c:	4a7f      	ldr	r2, [pc, #508]	; (1f61c <iface_cb+0x230>)
   1f41e:	7d29      	ldrb	r1, [r5, #20]
   1f420:	6928      	ldr	r0, [r5, #16]
   1f422:	f7fe fd45 	bl	1deb0 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1f426:	4601      	mov	r1, r0
   1f428:	487d      	ldr	r0, [pc, #500]	; (1f620 <iface_cb+0x234>)
   1f42a:	f7e3 fd8b 	bl	2f44 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1f42e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1f430:	487c      	ldr	r0, [pc, #496]	; (1f624 <iface_cb+0x238>)
   1f432:	f7e3 fd87 	bl	2f44 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1f436:	2103      	movs	r1, #3
   1f438:	487b      	ldr	r0, [pc, #492]	; (1f628 <iface_cb+0x23c>)
   1f43a:	f7e3 fd83 	bl	2f44 <printk>
	count = 0;
   1f43e:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f440:	463c      	mov	r4, r7
   1f442:	e02e      	b.n	1f4a2 <iface_cb+0xb6>
		printk("Interface is down.\n");
   1f444:	4879      	ldr	r0, [pc, #484]	; (1f62c <iface_cb+0x240>)
   1f446:	f7e3 fd7d 	bl	2f44 <printk>
   1f44a:	e0db      	b.n	1f604 <iface_cb+0x218>
		return "<unknown type>";
   1f44c:	4a78      	ldr	r2, [pc, #480]	; (1f630 <iface_cb+0x244>)
   1f44e:	e006      	b.n	1f45e <iface_cb+0x72>
		return "DHCP";
   1f450:	4a78      	ldr	r2, [pc, #480]	; (1f634 <iface_cb+0x248>)
   1f452:	e004      	b.n	1f45e <iface_cb+0x72>
		return "manual";
   1f454:	4a78      	ldr	r2, [pc, #480]	; (1f638 <iface_cb+0x24c>)
   1f456:	e002      	b.n	1f45e <iface_cb+0x72>
	return "<invalid type>";
   1f458:	4a78      	ldr	r2, [pc, #480]	; (1f63c <iface_cb+0x250>)
   1f45a:	e000      	b.n	1f45e <iface_cb+0x72>
		return "autoconf";
   1f45c:	4a78      	ldr	r2, [pc, #480]	; (1f640 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1f45e:	236c      	movs	r3, #108	; 0x6c
   1f460:	fb03 5304 	mla	r3, r3, r4, r5
   1f464:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1f468:	3301      	adds	r3, #1
   1f46a:	2b03      	cmp	r3, #3
   1f46c:	d809      	bhi.n	1f482 <iface_cb+0x96>
   1f46e:	e8df f003 	tbb	[pc, r3]
   1f472:	0a02      	.short	0x0a02
   1f474:	0604      	.short	0x0604
		return "<unknown state>";
   1f476:	4b73      	ldr	r3, [pc, #460]	; (1f644 <iface_cb+0x258>)
   1f478:	e006      	b.n	1f488 <iface_cb+0x9c>
		return "preferred";
   1f47a:	4b73      	ldr	r3, [pc, #460]	; (1f648 <iface_cb+0x25c>)
   1f47c:	e004      	b.n	1f488 <iface_cb+0x9c>
		return "deprecated";
   1f47e:	4b73      	ldr	r3, [pc, #460]	; (1f64c <iface_cb+0x260>)
   1f480:	e002      	b.n	1f488 <iface_cb+0x9c>
	return "<invalid state>";
   1f482:	4b73      	ldr	r3, [pc, #460]	; (1f650 <iface_cb+0x264>)
   1f484:	e000      	b.n	1f488 <iface_cb+0x9c>
		return "tentative";
   1f486:	4b73      	ldr	r3, [pc, #460]	; (1f654 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1f488:	266c      	movs	r6, #108	; 0x6c
   1f48a:	fb06 5604 	mla	r6, r6, r4, r5
   1f48e:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1f492:	b368      	cbz	r0, 1f4f0 <iface_cb+0x104>
   1f494:	4870      	ldr	r0, [pc, #448]	; (1f658 <iface_cb+0x26c>)
   1f496:	9000      	str	r0, [sp, #0]
   1f498:	4870      	ldr	r0, [pc, #448]	; (1f65c <iface_cb+0x270>)
   1f49a:	f7e3 fd53 	bl	2f44 <printk>
		count++;
   1f49e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f4a0:	3401      	adds	r4, #1
   1f4a2:	2c02      	cmp	r4, #2
   1f4a4:	dc26      	bgt.n	1f4f4 <iface_cb+0x108>
		if (!unicast->is_used) {
   1f4a6:	236c      	movs	r3, #108	; 0x6c
   1f4a8:	fb03 5304 	mla	r3, r3, r4, r5
   1f4ac:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1f4b0:	2b00      	cmp	r3, #0
   1f4b2:	d0f5      	beq.n	1f4a0 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1f4b4:	266c      	movs	r6, #108	; 0x6c
   1f4b6:	fb06 f604 	mul.w	r6, r6, r4
   1f4ba:	f106 0120 	add.w	r1, r6, #32
   1f4be:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1f4c0:	2328      	movs	r3, #40	; 0x28
   1f4c2:	4a67      	ldr	r2, [pc, #412]	; (1f660 <iface_cb+0x274>)
   1f4c4:	3110      	adds	r1, #16
   1f4c6:	200a      	movs	r0, #10
   1f4c8:	f7fe fd1c 	bl	1df04 <net_addr_ntop>
   1f4cc:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1f4ce:	442e      	add	r6, r5
   1f4d0:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1f4d4:	2b03      	cmp	r3, #3
   1f4d6:	d8bf      	bhi.n	1f458 <iface_cb+0x6c>
   1f4d8:	a201      	add	r2, pc, #4	; (adr r2, 1f4e0 <iface_cb+0xf4>)
   1f4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f4de:	bf00      	nop
   1f4e0:	0001f44d 	.word	0x0001f44d
   1f4e4:	0001f45d 	.word	0x0001f45d
   1f4e8:	0001f451 	.word	0x0001f451
   1f4ec:	0001f455 	.word	0x0001f455
		printk("\t%s %s %s%s\n",
   1f4f0:	485c      	ldr	r0, [pc, #368]	; (1f664 <iface_cb+0x278>)
   1f4f2:	e7d0      	b.n	1f496 <iface_cb+0xaa>
	}

	if (count == 0) {
   1f4f4:	b137      	cbz	r7, 1f504 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1f4f6:	2105      	movs	r1, #5
   1f4f8:	485b      	ldr	r0, [pc, #364]	; (1f668 <iface_cb+0x27c>)
   1f4fa:	f7e3 fd23 	bl	2f44 <printk>
	count = 0;
   1f4fe:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f500:	4634      	mov	r4, r6
   1f502:	e004      	b.n	1f50e <iface_cb+0x122>
		printk("\t<none>\n");
   1f504:	4859      	ldr	r0, [pc, #356]	; (1f66c <iface_cb+0x280>)
   1f506:	f7e3 fd1d 	bl	2f44 <printk>
   1f50a:	e7f4      	b.n	1f4f6 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f50c:	3401      	adds	r4, #1
   1f50e:	2c04      	cmp	r4, #4
   1f510:	dc18      	bgt.n	1f544 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1f512:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f516:	00d3      	lsls	r3, r2, #3
   1f518:	461a      	mov	r2, r3
   1f51a:	442b      	add	r3, r5
   1f51c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f520:	f013 0f01 	tst.w	r3, #1
   1f524:	d0f2      	beq.n	1f50c <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1f526:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f52a:	4429      	add	r1, r5
   1f52c:	2328      	movs	r3, #40	; 0x28
   1f52e:	4a4c      	ldr	r2, [pc, #304]	; (1f660 <iface_cb+0x274>)
   1f530:	3118      	adds	r1, #24
   1f532:	200a      	movs	r0, #10
   1f534:	f7fe fce6 	bl	1df04 <net_addr_ntop>
		printk("\t%s\n",
   1f538:	4601      	mov	r1, r0
   1f53a:	484d      	ldr	r0, [pc, #308]	; (1f670 <iface_cb+0x284>)
   1f53c:	f7e3 fd02 	bl	2f44 <printk>

		count++;
   1f540:	3601      	adds	r6, #1
   1f542:	e7e3      	b.n	1f50c <iface_cb+0x120>
	}

	if (count == 0) {
   1f544:	b136      	cbz	r6, 1f554 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1f546:	2102      	movs	r1, #2
   1f548:	484a      	ldr	r0, [pc, #296]	; (1f674 <iface_cb+0x288>)
   1f54a:	f7e3 fcfb 	bl	2f44 <printk>
	count = 0;
   1f54e:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f550:	4634      	mov	r4, r6
   1f552:	e009      	b.n	1f568 <iface_cb+0x17c>
		printk("\t<none>\n");
   1f554:	4845      	ldr	r0, [pc, #276]	; (1f66c <iface_cb+0x280>)
   1f556:	f7e3 fcf5 	bl	2f44 <printk>
   1f55a:	e7f4      	b.n	1f546 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1f55c:	4b41      	ldr	r3, [pc, #260]	; (1f664 <iface_cb+0x278>)
   1f55e:	4846      	ldr	r0, [pc, #280]	; (1f678 <iface_cb+0x28c>)
   1f560:	f7e3 fcf0 	bl	2f44 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1f564:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f566:	3401      	adds	r4, #1
   1f568:	2c01      	cmp	r4, #1
   1f56a:	dc1e      	bgt.n	1f5aa <iface_cb+0x1be>
		if (!prefix->is_used) {
   1f56c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1f570:	0093      	lsls	r3, r2, #2
   1f572:	461a      	mov	r2, r3
   1f574:	442b      	add	r3, r5
   1f576:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1f57a:	2b00      	cmp	r3, #0
   1f57c:	d0f3      	beq.n	1f566 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1f57e:	0127      	lsls	r7, r4, #4
   1f580:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1f584:	4429      	add	r1, r5
   1f586:	2328      	movs	r3, #40	; 0x28
   1f588:	4a35      	ldr	r2, [pc, #212]	; (1f660 <iface_cb+0x274>)
   1f58a:	3110      	adds	r1, #16
   1f58c:	200a      	movs	r0, #10
   1f58e:	f7fe fcb9 	bl	1df04 <net_addr_ntop>
   1f592:	4601      	mov	r1, r0
		       prefix->len,
   1f594:	1b3f      	subs	r7, r7, r4
   1f596:	00bb      	lsls	r3, r7, #2
   1f598:	442b      	add	r3, r5
   1f59a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1f59e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1f5a2:	2b00      	cmp	r3, #0
   1f5a4:	d0da      	beq.n	1f55c <iface_cb+0x170>
   1f5a6:	4b2c      	ldr	r3, [pc, #176]	; (1f658 <iface_cb+0x26c>)
   1f5a8:	e7d9      	b.n	1f55e <iface_cb+0x172>
	}

	if (count == 0) {
   1f5aa:	b36e      	cbz	r6, 1f608 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1f5ac:	2100      	movs	r1, #0
   1f5ae:	4628      	mov	r0, r5
   1f5b0:	f7fc fade 	bl	1bb70 <net_if_ipv6_router_find_default>
	if (router) {
   1f5b4:	4604      	mov	r4, r0
   1f5b6:	b188      	cbz	r0, 1f5dc <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1f5b8:	4830      	ldr	r0, [pc, #192]	; (1f67c <iface_cb+0x290>)
   1f5ba:	f7e3 fcc3 	bl	2f44 <printk>
   1f5be:	2328      	movs	r3, #40	; 0x28
   1f5c0:	4a27      	ldr	r2, [pc, #156]	; (1f660 <iface_cb+0x274>)
   1f5c2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f5c6:	200a      	movs	r0, #10
   1f5c8:	f7fe fc9c 	bl	1df04 <net_addr_ntop>
   1f5cc:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1f5ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1f5d2:	b1eb      	cbz	r3, 1f610 <iface_cb+0x224>
   1f5d4:	4a20      	ldr	r2, [pc, #128]	; (1f658 <iface_cb+0x26c>)
   1f5d6:	482a      	ldr	r0, [pc, #168]	; (1f680 <iface_cb+0x294>)
   1f5d8:	f7e3 fcb4 	bl	2f44 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1f5dc:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1f5e0:	4828      	ldr	r0, [pc, #160]	; (1f684 <iface_cb+0x298>)
   1f5e2:	f7e3 fcaf 	bl	2f44 <printk>
	printk("IPv6 base reachable time : %d\n",
   1f5e6:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1f5ea:	4827      	ldr	r0, [pc, #156]	; (1f688 <iface_cb+0x29c>)
   1f5ec:	f7e3 fcaa 	bl	2f44 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1f5f0:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1f5f4:	4825      	ldr	r0, [pc, #148]	; (1f68c <iface_cb+0x2a0>)
   1f5f6:	f7e3 fca5 	bl	2f44 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1f5fa:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1f5fe:	4824      	ldr	r0, [pc, #144]	; (1f690 <iface_cb+0x2a4>)
   1f600:	f7e3 fca0 	bl	2f44 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1f604:	b005      	add	sp, #20
   1f606:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1f608:	4818      	ldr	r0, [pc, #96]	; (1f66c <iface_cb+0x280>)
   1f60a:	f7e3 fc9b 	bl	2f44 <printk>
   1f60e:	e7cd      	b.n	1f5ac <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1f610:	4a14      	ldr	r2, [pc, #80]	; (1f664 <iface_cb+0x278>)
   1f612:	e7e0      	b.n	1f5d6 <iface_cb+0x1ea>
   1f614:	00031684 	.word	0x00031684
   1f618:	00031834 	.word	0x00031834
   1f61c:	20002418 	.word	0x20002418
   1f620:	000316ac 	.word	0x000316ac
   1f624:	000316bc 	.word	0x000316bc
   1f628:	000316cc 	.word	0x000316cc
   1f62c:	00031698 	.word	0x00031698
   1f630:	000315ec 	.word	0x000315ec
   1f634:	00031624 	.word	0x00031624
   1f638:	0003162c 	.word	0x0003162c
   1f63c:	00031634 	.word	0x00031634
   1f640:	00031618 	.word	0x00031618
   1f644:	00031644 	.word	0x00031644
   1f648:	00031660 	.word	0x00031660
   1f64c:	0003166c 	.word	0x0003166c
   1f650:	00031538 	.word	0x00031538
   1f654:	00031654 	.word	0x00031654
   1f658:	00031678 	.word	0x00031678
   1f65c:	000316f0 	.word	0x000316f0
   1f660:	20002430 	.word	0x20002430
   1f664:	0002eae8 	.word	0x0002eae8
   1f668:	0003170c 	.word	0x0003170c
   1f66c:	00031700 	.word	0x00031700
   1f670:	00031730 	.word	0x00031730
   1f674:	00031738 	.word	0x00031738
   1f678:	00031754 	.word	0x00031754
   1f67c:	00031760 	.word	0x00031760
   1f680:	00031778 	.word	0x00031778
   1f684:	00031780 	.word	0x00031780
   1f688:	000317a0 	.word	0x000317a0
   1f68c:	000317c0 	.word	0x000317c0
   1f690:	000317e0 	.word	0x000317e0

0001f694 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1f694:	4770      	bx	lr

0001f696 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1f696:	4770      	bx	lr

0001f698 <nbr_lookup>:
{
   1f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f69a:	460e      	mov	r6, r1
   1f69c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f69e:	2400      	movs	r4, #0
   1f6a0:	e000      	b.n	1f6a4 <nbr_lookup+0xc>
   1f6a2:	3401      	adds	r4, #1
   1f6a4:	2c07      	cmp	r4, #7
   1f6a6:	dc11      	bgt.n	1f6cc <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1f6a8:	4a0a      	ldr	r2, [pc, #40]	; (1f6d4 <nbr_lookup+0x3c>)
   1f6aa:	01e3      	lsls	r3, r4, #7
   1f6ac:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1f6ae:	5cd3      	ldrb	r3, [r2, r3]
   1f6b0:	2b00      	cmp	r3, #0
   1f6b2:	d0f6      	beq.n	1f6a2 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1f6b4:	68ab      	ldr	r3, [r5, #8]
   1f6b6:	42b3      	cmp	r3, r6
   1f6b8:	d1f3      	bne.n	1f6a2 <nbr_lookup+0xa>
   1f6ba:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f6bc:	2210      	movs	r2, #16
   1f6be:	4639      	mov	r1, r7
   1f6c0:	3004      	adds	r0, #4
   1f6c2:	f00a fcf1 	bl	2a0a8 <memcmp>
   1f6c6:	2800      	cmp	r0, #0
   1f6c8:	d1eb      	bne.n	1f6a2 <nbr_lookup+0xa>
   1f6ca:	e000      	b.n	1f6ce <nbr_lookup+0x36>
	return NULL;
   1f6cc:	2500      	movs	r5, #0
}
   1f6ce:	4628      	mov	r0, r5
   1f6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f6d2:	bf00      	nop
   1f6d4:	2000be58 	.word	0x2000be58

0001f6d8 <nbr_clear_ns_pending>:
{
   1f6d8:	b510      	push	{r4, lr}
   1f6da:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1f6dc:	303c      	adds	r0, #60	; 0x3c
   1f6de:	f00a fb93 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   1f6e2:	6820      	ldr	r0, [r4, #0]
   1f6e4:	b118      	cbz	r0, 1f6ee <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1f6e6:	f7fd ffc4 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	6023      	str	r3, [r4, #0]
   1f6ee:	bd10      	pop	{r4, pc}

0001f6f0 <ns_reply_timeout>:
{
   1f6f0:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1f6f2:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f6f6:	2300      	movs	r3, #0
   1f6f8:	2b07      	cmp	r3, #7
   1f6fa:	dc07      	bgt.n	1f70c <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1f6fc:	4c0d      	ldr	r4, [pc, #52]	; (1f734 <ns_reply_timeout+0x44>)
   1f6fe:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1f702:	68e2      	ldr	r2, [r4, #12]
   1f704:	4291      	cmp	r1, r2
   1f706:	d002      	beq.n	1f70e <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f708:	3301      	adds	r3, #1
   1f70a:	e7f5      	b.n	1f6f8 <ns_reply_timeout+0x8>
	return NULL;
   1f70c:	2400      	movs	r4, #0
	if (!nbr) {
   1f70e:	b184      	cbz	r4, 1f732 <ns_reply_timeout+0x42>
	if (!data->pending) {
   1f710:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1f714:	b16b      	cbz	r3, 1f732 <ns_reply_timeout+0x42>
   1f716:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1f718:	4618      	mov	r0, r3
   1f71a:	f7fd ffaa 	bl	1d672 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1f71e:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1f722:	f7fd ffa6 	bl	1d672 <net_pkt_unref>
	data->pending = NULL;
   1f726:	2300      	movs	r3, #0
   1f728:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1f72c:	4620      	mov	r0, r4
   1f72e:	f7ff fda1 	bl	1f274 <net_nbr_unref>
   1f732:	bd38      	pop	{r3, r4, r5, pc}
   1f734:	2000be58 	.word	0x2000be58

0001f738 <nbr_init>:
{
   1f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f73c:	b084      	sub	sp, #16
   1f73e:	4604      	mov	r4, r0
   1f740:	4616      	mov	r6, r2
   1f742:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1f744:	23ff      	movs	r3, #255	; 0xff
   1f746:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1f748:	6081      	str	r1, [r0, #8]
   1f74a:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1f74c:	466d      	mov	r5, sp
   1f74e:	6810      	ldr	r0, [r2, #0]
   1f750:	6851      	ldr	r1, [r2, #4]
   1f752:	6892      	ldr	r2, [r2, #8]
   1f754:	68f3      	ldr	r3, [r6, #12]
   1f756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f758:	466d      	mov	r5, sp
   1f75a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f75c:	6078      	str	r0, [r7, #4]
   1f75e:	60b9      	str	r1, [r7, #8]
   1f760:	60fa      	str	r2, [r7, #12]
   1f762:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1f764:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1f768:	4620      	mov	r0, r4
   1f76a:	f7ff fe1d 	bl	1f3a8 <ipv6_nbr_set_state>
   1f76e:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1f770:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1f774:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1f776:	2200      	movs	r2, #0
   1f778:	601a      	str	r2, [r3, #0]
   1f77a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1f77c:	4905      	ldr	r1, [pc, #20]	; (1f794 <nbr_init+0x5c>)
   1f77e:	3014      	adds	r0, #20
   1f780:	f00a fb24 	bl	29dcc <k_delayed_work_init>
   1f784:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1f786:	4904      	ldr	r1, [pc, #16]	; (1f798 <nbr_init+0x60>)
   1f788:	303c      	adds	r0, #60	; 0x3c
   1f78a:	f00a fb1f 	bl	29dcc <k_delayed_work_init>
}
   1f78e:	b004      	add	sp, #16
   1f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f794:	000212c5 	.word	0x000212c5
   1f798:	0001f6f1 	.word	0x0001f6f1

0001f79c <nbr_new>:
{
   1f79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f79e:	b083      	sub	sp, #12
   1f7a0:	4605      	mov	r5, r0
   1f7a2:	460e      	mov	r6, r1
   1f7a4:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1f7a6:	4807      	ldr	r0, [pc, #28]	; (1f7c4 <nbr_new+0x28>)
   1f7a8:	f7ff fd72 	bl	1f290 <net_nbr_get>
	if (!nbr) {
   1f7ac:	4604      	mov	r4, r0
   1f7ae:	b128      	cbz	r0, 1f7bc <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1f7b0:	9700      	str	r7, [sp, #0]
   1f7b2:	2301      	movs	r3, #1
   1f7b4:	4632      	mov	r2, r6
   1f7b6:	4629      	mov	r1, r5
   1f7b8:	f7ff ffbe 	bl	1f738 <nbr_init>
}
   1f7bc:	4620      	mov	r0, r4
   1f7be:	b003      	add	sp, #12
   1f7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f7c2:	bf00      	nop
   1f7c4:	2000be4c 	.word	0x2000be4c

0001f7c8 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1f7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7cc:	b084      	sub	sp, #16
   1f7ce:	4604      	mov	r4, r0
   1f7d0:	460e      	mov	r6, r1
   1f7d2:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1f7d4:	480c      	ldr	r0, [pc, #48]	; (1f808 <nbr_new+0x40>)
   1f7d6:	f7ff fd5b 	bl	1f290 <net_nbr_get>

	if (!nbr) {
   1f7da:	4605      	mov	r5, r0
   1f7dc:	b180      	cbz	r0, 1f800 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1f7de:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1f7e0:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1f7e2:	466c      	mov	r4, sp
   1f7e4:	6830      	ldr	r0, [r6, #0]
   1f7e6:	6871      	ldr	r1, [r6, #4]
   1f7e8:	68b2      	ldr	r2, [r6, #8]
   1f7ea:	68f3      	ldr	r3, [r6, #12]
   1f7ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f7ee:	466c      	mov	r4, sp
   1f7f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f7f2:	6138      	str	r0, [r7, #16]
   1f7f4:	6179      	str	r1, [r7, #20]
   1f7f6:	61ba      	str	r2, [r7, #24]
   1f7f8:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1f7fa:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1f7fc:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1f800:	4628      	mov	r0, r5
   1f802:	b004      	add	sp, #16
   1f804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f808:	2000c270 	.word	0x2000c270

0001f80c <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1f80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f810:	4682      	mov	sl, r0
	return pkt->forwarding;
   1f812:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1f816:	f013 0f04 	tst.w	r3, #4
   1f81a:	d002      	beq.n	1f822 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1f81c:	4650      	mov	r0, sl
   1f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1f822:	6940      	ldr	r0, [r0, #20]
   1f824:	6843      	ldr	r3, [r0, #4]
   1f826:	689b      	ldr	r3, [r3, #8]
   1f828:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1f82a:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1f82e:	4283      	cmp	r3, r0
   1f830:	d0f4      	beq.n	1f81c <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1f832:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1f836:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1f83a:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1f83c:	2400      	movs	r4, #0
   1f83e:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1f842:	46a1      	mov	r9, r4
	pos = 0;
   1f844:	46a0      	mov	r8, r4
	while (orig_frag) {
   1f846:	e020      	b.n	1f88a <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f84c:	4650      	mov	r0, sl
   1f84e:	f7fd febd 	bl	1d5cc <net_pkt_get_frag>
   1f852:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1f854:	4601      	mov	r1, r0
   1f856:	4650      	mov	r0, sl
   1f858:	f7fd ff35 	bl	1d6c6 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1f85c:	f109 0008 	add.w	r0, r9, #8
   1f860:	f7fb fa4d 	bl	1acfe <net_buf_simple_tailroom>
   1f864:	b284      	uxth	r4, r0
   1f866:	e014      	b.n	1f892 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1f868:	4621      	mov	r1, r4
   1f86a:	f109 0008 	add.w	r0, r9, #8
   1f86e:	f7fb f9dd 	bl	1ac2c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1f872:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1f874:	4622      	mov	r2, r4
   1f876:	4441      	add	r1, r8
   1f878:	f7e0 fd22 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1f87c:	1b36      	subs	r6, r6, r4
   1f87e:	b2b6      	uxth	r6, r6
			pos += room_len;
   1f880:	4444      	add	r4, r8
   1f882:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1f886:	2400      	movs	r4, #0
		if (!copy_len) {
   1f888:	b19e      	cbz	r6, 1f8b2 <update_ll_reserve+0xa6>
	while (orig_frag) {
   1f88a:	2f00      	cmp	r7, #0
   1f88c:	d0c6      	beq.n	1f81c <update_ll_reserve+0x10>
		if (!room_len) {
   1f88e:	2c00      	cmp	r4, #0
   1f890:	d0da      	beq.n	1f848 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1f892:	42b4      	cmp	r4, r6
   1f894:	d3e8      	bcc.n	1f868 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1f896:	4631      	mov	r1, r6
   1f898:	f109 0008 	add.w	r0, r9, #8
   1f89c:	f7fb f9c6 	bl	1ac2c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1f8a0:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1f8a2:	4632      	mov	r2, r6
   1f8a4:	4441      	add	r1, r8
   1f8a6:	f7e0 fd0b 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1f8aa:	1ba4      	subs	r4, r4, r6
   1f8ac:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1f8ae:	2600      	movs	r6, #0
   1f8b0:	e7ea      	b.n	1f888 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1f8b2:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1f8b4:	2300      	movs	r3, #0
   1f8b6:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1f8b8:	4638      	mov	r0, r7
   1f8ba:	f7fd fed4 	bl	1d666 <net_pkt_frag_unref>
			if (!orig_frag) {
   1f8be:	2d00      	cmp	r5, #0
   1f8c0:	d0ac      	beq.n	1f81c <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1f8c2:	462f      	mov	r7, r5
			pos = 0;
   1f8c4:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1f8c6:	89ae      	ldrh	r6, [r5, #12]
   1f8c8:	e7df      	b.n	1f88a <update_ll_reserve+0x7e>

0001f8ca <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1f8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8cc:	4604      	mov	r4, r0
   1f8ce:	460e      	mov	r6, r1
   1f8d0:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1f8d2:	6880      	ldr	r0, [r0, #8]
   1f8d4:	212c      	movs	r1, #44	; 0x2c
   1f8d6:	3008      	adds	r0, #8
   1f8d8:	f7fb f9a8 	bl	1ac2c <net_buf_simple_add>
	return pkt->frags->data;
   1f8dc:	68a3      	ldr	r3, [r4, #8]
   1f8de:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f8e0:	2260      	movs	r2, #96	; 0x60
   1f8e2:	701a      	strb	r2, [r3, #0]
   1f8e4:	68a3      	ldr	r3, [r4, #8]
   1f8e6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f8e8:	2500      	movs	r5, #0
   1f8ea:	705d      	strb	r5, [r3, #1]
   1f8ec:	68a3      	ldr	r3, [r4, #8]
   1f8ee:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f8f0:	709d      	strb	r5, [r3, #2]
   1f8f2:	70dd      	strb	r5, [r3, #3]
   1f8f4:	68a3      	ldr	r3, [r4, #8]
   1f8f6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1f8f8:	711d      	strb	r5, [r3, #4]
   1f8fa:	68a3      	ldr	r3, [r4, #8]
   1f8fc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1f8fe:	3604      	adds	r6, #4
   1f900:	715e      	strb	r6, [r3, #5]
   1f902:	68a3      	ldr	r3, [r4, #8]
   1f904:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f906:	223a      	movs	r2, #58	; 0x3a
   1f908:	719a      	strb	r2, [r3, #6]
   1f90a:	68a3      	ldr	r3, [r4, #8]
   1f90c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1f90e:	22ff      	movs	r2, #255	; 0xff
   1f910:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1f912:	4620      	mov	r0, r4
   1f914:	f7fe f986 	bl	1dc24 <net_pkt_icmp_data>
   1f918:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1f91a:	4620      	mov	r0, r4
   1f91c:	f7fe f982 	bl	1dc24 <net_pkt_icmp_data>
   1f920:	7045      	strb	r5, [r0, #1]
   1f922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f924 <nbr_free>:
{
   1f924:	b538      	push	{r3, r4, r5, lr}
   1f926:	4604      	mov	r4, r0
   1f928:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f92a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f92e:	f00a fa6b 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   1f932:	6828      	ldr	r0, [r5, #0]
   1f934:	b118      	cbz	r0, 1f93e <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1f936:	f7fd fe9c 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   1f93a:	2300      	movs	r3, #0
   1f93c:	602b      	str	r3, [r5, #0]
   1f93e:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f940:	3014      	adds	r0, #20
   1f942:	f00a fa61 	bl	29e08 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f946:	4620      	mov	r0, r4
   1f948:	f7ff fc94 	bl	1f274 <net_nbr_unref>
   1f94c:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f950 <net_ipv6_nbr_state2str>:
	switch (state) {
   1f950:	2805      	cmp	r0, #5
   1f952:	d80e      	bhi.n	1f972 <net_ipv6_nbr_state2str+0x22>
   1f954:	e8df f000 	tbb	[pc, r0]
   1f958:	07050f03 	.word	0x07050f03
   1f95c:	0b09      	.short	0x0b09
		return "incomplete";
   1f95e:	4807      	ldr	r0, [pc, #28]	; (1f97c <net_ipv6_nbr_state2str+0x2c>)
   1f960:	4770      	bx	lr
		return "stale";
   1f962:	4807      	ldr	r0, [pc, #28]	; (1f980 <net_ipv6_nbr_state2str+0x30>)
   1f964:	4770      	bx	lr
		return "delay";
   1f966:	4807      	ldr	r0, [pc, #28]	; (1f984 <net_ipv6_nbr_state2str+0x34>)
   1f968:	4770      	bx	lr
		return "probe";
   1f96a:	4807      	ldr	r0, [pc, #28]	; (1f988 <net_ipv6_nbr_state2str+0x38>)
   1f96c:	4770      	bx	lr
		return "static";
   1f96e:	4807      	ldr	r0, [pc, #28]	; (1f98c <net_ipv6_nbr_state2str+0x3c>)
   1f970:	4770      	bx	lr
	return "<invalid state>";
   1f972:	4807      	ldr	r0, [pc, #28]	; (1f990 <net_ipv6_nbr_state2str+0x40>)
   1f974:	4770      	bx	lr
		return "reachable";
   1f976:	4807      	ldr	r0, [pc, #28]	; (1f994 <net_ipv6_nbr_state2str+0x44>)
}
   1f978:	4770      	bx	lr
   1f97a:	bf00      	nop
   1f97c:	00031500 	.word	0x00031500
   1f980:	00031518 	.word	0x00031518
   1f984:	00031520 	.word	0x00031520
   1f988:	00031528 	.word	0x00031528
   1f98c:	00031530 	.word	0x00031530
   1f990:	00031538 	.word	0x00031538
   1f994:	0003150c 	.word	0x0003150c

0001f998 <net_ipv6_nbr_foreach>:
{
   1f998:	b500      	push	{lr}
   1f99a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1f99c:	9000      	str	r0, [sp, #0]
   1f99e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1f9a0:	4669      	mov	r1, sp
   1f9a2:	4803      	ldr	r0, [pc, #12]	; (1f9b0 <net_ipv6_nbr_foreach+0x18>)
   1f9a4:	f7fc fc3a 	bl	1c21c <net_if_foreach>
}
   1f9a8:	b003      	add	sp, #12
   1f9aa:	f85d fb04 	ldr.w	pc, [sp], #4
   1f9ae:	bf00      	nop
   1f9b0:	0001f3bd 	.word	0x0001f3bd

0001f9b4 <net_ipv6_nbr_rm>:
{
   1f9b4:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1f9b6:	460a      	mov	r2, r1
   1f9b8:	4601      	mov	r1, r0
   1f9ba:	480d      	ldr	r0, [pc, #52]	; (1f9f0 <net_ipv6_nbr_rm+0x3c>)
   1f9bc:	f7ff fe6c 	bl	1f698 <nbr_lookup>
	if (!nbr) {
   1f9c0:	b1a0      	cbz	r0, 1f9ec <net_ipv6_nbr_rm+0x38>
   1f9c2:	4604      	mov	r4, r0
   1f9c4:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f9c6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f9ca:	f00a fa1d 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   1f9ce:	6828      	ldr	r0, [r5, #0]
   1f9d0:	b118      	cbz	r0, 1f9da <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1f9d2:	f7fd fe4e 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   1f9d6:	2300      	movs	r3, #0
   1f9d8:	602b      	str	r3, [r5, #0]
   1f9da:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f9dc:	3014      	adds	r0, #20
   1f9de:	f00a fa13 	bl	29e08 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f9e2:	4620      	mov	r0, r4
   1f9e4:	f7ff fc46 	bl	1f274 <net_nbr_unref>
	return true;
   1f9e8:	2001      	movs	r0, #1
   1f9ea:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1f9ec:	2000      	movs	r0, #0
}
   1f9ee:	bd38      	pop	{r3, r4, r5, pc}
   1f9f0:	2000be4c 	.word	0x2000be4c

0001f9f4 <net_ipv6_unspecified_address>:
}
   1f9f4:	4800      	ldr	r0, [pc, #0]	; (1f9f8 <net_ipv6_unspecified_address+0x4>)
   1f9f6:	4770      	bx	lr
   1f9f8:	000314f0 	.word	0x000314f0

0001f9fc <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1f9fc:	b570      	push	{r4, r5, r6, lr}
   1f9fe:	b082      	sub	sp, #8
   1fa00:	4604      	mov	r4, r0
   1fa02:	460e      	mov	r6, r1
   1fa04:	461d      	mov	r5, r3
   1fa06:	a902      	add	r1, sp, #8
   1fa08:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fa0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa10:	460a      	mov	r2, r1
   1fa12:	2101      	movs	r1, #1
   1fa14:	f7fd ff65 	bl	1d8e2 <net_pkt_append>
   1fa18:	aa02      	add	r2, sp, #8
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1fa20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa24:	2101      	movs	r1, #1
   1fa26:	4620      	mov	r0, r4
   1fa28:	f7fd ff5b 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fa2c:	022b      	lsls	r3, r5, #8
   1fa2e:	aa02      	add	r2, sp, #8
   1fa30:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fa34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa38:	2102      	movs	r1, #2
   1fa3a:	4620      	mov	r0, r4
   1fa3c:	f7fd ff51 	bl	1d8e2 <net_pkt_append>
   1fa40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa44:	4632      	mov	r2, r6
   1fa46:	2110      	movs	r1, #16
   1fa48:	4620      	mov	r0, r4
   1fa4a:	f7fd ff4a 	bl	1d8e2 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1fa4e:	b915      	cbnz	r5, 1fa56 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1fa50:	4620      	mov	r0, r4
   1fa52:	b002      	add	sp, #8
   1fa54:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1fa56:	f7ff ffcd 	bl	1f9f4 <net_ipv6_unspecified_address>
   1fa5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa5e:	4602      	mov	r2, r0
   1fa60:	2110      	movs	r1, #16
   1fa62:	4620      	mov	r0, r4
   1fa64:	f7fd ff3d 	bl	1d8e2 <net_pkt_append>
   1fa68:	e7f2      	b.n	1fa50 <create_mldv2+0x54>

0001fa6a <net_ipv6_create_raw>:
{
   1fa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa6e:	b088      	sub	sp, #32
   1fa70:	4604      	mov	r4, r0
   1fa72:	460e      	mov	r6, r1
   1fa74:	4617      	mov	r7, r2
   1fa76:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1fa78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa7c:	f7fd fda6 	bl	1d5cc <net_pkt_get_frag>
   1fa80:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1fa82:	4601      	mov	r1, r0
   1fa84:	4620      	mov	r0, r4
   1fa86:	f7fd fe2b 	bl	1d6e0 <net_pkt_frag_insert>
	return pkt->frags->data;
   1fa8a:	68a3      	ldr	r3, [r4, #8]
   1fa8c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fa8e:	2260      	movs	r2, #96	; 0x60
   1fa90:	701a      	strb	r2, [r3, #0]
   1fa92:	68a3      	ldr	r3, [r4, #8]
   1fa94:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fa96:	2300      	movs	r3, #0
   1fa98:	7053      	strb	r3, [r2, #1]
   1fa9a:	68a2      	ldr	r2, [r4, #8]
   1fa9c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fa9e:	7093      	strb	r3, [r2, #2]
   1faa0:	70d3      	strb	r3, [r2, #3]
   1faa2:	68a2      	ldr	r2, [r4, #8]
   1faa4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1faa6:	7193      	strb	r3, [r2, #6]
   1faa8:	68a3      	ldr	r3, [r4, #8]
   1faaa:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1faac:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1fab0:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1fab2:	68a3      	ldr	r3, [r4, #8]
   1fab4:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1fab6:	79da      	ldrb	r2, [r3, #7]
   1fab8:	b912      	cbnz	r2, 1fac0 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1faba:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1fabe:	71da      	strb	r2, [r3, #7]
   1fac0:	68a3      	ldr	r3, [r4, #8]
   1fac2:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fac6:	466d      	mov	r5, sp
   1fac8:	6838      	ldr	r0, [r7, #0]
   1faca:	6879      	ldr	r1, [r7, #4]
   1facc:	68ba      	ldr	r2, [r7, #8]
   1face:	68fb      	ldr	r3, [r7, #12]
   1fad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fad2:	466d      	mov	r5, sp
   1fad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fad6:	f8ce 0018 	str.w	r0, [lr, #24]
   1fada:	f8ce 101c 	str.w	r1, [lr, #28]
   1fade:	f8ce 2020 	str.w	r2, [lr, #32]
   1fae2:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1fae6:	68a3      	ldr	r3, [r4, #8]
   1fae8:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1faea:	6830      	ldr	r0, [r6, #0]
   1faec:	6871      	ldr	r1, [r6, #4]
   1faee:	68b2      	ldr	r2, [r6, #8]
   1faf0:	68f3      	ldr	r3, [r6, #12]
   1faf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1faf4:	ad04      	add	r5, sp, #16
   1faf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1faf8:	60b8      	str	r0, [r7, #8]
   1fafa:	60f9      	str	r1, [r7, #12]
   1fafc:	613a      	str	r2, [r7, #16]
   1fafe:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1fb00:	2300      	movs	r3, #0
   1fb02:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fb06:	68a3      	ldr	r3, [r4, #8]
   1fb08:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1fb0a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fb0e:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1fb10:	2128      	movs	r1, #40	; 0x28
   1fb12:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1fb16:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fb1a:	220a      	movs	r2, #10
   1fb1c:	f362 03c6 	bfi	r3, r2, #3, #4
   1fb20:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1fb24:	f108 0008 	add.w	r0, r8, #8
   1fb28:	f7fb f880 	bl	1ac2c <net_buf_simple_add>
}
   1fb2c:	4620      	mov	r0, r4
   1fb2e:	b008      	add	sp, #32
   1fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb34 <net_ipv6_create>:
{
   1fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb36:	b083      	sub	sp, #12
   1fb38:	4605      	mov	r5, r0
   1fb3a:	460e      	mov	r6, r1
   1fb3c:	461f      	mov	r7, r3
	if (!src) {
   1fb3e:	4614      	mov	r4, r2
   1fb40:	b14a      	cbz	r2, 1fb56 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fb42:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb44:	b94b      	cbnz	r3, 1fb5a <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fb46:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fb48:	b9fb      	cbnz	r3, 1fb8a <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb4a:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fb4c:	b9fb      	cbnz	r3, 1fb8e <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fb4e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb50:	b1fb      	cbz	r3, 1fb92 <net_ipv6_create+0x5e>
   1fb52:	2300      	movs	r3, #0
   1fb54:	e002      	b.n	1fb5c <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1fb56:	68c4      	ldr	r4, [r0, #12]
   1fb58:	e7f3      	b.n	1fb42 <net_ipv6_create+0xe>
   1fb5a:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1fb5c:	b9db      	cbnz	r3, 1fb96 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1fb5e:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1fb60:	2bff      	cmp	r3, #255	; 0xff
   1fb62:	d018      	beq.n	1fb96 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1fb64:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1fb68:	f7fc fb3c 	bl	1c1e4 <net_if_get_by_index>
   1fb6c:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1fb6e:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1fb72:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fb76:	d114      	bne.n	1fba2 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1fb78:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1fb7a:	9200      	str	r2, [sp, #0]
   1fb7c:	463a      	mov	r2, r7
   1fb7e:	4621      	mov	r1, r4
   1fb80:	4630      	mov	r0, r6
   1fb82:	f7ff ff72 	bl	1fa6a <net_ipv6_create_raw>
}
   1fb86:	b003      	add	sp, #12
   1fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb8a:	2300      	movs	r3, #0
   1fb8c:	e7e6      	b.n	1fb5c <net_ipv6_create+0x28>
   1fb8e:	2300      	movs	r3, #0
   1fb90:	e7e4      	b.n	1fb5c <net_ipv6_create+0x28>
   1fb92:	2301      	movs	r3, #1
   1fb94:	e7e2      	b.n	1fb5c <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1fb96:	4639      	mov	r1, r7
   1fb98:	6970      	ldr	r0, [r6, #20]
   1fb9a:	f7fc f8cf 	bl	1bd3c <net_if_ipv6_select_src_addr>
   1fb9e:	4604      	mov	r4, r0
   1fba0:	e7e0      	b.n	1fb64 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1fba2:	2206      	movs	r2, #6
   1fba4:	e7e9      	b.n	1fb7a <net_ipv6_create+0x46>

0001fba6 <net_ipv6_finalize_raw>:
{
   1fba6:	b538      	push	{r3, r4, r5, lr}
   1fba8:	4605      	mov	r5, r0
   1fbaa:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1fbac:	f7fd fe52 	bl	1d854 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1fbb0:	68a8      	ldr	r0, [r5, #8]
   1fbb2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1fbb4:	2200      	movs	r2, #0
   1fbb6:	e002      	b.n	1fbbe <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1fbb8:	8999      	ldrh	r1, [r3, #12]
   1fbba:	440a      	add	r2, r1
		buf = buf->frags;
   1fbbc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fbbe:	2b00      	cmp	r3, #0
   1fbc0:	d1fa      	bne.n	1fbb8 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1fbc2:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1fbc4:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1fbc6:	0a11      	lsrs	r1, r2, #8
   1fbc8:	7119      	strb	r1, [r3, #4]
   1fbca:	68ab      	ldr	r3, [r5, #8]
   1fbcc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1fbce:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1fbd0:	2c11      	cmp	r4, #17
   1fbd2:	d005      	beq.n	1fbe0 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1fbd4:	2c06      	cmp	r4, #6
   1fbd6:	d008      	beq.n	1fbea <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1fbd8:	2c3a      	cmp	r4, #58	; 0x3a
   1fbda:	d00b      	beq.n	1fbf4 <net_ipv6_finalize_raw+0x4e>
}
   1fbdc:	2000      	movs	r0, #0
   1fbde:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1fbe0:	68a9      	ldr	r1, [r5, #8]
   1fbe2:	4628      	mov	r0, r5
   1fbe4:	f003 fa9b 	bl	2311e <net_udp_set_chksum>
   1fbe8:	e7f8      	b.n	1fbdc <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1fbea:	68a9      	ldr	r1, [r5, #8]
   1fbec:	4628      	mov	r0, r5
   1fbee:	f004 f8da 	bl	23da6 <net_tcp_set_chksum>
   1fbf2:	e7f3      	b.n	1fbdc <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1fbf4:	68a9      	ldr	r1, [r5, #8]
   1fbf6:	4628      	mov	r0, r5
   1fbf8:	f7fe fdf2 	bl	1e7e0 <net_icmpv6_set_chksum>
   1fbfc:	e7ee      	b.n	1fbdc <net_ipv6_finalize_raw+0x36>
	...

0001fc00 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1fc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fc04:	b08d      	sub	sp, #52	; 0x34
   1fc06:	4680      	mov	r8, r0
   1fc08:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1fc0a:	f240 23ff 	movw	r3, #767	; 0x2ff
   1fc0e:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1fc12:	2500      	movs	r5, #0
   1fc14:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1fc18:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1fc1c:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1fc20:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1fc24:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1fc28:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1fc2c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1fc30:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fc34:	6843      	ldr	r3, [r0, #4]
   1fc36:	689b      	ldr	r3, [r3, #8]
   1fc38:	a908      	add	r1, sp, #32
   1fc3a:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1fc3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc40:	f7fd fca6 	bl	1d590 <net_pkt_get_reserve_tx>
   1fc44:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1fc46:	a908      	add	r1, sp, #32
   1fc48:	4640      	mov	r0, r8
   1fc4a:	f7fc f877 	bl	1bd3c <net_if_ipv6_select_src_addr>
   1fc4e:	9500      	str	r5, [sp, #0]
   1fc50:	4643      	mov	r3, r8
   1fc52:	aa08      	add	r2, sp, #32
   1fc54:	4601      	mov	r1, r0
   1fc56:	4620      	mov	r0, r4
   1fc58:	f7ff ff07 	bl	1fa6a <net_ipv6_create_raw>
   1fc5c:	4604      	mov	r4, r0
   1fc5e:	6883      	ldr	r3, [r0, #8]
   1fc60:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1fc62:	2601      	movs	r6, #1
   1fc64:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1fc66:	6883      	ldr	r3, [r0, #8]
   1fc68:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1fc6a:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1fc6c:	aa0c      	add	r2, sp, #48	; 0x30
   1fc6e:	233a      	movs	r3, #58	; 0x3a
   1fc70:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc78:	4631      	mov	r1, r6
   1fc7a:	f7fd fe32 	bl	1d8e2 <net_pkt_append>
   1fc7e:	aa0c      	add	r2, sp, #48	; 0x30
   1fc80:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1fc84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc88:	4631      	mov	r1, r6
   1fc8a:	4620      	mov	r0, r4
   1fc8c:	f7fd fe29 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fc90:	af0c      	add	r7, sp, #48	; 0x30
   1fc92:	f240 2305 	movw	r3, #517	; 0x205
   1fc96:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc9e:	463a      	mov	r2, r7
   1fca0:	2102      	movs	r1, #2
   1fca2:	4620      	mov	r0, r4
   1fca4:	f7fd fe1d 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fca8:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fcac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcb0:	463a      	mov	r2, r7
   1fcb2:	2102      	movs	r1, #2
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	f7fd fe14 	bl	1d8e2 <net_pkt_append>
   1fcba:	aa0c      	add	r2, sp, #48	; 0x30
   1fcbc:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1fcc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcc4:	4631      	mov	r1, r6
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	f7fd fe0b 	bl	1d8e2 <net_pkt_append>
   1fccc:	aa0c      	add	r2, sp, #48	; 0x30
   1fcce:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1fcd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcd6:	4631      	mov	r1, r6
   1fcd8:	4620      	mov	r0, r4
   1fcda:	f7fd fe02 	bl	1d8e2 <net_pkt_append>
   1fcde:	aa0c      	add	r2, sp, #48	; 0x30
   1fce0:	238f      	movs	r3, #143	; 0x8f
   1fce2:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1fce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcea:	4631      	mov	r1, r6
   1fcec:	4620      	mov	r0, r4
   1fcee:	f7fd fdf8 	bl	1d8e2 <net_pkt_append>
   1fcf2:	aa0c      	add	r2, sp, #48	; 0x30
   1fcf4:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1fcf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcfc:	4631      	mov	r1, r6
   1fcfe:	4620      	mov	r0, r4
   1fd00:	f7fd fdef 	bl	1d8e2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fd04:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fd08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd0c:	463a      	mov	r2, r7
   1fd0e:	2102      	movs	r1, #2
   1fd10:	4620      	mov	r0, r4
   1fd12:	f7fd fde6 	bl	1d8e2 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1fd16:	68a3      	ldr	r3, [r4, #8]
   1fd18:	2234      	movs	r2, #52	; 0x34
   1fd1a:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1fd1c:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fd20:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fd24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fd28:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fd2c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1fd30:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fd34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd38:	463a      	mov	r2, r7
   1fd3a:	2102      	movs	r1, #2
   1fd3c:	4620      	mov	r0, r4
   1fd3e:	f7fd fdd0 	bl	1d8e2 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1fd42:	4649      	mov	r1, r9
   1fd44:	4620      	mov	r0, r4
   1fd46:	f7fd fcbe 	bl	1d6c6 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1fd4a:	4629      	mov	r1, r5
   1fd4c:	4620      	mov	r0, r4
   1fd4e:	f7ff ff2a 	bl	1fba6 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1fd52:	1e05      	subs	r5, r0, #0
   1fd54:	db35      	blt.n	1fdc2 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1fd56:	2308      	movs	r3, #8
   1fd58:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1fd5c:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1fd5e:	213a      	movs	r1, #58	; 0x3a
   1fd60:	4620      	mov	r0, r4
   1fd62:	f7fe faf0 	bl	1e346 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1fd66:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1fd6a:	b2c5      	uxtb	r5, r0
   1fd6c:	213a      	movs	r1, #58	; 0x3a
   1fd6e:	4620      	mov	r0, r4
   1fd70:	f7fe fae9 	bl	1e346 <net_calc_chksum>
   1fd74:	43c0      	mvns	r0, r0
   1fd76:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1fd7a:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1fd7c:	0a03      	lsrs	r3, r0, #8
   1fd7e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1fd82:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1fd86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd8a:	9302      	str	r3, [sp, #8]
   1fd8c:	ab07      	add	r3, sp, #28
   1fd8e:	9301      	str	r3, [sp, #4]
   1fd90:	2302      	movs	r3, #2
   1fd92:	9300      	str	r3, [sp, #0]
   1fd94:	f10d 031e 	add.w	r3, sp, #30
   1fd98:	2232      	movs	r2, #50	; 0x32
   1fd9a:	4631      	mov	r1, r6
   1fd9c:	4620      	mov	r0, r4
   1fd9e:	f7fd fe58 	bl	1da52 <net_pkt_write>

	ret = net_send_data(pkt);
   1fda2:	4620      	mov	r0, r4
   1fda4:	f7fb f864 	bl	1ae70 <net_send_data>
	if (ret < 0) {
   1fda8:	1e05      	subs	r5, r0, #0
   1fdaa:	db0a      	blt.n	1fdc2 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1fdac:	4b0d      	ldr	r3, [pc, #52]	; (1fde4 <send_mldv2_raw+0x1e4>)
   1fdae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fdb0:	3201      	adds	r2, #1
   1fdb2:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1fdb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1fdb8:	3201      	adds	r2, #1
   1fdba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1fdbe:	2500      	movs	r5, #0
   1fdc0:	e00b      	b.n	1fdda <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1fdc2:	4620      	mov	r0, r4
   1fdc4:	f7fd fc55 	bl	1d672 <net_pkt_unref>
	net_stats.icmp.drop++;
   1fdc8:	4b06      	ldr	r3, [pc, #24]	; (1fde4 <send_mldv2_raw+0x1e4>)
   1fdca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1fdcc:	3201      	adds	r2, #1
   1fdce:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1fdd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1fdd4:	3201      	adds	r2, #1
   1fdd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1fdda:	4628      	mov	r0, r5
   1fddc:	b00d      	add	sp, #52	; 0x34
   1fdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fde2:	bf00      	nop
   1fde4:	20002a58 	.word	0x20002a58

0001fde8 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdea:	b083      	sub	sp, #12
   1fdec:	4605      	mov	r5, r0
   1fdee:	460e      	mov	r6, r1
   1fdf0:	4617      	mov	r7, r2
   1fdf2:	6843      	ldr	r3, [r0, #4]
   1fdf4:	689b      	ldr	r3, [r3, #8]
   1fdf6:	2100      	movs	r1, #0
   1fdf8:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1fdfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fdfe:	f7fd fbc7 	bl	1d590 <net_pkt_get_reserve_tx>
   1fe02:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1fe04:	aa02      	add	r2, sp, #8
   1fe06:	f44f 7380 	mov.w	r3, #256	; 0x100
   1fe0a:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe12:	2102      	movs	r1, #2
   1fe14:	f7fd fd65 	bl	1d8e2 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1fe18:	2301      	movs	r3, #1
   1fe1a:	463a      	mov	r2, r7
   1fe1c:	4631      	mov	r1, r6
   1fe1e:	4620      	mov	r0, r4
   1fe20:	f7ff fdec 	bl	1f9fc <create_mldv2>
   1fe24:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1fe26:	6881      	ldr	r1, [r0, #8]
   1fe28:	4628      	mov	r0, r5
   1fe2a:	f7ff fee9 	bl	1fc00 <send_mldv2_raw>
   1fe2e:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1fe30:	2300      	movs	r3, #0
   1fe32:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1fe34:	4620      	mov	r0, r4
   1fe36:	f7fd fc1c 	bl	1d672 <net_pkt_unref>

	return ret;
}
   1fe3a:	4628      	mov	r0, r5
   1fe3c:	b003      	add	sp, #12
   1fe3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe40 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1fe40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe42:	b087      	sub	sp, #28
   1fe44:	4605      	mov	r5, r0
   1fe46:	6843      	ldr	r3, [r0, #4]
   1fe48:	689b      	ldr	r3, [r3, #8]
   1fe4a:	2100      	movs	r1, #0
   1fe4c:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1fe4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fe52:	f7fd fb9d 	bl	1d590 <net_pkt_get_reserve_tx>
   1fe56:	4606      	mov	r6, r0
   1fe58:	2400      	movs	r4, #0
   1fe5a:	aa06      	add	r2, sp, #24
   1fe5c:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1fe60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe64:	2101      	movs	r1, #1
   1fe66:	f7fd fd3c 	bl	1d8e2 <net_pkt_append>
	int i, count = 0;
   1fe6a:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1fe6c:	e000      	b.n	1fe70 <send_mld_report+0x30>
   1fe6e:	3401      	adds	r4, #1
   1fe70:	2c04      	cmp	r4, #4
   1fe72:	dc1e      	bgt.n	1feb2 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1fe74:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1fe78:	00d3      	lsls	r3, r2, #3
   1fe7a:	442b      	add	r3, r5
   1fe7c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1fe80:	f013 0f01 	tst.w	r3, #1
   1fe84:	d0f3      	beq.n	1fe6e <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1fe86:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1fe8a:	00d3      	lsls	r3, r2, #3
   1fe8c:	461a      	mov	r2, r3
   1fe8e:	442b      	add	r3, r5
   1fe90:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1fe94:	f013 0f02 	tst.w	r3, #2
   1fe98:	d0e9      	beq.n	1fe6e <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1fe9a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1fe9e:	4429      	add	r1, r5
   1fea0:	2300      	movs	r3, #0
   1fea2:	2202      	movs	r2, #2
   1fea4:	3118      	adds	r1, #24
   1fea6:	4630      	mov	r0, r6
   1fea8:	f7ff fda8 	bl	1f9fc <create_mldv2>
   1feac:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1feae:	3701      	adds	r7, #1
   1feb0:	e7dd      	b.n	1fe6e <send_mld_report+0x2e>
	}

	if (count > 0) {
   1feb2:	2f00      	cmp	r7, #0
   1feb4:	dd16      	ble.n	1fee4 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1feb6:	68b1      	ldr	r1, [r6, #8]
   1feb8:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1febc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fec0:	9302      	str	r3, [sp, #8]
   1fec2:	f10d 0315 	add.w	r3, sp, #21
   1fec6:	9301      	str	r3, [sp, #4]
   1fec8:	2301      	movs	r3, #1
   1feca:	9300      	str	r3, [sp, #0]
   1fecc:	f10d 0316 	add.w	r3, sp, #22
   1fed0:	2200      	movs	r2, #0
   1fed2:	4630      	mov	r0, r6
   1fed4:	f7fd fdbd 	bl	1da52 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1fed8:	68b1      	ldr	r1, [r6, #8]
   1feda:	4628      	mov	r0, r5
   1fedc:	f7ff fe90 	bl	1fc00 <send_mldv2_raw>

		pkt->frags = NULL;
   1fee0:	2300      	movs	r3, #0
   1fee2:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1fee4:	4630      	mov	r0, r6
   1fee6:	f7fd fbc4 	bl	1d672 <net_pkt_unref>
}
   1feea:	b007      	add	sp, #28
   1feec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001fef0 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1fef0:	b570      	push	{r4, r5, r6, lr}
   1fef2:	b08a      	sub	sp, #40	; 0x28
   1fef4:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1fef6:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1fef8:	2200      	movs	r2, #0
   1fefa:	e002      	b.n	1ff02 <handle_mld_query+0x12>
		bytes += buf->len;
   1fefc:	8999      	ldrh	r1, [r3, #12]
   1fefe:	440a      	add	r2, r1
		buf = buf->frags;
   1ff00:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ff02:	2b00      	cmp	r3, #0
   1ff04:	d1fa      	bne.n	1fefc <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1ff06:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1ff08:	4a37      	ldr	r2, [pc, #220]	; (1ffe8 <handle_mld_query+0xf8>)
   1ff0a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1ff0e:	3301      	adds	r3, #1
   1ff10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1ff14:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ff18:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1ff1c:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1ff1e:	3104      	adds	r1, #4
   1ff20:	f10d 0212 	add.w	r2, sp, #18
   1ff24:	b289      	uxth	r1, r1
   1ff26:	4628      	mov	r0, r5
   1ff28:	f7fd fe72 	bl	1dc10 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1ff2c:	f10d 0316 	add.w	r3, sp, #22
   1ff30:	aa04      	add	r2, sp, #16
   1ff32:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1ff36:	f7fd fd62 	bl	1d9fe <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1ff3a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1ff3e:	2600      	movs	r6, #0
   1ff40:	9600      	str	r6, [sp, #0]
   1ff42:	2302      	movs	r3, #2
   1ff44:	aa04      	add	r2, sp, #16
   1ff46:	f7fd fd12 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1ff4a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ff4e:	ab06      	add	r3, sp, #24
   1ff50:	9300      	str	r3, [sp, #0]
   1ff52:	2310      	movs	r3, #16
   1ff54:	eb0d 0203 	add.w	r2, sp, r3
   1ff58:	f7fd fd09 	bl	1d96e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1ff5c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ff60:	9600      	str	r6, [sp, #0]
   1ff62:	2302      	movs	r3, #2
   1ff64:	aa04      	add	r2, sp, #16
   1ff66:	f7fd fd02 	bl	1d96e <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1ff6a:	ab05      	add	r3, sp, #20
   1ff6c:	aa04      	add	r2, sp, #16
   1ff6e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ff72:	68a8      	ldr	r0, [r5, #8]
   1ff74:	f7fd fd43 	bl	1d9fe <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1ff78:	b358      	cbz	r0, 1ffd2 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1ff7a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1ff7e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ff82:	0112      	lsls	r2, r2, #4
   1ff84:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1ff86:	4413      	add	r3, r2
   1ff88:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1ff8a:	3344      	adds	r3, #68	; 0x44
   1ff8c:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1ff8e:	429c      	cmp	r4, r3
   1ff90:	d307      	bcc.n	1ffa2 <handle_mld_query+0xb2>
   1ff92:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1ff96:	d804      	bhi.n	1ffa2 <handle_mld_query+0xb2>
	return pkt->frags->data;
   1ff98:	68ab      	ldr	r3, [r5, #8]
   1ff9a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1ff9c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1ff9e:	2b01      	cmp	r3, #1
   1ffa0:	d006      	beq.n	1ffb0 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ffa2:	a903      	add	r1, sp, #12
   1ffa4:	4628      	mov	r0, r5
   1ffa6:	f7fe fc68 	bl	1e87a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1ffaa:	b148      	cbz	r0, 1ffc0 <handle_mld_query+0xd0>
   1ffac:	7843      	ldrb	r3, [r0, #1]
   1ffae:	b93b      	cbnz	r3, 1ffc0 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1ffb0:	f7ff fd20 	bl	1f9f4 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ffb4:	2210      	movs	r2, #16
   1ffb6:	4601      	mov	r1, r0
   1ffb8:	a806      	add	r0, sp, #24
   1ffba:	f00a f875 	bl	2a0a8 <memcmp>
   1ffbe:	b178      	cbz	r0, 1ffe0 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1ffc0:	4a09      	ldr	r2, [pc, #36]	; (1ffe8 <handle_mld_query+0xf8>)
   1ffc2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1ffc6:	3301      	adds	r3, #1
   1ffc8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1ffcc:	2002      	movs	r0, #2
   1ffce:	b00a      	add	sp, #40	; 0x28
   1ffd0:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1ffd2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1ffd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ffda:	429a      	cmp	r2, r3
   1ffdc:	d1cd      	bne.n	1ff7a <handle_mld_query+0x8a>
   1ffde:	e7ef      	b.n	1ffc0 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1ffe0:	6968      	ldr	r0, [r5, #20]
   1ffe2:	f7ff ff2d 	bl	1fe40 <send_mld_report>
   1ffe6:	e7eb      	b.n	1ffc0 <handle_mld_query+0xd0>
   1ffe8:	20002a58 	.word	0x20002a58

0001ffec <net_ipv6_finalize>:
{
   1ffec:	b508      	push	{r3, lr}
   1ffee:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1fff0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1fff4:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fff8:	d104      	bne.n	20004 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1fffa:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1fffc:	4618      	mov	r0, r3
   1fffe:	f7ff fdd2 	bl	1fba6 <net_ipv6_finalize_raw>
}
   20002:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   20004:	2106      	movs	r1, #6
   20006:	e7f9      	b.n	1fffc <net_ipv6_finalize+0x10>

00020008 <net_ipv6_nbr_lookup>:
{
   20008:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   2000a:	460a      	mov	r2, r1
   2000c:	4601      	mov	r1, r0
   2000e:	4802      	ldr	r0, [pc, #8]	; (20018 <net_ipv6_nbr_lookup+0x10>)
   20010:	f7ff fb42 	bl	1f698 <nbr_lookup>
}
   20014:	bd08      	pop	{r3, pc}
   20016:	bf00      	nop
   20018:	2000be4c 	.word	0x2000be4c

0002001c <net_ipv6_send_na>:
{
   2001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20020:	b093      	sub	sp, #76	; 0x4c
   20022:	4605      	mov	r5, r0
   20024:	468b      	mov	fp, r1
   20026:	4692      	mov	sl, r2
   20028:	4699      	mov	r9, r3
   2002a:	6843      	ldr	r3, [r0, #4]
   2002c:	689b      	ldr	r3, [r3, #8]
   2002e:	4611      	mov	r1, r2
   20030:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   20032:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20036:	f7fd faab 	bl	1d590 <net_pkt_get_reserve_tx>
   2003a:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2003c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20040:	f7fd fac4 	bl	1d5cc <net_pkt_get_frag>
   20044:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   20046:	4601      	mov	r1, r0
   20048:	4620      	mov	r0, r4
   2004a:	f7fd fb3c 	bl	1d6c6 <net_pkt_frag_add>
	pkt->iface = iface;
   2004e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20050:	7d6b      	ldrb	r3, [r5, #21]
   20052:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20056:	7d6b      	ldrb	r3, [r5, #21]
   20058:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2005c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20060:	220a      	movs	r2, #10
   20062:	f362 03c6 	bfi	r3, r2, #3, #4
   20066:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2006a:	2328      	movs	r3, #40	; 0x28
   2006c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20070:	68a3      	ldr	r3, [r4, #8]
   20072:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20074:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20078:	461a      	mov	r2, r3
   2007a:	2100      	movs	r1, #0
   2007c:	1ac0      	subs	r0, r0, r3
   2007e:	f00a f8a7 	bl	2a1d0 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20082:	2300      	movs	r3, #0
   20084:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20086:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   2008a:	7d2b      	ldrb	r3, [r5, #20]
   2008c:	2b06      	cmp	r3, #6
   2008e:	f000 8092 	beq.w	201b6 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   20092:	2b08      	cmp	r3, #8
   20094:	f000 808d 	beq.w	201b2 <net_ipv6_send_na+0x196>
	return 0;
   20098:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   2009a:	f04f 0800 	mov.w	r8, #0
   2009e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   200a2:	f106 0514 	add.w	r5, r6, #20
   200a6:	2288      	movs	r2, #136	; 0x88
   200a8:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   200ac:	4620      	mov	r0, r4
   200ae:	f7ff fc0c 	bl	1f8ca <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   200b2:	4629      	mov	r1, r5
   200b4:	f107 0008 	add.w	r0, r7, #8
   200b8:	f7fa fdb8 	bl	1ac2c <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   200bc:	a901      	add	r1, sp, #4
   200be:	4620      	mov	r0, r4
   200c0:	f7fe fdd8 	bl	1ec74 <net_icmpv6_get_na_hdr>
   200c4:	4607      	mov	r7, r0
	return pkt->frags->data;
   200c6:	68a3      	ldr	r3, [r4, #8]
   200c8:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   200cc:	ad06      	add	r5, sp, #24
   200ce:	f8db 0000 	ldr.w	r0, [fp]
   200d2:	f8db 1004 	ldr.w	r1, [fp, #4]
   200d6:	f8db 2008 	ldr.w	r2, [fp, #8]
   200da:	f8db 300c 	ldr.w	r3, [fp, #12]
   200de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   200e0:	ad06      	add	r5, sp, #24
   200e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   200e4:	f8ce 0008 	str.w	r0, [lr, #8]
   200e8:	f8ce 100c 	str.w	r1, [lr, #12]
   200ec:	f8ce 2010 	str.w	r2, [lr, #16]
   200f0:	f8ce 3014 	str.w	r3, [lr, #20]
   200f4:	68a3      	ldr	r3, [r4, #8]
   200f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   200fa:	ad0a      	add	r5, sp, #40	; 0x28
   200fc:	f8da 0000 	ldr.w	r0, [sl]
   20100:	f8da 1004 	ldr.w	r1, [sl, #4]
   20104:	f8da 2008 	ldr.w	r2, [sl, #8]
   20108:	f8da 300c 	ldr.w	r3, [sl, #12]
   2010c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2010e:	ad0a      	add	r5, sp, #40	; 0x28
   20110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20112:	f8cc 0018 	str.w	r0, [ip, #24]
   20116:	f8cc 101c 	str.w	r1, [ip, #28]
   2011a:	f8cc 2020 	str.w	r2, [ip, #32]
   2011e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   20122:	ad0e      	add	r5, sp, #56	; 0x38
   20124:	f8d9 0000 	ldr.w	r0, [r9]
   20128:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2012c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20130:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20136:	ad0e      	add	r5, sp, #56	; 0x38
   20138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2013a:	6078      	str	r0, [r7, #4]
   2013c:	60b9      	str	r1, [r7, #8]
   2013e:	60fa      	str	r2, [r7, #12]
   20140:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   20142:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   20146:	4620      	mov	r0, r4
   20148:	f7fd fd6c 	bl	1dc24 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   2014c:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20150:	2302      	movs	r3, #2
   20152:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20154:	08f3      	lsrs	r3, r6, #3
   20156:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20158:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2015c:	f8da 1010 	ldr.w	r1, [sl, #16]
   20160:	301a      	adds	r0, #26
   20162:	f7e0 f8ad 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20166:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2016a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2016c:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2016e:	3a02      	subs	r2, #2
   20170:	4641      	mov	r1, r8
   20172:	4428      	add	r0, r5
   20174:	f00a f82c 	bl	2a1d0 <memset>
	na_hdr->flags = flags;
   20178:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   2017c:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   2017e:	4639      	mov	r1, r7
   20180:	4620      	mov	r0, r4
   20182:	f7fe fdac 	bl	1ecde <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   20186:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   20188:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   2018a:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   2018c:	68a1      	ldr	r1, [r4, #8]
   2018e:	4620      	mov	r0, r4
   20190:	f7fe fb26 	bl	1e7e0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20194:	4620      	mov	r0, r4
   20196:	f7fa fe6b 	bl	1ae70 <net_send_data>
   2019a:	4540      	cmp	r0, r8
   2019c:	db0d      	blt.n	201ba <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   2019e:	4a0d      	ldr	r2, [pc, #52]	; (201d4 <net_ipv6_send_na+0x1b8>)
   201a0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   201a4:	3301      	adds	r3, #1
   201a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   201aa:	4640      	mov	r0, r8
}
   201ac:	b013      	add	sp, #76	; 0x4c
   201ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   201b2:	2610      	movs	r6, #16
   201b4:	e771      	b.n	2009a <net_ipv6_send_na+0x7e>
		return 8;
   201b6:	2608      	movs	r6, #8
   201b8:	e76f      	b.n	2009a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   201ba:	4620      	mov	r0, r4
   201bc:	f7fd fa59 	bl	1d672 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   201c0:	4a04      	ldr	r2, [pc, #16]	; (201d4 <net_ipv6_send_na+0x1b8>)
   201c2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   201c6:	3301      	adds	r3, #1
   201c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   201cc:	f06f 0015 	mvn.w	r0, #21
   201d0:	e7ec      	b.n	201ac <net_ipv6_send_na+0x190>
   201d2:	bf00      	nop
   201d4:	20002a58 	.word	0x20002a58

000201d8 <net_ipv6_nbr_set_reachable_timer>:
{
   201d8:	b508      	push	{r3, lr}
   201da:	68c9      	ldr	r1, [r1, #12]
   201dc:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   201e0:	3114      	adds	r1, #20
   201e2:	4802      	ldr	r0, [pc, #8]	; (201ec <net_ipv6_nbr_set_reachable_timer+0x14>)
   201e4:	f009 fe6a 	bl	29ebc <k_delayed_work_submit_to_queue>
   201e8:	bd08      	pop	{r3, pc}
   201ea:	bf00      	nop
   201ec:	20002b78 	.word	0x20002b78

000201f0 <handle_na_input>:
{
   201f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201f4:	b090      	sub	sp, #64	; 0x40
   201f6:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   201f8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   201fa:	2200      	movs	r2, #0
   201fc:	e002      	b.n	20204 <handle_na_input+0x14>
		bytes += buf->len;
   201fe:	8999      	ldrh	r1, [r3, #12]
   20200:	440a      	add	r2, r1
		buf = buf->frags;
   20202:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20204:	2b00      	cmp	r3, #0
   20206:	d1fa      	bne.n	201fe <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20208:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   2020a:	a90a      	add	r1, sp, #40	; 0x28
   2020c:	4620      	mov	r0, r4
   2020e:	f7fe fd31 	bl	1ec74 <net_icmpv6_get_na_hdr>
   20212:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   20214:	4aaf      	ldr	r2, [pc, #700]	; (204d4 <handle_na_input+0x2e4>)
   20216:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2021a:	3301      	adds	r3, #1
   2021c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20220:	2d41      	cmp	r5, #65	; 0x41
   20222:	d904      	bls.n	2022e <handle_na_input+0x3e>
	return pkt->frags->data;
   20224:	68a3      	ldr	r3, [r4, #8]
   20226:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20228:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   2022a:	2bff      	cmp	r3, #255	; 0xff
   2022c:	d010      	beq.n	20250 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2022e:	a905      	add	r1, sp, #20
   20230:	4620      	mov	r0, r4
   20232:	f7fe fb22 	bl	1e87a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20236:	b108      	cbz	r0, 2023c <handle_na_input+0x4c>
   20238:	7843      	ldrb	r3, [r0, #1]
   2023a:	b1cb      	cbz	r3, 20270 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   2023c:	4aa5      	ldr	r2, [pc, #660]	; (204d4 <handle_na_input+0x2e4>)
   2023e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20242:	3301      	adds	r3, #1
   20244:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20248:	2002      	movs	r0, #2
}
   2024a:	b010      	add	sp, #64	; 0x40
   2024c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   20250:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20252:	2bff      	cmp	r3, #255	; 0xff
   20254:	d0eb      	beq.n	2022e <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20256:	a905      	add	r1, sp, #20
   20258:	4620      	mov	r0, r4
   2025a:	f7fe fd0b 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   2025e:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   20260:	f013 0f40 	tst.w	r3, #64	; 0x40
   20264:	d004      	beq.n	20270 <handle_na_input+0x80>
   20266:	68a3      	ldr	r3, [r4, #8]
   20268:	689b      	ldr	r3, [r3, #8]
   2026a:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   2026c:	2bff      	cmp	r3, #255	; 0xff
   2026e:	d0de      	beq.n	2022e <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   20270:	2314      	movs	r3, #20
   20272:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20276:	a90f      	add	r1, sp, #60	; 0x3c
   20278:	4620      	mov	r0, r4
   2027a:	f7fe fcc9 	bl	1ec10 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   2027e:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20280:	2600      	movs	r6, #0
	while (buf) {
   20282:	b11b      	cbz	r3, 2028c <handle_na_input+0x9c>
		bytes += buf->len;
   20284:	899a      	ldrh	r2, [r3, #12]
   20286:	4416      	add	r6, r2
		buf = buf->frags;
   20288:	681b      	ldr	r3, [r3, #0]
   2028a:	e7fa      	b.n	20282 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   2028c:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   2028e:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20290:	e00b      	b.n	202aa <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   20292:	00db      	lsls	r3, r3, #3
   20294:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20296:	4413      	add	r3, r2
   20298:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   2029a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2029e:	4293      	cmp	r3, r2
   202a0:	d9cc      	bls.n	2023c <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   202a2:	a90f      	add	r1, sp, #60	; 0x3c
   202a4:	4620      	mov	r0, r4
   202a6:	f7fe fcb3 	bl	1ec10 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   202aa:	b190      	cbz	r0, 202d2 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   202ac:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   202b0:	4296      	cmp	r6, r2
   202b2:	d90e      	bls.n	202d2 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   202b4:	7843      	ldrb	r3, [r0, #1]
   202b6:	b163      	cbz	r3, 202d2 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   202b8:	7801      	ldrb	r1, [r0, #0]
   202ba:	2902      	cmp	r1, #2
   202bc:	d1e9      	bne.n	20292 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   202be:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   202c2:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   202c6:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   202c8:	4415      	add	r5, r2
   202ca:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   202cc:	3506      	adds	r5, #6
   202ce:	b2ad      	uxth	r5, r5
			break;
   202d0:	e7df      	b.n	20292 <handle_na_input+0xa2>
	return pkt->iface;
   202d2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   202d6:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   202da:	2600      	movs	r6, #0
   202dc:	e003      	b.n	202e6 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   202de:	f1ba 0f00 	cmp.w	sl, #0
   202e2:	d11f      	bne.n	20324 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   202e4:	3601      	adds	r6, #1
   202e6:	2e02      	cmp	r6, #2
   202e8:	dc23      	bgt.n	20332 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   202ea:	236c      	movs	r3, #108	; 0x6c
   202ec:	fb03 8306 	mla	r3, r3, r6, r8
   202f0:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   202f4:	f1ba 0f00 	cmp.w	sl, #0
   202f8:	d0f4      	beq.n	202e4 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   202fa:	236c      	movs	r3, #108	; 0x6c
   202fc:	fb03 8306 	mla	r3, r3, r6, r8
   20300:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   20302:	2b0a      	cmp	r3, #10
   20304:	d1ee      	bne.n	202e4 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   20306:	216c      	movs	r1, #108	; 0x6c
   20308:	fb01 f106 	mul.w	r1, r1, r6
   2030c:	3120      	adds	r1, #32
   2030e:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20310:	2210      	movs	r2, #16
   20312:	4411      	add	r1, r2
   20314:	4648      	mov	r0, r9
   20316:	f009 fec7 	bl	2a0a8 <memcmp>
   2031a:	2800      	cmp	r0, #0
   2031c:	d0df      	beq.n	202de <handle_na_input+0xee>
		return false;
   2031e:	f04f 0a00 	mov.w	sl, #0
   20322:	e7dc      	b.n	202de <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   20324:	236c      	movs	r3, #108	; 0x6c
   20326:	fb03 f306 	mul.w	r3, r3, r6
   2032a:	3320      	adds	r3, #32
   2032c:	4443      	add	r3, r8
   2032e:	330c      	adds	r3, #12
   20330:	e000      	b.n	20334 <handle_na_input+0x144>
	return NULL;
   20332:	2300      	movs	r3, #0
	if (ifaddr) {
   20334:	b17b      	cbz	r3, 20356 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   20336:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   2033a:	2b00      	cmp	r3, #0
   2033c:	f47f af7e 	bne.w	2023c <handle_na_input+0x4c>
   20340:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20342:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   20344:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20348:	429a      	cmp	r2, r3
   2034a:	f43f af77 	beq.w	2023c <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   2034e:	4649      	mov	r1, r9
   20350:	f7fb fa0a 	bl	1b768 <net_if_ipv6_dad_failed>
   20354:	e772      	b.n	2023c <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   20356:	2300      	movs	r3, #0
   20358:	9303      	str	r3, [sp, #12]
   2035a:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   2035c:	1d3a      	adds	r2, r7, #4
   2035e:	6961      	ldr	r1, [r4, #20]
   20360:	485d      	ldr	r0, [pc, #372]	; (204d8 <handle_na_input+0x2e8>)
   20362:	f7ff f999 	bl	1f698 <nbr_lookup>
	if (!nbr) {
   20366:	4606      	mov	r6, r0
   20368:	2800      	cmp	r0, #0
   2036a:	f000 8107 	beq.w	2057c <handle_na_input+0x38c>
	if (tllao_offset) {
   2036e:	b995      	cbnz	r5, 20396 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   20370:	7873      	ldrb	r3, [r6, #1]
   20372:	2bff      	cmp	r3, #255	; 0xff
   20374:	d135      	bne.n	203e2 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   20376:	bb2d      	cbnz	r5, 203c4 <handle_na_input+0x1d4>
			return false;
   20378:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   2037a:	2b00      	cmp	r3, #0
   2037c:	f43f af5e 	beq.w	2023c <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   20380:	4620      	mov	r0, r4
   20382:	f7fd f976 	bl	1d672 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   20386:	4a53      	ldr	r2, [pc, #332]	; (204d4 <handle_na_input+0x2e4>)
   20388:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2038c:	3301      	adds	r3, #1
   2038e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   20392:	2000      	movs	r0, #0
   20394:	e759      	b.n	2024a <handle_na_input+0x5a>
   20396:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   20398:	7d1b      	ldrb	r3, [r3, #20]
   2039a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   2039e:	f10d 020e 	add.w	r2, sp, #14
   203a2:	9200      	str	r2, [sp, #0]
   203a4:	f10d 020a 	add.w	r2, sp, #10
   203a8:	4629      	mov	r1, r5
   203aa:	68a0      	ldr	r0, [r4, #8]
   203ac:	f7fd fadf 	bl	1d96e <net_frag_read>
		if (!frag && pos == 0xffff) {
   203b0:	2800      	cmp	r0, #0
   203b2:	d1dd      	bne.n	20370 <handle_na_input+0x180>
   203b4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   203b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   203bc:	429a      	cmp	r2, r3
   203be:	d1d7      	bne.n	20370 <handle_na_input+0x180>
			return false;
   203c0:	2300      	movs	r3, #0
   203c2:	e7da      	b.n	2037a <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   203c4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   203c8:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   203cc:	aa10      	add	r2, sp, #64	; 0x40
   203ce:	f10d 030e 	add.w	r3, sp, #14
   203d2:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   203d6:	6961      	ldr	r1, [r4, #20]
   203d8:	4630      	mov	r0, r6
   203da:	f7fe ff77 	bl	1f2cc <net_nbr_link>
   203de:	2800      	cmp	r0, #0
   203e0:	d14a      	bne.n	20478 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   203e2:	7870      	ldrb	r0, [r6, #1]
   203e4:	f7fe ffd8 	bl	1f398 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   203e8:	4680      	mov	r8, r0
   203ea:	2800      	cmp	r0, #0
   203ec:	f000 80c8 	beq.w	20580 <handle_na_input+0x390>
	if (tllao_offset) {
   203f0:	2d00      	cmp	r5, #0
   203f2:	d145      	bne.n	20480 <handle_na_input+0x290>
	bool lladdr_changed = false;
   203f4:	2700      	movs	r7, #0
   203f6:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   203f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   203fc:	2b00      	cmp	r3, #0
   203fe:	d155      	bne.n	204ac <handle_na_input+0x2bc>
		if (!tllao_offset) {
   20400:	2d00      	cmp	r5, #0
   20402:	f000 80bf 	beq.w	20584 <handle_na_input+0x394>
		if (lladdr_changed) {
   20406:	b11f      	cbz	r7, 20410 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   20408:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   2040c:	2a06      	cmp	r2, #6
   2040e:	d941      	bls.n	20494 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20410:	a905      	add	r1, sp, #20
   20412:	4620      	mov	r0, r4
   20414:	f7fe fc2e 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   20418:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   2041a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2041e:	d040      	beq.n	204a2 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20420:	2101      	movs	r1, #1
   20422:	4630      	mov	r0, r6
   20424:	f7fe ffc0 	bl	1f3a8 <ipv6_nbr_set_state>
   20428:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   2042a:	2200      	movs	r2, #0
   2042c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   20430:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   20432:	3014      	adds	r0, #20
   20434:	f009 fce8 	bl	29e08 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20438:	4631      	mov	r1, r6
   2043a:	6960      	ldr	r0, [r4, #20]
   2043c:	f7ff fecc 	bl	201d8 <net_ipv6_nbr_set_reachable_timer>
   20440:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20442:	a905      	add	r1, sp, #20
   20444:	4620      	mov	r0, r4
   20446:	f7fe fc15 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   2044a:	7803      	ldrb	r3, [r0, #0]
   2044c:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   2044e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20452:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   20454:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   20456:	2d00      	cmp	r5, #0
   20458:	f000 8098 	beq.w	2058c <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   2045c:	4628      	mov	r0, r5
   2045e:	f7fa fd07 	bl	1ae70 <net_send_data>
   20462:	2800      	cmp	r0, #0
   20464:	f2c0 8086 	blt.w	20574 <handle_na_input+0x384>
   20468:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   2046a:	2200      	movs	r2, #0
   2046c:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   2046e:	4628      	mov	r0, r5
   20470:	f7fd f8ff 	bl	1d672 <net_pkt_unref>
	return true;
   20474:	2301      	movs	r3, #1
   20476:	e780      	b.n	2037a <handle_na_input+0x18a>
			nbr_free(nbr);
   20478:	4630      	mov	r0, r6
   2047a:	f7ff fa53 	bl	1f924 <nbr_free>
   2047e:	e77b      	b.n	20378 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   20480:	7842      	ldrb	r2, [r0, #1]
   20482:	1c81      	adds	r1, r0, #2
   20484:	f10d 000e 	add.w	r0, sp, #14
   20488:	f009 fe0e 	bl	2a0a8 <memcmp>
   2048c:	1c07      	adds	r7, r0, #0
   2048e:	bf18      	it	ne
   20490:	2701      	movne	r7, #1
   20492:	e7b0      	b.n	203f6 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   20494:	f10d 010e 	add.w	r1, sp, #14
   20498:	f108 0002 	add.w	r0, r8, #2
   2049c:	f7df ff10 	bl	2c0 <memcpy>
   204a0:	e7b6      	b.n	20410 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   204a2:	2102      	movs	r1, #2
   204a4:	4630      	mov	r0, r6
   204a6:	f7fe ff7f 	bl	1f3a8 <ipv6_nbr_set_state>
   204aa:	e7c9      	b.n	20440 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   204ac:	a905      	add	r1, sp, #20
   204ae:	4620      	mov	r0, r4
   204b0:	f7fe fbe0 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   204b4:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   204b6:	f013 0f20 	tst.w	r3, #32
   204ba:	d10f      	bne.n	204dc <handle_na_input+0x2ec>
   204bc:	b177      	cbz	r7, 204dc <handle_na_input+0x2ec>
   204be:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   204c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   204c4:	2b01      	cmp	r3, #1
   204c6:	d15f      	bne.n	20588 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   204c8:	2102      	movs	r1, #2
   204ca:	4630      	mov	r0, r6
   204cc:	f7fe ff6c 	bl	1f3a8 <ipv6_nbr_set_state>
		return false;
   204d0:	2300      	movs	r3, #0
   204d2:	e752      	b.n	2037a <handle_na_input+0x18a>
   204d4:	20002a58 	.word	0x20002a58
   204d8:	2000be4c 	.word	0x2000be4c
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   204dc:	a905      	add	r1, sp, #20
   204de:	4620      	mov	r0, r4
   204e0:	f7fe fbc8 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   204e4:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   204e6:	f013 0f20 	tst.w	r3, #32
   204ea:	d018      	beq.n	2051e <handle_na_input+0x32e>
		if (lladdr_changed) {
   204ec:	b14f      	cbz	r7, 20502 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   204ee:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   204f2:	2a06      	cmp	r2, #6
   204f4:	d805      	bhi.n	20502 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   204f6:	f10d 010e 	add.w	r1, sp, #14
   204fa:	f108 0002 	add.w	r0, r8, #2
   204fe:	f7df fedf 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20502:	a905      	add	r1, sp, #20
   20504:	4620      	mov	r0, r4
   20506:	f7fe fbb5 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   2050a:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   2050c:	f013 0f40 	tst.w	r3, #64	; 0x40
   20510:	d11e      	bne.n	20550 <handle_na_input+0x360>
			if (lladdr_changed) {
   20512:	b17f      	cbz	r7, 20534 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   20514:	2102      	movs	r1, #2
   20516:	4630      	mov	r0, r6
   20518:	f7fe ff46 	bl	1f3a8 <ipv6_nbr_set_state>
   2051c:	e00a      	b.n	20534 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2051e:	a905      	add	r1, sp, #20
   20520:	4620      	mov	r0, r4
   20522:	f7fe fba7 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20526:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20528:	f013 0f20 	tst.w	r3, #32
   2052c:	d102      	bne.n	20534 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   2052e:	b10d      	cbz	r5, 20534 <handle_na_input+0x344>
   20530:	2f00      	cmp	r7, #0
   20532:	d0db      	beq.n	204ec <handle_na_input+0x2fc>
   20534:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   20536:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   2053a:	b9b3      	cbnz	r3, 2056a <handle_na_input+0x37a>
   2053c:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2053e:	a905      	add	r1, sp, #20
   20540:	4620      	mov	r0, r4
   20542:	f7fe fb97 	bl	1ec74 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   20546:	7803      	ldrb	r3, [r0, #0]
   20548:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   2054a:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   2054e:	e780      	b.n	20452 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20550:	2101      	movs	r1, #1
   20552:	4630      	mov	r0, r6
   20554:	f7fe ff28 	bl	1f3a8 <ipv6_nbr_set_state>
   20558:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   2055a:	3014      	adds	r0, #20
   2055c:	f009 fc54 	bl	29e08 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20560:	4631      	mov	r1, r6
   20562:	6960      	ldr	r0, [r4, #20]
   20564:	f7ff fe38 	bl	201d8 <net_ipv6_nbr_set_reachable_timer>
   20568:	e7e4      	b.n	20534 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2056a:	a905      	add	r1, sp, #20
   2056c:	4620      	mov	r0, r4
   2056e:	f7fe fb81 	bl	1ec74 <net_icmpv6_get_na_hdr>
   20572:	e7e3      	b.n	2053c <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   20574:	68f0      	ldr	r0, [r6, #12]
   20576:	f7ff f8af 	bl	1f6d8 <nbr_clear_ns_pending>
   2057a:	e778      	b.n	2046e <handle_na_input+0x27e>
		return false;
   2057c:	2300      	movs	r3, #0
   2057e:	e6fc      	b.n	2037a <handle_na_input+0x18a>
		return false;
   20580:	2300      	movs	r3, #0
   20582:	e6fa      	b.n	2037a <handle_na_input+0x18a>
			return false;
   20584:	2300      	movs	r3, #0
   20586:	e6f8      	b.n	2037a <handle_na_input+0x18a>
		return false;
   20588:	2300      	movs	r3, #0
   2058a:	e6f6      	b.n	2037a <handle_na_input+0x18a>
	return true;
   2058c:	2301      	movs	r3, #1
   2058e:	e6f4      	b.n	2037a <handle_na_input+0x18a>

00020590 <net_ipv6_send_ns>:
{
   20590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20594:	b09d      	sub	sp, #116	; 0x74
   20596:	4605      	mov	r5, r0
   20598:	9101      	str	r1, [sp, #4]
   2059a:	4691      	mov	r9, r2
   2059c:	461e      	mov	r6, r3
   2059e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   205a0:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   205a4:	6843      	ldr	r3, [r0, #4]
   205a6:	689b      	ldr	r3, [r3, #8]
   205a8:	4631      	mov	r1, r6
   205aa:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   205ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   205b0:	f7fc ffee 	bl	1d590 <net_pkt_get_reserve_tx>
   205b4:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   205b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   205ba:	f7fd f807 	bl	1d5cc <net_pkt_get_frag>
   205be:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   205c0:	4601      	mov	r1, r0
   205c2:	4620      	mov	r0, r4
   205c4:	f7fd f87f 	bl	1d6c6 <net_pkt_frag_add>
	pkt->iface = iface;
   205c8:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   205ca:	7d6b      	ldrb	r3, [r5, #21]
   205cc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   205d0:	7d6b      	ldrb	r3, [r5, #21]
   205d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   205d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   205da:	220a      	movs	r2, #10
   205dc:	f362 03c6 	bfi	r3, r2, #3, #4
   205e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   205e4:	2328      	movs	r3, #40	; 0x28
   205e6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   205ea:	2500      	movs	r5, #0
   205ec:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   205f0:	68a3      	ldr	r3, [r4, #8]
   205f2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   205f4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   205f8:	461a      	mov	r2, r3
   205fa:	4629      	mov	r1, r5
   205fc:	1ac0      	subs	r0, r0, r3
   205fe:	f009 fde7 	bl	2a1d0 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20602:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20604:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   20608:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   2060a:	7d1b      	ldrb	r3, [r3, #20]
   2060c:	2b06      	cmp	r3, #6
   2060e:	f000 808b 	beq.w	20728 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   20612:	2b08      	cmp	r3, #8
   20614:	f000 8085 	beq.w	20722 <net_ipv6_send_ns+0x192>
	return 0;
   20618:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   2061c:	2287      	movs	r2, #135	; 0x87
   2061e:	f108 0114 	add.w	r1, r8, #20
   20622:	4620      	mov	r0, r4
   20624:	f7ff f951 	bl	1f8ca <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   20628:	f10a 0a08 	add.w	sl, sl, #8
   2062c:	2114      	movs	r1, #20
   2062e:	4650      	mov	r0, sl
   20630:	f7fa fafc 	bl	1ac2c <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   20634:	a903      	add	r1, sp, #12
   20636:	4620      	mov	r0, r4
   20638:	f7fe fa8e 	bl	1eb58 <net_icmpv6_get_ns_hdr>
   2063c:	4605      	mov	r5, r0
	if (!dst) {
   2063e:	2e00      	cmp	r6, #0
   20640:	d075      	beq.n	2072e <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   20642:	68a3      	ldr	r3, [r4, #8]
   20644:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20648:	f10d 0c20 	add.w	ip, sp, #32
   2064c:	6830      	ldr	r0, [r6, #0]
   2064e:	6871      	ldr	r1, [r6, #4]
   20650:	68b2      	ldr	r2, [r6, #8]
   20652:	68f3      	ldr	r3, [r6, #12]
   20654:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20658:	ae08      	add	r6, sp, #32
   2065a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2065c:	f8ce 0018 	str.w	r0, [lr, #24]
   20660:	f8ce 101c 	str.w	r1, [lr, #28]
   20664:	f8ce 2020 	str.w	r2, [lr, #32]
   20668:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   2066c:	ae0c      	add	r6, sp, #48	; 0x30
   2066e:	6838      	ldr	r0, [r7, #0]
   20670:	6879      	ldr	r1, [r7, #4]
   20672:	68ba      	ldr	r2, [r7, #8]
   20674:	68fb      	ldr	r3, [r7, #12]
   20676:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20678:	1d2f      	adds	r7, r5, #4
   2067a:	ae0c      	add	r6, sp, #48	; 0x30
   2067c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2067e:	6068      	str	r0, [r5, #4]
   20680:	6079      	str	r1, [r7, #4]
   20682:	60ba      	str	r2, [r7, #8]
   20684:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   20686:	4629      	mov	r1, r5
   20688:	4620      	mov	r0, r4
   2068a:	f7fe fa89 	bl	1eba0 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   2068e:	f1bb 0f00 	cmp.w	fp, #0
   20692:	d06a      	beq.n	2076a <net_ipv6_send_ns+0x1da>
   20694:	68a3      	ldr	r3, [r4, #8]
   20696:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20698:	f7ff f9ac 	bl	1f9f4 <net_ipv6_unspecified_address>
   2069c:	4603      	mov	r3, r0
   2069e:	ae10      	add	r6, sp, #64	; 0x40
   206a0:	6800      	ldr	r0, [r0, #0]
   206a2:	6859      	ldr	r1, [r3, #4]
   206a4:	689a      	ldr	r2, [r3, #8]
   206a6:	68db      	ldr	r3, [r3, #12]
   206a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   206aa:	ae10      	add	r6, sp, #64	; 0x40
   206ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206ae:	60b8      	str	r0, [r7, #8]
   206b0:	60f9      	str	r1, [r7, #12]
   206b2:	613a      	str	r2, [r7, #16]
   206b4:	617b      	str	r3, [r7, #20]
   206b6:	68a3      	ldr	r3, [r4, #8]
   206b8:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   206ba:	795a      	ldrb	r2, [r3, #5]
   206bc:	eba2 0808 	sub.w	r8, r2, r8
   206c0:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   206c4:	68a1      	ldr	r1, [r4, #8]
   206c6:	4620      	mov	r0, r4
   206c8:	f7fe f88a 	bl	1e7e0 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   206cc:	3504      	adds	r5, #4
   206ce:	462a      	mov	r2, r5
   206d0:	6961      	ldr	r1, [r4, #20]
   206d2:	486f      	ldr	r0, [pc, #444]	; (20890 <net_ipv6_send_ns+0x300>)
   206d4:	f7fe ffe0 	bl	1f698 <nbr_lookup>
	if (!nbr) {
   206d8:	4606      	mov	r6, r0
   206da:	2800      	cmp	r0, #0
   206dc:	f000 80ad 	beq.w	2083a <net_ipv6_send_ns+0x2aa>
	if (pending) {
   206e0:	9801      	ldr	r0, [sp, #4]
   206e2:	b170      	cbz	r0, 20702 <net_ipv6_send_ns+0x172>
   206e4:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   206e6:	682b      	ldr	r3, [r5, #0]
   206e8:	2b00      	cmp	r3, #0
   206ea:	f040 80b1 	bne.w	20850 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   206ee:	f7fc ffb1 	bl	1d654 <net_pkt_ref>
   206f2:	6028      	str	r0, [r5, #0]
   206f4:	68f1      	ldr	r1, [r6, #12]
   206f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   206fa:	313c      	adds	r1, #60	; 0x3c
   206fc:	4865      	ldr	r0, [pc, #404]	; (20894 <net_ipv6_send_ns+0x304>)
   206fe:	f009 fbdd 	bl	29ebc <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   20702:	4620      	mov	r0, r4
   20704:	f7fa fbb4 	bl	1ae70 <net_send_data>
   20708:	2800      	cmp	r0, #0
   2070a:	f2c0 80b0 	blt.w	2086e <net_ipv6_send_ns+0x2de>
   2070e:	4a62      	ldr	r2, [pc, #392]	; (20898 <net_ipv6_send_ns+0x308>)
   20710:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20714:	3301      	adds	r3, #1
   20716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   2071a:	2000      	movs	r0, #0
}
   2071c:	b01d      	add	sp, #116	; 0x74
   2071e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20722:	f04f 0810 	mov.w	r8, #16
   20726:	e779      	b.n	2061c <net_ipv6_send_ns+0x8c>
		return 8;
   20728:	f04f 0808 	mov.w	r8, #8
   2072c:	e776      	b.n	2061c <net_ipv6_send_ns+0x8c>
   2072e:	68a3      	ldr	r3, [r4, #8]
   20730:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   20732:	21ff      	movs	r1, #255	; 0xff
   20734:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   20736:	2202      	movs	r2, #2
   20738:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   2073a:	2200      	movs	r2, #0
   2073c:	769a      	strb	r2, [r3, #26]
   2073e:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   20740:	771a      	strb	r2, [r3, #28]
   20742:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   20744:	779a      	strb	r2, [r3, #30]
   20746:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   20748:	f883 2020 	strb.w	r2, [r3, #32]
   2074c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   20750:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   20754:	2201      	movs	r2, #1
   20756:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   2075a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   2075e:	7b7a      	ldrb	r2, [r7, #13]
   20760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   20764:	89fa      	ldrh	r2, [r7, #14]
   20766:	84da      	strh	r2, [r3, #38]	; 0x26
   20768:	e780      	b.n	2066c <net_ipv6_send_ns+0xdc>
		if (src) {
   2076a:	f1b9 0f00 	cmp.w	r9, #0
   2076e:	d025      	beq.n	207bc <net_ipv6_send_ns+0x22c>
   20770:	68a3      	ldr	r3, [r4, #8]
   20772:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   20776:	ae14      	add	r6, sp, #80	; 0x50
   20778:	f8d9 0000 	ldr.w	r0, [r9]
   2077c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20780:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20784:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20788:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2078a:	ae14      	add	r6, sp, #80	; 0x50
   2078c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2078e:	f8ce 0008 	str.w	r0, [lr, #8]
   20792:	f8ce 100c 	str.w	r1, [lr, #12]
   20796:	f8ce 2010 	str.w	r2, [lr, #16]
   2079a:	f8ce 3014 	str.w	r3, [lr, #20]
   2079e:	68a3      	ldr	r3, [r4, #8]
   207a0:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   207a2:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   207a4:	b9fa      	cbnz	r2, 207e6 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   207a6:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   207a8:	2a00      	cmp	r2, #0
   207aa:	d140      	bne.n	2082e <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   207ac:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   207ae:	2a00      	cmp	r2, #0
   207b0:	d13f      	bne.n	20832 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   207b2:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   207b4:	2b00      	cmp	r3, #0
   207b6:	d03e      	beq.n	20836 <net_ipv6_send_ns+0x2a6>
   207b8:	2300      	movs	r3, #0
   207ba:	e015      	b.n	207e8 <net_ipv6_send_ns+0x258>
   207bc:	68a3      	ldr	r3, [r4, #8]
   207be:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   207c0:	f107 0118 	add.w	r1, r7, #24
   207c4:	6960      	ldr	r0, [r4, #20]
   207c6:	f7fb fab9 	bl	1bd3c <net_if_ipv6_select_src_addr>
   207ca:	4603      	mov	r3, r0
   207cc:	ae18      	add	r6, sp, #96	; 0x60
   207ce:	6800      	ldr	r0, [r0, #0]
   207d0:	6859      	ldr	r1, [r3, #4]
   207d2:	689a      	ldr	r2, [r3, #8]
   207d4:	68db      	ldr	r3, [r3, #12]
   207d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   207d8:	ae18      	add	r6, sp, #96	; 0x60
   207da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   207dc:	60b8      	str	r0, [r7, #8]
   207de:	60f9      	str	r1, [r7, #12]
   207e0:	613a      	str	r2, [r7, #16]
   207e2:	617b      	str	r3, [r7, #20]
   207e4:	e7db      	b.n	2079e <net_ipv6_send_ns+0x20e>
   207e6:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   207e8:	bbab      	cbnz	r3, 20856 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   207ea:	4641      	mov	r1, r8
   207ec:	4650      	mov	r0, sl
   207ee:	f7fa fa1d 	bl	1ac2c <net_buf_simple_add>
	return pkt->iface;
   207f2:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   207f6:	4620      	mov	r0, r4
   207f8:	f7fd fa14 	bl	1dc24 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   207fc:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20800:	2301      	movs	r3, #1
   20802:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20804:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   20808:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   2080a:	f899 2014 	ldrb.w	r2, [r9, #20]
   2080e:	f8d9 1010 	ldr.w	r1, [r9, #16]
   20812:	301a      	adds	r0, #26
   20814:	f7df fd54 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20818:	f899 2014 	ldrb.w	r2, [r9, #20]
   2081c:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2081e:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20822:	3a02      	subs	r2, #2
   20824:	2100      	movs	r1, #0
   20826:	4430      	add	r0, r6
   20828:	f009 fcd2 	bl	2a1d0 <memset>
   2082c:	e74a      	b.n	206c4 <net_ipv6_send_ns+0x134>
   2082e:	2300      	movs	r3, #0
   20830:	e7da      	b.n	207e8 <net_ipv6_send_ns+0x258>
   20832:	2300      	movs	r3, #0
   20834:	e7d8      	b.n	207e8 <net_ipv6_send_ns+0x258>
   20836:	2301      	movs	r3, #1
   20838:	e7d6      	b.n	207e8 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   2083a:	2300      	movs	r3, #0
   2083c:	461a      	mov	r2, r3
   2083e:	4629      	mov	r1, r5
   20840:	6960      	ldr	r0, [r4, #20]
   20842:	f7fe ffab 	bl	1f79c <nbr_new>
		if (!nbr) {
   20846:	4606      	mov	r6, r0
   20848:	2800      	cmp	r0, #0
   2084a:	f47f af49 	bne.w	206e0 <net_ipv6_send_ns+0x150>
   2084e:	e002      	b.n	20856 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   20850:	9801      	ldr	r0, [sp, #4]
   20852:	f7fc ff0e 	bl	1d672 <net_pkt_unref>
	net_pkt_unref(pkt);
   20856:	4620      	mov	r0, r4
   20858:	f7fc ff0b 	bl	1d672 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   2085c:	4a0e      	ldr	r2, [pc, #56]	; (20898 <net_ipv6_send_ns+0x308>)
   2085e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20862:	3301      	adds	r3, #1
   20864:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20868:	f06f 0015 	mvn.w	r0, #21
   2086c:	e756      	b.n	2071c <net_ipv6_send_ns+0x18c>
		if (pending) {
   2086e:	9b01      	ldr	r3, [sp, #4]
   20870:	2b00      	cmp	r3, #0
   20872:	d0f0      	beq.n	20856 <net_ipv6_send_ns+0x2c6>
   20874:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   20876:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2087a:	f009 fac5 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   2087e:	6828      	ldr	r0, [r5, #0]
   20880:	2800      	cmp	r0, #0
   20882:	d0e8      	beq.n	20856 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   20884:	f7fc fef5 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   20888:	2300      	movs	r3, #0
   2088a:	602b      	str	r3, [r5, #0]
   2088c:	e7e3      	b.n	20856 <net_ipv6_send_ns+0x2c6>
   2088e:	bf00      	nop
   20890:	2000be4c 	.word	0x2000be4c
   20894:	20002b78 	.word	0x20002b78
   20898:	20002a58 	.word	0x20002a58

0002089c <net_ipv6_nbr_add>:
{
   2089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   208a0:	b083      	sub	sp, #12
   208a2:	4605      	mov	r5, r0
   208a4:	460e      	mov	r6, r1
   208a6:	4617      	mov	r7, r2
   208a8:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   208aa:	460a      	mov	r2, r1
   208ac:	4601      	mov	r1, r0
   208ae:	482c      	ldr	r0, [pc, #176]	; (20960 <net_ipv6_nbr_add+0xc4>)
   208b0:	f7fe fef2 	bl	1f698 <nbr_lookup>
	if (!nbr) {
   208b4:	4604      	mov	r4, r0
   208b6:	b180      	cbz	r0, 208da <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   208b8:	463a      	mov	r2, r7
   208ba:	4629      	mov	r1, r5
   208bc:	4620      	mov	r0, r4
   208be:	f7fe fd05 	bl	1f2cc <net_nbr_link>
   208c2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   208c6:	d013      	beq.n	208f0 <net_ipv6_nbr_add+0x54>
   208c8:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   208ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   208ce:	2b00      	cmp	r3, #0
   208d0:	d03c      	beq.n	2094c <net_ipv6_nbr_add+0xb0>
}
   208d2:	4620      	mov	r0, r4
   208d4:	b003      	add	sp, #12
   208d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   208da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   208de:	4642      	mov	r2, r8
   208e0:	4631      	mov	r1, r6
   208e2:	4628      	mov	r0, r5
   208e4:	f7fe ff5a 	bl	1f79c <nbr_new>
		if (!nbr) {
   208e8:	4604      	mov	r4, r0
   208ea:	2800      	cmp	r0, #0
   208ec:	d1e4      	bne.n	208b8 <net_ipv6_nbr_add+0x1c>
   208ee:	e7f0      	b.n	208d2 <net_ipv6_nbr_add+0x36>
   208f0:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   208f2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   208f6:	2b05      	cmp	r3, #5
   208f8:	d0e6      	beq.n	208c8 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   208fa:	7860      	ldrb	r0, [r4, #1]
   208fc:	f7fe fd4c 	bl	1f398 <net_nbr_get_lladdr>
   20900:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   20902:	f100 0902 	add.w	r9, r0, #2
   20906:	793a      	ldrb	r2, [r7, #4]
   20908:	6839      	ldr	r1, [r7, #0]
   2090a:	4648      	mov	r0, r9
   2090c:	f009 fbcc 	bl	2a0a8 <memcmp>
   20910:	b190      	cbz	r0, 20938 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   20912:	6839      	ldr	r1, [r7, #0]
   20914:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   20916:	f1b8 0f00 	cmp.w	r8, #0
   2091a:	d002      	beq.n	20922 <net_ipv6_nbr_add+0x86>
   2091c:	b109      	cbz	r1, 20922 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   2091e:	2a06      	cmp	r2, #6
   20920:	d904      	bls.n	2092c <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20922:	2102      	movs	r1, #2
   20924:	4620      	mov	r0, r4
   20926:	f7fe fd3f 	bl	1f3a8 <ipv6_nbr_set_state>
   2092a:	e7cd      	b.n	208c8 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   2092c:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   20930:	4648      	mov	r0, r9
   20932:	f7df fcc5 	bl	2c0 <memcpy>
   20936:	e7f4      	b.n	20922 <net_ipv6_nbr_add+0x86>
   20938:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   2093a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2093e:	2b00      	cmp	r3, #0
   20940:	d1c2      	bne.n	208c8 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20942:	2102      	movs	r1, #2
   20944:	4620      	mov	r0, r4
   20946:	f7fe fd2f 	bl	1f3a8 <ipv6_nbr_set_state>
   2094a:	e7bd      	b.n	208c8 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   2094c:	2100      	movs	r1, #0
   2094e:	9101      	str	r1, [sp, #4]
   20950:	9600      	str	r6, [sp, #0]
   20952:	460b      	mov	r3, r1
   20954:	460a      	mov	r2, r1
   20956:	4628      	mov	r0, r5
   20958:	f7ff fe1a 	bl	20590 <net_ipv6_send_ns>
   2095c:	e7b9      	b.n	208d2 <net_ipv6_nbr_add+0x36>
   2095e:	bf00      	nop
   20960:	2000be4c 	.word	0x2000be4c

00020964 <handle_ra_input>:
{
   20964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20968:	b098      	sub	sp, #96	; 0x60
   2096a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   2096c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2096e:	2200      	movs	r2, #0
   20970:	e002      	b.n	20978 <handle_ra_input+0x14>
		bytes += buf->len;
   20972:	8999      	ldrh	r1, [r3, #12]
   20974:	440a      	add	r2, r1
		buf = buf->frags;
   20976:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20978:	2b00      	cmp	r3, #0
   2097a:	d1fa      	bne.n	20972 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2097c:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   2097e:	49b7      	ldr	r1, [pc, #732]	; (20c5c <handle_ra_input+0x2f8>)
   20980:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   20984:	3301      	adds	r3, #1
   20986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2098a:	2a39      	cmp	r2, #57	; 0x39
   2098c:	d904      	bls.n	20998 <handle_ra_input+0x34>
	return pkt->frags->data;
   2098e:	68b3      	ldr	r3, [r6, #8]
   20990:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20992:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20994:	2aff      	cmp	r2, #255	; 0xff
   20996:	d010      	beq.n	209ba <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20998:	a907      	add	r1, sp, #28
   2099a:	4630      	mov	r0, r6
   2099c:	f7fd ff6d 	bl	1e87a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   209a0:	b108      	cbz	r0, 209a6 <handle_ra_input+0x42>
   209a2:	7843      	ldrb	r3, [r0, #1]
   209a4:	b173      	cbz	r3, 209c4 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   209a6:	4aad      	ldr	r2, [pc, #692]	; (20c5c <handle_ra_input+0x2f8>)
   209a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   209ac:	3301      	adds	r3, #1
   209ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   209b2:	2002      	movs	r0, #2
}
   209b4:	b018      	add	sp, #96	; 0x60
   209b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   209ba:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   209bc:	f248 03fe 	movw	r3, #33022	; 0x80fe
   209c0:	429a      	cmp	r2, r3
   209c2:	d1e9      	bne.n	20998 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   209c4:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   209c8:	312c      	adds	r1, #44	; 0x2c
   209ca:	ac18      	add	r4, sp, #96	; 0x60
   209cc:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   209d0:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   209d4:	9300      	str	r3, [sp, #0]
   209d6:	2301      	movs	r3, #1
   209d8:	4622      	mov	r2, r4
   209da:	68b0      	ldr	r0, [r6, #8]
   209dc:	f7fc ffc7 	bl	1d96e <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   209e0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   209e4:	2300      	movs	r3, #0
   209e6:	9300      	str	r3, [sp, #0]
   209e8:	2301      	movs	r3, #1
   209ea:	4622      	mov	r2, r4
   209ec:	f7fc ffbf 	bl	1d96e <net_frag_read>
	if (!frag) {
   209f0:	4604      	mov	r4, r0
   209f2:	2800      	cmp	r0, #0
   209f4:	d0d7      	beq.n	209a6 <handle_ra_input+0x42>
	if (hop_limit) {
   209f6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   209fa:	b113      	cbz	r3, 20a02 <handle_ra_input+0x9e>
	return pkt->iface;
   209fc:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   209fe:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   20a02:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   20a06:	aa11      	add	r2, sp, #68	; 0x44
   20a08:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20a0c:	4620      	mov	r0, r4
   20a0e:	f7fc fff6 	bl	1d9fe <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   20a12:	ab13      	add	r3, sp, #76	; 0x4c
   20a14:	aa11      	add	r2, sp, #68	; 0x44
   20a16:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20a1a:	f7fd f801 	bl	1da20 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   20a1e:	ab12      	add	r3, sp, #72	; 0x48
   20a20:	aa11      	add	r2, sp, #68	; 0x44
   20a22:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20a26:	f7fc fffb 	bl	1da20 <net_frag_read_be32>
	if (!frag) {
   20a2a:	4605      	mov	r5, r0
   20a2c:	2800      	cmp	r0, #0
   20a2e:	d0ba      	beq.n	209a6 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   20a30:	a915      	add	r1, sp, #84	; 0x54
   20a32:	4630      	mov	r0, r6
   20a34:	f7fe f99a 	bl	1ed6c <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   20a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20a3a:	b16b      	cbz	r3, 20a58 <handle_ra_input+0xf4>
   20a3c:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   20a3e:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   20a42:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   20a44:	428c      	cmp	r4, r1
   20a46:	d007      	beq.n	20a58 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   20a48:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   20a4c:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   20a4e:	4620      	mov	r0, r4
   20a50:	f7fb fa70 	bl	1bf34 <net_if_ipv6_calc_reachable_time>
   20a54:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20a5a:	b113      	cbz	r3, 20a62 <handle_ra_input+0xfe>
   20a5c:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20a5e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   20a62:	2700      	movs	r7, #0
   20a64:	e060      	b.n	20b28 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   20a66:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20a6a:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20a6e:	2306      	movs	r3, #6
   20a70:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   20a74:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20a78:	f10d 031e 	add.w	r3, sp, #30
   20a7c:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20a7e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   20a82:	2b05      	cmp	r3, #5
   20a84:	d801      	bhi.n	20a8a <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   20a86:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20a8a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20a8e:	f10d 021e 	add.w	r2, sp, #30
   20a92:	9200      	str	r2, [sp, #0]
   20a94:	aa11      	add	r2, sp, #68	; 0x44
   20a96:	4641      	mov	r1, r8
   20a98:	4628      	mov	r0, r5
   20a9a:	f7fc ff68 	bl	1d96e <net_frag_read>
	if (!frag && offset) {
   20a9e:	4605      	mov	r5, r0
   20aa0:	b318      	cbz	r0, 20aea <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20aa2:	00e3      	lsls	r3, r4, #3
   20aa4:	b2db      	uxtb	r3, r3
   20aa6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20aaa:	1a9b      	subs	r3, r3, r2
   20aac:	b2db      	uxtb	r3, r3
   20aae:	3b02      	subs	r3, #2
	if (padding) {
   20ab0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20ab4:	d009      	beq.n	20aca <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20ab6:	aa18      	add	r2, sp, #96	; 0x60
   20ab8:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20abc:	2000      	movs	r0, #0
   20abe:	9000      	str	r0, [sp, #0]
   20ac0:	4628      	mov	r0, r5
   20ac2:	f7fc ff54 	bl	1d96e <net_frag_read>
		if (!frag && *pos) {
   20ac6:	4605      	mov	r5, r0
   20ac8:	b198      	cbz	r0, 20af2 <handle_ra_input+0x18e>
	return pkt->frags->data;
   20aca:	68b3      	ldr	r3, [r6, #8]
   20acc:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20ace:	2302      	movs	r3, #2
   20ad0:	9300      	str	r3, [sp, #0]
   20ad2:	2301      	movs	r3, #1
   20ad4:	aa03      	add	r2, sp, #12
   20ad6:	3108      	adds	r1, #8
   20ad8:	6970      	ldr	r0, [r6, #20]
   20ada:	f7ff fedf 	bl	2089c <net_ipv6_nbr_add>
   20ade:	4607      	mov	r7, r0
			if (!frag && offset) {
   20ae0:	bb15      	cbnz	r5, 20b28 <handle_ra_input+0x1c4>
   20ae2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20ae6:	b1fb      	cbz	r3, 20b28 <handle_ra_input+0x1c4>
   20ae8:	e75d      	b.n	209a6 <handle_ra_input+0x42>
	if (!frag && offset) {
   20aea:	f1b8 0f00 	cmp.w	r8, #0
   20aee:	d0d8      	beq.n	20aa2 <handle_ra_input+0x13e>
   20af0:	e7f6      	b.n	20ae0 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20af2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20af6:	2b00      	cmp	r3, #0
   20af8:	d0e7      	beq.n	20aca <handle_ra_input+0x166>
   20afa:	e7f1      	b.n	20ae0 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20afc:	ac18      	add	r4, sp, #96	; 0x60
   20afe:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20b02:	2300      	movs	r3, #0
   20b04:	9300      	str	r3, [sp, #0]
   20b06:	2302      	movs	r3, #2
   20b08:	4622      	mov	r2, r4
   20b0a:	f7fc ff30 	bl	1d96e <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20b0e:	ab0f      	add	r3, sp, #60	; 0x3c
   20b10:	4622      	mov	r2, r4
   20b12:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b16:	f7fc ff83 	bl	1da20 <net_frag_read_be32>
			if (!frag && offset) {
   20b1a:	4605      	mov	r5, r0
   20b1c:	2800      	cmp	r0, #0
   20b1e:	d03b      	beq.n	20b98 <handle_ra_input+0x234>
	return pkt->iface;
   20b20:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20b22:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20b26:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20b28:	2d00      	cmp	r5, #0
   20b2a:	f000 8170 	beq.w	20e0e <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20b2e:	ac18      	add	r4, sp, #96	; 0x60
   20b30:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   20b34:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20b38:	9300      	str	r3, [sp, #0]
   20b3a:	2301      	movs	r3, #1
   20b3c:	4622      	mov	r2, r4
   20b3e:	4628      	mov	r0, r5
   20b40:	f7fc ff15 	bl	1d96e <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   20b44:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b48:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20b4c:	9300      	str	r3, [sp, #0]
   20b4e:	2301      	movs	r3, #1
   20b50:	4622      	mov	r2, r4
   20b52:	f7fc ff0c 	bl	1d96e <net_frag_read>
		if (!frag) {
   20b56:	4605      	mov	r5, r0
   20b58:	2800      	cmp	r0, #0
   20b5a:	f43f af24 	beq.w	209a6 <handle_ra_input+0x42>
		switch (type) {
   20b5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   20b62:	2b03      	cmp	r3, #3
   20b64:	d01d      	beq.n	20ba2 <handle_ra_input+0x23e>
   20b66:	2b05      	cmp	r3, #5
   20b68:	d0c8      	beq.n	20afc <handle_ra_input+0x198>
   20b6a:	2b01      	cmp	r3, #1
   20b6c:	f43f af7b 	beq.w	20a66 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20b70:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   20b74:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20b78:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20b7a:	3b02      	subs	r3, #2
   20b7c:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20b7e:	2200      	movs	r2, #0
   20b80:	9200      	str	r2, [sp, #0]
   20b82:	aa11      	add	r2, sp, #68	; 0x44
   20b84:	f7fc fef3 	bl	1d96e <net_frag_read>
			if (!frag && offset) {
   20b88:	4605      	mov	r5, r0
   20b8a:	2800      	cmp	r0, #0
   20b8c:	d1cc      	bne.n	20b28 <handle_ra_input+0x1c4>
   20b8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20b92:	2b00      	cmp	r3, #0
   20b94:	d0c8      	beq.n	20b28 <handle_ra_input+0x1c4>
   20b96:	e706      	b.n	209a6 <handle_ra_input+0x42>
			if (!frag && offset) {
   20b98:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20b9c:	2b00      	cmp	r3, #0
   20b9e:	d0bf      	beq.n	20b20 <handle_ra_input+0x1bc>
   20ba0:	e701      	b.n	209a6 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20ba2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20ba6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20baa:	2203      	movs	r2, #3
   20bac:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20bb0:	4093      	lsls	r3, r2
   20bb2:	b2db      	uxtb	r3, r3
   20bb4:	3b02      	subs	r3, #2
   20bb6:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20bba:	f10d 031e 	add.w	r3, sp, #30
   20bbe:	9300      	str	r3, [sp, #0]
   20bc0:	2301      	movs	r3, #1
   20bc2:	aa11      	add	r2, sp, #68	; 0x44
   20bc4:	f7fc fed3 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20bc8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bcc:	f10d 031f 	add.w	r3, sp, #31
   20bd0:	9300      	str	r3, [sp, #0]
   20bd2:	2301      	movs	r3, #1
   20bd4:	aa11      	add	r2, sp, #68	; 0x44
   20bd6:	f7fc feca 	bl	1d96e <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20bda:	ab08      	add	r3, sp, #32
   20bdc:	aa11      	add	r2, sp, #68	; 0x44
   20bde:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20be2:	f7fc ff1d 	bl	1da20 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20be6:	ab09      	add	r3, sp, #36	; 0x24
   20be8:	aa11      	add	r2, sp, #68	; 0x44
   20bea:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bee:	f7fc ff17 	bl	1da20 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20bf2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bf6:	2300      	movs	r3, #0
   20bf8:	9300      	str	r3, [sp, #0]
   20bfa:	2304      	movs	r3, #4
   20bfc:	aa11      	add	r2, sp, #68	; 0x44
   20bfe:	f7fc feb6 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20c02:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20c06:	ab0b      	add	r3, sp, #44	; 0x2c
   20c08:	9300      	str	r3, [sp, #0]
   20c0a:	2310      	movs	r3, #16
   20c0c:	aa11      	add	r2, sp, #68	; 0x44
   20c0e:	f7fc feae 	bl	1d96e <net_frag_read>
	if (!frag && *pos) {
   20c12:	4605      	mov	r5, r0
   20c14:	b320      	cbz	r0, 20c60 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20c18:	9a08      	ldr	r2, [sp, #32]
   20c1a:	429a      	cmp	r2, r3
   20c1c:	d314      	bcc.n	20c48 <handle_ra_input+0x2e4>
   20c1e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20c22:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20c26:	429a      	cmp	r2, r3
   20c28:	d00e      	beq.n	20c48 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20c2a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20c2e:	2b00      	cmp	r3, #0
   20c30:	db1b      	blt.n	20c6a <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20c32:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20c36:	f013 0f40 	tst.w	r3, #64	; 0x40
   20c3a:	d005      	beq.n	20c48 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20c3c:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20c3e:	b11b      	cbz	r3, 20c48 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20c40:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   20c44:	2b40      	cmp	r3, #64	; 0x40
   20c46:	d03e      	beq.n	20cc6 <handle_ra_input+0x362>
			if (!frag && offset) {
   20c48:	2d00      	cmp	r5, #0
   20c4a:	f47f af6d 	bne.w	20b28 <handle_ra_input+0x1c4>
   20c4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c52:	2b00      	cmp	r3, #0
   20c54:	f43f af68 	beq.w	20b28 <handle_ra_input+0x1c4>
   20c58:	e6a5      	b.n	209a6 <handle_ra_input+0x42>
   20c5a:	bf00      	nop
   20c5c:	20002a58 	.word	0x20002a58
	if (!frag && *pos) {
   20c60:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c64:	2b00      	cmp	r3, #0
   20c66:	d0d6      	beq.n	20c16 <handle_ra_input+0x2b2>
   20c68:	e7ee      	b.n	20c48 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20c6a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20c6e:	a90b      	add	r1, sp, #44	; 0x2c
   20c70:	6970      	ldr	r0, [r6, #20]
   20c72:	f7fa fe3f 	bl	1b8f4 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   20c76:	4603      	mov	r3, r0
   20c78:	b160      	cbz	r0, 20c94 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20c7a:	9a08      	ldr	r2, [sp, #32]
   20c7c:	b1ba      	cbz	r2, 20cae <handle_ra_input+0x34a>
   20c7e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20c82:	d01c      	beq.n	20cbe <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   20c84:	2200      	movs	r2, #0
   20c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20c8a:	9908      	ldr	r1, [sp, #32]
   20c8c:	4618      	mov	r0, r3
   20c8e:	f7fa fee3 	bl	1ba58 <net_if_ipv6_prefix_set_timer>
   20c92:	e7ce      	b.n	20c32 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20c94:	9b08      	ldr	r3, [sp, #32]
   20c96:	2b00      	cmp	r3, #0
   20c98:	d0cb      	beq.n	20c32 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20c9a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20c9e:	a90b      	add	r1, sp, #44	; 0x2c
   20ca0:	6970      	ldr	r0, [r6, #20]
   20ca2:	f7fa fdf7 	bl	1b894 <net_if_ipv6_prefix_add>
		if (prefix) {
   20ca6:	4603      	mov	r3, r0
   20ca8:	2800      	cmp	r0, #0
   20caa:	d1e6      	bne.n	20c7a <handle_ra_input+0x316>
   20cac:	e7c1      	b.n	20c32 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20cae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20cb2:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20cb6:	6970      	ldr	r0, [r6, #20]
   20cb8:	f7fa feea 	bl	1ba90 <net_if_ipv6_prefix_rm>
   20cbc:	e7b9      	b.n	20c32 <handle_ra_input+0x2ce>
   20cbe:	2201      	movs	r2, #1
   20cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20cc4:	e7b5      	b.n	20c32 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20cc6:	2300      	movs	r3, #0
   20cc8:	9305      	str	r3, [sp, #20]
   20cca:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20ccc:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20cce:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20cd2:	22fe      	movs	r2, #254	; 0xfe
   20cd4:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20cd8:	2280      	movs	r2, #128	; 0x80
   20cda:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20cde:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20ce2:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20ce4:	f898 2004 	ldrb.w	r2, [r8, #4]
   20ce8:	2a06      	cmp	r2, #6
   20cea:	d032      	beq.n	20d52 <handle_ra_input+0x3ee>
   20cec:	2a08      	cmp	r2, #8
   20cee:	d058      	beq.n	20da2 <handle_ra_input+0x43e>
   20cf0:	2a02      	cmp	r2, #2
   20cf2:	d018      	beq.n	20d26 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20cf4:	2208      	movs	r2, #8
   20cf6:	a90b      	add	r1, sp, #44	; 0x2c
   20cf8:	a803      	add	r0, sp, #12
   20cfa:	f7df fae1 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20cfe:	2100      	movs	r1, #0
   20d00:	a803      	add	r0, sp, #12
   20d02:	f7fa fb03 	bl	1b30c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20d06:	4604      	mov	r4, r0
   20d08:	b118      	cbz	r0, 20d12 <handle_ra_input+0x3ae>
   20d0a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20d0e:	2b01      	cmp	r3, #1
   20d10:	d052      	beq.n	20db8 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20d12:	9b08      	ldr	r3, [sp, #32]
   20d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20d18:	d072      	beq.n	20e00 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20d1a:	2201      	movs	r2, #1
   20d1c:	a903      	add	r1, sp, #12
   20d1e:	6970      	ldr	r0, [r6, #20]
   20d20:	f7fa fb6a 	bl	1b3f8 <net_if_ipv6_addr_add>
   20d24:	e790      	b.n	20c48 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20d26:	f898 3005 	ldrb.w	r3, [r8, #5]
   20d2a:	2b01      	cmp	r3, #1
   20d2c:	d1e2      	bne.n	20cf4 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20d2e:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20d30:	22ff      	movs	r2, #255	; 0xff
   20d32:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   20d36:	22fe      	movs	r2, #254	; 0xfe
   20d38:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20d3c:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20d40:	6923      	ldr	r3, [r4, #16]
   20d42:	781b      	ldrb	r3, [r3, #0]
   20d44:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20d48:	6923      	ldr	r3, [r4, #16]
   20d4a:	785b      	ldrb	r3, [r3, #1]
   20d4c:	f88d 301b 	strb.w	r3, [sp, #27]
   20d50:	e7d0      	b.n	20cf4 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20d52:	2203      	movs	r2, #3
   20d54:	6921      	ldr	r1, [r4, #16]
   20d56:	a805      	add	r0, sp, #20
   20d58:	f7df fab2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20d5c:	23ff      	movs	r3, #255	; 0xff
   20d5e:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   20d62:	23fe      	movs	r3, #254	; 0xfe
   20d64:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20d68:	6921      	ldr	r1, [r4, #16]
   20d6a:	2203      	movs	r2, #3
   20d6c:	4411      	add	r1, r2
   20d6e:	f10d 0019 	add.w	r0, sp, #25
   20d72:	f7df faa5 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   20d76:	f898 3005 	ldrb.w	r3, [r8, #5]
   20d7a:	2b02      	cmp	r3, #2
   20d7c:	d00a      	beq.n	20d94 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20d7e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20d82:	2b03      	cmp	r3, #3
   20d84:	d1b6      	bne.n	20cf4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20d86:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20d8a:	f083 0302 	eor.w	r3, r3, #2
   20d8e:	f88d 3014 	strb.w	r3, [sp, #20]
   20d92:	e7af      	b.n	20cf4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20d94:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20d98:	f083 0302 	eor.w	r3, r3, #2
   20d9c:	f88d 3014 	strb.w	r3, [sp, #20]
   20da0:	e7ed      	b.n	20d7e <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20da2:	6921      	ldr	r1, [r4, #16]
   20da4:	a805      	add	r0, sp, #20
   20da6:	f7df fa8b 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20daa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20dae:	f083 0302 	eor.w	r3, r3, #2
   20db2:	f88d 3014 	strb.w	r3, [sp, #20]
   20db6:	e79d      	b.n	20cf4 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20dbc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20dc0:	d015      	beq.n	20dee <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20dc2:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20dc6:	d80a      	bhi.n	20dde <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20dc8:	3020      	adds	r0, #32
   20dca:	f008 ff79 	bl	29cc0 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20dce:	4a30      	ldr	r2, [pc, #192]	; (20e90 <handle_ra_input+0x52c>)
   20dd0:	fb82 3200 	smull	r3, r2, r2, r0
   20dd4:	17c3      	asrs	r3, r0, #31
   20dd6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20dda:	4598      	cmp	r8, r3
   20ddc:	d90a      	bls.n	20df4 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20dde:	9908      	ldr	r1, [sp, #32]
   20de0:	4620      	mov	r0, r4
   20de2:	f7fa fafb 	bl	1b3dc <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20de6:	2300      	movs	r3, #0
   20de8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20dec:	e72c      	b.n	20c48 <handle_ra_input+0x2e4>
   20dee:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20df2:	e729      	b.n	20c48 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20df4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20df8:	4620      	mov	r0, r4
   20dfa:	f7fa faef 	bl	1b3dc <net_if_ipv6_addr_update_lifetime>
   20dfe:	e7f2      	b.n	20de6 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20e00:	2300      	movs	r3, #0
   20e02:	2201      	movs	r2, #1
   20e04:	a903      	add	r1, sp, #12
   20e06:	6970      	ldr	r0, [r6, #20]
   20e08:	f7fa faf6 	bl	1b3f8 <net_if_ipv6_addr_add>
   20e0c:	e71c      	b.n	20c48 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20e0e:	68b3      	ldr	r3, [r6, #8]
   20e10:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20e12:	3108      	adds	r1, #8
   20e14:	6970      	ldr	r0, [r6, #20]
   20e16:	f7fa fe7b 	bl	1bb10 <net_if_ipv6_router_lookup>
	if (router) {
   20e1a:	4603      	mov	r3, r0
   20e1c:	b350      	cbz	r0, 20e74 <handle_ra_input+0x510>
		if (!router_lifetime) {
   20e1e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   20e22:	b321      	cbz	r1, 20e6e <handle_ra_input+0x50a>
			if (nbr) {
   20e24:	b11f      	cbz	r7, 20e2e <handle_ra_input+0x4ca>
   20e26:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20e28:	2001      	movs	r0, #1
   20e2a:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   20e2e:	4618      	mov	r0, r3
   20e30:	f7fa fec6 	bl	1bbc0 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   20e34:	b18f      	cbz	r7, 20e5a <handle_ra_input+0x4f6>
   20e36:	68fb      	ldr	r3, [r7, #12]
   20e38:	6818      	ldr	r0, [r3, #0]
   20e3a:	b170      	cbz	r0, 20e5a <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20e3c:	f7fa f818 	bl	1ae70 <net_send_data>
   20e40:	2800      	cmp	r0, #0
   20e42:	db20      	blt.n	20e86 <handle_ra_input+0x522>
   20e44:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   20e46:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20e4a:	f008 ffdd 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   20e4e:	6820      	ldr	r0, [r4, #0]
   20e50:	b118      	cbz	r0, 20e5a <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   20e52:	f7fc fc0e 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   20e56:	2300      	movs	r3, #0
   20e58:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20e5a:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20e5c:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20e60:	f008 ffd2 	bl	29e08 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   20e64:	4630      	mov	r0, r6
   20e66:	f7fc fc04 	bl	1d672 <net_pkt_unref>
	return NET_OK;
   20e6a:	2000      	movs	r0, #0
   20e6c:	e5a2      	b.n	209b4 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20e6e:	f7fa ff0b 	bl	1bc88 <net_if_ipv6_router_rm>
   20e72:	e7df      	b.n	20e34 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   20e74:	68b3      	ldr	r3, [r6, #8]
   20e76:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20e78:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20e7c:	3108      	adds	r1, #8
   20e7e:	6970      	ldr	r0, [r6, #20]
   20e80:	f7fa feaa 	bl	1bbd8 <net_if_ipv6_router_add>
   20e84:	e7d6      	b.n	20e34 <handle_ra_input+0x4d0>
   20e86:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20e88:	6818      	ldr	r0, [r3, #0]
   20e8a:	f7fc fbf2 	bl	1d672 <net_pkt_unref>
   20e8e:	e7d9      	b.n	20e44 <handle_ra_input+0x4e0>
   20e90:	10624dd3 	.word	0x10624dd3

00020e94 <handle_ns_input>:
{
   20e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e98:	b0a5      	sub	sp, #148	; 0x94
   20e9a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20e9c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20e9e:	2200      	movs	r2, #0
   20ea0:	e002      	b.n	20ea8 <handle_ns_input+0x14>
		bytes += buf->len;
   20ea2:	8999      	ldrh	r1, [r3, #12]
   20ea4:	440a      	add	r2, r1
		buf = buf->frags;
   20ea6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20ea8:	2b00      	cmp	r3, #0
   20eaa:	d1fa      	bne.n	20ea2 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20eac:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   20eae:	a90a      	add	r1, sp, #40	; 0x28
   20eb0:	4620      	mov	r0, r4
   20eb2:	f7fd fe51 	bl	1eb58 <net_icmpv6_get_ns_hdr>
   20eb6:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20eb8:	4aa6      	ldr	r2, [pc, #664]	; (21154 <handle_ns_input+0x2c0>)
   20eba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20ebe:	3301      	adds	r3, #1
   20ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20ec4:	2d3f      	cmp	r5, #63	; 0x3f
   20ec6:	d904      	bls.n	20ed2 <handle_ns_input+0x3e>
	return pkt->frags->data;
   20ec8:	68a3      	ldr	r3, [r4, #8]
   20eca:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   20ecc:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   20ece:	2bff      	cmp	r3, #255	; 0xff
   20ed0:	d002      	beq.n	20ed8 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   20ed2:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   20ed4:	2bff      	cmp	r3, #255	; 0xff
   20ed6:	d00a      	beq.n	20eee <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   20ed8:	2314      	movs	r3, #20
   20eda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20ede:	a90f      	add	r1, sp, #60	; 0x3c
   20ee0:	4620      	mov	r0, r4
   20ee2:	f7fd fe95 	bl	1ec10 <net_icmpv6_get_nd_opt_hdr>
   20ee6:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   20ee8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20eea:	2500      	movs	r5, #0
   20eec:	e00e      	b.n	20f0c <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20eee:	a908      	add	r1, sp, #32
   20ef0:	4620      	mov	r0, r4
   20ef2:	f7fd fcc2 	bl	1e87a <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   20ef6:	2800      	cmp	r0, #0
   20ef8:	f000 80b7 	beq.w	2106a <handle_ns_input+0x1d6>
   20efc:	7843      	ldrb	r3, [r0, #1]
   20efe:	2b00      	cmp	r3, #0
   20f00:	f040 80b3 	bne.w	2106a <handle_ns_input+0x1d6>
   20f04:	e7e8      	b.n	20ed8 <handle_ns_input+0x44>
		bytes += buf->len;
   20f06:	899a      	ldrh	r2, [r3, #12]
   20f08:	4415      	add	r5, r2
		buf = buf->frags;
   20f0a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20f0c:	2b00      	cmp	r3, #0
   20f0e:	d1fa      	bne.n	20f06 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20f10:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20f12:	e042      	b.n	20f9a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20f14:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   20f16:	2900      	cmp	r1, #0
   20f18:	f040 80a7 	bne.w	2106a <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   20f1c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   20f20:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   20f24:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   20f26:	4411      	add	r1, r2
   20f28:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   20f2a:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   20f2c:	00db      	lsls	r3, r3, #3
   20f2e:	b2db      	uxtb	r3, r3
   20f30:	3b02      	subs	r3, #2
   20f32:	b2db      	uxtb	r3, r3
   20f34:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   20f38:	f10d 021a 	add.w	r2, sp, #26
   20f3c:	9200      	str	r2, [sp, #0]
   20f3e:	f10d 0216 	add.w	r2, sp, #22
   20f42:	b289      	uxth	r1, r1
   20f44:	68a0      	ldr	r0, [r4, #8]
   20f46:	f7fc fd12 	bl	1d96e <net_frag_read>
	if (!frag && pos == 0xffff) {
   20f4a:	2800      	cmp	r0, #0
   20f4c:	d042      	beq.n	20fd4 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   20f4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   20f52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   20f56:	f10d 021a 	add.w	r2, sp, #26
   20f5a:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   20f5c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20f60:	4293      	cmp	r3, r2
   20f62:	d901      	bls.n	20f68 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   20f64:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   20f68:	68a3      	ldr	r3, [r4, #8]
   20f6a:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20f6c:	2300      	movs	r3, #0
   20f6e:	9300      	str	r3, [sp, #0]
   20f70:	aa08      	add	r2, sp, #32
   20f72:	3108      	adds	r1, #8
   20f74:	6960      	ldr	r0, [r4, #20]
   20f76:	f7ff fc91 	bl	2089c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   20f7a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   20f7e:	787b      	ldrb	r3, [r7, #1]
   20f80:	00db      	lsls	r3, r3, #3
   20f82:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20f84:	4413      	add	r3, r2
   20f86:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20f88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20f8c:	429a      	cmp	r2, r3
   20f8e:	d26c      	bcs.n	2106a <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20f90:	a90f      	add	r1, sp, #60	; 0x3c
   20f92:	4620      	mov	r0, r4
   20f94:	f7fd fe3c 	bl	1ec10 <net_icmpv6_get_nd_opt_hdr>
   20f98:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20f9a:	b317      	cbz	r7, 20fe2 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   20f9c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20fa0:	4295      	cmp	r5, r2
   20fa2:	d91e      	bls.n	20fe2 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   20fa4:	787b      	ldrb	r3, [r7, #1]
   20fa6:	b1e3      	cbz	r3, 20fe2 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   20fa8:	7839      	ldrb	r1, [r7, #0]
   20faa:	2901      	cmp	r1, #1
   20fac:	d1e5      	bne.n	20f7a <handle_ns_input+0xe6>
	return pkt->frags->data;
   20fae:	68a1      	ldr	r1, [r4, #8]
   20fb0:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20fb2:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20fb4:	2800      	cmp	r0, #0
   20fb6:	d1ad      	bne.n	20f14 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20fb8:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20fba:	b928      	cbnz	r0, 20fc8 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20fbc:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20fbe:	b928      	cbnz	r0, 20fcc <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20fc0:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20fc2:	b129      	cbz	r1, 20fd0 <handle_ns_input+0x13c>
   20fc4:	2100      	movs	r1, #0
   20fc6:	e7a6      	b.n	20f16 <handle_ns_input+0x82>
   20fc8:	2100      	movs	r1, #0
   20fca:	e7a4      	b.n	20f16 <handle_ns_input+0x82>
   20fcc:	2100      	movs	r1, #0
   20fce:	e7a2      	b.n	20f16 <handle_ns_input+0x82>
   20fd0:	2101      	movs	r1, #1
   20fd2:	e7a0      	b.n	20f16 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   20fd4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20fdc:	429a      	cmp	r2, r3
   20fde:	d1b6      	bne.n	20f4e <handle_ns_input+0xba>
   20fe0:	e7cb      	b.n	20f7a <handle_ns_input+0xe6>
	return pkt->iface;
   20fe2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20fe6:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20fea:	2500      	movs	r5, #0
   20fec:	e001      	b.n	20ff2 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20fee:	b9ef      	cbnz	r7, 2102c <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20ff0:	3501      	adds	r5, #1
   20ff2:	2d02      	cmp	r5, #2
   20ff4:	dc21      	bgt.n	2103a <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   20ff6:	236c      	movs	r3, #108	; 0x6c
   20ff8:	fb03 8305 	mla	r3, r3, r5, r8
   20ffc:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   21000:	2f00      	cmp	r7, #0
   21002:	d0f5      	beq.n	20ff0 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21004:	236c      	movs	r3, #108	; 0x6c
   21006:	fb03 8305 	mla	r3, r3, r5, r8
   2100a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   2100c:	2b0a      	cmp	r3, #10
   2100e:	d1ef      	bne.n	20ff0 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21010:	216c      	movs	r1, #108	; 0x6c
   21012:	fb01 f105 	mul.w	r1, r1, r5
   21016:	3120      	adds	r1, #32
   21018:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   2101a:	2210      	movs	r2, #16
   2101c:	4411      	add	r1, r2
   2101e:	4648      	mov	r0, r9
   21020:	f009 f842 	bl	2a0a8 <memcmp>
   21024:	2800      	cmp	r0, #0
   21026:	d0e2      	beq.n	20fee <handle_ns_input+0x15a>
		return false;
   21028:	2700      	movs	r7, #0
   2102a:	e7e0      	b.n	20fee <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   2102c:	236c      	movs	r3, #108	; 0x6c
   2102e:	fb03 f505 	mul.w	r5, r3, r5
   21032:	3520      	adds	r5, #32
   21034:	4445      	add	r5, r8
   21036:	350c      	adds	r5, #12
   21038:	e000      	b.n	2103c <handle_ns_input+0x1a8>
	return NULL;
   2103a:	2500      	movs	r5, #0
	if (!ifaddr) {
   2103c:	b1ad      	cbz	r5, 2106a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2103e:	68a3      	ldr	r3, [r4, #8]
   21040:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21042:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21044:	b93b      	cbnz	r3, 21056 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21046:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21048:	b9cb      	cbnz	r3, 2107e <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2104a:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2104c:	b9cb      	cbnz	r3, 21082 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2104e:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21050:	b1cb      	cbz	r3, 21086 <handle_ns_input+0x1f2>
   21052:	2300      	movs	r3, #0
   21054:	e000      	b.n	21058 <handle_ns_input+0x1c4>
   21056:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21058:	2b00      	cmp	r3, #0
   2105a:	d07d      	beq.n	21158 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2105c:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2105e:	f240 23ff 	movw	r3, #767	; 0x2ff
   21062:	429a      	cmp	r2, r3
   21064:	d011      	beq.n	2108a <handle_ns_input+0x1f6>
   21066:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   21068:	bb0b      	cbnz	r3, 210ae <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   2106a:	4a3a      	ldr	r2, [pc, #232]	; (21154 <handle_ns_input+0x2c0>)
   2106c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21070:	3301      	adds	r3, #1
   21072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   21076:	2002      	movs	r0, #2
}
   21078:	b025      	add	sp, #148	; 0x94
   2107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2107e:	2300      	movs	r3, #0
   21080:	e7ea      	b.n	21058 <handle_ns_input+0x1c4>
   21082:	2300      	movs	r3, #0
   21084:	e7e8      	b.n	21058 <handle_ns_input+0x1c4>
   21086:	2301      	movs	r3, #1
   21088:	e7e6      	b.n	21058 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2108a:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2108c:	b95b      	cbnz	r3, 210a6 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2108e:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21094:	d001      	beq.n	2109a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21096:	2300      	movs	r3, #0
   21098:	e7e6      	b.n	21068 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2109a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2109c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2109e:	2bff      	cmp	r3, #255	; 0xff
   210a0:	d003      	beq.n	210aa <handle_ns_input+0x216>
   210a2:	2300      	movs	r3, #0
   210a4:	e7e0      	b.n	21068 <handle_ns_input+0x1d4>
   210a6:	2300      	movs	r3, #0
   210a8:	e7de      	b.n	21068 <handle_ns_input+0x1d4>
   210aa:	2301      	movs	r3, #1
   210ac:	e7dc      	b.n	21068 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   210ae:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   210b2:	b94b      	cbnz	r3, 210c8 <handle_ns_input+0x234>
	return pkt->iface;
   210b4:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   210b6:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   210b8:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   210ba:	f248 03fe 	movw	r3, #33022	; 0x80fe
   210be:	429a      	cmp	r2, r3
   210c0:	d0d3      	beq.n	2106a <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   210c2:	f7fa fb51 	bl	1b768 <net_if_ipv6_dad_failed>
   210c6:	e7d0      	b.n	2106a <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   210c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   210cc:	7603      	strb	r3, [r0, #24]
   210ce:	2300      	movs	r3, #0
   210d0:	2202      	movs	r2, #2
   210d2:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   210d4:	7683      	strb	r3, [r0, #26]
   210d6:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   210d8:	7703      	strb	r3, [r0, #28]
   210da:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   210dc:	7783      	strb	r3, [r0, #30]
   210de:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   210e0:	f880 3020 	strb.w	r3, [r0, #32]
   210e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   210e8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   210ec:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   210f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   210f4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   210f8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   210fc:	2301      	movs	r3, #1
   210fe:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   21102:	68a3      	ldr	r3, [r4, #8]
   21104:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   21108:	f108 0118 	add.w	r1, r8, #24
   2110c:	6960      	ldr	r0, [r4, #20]
   2110e:	f7fa fe15 	bl	1bd3c <net_if_ipv6_select_src_addr>
   21112:	4603      	mov	r3, r0
   21114:	ae10      	add	r6, sp, #64	; 0x40
   21116:	6800      	ldr	r0, [r0, #0]
   21118:	6859      	ldr	r1, [r3, #4]
   2111a:	689a      	ldr	r2, [r3, #8]
   2111c:	68db      	ldr	r3, [r3, #12]
   2111e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21120:	ae10      	add	r6, sp, #64	; 0x40
   21122:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21124:	f8c8 0008 	str.w	r0, [r8, #8]
   21128:	f8c8 100c 	str.w	r1, [r8, #12]
   2112c:	f8c8 2010 	str.w	r2, [r8, #16]
   21130:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   21134:	2320      	movs	r3, #32
   21136:	68a2      	ldr	r2, [r4, #8]
   21138:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   2113a:	9300      	str	r3, [sp, #0]
   2113c:	1d2b      	adds	r3, r5, #4
   2113e:	f101 0218 	add.w	r2, r1, #24
   21142:	3108      	adds	r1, #8
   21144:	6960      	ldr	r0, [r4, #20]
   21146:	f7fe ff69 	bl	2001c <net_ipv6_send_na>
	if (!ret) {
   2114a:	2800      	cmp	r0, #0
   2114c:	f000 80b5 	beq.w	212ba <handle_ns_input+0x426>
	return NET_DROP;
   21150:	2002      	movs	r0, #2
   21152:	e791      	b.n	21078 <handle_ns_input+0x1e4>
   21154:	20002a58 	.word	0x20002a58
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21158:	2100      	movs	r1, #0
   2115a:	3008      	adds	r0, #8
   2115c:	f7fa f8d6 	bl	1b30c <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   21160:	4607      	mov	r7, r0
   21162:	2800      	cmp	r0, #0
   21164:	d181      	bne.n	2106a <handle_ns_input+0x1d6>
   21166:	68a3      	ldr	r3, [r4, #8]
   21168:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2116c:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21170:	f240 23ff 	movw	r3, #767	; 0x2ff
   21174:	429a      	cmp	r2, r3
   21176:	d02b      	beq.n	211d0 <handle_ns_input+0x33c>
   21178:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   2117a:	9303      	str	r3, [sp, #12]
   2117c:	2b00      	cmp	r3, #0
   2117e:	d03c      	beq.n	211fa <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21180:	af14      	add	r7, sp, #80	; 0x50
   21182:	4643      	mov	r3, r8
   21184:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21188:	6859      	ldr	r1, [r3, #4]
   2118a:	689a      	ldr	r2, [r3, #8]
   2118c:	68db      	ldr	r3, [r3, #12]
   2118e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21190:	af14      	add	r7, sp, #80	; 0x50
   21192:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21194:	f8c8 0018 	str.w	r0, [r8, #24]
   21198:	f8c8 101c 	str.w	r1, [r8, #28]
   2119c:	f8c8 2020 	str.w	r2, [r8, #32]
   211a0:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   211a4:	68a3      	ldr	r3, [r4, #8]
   211a6:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   211aa:	af18      	add	r7, sp, #96	; 0x60
   211ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
   211b0:	6871      	ldr	r1, [r6, #4]
   211b2:	68b2      	ldr	r2, [r6, #8]
   211b4:	68f3      	ldr	r3, [r6, #12]
   211b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   211b8:	ae18      	add	r6, sp, #96	; 0x60
   211ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   211bc:	f8ce 0008 	str.w	r0, [lr, #8]
   211c0:	f8ce 100c 	str.w	r1, [lr, #12]
   211c4:	f8ce 2010 	str.w	r2, [lr, #16]
   211c8:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   211cc:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   211ce:	e7b2      	b.n	21136 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   211d0:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   211d4:	b96b      	cbnz	r3, 211f2 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211d6:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   211da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   211de:	d001      	beq.n	211e4 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211e0:	2300      	movs	r3, #0
   211e2:	e7ca      	b.n	2117a <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   211e4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   211e8:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   211ea:	2bff      	cmp	r3, #255	; 0xff
   211ec:	d003      	beq.n	211f6 <handle_ns_input+0x362>
   211ee:	2300      	movs	r3, #0
   211f0:	e7c3      	b.n	2117a <handle_ns_input+0x2e6>
   211f2:	2300      	movs	r3, #0
   211f4:	e7c1      	b.n	2117a <handle_ns_input+0x2e6>
   211f6:	2301      	movs	r3, #1
   211f8:	e7bf      	b.n	2117a <handle_ns_input+0x2e6>
	return pkt->iface;
   211fa:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   211fe:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   21202:	f04f 0900 	mov.w	r9, #0
   21206:	e004      	b.n	21212 <handle_ns_input+0x37e>
		return false;
   21208:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2120c:	e01e      	b.n	2124c <handle_ns_input+0x3b8>
   2120e:	f109 0901 	add.w	r9, r9, #1
   21212:	f1b9 0f02 	cmp.w	r9, #2
   21216:	dc22      	bgt.n	2125e <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   21218:	236c      	movs	r3, #108	; 0x6c
   2121a:	fb03 a309 	mla	r3, r3, r9, sl
   2121e:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   21222:	f1bb 0f00 	cmp.w	fp, #0
   21226:	d0f2      	beq.n	2120e <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21228:	236c      	movs	r3, #108	; 0x6c
   2122a:	fb03 a309 	mla	r3, r3, r9, sl
   2122e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21230:	2b0a      	cmp	r3, #10
   21232:	d1ec      	bne.n	2120e <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21234:	216c      	movs	r1, #108	; 0x6c
   21236:	fb01 f109 	mul.w	r1, r1, r9
   2123a:	3120      	adds	r1, #32
   2123c:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   2123e:	2210      	movs	r2, #16
   21240:	4411      	add	r1, r2
   21242:	4640      	mov	r0, r8
   21244:	f008 ff30 	bl	2a0a8 <memcmp>
   21248:	2800      	cmp	r0, #0
   2124a:	d1dd      	bne.n	21208 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2124c:	f1bb 0f00 	cmp.w	fp, #0
   21250:	d0dd      	beq.n	2120e <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   21252:	276c      	movs	r7, #108	; 0x6c
   21254:	fb07 f709 	mul.w	r7, r7, r9
   21258:	3720      	adds	r7, #32
   2125a:	4457      	add	r7, sl
   2125c:	370c      	adds	r7, #12
   2125e:	2f00      	cmp	r7, #0
   21260:	f43f af03 	beq.w	2106a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   21264:	68a3      	ldr	r3, [r4, #8]
   21266:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2126a:	af1c      	add	r7, sp, #112	; 0x70
   2126c:	4663      	mov	r3, ip
   2126e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21272:	6859      	ldr	r1, [r3, #4]
   21274:	689a      	ldr	r2, [r3, #8]
   21276:	68db      	ldr	r3, [r3, #12]
   21278:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2127a:	af1c      	add	r7, sp, #112	; 0x70
   2127c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2127e:	f8cc 0018 	str.w	r0, [ip, #24]
   21282:	f8cc 101c 	str.w	r1, [ip, #28]
   21286:	f8cc 2020 	str.w	r2, [ip, #32]
   2128a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   2128e:	68a3      	ldr	r3, [r4, #8]
   21290:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21294:	af20      	add	r7, sp, #128	; 0x80
   21296:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2129a:	6871      	ldr	r1, [r6, #4]
   2129c:	68b2      	ldr	r2, [r6, #8]
   2129e:	68f3      	ldr	r3, [r6, #12]
   212a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   212a2:	ae20      	add	r6, sp, #128	; 0x80
   212a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   212a6:	f8ce 0008 	str.w	r0, [lr, #8]
   212aa:	f8ce 100c 	str.w	r1, [lr, #12]
   212ae:	f8ce 2010 	str.w	r2, [lr, #16]
   212b2:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   212b6:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   212b8:	e73d      	b.n	21136 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   212ba:	4620      	mov	r0, r4
   212bc:	f7fc f9d9 	bl	1d672 <net_pkt_unref>
		return NET_OK;
   212c0:	2000      	movs	r0, #0
   212c2:	e6d9      	b.n	21078 <handle_ns_input+0x1e4>

000212c4 <nd_reachable_timeout>:
{
   212c4:	b530      	push	{r4, r5, lr}
   212c6:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   212c8:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   212cc:	2300      	movs	r3, #0
   212ce:	2b07      	cmp	r3, #7
   212d0:	dc07      	bgt.n	212e2 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   212d2:	4c47      	ldr	r4, [pc, #284]	; (213f0 <nd_reachable_timeout+0x12c>)
   212d4:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   212d8:	68e2      	ldr	r2, [r4, #12]
   212da:	4295      	cmp	r5, r2
   212dc:	d002      	beq.n	212e4 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   212de:	3301      	adds	r3, #1
   212e0:	e7f5      	b.n	212ce <nd_reachable_timeout+0xa>
	return NULL;
   212e2:	2400      	movs	r4, #0
	if (!data || !nbr) {
   212e4:	b38d      	cbz	r5, 2134a <nd_reachable_timeout+0x86>
   212e6:	b384      	cbz	r4, 2134a <nd_reachable_timeout+0x86>
   212e8:	4603      	mov	r3, r0
	switch (data->state) {
   212ea:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   212ee:	2a04      	cmp	r2, #4
   212f0:	d82b      	bhi.n	2134a <nd_reachable_timeout+0x86>
   212f2:	e8df f002 	tbb	[pc, r2]
   212f6:	2703      	.short	0x2703
   212f8:	3f2c      	.short	0x3f2c
   212fa:	45          	.byte	0x45
   212fb:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   212fc:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   21300:	2a02      	cmp	r2, #2
   21302:	d912      	bls.n	2132a <nd_reachable_timeout+0x66>
   21304:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21306:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2130a:	f008 fd7d 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   2130e:	6828      	ldr	r0, [r5, #0]
   21310:	b118      	cbz	r0, 2131a <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   21312:	f7fc f9ae 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   21316:	2300      	movs	r3, #0
   21318:	602b      	str	r3, [r5, #0]
   2131a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2131c:	3014      	adds	r0, #20
   2131e:	f008 fd73 	bl	29e08 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21322:	4620      	mov	r0, r4
   21324:	f7fd ffa6 	bl	1f274 <net_nbr_unref>
   21328:	e00f      	b.n	2134a <nd_reachable_timeout+0x86>
			data->ns_count++;
   2132a:	3201      	adds	r2, #1
   2132c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21330:	68a0      	ldr	r0, [r4, #8]
   21332:	2100      	movs	r1, #0
   21334:	9101      	str	r1, [sp, #4]
   21336:	3b10      	subs	r3, #16
   21338:	9300      	str	r3, [sp, #0]
   2133a:	460b      	mov	r3, r1
   2133c:	460a      	mov	r2, r1
   2133e:	f7ff f927 	bl	20590 <net_ipv6_send_ns>
   21342:	e002      	b.n	2134a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   21344:	2202      	movs	r2, #2
   21346:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   2134a:	b003      	add	sp, #12
   2134c:	bd30      	pop	{r4, r5, pc}
   2134e:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21350:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21354:	f008 fd58 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   21358:	6828      	ldr	r0, [r5, #0]
   2135a:	b118      	cbz	r0, 21364 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   2135c:	f7fc f989 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   21360:	2300      	movs	r3, #0
   21362:	602b      	str	r3, [r5, #0]
   21364:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21366:	3014      	adds	r0, #20
   21368:	f008 fd4e 	bl	29e08 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   2136c:	4620      	mov	r0, r4
   2136e:	f7fd ff81 	bl	1f274 <net_nbr_unref>
   21372:	e7ea      	b.n	2134a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   21374:	2204      	movs	r2, #4
   21376:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   2137a:	2200      	movs	r2, #0
   2137c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   21380:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   21384:	2a02      	cmp	r2, #2
   21386:	d91f      	bls.n	213c8 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   21388:	f1a3 0110 	sub.w	r1, r3, #16
   2138c:	68a0      	ldr	r0, [r4, #8]
   2138e:	f7fa fbbf 	bl	1bb10 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   21392:	2800      	cmp	r0, #0
   21394:	d0d9      	beq.n	2134a <nd_reachable_timeout+0x86>
   21396:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   2139a:	2a00      	cmp	r2, #0
   2139c:	d1d5      	bne.n	2134a <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   2139e:	f7fa fc73 	bl	1bc88 <net_if_ipv6_router_rm>
   213a2:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   213a4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   213a8:	f008 fd2e 	bl	29e08 <k_delayed_work_cancel>
	if (data->pending) {
   213ac:	6828      	ldr	r0, [r5, #0]
   213ae:	b118      	cbz	r0, 213b8 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   213b0:	f7fc f95f 	bl	1d672 <net_pkt_unref>
		data->pending = NULL;
   213b4:	2300      	movs	r3, #0
   213b6:	602b      	str	r3, [r5, #0]
   213b8:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   213ba:	3014      	adds	r0, #20
   213bc:	f008 fd24 	bl	29e08 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   213c0:	4620      	mov	r0, r4
   213c2:	f7fd ff57 	bl	1f274 <net_nbr_unref>
   213c6:	e7c0      	b.n	2134a <nd_reachable_timeout+0x86>
			data->ns_count++;
   213c8:	3201      	adds	r2, #1
   213ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   213ce:	68a0      	ldr	r0, [r4, #8]
   213d0:	2100      	movs	r1, #0
   213d2:	9101      	str	r1, [sp, #4]
   213d4:	3b10      	subs	r3, #16
   213d6:	9300      	str	r3, [sp, #0]
   213d8:	460b      	mov	r3, r1
   213da:	460a      	mov	r2, r1
   213dc:	f7ff f8d8 	bl	20590 <net_ipv6_send_ns>
   213e0:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   213e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   213e6:	3114      	adds	r1, #20
   213e8:	4802      	ldr	r0, [pc, #8]	; (213f4 <nd_reachable_timeout+0x130>)
   213ea:	f008 fd67 	bl	29ebc <k_delayed_work_submit_to_queue>
   213ee:	e7ac      	b.n	2134a <nd_reachable_timeout+0x86>
   213f0:	2000be58 	.word	0x2000be58
   213f4:	20002b78 	.word	0x20002b78

000213f8 <net_ipv6_start_dad>:
{
   213f8:	b500      	push	{lr}
   213fa:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   213fc:	2301      	movs	r3, #1
   213fe:	9301      	str	r3, [sp, #4]
   21400:	3104      	adds	r1, #4
   21402:	9100      	str	r1, [sp, #0]
   21404:	2300      	movs	r3, #0
   21406:	461a      	mov	r2, r3
   21408:	4619      	mov	r1, r3
   2140a:	f7ff f8c1 	bl	20590 <net_ipv6_send_ns>
}
   2140e:	b003      	add	sp, #12
   21410:	f85d fb04 	ldr.w	pc, [sp], #4

00021414 <net_ipv6_prepare_for_send>:
{
   21414:	b570      	push	{r4, r5, r6, lr}
   21416:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   21418:	2300      	movs	r3, #0
   2141a:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   2141c:	6943      	ldr	r3, [r0, #20]
   2141e:	f3bf 8f5b 	dmb	ish
   21422:	68db      	ldr	r3, [r3, #12]
   21424:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   21428:	f013 0f02 	tst.w	r3, #2
   2142c:	d108      	bne.n	21440 <net_ipv6_prepare_for_send+0x2c>
   2142e:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   21430:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21432:	b13b      	cbz	r3, 21444 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   21434:	68a3      	ldr	r3, [r4, #8]
   21436:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   21438:	3118      	adds	r1, #24
   2143a:	4620      	mov	r0, r4
   2143c:	f7fe f9e6 	bl	1f80c <update_ll_reserve>
}
   21440:	b004      	add	sp, #16
   21442:	bd70      	pop	{r4, r5, r6, pc}
   21444:	6883      	ldr	r3, [r0, #8]
   21446:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21448:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   2144a:	2bff      	cmp	r3, #255	; 0xff
   2144c:	d0f2      	beq.n	21434 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   2144e:	3118      	adds	r1, #24
   21450:	a803      	add	r0, sp, #12
   21452:	f7fa fa9d 	bl	1b990 <net_if_ipv6_addr_onlink>
   21456:	b348      	cbz	r0, 214ac <net_ipv6_prepare_for_send+0x98>
   21458:	68a3      	ldr	r3, [r4, #8]
   2145a:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   2145c:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   2145e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21460:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21462:	7d5a      	ldrb	r2, [r3, #21]
   21464:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21468:	7d5b      	ldrb	r3, [r3, #21]
   2146a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   2146e:	9b03      	ldr	r3, [sp, #12]
   21470:	2b00      	cmp	r3, #0
   21472:	d03e      	beq.n	214f2 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   21474:	462a      	mov	r2, r5
   21476:	6961      	ldr	r1, [r4, #20]
   21478:	4832      	ldr	r0, [pc, #200]	; (21544 <net_ipv6_prepare_for_send+0x130>)
   2147a:	f7fe f90d 	bl	1f698 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   2147e:	4606      	mov	r6, r0
   21480:	2800      	cmp	r0, #0
   21482:	d051      	beq.n	21528 <net_ipv6_prepare_for_send+0x114>
   21484:	7840      	ldrb	r0, [r0, #1]
   21486:	28ff      	cmp	r0, #255	; 0xff
   21488:	d04e      	beq.n	21528 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   2148a:	f7fd ff85 	bl	1f398 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   2148e:	1c83      	adds	r3, r0, #2
   21490:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   21492:	7843      	ldrb	r3, [r0, #1]
   21494:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   21498:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   2149a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2149e:	2b02      	cmp	r3, #2
   214a0:	d036      	beq.n	21510 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   214a2:	4629      	mov	r1, r5
   214a4:	4620      	mov	r0, r4
   214a6:	f7fe f9b1 	bl	1f80c <update_ll_reserve>
   214aa:	e7c9      	b.n	21440 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   214ac:	68a3      	ldr	r3, [r4, #8]
   214ae:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   214b0:	3118      	adds	r1, #24
   214b2:	2000      	movs	r0, #0
   214b4:	f001 fb26 	bl	22b04 <net_route_lookup>
		if (route) {
   214b8:	4606      	mov	r6, r0
   214ba:	b160      	cbz	r0, 214d6 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   214bc:	f001 fc06 	bl	22ccc <net_route_get_nexthop>
			if (!nexthop) {
   214c0:	4605      	mov	r5, r0
   214c2:	2800      	cmp	r0, #0
   214c4:	d1d3      	bne.n	2146e <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   214c6:	4630      	mov	r0, r6
   214c8:	f001 fbac 	bl	22c24 <net_route_del>
				net_pkt_unref(pkt);
   214cc:	4620      	mov	r0, r4
   214ce:	f7fc f8d0 	bl	1d672 <net_pkt_unref>
				return NULL;
   214d2:	2000      	movs	r0, #0
   214d4:	e7b4      	b.n	21440 <net_ipv6_prepare_for_send+0x2c>
   214d6:	68a3      	ldr	r3, [r4, #8]
   214d8:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   214da:	3118      	adds	r1, #24
   214dc:	2000      	movs	r0, #0
   214de:	f7fa fb47 	bl	1bb70 <net_if_ipv6_router_find_default>
			if (!router) {
   214e2:	4605      	mov	r5, r0
   214e4:	b108      	cbz	r0, 214ea <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   214e6:	352c      	adds	r5, #44	; 0x2c
   214e8:	e7c1      	b.n	2146e <net_ipv6_prepare_for_send+0x5a>
   214ea:	68a3      	ldr	r3, [r4, #8]
   214ec:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   214ee:	3518      	adds	r5, #24
				goto try_send;
   214f0:	e7c0      	b.n	21474 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   214f2:	4629      	mov	r1, r5
   214f4:	a803      	add	r0, sp, #12
   214f6:	f7fa fa4b 	bl	1b990 <net_if_ipv6_addr_onlink>
   214fa:	2800      	cmp	r0, #0
   214fc:	d0ba      	beq.n	21474 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   214fe:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21500:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21502:	7d5a      	ldrb	r2, [r3, #21]
   21504:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21508:	7d5b      	ldrb	r3, [r3, #21]
   2150a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   2150e:	e7b1      	b.n	21474 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   21510:	2103      	movs	r1, #3
   21512:	4630      	mov	r0, r6
   21514:	f7fd ff48 	bl	1f3a8 <ipv6_nbr_set_state>
   21518:	68f1      	ldr	r1, [r6, #12]
   2151a:	f241 3288 	movw	r2, #5000	; 0x1388
   2151e:	3114      	adds	r1, #20
   21520:	4809      	ldr	r0, [pc, #36]	; (21548 <net_ipv6_prepare_for_send+0x134>)
   21522:	f008 fccb 	bl	29ebc <k_delayed_work_submit_to_queue>
   21526:	e7bc      	b.n	214a2 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   21528:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   2152a:	68a3      	ldr	r3, [r4, #8]
   2152c:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   2152e:	2600      	movs	r6, #0
   21530:	9601      	str	r6, [sp, #4]
   21532:	9500      	str	r5, [sp, #0]
   21534:	4633      	mov	r3, r6
   21536:	3208      	adds	r2, #8
   21538:	4621      	mov	r1, r4
   2153a:	f7ff f829 	bl	20590 <net_ipv6_send_ns>
		return NULL;
   2153e:	4630      	mov	r0, r6
   21540:	e77e      	b.n	21440 <net_ipv6_prepare_for_send+0x2c>
   21542:	bf00      	nop
   21544:	2000be4c 	.word	0x2000be4c
   21548:	20002b78 	.word	0x20002b78

0002154c <net_ipv6_send_rs>:
{
   2154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21550:	b084      	sub	sp, #16
   21552:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21554:	6843      	ldr	r3, [r0, #4]
   21556:	689b      	ldr	r3, [r3, #8]
   21558:	2100      	movs	r1, #0
   2155a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2155c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21560:	f7fc f816 	bl	1d590 <net_pkt_get_reserve_tx>
   21564:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2156a:	f7fc f82f 	bl	1d5cc <net_pkt_get_frag>
   2156e:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   21570:	4601      	mov	r1, r0
   21572:	4620      	mov	r0, r4
   21574:	f7fc f8a7 	bl	1d6c6 <net_pkt_frag_add>
	pkt->iface = iface;
   21578:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2157a:	7d6b      	ldrb	r3, [r5, #21]
   2157c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21580:	7d6b      	ldrb	r3, [r5, #21]
   21582:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   21586:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2158a:	220a      	movs	r2, #10
   2158c:	f362 03c6 	bfi	r3, r2, #3, #4
   21590:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   21594:	2328      	movs	r3, #40	; 0x28
   21596:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   2159a:	68a3      	ldr	r3, [r4, #8]
   2159c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2159e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   215a2:	461a      	mov	r2, r3
   215a4:	2100      	movs	r1, #0
   215a6:	1ac0      	subs	r0, r0, r3
   215a8:	f008 fe12 	bl	2a1d0 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   215ac:	2200      	movs	r2, #0
   215ae:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   215b0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   215b4:	68a3      	ldr	r3, [r4, #8]
   215b6:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   215b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   215bc:	7619      	strb	r1, [r3, #24]
   215be:	2102      	movs	r1, #2
   215c0:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   215c2:	769a      	strb	r2, [r3, #26]
   215c4:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   215c6:	771a      	strb	r2, [r3, #28]
   215c8:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   215ca:	779a      	strb	r2, [r3, #30]
   215cc:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   215ce:	f883 2020 	strb.w	r2, [r3, #32]
   215d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   215d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   215da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   215de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   215e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   215e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   215ea:	2201      	movs	r2, #1
   215ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   215f0:	68a3      	ldr	r3, [r4, #8]
   215f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   215f6:	f108 0118 	add.w	r1, r8, #24
   215fa:	4628      	mov	r0, r5
   215fc:	f7fa fb9e 	bl	1bd3c <net_if_ipv6_select_src_addr>
   21600:	4603      	mov	r3, r0
   21602:	466d      	mov	r5, sp
   21604:	6800      	ldr	r0, [r0, #0]
   21606:	6859      	ldr	r1, [r3, #4]
   21608:	689a      	ldr	r2, [r3, #8]
   2160a:	68db      	ldr	r3, [r3, #12]
   2160c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2160e:	466d      	mov	r5, sp
   21610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21612:	f8c8 0008 	str.w	r0, [r8, #8]
   21616:	f8c8 100c 	str.w	r1, [r8, #12]
   2161a:	f8c8 2010 	str.w	r2, [r8, #16]
   2161e:	f8c8 3014 	str.w	r3, [r8, #20]
   21622:	68a3      	ldr	r3, [r4, #8]
   21624:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21626:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21628:	b93a      	cbnz	r2, 2163a <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2162a:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2162c:	b982      	cbnz	r2, 21650 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2162e:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21630:	b982      	cbnz	r2, 21654 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21632:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21634:	b183      	cbz	r3, 21658 <net_ipv6_send_rs+0x10c>
   21636:	2300      	movs	r3, #0
   21638:	e000      	b.n	2163c <net_ipv6_send_rs+0xf0>
   2163a:	2300      	movs	r3, #0
	if (!unspec_src) {
   2163c:	461f      	mov	r7, r3
   2163e:	b97b      	cbnz	r3, 21660 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   21640:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   21642:	7d1b      	ldrb	r3, [r3, #20]
   21644:	2b06      	cmp	r3, #6
   21646:	d02a      	beq.n	2169e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   21648:	2b08      	cmp	r3, #8
   2164a:	d007      	beq.n	2165c <net_ipv6_send_rs+0x110>
	return 0;
   2164c:	2500      	movs	r5, #0
   2164e:	e008      	b.n	21662 <net_ipv6_send_rs+0x116>
   21650:	2300      	movs	r3, #0
   21652:	e7f3      	b.n	2163c <net_ipv6_send_rs+0xf0>
   21654:	2300      	movs	r3, #0
   21656:	e7f1      	b.n	2163c <net_ipv6_send_rs+0xf0>
   21658:	2301      	movs	r3, #1
   2165a:	e7ef      	b.n	2163c <net_ipv6_send_rs+0xf0>
		return 16;
   2165c:	2510      	movs	r5, #16
   2165e:	e000      	b.n	21662 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   21660:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   21662:	2285      	movs	r2, #133	; 0x85
   21664:	1d29      	adds	r1, r5, #4
   21666:	4620      	mov	r0, r4
   21668:	f7fe f92f 	bl	1f8ca <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   2166c:	3608      	adds	r6, #8
   2166e:	2104      	movs	r1, #4
   21670:	4630      	mov	r0, r6
   21672:	f7f9 fadb 	bl	1ac2c <net_buf_simple_add>
	if (!unspec_src) {
   21676:	b1a7      	cbz	r7, 216a2 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21678:	68a1      	ldr	r1, [r4, #8]
   2167a:	4620      	mov	r0, r4
   2167c:	f7fd f8b0 	bl	1e7e0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21680:	4620      	mov	r0, r4
   21682:	f7f9 fbf5 	bl	1ae70 <net_send_data>
   21686:	2800      	cmp	r0, #0
   21688:	db2b      	blt.n	216e2 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   2168a:	4a1c      	ldr	r2, [pc, #112]	; (216fc <net_ipv6_send_rs+0x1b0>)
   2168c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21690:	3301      	adds	r3, #1
   21692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   21696:	2000      	movs	r0, #0
}
   21698:	b004      	add	sp, #16
   2169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   2169e:	2508      	movs	r5, #8
   216a0:	e7df      	b.n	21662 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   216a2:	4629      	mov	r1, r5
   216a4:	4630      	mov	r0, r6
   216a6:	f7f9 fac1 	bl	1ac2c <net_buf_simple_add>
   216aa:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   216ae:	4620      	mov	r0, r4
   216b0:	f7fc fab8 	bl	1dc24 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   216b4:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   216b8:	2301      	movs	r3, #1
   216ba:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   216bc:	08eb      	lsrs	r3, r5, #3
   216be:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   216c0:	f898 2014 	ldrb.w	r2, [r8, #20]
   216c4:	f8d8 1010 	ldr.w	r1, [r8, #16]
   216c8:	300a      	adds	r0, #10
   216ca:	f7de fdf9 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   216ce:	f898 2014 	ldrb.w	r2, [r8, #20]
   216d2:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   216d4:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   216d6:	3a02      	subs	r2, #2
   216d8:	2100      	movs	r1, #0
   216da:	4430      	add	r0, r6
   216dc:	f008 fd78 	bl	2a1d0 <memset>
   216e0:	e7ca      	b.n	21678 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   216e2:	4620      	mov	r0, r4
   216e4:	f7fb ffc5 	bl	1d672 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   216e8:	4a04      	ldr	r2, [pc, #16]	; (216fc <net_ipv6_send_rs+0x1b0>)
   216ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   216ee:	3301      	adds	r3, #1
   216f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   216f4:	f06f 0015 	mvn.w	r0, #21
   216f8:	e7ce      	b.n	21698 <net_ipv6_send_rs+0x14c>
   216fa:	bf00      	nop
   216fc:	20002a58 	.word	0x20002a58

00021700 <net_ipv6_start_rs>:
{
   21700:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   21702:	f7ff ff23 	bl	2154c <net_ipv6_send_rs>
}
   21706:	bd08      	pop	{r3, pc}

00021708 <net_ipv6_mld_join>:
{
   21708:	b570      	push	{r4, r5, r6, lr}
   2170a:	b082      	sub	sp, #8
   2170c:	ab02      	add	r3, sp, #8
   2170e:	f843 0d04 	str.w	r0, [r3, #-4]!
   21712:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   21714:	4619      	mov	r1, r3
   21716:	4628      	mov	r0, r5
   21718:	f7fa f842 	bl	1b7a0 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   2171c:	4604      	mov	r4, r0
   2171e:	b118      	cbz	r0, 21728 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   21720:	7803      	ldrb	r3, [r0, #0]
   21722:	f013 0f02 	tst.w	r3, #2
   21726:	d123      	bne.n	21770 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   21728:	b1c4      	cbz	r4, 2175c <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   2172a:	2202      	movs	r2, #2
   2172c:	4629      	mov	r1, r5
   2172e:	9801      	ldr	r0, [sp, #4]
   21730:	f7fe fb5a 	bl	1fde8 <send_mldv2>
	if (ret < 0) {
   21734:	1e06      	subs	r6, r0, #0
   21736:	db0e      	blt.n	21756 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   21738:	7823      	ldrb	r3, [r4, #0]
   2173a:	f043 0302 	orr.w	r3, r3, #2
   2173e:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   21740:	2201      	movs	r2, #1
   21742:	4629      	mov	r1, r5
   21744:	9801      	ldr	r0, [sp, #4]
   21746:	f7fa f877 	bl	1b838 <net_if_mcast_monitor>
   2174a:	2300      	movs	r3, #0
   2174c:	461a      	mov	r2, r3
   2174e:	9901      	ldr	r1, [sp, #4]
   21750:	4809      	ldr	r0, [pc, #36]	; (21778 <net_ipv6_mld_join+0x70>)
   21752:	f001 fc01 	bl	22f58 <net_mgmt_event_notify_with_info>
}
   21756:	4630      	mov	r0, r6
   21758:	b002      	add	sp, #8
   2175a:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   2175c:	4629      	mov	r1, r5
   2175e:	9801      	ldr	r0, [sp, #4]
   21760:	f7f9 ff32 	bl	1b5c8 <net_if_ipv6_maddr_add>
		if (!maddr) {
   21764:	4604      	mov	r4, r0
   21766:	2800      	cmp	r0, #0
   21768:	d1df      	bne.n	2172a <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   2176a:	f06f 060b 	mvn.w	r6, #11
   2176e:	e7f2      	b.n	21756 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   21770:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21774:	e7ef      	b.n	21756 <net_ipv6_mld_join+0x4e>
   21776:	bf00      	nop
   21778:	f0600007 	.word	0xf0600007

0002177c <net_ipv6_mld_leave>:
{
   2177c:	b570      	push	{r4, r5, r6, lr}
   2177e:	4604      	mov	r4, r0
   21780:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   21782:	f7f9 ff5d 	bl	1b640 <net_if_ipv6_maddr_rm>
   21786:	b198      	cbz	r0, 217b0 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   21788:	2201      	movs	r2, #1
   2178a:	4629      	mov	r1, r5
   2178c:	4620      	mov	r0, r4
   2178e:	f7fe fb2b 	bl	1fde8 <send_mldv2>
	if (ret < 0) {
   21792:	1e06      	subs	r6, r0, #0
   21794:	db0a      	blt.n	217ac <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   21796:	2200      	movs	r2, #0
   21798:	4629      	mov	r1, r5
   2179a:	4620      	mov	r0, r4
   2179c:	f7fa f84c 	bl	1b838 <net_if_mcast_monitor>
   217a0:	2300      	movs	r3, #0
   217a2:	461a      	mov	r2, r3
   217a4:	4621      	mov	r1, r4
   217a6:	4804      	ldr	r0, [pc, #16]	; (217b8 <net_ipv6_mld_leave+0x3c>)
   217a8:	f001 fbd6 	bl	22f58 <net_mgmt_event_notify_with_info>
}
   217ac:	4630      	mov	r0, r6
   217ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   217b0:	f06f 0615 	mvn.w	r6, #21
   217b4:	e7fa      	b.n	217ac <net_ipv6_mld_leave+0x30>
   217b6:	bf00      	nop
   217b8:	f0600008 	.word	0xf0600008

000217bc <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   217bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217c0:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   217c2:	6884      	ldr	r4, [r0, #8]
   217c4:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   217c6:	2300      	movs	r3, #0
   217c8:	e002      	b.n	217d0 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   217ca:	89a2      	ldrh	r2, [r4, #12]
   217cc:	4413      	add	r3, r2
		buf = buf->frags;
   217ce:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   217d0:	2c00      	cmp	r4, #0
   217d2:	d1fa      	bne.n	217ca <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   217d4:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   217d6:	7939      	ldrb	r1, [r7, #4]
   217d8:	797a      	ldrb	r2, [r7, #5]
   217da:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   217de:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   217e0:	4293      	cmp	r3, r2
   217e2:	d007      	beq.n	217f4 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   217e4:	4abd      	ldr	r2, [pc, #756]	; (21adc <net_ipv6_process_pkt+0x320>)
   217e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   217e8:	3301      	adds	r3, #1
   217ea:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   217ec:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   217ee:	b009      	add	sp, #36	; 0x24
   217f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   217f4:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   217f6:	2bff      	cmp	r3, #255	; 0xff
   217f8:	d105      	bne.n	21806 <net_ipv6_process_pkt+0x4a>
   217fa:	4ab8      	ldr	r2, [pc, #736]	; (21adc <net_ipv6_process_pkt+0x320>)
   217fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   217fe:	3301      	adds	r3, #1
   21800:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   21802:	2002      	movs	r0, #2
   21804:	e7f3      	b.n	217ee <net_ipv6_process_pkt+0x32>
   21806:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21808:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   2180c:	2100      	movs	r1, #0
   2180e:	4640      	mov	r0, r8
   21810:	f7f9 fd7c 	bl	1b30c <net_if_ipv6_addr_lookup>
   21814:	2800      	cmp	r0, #0
   21816:	d06f      	beq.n	218f8 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   21818:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   2181a:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   2181c:	2300      	movs	r3, #0
   2181e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   21822:	2328      	movs	r3, #40	; 0x28
   21824:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   21828:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   2182c:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21830:	f000 80b0 	beq.w	21994 <net_ipv6_process_pkt+0x1d8>
   21834:	f1b9 0f11 	cmp.w	r9, #17
   21838:	f000 80ae 	beq.w	21998 <net_ipv6_process_pkt+0x1dc>
   2183c:	f1b9 0f06 	cmp.w	r9, #6
   21840:	f000 80a6 	beq.w	21990 <net_ipv6_process_pkt+0x1d4>
   21844:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   21846:	2b00      	cmp	r3, #0
   21848:	f040 8166 	bne.w	21b18 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   2184c:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   21850:	2328      	movs	r3, #40	; 0x28
   21852:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   21856:	464f      	mov	r7, r9
	ext_bitmap = 0;
   21858:	2300      	movs	r3, #0
   2185a:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   2185c:	9302      	str	r3, [sp, #8]
   2185e:	46a3      	mov	fp, r4
   21860:	4654      	mov	r4, sl
	while (frag) {
   21862:	2c00      	cmp	r4, #0
   21864:	f000 8156 	beq.w	21b14 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21868:	2f3a      	cmp	r7, #58	; 0x3a
   2186a:	f000 8099 	beq.w	219a0 <net_ipv6_process_pkt+0x1e4>
   2186e:	2f11      	cmp	r7, #17
   21870:	f000 8098 	beq.w	219a4 <net_ipv6_process_pkt+0x1e8>
   21874:	2f06      	cmp	r7, #6
   21876:	f000 8091 	beq.w	2199c <net_ipv6_process_pkt+0x1e0>
   2187a:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   2187c:	2b00      	cmp	r3, #0
   2187e:	f040 8093 	bne.w	219a8 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   21882:	f10d 0820 	add.w	r8, sp, #32
   21886:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   2188a:	f10d 031f 	add.w	r3, sp, #31
   2188e:	9300      	str	r3, [sp, #0]
   21890:	2301      	movs	r3, #1
   21892:	4642      	mov	r2, r8
   21894:	4620      	mov	r0, r4
   21896:	f7fc f86a 	bl	1d96e <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   2189a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2189e:	f10d 031e 	add.w	r3, sp, #30
   218a2:	9300      	str	r3, [sp, #0]
   218a4:	2301      	movs	r3, #1
   218a6:	4642      	mov	r2, r8
   218a8:	f7fc f861 	bl	1d96e <net_frag_read>
		if (!frag && offset == 0xffff) {
   218ac:	4604      	mov	r4, r0
   218ae:	2800      	cmp	r0, #0
   218b0:	f000 8081 	beq.w	219b6 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   218b4:	f89d 801e 	ldrb.w	r8, [sp, #30]
   218b8:	f108 0801 	add.w	r8, r8, #1
   218bc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   218c0:	fa5f f888 	uxtb.w	r8, r8
   218c4:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   218c8:	fa1f f888 	uxth.w	r8, r8
   218cc:	9b02      	ldr	r3, [sp, #8]
   218ce:	4443      	add	r3, r8
   218d0:	b29b      	uxth	r3, r3
   218d2:	9302      	str	r3, [sp, #8]
		switch (next) {
   218d4:	2f00      	cmp	r7, #0
   218d6:	d077      	beq.n	219c8 <net_ipv6_process_pkt+0x20c>
   218d8:	2f3b      	cmp	r7, #59	; 0x3b
   218da:	d073      	beq.n	219c4 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   218dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   218e0:	3b01      	subs	r3, #1
   218e2:	2201      	movs	r2, #1
   218e4:	2104      	movs	r1, #4
   218e6:	4628      	mov	r0, r5
   218e8:	f7fd fa88 	bl	1edfc <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   218ec:	4a7b      	ldr	r2, [pc, #492]	; (21adc <net_ipv6_process_pkt+0x320>)
   218ee:	6a13      	ldr	r3, [r2, #32]
   218f0:	3301      	adds	r3, #1
   218f2:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   218f4:	2002      	movs	r0, #2
   218f6:	e77a      	b.n	217ee <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   218f8:	2100      	movs	r1, #0
   218fa:	4640      	mov	r0, r8
   218fc:	f7f9 ff50 	bl	1b7a0 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21900:	2800      	cmp	r0, #0
   21902:	d189      	bne.n	21818 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   21904:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   21906:	2bff      	cmp	r3, #255	; 0xff
   21908:	d086      	beq.n	21818 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2190a:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2190e:	bb8b      	cbnz	r3, 21974 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21910:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21914:	bb83      	cbnz	r3, 21978 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21916:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2191a:	bb7b      	cbnz	r3, 2197c <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   2191c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   21920:	0a13      	lsrs	r3, r2, #8
   21922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   21926:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   2192a:	0211      	lsls	r1, r2, #8
   2192c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   21930:	430b      	orrs	r3, r1
   21932:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21936:	2b01      	cmp	r3, #1
   21938:	d022      	beq.n	21980 <net_ipv6_process_pkt+0x1c4>
   2193a:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   2193c:	2b00      	cmp	r3, #0
   2193e:	f47f af6b 	bne.w	21818 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   21942:	ab06      	add	r3, sp, #24
   21944:	aa05      	add	r2, sp, #20
   21946:	4641      	mov	r1, r8
   21948:	6968      	ldr	r0, [r5, #20]
   2194a:	f001 f9f5 	bl	22d38 <net_route_get_info>
   2194e:	b1c8      	cbz	r0, 21984 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21950:	9b05      	ldr	r3, [sp, #20]
   21952:	b13b      	cbz	r3, 21964 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   21954:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   21956:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21958:	7d5a      	ldrb	r2, [r3, #21]
   2195a:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   2195e:	7d5b      	ldrb	r3, [r3, #21]
   21960:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   21964:	9906      	ldr	r1, [sp, #24]
   21966:	4628      	mov	r0, r5
   21968:	f001 fa0c 	bl	22d84 <net_route_packet>
			if (ret < 0) {
   2196c:	2800      	cmp	r0, #0
   2196e:	db09      	blt.n	21984 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21970:	2000      	movs	r0, #0
   21972:	e73c      	b.n	217ee <net_ipv6_process_pkt+0x32>
   21974:	2300      	movs	r3, #0
   21976:	e7e1      	b.n	2193c <net_ipv6_process_pkt+0x180>
   21978:	2300      	movs	r3, #0
   2197a:	e7df      	b.n	2193c <net_ipv6_process_pkt+0x180>
   2197c:	2300      	movs	r3, #0
   2197e:	e7dd      	b.n	2193c <net_ipv6_process_pkt+0x180>
   21980:	2301      	movs	r3, #1
   21982:	e7db      	b.n	2193c <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   21984:	4a55      	ldr	r2, [pc, #340]	; (21adc <net_ipv6_process_pkt+0x320>)
   21986:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21988:	3301      	adds	r3, #1
   2198a:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   2198c:	2002      	movs	r0, #2
   2198e:	e72e      	b.n	217ee <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21990:	2301      	movs	r3, #1
   21992:	e758      	b.n	21846 <net_ipv6_process_pkt+0x8a>
   21994:	2301      	movs	r3, #1
   21996:	e756      	b.n	21846 <net_ipv6_process_pkt+0x8a>
   21998:	2301      	movs	r3, #1
   2199a:	e754      	b.n	21846 <net_ipv6_process_pkt+0x8a>
   2199c:	2301      	movs	r3, #1
   2199e:	e76d      	b.n	2187c <net_ipv6_process_pkt+0xc0>
   219a0:	2301      	movs	r3, #1
   219a2:	e76b      	b.n	2187c <net_ipv6_process_pkt+0xc0>
   219a4:	2301      	movs	r3, #1
   219a6:	e769      	b.n	2187c <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   219a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   219ac:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   219ae:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   219b2:	46b9      	mov	r9, r7
   219b4:	e0b2      	b.n	21b1c <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   219b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   219ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   219be:	429a      	cmp	r2, r3
   219c0:	f47f af78 	bne.w	218b4 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   219c4:	2002      	movs	r0, #2
   219c6:	e712      	b.n	217ee <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   219c8:	f1b9 0f00 	cmp.w	r9, #0
   219cc:	d186      	bne.n	218dc <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   219ce:	9a03      	ldr	r2, [sp, #12]
   219d0:	f012 0f01 	tst.w	r2, #1
   219d4:	d182      	bne.n	218dc <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   219d6:	f042 0301 	orr.w	r3, r2, #1
   219da:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   219dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   219e0:	4546      	cmp	r6, r8
   219e2:	f2c0 8094 	blt.w	21b0e <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   219e6:	f10d 0313 	add.w	r3, sp, #19
   219ea:	9300      	str	r3, [sp, #0]
   219ec:	2301      	movs	r3, #1
   219ee:	aa06      	add	r2, sp, #24
   219f0:	4620      	mov	r0, r4
   219f2:	f7fb ffbc 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   219f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   219fa:	ab05      	add	r3, sp, #20
   219fc:	9300      	str	r3, [sp, #0]
   219fe:	2301      	movs	r3, #1
   21a00:	aa06      	add	r2, sp, #24
   21a02:	f7fb ffb4 	bl	1d96e <net_frag_read>
	if (!frag && loc == 0xffff) {
   21a06:	4604      	mov	r4, r0
   21a08:	b108      	cbz	r0, 21a0e <net_ipv6_process_pkt+0x252>
   21a0a:	2702      	movs	r7, #2
   21a0c:	e027      	b.n	21a5e <net_ipv6_process_pkt+0x2a2>
   21a0e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21a16:	429a      	cmp	r2, r3
   21a18:	d068      	beq.n	21aec <net_ipv6_process_pkt+0x330>
   21a1a:	2702      	movs	r7, #2
   21a1c:	e01f      	b.n	21a5e <net_ipv6_process_pkt+0x2a2>
			length++;
   21a1e:	3701      	adds	r7, #1
   21a20:	b2bf      	uxth	r7, r7
			loc--;
   21a22:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   21a26:	3b01      	subs	r3, #1
   21a28:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   21a2c:	45b8      	cmp	r8, r7
   21a2e:	d960      	bls.n	21af2 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   21a30:	f10d 0a20 	add.w	sl, sp, #32
   21a34:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   21a38:	f10d 0313 	add.w	r3, sp, #19
   21a3c:	9300      	str	r3, [sp, #0]
   21a3e:	2301      	movs	r3, #1
   21a40:	4652      	mov	r2, sl
   21a42:	4620      	mov	r0, r4
   21a44:	f7fb ff93 	bl	1d96e <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21a48:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21a4c:	ab05      	add	r3, sp, #20
   21a4e:	9300      	str	r3, [sp, #0]
   21a50:	2301      	movs	r3, #1
   21a52:	4652      	mov	r2, sl
   21a54:	f7fb ff8b 	bl	1d96e <net_frag_read>
		if (!frag && loc == 0xffff) {
   21a58:	4604      	mov	r4, r0
   21a5a:	2800      	cmp	r0, #0
   21a5c:	d040      	beq.n	21ae0 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21a5e:	2c00      	cmp	r4, #0
   21a60:	d047      	beq.n	21af2 <net_ipv6_process_pkt+0x336>
   21a62:	45b8      	cmp	r8, r7
   21a64:	d945      	bls.n	21af2 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   21a66:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21a6a:	2b00      	cmp	r3, #0
   21a6c:	d0d7      	beq.n	21a1e <net_ipv6_process_pkt+0x262>
   21a6e:	2b01      	cmp	r3, #1
   21a70:	d009      	beq.n	21a86 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   21a72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21a76:	2b80      	cmp	r3, #128	; 0x80
   21a78:	d019      	beq.n	21aae <net_ipv6_process_pkt+0x2f2>
   21a7a:	2bc0      	cmp	r3, #192	; 0xc0
   21a7c:	d012      	beq.n	21aa4 <net_ipv6_process_pkt+0x2e8>
   21a7e:	2b40      	cmp	r3, #64	; 0x40
   21a80:	d00e      	beq.n	21aa0 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   21a82:	462b      	mov	r3, r5
   21a84:	e01a      	b.n	21abc <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   21a86:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21a8a:	441f      	add	r7, r3
   21a8c:	b2bf      	uxth	r7, r7
   21a8e:	3702      	adds	r7, #2
   21a90:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21a92:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21a96:	4413      	add	r3, r2
   21a98:	3302      	adds	r3, #2
   21a9a:	f8ad 3018 	strh.w	r3, [sp, #24]
   21a9e:	e7c5      	b.n	21a2c <net_ipv6_process_pkt+0x270>
		return NULL;
   21aa0:	2300      	movs	r3, #0
   21aa2:	e00b      	b.n	21abc <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21aa4:	68ab      	ldr	r3, [r5, #8]
   21aa6:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21aa8:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21aaa:	2bff      	cmp	r3, #255	; 0xff
   21aac:	d013      	beq.n	21ad6 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21aae:	463b      	mov	r3, r7
   21ab0:	2202      	movs	r2, #2
   21ab2:	2104      	movs	r1, #4
   21ab4:	4628      	mov	r0, r5
   21ab6:	f7fd f9a1 	bl	1edfc <net_icmpv6_send_error>
		return NULL;
   21aba:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21abc:	b1b3      	cbz	r3, 21aec <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21abe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21ac2:	441f      	add	r7, r3
   21ac4:	b2bf      	uxth	r7, r7
   21ac6:	3702      	adds	r7, #2
   21ac8:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21aca:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21ace:	4413      	add	r3, r2
   21ad0:	f8ad 3018 	strh.w	r3, [sp, #24]
   21ad4:	e7aa      	b.n	21a2c <net_ipv6_process_pkt+0x270>
			return NULL;
   21ad6:	2300      	movs	r3, #0
   21ad8:	e7f0      	b.n	21abc <net_ipv6_process_pkt+0x300>
   21ada:	bf00      	nop
   21adc:	20002a58 	.word	0x20002a58
		if (!frag && loc == 0xffff) {
   21ae0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21ae8:	429a      	cmp	r2, r3
   21aea:	d1b8      	bne.n	21a5e <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21aec:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21aee:	2302      	movs	r3, #2
   21af0:	e007      	b.n	21b02 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21af2:	45b8      	cmp	r8, r7
   21af4:	d1fa      	bne.n	21aec <net_ipv6_process_pkt+0x330>
	*pos += length;
   21af6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21afa:	441f      	add	r7, r3
   21afc:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21b00:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21b02:	2b02      	cmp	r3, #2
   21b04:	f43f af5e 	beq.w	219c4 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21b08:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21b0c:	e6a9      	b.n	21862 <net_ipv6_process_pkt+0xa6>
		return NULL;
   21b0e:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21b10:	2302      	movs	r3, #2
   21b12:	e7f6      	b.n	21b02 <net_ipv6_process_pkt+0x346>
   21b14:	46b9      	mov	r9, r7
   21b16:	e001      	b.n	21b1c <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21b18:	2300      	movs	r3, #0
   21b1a:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21b1c:	9b02      	ldr	r3, [sp, #8]
   21b1e:	b10b      	cbz	r3, 21b24 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21b20:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21b24:	f1b9 0f11 	cmp.w	r9, #17
   21b28:	d011      	beq.n	21b4e <net_ipv6_process_pkt+0x392>
   21b2a:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21b2e:	d004      	beq.n	21b3a <net_ipv6_process_pkt+0x37e>
   21b30:	f1b9 0f06 	cmp.w	r9, #6
   21b34:	d010      	beq.n	21b58 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   21b36:	2002      	movs	r0, #2
   21b38:	e659      	b.n	217ee <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21b3a:	a906      	add	r1, sp, #24
   21b3c:	4628      	mov	r0, r5
   21b3e:	f7fc fe9c 	bl	1e87a <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   21b42:	7842      	ldrb	r2, [r0, #1]
   21b44:	7801      	ldrb	r1, [r0, #0]
   21b46:	4628      	mov	r0, r5
   21b48:	f7fd fb62 	bl	1f210 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21b4c:	e64f      	b.n	217ee <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21b4e:	4629      	mov	r1, r5
   21b50:	2011      	movs	r0, #17
   21b52:	f003 fbd3 	bl	252fc <net_conn_input>
   21b56:	e64a      	b.n	217ee <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21b58:	4629      	mov	r1, r5
   21b5a:	2006      	movs	r0, #6
   21b5c:	f003 fbce 	bl	252fc <net_conn_input>
   21b60:	e645      	b.n	217ee <net_ipv6_process_pkt+0x32>
   21b62:	bf00      	nop

00021b64 <net_ipv6_init>:

void net_ipv6_init(void)
{
   21b64:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   21b66:	4806      	ldr	r0, [pc, #24]	; (21b80 <net_ipv6_init+0x1c>)
   21b68:	f7fc fe0a 	bl	1e780 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21b6c:	4805      	ldr	r0, [pc, #20]	; (21b84 <net_ipv6_init+0x20>)
   21b6e:	f7fc fe07 	bl	1e780 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   21b72:	4805      	ldr	r0, [pc, #20]	; (21b88 <net_ipv6_init+0x24>)
   21b74:	f7fc fe04 	bl	1e780 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21b78:	4804      	ldr	r0, [pc, #16]	; (21b8c <net_ipv6_init+0x28>)
   21b7a:	f7fc fe01 	bl	1e780 <net_icmpv6_register_handler>
   21b7e:	bd08      	pop	{r3, pc}
   21b80:	2000c258 	.word	0x2000c258
   21b84:	2000be40 	.word	0x2000be40
   21b88:	2000c264 	.word	0x2000c264
   21b8c:	2000be34 	.word	0x2000be34

00021b90 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21b94:	6883      	ldr	r3, [r0, #8]
   21b96:	689b      	ldr	r3, [r3, #8]
   21b98:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21b9c:	2b00      	cmp	r3, #0
   21b9e:	f2c0 831e 	blt.w	221de <uncompress_IPHC_header+0x64e>
   21ba2:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21ba4:	2164      	movs	r1, #100	; 0x64
   21ba6:	f7fb fd11 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   21baa:	4607      	mov	r7, r0
   21bac:	2800      	cmp	r0, #0
   21bae:	f000 8319 	beq.w	221e4 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21bb2:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21bb4:	2360      	movs	r3, #96	; 0x60
   21bb6:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21bb8:	2328      	movs	r3, #40	; 0x28
   21bba:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21bbe:	68a3      	ldr	r3, [r4, #8]
   21bc0:	689a      	ldr	r2, [r3, #8]
   21bc2:	7813      	ldrb	r3, [r2, #0]
   21bc4:	f003 0318 	and.w	r3, r3, #24
   21bc8:	2b18      	cmp	r3, #24
   21bca:	d863      	bhi.n	21c94 <uncompress_IPHC_header+0x104>
   21bcc:	e8df f003 	tbb	[pc, r3]
   21bd0:	6262620d 	.word	0x6262620d
   21bd4:	62626262 	.word	0x62626262
   21bd8:	6262623c 	.word	0x6262623c
   21bdc:	62626262 	.word	0x62626262
   21be0:	6262624c 	.word	0x6262624c
   21be4:	62626262 	.word	0x62626262
   21be8:	5c          	.byte	0x5c
   21be9:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21bea:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21bec:	0993      	lsrs	r3, r2, #6
   21bee:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21bf2:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21bf4:	7832      	ldrb	r2, [r6, #0]
   21bf6:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21bfa:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21bfc:	68a2      	ldr	r2, [r4, #8]
   21bfe:	6892      	ldr	r2, [r2, #8]
   21c00:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21c04:	f002 020f 	and.w	r2, r2, #15
   21c08:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21c0c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21c0e:	68a3      	ldr	r3, [r4, #8]
   21c10:	6899      	ldr	r1, [r3, #8]
   21c12:	2202      	movs	r2, #2
   21c14:	3104      	adds	r1, #4
   21c16:	18b0      	adds	r0, r6, r2
   21c18:	f7de fb52 	bl	2c0 <memcpy>
		offset += 2;
   21c1c:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21c1e:	68a3      	ldr	r3, [r4, #8]
   21c20:	689b      	ldr	r3, [r3, #8]
   21c22:	781a      	ldrb	r2, [r3, #0]
   21c24:	f012 0f04 	tst.w	r2, #4
   21c28:	d103      	bne.n	21c32 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21c2a:	5d5b      	ldrb	r3, [r3, r5]
   21c2c:	71b3      	strb	r3, [r6, #6]
		offset++;
   21c2e:	3501      	adds	r5, #1
   21c30:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   21c32:	68a3      	ldr	r3, [r4, #8]
   21c34:	689a      	ldr	r2, [r3, #8]
   21c36:	7813      	ldrb	r3, [r2, #0]
   21c38:	f003 0303 	and.w	r3, r3, #3
   21c3c:	2b03      	cmp	r3, #3
   21c3e:	d82f      	bhi.n	21ca0 <uncompress_IPHC_header+0x110>
   21c40:	e8df f003 	tbb	[pc, r3]
   21c44:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21c48:	7893      	ldrb	r3, [r2, #2]
   21c4a:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21c4c:	f003 030f 	and.w	r3, r3, #15
   21c50:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   21c54:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21c56:	68a3      	ldr	r3, [r4, #8]
   21c58:	6899      	ldr	r1, [r3, #8]
   21c5a:	2202      	movs	r2, #2
   21c5c:	3103      	adds	r1, #3
   21c5e:	18b0      	adds	r0, r6, r2
   21c60:	f7de fb2e 	bl	2c0 <memcpy>
		offset += 2;
   21c64:	2505      	movs	r5, #5
   21c66:	e7da      	b.n	21c1e <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21c68:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21c6a:	0993      	lsrs	r3, r2, #6
   21c6c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21c70:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21c72:	7832      	ldrb	r2, [r6, #0]
   21c74:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21c78:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21c7a:	011b      	lsls	r3, r3, #4
   21c7c:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21c7e:	2300      	movs	r3, #0
   21c80:	70b3      	strb	r3, [r6, #2]
   21c82:	70f3      	strb	r3, [r6, #3]
		offset++;
   21c84:	2503      	movs	r5, #3
   21c86:	e7ca      	b.n	21c1e <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21c88:	2300      	movs	r3, #0
   21c8a:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21c8c:	70b3      	strb	r3, [r6, #2]
   21c8e:	70f3      	strb	r3, [r6, #3]
   21c90:	2502      	movs	r5, #2
   21c92:	e7c4      	b.n	21c1e <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21c94:	2502      	movs	r5, #2
   21c96:	e7c2      	b.n	21c1e <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21c98:	1c6b      	adds	r3, r5, #1
   21c9a:	5d52      	ldrb	r2, [r2, r5]
   21c9c:	71f2      	strb	r2, [r6, #7]
   21c9e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21ca0:	2210      	movs	r2, #16
   21ca2:	2100      	movs	r1, #0
   21ca4:	f106 0008 	add.w	r0, r6, #8
   21ca8:	f008 fa92 	bl	2a1d0 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21cac:	2210      	movs	r2, #16
   21cae:	2100      	movs	r1, #0
   21cb0:	f106 0018 	add.w	r0, r6, #24
   21cb4:	f008 fa8c 	bl	2a1d0 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21cb8:	68a3      	ldr	r3, [r4, #8]
   21cba:	689b      	ldr	r3, [r3, #8]
   21cbc:	785b      	ldrb	r3, [r3, #1]
   21cbe:	f013 0f40 	tst.w	r3, #64	; 0x40
   21cc2:	d011      	beq.n	21ce8 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21cc4:	f013 0f30 	tst.w	r3, #48	; 0x30
   21cc8:	d05e      	beq.n	21d88 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21cca:	4638      	mov	r0, r7
   21ccc:	f7fb fccb 	bl	1d666 <net_pkt_frag_unref>
	return false;
   21cd0:	2000      	movs	r0, #0
   21cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21cd6:	2301      	movs	r3, #1
   21cd8:	71f3      	strb	r3, [r6, #7]
   21cda:	e7e1      	b.n	21ca0 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21cdc:	2340      	movs	r3, #64	; 0x40
   21cde:	71f3      	strb	r3, [r6, #7]
   21ce0:	e7de      	b.n	21ca0 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21ce2:	23ff      	movs	r3, #255	; 0xff
   21ce4:	71f3      	strb	r3, [r6, #7]
   21ce6:	e7db      	b.n	21ca0 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21ce8:	68a3      	ldr	r3, [r4, #8]
   21cea:	6899      	ldr	r1, [r3, #8]
   21cec:	784b      	ldrb	r3, [r1, #1]
   21cee:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21cf2:	2b10      	cmp	r3, #16
   21cf4:	d059      	beq.n	21daa <uncompress_IPHC_header+0x21a>
   21cf6:	d93e      	bls.n	21d76 <uncompress_IPHC_header+0x1e6>
   21cf8:	2b20      	cmp	r3, #32
   21cfa:	d065      	beq.n	21dc8 <uncompress_IPHC_header+0x238>
   21cfc:	2b30      	cmp	r3, #48	; 0x30
   21cfe:	d143      	bne.n	21d88 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21d00:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21d04:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21d08:	23fe      	movs	r3, #254	; 0xfe
   21d0a:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21d0c:	2380      	movs	r3, #128	; 0x80
   21d0e:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21d12:	2300      	movs	r3, #0
   21d14:	f888 3002 	strb.w	r3, [r8, #2]
   21d18:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21d1c:	f888 3004 	strb.w	r3, [r8, #4]
   21d20:	f888 3005 	strb.w	r3, [r8, #5]
   21d24:	f888 3006 	strb.w	r3, [r8, #6]
   21d28:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21d2c:	f899 2004 	ldrb.w	r2, [r9, #4]
   21d30:	2a06      	cmp	r2, #6
   21d32:	d05b      	beq.n	21dec <uncompress_IPHC_header+0x25c>
   21d34:	2a08      	cmp	r2, #8
   21d36:	f000 8082 	beq.w	21e3e <uncompress_IPHC_header+0x2ae>
   21d3a:	2a02      	cmp	r2, #2
   21d3c:	d124      	bne.n	21d88 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21d3e:	f899 3005 	ldrb.w	r3, [r9, #5]
   21d42:	2b01      	cmp	r3, #1
   21d44:	d120      	bne.n	21d88 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21d46:	2300      	movs	r3, #0
   21d48:	f888 3008 	strb.w	r3, [r8, #8]
   21d4c:	f888 3009 	strb.w	r3, [r8, #9]
   21d50:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21d54:	22ff      	movs	r2, #255	; 0xff
   21d56:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21d5a:	22fe      	movs	r2, #254	; 0xfe
   21d5c:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21d60:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21d64:	6a23      	ldr	r3, [r4, #32]
   21d66:	781b      	ldrb	r3, [r3, #0]
   21d68:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21d6c:	6a23      	ldr	r3, [r4, #32]
   21d6e:	785b      	ldrb	r3, [r3, #1]
   21d70:	f888 300f 	strb.w	r3, [r8, #15]
   21d74:	e008      	b.n	21d88 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21d76:	b93b      	cbnz	r3, 21d88 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21d78:	2210      	movs	r2, #16
   21d7a:	4429      	add	r1, r5
   21d7c:	f106 0008 	add.w	r0, r6, #8
   21d80:	f7de fa9e 	bl	2c0 <memcpy>
		offset += 16;
   21d84:	3510      	adds	r5, #16
   21d86:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21d88:	68a3      	ldr	r3, [r4, #8]
   21d8a:	6899      	ldr	r1, [r3, #8]
   21d8c:	784b      	ldrb	r3, [r1, #1]
   21d8e:	f013 0f08 	tst.w	r3, #8
   21d92:	d160      	bne.n	21e56 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21d94:	f003 0303 	and.w	r3, r3, #3
   21d98:	2b03      	cmp	r3, #3
   21d9a:	f200 80ad 	bhi.w	21ef8 <uncompress_IPHC_header+0x368>
   21d9e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21da2:	00a3      	.short	0x00a3
   21da4:	00e500d6 	.word	0x00e500d6
   21da8:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21daa:	23fe      	movs	r3, #254	; 0xfe
   21dac:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21dae:	2380      	movs	r3, #128	; 0x80
   21db0:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21db2:	68a3      	ldr	r3, [r4, #8]
   21db4:	6899      	ldr	r1, [r3, #8]
   21db6:	2208      	movs	r2, #8
   21db8:	4429      	add	r1, r5
   21dba:	f106 0010 	add.w	r0, r6, #16
   21dbe:	f7de fa7f 	bl	2c0 <memcpy>
		offset += 8;
   21dc2:	3508      	adds	r5, #8
   21dc4:	b2ed      	uxtb	r5, r5
   21dc6:	e7df      	b.n	21d88 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21dc8:	23fe      	movs	r3, #254	; 0xfe
   21dca:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21dcc:	2280      	movs	r2, #128	; 0x80
   21dce:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21dd0:	22ff      	movs	r2, #255	; 0xff
   21dd2:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21dd4:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21dd6:	68a3      	ldr	r3, [r4, #8]
   21dd8:	6899      	ldr	r1, [r3, #8]
   21dda:	2202      	movs	r2, #2
   21ddc:	4429      	add	r1, r5
   21dde:	f106 0016 	add.w	r0, r6, #22
   21de2:	f7de fa6d 	bl	2c0 <memcpy>
		offset += 2;
   21de6:	3502      	adds	r5, #2
   21de8:	b2ed      	uxtb	r5, r5
   21dea:	e7cd      	b.n	21d88 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21dec:	2203      	movs	r2, #3
   21dee:	6a21      	ldr	r1, [r4, #32]
   21df0:	f108 0008 	add.w	r0, r8, #8
   21df4:	f7de fa64 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21df8:	23ff      	movs	r3, #255	; 0xff
   21dfa:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21dfe:	23fe      	movs	r3, #254	; 0xfe
   21e00:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21e04:	6a21      	ldr	r1, [r4, #32]
   21e06:	2203      	movs	r2, #3
   21e08:	4411      	add	r1, r2
   21e0a:	f108 000d 	add.w	r0, r8, #13
   21e0e:	f7de fa57 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21e12:	f899 3005 	ldrb.w	r3, [r9, #5]
   21e16:	2b02      	cmp	r3, #2
   21e18:	d00a      	beq.n	21e30 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21e1a:	f899 3005 	ldrb.w	r3, [r9, #5]
   21e1e:	2b03      	cmp	r3, #3
   21e20:	d1b2      	bne.n	21d88 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21e22:	f898 3008 	ldrb.w	r3, [r8, #8]
   21e26:	f083 0302 	eor.w	r3, r3, #2
   21e2a:	f888 3008 	strb.w	r3, [r8, #8]
   21e2e:	e7ab      	b.n	21d88 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21e30:	f898 3008 	ldrb.w	r3, [r8, #8]
   21e34:	f083 0302 	eor.w	r3, r3, #2
   21e38:	f888 3008 	strb.w	r3, [r8, #8]
   21e3c:	e7ed      	b.n	21e1a <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21e3e:	6a21      	ldr	r1, [r4, #32]
   21e40:	f108 0008 	add.w	r0, r8, #8
   21e44:	f7de fa3c 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21e48:	f898 3008 	ldrb.w	r3, [r8, #8]
   21e4c:	f083 0302 	eor.w	r3, r3, #2
   21e50:	f888 3008 	strb.w	r3, [r8, #8]
   21e54:	e798      	b.n	21d88 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   21e56:	784b      	ldrb	r3, [r1, #1]
   21e58:	f013 0f04 	tst.w	r3, #4
   21e5c:	d142      	bne.n	21ee4 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21e5e:	f003 0303 	and.w	r3, r3, #3
   21e62:	2b03      	cmp	r3, #3
   21e64:	d848      	bhi.n	21ef8 <uncompress_IPHC_header+0x368>
   21e66:	e8df f003 	tbb	[pc, r3]
   21e6a:	0b02      	.short	0x0b02
   21e6c:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21e6e:	2210      	movs	r2, #16
   21e70:	4429      	add	r1, r5
   21e72:	f106 0018 	add.w	r0, r6, #24
   21e76:	f7de fa23 	bl	2c0 <memcpy>
		offset += 16;
   21e7a:	3510      	adds	r5, #16
   21e7c:	b2ed      	uxtb	r5, r5
   21e7e:	e03b      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21e80:	23ff      	movs	r3, #255	; 0xff
   21e82:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21e84:	68a3      	ldr	r3, [r4, #8]
   21e86:	689b      	ldr	r3, [r3, #8]
   21e88:	1c69      	adds	r1, r5, #1
   21e8a:	5d5b      	ldrb	r3, [r3, r5]
   21e8c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21e8e:	68a3      	ldr	r3, [r4, #8]
   21e90:	689b      	ldr	r3, [r3, #8]
   21e92:	2205      	movs	r2, #5
   21e94:	fa53 f181 	uxtab	r1, r3, r1
   21e98:	f106 0023 	add.w	r0, r6, #35	; 0x23
   21e9c:	f7de fa10 	bl	2c0 <memcpy>
		offset += 5;
   21ea0:	3506      	adds	r5, #6
   21ea2:	b2ed      	uxtb	r5, r5
   21ea4:	e028      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21ea6:	23ff      	movs	r3, #255	; 0xff
   21ea8:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21eaa:	68a3      	ldr	r3, [r4, #8]
   21eac:	689b      	ldr	r3, [r3, #8]
   21eae:	1c69      	adds	r1, r5, #1
   21eb0:	5d5b      	ldrb	r3, [r3, r5]
   21eb2:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   21eb4:	68a3      	ldr	r3, [r4, #8]
   21eb6:	689b      	ldr	r3, [r3, #8]
   21eb8:	2203      	movs	r2, #3
   21eba:	fa53 f181 	uxtab	r1, r3, r1
   21ebe:	f106 0025 	add.w	r0, r6, #37	; 0x25
   21ec2:	f7de f9fd 	bl	2c0 <memcpy>
		offset += 3;
   21ec6:	3504      	adds	r5, #4
   21ec8:	b2ed      	uxtb	r5, r5
   21eca:	e015      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21ecc:	23ff      	movs	r3, #255	; 0xff
   21ece:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21ed0:	2302      	movs	r3, #2
   21ed2:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   21ed4:	68a3      	ldr	r3, [r4, #8]
   21ed6:	689a      	ldr	r2, [r3, #8]
   21ed8:	1c6b      	adds	r3, r5, #1
   21eda:	5d52      	ldrb	r2, [r2, r5]
   21edc:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   21ee0:	b2dd      	uxtb	r5, r3
   21ee2:	e009      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		return 0;
   21ee4:	2500      	movs	r5, #0
   21ee6:	e007      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21ee8:	2210      	movs	r2, #16
   21eea:	4429      	add	r1, r5
   21eec:	f106 0018 	add.w	r0, r6, #24
   21ef0:	f7de f9e6 	bl	2c0 <memcpy>
		offset += 16;
   21ef4:	3510      	adds	r5, #16
   21ef6:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   21ef8:	f107 0a08 	add.w	sl, r7, #8
   21efc:	2128      	movs	r1, #40	; 0x28
   21efe:	4650      	mov	r0, sl
   21f00:	f7f8 fe94 	bl	1ac2c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21f04:	68a3      	ldr	r3, [r4, #8]
   21f06:	689b      	ldr	r3, [r3, #8]
   21f08:	781a      	ldrb	r2, [r3, #0]
   21f0a:	f012 0f04 	tst.w	r2, #4
   21f0e:	f000 8114 	beq.w	2213a <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   21f12:	5d5b      	ldrb	r3, [r3, r5]
   21f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   21f18:	2bf0      	cmp	r3, #240	; 0xf0
   21f1a:	f47f aed6 	bne.w	21cca <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   21f1e:	2311      	movs	r3, #17
   21f20:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   21f22:	f8d7 b008 	ldr.w	fp, [r7, #8]
   21f26:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   21f2a:	68a3      	ldr	r3, [r4, #8]
   21f2c:	6898      	ldr	r0, [r3, #8]
   21f2e:	f810 8005 	ldrb.w	r8, [r0, r5]
   21f32:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   21f36:	1c69      	adds	r1, r5, #1
   21f38:	b2c9      	uxtb	r1, r1
   21f3a:	5d43      	ldrb	r3, [r0, r5]
   21f3c:	f003 0303 	and.w	r3, r3, #3
   21f40:	2b03      	cmp	r3, #3
   21f42:	f200 80ed 	bhi.w	22120 <uncompress_IPHC_header+0x590>
   21f46:	e8df f003 	tbb	[pc, r3]
   21f4a:	ae95      	.short	0xae95
   21f4c:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   21f4e:	23fe      	movs	r3, #254	; 0xfe
   21f50:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21f52:	2380      	movs	r3, #128	; 0x80
   21f54:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   21f56:	68a3      	ldr	r3, [r4, #8]
   21f58:	6899      	ldr	r1, [r3, #8]
   21f5a:	2208      	movs	r2, #8
   21f5c:	4429      	add	r1, r5
   21f5e:	f106 0020 	add.w	r0, r6, #32
   21f62:	f7de f9ad 	bl	2c0 <memcpy>
		offset += 8;
   21f66:	3508      	adds	r5, #8
   21f68:	b2ed      	uxtb	r5, r5
   21f6a:	e7c5      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   21f6c:	23fe      	movs	r3, #254	; 0xfe
   21f6e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21f70:	2280      	movs	r2, #128	; 0x80
   21f72:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   21f74:	22ff      	movs	r2, #255	; 0xff
   21f76:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   21f7a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   21f7e:	68a3      	ldr	r3, [r4, #8]
   21f80:	6899      	ldr	r1, [r3, #8]
   21f82:	2202      	movs	r2, #2
   21f84:	4429      	add	r1, r5
   21f86:	f106 0026 	add.w	r0, r6, #38	; 0x26
   21f8a:	f7de f999 	bl	2c0 <memcpy>
		offset += 2;
   21f8e:	3502      	adds	r5, #2
   21f90:	b2ed      	uxtb	r5, r5
   21f92:	e7b1      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   21f94:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   21f98:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   21f9c:	23fe      	movs	r3, #254	; 0xfe
   21f9e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   21fa0:	2380      	movs	r3, #128	; 0x80
   21fa2:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21fa6:	2300      	movs	r3, #0
   21fa8:	f888 3002 	strb.w	r3, [r8, #2]
   21fac:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21fb0:	f888 3004 	strb.w	r3, [r8, #4]
   21fb4:	f888 3005 	strb.w	r3, [r8, #5]
   21fb8:	f888 3006 	strb.w	r3, [r8, #6]
   21fbc:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21fc0:	f899 2004 	ldrb.w	r2, [r9, #4]
   21fc4:	2a06      	cmp	r2, #6
   21fc6:	d01f      	beq.n	22008 <uncompress_IPHC_header+0x478>
   21fc8:	2a08      	cmp	r2, #8
   21fca:	d047      	beq.n	2205c <uncompress_IPHC_header+0x4cc>
   21fcc:	2a02      	cmp	r2, #2
   21fce:	d193      	bne.n	21ef8 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21fd0:	f899 3005 	ldrb.w	r3, [r9, #5]
   21fd4:	2b01      	cmp	r3, #1
   21fd6:	d18f      	bne.n	21ef8 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21fd8:	2300      	movs	r3, #0
   21fda:	f888 3008 	strb.w	r3, [r8, #8]
   21fde:	f888 3009 	strb.w	r3, [r8, #9]
   21fe2:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21fe6:	22ff      	movs	r2, #255	; 0xff
   21fe8:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21fec:	22fe      	movs	r2, #254	; 0xfe
   21fee:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21ff2:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21ff8:	781b      	ldrb	r3, [r3, #0]
   21ffa:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22000:	785b      	ldrb	r3, [r3, #1]
   22002:	f888 300f 	strb.w	r3, [r8, #15]
   22006:	e777      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   22008:	2203      	movs	r2, #3
   2200a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2200c:	f108 0008 	add.w	r0, r8, #8
   22010:	f7de f956 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   22014:	23ff      	movs	r3, #255	; 0xff
   22016:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   2201a:	23fe      	movs	r3, #254	; 0xfe
   2201c:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22020:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22022:	2203      	movs	r2, #3
   22024:	4411      	add	r1, r2
   22026:	f108 000d 	add.w	r0, r8, #13
   2202a:	f7de f949 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2202e:	f899 3005 	ldrb.w	r3, [r9, #5]
   22032:	2b02      	cmp	r3, #2
   22034:	d00b      	beq.n	2204e <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22036:	f899 3005 	ldrb.w	r3, [r9, #5]
   2203a:	2b03      	cmp	r3, #3
   2203c:	f47f af5c 	bne.w	21ef8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   22040:	f898 3008 	ldrb.w	r3, [r8, #8]
   22044:	f083 0302 	eor.w	r3, r3, #2
   22048:	f888 3008 	strb.w	r3, [r8, #8]
   2204c:	e754      	b.n	21ef8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   2204e:	f898 3008 	ldrb.w	r3, [r8, #8]
   22052:	f083 0302 	eor.w	r3, r3, #2
   22056:	f888 3008 	strb.w	r3, [r8, #8]
   2205a:	e7ec      	b.n	22036 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2205c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2205e:	f108 0008 	add.w	r0, r8, #8
   22062:	f7de f92d 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   22066:	f898 3008 	ldrb.w	r3, [r8, #8]
   2206a:	f083 0302 	eor.w	r3, r3, #2
   2206e:	f888 3008 	strb.w	r3, [r8, #8]
   22072:	e741      	b.n	21ef8 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22074:	2202      	movs	r2, #2
   22076:	4401      	add	r1, r0
   22078:	4648      	mov	r0, r9
   2207a:	f7de f921 	bl	2c0 <memcpy>
		offset += 2;
   2207e:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22080:	68a3      	ldr	r3, [r4, #8]
   22082:	689b      	ldr	r3, [r3, #8]
   22084:	2202      	movs	r2, #2
   22086:	fa53 f181 	uxtab	r1, r3, r1
   2208a:	eb09 0002 	add.w	r0, r9, r2
   2208e:	f7de f917 	bl	2c0 <memcpy>
		offset += 2;
   22092:	3505      	adds	r5, #5
   22094:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   22096:	f1b8 0f00 	cmp.w	r8, #0
   2209a:	d043      	beq.n	22124 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2209c:	2108      	movs	r1, #8
   2209e:	4650      	mov	r0, sl
   220a0:	f7f8 fdc4 	bl	1ac2c <net_buf_simple_add>
   220a4:	e04c      	b.n	22140 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   220a6:	2202      	movs	r2, #2
   220a8:	4401      	add	r1, r0
   220aa:	4648      	mov	r0, r9
   220ac:	f7de f908 	bl	2c0 <memcpy>
		offset += 2;
   220b0:	1ceb      	adds	r3, r5, #3
   220b2:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   220b4:	68a2      	ldr	r2, [r4, #8]
   220b6:	6892      	ldr	r2, [r2, #8]
   220b8:	5cd3      	ldrb	r3, [r2, r3]
   220ba:	021b      	lsls	r3, r3, #8
   220bc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   220c0:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   220c4:	3504      	adds	r5, #4
   220c6:	b2ed      	uxtb	r5, r5
   220c8:	e7e5      	b.n	22096 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   220ca:	5c43      	ldrb	r3, [r0, r1]
   220cc:	021b      	lsls	r3, r3, #8
   220ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   220d2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   220d6:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   220d8:	68a3      	ldr	r3, [r4, #8]
   220da:	689b      	ldr	r3, [r3, #8]
   220dc:	2202      	movs	r2, #2
   220de:	fa53 f181 	uxtab	r1, r3, r1
   220e2:	eb09 0002 	add.w	r0, r9, r2
   220e6:	f7de f8eb 	bl	2c0 <memcpy>
		offset += 2;
   220ea:	3504      	adds	r5, #4
   220ec:	b2ed      	uxtb	r5, r5
   220ee:	e7d2      	b.n	22096 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   220f0:	5c43      	ldrb	r3, [r0, r1]
   220f2:	091b      	lsrs	r3, r3, #4
   220f4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   220f8:	021b      	lsls	r3, r3, #8
   220fa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   220fe:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   22102:	68a3      	ldr	r3, [r4, #8]
   22104:	689b      	ldr	r3, [r3, #8]
   22106:	5c5b      	ldrb	r3, [r3, r1]
   22108:	021b      	lsls	r3, r3, #8
   2210a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   2210e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   22112:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22116:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2211a:	3502      	adds	r5, #2
   2211c:	b2ed      	uxtb	r5, r5
   2211e:	e7ba      	b.n	22096 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22120:	460d      	mov	r5, r1
   22122:	e7b8      	b.n	22096 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   22124:	68a3      	ldr	r3, [r4, #8]
   22126:	6899      	ldr	r1, [r3, #8]
   22128:	2202      	movs	r2, #2
   2212a:	4429      	add	r1, r5
   2212c:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   22130:	f7de f8c6 	bl	2c0 <memcpy>
		offset += 2;
   22134:	3502      	adds	r5, #2
   22136:	b2ed      	uxtb	r5, r5
   22138:	e7b0      	b.n	2209c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   2213a:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   2213e:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   22140:	68a3      	ldr	r3, [r4, #8]
   22142:	899a      	ldrh	r2, [r3, #12]
   22144:	fa1f fa85 	uxth.w	sl, r5
   22148:	4552      	cmp	r2, sl
   2214a:	f4ff adbe 	bcc.w	21cca <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   2214e:	6898      	ldr	r0, [r3, #8]
   22150:	1b52      	subs	r2, r2, r5
   22152:	1941      	adds	r1, r0, r5
   22154:	f007 ffd8 	bl	2a108 <memmove>
	pkt->frags->len -= offset;
   22158:	68a2      	ldr	r2, [r4, #8]
   2215a:	8993      	ldrh	r3, [r2, #12]
   2215c:	eba3 0a0a 	sub.w	sl, r3, sl
   22160:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   22164:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   22168:	b94a      	cbnz	r2, 2217e <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   2216a:	4639      	mov	r1, r7
   2216c:	4620      	mov	r0, r4
   2216e:	f7fb fab7 	bl	1d6e0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22172:	4620      	mov	r0, r4
   22174:	f7fb fb6e 	bl	1d854 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   22178:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2217a:	2200      	movs	r2, #0
   2217c:	e00b      	b.n	22196 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   2217e:	68bb      	ldr	r3, [r7, #8]
   22180:	4250      	negs	r0, r2
	return pkt->frags->data;
   22182:	68a1      	ldr	r1, [r4, #8]
   22184:	6889      	ldr	r1, [r1, #8]
   22186:	4401      	add	r1, r0
   22188:	4418      	add	r0, r3
   2218a:	f7de f899 	bl	2c0 <memcpy>
   2218e:	e7ec      	b.n	2216a <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   22190:	8999      	ldrh	r1, [r3, #12]
   22192:	440a      	add	r2, r1
		buf = buf->frags;
   22194:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22196:	2b00      	cmp	r3, #0
   22198:	d1fa      	bne.n	22190 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2219a:	b293      	uxth	r3, r2
   2219c:	3b28      	subs	r3, #40	; 0x28
   2219e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   221a0:	0a1a      	lsrs	r2, r3, #8
   221a2:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   221a4:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   221a6:	79b1      	ldrb	r1, [r6, #6]
   221a8:	2911      	cmp	r1, #17
   221aa:	d002      	beq.n	221b2 <uncompress_IPHC_header+0x622>
	return true;
   221ac:	2001      	movs	r0, #1
   221ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   221b2:	f1b9 0f00 	cmp.w	r9, #0
   221b6:	d018      	beq.n	221ea <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   221b8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   221bc:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   221c0:	f1b8 0f00 	cmp.w	r8, #0
   221c4:	d102      	bne.n	221cc <uncompress_IPHC_header+0x63c>
	return true;
   221c6:	2001      	movs	r0, #1
}
   221c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   221cc:	4620      	mov	r0, r4
   221ce:	f7fc f8ba 	bl	1e346 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   221d2:	43c0      	mvns	r0, r0
   221d4:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   221d8:	2001      	movs	r0, #1
   221da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   221de:	2000      	movs	r0, #0
   221e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   221e4:	2000      	movs	r0, #0
   221e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   221ea:	2001      	movs	r0, #1
   221ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000221f0 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   221f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221f4:	b085      	sub	sp, #20
   221f6:	4604      	mov	r4, r0
   221f8:	4617      	mov	r7, r2
	if (iphc) {
   221fa:	460d      	mov	r5, r1
   221fc:	b9f9      	cbnz	r1, 2223e <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   221fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22202:	f7fb f9e3 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   22206:	4606      	mov	r6, r0
   22208:	2800      	cmp	r0, #0
   2220a:	f000 8438 	beq.w	22a7e <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   2220e:	f850 3f08 	ldr.w	r3, [r0, #8]!
   22212:	2241      	movs	r2, #65	; 0x41
   22214:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   22216:	2101      	movs	r1, #1
   22218:	f7f8 fd08 	bl	1ac2c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   2221c:	4631      	mov	r1, r6
   2221e:	4620      	mov	r0, r4
   22220:	f7fb fa5e 	bl	1d6e0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22224:	4620      	mov	r0, r4
   22226:	f7fb fb15 	bl	1d854 <net_pkt_compact>
	if (fragment) {
   2222a:	2f00      	cmp	r7, #0
   2222c:	f000 842a 	beq.w	22a84 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   22230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22234:	4620      	mov	r0, r4
   22236:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   22238:	b005      	add	sp, #20
   2223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2223e:	6883      	ldr	r3, [r0, #8]
   22240:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   22242:	899b      	ldrh	r3, [r3, #12]
   22244:	2b27      	cmp	r3, #39	; 0x27
   22246:	f240 8411 	bls.w	22a6c <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   2224a:	79b2      	ldrb	r2, [r6, #6]
   2224c:	2a11      	cmp	r2, #17
   2224e:	d02f      	beq.n	222b0 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22254:	4620      	mov	r0, r4
   22256:	f7fb f9b9 	bl	1d5cc <net_pkt_get_frag>
	if (!frag) {
   2225a:	4680      	mov	r8, r0
   2225c:	2800      	cmp	r0, #0
   2225e:	f000 8408 	beq.w	22a72 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   22262:	6883      	ldr	r3, [r0, #8]
   22264:	2260      	movs	r2, #96	; 0x60
   22266:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22268:	6883      	ldr	r3, [r0, #8]
   2226a:	2200      	movs	r2, #0
   2226c:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   2226e:	7830      	ldrb	r0, [r6, #0]
   22270:	7871      	ldrb	r1, [r6, #1]
   22272:	090b      	lsrs	r3, r1, #4
   22274:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   22278:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   2227a:	089a      	lsrs	r2, r3, #2
   2227c:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   22280:	b25b      	sxtb	r3, r3
   22282:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   22284:	f011 0f0f 	tst.w	r1, #15
   22288:	d121      	bne.n	222ce <net_6lo_compress+0xde>
   2228a:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   2228e:	f1be 0f00 	cmp.w	lr, #0
   22292:	d11c      	bne.n	222ce <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   22294:	f010 0f0f 	tst.w	r0, #15
   22298:	d10e      	bne.n	222b8 <net_6lo_compress+0xc8>
   2229a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   2229e:	d10b      	bne.n	222b8 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   222a0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   222a4:	7813      	ldrb	r3, [r2, #0]
   222a6:	f043 0318 	orr.w	r3, r3, #24
   222aa:	7013      	strb	r3, [r2, #0]
   222ac:	2202      	movs	r2, #2
   222ae:	e025      	b.n	222fc <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   222b0:	2b2f      	cmp	r3, #47	; 0x2f
   222b2:	d8cd      	bhi.n	22250 <net_6lo_compress+0x60>
		return false;
   222b4:	2000      	movs	r0, #0
   222b6:	e7bf      	b.n	22238 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   222b8:	f8d8 1008 	ldr.w	r1, [r8, #8]
   222bc:	780b      	ldrb	r3, [r1, #0]
   222be:	f043 0310 	orr.w	r3, r3, #16
   222c2:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   222c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   222c8:	709a      	strb	r2, [r3, #2]
   222ca:	2203      	movs	r2, #3
   222cc:	e016      	b.n	222fc <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   222ce:	f010 0f0f 	tst.w	r0, #15
   222d2:	d102      	bne.n	222da <net_6lo_compress+0xea>
   222d4:	f011 0f30 	tst.w	r1, #48	; 0x30
   222d8:	d128      	bne.n	2232c <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   222da:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   222de:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   222e0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   222e4:	7873      	ldrb	r3, [r6, #1]
   222e6:	f003 030f 	and.w	r3, r3, #15
   222ea:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   222ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
   222f0:	2202      	movs	r2, #2
   222f2:	18b1      	adds	r1, r6, r2
   222f4:	3004      	adds	r0, #4
   222f6:	f7dd ffe3 	bl	2c0 <memcpy>
			offset += 2;
   222fa:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   222fc:	79b3      	ldrb	r3, [r6, #6]
   222fe:	2b11      	cmp	r3, #17
   22300:	d02d      	beq.n	2235e <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   22302:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22306:	f102 0901 	add.w	r9, r2, #1
   2230a:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   2230c:	79f3      	ldrb	r3, [r6, #7]
   2230e:	2b40      	cmp	r3, #64	; 0x40
   22310:	d040      	beq.n	22394 <net_6lo_compress+0x1a4>
   22312:	2bff      	cmp	r3, #255	; 0xff
   22314:	d045      	beq.n	223a2 <net_6lo_compress+0x1b2>
   22316:	2b01      	cmp	r3, #1
   22318:	d029      	beq.n	2236e <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   2231a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2231e:	f109 0201 	add.w	r2, r9, #1
   22322:	f801 3009 	strb.w	r3, [r1, r9]
   22326:	fa5f f982 	uxtb.w	r9, r2
   2232a:	e026      	b.n	2237a <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   2232c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22330:	780a      	ldrb	r2, [r1, #0]
   22332:	f042 0208 	orr.w	r2, r2, #8
   22336:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   22338:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2233c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22340:	f996 1001 	ldrsb.w	r1, [r6, #1]
   22344:	f001 010f 	and.w	r1, r1, #15
   22348:	430b      	orrs	r3, r1
   2234a:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   2234c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22350:	2202      	movs	r2, #2
   22352:	18b1      	adds	r1, r6, r2
   22354:	3003      	adds	r0, #3
   22356:	f7dd ffb3 	bl	2c0 <memcpy>
			offset += 2;
   2235a:	2205      	movs	r2, #5
   2235c:	e7ce      	b.n	222fc <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   2235e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22362:	780b      	ldrb	r3, [r1, #0]
   22364:	f043 0304 	orr.w	r3, r3, #4
   22368:	700b      	strb	r3, [r1, #0]
   2236a:	4691      	mov	r9, r2
   2236c:	e7ce      	b.n	2230c <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   2236e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22372:	7813      	ldrb	r3, [r2, #0]
   22374:	f043 0301 	orr.w	r3, r3, #1
   22378:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2237a:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2237c:	b9c3      	cbnz	r3, 223b0 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2237e:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22380:	2b00      	cmp	r3, #0
   22382:	d176      	bne.n	22472 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22384:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22386:	2b00      	cmp	r3, #0
   22388:	d175      	bne.n	22476 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2238a:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2238c:	2b00      	cmp	r3, #0
   2238e:	d074      	beq.n	2247a <net_6lo_compress+0x28a>
   22390:	2300      	movs	r3, #0
   22392:	e00e      	b.n	223b2 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   22394:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22398:	7813      	ldrb	r3, [r2, #0]
   2239a:	f043 0302 	orr.w	r3, r3, #2
   2239e:	7013      	strb	r3, [r2, #0]
   223a0:	e7eb      	b.n	2237a <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   223a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   223a6:	7813      	ldrb	r3, [r2, #0]
   223a8:	f043 0303 	orr.w	r3, r3, #3
   223ac:	7013      	strb	r3, [r2, #0]
   223ae:	e7e4      	b.n	2237a <net_6lo_compress+0x18a>
   223b0:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   223b2:	2b00      	cmp	r3, #0
   223b4:	d163      	bne.n	2247e <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   223b6:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   223b8:	f248 03fe 	movw	r3, #33022	; 0x80fe
   223bc:	429a      	cmp	r2, r3
   223be:	d065      	beq.n	2248c <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   223c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   223c4:	2210      	movs	r2, #16
   223c6:	f106 0108 	add.w	r1, r6, #8
   223ca:	4448      	add	r0, r9
   223cc:	f7dd ff78 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   223d0:	f109 0910 	add.w	r9, r9, #16
   223d4:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   223d8:	f1b9 0f00 	cmp.w	r9, #0
   223dc:	f000 812d 	beq.w	2263a <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   223e0:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   223e2:	2bff      	cmp	r3, #255	; 0xff
   223e4:	f000 812e 	beq.w	22644 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   223e8:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   223ea:	f248 03fe 	movw	r3, #33022	; 0x80fe
   223ee:	429a      	cmp	r2, r3
   223f0:	f000 81bf 	beq.w	22772 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   223f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   223f8:	2210      	movs	r2, #16
   223fa:	f106 0118 	add.w	r1, r6, #24
   223fe:	4448      	add	r0, r9
   22400:	f7dd ff5e 	bl	2c0 <memcpy>
		offset += 16;
   22404:	f109 0910 	add.w	r9, r9, #16
   22408:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   2240c:	f1b9 0f00 	cmp.w	r9, #0
   22410:	f000 8287 	beq.w	22922 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   22414:	79b3      	ldrb	r3, [r6, #6]
   22416:	2b11      	cmp	r3, #17
   22418:	f000 8288 	beq.w	2292c <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   2241c:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   2241e:	f108 0a08 	add.w	sl, r8, #8
   22422:	4649      	mov	r1, r9
   22424:	4650      	mov	r0, sl
   22426:	f7f8 fc01 	bl	1ac2c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2242a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2242e:	68a3      	ldr	r3, [r4, #8]
   22430:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   22432:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22434:	1b92      	subs	r2, r2, r6
   22436:	4431      	add	r1, r6
   22438:	4448      	add	r0, r9
   2243a:	f7dd ff41 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   2243e:	68a3      	ldr	r3, [r4, #8]
   22440:	8999      	ldrh	r1, [r3, #12]
   22442:	1b89      	subs	r1, r1, r6
   22444:	4650      	mov	r0, sl
   22446:	f7f8 fbf1 	bl	1ac2c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   2244a:	68a2      	ldr	r2, [r4, #8]
   2244c:	2100      	movs	r1, #0
   2244e:	4620      	mov	r0, r4
   22450:	f7fb f928 	bl	1d6a4 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   22454:	4641      	mov	r1, r8
   22456:	4620      	mov	r0, r4
   22458:	f7fb f942 	bl	1d6e0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2245c:	4620      	mov	r0, r4
   2245e:	f7fb f9f9 	bl	1d854 <net_pkt_compact>
	if (fragment) {
   22462:	2f00      	cmp	r7, #0
   22464:	f000 8308 	beq.w	22a78 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   22468:	eba6 0109 	sub.w	r1, r6, r9
   2246c:	4620      	mov	r0, r4
   2246e:	47b8      	blx	r7
   22470:	e6e2      	b.n	22238 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22472:	2300      	movs	r3, #0
   22474:	e79d      	b.n	223b2 <net_6lo_compress+0x1c2>
   22476:	2300      	movs	r3, #0
   22478:	e79b      	b.n	223b2 <net_6lo_compress+0x1c2>
   2247a:	2301      	movs	r3, #1
   2247c:	e799      	b.n	223b2 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   2247e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22482:	7853      	ldrb	r3, [r2, #1]
   22484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22488:	7053      	strb	r3, [r2, #1]
   2248a:	e7a5      	b.n	223d8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2248c:	8973      	ldrh	r3, [r6, #10]
   2248e:	b91b      	cbnz	r3, 22498 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22490:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22492:	b33b      	cbz	r3, 224e4 <net_6lo_compress+0x2f4>
   22494:	2300      	movs	r3, #0
   22496:	e000      	b.n	2249a <net_6lo_compress+0x2aa>
   22498:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   2249a:	9301      	str	r3, [sp, #4]
   2249c:	2b00      	cmp	r3, #0
   2249e:	d08f      	beq.n	223c0 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   224a0:	6933      	ldr	r3, [r6, #16]
   224a2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   224a6:	d01f      	beq.n	224e8 <net_6lo_compress+0x2f8>
   224a8:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   224aa:	469a      	mov	sl, r3
   224ac:	bb1b      	cbnz	r3, 224f6 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   224ae:	f114 0320 	adds.w	r3, r4, #32
   224b2:	f000 80bf 	beq.w	22634 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   224b6:	f116 0b08 	adds.w	fp, r6, #8
   224ba:	d008      	beq.n	224ce <net_6lo_compress+0x2de>
   224bc:	b13b      	cbz	r3, 224ce <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   224be:	791a      	ldrb	r2, [r3, #4]
   224c0:	2a06      	cmp	r2, #6
   224c2:	d03e      	beq.n	22542 <net_6lo_compress+0x352>
   224c4:	2a08      	cmp	r2, #8
   224c6:	f000 808c 	beq.w	225e2 <net_6lo_compress+0x3f2>
   224ca:	2a02      	cmp	r2, #2
   224cc:	d026      	beq.n	2251c <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   224ce:	f1ba 0f00 	cmp.w	sl, #0
   224d2:	f000 809c 	beq.w	2260e <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   224d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224da:	7853      	ldrb	r3, [r2, #1]
   224dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   224e0:	7053      	strb	r3, [r2, #1]
   224e2:	e779      	b.n	223d8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   224e4:	2301      	movs	r3, #1
   224e6:	e7d8      	b.n	2249a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   224e8:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   224ea:	2bfe      	cmp	r3, #254	; 0xfe
   224ec:	d001      	beq.n	224f2 <net_6lo_compress+0x302>
   224ee:	2300      	movs	r3, #0
   224f0:	e7db      	b.n	224aa <net_6lo_compress+0x2ba>
   224f2:	2301      	movs	r3, #1
   224f4:	e7d9      	b.n	224aa <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   224f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224fa:	7853      	ldrb	r3, [r2, #1]
   224fc:	f043 0320 	orr.w	r3, r3, #32
   22500:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   22502:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22506:	2202      	movs	r2, #2
   22508:	f106 0116 	add.w	r1, r6, #22
   2250c:	4448      	add	r0, r9
   2250e:	f7dd fed7 	bl	2c0 <memcpy>
			offset += 2;
   22512:	f109 0902 	add.w	r9, r9, #2
   22516:	fa5f f989 	uxtb.w	r9, r9
   2251a:	e75d      	b.n	223d8 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   2251c:	6a21      	ldr	r1, [r4, #32]
   2251e:	f10b 000e 	add.w	r0, fp, #14
   22522:	f007 fdc1 	bl	2a0a8 <memcmp>
   22526:	2800      	cmp	r0, #0
   22528:	d1d1      	bne.n	224ce <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   2252a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2252e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22532:	d1cc      	bne.n	224ce <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   22534:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22538:	2bfe      	cmp	r3, #254	; 0xfe
   2253a:	d1c8      	bne.n	224ce <net_6lo_compress+0x2de>
			return true;
   2253c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22540:	e7c5      	b.n	224ce <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22542:	795b      	ldrb	r3, [r3, #5]
   22544:	2b03      	cmp	r3, #3
   22546:	d026      	beq.n	22596 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22548:	2b02      	cmp	r3, #2
   2254a:	d1c0      	bne.n	224ce <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2254c:	6a21      	ldr	r1, [r4, #32]
   2254e:	2202      	movs	r2, #2
   22550:	3101      	adds	r1, #1
   22552:	f10b 0009 	add.w	r0, fp, #9
   22556:	f007 fda7 	bl	2a0a8 <memcmp>
   2255a:	2800      	cmp	r0, #0
   2255c:	d1b7      	bne.n	224ce <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2255e:	6a21      	ldr	r1, [r4, #32]
   22560:	2203      	movs	r2, #3
   22562:	4411      	add	r1, r2
   22564:	f10b 000d 	add.w	r0, fp, #13
   22568:	f007 fd9e 	bl	2a0a8 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2256c:	2800      	cmp	r0, #0
   2256e:	d1ae      	bne.n	224ce <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22570:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22574:	2bff      	cmp	r3, #255	; 0xff
   22576:	d1aa      	bne.n	224ce <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   22578:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2257c:	2bfe      	cmp	r3, #254	; 0xfe
   2257e:	d1a6      	bne.n	224ce <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22580:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22584:	f083 0302 	eor.w	r3, r3, #2
   22588:	6a22      	ldr	r2, [r4, #32]
   2258a:	7812      	ldrb	r2, [r2, #0]
   2258c:	4293      	cmp	r3, r2
   2258e:	d19e      	bne.n	224ce <net_6lo_compress+0x2de>
				return true;
   22590:	f8dd a004 	ldr.w	sl, [sp, #4]
   22594:	e79b      	b.n	224ce <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22596:	6a21      	ldr	r1, [r4, #32]
   22598:	2202      	movs	r2, #2
   2259a:	3101      	adds	r1, #1
   2259c:	f10b 0009 	add.w	r0, fp, #9
   225a0:	f007 fd82 	bl	2a0a8 <memcmp>
   225a4:	2800      	cmp	r0, #0
   225a6:	d192      	bne.n	224ce <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   225a8:	6a21      	ldr	r1, [r4, #32]
   225aa:	2203      	movs	r2, #3
   225ac:	4411      	add	r1, r2
   225ae:	f10b 000d 	add.w	r0, fp, #13
   225b2:	f007 fd79 	bl	2a0a8 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   225b6:	2800      	cmp	r0, #0
   225b8:	d189      	bne.n	224ce <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   225ba:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   225be:	2bff      	cmp	r3, #255	; 0xff
   225c0:	d185      	bne.n	224ce <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   225c2:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   225c6:	2bfe      	cmp	r3, #254	; 0xfe
   225c8:	d181      	bne.n	224ce <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   225ca:	f89b 3008 	ldrb.w	r3, [fp, #8]
   225ce:	f083 0302 	eor.w	r3, r3, #2
   225d2:	6a22      	ldr	r2, [r4, #32]
   225d4:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   225d6:	4293      	cmp	r3, r2
   225d8:	f47f af79 	bne.w	224ce <net_6lo_compress+0x2de>
				return true;
   225dc:	f8dd a004 	ldr.w	sl, [sp, #4]
   225e0:	e775      	b.n	224ce <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   225e2:	6a21      	ldr	r1, [r4, #32]
   225e4:	3a01      	subs	r2, #1
   225e6:	3101      	adds	r1, #1
   225e8:	f10b 0009 	add.w	r0, fp, #9
   225ec:	f007 fd5c 	bl	2a0a8 <memcmp>
   225f0:	2800      	cmp	r0, #0
   225f2:	f47f af6c 	bne.w	224ce <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   225f6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   225fa:	f083 0302 	eor.w	r3, r3, #2
   225fe:	6a22      	ldr	r2, [r4, #32]
   22600:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   22602:	4293      	cmp	r3, r2
   22604:	f47f af63 	bne.w	224ce <net_6lo_compress+0x2de>
			return true;
   22608:	f8dd a004 	ldr.w	sl, [sp, #4]
   2260c:	e75f      	b.n	224ce <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   2260e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22612:	7853      	ldrb	r3, [r2, #1]
   22614:	f043 0310 	orr.w	r3, r3, #16
   22618:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   2261a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2261e:	2208      	movs	r2, #8
   22620:	f106 0110 	add.w	r1, r6, #16
   22624:	4448      	add	r0, r9
   22626:	f7dd fe4b 	bl	2c0 <memcpy>
				offset += 8;
   2262a:	f109 0908 	add.w	r9, r9, #8
   2262e:	fa5f f989 	uxtb.w	r9, r9
   22632:	e6d1      	b.n	223d8 <net_6lo_compress+0x1e8>
				return 0;
   22634:	f04f 0900 	mov.w	r9, #0
   22638:	e6ce      	b.n	223d8 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   2263a:	4640      	mov	r0, r8
   2263c:	f7fb f813 	bl	1d666 <net_pkt_frag_unref>
		return false;
   22640:	2000      	movs	r0, #0
   22642:	e5f9      	b.n	22238 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   22644:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22648:	7853      	ldrb	r3, [r2, #1]
   2264a:	f043 0308 	orr.w	r3, r3, #8
   2264e:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   22650:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22652:	2b02      	cmp	r3, #2
   22654:	d00a      	beq.n	2266c <net_6lo_compress+0x47c>
   22656:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   22658:	b9db      	cbnz	r3, 22692 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   2265a:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2265c:	bb63      	cbnz	r3, 226b8 <net_6lo_compress+0x4c8>
   2265e:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22660:	bba2      	cbnz	r2, 226cc <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   22662:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22666:	b39a      	cbz	r2, 226d0 <net_6lo_compress+0x4e0>
   22668:	2200      	movs	r2, #0
   2266a:	e026      	b.n	226ba <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2266c:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   2266e:	b943      	cbnz	r3, 22682 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22670:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22672:	b943      	cbnz	r3, 22686 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22674:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22676:	b943      	cbnz	r3, 2268a <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   22678:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2267c:	b13b      	cbz	r3, 2268e <net_6lo_compress+0x49e>
   2267e:	2300      	movs	r3, #0
   22680:	e7ea      	b.n	22658 <net_6lo_compress+0x468>
   22682:	2300      	movs	r3, #0
   22684:	e7e8      	b.n	22658 <net_6lo_compress+0x468>
   22686:	2300      	movs	r3, #0
   22688:	e7e6      	b.n	22658 <net_6lo_compress+0x468>
   2268a:	2300      	movs	r3, #0
   2268c:	e7e4      	b.n	22658 <net_6lo_compress+0x468>
   2268e:	2301      	movs	r3, #1
   22690:	e7e2      	b.n	22658 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22692:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22696:	7853      	ldrb	r3, [r2, #1]
   22698:	f043 0303 	orr.w	r3, r3, #3
   2269c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   2269e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   226a2:	2201      	movs	r2, #1
   226a4:	f106 0127 	add.w	r1, r6, #39	; 0x27
   226a8:	4448      	add	r0, r9
   226aa:	f7dd fe09 	bl	2c0 <memcpy>
		offset++;
   226ae:	f109 0901 	add.w	r9, r9, #1
   226b2:	fa5f f989 	uxtb.w	r9, r9
   226b6:	e6a9      	b.n	2240c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   226b8:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   226ba:	b95a      	cbnz	r2, 226d4 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   226bc:	bb43      	cbnz	r3, 22710 <net_6lo_compress+0x520>
   226be:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   226c0:	bbab      	cbnz	r3, 2272e <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   226c2:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   226c6:	b3a3      	cbz	r3, 22732 <net_6lo_compress+0x542>
   226c8:	2300      	movs	r3, #0
   226ca:	e022      	b.n	22712 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   226cc:	2200      	movs	r2, #0
   226ce:	e7f4      	b.n	226ba <net_6lo_compress+0x4ca>
   226d0:	2201      	movs	r2, #1
   226d2:	e7f2      	b.n	226ba <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   226d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   226d8:	7853      	ldrb	r3, [r2, #1]
   226da:	f043 0302 	orr.w	r3, r3, #2
   226de:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   226e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   226e4:	2201      	movs	r2, #1
   226e6:	f106 0119 	add.w	r1, r6, #25
   226ea:	4448      	add	r0, r9
   226ec:	f7dd fde8 	bl	2c0 <memcpy>
		offset++;
   226f0:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   226f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   226f8:	2203      	movs	r2, #3
   226fa:	f106 0125 	add.w	r1, r6, #37	; 0x25
   226fe:	fa53 f080 	uxtab	r0, r3, r0
   22702:	f7dd fddd 	bl	2c0 <memcpy>
		offset += 3;
   22706:	f109 0904 	add.w	r9, r9, #4
   2270a:	fa5f f989 	uxtb.w	r9, r9
   2270e:	e67d      	b.n	2240c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22710:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   22712:	b983      	cbnz	r3, 22736 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   22714:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22718:	2210      	movs	r2, #16
   2271a:	f106 0118 	add.w	r1, r6, #24
   2271e:	4448      	add	r0, r9
   22720:	f7dd fdce 	bl	2c0 <memcpy>
		offset += 16;
   22724:	f109 0910 	add.w	r9, r9, #16
   22728:	fa5f f989 	uxtb.w	r9, r9
   2272c:	e66e      	b.n	2240c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   2272e:	2300      	movs	r3, #0
   22730:	e7ef      	b.n	22712 <net_6lo_compress+0x522>
   22732:	2301      	movs	r3, #1
   22734:	e7ed      	b.n	22712 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22736:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2273a:	7853      	ldrb	r3, [r2, #1]
   2273c:	f043 0301 	orr.w	r3, r3, #1
   22740:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22742:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22746:	2201      	movs	r2, #1
   22748:	f106 0119 	add.w	r1, r6, #25
   2274c:	4448      	add	r0, r9
   2274e:	f7dd fdb7 	bl	2c0 <memcpy>
		offset++;
   22752:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22756:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2275a:	2205      	movs	r2, #5
   2275c:	f106 0123 	add.w	r1, r6, #35	; 0x23
   22760:	fa53 f080 	uxtab	r0, r3, r0
   22764:	f7dd fdac 	bl	2c0 <memcpy>
		offset += 5;
   22768:	f109 0906 	add.w	r9, r9, #6
   2276c:	fa5f f989 	uxtb.w	r9, r9
   22770:	e64c      	b.n	2240c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22772:	8b73      	ldrh	r3, [r6, #26]
   22774:	b91b      	cbnz	r3, 2277e <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22776:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22778:	b343      	cbz	r3, 227cc <net_6lo_compress+0x5dc>
   2277a:	2300      	movs	r3, #0
   2277c:	e000      	b.n	22780 <net_6lo_compress+0x590>
   2277e:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22780:	9301      	str	r3, [sp, #4]
   22782:	2b00      	cmp	r3, #0
   22784:	f43f ae36 	beq.w	223f4 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22788:	6a33      	ldr	r3, [r6, #32]
   2278a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2278e:	d01f      	beq.n	227d0 <net_6lo_compress+0x5e0>
   22790:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   22792:	469a      	mov	sl, r3
   22794:	bb1b      	cbnz	r3, 227de <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   22796:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   2279a:	f000 80bf 	beq.w	2291c <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   2279e:	f116 0b18 	adds.w	fp, r6, #24
   227a2:	d008      	beq.n	227b6 <net_6lo_compress+0x5c6>
   227a4:	b13b      	cbz	r3, 227b6 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   227a6:	791a      	ldrb	r2, [r3, #4]
   227a8:	2a06      	cmp	r2, #6
   227aa:	d03e      	beq.n	2282a <net_6lo_compress+0x63a>
   227ac:	2a08      	cmp	r2, #8
   227ae:	f000 808c 	beq.w	228ca <net_6lo_compress+0x6da>
   227b2:	2a02      	cmp	r2, #2
   227b4:	d026      	beq.n	22804 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   227b6:	f1ba 0f00 	cmp.w	sl, #0
   227ba:	f000 809c 	beq.w	228f6 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   227be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   227c2:	7853      	ldrb	r3, [r2, #1]
   227c4:	f043 0303 	orr.w	r3, r3, #3
   227c8:	7053      	strb	r3, [r2, #1]
   227ca:	e61f      	b.n	2240c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   227cc:	2301      	movs	r3, #1
   227ce:	e7d7      	b.n	22780 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   227d0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   227d2:	2bfe      	cmp	r3, #254	; 0xfe
   227d4:	d001      	beq.n	227da <net_6lo_compress+0x5ea>
   227d6:	2300      	movs	r3, #0
   227d8:	e7db      	b.n	22792 <net_6lo_compress+0x5a2>
   227da:	2301      	movs	r3, #1
   227dc:	e7d9      	b.n	22792 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   227de:	f8d8 2008 	ldr.w	r2, [r8, #8]
   227e2:	7853      	ldrb	r3, [r2, #1]
   227e4:	f043 0302 	orr.w	r3, r3, #2
   227e8:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   227ea:	f8d8 0008 	ldr.w	r0, [r8, #8]
   227ee:	2202      	movs	r2, #2
   227f0:	f106 0126 	add.w	r1, r6, #38	; 0x26
   227f4:	4448      	add	r0, r9
   227f6:	f7dd fd63 	bl	2c0 <memcpy>
			offset += 2;
   227fa:	f109 0902 	add.w	r9, r9, #2
   227fe:	fa5f f989 	uxtb.w	r9, r9
   22802:	e603      	b.n	2240c <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   22804:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22806:	f10b 000e 	add.w	r0, fp, #14
   2280a:	f007 fc4d 	bl	2a0a8 <memcmp>
   2280e:	2800      	cmp	r0, #0
   22810:	d1d1      	bne.n	227b6 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   22812:	f8db 3008 	ldr.w	r3, [fp, #8]
   22816:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2281a:	d1cc      	bne.n	227b6 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   2281c:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22820:	2bfe      	cmp	r3, #254	; 0xfe
   22822:	d1c8      	bne.n	227b6 <net_6lo_compress+0x5c6>
			return true;
   22824:	f8dd a004 	ldr.w	sl, [sp, #4]
   22828:	e7c5      	b.n	227b6 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2282a:	795b      	ldrb	r3, [r3, #5]
   2282c:	2b03      	cmp	r3, #3
   2282e:	d026      	beq.n	2287e <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22830:	2b02      	cmp	r3, #2
   22832:	d1c0      	bne.n	227b6 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22834:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22836:	2202      	movs	r2, #2
   22838:	3101      	adds	r1, #1
   2283a:	f10b 0009 	add.w	r0, fp, #9
   2283e:	f007 fc33 	bl	2a0a8 <memcmp>
   22842:	2800      	cmp	r0, #0
   22844:	d1b7      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22846:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22848:	2203      	movs	r2, #3
   2284a:	4411      	add	r1, r2
   2284c:	f10b 000d 	add.w	r0, fp, #13
   22850:	f007 fc2a 	bl	2a0a8 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22854:	2800      	cmp	r0, #0
   22856:	d1ae      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22858:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2285c:	2bff      	cmp	r3, #255	; 0xff
   2285e:	d1aa      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   22860:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22864:	2bfe      	cmp	r3, #254	; 0xfe
   22866:	d1a6      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22868:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2286c:	f083 0302 	eor.w	r3, r3, #2
   22870:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22872:	7812      	ldrb	r2, [r2, #0]
   22874:	4293      	cmp	r3, r2
   22876:	d19e      	bne.n	227b6 <net_6lo_compress+0x5c6>
				return true;
   22878:	f8dd a004 	ldr.w	sl, [sp, #4]
   2287c:	e79b      	b.n	227b6 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2287e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22880:	2202      	movs	r2, #2
   22882:	3101      	adds	r1, #1
   22884:	f10b 0009 	add.w	r0, fp, #9
   22888:	f007 fc0e 	bl	2a0a8 <memcmp>
   2288c:	2800      	cmp	r0, #0
   2288e:	d192      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22890:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22892:	2203      	movs	r2, #3
   22894:	4411      	add	r1, r2
   22896:	f10b 000d 	add.w	r0, fp, #13
   2289a:	f007 fc05 	bl	2a0a8 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2289e:	2800      	cmp	r0, #0
   228a0:	d189      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   228a2:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   228a6:	2bff      	cmp	r3, #255	; 0xff
   228a8:	d185      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   228aa:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   228ae:	2bfe      	cmp	r3, #254	; 0xfe
   228b0:	d181      	bne.n	227b6 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   228b2:	f89b 3008 	ldrb.w	r3, [fp, #8]
   228b6:	f083 0302 	eor.w	r3, r3, #2
   228ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   228bc:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   228be:	4293      	cmp	r3, r2
   228c0:	f47f af79 	bne.w	227b6 <net_6lo_compress+0x5c6>
				return true;
   228c4:	f8dd a004 	ldr.w	sl, [sp, #4]
   228c8:	e775      	b.n	227b6 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   228ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   228cc:	3a01      	subs	r2, #1
   228ce:	3101      	adds	r1, #1
   228d0:	f10b 0009 	add.w	r0, fp, #9
   228d4:	f007 fbe8 	bl	2a0a8 <memcmp>
   228d8:	2800      	cmp	r0, #0
   228da:	f47f af6c 	bne.w	227b6 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   228de:	f89b 3008 	ldrb.w	r3, [fp, #8]
   228e2:	f083 0302 	eor.w	r3, r3, #2
   228e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   228e8:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   228ea:	4293      	cmp	r3, r2
   228ec:	f47f af63 	bne.w	227b6 <net_6lo_compress+0x5c6>
			return true;
   228f0:	f8dd a004 	ldr.w	sl, [sp, #4]
   228f4:	e75f      	b.n	227b6 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   228f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   228fa:	7853      	ldrb	r3, [r2, #1]
   228fc:	f043 0301 	orr.w	r3, r3, #1
   22900:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   22902:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22906:	2208      	movs	r2, #8
   22908:	f106 0120 	add.w	r1, r6, #32
   2290c:	4448      	add	r0, r9
   2290e:	f7dd fcd7 	bl	2c0 <memcpy>
				offset += 8;
   22912:	f109 0908 	add.w	r9, r9, #8
   22916:	fa5f f989 	uxtb.w	r9, r9
   2291a:	e577      	b.n	2240c <net_6lo_compress+0x21c>
				return 0;
   2291c:	f04f 0900 	mov.w	r9, #0
   22920:	e574      	b.n	2240c <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   22922:	4640      	mov	r0, r8
   22924:	f7fa fe9f 	bl	1d666 <net_pkt_frag_unref>
		return false;
   22928:	2000      	movs	r0, #0
   2292a:	e485      	b.n	22238 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   2292c:	a902      	add	r1, sp, #8
   2292e:	4620      	mov	r0, r4
   22930:	f000 fc68 	bl	23204 <net_udp_get_hdr>
   22934:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   22936:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2293a:	22f0      	movs	r2, #240	; 0xf0
   2293c:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   22940:	8802      	ldrh	r2, [r0, #0]
   22942:	0a13      	lsrs	r3, r2, #8
   22944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22948:	b29b      	uxth	r3, r3
   2294a:	f640 720b 	movw	r2, #3851	; 0xf0b
   2294e:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   22952:	d025      	beq.n	229a0 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22954:	8872      	ldrh	r2, [r6, #2]
   22956:	b2d2      	uxtb	r2, r2
   22958:	2af0      	cmp	r2, #240	; 0xf0
   2295a:	d046      	beq.n	229ea <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   2295c:	0a1b      	lsrs	r3, r3, #8
   2295e:	2bf0      	cmp	r3, #240	; 0xf0
   22960:	d062      	beq.n	22a28 <net_6lo_compress+0x838>
		offset++;
   22962:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   22966:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2296a:	2204      	movs	r2, #4
   2296c:	4631      	mov	r1, r6
   2296e:	fa53 f080 	uxtab	r0, r3, r0
   22972:	f7dd fca5 	bl	2c0 <memcpy>
		offset += 4;
   22976:	f109 0905 	add.w	r9, r9, #5
   2297a:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   2297e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22982:	2202      	movs	r2, #2
   22984:	1db1      	adds	r1, r6, #6
   22986:	4448      	add	r0, r9
   22988:	f7dd fc9a 	bl	2c0 <memcpy>
	offset += 2;
   2298c:	f109 0902 	add.w	r9, r9, #2
   22990:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   22994:	4631      	mov	r1, r6
   22996:	4620      	mov	r0, r4
   22998:	f000 fc74 	bl	23284 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   2299c:	2630      	movs	r6, #48	; 0x30
   2299e:	e53e      	b.n	2241e <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   229a0:	8841      	ldrh	r1, [r0, #2]
   229a2:	0a0a      	lsrs	r2, r1, #8
   229a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   229a8:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   229ac:	f640 710b 	movw	r1, #3851	; 0xf0b
   229b0:	428a      	cmp	r2, r1
   229b2:	d1cf      	bne.n	22954 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   229b4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229b8:	f812 3009 	ldrb.w	r3, [r2, r9]
   229bc:	f043 0303 	orr.w	r3, r3, #3
   229c0:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   229c4:	f109 0101 	add.w	r1, r9, #1
   229c8:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   229ca:	8803      	ldrh	r3, [r0, #0]
   229cc:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   229ce:	011b      	lsls	r3, r3, #4
   229d0:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   229d2:	8842      	ldrh	r2, [r0, #2]
   229d4:	f3c2 2203 	ubfx	r2, r2, #8, #4
   229d8:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   229da:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229de:	f109 0902 	add.w	r9, r9, #2
   229e2:	fa5f f989 	uxtb.w	r9, r9
   229e6:	5453      	strb	r3, [r2, r1]
   229e8:	e7c9      	b.n	2297e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   229ea:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229ee:	f812 3009 	ldrb.w	r3, [r2, r9]
   229f2:	f043 0301 	orr.w	r3, r3, #1
   229f6:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   229fa:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   229fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a02:	2202      	movs	r2, #2
   22a04:	4631      	mov	r1, r6
   22a06:	fa53 f080 	uxtab	r0, r3, r0
   22a0a:	f7dd fc59 	bl	2c0 <memcpy>
		offset += 2;
   22a0e:	f109 0303 	add.w	r3, r9, #3
   22a12:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   22a14:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22a18:	f109 0904 	add.w	r9, r9, #4
   22a1c:	fa5f f989 	uxtb.w	r9, r9
   22a20:	8872      	ldrh	r2, [r6, #2]
   22a22:	0a12      	lsrs	r2, r2, #8
   22a24:	54ca      	strb	r2, [r1, r3]
   22a26:	e7aa      	b.n	2297e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   22a28:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22a2c:	f812 3009 	ldrb.w	r3, [r2, r9]
   22a30:	f043 0302 	orr.w	r3, r3, #2
   22a34:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22a38:	f109 0301 	add.w	r3, r9, #1
   22a3c:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22a40:	f109 0002 	add.w	r0, r9, #2
   22a44:	4631      	mov	r1, r6
   22a46:	f831 2b02 	ldrh.w	r2, [r1], #2
   22a4a:	0a12      	lsrs	r2, r2, #8
   22a4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a50:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   22a54:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a58:	2202      	movs	r2, #2
   22a5a:	fa53 f080 	uxtab	r0, r3, r0
   22a5e:	f7dd fc2f 	bl	2c0 <memcpy>
		offset += 2;
   22a62:	f109 0904 	add.w	r9, r9, #4
   22a66:	fa5f f989 	uxtb.w	r9, r9
   22a6a:	e788      	b.n	2297e <net_6lo_compress+0x78e>
		return false;
   22a6c:	2000      	movs	r0, #0
   22a6e:	f7ff bbe3 	b.w	22238 <net_6lo_compress+0x48>
		return false;
   22a72:	2000      	movs	r0, #0
   22a74:	f7ff bbe0 	b.w	22238 <net_6lo_compress+0x48>
	return true;
   22a78:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22a7a:	f7ff bbdd 	b.w	22238 <net_6lo_compress+0x48>
		return false;
   22a7e:	4628      	mov	r0, r5
   22a80:	f7ff bbda 	b.w	22238 <net_6lo_compress+0x48>
	return true;
   22a84:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   22a86:	f7ff bbd7 	b.w	22238 <net_6lo_compress+0x48>

00022a8a <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22a8a:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22a8c:	6883      	ldr	r3, [r0, #8]
   22a8e:	689b      	ldr	r3, [r3, #8]
   22a90:	781b      	ldrb	r3, [r3, #0]
   22a92:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22a96:	2a60      	cmp	r2, #96	; 0x60
   22a98:	d005      	beq.n	22aa6 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22a9a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22a9e:	2b41      	cmp	r3, #65	; 0x41
   22aa0:	d004      	beq.n	22aac <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22aa2:	2001      	movs	r0, #1
}
   22aa4:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22aa6:	f7ff f873 	bl	21b90 <uncompress_IPHC_header>
   22aaa:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22aac:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22aae:	68a0      	ldr	r0, [r4, #8]
   22ab0:	89a2      	ldrh	r2, [r4, #12]
   22ab2:	3a01      	subs	r2, #1
   22ab4:	1c41      	adds	r1, r0, #1
   22ab6:	f007 fb27 	bl	2a108 <memmove>
	frag->len -= 1;
   22aba:	89a3      	ldrh	r3, [r4, #12]
   22abc:	3b01      	subs	r3, #1
   22abe:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22ac0:	2001      	movs	r0, #1
   22ac2:	bd10      	pop	{r4, pc}

00022ac4 <net_route_entry_remove>:
{
   22ac4:	4770      	bx	lr

00022ac6 <net_route_entries_table_clear>:
{
   22ac6:	4770      	bx	lr

00022ac8 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22ac8:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22aca:	f7fc fbd3 	bl	1f274 <net_nbr_unref>

	return 0;
}
   22ace:	2000      	movs	r0, #0
   22ad0:	bd08      	pop	{r3, pc}
	...

00022ad4 <net_route_get_nbr>:
{
   22ad4:	b430      	push	{r4, r5}
   22ad6:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22ad8:	2300      	movs	r3, #0
   22ada:	e000      	b.n	22ade <net_route_get_nbr+0xa>
   22adc:	3301      	adds	r3, #1
   22ade:	2b07      	cmp	r3, #7
   22ae0:	dc0b      	bgt.n	22afa <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22ae2:	4c07      	ldr	r4, [pc, #28]	; (22b00 <net_route_get_nbr+0x2c>)
   22ae4:	00da      	lsls	r2, r3, #3
   22ae6:	1ad2      	subs	r2, r2, r3
   22ae8:	00d1      	lsls	r1, r2, #3
   22aea:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22aec:	5c62      	ldrb	r2, [r4, r1]
   22aee:	2a00      	cmp	r2, #0
   22af0:	d0f4      	beq.n	22adc <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22af2:	68c2      	ldr	r2, [r0, #12]
   22af4:	42aa      	cmp	r2, r5
   22af6:	d1f1      	bne.n	22adc <net_route_get_nbr+0x8>
   22af8:	e000      	b.n	22afc <net_route_get_nbr+0x28>
	return NULL;
   22afa:	2000      	movs	r0, #0
}
   22afc:	bc30      	pop	{r4, r5}
   22afe:	4770      	bx	lr
   22b00:	2000c27c 	.word	0x2000c27c

00022b04 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b08:	b083      	sub	sp, #12
   22b0a:	4606      	mov	r6, r0
   22b0c:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22b0e:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22b10:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22b12:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22b14:	e00b      	b.n	22b2e <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22b16:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22b1a:	00da      	lsls	r2, r3, #3
   22b1c:	4b3f      	ldr	r3, [pc, #252]	; (22c1c <net_route_lookup+0x118>)
   22b1e:	4413      	add	r3, r2
   22b20:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22b24:	f898 3020 	ldrb.w	r3, [r8, #32]
   22b28:	429d      	cmp	r5, r3
   22b2a:	d917      	bls.n	22b5c <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22b2c:	3401      	adds	r4, #1
   22b2e:	2c07      	cmp	r4, #7
   22b30:	dc46      	bgt.n	22bc0 <net_route_lookup+0xbc>
   22b32:	f015 0f80 	tst.w	r5, #128	; 0x80
   22b36:	d143      	bne.n	22bc0 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22b38:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22b3c:	00d3      	lsls	r3, r2, #3
   22b3e:	4a37      	ldr	r2, [pc, #220]	; (22c1c <net_route_lookup+0x118>)
   22b40:	5cd3      	ldrb	r3, [r2, r3]
   22b42:	2b00      	cmp	r3, #0
   22b44:	d0f2      	beq.n	22b2c <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   22b46:	2e00      	cmp	r6, #0
   22b48:	d0e5      	beq.n	22b16 <net_route_lookup+0x12>
   22b4a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22b4e:	00da      	lsls	r2, r3, #3
   22b50:	4b32      	ldr	r3, [pc, #200]	; (22c1c <net_route_lookup+0x118>)
   22b52:	4413      	add	r3, r2
   22b54:	689b      	ldr	r3, [r3, #8]
   22b56:	429e      	cmp	r6, r3
   22b58:	d1e8      	bne.n	22b2c <net_route_lookup+0x28>
   22b5a:	e7dc      	b.n	22b16 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22b5c:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22b60:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   22b64:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22b68:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22b6c:	2b80      	cmp	r3, #128	; 0x80
   22b6e:	d906      	bls.n	22b7e <net_route_lookup+0x7a>
		return false;
   22b70:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   22b72:	2b00      	cmp	r3, #0
   22b74:	d0da      	beq.n	22b2c <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   22b76:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22b7a:	4647      	mov	r7, r8
   22b7c:	e7d6      	b.n	22b2c <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22b7e:	465a      	mov	r2, fp
   22b80:	4649      	mov	r1, r9
   22b82:	9801      	ldr	r0, [sp, #4]
   22b84:	f007 fa90 	bl	2a0a8 <memcmp>
   22b88:	b9b0      	cbnz	r0, 22bb8 <net_route_lookup+0xb4>
	if (!remain) {
   22b8a:	f1ba 0f00 	cmp.w	sl, #0
   22b8e:	d015      	beq.n	22bbc <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22b90:	f1ca 0208 	rsb	r2, sl, #8
   22b94:	23ff      	movs	r3, #255	; 0xff
   22b96:	4093      	lsls	r3, r2
   22b98:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22b9c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22ba0:	9b01      	ldr	r3, [sp, #4]
   22ba2:	f813 300b 	ldrb.w	r3, [r3, fp]
   22ba6:	f819 200b 	ldrb.w	r2, [r9, fp]
   22baa:	4053      	eors	r3, r2
   22bac:	ea1a 0f03 	tst.w	sl, r3
   22bb0:	bf0c      	ite	eq
   22bb2:	2301      	moveq	r3, #1
   22bb4:	2300      	movne	r3, #0
   22bb6:	e7dc      	b.n	22b72 <net_route_lookup+0x6e>
		return false;
   22bb8:	2300      	movs	r3, #0
   22bba:	e7da      	b.n	22b72 <net_route_lookup+0x6e>
		return true;
   22bbc:	2301      	movs	r3, #1
   22bbe:	e7d8      	b.n	22b72 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22bc0:	b1c7      	cbz	r7, 22bf4 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22bc2:	463a      	mov	r2, r7
	return list->head;
   22bc4:	4b16      	ldr	r3, [pc, #88]	; (22c20 <net_route_lookup+0x11c>)
   22bc6:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22bc8:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22bca:	b16b      	cbz	r3, 22be8 <net_route_lookup+0xe4>
		if (test == node) {
   22bcc:	429a      	cmp	r2, r3
   22bce:	d002      	beq.n	22bd6 <net_route_lookup+0xd2>
		prev = test;
   22bd0:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22bd2:	681b      	ldr	r3, [r3, #0]
   22bd4:	e7f9      	b.n	22bca <net_route_lookup+0xc6>
	if (!prev_node) {
   22bd6:	b189      	cbz	r1, 22bfc <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22bd8:	683b      	ldr	r3, [r7, #0]
   22bda:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22bdc:	4b10      	ldr	r3, [pc, #64]	; (22c20 <net_route_lookup+0x11c>)
   22bde:	685b      	ldr	r3, [r3, #4]
   22be0:	429a      	cmp	r2, r3
   22be2:	d014      	beq.n	22c0e <net_route_lookup+0x10a>
	node->next = NULL;
   22be4:	2300      	movs	r3, #0
   22be6:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22be8:	4b0d      	ldr	r3, [pc, #52]	; (22c20 <net_route_lookup+0x11c>)
   22bea:	6819      	ldr	r1, [r3, #0]
   22bec:	6039      	str	r1, [r7, #0]
	list->head = node;
   22bee:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22bf0:	685b      	ldr	r3, [r3, #4]
   22bf2:	b17b      	cbz	r3, 22c14 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22bf4:	4638      	mov	r0, r7
   22bf6:	b003      	add	sp, #12
   22bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22bfc:	6839      	ldr	r1, [r7, #0]
   22bfe:	4b08      	ldr	r3, [pc, #32]	; (22c20 <net_route_lookup+0x11c>)
   22c00:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22c02:	685b      	ldr	r3, [r3, #4]
   22c04:	429a      	cmp	r2, r3
   22c06:	d1ed      	bne.n	22be4 <net_route_lookup+0xe0>
			list->tail = list->head;
   22c08:	4b05      	ldr	r3, [pc, #20]	; (22c20 <net_route_lookup+0x11c>)
   22c0a:	6059      	str	r1, [r3, #4]
   22c0c:	e7ea      	b.n	22be4 <net_route_lookup+0xe0>
			list->tail = prev_node;
   22c0e:	4b04      	ldr	r3, [pc, #16]	; (22c20 <net_route_lookup+0x11c>)
   22c10:	6059      	str	r1, [r3, #4]
   22c12:	e7e7      	b.n	22be4 <net_route_lookup+0xe0>
		list->tail = list->head;
   22c14:	4b02      	ldr	r3, [pc, #8]	; (22c20 <net_route_lookup+0x11c>)
   22c16:	605a      	str	r2, [r3, #4]
	return found;
   22c18:	e7ec      	b.n	22bf4 <net_route_lookup+0xf0>
   22c1a:	bf00      	nop
   22c1c:	2000c27c 	.word	0x2000c27c
   22c20:	20001ed4 	.word	0x20001ed4

00022c24 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22c24:	2800      	cmp	r0, #0
   22c26:	d046      	beq.n	22cb6 <net_route_del+0x92>
{
   22c28:	b538      	push	{r3, r4, r5, lr}
   22c2a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22c2c:	4601      	mov	r1, r0
	return list->head;
   22c2e:	4b25      	ldr	r3, [pc, #148]	; (22cc4 <net_route_del+0xa0>)
   22c30:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22c32:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22c34:	b16b      	cbz	r3, 22c52 <net_route_del+0x2e>
		if (test == node) {
   22c36:	4299      	cmp	r1, r3
   22c38:	d002      	beq.n	22c40 <net_route_del+0x1c>
		prev = test;
   22c3a:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22c3c:	681b      	ldr	r3, [r3, #0]
   22c3e:	e7f9      	b.n	22c34 <net_route_del+0x10>
	if (!prev_node) {
   22c40:	b1aa      	cbz	r2, 22c6e <net_route_del+0x4a>
		prev_node->next = node->next;
   22c42:	6823      	ldr	r3, [r4, #0]
   22c44:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22c46:	4b1f      	ldr	r3, [pc, #124]	; (22cc4 <net_route_del+0xa0>)
   22c48:	685b      	ldr	r3, [r3, #4]
   22c4a:	429c      	cmp	r4, r3
   22c4c:	d018      	beq.n	22c80 <net_route_del+0x5c>
	node->next = NULL;
   22c4e:	2300      	movs	r3, #0
   22c50:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   22c52:	4620      	mov	r0, r4
   22c54:	f7ff ff3e 	bl	22ad4 <net_route_get_nbr>
	if (!nbr) {
   22c58:	4605      	mov	r5, r0
   22c5a:	2800      	cmp	r0, #0
   22c5c:	d02e      	beq.n	22cbc <net_route_del+0x98>
   22c5e:	2300      	movs	r3, #0
   22c60:	461a      	mov	r2, r3
   22c62:	6881      	ldr	r1, [r0, #8]
   22c64:	4818      	ldr	r0, [pc, #96]	; (22cc8 <net_route_del+0xa4>)
   22c66:	f000 f977 	bl	22f58 <net_mgmt_event_notify_with_info>
	return list->head;
   22c6a:	6864      	ldr	r4, [r4, #4]
   22c6c:	e011      	b.n	22c92 <net_route_del+0x6e>
		list->head = node->next;
   22c6e:	6822      	ldr	r2, [r4, #0]
   22c70:	4b14      	ldr	r3, [pc, #80]	; (22cc4 <net_route_del+0xa0>)
   22c72:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22c74:	685b      	ldr	r3, [r3, #4]
   22c76:	429c      	cmp	r4, r3
   22c78:	d1e9      	bne.n	22c4e <net_route_del+0x2a>
			list->tail = list->head;
   22c7a:	4b12      	ldr	r3, [pc, #72]	; (22cc4 <net_route_del+0xa0>)
   22c7c:	605a      	str	r2, [r3, #4]
   22c7e:	e7e6      	b.n	22c4e <net_route_del+0x2a>
			list->tail = prev_node;
   22c80:	4b10      	ldr	r3, [pc, #64]	; (22cc4 <net_route_del+0xa0>)
   22c82:	605a      	str	r2, [r3, #4]
   22c84:	e7e3      	b.n	22c4e <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22c86:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c88:	b154      	cbz	r4, 22ca0 <net_route_del+0x7c>
	return node->next;
   22c8a:	6823      	ldr	r3, [r4, #0]
   22c8c:	b153      	cbz	r3, 22ca4 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c8e:	b15a      	cbz	r2, 22ca8 <net_route_del+0x84>
	return node->next;
   22c90:	6824      	ldr	r4, [r4, #0]
   22c92:	b15c      	cbz	r4, 22cac <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22c94:	6860      	ldr	r0, [r4, #4]
   22c96:	2800      	cmp	r0, #0
   22c98:	d0f5      	beq.n	22c86 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22c9a:	f7ff ff15 	bl	22ac8 <nbr_nexthop_put>
   22c9e:	e7f2      	b.n	22c86 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ca0:	4623      	mov	r3, r4
   22ca2:	e7f3      	b.n	22c8c <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22ca4:	2400      	movs	r4, #0
   22ca6:	e7f4      	b.n	22c92 <net_route_del+0x6e>
   22ca8:	2400      	movs	r4, #0
   22caa:	e7f2      	b.n	22c92 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22cac:	4628      	mov	r0, r5
   22cae:	f7fc fae1 	bl	1f274 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22cb2:	2000      	movs	r0, #0
   22cb4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22cb6:	f06f 0015 	mvn.w	r0, #21
   22cba:	4770      	bx	lr
		return -ENOENT;
   22cbc:	f06f 0001 	mvn.w	r0, #1
}
   22cc0:	bd38      	pop	{r3, r4, r5, pc}
   22cc2:	bf00      	nop
   22cc4:	20001ed4 	.word	0x20001ed4
   22cc8:	f060000c 	.word	0xf060000c

00022ccc <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22ccc:	b1b8      	cbz	r0, 22cfe <net_route_get_nexthop+0x32>
	return list->head;
   22cce:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22cd0:	b19b      	cbz	r3, 22cfa <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22cd2:	685a      	ldr	r2, [r3, #4]
   22cd4:	7851      	ldrb	r1, [r2, #1]
   22cd6:	29ff      	cmp	r1, #255	; 0xff
   22cd8:	d002      	beq.n	22ce0 <net_route_get_nexthop+0x14>
   22cda:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22cdc:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22cde:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22ce0:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ce2:	b123      	cbz	r3, 22cee <net_route_get_nexthop+0x22>
	return node->next;
   22ce4:	681a      	ldr	r2, [r3, #0]
   22ce6:	b132      	cbz	r2, 22cf6 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ce8:	b119      	cbz	r1, 22cf2 <net_route_get_nexthop+0x26>
	return node->next;
   22cea:	681b      	ldr	r3, [r3, #0]
   22cec:	e7f0      	b.n	22cd0 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22cee:	461a      	mov	r2, r3
   22cf0:	e7f9      	b.n	22ce6 <net_route_get_nexthop+0x1a>
   22cf2:	2300      	movs	r3, #0
   22cf4:	e7ec      	b.n	22cd0 <net_route_get_nexthop+0x4>
   22cf6:	2300      	movs	r3, #0
   22cf8:	e7ea      	b.n	22cd0 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22cfa:	2000      	movs	r0, #0
   22cfc:	4770      	bx	lr
		return NULL;
   22cfe:	2000      	movs	r0, #0
}
   22d00:	4770      	bx	lr
	...

00022d04 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d06:	4607      	mov	r7, r0
   22d08:	460e      	mov	r6, r1
	int i, ret = 0;
   22d0a:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22d0c:	462c      	mov	r4, r5
   22d0e:	e000      	b.n	22d12 <net_route_foreach+0xe>
   22d10:	3401      	adds	r4, #1
   22d12:	2c07      	cmp	r4, #7
   22d14:	dc0b      	bgt.n	22d2e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22d16:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22d1a:	00da      	lsls	r2, r3, #3
   22d1c:	4b05      	ldr	r3, [pc, #20]	; (22d34 <net_route_foreach+0x30>)
   22d1e:	4413      	add	r3, r2
   22d20:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22d22:	2800      	cmp	r0, #0
   22d24:	d0f4      	beq.n	22d10 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22d26:	4631      	mov	r1, r6
   22d28:	47b8      	blx	r7

		ret++;
   22d2a:	3501      	adds	r5, #1
   22d2c:	e7f0      	b.n	22d10 <net_route_foreach+0xc>
	}

	return ret;
}
   22d2e:	4628      	mov	r0, r5
   22d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d32:	bf00      	nop
   22d34:	2000c27c 	.word	0x2000c27c

00022d38 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d3a:	4607      	mov	r7, r0
   22d3c:	460c      	mov	r4, r1
   22d3e:	4615      	mov	r5, r2
   22d40:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   22d42:	f7fd f961 	bl	20008 <net_ipv6_nbr_lookup>
   22d46:	b120      	cbz	r0, 22d52 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22d48:	2300      	movs	r3, #0
   22d4a:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22d4c:	6034      	str	r4, [r6, #0]

		return true;
   22d4e:	2001      	movs	r0, #1
   22d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   22d52:	4621      	mov	r1, r4
   22d54:	4638      	mov	r0, r7
   22d56:	f7ff fed5 	bl	22b04 <net_route_lookup>
   22d5a:	6028      	str	r0, [r5, #0]
	if (*route) {
   22d5c:	b130      	cbz	r0, 22d6c <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22d5e:	f7ff ffb5 	bl	22ccc <net_route_get_nexthop>
   22d62:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   22d64:	b108      	cbz	r0, 22d6a <net_route_get_info+0x32>
			return false;
		}

		return true;
   22d66:	2001      	movs	r0, #1
   22d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22d6c:	4621      	mov	r1, r4
   22d6e:	2000      	movs	r0, #0
   22d70:	f7f8 fefe 	bl	1bb70 <net_if_ipv6_router_find_default>
		if (!router) {
   22d74:	4603      	mov	r3, r0
   22d76:	b118      	cbz	r0, 22d80 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22d78:	332c      	adds	r3, #44	; 0x2c
   22d7a:	6033      	str	r3, [r6, #0]

		return true;
   22d7c:	2001      	movs	r0, #1
   22d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22d80:	2000      	movs	r0, #0
	}

	return false;
}
   22d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d84 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   22d84:	b570      	push	{r4, r5, r6, lr}
   22d86:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22d88:	6940      	ldr	r0, [r0, #20]
   22d8a:	f7fd f93d 	bl	20008 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22d8e:	b330      	cbz	r0, 22dde <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22d90:	7840      	ldrb	r0, [r0, #1]
   22d92:	f7fc fb01 	bl	1f398 <net_nbr_get_lladdr>
	if (!lladdr) {
   22d96:	4605      	mov	r5, r0
   22d98:	b320      	cbz	r0, 22de4 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22d9a:	6a20      	ldr	r0, [r4, #32]
   22d9c:	b328      	cbz	r0, 22dea <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22d9e:	1cae      	adds	r6, r5, #2
   22da0:	786a      	ldrb	r2, [r5, #1]
   22da2:	4631      	mov	r1, r6
   22da4:	f007 f980 	bl	2a0a8 <memcmp>
   22da8:	b310      	cbz	r0, 22df0 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22daa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22dae:	f043 0304 	orr.w	r3, r3, #4
   22db2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22db6:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22db8:	691a      	ldr	r2, [r3, #16]
   22dba:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22dbc:	7d5a      	ldrb	r2, [r3, #21]
   22dbe:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22dc2:	7d1b      	ldrb	r3, [r3, #20]
   22dc4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22dc8:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22dca:	782b      	ldrb	r3, [r5, #0]
   22dcc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22dd0:	786b      	ldrb	r3, [r5, #1]
   22dd2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22dd6:	4620      	mov	r0, r4
   22dd8:	f7f8 f84a 	bl	1ae70 <net_send_data>
   22ddc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22dde:	f06f 0001 	mvn.w	r0, #1
   22de2:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22de4:	f06f 0002 	mvn.w	r0, #2
   22de8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22dea:	f06f 0015 	mvn.w	r0, #21
   22dee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22df0:	f06f 0015 	mvn.w	r0, #21
}
   22df4:	bd70      	pop	{r4, r5, r6, pc}

00022df6 <net_route_init>:

void net_route_init(void)
{
   22df6:	4770      	bx	lr

00022df8 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22dfa:	e079      	b.n	22ef0 <mgmt_thread+0xf8>
		out_event = 0;
   22dfc:	2100      	movs	r1, #0
   22dfe:	4a48      	ldr	r2, [pc, #288]	; (22f20 <mgmt_thread+0x128>)
   22e00:	8011      	strh	r1, [r2, #0]
   22e02:	e089      	b.n	22f18 <mgmt_thread+0x120>
		return NULL;
   22e04:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22e06:	b13e      	cbz	r6, 22e18 <mgmt_thread+0x20>
	return list->head;
   22e08:	4b46      	ldr	r3, [pc, #280]	; (22f24 <mgmt_thread+0x12c>)
   22e0a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22e0c:	b15d      	cbz	r5, 22e26 <mgmt_thread+0x2e>
   22e0e:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e10:	b105      	cbz	r5, 22e14 <mgmt_thread+0x1c>
	return node->next;
   22e12:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e14:	2700      	movs	r7, #0
   22e16:	e01f      	b.n	22e58 <mgmt_thread+0x60>
   22e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22e1c:	2100      	movs	r1, #0
   22e1e:	4842      	ldr	r0, [pc, #264]	; (22f28 <mgmt_thread+0x130>)
   22e20:	f006 f9fa 	bl	29218 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   22e24:	e064      	b.n	22ef0 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22e26:	462c      	mov	r4, r5
   22e28:	e7f4      	b.n	22e14 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   22e2a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   22e2e:	d04c      	beq.n	22eca <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   22e30:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   22e32:	6993      	ldr	r3, [r2, #24]
   22e34:	2b00      	cmp	r3, #0
   22e36:	d02c      	beq.n	22e92 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22e38:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22e3a:	4283      	cmp	r3, r0
   22e3c:	d029      	beq.n	22e92 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22e3e:	2c00      	cmp	r4, #0
   22e40:	d04b      	beq.n	22eda <mgmt_thread+0xe2>
   22e42:	4622      	mov	r2, r4
   22e44:	2c00      	cmp	r4, #0
   22e46:	d046      	beq.n	22ed6 <mgmt_thread+0xde>
	return node->next;
   22e48:	6823      	ldr	r3, [r4, #0]
   22e4a:	2b00      	cmp	r3, #0
   22e4c:	d047      	beq.n	22ede <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e4e:	2a00      	cmp	r2, #0
   22e50:	d047      	beq.n	22ee2 <mgmt_thread+0xea>
	return node->next;
   22e52:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e54:	4625      	mov	r5, r4
   22e56:	461c      	mov	r4, r3
   22e58:	2d00      	cmp	r5, #0
   22e5a:	d044      	beq.n	22ee6 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22e5c:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22e5e:	68aa      	ldr	r2, [r5, #8]
   22e60:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22e62:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   22e66:	f013 0f03 	tst.w	r3, #3
   22e6a:	d0e8      	beq.n	22e3e <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22e6c:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22e6e:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   22e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22e76:	2b00      	cmp	r3, #0
   22e78:	d0e1      	beq.n	22e3e <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22e7a:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22e7c:	2b00      	cmp	r3, #0
   22e7e:	d0d4      	beq.n	22e2a <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22e80:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22e82:	2b00      	cmp	r3, #0
   22e84:	d0d1      	beq.n	22e2a <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   22e86:	ea01 0302 	and.w	r3, r1, r2
   22e8a:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22e8c:	2b00      	cmp	r3, #0
   22e8e:	d0d6      	beq.n	22e3e <mgmt_thread+0x46>
   22e90:	e7cb      	b.n	22e2a <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   22e92:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   22e94:	6873      	ldr	r3, [r6, #4]
   22e96:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22e98:	b15f      	cbz	r7, 22eb2 <mgmt_thread+0xba>
		prev_node->next = node->next;
   22e9a:	682b      	ldr	r3, [r5, #0]
   22e9c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   22e9e:	4b21      	ldr	r3, [pc, #132]	; (22f24 <mgmt_thread+0x12c>)
   22ea0:	685b      	ldr	r3, [r3, #4]
   22ea2:	429d      	cmp	r5, r3
   22ea4:	d00e      	beq.n	22ec4 <mgmt_thread+0xcc>
	node->next = NULL;
   22ea6:	2300      	movs	r3, #0
   22ea8:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22eaa:	6868      	ldr	r0, [r5, #4]
   22eac:	f006 f9bd 	bl	2922a <_impl_k_sem_give>
   22eb0:	e7c5      	b.n	22e3e <mgmt_thread+0x46>
		list->head = node->next;
   22eb2:	682a      	ldr	r2, [r5, #0]
   22eb4:	4b1b      	ldr	r3, [pc, #108]	; (22f24 <mgmt_thread+0x12c>)
   22eb6:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22eb8:	685b      	ldr	r3, [r3, #4]
   22eba:	429d      	cmp	r5, r3
   22ebc:	d1f3      	bne.n	22ea6 <mgmt_thread+0xae>
			list->tail = list->head;
   22ebe:	4b19      	ldr	r3, [pc, #100]	; (22f24 <mgmt_thread+0x12c>)
   22ec0:	605a      	str	r2, [r3, #4]
   22ec2:	e7f0      	b.n	22ea6 <mgmt_thread+0xae>
			list->tail = prev_node;
   22ec4:	4b17      	ldr	r3, [pc, #92]	; (22f24 <mgmt_thread+0x12c>)
   22ec6:	605f      	str	r7, [r3, #4]
   22ec8:	e7ed      	b.n	22ea6 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   22eca:	686b      	ldr	r3, [r5, #4]
   22ecc:	6872      	ldr	r2, [r6, #4]
   22ece:	4628      	mov	r0, r5
   22ed0:	4798      	blx	r3
			prev = &cb->node;
   22ed2:	462f      	mov	r7, r5
   22ed4:	e7b3      	b.n	22e3e <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ed6:	4623      	mov	r3, r4
   22ed8:	e7b7      	b.n	22e4a <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22eda:	4623      	mov	r3, r4
   22edc:	e7ba      	b.n	22e54 <mgmt_thread+0x5c>
   22ede:	2300      	movs	r3, #0
   22ee0:	e7b8      	b.n	22e54 <mgmt_thread+0x5c>
   22ee2:	2300      	movs	r3, #0
   22ee4:	e7b6      	b.n	22e54 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   22ee6:	2300      	movs	r3, #0
   22ee8:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   22eea:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   22eec:	f006 f844 	bl	28f78 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   22ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ef4:	480c      	ldr	r0, [pc, #48]	; (22f28 <mgmt_thread+0x130>)
   22ef6:	f006 f9ab 	bl	29250 <_impl_k_sem_take>
	if (!events[out_event].event) {
   22efa:	4b09      	ldr	r3, [pc, #36]	; (22f20 <mgmt_thread+0x128>)
   22efc:	881b      	ldrh	r3, [r3, #0]
   22efe:	4a0b      	ldr	r2, [pc, #44]	; (22f2c <mgmt_thread+0x134>)
   22f00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22f04:	2a00      	cmp	r2, #0
   22f06:	f43f af7d 	beq.w	22e04 <mgmt_thread+0xc>
	out_event++;
   22f0a:	1c5a      	adds	r2, r3, #1
   22f0c:	b292      	uxth	r2, r2
   22f0e:	4904      	ldr	r1, [pc, #16]	; (22f20 <mgmt_thread+0x128>)
   22f10:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22f12:	2a02      	cmp	r2, #2
   22f14:	f43f af72 	beq.w	22dfc <mgmt_thread+0x4>
	return &events[o_idx];
   22f18:	4e04      	ldr	r6, [pc, #16]	; (22f2c <mgmt_thread+0x134>)
   22f1a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   22f1e:	e772      	b.n	22e06 <mgmt_thread+0xe>
   22f20:	20001f64 	.word	0x20001f64
   22f24:	20001edc 	.word	0x20001edc
   22f28:	2000d034 	.word	0x2000d034
   22f2c:	20001ee4 	.word	0x20001ee4

00022f30 <net_mgmt_add_event_callback>:
	node->next = list->head;
   22f30:	4b07      	ldr	r3, [pc, #28]	; (22f50 <net_mgmt_add_event_callback+0x20>)
   22f32:	681a      	ldr	r2, [r3, #0]
   22f34:	6002      	str	r2, [r0, #0]
	list->head = node;
   22f36:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   22f38:	685b      	ldr	r3, [r3, #4]
   22f3a:	b12b      	cbz	r3, 22f48 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   22f3c:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   22f3e:	4a05      	ldr	r2, [pc, #20]	; (22f54 <net_mgmt_add_event_callback+0x24>)
   22f40:	6813      	ldr	r3, [r2, #0]
   22f42:	430b      	orrs	r3, r1
   22f44:	6013      	str	r3, [r2, #0]
   22f46:	4770      	bx	lr
		list->tail = list->head;
   22f48:	4b01      	ldr	r3, [pc, #4]	; (22f50 <net_mgmt_add_event_callback+0x20>)
   22f4a:	6058      	str	r0, [r3, #4]
   22f4c:	e7f6      	b.n	22f3c <net_mgmt_add_event_callback+0xc>
   22f4e:	bf00      	nop
   22f50:	20001edc 	.word	0x20001edc
   22f54:	20001ef4 	.word	0x20001ef4

00022f58 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   22f58:	4b17      	ldr	r3, [pc, #92]	; (22fb8 <net_mgmt_event_notify_with_info+0x60>)
   22f5a:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   22f5c:	ea30 0303 	bics.w	r3, r0, r3
   22f60:	d000      	beq.n	22f64 <net_mgmt_event_notify_with_info+0xc>
   22f62:	4770      	bx	lr
{
   22f64:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   22f66:	4c15      	ldr	r4, [pc, #84]	; (22fbc <net_mgmt_event_notify_with_info+0x64>)
   22f68:	8823      	ldrh	r3, [r4, #0]
   22f6a:	4a15      	ldr	r2, [pc, #84]	; (22fc0 <net_mgmt_event_notify_with_info+0x68>)
   22f6c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   22f70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22f74:	6051      	str	r1, [r2, #4]
	in_event++;
   22f76:	3301      	adds	r3, #1
   22f78:	b29b      	uxth	r3, r3
   22f7a:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22f7c:	2b02      	cmp	r3, #2
   22f7e:	d009      	beq.n	22f94 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   22f80:	4b0e      	ldr	r3, [pc, #56]	; (22fbc <net_mgmt_event_notify_with_info+0x64>)
   22f82:	881a      	ldrh	r2, [r3, #0]
   22f84:	4b0f      	ldr	r3, [pc, #60]	; (22fc4 <net_mgmt_event_notify_with_info+0x6c>)
   22f86:	881b      	ldrh	r3, [r3, #0]
   22f88:	429a      	cmp	r2, r3
   22f8a:	d006      	beq.n	22f9a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22f8c:	480e      	ldr	r0, [pc, #56]	; (22fc8 <net_mgmt_event_notify_with_info+0x70>)
   22f8e:	f006 f94c 	bl	2922a <_impl_k_sem_give>
   22f92:	bd10      	pop	{r4, pc}
		in_event = 0;
   22f94:	2200      	movs	r2, #0
   22f96:	8022      	strh	r2, [r4, #0]
   22f98:	e7f2      	b.n	22f80 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   22f9a:	3301      	adds	r3, #1
   22f9c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22f9e:	2b02      	cmp	r3, #2
   22fa0:	d007      	beq.n	22fb2 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   22fa2:	4a07      	ldr	r2, [pc, #28]	; (22fc0 <net_mgmt_event_notify_with_info+0x68>)
   22fa4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22fa8:	2a00      	cmp	r2, #0
   22faa:	d0ef      	beq.n	22f8c <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   22fac:	4a05      	ldr	r2, [pc, #20]	; (22fc4 <net_mgmt_event_notify_with_info+0x6c>)
   22fae:	8013      	strh	r3, [r2, #0]
   22fb0:	e7ec      	b.n	22f8c <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   22fb2:	2300      	movs	r3, #0
   22fb4:	e7f5      	b.n	22fa2 <net_mgmt_event_notify_with_info+0x4a>
   22fb6:	bf00      	nop
   22fb8:	20001ef4 	.word	0x20001ef4
   22fbc:	20001ef8 	.word	0x20001ef8
   22fc0:	20001ee4 	.word	0x20001ee4
   22fc4:	20001f64 	.word	0x20001f64
   22fc8:	2000d034 	.word	0x2000d034

00022fcc <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   22fcc:	b510      	push	{r4, lr}
   22fce:	b086      	sub	sp, #24
	list->head = NULL;
   22fd0:	4b0f      	ldr	r3, [pc, #60]	; (23010 <net_mgmt_event_init+0x44>)
   22fd2:	2400      	movs	r4, #0
   22fd4:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   22fd6:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   22fd8:	4b0e      	ldr	r3, [pc, #56]	; (23014 <net_mgmt_event_init+0x48>)
   22fda:	601c      	str	r4, [r3, #0]

	in_event = 0;
   22fdc:	4b0e      	ldr	r3, [pc, #56]	; (23018 <net_mgmt_event_init+0x4c>)
   22fde:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   22fe0:	4b0e      	ldr	r3, [pc, #56]	; (2301c <net_mgmt_event_init+0x50>)
   22fe2:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   22fe4:	2210      	movs	r2, #16
   22fe6:	4621      	mov	r1, r4
   22fe8:	480d      	ldr	r0, [pc, #52]	; (23020 <net_mgmt_event_init+0x54>)
   22fea:	f007 f8f1 	bl	2a1d0 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   22fee:	9405      	str	r4, [sp, #20]
   22ff0:	9404      	str	r4, [sp, #16]
   22ff2:	f06f 0308 	mvn.w	r3, #8
   22ff6:	9303      	str	r3, [sp, #12]
   22ff8:	9402      	str	r4, [sp, #8]
   22ffa:	9401      	str	r4, [sp, #4]
   22ffc:	9400      	str	r4, [sp, #0]
   22ffe:	4b09      	ldr	r3, [pc, #36]	; (23024 <net_mgmt_event_init+0x58>)
   23000:	f44f 7200 	mov.w	r2, #512	; 0x200
   23004:	4908      	ldr	r1, [pc, #32]	; (23028 <net_mgmt_event_init+0x5c>)
   23006:	4809      	ldr	r0, [pc, #36]	; (2302c <net_mgmt_event_init+0x60>)
   23008:	f006 fb8e 	bl	29728 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   2300c:	b006      	add	sp, #24
   2300e:	bd10      	pop	{r4, pc}
   23010:	20001edc 	.word	0x20001edc
   23014:	20001ef4 	.word	0x20001ef4
   23018:	20001ef8 	.word	0x20001ef8
   2301c:	20001f64 	.word	0x20001f64
   23020:	20001ee4 	.word	0x20001ee4
   23024:	00022df9 	.word	0x00022df9
   23028:	200098c8 	.word	0x200098c8
   2302c:	20001efc 	.word	0x20001efc

00023030 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   23030:	b5f0      	push	{r4, r5, r6, r7, lr}
   23032:	b085      	sub	sp, #20
   23034:	4605      	mov	r5, r0
   23036:	f8ad 2006 	strh.w	r2, [sp, #6]
   2303a:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   2303e:	f10d 020e 	add.w	r2, sp, #14
   23042:	f7fa fde5 	bl	1dc10 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   23046:	4602      	mov	r2, r0
   23048:	b168      	cbz	r0, 23066 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   2304a:	b11a      	cbz	r2, 23054 <net_udp_insert_raw+0x24>
   2304c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23050:	2b00      	cmp	r3, #0
   23052:	d15c      	bne.n	2310e <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   23054:	68ab      	ldr	r3, [r5, #8]
   23056:	429a      	cmp	r2, r3
   23058:	d00d      	beq.n	23076 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   2305a:	681c      	ldr	r4, [r3, #0]
   2305c:	b174      	cbz	r4, 2307c <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   2305e:	42a2      	cmp	r2, r4
   23060:	d00b      	beq.n	2307a <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   23062:	4623      	mov	r3, r4
   23064:	e7f9      	b.n	2305a <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   23066:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2306a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2306e:	4299      	cmp	r1, r3
   23070:	d1eb      	bne.n	2304a <net_udp_insert_raw+0x1a>
		return NULL;
   23072:	2000      	movs	r0, #0
   23074:	e049      	b.n	2310a <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   23076:	461c      	mov	r4, r3
   23078:	e000      	b.n	2307c <net_udp_insert_raw+0x4c>
				prev = tmp;
   2307a:	461c      	mov	r4, r3
	}

	if (!prev) {
   2307c:	2c00      	cmp	r4, #0
   2307e:	d048      	beq.n	23112 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   23080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23084:	4628      	mov	r0, r5
   23086:	f7fa faa1 	bl	1d5cc <net_pkt_get_frag>
	if (!udp) {
   2308a:	4607      	mov	r7, r0
   2308c:	2800      	cmp	r0, #0
   2308e:	d042      	beq.n	23116 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   23090:	f100 0608 	add.w	r6, r0, #8
   23094:	2202      	movs	r2, #2
   23096:	f10d 0106 	add.w	r1, sp, #6
   2309a:	4630      	mov	r0, r6
   2309c:	f7f7 fdcc 	bl	1ac38 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   230a0:	2202      	movs	r2, #2
   230a2:	a901      	add	r1, sp, #4
   230a4:	4630      	mov	r0, r6
   230a6:	f7f7 fdc7 	bl	1ac38 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   230aa:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   230ac:	2200      	movs	r2, #0
   230ae:	e002      	b.n	230b6 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   230b0:	8999      	ldrh	r1, [r3, #12]
   230b2:	440a      	add	r2, r1
		buf = buf->frags;
   230b4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   230b6:	2b00      	cmp	r3, #0
   230b8:	d1fa      	bne.n	230b0 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   230ba:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   230be:	1a51      	subs	r1, r2, r1
   230c0:	b289      	uxth	r1, r1
   230c2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   230c6:	1a89      	subs	r1, r1, r2
   230c8:	b289      	uxth	r1, r1
   230ca:	3108      	adds	r1, #8
   230cc:	b289      	uxth	r1, r1
   230ce:	4630      	mov	r0, r6
   230d0:	f7f7 fdd2 	bl	1ac78 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   230d4:	2100      	movs	r1, #0
   230d6:	4630      	mov	r0, r6
   230d8:	f7f7 fdce 	bl	1ac78 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   230dc:	4639      	mov	r1, r7
   230de:	4620      	mov	r0, r4
   230e0:	f7f7 fd7e 	bl	1abe0 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   230e4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   230e8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   230ec:	4419      	add	r1, r3
   230ee:	3108      	adds	r1, #8
   230f0:	f10d 020e 	add.w	r2, sp, #14
   230f4:	b289      	uxth	r1, r1
   230f6:	4628      	mov	r0, r5
   230f8:	f7fa fd8a 	bl	1dc10 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   230fc:	b168      	cbz	r0, 2311a <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   230fe:	6883      	ldr	r3, [r0, #8]
   23100:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23104:	4413      	add	r3, r2
	pkt->appdata = data;
   23106:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   23108:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   2310a:	b005      	add	sp, #20
   2310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   2310e:	2000      	movs	r0, #0
   23110:	e7fb      	b.n	2310a <net_udp_insert_raw+0xda>
	return NULL;
   23112:	2000      	movs	r0, #0
   23114:	e7f9      	b.n	2310a <net_udp_insert_raw+0xda>
   23116:	2000      	movs	r0, #0
   23118:	e7f7      	b.n	2310a <net_udp_insert_raw+0xda>
	return pkt;
   2311a:	4628      	mov	r0, r5
   2311c:	e7f5      	b.n	2310a <net_udp_insert_raw+0xda>

0002311e <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2311e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23122:	b086      	sub	sp, #24
   23124:	4606      	mov	r6, r0
   23126:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   23128:	2300      	movs	r3, #0
   2312a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2312e:	f7fa fda5 	bl	1dc7c <net_pkt_udp_data>
   23132:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23134:	2208      	movs	r2, #8
   23136:	4601      	mov	r1, r0
   23138:	4630      	mov	r0, r6
   2313a:	f7fb f95d 	bl	1e3f8 <net_header_fits>
   2313e:	b170      	cbz	r0, 2315e <net_udp_set_chksum+0x40>
		return hdr;
   23140:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   23142:	b173      	cbz	r3, 23162 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   23144:	2300      	movs	r3, #0
   23146:	71a3      	strb	r3, [r4, #6]
   23148:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2314a:	2111      	movs	r1, #17
   2314c:	4630      	mov	r0, r6
   2314e:	f7fb f8fa 	bl	1e346 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   23152:	43c0      	mvns	r0, r0
   23154:	80e0      	strh	r0, [r4, #6]

		return frag;
   23156:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   23158:	b006      	add	sp, #24
   2315a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2315e:	2300      	movs	r3, #0
   23160:	e7ef      	b.n	23142 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23162:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23166:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2316a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   2316c:	3206      	adds	r2, #6
   2316e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23172:	f8cd 8008 	str.w	r8, [sp, #8]
   23176:	f10d 0416 	add.w	r4, sp, #22
   2317a:	9401      	str	r4, [sp, #4]
   2317c:	2702      	movs	r7, #2
   2317e:	9700      	str	r7, [sp, #0]
   23180:	ab05      	add	r3, sp, #20
   23182:	b292      	uxth	r2, r2
   23184:	4629      	mov	r1, r5
   23186:	4630      	mov	r0, r6
   23188:	f7fa fc63 	bl	1da52 <net_pkt_write>
   2318c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2318e:	2111      	movs	r1, #17
   23190:	4630      	mov	r0, r6
   23192:	f7fb f8d8 	bl	1e346 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   23196:	43c0      	mvns	r0, r0
   23198:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2319c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   231a0:	3a02      	subs	r2, #2
   231a2:	f8cd 8008 	str.w	r8, [sp, #8]
   231a6:	9401      	str	r4, [sp, #4]
   231a8:	9700      	str	r7, [sp, #0]
   231aa:	ab05      	add	r3, sp, #20
   231ac:	b292      	uxth	r2, r2
   231ae:	4629      	mov	r1, r5
   231b0:	4630      	mov	r0, r6
   231b2:	f7fa fc4e 	bl	1da52 <net_pkt_write>
	return frag;
   231b6:	e7cf      	b.n	23158 <net_udp_set_chksum+0x3a>

000231b8 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   231b8:	b570      	push	{r4, r5, r6, lr}
   231ba:	b084      	sub	sp, #16
   231bc:	4605      	mov	r5, r0
   231be:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   231c0:	f7fa fd5c 	bl	1dc7c <net_pkt_udp_data>
   231c4:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   231c6:	2208      	movs	r2, #8
   231c8:	4601      	mov	r1, r0
   231ca:	4628      	mov	r0, r5
   231cc:	f7fb f914 	bl	1e3f8 <net_header_fits>
   231d0:	b120      	cbz	r0, 231dc <net_udp_get_chksum+0x24>
		return hdr;
   231d2:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   231d4:	b123      	cbz	r3, 231e0 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   231d6:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   231d8:	b004      	add	sp, #16
   231da:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   231dc:	2300      	movs	r3, #0
   231de:	e7f9      	b.n	231d4 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   231e0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   231e4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   231e8:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   231ea:	3106      	adds	r1, #6
   231ec:	f10d 030e 	add.w	r3, sp, #14
   231f0:	9300      	str	r3, [sp, #0]
   231f2:	2302      	movs	r3, #2
   231f4:	aa03      	add	r2, sp, #12
   231f6:	b289      	uxth	r1, r1
   231f8:	4630      	mov	r0, r6
   231fa:	f7fa fbb8 	bl	1d96e <net_frag_read>
	return chksum;
   231fe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23202:	e7e9      	b.n	231d8 <net_udp_get_chksum+0x20>

00023204 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23204:	b5f0      	push	{r4, r5, r6, r7, lr}
   23206:	b085      	sub	sp, #20
   23208:	4605      	mov	r5, r0
   2320a:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   2320c:	f7fa fd36 	bl	1dc7c <net_pkt_udp_data>
   23210:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23212:	2208      	movs	r2, #8
   23214:	4601      	mov	r1, r0
   23216:	4628      	mov	r0, r5
   23218:	f7fb f8ee 	bl	1e3f8 <net_header_fits>
   2321c:	b120      	cbz	r0, 23228 <net_udp_get_hdr+0x24>
		return hdr;
   2321e:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   23220:	b126      	cbz	r6, 2322c <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23222:	4620      	mov	r0, r4
   23224:	b005      	add	sp, #20
   23226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23228:	2600      	movs	r6, #0
   2322a:	e7f9      	b.n	23220 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2322c:	68a8      	ldr	r0, [r5, #8]
   2322e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23232:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23236:	9700      	str	r7, [sp, #0]
   23238:	2302      	movs	r3, #2
   2323a:	f10d 020e 	add.w	r2, sp, #14
   2323e:	4421      	add	r1, r4
   23240:	f7fa fb95 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23244:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23248:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2324a:	9300      	str	r3, [sp, #0]
   2324c:	2302      	movs	r3, #2
   2324e:	f10d 020e 	add.w	r2, sp, #14
   23252:	f7fa fb8c 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23256:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   2325a:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2325c:	9300      	str	r3, [sp, #0]
   2325e:	2302      	movs	r3, #2
   23260:	f10d 020e 	add.w	r2, sp, #14
   23264:	f7fa fb83 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23268:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2326c:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2326e:	9300      	str	r3, [sp, #0]
   23270:	2302      	movs	r3, #2
   23272:	f10d 020e 	add.w	r2, sp, #14
   23276:	f7fa fb7a 	bl	1d96e <net_frag_read>
	if (!frag) {
   2327a:	b108      	cbz	r0, 23280 <net_udp_get_hdr+0x7c>
	return hdr;
   2327c:	463c      	mov	r4, r7
   2327e:	e7d0      	b.n	23222 <net_udp_get_hdr+0x1e>
		return NULL;
   23280:	4634      	mov	r4, r6
   23282:	e7ce      	b.n	23222 <net_udp_get_hdr+0x1e>

00023284 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23288:	b086      	sub	sp, #24
   2328a:	4606      	mov	r6, r0
   2328c:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2328e:	2208      	movs	r2, #8
   23290:	f7fb f8b2 	bl	1e3f8 <net_header_fits>
   23294:	b128      	cbz	r0, 232a2 <net_udp_set_hdr+0x1e>
		return hdr;
   23296:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   23298:	b12d      	cbz	r5, 232a6 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2329a:	4620      	mov	r0, r4
   2329c:	b006      	add	sp, #24
   2329e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   232a2:	2500      	movs	r5, #0
   232a4:	e7f8      	b.n	23298 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   232a6:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   232aa:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   232ae:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   232b2:	f8cd 8008 	str.w	r8, [sp, #8]
   232b6:	9401      	str	r4, [sp, #4]
   232b8:	2702      	movs	r7, #2
   232ba:	9700      	str	r7, [sp, #0]
   232bc:	f10d 0316 	add.w	r3, sp, #22
   232c0:	440a      	add	r2, r1
   232c2:	68b1      	ldr	r1, [r6, #8]
   232c4:	4630      	mov	r0, r6
   232c6:	f7fa fbc4 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   232ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   232ce:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   232d0:	f8cd 8008 	str.w	r8, [sp, #8]
   232d4:	9301      	str	r3, [sp, #4]
   232d6:	9700      	str	r7, [sp, #0]
   232d8:	f10d 0316 	add.w	r3, sp, #22
   232dc:	4601      	mov	r1, r0
   232de:	4630      	mov	r0, r6
   232e0:	f7fa fbb7 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   232e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   232e8:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   232ea:	f8cd 8008 	str.w	r8, [sp, #8]
   232ee:	9301      	str	r3, [sp, #4]
   232f0:	9700      	str	r7, [sp, #0]
   232f2:	f10d 0316 	add.w	r3, sp, #22
   232f6:	4601      	mov	r1, r0
   232f8:	4630      	mov	r0, r6
   232fa:	f7fa fbaa 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   232fe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   23302:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23304:	f8cd 8008 	str.w	r8, [sp, #8]
   23308:	9301      	str	r3, [sp, #4]
   2330a:	9700      	str	r7, [sp, #0]
   2330c:	f10d 0316 	add.w	r3, sp, #22
   23310:	4601      	mov	r1, r0
   23312:	4630      	mov	r0, r6
   23314:	f7fa fb9d 	bl	1da52 <net_pkt_write>
	if (!frag) {
   23318:	2800      	cmp	r0, #0
   2331a:	d1be      	bne.n	2329a <net_udp_set_hdr+0x16>
		return NULL;
   2331c:	462c      	mov	r4, r5
   2331e:	e7bc      	b.n	2329a <net_udp_set_hdr+0x16>

00023320 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   23320:	b510      	push	{r4, lr}
   23322:	460c      	mov	r4, r1
   23324:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   23326:	8942      	ldrh	r2, [r0, #10]
   23328:	4620      	mov	r0, r4
   2332a:	f7ff fe81 	bl	23030 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   2332e:	bd10      	pop	{r4, pc}

00023330 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   23330:	4770      	bx	lr

00023332 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   23332:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   23334:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   23336:	6b25      	ldr	r5, [r4, #48]	; 0x30
   23338:	b12d      	cbz	r5, 23346 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   2333a:	6843      	ldr	r3, [r0, #4]
   2333c:	f06f 0267 	mvn.w	r2, #103	; 0x67
   23340:	2100      	movs	r1, #0
   23342:	4620      	mov	r0, r4
   23344:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   23346:	4620      	mov	r0, r4
   23348:	f7f9 fba8 	bl	1ca9c <net_context_unref>
   2334c:	bd38      	pop	{r3, r4, r5, pc}

0002334e <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   2334e:	b510      	push	{r4, lr}
   23350:	4604      	mov	r4, r0
	return (!list->head);
   23352:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23356:	b17b      	cbz	r3, 23378 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   23358:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2335c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23360:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   23364:	f36f 0304 	bfc	r3, #0, #5
   23368:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   2336c:	2200      	movs	r2, #0
   2336e:	21c8      	movs	r1, #200	; 0xc8
   23370:	3058      	adds	r0, #88	; 0x58
   23372:	f006 fb63 	bl	29a3c <_impl_k_timer_start>
   23376:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23378:	3058      	adds	r0, #88	; 0x58
   2337a:	f006 fc17 	bl	29bac <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   2337e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23382:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23386:	f022 0210 	bic.w	r2, r2, #16
   2338a:	f362 134c 	bfi	r3, r2, #5, #8
   2338e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   23392:	bd10      	pop	{r4, pc}

00023394 <ack_timer_cancel>:
{
   23394:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   23396:	3008      	adds	r0, #8
   23398:	f006 fd36 	bl	29e08 <k_delayed_work_cancel>
   2339c:	bd08      	pop	{r3, pc}

0002339e <fin_timer_cancel>:
{
   2339e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   233a0:	3030      	adds	r0, #48	; 0x30
   233a2:	f006 fd31 	bl	29e08 <k_delayed_work_cancel>
   233a6:	bd08      	pop	{r3, pc}

000233a8 <finalize_segment>:
{
   233a8:	b508      	push	{r3, lr}
	return pkt->family;
   233aa:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   233ae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   233b2:	2b0a      	cmp	r3, #10
   233b4:	d001      	beq.n	233ba <finalize_segment+0x12>
	return 0;
   233b6:	2000      	movs	r0, #0
}
   233b8:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   233ba:	f7fc fe17 	bl	1ffec <net_ipv6_finalize>
   233be:	bd08      	pop	{r3, pc}

000233c0 <prepare_segment>:
{
   233c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233c4:	b085      	sub	sp, #20
   233c6:	4606      	mov	r6, r0
   233c8:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   233ca:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   233cc:	b192      	cbz	r2, 233f4 <prepare_segment+0x34>
   233ce:	4614      	mov	r4, r2
		tail = pkt->frags;
   233d0:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   233d4:	2300      	movs	r3, #0
   233d6:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   233d8:	469a      	mov	sl, r3
   233da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   233de:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   233e2:	2b0a      	cmp	r3, #10
   233e4:	d013      	beq.n	2340e <prepare_segment+0x4e>
		if (pkt_allocated) {
   233e6:	f1ba 0f00 	cmp.w	sl, #0
   233ea:	d174      	bne.n	234d6 <prepare_segment+0x116>
		return NULL;
   233ec:	2000      	movs	r0, #0
}
   233ee:	b005      	add	sp, #20
   233f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   233f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   233f8:	4638      	mov	r0, r7
   233fa:	f7fa f907 	bl	1d60c <net_pkt_get_tx>
		if (!pkt) {
   233fe:	4604      	mov	r4, r0
   23400:	2800      	cmp	r0, #0
   23402:	d0f4      	beq.n	233ee <prepare_segment+0x2e>
		pkt_allocated = true;
   23404:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   23408:	f04f 0800 	mov.w	r8, #0
   2340c:	e7e5      	b.n	233da <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   2340e:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   23410:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   23412:	3304      	adds	r3, #4
   23414:	6852      	ldr	r2, [r2, #4]
   23416:	4621      	mov	r1, r4
   23418:	6830      	ldr	r0, [r6, #0]
   2341a:	f7fc fb8b 	bl	1fb34 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   2341e:	696b      	ldr	r3, [r5, #20]
   23420:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   23424:	897b      	ldrh	r3, [r7, #10]
   23426:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   23428:	68a3      	ldr	r3, [r4, #8]
   2342a:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   2342c:	2206      	movs	r2, #6
   2342e:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   23430:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23434:	4638      	mov	r0, r7
   23436:	f7fa f8fb 	bl	1d630 <net_pkt_get_data>
	if (!header) {
   2343a:	9001      	str	r0, [sp, #4]
   2343c:	2800      	cmp	r0, #0
   2343e:	d04f      	beq.n	234e0 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   23440:	9e01      	ldr	r6, [sp, #4]
   23442:	4631      	mov	r1, r6
   23444:	4620      	mov	r0, r4
   23446:	f7fa f93e 	bl	1d6c6 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   2344a:	2114      	movs	r1, #20
   2344c:	f106 0008 	add.w	r0, r6, #8
   23450:	f7f7 fbec 	bl	1ac2c <net_buf_simple_add>
   23454:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   23456:	68eb      	ldr	r3, [r5, #12]
   23458:	9303      	str	r3, [sp, #12]
   2345a:	2b00      	cmp	r3, #0
   2345c:	d05d      	beq.n	2351a <prepare_segment+0x15a>
   2345e:	f895 900b 	ldrb.w	r9, [r5, #11]
   23462:	f1b9 0f00 	cmp.w	r9, #0
   23466:	d145      	bne.n	234f4 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   23468:	f109 0914 	add.w	r9, r9, #20
   2346c:	fa5f f989 	uxtb.w	r9, r9
   23470:	ea4f 0989 	mov.w	r9, r9, lsl #2
   23474:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   23478:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2347c:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   2347e:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   23482:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   23484:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23486:	0a11      	lsrs	r1, r2, #8
   23488:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   2348a:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   2348c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23490:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   23492:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   23494:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   23496:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23498:	0a11      	lsrs	r1, r2, #8
   2349a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   2349c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   2349e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   234a2:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   234a4:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   234a6:	7aab      	ldrb	r3, [r5, #10]
   234a8:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   234aa:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   234ac:	0a1a      	lsrs	r2, r3, #8
   234ae:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   234b0:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   234b2:	2300      	movs	r3, #0
   234b4:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   234b6:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   234b8:	f1b8 0f00 	cmp.w	r8, #0
   234bc:	d003      	beq.n	234c6 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   234be:	4641      	mov	r1, r8
   234c0:	4620      	mov	r0, r4
   234c2:	f7fa f900 	bl	1d6c6 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   234c6:	4621      	mov	r1, r4
   234c8:	4638      	mov	r0, r7
   234ca:	f7ff ff6d 	bl	233a8 <finalize_segment>
   234ce:	2800      	cmp	r0, #0
   234d0:	db26      	blt.n	23520 <prepare_segment+0x160>
	return pkt;
   234d2:	4620      	mov	r0, r4
   234d4:	e78b      	b.n	233ee <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   234d6:	4620      	mov	r0, r4
   234d8:	f7fa f8cb 	bl	1d672 <net_pkt_unref>
		return NULL;
   234dc:	2000      	movs	r0, #0
   234de:	e786      	b.n	233ee <prepare_segment+0x2e>
		if (pkt_allocated) {
   234e0:	f1ba 0f00 	cmp.w	sl, #0
   234e4:	d101      	bne.n	234ea <prepare_segment+0x12a>
		return NULL;
   234e6:	2000      	movs	r0, #0
   234e8:	e781      	b.n	233ee <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   234ea:	4620      	mov	r0, r4
   234ec:	f7fa f8c1 	bl	1d672 <net_pkt_unref>
		return NULL;
   234f0:	2000      	movs	r0, #0
   234f2:	e77c      	b.n	233ee <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   234f4:	4649      	mov	r1, r9
   234f6:	9801      	ldr	r0, [sp, #4]
   234f8:	3008      	adds	r0, #8
   234fa:	f7f7 fb97 	bl	1ac2c <net_buf_simple_add>
   234fe:	464a      	mov	r2, r9
   23500:	9903      	ldr	r1, [sp, #12]
   23502:	f7dc fedd 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   23506:	f019 0f03 	tst.w	r9, #3
   2350a:	d0ad      	beq.n	23468 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   2350c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   23510:	f109 0904 	add.w	r9, r9, #4
   23514:	fa5f f989 	uxtb.w	r9, r9
   23518:	e7a6      	b.n	23468 <prepare_segment+0xa8>
	u8_t optlen = 0;
   2351a:	f04f 0900 	mov.w	r9, #0
   2351e:	e7a3      	b.n	23468 <prepare_segment+0xa8>
		if (pkt_allocated) {
   23520:	f1ba 0f00 	cmp.w	sl, #0
   23524:	d101      	bne.n	2352a <prepare_segment+0x16a>
		return NULL;
   23526:	2000      	movs	r0, #0
   23528:	e761      	b.n	233ee <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   2352a:	4620      	mov	r0, r4
   2352c:	f7fa f8a1 	bl	1d672 <net_pkt_unref>
		return NULL;
   23530:	2000      	movs	r0, #0
   23532:	e75c      	b.n	233ee <prepare_segment+0x2e>

00023534 <net_tcp_alloc>:
{
   23534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23536:	f04f 0320 	mov.w	r3, #32
   2353a:	f3ef 8411 	mrs	r4, BASEPRI
   2353e:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23542:	2300      	movs	r3, #0
   23544:	2b05      	cmp	r3, #5
   23546:	dc18      	bgt.n	2357a <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   23548:	22c8      	movs	r2, #200	; 0xc8
   2354a:	492b      	ldr	r1, [pc, #172]	; (235f8 <net_tcp_alloc+0xc4>)
   2354c:	fb02 1203 	mla	r2, r2, r3, r1
   23550:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   23554:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   23558:	f012 0f01 	tst.w	r2, #1
   2355c:	d001      	beq.n	23562 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2355e:	3301      	adds	r3, #1
   23560:	e7f0      	b.n	23544 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   23562:	21c8      	movs	r1, #200	; 0xc8
   23564:	4d24      	ldr	r5, [pc, #144]	; (235f8 <net_tcp_alloc+0xc4>)
   23566:	fb01 5103 	mla	r1, r1, r3, r5
   2356a:	f042 0201 	orr.w	r2, r2, #1
   2356e:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   23572:	f362 154c 	bfi	r5, r2, #5, #8
   23576:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2357a:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   2357e:	2b05      	cmp	r3, #5
   23580:	dc37      	bgt.n	235f2 <net_tcp_alloc+0xbe>
   23582:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   23584:	4e1c      	ldr	r6, [pc, #112]	; (235f8 <net_tcp_alloc+0xc4>)
   23586:	22c8      	movs	r2, #200	; 0xc8
   23588:	fb02 f403 	mul.w	r4, r2, r3
   2358c:	1935      	adds	r5, r6, r4
   2358e:	2100      	movs	r1, #0
   23590:	4628      	mov	r0, r5
   23592:	f006 fe1d 	bl	2a1d0 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   23596:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   2359a:	2101      	movs	r1, #1
   2359c:	f361 124c 	bfi	r2, r1, #5, #8
   235a0:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   235a4:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   235a8:	f36f 3250 	bfc	r2, #13, #4
   235ac:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   235b0:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   235b2:	f7de fd2d 	bl	2010 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   235b6:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   235ba:	3001      	adds	r0, #1
   235bc:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   235c0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   235c4:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   235c8:	2700      	movs	r7, #0
   235ca:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   235ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
   235d2:	463a      	mov	r2, r7
   235d4:	4909      	ldr	r1, [pc, #36]	; (235fc <net_tcp_alloc+0xc8>)
   235d6:	4430      	add	r0, r6
   235d8:	f006 fa1c 	bl	29a14 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   235dc:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   235e0:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   235e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   235e6:	4639      	mov	r1, r7
   235e8:	3004      	adds	r0, #4
   235ea:	f005 fe15 	bl	29218 <_impl_k_sem_init>
}
   235ee:	4628      	mov	r0, r5
   235f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   235f2:	2500      	movs	r5, #0
   235f4:	e7fb      	b.n	235ee <net_tcp_alloc+0xba>
   235f6:	bf00      	nop
   235f8:	20001f68 	.word	0x20001f68
   235fc:	00023f71 	.word	0x00023f71

00023600 <net_tcp_get_recv_wnd>:
}
   23600:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   23604:	4770      	bx	lr

00023606 <net_tcp_get_recv_mss>:
{
   23606:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   23608:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   2360a:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   2360e:	f013 0f10 	tst.w	r3, #16
   23612:	d006      	beq.n	23622 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   23614:	230a      	movs	r3, #10
	if (family == AF_INET) {
   23616:	2b02      	cmp	r3, #2
   23618:	d019      	beq.n	2364e <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   2361a:	2b0a      	cmp	r3, #10
   2361c:	d003      	beq.n	23626 <net_tcp_get_recv_mss+0x20>
	return 0;
   2361e:	2000      	movs	r0, #0
}
   23620:	bd08      	pop	{r3, pc}
	return AF_INET;
   23622:	2302      	movs	r3, #2
   23624:	e7f7      	b.n	23616 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   23626:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   2362a:	f7f8 fddb 	bl	1c1e4 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   2362e:	b120      	cbz	r0, 2363a <net_tcp_get_recv_mss+0x34>
   23630:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   23632:	283b      	cmp	r0, #59	; 0x3b
   23634:	d903      	bls.n	2363e <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   23636:	383c      	subs	r0, #60	; 0x3c
   23638:	e002      	b.n	23640 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   2363a:	2000      	movs	r0, #0
   2363c:	e000      	b.n	23640 <net_tcp_get_recv_mss+0x3a>
   2363e:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   23640:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   23644:	da01      	bge.n	2364a <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   23646:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   2364a:	b280      	uxth	r0, r0
   2364c:	bd08      	pop	{r3, pc}
		return 0;
   2364e:	2000      	movs	r0, #0
   23650:	bd08      	pop	{r3, pc}

00023652 <net_tcp_set_syn_opt>:
{
   23652:	b570      	push	{r4, r5, r6, lr}
   23654:	460e      	mov	r6, r1
   23656:	4614      	mov	r4, r2
	*optionlen = 0;
   23658:	2300      	movs	r3, #0
   2365a:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   2365c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23660:	f413 6f80 	tst.w	r3, #1024	; 0x400
   23664:	d00f      	beq.n	23686 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   23666:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   23668:	7822      	ldrb	r2, [r4, #0]
   2366a:	0203      	lsls	r3, r0, #8
   2366c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23670:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   23674:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23678:	f040 0002 	orr.w	r0, r0, #2
   2367c:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   2367e:	7823      	ldrb	r3, [r4, #0]
   23680:	3304      	adds	r3, #4
   23682:	7023      	strb	r3, [r4, #0]
   23684:	bd70      	pop	{r4, r5, r6, pc}
   23686:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   23688:	f7ff ffbd 	bl	23606 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   2368c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23694:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   23698:	e7e6      	b.n	23668 <net_tcp_set_syn_opt+0x16>

0002369a <net_tcp_prepare_reset>:
{
   2369a:	b510      	push	{r4, lr}
   2369c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   2369e:	2300      	movs	r3, #0
   236a0:	9300      	str	r3, [sp, #0]
   236a2:	9301      	str	r3, [sp, #4]
   236a4:	9302      	str	r3, [sp, #8]
   236a6:	9303      	str	r3, [sp, #12]
   236a8:	9304      	str	r3, [sp, #16]
   236aa:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   236ac:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   236ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   236b2:	f013 0f06 	tst.w	r3, #6
   236b6:	d01a      	beq.n	236ee <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   236b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   236bc:	f3c3 3343 	ubfx	r3, r3, #13, #4
   236c0:	2b02      	cmp	r3, #2
   236c2:	d014      	beq.n	236ee <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   236c4:	2b09      	cmp	r3, #9
   236c6:	d012      	beq.n	236ee <net_tcp_prepare_reset+0x54>
   236c8:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   236ca:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   236ce:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   236d0:	2314      	movs	r3, #20
   236d2:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   236d6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   236da:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   236dc:	6803      	ldr	r3, [r0, #0]
   236de:	3308      	adds	r3, #8
   236e0:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   236e2:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   236e4:	2200      	movs	r2, #0
   236e6:	4669      	mov	r1, sp
   236e8:	f7ff fe6a 	bl	233c0 <prepare_segment>
   236ec:	6020      	str	r0, [r4, #0]
}
   236ee:	2000      	movs	r0, #0
   236f0:	b006      	add	sp, #24
   236f2:	bd10      	pop	{r4, pc}

000236f4 <net_tcp_state_str>:
}
   236f4:	4800      	ldr	r0, [pc, #0]	; (236f8 <net_tcp_state_str+0x4>)
   236f6:	4770      	bx	lr
   236f8:	0002eae8 	.word	0x0002eae8

000236fc <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   236fc:	4770      	bx	lr

000236fe <net_tcp_change_state>:
   236fe:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23702:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   23706:	428b      	cmp	r3, r1
   23708:	d022      	beq.n	23750 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   2370a:	f001 010f 	and.w	r1, r1, #15
   2370e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23712:	f361 3350 	bfi	r3, r1, #13, #4
   23716:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   2371a:	b9c9      	cbnz	r1, 23750 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   2371c:	6803      	ldr	r3, [r0, #0]
   2371e:	b1bb      	cbz	r3, 23750 <net_tcp_change_state+0x52>
{
   23720:	b530      	push	{r4, r5, lr}
   23722:	b083      	sub	sp, #12
   23724:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   23726:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   23728:	b120      	cbz	r0, 23734 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   2372a:	f001 fcef 	bl	2510c <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   2372e:	6823      	ldr	r3, [r4, #0]
   23730:	2200      	movs	r2, #0
   23732:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   23734:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   23738:	b145      	cbz	r5, 2374c <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   2373a:	6820      	ldr	r0, [r4, #0]
   2373c:	6803      	ldr	r3, [r0, #0]
   2373e:	9300      	str	r3, [sp, #0]
   23740:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   23744:	2218      	movs	r2, #24
   23746:	f100 0114 	add.w	r1, r0, #20
   2374a:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   2374c:	b003      	add	sp, #12
   2374e:	bd30      	pop	{r4, r5, pc}
   23750:	4770      	bx	lr
	...

00023754 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23754:	2800      	cmp	r0, #0
   23756:	d064      	beq.n	23822 <net_tcp_release+0xce>
{
   23758:	b538      	push	{r3, r4, r5, lr}
   2375a:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2375c:	4b35      	ldr	r3, [pc, #212]	; (23834 <net_tcp_release+0xe0>)
   2375e:	4298      	cmp	r0, r3
   23760:	d362      	bcc.n	23828 <net_tcp_release+0xd4>
   23762:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   23766:	4298      	cmp	r0, r3
   23768:	d261      	bcs.n	2382e <net_tcp_release+0xda>
	return list->head;
   2376a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2376e:	b140      	cbz	r0, 23782 <net_tcp_release+0x2e>
   23770:	3834      	subs	r0, #52	; 0x34
   23772:	b140      	cbz	r0, 23786 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23774:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   23778:	d000      	beq.n	2377c <net_tcp_release+0x28>
	return node->next;
   2377a:	6b44      	ldr	r4, [r0, #52]	; 0x34
   2377c:	b12c      	cbz	r4, 2378a <net_tcp_release+0x36>
   2377e:	3c34      	subs	r4, #52	; 0x34
   23780:	e00d      	b.n	2379e <net_tcp_release+0x4a>
   23782:	2000      	movs	r0, #0
   23784:	e7f5      	b.n	23772 <net_tcp_release+0x1e>
   23786:	4604      	mov	r4, r0
   23788:	e009      	b.n	2379e <net_tcp_release+0x4a>
   2378a:	2400      	movs	r4, #0
   2378c:	e007      	b.n	2379e <net_tcp_release+0x4a>
			list->tail = list->head;
   2378e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   23792:	e00e      	b.n	237b2 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23794:	461a      	mov	r2, r3
   23796:	e015      	b.n	237c4 <net_tcp_release+0x70>
   23798:	3b34      	subs	r3, #52	; 0x34
   2379a:	4620      	mov	r0, r4
   2379c:	461c      	mov	r4, r3
   2379e:	b1d0      	cbz	r0, 237d6 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   237a0:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   237a4:	6b42      	ldr	r2, [r0, #52]	; 0x34
   237a6:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   237aa:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   237ae:	428b      	cmp	r3, r1
   237b0:	d0ed      	beq.n	2378e <net_tcp_release+0x3a>
	node->next = NULL;
   237b2:	2300      	movs	r3, #0
   237b4:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   237b6:	f7f9 ff5c 	bl	1d672 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   237ba:	b144      	cbz	r4, 237ce <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   237bc:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   237c0:	d0e8      	beq.n	23794 <net_tcp_release+0x40>
	return node->next;
   237c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   237c4:	b12a      	cbz	r2, 237d2 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   237c6:	2b00      	cmp	r3, #0
   237c8:	d0e6      	beq.n	23798 <net_tcp_release+0x44>
	return node->next;
   237ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   237cc:	e7e4      	b.n	23798 <net_tcp_release+0x44>
   237ce:	4623      	mov	r3, r4
   237d0:	e7e3      	b.n	2379a <net_tcp_release+0x46>
   237d2:	2300      	movs	r3, #0
   237d4:	e7e1      	b.n	2379a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   237d6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   237da:	f006 f9e7 	bl	29bac <_impl_k_timer_stop>
	sem->count = 0;
   237de:	2400      	movs	r4, #0
   237e0:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   237e4:	4628      	mov	r0, r5
   237e6:	f7ff fdd5 	bl	23394 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   237ea:	4628      	mov	r0, r5
   237ec:	f7ff fdd7 	bl	2339e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   237f0:	4621      	mov	r1, r4
   237f2:	4628      	mov	r0, r5
   237f4:	f7ff ff83 	bl	236fe <net_tcp_change_state>
	tcp->context = NULL;
   237f8:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   237fa:	f04f 0320 	mov.w	r3, #32
   237fe:	f3ef 8111 	mrs	r1, BASEPRI
   23802:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   23806:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   2380a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2380e:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   23812:	f362 134c 	bfi	r3, r2, #5, #8
   23816:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2381a:	f381 8811 	msr	BASEPRI, r1
	return 0;
   2381e:	4620      	mov	r0, r4
   23820:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23822:	f06f 0015 	mvn.w	r0, #21
   23826:	4770      	bx	lr
   23828:	f06f 0015 	mvn.w	r0, #21
   2382c:	bd38      	pop	{r3, r4, r5, pc}
   2382e:	f06f 0015 	mvn.w	r0, #21
}
   23832:	bd38      	pop	{r3, r4, r5, pc}
   23834:	20001f68 	.word	0x20001f68

00023838 <net_tcp_prepare_segment>:
{
   23838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2383c:	b086      	sub	sp, #24
   2383e:	4604      	mov	r4, r0
   23840:	460d      	mov	r5, r1
   23842:	4692      	mov	sl, r2
   23844:	4699      	mov	r9, r3
   23846:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23848:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   2384c:	2300      	movs	r3, #0
   2384e:	9300      	str	r3, [sp, #0]
   23850:	9301      	str	r3, [sp, #4]
   23852:	9302      	str	r3, [sp, #8]
   23854:	9303      	str	r3, [sp, #12]
   23856:	9304      	str	r3, [sp, #16]
   23858:	9305      	str	r3, [sp, #20]
	if (!local) {
   2385a:	2f00      	cmp	r7, #0
   2385c:	d050      	beq.n	23900 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   2385e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   23862:	f015 0f10 	tst.w	r5, #16
   23866:	d009      	beq.n	2387c <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   23868:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   2386c:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   23870:	2b07      	cmp	r3, #7
   23872:	d048      	beq.n	23906 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   23874:	2b08      	cmp	r3, #8
   23876:	d055      	beq.n	23924 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   23878:	2b05      	cmp	r3, #5
   2387a:	d058      	beq.n	2392e <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   2387c:	f015 0f01 	tst.w	r5, #1
   23880:	d010      	beq.n	238a4 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   23882:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2388a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   2388e:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   23892:	3602      	adds	r6, #2
   23894:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23898:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   2389c:	2b04      	cmp	r3, #4
   2389e:	d053      	beq.n	23948 <net_tcp_prepare_segment+0x110>
   238a0:	2b03      	cmp	r3, #3
   238a2:	d051      	beq.n	23948 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   238a4:	f015 0f02 	tst.w	r5, #2
   238a8:	d000      	beq.n	238ac <net_tcp_prepare_segment+0x74>
		seq++;
   238aa:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   238ac:	4620      	mov	r0, r4
   238ae:	f7ff fea7 	bl	23600 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   238b2:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   238b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   238b6:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   238b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   238bc:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   238be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   238c2:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   238c4:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   238c8:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   238cc:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   238d0:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   238d4:	f8d8 2000 	ldr.w	r2, [r8]
   238d8:	4669      	mov	r1, sp
   238da:	4620      	mov	r0, r4
   238dc:	f7ff fd70 	bl	233c0 <prepare_segment>
   238e0:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   238e4:	b3a8      	cbz	r0, 23952 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   238e6:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   238ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   238ee:	1af3      	subs	r3, r6, r3
   238f0:	2b00      	cmp	r3, #0
   238f2:	dd31      	ble.n	23958 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   238f4:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   238f8:	2000      	movs	r0, #0
}
   238fa:	b006      	add	sp, #24
   238fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   23900:	6807      	ldr	r7, [r0, #0]
   23902:	3708      	adds	r7, #8
   23904:	e7ab      	b.n	2385e <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   23906:	f015 0f01 	tst.w	r5, #1
   2390a:	d006      	beq.n	2391a <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   2390c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23910:	2109      	movs	r1, #9
   23912:	4620      	mov	r0, r4
   23914:	f7ff fef3 	bl	236fe <net_tcp_change_state>
   23918:	e7b0      	b.n	2387c <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   2391a:	210a      	movs	r1, #10
   2391c:	4620      	mov	r0, r4
   2391e:	f7ff feee 	bl	236fe <net_tcp_change_state>
   23922:	e7ab      	b.n	2387c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23924:	2109      	movs	r1, #9
   23926:	4620      	mov	r0, r4
   23928:	f7ff fee9 	bl	236fe <net_tcp_change_state>
   2392c:	e7a6      	b.n	2387c <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   2392e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23936:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   2393a:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   2393e:	2106      	movs	r1, #6
   23940:	4620      	mov	r0, r4
   23942:	f7ff fedc 	bl	236fe <net_tcp_change_state>
   23946:	e799      	b.n	2387c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   23948:	2107      	movs	r1, #7
   2394a:	4620      	mov	r0, r4
   2394c:	f7ff fed7 	bl	236fe <net_tcp_change_state>
   23950:	e7a8      	b.n	238a4 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   23952:	f06f 0015 	mvn.w	r0, #21
   23956:	e7d0      	b.n	238fa <net_tcp_prepare_segment+0xc2>
	return 0;
   23958:	2000      	movs	r0, #0
   2395a:	e7ce      	b.n	238fa <net_tcp_prepare_segment+0xc2>

0002395c <net_tcp_prepare_ack>:
{
   2395c:	b570      	push	{r4, r5, r6, lr}
   2395e:	b088      	sub	sp, #32
   23960:	4604      	mov	r4, r0
   23962:	460d      	mov	r5, r1
   23964:	4616      	mov	r6, r2
   23966:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2396a:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   2396e:	2b03      	cmp	r3, #3
   23970:	d011      	beq.n	23996 <net_tcp_prepare_ack+0x3a>
   23972:	d327      	bcc.n	239c4 <net_tcp_prepare_ack+0x68>
   23974:	3b06      	subs	r3, #6
   23976:	2b01      	cmp	r3, #1
   23978:	d824      	bhi.n	239c4 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   2397a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2397e:	3b01      	subs	r3, #1
   23980:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   23984:	9202      	str	r2, [sp, #8]
   23986:	9101      	str	r1, [sp, #4]
   23988:	2200      	movs	r2, #0
   2398a:	9200      	str	r2, [sp, #0]
   2398c:	4613      	mov	r3, r2
   2398e:	2111      	movs	r1, #17
   23990:	f7ff ff52 	bl	23838 <net_tcp_prepare_segment>
   23994:	e014      	b.n	239c0 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   23996:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2399a:	3b01      	subs	r3, #1
   2399c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   239a0:	f10d 0217 	add.w	r2, sp, #23
   239a4:	a906      	add	r1, sp, #24
   239a6:	f7ff fe54 	bl	23652 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   239aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
   239ae:	9602      	str	r6, [sp, #8]
   239b0:	9501      	str	r5, [sp, #4]
   239b2:	2200      	movs	r2, #0
   239b4:	9200      	str	r2, [sp, #0]
   239b6:	aa06      	add	r2, sp, #24
   239b8:	2112      	movs	r1, #18
   239ba:	4620      	mov	r0, r4
   239bc:	f7ff ff3c 	bl	23838 <net_tcp_prepare_segment>
}
   239c0:	b008      	add	sp, #32
   239c2:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   239c4:	9602      	str	r6, [sp, #8]
   239c6:	9501      	str	r5, [sp, #4]
   239c8:	2200      	movs	r2, #0
   239ca:	9200      	str	r2, [sp, #0]
   239cc:	4613      	mov	r3, r2
   239ce:	2110      	movs	r1, #16
   239d0:	4620      	mov	r0, r4
   239d2:	f7ff ff31 	bl	23838 <net_tcp_prepare_segment>
   239d6:	e7f3      	b.n	239c0 <net_tcp_prepare_ack+0x64>

000239d8 <net_tcp_queue_data>:
{
   239d8:	b570      	push	{r4, r5, r6, lr}
   239da:	b086      	sub	sp, #24
   239dc:	4605      	mov	r5, r0
   239de:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   239e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   239e2:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   239e4:	2400      	movs	r4, #0
   239e6:	e002      	b.n	239ee <net_tcp_queue_data+0x16>
		bytes += buf->len;
   239e8:	899a      	ldrh	r2, [r3, #12]
   239ea:	4414      	add	r4, r2
		buf = buf->frags;
   239ec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   239ee:	2b00      	cmp	r3, #0
   239f0:	d1fa      	bne.n	239e8 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   239f2:	ab05      	add	r3, sp, #20
   239f4:	9302      	str	r3, [sp, #8]
   239f6:	9001      	str	r0, [sp, #4]
   239f8:	2200      	movs	r2, #0
   239fa:	9200      	str	r2, [sp, #0]
   239fc:	4613      	mov	r3, r2
   239fe:	2118      	movs	r1, #24
   23a00:	6e28      	ldr	r0, [r5, #96]	; 0x60
   23a02:	f7ff ff19 	bl	23838 <net_tcp_prepare_segment>
	if (ret) {
   23a06:	4606      	mov	r6, r0
   23a08:	bb10      	cbnz	r0, 23a50 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   23a0a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   23a0c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   23a10:	4423      	add	r3, r4
   23a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   23a16:	4a1b      	ldr	r2, [pc, #108]	; (23a84 <net_tcp_queue_data+0xac>)
   23a18:	6c93      	ldr	r3, [r2, #72]	; 0x48
   23a1a:	441c      	add	r4, r3
   23a1c:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   23a1e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23a20:	9905      	ldr	r1, [sp, #20]
   23a22:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   23a26:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   23a28:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   23a2c:	b199      	cbz	r1, 23a56 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   23a2e:	600a      	str	r2, [r1, #0]
		list->tail = node;
   23a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   23a34:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   23a36:	3058      	adds	r0, #88	; 0x58
   23a38:	f006 f942 	bl	29cc0 <_timeout_remaining_get>
   23a3c:	b180      	cbz	r0, 23a60 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   23a3e:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   23a40:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23a44:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23a48:	2b0a      	cmp	r3, #10
   23a4a:	d015      	beq.n	23a78 <net_tcp_queue_data+0xa0>
   23a4c:	f7f9 fe02 	bl	1d654 <net_pkt_ref>
}
   23a50:	4630      	mov	r0, r6
   23a52:	b006      	add	sp, #24
   23a54:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   23a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23a5e:	e7e9      	b.n	23a34 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23a60:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   23a62:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   23a66:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23a6a:	2200      	movs	r2, #0
   23a6c:	21c8      	movs	r1, #200	; 0xc8
   23a6e:	4099      	lsls	r1, r3
   23a70:	3058      	adds	r0, #88	; 0x58
   23a72:	f005 ffe3 	bl	29a3c <_impl_k_timer_start>
   23a76:	e7e2      	b.n	23a3e <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23a78:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23a7c:	2b02      	cmp	r3, #2
   23a7e:	d1e5      	bne.n	23a4c <net_tcp_queue_data+0x74>
   23a80:	e7e6      	b.n	23a50 <net_tcp_queue_data+0x78>
   23a82:	bf00      	nop
   23a84:	20002a58 	.word	0x20002a58

00023a88 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23a88:	b570      	push	{r4, r5, r6, lr}
   23a8a:	4606      	mov	r6, r0
   23a8c:	460d      	mov	r5, r1
	__asm__ volatile(
   23a8e:	f04f 0320 	mov.w	r3, #32
   23a92:	f3ef 8111 	mrs	r1, BASEPRI
   23a96:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23a9a:	2400      	movs	r4, #0
   23a9c:	e000      	b.n	23aa0 <net_tcp_foreach+0x18>
   23a9e:	3401      	adds	r4, #1
   23aa0:	2c05      	cmp	r4, #5
   23aa2:	dc16      	bgt.n	23ad2 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23aa4:	23c8      	movs	r3, #200	; 0xc8
   23aa6:	4a0c      	ldr	r2, [pc, #48]	; (23ad8 <net_tcp_foreach+0x50>)
   23aa8:	fb03 2304 	mla	r3, r3, r4, r2
   23aac:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23ab0:	f013 0f20 	tst.w	r3, #32
   23ab4:	d0f3      	beq.n	23a9e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23ab6:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23aba:	4629      	mov	r1, r5
   23abc:	20c8      	movs	r0, #200	; 0xc8
   23abe:	fb00 2004 	mla	r0, r0, r4, r2
   23ac2:	47b0      	blx	r6
	__asm__ volatile(
   23ac4:	f04f 0320 	mov.w	r3, #32
   23ac8:	f3ef 8111 	mrs	r1, BASEPRI
   23acc:	f383 8811 	msr	BASEPRI, r3
   23ad0:	e7e5      	b.n	23a9e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23ad2:	f381 8811 	msr	BASEPRI, r1
   23ad6:	bd70      	pop	{r4, r5, r6, pc}
   23ad8:	20001f68 	.word	0x20001f68

00023adc <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ade:	b085      	sub	sp, #20
   23ae0:	4605      	mov	r5, r0
   23ae2:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23ae4:	f7fa f8df 	bl	1dca6 <net_pkt_tcp_data>
   23ae8:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23aea:	2214      	movs	r2, #20
   23aec:	4601      	mov	r1, r0
   23aee:	4628      	mov	r0, r5
   23af0:	f7fa fc82 	bl	1e3f8 <net_header_fits>
   23af4:	b120      	cbz	r0, 23b00 <net_tcp_get_hdr+0x24>
		return hdr;
   23af6:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23af8:	b127      	cbz	r7, 23b04 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23afa:	4620      	mov	r0, r4
   23afc:	b005      	add	sp, #20
   23afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23b00:	2700      	movs	r7, #0
   23b02:	e7f9      	b.n	23af8 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23b04:	68a8      	ldr	r0, [r5, #8]
   23b06:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23b0a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23b0e:	9600      	str	r6, [sp, #0]
   23b10:	2302      	movs	r3, #2
   23b12:	f10d 020e 	add.w	r2, sp, #14
   23b16:	4421      	add	r1, r4
   23b18:	f7f9 ff29 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23b1c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23b20:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23b22:	9300      	str	r3, [sp, #0]
   23b24:	2302      	movs	r3, #2
   23b26:	f10d 020e 	add.w	r2, sp, #14
   23b2a:	f7f9 ff20 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23b2e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b32:	1d33      	adds	r3, r6, #4
   23b34:	9300      	str	r3, [sp, #0]
   23b36:	2304      	movs	r3, #4
   23b38:	f10d 020e 	add.w	r2, sp, #14
   23b3c:	f7f9 ff17 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23b40:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b44:	f106 0308 	add.w	r3, r6, #8
   23b48:	9300      	str	r3, [sp, #0]
   23b4a:	2304      	movs	r3, #4
   23b4c:	f10d 020e 	add.w	r2, sp, #14
   23b50:	f7f9 ff0d 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   23b54:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b58:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23b5c:	9300      	str	r3, [sp, #0]
   23b5e:	2301      	movs	r3, #1
   23b60:	f10d 020e 	add.w	r2, sp, #14
   23b64:	f7f9 ff03 	bl	1d96e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23b68:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b6c:	f106 030d 	add.w	r3, r6, #13
   23b70:	9300      	str	r3, [sp, #0]
   23b72:	2301      	movs	r3, #1
   23b74:	f10d 020e 	add.w	r2, sp, #14
   23b78:	f7f9 fef9 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23b7c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b80:	f106 030e 	add.w	r3, r6, #14
   23b84:	9300      	str	r3, [sp, #0]
   23b86:	2302      	movs	r3, #2
   23b88:	f10d 020e 	add.w	r2, sp, #14
   23b8c:	f7f9 feef 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23b90:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23b94:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23b98:	9300      	str	r3, [sp, #0]
   23b9a:	2302      	movs	r3, #2
   23b9c:	f10d 020e 	add.w	r2, sp, #14
   23ba0:	f7f9 fee5 	bl	1d96e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23ba4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ba8:	f106 0312 	add.w	r3, r6, #18
   23bac:	9300      	str	r3, [sp, #0]
   23bae:	2302      	movs	r3, #2
   23bb0:	f10d 020e 	add.w	r2, sp, #14
   23bb4:	f7f9 fedb 	bl	1d96e <net_frag_read>
	if (!frag && pos == 0xffff) {
   23bb8:	b108      	cbz	r0, 23bbe <net_tcp_get_hdr+0xe2>
	return hdr;
   23bba:	4634      	mov	r4, r6
   23bbc:	e79d      	b.n	23afa <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23bbe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23bc6:	429a      	cmp	r2, r3
   23bc8:	d001      	beq.n	23bce <net_tcp_get_hdr+0xf2>
	return hdr;
   23bca:	4634      	mov	r4, r6
   23bcc:	e795      	b.n	23afa <net_tcp_get_hdr+0x1e>
		return NULL;
   23bce:	463c      	mov	r4, r7
   23bd0:	e793      	b.n	23afa <net_tcp_get_hdr+0x1e>

00023bd2 <net_tcp_validate_seq>:
{
   23bd2:	b570      	push	{r4, r5, r6, lr}
   23bd4:	b086      	sub	sp, #24
   23bd6:	4606      	mov	r6, r0
   23bd8:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23bda:	a901      	add	r1, sp, #4
   23bdc:	f7ff ff7e 	bl	23adc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23be0:	b1e8      	cbz	r0, 23c1e <net_tcp_validate_seq+0x4c>
   23be2:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23be4:	7900      	ldrb	r0, [r0, #4]
   23be6:	795c      	ldrb	r4, [r3, #5]
   23be8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23bec:	799a      	ldrb	r2, [r3, #6]
   23bee:	79dc      	ldrb	r4, [r3, #7]
   23bf0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23bf4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23bf8:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23bfc:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23bfe:	2b00      	cmp	r3, #0
   23c00:	db0b      	blt.n	23c1a <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23c02:	4630      	mov	r0, r6
   23c04:	f7ff fcfc 	bl	23600 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23c08:	4428      	add	r0, r5
   23c0a:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23c0c:	2c00      	cmp	r4, #0
   23c0e:	db02      	blt.n	23c16 <net_tcp_validate_seq+0x44>
   23c10:	2000      	movs	r0, #0
}
   23c12:	b006      	add	sp, #24
   23c14:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23c16:	2001      	movs	r0, #1
   23c18:	e7fb      	b.n	23c12 <net_tcp_validate_seq+0x40>
   23c1a:	2000      	movs	r0, #0
   23c1c:	e7f9      	b.n	23c12 <net_tcp_validate_seq+0x40>
		return false;
   23c1e:	2000      	movs	r0, #0
   23c20:	e7f7      	b.n	23c12 <net_tcp_validate_seq+0x40>

00023c22 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c26:	b087      	sub	sp, #28
   23c28:	4605      	mov	r5, r0
   23c2a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23c2c:	2214      	movs	r2, #20
   23c2e:	f7fa fbe3 	bl	1e3f8 <net_header_fits>
   23c32:	b128      	cbz	r0, 23c40 <net_tcp_set_hdr+0x1e>
		return hdr;
   23c34:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   23c36:	b12e      	cbz	r6, 23c44 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23c38:	4620      	mov	r0, r4
   23c3a:	b007      	add	sp, #28
   23c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23c40:	2600      	movs	r6, #0
   23c42:	e7f8      	b.n	23c36 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c44:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23c48:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23c4c:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23c50:	9702      	str	r7, [sp, #8]
   23c52:	9401      	str	r4, [sp, #4]
   23c54:	f04f 0802 	mov.w	r8, #2
   23c58:	f8cd 8000 	str.w	r8, [sp]
   23c5c:	f10d 0316 	add.w	r3, sp, #22
   23c60:	440a      	add	r2, r1
   23c62:	68a9      	ldr	r1, [r5, #8]
   23c64:	4628      	mov	r0, r5
   23c66:	f7f9 fef4 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23c6a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23c6e:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23c72:	9702      	str	r7, [sp, #8]
   23c74:	9301      	str	r3, [sp, #4]
   23c76:	f8cd 8000 	str.w	r8, [sp]
   23c7a:	f10d 0316 	add.w	r3, sp, #22
   23c7e:	4601      	mov	r1, r0
   23c80:	4628      	mov	r0, r5
   23c82:	f7f9 fee6 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   23c86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23c8a:	1d23      	adds	r3, r4, #4
   23c8c:	9702      	str	r7, [sp, #8]
   23c8e:	9301      	str	r3, [sp, #4]
   23c90:	f04f 0904 	mov.w	r9, #4
   23c94:	f8cd 9000 	str.w	r9, [sp]
   23c98:	f10d 0316 	add.w	r3, sp, #22
   23c9c:	4601      	mov	r1, r0
   23c9e:	4628      	mov	r0, r5
   23ca0:	f7f9 fed7 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23ca4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ca8:	f104 0308 	add.w	r3, r4, #8
   23cac:	9702      	str	r7, [sp, #8]
   23cae:	9301      	str	r3, [sp, #4]
   23cb0:	f8cd 9000 	str.w	r9, [sp]
   23cb4:	f10d 0316 	add.w	r3, sp, #22
   23cb8:	4601      	mov	r1, r0
   23cba:	4628      	mov	r0, r5
   23cbc:	f7f9 fec9 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23cc0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23cc4:	f104 030c 	add.w	r3, r4, #12
   23cc8:	9702      	str	r7, [sp, #8]
   23cca:	9301      	str	r3, [sp, #4]
   23ccc:	f04f 0901 	mov.w	r9, #1
   23cd0:	f8cd 9000 	str.w	r9, [sp]
   23cd4:	f10d 0316 	add.w	r3, sp, #22
   23cd8:	4601      	mov	r1, r0
   23cda:	4628      	mov	r0, r5
   23cdc:	f7f9 feb9 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23ce0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ce4:	f104 030d 	add.w	r3, r4, #13
   23ce8:	9702      	str	r7, [sp, #8]
   23cea:	9301      	str	r3, [sp, #4]
   23cec:	f8cd 9000 	str.w	r9, [sp]
   23cf0:	f10d 0316 	add.w	r3, sp, #22
   23cf4:	4601      	mov	r1, r0
   23cf6:	4628      	mov	r0, r5
   23cf8:	f7f9 feab 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23cfc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23d00:	f104 030e 	add.w	r3, r4, #14
   23d04:	9702      	str	r7, [sp, #8]
   23d06:	9301      	str	r3, [sp, #4]
   23d08:	f8cd 8000 	str.w	r8, [sp]
   23d0c:	f10d 0316 	add.w	r3, sp, #22
   23d10:	4601      	mov	r1, r0
   23d12:	4628      	mov	r0, r5
   23d14:	f7f9 fe9d 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23d18:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23d1c:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23d20:	9702      	str	r7, [sp, #8]
   23d22:	9301      	str	r3, [sp, #4]
   23d24:	f8cd 8000 	str.w	r8, [sp]
   23d28:	f10d 0316 	add.w	r3, sp, #22
   23d2c:	4601      	mov	r1, r0
   23d2e:	4628      	mov	r0, r5
   23d30:	f7f9 fe8f 	bl	1da52 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   23d34:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23d38:	f104 0312 	add.w	r3, r4, #18
   23d3c:	9702      	str	r7, [sp, #8]
   23d3e:	9301      	str	r3, [sp, #4]
   23d40:	f8cd 8000 	str.w	r8, [sp]
   23d44:	f10d 0316 	add.w	r3, sp, #22
   23d48:	4601      	mov	r1, r0
   23d4a:	4628      	mov	r0, r5
   23d4c:	f7f9 fe81 	bl	1da52 <net_pkt_write>
	if (!frag) {
   23d50:	2800      	cmp	r0, #0
   23d52:	f47f af71 	bne.w	23c38 <net_tcp_set_hdr+0x16>
		return NULL;
   23d56:	4634      	mov	r4, r6
   23d58:	e76e      	b.n	23c38 <net_tcp_set_hdr+0x16>

00023d5a <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23d5a:	b570      	push	{r4, r5, r6, lr}
   23d5c:	b084      	sub	sp, #16
   23d5e:	4605      	mov	r5, r0
   23d60:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23d62:	f7f9 ffa0 	bl	1dca6 <net_pkt_tcp_data>
   23d66:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23d68:	2214      	movs	r2, #20
   23d6a:	4601      	mov	r1, r0
   23d6c:	4628      	mov	r0, r5
   23d6e:	f7fa fb43 	bl	1e3f8 <net_header_fits>
   23d72:	b120      	cbz	r0, 23d7e <net_tcp_get_chksum+0x24>
		return hdr;
   23d74:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23d76:	b123      	cbz	r3, 23d82 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23d78:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23d7a:	b004      	add	sp, #16
   23d7c:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23d7e:	2300      	movs	r3, #0
   23d80:	e7f9      	b.n	23d76 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23d82:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23d86:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23d8a:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23d8c:	3110      	adds	r1, #16
   23d8e:	f10d 030e 	add.w	r3, sp, #14
   23d92:	9300      	str	r3, [sp, #0]
   23d94:	2302      	movs	r3, #2
   23d96:	aa03      	add	r2, sp, #12
   23d98:	b289      	uxth	r1, r1
   23d9a:	4630      	mov	r0, r6
   23d9c:	f7f9 fde7 	bl	1d96e <net_frag_read>
	return chksum;
   23da0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23da4:	e7e9      	b.n	23d7a <net_tcp_get_chksum+0x20>

00023da6 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23daa:	b086      	sub	sp, #24
   23dac:	4606      	mov	r6, r0
   23dae:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23db0:	2300      	movs	r3, #0
   23db2:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23db6:	f7f9 ff76 	bl	1dca6 <net_pkt_tcp_data>
   23dba:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23dbc:	2214      	movs	r2, #20
   23dbe:	4601      	mov	r1, r0
   23dc0:	4630      	mov	r0, r6
   23dc2:	f7fa fb19 	bl	1e3f8 <net_header_fits>
   23dc6:	b170      	cbz	r0, 23de6 <net_tcp_set_chksum+0x40>
		return hdr;
   23dc8:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23dca:	b173      	cbz	r3, 23dea <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23dcc:	2300      	movs	r3, #0
   23dce:	7423      	strb	r3, [r4, #16]
   23dd0:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23dd2:	2106      	movs	r1, #6
   23dd4:	4630      	mov	r0, r6
   23dd6:	f7fa fab6 	bl	1e346 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23dda:	43c0      	mvns	r0, r0
   23ddc:	8220      	strh	r0, [r4, #16]

		return frag;
   23dde:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23de0:	b006      	add	sp, #24
   23de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23de6:	2300      	movs	r3, #0
   23de8:	e7ef      	b.n	23dca <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23dea:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23dee:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23df2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23df4:	3210      	adds	r2, #16
   23df6:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23dfa:	f8cd 8008 	str.w	r8, [sp, #8]
   23dfe:	f10d 0416 	add.w	r4, sp, #22
   23e02:	9401      	str	r4, [sp, #4]
   23e04:	2702      	movs	r7, #2
   23e06:	9700      	str	r7, [sp, #0]
   23e08:	ab05      	add	r3, sp, #20
   23e0a:	b292      	uxth	r2, r2
   23e0c:	4629      	mov	r1, r5
   23e0e:	4630      	mov	r0, r6
   23e10:	f7f9 fe1f 	bl	1da52 <net_pkt_write>
   23e14:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23e16:	2106      	movs	r1, #6
   23e18:	4630      	mov	r0, r6
   23e1a:	f7fa fa94 	bl	1e346 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23e1e:	43c0      	mvns	r0, r0
   23e20:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23e24:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23e28:	3a02      	subs	r2, #2
   23e2a:	f8cd 8008 	str.w	r8, [sp, #8]
   23e2e:	9401      	str	r4, [sp, #4]
   23e30:	9700      	str	r7, [sp, #0]
   23e32:	ab05      	add	r3, sp, #20
   23e34:	b292      	uxth	r2, r2
   23e36:	4629      	mov	r1, r5
   23e38:	4630      	mov	r0, r6
   23e3a:	f7f9 fe0a 	bl	1da52 <net_pkt_write>
	return frag;
   23e3e:	e7cf      	b.n	23de0 <net_tcp_set_chksum+0x3a>

00023e40 <net_tcp_send_pkt>:
{
   23e40:	b570      	push	{r4, r5, r6, lr}
   23e42:	b086      	sub	sp, #24
   23e44:	4605      	mov	r5, r0
	return pkt->context;
   23e46:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23e48:	a901      	add	r1, sp, #4
   23e4a:	f7ff fe47 	bl	23adc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23e4e:	2800      	cmp	r0, #0
   23e50:	f000 8086 	beq.w	23f60 <net_tcp_send_pkt+0x120>
   23e54:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   23e56:	7a02      	ldrb	r2, [r0, #8]
   23e58:	7a43      	ldrb	r3, [r0, #9]
   23e5a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23e5e:	7a81      	ldrb	r1, [r0, #10]
   23e60:	7ac3      	ldrb	r3, [r0, #11]
   23e62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23e6a:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23e6c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23e70:	429a      	cmp	r2, r3
   23e72:	d039      	beq.n	23ee8 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   23e74:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   23e76:	0a19      	lsrs	r1, r3, #8
   23e78:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23e7a:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23e7c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23e80:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   23e82:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   23e84:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23e86:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23e88:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23e90:	4299      	cmp	r1, r3
   23e92:	d007      	beq.n	23ea4 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   23e94:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23e96:	f013 0f10 	tst.w	r3, #16
   23e9a:	d103      	bne.n	23ea4 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   23e9c:	f043 0310 	orr.w	r3, r3, #16
   23ea0:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   23ea2:	2201      	movs	r2, #1
	if (calc_chksum) {
   23ea4:	bb12      	cbnz	r2, 23eec <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   23ea6:	7b63      	ldrb	r3, [r4, #13]
   23ea8:	f013 0f01 	tst.w	r3, #1
   23eac:	d006      	beq.n	23ebc <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   23eae:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23eb0:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   23eb4:	f043 0302 	orr.w	r3, r3, #2
   23eb8:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   23ebc:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23ebe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   23ec2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   23ec6:	4621      	mov	r1, r4
   23ec8:	4628      	mov	r0, r5
   23eca:	f7ff feaa 	bl	23c22 <net_tcp_set_hdr>
	return pkt->family;
   23ece:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   23ed2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   23ed6:	2b0a      	cmp	r3, #10
   23ed8:	d00d      	beq.n	23ef6 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   23eda:	4628      	mov	r0, r5
   23edc:	f7f6 ffc8 	bl	1ae70 <net_send_data>
   23ee0:	4604      	mov	r4, r0
}
   23ee2:	4620      	mov	r0, r4
   23ee4:	b006      	add	sp, #24
   23ee6:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   23ee8:	2200      	movs	r2, #0
   23eea:	e7cc      	b.n	23e86 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   23eec:	68a9      	ldr	r1, [r5, #8]
   23eee:	4628      	mov	r0, r5
   23ef0:	f7ff ff59 	bl	23da6 <net_tcp_set_chksum>
   23ef4:	e7d7      	b.n	23ea6 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   23ef6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   23efa:	2b02      	cmp	r3, #2
   23efc:	d1ed      	bne.n	23eda <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23efe:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   23f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   23f04:	b10b      	cbz	r3, 23f0a <net_tcp_send_pkt+0xca>
   23f06:	3b34      	subs	r3, #52	; 0x34
   23f08:	e006      	b.n	23f18 <net_tcp_send_pkt+0xd8>
   23f0a:	2300      	movs	r3, #0
   23f0c:	e004      	b.n	23f18 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f0e:	4611      	mov	r1, r2
   23f10:	e009      	b.n	23f26 <net_tcp_send_pkt+0xe6>
	return node->next;
   23f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   23f14:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   23f18:	b163      	cbz	r3, 23f34 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   23f1a:	42ab      	cmp	r3, r5
   23f1c:	d009      	beq.n	23f32 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f1e:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   23f22:	d0f4      	beq.n	23f0e <net_tcp_send_pkt+0xce>
	return node->next;
   23f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23f26:	b111      	cbz	r1, 23f2e <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f28:	2a00      	cmp	r2, #0
   23f2a:	d1f2      	bne.n	23f12 <net_tcp_send_pkt+0xd2>
   23f2c:	e7f2      	b.n	23f14 <net_tcp_send_pkt+0xd4>
   23f2e:	2300      	movs	r3, #0
   23f30:	e7f2      	b.n	23f18 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   23f32:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   23f34:	2b00      	cmp	r3, #0
   23f36:	d0d0      	beq.n	23eda <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   23f38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23f3c:	4628      	mov	r0, r5
   23f3e:	f7f9 fec7 	bl	1dcd0 <net_pkt_clone>
			if (!new_pkt) {
   23f42:	4605      	mov	r5, r0
   23f44:	b178      	cbz	r0, 23f66 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   23f46:	f7f6 ff93 	bl	1ae70 <net_send_data>
			if (ret < 0) {
   23f4a:	1e04      	subs	r4, r0, #0
   23f4c:	db04      	blt.n	23f58 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   23f4e:	4a07      	ldr	r2, [pc, #28]	; (23f6c <net_tcp_send_pkt+0x12c>)
   23f50:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23f52:	3301      	adds	r3, #1
   23f54:	6713      	str	r3, [r2, #112]	; 0x70
   23f56:	e7c4      	b.n	23ee2 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   23f58:	4628      	mov	r0, r5
   23f5a:	f7f9 fb8a 	bl	1d672 <net_pkt_unref>
   23f5e:	e7c0      	b.n	23ee2 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   23f60:	f06f 0479 	mvn.w	r4, #121	; 0x79
   23f64:	e7bd      	b.n	23ee2 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   23f66:	f06f 040b 	mvn.w	r4, #11
   23f6a:	e7ba      	b.n	23ee2 <net_tcp_send_pkt+0xa2>
   23f6c:	20002a58 	.word	0x20002a58

00023f70 <tcp_retry_expired>:
	return (!list->head);
   23f70:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23f72:	2b00      	cmp	r3, #0
   23f74:	d05c      	beq.n	24030 <tcp_retry_expired+0xc0>
{
   23f76:	b510      	push	{r4, lr}
   23f78:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   23f7c:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   23f7e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   23f82:	f002 031f 	and.w	r3, r2, #31
   23f86:	3301      	adds	r3, #1
   23f88:	f003 031f 	and.w	r3, r3, #31
   23f8c:	f363 0204 	bfi	r2, r3, #0, #5
   23f90:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   23f94:	2b09      	cmp	r3, #9
   23f96:	dc2f      	bgt.n	23ff8 <tcp_retry_expired+0x88>
   23f98:	2200      	movs	r2, #0
   23f9a:	21c8      	movs	r1, #200	; 0xc8
   23f9c:	4099      	lsls	r1, r3
   23f9e:	f005 fd4d 	bl	29a3c <_impl_k_timer_start>
	return list->head;
   23fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   23fa4:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   23fa8:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   23faa:	f012 0f01 	tst.w	r2, #1
   23fae:	d00d      	beq.n	23fcc <tcp_retry_expired+0x5c>
	return pkt->family;
   23fb0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   23fb4:	2a0a      	cmp	r2, #10
   23fb6:	d023      	beq.n	24000 <tcp_retry_expired+0x90>
   23fb8:	4620      	mov	r0, r4
   23fba:	f7f9 fb4b 	bl	1d654 <net_pkt_ref>
   23fbe:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   23fc0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23fc4:	f36f 0300 	bfc	r3, #0, #1
   23fc8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   23fcc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23fd0:	f043 0302 	orr.w	r3, r3, #2
   23fd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23fd8:	4620      	mov	r0, r4
   23fda:	f7ff ff31 	bl	23e40 <net_tcp_send_pkt>
   23fde:	2800      	cmp	r0, #0
   23fe0:	db13      	blt.n	2400a <tcp_retry_expired+0x9a>
	return pkt->family;
   23fe2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23fe6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23fea:	2b0a      	cmp	r3, #10
   23fec:	d01b      	beq.n	24026 <tcp_retry_expired+0xb6>
   23fee:	4a11      	ldr	r2, [pc, #68]	; (24034 <tcp_retry_expired+0xc4>)
   23ff0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23ff2:	3301      	adds	r3, #1
   23ff4:	6713      	str	r3, [r2, #112]	; 0x70
   23ff6:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   23ff8:	4608      	mov	r0, r1
   23ffa:	f7ff f99a 	bl	23332 <abort_connection>
			return;
   23ffe:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   24000:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   24004:	2b02      	cmp	r3, #2
   24006:	d1d7      	bne.n	23fb8 <tcp_retry_expired+0x48>
   24008:	e7da      	b.n	23fc0 <tcp_retry_expired+0x50>
   2400a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2400e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   24012:	2b0a      	cmp	r3, #10
   24014:	d103      	bne.n	2401e <tcp_retry_expired+0xae>
   24016:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2401a:	2b02      	cmp	r3, #2
   2401c:	d0e1      	beq.n	23fe2 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   2401e:	4620      	mov	r0, r4
   24020:	f7f9 fb27 	bl	1d672 <net_pkt_unref>
   24024:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   24026:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2402a:	2b02      	cmp	r3, #2
   2402c:	d1df      	bne.n	23fee <tcp_retry_expired+0x7e>
   2402e:	e7e2      	b.n	23ff6 <tcp_retry_expired+0x86>
   24030:	4770      	bx	lr
   24032:	bf00      	nop
   24034:	20002a58 	.word	0x20002a58

00024038 <net_tcp_send_data>:
{
   24038:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2403a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2403c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   24040:	b10c      	cbz	r4, 24046 <net_tcp_send_data+0xe>
   24042:	3c34      	subs	r4, #52	; 0x34
   24044:	e013      	b.n	2406e <net_tcp_send_data+0x36>
   24046:	2400      	movs	r4, #0
   24048:	e011      	b.n	2406e <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   2404a:	4620      	mov	r0, r4
   2404c:	f7f9 fb11 	bl	1d672 <net_pkt_unref>
	pkt->pkt_queued = send;
   24050:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24054:	f043 0302 	orr.w	r3, r3, #2
   24058:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2405c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24060:	d01e      	beq.n	240a0 <net_tcp_send_data+0x68>
	return node->next;
   24062:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24064:	b1f2      	cbz	r2, 240a4 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24066:	b103      	cbz	r3, 2406a <net_tcp_send_data+0x32>
	return node->next;
   24068:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2406a:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   2406e:	b1dc      	cbz	r4, 240a8 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   24070:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   24074:	f013 0f02 	tst.w	r3, #2
   24078:	d1f0      	bne.n	2405c <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   2407a:	f013 0f01 	tst.w	r3, #1
   2407e:	d1ed      	bne.n	2405c <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   24080:	4620      	mov	r0, r4
   24082:	f7ff fedd 	bl	23e40 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   24086:	2800      	cmp	r0, #0
   24088:	dae2      	bge.n	24050 <net_tcp_send_data+0x18>
	return pkt->family;
   2408a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2408e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   24092:	2b0a      	cmp	r3, #10
   24094:	d1d9      	bne.n	2404a <net_tcp_send_data+0x12>
   24096:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2409a:	2b02      	cmp	r3, #2
   2409c:	d1d5      	bne.n	2404a <net_tcp_send_data+0x12>
   2409e:	e7d7      	b.n	24050 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   240a0:	461a      	mov	r2, r3
   240a2:	e7df      	b.n	24064 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   240a4:	2400      	movs	r4, #0
   240a6:	e7e2      	b.n	2406e <net_tcp_send_data+0x36>
}
   240a8:	2000      	movs	r0, #0
   240aa:	bd10      	pop	{r4, pc}

000240ac <net_tcp_ack_received>:
{
   240ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240b0:	b087      	sub	sp, #28
   240b2:	4681      	mov	r9, r0
   240b4:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   240b6:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   240b8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   240bc:	b10b      	cbz	r3, 240c2 <net_tcp_ack_received+0x16>
		valid_ack = true;
   240be:	2700      	movs	r7, #0
   240c0:	e033      	b.n	2412a <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   240c2:	4a51      	ldr	r2, [pc, #324]	; (24208 <net_tcp_ack_received+0x15c>)
   240c4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   240c6:	3301      	adds	r3, #1
   240c8:	6653      	str	r3, [r2, #100]	; 0x64
   240ca:	e7f8      	b.n	240be <net_tcp_ack_received+0x12>
		list->head = node->next;
   240cc:	6823      	ldr	r3, [r4, #0]
   240ce:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   240d2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   240d6:	42a2      	cmp	r2, r4
   240d8:	d005      	beq.n	240e6 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   240da:	2300      	movs	r3, #0
   240dc:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   240de:	4630      	mov	r0, r6
   240e0:	f7f9 fac7 	bl	1d672 <net_pkt_unref>
   240e4:	e021      	b.n	2412a <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   240e6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   240ea:	e7f6      	b.n	240da <net_tcp_ack_received+0x2e>
   240ec:	4a46      	ldr	r2, [pc, #280]	; (24208 <net_tcp_ack_received+0x15c>)
   240ee:	6e53      	ldr	r3, [r2, #100]	; 0x64
   240f0:	3301      	adds	r3, #1
   240f2:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   240f4:	b12f      	cbz	r7, 24102 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   240f6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   240fa:	f3c3 3343 	ubfx	r3, r3, #13, #4
   240fe:	2b04      	cmp	r3, #4
   24100:	d046      	beq.n	24190 <net_tcp_ack_received+0xe4>
}
   24102:	b007      	add	sp, #28
   24104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   24108:	2108      	movs	r1, #8
   2410a:	4628      	mov	r0, r5
   2410c:	f7ff faf7 	bl	236fe <net_tcp_change_state>
		list->head = node->next;
   24110:	6823      	ldr	r3, [r4, #0]
   24112:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   24116:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2411a:	42a2      	cmp	r2, r4
   2411c:	d035      	beq.n	2418a <net_tcp_ack_received+0xde>
	node->next = NULL;
   2411e:	2300      	movs	r3, #0
   24120:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   24122:	4630      	mov	r0, r6
   24124:	f7f9 faa5 	bl	1d672 <net_pkt_unref>
		valid_ack = true;
   24128:	2701      	movs	r7, #1
	return (!list->head);
   2412a:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   2412e:	2c00      	cmp	r4, #0
   24130:	d0e0      	beq.n	240f4 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   24132:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   24136:	a901      	add	r1, sp, #4
   24138:	4630      	mov	r0, r6
   2413a:	f7ff fccf 	bl	23adc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2413e:	4602      	mov	r2, r0
   24140:	2800      	cmp	r0, #0
   24142:	d0c3      	beq.n	240cc <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   24144:	7903      	ldrb	r3, [r0, #4]
   24146:	7941      	ldrb	r1, [r0, #5]
   24148:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2414c:	7980      	ldrb	r0, [r0, #6]
   2414e:	79d3      	ldrb	r3, [r2, #7]
   24150:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   24154:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   24158:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   2415c:	440b      	add	r3, r1
   2415e:	3b01      	subs	r3, #1
   24160:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   24164:	2b00      	cmp	r3, #0
   24166:	ddc1      	ble.n	240ec <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   24168:	7b53      	ldrb	r3, [r2, #13]
   2416a:	f013 0f01 	tst.w	r3, #1
   2416e:	d0cf      	beq.n	24110 <net_tcp_ack_received+0x64>
   24170:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   24174:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   24178:	2b07      	cmp	r3, #7
   2417a:	d0c5      	beq.n	24108 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   2417c:	2b0a      	cmp	r3, #10
   2417e:	d1c7      	bne.n	24110 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24180:	2109      	movs	r1, #9
   24182:	4628      	mov	r0, r5
   24184:	f7ff fabb 	bl	236fe <net_tcp_change_state>
   24188:	e7c2      	b.n	24110 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   2418a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2418e:	e7c6      	b.n	2411e <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   24190:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   24194:	f7ff f8db 	bl	2334e <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   24198:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   2419c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   241a0:	f412 7f00 	tst.w	r2, #512	; 0x200
   241a4:	d0ad      	beq.n	24102 <net_tcp_ack_received+0x56>
	return list->head;
   241a6:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   241aa:	b108      	cbz	r0, 241b0 <net_tcp_ack_received+0x104>
   241ac:	3834      	subs	r0, #52	; 0x34
   241ae:	e013      	b.n	241d8 <net_tcp_ack_received+0x12c>
   241b0:	2000      	movs	r0, #0
   241b2:	e011      	b.n	241d8 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   241b4:	f7f9 fa4e 	bl	1d654 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   241b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   241bc:	f36f 0300 	bfc	r3, #0, #1
   241c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   241c4:	b140      	cbz	r0, 241d8 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241c6:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   241ca:	d014      	beq.n	241f6 <net_tcp_ack_received+0x14a>
	return node->next;
   241cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
   241ce:	b1a2      	cbz	r2, 241fa <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241d0:	b103      	cbz	r3, 241d4 <net_tcp_ack_received+0x128>
	return node->next;
   241d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   241d4:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   241d8:	b188      	cbz	r0, 241fe <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   241da:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   241de:	f013 0f01 	tst.w	r3, #1
   241e2:	d0ef      	beq.n	241c4 <net_tcp_ack_received+0x118>
	return pkt->family;
   241e4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   241e8:	2b0a      	cmp	r3, #10
   241ea:	d1e3      	bne.n	241b4 <net_tcp_ack_received+0x108>
   241ec:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   241f0:	2b02      	cmp	r3, #2
   241f2:	d1df      	bne.n	241b4 <net_tcp_ack_received+0x108>
   241f4:	e7e0      	b.n	241b8 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241f6:	461a      	mov	r2, r3
   241f8:	e7e9      	b.n	241ce <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   241fa:	2000      	movs	r0, #0
   241fc:	e7ec      	b.n	241d8 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   241fe:	4648      	mov	r0, r9
   24200:	f7ff ff1a 	bl	24038 <net_tcp_send_data>
}
   24204:	e77d      	b.n	24102 <net_tcp_ack_received+0x56>
   24206:	bf00      	nop
   24208:	20002a58 	.word	0x20002a58

0002420c <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   2420c:	6842      	ldr	r2, [r0, #4]
   2420e:	4b08      	ldr	r3, [pc, #32]	; (24230 <iface2str+0x24>)
   24210:	429a      	cmp	r2, r3
   24212:	d004      	beq.n	2421e <iface2str+0x12>
	if (extra) {
   24214:	b151      	cbz	r1, 2422c <iface2str+0x20>
		*extra = "==============";
   24216:	4b07      	ldr	r3, [pc, #28]	; (24234 <iface2str+0x28>)
   24218:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   2421a:	4807      	ldr	r0, [pc, #28]	; (24238 <iface2str+0x2c>)
   2421c:	4770      	bx	lr
		if (extra) {
   2421e:	b119      	cbz	r1, 24228 <iface2str+0x1c>
			*extra = "=========";
   24220:	4b06      	ldr	r3, [pc, #24]	; (2423c <iface2str+0x30>)
   24222:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   24224:	4806      	ldr	r0, [pc, #24]	; (24240 <iface2str+0x34>)
   24226:	4770      	bx	lr
   24228:	4805      	ldr	r0, [pc, #20]	; (24240 <iface2str+0x34>)
   2422a:	4770      	bx	lr
	return "<unknown type>";
   2422c:	4802      	ldr	r0, [pc, #8]	; (24238 <iface2str+0x2c>)
}
   2422e:	4770      	bx	lr
   24230:	0002e52c 	.word	0x0002e52c
   24234:	00031608 	.word	0x00031608
   24238:	000315ec 	.word	0x000315ec
   2423c:	000315fc 	.word	0x000315fc
   24240:	000315e0 	.word	0x000315e0

00024244 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   24244:	2300      	movs	r3, #0
   24246:	2b05      	cmp	r3, #5
   24248:	dc18      	bgt.n	2427c <slab_pool_found_already+0x38>
{
   2424a:	b410      	push	{r4}
   2424c:	e008      	b.n	24260 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   2424e:	f103 0408 	add.w	r4, r3, #8
   24252:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24256:	4294      	cmp	r4, r2
   24258:	d00e      	beq.n	24278 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2425a:	3301      	adds	r3, #1
   2425c:	2b05      	cmp	r3, #5
   2425e:	dc08      	bgt.n	24272 <slab_pool_found_already+0x2e>
		if (slab) {
   24260:	2900      	cmp	r1, #0
   24262:	d0f4      	beq.n	2424e <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   24264:	1c9c      	adds	r4, r3, #2
   24266:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2426a:	42a1      	cmp	r1, r4
   2426c:	d1f5      	bne.n	2425a <slab_pool_found_already+0x16>
				return true;
   2426e:	2001      	movs	r0, #1
   24270:	e000      	b.n	24274 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   24272:	2000      	movs	r0, #0
}
   24274:	bc10      	pop	{r4}
   24276:	4770      	bx	lr
				return true;
   24278:	2001      	movs	r0, #1
   2427a:	e7fb      	b.n	24274 <slab_pool_found_already+0x30>
	return false;
   2427c:	2000      	movs	r0, #0
}
   2427e:	4770      	bx	lr

00024280 <net_shell_cmd_allocs>:
{
   24280:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   24282:	4802      	ldr	r0, [pc, #8]	; (2428c <net_shell_cmd_allocs+0xc>)
   24284:	f7de fe5e 	bl	2f44 <printk>
}
   24288:	2000      	movs	r0, #0
   2428a:	bd08      	pop	{r3, pc}
   2428c:	000318e4 	.word	0x000318e4

00024290 <net_shell_cmd_app>:
{
   24290:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   24292:	4802      	ldr	r0, [pc, #8]	; (2429c <net_shell_cmd_app+0xc>)
   24294:	f7de fe56 	bl	2f44 <printk>
}
   24298:	2000      	movs	r0, #0
   2429a:	bd08      	pop	{r3, pc}
   2429c:	0003191c 	.word	0x0003191c

000242a0 <net_shell_cmd_arp>:
{
   242a0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   242a2:	4802      	ldr	r0, [pc, #8]	; (242ac <net_shell_cmd_arp+0xc>)
   242a4:	f7de fe4e 	bl	2f44 <printk>
}
   242a8:	2000      	movs	r0, #0
   242aa:	bd08      	pop	{r3, pc}
   242ac:	000319a0 	.word	0x000319a0

000242b0 <net_shell_cmd_dns>:
{
   242b0:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   242b2:	4802      	ldr	r0, [pc, #8]	; (242bc <net_shell_cmd_dns+0xc>)
   242b4:	f7de fe46 	bl	2f44 <printk>
}
   242b8:	2000      	movs	r0, #0
   242ba:	bd08      	pop	{r3, pc}
   242bc:	00031aa0 	.word	0x00031aa0

000242c0 <net_shell_cmd_http>:
{
   242c0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   242c2:	4802      	ldr	r0, [pc, #8]	; (242cc <net_shell_cmd_http+0xc>)
   242c4:	f7de fe3e 	bl	2f44 <printk>
}
   242c8:	2000      	movs	r0, #0
   242ca:	bd08      	pop	{r3, pc}
   242cc:	00031ac0 	.word	0x00031ac0

000242d0 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   242d0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   242d4:	f013 0f01 	tst.w	r3, #1
   242d8:	d032      	beq.n	24340 <context_info+0x70>
{
   242da:	b570      	push	{r4, r5, r6, lr}
   242dc:	460d      	mov	r5, r1
   242de:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   242e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   242e2:	b19b      	cbz	r3, 2430c <context_info+0x3c>
		slab = context->tx_slab();
   242e4:	4798      	blx	r3
   242e6:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   242e8:	2200      	movs	r2, #0
   242ea:	4601      	mov	r1, r0
   242ec:	4628      	mov	r0, r5
   242ee:	f7ff ffa9 	bl	24244 <slab_pool_found_already>
   242f2:	b100      	cbz	r0, 242f6 <context_info+0x26>
   242f4:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   242f6:	68b2      	ldr	r2, [r6, #8]
   242f8:	4631      	mov	r1, r6
   242fa:	4812      	ldr	r0, [pc, #72]	; (24344 <context_info+0x74>)
   242fc:	f7de fe22 	bl	2f44 <printk>
#endif
		info->are_external_pools = true;
   24300:	2301      	movs	r3, #1
   24302:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   24304:	682b      	ldr	r3, [r5, #0]
   24306:	3302      	adds	r3, #2
   24308:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   2430c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2430e:	b19b      	cbz	r3, 24338 <context_info+0x68>
		pool = context->data_pool();
   24310:	4798      	blx	r3
   24312:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   24314:	4602      	mov	r2, r0
   24316:	2100      	movs	r1, #0
   24318:	4628      	mov	r0, r5
   2431a:	f7ff ff93 	bl	24244 <slab_pool_found_already>
   2431e:	2800      	cmp	r0, #0
   24320:	d1e8      	bne.n	242f4 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   24322:	8a22      	ldrh	r2, [r4, #16]
   24324:	4621      	mov	r1, r4
   24326:	4808      	ldr	r0, [pc, #32]	; (24348 <context_info+0x78>)
   24328:	f7de fe0c 	bl	2f44 <printk>
#endif
		info->are_external_pools = true;
   2432c:	2301      	movs	r3, #1
   2432e:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   24330:	682b      	ldr	r3, [r5, #0]
   24332:	3308      	adds	r3, #8
   24334:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   24338:	682b      	ldr	r3, [r5, #0]
   2433a:	3301      	adds	r3, #1
   2433c:	602b      	str	r3, [r5, #0]
   2433e:	e7d9      	b.n	242f4 <context_info+0x24>
   24340:	4770      	bx	lr
   24342:	bf00      	nop
   24344:	000315a4 	.word	0x000315a4
   24348:	000315b0 	.word	0x000315b0

0002434c <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   2434c:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   2434e:	4802      	ldr	r0, [pc, #8]	; (24358 <net_shell_cmd_rpl+0xc>)
   24350:	f7de fdf8 	bl	2f44 <printk>
#endif

	return 0;
}
   24354:	2000      	movs	r0, #0
   24356:	bd08      	pop	{r3, pc}
   24358:	00031cd0 	.word	0x00031cd0

0002435c <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   2435c:	b530      	push	{r4, r5, lr}
   2435e:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24360:	4d3f      	ldr	r5, [pc, #252]	; (24460 <net_shell_cmd_stacks+0x104>)
   24362:	e011      	b.n	24388 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   24364:	1a81      	subs	r1, r0, r2
   24366:	2364      	movs	r3, #100	; 0x64
   24368:	fb03 f301 	mul.w	r3, r3, r1
   2436c:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   24370:	9304      	str	r3, [sp, #16]
   24372:	9003      	str	r0, [sp, #12]
   24374:	9102      	str	r1, [sp, #8]
   24376:	9201      	str	r2, [sp, #4]
   24378:	9000      	str	r0, [sp, #0]
   2437a:	68eb      	ldr	r3, [r5, #12]
   2437c:	68aa      	ldr	r2, [r5, #8]
   2437e:	6869      	ldr	r1, [r5, #4]
   24380:	4838      	ldr	r0, [pc, #224]	; (24464 <net_shell_cmd_stacks+0x108>)
   24382:	f7de fddf 	bl	2f44 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24386:	3514      	adds	r5, #20
   24388:	4b37      	ldr	r3, [pc, #220]	; (24468 <net_shell_cmd_stacks+0x10c>)
   2438a:	429d      	cmp	r5, r3
   2438c:	d00b      	beq.n	243a6 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   2438e:	682c      	ldr	r4, [r5, #0]
   24390:	6928      	ldr	r0, [r5, #16]
   24392:	2300      	movs	r3, #0
	size_t unused = 0;
   24394:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24396:	4298      	cmp	r0, r3
   24398:	d9e4      	bls.n	24364 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   2439a:	5ce1      	ldrb	r1, [r4, r3]
   2439c:	29aa      	cmp	r1, #170	; 0xaa
   2439e:	d1e1      	bne.n	24364 <net_shell_cmd_stacks+0x8>
			unused++;
   243a0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   243a2:	3301      	adds	r3, #1
   243a4:	e7f7      	b.n	24396 <net_shell_cmd_stacks+0x3a>
   243a6:	2300      	movs	r3, #0
   243a8:	461a      	mov	r2, r3
   243aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   243ae:	d206      	bcs.n	243be <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   243b0:	492e      	ldr	r1, [pc, #184]	; (2446c <net_shell_cmd_stacks+0x110>)
   243b2:	5cc9      	ldrb	r1, [r1, r3]
   243b4:	29aa      	cmp	r1, #170	; 0xaa
   243b6:	d102      	bne.n	243be <net_shell_cmd_stacks+0x62>
			unused++;
   243b8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   243ba:	3301      	adds	r3, #1
   243bc:	e7f5      	b.n	243aa <net_shell_cmd_stacks+0x4e>
   243be:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   243c2:	2364      	movs	r3, #100	; 0x64
   243c4:	fb03 f301 	mul.w	r3, r3, r1
   243c8:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   243ca:	9304      	str	r3, [sp, #16]
   243cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   243d0:	9303      	str	r3, [sp, #12]
   243d2:	9102      	str	r1, [sp, #8]
   243d4:	9201      	str	r2, [sp, #4]
   243d6:	9300      	str	r3, [sp, #0]
   243d8:	4a25      	ldr	r2, [pc, #148]	; (24470 <net_shell_cmd_stacks+0x114>)
   243da:	4926      	ldr	r1, [pc, #152]	; (24474 <net_shell_cmd_stacks+0x118>)
   243dc:	4826      	ldr	r0, [pc, #152]	; (24478 <net_shell_cmd_stacks+0x11c>)
   243de:	f7de fdb1 	bl	2f44 <printk>
   243e2:	2300      	movs	r3, #0
	size_t unused = 0;
   243e4:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   243e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   243ea:	d206      	bcs.n	243fa <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   243ec:	4923      	ldr	r1, [pc, #140]	; (2447c <net_shell_cmd_stacks+0x120>)
   243ee:	5cc9      	ldrb	r1, [r1, r3]
   243f0:	29aa      	cmp	r1, #170	; 0xaa
   243f2:	d102      	bne.n	243fa <net_shell_cmd_stacks+0x9e>
			unused++;
   243f4:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   243f6:	3301      	adds	r3, #1
   243f8:	e7f5      	b.n	243e6 <net_shell_cmd_stacks+0x8a>
   243fa:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   243fe:	2364      	movs	r3, #100	; 0x64
   24400:	fb03 f301 	mul.w	r3, r3, r1
   24404:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24406:	9304      	str	r3, [sp, #16]
   24408:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2440c:	9303      	str	r3, [sp, #12]
   2440e:	9102      	str	r1, [sp, #8]
   24410:	9201      	str	r2, [sp, #4]
   24412:	9300      	str	r3, [sp, #0]
   24414:	4a1a      	ldr	r2, [pc, #104]	; (24480 <net_shell_cmd_stacks+0x124>)
   24416:	491b      	ldr	r1, [pc, #108]	; (24484 <net_shell_cmd_stacks+0x128>)
   24418:	4817      	ldr	r0, [pc, #92]	; (24478 <net_shell_cmd_stacks+0x11c>)
   2441a:	f7de fd93 	bl	2f44 <printk>
   2441e:	2300      	movs	r3, #0
	size_t unused = 0;
   24420:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24426:	d206      	bcs.n	24436 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   24428:	4917      	ldr	r1, [pc, #92]	; (24488 <net_shell_cmd_stacks+0x12c>)
   2442a:	5cc9      	ldrb	r1, [r1, r3]
   2442c:	29aa      	cmp	r1, #170	; 0xaa
   2442e:	d102      	bne.n	24436 <net_shell_cmd_stacks+0xda>
			unused++;
   24430:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24432:	3301      	adds	r3, #1
   24434:	e7f5      	b.n	24422 <net_shell_cmd_stacks+0xc6>
   24436:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   2443a:	2364      	movs	r3, #100	; 0x64
   2443c:	fb03 f301 	mul.w	r3, r3, r1
   24440:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24442:	9304      	str	r3, [sp, #16]
   24444:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24448:	9303      	str	r3, [sp, #12]
   2444a:	9102      	str	r1, [sp, #8]
   2444c:	9201      	str	r2, [sp, #4]
   2444e:	9300      	str	r3, [sp, #0]
   24450:	4a0e      	ldr	r2, [pc, #56]	; (2448c <net_shell_cmd_stacks+0x130>)
   24452:	490f      	ldr	r1, [pc, #60]	; (24490 <net_shell_cmd_stacks+0x134>)
   24454:	4808      	ldr	r0, [pc, #32]	; (24478 <net_shell_cmd_stacks+0x11c>)
   24456:	f7de fd75 	bl	2f44 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   2445a:	2000      	movs	r0, #0
   2445c:	b007      	add	sp, #28
   2445e:	bd30      	pop	{r4, r5, pc}
   24460:	2000d474 	.word	0x2000d474
   24464:	00031d04 	.word	0x00031d04
   24468:	2000d4b0 	.word	0x2000d4b0
   2446c:	2000a328 	.word	0x2000a328
   24470:	00031d48 	.word	0x00031d48
   24474:	00031d54 	.word	0x00031d54
   24478:	00031d5c 	.word	0x00031d5c
   2447c:	2000ac68 	.word	0x2000ac68
   24480:	00031d9c 	.word	0x00031d9c
   24484:	00031db0 	.word	0x00031db0
   24488:	2000b468 	.word	0x2000b468
   2448c:	00031db4 	.word	0x00031db4
   24490:	00031dc8 	.word	0x00031dc8

00024494 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   24494:	b510      	push	{r4, lr}
   24496:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   24498:	4c34      	ldr	r4, [pc, #208]	; (2456c <net_shell_cmd_stats+0xd8>)
   2449a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2449c:	9300      	str	r3, [sp, #0]
   2449e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   244a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   244a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   244a4:	4832      	ldr	r0, [pc, #200]	; (24570 <net_shell_cmd_stats+0xdc>)
   244a6:	f7de fd4d 	bl	2f44 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   244aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   244ae:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   244b2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   244b6:	482f      	ldr	r0, [pc, #188]	; (24574 <net_shell_cmd_stats+0xe0>)
   244b8:	f7de fd44 	bl	2f44 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   244bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   244c0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   244c4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   244c8:	482b      	ldr	r0, [pc, #172]	; (24578 <net_shell_cmd_stats+0xe4>)
   244ca:	f7de fd3b 	bl	2f44 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   244ce:	6963      	ldr	r3, [r4, #20]
   244d0:	6922      	ldr	r2, [r4, #16]
   244d2:	68e1      	ldr	r1, [r4, #12]
   244d4:	4829      	ldr	r0, [pc, #164]	; (2457c <net_shell_cmd_stats+0xe8>)
   244d6:	f7de fd35 	bl	2f44 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   244da:	6a23      	ldr	r3, [r4, #32]
   244dc:	69e2      	ldr	r2, [r4, #28]
   244de:	69a1      	ldr	r1, [r4, #24]
   244e0:	4827      	ldr	r0, [pc, #156]	; (24580 <net_shell_cmd_stats+0xec>)
   244e2:	f7de fd2f 	bl	2f44 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   244e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   244e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   244ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   244ec:	4825      	ldr	r0, [pc, #148]	; (24584 <net_shell_cmd_stats+0xf0>)
   244ee:	f7de fd29 	bl	2f44 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   244f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   244f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   244f6:	4824      	ldr	r0, [pc, #144]	; (24588 <net_shell_cmd_stats+0xf4>)
   244f8:	f7de fd24 	bl	2f44 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   244fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   244fe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   24502:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   24506:	4821      	ldr	r0, [pc, #132]	; (2458c <net_shell_cmd_stats+0xf8>)
   24508:	f7de fd1c 	bl	2f44 <printk>
	printk("UDP chkerr     %d\n",
   2450c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   24510:	481f      	ldr	r0, [pc, #124]	; (24590 <net_shell_cmd_stats+0xfc>)
   24512:	f7de fd17 	bl	2f44 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   24516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24518:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2451a:	481e      	ldr	r0, [pc, #120]	; (24594 <net_shell_cmd_stats+0x100>)
   2451c:	f7de fd12 	bl	2f44 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   24520:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24522:	6da2      	ldr	r2, [r4, #88]	; 0x58
   24524:	6d61      	ldr	r1, [r4, #84]	; 0x54
   24526:	481c      	ldr	r0, [pc, #112]	; (24598 <net_shell_cmd_stats+0x104>)
   24528:	f7de fd0c 	bl	2f44 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   2452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2452e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   24530:	6d21      	ldr	r1, [r4, #80]	; 0x50
   24532:	481a      	ldr	r0, [pc, #104]	; (2459c <net_shell_cmd_stats+0x108>)
   24534:	f7de fd06 	bl	2f44 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   24538:	6f23      	ldr	r3, [r4, #112]	; 0x70
   2453a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   2453c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2453e:	4818      	ldr	r0, [pc, #96]	; (245a0 <net_shell_cmd_stats+0x10c>)
   24540:	f7de fd00 	bl	2f44 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   24544:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   24546:	6f61      	ldr	r1, [r4, #116]	; 0x74
   24548:	4816      	ldr	r0, [pc, #88]	; (245a4 <net_shell_cmd_stats+0x110>)
   2454a:	f7de fcfb 	bl	2f44 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   2454e:	68a1      	ldr	r1, [r4, #8]
   24550:	4815      	ldr	r0, [pc, #84]	; (245a8 <net_shell_cmd_stats+0x114>)
   24552:	f7de fcf7 	bl	2f44 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   24556:	6861      	ldr	r1, [r4, #4]
   24558:	4814      	ldr	r0, [pc, #80]	; (245ac <net_shell_cmd_stats+0x118>)
   2455a:	f7de fcf3 	bl	2f44 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   2455e:	6821      	ldr	r1, [r4, #0]
   24560:	4813      	ldr	r0, [pc, #76]	; (245b0 <net_shell_cmd_stats+0x11c>)
   24562:	f7de fcef 	bl	2f44 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   24566:	2000      	movs	r0, #0
   24568:	b002      	add	sp, #8
   2456a:	bd10      	pop	{r4, pc}
   2456c:	20002a58 	.word	0x20002a58
   24570:	00031dd0 	.word	0x00031dd0
   24574:	00031e00 	.word	0x00031e00
   24578:	00031e24 	.word	0x00031e24
   2457c:	00031e48 	.word	0x00031e48
   24580:	00031e74 	.word	0x00031e74
   24584:	00031e9c 	.word	0x00031e9c
   24588:	00031ec0 	.word	0x00031ec0
   2458c:	00031ee0 	.word	0x00031ee0
   24590:	00031f04 	.word	0x00031f04
   24594:	00031f18 	.word	0x00031f18
   24598:	00031f34 	.word	0x00031f34
   2459c:	00031f58 	.word	0x00031f58
   245a0:	00031f80 	.word	0x00031f80
   245a4:	00031fa8 	.word	0x00031fa8
   245a8:	00031fc8 	.word	0x00031fc8
   245ac:	00031fdc 	.word	0x00031fdc
   245b0:	00031ff0 	.word	0x00031ff0

000245b4 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   245b4:	b508      	push	{r3, lr}
	printk("Message sent\n");
   245b6:	4802      	ldr	r0, [pc, #8]	; (245c0 <tcp_sent_cb+0xc>)
   245b8:	f7de fcc4 	bl	2f44 <printk>
   245bc:	bd08      	pop	{r3, pc}
   245be:	bf00      	nop
   245c0:	000322b0 	.word	0x000322b0

000245c4 <net_shell_cmd_conn>:
{
   245c4:	b510      	push	{r4, lr}
   245c6:	b082      	sub	sp, #8
	int count = 0;
   245c8:	ac02      	add	r4, sp, #8
   245ca:	2300      	movs	r3, #0
   245cc:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   245d0:	4810      	ldr	r0, [pc, #64]	; (24614 <net_shell_cmd_conn+0x50>)
   245d2:	f7de fcb7 	bl	2f44 <printk>
	net_context_foreach(context_cb, &count);
   245d6:	4621      	mov	r1, r4
   245d8:	480f      	ldr	r0, [pc, #60]	; (24618 <net_shell_cmd_conn+0x54>)
   245da:	f7f8 ff03 	bl	1d3e4 <net_context_foreach>
	if (count == 0) {
   245de:	9b01      	ldr	r3, [sp, #4]
   245e0:	b17b      	cbz	r3, 24602 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   245e2:	490e      	ldr	r1, [pc, #56]	; (2461c <net_shell_cmd_conn+0x58>)
   245e4:	480e      	ldr	r0, [pc, #56]	; (24620 <net_shell_cmd_conn+0x5c>)
   245e6:	f7de fcad 	bl	2f44 <printk>
	count = 0;
   245ea:	a902      	add	r1, sp, #8
   245ec:	2300      	movs	r3, #0
   245ee:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   245f2:	480c      	ldr	r0, [pc, #48]	; (24624 <net_shell_cmd_conn+0x60>)
   245f4:	f7ff fa48 	bl	23a88 <net_tcp_foreach>
	if (count == 0) {
   245f8:	9b01      	ldr	r3, [sp, #4]
   245fa:	b133      	cbz	r3, 2460a <net_shell_cmd_conn+0x46>
}
   245fc:	2000      	movs	r0, #0
   245fe:	b002      	add	sp, #8
   24600:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   24602:	4809      	ldr	r0, [pc, #36]	; (24628 <net_shell_cmd_conn+0x64>)
   24604:	f7de fc9e 	bl	2f44 <printk>
   24608:	e7eb      	b.n	245e2 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   2460a:	4808      	ldr	r0, [pc, #32]	; (2462c <net_shell_cmd_conn+0x68>)
   2460c:	f7de fc9a 	bl	2f44 <printk>
   24610:	e7f4      	b.n	245fc <net_shell_cmd_conn+0x38>
   24612:	bf00      	nop
   24614:	000319fc 	.word	0x000319fc
   24618:	000247a1 	.word	0x000247a1
   2461c:	0002eae8 	.word	0x0002eae8
   24620:	00031a4c 	.word	0x00031a4c
   24624:	00024631 	.word	0x00024631
   24628:	00031a3c 	.word	0x00031a3c
   2462c:	00031a8c 	.word	0x00031a8c

00024630 <tcp_cb>:
{
   24630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24634:	b084      	sub	sp, #16
   24636:	4604      	mov	r4, r0
   24638:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   2463a:	f7fe ffe4 	bl	23606 <net_tcp_get_recv_mss>
   2463e:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   24640:	6823      	ldr	r3, [r4, #0]
   24642:	895a      	ldrh	r2, [r3, #10]
   24644:	0215      	lsls	r5, r2, #8
   24646:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   2464a:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   2464c:	8adb      	ldrh	r3, [r3, #22]
   2464e:	021e      	lsls	r6, r3, #8
   24650:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   24654:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   24656:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   2465a:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   2465e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   24662:	f3c0 3043 	ubfx	r0, r0, #13, #4
   24666:	f7ff f845 	bl	236f4 <net_tcp_state_str>
   2466a:	9003      	str	r0, [sp, #12]
   2466c:	f8cd 8008 	str.w	r8, [sp, #8]
   24670:	f8cd a004 	str.w	sl, [sp, #4]
   24674:	f8cd 9000 	str.w	r9, [sp]
   24678:	4633      	mov	r3, r6
   2467a:	462a      	mov	r2, r5
   2467c:	4621      	mov	r1, r4
   2467e:	4804      	ldr	r0, [pc, #16]	; (24690 <tcp_cb+0x60>)
   24680:	f7de fc60 	bl	2f44 <printk>
	(*count)++;
   24684:	683b      	ldr	r3, [r7, #0]
   24686:	3301      	adds	r3, #1
   24688:	603b      	str	r3, [r7, #0]
}
   2468a:	b004      	add	sp, #16
   2468c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24690:	0003220c 	.word	0x0003220c

00024694 <get_addresses>:
{
   24694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24698:	b083      	sub	sp, #12
   2469a:	460d      	mov	r5, r1
   2469c:	4616      	mov	r6, r2
   2469e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   246a0:	8903      	ldrh	r3, [r0, #8]
   246a2:	2b0a      	cmp	r3, #10
   246a4:	d008      	beq.n	246b8 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   246a6:	b393      	cbz	r3, 2470e <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   246a8:	4a1c      	ldr	r2, [pc, #112]	; (2471c <get_addresses+0x88>)
   246aa:	4631      	mov	r1, r6
   246ac:	4628      	mov	r0, r5
   246ae:	f7de fc57 	bl	2f60 <snprintk>
}
   246b2:	b003      	add	sp, #12
   246b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   246b8:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   246ba:	f8df 9068 	ldr.w	r9, [pc, #104]	; 24724 <get_addresses+0x90>
   246be:	2328      	movs	r3, #40	; 0x28
   246c0:	464a      	mov	r2, r9
   246c2:	68c1      	ldr	r1, [r0, #12]
   246c4:	200a      	movs	r0, #10
   246c6:	f7f9 fc1d 	bl	1df04 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   246ca:	8962      	ldrh	r2, [r4, #10]
   246cc:	0213      	lsls	r3, r2, #8
   246ce:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   246d2:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   246d4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 24728 <get_addresses+0x94>
   246d8:	9300      	str	r3, [sp, #0]
   246da:	4603      	mov	r3, r0
   246dc:	4642      	mov	r2, r8
   246de:	4631      	mov	r1, r6
   246e0:	4628      	mov	r0, r5
   246e2:	f7de fc3d 	bl	2f60 <snprintk>
   246e6:	2328      	movs	r3, #40	; 0x28
   246e8:	464a      	mov	r2, r9
   246ea:	f104 0118 	add.w	r1, r4, #24
   246ee:	200a      	movs	r0, #10
   246f0:	f7f9 fc08 	bl	1df04 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   246f4:	8ae2      	ldrh	r2, [r4, #22]
   246f6:	0213      	lsls	r3, r2, #8
   246f8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   246fc:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   246fe:	9300      	str	r3, [sp, #0]
   24700:	4603      	mov	r3, r0
   24702:	4642      	mov	r2, r8
   24704:	990a      	ldr	r1, [sp, #40]	; 0x28
   24706:	4638      	mov	r0, r7
   24708:	f7de fc2a 	bl	2f60 <snprintk>
   2470c:	e7d1      	b.n	246b2 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   2470e:	4a04      	ldr	r2, [pc, #16]	; (24720 <get_addresses+0x8c>)
   24710:	4631      	mov	r1, r6
   24712:	4628      	mov	r0, r5
   24714:	f7de fc24 	bl	2f60 <snprintk>
   24718:	e7cb      	b.n	246b2 <get_addresses+0x1e>
   2471a:	bf00      	nop
   2471c:	000315d4 	.word	0x000315d4
   24720:	000315c8 	.word	0x000315c8
   24724:	20002430 	.word	0x20002430
   24728:	000315c0 	.word	0x000315c0

0002472c <print_connect_info>:
{
   2472c:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   2472e:	2802      	cmp	r0, #2
   24730:	d008      	beq.n	24744 <print_connect_info+0x18>
   24732:	460d      	mov	r5, r1
   24734:	4614      	mov	r4, r2
   24736:	280a      	cmp	r0, #10
   24738:	d008      	beq.n	2474c <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   2473a:	4601      	mov	r1, r0
   2473c:	4813      	ldr	r0, [pc, #76]	; (2478c <print_connect_info+0x60>)
   2473e:	f7de fc01 	bl	2f44 <printk>
   24742:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   24744:	4812      	ldr	r0, [pc, #72]	; (24790 <print_connect_info+0x64>)
   24746:	f7de fbfd 	bl	2f44 <printk>
		break;
   2474a:	bd70      	pop	{r4, r5, r6, pc}
   2474c:	4e11      	ldr	r6, [pc, #68]	; (24794 <print_connect_info+0x68>)
   2474e:	2328      	movs	r3, #40	; 0x28
   24750:	4632      	mov	r2, r6
   24752:	3104      	adds	r1, #4
   24754:	200a      	movs	r0, #10
   24756:	f7f9 fbd5 	bl	1df04 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   2475a:	886b      	ldrh	r3, [r5, #2]
   2475c:	021a      	lsls	r2, r3, #8
   2475e:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   24762:	b292      	uxth	r2, r2
   24764:	4601      	mov	r1, r0
   24766:	480c      	ldr	r0, [pc, #48]	; (24798 <print_connect_info+0x6c>)
   24768:	f7de fbec 	bl	2f44 <printk>
   2476c:	2328      	movs	r3, #40	; 0x28
   2476e:	4632      	mov	r2, r6
   24770:	1d21      	adds	r1, r4, #4
   24772:	200a      	movs	r0, #10
   24774:	f7f9 fbc6 	bl	1df04 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   24778:	8863      	ldrh	r3, [r4, #2]
   2477a:	021a      	lsls	r2, r3, #8
   2477c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   24780:	b292      	uxth	r2, r2
   24782:	4601      	mov	r1, r0
   24784:	4805      	ldr	r0, [pc, #20]	; (2479c <print_connect_info+0x70>)
   24786:	f7de fbdd 	bl	2f44 <printk>
		break;
   2478a:	bd70      	pop	{r4, r5, r6, pc}
   2478c:	000321a4 	.word	0x000321a4
   24790:	00032168 	.word	0x00032168
   24794:	20002430 	.word	0x20002430
   24798:	0003217c 	.word	0x0003217c
   2479c:	00032198 	.word	0x00032198

000247a0 <context_cb>:
{
   247a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   247a2:	b09f      	sub	sp, #124	; 0x7c
   247a4:	4604      	mov	r4, r0
   247a6:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   247a8:	2100      	movs	r1, #0
   247aa:	9106      	str	r1, [sp, #24]
   247ac:	222b      	movs	r2, #43	; 0x2b
   247ae:	a807      	add	r0, sp, #28
   247b0:	f005 fd0e 	bl	2a1d0 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   247b4:	222f      	movs	r2, #47	; 0x2f
   247b6:	9200      	str	r2, [sp, #0]
   247b8:	ab06      	add	r3, sp, #24
   247ba:	a912      	add	r1, sp, #72	; 0x48
   247bc:	4620      	mov	r0, r4
   247be:	f7ff ff69 	bl	24694 <get_addresses>
	       (*count) + 1, context,
   247c2:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   247c4:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   247c6:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   247ca:	f7f7 fd0b 	bl	1c1e4 <net_if_get_by_index>
   247ce:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   247d0:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   247d4:	f012 0f10 	tst.w	r2, #16
   247d8:	d022      	beq.n	24820 <context_cb+0x80>
		return AF_INET6;
   247da:	210a      	movs	r1, #10
   247dc:	290a      	cmp	r1, #10
   247de:	d021      	beq.n	24824 <context_cb+0x84>
   247e0:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   247e2:	f012 0f20 	tst.w	r2, #32
   247e6:	d01f      	beq.n	24828 <context_cb+0x88>
		return SOCK_STREAM;
   247e8:	2001      	movs	r0, #1
   247ea:	2802      	cmp	r0, #2
   247ec:	d01e      	beq.n	2482c <context_cb+0x8c>
   247ee:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   247f0:	f012 0f40 	tst.w	r2, #64	; 0x40
   247f4:	d01c      	beq.n	24830 <context_cb+0x90>
		return IPPROTO_TCP;
   247f6:	2206      	movs	r2, #6
   247f8:	2a11      	cmp	r2, #17
   247fa:	d01b      	beq.n	24834 <context_cb+0x94>
   247fc:	2754      	movs	r7, #84	; 0x54
   247fe:	aa06      	add	r2, sp, #24
   24800:	9204      	str	r2, [sp, #16]
   24802:	aa12      	add	r2, sp, #72	; 0x48
   24804:	9203      	str	r2, [sp, #12]
   24806:	9702      	str	r7, [sp, #8]
   24808:	9001      	str	r0, [sp, #4]
   2480a:	9100      	str	r1, [sp, #0]
   2480c:	4622      	mov	r2, r4
   2480e:	4631      	mov	r1, r6
   24810:	4809      	ldr	r0, [pc, #36]	; (24838 <context_cb+0x98>)
   24812:	f7de fb97 	bl	2f44 <printk>
	(*count)++;
   24816:	682b      	ldr	r3, [r5, #0]
   24818:	3301      	adds	r3, #1
   2481a:	602b      	str	r3, [r5, #0]
}
   2481c:	b01f      	add	sp, #124	; 0x7c
   2481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   24820:	2102      	movs	r1, #2
   24822:	e7db      	b.n	247dc <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   24824:	2136      	movs	r1, #54	; 0x36
   24826:	e7dc      	b.n	247e2 <context_cb+0x42>
	return SOCK_DGRAM;
   24828:	2002      	movs	r0, #2
   2482a:	e7de      	b.n	247ea <context_cb+0x4a>
   2482c:	2044      	movs	r0, #68	; 0x44
   2482e:	e7df      	b.n	247f0 <context_cb+0x50>
	return IPPROTO_UDP;
   24830:	2211      	movs	r2, #17
   24832:	e7e1      	b.n	247f8 <context_cb+0x58>
   24834:	2755      	movs	r7, #85	; 0x55
   24836:	e7e2      	b.n	247fe <context_cb+0x5e>
   24838:	00031580 	.word	0x00031580

0002483c <net_shell_cmd_iface>:
{
   2483c:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   2483e:	2100      	movs	r1, #0
   24840:	4802      	ldr	r0, [pc, #8]	; (2484c <net_shell_cmd_iface+0x10>)
   24842:	f7f7 fceb 	bl	1c21c <net_if_foreach>
}
   24846:	2000      	movs	r0, #0
   24848:	bd08      	pop	{r3, pc}
   2484a:	bf00      	nop
   2484c:	0001f3ed 	.word	0x0001f3ed

00024850 <net_shell_cmd_route>:
{
   24850:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   24852:	2100      	movs	r1, #0
   24854:	4802      	ldr	r0, [pc, #8]	; (24860 <net_shell_cmd_route+0x10>)
   24856:	f7f7 fce1 	bl	1c21c <net_if_foreach>
}
   2485a:	2000      	movs	r0, #0
   2485c:	bd08      	pop	{r3, pc}
   2485e:	bf00      	nop
   24860:	00024c8d 	.word	0x00024c8d

00024864 <net_shell_cmd_mem>:
{
   24864:	b500      	push	{lr}
   24866:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   24868:	ab0e      	add	r3, sp, #56	; 0x38
   2486a:	aa0f      	add	r2, sp, #60	; 0x3c
   2486c:	a910      	add	r1, sp, #64	; 0x40
   2486e:	a811      	add	r0, sp, #68	; 0x44
   24870:	f7f9 f9aa 	bl	1dbc8 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   24874:	f44f 7100 	mov.w	r1, #512	; 0x200
   24878:	4819      	ldr	r0, [pc, #100]	; (248e0 <net_shell_cmd_mem+0x7c>)
   2487a:	f7de fb63 	bl	2f44 <printk>
	printk("Network buffer pools:\n");
   2487e:	4819      	ldr	r0, [pc, #100]	; (248e4 <net_shell_cmd_mem+0x80>)
   24880:	f7de fb60 	bl	2f44 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   24884:	4818      	ldr	r0, [pc, #96]	; (248e8 <net_shell_cmd_mem+0x84>)
   24886:	f7de fb5d 	bl	2f44 <printk>
	printk("Address\t\tTotal\tName\n");
   2488a:	4818      	ldr	r0, [pc, #96]	; (248ec <net_shell_cmd_mem+0x88>)
   2488c:	f7de fb5a 	bl	2f44 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   24890:	9911      	ldr	r1, [sp, #68]	; 0x44
   24892:	688a      	ldr	r2, [r1, #8]
   24894:	4816      	ldr	r0, [pc, #88]	; (248f0 <net_shell_cmd_mem+0x8c>)
   24896:	f7de fb55 	bl	2f44 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   2489a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2489c:	688a      	ldr	r2, [r1, #8]
   2489e:	4815      	ldr	r0, [pc, #84]	; (248f4 <net_shell_cmd_mem+0x90>)
   248a0:	f7de fb50 	bl	2f44 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   248a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   248a6:	8a0a      	ldrh	r2, [r1, #16]
   248a8:	4813      	ldr	r0, [pc, #76]	; (248f8 <net_shell_cmd_mem+0x94>)
   248aa:	f7de fb4b 	bl	2f44 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   248ae:	990e      	ldr	r1, [sp, #56]	; 0x38
   248b0:	8a0a      	ldrh	r2, [r1, #16]
   248b2:	4812      	ldr	r0, [pc, #72]	; (248fc <net_shell_cmd_mem+0x98>)
   248b4:	f7de fb46 	bl	2f44 <printk>
		memset(&info, 0, sizeof(info));
   248b8:	2238      	movs	r2, #56	; 0x38
   248ba:	2100      	movs	r1, #0
   248bc:	4668      	mov	r0, sp
   248be:	f005 fc87 	bl	2a1d0 <memset>
		net_context_foreach(context_info, &info);
   248c2:	4669      	mov	r1, sp
   248c4:	480e      	ldr	r0, [pc, #56]	; (24900 <net_shell_cmd_mem+0x9c>)
   248c6:	f7f8 fd8d 	bl	1d3e4 <net_context_foreach>
		if (!info.are_external_pools) {
   248ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   248ce:	b11b      	cbz	r3, 248d8 <net_shell_cmd_mem+0x74>
}
   248d0:	2000      	movs	r0, #0
   248d2:	b013      	add	sp, #76	; 0x4c
   248d4:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   248d8:	480a      	ldr	r0, [pc, #40]	; (24904 <net_shell_cmd_mem+0xa0>)
   248da:	f7de fb33 	bl	2f44 <printk>
   248de:	e7f7      	b.n	248d0 <net_shell_cmd_mem+0x6c>
   248e0:	00031b24 	.word	0x00031b24
   248e4:	00031b40 	.word	0x00031b40
   248e8:	00031b58 	.word	0x00031b58
   248ec:	00031b84 	.word	0x00031b84
   248f0:	00031b9c 	.word	0x00031b9c
   248f4:	00031ba8 	.word	0x00031ba8
   248f8:	00031bb4 	.word	0x00031bb4
   248fc:	00031bc4 	.word	0x00031bc4
   24900:	000242d1 	.word	0x000242d1
   24904:	00031bd4 	.word	0x00031bd4

00024908 <net_shell_cmd_nbr>:
{
   24908:	b510      	push	{r4, lr}
   2490a:	b086      	sub	sp, #24
	int count = 0;
   2490c:	2300      	movs	r3, #0
   2490e:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   24910:	6848      	ldr	r0, [r1, #4]
   24912:	b1d8      	cbz	r0, 2494c <net_shell_cmd_nbr+0x44>
   24914:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   24916:	4920      	ldr	r1, [pc, #128]	; (24998 <net_shell_cmd_nbr+0x90>)
   24918:	f7db fd76 	bl	408 <strcmp>
   2491c:	b9f8      	cbnz	r0, 2495e <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   2491e:	68a1      	ldr	r1, [r4, #8]
   24920:	b311      	cbz	r1, 24968 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   24922:	aa01      	add	r2, sp, #4
   24924:	200a      	movs	r0, #10
   24926:	f7f9 fbc4 	bl	1e0b2 <net_addr_pton>
		if (ret < 0) {
   2492a:	2800      	cmp	r0, #0
   2492c:	db20      	blt.n	24970 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   2492e:	a901      	add	r1, sp, #4
   24930:	2000      	movs	r0, #0
   24932:	f7fb f83f 	bl	1f9b4 <net_ipv6_nbr_rm>
   24936:	bb00      	cbnz	r0, 2497a <net_shell_cmd_nbr+0x72>
   24938:	2328      	movs	r3, #40	; 0x28
   2493a:	4a18      	ldr	r2, [pc, #96]	; (2499c <net_shell_cmd_nbr+0x94>)
   2493c:	a901      	add	r1, sp, #4
   2493e:	200a      	movs	r0, #10
   24940:	f7f9 fae0 	bl	1df04 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   24944:	4601      	mov	r1, r0
   24946:	4816      	ldr	r0, [pc, #88]	; (249a0 <net_shell_cmd_nbr+0x98>)
   24948:	f7de fafc 	bl	2f44 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   2494c:	a905      	add	r1, sp, #20
   2494e:	4815      	ldr	r0, [pc, #84]	; (249a4 <net_shell_cmd_nbr+0x9c>)
   24950:	f7fb f822 	bl	1f998 <net_ipv6_nbr_foreach>
	if (count == 0) {
   24954:	9b05      	ldr	r3, [sp, #20]
   24956:	b1db      	cbz	r3, 24990 <net_shell_cmd_nbr+0x88>
}
   24958:	2000      	movs	r0, #0
   2495a:	b006      	add	sp, #24
   2495c:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   2495e:	6861      	ldr	r1, [r4, #4]
   24960:	4811      	ldr	r0, [pc, #68]	; (249a8 <net_shell_cmd_nbr+0xa0>)
   24962:	f7de faef 	bl	2f44 <printk>
			return 0;
   24966:	e7f7      	b.n	24958 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24968:	4810      	ldr	r0, [pc, #64]	; (249ac <net_shell_cmd_nbr+0xa4>)
   2496a:	f7de faeb 	bl	2f44 <printk>
			return 0;
   2496e:	e7f3      	b.n	24958 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24970:	68a1      	ldr	r1, [r4, #8]
   24972:	480f      	ldr	r0, [pc, #60]	; (249b0 <net_shell_cmd_nbr+0xa8>)
   24974:	f7de fae6 	bl	2f44 <printk>
			return 0;
   24978:	e7ee      	b.n	24958 <net_shell_cmd_nbr+0x50>
   2497a:	2328      	movs	r3, #40	; 0x28
   2497c:	4a07      	ldr	r2, [pc, #28]	; (2499c <net_shell_cmd_nbr+0x94>)
   2497e:	a901      	add	r1, sp, #4
   24980:	200a      	movs	r0, #10
   24982:	f7f9 fabf 	bl	1df04 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   24986:	4601      	mov	r1, r0
   24988:	480a      	ldr	r0, [pc, #40]	; (249b4 <net_shell_cmd_nbr+0xac>)
   2498a:	f7de fadb 	bl	2f44 <printk>
   2498e:	e7dd      	b.n	2494c <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24990:	4809      	ldr	r0, [pc, #36]	; (249b8 <net_shell_cmd_nbr+0xb0>)
   24992:	f7de fad7 	bl	2f44 <printk>
   24996:	e7df      	b.n	24958 <net_shell_cmd_nbr+0x50>
   24998:	00031bf8 	.word	0x00031bf8
   2499c:	20002430 	.word	0x20002430
   249a0:	00031c48 	.word	0x00031c48
   249a4:	00024a61 	.word	0x00024a61
   249a8:	00031bfc 	.word	0x00031bfc
   249ac:	00031c14 	.word	0x00031c14
   249b0:	00031c34 	.word	0x00031c34
   249b4:	00031c64 	.word	0x00031c64
   249b8:	00031c7c 	.word	0x00031c7c

000249bc <route_cb>:
{
   249bc:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   249be:	68c3      	ldr	r3, [r0, #12]
   249c0:	428b      	cmp	r3, r1
   249c2:	d000      	beq.n	249c6 <route_cb+0xa>
   249c4:	bd38      	pop	{r3, r4, r5, pc}
   249c6:	4604      	mov	r4, r0
   249c8:	2328      	movs	r3, #40	; 0x28
   249ca:	4a1e      	ldr	r2, [pc, #120]	; (24a44 <route_cb+0x88>)
   249cc:	f100 0110 	add.w	r1, r0, #16
   249d0:	200a      	movs	r0, #10
   249d2:	f7f9 fa97 	bl	1df04 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   249d6:	f894 2020 	ldrb.w	r2, [r4, #32]
   249da:	4601      	mov	r1, r0
   249dc:	481a      	ldr	r0, [pc, #104]	; (24a48 <route_cb+0x8c>)
   249de:	f7de fab1 	bl	2f44 <printk>
	return list->head;
   249e2:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   249e4:	2500      	movs	r5, #0
   249e6:	e009      	b.n	249fc <route_cb+0x40>
			printk("addr : <unknown>\n");
   249e8:	4818      	ldr	r0, [pc, #96]	; (24a4c <route_cb+0x90>)
   249ea:	f7de faab 	bl	2f44 <printk>
		count++;
   249ee:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   249f0:	4622      	mov	r2, r4
   249f2:	b1dc      	cbz	r4, 24a2c <route_cb+0x70>
	return node->next;
   249f4:	6823      	ldr	r3, [r4, #0]
   249f6:	b1db      	cbz	r3, 24a30 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   249f8:	b1e2      	cbz	r2, 24a34 <route_cb+0x78>
	return node->next;
   249fa:	6824      	ldr	r4, [r4, #0]
   249fc:	b1e4      	cbz	r4, 24a38 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   249fe:	6861      	ldr	r1, [r4, #4]
   24a00:	2900      	cmp	r1, #0
   24a02:	d0f5      	beq.n	249f0 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   24a04:	4812      	ldr	r0, [pc, #72]	; (24a50 <route_cb+0x94>)
   24a06:	f7de fa9d 	bl	2f44 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24a0a:	6863      	ldr	r3, [r4, #4]
   24a0c:	7858      	ldrb	r0, [r3, #1]
   24a0e:	28ff      	cmp	r0, #255	; 0xff
   24a10:	d0ea      	beq.n	249e8 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   24a12:	f7fa fcc1 	bl	1f398 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   24a16:	2318      	movs	r3, #24
   24a18:	4a0e      	ldr	r2, [pc, #56]	; (24a54 <route_cb+0x98>)
   24a1a:	7841      	ldrb	r1, [r0, #1]
   24a1c:	3002      	adds	r0, #2
   24a1e:	f7f9 fa47 	bl	1deb0 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   24a22:	4601      	mov	r1, r0
   24a24:	480c      	ldr	r0, [pc, #48]	; (24a58 <route_cb+0x9c>)
   24a26:	f7de fa8d 	bl	2f44 <printk>
   24a2a:	e7e0      	b.n	249ee <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24a2c:	4623      	mov	r3, r4
   24a2e:	e7e2      	b.n	249f6 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24a30:	2400      	movs	r4, #0
   24a32:	e7e3      	b.n	249fc <route_cb+0x40>
   24a34:	2400      	movs	r4, #0
   24a36:	e7e1      	b.n	249fc <route_cb+0x40>
	if (count == 0) {
   24a38:	2d00      	cmp	r5, #0
   24a3a:	d1c3      	bne.n	249c4 <route_cb+0x8>
		printk("\t<none>\n");
   24a3c:	4807      	ldr	r0, [pc, #28]	; (24a5c <route_cb+0xa0>)
   24a3e:	f7de fa81 	bl	2f44 <printk>
   24a42:	e7bf      	b.n	249c4 <route_cb+0x8>
   24a44:	20002430 	.word	0x20002430
   24a48:	000321c4 	.word	0x000321c4
   24a4c:	000321ec 	.word	0x000321ec
   24a50:	000321dc 	.word	0x000321dc
   24a54:	20002418 	.word	0x20002418
   24a58:	00032200 	.word	0x00032200
   24a5c:	00031700 	.word	0x00031700

00024a60 <nbr_cb>:
{
   24a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a64:	b08f      	sub	sp, #60	; 0x3c
   24a66:	4604      	mov	r4, r0
   24a68:	460d      	mov	r5, r1
	if (*count == 0) {
   24a6a:	680b      	ldr	r3, [r1, #0]
   24a6c:	2b00      	cmp	r3, #0
   24a6e:	d052      	beq.n	24b16 <nbr_cb+0xb6>
	(*count)++;
   24a70:	682b      	ldr	r3, [r5, #0]
   24a72:	3301      	adds	r3, #1
   24a74:	602b      	str	r3, [r5, #0]
   24a76:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24a78:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24a7c:	f7fa ff68 	bl	1f950 <net_ipv6_nbr_state2str>
   24a80:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   24a82:	f7db fe3d 	bl	700 <strlen>
   24a86:	2805      	cmp	r0, #5
   24a88:	d04a      	beq.n	24b20 <nbr_cb+0xc0>
	char *state_pad = "";
   24a8a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 24b34 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24a8e:	682b      	ldr	r3, [r5, #0]
   24a90:	930c      	str	r3, [sp, #48]	; 0x30
   24a92:	68a3      	ldr	r3, [r4, #8]
   24a94:	930d      	str	r3, [sp, #52]	; 0x34
   24a96:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24a98:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24a9c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24a9e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24aa2:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24aa6:	3020      	adds	r0, #32
   24aa8:	f005 f90a 	bl	29cc0 <_timeout_remaining_get>
   24aac:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24aae:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24ab0:	28ff      	cmp	r0, #255	; 0xff
   24ab2:	d038      	beq.n	24b26 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24ab4:	f7fa fc70 	bl	1f398 <net_nbr_get_lladdr>
   24ab8:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24abc:	7860      	ldrb	r0, [r4, #1]
   24abe:	f7fa fc6b 	bl	1f398 <net_nbr_get_lladdr>
   24ac2:	2318      	movs	r3, #24
   24ac4:	4a19      	ldr	r2, [pc, #100]	; (24b2c <nbr_cb+0xcc>)
   24ac6:	7841      	ldrb	r1, [r0, #1]
   24ac8:	4658      	mov	r0, fp
   24aca:	f7f9 f9f1 	bl	1deb0 <net_sprint_ll_addr_buf>
   24ace:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24ad0:	7860      	ldrb	r0, [r4, #1]
   24ad2:	f7fa fc61 	bl	1f398 <net_nbr_get_lladdr>
   24ad6:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24ad8:	2328      	movs	r3, #40	; 0x28
   24ada:	4a15      	ldr	r2, [pc, #84]	; (24b30 <nbr_cb+0xd0>)
   24adc:	3104      	adds	r1, #4
   24ade:	200a      	movs	r0, #10
   24ae0:	f7f9 fa10 	bl	1df04 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24ae4:	9009      	str	r0, [sp, #36]	; 0x24
   24ae6:	4b13      	ldr	r3, [pc, #76]	; (24b34 <nbr_cb+0xd4>)
   24ae8:	9308      	str	r3, [sp, #32]
   24aea:	f8cd b01c 	str.w	fp, [sp, #28]
   24aee:	f8cd a018 	str.w	sl, [sp, #24]
   24af2:	f8cd 9014 	str.w	r9, [sp, #20]
   24af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24af8:	9304      	str	r3, [sp, #16]
   24afa:	f8cd 800c 	str.w	r8, [sp, #12]
   24afe:	9702      	str	r7, [sp, #8]
   24b00:	9601      	str	r6, [sp, #4]
   24b02:	9500      	str	r5, [sp, #0]
   24b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24b06:	4622      	mov	r2, r4
   24b08:	990c      	ldr	r1, [sp, #48]	; 0x30
   24b0a:	480b      	ldr	r0, [pc, #44]	; (24b38 <nbr_cb+0xd8>)
   24b0c:	f7de fa1a 	bl	2f44 <printk>
}
   24b10:	b00f      	add	sp, #60	; 0x3c
   24b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24b16:	4907      	ldr	r1, [pc, #28]	; (24b34 <nbr_cb+0xd4>)
   24b18:	4808      	ldr	r0, [pc, #32]	; (24b3c <nbr_cb+0xdc>)
   24b1a:	f7de fa13 	bl	2f44 <printk>
   24b1e:	e7a7      	b.n	24a70 <nbr_cb+0x10>
		state_pad = "    ";
   24b20:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24b40 <nbr_cb+0xe0>
   24b24:	e7b3      	b.n	24a8e <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24b26:	f8df b01c 	ldr.w	fp, [pc, #28]	; 24b44 <nbr_cb+0xe4>
   24b2a:	e7d1      	b.n	24ad0 <nbr_cb+0x70>
   24b2c:	20002418 	.word	0x20002418
   24b30:	20002430 	.word	0x20002430
   24b34:	0002eae8 	.word	0x0002eae8
   24b38:	000318b4 	.word	0x000318b4
   24b3c:	0003185c 	.word	0x0003185c
   24b40:	00031850 	.word	0x00031850
   24b44:	00031858 	.word	0x00031858

00024b48 <_ping_ipv6>:
{
   24b48:	b570      	push	{r4, r5, r6, lr}
   24b4a:	b084      	sub	sp, #16
   24b4c:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24b4e:	f7f6 fbb1 	bl	1b2b4 <net_if_get_default>
   24b52:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   24b54:	466a      	mov	r2, sp
   24b56:	4629      	mov	r1, r5
   24b58:	200a      	movs	r0, #10
   24b5a:	f7f9 faaa 	bl	1e0b2 <net_addr_pton>
   24b5e:	2800      	cmp	r0, #0
   24b60:	db26      	blt.n	24bb0 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   24b62:	4815      	ldr	r0, [pc, #84]	; (24bb8 <_ping_ipv6+0x70>)
   24b64:	f7f9 fe0c 	bl	1e780 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24b68:	4669      	mov	r1, sp
   24b6a:	2000      	movs	r0, #0
   24b6c:	f7fb fa4c 	bl	20008 <net_ipv6_nbr_lookup>
	if (nbr) {
   24b70:	b100      	cbz	r0, 24b74 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   24b72:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   24b74:	4669      	mov	r1, sp
   24b76:	2000      	movs	r0, #0
   24b78:	f7fd ffc4 	bl	22b04 <net_route_lookup>
	if (route) {
   24b7c:	b100      	cbz	r0, 24b80 <_ping_ipv6+0x38>
		iface = route->iface;
   24b7e:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24b80:	f7dd fa46 	bl	2010 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24b84:	b286      	uxth	r6, r0
					   sys_rand32_get());
   24b86:	f7dd fa43 	bl	2010 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24b8a:	b283      	uxth	r3, r0
   24b8c:	4632      	mov	r2, r6
   24b8e:	4669      	mov	r1, sp
   24b90:	4620      	mov	r0, r4
   24b92:	f7fa fa8f 	bl	1f0b4 <net_icmpv6_send_echo_request>
	if (ret) {
   24b96:	4604      	mov	r4, r0
   24b98:	b930      	cbnz	r0, 24ba8 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24b9a:	4629      	mov	r1, r5
   24b9c:	4807      	ldr	r0, [pc, #28]	; (24bbc <_ping_ipv6+0x74>)
   24b9e:	f7de f9d1 	bl	2f44 <printk>
}
   24ba2:	4620      	mov	r0, r4
   24ba4:	b004      	add	sp, #16
   24ba6:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24ba8:	4803      	ldr	r0, [pc, #12]	; (24bb8 <_ping_ipv6+0x70>)
   24baa:	f7f9 fdf5 	bl	1e798 <net_icmpv6_unregister_handler>
   24bae:	e7f8      	b.n	24ba2 <_ping_ipv6+0x5a>
		return -EINVAL;
   24bb0:	f06f 0415 	mvn.w	r4, #21
   24bb4:	e7f5      	b.n	24ba2 <_ping_ipv6+0x5a>
   24bb6:	bf00      	nop
   24bb8:	2000c4fc 	.word	0x2000c4fc
   24bbc:	0003156c 	.word	0x0003156c

00024bc0 <net_shell_cmd_ping>:
{
   24bc0:	b510      	push	{r4, lr}
   24bc2:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24bc4:	4912      	ldr	r1, [pc, #72]	; (24c10 <net_shell_cmd_ping+0x50>)
   24bc6:	6820      	ldr	r0, [r4, #0]
   24bc8:	f7db fc1e 	bl	408 <strcmp>
   24bcc:	b958      	cbnz	r0, 24be6 <net_shell_cmd_ping+0x26>
		host = argv[1];
   24bce:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24bd0:	f7ff ffba 	bl	24b48 <_ping_ipv6>
	if (!ret) {
   24bd4:	b168      	cbz	r0, 24bf2 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24bd6:	f110 0f05 	cmn.w	r0, #5
   24bda:	d006      	beq.n	24bea <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24bdc:	480d      	ldr	r0, [pc, #52]	; (24c14 <net_shell_cmd_ping+0x54>)
   24bde:	f7de f9b1 	bl	2f44 <printk>
}
   24be2:	2000      	movs	r0, #0
   24be4:	bd10      	pop	{r4, pc}
		host = argv[2];
   24be6:	68a0      	ldr	r0, [r4, #8]
   24be8:	e7f2      	b.n	24bd0 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24bea:	480b      	ldr	r0, [pc, #44]	; (24c18 <net_shell_cmd_ping+0x58>)
   24bec:	f7de f9aa 	bl	2f44 <printk>
		return 0;
   24bf0:	e7f7      	b.n	24be2 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24bf2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24bf6:	4809      	ldr	r0, [pc, #36]	; (24c1c <net_shell_cmd_ping+0x5c>)
   24bf8:	f004 fb2a 	bl	29250 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24bfc:	f110 0f0b 	cmn.w	r0, #11
   24c00:	d1ef      	bne.n	24be2 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24c02:	4807      	ldr	r0, [pc, #28]	; (24c20 <net_shell_cmd_ping+0x60>)
   24c04:	f7de f99e 	bl	2f44 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24c08:	4806      	ldr	r0, [pc, #24]	; (24c24 <net_shell_cmd_ping+0x64>)
   24c0a:	f7f9 fdc5 	bl	1e798 <net_icmpv6_unregister_handler>
   24c0e:	e7e8      	b.n	24be2 <net_shell_cmd_ping+0x22>
   24c10:	00031c8c 	.word	0x00031c8c
   24c14:	00031cac 	.word	0x00031cac
   24c18:	00031c94 	.word	0x00031c94
   24c1c:	2000d04c 	.word	0x2000d04c
   24c20:	00031cc0 	.word	0x00031cc0
   24c24:	2000c4fc 	.word	0x2000c4fc

00024c28 <_handle_ipv6_echo_reply>:
{
   24c28:	b530      	push	{r4, r5, lr}
   24c2a:	b08b      	sub	sp, #44	; 0x2c
   24c2c:	4605      	mov	r5, r0
	return pkt->frags->data;
   24c2e:	6883      	ldr	r3, [r0, #8]
   24c30:	6899      	ldr	r1, [r3, #8]
   24c32:	4c11      	ldr	r4, [pc, #68]	; (24c78 <_handle_ipv6_echo_reply+0x50>)
   24c34:	2328      	movs	r3, #40	; 0x28
   24c36:	4622      	mov	r2, r4
   24c38:	3118      	adds	r1, #24
   24c3a:	200a      	movs	r0, #10
   24c3c:	f7f9 f962 	bl	1df04 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24c40:	4603      	mov	r3, r0
   24c42:	4a0e      	ldr	r2, [pc, #56]	; (24c7c <_handle_ipv6_echo_reply+0x54>)
   24c44:	2128      	movs	r1, #40	; 0x28
   24c46:	4668      	mov	r0, sp
   24c48:	f7de f98a 	bl	2f60 <snprintk>
   24c4c:	68ab      	ldr	r3, [r5, #8]
   24c4e:	6899      	ldr	r1, [r3, #8]
   24c50:	2328      	movs	r3, #40	; 0x28
   24c52:	4622      	mov	r2, r4
   24c54:	3108      	adds	r1, #8
   24c56:	200a      	movs	r0, #10
   24c58:	f7f9 f954 	bl	1df04 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24c5c:	466a      	mov	r2, sp
   24c5e:	4601      	mov	r1, r0
   24c60:	4807      	ldr	r0, [pc, #28]	; (24c80 <_handle_ipv6_echo_reply+0x58>)
   24c62:	f7de f96f 	bl	2f44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   24c66:	4807      	ldr	r0, [pc, #28]	; (24c84 <_handle_ipv6_echo_reply+0x5c>)
   24c68:	f004 fadf 	bl	2922a <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24c6c:	4806      	ldr	r0, [pc, #24]	; (24c88 <_handle_ipv6_echo_reply+0x60>)
   24c6e:	f7f9 fd93 	bl	1e798 <net_icmpv6_unregister_handler>
}
   24c72:	2000      	movs	r0, #0
   24c74:	b00b      	add	sp, #44	; 0x2c
   24c76:	bd30      	pop	{r4, r5, pc}
   24c78:	20002430 	.word	0x20002430
   24c7c:	0002e61c 	.word	0x0002e61c
   24c80:	00031548 	.word	0x00031548
   24c84:	2000d04c 	.word	0x2000d04c
   24c88:	2000c4fc 	.word	0x2000c4fc

00024c8c <iface_per_route_cb>:
{
   24c8c:	b510      	push	{r4, lr}
   24c8e:	b082      	sub	sp, #8
   24c90:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24c92:	a901      	add	r1, sp, #4
   24c94:	f7ff faba 	bl	2420c <iface2str>
   24c98:	4602      	mov	r2, r0
   24c9a:	4621      	mov	r1, r4
   24c9c:	4806      	ldr	r0, [pc, #24]	; (24cb8 <iface_per_route_cb+0x2c>)
   24c9e:	f7de f951 	bl	2f44 <printk>
	printk("=======================================%s\n", extra);
   24ca2:	9901      	ldr	r1, [sp, #4]
   24ca4:	4805      	ldr	r0, [pc, #20]	; (24cbc <iface_per_route_cb+0x30>)
   24ca6:	f7de f94d 	bl	2f44 <printk>
	net_route_foreach(route_cb, iface);
   24caa:	4621      	mov	r1, r4
   24cac:	4804      	ldr	r0, [pc, #16]	; (24cc0 <iface_per_route_cb+0x34>)
   24cae:	f7fe f829 	bl	22d04 <net_route_foreach>
}
   24cb2:	b002      	add	sp, #8
   24cb4:	bd10      	pop	{r4, pc}
   24cb6:	bf00      	nop
   24cb8:	00031800 	.word	0x00031800
   24cbc:	00031824 	.word	0x00031824
   24cc0:	000249bd 	.word	0x000249bd

00024cc4 <tcp_connected>:
{
   24cc4:	b510      	push	{r4, lr}
	if (status < 0) {
   24cc6:	2900      	cmp	r1, #0
   24cc8:	db03      	blt.n	24cd2 <tcp_connected+0xe>
		printk("TCP connected\n");
   24cca:	4807      	ldr	r0, [pc, #28]	; (24ce8 <tcp_connected+0x24>)
   24ccc:	f7de f93a 	bl	2f44 <printk>
   24cd0:	bd10      	pop	{r4, pc}
   24cd2:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24cd4:	4805      	ldr	r0, [pc, #20]	; (24cec <tcp_connected+0x28>)
   24cd6:	f7de f935 	bl	2f44 <printk>
		net_context_put(context);
   24cda:	4620      	mov	r0, r4
   24cdc:	f7f8 f834 	bl	1cd48 <net_context_put>
		tcp_ctx = NULL;
   24ce0:	2200      	movs	r2, #0
   24ce2:	4b03      	ldr	r3, [pc, #12]	; (24cf0 <tcp_connected+0x2c>)
   24ce4:	601a      	str	r2, [r3, #0]
   24ce6:	bd10      	pop	{r4, pc}
   24ce8:	000322a0 	.word	0x000322a0
   24cec:	00032284 	.word	0x00032284
   24cf0:	20002458 	.word	0x20002458

00024cf4 <get_my_ipv6_addr>:
{
   24cf4:	b538      	push	{r3, r4, r5, lr}
   24cf6:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24cf8:	1d0d      	adds	r5, r1, #4
   24cfa:	4629      	mov	r1, r5
   24cfc:	f7f7 f81e 	bl	1bd3c <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24d00:	2210      	movs	r2, #16
   24d02:	4601      	mov	r1, r0
   24d04:	4628      	mov	r0, r5
   24d06:	f7db fadb 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24d0a:	2300      	movs	r3, #0
   24d0c:	8063      	strh	r3, [r4, #2]
   24d0e:	bd38      	pop	{r3, r4, r5, pc}

00024d10 <tcp_connect>:
{
   24d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   24d12:	b08f      	sub	sp, #60	; 0x3c
   24d14:	4607      	mov	r7, r0
   24d16:	460c      	mov	r4, r1
   24d18:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24d1a:	f7f6 facb 	bl	1b2b4 <net_if_get_default>
   24d1e:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24d20:	aa09      	add	r2, sp, #36	; 0x24
   24d22:	4639      	mov	r1, r7
   24d24:	200a      	movs	r0, #10
   24d26:	f7f9 f9c4 	bl	1e0b2 <net_addr_pton>
	if (ret < 0) {
   24d2a:	2800      	cmp	r0, #0
   24d2c:	db34      	blt.n	24d98 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24d2e:	0a21      	lsrs	r1, r4, #8
   24d30:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   24d34:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24d38:	a909      	add	r1, sp, #36	; 0x24
   24d3a:	2000      	movs	r0, #0
   24d3c:	f7fb f964 	bl	20008 <net_ipv6_nbr_lookup>
	if (nbr) {
   24d40:	b100      	cbz	r0, 24d44 <tcp_connect+0x34>
		iface = nbr->iface;
   24d42:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   24d44:	a902      	add	r1, sp, #8
   24d46:	4630      	mov	r0, r6
   24d48:	f7ff ffd4 	bl	24cf4 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24d4c:	240a      	movs	r4, #10
   24d4e:	f8ad 4008 	strh.w	r4, [sp, #8]
   24d52:	aa0e      	add	r2, sp, #56	; 0x38
   24d54:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24d58:	a902      	add	r1, sp, #8
   24d5a:	4620      	mov	r0, r4
   24d5c:	f7ff fce6 	bl	2472c <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24d60:	462b      	mov	r3, r5
   24d62:	2206      	movs	r2, #6
   24d64:	2101      	movs	r1, #1
   24d66:	4620      	mov	r0, r4
   24d68:	f7f7 fd82 	bl	1c870 <net_context_get>
	if (ret < 0) {
   24d6c:	1e04      	subs	r4, r0, #0
   24d6e:	db18      	blt.n	24da2 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24d70:	2218      	movs	r2, #24
   24d72:	a902      	add	r1, sp, #8
   24d74:	6828      	ldr	r0, [r5, #0]
   24d76:	f7f8 f829 	bl	1cdcc <net_context_bind>
	if (ret < 0) {
   24d7a:	1e04      	subs	r4, r0, #0
   24d7c:	db16      	blt.n	24dac <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24d7e:	6828      	ldr	r0, [r5, #0]
   24d80:	2300      	movs	r3, #0
   24d82:	9301      	str	r3, [sp, #4]
   24d84:	9300      	str	r3, [sp, #0]
   24d86:	4b0c      	ldr	r3, [pc, #48]	; (24db8 <tcp_connect+0xa8>)
   24d88:	2218      	movs	r2, #24
   24d8a:	a908      	add	r1, sp, #32
   24d8c:	f7f8 f9b0 	bl	1d0f0 <net_context_connect>
   24d90:	4604      	mov	r4, r0
}
   24d92:	4620      	mov	r0, r4
   24d94:	b00f      	add	sp, #60	; 0x3c
   24d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24d98:	4808      	ldr	r0, [pc, #32]	; (24dbc <tcp_connect+0xac>)
   24d9a:	f7de f8d3 	bl	2f44 <printk>
		return 0;
   24d9e:	2400      	movs	r4, #0
   24da0:	e7f7      	b.n	24d92 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24da2:	4621      	mov	r1, r4
   24da4:	4806      	ldr	r0, [pc, #24]	; (24dc0 <tcp_connect+0xb0>)
   24da6:	f7de f8cd 	bl	2f44 <printk>
		return ret;
   24daa:	e7f2      	b.n	24d92 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24dac:	4621      	mov	r1, r4
   24dae:	4805      	ldr	r0, [pc, #20]	; (24dc4 <tcp_connect+0xb4>)
   24db0:	f7de f8c8 	bl	2f44 <printk>
		return ret;
   24db4:	e7ed      	b.n	24d92 <tcp_connect+0x82>
   24db6:	bf00      	nop
   24db8:	00024cc5 	.word	0x00024cc5
   24dbc:	00032234 	.word	0x00032234
   24dc0:	0003224c 	.word	0x0003224c
   24dc4:	0003226c 	.word	0x0003226c

00024dc8 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24dca:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24dcc:	6848      	ldr	r0, [r1, #4]
   24dce:	2800      	cmp	r0, #0
   24dd0:	f000 8099 	beq.w	24f06 <net_shell_cmd_tcp+0x13e>
   24dd4:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24dd6:	4954      	ldr	r1, [pc, #336]	; (24f28 <net_shell_cmd_tcp+0x160>)
   24dd8:	f7db fb16 	bl	408 <strcmp>
   24ddc:	4605      	mov	r5, r0
   24dde:	bb20      	cbnz	r0, 24e2a <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24de0:	4b52      	ldr	r3, [pc, #328]	; (24f2c <net_shell_cmd_tcp+0x164>)
   24de2:	681b      	ldr	r3, [r3, #0]
   24de4:	b123      	cbz	r3, 24df0 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24dea:	f013 0f01 	tst.w	r3, #1
   24dee:	d110      	bne.n	24e12 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24df0:	68a6      	ldr	r6, [r4, #8]
   24df2:	b196      	cbz	r6, 24e1a <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24df4:	68e0      	ldr	r0, [r4, #12]
   24df6:	b1a0      	cbz	r0, 24e22 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24df8:	220a      	movs	r2, #10
   24dfa:	2100      	movs	r1, #0
   24dfc:	f005 ff02 	bl	2ac04 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24e00:	4a4a      	ldr	r2, [pc, #296]	; (24f2c <net_shell_cmd_tcp+0x164>)
   24e02:	b281      	uxth	r1, r0
   24e04:	4630      	mov	r0, r6
   24e06:	f7ff ff83 	bl	24d10 <tcp_connect>
   24e0a:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24e0c:	4628      	mov	r0, r5
   24e0e:	b003      	add	sp, #12
   24e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24e12:	4847      	ldr	r0, [pc, #284]	; (24f30 <net_shell_cmd_tcp+0x168>)
   24e14:	f7de f896 	bl	2f44 <printk>
				return 0;
   24e18:	e7f8      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24e1a:	4846      	ldr	r0, [pc, #280]	; (24f34 <net_shell_cmd_tcp+0x16c>)
   24e1c:	f7de f892 	bl	2f44 <printk>
				return 0;
   24e20:	e7f4      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   24e22:	4845      	ldr	r0, [pc, #276]	; (24f38 <net_shell_cmd_tcp+0x170>)
   24e24:	f7de f88e 	bl	2f44 <printk>
				return 0;
   24e28:	e7f0      	b.n	24e0c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   24e2a:	4944      	ldr	r1, [pc, #272]	; (24f3c <net_shell_cmd_tcp+0x174>)
   24e2c:	6860      	ldr	r0, [r4, #4]
   24e2e:	f7db faeb 	bl	408 <strcmp>
   24e32:	4605      	mov	r5, r0
   24e34:	2800      	cmp	r0, #0
   24e36:	d140      	bne.n	24eba <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24e38:	4b3c      	ldr	r3, [pc, #240]	; (24f2c <net_shell_cmd_tcp+0x164>)
   24e3a:	6818      	ldr	r0, [r3, #0]
   24e3c:	b300      	cbz	r0, 24e80 <net_shell_cmd_tcp+0xb8>
   24e3e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24e42:	f013 0f01 	tst.w	r3, #1
   24e46:	d01b      	beq.n	24e80 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24e48:	68a3      	ldr	r3, [r4, #8]
   24e4a:	b1eb      	cbz	r3, 24e88 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24e4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24e50:	f7f8 fbdc 	bl	1d60c <net_pkt_get_tx>
			if (!pkt) {
   24e54:	4606      	mov	r6, r0
   24e56:	b1d8      	cbz	r0, 24e90 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24e58:	68a0      	ldr	r0, [r4, #8]
   24e5a:	f7db fc51 	bl	700 <strlen>
   24e5e:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24e60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   24e64:	68a2      	ldr	r2, [r4, #8]
   24e66:	4639      	mov	r1, r7
   24e68:	4630      	mov	r0, r6
   24e6a:	f7f8 fd3a 	bl	1d8e2 <net_pkt_append>
			if (!ret) {
   24e6e:	4287      	cmp	r7, r0
   24e70:	d012      	beq.n	24e98 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   24e72:	4833      	ldr	r0, [pc, #204]	; (24f40 <net_shell_cmd_tcp+0x178>)
   24e74:	f7de f866 	bl	2f44 <printk>
				net_pkt_unref(pkt);
   24e78:	4630      	mov	r0, r6
   24e7a:	f7f8 fbfa 	bl	1d672 <net_pkt_unref>
				return 0;
   24e7e:	e7c5      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24e80:	4830      	ldr	r0, [pc, #192]	; (24f44 <net_shell_cmd_tcp+0x17c>)
   24e82:	f7de f85f 	bl	2f44 <printk>
				return 0;
   24e86:	e7c1      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24e88:	482f      	ldr	r0, [pc, #188]	; (24f48 <net_shell_cmd_tcp+0x180>)
   24e8a:	f7de f85b 	bl	2f44 <printk>
				return 0;
   24e8e:	e7bd      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24e90:	482e      	ldr	r0, [pc, #184]	; (24f4c <net_shell_cmd_tcp+0x184>)
   24e92:	f7de f857 	bl	2f44 <printk>
				return 0;
   24e96:	e7b9      	b.n	24e0c <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24e98:	2300      	movs	r3, #0
   24e9a:	9300      	str	r3, [sp, #0]
   24e9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24ea0:	492b      	ldr	r1, [pc, #172]	; (24f50 <net_shell_cmd_tcp+0x188>)
   24ea2:	4630      	mov	r0, r6
   24ea4:	f7f8 fa12 	bl	1d2cc <net_context_send>
			if (ret < 0) {
   24ea8:	1e01      	subs	r1, r0, #0
   24eaa:	daaf      	bge.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   24eac:	4829      	ldr	r0, [pc, #164]	; (24f54 <net_shell_cmd_tcp+0x18c>)
   24eae:	f7de f849 	bl	2f44 <printk>
				net_pkt_unref(pkt);
   24eb2:	4630      	mov	r0, r6
   24eb4:	f7f8 fbdd 	bl	1d672 <net_pkt_unref>
				return 0;
   24eb8:	e7a8      	b.n	24e0c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   24eba:	4927      	ldr	r1, [pc, #156]	; (24f58 <net_shell_cmd_tcp+0x190>)
   24ebc:	6860      	ldr	r0, [r4, #4]
   24ebe:	f7db faa3 	bl	408 <strcmp>
   24ec2:	4605      	mov	r5, r0
   24ec4:	b9d0      	cbnz	r0, 24efc <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24ec6:	4b19      	ldr	r3, [pc, #100]	; (24f2c <net_shell_cmd_tcp+0x164>)
   24ec8:	6818      	ldr	r0, [r3, #0]
   24eca:	b120      	cbz	r0, 24ed6 <net_shell_cmd_tcp+0x10e>
   24ecc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24ed0:	f013 0f01 	tst.w	r3, #1
   24ed4:	d103      	bne.n	24ede <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   24ed6:	481b      	ldr	r0, [pc, #108]	; (24f44 <net_shell_cmd_tcp+0x17c>)
   24ed8:	f7de f834 	bl	2f44 <printk>
				return 0;
   24edc:	e796      	b.n	24e0c <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   24ede:	f7f7 ff33 	bl	1cd48 <net_context_put>
			if (ret < 0) {
   24ee2:	1e01      	subs	r1, r0, #0
   24ee4:	db06      	blt.n	24ef4 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   24ee6:	481d      	ldr	r0, [pc, #116]	; (24f5c <net_shell_cmd_tcp+0x194>)
   24ee8:	f7de f82c 	bl	2f44 <printk>
			tcp_ctx = NULL;
   24eec:	2200      	movs	r2, #0
   24eee:	4b0f      	ldr	r3, [pc, #60]	; (24f2c <net_shell_cmd_tcp+0x164>)
   24ef0:	601a      	str	r2, [r3, #0]
			return 0;
   24ef2:	e78b      	b.n	24e0c <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   24ef4:	481a      	ldr	r0, [pc, #104]	; (24f60 <net_shell_cmd_tcp+0x198>)
   24ef6:	f7de f825 	bl	2f44 <printk>
				return 0;
   24efa:	e787      	b.n	24e0c <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   24efc:	6861      	ldr	r1, [r4, #4]
   24efe:	4819      	ldr	r0, [pc, #100]	; (24f64 <net_shell_cmd_tcp+0x19c>)
   24f00:	f7de f820 	bl	2f44 <printk>
		goto usage;
   24f04:	e002      	b.n	24f0c <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   24f06:	4818      	ldr	r0, [pc, #96]	; (24f68 <net_shell_cmd_tcp+0x1a0>)
   24f08:	f7de f81c 	bl	2f44 <printk>
		printk("Usage:\n");
   24f0c:	4817      	ldr	r0, [pc, #92]	; (24f6c <net_shell_cmd_tcp+0x1a4>)
   24f0e:	f7de f819 	bl	2f44 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   24f12:	4817      	ldr	r0, [pc, #92]	; (24f70 <net_shell_cmd_tcp+0x1a8>)
   24f14:	f7de f816 	bl	2f44 <printk>
		printk("\ttcp send <data>\n");
   24f18:	4816      	ldr	r0, [pc, #88]	; (24f74 <net_shell_cmd_tcp+0x1ac>)
   24f1a:	f7de f813 	bl	2f44 <printk>
		printk("\ttcp close\n");
   24f1e:	4816      	ldr	r0, [pc, #88]	; (24f78 <net_shell_cmd_tcp+0x1b0>)
   24f20:	f7de f810 	bl	2f44 <printk>
	return 0;
   24f24:	2500      	movs	r5, #0
   24f26:	e771      	b.n	24e0c <net_shell_cmd_tcp+0x44>
   24f28:	0002e778 	.word	0x0002e778
   24f2c:	20002458 	.word	0x20002458
   24f30:	00032004 	.word	0x00032004
   24f34:	00032018 	.word	0x00032018
   24f38:	00032034 	.word	0x00032034
   24f3c:	00032048 	.word	0x00032048
   24f40:	00032098 	.word	0x00032098
   24f44:	00032050 	.word	0x00032050
   24f48:	00032060 	.word	0x00032060
   24f4c:	00032074 	.word	0x00032074
   24f50:	000245b5 	.word	0x000245b5
   24f54:	000320b8 	.word	0x000320b8
   24f58:	000320d0 	.word	0x000320d0
   24f5c:	000320fc 	.word	0x000320fc
   24f60:	000320d8 	.word	0x000320d8
   24f64:	00031bfc 	.word	0x00031bfc
   24f68:	00032110 	.word	0x00032110
   24f6c:	00032124 	.word	0x00032124
   24f70:	0003212c 	.word	0x0003212c
   24f74:	00032148 	.word	0x00032148
   24f78:	0003215c 	.word	0x0003215c

00024f7c <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   24f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f80:	4605      	mov	r5, r0
   24f82:	460e      	mov	r6, r1
   24f84:	4617      	mov	r7, r2
   24f86:	4699      	mov	r9, r3
   24f88:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24f8c:	2400      	movs	r4, #0
   24f8e:	e012      	b.n	24fb6 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24f90:	f013 0f02 	tst.w	r3, #2
   24f94:	d10e      	bne.n	24fb4 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   24f96:	2f00      	cmp	r7, #0
   24f98:	d051      	beq.n	2503e <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   24f9a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24f9e:	009a      	lsls	r2, r3, #2
   24fa0:	4b3c      	ldr	r3, [pc, #240]	; (25094 <find_conn_handler+0x118>)
   24fa2:	4413      	add	r3, r2
   24fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24fa8:	f013 0f04 	tst.w	r3, #4
   24fac:	d002      	beq.n	24fb4 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   24fae:	883b      	ldrh	r3, [r7, #0]
   24fb0:	2b0a      	cmp	r3, #10
   24fb2:	d030      	beq.n	25016 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24fb4:	3401      	adds	r4, #1
   24fb6:	2c03      	cmp	r4, #3
   24fb8:	dc67      	bgt.n	2508a <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   24fba:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24fbe:	009a      	lsls	r2, r3, #2
   24fc0:	4b34      	ldr	r3, [pc, #208]	; (25094 <find_conn_handler+0x118>)
   24fc2:	4413      	add	r3, r2
   24fc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24fc8:	f013 0f01 	tst.w	r3, #1
   24fcc:	d0f2      	beq.n	24fb4 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   24fce:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24fd2:	0091      	lsls	r1, r2, #2
   24fd4:	4a2f      	ldr	r2, [pc, #188]	; (25094 <find_conn_handler+0x118>)
   24fd6:	440a      	add	r2, r1
   24fd8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   24fdc:	42aa      	cmp	r2, r5
   24fde:	d1e9      	bne.n	24fb4 <find_conn_handler+0x38>
		if (remote_addr) {
   24fe0:	2e00      	cmp	r6, #0
   24fe2:	d0d5      	beq.n	24f90 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   24fe4:	f013 0f02 	tst.w	r3, #2
   24fe8:	d0e4      	beq.n	24fb4 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   24fea:	8833      	ldrh	r3, [r6, #0]
   24fec:	2b0a      	cmp	r3, #10
   24fee:	d1e1      	bne.n	24fb4 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   24ff0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   24ff4:	008a      	lsls	r2, r1, #2
   24ff6:	4927      	ldr	r1, [pc, #156]	; (25094 <find_conn_handler+0x118>)
   24ff8:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   24ffa:	4293      	cmp	r3, r2
   24ffc:	d1da      	bne.n	24fb4 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   24ffe:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25002:	0093      	lsls	r3, r2, #2
   25004:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   25006:	2210      	movs	r2, #16
   25008:	3104      	adds	r1, #4
   2500a:	1d30      	adds	r0, r6, #4
   2500c:	f005 f84c 	bl	2a0a8 <memcmp>
				if (!net_ipv6_addr_cmp(
   25010:	2800      	cmp	r0, #0
   25012:	d1cf      	bne.n	24fb4 <find_conn_handler+0x38>
   25014:	e7bf      	b.n	24f96 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   25016:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2501a:	0091      	lsls	r1, r2, #2
   2501c:	4a1d      	ldr	r2, [pc, #116]	; (25094 <find_conn_handler+0x118>)
   2501e:	440a      	add	r2, r1
   25020:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   25022:	4293      	cmp	r3, r2
   25024:	d1c6      	bne.n	24fb4 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   25026:	460b      	mov	r3, r1
   25028:	3318      	adds	r3, #24
   2502a:	4a1a      	ldr	r2, [pc, #104]	; (25094 <find_conn_handler+0x118>)
   2502c:	4413      	add	r3, r2
   2502e:	2210      	movs	r2, #16
   25030:	1d19      	adds	r1, r3, #4
   25032:	1d38      	adds	r0, r7, #4
   25034:	f005 f838 	bl	2a0a8 <memcmp>
				if (!net_ipv6_addr_cmp(
   25038:	2800      	cmp	r0, #0
   2503a:	d1bb      	bne.n	24fb4 <find_conn_handler+0x38>
   2503c:	e009      	b.n	25052 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2503e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25042:	009a      	lsls	r2, r3, #2
   25044:	4b13      	ldr	r3, [pc, #76]	; (25094 <find_conn_handler+0x118>)
   25046:	4413      	add	r3, r2
   25048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2504c:	f013 0f04 	tst.w	r3, #4
   25050:	d1b0      	bne.n	24fb4 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25052:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25056:	009a      	lsls	r2, r3, #2
   25058:	4b0e      	ldr	r3, [pc, #56]	; (25094 <find_conn_handler+0x118>)
   2505a:	4413      	add	r3, r2
   2505c:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   2505e:	ea4f 2319 	mov.w	r3, r9, lsr #8
   25062:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   25066:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25068:	429a      	cmp	r2, r3
   2506a:	d1a3      	bne.n	24fb4 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   2506c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25070:	0093      	lsls	r3, r2, #2
   25072:	3318      	adds	r3, #24
   25074:	4a07      	ldr	r2, [pc, #28]	; (25094 <find_conn_handler+0x118>)
   25076:	4413      	add	r3, r2
   25078:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   2507a:	ea4f 2318 	mov.w	r3, r8, lsr #8
   2507e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   25082:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   25084:	429a      	cmp	r2, r3
   25086:	d195      	bne.n	24fb4 <find_conn_handler+0x38>
   25088:	e001      	b.n	2508e <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   2508a:	f06f 0401 	mvn.w	r4, #1
}
   2508e:	4620      	mov	r0, r4
   25090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25094:	200004ac 	.word	0x200004ac

00025098 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   25098:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2509a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2509c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   250a0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   250a4:	b29d      	uxth	r5, r3
   250a6:	42ac      	cmp	r4, r5
   250a8:	d002      	beq.n	250b0 <check_addr+0x18>
		return false;
   250aa:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   250ac:	4620      	mov	r0, r4
   250ae:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   250b0:	2b0a      	cmp	r3, #10
   250b2:	d001      	beq.n	250b8 <check_addr+0x20>
	return true;
   250b4:	2401      	movs	r4, #1
   250b6:	e7f9      	b.n	250ac <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   250b8:	2c0a      	cmp	r4, #10
   250ba:	d001      	beq.n	250c0 <check_addr+0x28>
	return true;
   250bc:	2401      	movs	r4, #1
   250be:	e7f5      	b.n	250ac <check_addr+0x14>
		if (is_remote) {
   250c0:	b162      	cbz	r2, 250dc <check_addr+0x44>
	return pkt->frags->data;
   250c2:	6883      	ldr	r3, [r0, #8]
   250c4:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   250c6:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   250c8:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   250ca:	b95a      	cbnz	r2, 250e4 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   250cc:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   250ce:	b9ba      	cbnz	r2, 25100 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   250d0:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   250d2:	b9ba      	cbnz	r2, 25104 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   250d4:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   250d6:	b1ba      	cbz	r2, 25108 <check_addr+0x70>
   250d8:	2200      	movs	r2, #0
   250da:	e004      	b.n	250e6 <check_addr+0x4e>
   250dc:	6883      	ldr	r3, [r0, #8]
   250de:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   250e0:	3318      	adds	r3, #24
   250e2:	e7f1      	b.n	250c8 <check_addr+0x30>
   250e4:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   250e6:	4614      	mov	r4, r2
   250e8:	2a00      	cmp	r2, #0
   250ea:	d1df      	bne.n	250ac <check_addr+0x14>
   250ec:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   250ee:	2210      	movs	r2, #16
   250f0:	4619      	mov	r1, r3
   250f2:	3004      	adds	r0, #4
   250f4:	f004 ffd8 	bl	2a0a8 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   250f8:	2800      	cmp	r0, #0
   250fa:	d1d7      	bne.n	250ac <check_addr+0x14>
		return true;
   250fc:	2401      	movs	r4, #1
   250fe:	e7d5      	b.n	250ac <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25100:	2200      	movs	r2, #0
   25102:	e7f0      	b.n	250e6 <check_addr+0x4e>
   25104:	2200      	movs	r2, #0
   25106:	e7ee      	b.n	250e6 <check_addr+0x4e>
   25108:	2201      	movs	r2, #1
   2510a:	e7ec      	b.n	250e6 <check_addr+0x4e>

0002510c <net_conn_unregister>:
{
   2510c:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   2510e:	4b0d      	ldr	r3, [pc, #52]	; (25144 <net_conn_unregister+0x38>)
   25110:	4298      	cmp	r0, r3
   25112:	d30d      	bcc.n	25130 <net_conn_unregister+0x24>
   25114:	33f0      	adds	r3, #240	; 0xf0
   25116:	4298      	cmp	r0, r3
   25118:	d80d      	bhi.n	25136 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   2511a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2511e:	f013 0f01 	tst.w	r3, #1
   25122:	d00b      	beq.n	2513c <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   25124:	223c      	movs	r2, #60	; 0x3c
   25126:	2100      	movs	r1, #0
   25128:	f005 f852 	bl	2a1d0 <memset>
	return 0;
   2512c:	2000      	movs	r0, #0
   2512e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25130:	f06f 0015 	mvn.w	r0, #21
   25134:	bd08      	pop	{r3, pc}
   25136:	f06f 0015 	mvn.w	r0, #21
   2513a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2513c:	f06f 0001 	mvn.w	r0, #1
}
   25140:	bd08      	pop	{r3, pc}
   25142:	bf00      	nop
   25144:	200004ac 	.word	0x200004ac

00025148 <net_conn_register>:
{
   25148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2514c:	b082      	sub	sp, #8
   2514e:	4681      	mov	r9, r0
   25150:	460d      	mov	r5, r1
   25152:	4616      	mov	r6, r2
   25154:	4698      	mov	r8, r3
   25156:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   2515a:	9700      	str	r7, [sp, #0]
   2515c:	f7ff ff0e 	bl	24f7c <find_conn_handler>
	if (i != -ENOENT) {
   25160:	f110 0f02 	cmn.w	r0, #2
   25164:	f040 80ba 	bne.w	252dc <net_conn_register+0x194>
   25168:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2516a:	2c03      	cmp	r4, #3
   2516c:	f300 80aa 	bgt.w	252c4 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   25170:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25174:	009a      	lsls	r2, r3, #2
   25176:	4b60      	ldr	r3, [pc, #384]	; (252f8 <net_conn_register+0x1b0>)
   25178:	4413      	add	r3, r2
   2517a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2517e:	f013 0f01 	tst.w	r3, #1
   25182:	d001      	beq.n	25188 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25184:	3401      	adds	r4, #1
   25186:	e7f0      	b.n	2516a <net_conn_register+0x22>
		if (remote_addr) {
   25188:	2d00      	cmp	r5, #0
   2518a:	d04b      	beq.n	25224 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   2518c:	882b      	ldrh	r3, [r5, #0]
   2518e:	2b0a      	cmp	r3, #10
   25190:	f040 80a7 	bne.w	252e2 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   25194:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25198:	0093      	lsls	r3, r2, #2
   2519a:	2218      	movs	r2, #24
   2519c:	4629      	mov	r1, r5
   2519e:	4856      	ldr	r0, [pc, #344]	; (252f8 <net_conn_register+0x1b0>)
   251a0:	4418      	add	r0, r3
   251a2:	f7db f88d 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251a6:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251a8:	b93b      	cbnz	r3, 251ba <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251aa:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251ac:	bb8b      	cbnz	r3, 25212 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251ae:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251b0:	bb8b      	cbnz	r3, 25216 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   251b2:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251b4:	b38b      	cbz	r3, 2521a <net_conn_register+0xd2>
   251b6:	2300      	movs	r3, #0
   251b8:	e000      	b.n	251bc <net_conn_register+0x74>
   251ba:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   251bc:	b37b      	cbz	r3, 2521e <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   251be:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   251c2:	0122      	lsls	r2, r4, #4
   251c4:	1b12      	subs	r2, r2, r4
   251c6:	0091      	lsls	r1, r2, #2
   251c8:	4b4b      	ldr	r3, [pc, #300]	; (252f8 <net_conn_register+0x1b0>)
   251ca:	440b      	add	r3, r1
   251cc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   251d0:	f042 0202 	orr.w	r2, r2, #2
   251d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   251d8:	2e00      	cmp	r6, #0
   251da:	d036      	beq.n	2524a <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   251dc:	8833      	ldrh	r3, [r6, #0]
   251de:	2b0a      	cmp	r3, #10
   251e0:	f040 8082 	bne.w	252e8 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   251e4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   251e8:	0098      	lsls	r0, r3, #2
   251ea:	3018      	adds	r0, #24
   251ec:	2218      	movs	r2, #24
   251ee:	4631      	mov	r1, r6
   251f0:	4b41      	ldr	r3, [pc, #260]	; (252f8 <net_conn_register+0x1b0>)
   251f2:	4418      	add	r0, r3
   251f4:	f7db f864 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251f8:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251fa:	b9b3      	cbnz	r3, 2522a <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251fc:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251fe:	2b00      	cmp	r3, #0
   25200:	d163      	bne.n	252ca <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25202:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25204:	2b00      	cmp	r3, #0
   25206:	d162      	bne.n	252ce <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25208:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2520a:	2b00      	cmp	r3, #0
   2520c:	d061      	beq.n	252d2 <net_conn_register+0x18a>
   2520e:	2300      	movs	r3, #0
   25210:	e00c      	b.n	2522c <net_conn_register+0xe4>
   25212:	2300      	movs	r3, #0
   25214:	e7d2      	b.n	251bc <net_conn_register+0x74>
   25216:	2300      	movs	r3, #0
   25218:	e7d0      	b.n	251bc <net_conn_register+0x74>
   2521a:	2301      	movs	r3, #1
   2521c:	e7ce      	b.n	251bc <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   2521e:	f04f 0a20 	mov.w	sl, #32
   25222:	e7ce      	b.n	251c2 <net_conn_register+0x7a>
	u8_t rank = 0;
   25224:	f04f 0a00 	mov.w	sl, #0
   25228:	e7d6      	b.n	251d8 <net_conn_register+0x90>
   2522a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2522c:	2b00      	cmp	r3, #0
   2522e:	d052      	beq.n	252d6 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   25230:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   25234:	0122      	lsls	r2, r4, #4
   25236:	1b12      	subs	r2, r2, r4
   25238:	0091      	lsls	r1, r2, #2
   2523a:	4b2f      	ldr	r3, [pc, #188]	; (252f8 <net_conn_register+0x1b0>)
   2523c:	440b      	add	r3, r1
   2523e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25242:	f042 0204 	orr.w	r2, r2, #4
   25246:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   2524a:	b125      	cbz	r5, 25256 <net_conn_register+0x10e>
   2524c:	b11e      	cbz	r6, 25256 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   2524e:	882a      	ldrh	r2, [r5, #0]
   25250:	8833      	ldrh	r3, [r6, #0]
   25252:	429a      	cmp	r2, r3
   25254:	d14b      	bne.n	252ee <net_conn_register+0x1a6>
		if (remote_port) {
   25256:	f1b8 0f00 	cmp.w	r8, #0
   2525a:	d00c      	beq.n	25276 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   2525c:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   25260:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25264:	009a      	lsls	r2, r3, #2
   25266:	4b24      	ldr	r3, [pc, #144]	; (252f8 <net_conn_register+0x1b0>)
   25268:	4413      	add	r3, r2
				htons(remote_port);
   2526a:	ea4f 2218 	mov.w	r2, r8, lsr #8
   2526e:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   25272:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   25276:	b15f      	cbz	r7, 25290 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   25278:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   2527c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25280:	0093      	lsls	r3, r2, #2
   25282:	3318      	adds	r3, #24
   25284:	4a1c      	ldr	r2, [pc, #112]	; (252f8 <net_conn_register+0x1b0>)
   25286:	4413      	add	r3, r2
				htons(local_port);
   25288:	0a3a      	lsrs	r2, r7, #8
   2528a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   2528e:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   25290:	0122      	lsls	r2, r4, #4
   25292:	1b12      	subs	r2, r2, r4
   25294:	0091      	lsls	r1, r2, #2
   25296:	4b18      	ldr	r3, [pc, #96]	; (252f8 <net_conn_register+0x1b0>)
   25298:	440b      	add	r3, r1
   2529a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2529e:	f042 0201 	orr.w	r2, r2, #1
   252a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   252a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   252a8:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   252aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   252ac:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   252ae:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   252b2:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   252b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   252b8:	b1e3      	cbz	r3, 252f4 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   252ba:	4b0f      	ldr	r3, [pc, #60]	; (252f8 <net_conn_register+0x1b0>)
   252bc:	440b      	add	r3, r1
   252be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   252c0:	6013      	str	r3, [r2, #0]
		return 0;
   252c2:	2000      	movs	r0, #0
}
   252c4:	b002      	add	sp, #8
   252c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   252ca:	2300      	movs	r3, #0
   252cc:	e7ae      	b.n	2522c <net_conn_register+0xe4>
   252ce:	2300      	movs	r3, #0
   252d0:	e7ac      	b.n	2522c <net_conn_register+0xe4>
   252d2:	2301      	movs	r3, #1
   252d4:	e7aa      	b.n	2522c <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   252d6:	f04a 0a10 	orr.w	sl, sl, #16
   252da:	e7ab      	b.n	25234 <net_conn_register+0xec>
		return -EALREADY;
   252dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   252e0:	e7f0      	b.n	252c4 <net_conn_register+0x17c>
				return -EINVAL;
   252e2:	f06f 0015 	mvn.w	r0, #21
   252e6:	e7ed      	b.n	252c4 <net_conn_register+0x17c>
				return -EINVAL;
   252e8:	f06f 0015 	mvn.w	r0, #21
   252ec:	e7ea      	b.n	252c4 <net_conn_register+0x17c>
				return -EINVAL;
   252ee:	f06f 0015 	mvn.w	r0, #21
   252f2:	e7e7      	b.n	252c4 <net_conn_register+0x17c>
		return 0;
   252f4:	2000      	movs	r0, #0
   252f6:	e7e5      	b.n	252c4 <net_conn_register+0x17c>
   252f8:	200004ac 	.word	0x200004ac

000252fc <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   252fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25300:	b089      	sub	sp, #36	; 0x24
   25302:	4605      	mov	r5, r0
   25304:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25306:	2811      	cmp	r0, #17
   25308:	d005      	beq.n	25316 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2530a:	2806      	cmp	r0, #6
   2530c:	d015      	beq.n	2533a <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   2530e:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   25310:	b009      	add	sp, #36	; 0x24
   25312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   25316:	a903      	add	r1, sp, #12
   25318:	4630      	mov	r0, r6
   2531a:	f7fd ff73 	bl	23204 <net_udp_get_hdr>
		if (!udp_hdr) {
   2531e:	b150      	cbz	r0, 25336 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   25320:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   25324:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   25328:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   2532c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   25330:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25332:	2400      	movs	r4, #0
   25334:	e01b      	b.n	2536e <net_conn_input+0x72>
			return NET_DROP;
   25336:	2002      	movs	r0, #2
   25338:	e7ea      	b.n	25310 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2533a:	a903      	add	r1, sp, #12
   2533c:	4630      	mov	r0, r6
   2533e:	f7fe fbcd 	bl	23adc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   25342:	b130      	cbz	r0, 25352 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   25344:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   25348:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   2534c:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   25350:	e7ec      	b.n	2532c <net_conn_input+0x30>
			return NET_DROP;
   25352:	2002      	movs	r0, #2
   25354:	e7dc      	b.n	25310 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   25356:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   2535a:	0082      	lsls	r2, r0, #2
   2535c:	3218      	adds	r2, #24
   2535e:	4866      	ldr	r0, [pc, #408]	; (254f8 <net_conn_input+0x1fc>)
   25360:	1882      	adds	r2, r0, r2
   25362:	9201      	str	r2, [sp, #4]
   25364:	8852      	ldrh	r2, [r2, #2]
   25366:	b1fa      	cbz	r2, 253a8 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   25368:	4593      	cmp	fp, r2
   2536a:	d01d      	beq.n	253a8 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2536c:	3401      	adds	r4, #1
   2536e:	2c03      	cmp	r4, #3
   25370:	dc4d      	bgt.n	2540e <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   25372:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25376:	009a      	lsls	r2, r3, #2
   25378:	4b5f      	ldr	r3, [pc, #380]	; (254f8 <net_conn_input+0x1fc>)
   2537a:	4413      	add	r3, r2
   2537c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25380:	f013 0f01 	tst.w	r3, #1
   25384:	d0f2      	beq.n	2536c <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   25386:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2538a:	0091      	lsls	r1, r2, #2
   2538c:	4a5a      	ldr	r2, [pc, #360]	; (254f8 <net_conn_input+0x1fc>)
   2538e:	440a      	add	r2, r1
   25390:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25394:	4295      	cmp	r5, r2
   25396:	d1e9      	bne.n	2536c <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   25398:	4a57      	ldr	r2, [pc, #348]	; (254f8 <net_conn_input+0x1fc>)
   2539a:	4411      	add	r1, r2
   2539c:	884a      	ldrh	r2, [r1, #2]
   2539e:	2a00      	cmp	r2, #0
   253a0:	d0d9      	beq.n	25356 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   253a2:	4591      	cmp	r9, r2
   253a4:	d1e2      	bne.n	2536c <net_conn_input+0x70>
   253a6:	e7d6      	b.n	25356 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   253a8:	f013 0f02 	tst.w	r3, #2
   253ac:	d120      	bne.n	253f0 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   253ae:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   253b2:	009a      	lsls	r2, r3, #2
   253b4:	4b50      	ldr	r3, [pc, #320]	; (254f8 <net_conn_input+0x1fc>)
   253b6:	4413      	add	r3, r2
   253b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   253bc:	f013 0f04 	tst.w	r3, #4
   253c0:	d11d      	bne.n	253fe <net_conn_input+0x102>
		if (best_match >= 0 &&
   253c2:	2f00      	cmp	r7, #0
   253c4:	db07      	blt.n	253d6 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   253c6:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   253ca:	009a      	lsls	r2, r3, #2
   253cc:	4b4a      	ldr	r3, [pc, #296]	; (254f8 <net_conn_input+0x1fc>)
   253ce:	4413      	add	r3, r2
   253d0:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   253d2:	2b00      	cmp	r3, #0
   253d4:	d1ca      	bne.n	2536c <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   253d6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   253da:	009a      	lsls	r2, r3, #2
   253dc:	4b46      	ldr	r3, [pc, #280]	; (254f8 <net_conn_input+0x1fc>)
   253de:	4413      	add	r3, r2
   253e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   253e4:	4598      	cmp	r8, r3
   253e6:	dac1      	bge.n	2536c <net_conn_input+0x70>
			best_rank = conns[i].rank;
   253e8:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   253ec:	4627      	mov	r7, r4
   253ee:	e7bd      	b.n	2536c <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   253f0:	2201      	movs	r2, #1
   253f2:	4630      	mov	r0, r6
   253f4:	f7ff fe50 	bl	25098 <check_addr>
   253f8:	2800      	cmp	r0, #0
   253fa:	d0b7      	beq.n	2536c <net_conn_input+0x70>
   253fc:	e7d7      	b.n	253ae <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   253fe:	2200      	movs	r2, #0
   25400:	9901      	ldr	r1, [sp, #4]
   25402:	4630      	mov	r0, r6
   25404:	f7ff fe48 	bl	25098 <check_addr>
   25408:	2800      	cmp	r0, #0
   2540a:	d0af      	beq.n	2536c <net_conn_input+0x70>
   2540c:	e7d9      	b.n	253c2 <net_conn_input+0xc6>
	if (best_match >= 0) {
   2540e:	2f00      	cmp	r7, #0
   25410:	db44      	blt.n	2549c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   25412:	2d11      	cmp	r5, #17
   25414:	d014      	beq.n	25440 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   25416:	2d06      	cmp	r5, #6
   25418:	d023      	beq.n	25462 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   2541a:	4c37      	ldr	r4, [pc, #220]	; (254f8 <net_conn_input+0x1fc>)
   2541c:	013a      	lsls	r2, r7, #4
   2541e:	1bd1      	subs	r1, r2, r7
   25420:	008b      	lsls	r3, r1, #2
   25422:	4423      	add	r3, r4
   25424:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   25428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2542a:	4631      	mov	r1, r6
   2542c:	4618      	mov	r0, r3
   2542e:	47c0      	blx	r8
   25430:	2802      	cmp	r0, #2
   25432:	d03d      	beq.n	254b0 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25434:	2d11      	cmp	r5, #17
   25436:	d023      	beq.n	25480 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25438:	2d06      	cmp	r5, #6
   2543a:	d029      	beq.n	25490 <net_conn_input+0x194>
		return NET_OK;
   2543c:	2000      	movs	r0, #0
   2543e:	e767      	b.n	25310 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   25440:	68b1      	ldr	r1, [r6, #8]
   25442:	4630      	mov	r0, r6
   25444:	f7fd fe6b 	bl	2311e <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   25448:	68b1      	ldr	r1, [r6, #8]
   2544a:	4630      	mov	r0, r6
   2544c:	f7fd feb4 	bl	231b8 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   25450:	4582      	cmp	sl, r0
   25452:	d0e2      	beq.n	2541a <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   25454:	4a29      	ldr	r2, [pc, #164]	; (254fc <net_conn_input+0x200>)
   25456:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2545a:	3301      	adds	r3, #1
   2545c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   25460:	e026      	b.n	254b0 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   25462:	68b1      	ldr	r1, [r6, #8]
   25464:	4630      	mov	r0, r6
   25466:	f7fe fc9e 	bl	23da6 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   2546a:	68b1      	ldr	r1, [r6, #8]
   2546c:	4630      	mov	r0, r6
   2546e:	f7fe fc74 	bl	23d5a <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   25472:	4582      	cmp	sl, r0
   25474:	d0d1      	beq.n	2541a <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   25476:	4a21      	ldr	r2, [pc, #132]	; (254fc <net_conn_input+0x200>)
   25478:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2547a:	3301      	adds	r3, #1
   2547c:	6613      	str	r3, [r2, #96]	; 0x60
   2547e:	e017      	b.n	254b0 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   25480:	4a1e      	ldr	r2, [pc, #120]	; (254fc <net_conn_input+0x200>)
   25482:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   25486:	3301      	adds	r3, #1
   25488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   2548c:	2000      	movs	r0, #0
   2548e:	e73f      	b.n	25310 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   25490:	4a1a      	ldr	r2, [pc, #104]	; (254fc <net_conn_input+0x200>)
   25492:	6d53      	ldr	r3, [r2, #84]	; 0x54
   25494:	3301      	adds	r3, #1
   25496:	6553      	str	r3, [r2, #84]	; 0x54
   25498:	2000      	movs	r0, #0
   2549a:	e739      	b.n	25310 <net_conn_input+0x14>
	return pkt->family;
   2549c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   254a0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   254a4:	2b0a      	cmp	r3, #10
   254a6:	d009      	beq.n	254bc <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   254a8:	2b0a      	cmp	r3, #10
   254aa:	d00d      	beq.n	254c8 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   254ac:	2d06      	cmp	r5, #6
   254ae:	d012      	beq.n	254d6 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   254b0:	2d11      	cmp	r5, #17
   254b2:	d015      	beq.n	254e0 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   254b4:	2d06      	cmp	r5, #6
   254b6:	d019      	beq.n	254ec <net_conn_input+0x1f0>
	return NET_DROP;
   254b8:	2002      	movs	r0, #2
   254ba:	e729      	b.n	25310 <net_conn_input+0x14>
	return pkt->frags->data;
   254bc:	68b2      	ldr	r2, [r6, #8]
   254be:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   254c0:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   254c2:	2aff      	cmp	r2, #255	; 0xff
   254c4:	d1f0      	bne.n	254a8 <net_conn_input+0x1ac>
   254c6:	e7f3      	b.n	254b0 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   254c8:	2300      	movs	r3, #0
   254ca:	2204      	movs	r2, #4
   254cc:	2101      	movs	r1, #1
   254ce:	4630      	mov	r0, r6
   254d0:	f7f9 fc94 	bl	1edfc <net_icmpv6_send_error>
   254d4:	e7ea      	b.n	254ac <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   254d6:	4a09      	ldr	r2, [pc, #36]	; (254fc <net_conn_input+0x200>)
   254d8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   254da:	3301      	adds	r3, #1
   254dc:	6793      	str	r3, [r2, #120]	; 0x78
   254de:	e7e7      	b.n	254b0 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   254e0:	4a06      	ldr	r2, [pc, #24]	; (254fc <net_conn_input+0x200>)
   254e2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   254e4:	3301      	adds	r3, #1
   254e6:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   254e8:	2002      	movs	r0, #2
   254ea:	e711      	b.n	25310 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   254ec:	4a03      	ldr	r2, [pc, #12]	; (254fc <net_conn_input+0x200>)
   254ee:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   254f0:	3301      	adds	r3, #1
   254f2:	65d3      	str	r3, [r2, #92]	; 0x5c
   254f4:	2002      	movs	r0, #2
   254f6:	e70b      	b.n	25310 <net_conn_input+0x14>
   254f8:	200004ac 	.word	0x200004ac
   254fc:	20002a58 	.word	0x20002a58

00025500 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   25500:	4770      	bx	lr

00025502 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   25502:	297f      	cmp	r1, #127	; 0x7f
   25504:	d912      	bls.n	2552c <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   25506:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   2550a:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   2550e:	d311      	bcc.n	25534 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   25510:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   25514:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   25518:	d310      	bcc.n	2553c <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   2551a:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   2551e:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   25522:	d20f      	bcs.n	25544 <compute_rlen_size+0x42>
		*size = 4;
   25524:	2304      	movs	r3, #4
   25526:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   25528:	2000      	movs	r0, #0
   2552a:	4770      	bx	lr
		*size = 1;
   2552c:	2301      	movs	r3, #1
   2552e:	8003      	strh	r3, [r0, #0]
	return 0;
   25530:	2000      	movs	r0, #0
   25532:	4770      	bx	lr
		*size = 2;
   25534:	2302      	movs	r3, #2
   25536:	8003      	strh	r3, [r0, #0]
	return 0;
   25538:	2000      	movs	r0, #0
   2553a:	4770      	bx	lr
		*size = 3;
   2553c:	2303      	movs	r3, #3
   2553e:	8003      	strh	r3, [r0, #0]
	return 0;
   25540:	2000      	movs	r0, #0
   25542:	4770      	bx	lr
		return -EINVAL;
   25544:	f06f 0015 	mvn.w	r0, #21
}
   25548:	4770      	bx	lr

0002554a <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   2554a:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   2554c:	2200      	movs	r2, #0
   2554e:	e004      	b.n	2555a <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   25550:	1c53      	adds	r3, r2, #1
   25552:	b2db      	uxtb	r3, r3
   25554:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   25556:	b139      	cbz	r1, 25568 <rlen_encode+0x1e>
		buf[i++] = encoded;
   25558:	461a      	mov	r2, r3
		encoded = len % 128;
   2555a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   2555e:	09c9      	lsrs	r1, r1, #7
   25560:	d0f6      	beq.n	25550 <rlen_encode+0x6>
			encoded = encoded | 128;
   25562:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   25566:	e7f3      	b.n	25550 <rlen_encode+0x6>

	return 0;
}
   25568:	2000      	movs	r0, #0
   2556a:	bc10      	pop	{r4}
   2556c:	4770      	bx	lr

0002556e <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   2556e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   25570:	2400      	movs	r4, #0
	u32_t mult = 1;
   25572:	2601      	movs	r6, #1
	u32_t value = 0;
   25574:	4627      	mov	r7, r4
   25576:	e000      	b.n	2557a <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   25578:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   2557a:	2c03      	cmp	r4, #3
   2557c:	d810      	bhi.n	255a0 <rlen_decode+0x32>
   2557e:	429c      	cmp	r4, r3
   25580:	d211      	bcs.n	255a6 <rlen_decode+0x38>
		encoded = buf[i++];
   25582:	1c65      	adds	r5, r4, #1
   25584:	b2ad      	uxth	r5, r5
   25586:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   25588:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   2558c:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   25590:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   25592:	f014 0f80 	tst.w	r4, #128	; 0x80
   25596:	d1ef      	bne.n	25578 <rlen_decode+0xa>

	*rlen = value;
   25598:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   2559a:	800d      	strh	r5, [r1, #0]

	return 0;
   2559c:	2000      	movs	r0, #0
   2559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   255a0:	f06f 000b 	mvn.w	r0, #11
   255a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   255a6:	f06f 000b 	mvn.w	r0, #11
}
   255aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000255ac <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   255ac:	b410      	push	{r4}
   255ae:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   255b2:	2a03      	cmp	r2, #3
   255b4:	d912      	bls.n	255dc <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   255b6:	011b      	lsls	r3, r3, #4
   255b8:	b2db      	uxtb	r3, r3
   255ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
   255be:	f002 020f 	and.w	r2, r2, #15
   255c2:	4413      	add	r3, r2
   255c4:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   255c6:	2302      	movs	r3, #2
   255c8:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   255ca:	0a23      	lsrs	r3, r4, #8
   255cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   255d0:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   255d2:	2304      	movs	r3, #4
   255d4:	800b      	strh	r3, [r1, #0]

	return 0;
   255d6:	2000      	movs	r0, #0
}
   255d8:	bc10      	pop	{r4}
   255da:	4770      	bx	lr
		return -ENOMEM;
   255dc:	f06f 000b 	mvn.w	r0, #11
   255e0:	e7fa      	b.n	255d8 <pack_pkt_id+0x2c>

000255e2 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   255e2:	2a01      	cmp	r2, #1
   255e4:	d90d      	bls.n	25602 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   255e6:	011b      	lsls	r3, r3, #4
   255e8:	b2db      	uxtb	r3, r3
   255ea:	f89d 2000 	ldrb.w	r2, [sp]
   255ee:	f002 020f 	and.w	r2, r2, #15
   255f2:	4413      	add	r3, r2
   255f4:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   255f6:	2300      	movs	r3, #0
   255f8:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   255fa:	2202      	movs	r2, #2
   255fc:	800a      	strh	r2, [r1, #0]

	return 0;
   255fe:	4618      	mov	r0, r3
   25600:	4770      	bx	lr
		return -ENOMEM;
   25602:	f06f 000b 	mvn.w	r0, #11
}
   25606:	4770      	bx	lr

00025608 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   25608:	2903      	cmp	r1, #3
   2560a:	d911      	bls.n	25630 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   2560c:	7841      	ldrb	r1, [r0, #1]
   2560e:	2902      	cmp	r1, #2
   25610:	d111      	bne.n	25636 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   25612:	7801      	ldrb	r1, [r0, #0]
   25614:	0909      	lsrs	r1, r1, #4
   25616:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25618:	7802      	ldrb	r2, [r0, #0]
   2561a:	f002 020f 	and.w	r2, r2, #15
   2561e:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   25620:	8842      	ldrh	r2, [r0, #2]
   25622:	0a13      	lsrs	r3, r2, #8
   25624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25628:	9a00      	ldr	r2, [sp, #0]
   2562a:	8013      	strh	r3, [r2, #0]

	return 0;
   2562c:	2000      	movs	r0, #0
   2562e:	4770      	bx	lr
		return -EINVAL;
   25630:	f06f 0015 	mvn.w	r0, #21
   25634:	4770      	bx	lr
		return -EINVAL;
   25636:	f06f 0015 	mvn.w	r0, #21
}
   2563a:	4770      	bx	lr

0002563c <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   2563c:	b510      	push	{r4, lr}
   2563e:	b084      	sub	sp, #16
   25640:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   25642:	9200      	str	r2, [sp, #0]
   25644:	f10d 030e 	add.w	r3, sp, #14
   25648:	f10d 020f 	add.w	r2, sp, #15
   2564c:	f7ff ffdc 	bl	25608 <unpack_pktid>
	if (rc != 0) {
   25650:	4603      	mov	r3, r0
   25652:	b948      	cbnz	r0, 25668 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   25654:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25658:	42a2      	cmp	r2, r4
   2565a:	d10b      	bne.n	25674 <unpack_pktid_validate+0x38>
   2565c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   25660:	f89d 2018 	ldrb.w	r2, [sp, #24]
   25664:	4291      	cmp	r1, r2
   25666:	d102      	bne.n	2566e <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   25668:	4618      	mov	r0, r3
   2566a:	b004      	add	sp, #16
   2566c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2566e:	f06f 0315 	mvn.w	r3, #21
   25672:	e7f9      	b.n	25668 <unpack_pktid_validate+0x2c>
   25674:	f06f 0315 	mvn.w	r3, #21
   25678:	e7f6      	b.n	25668 <unpack_pktid_validate+0x2c>

0002567a <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   2567a:	2901      	cmp	r1, #1
   2567c:	d90d      	bls.n	2569a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   2567e:	7801      	ldrb	r1, [r0, #0]
   25680:	0909      	lsrs	r1, r1, #4
   25682:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25684:	7802      	ldrb	r2, [r0, #0]
   25686:	f002 020f 	and.w	r2, r2, #15
   2568a:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   2568c:	7843      	ldrb	r3, [r0, #1]
   2568e:	b90b      	cbnz	r3, 25694 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   25690:	2000      	movs	r0, #0
}
   25692:	4770      	bx	lr
		return -EINVAL;
   25694:	f06f 0015 	mvn.w	r0, #21
   25698:	4770      	bx	lr
		return -EINVAL;
   2569a:	f06f 0015 	mvn.w	r0, #21
   2569e:	4770      	bx	lr

000256a0 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   256a0:	b530      	push	{r4, r5, lr}
   256a2:	b083      	sub	sp, #12
   256a4:	4614      	mov	r4, r2
   256a6:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   256a8:	f10d 0306 	add.w	r3, sp, #6
   256ac:	f10d 0207 	add.w	r2, sp, #7
   256b0:	f7ff ffe3 	bl	2567a <unpack_zerolen>
	if (rc != 0) {
   256b4:	4603      	mov	r3, r0
   256b6:	b938      	cbnz	r0, 256c8 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   256b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   256bc:	42a2      	cmp	r2, r4
   256be:	d109      	bne.n	256d4 <unpack_zerolen_validate+0x34>
   256c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   256c4:	42aa      	cmp	r2, r5
   256c6:	d102      	bne.n	256ce <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   256c8:	4618      	mov	r0, r3
   256ca:	b003      	add	sp, #12
   256cc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   256ce:	f06f 0315 	mvn.w	r3, #21
   256d2:	e7f9      	b.n	256c8 <unpack_zerolen_validate+0x28>
   256d4:	f06f 0315 	mvn.w	r3, #21
   256d8:	e7f6      	b.n	256c8 <unpack_zerolen_validate+0x28>

000256da <mqtt_pack_puback>:
{
   256da:	b500      	push	{lr}
   256dc:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   256de:	9301      	str	r3, [sp, #4]
   256e0:	2300      	movs	r3, #0
   256e2:	9300      	str	r3, [sp, #0]
   256e4:	2304      	movs	r3, #4
   256e6:	f7ff ff61 	bl	255ac <pack_pkt_id>
}
   256ea:	b003      	add	sp, #12
   256ec:	f85d fb04 	ldr.w	pc, [sp], #4

000256f0 <mqtt_pack_pubrec>:
{
   256f0:	b500      	push	{lr}
   256f2:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   256f4:	9301      	str	r3, [sp, #4]
   256f6:	2300      	movs	r3, #0
   256f8:	9300      	str	r3, [sp, #0]
   256fa:	2305      	movs	r3, #5
   256fc:	f7ff ff56 	bl	255ac <pack_pkt_id>
}
   25700:	b003      	add	sp, #12
   25702:	f85d fb04 	ldr.w	pc, [sp], #4

00025706 <mqtt_pack_pubrel>:
{
   25706:	b500      	push	{lr}
   25708:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   2570a:	9301      	str	r3, [sp, #4]
   2570c:	2302      	movs	r3, #2
   2570e:	9300      	str	r3, [sp, #0]
   25710:	2306      	movs	r3, #6
   25712:	f7ff ff4b 	bl	255ac <pack_pkt_id>
}
   25716:	b003      	add	sp, #12
   25718:	f85d fb04 	ldr.w	pc, [sp], #4

0002571c <mqtt_pack_pubcomp>:
{
   2571c:	b500      	push	{lr}
   2571e:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   25720:	9301      	str	r3, [sp, #4]
   25722:	2300      	movs	r3, #0
   25724:	9300      	str	r3, [sp, #0]
   25726:	2307      	movs	r3, #7
   25728:	f7ff ff40 	bl	255ac <pack_pkt_id>
}
   2572c:	b003      	add	sp, #12
   2572e:	f85d fb04 	ldr.w	pc, [sp], #4

00025732 <mqtt_pack_connect>:
{
   25732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25736:	b082      	sub	sp, #8
   25738:	4605      	mov	r5, r0
   2573a:	460e      	mov	r6, r1
   2573c:	4617      	mov	r7, r2
   2573e:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   25740:	891b      	ldrh	r3, [r3, #8]
   25742:	1c99      	adds	r1, r3, #2
   25744:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   25746:	7aa2      	ldrb	r2, [r4, #10]
   25748:	f012 0f01 	tst.w	r2, #1
   2574c:	d009      	beq.n	25762 <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   2574e:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   25750:	8aa3      	ldrh	r3, [r4, #20]
   25752:	fa13 f181 	uxtah	r1, r3, r1
   25756:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   25758:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   2575a:	8ba3      	ldrh	r3, [r4, #28]
   2575c:	fa13 f181 	uxtah	r1, r3, r1
   25760:	b289      	uxth	r1, r1
	if (msg->user_name) {
   25762:	6a23      	ldr	r3, [r4, #32]
   25764:	b123      	cbz	r3, 25770 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   25766:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   25768:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2576a:	fa13 f181 	uxtah	r1, r3, r1
   2576e:	b289      	uxth	r1, r1
	if (msg->password) {
   25770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25772:	b123      	cbz	r3, 2577e <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   25774:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   25776:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   25778:	fa13 f181 	uxtah	r1, r3, r1
   2577c:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   2577e:	310a      	adds	r1, #10
   25780:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   25784:	4651      	mov	r1, sl
   25786:	f10d 0006 	add.w	r0, sp, #6
   2578a:	f7ff feba 	bl	25502 <compute_rlen_size>
	if (rc != 0) {
   2578e:	4681      	mov	r9, r0
   25790:	2800      	cmp	r0, #0
   25792:	f040 80b6 	bne.w	25902 <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   25796:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   2579a:	44d0      	add	r8, sl
   2579c:	fa1f f888 	uxth.w	r8, r8
   257a0:	f108 0801 	add.w	r8, r8, #1
   257a4:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   257a8:	45b8      	cmp	r8, r7
   257aa:	f200 80ad 	bhi.w	25908 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   257ae:	4628      	mov	r0, r5
   257b0:	2310      	movs	r3, #16
   257b2:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   257b6:	4651      	mov	r1, sl
   257b8:	f7ff fec7 	bl	2554a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   257bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   257c0:	1c43      	adds	r3, r0, #1
   257c2:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   257c4:	2200      	movs	r2, #0
   257c6:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   257c8:	1c59      	adds	r1, r3, #1
   257ca:	2204      	movs	r2, #4
   257cc:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   257ce:	1c99      	adds	r1, r3, #2
   257d0:	274d      	movs	r7, #77	; 0x4d
   257d2:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   257d4:	1cd9      	adds	r1, r3, #3
   257d6:	2751      	movs	r7, #81	; 0x51
   257d8:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   257da:	189f      	adds	r7, r3, r2
   257dc:	2154      	movs	r1, #84	; 0x54
   257de:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   257e0:	1d5f      	adds	r7, r3, #5
   257e2:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   257e4:	1d99      	adds	r1, r3, #6
   257e6:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   257e8:	1ddf      	adds	r7, r3, #7
   257ea:	6a22      	ldr	r2, [r4, #32]
   257ec:	2a00      	cmp	r2, #0
   257ee:	d05f      	beq.n	258b0 <mqtt_pack_connect+0x17e>
   257f0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   257f4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   257f6:	2a00      	cmp	r2, #0
   257f8:	d05c      	beq.n	258b4 <mqtt_pack_connect+0x182>
   257fa:	2240      	movs	r2, #64	; 0x40
   257fc:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   257fe:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   25800:	f012 0f01 	tst.w	r2, #1
   25804:	d058      	beq.n	258b8 <mqtt_pack_connect+0x186>
   25806:	2220      	movs	r2, #32
   25808:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   2580a:	7ae2      	ldrb	r2, [r4, #11]
   2580c:	00d2      	lsls	r2, r2, #3
   2580e:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   25812:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   25814:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   25816:	f011 0f01 	tst.w	r1, #1
   2581a:	d04f      	beq.n	258bc <mqtt_pack_connect+0x18a>
   2581c:	2104      	movs	r1, #4
   2581e:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   25820:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   25822:	f012 0f01 	tst.w	r2, #1
   25826:	d04b      	beq.n	258c0 <mqtt_pack_connect+0x18e>
   25828:	2202      	movs	r2, #2
   2582a:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   2582c:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   2582e:	3308      	adds	r3, #8
   25830:	8be1      	ldrh	r1, [r4, #30]
   25832:	0a0a      	lsrs	r2, r1, #8
   25834:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25838:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   2583a:	f100 030b 	add.w	r3, r0, #11
   2583e:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   25840:	8921      	ldrh	r1, [r4, #8]
   25842:	0a0a      	lsrs	r2, r1, #8
   25844:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25848:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   2584a:	300d      	adds	r0, #13
   2584c:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   2584e:	8922      	ldrh	r2, [r4, #8]
   25850:	6861      	ldr	r1, [r4, #4]
   25852:	19e8      	adds	r0, r5, r7
   25854:	f7da fd34 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   25858:	8920      	ldrh	r0, [r4, #8]
   2585a:	4438      	add	r0, r7
   2585c:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   2585e:	7aa3      	ldrb	r3, [r4, #10]
   25860:	f013 0f01 	tst.w	r3, #1
   25864:	d12e      	bne.n	258c4 <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   25866:	6a23      	ldr	r3, [r4, #32]
   25868:	b173      	cbz	r3, 25888 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   2586a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2586c:	0a13      	lsrs	r3, r2, #8
   2586e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25872:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25874:	3002      	adds	r0, #2
   25876:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   25878:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2587a:	6a21      	ldr	r1, [r4, #32]
   2587c:	19e8      	adds	r0, r5, r7
   2587e:	f7da fd1f 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   25882:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   25884:	4438      	add	r0, r7
   25886:	b280      	uxth	r0, r0
	if (msg->password) {
   25888:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2588a:	b15b      	cbz	r3, 258a4 <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   2588c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2588e:	0a13      	lsrs	r3, r2, #8
   25890:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25894:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25896:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   25898:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2589a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2589c:	fa15 f080 	uxtah	r0, r5, r0
   258a0:	f7da fd0e 	bl	2c0 <memcpy>
	*length = total_buf_size;
   258a4:	f8a6 8000 	strh.w	r8, [r6]
}
   258a8:	4648      	mov	r0, r9
   258aa:	b002      	add	sp, #8
   258ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   258b0:	2100      	movs	r1, #0
   258b2:	e79f      	b.n	257f4 <mqtt_pack_connect+0xc2>
   258b4:	2200      	movs	r2, #0
   258b6:	e7a1      	b.n	257fc <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   258b8:	2200      	movs	r2, #0
   258ba:	e7a5      	b.n	25808 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   258bc:	2100      	movs	r1, #0
   258be:	e7ae      	b.n	2581e <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   258c0:	2200      	movs	r2, #0
   258c2:	e7b2      	b.n	2582a <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   258c4:	8aa2      	ldrh	r2, [r4, #20]
   258c6:	0a13      	lsrs	r3, r2, #8
   258c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   258cc:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   258ce:	3002      	adds	r0, #2
   258d0:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   258d2:	8aa2      	ldrh	r2, [r4, #20]
   258d4:	6921      	ldr	r1, [r4, #16]
   258d6:	19e8      	adds	r0, r5, r7
   258d8:	f7da fcf2 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   258dc:	8aa0      	ldrh	r0, [r4, #20]
   258de:	4407      	add	r7, r0
   258e0:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   258e2:	8ba2      	ldrh	r2, [r4, #28]
   258e4:	0a13      	lsrs	r3, r2, #8
   258e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   258ea:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   258ec:	3702      	adds	r7, #2
   258ee:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   258f0:	8ba2      	ldrh	r2, [r4, #28]
   258f2:	69a1      	ldr	r1, [r4, #24]
   258f4:	19e8      	adds	r0, r5, r7
   258f6:	f7da fce3 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   258fa:	8ba0      	ldrh	r0, [r4, #28]
   258fc:	4438      	add	r0, r7
   258fe:	b280      	uxth	r0, r0
   25900:	e7b1      	b.n	25866 <mqtt_pack_connect+0x134>
		return -EINVAL;
   25902:	f06f 0915 	mvn.w	r9, #21
   25906:	e7cf      	b.n	258a8 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   25908:	f06f 090b 	mvn.w	r9, #11
   2590c:	e7cc      	b.n	258a8 <mqtt_pack_connect+0x176>
	...

00025910 <mqtt_unpack_suback>:
{
   25910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25914:	b087      	sub	sp, #28
   25916:	461d      	mov	r5, r3
   25918:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   2591c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   2591e:	2300      	movs	r3, #0
   25920:	8013      	strh	r3, [r2, #0]
	*items = 0;
   25922:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   25924:	2f00      	cmp	r7, #0
   25926:	d037      	beq.n	25998 <mqtt_unpack_suback+0x88>
   25928:	4604      	mov	r4, r0
   2592a:	4689      	mov	r9, r1
   2592c:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   2592e:	7803      	ldrb	r3, [r0, #0]
   25930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   25934:	2a90      	cmp	r2, #144	; 0x90
   25936:	d138      	bne.n	259aa <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   25938:	1e4b      	subs	r3, r1, #1
   2593a:	b29b      	uxth	r3, r3
   2593c:	1c42      	adds	r2, r0, #1
   2593e:	f10d 0116 	add.w	r1, sp, #22
   25942:	a804      	add	r0, sp, #16
   25944:	f7ff fe13 	bl	2556e <rlen_decode>
	if (rc != 0) {
   25948:	4603      	mov	r3, r0
   2594a:	2800      	cmp	r0, #0
   2594c:	d136      	bne.n	259bc <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   2594e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   25952:	9804      	ldr	r0, [sp, #16]
   25954:	180a      	adds	r2, r1, r0
   25956:	3201      	adds	r2, #1
   25958:	454a      	cmp	r2, r9
   2595a:	d838      	bhi.n	259ce <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2595c:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2595e:	fa14 f282 	uxtah	r2, r4, r2
   25962:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   25964:	0a02      	lsrs	r2, r0, #8
   25966:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   2596a:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   2596e:	3103      	adds	r1, #3
   25970:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   25972:	9a04      	ldr	r2, [sp, #16]
   25974:	3a02      	subs	r2, #2
   25976:	b2d2      	uxtb	r2, r2
   25978:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   2597a:	4297      	cmp	r7, r2
   2597c:	d335      	bcc.n	259ea <mqtt_unpack_suback+0xda>
   2597e:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25980:	7828      	ldrb	r0, [r5, #0]
   25982:	4282      	cmp	r2, r0
   25984:	d242      	bcs.n	25a0c <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   25986:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25988:	2802      	cmp	r0, #2
   2598a:	d837      	bhi.n	259fc <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   2598c:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   2598e:	3101      	adds	r1, #1
   25990:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   25992:	3201      	adds	r2, #1
   25994:	b2d2      	uxtb	r2, r2
   25996:	e7f3      	b.n	25980 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25998:	f240 321a 	movw	r2, #794	; 0x31a
   2599c:	491d      	ldr	r1, [pc, #116]	; (25a14 <mqtt_unpack_suback+0x104>)
   2599e:	481e      	ldr	r0, [pc, #120]	; (25a18 <mqtt_unpack_suback+0x108>)
   259a0:	f7dd fad0 	bl	2f44 <printk>
		return -EINVAL;
   259a4:	f06f 0315 	mvn.w	r3, #21
   259a8:	e030      	b.n	25a0c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   259aa:	f240 321f 	movw	r2, #799	; 0x31f
   259ae:	4919      	ldr	r1, [pc, #100]	; (25a14 <mqtt_unpack_suback+0x104>)
   259b0:	481a      	ldr	r0, [pc, #104]	; (25a1c <mqtt_unpack_suback+0x10c>)
   259b2:	f7dd fac7 	bl	2f44 <printk>
		return -EINVAL;
   259b6:	f06f 0315 	mvn.w	r3, #21
   259ba:	e027      	b.n	25a0c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   259bc:	f240 3226 	movw	r2, #806	; 0x326
   259c0:	4914      	ldr	r1, [pc, #80]	; (25a14 <mqtt_unpack_suback+0x104>)
   259c2:	4817      	ldr	r0, [pc, #92]	; (25a20 <mqtt_unpack_suback+0x110>)
   259c4:	f7dd fabe 	bl	2f44 <printk>
		return -EINVAL;
   259c8:	f06f 0315 	mvn.w	r3, #21
   259cc:	e01e      	b.n	25a0c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   259ce:	f8cd 9008 	str.w	r9, [sp, #8]
   259d2:	9101      	str	r1, [sp, #4]
   259d4:	9000      	str	r0, [sp, #0]
   259d6:	2301      	movs	r3, #1
   259d8:	f240 322d 	movw	r2, #813	; 0x32d
   259dc:	490d      	ldr	r1, [pc, #52]	; (25a14 <mqtt_unpack_suback+0x104>)
   259de:	4811      	ldr	r0, [pc, #68]	; (25a24 <mqtt_unpack_suback+0x114>)
   259e0:	f7dd fab0 	bl	2f44 <printk>
		return -EINVAL;
   259e4:	f06f 0315 	mvn.w	r3, #21
   259e8:	e010      	b.n	25a0c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   259ea:	f240 323b 	movw	r2, #827	; 0x33b
   259ee:	4909      	ldr	r1, [pc, #36]	; (25a14 <mqtt_unpack_suback+0x104>)
   259f0:	480d      	ldr	r0, [pc, #52]	; (25a28 <mqtt_unpack_suback+0x118>)
   259f2:	f7dd faa7 	bl	2f44 <printk>
		return -EINVAL;
   259f6:	f06f 0315 	mvn.w	r3, #21
   259fa:	e007      	b.n	25a0c <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   259fc:	f240 3242 	movw	r2, #834	; 0x342
   25a00:	4904      	ldr	r1, [pc, #16]	; (25a14 <mqtt_unpack_suback+0x104>)
   25a02:	480a      	ldr	r0, [pc, #40]	; (25a2c <mqtt_unpack_suback+0x11c>)
   25a04:	f7dd fa9e 	bl	2f44 <printk>
			return -EINVAL;
   25a08:	f06f 0315 	mvn.w	r3, #21
}
   25a0c:	4618      	mov	r0, r3
   25a0e:	b007      	add	sp, #28
   25a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a14:	000322c0 	.word	0x000322c0
   25a18:	000322d4 	.word	0x000322d4
   25a1c:	000322ec 	.word	0x000322ec
   25a20:	00032314 	.word	0x00032314
   25a24:	00032338 	.word	0x00032338
   25a28:	00032380 	.word	0x00032380
   25a2c:	000323ac 	.word	0x000323ac

00025a30 <mqtt_pack_publish>:
{
   25a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a34:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   25a36:	785c      	ldrb	r4, [r3, #1]
   25a38:	2c02      	cmp	r4, #2
   25a3a:	d860      	bhi.n	25afe <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   25a3c:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   25a40:	2c00      	cmp	r4, #0
   25a42:	d057      	beq.n	25af4 <mqtt_pack_publish+0xc4>
   25a44:	f04f 0e02 	mov.w	lr, #2
   25a48:	461c      	mov	r4, r3
   25a4a:	4615      	mov	r5, r2
   25a4c:	460f      	mov	r7, r1
   25a4e:	4606      	mov	r6, r0
   25a50:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   25a54:	8aa2      	ldrh	r2, [r4, #20]
   25a56:	fa12 f383 	uxtah	r3, r2, r3
   25a5a:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25a5c:	3302      	adds	r3, #2
   25a5e:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   25a62:	4649      	mov	r1, r9
   25a64:	f10d 0006 	add.w	r0, sp, #6
   25a68:	f7ff fd4b 	bl	25502 <compute_rlen_size>
	if (rc != 0) {
   25a6c:	4680      	mov	r8, r0
   25a6e:	2800      	cmp	r0, #0
   25a70:	d148      	bne.n	25b04 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   25a72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25a76:	3301      	adds	r3, #1
   25a78:	444b      	add	r3, r9
   25a7a:	42ab      	cmp	r3, r5
   25a7c:	dc45      	bgt.n	25b0a <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a7e:	7823      	ldrb	r3, [r4, #0]
   25a80:	2b00      	cmp	r3, #0
   25a82:	d03a      	beq.n	25afa <mqtt_pack_publish+0xca>
   25a84:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25a86:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a88:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25a8c:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25a8e:	78a2      	ldrb	r2, [r4, #2]
   25a90:	2a00      	cmp	r2, #0
   25a92:	bf18      	it	ne
   25a94:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a98:	4630      	mov	r0, r6
   25a9a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25a9e:	4649      	mov	r1, r9
   25aa0:	f7ff fd53 	bl	2554a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25aa4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25aa8:	1c6b      	adds	r3, r5, #1
   25aaa:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25aac:	89a1      	ldrh	r1, [r4, #12]
   25aae:	0a0a      	lsrs	r2, r1, #8
   25ab0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25ab4:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25ab6:	3503      	adds	r5, #3
   25ab8:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25aba:	89a2      	ldrh	r2, [r4, #12]
   25abc:	68a1      	ldr	r1, [r4, #8]
   25abe:	1970      	adds	r0, r6, r5
   25ac0:	f7da fbfe 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25ac4:	89a3      	ldrh	r3, [r4, #12]
   25ac6:	441d      	add	r5, r3
   25ac8:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25aca:	7863      	ldrb	r3, [r4, #1]
   25acc:	b133      	cbz	r3, 25adc <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25ace:	88a2      	ldrh	r2, [r4, #4]
   25ad0:	0a13      	lsrs	r3, r2, #8
   25ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25ad6:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25ad8:	3502      	adds	r5, #2
   25ada:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25adc:	8aa2      	ldrh	r2, [r4, #20]
   25ade:	6921      	ldr	r1, [r4, #16]
   25ae0:	1970      	adds	r0, r6, r5
   25ae2:	f7da fbed 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25ae6:	8aa3      	ldrh	r3, [r4, #20]
   25ae8:	441d      	add	r5, r3
	*length = offset;
   25aea:	803d      	strh	r5, [r7, #0]
}
   25aec:	4640      	mov	r0, r8
   25aee:	b003      	add	sp, #12
   25af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25af4:	f04f 0e00 	mov.w	lr, #0
   25af8:	e7a6      	b.n	25a48 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25afa:	2330      	movs	r3, #48	; 0x30
   25afc:	e7c3      	b.n	25a86 <mqtt_pack_publish+0x56>
		return -EINVAL;
   25afe:	f06f 0815 	mvn.w	r8, #21
   25b02:	e7f3      	b.n	25aec <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25b04:	f06f 0815 	mvn.w	r8, #21
   25b08:	e7f0      	b.n	25aec <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25b0a:	f06f 080b 	mvn.w	r8, #11
   25b0e:	e7ed      	b.n	25aec <mqtt_pack_publish+0xbc>

00025b10 <mqtt_unpack_publish>:
{
   25b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b12:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25b14:	7807      	ldrb	r7, [r0, #0]
   25b16:	093b      	lsrs	r3, r7, #4
   25b18:	2b03      	cmp	r3, #3
   25b1a:	d148      	bne.n	25bae <mqtt_unpack_publish+0x9e>
   25b1c:	4615      	mov	r5, r2
   25b1e:	460e      	mov	r6, r1
   25b20:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25b22:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25b26:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25b28:	7803      	ldrb	r3, [r0, #0]
   25b2a:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25b2e:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25b30:	4602      	mov	r2, r0
   25b32:	f812 3b01 	ldrb.w	r3, [r2], #1
   25b36:	f003 0301 	and.w	r3, r3, #1
   25b3a:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25b3c:	1e4b      	subs	r3, r1, #1
   25b3e:	b29b      	uxth	r3, r3
   25b40:	f10d 0106 	add.w	r1, sp, #6
   25b44:	4668      	mov	r0, sp
   25b46:	f7ff fd12 	bl	2556e <rlen_decode>
	if (rc != 0) {
   25b4a:	4607      	mov	r7, r0
   25b4c:	2800      	cmp	r0, #0
   25b4e:	d131      	bne.n	25bb4 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25b50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25b54:	9b00      	ldr	r3, [sp, #0]
   25b56:	4413      	add	r3, r2
   25b58:	3301      	adds	r3, #1
   25b5a:	42b3      	cmp	r3, r6
   25b5c:	d82d      	bhi.n	25bba <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25b5e:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25b60:	fa14 f383 	uxtah	r3, r4, r3
   25b64:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   25b66:	0a0b      	lsrs	r3, r1, #8
   25b68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25b6c:	b29b      	uxth	r3, r3
   25b6e:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25b70:	3203      	adds	r2, #3
   25b72:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   25b74:	18d1      	adds	r1, r2, r3
   25b76:	42b1      	cmp	r1, r6
   25b78:	dc22      	bgt.n	25bc0 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25b7a:	18a1      	adds	r1, r4, r2
   25b7c:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25b7e:	4413      	add	r3, r2
   25b80:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25b82:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   25b84:	786a      	ldrb	r2, [r5, #1]
   25b86:	3a01      	subs	r2, #1
   25b88:	b2d2      	uxtb	r2, r2
   25b8a:	2a01      	cmp	r2, #1
   25b8c:	d908      	bls.n	25ba0 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25b8e:	2200      	movs	r2, #0
   25b90:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25b92:	1af6      	subs	r6, r6, r3
   25b94:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25b96:	4423      	add	r3, r4
   25b98:	612b      	str	r3, [r5, #16]
}
   25b9a:	4638      	mov	r0, r7
   25b9c:	b003      	add	sp, #12
   25b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25ba0:	0a0a      	lsrs	r2, r1, #8
   25ba2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25ba6:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25ba8:	3302      	adds	r3, #2
   25baa:	b29b      	uxth	r3, r3
   25bac:	e7f1      	b.n	25b92 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25bae:	f06f 0715 	mvn.w	r7, #21
   25bb2:	e7f2      	b.n	25b9a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25bb4:	f06f 0715 	mvn.w	r7, #21
   25bb8:	e7ef      	b.n	25b9a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25bba:	f06f 0715 	mvn.w	r7, #21
   25bbe:	e7ec      	b.n	25b9a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25bc0:	f06f 0715 	mvn.w	r7, #21
   25bc4:	e7e9      	b.n	25b9a <mqtt_unpack_publish+0x8a>

00025bc6 <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25bc6:	2903      	cmp	r1, #3
   25bc8:	d90d      	bls.n	25be6 <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25bca:	7801      	ldrb	r1, [r0, #0]
   25bcc:	2920      	cmp	r1, #32
   25bce:	d10d      	bne.n	25bec <mqtt_unpack_connack+0x26>
   25bd0:	7841      	ldrb	r1, [r0, #1]
   25bd2:	2902      	cmp	r1, #2
   25bd4:	d10d      	bne.n	25bf2 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25bd6:	7881      	ldrb	r1, [r0, #2]
   25bd8:	2901      	cmp	r1, #1
   25bda:	d80d      	bhi.n	25bf8 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25bdc:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25bde:	78c2      	ldrb	r2, [r0, #3]
   25be0:	701a      	strb	r2, [r3, #0]
	return 0;
   25be2:	2000      	movs	r0, #0
   25be4:	4770      	bx	lr
		return -EINVAL;
   25be6:	f06f 0015 	mvn.w	r0, #21
   25bea:	4770      	bx	lr
		return -EINVAL;
   25bec:	f06f 0015 	mvn.w	r0, #21
   25bf0:	4770      	bx	lr
   25bf2:	f06f 0015 	mvn.w	r0, #21
   25bf6:	4770      	bx	lr
		return -EINVAL;
   25bf8:	f06f 0015 	mvn.w	r0, #21
}
   25bfc:	4770      	bx	lr

00025bfe <mqtt_pack_disconnect>:
{
   25bfe:	b500      	push	{lr}
   25c00:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25c02:	2300      	movs	r3, #0
   25c04:	9300      	str	r3, [sp, #0]
   25c06:	230e      	movs	r3, #14
   25c08:	f7ff fceb 	bl	255e2 <pack_zerolen>
}
   25c0c:	b003      	add	sp, #12
   25c0e:	f85d fb04 	ldr.w	pc, [sp], #4

00025c12 <mqtt_unpack_puback>:
{
   25c12:	b500      	push	{lr}
   25c14:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25c16:	2300      	movs	r3, #0
   25c18:	9300      	str	r3, [sp, #0]
   25c1a:	2304      	movs	r3, #4
   25c1c:	f7ff fd0e 	bl	2563c <unpack_pktid_validate>
}
   25c20:	b003      	add	sp, #12
   25c22:	f85d fb04 	ldr.w	pc, [sp], #4

00025c26 <mqtt_unpack_pubrec>:
{
   25c26:	b500      	push	{lr}
   25c28:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25c2a:	2300      	movs	r3, #0
   25c2c:	9300      	str	r3, [sp, #0]
   25c2e:	2305      	movs	r3, #5
   25c30:	f7ff fd04 	bl	2563c <unpack_pktid_validate>
}
   25c34:	b003      	add	sp, #12
   25c36:	f85d fb04 	ldr.w	pc, [sp], #4

00025c3a <mqtt_unpack_pubrel>:
{
   25c3a:	b500      	push	{lr}
   25c3c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25c3e:	2302      	movs	r3, #2
   25c40:	9300      	str	r3, [sp, #0]
   25c42:	2306      	movs	r3, #6
   25c44:	f7ff fcfa 	bl	2563c <unpack_pktid_validate>
}
   25c48:	b003      	add	sp, #12
   25c4a:	f85d fb04 	ldr.w	pc, [sp], #4

00025c4e <mqtt_unpack_pubcomp>:
{
   25c4e:	b500      	push	{lr}
   25c50:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   25c52:	2300      	movs	r3, #0
   25c54:	9300      	str	r3, [sp, #0]
   25c56:	2307      	movs	r3, #7
   25c58:	f7ff fcf0 	bl	2563c <unpack_pktid_validate>
}
   25c5c:	b003      	add	sp, #12
   25c5e:	f85d fb04 	ldr.w	pc, [sp], #4

00025c62 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   25c62:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   25c64:	2300      	movs	r3, #0
   25c66:	220d      	movs	r2, #13
   25c68:	f7ff fd1a 	bl	256a0 <unpack_zerolen_validate>
}
   25c6c:	bd08      	pop	{r3, pc}
	...

00025c70 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c72:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   25c74:	1f13      	subs	r3, r2, #4
   25c76:	2b03      	cmp	r3, #3
   25c78:	d840      	bhi.n	25cfc <mqtt_rx_pub_msgs+0x8c>
   25c7a:	e8df f003 	tbb	[pc, r3]
   25c7e:	0502      	.short	0x0502
   25c80:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25c82:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   25c84:	4f22      	ldr	r7, [pc, #136]	; (25d10 <mqtt_rx_pub_msgs+0xa0>)
   25c86:	e007      	b.n	25c98 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25c88:	4e22      	ldr	r6, [pc, #136]	; (25d14 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25c8a:	4f23      	ldr	r7, [pc, #140]	; (25d18 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25c8c:	e004      	b.n	25c98 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25c8e:	4e23      	ldr	r6, [pc, #140]	; (25d1c <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25c90:	4f23      	ldr	r7, [pc, #140]	; (25d20 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25c92:	e001      	b.n	25c98 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25c94:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25c96:	4f23      	ldr	r7, [pc, #140]	; (25d24 <mqtt_rx_pub_msgs+0xb4>)
   25c98:	4614      	mov	r4, r2
   25c9a:	460b      	mov	r3, r1
   25c9c:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25c9e:	f10d 0206 	add.w	r2, sp, #6
   25ca2:	8989      	ldrh	r1, [r1, #12]
   25ca4:	6898      	ldr	r0, [r3, #8]
   25ca6:	47b8      	blx	r7
	if (rc != 0) {
   25ca8:	bb58      	cbnz	r0, 25d02 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25caa:	2c06      	cmp	r4, #6
   25cac:	d012      	beq.n	25cd4 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25cae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25cb2:	4622      	mov	r2, r4
   25cb4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25cb8:	4628      	mov	r0, r5
   25cba:	4798      	blx	r3
   25cbc:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25cbe:	bb1b      	cbnz	r3, 25d08 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25cc0:	b12e      	cbz	r6, 25cce <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25cc2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25cc6:	4628      	mov	r0, r5
   25cc8:	47b0      	blx	r6
	if (rc != 0) {
   25cca:	4603      	mov	r3, r0
   25ccc:	b998      	cbnz	r0, 25cf6 <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25cce:	4618      	mov	r0, r3
   25cd0:	b003      	add	sp, #12
   25cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25cd4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25cd8:	2b01      	cmp	r3, #1
   25cda:	d009      	beq.n	25cf0 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25cdc:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25ce0:	2306      	movs	r3, #6
   25ce2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25ce6:	2100      	movs	r1, #0
   25ce8:	4628      	mov	r0, r5
   25cea:	47a0      	blx	r4
   25cec:	4603      	mov	r3, r0
   25cee:	e7e6      	b.n	25cbe <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25cf0:	f06f 0315 	mvn.w	r3, #21
   25cf4:	e7e3      	b.n	25cbe <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25cf6:	f06f 0315 	mvn.w	r3, #21
   25cfa:	e7e8      	b.n	25cce <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25cfc:	f06f 0315 	mvn.w	r3, #21
   25d00:	e7e5      	b.n	25cce <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25d02:	f06f 0315 	mvn.w	r3, #21
   25d06:	e7e2      	b.n	25cce <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25d08:	f06f 0315 	mvn.w	r3, #21
   25d0c:	e7df      	b.n	25cce <mqtt_rx_pub_msgs+0x5e>
   25d0e:	bf00      	nop
   25d10:	00025c13 	.word	0x00025c13
   25d14:	00025e07 	.word	0x00025e07
   25d18:	00025c27 	.word	0x00025c27
   25d1c:	00025dfd 	.word	0x00025dfd
   25d20:	00025c3b 	.word	0x00025c3b
   25d24:	00025c4f 	.word	0x00025c4f

00025d28 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25d28:	4770      	bx	lr

00025d2a <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25d2a:	b96a      	cbnz	r2, 25d48 <app_recv+0x1e>
   25d2c:	b161      	cbz	r1, 25d48 <app_recv+0x1e>
{
   25d2e:	b510      	push	{r4, lr}
   25d30:	460c      	mov	r4, r1
	return pkt->appdatalen;
   25d32:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   25d34:	b91a      	cbnz	r2, 25d3e <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   25d36:	4620      	mov	r0, r4
   25d38:	f7f7 fc9b 	bl	1d672 <net_pkt_unref>
   25d3c:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25d3e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25d42:	4618      	mov	r0, r3
   25d44:	4790      	blx	r2
   25d46:	e7f6      	b.n	25d36 <app_recv+0xc>
   25d48:	4770      	bx	lr

00025d4a <mqtt_tx_pub_msgs>:
{
   25d4a:	b570      	push	{r4, r5, r6, lr}
   25d4c:	b084      	sub	sp, #16
   25d4e:	4604      	mov	r4, r0
	switch (pkt_type) {
   25d50:	3a04      	subs	r2, #4
   25d52:	2a03      	cmp	r2, #3
   25d54:	d849      	bhi.n	25dea <mqtt_tx_pub_msgs+0xa0>
   25d56:	e8df f002 	tbb	[pc, r2]
   25d5a:	2c02      	.short	0x2c02
   25d5c:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25d5e:	460b      	mov	r3, r1
   25d60:	2204      	movs	r2, #4
   25d62:	f10d 010a 	add.w	r1, sp, #10
   25d66:	a803      	add	r0, sp, #12
   25d68:	f7ff fcb7 	bl	256da <mqtt_pack_puback>
	if (rc != 0) {
   25d6c:	2800      	cmp	r0, #0
   25d6e:	d13f      	bne.n	25df0 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25d70:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25d72:	2100      	movs	r1, #0
   25d74:	4620      	mov	r0, r4
   25d76:	f000 fe09 	bl	2698c <net_app_get_net_pkt>
	if (tx == NULL) {
   25d7a:	4605      	mov	r5, r0
   25d7c:	2800      	cmp	r0, #0
   25d7e:	d03a      	beq.n	25df6 <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25d80:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25d84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25d86:	aa03      	add	r2, sp, #12
   25d88:	4631      	mov	r1, r6
   25d8a:	f7f7 fdaa 	bl	1d8e2 <net_pkt_append>
	if (rc != true) {
   25d8e:	4286      	cmp	r6, r0
   25d90:	d01f      	beq.n	25dd2 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25d92:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25d96:	4628      	mov	r0, r5
   25d98:	f7f7 fc6b 	bl	1d672 <net_pkt_unref>
}
   25d9c:	4620      	mov	r0, r4
   25d9e:	b004      	add	sp, #16
   25da0:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25da2:	460b      	mov	r3, r1
   25da4:	2204      	movs	r2, #4
   25da6:	f10d 010a 	add.w	r1, sp, #10
   25daa:	a803      	add	r0, sp, #12
   25dac:	f7ff fcb6 	bl	2571c <mqtt_pack_pubcomp>
		break;
   25db0:	e7dc      	b.n	25d6c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25db2:	460b      	mov	r3, r1
   25db4:	2204      	movs	r2, #4
   25db6:	f10d 010a 	add.w	r1, sp, #10
   25dba:	a803      	add	r0, sp, #12
   25dbc:	f7ff fc98 	bl	256f0 <mqtt_pack_pubrec>
		break;
   25dc0:	e7d4      	b.n	25d6c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25dc2:	460b      	mov	r3, r1
   25dc4:	2204      	movs	r2, #4
   25dc6:	f10d 010a 	add.w	r1, sp, #10
   25dca:	a803      	add	r0, sp, #12
   25dcc:	f7ff fc9b 	bl	25706 <mqtt_pack_pubrel>
		break;
   25dd0:	e7cc      	b.n	25d6c <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25dd2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25dd4:	2200      	movs	r2, #0
   25dd6:	9201      	str	r2, [sp, #4]
   25dd8:	9300      	str	r3, [sp, #0]
   25dda:	4613      	mov	r3, r2
   25ddc:	4629      	mov	r1, r5
   25dde:	4620      	mov	r0, r4
   25de0:	f000 fd58 	bl	26894 <net_app_send_pkt>
	if (rc < 0) {
   25de4:	1e04      	subs	r4, r0, #0
   25de6:	dad9      	bge.n	25d9c <mqtt_tx_pub_msgs+0x52>
   25de8:	e7d5      	b.n	25d96 <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25dea:	f06f 0415 	mvn.w	r4, #21
   25dee:	e7d5      	b.n	25d9c <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25df0:	f06f 0415 	mvn.w	r4, #21
   25df4:	e7d2      	b.n	25d9c <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25df6:	f06f 040b 	mvn.w	r4, #11
   25dfa:	e7cf      	b.n	25d9c <mqtt_tx_pub_msgs+0x52>

00025dfc <mqtt_tx_pubcomp>:
{
   25dfc:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25dfe:	2207      	movs	r2, #7
   25e00:	f7ff ffa3 	bl	25d4a <mqtt_tx_pub_msgs>
}
   25e04:	bd08      	pop	{r3, pc}

00025e06 <mqtt_tx_pubrel>:
{
   25e06:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25e08:	2206      	movs	r2, #6
   25e0a:	f7ff ff9e 	bl	25d4a <mqtt_tx_pub_msgs>
}
   25e0e:	bd08      	pop	{r3, pc}

00025e10 <mqtt_linearize_packet>:
{
   25e10:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25e12:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25e14:	42aa      	cmp	r2, r5
   25e16:	d820      	bhi.n	25e5a <mqtt_linearize_packet+0x4a>
   25e18:	2d80      	cmp	r5, #128	; 0x80
   25e1a:	d820      	bhi.n	25e5e <mqtt_linearize_packet+0x4e>
   25e1c:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25e1e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25e20:	4810      	ldr	r0, [pc, #64]	; (25e64 <mqtt_linearize_packet+0x54>)
   25e22:	f7f4 fe49 	bl	1aab8 <net_buf_alloc>
	if (data == NULL) {
   25e26:	4606      	mov	r6, r0
   25e28:	b180      	cbz	r0, 25e4c <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   25e2a:	68a1      	ldr	r1, [r4, #8]
   25e2c:	460c      	mov	r4, r1
	size_t bytes = 0;
   25e2e:	2200      	movs	r2, #0
   25e30:	e002      	b.n	25e38 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   25e32:	89a3      	ldrh	r3, [r4, #12]
   25e34:	441a      	add	r2, r3
		buf = buf->frags;
   25e36:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25e38:	2c00      	cmp	r4, #0
   25e3a:	d1fa      	bne.n	25e32 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25e3c:	b292      	uxth	r2, r2
   25e3e:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25e40:	462b      	mov	r3, r5
   25e42:	b292      	uxth	r2, r2
   25e44:	4630      	mov	r0, r6
   25e46:	f7f7 fcc7 	bl	1d7d8 <net_frag_linear_copy>
	if (rc != 0) {
   25e4a:	b908      	cbnz	r0, 25e50 <mqtt_linearize_packet+0x40>
}
   25e4c:	4630      	mov	r0, r6
   25e4e:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25e50:	4630      	mov	r0, r6
   25e52:	f7f7 fc08 	bl	1d666 <net_pkt_frag_unref>
	return NULL;
   25e56:	4626      	mov	r6, r4
   25e58:	e7f8      	b.n	25e4c <mqtt_linearize_packet+0x3c>
		return NULL;
   25e5a:	2600      	movs	r6, #0
   25e5c:	e7f6      	b.n	25e4c <mqtt_linearize_packet+0x3c>
   25e5e:	2600      	movs	r6, #0
   25e60:	e7f4      	b.n	25e4c <mqtt_linearize_packet+0x3c>
   25e62:	bf00      	nop
   25e64:	2000d15c 	.word	0x2000d15c

00025e68 <mqtt_tx_connect>:
{
   25e68:	b570      	push	{r4, r5, r6, lr}
   25e6a:	b082      	sub	sp, #8
   25e6c:	4604      	mov	r4, r0
   25e6e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25e70:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25e72:	481d      	ldr	r0, [pc, #116]	; (25ee8 <mqtt_tx_connect+0x80>)
   25e74:	f7f4 fe20 	bl	1aab8 <net_buf_alloc>
	if (data == NULL) {
   25e78:	b398      	cbz	r0, 25ee2 <mqtt_tx_connect+0x7a>
   25e7a:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25e7c:	7832      	ldrb	r2, [r6, #0]
   25e7e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25e82:	f362 0300 	bfi	r3, r2, #0, #1
   25e86:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25e8a:	4633      	mov	r3, r6
   25e8c:	2280      	movs	r2, #128	; 0x80
   25e8e:	f100 010c 	add.w	r1, r0, #12
   25e92:	6880      	ldr	r0, [r0, #8]
   25e94:	f7ff fc4d 	bl	25732 <mqtt_pack_connect>
	if (rc != 0) {
   25e98:	b9c0      	cbnz	r0, 25ecc <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25e9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25e9c:	2100      	movs	r1, #0
   25e9e:	4620      	mov	r0, r4
   25ea0:	f000 fd74 	bl	2698c <net_app_get_net_pkt>
	if (tx == NULL) {
   25ea4:	4606      	mov	r6, r0
   25ea6:	b1c8      	cbz	r0, 25edc <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25ea8:	4629      	mov	r1, r5
   25eaa:	f7f7 fc0c 	bl	1d6c6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25eae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25eb0:	2200      	movs	r2, #0
   25eb2:	9201      	str	r2, [sp, #4]
   25eb4:	9300      	str	r3, [sp, #0]
   25eb6:	4613      	mov	r3, r2
   25eb8:	4631      	mov	r1, r6
   25eba:	4620      	mov	r0, r4
   25ebc:	f000 fcea 	bl	26894 <net_app_send_pkt>
	if (rc < 0) {
   25ec0:	1e04      	subs	r4, r0, #0
   25ec2:	da08      	bge.n	25ed6 <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   25ec4:	4630      	mov	r0, r6
   25ec6:	f7f7 fbd4 	bl	1d672 <net_pkt_unref>
   25eca:	e004      	b.n	25ed6 <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   25ecc:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25ed0:	4628      	mov	r0, r5
   25ed2:	f7f7 fbc8 	bl	1d666 <net_pkt_frag_unref>
}
   25ed6:	4620      	mov	r0, r4
   25ed8:	b002      	add	sp, #8
   25eda:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25edc:	f06f 040b 	mvn.w	r4, #11
   25ee0:	e7f6      	b.n	25ed0 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   25ee2:	f06f 040b 	mvn.w	r4, #11
   25ee6:	e7f6      	b.n	25ed6 <mqtt_tx_connect+0x6e>
   25ee8:	2000d15c 	.word	0x2000d15c

00025eec <mqtt_tx_disconnect>:
{
   25eec:	b570      	push	{r4, r5, r6, lr}
   25eee:	b084      	sub	sp, #16
   25ef0:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   25ef2:	2202      	movs	r2, #2
   25ef4:	f10d 010a 	add.w	r1, sp, #10
   25ef8:	a803      	add	r0, sp, #12
   25efa:	f7ff fe80 	bl	25bfe <mqtt_pack_disconnect>
	if (rc != 0) {
   25efe:	bb78      	cbnz	r0, 25f60 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25f00:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25f02:	2100      	movs	r1, #0
   25f04:	4620      	mov	r0, r4
   25f06:	f000 fd41 	bl	2698c <net_app_get_net_pkt>
	if (tx == NULL) {
   25f0a:	4605      	mov	r5, r0
   25f0c:	b358      	cbz	r0, 25f66 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25f0e:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25f14:	aa03      	add	r2, sp, #12
   25f16:	4631      	mov	r1, r6
   25f18:	f7f7 fce3 	bl	1d8e2 <net_pkt_append>
	if (rc != true) {
   25f1c:	4286      	cmp	r6, r0
   25f1e:	d007      	beq.n	25f30 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   25f20:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   25f24:	4628      	mov	r0, r5
   25f26:	f7f7 fba4 	bl	1d672 <net_pkt_unref>
}
   25f2a:	4630      	mov	r0, r6
   25f2c:	b004      	add	sp, #16
   25f2e:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25f30:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25f32:	2200      	movs	r2, #0
   25f34:	9201      	str	r2, [sp, #4]
   25f36:	9300      	str	r3, [sp, #0]
   25f38:	4613      	mov	r3, r2
   25f3a:	4629      	mov	r1, r5
   25f3c:	4620      	mov	r0, r4
   25f3e:	f000 fca9 	bl	26894 <net_app_send_pkt>
	if (rc < 0) {
   25f42:	1e06      	subs	r6, r0, #0
   25f44:	dbee      	blt.n	25f24 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   25f46:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25f4a:	f36f 0341 	bfc	r3, #1, #1
   25f4e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   25f52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   25f56:	2b00      	cmp	r3, #0
   25f58:	d0e7      	beq.n	25f2a <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   25f5a:	4620      	mov	r0, r4
   25f5c:	4798      	blx	r3
   25f5e:	e7e4      	b.n	25f2a <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   25f60:	f06f 0615 	mvn.w	r6, #21
   25f64:	e7e1      	b.n	25f2a <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   25f66:	f06f 060b 	mvn.w	r6, #11
   25f6a:	e7de      	b.n	25f2a <mqtt_tx_disconnect+0x3e>

00025f6c <mqtt_tx_puback>:
{
   25f6c:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   25f6e:	2204      	movs	r2, #4
   25f70:	f7ff feeb 	bl	25d4a <mqtt_tx_pub_msgs>
}
   25f74:	bd08      	pop	{r3, pc}

00025f76 <mqtt_tx_pubrec>:
{
   25f76:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   25f78:	2205      	movs	r2, #5
   25f7a:	f7ff fee6 	bl	25d4a <mqtt_tx_pub_msgs>
}
   25f7e:	bd08      	pop	{r3, pc}

00025f80 <mqtt_tx_publish>:
{
   25f80:	b570      	push	{r4, r5, r6, lr}
   25f82:	b082      	sub	sp, #8
   25f84:	4605      	mov	r5, r0
   25f86:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25f88:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25f8a:	481a      	ldr	r0, [pc, #104]	; (25ff4 <mqtt_tx_publish+0x74>)
   25f8c:	f7f4 fd94 	bl	1aab8 <net_buf_alloc>
	if (data == NULL) {
   25f90:	b360      	cbz	r0, 25fec <mqtt_tx_publish+0x6c>
   25f92:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   25f94:	4633      	mov	r3, r6
   25f96:	89c2      	ldrh	r2, [r0, #14]
   25f98:	f100 010c 	add.w	r1, r0, #12
   25f9c:	6880      	ldr	r0, [r0, #8]
   25f9e:	f7ff fd47 	bl	25a30 <mqtt_pack_publish>
	if (rc != 0) {
   25fa2:	b9c0      	cbnz	r0, 25fd6 <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25fa4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   25fa6:	2100      	movs	r1, #0
   25fa8:	4628      	mov	r0, r5
   25faa:	f000 fcef 	bl	2698c <net_app_get_net_pkt>
	if (tx == NULL) {
   25fae:	4606      	mov	r6, r0
   25fb0:	b1c8      	cbz	r0, 25fe6 <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   25fb2:	4621      	mov	r1, r4
   25fb4:	f7f7 fb87 	bl	1d6c6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25fb8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   25fba:	2200      	movs	r2, #0
   25fbc:	9201      	str	r2, [sp, #4]
   25fbe:	9300      	str	r3, [sp, #0]
   25fc0:	4613      	mov	r3, r2
   25fc2:	4631      	mov	r1, r6
   25fc4:	4628      	mov	r0, r5
   25fc6:	f000 fc65 	bl	26894 <net_app_send_pkt>
	if (rc < 0) {
   25fca:	1e05      	subs	r5, r0, #0
   25fcc:	da08      	bge.n	25fe0 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   25fce:	4630      	mov	r0, r6
   25fd0:	f7f7 fb4f 	bl	1d672 <net_pkt_unref>
   25fd4:	e004      	b.n	25fe0 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   25fd6:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   25fda:	4620      	mov	r0, r4
   25fdc:	f7f7 fb43 	bl	1d666 <net_pkt_frag_unref>
}
   25fe0:	4628      	mov	r0, r5
   25fe2:	b002      	add	sp, #8
   25fe4:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25fe6:	f06f 050b 	mvn.w	r5, #11
   25fea:	e7f6      	b.n	25fda <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   25fec:	f06f 050b 	mvn.w	r5, #11
   25ff0:	e7f6      	b.n	25fe0 <mqtt_tx_publish+0x60>
   25ff2:	bf00      	nop
   25ff4:	2000d15c 	.word	0x2000d15c

00025ff8 <mqtt_rx_connack>:
{
   25ff8:	b570      	push	{r4, r5, r6, lr}
   25ffa:	b082      	sub	sp, #8
   25ffc:	4604      	mov	r4, r0
   25ffe:	4608      	mov	r0, r1
   26000:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   26002:	f10d 0307 	add.w	r3, sp, #7
   26006:	f10d 0206 	add.w	r2, sp, #6
   2600a:	8989      	ldrh	r1, [r1, #12]
   2600c:	6880      	ldr	r0, [r0, #8]
   2600e:	f7ff fdda 	bl	25bc6 <mqtt_unpack_connack>
	if (rc != 0) {
   26012:	b998      	cbnz	r0, 2603c <mqtt_rx_connack+0x44>
   26014:	4605      	mov	r5, r0
	switch (clean_session) {
   26016:	2e01      	cmp	r6, #1
   26018:	d113      	bne.n	26042 <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   2601a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2601e:	b99b      	cbnz	r3, 26048 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   26020:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   26024:	f043 0302 	orr.w	r3, r3, #2
   26028:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   2602c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   26030:	b10b      	cbz	r3, 26036 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   26032:	4620      	mov	r0, r4
   26034:	4798      	blx	r3
}
   26036:	4628      	mov	r0, r5
   26038:	b002      	add	sp, #8
   2603a:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   2603c:	f06f 0515 	mvn.w	r5, #21
   26040:	e7f9      	b.n	26036 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   26042:	f06f 0515 	mvn.w	r5, #21
   26046:	e7f6      	b.n	26036 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   26048:	f06f 0515 	mvn.w	r5, #21
	return rc;
   2604c:	e7f3      	b.n	26036 <mqtt_rx_connack+0x3e>

0002604e <mqtt_rx_puback>:
{
   2604e:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   26050:	2204      	movs	r2, #4
   26052:	f7ff fe0d 	bl	25c70 <mqtt_rx_pub_msgs>
}
   26056:	bd08      	pop	{r3, pc}

00026058 <mqtt_rx_pubcomp>:
{
   26058:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   2605a:	2207      	movs	r2, #7
   2605c:	f7ff fe08 	bl	25c70 <mqtt_rx_pub_msgs>
}
   26060:	bd08      	pop	{r3, pc}

00026062 <mqtt_rx_pubrec>:
{
   26062:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   26064:	2205      	movs	r2, #5
   26066:	f7ff fe03 	bl	25c70 <mqtt_rx_pub_msgs>
}
   2606a:	bd08      	pop	{r3, pc}

0002606c <mqtt_rx_pubrel>:
{
   2606c:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   2606e:	2206      	movs	r2, #6
   26070:	f7ff fdfe 	bl	25c70 <mqtt_rx_pub_msgs>
}
   26074:	bd08      	pop	{r3, pc}

00026076 <mqtt_rx_pingresp>:
{
   26076:	b508      	push	{r3, lr}
   26078:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   2607a:	8989      	ldrh	r1, [r1, #12]
   2607c:	6898      	ldr	r0, [r3, #8]
   2607e:	f7ff fdf0 	bl	25c62 <mqtt_unpack_pingresp>
	if (rc != 0) {
   26082:	4603      	mov	r3, r0
   26084:	b908      	cbnz	r0, 2608a <mqtt_rx_pingresp+0x14>
}
   26086:	4618      	mov	r0, r3
   26088:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2608a:	f06f 0315 	mvn.w	r3, #21
   2608e:	e7fa      	b.n	26086 <mqtt_rx_pingresp+0x10>

00026090 <mqtt_rx_suback>:
{
   26090:	b530      	push	{r4, r5, lr}
   26092:	b085      	sub	sp, #20
   26094:	4604      	mov	r4, r0
	data = rx->data;
   26096:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   26098:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2609a:	ab03      	add	r3, sp, #12
   2609c:	9301      	str	r3, [sp, #4]
   2609e:	2301      	movs	r3, #1
   260a0:	9300      	str	r3, [sp, #0]
   260a2:	f10d 0309 	add.w	r3, sp, #9
   260a6:	f10d 020a 	add.w	r2, sp, #10
   260aa:	f7ff fc31 	bl	25910 <mqtt_unpack_suback>
	if (rc != 0) {
   260ae:	b988      	cbnz	r0, 260d4 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   260b0:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   260b4:	b18d      	cbz	r5, 260da <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   260b6:	ab03      	add	r3, sp, #12
   260b8:	f89d 2009 	ldrb.w	r2, [sp, #9]
   260bc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   260c0:	4620      	mov	r0, r4
   260c2:	47a8      	blx	r5
	if (rc != 0) {
   260c4:	4603      	mov	r3, r0
   260c6:	b910      	cbnz	r0, 260ce <mqtt_rx_suback+0x3e>
}
   260c8:	4618      	mov	r0, r3
   260ca:	b005      	add	sp, #20
   260cc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   260ce:	f06f 0315 	mvn.w	r3, #21
   260d2:	e7f9      	b.n	260c8 <mqtt_rx_suback+0x38>
		return -EINVAL;
   260d4:	f06f 0315 	mvn.w	r3, #21
   260d8:	e7f6      	b.n	260c8 <mqtt_rx_suback+0x38>
		return -EINVAL;
   260da:	f06f 0315 	mvn.w	r3, #21
   260de:	e7f3      	b.n	260c8 <mqtt_rx_suback+0x38>

000260e0 <mqtt_rx_publish>:
{
   260e0:	b530      	push	{r4, r5, lr}
   260e2:	b087      	sub	sp, #28
   260e4:	4604      	mov	r4, r0
   260e6:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   260e8:	466a      	mov	r2, sp
   260ea:	8989      	ldrh	r1, [r1, #12]
   260ec:	6898      	ldr	r0, [r3, #8]
   260ee:	f7ff fd0f 	bl	25b10 <mqtt_unpack_publish>
	if (rc != 0) {
   260f2:	bb00      	cbnz	r0, 26136 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   260f4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   260f8:	2303      	movs	r3, #3
   260fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   260fe:	4669      	mov	r1, sp
   26100:	4620      	mov	r0, r4
   26102:	47a8      	blx	r5
	if (rc != 0) {
   26104:	4602      	mov	r2, r0
   26106:	b9c8      	cbnz	r0, 2613c <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   26108:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2610c:	2b01      	cmp	r3, #1
   2610e:	d00b      	beq.n	26128 <mqtt_rx_publish+0x48>
   26110:	b13b      	cbz	r3, 26122 <mqtt_rx_publish+0x42>
   26112:	2b02      	cmp	r3, #2
   26114:	d115      	bne.n	26142 <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   26116:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2611a:	4620      	mov	r0, r4
   2611c:	f7ff ff2b 	bl	25f76 <mqtt_tx_pubrec>
   26120:	4602      	mov	r2, r0
}
   26122:	4610      	mov	r0, r2
   26124:	b007      	add	sp, #28
   26126:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   26128:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2612c:	4620      	mov	r0, r4
   2612e:	f7ff ff1d 	bl	25f6c <mqtt_tx_puback>
   26132:	4602      	mov	r2, r0
		break;
   26134:	e7f5      	b.n	26122 <mqtt_rx_publish+0x42>
		return -EINVAL;
   26136:	f06f 0215 	mvn.w	r2, #21
   2613a:	e7f2      	b.n	26122 <mqtt_rx_publish+0x42>
		return -EINVAL;
   2613c:	f06f 0215 	mvn.w	r2, #21
   26140:	e7ef      	b.n	26122 <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   26142:	f06f 0215 	mvn.w	r2, #21
   26146:	e7ec      	b.n	26122 <mqtt_rx_publish+0x42>

00026148 <mqtt_parser>:
{
   26148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2614a:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   2614c:	2202      	movs	r2, #2
   2614e:	f7ff fe5f 	bl	25e10 <mqtt_linearize_packet>
	if (!data) {
   26152:	2800      	cmp	r0, #0
   26154:	d057      	beq.n	26206 <mqtt_parser+0xbe>
   26156:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   26158:	6883      	ldr	r3, [r0, #8]
   2615a:	781b      	ldrb	r3, [r3, #0]
   2615c:	091b      	lsrs	r3, r3, #4
   2615e:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   26160:	3b02      	subs	r3, #2
   26162:	2b0b      	cmp	r3, #11
   26164:	d84c      	bhi.n	26200 <mqtt_parser+0xb8>
   26166:	e8df f003 	tbb	[pc, r3]
   2616a:	3906      	.short	0x3906
   2616c:	2d3f2716 	.word	0x2d3f2716
   26170:	4b4b454b 	.word	0x4b4b454b
   26174:	334b      	.short	0x334b
		if (!ctx->connected) {
   26176:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   2617a:	f013 0f02 	tst.w	r3, #2
   2617e:	d002      	beq.n	26186 <mqtt_parser+0x3e>
			rc = -EINVAL;
   26180:	f06f 0515 	mvn.w	r5, #21
   26184:	e00c      	b.n	261a0 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   26186:	f003 0201 	and.w	r2, r3, #1
   2618a:	4601      	mov	r1, r0
   2618c:	4630      	mov	r0, r6
   2618e:	f7ff ff33 	bl	25ff8 <mqtt_rx_connack>
   26192:	4605      	mov	r5, r0
   26194:	e004      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   26196:	4601      	mov	r1, r0
   26198:	4630      	mov	r0, r6
   2619a:	f7ff ff58 	bl	2604e <mqtt_rx_puback>
   2619e:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   261a0:	b12d      	cbz	r5, 261ae <mqtt_parser+0x66>
   261a2:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   261a6:	b113      	cbz	r3, 261ae <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   261a8:	4639      	mov	r1, r7
   261aa:	4630      	mov	r0, r6
   261ac:	4798      	blx	r3
	net_pkt_frag_unref(data);
   261ae:	4620      	mov	r0, r4
   261b0:	f7f7 fa59 	bl	1d666 <net_pkt_frag_unref>
}
   261b4:	4628      	mov	r0, r5
   261b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   261b8:	4601      	mov	r1, r0
   261ba:	4630      	mov	r0, r6
   261bc:	f7ff ff51 	bl	26062 <mqtt_rx_pubrec>
   261c0:	4605      	mov	r5, r0
		break;
   261c2:	e7ed      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   261c4:	4601      	mov	r1, r0
   261c6:	4630      	mov	r0, r6
   261c8:	f7ff ff46 	bl	26058 <mqtt_rx_pubcomp>
   261cc:	4605      	mov	r5, r0
		break;
   261ce:	e7e7      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   261d0:	4601      	mov	r1, r0
   261d2:	4630      	mov	r0, r6
   261d4:	f7ff ff4f 	bl	26076 <mqtt_rx_pingresp>
   261d8:	4605      	mov	r5, r0
		break;
   261da:	e7e1      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   261dc:	4601      	mov	r1, r0
   261de:	4630      	mov	r0, r6
   261e0:	f7ff ff7e 	bl	260e0 <mqtt_rx_publish>
   261e4:	4605      	mov	r5, r0
		break;
   261e6:	e7db      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   261e8:	4601      	mov	r1, r0
   261ea:	4630      	mov	r0, r6
   261ec:	f7ff ff3e 	bl	2606c <mqtt_rx_pubrel>
   261f0:	4605      	mov	r5, r0
		break;
   261f2:	e7d5      	b.n	261a0 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   261f4:	4601      	mov	r1, r0
   261f6:	4630      	mov	r0, r6
   261f8:	f7ff ff4a 	bl	26090 <mqtt_rx_suback>
   261fc:	4605      	mov	r5, r0
		break;
   261fe:	e7cf      	b.n	261a0 <mqtt_parser+0x58>
		rc = -EINVAL;
   26200:	f06f 0515 	mvn.w	r5, #21
   26204:	e7cc      	b.n	261a0 <mqtt_parser+0x58>
		return -ENOMEM;
   26206:	f06f 050b 	mvn.w	r5, #11
   2620a:	e7d3      	b.n	261b4 <mqtt_parser+0x6c>

0002620c <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   2620c:	b530      	push	{r4, r5, lr}
   2620e:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   26210:	b348      	cbz	r0, 26266 <mqtt_connect+0x5a>
   26212:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   26214:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   26218:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   2621c:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   2621e:	9004      	str	r0, [sp, #16]
   26220:	9103      	str	r1, [sp, #12]
   26222:	9202      	str	r2, [sp, #8]
   26224:	9301      	str	r3, [sp, #4]
   26226:	2300      	movs	r3, #0
   26228:	9300      	str	r3, [sp, #0]
   2622a:	2206      	movs	r2, #6
   2622c:	2101      	movs	r1, #1
   2622e:	f000 f913 	bl	26458 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   26232:	1e05      	subs	r5, r0, #0
   26234:	db0e      	blt.n	26254 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   26236:	2300      	movs	r3, #0
   26238:	9300      	str	r3, [sp, #0]
   2623a:	4a0c      	ldr	r2, [pc, #48]	; (2626c <mqtt_connect+0x60>)
   2623c:	490c      	ldr	r1, [pc, #48]	; (26270 <mqtt_connect+0x64>)
   2623e:	4620      	mov	r0, r4
   26240:	f000 fb11 	bl	26866 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   26244:	1e05      	subs	r5, r0, #0
   26246:	db05      	blt.n	26254 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   26248:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   2624a:	4620      	mov	r0, r4
   2624c:	f000 f9ec 	bl	26628 <net_app_connect>
	if (rc < 0) {
   26250:	1e05      	subs	r5, r0, #0
   26252:	da05      	bge.n	26260 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   26254:	4620      	mov	r0, r4
   26256:	f000 fbbd 	bl	269d4 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   2625a:	4620      	mov	r0, r4
   2625c:	f000 fab8 	bl	267d0 <net_app_release>

	return rc;
}
   26260:	4628      	mov	r0, r5
   26262:	b007      	add	sp, #28
   26264:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   26266:	f06f 050d 	mvn.w	r5, #13
   2626a:	e7f9      	b.n	26260 <mqtt_connect+0x54>
   2626c:	00025d2b 	.word	0x00025d2b
   26270:	00025d29 	.word	0x00025d29

00026274 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   26274:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   26278:	f043 0301 	orr.w	r3, r3, #1
   2627c:	f36f 0341 	bfc	r3, #1, #1
   26280:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   26284:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   26288:	4b02      	ldr	r3, [pc, #8]	; (26294 <mqtt_init+0x20>)
   2628a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   2628e:	2000      	movs	r0, #0
   26290:	4770      	bx	lr
   26292:	bf00      	nop
   26294:	00026149 	.word	0x00026149

00026298 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   26298:	b178      	cbz	r0, 262ba <mqtt_close+0x22>
{
   2629a:	b510      	push	{r4, lr}
   2629c:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   2629e:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   262a2:	f012 0f01 	tst.w	r2, #1
   262a6:	d101      	bne.n	262ac <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   262a8:	2000      	movs	r0, #0
}
   262aa:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   262ac:	f000 fb92 	bl	269d4 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   262b0:	4620      	mov	r0, r4
   262b2:	f000 fa8d 	bl	267d0 <net_app_release>
	return 0;
   262b6:	2000      	movs	r0, #0
   262b8:	bd10      	pop	{r4, pc}
		return -EFAULT;
   262ba:	f06f 000d 	mvn.w	r0, #13
   262be:	4770      	bx	lr

000262c0 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   262c0:	b570      	push	{r4, r5, r6, lr}
   262c2:	460c      	mov	r4, r1
   262c4:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   262c6:	f7f4 fff5 	bl	1b2b4 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   262ca:	4b20      	ldr	r3, [pc, #128]	; (2634c <net_app_init+0x8c>)
   262cc:	fb83 2306 	smull	r2, r3, r3, r6
   262d0:	17f5      	asrs	r5, r6, #31
   262d2:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   262d6:	b380      	cbz	r0, 2633a <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   262d8:	f014 0f02 	tst.w	r4, #2
   262dc:	d114      	bne.n	26308 <net_app_init+0x48>
	int count = 0;
   262de:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   262e0:	f014 0f04 	tst.w	r4, #4
   262e4:	d000      	beq.n	262e8 <net_app_init+0x28>
		count++;
   262e6:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   262e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   262ec:	4818      	ldr	r0, [pc, #96]	; (26350 <net_app_init+0x90>)
   262ee:	f002 ff93 	bl	29218 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   262f2:	2e00      	cmp	r6, #0
   262f4:	db0a      	blt.n	2630c <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   262f6:	b166      	cbz	r6, 26312 <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   262f8:	4a16      	ldr	r2, [pc, #88]	; (26354 <net_app_init+0x94>)
   262fa:	fb82 3206 	smull	r3, r2, r2, r6
   262fe:	17f3      	asrs	r3, r6, #31
   26300:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   26304:	3301      	adds	r3, #1
   26306:	e007      	b.n	26318 <net_app_init+0x58>
		count++;
   26308:	2101      	movs	r1, #1
   2630a:	e7e9      	b.n	262e0 <net_app_init+0x20>
		count = -1;
   2630c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26310:	e002      	b.n	26318 <net_app_init+0x58>
		count = 0;
   26312:	2300      	movs	r3, #0
   26314:	e000      	b.n	26318 <net_app_init+0x58>
   26316:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   26318:	1e5c      	subs	r4, r3, #1
   2631a:	b153      	cbz	r3, 26332 <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   2631c:	4629      	mov	r1, r5
   2631e:	480e      	ldr	r0, [pc, #56]	; (26358 <net_app_init+0x98>)
   26320:	f002 ff96 	bl	29250 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   26324:	2800      	cmp	r0, #0
   26326:	d0f6      	beq.n	26316 <net_app_init+0x56>
	return sem->count;
   26328:	4b09      	ldr	r3, [pc, #36]	; (26350 <net_app_init+0x90>)
   2632a:	689a      	ldr	r2, [r3, #8]
   2632c:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   2632e:	2a00      	cmp	r2, #0
   26330:	d1f2      	bne.n	26318 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   26332:	b92c      	cbnz	r4, 26340 <net_app_init+0x80>
   26334:	b936      	cbnz	r6, 26344 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   26336:	2000      	movs	r0, #0
   26338:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2633a:	f06f 0012 	mvn.w	r0, #18
   2633e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26340:	2000      	movs	r0, #0
   26342:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   26344:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   26348:	bd70      	pop	{r4, r5, r6, pc}
   2634a:	bf00      	nop
   2634c:	66666667 	.word	0x66666667
   26350:	2000245c 	.word	0x2000245c
   26354:	10624dd3 	.word	0x10624dd3
   26358:	2000d0ac 	.word	0x2000d0ac

0002635c <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   2635c:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   2635e:	f000 fb5b 	bl	26a18 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   26362:	f247 5230 	movw	r2, #30000	; 0x7530
   26366:	2100      	movs	r1, #0
   26368:	4801      	ldr	r0, [pc, #4]	; (26370 <init_net_app+0x14>)
   2636a:	f7ff ffa9 	bl	262c0 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   2636e:	bd08      	pop	{r3, pc}
   26370:	000323c4 	.word	0x000323c4

00026374 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   26374:	f06f 0015 	mvn.w	r0, #21
   26378:	4770      	bx	lr

0002637a <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   2637a:	b510      	push	{r4, lr}
   2637c:	4604      	mov	r4, r0
   2637e:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   26380:	461a      	mov	r2, r3
   26382:	b113      	cbz	r3, 2638a <set_remote_addr+0x10>
   26384:	880b      	ldrh	r3, [r1, #0]
   26386:	2b0a      	cmp	r3, #10
   26388:	d00e      	beq.n	263a8 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   2638a:	b112      	cbz	r2, 26392 <set_remote_addr+0x18>
   2638c:	880b      	ldrh	r3, [r1, #0]
   2638e:	2b02      	cmp	r3, #2
   26390:	d012      	beq.n	263b8 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   26392:	9b02      	ldr	r3, [sp, #8]
   26394:	221c      	movs	r2, #28
   26396:	4601      	mov	r1, r0
   26398:	4620      	mov	r0, r4
   2639a:	f7ff ffeb 	bl	26374 <try_resolve>
	if (ret < 0) {
   2639e:	2800      	cmp	r0, #0
   263a0:	db0c      	blt.n	263bc <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   263a2:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   263a4:	2000      	movs	r0, #0
   263a6:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   263a8:	2218      	movs	r2, #24
   263aa:	f104 001c 	add.w	r0, r4, #28
   263ae:	f7d9 ff87 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   263b2:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   263b4:	2000      	movs	r0, #0
   263b6:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   263b8:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   263bc:	bd10      	pop	{r4, pc}

000263be <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   263be:	6803      	ldr	r3, [r0, #0]
   263c0:	b13b      	cbz	r3, 263d2 <close_net_ctx+0x14>
{
   263c2:	b510      	push	{r4, lr}
   263c4:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   263c6:	4618      	mov	r0, r3
   263c8:	f7f6 fcbe 	bl	1cd48 <net_context_put>
		ctx->ipv6.ctx = NULL;
   263cc:	2300      	movs	r3, #0
   263ce:	6023      	str	r3, [r4, #0]
   263d0:	bd10      	pop	{r4, pc}
   263d2:	4770      	bx	lr

000263d4 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   263d4:	7803      	ldrb	r3, [r0, #0]
   263d6:	2b5b      	cmp	r3, #91	; 0x5b
   263d8:	d002      	beq.n	263e0 <get_port_number+0xc>
   263da:	2300      	movs	r3, #0
   263dc:	4619      	mov	r1, r3
   263de:	e019      	b.n	26414 <get_port_number+0x40>
{
   263e0:	b570      	push	{r4, r5, r6, lr}
   263e2:	460d      	mov	r5, r1
   263e4:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   263e6:	4913      	ldr	r1, [pc, #76]	; (26434 <get_port_number+0x60>)
   263e8:	f004 fa6c 	bl	2a8c4 <strstr>
		if (!ptr) {
   263ec:	4606      	mov	r6, r0
   263ee:	b1f0      	cbz	r0, 2642e <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   263f0:	1c61      	adds	r1, r4, #1
   263f2:	1a44      	subs	r4, r0, r1
   263f4:	2c2e      	cmp	r4, #46	; 0x2e
   263f6:	bfa8      	it	ge
   263f8:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   263fa:	4622      	mov	r2, r4
   263fc:	4628      	mov	r0, r5
   263fe:	f7d9 ff5f 	bl	2c0 <memcpy>
		buf[end] = '\0';
   26402:	2100      	movs	r1, #0
   26404:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   26406:	220a      	movs	r2, #10
   26408:	1cb0      	adds	r0, r6, #2
   2640a:	f004 fbfb 	bl	2ac04 <strtol>
   2640e:	b280      	uxth	r0, r0
		return port;
   26410:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   26412:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   26414:	5cc2      	ldrb	r2, [r0, r3]
   26416:	b11a      	cbz	r2, 26420 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   26418:	2a3a      	cmp	r2, #58	; 0x3a
   2641a:	d1fa      	bne.n	26412 <get_port_number+0x3e>
			count++;
   2641c:	3101      	adds	r1, #1
   2641e:	e7f8      	b.n	26412 <get_port_number+0x3e>
	if (count == 1) {
   26420:	2901      	cmp	r1, #1
   26422:	d001      	beq.n	26428 <get_port_number+0x54>
	return 0;
   26424:	2000      	movs	r0, #0
   26426:	4770      	bx	lr
		return -EAFNOSUPPORT;
   26428:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2642c:	4770      	bx	lr
			return -EINVAL;
   2642e:	f06f 0015 	mvn.w	r0, #21
   26432:	bd70      	pop	{r4, r5, r6, pc}
   26434:	000323dc 	.word	0x000323dc

00026438 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   26438:	b538      	push	{r3, r4, r5, lr}
   2643a:	460d      	mov	r5, r1
   2643c:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   2643e:	4613      	mov	r3, r2
   26440:	2200      	movs	r2, #0
   26442:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   26444:	f7f6 ff88 	bl	1d358 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   26448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2644a:	b11b      	cbz	r3, 26454 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   2644c:	6f22      	ldr	r2, [r4, #112]	; 0x70
   2644e:	4629      	mov	r1, r5
   26450:	4620      	mov	r0, r4
   26452:	4798      	blx	r3
   26454:	bd38      	pop	{r3, r4, r5, pc}
	...

00026458 <net_app_init_client>:
{
   26458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2645c:	b09a      	sub	sp, #104	; 0x68
   2645e:	9e22      	ldr	r6, [sp, #136]	; 0x88
   26460:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   26464:	2800      	cmp	r0, #0
   26466:	f000 80c9 	beq.w	265fc <net_app_init_client+0x1a4>
   2646a:	4604      	mov	r4, r0
	if (ctx->is_init) {
   2646c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26470:	f010 0f01 	tst.w	r0, #1
   26474:	f040 80c5 	bne.w	26602 <net_app_init_client+0x1aa>
   26478:	4699      	mov	r9, r3
   2647a:	4617      	mov	r7, r2
   2647c:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   2647e:	2218      	movs	r2, #24
   26480:	2100      	movs	r1, #0
   26482:	a802      	add	r0, sp, #8
   26484:	f003 fea4 	bl	2a1d0 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   26488:	2218      	movs	r2, #24
   2648a:	2100      	movs	r1, #0
   2648c:	a808      	add	r0, sp, #32
   2648e:	f003 fe9f 	bl	2a1d0 <memset>
	if (peer_addr) {
   26492:	2e00      	cmp	r6, #0
   26494:	d03c      	beq.n	26510 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   26496:	2218      	movs	r2, #24
   26498:	4631      	mov	r1, r6
   2649a:	a808      	add	r0, sp, #32
   2649c:	f7d9 ff10 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   264a0:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   264a4:	f1b9 0f00 	cmp.w	r9, #0
   264a8:	d05e      	beq.n	26568 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   264aa:	2218      	movs	r2, #24
   264ac:	4649      	mov	r1, r9
   264ae:	a802      	add	r0, sp, #8
   264b0:	f7d9 ff06 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   264b4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   264b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   264bc:	429a      	cmp	r2, r3
   264be:	f040 80a3 	bne.w	26608 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   264c2:	2302      	movs	r3, #2
   264c4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   264c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   264ca:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   264cc:	4b54      	ldr	r3, [pc, #336]	; (26620 <net_app_init_client+0x1c8>)
   264ce:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   264d0:	4b54      	ldr	r3, [pc, #336]	; (26624 <net_app_init_client+0x1cc>)
   264d2:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   264d4:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   264d8:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   264dc:	ab02      	add	r3, sp, #8
   264de:	463a      	mov	r2, r7
   264e0:	4629      	mov	r1, r5
   264e2:	4620      	mov	r0, r4
   264e4:	f000 f949 	bl	2677a <_net_app_config_local_ctx>
	if (ret < 0) {
   264e8:	1e05      	subs	r5, r0, #0
   264ea:	db42      	blt.n	26572 <net_app_init_client+0x11a>
	if (peer_addr) {
   264ec:	2e00      	cmp	r6, #0
   264ee:	d04c      	beq.n	2658a <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   264f0:	8833      	ldrh	r3, [r6, #0]
   264f2:	2b02      	cmp	r3, #2
   264f4:	f000 808b 	beq.w	2660e <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   264f8:	2b0a      	cmp	r3, #10
   264fa:	d03e      	beq.n	2657a <net_app_init_client+0x122>
	ctx->is_init = true;
   264fc:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   26500:	f043 0301 	orr.w	r3, r3, #1
   26504:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   26508:	4628      	mov	r0, r5
   2650a:	b01a      	add	sp, #104	; 0x68
   2650c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   26510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26512:	b333      	cbz	r3, 26562 <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   26514:	222f      	movs	r2, #47	; 0x2f
   26516:	a90e      	add	r1, sp, #56	; 0x38
   26518:	4618      	mov	r0, r3
   2651a:	f7ff ff5b 	bl	263d4 <get_port_number>
		if (ret > 0) {
   2651e:	2800      	cmp	r0, #0
   26520:	dd17      	ble.n	26552 <net_app_init_client+0xfa>
			peer_port = ret;
   26522:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   26526:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   2652a:	4650      	mov	r0, sl
   2652c:	f7da f8e8 	bl	700 <strlen>
   26530:	aa08      	add	r2, sp, #32
   26532:	4601      	mov	r1, r0
   26534:	4650      	mov	r0, sl
   26536:	f7f7 ff72 	bl	1e41e <net_ipaddr_parse>
   2653a:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   2653c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26540:	2b0a      	cmp	r3, #10
   26542:	d1af      	bne.n	264a4 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   26544:	ea4f 2318 	mov.w	r3, r8, lsr #8
   26548:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   2654c:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   26550:	e7a8      	b.n	264a4 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   26552:	222e      	movs	r2, #46	; 0x2e
   26554:	9923      	ldr	r1, [sp, #140]	; 0x8c
   26556:	a80e      	add	r0, sp, #56	; 0x38
   26558:	f004 f818 	bl	2a58c <strncpy>
	const char *base_peer_addr = peer_addr_str;
   2655c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   26560:	e7e3      	b.n	2652a <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   26562:	f04f 0a00 	mov.w	sl, #0
   26566:	e79d      	b.n	264a4 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   26568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2656c:	f8ad 3008 	strh.w	r3, [sp, #8]
   26570:	e7a7      	b.n	264c2 <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   26572:	4620      	mov	r0, r4
   26574:	f7ff ff23 	bl	263be <close_net_ctx>
		goto fail;
   26578:	e7c6      	b.n	26508 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   2657a:	2218      	movs	r2, #24
   2657c:	4631      	mov	r1, r6
   2657e:	f104 001c 	add.w	r0, r4, #28
   26582:	f7d9 fe9d 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   26586:	6364      	str	r4, [r4, #52]	; 0x34
   26588:	e7b8      	b.n	264fc <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   2658a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2658c:	b363      	cbz	r3, 265e8 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   2658e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26590:	9300      	str	r3, [sp, #0]
   26592:	f11a 0300 	adds.w	r3, sl, #0
   26596:	bf18      	it	ne
   26598:	2301      	movne	r3, #1
   2659a:	aa0e      	add	r2, sp, #56	; 0x38
   2659c:	a908      	add	r1, sp, #32
   2659e:	4620      	mov	r0, r4
   265a0:	f7ff feeb 	bl	2637a <set_remote_addr>
	if (ret < 0) {
   265a4:	1e05      	subs	r5, r0, #0
   265a6:	db25      	blt.n	265f4 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   265a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   265aa:	b39b      	cbz	r3, 26614 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   265ac:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   265ae:	b3a3      	cbz	r3, 2661a <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   265b0:	8ba3      	ldrh	r3, [r4, #28]
   265b2:	2b0a      	cmp	r3, #10
   265b4:	d1a2      	bne.n	264fc <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   265b6:	4625      	mov	r5, r4
   265b8:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   265bc:	88e2      	ldrh	r2, [r4, #6]
   265be:	2100      	movs	r1, #0
   265c0:	4628      	mov	r0, r5
   265c2:	f000 f8a3 	bl	2670c <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   265c6:	6821      	ldr	r1, [r4, #0]
   265c8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   265cc:	9300      	str	r3, [sp, #0]
   265ce:	2318      	movs	r3, #24
   265d0:	462a      	mov	r2, r5
   265d2:	4620      	mov	r0, r4
   265d4:	f000 f886 	bl	266e4 <_net_app_set_net_ctx>
		if (ret < 0) {
   265d8:	1e05      	subs	r5, r0, #0
   265da:	da8f      	bge.n	264fc <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   265dc:	6820      	ldr	r0, [r4, #0]
   265de:	f7f6 fbb3 	bl	1cd48 <net_context_put>
			ctx->ipv6.ctx = NULL;
   265e2:	2300      	movs	r3, #0
   265e4:	6023      	str	r3, [r4, #0]
   265e6:	e789      	b.n	264fc <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   265e8:	4620      	mov	r0, r4
   265ea:	f7ff fee8 	bl	263be <close_net_ctx>
		ret = -EINVAL;
   265ee:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   265f2:	e789      	b.n	26508 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   265f4:	4620      	mov	r0, r4
   265f6:	f7ff fee2 	bl	263be <close_net_ctx>
		goto fail;
   265fa:	e785      	b.n	26508 <net_app_init_client+0xb0>
		return -EINVAL;
   265fc:	f06f 0515 	mvn.w	r5, #21
   26600:	e782      	b.n	26508 <net_app_init_client+0xb0>
		return -EALREADY;
   26602:	f06f 0577 	mvn.w	r5, #119	; 0x77
   26606:	e77f      	b.n	26508 <net_app_init_client+0xb0>
			return -EINVAL;
   26608:	f06f 0515 	mvn.w	r5, #21
   2660c:	e77c      	b.n	26508 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   2660e:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   26612:	e779      	b.n	26508 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   26614:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26618:	e776      	b.n	26508 <net_app_init_client+0xb0>
   2661a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   2661e:	e773      	b.n	26508 <net_app_init_client+0xb0>
   26620:	0001d317 	.word	0x0001d317
   26624:	000266bb 	.word	0x000266bb

00026628 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   26628:	b1d0      	cbz	r0, 26660 <net_app_connect+0x38>
{
   2662a:	b570      	push	{r4, r5, r6, lr}
   2662c:	b082      	sub	sp, #8
   2662e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26630:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26634:	f012 0f01 	tst.w	r2, #1
   26638:	d015      	beq.n	26666 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   2663a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   2663e:	2a02      	cmp	r2, #2
   26640:	d114      	bne.n	2666c <net_app_connect+0x44>
   26642:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26644:	2100      	movs	r1, #0
   26646:	f000 f8df 	bl	26808 <_net_app_select_net_ctx>
	if (!net_ctx) {
   2664a:	b190      	cbz	r0, 26672 <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   2664c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   2664e:	9401      	str	r4, [sp, #4]
   26650:	9500      	str	r5, [sp, #0]
   26652:	4b09      	ldr	r3, [pc, #36]	; (26678 <net_app_connect+0x50>)
   26654:	2218      	movs	r2, #24
   26656:	311c      	adds	r1, #28
   26658:	f7f6 fd4a 	bl	1d0f0 <net_context_connect>
		}
#endif
	}

	return ret;
}
   2665c:	b002      	add	sp, #8
   2665e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26660:	f06f 0015 	mvn.w	r0, #21
   26664:	4770      	bx	lr
		return -ENOENT;
   26666:	f06f 0001 	mvn.w	r0, #1
   2666a:	e7f7      	b.n	2665c <net_app_connect+0x34>
		return -EINVAL;
   2666c:	f06f 0015 	mvn.w	r0, #21
   26670:	e7f4      	b.n	2665c <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   26672:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26676:	e7f1      	b.n	2665c <net_app_connect+0x34>
   26678:	00026439 	.word	0x00026439

0002667c <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   2667c:	6340      	str	r0, [r0, #52]	; 0x34
   2667e:	4770      	bx	lr

00026680 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26680:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26684:	2802      	cmp	r0, #2
   26686:	d000      	beq.n	2668a <_app_send+0xa>
   26688:	4770      	bx	lr
{
   2668a:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   2668c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   2668e:	b114      	cbz	r4, 26696 <_app_send+0x16>
   26690:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   26692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26694:	47a0      	blx	r4
   26696:	bd10      	pop	{r4, pc}

00026698 <setup_ipv6_ctx>:
{
   26698:	b510      	push	{r4, lr}
   2669a:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   2669c:	4603      	mov	r3, r0
   2669e:	200a      	movs	r0, #10
   266a0:	f7f6 f8e6 	bl	1c870 <net_context_get>
	if (ret < 0) {
   266a4:	2800      	cmp	r0, #0
   266a6:	db05      	blt.n	266b4 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   266a8:	6823      	ldr	r3, [r4, #0]
   266aa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   266ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   266ae:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   266b0:	641a      	str	r2, [r3, #64]	; 0x40
}
   266b2:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   266b4:	2300      	movs	r3, #0
   266b6:	6023      	str	r3, [r4, #0]
		return ret;
   266b8:	bd10      	pop	{r4, pc}

000266ba <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   266ba:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   266be:	2802      	cmp	r0, #2
   266c0:	d000      	beq.n	266c4 <_net_app_received+0xa>
   266c2:	4770      	bx	lr
{
   266c4:	b538      	push	{r3, r4, r5, lr}
   266c6:	4618      	mov	r0, r3
   266c8:	4614      	mov	r4, r2
		if (!pkt) {
   266ca:	b121      	cbz	r1, 266d6 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   266cc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   266ce:	b10d      	cbz	r5, 266d4 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   266d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   266d2:	47a8      	blx	r5
   266d4:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   266d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   266d8:	2b00      	cmp	r3, #0
   266da:	d0fb      	beq.n	266d4 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   266dc:	6f02      	ldr	r2, [r0, #112]	; 0x70
   266de:	4621      	mov	r1, r4
   266e0:	4798      	blx	r3
   266e2:	bd38      	pop	{r3, r4, r5, pc}

000266e4 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   266e4:	b161      	cbz	r1, 26700 <_net_app_set_net_ctx+0x1c>
{
   266e6:	b510      	push	{r4, lr}
   266e8:	4614      	mov	r4, r2
   266ea:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   266ec:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   266f0:	f012 0f01 	tst.w	r2, #1
   266f4:	d007      	beq.n	26706 <_net_app_set_net_ctx+0x22>
   266f6:	461a      	mov	r2, r3
   266f8:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   266fa:	f7f6 fb67 	bl	1cdcc <net_context_bind>
	return ret;
   266fe:	bd10      	pop	{r4, pc}
		return -ENOENT;
   26700:	f06f 0001 	mvn.w	r0, #1
   26704:	4770      	bx	lr
   26706:	f06f 0001 	mvn.w	r0, #1
}
   2670a:	bd10      	pop	{r4, pc}

0002670c <_net_app_set_local_addr>:
{
   2670c:	b570      	push	{r4, r5, r6, lr}
   2670e:	b084      	sub	sp, #16
   26710:	4604      	mov	r4, r0
	if (myaddr) {
   26712:	b169      	cbz	r1, 26730 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   26714:	8800      	ldrh	r0, [r0, #0]
   26716:	2802      	cmp	r0, #2
   26718:	d029      	beq.n	2676e <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   2671a:	280a      	cmp	r0, #10
   2671c:	d12a      	bne.n	26774 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   2671e:	0a13      	lsrs	r3, r2, #8
   26720:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   26724:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   26726:	1d22      	adds	r2, r4, #4
   26728:	f7f7 fcc3 	bl	1e0b2 <net_addr_pton>
}
   2672c:	b004      	add	sp, #16
   2672e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   26730:	8803      	ldrh	r3, [r0, #0]
   26732:	2b0a      	cmp	r3, #10
   26734:	d003      	beq.n	2673e <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   26736:	2b02      	cmp	r3, #2
   26738:	d016      	beq.n	26768 <_net_app_set_local_addr+0x5c>
	return 0;
   2673a:	2000      	movs	r0, #0
   2673c:	e7f6      	b.n	2672c <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   2673e:	f7f9 f959 	bl	1f9f4 <net_ipv6_unspecified_address>
   26742:	4601      	mov	r1, r0
   26744:	2000      	movs	r0, #0
   26746:	f7f5 faf9 	bl	1bd3c <net_if_ipv6_select_src_addr>
   2674a:	4603      	mov	r3, r0
   2674c:	466d      	mov	r5, sp
   2674e:	6800      	ldr	r0, [r0, #0]
   26750:	6859      	ldr	r1, [r3, #4]
   26752:	689a      	ldr	r2, [r3, #8]
   26754:	68db      	ldr	r3, [r3, #12]
   26756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26758:	466d      	mov	r5, sp
   2675a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2675c:	6060      	str	r0, [r4, #4]
   2675e:	60a1      	str	r1, [r4, #8]
   26760:	60e2      	str	r2, [r4, #12]
   26762:	6123      	str	r3, [r4, #16]
	return 0;
   26764:	2000      	movs	r0, #0
   26766:	e7e1      	b.n	2672c <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   26768:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2676c:	e7de      	b.n	2672c <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   2676e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26772:	e7db      	b.n	2672c <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   26774:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26778:	e7d8      	b.n	2672c <_net_app_set_local_addr+0x20>

0002677a <_net_app_config_local_ctx>:
{
   2677a:	b538      	push	{r3, r4, r5, lr}
   2677c:	4604      	mov	r4, r0
	if (!addr) {
   2677e:	b163      	cbz	r3, 2679a <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   26780:	881b      	ldrh	r3, [r3, #0]
   26782:	2b0a      	cmp	r3, #10
   26784:	d015      	beq.n	267b2 <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   26786:	2b02      	cmp	r3, #2
   26788:	d01c      	beq.n	267c4 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   2678a:	b9f3      	cbnz	r3, 267ca <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2678c:	4620      	mov	r0, r4
   2678e:	f7ff ff83 	bl	26698 <setup_ipv6_ctx>
   26792:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   26794:	6364      	str	r4, [r4, #52]	; 0x34
}
   26796:	4628      	mov	r0, r5
   26798:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   2679a:	8883      	ldrh	r3, [r0, #4]
   2679c:	2b0a      	cmp	r3, #10
   2679e:	d000      	beq.n	267a2 <_net_app_config_local_ctx+0x28>
   267a0:	b96b      	cbnz	r3, 267be <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   267a2:	4620      	mov	r0, r4
   267a4:	f7ff ff78 	bl	26698 <setup_ipv6_ctx>
   267a8:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   267aa:	4620      	mov	r0, r4
   267ac:	f7ff ff66 	bl	2667c <select_default_ctx>
   267b0:	e7f1      	b.n	26796 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   267b2:	4620      	mov	r0, r4
   267b4:	f7ff ff70 	bl	26698 <setup_ipv6_ctx>
   267b8:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   267ba:	6364      	str	r4, [r4, #52]	; 0x34
   267bc:	e7eb      	b.n	26796 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   267be:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267c2:	e7e8      	b.n	26796 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   267c4:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267c8:	e7e5      	b.n	26796 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   267ca:	f06f 0515 	mvn.w	r5, #21
	return ret;
   267ce:	e7e2      	b.n	26796 <_net_app_config_local_ctx+0x1c>

000267d0 <net_app_release>:
	if (!ctx) {
   267d0:	b1a0      	cbz	r0, 267fc <net_app_release+0x2c>
{
   267d2:	b510      	push	{r4, lr}
   267d4:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   267d6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   267da:	f013 0f01 	tst.w	r3, #1
   267de:	d010      	beq.n	26802 <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   267e0:	6800      	ldr	r0, [r0, #0]
   267e2:	b118      	cbz	r0, 267ec <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   267e4:	f7f6 fab0 	bl	1cd48 <net_context_put>
		ctx->ipv6.ctx = NULL;
   267e8:	2300      	movs	r3, #0
   267ea:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   267ec:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   267f0:	f36f 0300 	bfc	r3, #0, #1
   267f4:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   267f8:	2000      	movs	r0, #0
   267fa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   267fc:	f06f 0015 	mvn.w	r0, #21
   26800:	4770      	bx	lr
		return -ENOENT;
   26802:	f06f 0001 	mvn.w	r0, #1
}
   26806:	bd10      	pop	{r4, pc}

00026808 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   26808:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   2680c:	2b02      	cmp	r3, #2
   2680e:	d128      	bne.n	26862 <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   26810:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   26814:	2b11      	cmp	r3, #17
   26816:	d009      	beq.n	2682c <_net_app_select_net_ctx+0x24>
		if (!dst) {
   26818:	b1c1      	cbz	r1, 2684c <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   2681a:	880b      	ldrh	r3, [r1, #0]
   2681c:	2b02      	cmp	r3, #2
   2681e:	d01c      	beq.n	2685a <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   26820:	2b0a      	cmp	r3, #10
   26822:	d016      	beq.n	26852 <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   26824:	b9db      	cbnz	r3, 2685e <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   26826:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26828:	6818      	ldr	r0, [r3, #0]
   2682a:	4770      	bx	lr
		if (!dst) {
   2682c:	b131      	cbz	r1, 2683c <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   2682e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26832:	f013 0f02 	tst.w	r3, #2
   26836:	d0f0      	beq.n	2681a <_net_app_select_net_ctx+0x12>
				return NULL;
   26838:	2000      	movs	r0, #0
   2683a:	4770      	bx	lr
			if (ctx->is_tls) {
   2683c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26840:	f013 0f02 	tst.w	r3, #2
   26844:	d107      	bne.n	26856 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   26846:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26848:	6818      	ldr	r0, [r3, #0]
   2684a:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   2684c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2684e:	6818      	ldr	r0, [r3, #0]
   26850:	4770      	bx	lr
				return ctx->ipv6.ctx;
   26852:	6800      	ldr	r0, [r0, #0]
   26854:	4770      	bx	lr
				return NULL;
   26856:	2000      	movs	r0, #0
   26858:	4770      	bx	lr
				return NULL;
   2685a:	2000      	movs	r0, #0
   2685c:	4770      	bx	lr
	return NULL;
   2685e:	2000      	movs	r0, #0
   26860:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   26862:	2000      	movs	r0, #0
}
   26864:	4770      	bx	lr

00026866 <net_app_set_cb>:
	if (!ctx) {
   26866:	b170      	cbz	r0, 26886 <net_app_set_cb+0x20>
{
   26868:	b410      	push	{r4}
   2686a:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   2686c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26870:	f010 0f01 	tst.w	r0, #1
   26874:	d00a      	beq.n	2688c <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   26876:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   26878:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   2687a:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   2687c:	9b01      	ldr	r3, [sp, #4]
   2687e:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   26880:	2000      	movs	r0, #0
}
   26882:	bc10      	pop	{r4}
   26884:	4770      	bx	lr
		return -EINVAL;
   26886:	f06f 0015 	mvn.w	r0, #21
   2688a:	4770      	bx	lr
		return -ENOENT;
   2688c:	f06f 0001 	mvn.w	r0, #1
   26890:	e7f7      	b.n	26882 <net_app_set_cb+0x1c>
	...

00026894 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   26894:	2800      	cmp	r0, #0
   26896:	d064      	beq.n	26962 <net_app_send_pkt+0xce>
{
   26898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2689c:	b08a      	sub	sp, #40	; 0x28
   2689e:	460d      	mov	r5, r1
   268a0:	4616      	mov	r6, r2
   268a2:	461f      	mov	r7, r3
   268a4:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   268a6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   268aa:	f013 0f01 	tst.w	r3, #1
   268ae:	d05b      	beq.n	26968 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   268b0:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   268b2:	b188      	cbz	r0, 268d8 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   268b4:	f8d1 e008 	ldr.w	lr, [r1, #8]
   268b8:	4673      	mov	r3, lr
	size_t bytes = 0;
   268ba:	2100      	movs	r1, #0
   268bc:	e002      	b.n	268c4 <net_app_send_pkt+0x30>
		bytes += buf->len;
   268be:	899a      	ldrh	r2, [r3, #12]
   268c0:	4411      	add	r1, r2
		buf = buf->frags;
   268c2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   268c4:	2b00      	cmp	r3, #0
   268c6:	d1fa      	bne.n	268be <net_app_send_pkt+0x2a>
   268c8:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   268ca:	2900      	cmp	r1, #0
   268cc:	dd0d      	ble.n	268ea <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   268ce:	f10e 0008 	add.w	r0, lr, #8
   268d2:	f7f4 f9f8 	bl	1acc6 <net_buf_simple_pull>
   268d6:	e008      	b.n	268ea <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   268d8:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   268da:	2200      	movs	r2, #0
   268dc:	e002      	b.n	268e4 <net_app_send_pkt+0x50>
		bytes += buf->len;
   268de:	8999      	ldrh	r1, [r3, #12]
   268e0:	440a      	add	r2, r1
		buf = buf->frags;
   268e2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   268e4:	2b00      	cmp	r3, #0
   268e6:	d1fa      	bne.n	268de <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   268e8:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   268ea:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   268ee:	2b11      	cmp	r3, #17
   268f0:	d00e      	beq.n	26910 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   268f2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   268f6:	9402      	str	r4, [sp, #8]
   268f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   268fa:	9301      	str	r3, [sp, #4]
   268fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   268fe:	9300      	str	r3, [sp, #0]
   26900:	4b21      	ldr	r3, [pc, #132]	; (26988 <net_app_send_pkt+0xf4>)
   26902:	463a      	mov	r2, r7
   26904:	4631      	mov	r1, r6
   26906:	4628      	mov	r0, r5
   26908:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   2690a:	b00a      	add	sp, #40	; 0x28
   2690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   26910:	b1de      	cbz	r6, 2694a <net_app_send_pkt+0xb6>
	return pkt->family;
   26912:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26916:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   2691a:	2b02      	cmp	r3, #2
   2691c:	d02d      	beq.n	2697a <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   2691e:	2b0a      	cmp	r3, #10
   26920:	d12e      	bne.n	26980 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   26922:	af04      	add	r7, sp, #16
   26924:	6830      	ldr	r0, [r6, #0]
   26926:	6871      	ldr	r1, [r6, #4]
   26928:	68b2      	ldr	r2, [r6, #8]
   2692a:	68f3      	ldr	r3, [r6, #12]
   2692c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2692e:	6930      	ldr	r0, [r6, #16]
   26930:	6971      	ldr	r1, [r6, #20]
   26932:	c703      	stmia	r7!, {r0, r1}
   26934:	af04      	add	r7, sp, #16
   26936:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26938:	61e0      	str	r0, [r4, #28]
   2693a:	6221      	str	r1, [r4, #32]
   2693c:	6262      	str	r2, [r4, #36]	; 0x24
   2693e:	62a3      	str	r3, [r4, #40]	; 0x28
   26940:	cf03      	ldmia	r7!, {r0, r1}
   26942:	62e0      	str	r0, [r4, #44]	; 0x2c
   26944:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   26946:	2718      	movs	r7, #24
   26948:	e7d3      	b.n	268f2 <net_app_send_pkt+0x5e>
   2694a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2694e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26952:	2b02      	cmp	r3, #2
   26954:	d00b      	beq.n	2696e <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   26956:	2b0a      	cmp	r3, #10
   26958:	d10c      	bne.n	26974 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   2695a:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   2695e:	2718      	movs	r7, #24
   26960:	e7c7      	b.n	268f2 <net_app_send_pkt+0x5e>
		return -EINVAL;
   26962:	f06f 0015 	mvn.w	r0, #21
   26966:	4770      	bx	lr
		return -ENOENT;
   26968:	f06f 0001 	mvn.w	r0, #1
   2696c:	e7cd      	b.n	2690a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   2696e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26972:	e7ca      	b.n	2690a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26974:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26978:	e7c7      	b.n	2690a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   2697a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2697e:	e7c4      	b.n	2690a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26980:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26984:	e7c1      	b.n	2690a <net_app_send_pkt+0x76>
   26986:	bf00      	nop
   26988:	00026681 	.word	0x00026681

0002698c <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   2698c:	b510      	push	{r4, lr}
   2698e:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26990:	2300      	movs	r3, #0
   26992:	9300      	str	r3, [sp, #0]
   26994:	9301      	str	r3, [sp, #4]
   26996:	9302      	str	r3, [sp, #8]
   26998:	9303      	str	r3, [sp, #12]
   2699a:	9304      	str	r3, [sp, #16]
   2699c:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   2699e:	b198      	cbz	r0, 269c8 <net_app_get_net_pkt+0x3c>
   269a0:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   269a2:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   269a6:	f010 0f01 	tst.w	r0, #1
   269aa:	d00f      	beq.n	269cc <net_app_get_net_pkt+0x40>
   269ac:	4618      	mov	r0, r3
   269ae:	4614      	mov	r4, r2
   269b0:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   269b2:	a906      	add	r1, sp, #24
   269b4:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   269b8:	f7ff ff26 	bl	26808 <_net_app_select_net_ctx>
	if (!net_ctx) {
   269bc:	b140      	cbz	r0, 269d0 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   269be:	4621      	mov	r1, r4
   269c0:	f7f6 fe24 	bl	1d60c <net_pkt_get_tx>
}
   269c4:	b006      	add	sp, #24
   269c6:	bd10      	pop	{r4, pc}
		return NULL;
   269c8:	2000      	movs	r0, #0
   269ca:	e7fb      	b.n	269c4 <net_app_get_net_pkt+0x38>
		return NULL;
   269cc:	2000      	movs	r0, #0
   269ce:	e7f9      	b.n	269c4 <net_app_get_net_pkt+0x38>
		return NULL;
   269d0:	2000      	movs	r0, #0
   269d2:	e7f7      	b.n	269c4 <net_app_get_net_pkt+0x38>

000269d4 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   269d4:	b1c0      	cbz	r0, 26a08 <net_app_close+0x34>
{
   269d6:	b538      	push	{r3, r4, r5, lr}
   269d8:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   269da:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   269de:	f013 0f01 	tst.w	r3, #1
   269e2:	d014      	beq.n	26a0e <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   269e4:	2100      	movs	r1, #0
   269e6:	f7ff ff0f 	bl	26808 <_net_app_select_net_ctx>
   269ea:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   269ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   269ee:	b11b      	cbz	r3, 269f8 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   269f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
   269f2:	2100      	movs	r1, #0
   269f4:	4620      	mov	r0, r4
   269f6:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   269f8:	b165      	cbz	r5, 26a14 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   269fa:	2400      	movs	r4, #0
   269fc:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   269fe:	4628      	mov	r0, r5
   26a00:	f7f6 f9a2 	bl	1cd48 <net_context_put>
	}

	return 0;
   26a04:	4620      	mov	r0, r4
   26a06:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26a08:	f06f 0015 	mvn.w	r0, #21
   26a0c:	4770      	bx	lr
		return -ENOENT;
   26a0e:	f06f 0001 	mvn.w	r0, #1
   26a12:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   26a14:	2000      	movs	r0, #0
}
   26a16:	bd38      	pop	{r3, r4, r5, pc}

00026a18 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   26a18:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   26a1a:	2000      	movs	r0, #0
   26a1c:	f7df fdea 	bl	65f4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   26a20:	1e03      	subs	r3, r0, #0
   26a22:	db14      	blt.n	26a4e <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   26a24:	4810      	ldr	r0, [pc, #64]	; (26a68 <_net_app_bt_setup+0x50>)
   26a26:	f001 f939 	bl	27c9c <device_get_binding>
	if (!dev) {
   26a2a:	b1b8      	cbz	r0, 26a5c <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   26a2c:	f7f4 fc30 	bl	1b290 <net_if_lookup_by_dev>
	if (!iface) {
   26a30:	4604      	mov	r4, r0
   26a32:	b1b0      	cbz	r0, 26a62 <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   26a34:	480d      	ldr	r0, [pc, #52]	; (26a6c <_net_app_bt_setup+0x54>)
   26a36:	f7e3 fcf7 	bl	a428 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   26a3a:	2303      	movs	r3, #3
   26a3c:	4a0c      	ldr	r2, [pc, #48]	; (26a70 <_net_app_bt_setup+0x58>)
   26a3e:	4621      	mov	r1, r4
   26a40:	480c      	ldr	r0, [pc, #48]	; (26a74 <_net_app_bt_setup+0x5c>)
   26a42:	f7f7 fe6b 	bl	1e71c <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   26a46:	4603      	mov	r3, r0
   26a48:	b928      	cbnz	r0, 26a56 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   26a4a:	4618      	mov	r0, r3
   26a4c:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   26a4e:	f113 0f78 	cmn.w	r3, #120	; 0x78
   26a52:	d1fa      	bne.n	26a4a <_net_app_bt_setup+0x32>
   26a54:	e7e6      	b.n	26a24 <_net_app_bt_setup+0xc>
		return -EINVAL;
   26a56:	f06f 0315 	mvn.w	r3, #21
   26a5a:	e7f6      	b.n	26a4a <_net_app_bt_setup+0x32>
		return -ENODEV;
   26a5c:	f06f 0312 	mvn.w	r3, #18
   26a60:	e7f3      	b.n	26a4a <_net_app_bt_setup+0x32>
		return -EINVAL;
   26a62:	f06f 0315 	mvn.w	r3, #21
   26a66:	e7f0      	b.n	26a4a <_net_app_bt_setup+0x32>
   26a68:	000310b8 	.word	0x000310b8
   26a6c:	2000c51c 	.word	0x2000c51c
   26a70:	000314e0 	.word	0x000314e0
   26a74:	61550001 	.word	0x61550001

00026a78 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26a78:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26a7a:	4802      	ldr	r0, [pc, #8]	; (26a84 <shell_run+0xc>)
   26a7c:	f000 fbbe 	bl	271fc <shell_init>
	return 0;
}
   26a80:	2000      	movs	r0, #0
   26a82:	bd08      	pop	{r3, pc}
   26a84:	000323e0 	.word	0x000323e0

00026a88 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26a88:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26a8a:	4b0f      	ldr	r3, [pc, #60]	; (26ac8 <get_prompt+0x40>)
   26a8c:	681b      	ldr	r3, [r3, #0]
   26a8e:	b123      	cbz	r3, 26a9a <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26a90:	4798      	blx	r3
		if (str) {
   26a92:	4603      	mov	r3, r0
   26a94:	b108      	cbz	r0, 26a9a <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26a96:	4618      	mov	r0, r3
   26a98:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26a9a:	4b0c      	ldr	r3, [pc, #48]	; (26acc <get_prompt+0x44>)
   26a9c:	681b      	ldr	r3, [r3, #0]
   26a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26aa2:	d00c      	beq.n	26abe <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26aa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26aa8:	009a      	lsls	r2, r3, #2
   26aaa:	4b09      	ldr	r3, [pc, #36]	; (26ad0 <get_prompt+0x48>)
   26aac:	4413      	add	r3, r2
   26aae:	689b      	ldr	r3, [r3, #8]
   26ab0:	b143      	cbz	r3, 26ac4 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26ab2:	4798      	blx	r3
			if (ret) {
   26ab4:	4603      	mov	r3, r0
   26ab6:	2800      	cmp	r0, #0
   26ab8:	d1ed      	bne.n	26a96 <get_prompt+0xe>
		return default_module_prompt;
   26aba:	4b06      	ldr	r3, [pc, #24]	; (26ad4 <get_prompt+0x4c>)
   26abc:	e7eb      	b.n	26a96 <get_prompt+0xe>
	return prompt;
   26abe:	4b06      	ldr	r3, [pc, #24]	; (26ad8 <get_prompt+0x50>)
   26ac0:	681b      	ldr	r3, [r3, #0]
   26ac2:	e7e8      	b.n	26a96 <get_prompt+0xe>
		return default_module_prompt;
   26ac4:	4b03      	ldr	r3, [pc, #12]	; (26ad4 <get_prompt+0x4c>)
   26ac6:	e7e6      	b.n	26a96 <get_prompt+0xe>
   26ac8:	20002478 	.word	0x20002478
   26acc:	2000c528 	.word	0x2000c528
   26ad0:	2000cff0 	.word	0x2000cff0
   26ad4:	20002628 	.word	0x20002628
   26ad8:	20002640 	.word	0x20002640

00026adc <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26adc:	2801      	cmp	r0, #1
   26ade:	d001      	beq.n	26ae4 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26ae0:	2000      	movs	r0, #0
   26ae2:	4770      	bx	lr
		default_module = -1;
   26ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26ae8:	4b01      	ldr	r3, [pc, #4]	; (26af0 <exit_module+0x14>)
   26aea:	601a      	str	r2, [r3, #0]
   26aec:	e7f8      	b.n	26ae0 <exit_module+0x4>
   26aee:	bf00      	nop
   26af0:	2000c528 	.word	0x2000c528

00026af4 <print_module_commands>:
{
   26af4:	b538      	push	{r3, r4, r5, lr}
   26af6:	4605      	mov	r5, r0
	printk("help\n");
   26af8:	480a      	ldr	r0, [pc, #40]	; (26b24 <print_module_commands+0x30>)
   26afa:	f7dc fa23 	bl	2f44 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26afe:	2400      	movs	r4, #0
   26b00:	e003      	b.n	26b0a <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26b02:	4809      	ldr	r0, [pc, #36]	; (26b28 <print_module_commands+0x34>)
   26b04:	f7dc fa1e 	bl	2f44 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26b08:	3401      	adds	r4, #1
   26b0a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26b0e:	009a      	lsls	r2, r3, #2
   26b10:	4b06      	ldr	r3, [pc, #24]	; (26b2c <print_module_commands+0x38>)
   26b12:	4413      	add	r3, r2
   26b14:	6859      	ldr	r1, [r3, #4]
   26b16:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26b1a:	0093      	lsls	r3, r2, #2
   26b1c:	58c9      	ldr	r1, [r1, r3]
   26b1e:	2900      	cmp	r1, #0
   26b20:	d1ef      	bne.n	26b02 <print_module_commands+0xe>
}
   26b22:	bd38      	pop	{r3, r4, r5, pc}
   26b24:	0003249c 	.word	0x0003249c
   26b28:	000316b8 	.word	0x000316b8
   26b2c:	2000cff0 	.word	0x2000cff0

00026b30 <line2argv>:
{
   26b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b32:	4604      	mov	r4, r0
   26b34:	460e      	mov	r6, r1
   26b36:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26b38:	f7d9 fde2 	bl	700 <strlen>
   26b3c:	b918      	cbnz	r0, 26b46 <line2argv+0x16>
   26b3e:	4605      	mov	r5, r0
}
   26b40:	4628      	mov	r0, r5
   26b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   26b44:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26b46:	7823      	ldrb	r3, [r4, #0]
   26b48:	2b20      	cmp	r3, #32
   26b4a:	d0fb      	beq.n	26b44 <line2argv+0x14>
	if (!*str) {
   26b4c:	b30b      	cbz	r3, 26b92 <line2argv+0x62>
	argv[argc++] = str;
   26b4e:	6034      	str	r4, [r6, #0]
   26b50:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   26b52:	e00a      	b.n	26b6a <line2argv+0x3a>
			str++;
   26b54:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   26b56:	7823      	ldrb	r3, [r4, #0]
   26b58:	2b20      	cmp	r3, #32
   26b5a:	d0fb      	beq.n	26b54 <line2argv+0x24>
		if (!*str) {
   26b5c:	b1ab      	cbz	r3, 26b8a <line2argv+0x5a>
		argv[argc++] = str;
   26b5e:	1c6b      	adds	r3, r5, #1
   26b60:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   26b64:	42bb      	cmp	r3, r7
   26b66:	d00a      	beq.n	26b7e <line2argv+0x4e>
		argv[argc++] = str;
   26b68:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26b6a:	2120      	movs	r1, #32
   26b6c:	4620      	mov	r0, r4
   26b6e:	f003 fbe9 	bl	2a344 <strchr>
   26b72:	4603      	mov	r3, r0
   26b74:	b148      	cbz	r0, 26b8a <line2argv+0x5a>
		*str++ = '\0';
   26b76:	1c5c      	adds	r4, r3, #1
   26b78:	2200      	movs	r2, #0
   26b7a:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26b7c:	e7eb      	b.n	26b56 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26b7e:	1e79      	subs	r1, r7, #1
   26b80:	4805      	ldr	r0, [pc, #20]	; (26b98 <line2argv+0x68>)
   26b82:	f7dc f9df 	bl	2f44 <printk>
			return 0;
   26b86:	2500      	movs	r5, #0
   26b88:	e7da      	b.n	26b40 <line2argv+0x10>
	argv[argc] = NULL;
   26b8a:	2300      	movs	r3, #0
   26b8c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26b90:	e7d6      	b.n	26b40 <line2argv+0x10>
		return 0;
   26b92:	2500      	movs	r5, #0
   26b94:	e7d4      	b.n	26b40 <line2argv+0x10>
   26b96:	bf00      	nop
   26b98:	0003247c 	.word	0x0003247c

00026b9c <get_destination_module>:
{
   26b9c:	b538      	push	{r3, r4, r5, lr}
   26b9e:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26ba0:	2400      	movs	r4, #0
   26ba2:	4a0c      	ldr	r2, [pc, #48]	; (26bd4 <get_destination_module+0x38>)
   26ba4:	4b0c      	ldr	r3, [pc, #48]	; (26bd8 <get_destination_module+0x3c>)
   26ba6:	1a9b      	subs	r3, r3, r2
   26ba8:	109b      	asrs	r3, r3, #2
   26baa:	4a0c      	ldr	r2, [pc, #48]	; (26bdc <get_destination_module+0x40>)
   26bac:	fb02 f303 	mul.w	r3, r2, r3
   26bb0:	429c      	cmp	r4, r3
   26bb2:	da0b      	bge.n	26bcc <get_destination_module+0x30>
		if (!strncmp(module_str,
   26bb4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26bb8:	0093      	lsls	r3, r2, #2
   26bba:	2214      	movs	r2, #20
   26bbc:	4905      	ldr	r1, [pc, #20]	; (26bd4 <get_destination_module+0x38>)
   26bbe:	58c9      	ldr	r1, [r1, r3]
   26bc0:	4628      	mov	r0, r5
   26bc2:	f003 fc91 	bl	2a4e8 <strncmp>
   26bc6:	b118      	cbz	r0, 26bd0 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26bc8:	3401      	adds	r4, #1
   26bca:	e7ea      	b.n	26ba2 <get_destination_module+0x6>
	return -1;
   26bcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26bd0:	4620      	mov	r0, r4
   26bd2:	bd38      	pop	{r3, r4, r5, pc}
   26bd4:	2000cff0 	.word	0x2000cff0
   26bd8:	2000cffc 	.word	0x2000cffc
   26bdc:	aaaaaaab 	.word	0xaaaaaaab

00026be0 <set_default_module>:
{
   26be0:	b538      	push	{r3, r4, r5, lr}
   26be2:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26be4:	f7d9 fd8c 	bl	700 <strlen>
   26be8:	2814      	cmp	r0, #20
   26bea:	d813      	bhi.n	26c14 <set_default_module+0x34>
	module = get_destination_module(name);
   26bec:	4620      	mov	r0, r4
   26bee:	f7ff ffd5 	bl	26b9c <get_destination_module>
	if (module == -1) {
   26bf2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26bf6:	d014      	beq.n	26c22 <set_default_module+0x42>
	default_module = module;
   26bf8:	4b0d      	ldr	r3, [pc, #52]	; (26c30 <set_default_module+0x50>)
   26bfa:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26bfc:	4d0d      	ldr	r5, [pc, #52]	; (26c34 <set_default_module+0x54>)
   26bfe:	2214      	movs	r2, #20
   26c00:	4621      	mov	r1, r4
   26c02:	4628      	mov	r0, r5
   26c04:	f003 fcc2 	bl	2a58c <strncpy>
	strcat(default_module_prompt, "> ");
   26c08:	490b      	ldr	r1, [pc, #44]	; (26c38 <set_default_module+0x58>)
   26c0a:	4628      	mov	r0, r5
   26c0c:	f003 fb7a 	bl	2a304 <strcat>
	return 0;
   26c10:	2000      	movs	r0, #0
}
   26c12:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26c14:	4621      	mov	r1, r4
   26c16:	4809      	ldr	r0, [pc, #36]	; (26c3c <set_default_module+0x5c>)
   26c18:	f7dc f994 	bl	2f44 <printk>
		return -EINVAL;
   26c1c:	f06f 0015 	mvn.w	r0, #21
   26c20:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26c22:	4621      	mov	r1, r4
   26c24:	4806      	ldr	r0, [pc, #24]	; (26c40 <set_default_module+0x60>)
   26c26:	f7dc f98d 	bl	2f44 <printk>
		return -EINVAL;
   26c2a:	f06f 0015 	mvn.w	r0, #21
   26c2e:	bd38      	pop	{r3, r4, r5, pc}
   26c30:	2000c528 	.word	0x2000c528
   26c34:	20002628 	.word	0x20002628
   26c38:	00032504 	.word	0x00032504
   26c3c:	000324a4 	.word	0x000324a4
   26c40:	000324d8 	.word	0x000324d8

00026c44 <select_module>:
{
   26c44:	b508      	push	{r3, lr}
	if (argc == 1) {
   26c46:	2801      	cmp	r0, #1
   26c48:	d003      	beq.n	26c52 <select_module+0xe>
	return set_default_module(argv[1]);
   26c4a:	6848      	ldr	r0, [r1, #4]
   26c4c:	f7ff ffc8 	bl	26be0 <set_default_module>
}
   26c50:	bd08      	pop	{r3, pc}
		default_module = -1;
   26c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c56:	4b02      	ldr	r3, [pc, #8]	; (26c60 <select_module+0x1c>)
   26c58:	601a      	str	r2, [r3, #0]
		return 0;
   26c5a:	2000      	movs	r0, #0
   26c5c:	bd08      	pop	{r3, pc}
   26c5e:	bf00      	nop
   26c60:	2000c528 	.word	0x2000c528

00026c64 <get_command_and_module>:
{
   26c64:	b538      	push	{r3, r4, r5, lr}
   26c66:	4604      	mov	r4, r0
	*module = -1;
   26c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c6c:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26c6e:	6800      	ldr	r0, [r0, #0]
   26c70:	b140      	cbz	r0, 26c84 <get_command_and_module+0x20>
   26c72:	460d      	mov	r5, r1
	if (default_module == -1) {
   26c74:	4b12      	ldr	r3, [pc, #72]	; (26cc0 <get_command_and_module+0x5c>)
   26c76:	681b      	ldr	r3, [r3, #0]
   26c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26c7c:	d007      	beq.n	26c8e <get_command_and_module+0x2a>
	*module = default_module;
   26c7e:	600b      	str	r3, [r1, #0]
	return argv[0];
   26c80:	6820      	ldr	r0, [r4, #0]
}
   26c82:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   26c84:	480f      	ldr	r0, [pc, #60]	; (26cc4 <get_command_and_module+0x60>)
   26c86:	f7dc f95d 	bl	2f44 <printk>
		return NULL;
   26c8a:	2000      	movs	r0, #0
   26c8c:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26c8e:	6863      	ldr	r3, [r4, #4]
   26c90:	b14b      	cbz	r3, 26ca6 <get_command_and_module+0x42>
   26c92:	781b      	ldrb	r3, [r3, #0]
   26c94:	b13b      	cbz	r3, 26ca6 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26c96:	f7ff ff81 	bl	26b9c <get_destination_module>
   26c9a:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26c9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26ca0:	d007      	beq.n	26cb2 <get_command_and_module+0x4e>
		return argv[1];
   26ca2:	6860      	ldr	r0, [r4, #4]
   26ca4:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26ca6:	4601      	mov	r1, r0
   26ca8:	4807      	ldr	r0, [pc, #28]	; (26cc8 <get_command_and_module+0x64>)
   26caa:	f7dc f94b 	bl	2f44 <printk>
			return NULL;
   26cae:	2000      	movs	r0, #0
   26cb0:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26cb2:	6821      	ldr	r1, [r4, #0]
   26cb4:	4805      	ldr	r0, [pc, #20]	; (26ccc <get_command_and_module+0x68>)
   26cb6:	f7dc f945 	bl	2f44 <printk>
			return NULL;
   26cba:	2000      	movs	r0, #0
   26cbc:	bd38      	pop	{r3, r4, r5, pc}
   26cbe:	bf00      	nop
   26cc0:	2000c528 	.word	0x2000c528
   26cc4:	00032434 	.word	0x00032434
   26cc8:	0003244c 	.word	0x0003244c
   26ccc:	00032468 	.word	0x00032468

00026cd0 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26cd2:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26cd4:	b15c      	cbz	r4, 26cee <get_cb+0x1e>
   26cd6:	4606      	mov	r6, r0
   26cd8:	460d      	mov	r5, r1
   26cda:	4617      	mov	r7, r2
   26cdc:	7823      	ldrb	r3, [r4, #0]
   26cde:	b133      	cbz	r3, 26cee <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26ce0:	4929      	ldr	r1, [pc, #164]	; (26d88 <get_cb+0xb8>)
   26ce2:	4620      	mov	r0, r4
   26ce4:	f7d9 fb90 	bl	408 <strcmp>
   26ce8:	b930      	cbnz	r0, 26cf8 <get_cb+0x28>
		return show_help;
   26cea:	4828      	ldr	r0, [pc, #160]	; (26d8c <get_cb+0xbc>)
   26cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26cee:	4828      	ldr	r0, [pc, #160]	; (26d90 <get_cb+0xc0>)
   26cf0:	f7dc f928 	bl	2f44 <printk>
		return NULL;
   26cf4:	2000      	movs	r0, #0
   26cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26cf8:	4926      	ldr	r1, [pc, #152]	; (26d94 <get_cb+0xc4>)
   26cfa:	4620      	mov	r0, r4
   26cfc:	f7d9 fb84 	bl	408 <strcmp>
   26d00:	b908      	cbnz	r0, 26d06 <get_cb+0x36>
		return select_module;
   26d02:	4825      	ldr	r0, [pc, #148]	; (26d98 <get_cb+0xc8>)
   26d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26d06:	4925      	ldr	r1, [pc, #148]	; (26d9c <get_cb+0xcc>)
   26d08:	4620      	mov	r0, r4
   26d0a:	f7d9 fb7d 	bl	408 <strcmp>
   26d0e:	2800      	cmp	r0, #0
   26d10:	d034      	beq.n	26d7c <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26d12:	6833      	ldr	r3, [r6, #0]
   26d14:	2b01      	cmp	r3, #1
   26d16:	d01c      	beq.n	26d52 <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26d18:	4639      	mov	r1, r7
   26d1a:	4628      	mov	r0, r5
   26d1c:	f7ff ffa2 	bl	26c64 <get_command_and_module>
   26d20:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26d22:	683d      	ldr	r5, [r7, #0]
   26d24:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26d28:	d02a      	beq.n	26d80 <get_cb+0xb0>
   26d2a:	b358      	cbz	r0, 26d84 <get_cb+0xb4>
   26d2c:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26d2e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26d32:	009a      	lsls	r2, r3, #2
   26d34:	4b1a      	ldr	r3, [pc, #104]	; (26da0 <get_cb+0xd0>)
   26d36:	4413      	add	r3, r2
   26d38:	6859      	ldr	r1, [r3, #4]
   26d3a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26d3e:	0093      	lsls	r3, r2, #2
   26d40:	461f      	mov	r7, r3
   26d42:	58c9      	ldr	r1, [r1, r3]
   26d44:	b1c1      	cbz	r1, 26d78 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26d46:	4630      	mov	r0, r6
   26d48:	f7d9 fb5e 	bl	408 <strcmp>
   26d4c:	b158      	cbz	r0, 26d66 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26d4e:	3401      	adds	r4, #1
   26d50:	e7ed      	b.n	26d2e <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   26d52:	4b14      	ldr	r3, [pc, #80]	; (26da4 <get_cb+0xd4>)
   26d54:	681b      	ldr	r3, [r3, #0]
   26d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26d5a:	d1dd      	bne.n	26d18 <get_cb+0x48>
		printk("Missing parameter\n");
   26d5c:	4812      	ldr	r0, [pc, #72]	; (26da8 <get_cb+0xd8>)
   26d5e:	f7dc f8f1 	bl	2f44 <printk>
		return NULL;
   26d62:	2000      	movs	r0, #0
   26d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   26d66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26d6a:	00aa      	lsls	r2, r5, #2
   26d6c:	4b0c      	ldr	r3, [pc, #48]	; (26da0 <get_cb+0xd0>)
   26d6e:	4413      	add	r3, r2
   26d70:	685b      	ldr	r3, [r3, #4]
   26d72:	441f      	add	r7, r3
   26d74:	6878      	ldr	r0, [r7, #4]
   26d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26d78:	2000      	movs	r0, #0
   26d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26d7c:	480b      	ldr	r0, [pc, #44]	; (26dac <get_cb+0xdc>)
   26d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26d80:	2000      	movs	r0, #0
   26d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26d84:	2000      	movs	r0, #0
}
   26d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26d88:	00032408 	.word	0x00032408
   26d8c:	00026e51 	.word	0x00026e51
   26d90:	000323f4 	.word	0x000323f4
   26d94:	00032410 	.word	0x00032410
   26d98:	00026c45 	.word	0x00026c45
   26d9c:	00032418 	.word	0x00032418
   26da0:	2000cff0 	.word	0x2000cff0
   26da4:	2000c528 	.word	0x2000c528
   26da8:	00032420 	.word	0x00032420
   26dac:	00026add 	.word	0x00026add

00026db0 <show_cmd_help>:
{
   26db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26db4:	b083      	sub	sp, #12
   26db6:	4607      	mov	r7, r0
	int module = -1;
   26db8:	a902      	add	r1, sp, #8
   26dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26dbe:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26dc2:	f7ff ff4f 	bl	26c64 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26dc6:	9d01      	ldr	r5, [sp, #4]
   26dc8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26dcc:	d031      	beq.n	26e32 <show_cmd_help+0x82>
   26dce:	4606      	mov	r6, r0
   26dd0:	b390      	cbz	r0, 26e38 <show_cmd_help+0x88>
   26dd2:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26dd4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26dd8:	009a      	lsls	r2, r3, #2
   26dda:	4b19      	ldr	r3, [pc, #100]	; (26e40 <show_cmd_help+0x90>)
   26ddc:	4413      	add	r3, r2
   26dde:	6859      	ldr	r1, [r3, #4]
   26de0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26de4:	0093      	lsls	r3, r2, #2
   26de6:	4698      	mov	r8, r3
   26de8:	58c9      	ldr	r1, [r1, r3]
   26dea:	b1c1      	cbz	r1, 26e1e <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26dec:	4630      	mov	r0, r6
   26dee:	f7d9 fb0b 	bl	408 <strcmp>
   26df2:	4681      	mov	r9, r0
   26df4:	b108      	cbz	r0, 26dfa <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26df6:	3401      	adds	r4, #1
   26df8:	e7ec      	b.n	26dd4 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26dfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26dfe:	00aa      	lsls	r2, r5, #2
   26e00:	4b0f      	ldr	r3, [pc, #60]	; (26e40 <show_cmd_help+0x90>)
   26e02:	4413      	add	r3, r2
   26e04:	685b      	ldr	r3, [r3, #4]
   26e06:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26e0a:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26e0e:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26e10:	b11a      	cbz	r2, 26e1a <show_cmd_help+0x6a>
   26e12:	480c      	ldr	r0, [pc, #48]	; (26e44 <show_cmd_help+0x94>)
   26e14:	f7dc f896 	bl	2f44 <printk>
			return 0;
   26e18:	e007      	b.n	26e2a <show_cmd_help+0x7a>
			printk("%s %s\n",
   26e1a:	4a0b      	ldr	r2, [pc, #44]	; (26e48 <show_cmd_help+0x98>)
   26e1c:	e7f9      	b.n	26e12 <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26e1e:	6839      	ldr	r1, [r7, #0]
   26e20:	480a      	ldr	r0, [pc, #40]	; (26e4c <show_cmd_help+0x9c>)
   26e22:	f7dc f88f 	bl	2f44 <printk>
	return -EINVAL;
   26e26:	f06f 0915 	mvn.w	r9, #21
}
   26e2a:	4648      	mov	r0, r9
   26e2c:	b003      	add	sp, #12
   26e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   26e32:	f04f 0900 	mov.w	r9, #0
   26e36:	e7f8      	b.n	26e2a <show_cmd_help+0x7a>
   26e38:	f04f 0900 	mov.w	r9, #0
   26e3c:	e7f5      	b.n	26e2a <show_cmd_help+0x7a>
   26e3e:	bf00      	nop
   26e40:	2000cff0 	.word	0x2000cff0
   26e44:	00032534 	.word	0x00032534
   26e48:	0002eae8 	.word	0x0002eae8
   26e4c:	0003244c 	.word	0x0003244c

00026e50 <show_help>:
{
   26e50:	b510      	push	{r4, lr}
   26e52:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   26e54:	2802      	cmp	r0, #2
   26e56:	dc12      	bgt.n	26e7e <show_help+0x2e>
   26e58:	4b23      	ldr	r3, [pc, #140]	; (26ee8 <show_help+0x98>)
   26e5a:	681b      	ldr	r3, [r3, #0]
   26e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e60:	d001      	beq.n	26e66 <show_help+0x16>
   26e62:	2802      	cmp	r0, #2
   26e64:	d00b      	beq.n	26e7e <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   26e66:	2802      	cmp	r0, #2
   26e68:	d00d      	beq.n	26e86 <show_help+0x36>
   26e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e6e:	d001      	beq.n	26e74 <show_help+0x24>
   26e70:	2801      	cmp	r0, #1
   26e72:	d008      	beq.n	26e86 <show_help+0x36>
		printk("Available modules:\n");
   26e74:	481d      	ldr	r0, [pc, #116]	; (26eec <show_help+0x9c>)
   26e76:	f7dc f865 	bl	2f44 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26e7a:	2400      	movs	r4, #0
   26e7c:	e025      	b.n	26eca <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26e7e:	1d20      	adds	r0, r4, #4
   26e80:	f7ff ff96 	bl	26db0 <show_cmd_help>
   26e84:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   26e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e8a:	d007      	beq.n	26e9c <show_help+0x4c>
		print_module_commands(module);
   26e8c:	4618      	mov	r0, r3
   26e8e:	f7ff fe31 	bl	26af4 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   26e92:	4817      	ldr	r0, [pc, #92]	; (26ef0 <show_help+0xa0>)
   26e94:	f7dc f856 	bl	2f44 <printk>
	return 0;
   26e98:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   26e9a:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   26e9c:	6860      	ldr	r0, [r4, #4]
   26e9e:	f7ff fe7d 	bl	26b9c <get_destination_module>
   26ea2:	4603      	mov	r3, r0
			if (module == -1) {
   26ea4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26ea8:	d1f0      	bne.n	26e8c <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   26eaa:	6861      	ldr	r1, [r4, #4]
   26eac:	4811      	ldr	r0, [pc, #68]	; (26ef4 <show_help+0xa4>)
   26eae:	f7dc f849 	bl	2f44 <printk>
				return -EINVAL;
   26eb2:	f06f 0015 	mvn.w	r0, #21
   26eb6:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26eb8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26ebc:	0093      	lsls	r3, r2, #2
   26ebe:	4a0e      	ldr	r2, [pc, #56]	; (26ef8 <show_help+0xa8>)
   26ec0:	58d1      	ldr	r1, [r2, r3]
   26ec2:	480e      	ldr	r0, [pc, #56]	; (26efc <show_help+0xac>)
   26ec4:	f7dc f83e 	bl	2f44 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26ec8:	3401      	adds	r4, #1
   26eca:	4a0b      	ldr	r2, [pc, #44]	; (26ef8 <show_help+0xa8>)
   26ecc:	4b0c      	ldr	r3, [pc, #48]	; (26f00 <show_help+0xb0>)
   26ece:	1a9b      	subs	r3, r3, r2
   26ed0:	109b      	asrs	r3, r3, #2
   26ed2:	4a0c      	ldr	r2, [pc, #48]	; (26f04 <show_help+0xb4>)
   26ed4:	fb02 f303 	mul.w	r3, r2, r3
   26ed8:	429c      	cmp	r4, r3
   26eda:	dbed      	blt.n	26eb8 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   26edc:	480a      	ldr	r0, [pc, #40]	; (26f08 <show_help+0xb8>)
   26ede:	f7dc f831 	bl	2f44 <printk>
	return 0;
   26ee2:	2000      	movs	r0, #0
}
   26ee4:	bd10      	pop	{r4, pc}
   26ee6:	bf00      	nop
   26ee8:	2000c528 	.word	0x2000c528
   26eec:	00032564 	.word	0x00032564
   26ef0:	0003253c 	.word	0x0003253c
   26ef4:	00032468 	.word	0x00032468
   26ef8:	2000cff0 	.word	0x2000cff0
   26efc:	000316b8 	.word	0x000316b8
   26f00:	2000cffc 	.word	0x2000cffc
   26f04:	aaaaaaab 	.word	0xaaaaaaab
   26f08:	00032578 	.word	0x00032578

00026f0c <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   26f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26f10:	b086      	sub	sp, #24
   26f12:	4604      	mov	r4, r0
   26f14:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   26f16:	e000      	b.n	26f1a <get_command_to_complete+0xe>
		str++;
   26f18:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26f1a:	7823      	ldrb	r3, [r4, #0]
   26f1c:	2b20      	cmp	r3, #32
   26f1e:	d0fb      	beq.n	26f18 <get_command_to_complete+0xc>
	}

	if (!*str) {
   26f20:	b3a3      	cbz	r3, 26f8c <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   26f22:	4b1f      	ldr	r3, [pc, #124]	; (26fa0 <get_command_to_complete+0x94>)
   26f24:	681d      	ldr	r5, [r3, #0]
   26f26:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26f2a:	d001      	beq.n	26f30 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   26f2c:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   26f30:	2120      	movs	r1, #32
   26f32:	4620      	mov	r0, r4
   26f34:	f003 fa06 	bl	2a344 <strchr>
   26f38:	4606      	mov	r6, r0
	if (default_module != -1) {
   26f3a:	4b19      	ldr	r3, [pc, #100]	; (26fa0 <get_command_to_complete+0x94>)
   26f3c:	681f      	ldr	r7, [r3, #0]
   26f3e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   26f42:	d004      	beq.n	26f4e <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   26f44:	bb28      	cbnz	r0, 26f92 <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   26f46:	4628      	mov	r0, r5
   26f48:	b006      	add	sp, #24
   26f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   26f4e:	b318      	cbz	r0, 26f98 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   26f50:	1b05      	subs	r5, r0, r4
   26f52:	1c6a      	adds	r2, r5, #1
   26f54:	2a13      	cmp	r2, #19
   26f56:	dc21      	bgt.n	26f9c <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   26f58:	4621      	mov	r1, r4
   26f5a:	a801      	add	r0, sp, #4
   26f5c:	f003 fb16 	bl	2a58c <strncpy>
	dest_str[str - start] = '\0';
   26f60:	ab06      	add	r3, sp, #24
   26f62:	441d      	add	r5, r3
   26f64:	2300      	movs	r3, #0
   26f66:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   26f6a:	a801      	add	r0, sp, #4
   26f6c:	f7ff fe16 	bl	26b9c <get_destination_module>
   26f70:	4605      	mov	r5, r0
	if (dest == -1) {
   26f72:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f76:	d0e6      	beq.n	26f46 <get_command_to_complete+0x3a>
	str++;
   26f78:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   26f7a:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   26f7e:	2120      	movs	r1, #32
   26f80:	f003 f9e0 	bl	2a344 <strchr>
	return (str == NULL) ? dest : -1;
   26f84:	2800      	cmp	r0, #0
   26f86:	d0de      	beq.n	26f46 <get_command_to_complete+0x3a>
   26f88:	463d      	mov	r5, r7
   26f8a:	e7dc      	b.n	26f46 <get_command_to_complete+0x3a>
		return -1;
   26f8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f90:	e7d9      	b.n	26f46 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   26f92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f96:	e7d6      	b.n	26f46 <get_command_to_complete+0x3a>
		return -1;
   26f98:	463d      	mov	r5, r7
   26f9a:	e7d4      	b.n	26f46 <get_command_to_complete+0x3a>
		return -1;
   26f9c:	463d      	mov	r5, r7
   26f9e:	e7d2      	b.n	26f46 <get_command_to_complete+0x3a>
   26fa0:	2000c528 	.word	0x2000c528

00026fa4 <completion>:

static u8_t completion(char *line, u8_t len)
{
   26fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fa8:	b087      	sub	sp, #28
   26faa:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   26fac:	2944      	cmp	r1, #68	; 0x44
   26fae:	d903      	bls.n	26fb8 <completion+0x14>
		return 0;
   26fb0:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   26fb2:	b007      	add	sp, #28
   26fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fb8:	4689      	mov	r9, r1
	line[len] = '\0';
   26fba:	2300      	movs	r3, #0
   26fbc:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   26fbe:	a905      	add	r1, sp, #20
   26fc0:	f7ff ffa4 	bl	26f0c <get_command_to_complete>
   26fc4:	4605      	mov	r5, r0
	if (dest == -1) {
   26fc6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26fca:	f000 808f 	beq.w	270ec <completion+0x148>
	command_len = strlen(command_prefix);
   26fce:	9805      	ldr	r0, [sp, #20]
   26fd0:	f7d9 fb96 	bl	700 <strlen>
   26fd4:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26fd6:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   26fda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   26fde:	465f      	mov	r7, fp
   26fe0:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26fe2:	e01f      	b.n	27024 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   26fe4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26fe8:	009a      	lsls	r2, r3, #2
   26fea:	4b42      	ldr	r3, [pc, #264]	; (270f4 <completion+0x150>)
   26fec:	4413      	add	r3, r2
   26fee:	685b      	ldr	r3, [r3, #4]
   26ff0:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   26ff4:	e014      	b.n	27020 <completion+0x7c>
			printk("\n%s\n", first_match);
   26ff6:	4639      	mov	r1, r7
   26ff8:	483f      	ldr	r0, [pc, #252]	; (270f8 <completion+0x154>)
   26ffa:	f7db ffa3 	bl	2f44 <printk>
			common_chars = strlen(first_match);
   26ffe:	4638      	mov	r0, r7
   27000:	f7d9 fb7e 	bl	700 <strlen>
   27004:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   27006:	e026      	b.n	27056 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   27008:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2700c:	009a      	lsls	r2, r3, #2
   2700e:	4b39      	ldr	r3, [pc, #228]	; (270f4 <completion+0x150>)
   27010:	4413      	add	r3, r2
   27012:	685b      	ldr	r3, [r3, #4]
   27014:	f853 100a 	ldr.w	r1, [r3, sl]
   27018:	4838      	ldr	r0, [pc, #224]	; (270fc <completion+0x158>)
   2701a:	f7db ff93 	bl	2f44 <printk>
		common_chars = j;
   2701e:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   27020:	f10b 0b01 	add.w	fp, fp, #1
   27024:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27028:	009a      	lsls	r2, r3, #2
   2702a:	4b32      	ldr	r3, [pc, #200]	; (270f4 <completion+0x150>)
   2702c:	4413      	add	r3, r2
   2702e:	685a      	ldr	r2, [r3, #4]
   27030:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   27034:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   27038:	46d0      	mov	r8, sl
   2703a:	f852 100a 	ldr.w	r1, [r2, sl]
   2703e:	b1d1      	cbz	r1, 27076 <completion+0xd2>
		if (strncmp(command_prefix,
   27040:	9a01      	ldr	r2, [sp, #4]
   27042:	9805      	ldr	r0, [sp, #20]
   27044:	f003 fa50 	bl	2a4e8 <strncmp>
   27048:	4604      	mov	r4, r0
   2704a:	2800      	cmp	r0, #0
   2704c:	d1e8      	bne.n	27020 <completion+0x7c>
		if (!first_match) {
   2704e:	2f00      	cmp	r7, #0
   27050:	d0c8      	beq.n	26fe4 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   27052:	2e00      	cmp	r6, #0
   27054:	dbcf      	blt.n	26ff6 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   27056:	42a6      	cmp	r6, r4
   27058:	ddd6      	ble.n	27008 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   2705a:	5d39      	ldrb	r1, [r7, r4]
   2705c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27060:	009a      	lsls	r2, r3, #2
   27062:	4b24      	ldr	r3, [pc, #144]	; (270f4 <completion+0x150>)
   27064:	4413      	add	r3, r2
   27066:	685b      	ldr	r3, [r3, #4]
   27068:	f853 3008 	ldr.w	r3, [r3, r8]
   2706c:	5d1b      	ldrb	r3, [r3, r4]
   2706e:	4299      	cmp	r1, r3
   27070:	d1ca      	bne.n	27008 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   27072:	3401      	adds	r4, #1
   27074:	e7ef      	b.n	27056 <completion+0xb2>
   27076:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   2707a:	2f00      	cmp	r7, #0
   2707c:	d038      	beq.n	270f0 <completion+0x14c>
	if (common_chars >= 0) {
   2707e:	2e00      	cmp	r6, #0
   27080:	db0d      	blt.n	2709e <completion+0xfa>
		printk("%s", get_prompt());
   27082:	f7ff fd01 	bl	26a88 <get_prompt>
   27086:	4c1e      	ldr	r4, [pc, #120]	; (27100 <completion+0x15c>)
   27088:	4601      	mov	r1, r0
   2708a:	4620      	mov	r0, r4
   2708c:	f7db ff5a 	bl	2f44 <printk>
		printk("%s", line);
   27090:	9d02      	ldr	r5, [sp, #8]
   27092:	4629      	mov	r1, r5
   27094:	4620      	mov	r0, r4
   27096:	f7db ff55 	bl	2f44 <printk>
	int common_chars = -1, space = 0;
   2709a:	2400      	movs	r4, #0
   2709c:	e015      	b.n	270ca <completion+0x126>
		common_chars = strlen(first_match);
   2709e:	4638      	mov	r0, r7
   270a0:	f7d9 fb2e 	bl	700 <strlen>
   270a4:	4606      	mov	r6, r0
		space = 1;
   270a6:	2401      	movs	r4, #1
   270a8:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   270aa:	e00e      	b.n	270ca <completion+0x126>
		printk("%c", first_match[i]);
   270ac:	f817 100a 	ldrb.w	r1, [r7, sl]
   270b0:	4814      	ldr	r0, [pc, #80]	; (27104 <completion+0x160>)
   270b2:	f7db ff47 	bl	2f44 <printk>
		line[len++] = first_match[i];
   270b6:	f109 0301 	add.w	r3, r9, #1
   270ba:	f817 200a 	ldrb.w	r2, [r7, sl]
   270be:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   270c2:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   270c6:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   270ca:	4556      	cmp	r6, sl
   270cc:	dcee      	bgt.n	270ac <completion+0x108>
	if (space) {
   270ce:	b92c      	cbnz	r4, 270dc <completion+0x138>
	return common_chars - command_len + space;
   270d0:	9b01      	ldr	r3, [sp, #4]
   270d2:	1af0      	subs	r0, r6, r3
   270d4:	fa54 f080 	uxtab	r0, r4, r0
   270d8:	b2c0      	uxtb	r0, r0
   270da:	e76a      	b.n	26fb2 <completion+0xe>
		printk(" ");
   270dc:	480a      	ldr	r0, [pc, #40]	; (27108 <completion+0x164>)
   270de:	f7db ff31 	bl	2f44 <printk>
		line[len] = ' ';
   270e2:	2320      	movs	r3, #32
   270e4:	9a02      	ldr	r2, [sp, #8]
   270e6:	f802 3009 	strb.w	r3, [r2, r9]
   270ea:	e7f1      	b.n	270d0 <completion+0x12c>
		return 0;
   270ec:	2000      	movs	r0, #0
   270ee:	e760      	b.n	26fb2 <completion+0xe>
		return 0;
   270f0:	2000      	movs	r0, #0
   270f2:	e75e      	b.n	26fb2 <completion+0xe>
   270f4:	2000cff0 	.word	0x2000cff0
   270f8:	000323e8 	.word	0x000323e8
   270fc:	000316b8 	.word	0x000316b8
   27100:	0002e61c 	.word	0x0002e61c
   27104:	000323f0 	.word	0x000323f0
   27108:	00032a3c 	.word	0x00032a3c

0002710c <line_queue_init>:
{
   2710c:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   2710e:	2400      	movs	r4, #0
   27110:	e008      	b.n	27124 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   27112:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   27116:	0093      	lsls	r3, r2, #2
   27118:	4904      	ldr	r1, [pc, #16]	; (2712c <line_queue_init+0x20>)
   2711a:	4419      	add	r1, r3
   2711c:	4804      	ldr	r0, [pc, #16]	; (27130 <line_queue_init+0x24>)
   2711e:	f001 fced 	bl	28afc <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   27122:	3401      	adds	r4, #1
   27124:	2c02      	cmp	r4, #2
   27126:	ddf4      	ble.n	27112 <line_queue_init+0x6>
}
   27128:	bd10      	pop	{r4, pc}
   2712a:	bf00      	nop
   2712c:	2000248c 	.word	0x2000248c
   27130:	2000247c 	.word	0x2000247c

00027134 <shell_exec>:
{
   27134:	b510      	push	{r4, lr}
   27136:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   27138:	4b1e      	ldr	r3, [pc, #120]	; (271b4 <shell_exec+0x80>)
   2713a:	681b      	ldr	r3, [r3, #0]
   2713c:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   2713e:	220b      	movs	r2, #11
   27140:	a903      	add	r1, sp, #12
   27142:	f7ff fcf5 	bl	26b30 <line2argv>
   27146:	9002      	str	r0, [sp, #8]
	if (!argc) {
   27148:	2800      	cmp	r0, #0
   2714a:	d02f      	beq.n	271ac <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   2714c:	aa01      	add	r2, sp, #4
   2714e:	a903      	add	r1, sp, #12
   27150:	a802      	add	r0, sp, #8
   27152:	f7ff fdbd 	bl	26cd0 <get_cb>
	if (!cb) {
   27156:	4602      	mov	r2, r0
   27158:	b168      	cbz	r0, 27176 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   2715a:	9b01      	ldr	r3, [sp, #4]
   2715c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27160:	d017      	beq.n	27192 <shell_exec+0x5e>
   27162:	4914      	ldr	r1, [pc, #80]	; (271b4 <shell_exec+0x80>)
   27164:	6809      	ldr	r1, [r1, #0]
   27166:	428b      	cmp	r3, r1
   27168:	d013      	beq.n	27192 <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   2716a:	a904      	add	r1, sp, #16
   2716c:	9802      	ldr	r0, [sp, #8]
   2716e:	3801      	subs	r0, #1
   27170:	4790      	blx	r2
   27172:	4604      	mov	r4, r0
   27174:	e011      	b.n	2719a <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   27176:	4b10      	ldr	r3, [pc, #64]	; (271b8 <shell_exec+0x84>)
   27178:	681a      	ldr	r2, [r3, #0]
   2717a:	2a00      	cmp	r2, #0
   2717c:	d1ed      	bne.n	2715a <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   2717e:	9903      	ldr	r1, [sp, #12]
   27180:	480e      	ldr	r0, [pc, #56]	; (271bc <shell_exec+0x88>)
   27182:	f7db fedf 	bl	2f44 <printk>
	printk("Type 'help' for list of available commands\n");
   27186:	480e      	ldr	r0, [pc, #56]	; (271c0 <shell_exec+0x8c>)
   27188:	f7db fedc 	bl	2f44 <printk>
			return -EINVAL;
   2718c:	f06f 0415 	mvn.w	r4, #21
   27190:	e005      	b.n	2719e <shell_exec+0x6a>
		err = cb(argc, argv);
   27192:	a903      	add	r1, sp, #12
   27194:	9802      	ldr	r0, [sp, #8]
   27196:	4790      	blx	r2
   27198:	4604      	mov	r4, r0
	if (err < 0) {
   2719a:	2c00      	cmp	r4, #0
   2719c:	db02      	blt.n	271a4 <shell_exec+0x70>
}
   2719e:	4620      	mov	r0, r4
   271a0:	b00e      	add	sp, #56	; 0x38
   271a2:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   271a4:	a803      	add	r0, sp, #12
   271a6:	f7ff fe03 	bl	26db0 <show_cmd_help>
   271aa:	e7f8      	b.n	2719e <shell_exec+0x6a>
		return -EINVAL;
   271ac:	f06f 0415 	mvn.w	r4, #21
   271b0:	e7f5      	b.n	2719e <shell_exec+0x6a>
   271b2:	bf00      	nop
   271b4:	2000c528 	.word	0x2000c528
   271b8:	20002474 	.word	0x20002474
   271bc:	0003244c 	.word	0x0003244c
   271c0:	00032508 	.word	0x00032508

000271c4 <shell>:
{
   271c4:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   271c6:	f7ff fc5f 	bl	26a88 <get_prompt>
   271ca:	4601      	mov	r1, r0
   271cc:	4808      	ldr	r0, [pc, #32]	; (271f0 <shell+0x2c>)
   271ce:	f7db feb9 	bl	2f44 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   271d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   271d6:	4807      	ldr	r0, [pc, #28]	; (271f4 <shell+0x30>)
   271d8:	f001 fcb8 	bl	28b4c <k_queue_get>
   271dc:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   271de:	3004      	adds	r0, #4
   271e0:	f7ff ffa8 	bl	27134 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   271e4:	4621      	mov	r1, r4
   271e6:	4804      	ldr	r0, [pc, #16]	; (271f8 <shell+0x34>)
   271e8:	f001 fc88 	bl	28afc <k_queue_append>
   271ec:	e7eb      	b.n	271c6 <shell+0x2>
   271ee:	bf00      	nop
   271f0:	0002e61c 	.word	0x0002e61c
   271f4:	20002618 	.word	0x20002618
   271f8:	2000247c 	.word	0x2000247c

000271fc <shell_init>:


void shell_init(const char *str)
{
   271fc:	b510      	push	{r4, lr}
   271fe:	b086      	sub	sp, #24
   27200:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   27202:	4812      	ldr	r0, [pc, #72]	; (2724c <shell_init+0x50>)
   27204:	f001 fc47 	bl	28a96 <k_queue_init>
	k_fifo_init(&avail_queue);
   27208:	4811      	ldr	r0, [pc, #68]	; (27250 <shell_init+0x54>)
   2720a:	f001 fc44 	bl	28a96 <k_queue_init>

	line_queue_init();
   2720e:	f7ff ff7d 	bl	2710c <line_queue_init>

	prompt = str ? str : "";
   27212:	b1c4      	cbz	r4, 27246 <shell_init+0x4a>
   27214:	4b0f      	ldr	r3, [pc, #60]	; (27254 <shell_init+0x58>)
   27216:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   27218:	2300      	movs	r3, #0
   2721a:	9305      	str	r3, [sp, #20]
   2721c:	9304      	str	r3, [sp, #16]
   2721e:	f06f 0208 	mvn.w	r2, #8
   27222:	9203      	str	r2, [sp, #12]
   27224:	9302      	str	r3, [sp, #8]
   27226:	9301      	str	r3, [sp, #4]
   27228:	9300      	str	r3, [sp, #0]
   2722a:	4b0b      	ldr	r3, [pc, #44]	; (27258 <shell_init+0x5c>)
   2722c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   27230:	490a      	ldr	r1, [pc, #40]	; (2725c <shell_init+0x60>)
   27232:	480b      	ldr	r0, [pc, #44]	; (27260 <shell_init+0x64>)
   27234:	f002 fa78 	bl	29728 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   27238:	4a0a      	ldr	r2, [pc, #40]	; (27264 <shell_init+0x68>)
   2723a:	4904      	ldr	r1, [pc, #16]	; (2724c <shell_init+0x50>)
   2723c:	4804      	ldr	r0, [pc, #16]	; (27250 <shell_init+0x54>)
   2723e:	f7da fec1 	bl	1fc4 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   27242:	b006      	add	sp, #24
   27244:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   27246:	4c08      	ldr	r4, [pc, #32]	; (27268 <shell_init+0x6c>)
   27248:	e7e4      	b.n	27214 <shell_init+0x18>
   2724a:	bf00      	nop
   2724c:	20002618 	.word	0x20002618
   27250:	2000247c 	.word	0x2000247c
   27254:	20002640 	.word	0x20002640
   27258:	000271c5 	.word	0x000271c5
   2725c:	20009b58 	.word	0x20009b58
   27260:	20002644 	.word	0x20002644
   27264:	00026fa5 	.word	0x00026fa5
   27268:	0002eae8 	.word	0x0002eae8

0002726c <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2726c:	4b0e      	ldr	r3, [pc, #56]	; (272a8 <ftpan_32+0x3c>)
   2726e:	781b      	ldrb	r3, [r3, #0]
   27270:	2b06      	cmp	r3, #6
   27272:	d001      	beq.n	27278 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27274:	2000      	movs	r0, #0
   27276:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27278:	4b0c      	ldr	r3, [pc, #48]	; (272ac <ftpan_32+0x40>)
   2727a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2727c:	f013 0f0f 	tst.w	r3, #15
   27280:	d10e      	bne.n	272a0 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27282:	4b0b      	ldr	r3, [pc, #44]	; (272b0 <ftpan_32+0x44>)
   27284:	681b      	ldr	r3, [r3, #0]
   27286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2728a:	2b30      	cmp	r3, #48	; 0x30
   2728c:	d001      	beq.n	27292 <ftpan_32+0x26>
	return false;
   2728e:	2000      	movs	r0, #0
   27290:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27292:	4b08      	ldr	r3, [pc, #32]	; (272b4 <ftpan_32+0x48>)
   27294:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27296:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2729a:	d003      	beq.n	272a4 <ftpan_32+0x38>
	return false;
   2729c:	2000      	movs	r0, #0
   2729e:	4770      	bx	lr
   272a0:	2000      	movs	r0, #0
   272a2:	4770      	bx	lr
			return true;
   272a4:	2001      	movs	r0, #1
}
   272a6:	4770      	bx	lr
   272a8:	f0000fe0 	.word	0xf0000fe0
   272ac:	f0000fe4 	.word	0xf0000fe4
   272b0:	f0000fe8 	.word	0xf0000fe8
   272b4:	f0000fec 	.word	0xf0000fec

000272b8 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   272b8:	4b0e      	ldr	r3, [pc, #56]	; (272f4 <ftpan_37+0x3c>)
   272ba:	781b      	ldrb	r3, [r3, #0]
   272bc:	2b06      	cmp	r3, #6
   272be:	d001      	beq.n	272c4 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   272c0:	2000      	movs	r0, #0
   272c2:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   272c4:	4b0c      	ldr	r3, [pc, #48]	; (272f8 <ftpan_37+0x40>)
   272c6:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   272c8:	f013 0f0f 	tst.w	r3, #15
   272cc:	d10e      	bne.n	272ec <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   272ce:	4b0b      	ldr	r3, [pc, #44]	; (272fc <ftpan_37+0x44>)
   272d0:	681b      	ldr	r3, [r3, #0]
   272d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   272d6:	2b30      	cmp	r3, #48	; 0x30
   272d8:	d001      	beq.n	272de <ftpan_37+0x26>
	return false;
   272da:	2000      	movs	r0, #0
   272dc:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   272de:	4b08      	ldr	r3, [pc, #32]	; (27300 <ftpan_37+0x48>)
   272e0:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   272e2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   272e6:	d003      	beq.n	272f0 <ftpan_37+0x38>
	return false;
   272e8:	2000      	movs	r0, #0
   272ea:	4770      	bx	lr
   272ec:	2000      	movs	r0, #0
   272ee:	4770      	bx	lr
			return true;
   272f0:	2001      	movs	r0, #1
}
   272f2:	4770      	bx	lr
   272f4:	f0000fe0 	.word	0xf0000fe0
   272f8:	f0000fe4 	.word	0xf0000fe4
   272fc:	f0000fe8 	.word	0xf0000fe8
   27300:	f0000fec 	.word	0xf0000fec

00027304 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27304:	4b0e      	ldr	r3, [pc, #56]	; (27340 <ftpan_36+0x3c>)
   27306:	781b      	ldrb	r3, [r3, #0]
   27308:	2b06      	cmp	r3, #6
   2730a:	d001      	beq.n	27310 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   2730c:	2000      	movs	r0, #0
   2730e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27310:	4b0c      	ldr	r3, [pc, #48]	; (27344 <ftpan_36+0x40>)
   27312:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27314:	f013 0f0f 	tst.w	r3, #15
   27318:	d10e      	bne.n	27338 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2731a:	4b0b      	ldr	r3, [pc, #44]	; (27348 <ftpan_36+0x44>)
   2731c:	681b      	ldr	r3, [r3, #0]
   2731e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27322:	2b30      	cmp	r3, #48	; 0x30
   27324:	d001      	beq.n	2732a <ftpan_36+0x26>
	return false;
   27326:	2000      	movs	r0, #0
   27328:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2732a:	4b08      	ldr	r3, [pc, #32]	; (2734c <ftpan_36+0x48>)
   2732c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2732e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27332:	d003      	beq.n	2733c <ftpan_36+0x38>
	return false;
   27334:	2000      	movs	r0, #0
   27336:	4770      	bx	lr
   27338:	2000      	movs	r0, #0
   2733a:	4770      	bx	lr
			return true;
   2733c:	2001      	movs	r0, #1
}
   2733e:	4770      	bx	lr
   27340:	f0000fe0 	.word	0xf0000fe0
   27344:	f0000fe4 	.word	0xf0000fe4
   27348:	f0000fe8 	.word	0xf0000fe8
   2734c:	f0000fec 	.word	0xf0000fec

00027350 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27350:	4b0f      	ldr	r3, [pc, #60]	; (27390 <errata_136_nrf52832+0x40>)
   27352:	781b      	ldrb	r3, [r3, #0]
   27354:	2b06      	cmp	r3, #6
   27356:	d001      	beq.n	2735c <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   27358:	2000      	movs	r0, #0
   2735a:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   2735c:	4b0d      	ldr	r3, [pc, #52]	; (27394 <errata_136_nrf52832+0x44>)
   2735e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27360:	f013 0f0f 	tst.w	r3, #15
   27364:	d10b      	bne.n	2737e <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   27366:	4b0c      	ldr	r3, [pc, #48]	; (27398 <errata_136_nrf52832+0x48>)
   27368:	681b      	ldr	r3, [r3, #0]
   2736a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2736e:	2b30      	cmp	r3, #48	; 0x30
   27370:	d007      	beq.n	27382 <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   27372:	2b40      	cmp	r3, #64	; 0x40
   27374:	d007      	beq.n	27386 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   27376:	2b50      	cmp	r3, #80	; 0x50
   27378:	d007      	beq.n	2738a <errata_136_nrf52832+0x3a>
	return false;
   2737a:	2000      	movs	r0, #0
   2737c:	4770      	bx	lr
   2737e:	2000      	movs	r0, #0
   27380:	4770      	bx	lr
			return true;
   27382:	2001      	movs	r0, #1
   27384:	4770      	bx	lr
			return true;
   27386:	2001      	movs	r0, #1
   27388:	4770      	bx	lr
			return true;
   2738a:	2001      	movs	r0, #1
}
   2738c:	4770      	bx	lr
   2738e:	bf00      	nop
   27390:	f0000fe0 	.word	0xf0000fe0
   27394:	f0000fe4 	.word	0xf0000fe4
   27398:	f0000fe8 	.word	0xf0000fe8

0002739c <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   2739c:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   2739e:	f7ff ff65 	bl	2726c <ftpan_32>
   273a2:	b120      	cbz	r0, 273ae <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   273a4:	4a32      	ldr	r2, [pc, #200]	; (27470 <nordicsemi_nrf52832_init+0xd4>)
   273a6:	68d3      	ldr	r3, [r2, #12]
   273a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   273ac:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   273ae:	f7ff ff83 	bl	272b8 <ftpan_37>
   273b2:	b110      	cbz	r0, 273ba <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   273b4:	2203      	movs	r2, #3
   273b6:	4b2f      	ldr	r3, [pc, #188]	; (27474 <nordicsemi_nrf52832_init+0xd8>)
   273b8:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   273ba:	f7ff ffa3 	bl	27304 <ftpan_36>
   273be:	b130      	cbz	r0, 273ce <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   273c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   273c4:	2200      	movs	r2, #0
   273c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   273ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   273ce:	f7ff ffbf 	bl	27350 <errata_136_nrf52832>
   273d2:	b160      	cbz	r0, 273ee <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   273d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   273d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   273dc:	f013 0f01 	tst.w	r3, #1
   273e0:	d005      	beq.n	273ee <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   273e2:	f06f 0201 	mvn.w	r2, #1
   273e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   273ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   273ee:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   273f6:	2b00      	cmp	r3, #0
   273f8:	db06      	blt.n	27408 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   273fa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   27402:	2b00      	cmp	r3, #0
   27404:	db00      	blt.n	27408 <nordicsemi_nrf52832_init+0x6c>
   27406:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   27408:	2201      	movs	r2, #1
   2740a:	4b1b      	ldr	r3, [pc, #108]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   2740c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27410:	4b19      	ldr	r3, [pc, #100]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   27412:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27416:	2b00      	cmp	r3, #0
   27418:	d0fa      	beq.n	27410 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   2741a:	2215      	movs	r2, #21
   2741c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27424:	4b14      	ldr	r3, [pc, #80]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   27426:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2742a:	2b00      	cmp	r3, #0
   2742c:	d0fa      	beq.n	27424 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   2742e:	2215      	movs	r2, #21
   27430:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27434:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27438:	4b0f      	ldr	r3, [pc, #60]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   2743a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2743e:	2b00      	cmp	r3, #0
   27440:	d0fa      	beq.n	27438 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   27442:	2200      	movs	r2, #0
   27444:	4b0c      	ldr	r3, [pc, #48]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   27446:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   2744a:	4b0b      	ldr	r3, [pc, #44]	; (27478 <nordicsemi_nrf52832_init+0xdc>)
   2744c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27450:	2b00      	cmp	r3, #0
   27452:	d0fa      	beq.n	2744a <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27454:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27458:	4908      	ldr	r1, [pc, #32]	; (2747c <nordicsemi_nrf52832_init+0xe0>)
   2745a:	68ca      	ldr	r2, [r1, #12]
   2745c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27460:	4b07      	ldr	r3, [pc, #28]	; (27480 <nordicsemi_nrf52832_init+0xe4>)
   27462:	4313      	orrs	r3, r2
   27464:	60cb      	str	r3, [r1, #12]
   27466:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   2746a:	bf00      	nop
   2746c:	e7fd      	b.n	2746a <nordicsemi_nrf52832_init+0xce>
   2746e:	bf00      	nop
   27470:	e000edf0 	.word	0xe000edf0
   27474:	400005a0 	.word	0x400005a0
   27478:	4001e000 	.word	0x4001e000
   2747c:	e000ed00 	.word	0xe000ed00
   27480:	05fa0004 	.word	0x05fa0004

00027484 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   27484:	4a01      	ldr	r2, [pc, #4]	; (2748c <clock_init+0x8>)
   27486:	4b02      	ldr	r3, [pc, #8]	; (27490 <clock_init+0xc>)
   27488:	601a      	str	r2, [r3, #0]
   2748a:	4770      	bx	lr
   2748c:	03d09000 	.word	0x03d09000
   27490:	2000c52c 	.word	0x2000c52c

00027494 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   27494:	b510      	push	{r4, lr}
	__asm__ volatile(
   27496:	f04f 0320 	mov.w	r3, #32
   2749a:	f3ef 8411 	mrs	r4, BASEPRI
   2749e:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   274a2:	f7ff ff7b 	bl	2739c <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   274a6:	4b05      	ldr	r3, [pc, #20]	; (274bc <nordicsemi_nrf52_init+0x28>)
   274a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   274ac:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   274ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   274b0:	f7ff ffe8 	bl	27484 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   274b4:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   274b8:	2000      	movs	r0, #0
   274ba:	bd10      	pop	{r4, pc}
   274bc:	e000ed00 	.word	0xe000ed00

000274c0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   274c0:	4808      	ldr	r0, [pc, #32]	; (274e4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   274c2:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   274c4:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   274c6:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   274c8:	d80b      	bhi.n	274e2 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   274ca:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   274cc:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   274ce:	d008      	beq.n	274e2 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   274d0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   274d2:	f001 fd1f 	bl	28f14 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   274d6:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   274da:	4903      	ldr	r1, [pc, #12]	; (274e8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   274dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   274e0:	600a      	str	r2, [r1, #0]

000274e2 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   274e2:	4770      	bx	lr
    ldr r0, =_kernel
   274e4:	20002780 	.word	0x20002780
    ldr r1, =_SCS_ICSR
   274e8:	e000ed04 	.word	0xe000ed04

000274ec <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   274ec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   274ee:	e00a      	b.n	27506 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   274f0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   274f2:	2b00      	cmp	r3, #0
   274f4:	db0a      	blt.n	2750c <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   274f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   274fa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   274fe:	2120      	movs	r1, #32
   27500:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27504:	3201      	adds	r2, #1
   27506:	2a26      	cmp	r2, #38	; 0x26
   27508:	ddf2      	ble.n	274f0 <_IntLibInit+0x4>
	}
}
   2750a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2750c:	f002 010f 	and.w	r1, r2, #15
   27510:	4b02      	ldr	r3, [pc, #8]	; (2751c <_IntLibInit+0x30>)
   27512:	440b      	add	r3, r1
   27514:	2120      	movs	r1, #32
   27516:	7619      	strb	r1, [r3, #24]
   27518:	e7f4      	b.n	27504 <_IntLibInit+0x18>
   2751a:	bf00      	nop
   2751c:	e000ecfc 	.word	0xe000ecfc

00027520 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   27520:	490e      	ldr	r1, [pc, #56]	; (2755c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27522:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   27524:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   27528:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   2752a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   2752e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   27532:	4f0b      	ldr	r7, [pc, #44]	; (27560 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   27534:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27538:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2753a:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   2753e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   27540:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   27542:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   27544:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   27546:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27548:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2754a:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2754e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   27552:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   27556:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   2755a:	4770      	bx	lr
    ldr r1, =_kernel
   2755c:	20002780 	.word	0x20002780
    ldr v4, =_SCS_ICSR
   27560:	e000ed04 	.word	0xe000ed04

00027564 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   27564:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   27568:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2756a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2756e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   27572:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   27574:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   27578:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   2757c:	d001      	beq.n	27582 <_context_switch>

    cmp r1, #2
   2757e:	2902      	cmp	r1, #2
    beq _oops
   27580:	d007      	beq.n	27592 <_oops>

00027582 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   27582:	4040      	eors	r0, r0
    msr BASEPRI, r0
   27584:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   27588:	4904      	ldr	r1, [pc, #16]	; (2759c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   2758a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   2758e:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   27590:	4770      	bx	lr

00027592 <_oops>:

_oops:
    push {lr}
   27592:	b500      	push	{lr}
    blx _do_kernel_oops
   27594:	f000 fa82 	bl	27a9c <_do_kernel_oops>
    pop {pc}
   27598:	bd00      	pop	{pc}
   2759a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   2759c:	e000ed04 	.word	0xe000ed04

000275a0 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   275a0:	4904      	ldr	r1, [pc, #16]	; (275b4 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   275a2:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   275a4:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   275a6:	4904      	ldr	r1, [pc, #16]	; (275b8 <__swap+0x18>)
    ldr r1, [r1]
   275a8:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   275aa:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   275ac:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   275ae:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   275b0:	4770      	bx	lr
   275b2:	0000      	.short	0x0000
    ldr r1, =_kernel
   275b4:	20002780 	.word	0x20002780
    ldr r1, =_k_neg_eagain
   275b8:	00032a10 	.word	0x00032a10

000275bc <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   275bc:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   275be:	4802      	ldr	r0, [pc, #8]	; (275c8 <_DebugMonitor+0xc>)
   275c0:	f7db fcc0 	bl	2f44 <printk>
   275c4:	bd08      	pop	{r3, pc}
   275c6:	bf00      	nop
   275c8:	0003264c 	.word	0x0003264c

000275cc <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   275cc:	b508      	push	{r3, lr}
   275ce:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   275d0:	290f      	cmp	r1, #15
   275d2:	dd05      	ble.n	275e0 <_ReservedException+0x14>
   275d4:	4903      	ldr	r1, [pc, #12]	; (275e4 <_ReservedException+0x18>)
   275d6:	3a10      	subs	r2, #16
   275d8:	4803      	ldr	r0, [pc, #12]	; (275e8 <_ReservedException+0x1c>)
   275da:	f7db fcb3 	bl	2f44 <printk>
   275de:	bd08      	pop	{r3, pc}
   275e0:	4902      	ldr	r1, [pc, #8]	; (275ec <_ReservedException+0x20>)
   275e2:	e7f8      	b.n	275d6 <_ReservedException+0xa>
   275e4:	000327d4 	.word	0x000327d4
   275e8:	000327f0 	.word	0x000327f0
   275ec:	000327bc 	.word	0x000327bc

000275f0 <_FaultThreadShow>:
{
   275f0:	b510      	push	{r4, lr}
   275f2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   275f4:	f001 fc60 	bl	28eb8 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   275f8:	69a2      	ldr	r2, [r4, #24]
   275fa:	4601      	mov	r1, r0
   275fc:	4801      	ldr	r0, [pc, #4]	; (27604 <_FaultThreadShow+0x14>)
   275fe:	f7db fca1 	bl	2f44 <printk>
   27602:	bd10      	pop	{r4, pc}
   27604:	00032684 	.word	0x00032684

00027608 <_MpuFault>:
{
   27608:	b538      	push	{r3, r4, r5, lr}
   2760a:	4604      	mov	r4, r0
   2760c:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   2760e:	481e      	ldr	r0, [pc, #120]	; (27688 <_MpuFault+0x80>)
   27610:	f7db fc98 	bl	2f44 <printk>
	_FaultThreadShow(esf);
   27614:	4620      	mov	r0, r4
   27616:	f7ff ffeb 	bl	275f0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   2761a:	4b1c      	ldr	r3, [pc, #112]	; (2768c <_MpuFault+0x84>)
   2761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2761e:	f013 0f10 	tst.w	r3, #16
   27622:	d10f      	bne.n	27644 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   27624:	4b19      	ldr	r3, [pc, #100]	; (2768c <_MpuFault+0x84>)
   27626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27628:	f013 0f08 	tst.w	r3, #8
   2762c:	d10e      	bne.n	2764c <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   2762e:	4b17      	ldr	r3, [pc, #92]	; (2768c <_MpuFault+0x84>)
   27630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27632:	f013 0f02 	tst.w	r3, #2
   27636:	d10d      	bne.n	27654 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   27638:	4b14      	ldr	r3, [pc, #80]	; (2768c <_MpuFault+0x84>)
   2763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2763c:	f013 0f01 	tst.w	r3, #1
   27640:	d11d      	bne.n	2767e <_MpuFault+0x76>
   27642:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27644:	4812      	ldr	r0, [pc, #72]	; (27690 <_MpuFault+0x88>)
   27646:	f7db fc7d 	bl	2f44 <printk>
   2764a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   2764c:	4811      	ldr	r0, [pc, #68]	; (27694 <_MpuFault+0x8c>)
   2764e:	f7db fc79 	bl	2f44 <printk>
   27652:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   27654:	4810      	ldr	r0, [pc, #64]	; (27698 <_MpuFault+0x90>)
   27656:	f7db fc75 	bl	2f44 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   2765a:	4b0c      	ldr	r3, [pc, #48]	; (2768c <_MpuFault+0x84>)
   2765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2765e:	f013 0f80 	tst.w	r3, #128	; 0x80
   27662:	d0ee      	beq.n	27642 <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   27664:	4b09      	ldr	r3, [pc, #36]	; (2768c <_MpuFault+0x84>)
   27666:	6b59      	ldr	r1, [r3, #52]	; 0x34
   27668:	480c      	ldr	r0, [pc, #48]	; (2769c <_MpuFault+0x94>)
   2766a:	f7db fc6b 	bl	2f44 <printk>
			if (fromHardFault) {
   2766e:	2d00      	cmp	r5, #0
   27670:	d0e7      	beq.n	27642 <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   27672:	4a06      	ldr	r2, [pc, #24]	; (2768c <_MpuFault+0x84>)
   27674:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2767a:	6293      	str	r3, [r2, #40]	; 0x28
   2767c:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   2767e:	4808      	ldr	r0, [pc, #32]	; (276a0 <_MpuFault+0x98>)
   27680:	f7db fc60 	bl	2f44 <printk>
}
   27684:	e7dd      	b.n	27642 <_MpuFault+0x3a>
   27686:	bf00      	nop
   27688:	0003272c 	.word	0x0003272c
   2768c:	e000ed00 	.word	0xe000ed00
   27690:	00032744 	.word	0x00032744
   27694:	00032758 	.word	0x00032758
   27698:	0003276c 	.word	0x0003276c
   2769c:	00032788 	.word	0x00032788
   276a0:	0003279c 	.word	0x0003279c

000276a4 <_BusFault>:
{
   276a4:	b538      	push	{r3, r4, r5, lr}
   276a6:	4604      	mov	r4, r0
   276a8:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   276aa:	4827      	ldr	r0, [pc, #156]	; (27748 <_BusFault+0xa4>)
   276ac:	f7db fc4a 	bl	2f44 <printk>
	_FaultThreadShow(esf);
   276b0:	4620      	mov	r0, r4
   276b2:	f7ff ff9d 	bl	275f0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   276b6:	4b25      	ldr	r3, [pc, #148]	; (2774c <_BusFault+0xa8>)
   276b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276ba:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   276be:	d114      	bne.n	276ea <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   276c0:	4b22      	ldr	r3, [pc, #136]	; (2774c <_BusFault+0xa8>)
   276c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   276c8:	d113      	bne.n	276f2 <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   276ca:	4b20      	ldr	r3, [pc, #128]	; (2774c <_BusFault+0xa8>)
   276cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276ce:	f413 7f00 	tst.w	r3, #512	; 0x200
   276d2:	d112      	bne.n	276fa <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   276d4:	4b1d      	ldr	r3, [pc, #116]	; (2774c <_BusFault+0xa8>)
   276d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   276dc:	d12b      	bne.n	27736 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   276de:	4b1b      	ldr	r3, [pc, #108]	; (2774c <_BusFault+0xa8>)
   276e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276e2:	f413 7f80 	tst.w	r3, #256	; 0x100
   276e6:	d12a      	bne.n	2773e <_BusFault+0x9a>
   276e8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   276ea:	4819      	ldr	r0, [pc, #100]	; (27750 <_BusFault+0xac>)
   276ec:	f7db fc2a 	bl	2f44 <printk>
   276f0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   276f2:	4818      	ldr	r0, [pc, #96]	; (27754 <_BusFault+0xb0>)
   276f4:	f7db fc26 	bl	2f44 <printk>
   276f8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   276fa:	4817      	ldr	r0, [pc, #92]	; (27758 <_BusFault+0xb4>)
   276fc:	f7db fc22 	bl	2f44 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   27700:	4b12      	ldr	r3, [pc, #72]	; (2774c <_BusFault+0xa8>)
   27702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27704:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27708:	d108      	bne.n	2771c <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   2770a:	4b10      	ldr	r3, [pc, #64]	; (2774c <_BusFault+0xa8>)
   2770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2770e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27712:	d0e9      	beq.n	276e8 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   27714:	4811      	ldr	r0, [pc, #68]	; (2775c <_BusFault+0xb8>)
   27716:	f7db fc15 	bl	2f44 <printk>
   2771a:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   2771c:	4b0b      	ldr	r3, [pc, #44]	; (2774c <_BusFault+0xa8>)
   2771e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   27720:	480f      	ldr	r0, [pc, #60]	; (27760 <_BusFault+0xbc>)
   27722:	f7db fc0f 	bl	2f44 <printk>
			if (fromHardFault) {
   27726:	2d00      	cmp	r5, #0
   27728:	d0ef      	beq.n	2770a <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   2772a:	4a08      	ldr	r2, [pc, #32]	; (2774c <_BusFault+0xa8>)
   2772c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2772e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27732:	6293      	str	r3, [r2, #40]	; 0x28
   27734:	e7e9      	b.n	2770a <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   27736:	4809      	ldr	r0, [pc, #36]	; (2775c <_BusFault+0xb8>)
   27738:	f7db fc04 	bl	2f44 <printk>
   2773c:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   2773e:	4809      	ldr	r0, [pc, #36]	; (27764 <_BusFault+0xc0>)
   27740:	f7db fc00 	bl	2f44 <printk>
}
   27744:	e7d0      	b.n	276e8 <_BusFault+0x44>
   27746:	bf00      	nop
   27748:	000325e0 	.word	0x000325e0
   2774c:	e000ed00 	.word	0xe000ed00
   27750:	00032744 	.word	0x00032744
   27754:	00032758 	.word	0x00032758
   27758:	000325f8 	.word	0x000325f8
   2775c:	00032614 	.word	0x00032614
   27760:	00032788 	.word	0x00032788
   27764:	00032630 	.word	0x00032630

00027768 <_UsageFault>:
{
   27768:	b510      	push	{r4, lr}
   2776a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   2776c:	4821      	ldr	r0, [pc, #132]	; (277f4 <_UsageFault+0x8c>)
   2776e:	f7db fbe9 	bl	2f44 <printk>
	_FaultThreadShow(esf);
   27772:	4620      	mov	r0, r4
   27774:	f7ff ff3c 	bl	275f0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   27778:	4b1f      	ldr	r3, [pc, #124]	; (277f8 <_UsageFault+0x90>)
   2777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2777c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27780:	d120      	bne.n	277c4 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   27782:	4b1d      	ldr	r3, [pc, #116]	; (277f8 <_UsageFault+0x90>)
   27784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27786:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   2778a:	d11f      	bne.n	277cc <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   2778c:	4b1a      	ldr	r3, [pc, #104]	; (277f8 <_UsageFault+0x90>)
   2778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27790:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   27794:	d11e      	bne.n	277d4 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   27796:	4b18      	ldr	r3, [pc, #96]	; (277f8 <_UsageFault+0x90>)
   27798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2779a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2779e:	d11d      	bne.n	277dc <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   277a0:	4b15      	ldr	r3, [pc, #84]	; (277f8 <_UsageFault+0x90>)
   277a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   277a8:	d11c      	bne.n	277e4 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   277aa:	4b13      	ldr	r3, [pc, #76]	; (277f8 <_UsageFault+0x90>)
   277ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   277b2:	d11b      	bne.n	277ec <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   277b4:	4a10      	ldr	r2, [pc, #64]	; (277f8 <_UsageFault+0x90>)
   277b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   277b8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   277bc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   277c0:	6293      	str	r3, [r2, #40]	; 0x28
   277c2:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   277c4:	480d      	ldr	r0, [pc, #52]	; (277fc <_UsageFault+0x94>)
   277c6:	f7db fbbd 	bl	2f44 <printk>
   277ca:	e7da      	b.n	27782 <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   277cc:	480c      	ldr	r0, [pc, #48]	; (27800 <_UsageFault+0x98>)
   277ce:	f7db fbb9 	bl	2f44 <printk>
   277d2:	e7db      	b.n	2778c <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   277d4:	480b      	ldr	r0, [pc, #44]	; (27804 <_UsageFault+0x9c>)
   277d6:	f7db fbb5 	bl	2f44 <printk>
   277da:	e7dc      	b.n	27796 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   277dc:	480a      	ldr	r0, [pc, #40]	; (27808 <_UsageFault+0xa0>)
   277de:	f7db fbb1 	bl	2f44 <printk>
   277e2:	e7dd      	b.n	277a0 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   277e4:	4809      	ldr	r0, [pc, #36]	; (2780c <_UsageFault+0xa4>)
   277e6:	f7db fbad 	bl	2f44 <printk>
   277ea:	e7de      	b.n	277aa <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   277ec:	4808      	ldr	r0, [pc, #32]	; (27810 <_UsageFault+0xa8>)
   277ee:	f7db fba9 	bl	2f44 <printk>
   277f2:	e7df      	b.n	277b4 <_UsageFault+0x4c>
   277f4:	00032804 	.word	0x00032804
   277f8:	e000ed00 	.word	0xe000ed00
   277fc:	00032820 	.word	0x00032820
   27800:	00032834 	.word	0x00032834
   27804:	00032850 	.word	0x00032850
   27808:	00032870 	.word	0x00032870
   2780c:	00032898 	.word	0x00032898
   27810:	000328b4 	.word	0x000328b4

00027814 <_HardFault>:
{
   27814:	b510      	push	{r4, lr}
   27816:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   27818:	4816      	ldr	r0, [pc, #88]	; (27874 <_HardFault+0x60>)
   2781a:	f7db fb93 	bl	2f44 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   2781e:	4b16      	ldr	r3, [pc, #88]	; (27878 <_HardFault+0x64>)
   27820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27822:	f013 0f02 	tst.w	r3, #2
   27826:	d105      	bne.n	27834 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   27828:	4b13      	ldr	r3, [pc, #76]	; (27878 <_HardFault+0x64>)
   2782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2782c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   27830:	d104      	bne.n	2783c <_HardFault+0x28>
   27832:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   27834:	4811      	ldr	r0, [pc, #68]	; (2787c <_HardFault+0x68>)
   27836:	f7db fb85 	bl	2f44 <printk>
   2783a:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   2783c:	4810      	ldr	r0, [pc, #64]	; (27880 <_HardFault+0x6c>)
   2783e:	f7db fb81 	bl	2f44 <printk>
		if (SCB_MMFSR) {
   27842:	4b10      	ldr	r3, [pc, #64]	; (27884 <_HardFault+0x70>)
   27844:	781b      	ldrb	r3, [r3, #0]
   27846:	b95b      	cbnz	r3, 27860 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   27848:	4b0f      	ldr	r3, [pc, #60]	; (27888 <_HardFault+0x74>)
   2784a:	781b      	ldrb	r3, [r3, #0]
   2784c:	b96b      	cbnz	r3, 2786a <_HardFault+0x56>
		} else if (SCB_UFSR) {
   2784e:	4b0f      	ldr	r3, [pc, #60]	; (2788c <_HardFault+0x78>)
   27850:	881b      	ldrh	r3, [r3, #0]
   27852:	b29b      	uxth	r3, r3
   27854:	2b00      	cmp	r3, #0
   27856:	d0ec      	beq.n	27832 <_HardFault+0x1e>
			_UsageFault(esf);
   27858:	4620      	mov	r0, r4
   2785a:	f7ff ff85 	bl	27768 <_UsageFault>
}
   2785e:	e7e8      	b.n	27832 <_HardFault+0x1e>
			_MpuFault(esf, 1);
   27860:	2101      	movs	r1, #1
   27862:	4620      	mov	r0, r4
   27864:	f7ff fed0 	bl	27608 <_MpuFault>
   27868:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   2786a:	2101      	movs	r1, #1
   2786c:	4620      	mov	r0, r4
   2786e:	f7ff ff19 	bl	276a4 <_BusFault>
   27872:	bd10      	pop	{r4, pc}
   27874:	000326d0 	.word	0x000326d0
   27878:	e000ed00 	.word	0xe000ed00
   2787c:	000326e8 	.word	0x000326e8
   27880:	0003270c 	.word	0x0003270c
   27884:	e000ed28 	.word	0xe000ed28
   27888:	e000ed29 	.word	0xe000ed29
   2788c:	e000ed2c 	.word	0xe000ed2c

00027890 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   27890:	b508      	push	{r3, lr}
	switch (fault) {
   27892:	1ecb      	subs	r3, r1, #3
   27894:	2b09      	cmp	r3, #9
   27896:	d817      	bhi.n	278c8 <_FaultDump+0x38>
   27898:	e8df f003 	tbb	[pc, r3]
   2789c:	100c0805 	.word	0x100c0805
   278a0:	16161616 	.word	0x16161616
   278a4:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   278a6:	f7ff ffb5 	bl	27814 <_HardFault>
		break;
   278aa:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   278ac:	2100      	movs	r1, #0
   278ae:	f7ff feab 	bl	27608 <_MpuFault>
		break;
   278b2:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   278b4:	2100      	movs	r1, #0
   278b6:	f7ff fef5 	bl	276a4 <_BusFault>
		break;
   278ba:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   278bc:	f7ff ff54 	bl	27768 <_UsageFault>
		break;
   278c0:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   278c2:	f7ff fe7b 	bl	275bc <_DebugMonitor>
		break;
   278c6:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   278c8:	f7ff fe80 	bl	275cc <_ReservedException>
   278cc:	bd08      	pop	{r3, pc}
	...

000278d0 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   278d0:	b510      	push	{r4, lr}
   278d2:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   278d4:	4b05      	ldr	r3, [pc, #20]	; (278ec <_Fault+0x1c>)
   278d6:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   278d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   278dc:	f7ff ffd8 	bl	27890 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   278e0:	4621      	mov	r1, r4
   278e2:	2000      	movs	r0, #0
   278e4:	f000 f8e0 	bl	27aa8 <_SysFatalErrorHandler>
   278e8:	bd10      	pop	{r4, pc}
   278ea:	bf00      	nop
   278ec:	e000ed00 	.word	0xe000ed00

000278f0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   278f0:	4a02      	ldr	r2, [pc, #8]	; (278fc <_FaultInit+0xc>)
   278f2:	6953      	ldr	r3, [r2, #20]
   278f4:	f043 0310 	orr.w	r3, r3, #16
   278f8:	6153      	str	r3, [r2, #20]
   278fa:	4770      	bx	lr
   278fc:	e000ed00 	.word	0xe000ed00

00027900 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   27900:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27902:	095b      	lsrs	r3, r3, #5
   27904:	f000 001f 	and.w	r0, r0, #31
   27908:	2201      	movs	r2, #1
   2790a:	fa02 f000 	lsl.w	r0, r2, r0
   2790e:	4a02      	ldr	r2, [pc, #8]	; (27918 <_arch_irq_enable+0x18>)
   27910:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27914:	4770      	bx	lr
   27916:	bf00      	nop
   27918:	e000e100 	.word	0xe000e100

0002791c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2791c:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   2791e:	095b      	lsrs	r3, r3, #5
   27920:	f000 001f 	and.w	r0, r0, #31
   27924:	2201      	movs	r2, #1
   27926:	fa02 f000 	lsl.w	r0, r2, r0
   2792a:	3320      	adds	r3, #32
   2792c:	4a01      	ldr	r2, [pc, #4]	; (27934 <_arch_irq_disable+0x18>)
   2792e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27932:	4770      	bx	lr
   27934:	e000e100 	.word	0xe000e100

00027938 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   27938:	0942      	lsrs	r2, r0, #5
   2793a:	4b05      	ldr	r3, [pc, #20]	; (27950 <_arch_irq_is_enabled+0x18>)
   2793c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27940:	f000 001f 	and.w	r0, r0, #31
   27944:	2301      	movs	r3, #1
   27946:	fa03 f000 	lsl.w	r0, r3, r0
}
   2794a:	4010      	ands	r0, r2
   2794c:	4770      	bx	lr
   2794e:	bf00      	nop
   27950:	e000e100 	.word	0xe000e100

00027954 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   27954:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27956:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27958:	2b00      	cmp	r3, #0
   2795a:	db08      	blt.n	2796e <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2795c:	0149      	lsls	r1, r1, #5
   2795e:	b2c9      	uxtb	r1, r1
   27960:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27964:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27968:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   2796c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2796e:	f000 000f 	and.w	r0, r0, #15
   27972:	0149      	lsls	r1, r1, #5
   27974:	b2c9      	uxtb	r1, r1
   27976:	4b01      	ldr	r3, [pc, #4]	; (2797c <_irq_priority_set+0x28>)
   27978:	5419      	strb	r1, [r3, r0]
   2797a:	4770      	bx	lr
   2797c:	e000ed14 	.word	0xe000ed14

00027980 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27980:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   27982:	f000 f847 	bl	27a14 <__bus_fault>
   27986:	bd08      	pop	{r3, pc}

00027988 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27988:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2798a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   2798c:	4b04      	ldr	r3, [pc, #16]	; (279a0 <_arch_isr_direct_pm+0x18>)
   2798e:	6958      	ldr	r0, [r3, #20]
   27990:	b908      	cbnz	r0, 27996 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   27992:	b662      	cpsie	i
   27994:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   27996:	2200      	movs	r2, #0
   27998:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   2799a:	f000 f9b5 	bl	27d08 <_sys_power_save_idle_exit>
   2799e:	e7f8      	b.n	27992 <_arch_isr_direct_pm+0xa>
   279a0:	20002780 	.word	0x20002780

000279a4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   279a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279a6:	4605      	mov	r5, r0
   279a8:	460c      	mov	r4, r1
   279aa:	4616      	mov	r6, r2
   279ac:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   279ae:	21aa      	movs	r1, #170	; 0xaa
   279b0:	4620      	mov	r0, r4
   279b2:	f002 fc0d 	bl	2a1d0 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   279b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   279b8:	2204      	movs	r2, #4
   279ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   279bc:	4628      	mov	r0, r5
   279be:	f001 ff51 	bl	29864 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   279c2:	2300      	movs	r3, #0
   279c4:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   279c6:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   279c8:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   279ca:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   279cc:	f1a6 0120 	sub.w	r1, r6, #32
   279d0:	4421      	add	r1, r4
   279d2:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   279d6:	4a08      	ldr	r2, [pc, #32]	; (279f8 <_new_thread+0x54>)
   279d8:	f022 0201 	bic.w	r2, r2, #1
   279dc:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   279de:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   279e0:	9a06      	ldr	r2, [sp, #24]
   279e2:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   279e4:	9a07      	ldr	r2, [sp, #28]
   279e6:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   279e8:	9a08      	ldr	r2, [sp, #32]
   279ea:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   279ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   279f0:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   279f2:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   279f4:	662b      	str	r3, [r5, #96]	; 0x60
   279f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279f8:	0002954d 	.word	0x0002954d

000279fc <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   279fc:	4901      	ldr	r1, [pc, #4]	; (27a04 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   279fe:	2210      	movs	r2, #16
	str r2, [r1]
   27a00:	600a      	str	r2, [r1, #0]
	bx lr
   27a02:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   27a04:	e000ed10 	.word	0xe000ed10

00027a08 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   27a08:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27a0a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   27a0e:	bf30      	wfi

	bx lr
   27a10:	4770      	bx	lr
   27a12:	bf00      	nop

00027a14 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   27a14:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27a16:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   27a1a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 27a38 <__bus_fault+0x24>
	ldr ip, [ip]
   27a1e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   27a22:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   27a26:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   27a28:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   27a2c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   27a30:	b500      	push	{lr}
	bl _Fault
   27a32:	f7ff ff4d 	bl	278d0 <_Fault>

	pop {pc}
   27a36:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   27a38:	e000ed04 	.word	0xe000ed04

00027a3c <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   27a3c:	b538      	push	{r3, r4, r5, lr}
   27a3e:	4604      	mov	r4, r0
   27a40:	460d      	mov	r5, r1
	switch (reason) {
   27a42:	2804      	cmp	r0, #4
   27a44:	d017      	beq.n	27a76 <_NanoFatalErrorHandler+0x3a>
   27a46:	2805      	cmp	r0, #5
   27a48:	d019      	beq.n	27a7e <_NanoFatalErrorHandler+0x42>
   27a4a:	2803      	cmp	r0, #3
   27a4c:	d004      	beq.n	27a58 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   27a4e:	4601      	mov	r1, r0
   27a50:	480d      	ldr	r0, [pc, #52]	; (27a88 <_NanoFatalErrorHandler+0x4c>)
   27a52:	f7db fa77 	bl	2f44 <printk>
		break;
   27a56:	e002      	b.n	27a5e <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27a58:	480c      	ldr	r0, [pc, #48]	; (27a8c <_NanoFatalErrorHandler+0x50>)
   27a5a:	f7db fa73 	bl	2f44 <printk>
   27a5e:	f001 fa2b 	bl	28eb8 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   27a62:	69aa      	ldr	r2, [r5, #24]
   27a64:	4601      	mov	r1, r0
   27a66:	480a      	ldr	r0, [pc, #40]	; (27a90 <_NanoFatalErrorHandler+0x54>)
   27a68:	f7db fa6c 	bl	2f44 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27a6c:	4629      	mov	r1, r5
   27a6e:	4620      	mov	r0, r4
   27a70:	f000 f81a 	bl	27aa8 <_SysFatalErrorHandler>
   27a74:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   27a76:	4807      	ldr	r0, [pc, #28]	; (27a94 <_NanoFatalErrorHandler+0x58>)
   27a78:	f7db fa64 	bl	2f44 <printk>
		break;
   27a7c:	e7ef      	b.n	27a5e <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27a7e:	4806      	ldr	r0, [pc, #24]	; (27a98 <_NanoFatalErrorHandler+0x5c>)
   27a80:	f7db fa60 	bl	2f44 <printk>
		break;
   27a84:	e7eb      	b.n	27a5e <_NanoFatalErrorHandler+0x22>
   27a86:	bf00      	nop
   27a88:	00032940 	.word	0x00032940
   27a8c:	000328e0 	.word	0x000328e0
   27a90:	00032964 	.word	0x00032964
   27a94:	00032908 	.word	0x00032908
   27a98:	00032924 	.word	0x00032924

00027a9c <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27a9c:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27a9e:	4601      	mov	r1, r0
   27aa0:	6800      	ldr	r0, [r0, #0]
   27aa2:	f7ff ffcb 	bl	27a3c <_NanoFatalErrorHandler>
   27aa6:	bd08      	pop	{r3, pc}

00027aa8 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27aa8:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27aaa:	2805      	cmp	r0, #5
   27aac:	d00c      	beq.n	27ac8 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27aae:	f001 fd31 	bl	29514 <k_is_in_isr>
   27ab2:	b910      	cbnz	r0, 27aba <_SysFatalErrorHandler+0x12>
   27ab4:	f001 fd42 	bl	2953c <_is_thread_essential>
   27ab8:	b158      	cbz	r0, 27ad2 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27aba:	f001 fd2b 	bl	29514 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27abe:	b130      	cbz	r0, 27ace <_SysFatalErrorHandler+0x26>
   27ac0:	4908      	ldr	r1, [pc, #32]	; (27ae4 <_SysFatalErrorHandler+0x3c>)
   27ac2:	4809      	ldr	r0, [pc, #36]	; (27ae8 <_SysFatalErrorHandler+0x40>)
   27ac4:	f7db fa3e 	bl	2f44 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27ac8:	f7ff ff9e 	bl	27a08 <k_cpu_idle>
   27acc:	e7fc      	b.n	27ac8 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27ace:	4907      	ldr	r1, [pc, #28]	; (27aec <_SysFatalErrorHandler+0x44>)
   27ad0:	e7f7      	b.n	27ac2 <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27ad2:	4c07      	ldr	r4, [pc, #28]	; (27af0 <_SysFatalErrorHandler+0x48>)
   27ad4:	68a1      	ldr	r1, [r4, #8]
   27ad6:	4807      	ldr	r0, [pc, #28]	; (27af4 <_SysFatalErrorHandler+0x4c>)
   27ad8:	f7db fa34 	bl	2f44 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27adc:	68a0      	ldr	r0, [r4, #8]
   27ade:	f000 f80b 	bl	27af8 <_impl_k_thread_abort>
	return;
   27ae2:	bd10      	pop	{r4, pc}
   27ae4:	00031db0 	.word	0x00031db0
   27ae8:	000329b4 	.word	0x000329b4
   27aec:	000329a0 	.word	0x000329a0
   27af0:	20002780 	.word	0x20002780
   27af4:	000329d4 	.word	0x000329d4

00027af8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27af8:	b538      	push	{r3, r4, r5, lr}
   27afa:	4605      	mov	r5, r0
	__asm__ volatile(
   27afc:	f04f 0320 	mov.w	r3, #32
   27b00:	f3ef 8411 	mrs	r4, BASEPRI
   27b04:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27b08:	f001 fe28 	bl	2975c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27b0c:	4b0b      	ldr	r3, [pc, #44]	; (27b3c <_impl_k_thread_abort+0x44>)
   27b0e:	689b      	ldr	r3, [r3, #8]
   27b10:	429d      	cmp	r5, r3
   27b12:	d003      	beq.n	27b1c <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27b14:	4620      	mov	r0, r4
   27b16:	f001 fa03 	bl	28f20 <_reschedule_threads>
   27b1a:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27b1c:	4b08      	ldr	r3, [pc, #32]	; (27b40 <_impl_k_thread_abort+0x48>)
   27b1e:	685b      	ldr	r3, [r3, #4]
   27b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27b24:	b12b      	cbz	r3, 27b32 <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27b26:	4a06      	ldr	r2, [pc, #24]	; (27b40 <_impl_k_thread_abort+0x48>)
   27b28:	6853      	ldr	r3, [r2, #4]
   27b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27b2e:	6053      	str	r3, [r2, #4]
   27b30:	e7f0      	b.n	27b14 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   27b32:	f001 f9ef 	bl	28f14 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   27b36:	4620      	mov	r0, r4
   27b38:	f7ff fd32 	bl	275a0 <__swap>
   27b3c:	20002780 	.word	0x20002780
   27b40:	e000ed00 	.word	0xe000ed00

00027b44 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   27b44:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   27b46:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27b48:	4a0b      	ldr	r2, [pc, #44]	; (27b78 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27b4a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27b4c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27b4e:	bf1e      	ittt	ne
	movne	r1, #0
   27b50:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27b52:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   27b54:	f000 f8d8 	blne	27d08 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27b58:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27b5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27b5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27b62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   27b66:	4905      	ldr	r1, [pc, #20]	; (27b7c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27b68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27b6a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27b6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27b6e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   27b72:	f7ff bca5 	b.w	274c0 <_ExcExit>
   27b76:	0000      	.short	0x0000
	ldr r2, =_kernel
   27b78:	20002780 	.word	0x20002780
	ldr r1, =_sw_isr_table
   27b7c:	000000dc 	.word	0x000000dc

00027b80 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27b80:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27b82:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   27b86:	4809      	ldr	r0, [pc, #36]	; (27bac <__reset+0x2c>)
    ldr r1, =0xaa
   27b88:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27b90:	f002 fb1e 	bl	2a1d0 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27b94:	4805      	ldr	r0, [pc, #20]	; (27bac <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27b9a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27b9c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27ba0:	2002      	movs	r0, #2
    msr CONTROL, r0
   27ba2:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27ba6:	f000 b807 	b.w	27bb8 <_PrepC>
   27baa:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27bac:	2000ac68 	.word	0x2000ac68

00027bb0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27bb0:	bf30      	wfi
    b _SysNmiOnReset
   27bb2:	f7ff bffd 	b.w	27bb0 <_SysNmiOnReset>
   27bb6:	bf00      	nop

00027bb8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27bb8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27bba:	4a07      	ldr	r2, [pc, #28]	; (27bd8 <_PrepC+0x20>)
   27bbc:	4b07      	ldr	r3, [pc, #28]	; (27bdc <_PrepC+0x24>)
   27bbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27bc2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27bc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27bc8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27bcc:	f000 f9d6 	bl	27f7c <_bss_zero>
	_data_copy();
   27bd0:	f000 f9e0 	bl	27f94 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27bd4:	f000 fa00 	bl	27fd8 <_Cstart>
   27bd8:	e000ed00 	.word	0xe000ed00
   27bdc:	00000000 	.word	0x00000000

00027be0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27be0:	b508      	push	{r3, lr}
	handler();
   27be2:	f7ff ffe5 	bl	27bb0 <_SysNmiOnReset>
	_ExcExit();
   27be6:	f7ff fc6b 	bl	274c0 <_ExcExit>
   27bea:	bd08      	pop	{r3, pc}

00027bec <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27bec:	4b05      	ldr	r3, [pc, #20]	; (27c04 <_region_init+0x18>)
   27bee:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27bf0:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27bf4:	4308      	orrs	r0, r1
   27bf6:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27bfa:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27bfc:	f042 0201 	orr.w	r2, r2, #1
   27c00:	611a      	str	r2, [r3, #16]
   27c02:	4770      	bx	lr
   27c04:	e000ed90 	.word	0xe000ed90

00027c08 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27c08:	4b14      	ldr	r3, [pc, #80]	; (27c5c <_arm_mpu_config+0x54>)
   27c0a:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27c0c:	4b14      	ldr	r3, [pc, #80]	; (27c60 <_arm_mpu_config+0x58>)
   27c0e:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27c10:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27c14:	429a      	cmp	r2, r3
   27c16:	d81f      	bhi.n	27c58 <_arm_mpu_config+0x50>
{
   27c18:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27c1a:	2400      	movs	r4, #0
   27c1c:	4b10      	ldr	r3, [pc, #64]	; (27c60 <_arm_mpu_config+0x58>)
   27c1e:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27c20:	e00b      	b.n	27c3a <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27c22:	4b0e      	ldr	r3, [pc, #56]	; (27c5c <_arm_mpu_config+0x54>)
   27c24:	6859      	ldr	r1, [r3, #4]
   27c26:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27c2a:	0093      	lsls	r3, r2, #2
   27c2c:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27c2e:	6892      	ldr	r2, [r2, #8]
   27c30:	58c9      	ldr	r1, [r1, r3]
   27c32:	4620      	mov	r0, r4
   27c34:	f7ff ffda 	bl	27bec <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27c38:	3401      	adds	r4, #1
   27c3a:	4b08      	ldr	r3, [pc, #32]	; (27c5c <_arm_mpu_config+0x54>)
   27c3c:	681b      	ldr	r3, [r3, #0]
   27c3e:	429c      	cmp	r4, r3
   27c40:	d3ef      	bcc.n	27c22 <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   27c42:	2205      	movs	r2, #5
   27c44:	4b06      	ldr	r3, [pc, #24]	; (27c60 <_arm_mpu_config+0x58>)
   27c46:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27c48:	2201      	movs	r2, #1
   27c4a:	4b06      	ldr	r3, [pc, #24]	; (27c64 <_arm_mpu_config+0x5c>)
   27c4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27c52:	f3bf 8f6f 	isb	sy
   27c56:	bd10      	pop	{r4, pc}
   27c58:	4770      	bx	lr
   27c5a:	bf00      	nop
   27c5c:	2000c530 	.word	0x2000c530
   27c60:	e000ed90 	.word	0xe000ed90
   27c64:	200026ac 	.word	0x200026ac

00027c68 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27c68:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27c6a:	f7ff ffcd 	bl	27c08 <_arm_mpu_config>

	return 0;
}
   27c6e:	2000      	movs	r0, #0
   27c70:	bd08      	pop	{r3, pc}
	...

00027c74 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   27c74:	b538      	push	{r3, r4, r5, lr}
   27c76:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27c78:	4b07      	ldr	r3, [pc, #28]	; (27c98 <_sys_device_do_config_level+0x24>)
   27c7a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27c7e:	e004      	b.n	27c8a <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27c80:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   27c82:	685b      	ldr	r3, [r3, #4]
   27c84:	4620      	mov	r0, r4
   27c86:	4798      	blx	r3
								info++) {
   27c88:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27c8a:	1c6b      	adds	r3, r5, #1
   27c8c:	4a02      	ldr	r2, [pc, #8]	; (27c98 <_sys_device_do_config_level+0x24>)
   27c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27c92:	429c      	cmp	r4, r3
   27c94:	d3f4      	bcc.n	27c80 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27c96:	bd38      	pop	{r3, r4, r5, pc}
   27c98:	000329fc 	.word	0x000329fc

00027c9c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27c9c:	b538      	push	{r3, r4, r5, lr}
   27c9e:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27ca0:	4c0a      	ldr	r4, [pc, #40]	; (27ccc <device_get_binding+0x30>)
   27ca2:	e000      	b.n	27ca6 <device_get_binding+0xa>
   27ca4:	340c      	adds	r4, #12
   27ca6:	4b0a      	ldr	r3, [pc, #40]	; (27cd0 <device_get_binding+0x34>)
   27ca8:	429c      	cmp	r4, r3
   27caa:	d00c      	beq.n	27cc6 <device_get_binding+0x2a>
		if (!info->driver_api) {
   27cac:	6863      	ldr	r3, [r4, #4]
   27cae:	2b00      	cmp	r3, #0
   27cb0:	d0f8      	beq.n	27ca4 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27cb2:	6823      	ldr	r3, [r4, #0]
   27cb4:	6819      	ldr	r1, [r3, #0]
   27cb6:	42a9      	cmp	r1, r5
   27cb8:	d006      	beq.n	27cc8 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27cba:	4628      	mov	r0, r5
   27cbc:	f7d8 fba4 	bl	408 <strcmp>
   27cc0:	2800      	cmp	r0, #0
   27cc2:	d1ef      	bne.n	27ca4 <device_get_binding+0x8>
   27cc4:	e000      	b.n	27cc8 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27cc6:	2400      	movs	r4, #0
}
   27cc8:	4620      	mov	r0, r4
   27cca:	bd38      	pop	{r3, r4, r5, pc}
   27ccc:	2000cf30 	.word	0x2000cf30
   27cd0:	2000cff0 	.word	0x2000cff0

00027cd4 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27cd4:	4b01      	ldr	r3, [pc, #4]	; (27cdc <set_kernel_idle_time_in_ticks+0x8>)
   27cd6:	6158      	str	r0, [r3, #20]
   27cd8:	4770      	bx	lr
   27cda:	bf00      	nop
   27cdc:	20002780 	.word	0x20002780

00027ce0 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27ce0:	b510      	push	{r4, lr}
   27ce2:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27ce4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27ce8:	d003      	beq.n	27cf2 <_sys_power_save_idle+0x12>
   27cea:	4b06      	ldr	r3, [pc, #24]	; (27d04 <_sys_power_save_idle+0x24>)
   27cec:	681b      	ldr	r3, [r3, #0]
   27cee:	4298      	cmp	r0, r3
   27cf0:	db02      	blt.n	27cf8 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27cf2:	4620      	mov	r0, r4
   27cf4:	f7da fb9a 	bl	242c <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27cf8:	4620      	mov	r0, r4
   27cfa:	f7ff ffeb 	bl	27cd4 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27cfe:	f7ff fe83 	bl	27a08 <k_cpu_idle>
   27d02:	bd10      	pop	{r4, pc}
   27d04:	2000c574 	.word	0x2000c574

00027d08 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27d08:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27d0a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27d0e:	d003      	beq.n	27d18 <_sys_power_save_idle_exit+0x10>
   27d10:	4b03      	ldr	r3, [pc, #12]	; (27d20 <_sys_power_save_idle_exit+0x18>)
   27d12:	681b      	ldr	r3, [r3, #0]
   27d14:	4298      	cmp	r0, r3
   27d16:	db01      	blt.n	27d1c <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27d18:	f7da fb9e 	bl	2458 <_timer_idle_exit>
   27d1c:	bd08      	pop	{r3, pc}
   27d1e:	bf00      	nop
   27d20:	2000c574 	.word	0x2000c574

00027d24 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27d24:	b508      	push	{r3, lr}
   27d26:	e005      	b.n	27d34 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d28:	2300      	movs	r3, #0
   27d2a:	e00e      	b.n	27d4a <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27d30:	f7ff ffd6 	bl	27ce0 <_sys_power_save_idle>
   27d34:	f04f 0220 	mov.w	r2, #32
   27d38:	f3ef 8311 	mrs	r3, BASEPRI
   27d3c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27d40:	4a04      	ldr	r2, [pc, #16]	; (27d54 <idle+0x30>)
   27d42:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d46:	4293      	cmp	r3, r2
   27d48:	d0ee      	beq.n	27d28 <idle+0x4>
   27d4a:	2b00      	cmp	r3, #0
   27d4c:	d0ee      	beq.n	27d2c <idle+0x8>
   27d4e:	6918      	ldr	r0, [r3, #16]
   27d50:	e7ee      	b.n	27d30 <idle+0xc>
   27d52:	bf00      	nop
   27d54:	20002780 	.word	0x20002780

00027d58 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27d58:	b480      	push	{r7}
   27d5a:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27d5c:	4b07      	ldr	r3, [pc, #28]	; (27d7c <switch_to_main_thread+0x24>)
   27d5e:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   27d62:	4907      	ldr	r1, [pc, #28]	; (27d80 <switch_to_main_thread+0x28>)
   27d64:	4a07      	ldr	r2, [pc, #28]	; (27d84 <switch_to_main_thread+0x2c>)
   27d66:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27d68:	4c07      	ldr	r4, [pc, #28]	; (27d88 <switch_to_main_thread+0x30>)
   27d6a:	4a08      	ldr	r2, [pc, #32]	; (27d8c <switch_to_main_thread+0x34>)
   27d6c:	f383 8809 	msr	PSP, r3
   27d70:	2100      	movs	r1, #0
   27d72:	f381 8811 	msr	BASEPRI, r1
   27d76:	4610      	mov	r0, r2
   27d78:	4720      	bx	r4
   27d7a:	bf00      	nop
   27d7c:	2000ab28 	.word	0x2000ab28
   27d80:	20002718 	.word	0x20002718
   27d84:	20002780 	.word	0x20002780
   27d88:	0002954d 	.word	0x0002954d
   27d8c:	00027fb1 	.word	0x00027fb1

00027d90 <prepare_multithreading>:
{
   27d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d92:	b087      	sub	sp, #28
	_IntLibInit();
   27d94:	f7ff fbaa 	bl	274ec <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27d98:	2300      	movs	r3, #0
   27d9a:	e007      	b.n	27dac <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27d9c:	1d18      	adds	r0, r3, #4
   27d9e:	4927      	ldr	r1, [pc, #156]	; (27e3c <prepare_multithreading+0xac>)
   27da0:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27da4:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27da8:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27daa:	3301      	adds	r3, #1
   27dac:	2b1f      	cmp	r3, #31
   27dae:	ddf5      	ble.n	27d9c <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27db0:	4e22      	ldr	r6, [pc, #136]	; (27e3c <prepare_multithreading+0xac>)
   27db2:	4d23      	ldr	r5, [pc, #140]	; (27e40 <prepare_multithreading+0xb0>)
   27db4:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27db6:	2701      	movs	r7, #1
   27db8:	9704      	str	r7, [sp, #16]
   27dba:	2400      	movs	r4, #0
   27dbc:	9403      	str	r4, [sp, #12]
   27dbe:	9402      	str	r4, [sp, #8]
   27dc0:	9401      	str	r4, [sp, #4]
   27dc2:	9400      	str	r4, [sp, #0]
   27dc4:	4b1f      	ldr	r3, [pc, #124]	; (27e44 <prepare_multithreading+0xb4>)
   27dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27dca:	491f      	ldr	r1, [pc, #124]	; (27e48 <prepare_multithreading+0xb8>)
   27dcc:	4628      	mov	r0, r5
   27dce:	f001 fc9b 	bl	29708 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27dd2:	7a6b      	ldrb	r3, [r5, #9]
   27dd4:	f023 0304 	bic.w	r3, r3, #4
   27dd8:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27dda:	4628      	mov	r0, r5
   27ddc:	f000 ff08 	bl	28bf0 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27de0:	4d1a      	ldr	r5, [pc, #104]	; (27e4c <prepare_multithreading+0xbc>)
   27de2:	9704      	str	r7, [sp, #16]
   27de4:	230f      	movs	r3, #15
   27de6:	9303      	str	r3, [sp, #12]
   27de8:	9402      	str	r4, [sp, #8]
   27dea:	9401      	str	r4, [sp, #4]
   27dec:	9400      	str	r4, [sp, #0]
   27dee:	4b18      	ldr	r3, [pc, #96]	; (27e50 <prepare_multithreading+0xc0>)
   27df0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27df4:	4917      	ldr	r1, [pc, #92]	; (27e54 <prepare_multithreading+0xc4>)
   27df6:	4628      	mov	r0, r5
   27df8:	f001 fc86 	bl	29708 <_setup_new_thread>
   27dfc:	7a6b      	ldrb	r3, [r5, #9]
   27dfe:	f023 0304 	bic.w	r3, r3, #4
   27e02:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27e04:	4628      	mov	r0, r5
   27e06:	f000 fef3 	bl	28bf0 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27e0a:	f106 030c 	add.w	r3, r6, #12
   27e0e:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27e10:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27e12:	4b11      	ldr	r3, [pc, #68]	; (27e58 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27e14:	f383 8808 	msr	MSP, r3
   27e18:	4b10      	ldr	r3, [pc, #64]	; (27e5c <prepare_multithreading+0xcc>)
   27e1a:	22e0      	movs	r2, #224	; 0xe0
   27e1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27e20:	77dc      	strb	r4, [r3, #31]
   27e22:	761c      	strb	r4, [r3, #24]
   27e24:	765c      	strb	r4, [r3, #25]
   27e26:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27e2a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   27e2e:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   27e30:	f7ff fd5e 	bl	278f0 <_FaultInit>
	_CpuIdleInit();
   27e34:	f7ff fde2 	bl	279fc <_CpuIdleInit>
}
   27e38:	b007      	add	sp, #28
   27e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27e3c:	20002780 	.word	0x20002780
   27e40:	20002718 	.word	0x20002718
   27e44:	00027fb1 	.word	0x00027fb1
   27e48:	2000a328 	.word	0x2000a328
   27e4c:	200026b0 	.word	0x200026b0
   27e50:	00027d25 	.word	0x00027d25
   27e54:	2000ab28 	.word	0x2000ab28
   27e58:	2000b468 	.word	0x2000b468
   27e5c:	e000ed00 	.word	0xe000ed00

00027e60 <k_call_stacks_analyze>:
{
   27e60:	b500      	push	{lr}
   27e62:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   27e64:	483a      	ldr	r0, [pc, #232]	; (27f50 <k_call_stacks_analyze+0xf0>)
   27e66:	f7db f86d 	bl	2f44 <printk>
   27e6a:	2200      	movs	r2, #0
	size_t unused = 0;
   27e6c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27e6e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27e72:	d206      	bcs.n	27e82 <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   27e74:	4937      	ldr	r1, [pc, #220]	; (27f54 <k_call_stacks_analyze+0xf4>)
   27e76:	5c89      	ldrb	r1, [r1, r2]
   27e78:	29aa      	cmp	r1, #170	; 0xaa
   27e7a:	d102      	bne.n	27e82 <k_call_stacks_analyze+0x22>
			unused++;
   27e7c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27e7e:	3201      	adds	r2, #1
   27e80:	e7f5      	b.n	27e6e <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   27e82:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27e86:	2264      	movs	r2, #100	; 0x64
   27e88:	fb02 f201 	mul.w	r2, r2, r1
   27e8c:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27e8e:	9202      	str	r2, [sp, #8]
   27e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27e94:	9201      	str	r2, [sp, #4]
   27e96:	9100      	str	r1, [sp, #0]
   27e98:	492f      	ldr	r1, [pc, #188]	; (27f58 <k_call_stacks_analyze+0xf8>)
   27e9a:	4830      	ldr	r0, [pc, #192]	; (27f5c <k_call_stacks_analyze+0xfc>)
   27e9c:	f7db f852 	bl	2f44 <printk>
	for (i = 0; i < size; i++) {
   27ea0:	2200      	movs	r2, #0
	size_t unused = 0;
   27ea2:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27ea4:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27ea8:	d206      	bcs.n	27eb8 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   27eaa:	492d      	ldr	r1, [pc, #180]	; (27f60 <k_call_stacks_analyze+0x100>)
   27eac:	5c89      	ldrb	r1, [r1, r2]
   27eae:	29aa      	cmp	r1, #170	; 0xaa
   27eb0:	d102      	bne.n	27eb8 <k_call_stacks_analyze+0x58>
			unused++;
   27eb2:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27eb4:	3201      	adds	r2, #1
   27eb6:	e7f5      	b.n	27ea4 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27eb8:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   27ebc:	2264      	movs	r2, #100	; 0x64
   27ebe:	fb02 f201 	mul.w	r2, r2, r1
   27ec2:	4828      	ldr	r0, [pc, #160]	; (27f64 <k_call_stacks_analyze+0x104>)
   27ec4:	fba0 0202 	umull	r0, r2, r0, r2
   27ec8:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27eca:	9202      	str	r2, [sp, #8]
   27ecc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27ed0:	9201      	str	r2, [sp, #4]
   27ed2:	9100      	str	r1, [sp, #0]
   27ed4:	4924      	ldr	r1, [pc, #144]	; (27f68 <k_call_stacks_analyze+0x108>)
   27ed6:	4821      	ldr	r0, [pc, #132]	; (27f5c <k_call_stacks_analyze+0xfc>)
   27ed8:	f7db f834 	bl	2f44 <printk>
	for (i = 0; i < size; i++) {
   27edc:	2200      	movs	r2, #0
	size_t unused = 0;
   27ede:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27ee0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27ee4:	d206      	bcs.n	27ef4 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   27ee6:	4921      	ldr	r1, [pc, #132]	; (27f6c <k_call_stacks_analyze+0x10c>)
   27ee8:	5c89      	ldrb	r1, [r1, r2]
   27eea:	29aa      	cmp	r1, #170	; 0xaa
   27eec:	d102      	bne.n	27ef4 <k_call_stacks_analyze+0x94>
			unused++;
   27eee:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27ef0:	3201      	adds	r2, #1
   27ef2:	e7f5      	b.n	27ee0 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   27ef4:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27ef8:	2264      	movs	r2, #100	; 0x64
   27efa:	fb02 f201 	mul.w	r2, r2, r1
   27efe:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27f00:	9202      	str	r2, [sp, #8]
   27f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27f06:	9201      	str	r2, [sp, #4]
   27f08:	9100      	str	r1, [sp, #0]
   27f0a:	4919      	ldr	r1, [pc, #100]	; (27f70 <k_call_stacks_analyze+0x110>)
   27f0c:	4813      	ldr	r0, [pc, #76]	; (27f5c <k_call_stacks_analyze+0xfc>)
   27f0e:	f7db f819 	bl	2f44 <printk>
	for (i = 0; i < size; i++) {
   27f12:	2200      	movs	r2, #0
	size_t unused = 0;
   27f14:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27f16:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   27f1a:	d206      	bcs.n	27f2a <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   27f1c:	4915      	ldr	r1, [pc, #84]	; (27f74 <k_call_stacks_analyze+0x114>)
   27f1e:	5c89      	ldrb	r1, [r1, r2]
   27f20:	29aa      	cmp	r1, #170	; 0xaa
   27f22:	d102      	bne.n	27f2a <k_call_stacks_analyze+0xca>
			unused++;
   27f24:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27f26:	3201      	adds	r2, #1
   27f28:	e7f5      	b.n	27f16 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   27f2a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   27f2e:	2264      	movs	r2, #100	; 0x64
   27f30:	fb02 f201 	mul.w	r2, r2, r1
   27f34:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27f36:	9202      	str	r2, [sp, #8]
   27f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27f3c:	9201      	str	r2, [sp, #4]
   27f3e:	9100      	str	r1, [sp, #0]
   27f40:	490d      	ldr	r1, [pc, #52]	; (27f78 <k_call_stacks_analyze+0x118>)
   27f42:	4806      	ldr	r0, [pc, #24]	; (27f5c <k_call_stacks_analyze+0xfc>)
   27f44:	f7da fffe 	bl	2f44 <printk>
}
   27f48:	b005      	add	sp, #20
   27f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   27f4e:	bf00      	nop
   27f50:	00032a18 	.word	0x00032a18
   27f54:	2000a328 	.word	0x2000a328
   27f58:	00032a28 	.word	0x00032a28
   27f5c:	00030dc8 	.word	0x00030dc8
   27f60:	2000ab28 	.word	0x2000ab28
   27f64:	cccccccd 	.word	0xcccccccd
   27f68:	00032a34 	.word	0x00032a34
   27f6c:	2000ac68 	.word	0x2000ac68
   27f70:	00032a40 	.word	0x00032a40
   27f74:	2000b468 	.word	0x2000b468
   27f78:	00032a4c 	.word	0x00032a4c

00027f7c <_bss_zero>:
{
   27f7c:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   27f7e:	4803      	ldr	r0, [pc, #12]	; (27f8c <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   27f80:	4a03      	ldr	r2, [pc, #12]	; (27f90 <_bss_zero+0x14>)
   27f82:	1a12      	subs	r2, r2, r0
   27f84:	2100      	movs	r1, #0
   27f86:	f002 f923 	bl	2a1d0 <memset>
   27f8a:	bd08      	pop	{r3, pc}
   27f8c:	20000000 	.word	0x20000000
   27f90:	20002c18 	.word	0x20002c18

00027f94 <_data_copy>:
{
   27f94:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   27f96:	4803      	ldr	r0, [pc, #12]	; (27fa4 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   27f98:	4a03      	ldr	r2, [pc, #12]	; (27fa8 <_data_copy+0x14>)
   27f9a:	1a12      	subs	r2, r2, r0
   27f9c:	4903      	ldr	r1, [pc, #12]	; (27fac <_data_copy+0x18>)
   27f9e:	f7d8 f98f 	bl	2c0 <memcpy>
   27fa2:	bd08      	pop	{r3, pc}
   27fa4:	2000b868 	.word	0x2000b868
   27fa8:	2000d4b4 	.word	0x2000d4b4
   27fac:	00032cd4 	.word	0x00032cd4

00027fb0 <_main>:
{
   27fb0:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   27fb2:	2002      	movs	r0, #2
   27fb4:	f7ff fe5e 	bl	27c74 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   27fb8:	2003      	movs	r0, #3
   27fba:	f7ff fe5b 	bl	27c74 <_sys_device_do_config_level>
	_init_static_threads();
   27fbe:	f001 fc11 	bl	297e4 <_init_static_threads>
	main();
   27fc2:	f7d9 fcd1 	bl	1968 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   27fc6:	4a03      	ldr	r2, [pc, #12]	; (27fd4 <_main+0x24>)
   27fc8:	7a13      	ldrb	r3, [r2, #8]
   27fca:	f023 0301 	bic.w	r3, r3, #1
   27fce:	7213      	strb	r3, [r2, #8]
   27fd0:	bd08      	pop	{r3, pc}
   27fd2:	bf00      	nop
   27fd4:	20002718 	.word	0x20002718

00027fd8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   27fd8:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   27fda:	2000      	movs	r0, #0
   27fdc:	f7ff fed8 	bl	27d90 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   27fe0:	2000      	movs	r0, #0
   27fe2:	f7ff fe47 	bl	27c74 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   27fe6:	2001      	movs	r0, #1
   27fe8:	f7ff fe44 	bl	27c74 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   27fec:	f7ff feb4 	bl	27d58 <switch_to_main_thread>

00027ff0 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   27ff0:	2200      	movs	r2, #0
   27ff2:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   27ff4:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   27ff6:	e005      	b.n	28004 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   27ff8:	6941      	ldr	r1, [r0, #20]
   27ffa:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   27ffc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   27ffe:	68c1      	ldr	r1, [r0, #12]
   28000:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   28002:	3201      	adds	r2, #1
   28004:	6881      	ldr	r1, [r0, #8]
   28006:	428a      	cmp	r2, r1
   28008:	d3f6      	bcc.n	27ff8 <create_free_list+0x8>
	}
}
   2800a:	4770      	bx	lr

0002800c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2800c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   2800e:	4c05      	ldr	r4, [pc, #20]	; (28024 <init_mem_slab_module+0x18>)
   28010:	e003      	b.n	2801a <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   28012:	4620      	mov	r0, r4
   28014:	f7ff ffec 	bl	27ff0 <create_free_list>
	     slab++) {
   28018:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   2801a:	4b03      	ldr	r3, [pc, #12]	; (28028 <init_mem_slab_module+0x1c>)
   2801c:	429c      	cmp	r4, r3
   2801e:	d3f8      	bcc.n	28012 <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   28020:	2000      	movs	r0, #0
   28022:	bd10      	pop	{r4, pc}
   28024:	2000cffc 	.word	0x2000cffc
   28028:	2000d034 	.word	0x2000d034

0002802c <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2802c:	b538      	push	{r3, r4, r5, lr}
   2802e:	f04f 0320 	mov.w	r3, #32
   28032:	f3ef 8411 	mrs	r4, BASEPRI
   28036:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   2803a:	6943      	ldr	r3, [r0, #20]
   2803c:	b15b      	cbz	r3, 28056 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   2803e:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   28040:	6943      	ldr	r3, [r0, #20]
   28042:	681b      	ldr	r3, [r3, #0]
   28044:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   28046:	6983      	ldr	r3, [r0, #24]
   28048:	3301      	adds	r3, #1
   2804a:	6183      	str	r3, [r0, #24]
		result = 0;
   2804c:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2804e:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   28052:	4618      	mov	r0, r3
   28054:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   28056:	b922      	cbnz	r2, 28062 <k_mem_slab_alloc+0x36>
		*mem = NULL;
   28058:	2300      	movs	r3, #0
   2805a:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   2805c:	f06f 030b 	mvn.w	r3, #11
   28060:	e7f5      	b.n	2804e <k_mem_slab_alloc+0x22>
   28062:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   28064:	4611      	mov	r1, r2
   28066:	f000 fed7 	bl	28e18 <_pend_current_thread>
	_update_time_slice_before_swap();
   2806a:	f000 ff53 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   2806e:	4620      	mov	r0, r4
   28070:	f7ff fa96 	bl	275a0 <__swap>
		if (result == 0) {
   28074:	4603      	mov	r3, r0
   28076:	2800      	cmp	r0, #0
   28078:	d1eb      	bne.n	28052 <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   2807a:	4a02      	ldr	r2, [pc, #8]	; (28084 <k_mem_slab_alloc+0x58>)
   2807c:	6892      	ldr	r2, [r2, #8]
   2807e:	68d2      	ldr	r2, [r2, #12]
   28080:	602a      	str	r2, [r5, #0]
   28082:	e7e6      	b.n	28052 <k_mem_slab_alloc+0x26>
   28084:	20002780 	.word	0x20002780

00028088 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28088:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2808a:	f04f 0320 	mov.w	r3, #32
   2808e:	f3ef 8411 	mrs	r4, BASEPRI
   28092:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   28096:	4b3d      	ldr	r3, [pc, #244]	; (2818c <k_mem_slab_free+0x104>)
   28098:	681b      	ldr	r3, [r3, #0]
   2809a:	2b00      	cmp	r3, #0
   2809c:	d13a      	bne.n	28114 <k_mem_slab_free+0x8c>
	return list->head == list;
   2809e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   280a0:	4298      	cmp	r0, r3
   280a2:	d048      	beq.n	28136 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   280a4:	b14b      	cbz	r3, 280ba <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   280a6:	685a      	ldr	r2, [r3, #4]
   280a8:	681d      	ldr	r5, [r3, #0]
   280aa:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   280ac:	681a      	ldr	r2, [r3, #0]
   280ae:	685d      	ldr	r5, [r3, #4]
   280b0:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   280b2:	7a5a      	ldrb	r2, [r3, #9]
   280b4:	f022 0202 	bic.w	r2, r2, #2
   280b8:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   280ba:	2b00      	cmp	r3, #0
   280bc:	d05c      	beq.n	28178 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   280be:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   280c0:	2100      	movs	r1, #0
   280c2:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   280c4:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   280c6:	6a19      	ldr	r1, [r3, #32]
   280c8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   280cc:	d013      	beq.n	280f6 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   280ce:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   280d2:	482f      	ldr	r0, [pc, #188]	; (28190 <k_mem_slab_free+0x108>)
   280d4:	6900      	ldr	r0, [r0, #16]
   280d6:	4282      	cmp	r2, r0
   280d8:	d004      	beq.n	280e4 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   280da:	b102      	cbz	r2, 280de <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   280dc:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   280de:	6910      	ldr	r0, [r2, #16]
   280e0:	4401      	add	r1, r0
   280e2:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   280e4:	695a      	ldr	r2, [r3, #20]
   280e6:	6919      	ldr	r1, [r3, #16]
   280e8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   280ea:	691a      	ldr	r2, [r3, #16]
   280ec:	6959      	ldr	r1, [r3, #20]
   280ee:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   280f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   280f4:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   280f6:	7a5a      	ldrb	r2, [r3, #9]
   280f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   280fc:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   280fe:	f012 0f1b 	tst.w	r2, #27
   28102:	d11c      	bne.n	2813e <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28104:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28106:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2810a:	d016      	beq.n	2813a <k_mem_slab_free+0xb2>
   2810c:	2200      	movs	r2, #0
   2810e:	e017      	b.n	28140 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28110:	2300      	movs	r3, #0
   28112:	e003      	b.n	2811c <k_mem_slab_free+0x94>
   28114:	4605      	mov	r5, r0
	return list->head == list;
   28116:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28118:	4298      	cmp	r0, r3
   2811a:	d0f9      	beq.n	28110 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2811c:	2b00      	cmp	r3, #0
   2811e:	d0c1      	beq.n	280a4 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28120:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   28122:	f112 0f02 	cmn.w	r2, #2
   28126:	d1bd      	bne.n	280a4 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   28128:	686a      	ldr	r2, [r5, #4]
   2812a:	4293      	cmp	r3, r2
   2812c:	d001      	beq.n	28132 <k_mem_slab_free+0xaa>
   2812e:	681b      	ldr	r3, [r3, #0]
   28130:	e7f4      	b.n	2811c <k_mem_slab_free+0x94>
   28132:	2300      	movs	r3, #0
   28134:	e7f2      	b.n	2811c <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28136:	2300      	movs	r3, #0
   28138:	e7b4      	b.n	280a4 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   2813a:	2201      	movs	r2, #1
   2813c:	e000      	b.n	28140 <k_mem_slab_free+0xb8>
   2813e:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   28140:	b94a      	cbnz	r2, 28156 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   28142:	4b13      	ldr	r3, [pc, #76]	; (28190 <k_mem_slab_free+0x108>)
   28144:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28146:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28148:	2b7f      	cmp	r3, #127	; 0x7f
   2814a:	d908      	bls.n	2815e <k_mem_slab_free+0xd6>
   2814c:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   2814e:	b96b      	cbnz	r3, 2816c <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28150:	f384 8811 	msr	BASEPRI, r4
   28154:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28156:	4618      	mov	r0, r3
   28158:	f000 fd4a 	bl	28bf0 <_add_thread_to_ready_q>
   2815c:	e7f1      	b.n	28142 <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   2815e:	f000 fe6b 	bl	28e38 <__must_switch_threads>
   28162:	4603      	mov	r3, r0
   28164:	2800      	cmp	r0, #0
   28166:	d0f2      	beq.n	2814e <k_mem_slab_free+0xc6>
   28168:	2301      	movs	r3, #1
   2816a:	e7f0      	b.n	2814e <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   2816c:	f000 fed2 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28170:	4620      	mov	r0, r4
   28172:	f7ff fa15 	bl	275a0 <__swap>
   28176:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   28178:	680b      	ldr	r3, [r1, #0]
   2817a:	6942      	ldr	r2, [r0, #20]
   2817c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2817e:	680b      	ldr	r3, [r1, #0]
   28180:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   28182:	6983      	ldr	r3, [r0, #24]
   28184:	3b01      	subs	r3, #1
   28186:	6183      	str	r3, [r0, #24]
   28188:	e7e2      	b.n	28150 <k_mem_slab_free+0xc8>
   2818a:	bf00      	nop
   2818c:	20002b68 	.word	0x20002b68
   28190:	20002780 	.word	0x20002780

00028194 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   28194:	4288      	cmp	r0, r1
   28196:	da00      	bge.n	2819a <new_prio_for_inheritance+0x6>
   28198:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2819a:	2900      	cmp	r1, #0
   2819c:	db01      	blt.n	281a2 <new_prio_for_inheritance+0xe>
   2819e:	4608      	mov	r0, r1
   281a0:	4770      	bx	lr
   281a2:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   281a4:	4770      	bx	lr

000281a6 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   281a6:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   281a8:	6884      	ldr	r4, [r0, #8]
   281aa:	f994 300a 	ldrsb.w	r3, [r4, #10]
   281ae:	428b      	cmp	r3, r1
   281b0:	d00e      	beq.n	281d0 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   281b2:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   281b4:	f013 0f1f 	tst.w	r3, #31
   281b8:	d107      	bne.n	281ca <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   281ba:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   281bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   281c0:	d001      	beq.n	281c6 <adjust_owner_prio+0x20>
   281c2:	2300      	movs	r3, #0
   281c4:	e002      	b.n	281cc <adjust_owner_prio+0x26>
   281c6:	2301      	movs	r3, #1
   281c8:	e000      	b.n	281cc <adjust_owner_prio+0x26>
   281ca:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   281cc:	b90b      	cbnz	r3, 281d2 <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   281ce:	72a1      	strb	r1, [r4, #10]
   281d0:	bd38      	pop	{r3, r4, r5, pc}
   281d2:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   281d4:	4620      	mov	r0, r4
   281d6:	f000 fd2b 	bl	28c30 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   281da:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   281dc:	4620      	mov	r0, r4
   281de:	f000 fd07 	bl	28bf0 <_add_thread_to_ready_q>
   281e2:	bd38      	pop	{r3, r4, r5, pc}

000281e4 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   281e4:	b570      	push	{r4, r5, r6, lr}
   281e6:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   281e8:	4b32      	ldr	r3, [pc, #200]	; (282b4 <_impl_k_mutex_lock+0xd0>)
   281ea:	689a      	ldr	r2, [r3, #8]
   281ec:	7ad3      	ldrb	r3, [r2, #11]
   281ee:	3b01      	subs	r3, #1
   281f0:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   281f2:	68c3      	ldr	r3, [r0, #12]
   281f4:	b97b      	cbnz	r3, 28216 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   281f6:	2b00      	cmp	r3, #0
   281f8:	d133      	bne.n	28262 <_impl_k_mutex_lock+0x7e>
   281fa:	4a2e      	ldr	r2, [pc, #184]	; (282b4 <_impl_k_mutex_lock+0xd0>)
   281fc:	6892      	ldr	r2, [r2, #8]
   281fe:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   28202:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   28204:	3301      	adds	r3, #1
   28206:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   28208:	4b2a      	ldr	r3, [pc, #168]	; (282b4 <_impl_k_mutex_lock+0xd0>)
   2820a:	689b      	ldr	r3, [r3, #8]
   2820c:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   2820e:	f000 fea1 	bl	28f54 <k_sched_unlock>

		return 0;
   28212:	2000      	movs	r0, #0
   28214:	bd70      	pop	{r4, r5, r6, pc}
   28216:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   28218:	6881      	ldr	r1, [r0, #8]
   2821a:	4a26      	ldr	r2, [pc, #152]	; (282b4 <_impl_k_mutex_lock+0xd0>)
   2821c:	6892      	ldr	r2, [r2, #8]
   2821e:	4291      	cmp	r1, r2
   28220:	d0e9      	beq.n	281f6 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   28222:	b305      	cbz	r5, 28266 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   28224:	f991 100a 	ldrsb.w	r1, [r1, #10]
   28228:	f992 000a 	ldrsb.w	r0, [r2, #10]
   2822c:	f7ff ffb2 	bl	28194 <new_prio_for_inheritance>
	__asm__ volatile(
   28230:	f04f 0320 	mov.w	r3, #32
   28234:	f3ef 8611 	mrs	r6, BASEPRI
   28238:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2823c:	68a3      	ldr	r3, [r4, #8]
   2823e:	f993 300a 	ldrsb.w	r3, [r3, #10]
   28242:	4298      	cmp	r0, r3
   28244:	db14      	blt.n	28270 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   28246:	4629      	mov	r1, r5
   28248:	4620      	mov	r0, r4
   2824a:	f000 fde5 	bl	28e18 <_pend_current_thread>
	_update_time_slice_before_swap();
   2824e:	f000 fe61 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28252:	4630      	mov	r0, r6
   28254:	f7ff f9a4 	bl	275a0 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   28258:	b978      	cbnz	r0, 2827a <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   2825a:	f000 fe7b 	bl	28f54 <k_sched_unlock>
		return 0;
   2825e:	2000      	movs	r0, #0
   28260:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   28262:	6922      	ldr	r2, [r4, #16]
   28264:	e7cd      	b.n	28202 <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   28266:	f000 fe75 	bl	28f54 <k_sched_unlock>
		return -EBUSY;
   2826a:	f06f 000f 	mvn.w	r0, #15
   2826e:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   28270:	4601      	mov	r1, r0
   28272:	4620      	mov	r0, r4
   28274:	f7ff ff97 	bl	281a6 <adjust_owner_prio>
   28278:	e7e5      	b.n	28246 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   2827a:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2827c:	429c      	cmp	r4, r3
   2827e:	d016      	beq.n	282ae <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   28280:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   28282:	b123      	cbz	r3, 2828e <_impl_k_mutex_lock+0xaa>
   28284:	f993 000a 	ldrsb.w	r0, [r3, #10]
   28288:	f7ff ff84 	bl	28194 <new_prio_for_inheritance>
   2828c:	4601      	mov	r1, r0
   2828e:	f04f 0320 	mov.w	r3, #32
   28292:	f3ef 8511 	mrs	r5, BASEPRI
   28296:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   2829a:	4620      	mov	r0, r4
   2829c:	f7ff ff83 	bl	281a6 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   282a0:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   282a4:	f000 fe56 	bl	28f54 <k_sched_unlock>

	return -EAGAIN;
   282a8:	f06f 000a 	mvn.w	r0, #10
}
   282ac:	bd70      	pop	{r4, r5, r6, pc}
   282ae:	2300      	movs	r3, #0
   282b0:	e7e6      	b.n	28280 <_impl_k_mutex_lock+0x9c>
   282b2:	bf00      	nop
   282b4:	20002780 	.word	0x20002780

000282b8 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   282b8:	b570      	push	{r4, r5, r6, lr}
   282ba:	4b40      	ldr	r3, [pc, #256]	; (283bc <_impl_k_mutex_unlock+0x104>)
   282bc:	689a      	ldr	r2, [r3, #8]
   282be:	7ad3      	ldrb	r3, [r2, #11]
   282c0:	3b01      	subs	r3, #1
   282c2:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   282c4:	68c3      	ldr	r3, [r0, #12]
   282c6:	3b01      	subs	r3, #1
   282c8:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   282ca:	2b00      	cmp	r3, #0
   282cc:	d143      	bne.n	28356 <_impl_k_mutex_unlock+0x9e>
   282ce:	4605      	mov	r5, r0
	__asm__ volatile(
   282d0:	f04f 0320 	mov.w	r3, #32
   282d4:	f3ef 8611 	mrs	r6, BASEPRI
   282d8:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   282dc:	6901      	ldr	r1, [r0, #16]
   282de:	f7ff ff62 	bl	281a6 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   282e2:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   282e4:	4b36      	ldr	r3, [pc, #216]	; (283c0 <_impl_k_mutex_unlock+0x108>)
   282e6:	681b      	ldr	r3, [r3, #0]
   282e8:	2b00      	cmp	r3, #0
   282ea:	d139      	bne.n	28360 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   282ec:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282ee:	42a5      	cmp	r5, r4
   282f0:	d046      	beq.n	28380 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   282f2:	b14c      	cbz	r4, 28308 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   282f4:	6863      	ldr	r3, [r4, #4]
   282f6:	6822      	ldr	r2, [r4, #0]
   282f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   282fa:	6823      	ldr	r3, [r4, #0]
   282fc:	6862      	ldr	r2, [r4, #4]
   282fe:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28300:	7a63      	ldrb	r3, [r4, #9]
   28302:	f023 0302 	bic.w	r3, r3, #2
   28306:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   28308:	2c00      	cmp	r4, #0
   2830a:	d051      	beq.n	283b0 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2830c:	6a22      	ldr	r2, [r4, #32]
   2830e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28312:	d013      	beq.n	2833c <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28314:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28318:	4928      	ldr	r1, [pc, #160]	; (283bc <_impl_k_mutex_unlock+0x104>)
   2831a:	6909      	ldr	r1, [r1, #16]
   2831c:	428b      	cmp	r3, r1
   2831e:	d004      	beq.n	2832a <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28320:	b103      	cbz	r3, 28324 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   28322:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28324:	6919      	ldr	r1, [r3, #16]
   28326:	440a      	add	r2, r1
   28328:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2832a:	6963      	ldr	r3, [r4, #20]
   2832c:	6922      	ldr	r2, [r4, #16]
   2832e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28330:	6923      	ldr	r3, [r4, #16]
   28332:	6962      	ldr	r2, [r4, #20]
   28334:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2833a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2833c:	7a63      	ldrb	r3, [r4, #9]
   2833e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28342:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28344:	f013 0f1b 	tst.w	r3, #27
   28348:	d11e      	bne.n	28388 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2834a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2834c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28350:	d018      	beq.n	28384 <_impl_k_mutex_unlock+0xcc>
   28352:	2300      	movs	r3, #0
   28354:	e019      	b.n	2838a <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   28356:	f000 fdfd 	bl	28f54 <k_sched_unlock>
		return;
   2835a:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2835c:	2400      	movs	r4, #0
   2835e:	e002      	b.n	28366 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   28360:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28362:	42a5      	cmp	r5, r4
   28364:	d0fa      	beq.n	2835c <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28366:	2c00      	cmp	r4, #0
   28368:	d0c3      	beq.n	282f2 <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2836a:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2836c:	f113 0f02 	cmn.w	r3, #2
   28370:	d1bf      	bne.n	282f2 <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   28372:	6853      	ldr	r3, [r2, #4]
   28374:	429c      	cmp	r4, r3
   28376:	d001      	beq.n	2837c <_impl_k_mutex_unlock+0xc4>
   28378:	6824      	ldr	r4, [r4, #0]
   2837a:	e7f4      	b.n	28366 <_impl_k_mutex_unlock+0xae>
   2837c:	2400      	movs	r4, #0
   2837e:	e7f2      	b.n	28366 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28380:	2400      	movs	r4, #0
   28382:	e7b6      	b.n	282f2 <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   28384:	2301      	movs	r3, #1
   28386:	e000      	b.n	2838a <_impl_k_mutex_unlock+0xd2>
   28388:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2838a:	b96b      	cbnz	r3, 283a8 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2838c:	f386 8811 	msr	BASEPRI, r6
   28390:	2300      	movs	r3, #0
   28392:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   28394:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   28396:	68eb      	ldr	r3, [r5, #12]
   28398:	3301      	adds	r3, #1
   2839a:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2839c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   283a0:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   283a2:	f000 fdd7 	bl	28f54 <k_sched_unlock>
   283a6:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   283a8:	4620      	mov	r0, r4
   283aa:	f000 fc21 	bl	28bf0 <_add_thread_to_ready_q>
   283ae:	e7ed      	b.n	2838c <_impl_k_mutex_unlock+0xd4>
   283b0:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   283b4:	2300      	movs	r3, #0
   283b6:	60ab      	str	r3, [r5, #8]
   283b8:	e7f3      	b.n	283a2 <_impl_k_mutex_unlock+0xea>
   283ba:	bf00      	nop
   283bc:	20002780 	.word	0x20002780
   283c0:	20002b68 	.word	0x20002b68

000283c4 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   283c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   283c6:	4604      	mov	r4, r0
   283c8:	460d      	mov	r5, r1
	*must_reschedule = 0;
   283ca:	2300      	movs	r3, #0
   283cc:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   283ce:	6883      	ldr	r3, [r0, #8]
   283d0:	2b00      	cmp	r3, #0
   283d2:	d042      	beq.n	2845a <_signal_poll_event+0x96>
   283d4:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   283d6:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   283d8:	7a43      	ldrb	r3, [r0, #9]
   283da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   283de:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   283e0:	f013 0f02 	tst.w	r3, #2
   283e4:	d039      	beq.n	2845a <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   283e6:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   283e8:	f113 0f02 	cmn.w	r3, #2
   283ec:	d060      	beq.n	284b0 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   283ee:	6843      	ldr	r3, [r0, #4]
   283f0:	6802      	ldr	r2, [r0, #0]
   283f2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   283f4:	6803      	ldr	r3, [r0, #0]
   283f6:	6842      	ldr	r2, [r0, #4]
   283f8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   283fa:	7a43      	ldrb	r3, [r0, #9]
   283fc:	f023 0302 	bic.w	r3, r3, #2
   28400:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28402:	6a02      	ldr	r2, [r0, #32]
   28404:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28408:	d013      	beq.n	28432 <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2840a:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   2840e:	492a      	ldr	r1, [pc, #168]	; (284b8 <_signal_poll_event+0xf4>)
   28410:	6909      	ldr	r1, [r1, #16]
   28412:	428b      	cmp	r3, r1
   28414:	d004      	beq.n	28420 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28416:	b103      	cbz	r3, 2841a <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   28418:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2841a:	6919      	ldr	r1, [r3, #16]
   2841c:	440a      	add	r2, r1
   2841e:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28420:	6943      	ldr	r3, [r0, #20]
   28422:	6902      	ldr	r2, [r0, #16]
   28424:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28426:	6903      	ldr	r3, [r0, #16]
   28428:	6942      	ldr	r2, [r0, #20]
   2842a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2842c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28430:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   28432:	b965      	cbnz	r5, 2844e <_signal_poll_event+0x8a>
   28434:	f06f 0303 	mvn.w	r3, #3
   28438:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   2843a:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2843c:	f013 0f1f 	tst.w	r3, #31
   28440:	d109      	bne.n	28456 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28442:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28448:	d003      	beq.n	28452 <_signal_poll_event+0x8e>
   2844a:	2700      	movs	r7, #0
   2844c:	e004      	b.n	28458 <_signal_poll_event+0x94>
   2844e:	2300      	movs	r3, #0
   28450:	e7f2      	b.n	28438 <_signal_poll_event+0x74>
   28452:	2701      	movs	r7, #1
   28454:	e000      	b.n	28458 <_signal_poll_event+0x94>
   28456:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   28458:	b947      	cbnz	r7, 2846c <_signal_poll_event+0xa8>
	event->poller = NULL;
   2845a:	2000      	movs	r0, #0
   2845c:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   2845e:	7b63      	ldrb	r3, [r4, #13]
   28460:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   28464:	f365 1307 	bfi	r3, r5, #4, #4
   28468:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   2846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   2846c:	f000 fbc0 	bl	28bf0 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   28470:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   28474:	2b0d      	cmp	r3, #13
   28476:	d807      	bhi.n	28488 <_signal_poll_event+0xc4>
   28478:	b19b      	cbz	r3, 284a2 <_signal_poll_event+0xde>
   2847a:	4b10      	ldr	r3, [pc, #64]	; (284bc <_signal_poll_event+0xf8>)
   2847c:	685b      	ldr	r3, [r3, #4]
   2847e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28482:	d010      	beq.n	284a6 <_signal_poll_event+0xe2>
   28484:	2300      	movs	r3, #0
   28486:	e000      	b.n	2848a <_signal_poll_event+0xc6>
   28488:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   2848a:	b973      	cbnz	r3, 284aa <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   2848c:	4a0a      	ldr	r2, [pc, #40]	; (284b8 <_signal_poll_event+0xf4>)
   2848e:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28490:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28492:	2a7f      	cmp	r2, #127	; 0x7f
   28494:	d80a      	bhi.n	284ac <_signal_poll_event+0xe8>
   28496:	f000 fccf 	bl	28e38 <__must_switch_threads>
   2849a:	4603      	mov	r3, r0
   2849c:	b130      	cbz	r0, 284ac <_signal_poll_event+0xe8>
   2849e:	463b      	mov	r3, r7
   284a0:	e004      	b.n	284ac <_signal_poll_event+0xe8>
   284a2:	2300      	movs	r3, #0
   284a4:	e7f1      	b.n	2848a <_signal_poll_event+0xc6>
   284a6:	463b      	mov	r3, r7
   284a8:	e7ef      	b.n	2848a <_signal_poll_event+0xc6>
   284aa:	2300      	movs	r3, #0
   284ac:	6033      	str	r3, [r6, #0]
   284ae:	e7d4      	b.n	2845a <_signal_poll_event+0x96>
		return -EAGAIN;
   284b0:	f06f 000a 	mvn.w	r0, #10
}
   284b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   284b6:	bf00      	nop
   284b8:	20002780 	.word	0x20002780
   284bc:	e000ed00 	.word	0xe000ed00

000284c0 <k_poll_event_init>:
{
   284c0:	b430      	push	{r4, r5}
	event->poller = NULL;
   284c2:	2500      	movs	r5, #0
   284c4:	6085      	str	r5, [r0, #8]
	event->type = type;
   284c6:	7b44      	ldrb	r4, [r0, #13]
   284c8:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   284cc:	f365 1407 	bfi	r4, r5, #4, #4
   284d0:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   284d2:	7b81      	ldrb	r1, [r0, #14]
   284d4:	f362 0100 	bfi	r1, r2, #0, #1
   284d8:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   284da:	89c2      	ldrh	r2, [r0, #14]
   284dc:	f365 024f 	bfi	r2, r5, #1, #15
   284e0:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   284e2:	6103      	str	r3, [r0, #16]
}
   284e4:	bc30      	pop	{r4, r5}
   284e6:	4770      	bx	lr

000284e8 <k_poll>:
{
   284e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284ec:	b085      	sub	sp, #20
   284ee:	4691      	mov	r9, r2
	__asm__ volatile(
   284f0:	f04f 0320 	mov.w	r3, #32
   284f4:	f3ef 8511 	mrs	r5, BASEPRI
   284f8:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   284fc:	4ab7      	ldr	r2, [pc, #732]	; (287dc <k_poll+0x2f4>)
   284fe:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   28500:	7a63      	ldrb	r3, [r4, #9]
   28502:	f043 0320 	orr.w	r3, r3, #32
   28506:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28508:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   2850c:	6893      	ldr	r3, [r2, #8]
   2850e:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   28510:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   28512:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   28516:	e01e      	b.n	28556 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   28518:	6917      	ldr	r7, [r2, #16]
   2851a:	68bf      	ldr	r7, [r7, #8]
   2851c:	b14f      	cbz	r7, 28532 <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2851e:	f04f 0e02 	mov.w	lr, #2
			return 1;
   28522:	2701      	movs	r7, #1
   28524:	e005      	b.n	28532 <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   28526:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   28528:	683f      	ldr	r7, [r7, #0]
   2852a:	b117      	cbz	r7, 28532 <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2852c:	f04f 0e04 	mov.w	lr, #4
			return 1;
   28530:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   28532:	b387      	cbz	r7, 28596 <k_poll+0xae>
	event->poller = NULL;
   28534:	2500      	movs	r5, #0
   28536:	6095      	str	r5, [r2, #8]
	event->state |= state;
   28538:	7b55      	ldrb	r5, [r2, #13]
   2853a:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   2853e:	f367 1507 	bfi	r5, r7, #4, #4
   28542:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   28544:	4aa5      	ldr	r2, [pc, #660]	; (287dc <k_poll+0x2f4>)
   28546:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   28548:	7a6a      	ldrb	r2, [r5, #9]
   2854a:	f022 0220 	bic.w	r2, r2, #32
   2854e:	726a      	strb	r2, [r5, #9]
   28550:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   28554:	3301      	adds	r3, #1
   28556:	428b      	cmp	r3, r1
   28558:	f280 8191 	bge.w	2887e <k_poll+0x396>
	__asm__ volatile(
   2855c:	f04f 0220 	mov.w	r2, #32
   28560:	f3ef 8611 	mrs	r6, BASEPRI
   28564:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   28568:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2856c:	0095      	lsls	r5, r2, #2
   2856e:	1942      	adds	r2, r0, r5
	switch (event->type) {
   28570:	7b57      	ldrb	r7, [r2, #13]
   28572:	f007 070f 	and.w	r7, r7, #15
   28576:	2f02      	cmp	r7, #2
   28578:	d0ce      	beq.n	28518 <k_poll+0x30>
   2857a:	2f04      	cmp	r7, #4
   2857c:	d0d3      	beq.n	28526 <k_poll+0x3e>
   2857e:	2f01      	cmp	r7, #1
   28580:	d001      	beq.n	28586 <k_poll+0x9e>
		return 0;
   28582:	2700      	movs	r7, #0
   28584:	e7d5      	b.n	28532 <k_poll+0x4a>
		if (event->signal->signaled) {
   28586:	6917      	ldr	r7, [r2, #16]
   28588:	68bf      	ldr	r7, [r7, #8]
   2858a:	2f00      	cmp	r7, #0
   2858c:	d0d1      	beq.n	28532 <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   2858e:	f04f 0e01 	mov.w	lr, #1
			return 1;
   28592:	4677      	mov	r7, lr
   28594:	e7cd      	b.n	28532 <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28596:	f1b9 0f00 	cmp.w	r9, #0
   2859a:	d0d9      	beq.n	28550 <k_poll+0x68>
	return _is_thread_polling(_current);
   2859c:	4f8f      	ldr	r7, [pc, #572]	; (287dc <k_poll+0x2f4>)
   2859e:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   285a0:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   285a2:	f017 0f20 	tst.w	r7, #32
   285a6:	d0d3      	beq.n	28550 <k_poll+0x68>
	switch (event->type) {
   285a8:	7b57      	ldrb	r7, [r2, #13]
   285aa:	f007 070f 	and.w	r7, r7, #15
   285ae:	2f02      	cmp	r7, #2
   285b0:	d008      	beq.n	285c4 <k_poll+0xdc>
   285b2:	2f04      	cmp	r7, #4
   285b4:	d07a      	beq.n	286ac <k_poll+0x1c4>
   285b6:	2f01      	cmp	r7, #1
   285b8:	f000 80ec 	beq.w	28794 <k_poll+0x2ac>
	event->poller = poller;
   285bc:	ad03      	add	r5, sp, #12
   285be:	6095      	str	r5, [r2, #8]
				++last_registered;
   285c0:	3401      	adds	r4, #1
   285c2:	e7c5      	b.n	28550 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   285c4:	6917      	ldr	r7, [r2, #16]
   285c6:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   285ca:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   285ce:	45c4      	cmp	ip, r8
   285d0:	d010      	beq.n	285f4 <k_poll+0x10c>
   285d2:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   285d6:	b17f      	cbz	r7, 285f8 <k_poll+0x110>
   285d8:	68bf      	ldr	r7, [r7, #8]
   285da:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   285dc:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   285e0:	9f03      	ldr	r7, [sp, #12]
   285e2:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   285e6:	45da      	cmp	sl, fp
   285e8:	db06      	blt.n	285f8 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   285ea:	45c4      	cmp	ip, r8
   285ec:	d12e      	bne.n	2864c <k_poll+0x164>
   285ee:	f04f 0800 	mov.w	r8, #0
   285f2:	e02b      	b.n	2864c <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   285f4:	2700      	movs	r7, #0
   285f6:	e7ee      	b.n	285d6 <k_poll+0xee>
	node->next = list;
   285f8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   285fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28600:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28602:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28606:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28608:	f8cc 2004 	str.w	r2, [ip, #4]
   2860c:	e7d6      	b.n	285bc <k_poll+0xd4>
	if (!insert_point) {
   2860e:	f1b8 0f00 	cmp.w	r8, #0
   28612:	d00a      	beq.n	2862a <k_poll+0x142>
		node->prev = insert_point->prev;
   28614:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28618:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2861a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   2861e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28622:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28624:	f8c8 2004 	str.w	r2, [r8, #4]
   28628:	e7c8      	b.n	285bc <k_poll+0xd4>
	node->next = list;
   2862a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2862e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28632:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28634:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28638:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2863a:	f8cc 2004 	str.w	r2, [ip, #4]
   2863e:	e7bd      	b.n	285bc <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28640:	4647      	mov	r7, r8
   28642:	e017      	b.n	28674 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   28644:	2700      	movs	r7, #0
   28646:	e015      	b.n	28674 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28648:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2864c:	f1b8 0f00 	cmp.w	r8, #0
   28650:	d021      	beq.n	28696 <k_poll+0x1ae>
					       pending->poller->thread)) {
   28652:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28656:	683f      	ldr	r7, [r7, #0]
   28658:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2865c:	45bb      	cmp	fp, r7
   2865e:	dbd6      	blt.n	2860e <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28660:	46c2      	mov	sl, r8
   28662:	f1b8 0f00 	cmp.w	r8, #0
   28666:	d0eb      	beq.n	28640 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   28668:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2866c:	45b8      	cmp	r8, r7
   2866e:	d0e9      	beq.n	28644 <k_poll+0x15c>
   28670:	f8d8 7000 	ldr.w	r7, [r8]
   28674:	b167      	cbz	r7, 28690 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28676:	f1ba 0f00 	cmp.w	sl, #0
   2867a:	d0e5      	beq.n	28648 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   2867c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28680:	45ba      	cmp	sl, r7
   28682:	d002      	beq.n	2868a <k_poll+0x1a2>
   28684:	f8d8 8000 	ldr.w	r8, [r8]
   28688:	e7e0      	b.n	2864c <k_poll+0x164>
   2868a:	f04f 0800 	mov.w	r8, #0
   2868e:	e7dd      	b.n	2864c <k_poll+0x164>
   28690:	f04f 0800 	mov.w	r8, #0
   28694:	e7da      	b.n	2864c <k_poll+0x164>
	node->next = list;
   28696:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2869a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2869e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   286a0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   286a4:	602a      	str	r2, [r5, #0]
	list->tail = node;
   286a6:	f8cc 2004 	str.w	r2, [ip, #4]
   286aa:	e787      	b.n	285bc <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   286ac:	6917      	ldr	r7, [r2, #16]
   286ae:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   286b2:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   286b6:	45c4      	cmp	ip, r8
   286b8:	d010      	beq.n	286dc <k_poll+0x1f4>
   286ba:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   286be:	b17f      	cbz	r7, 286e0 <k_poll+0x1f8>
   286c0:	68bf      	ldr	r7, [r7, #8]
   286c2:	683f      	ldr	r7, [r7, #0]
   286c4:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   286c8:	9f03      	ldr	r7, [sp, #12]
   286ca:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   286ce:	45da      	cmp	sl, fp
   286d0:	db06      	blt.n	286e0 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286d2:	45c4      	cmp	ip, r8
   286d4:	d12e      	bne.n	28734 <k_poll+0x24c>
   286d6:	f04f 0800 	mov.w	r8, #0
   286da:	e02b      	b.n	28734 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   286dc:	2700      	movs	r7, #0
   286de:	e7ee      	b.n	286be <k_poll+0x1d6>
	node->next = list;
   286e0:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   286e4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   286e8:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   286ea:	f8dc 5004 	ldr.w	r5, [ip, #4]
   286ee:	602a      	str	r2, [r5, #0]
	list->tail = node;
   286f0:	f8cc 2004 	str.w	r2, [ip, #4]
   286f4:	e762      	b.n	285bc <k_poll+0xd4>
	if (!insert_point) {
   286f6:	f1b8 0f00 	cmp.w	r8, #0
   286fa:	d00a      	beq.n	28712 <k_poll+0x22a>
		node->prev = insert_point->prev;
   286fc:	f8d8 7004 	ldr.w	r7, [r8, #4]
   28700:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   28702:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   28706:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2870a:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   2870c:	f8c8 2004 	str.w	r2, [r8, #4]
   28710:	e754      	b.n	285bc <k_poll+0xd4>
	node->next = list;
   28712:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28716:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2871a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2871c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28720:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28722:	f8cc 2004 	str.w	r2, [ip, #4]
   28726:	e749      	b.n	285bc <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28728:	4647      	mov	r7, r8
   2872a:	e017      	b.n	2875c <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   2872c:	2700      	movs	r7, #0
   2872e:	e015      	b.n	2875c <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28730:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28734:	f1b8 0f00 	cmp.w	r8, #0
   28738:	d021      	beq.n	2877e <k_poll+0x296>
					       pending->poller->thread)) {
   2873a:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2873e:	683f      	ldr	r7, [r7, #0]
   28740:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28744:	45bb      	cmp	fp, r7
   28746:	dbd6      	blt.n	286f6 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28748:	46c2      	mov	sl, r8
   2874a:	f1b8 0f00 	cmp.w	r8, #0
   2874e:	d0eb      	beq.n	28728 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   28750:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28754:	45b8      	cmp	r8, r7
   28756:	d0e9      	beq.n	2872c <k_poll+0x244>
   28758:	f8d8 7000 	ldr.w	r7, [r8]
   2875c:	b167      	cbz	r7, 28778 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2875e:	f1ba 0f00 	cmp.w	sl, #0
   28762:	d0e5      	beq.n	28730 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   28764:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28768:	45ba      	cmp	sl, r7
   2876a:	d002      	beq.n	28772 <k_poll+0x28a>
   2876c:	f8d8 8000 	ldr.w	r8, [r8]
   28770:	e7e0      	b.n	28734 <k_poll+0x24c>
   28772:	f04f 0800 	mov.w	r8, #0
   28776:	e7dd      	b.n	28734 <k_poll+0x24c>
   28778:	f04f 0800 	mov.w	r8, #0
   2877c:	e7da      	b.n	28734 <k_poll+0x24c>
	node->next = list;
   2877e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28782:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28786:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28788:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2878c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2878e:	f8cc 2004 	str.w	r2, [ip, #4]
   28792:	e713      	b.n	285bc <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   28794:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   28798:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2879c:	45c4      	cmp	ip, r8
   2879e:	d010      	beq.n	287c2 <k_poll+0x2da>
   287a0:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   287a4:	b17f      	cbz	r7, 287c6 <k_poll+0x2de>
   287a6:	68bf      	ldr	r7, [r7, #8]
   287a8:	683f      	ldr	r7, [r7, #0]
   287aa:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   287ae:	9f03      	ldr	r7, [sp, #12]
   287b0:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   287b4:	45da      	cmp	sl, fp
   287b6:	db06      	blt.n	287c6 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   287b8:	45c4      	cmp	ip, r8
   287ba:	d130      	bne.n	2881e <k_poll+0x336>
   287bc:	f04f 0800 	mov.w	r8, #0
   287c0:	e02d      	b.n	2881e <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   287c2:	2700      	movs	r7, #0
   287c4:	e7ee      	b.n	287a4 <k_poll+0x2bc>
	node->next = list;
   287c6:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   287ca:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287ce:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   287d0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287d4:	602a      	str	r2, [r5, #0]
	list->tail = node;
   287d6:	f8cc 2004 	str.w	r2, [ip, #4]
   287da:	e6ef      	b.n	285bc <k_poll+0xd4>
   287dc:	20002780 	.word	0x20002780
	if (!insert_point) {
   287e0:	f1b8 0f00 	cmp.w	r8, #0
   287e4:	d00a      	beq.n	287fc <k_poll+0x314>
		node->prev = insert_point->prev;
   287e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   287ea:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   287ec:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   287f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
   287f4:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   287f6:	f8c8 2004 	str.w	r2, [r8, #4]
   287fa:	e6df      	b.n	285bc <k_poll+0xd4>
	node->next = list;
   287fc:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28800:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28804:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28806:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2880a:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2880c:	f8cc 2004 	str.w	r2, [ip, #4]
   28810:	e6d4      	b.n	285bc <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28812:	4647      	mov	r7, r8
   28814:	e017      	b.n	28846 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   28816:	2700      	movs	r7, #0
   28818:	e015      	b.n	28846 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2881a:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2881e:	f1b8 0f00 	cmp.w	r8, #0
   28822:	d021      	beq.n	28868 <k_poll+0x380>
					       pending->poller->thread)) {
   28824:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28828:	683f      	ldr	r7, [r7, #0]
   2882a:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2882e:	45bb      	cmp	fp, r7
   28830:	dbd6      	blt.n	287e0 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28832:	46c2      	mov	sl, r8
   28834:	f1b8 0f00 	cmp.w	r8, #0
   28838:	d0eb      	beq.n	28812 <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   2883a:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2883e:	45b8      	cmp	r8, r7
   28840:	d0e9      	beq.n	28816 <k_poll+0x32e>
   28842:	f8d8 7000 	ldr.w	r7, [r8]
   28846:	b167      	cbz	r7, 28862 <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28848:	f1ba 0f00 	cmp.w	sl, #0
   2884c:	d0e5      	beq.n	2881a <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   2884e:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28852:	45ba      	cmp	sl, r7
   28854:	d002      	beq.n	2885c <k_poll+0x374>
   28856:	f8d8 8000 	ldr.w	r8, [r8]
   2885a:	e7e0      	b.n	2881e <k_poll+0x336>
   2885c:	f04f 0800 	mov.w	r8, #0
   28860:	e7dd      	b.n	2881e <k_poll+0x336>
   28862:	f04f 0800 	mov.w	r8, #0
   28866:	e7da      	b.n	2881e <k_poll+0x336>
	node->next = list;
   28868:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2886c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28870:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28872:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28876:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28878:	f8cc 2004 	str.w	r2, [ip, #4]
   2887c:	e69e      	b.n	285bc <k_poll+0xd4>
   2887e:	f04f 0320 	mov.w	r3, #32
   28882:	f3ef 8511 	mrs	r5, BASEPRI
   28886:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   2888a:	4b46      	ldr	r3, [pc, #280]	; (289a4 <k_poll+0x4bc>)
   2888c:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   2888e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   28890:	f013 0f20 	tst.w	r3, #32
   28894:	d047      	beq.n	28926 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   28896:	f023 0320 	bic.w	r3, r3, #32
   2889a:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2889c:	f1b9 0f00 	cmp.w	r9, #0
   288a0:	d049      	beq.n	28936 <k_poll+0x44e>
   288a2:	4649      	mov	r1, r9
   288a4:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   288a6:	a801      	add	r0, sp, #4
   288a8:	9001      	str	r0, [sp, #4]
   288aa:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   288ac:	f000 fab4 	bl	28e18 <_pend_current_thread>
	_update_time_slice_before_swap();
   288b0:	f000 fb30 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   288b4:	4628      	mov	r0, r5
   288b6:	f7fe fe73 	bl	275a0 <__swap>
   288ba:	f04f 0320 	mov.w	r3, #32
   288be:	f3ef 8e11 	mrs	lr, BASEPRI
   288c2:	f383 8811 	msr	BASEPRI, r3
   288c6:	4675      	mov	r5, lr
   288c8:	e049      	b.n	2895e <k_poll+0x476>
	node->prev->next = node->next;
   288ca:	6853      	ldr	r3, [r2, #4]
   288cc:	5847      	ldr	r7, [r0, r1]
   288ce:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   288d0:	5843      	ldr	r3, [r0, r1]
   288d2:	6852      	ldr	r2, [r2, #4]
   288d4:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288d6:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   288da:	f04f 0320 	mov.w	r3, #32
   288de:	f3ef 8611 	mrs	r6, BASEPRI
   288e2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   288e6:	3c01      	subs	r4, #1
   288e8:	2c00      	cmp	r4, #0
   288ea:	db1e      	blt.n	2892a <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   288ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   288f0:	0099      	lsls	r1, r3, #2
   288f2:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   288f4:	2300      	movs	r3, #0
   288f6:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   288f8:	7b53      	ldrb	r3, [r2, #13]
   288fa:	f003 030f 	and.w	r3, r3, #15
   288fe:	2b02      	cmp	r3, #2
   28900:	d0e3      	beq.n	288ca <k_poll+0x3e2>
   28902:	2b04      	cmp	r3, #4
   28904:	d008      	beq.n	28918 <k_poll+0x430>
   28906:	2b01      	cmp	r3, #1
   28908:	d1e5      	bne.n	288d6 <k_poll+0x3ee>
	node->prev->next = node->next;
   2890a:	6853      	ldr	r3, [r2, #4]
   2890c:	5847      	ldr	r7, [r0, r1]
   2890e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28910:	5843      	ldr	r3, [r0, r1]
   28912:	6852      	ldr	r2, [r2, #4]
   28914:	605a      	str	r2, [r3, #4]
   28916:	e7de      	b.n	288d6 <k_poll+0x3ee>
	node->prev->next = node->next;
   28918:	6853      	ldr	r3, [r2, #4]
   2891a:	5847      	ldr	r7, [r0, r1]
   2891c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2891e:	5843      	ldr	r3, [r0, r1]
   28920:	6852      	ldr	r2, [r2, #4]
   28922:	605a      	str	r2, [r3, #4]
   28924:	e7d7      	b.n	288d6 <k_poll+0x3ee>
   28926:	462e      	mov	r6, r5
   28928:	e7de      	b.n	288e8 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2892a:	f385 8811 	msr	BASEPRI, r5
		return 0;
   2892e:	2000      	movs	r0, #0
}
   28930:	b005      	add	sp, #20
   28932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28936:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   2893a:	f06f 000a 	mvn.w	r0, #10
   2893e:	e7f7      	b.n	28930 <k_poll+0x448>
	node->prev->next = node->next;
   28940:	6853      	ldr	r3, [r2, #4]
   28942:	5877      	ldr	r7, [r6, r1]
   28944:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28946:	5873      	ldr	r3, [r6, r1]
   28948:	6852      	ldr	r2, [r2, #4]
   2894a:	605a      	str	r2, [r3, #4]
   2894c:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28950:	f04f 0320 	mov.w	r3, #32
   28954:	f3ef 8511 	mrs	r5, BASEPRI
   28958:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2895c:	3c01      	subs	r4, #1
   2895e:	2c00      	cmp	r4, #0
   28960:	db1c      	blt.n	2899c <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   28962:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28966:	0099      	lsls	r1, r3, #2
   28968:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   2896a:	2300      	movs	r3, #0
   2896c:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   2896e:	7b53      	ldrb	r3, [r2, #13]
   28970:	f003 030f 	and.w	r3, r3, #15
   28974:	2b02      	cmp	r3, #2
   28976:	d0e3      	beq.n	28940 <k_poll+0x458>
   28978:	2b04      	cmp	r3, #4
   2897a:	d008      	beq.n	2898e <k_poll+0x4a6>
   2897c:	2b01      	cmp	r3, #1
   2897e:	d1e5      	bne.n	2894c <k_poll+0x464>
	node->prev->next = node->next;
   28980:	6853      	ldr	r3, [r2, #4]
   28982:	5877      	ldr	r7, [r6, r1]
   28984:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28986:	5873      	ldr	r3, [r6, r1]
   28988:	6852      	ldr	r2, [r2, #4]
   2898a:	605a      	str	r2, [r3, #4]
   2898c:	e7de      	b.n	2894c <k_poll+0x464>
	node->prev->next = node->next;
   2898e:	6853      	ldr	r3, [r2, #4]
   28990:	5877      	ldr	r7, [r6, r1]
   28992:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28994:	5873      	ldr	r3, [r6, r1]
   28996:	6852      	ldr	r2, [r2, #4]
   28998:	605a      	str	r2, [r3, #4]
   2899a:	e7d7      	b.n	2894c <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2899c:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   289a0:	e7c6      	b.n	28930 <k_poll+0x448>
   289a2:	bf00      	nop
   289a4:	20002780 	.word	0x20002780

000289a8 <_handle_obj_poll_events>:
	return list->head == list;
   289a8:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   289aa:	4298      	cmp	r0, r3
   289ac:	d010      	beq.n	289d0 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   289ae:	685a      	ldr	r2, [r3, #4]
   289b0:	6818      	ldr	r0, [r3, #0]
   289b2:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   289b4:	681a      	ldr	r2, [r3, #0]
   289b6:	6858      	ldr	r0, [r3, #4]
   289b8:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   289ba:	b15b      	cbz	r3, 289d4 <_handle_obj_poll_events+0x2c>
{
   289bc:	b500      	push	{lr}
   289be:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   289c0:	aa01      	add	r2, sp, #4
   289c2:	4618      	mov	r0, r3
   289c4:	f7ff fcfe 	bl	283c4 <_signal_poll_event>
	return must_reschedule;
   289c8:	9801      	ldr	r0, [sp, #4]
}
   289ca:	b003      	add	sp, #12
   289cc:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   289d0:	2300      	movs	r3, #0
   289d2:	e7f2      	b.n	289ba <_handle_obj_poll_events+0x12>
		return 0;
   289d4:	2000      	movs	r0, #0
   289d6:	4770      	bx	lr

000289d8 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   289d8:	b530      	push	{r4, r5, lr}
   289da:	b083      	sub	sp, #12
	__asm__ volatile(
   289dc:	f04f 0320 	mov.w	r3, #32
   289e0:	f3ef 8511 	mrs	r5, BASEPRI
   289e4:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   289e8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   289ea:	2301      	movs	r3, #1
   289ec:	6083      	str	r3, [r0, #8]
	return list->head == list;
   289ee:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   289f0:	4298      	cmp	r0, r3
   289f2:	d013      	beq.n	28a1c <k_poll_signal+0x44>
	node->prev->next = node->next;
   289f4:	685a      	ldr	r2, [r3, #4]
   289f6:	6819      	ldr	r1, [r3, #0]
   289f8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   289fa:	681a      	ldr	r2, [r3, #0]
   289fc:	6859      	ldr	r1, [r3, #4]
   289fe:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   28a00:	b173      	cbz	r3, 28a20 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   28a02:	aa01      	add	r2, sp, #4
   28a04:	2101      	movs	r1, #1
   28a06:	4618      	mov	r0, r3
   28a08:	f7ff fcdc 	bl	283c4 <_signal_poll_event>
   28a0c:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   28a0e:	9b01      	ldr	r3, [sp, #4]
   28a10:	b953      	cbnz	r3, 28a28 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a12:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   28a16:	4620      	mov	r0, r4
   28a18:	b003      	add	sp, #12
   28a1a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   28a1c:	2300      	movs	r3, #0
   28a1e:	e7ef      	b.n	28a00 <k_poll_signal+0x28>
   28a20:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28a24:	2400      	movs	r4, #0
   28a26:	e7f6      	b.n	28a16 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   28a28:	f000 fa74 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28a2c:	4628      	mov	r0, r5
   28a2e:	f7fe fdb7 	bl	275a0 <__swap>
   28a32:	e7f0      	b.n	28a16 <k_poll_signal+0x3e>

00028a34 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   28a34:	b530      	push	{r4, r5, lr}
   28a36:	b087      	sub	sp, #28
   28a38:	4604      	mov	r4, r0
   28a3a:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   28a3c:	4603      	mov	r3, r0
   28a3e:	2200      	movs	r2, #0
   28a40:	2104      	movs	r1, #4
   28a42:	eb0d 0001 	add.w	r0, sp, r1
   28a46:	f7ff fd3b 	bl	284c0 <k_poll_event_init>
   28a4a:	e005      	b.n	28a58 <k_queue_poll+0x24>
   28a4c:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28a50:	b9f8      	cbnz	r0, 28a92 <k_queue_poll+0x5e>
   28a52:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28a56:	d11c      	bne.n	28a92 <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28a58:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28a5c:	f36f 1307 	bfc	r3, #4, #4
   28a60:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   28a64:	462a      	mov	r2, r5
   28a66:	2101      	movs	r1, #1
   28a68:	a801      	add	r0, sp, #4
   28a6a:	f7ff fd3d 	bl	284e8 <k_poll>
		if (err) {
   28a6e:	b978      	cbnz	r0, 28a90 <k_queue_poll+0x5c>
	__asm__ volatile(
   28a70:	f04f 0220 	mov.w	r2, #32
   28a74:	f3ef 8311 	mrs	r3, BASEPRI
   28a78:	f382 8811 	msr	BASEPRI, r2
   28a7c:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28a7e:	2800      	cmp	r0, #0
   28a80:	d0e4      	beq.n	28a4c <k_queue_poll+0x18>
	list->head = node->next;
   28a82:	6802      	ldr	r2, [r0, #0]
   28a84:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   28a86:	6861      	ldr	r1, [r4, #4]
   28a88:	4288      	cmp	r0, r1
   28a8a:	d1df      	bne.n	28a4c <k_queue_poll+0x18>
		list->tail = list->head;
   28a8c:	6062      	str	r2, [r4, #4]
   28a8e:	e7dd      	b.n	28a4c <k_queue_poll+0x18>
			return NULL;
   28a90:	2000      	movs	r0, #0

	return val;
}
   28a92:	b007      	add	sp, #28
   28a94:	bd30      	pop	{r4, r5, pc}

00028a96 <k_queue_init>:
	list->head = NULL;
   28a96:	2300      	movs	r3, #0
   28a98:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28a9a:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28a9c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28aa0:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28aa2:	60c3      	str	r3, [r0, #12]
   28aa4:	4770      	bx	lr

00028aa6 <k_queue_insert>:
{
   28aa6:	b510      	push	{r4, lr}
   28aa8:	f04f 0320 	mov.w	r3, #32
   28aac:	f3ef 8411 	mrs	r4, BASEPRI
   28ab0:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28ab4:	b159      	cbz	r1, 28ace <k_queue_insert+0x28>
	} else if (!prev->next) {
   28ab6:	680b      	ldr	r3, [r1, #0]
   28ab8:	b18b      	cbz	r3, 28ade <k_queue_insert+0x38>
		node->next = prev->next;
   28aba:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28abc:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28abe:	2104      	movs	r1, #4
   28ac0:	3008      	adds	r0, #8
   28ac2:	f7ff ff71 	bl	289a8 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28ac6:	b998      	cbnz	r0, 28af0 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ac8:	f384 8811 	msr	BASEPRI, r4
   28acc:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28ace:	6803      	ldr	r3, [r0, #0]
   28ad0:	6013      	str	r3, [r2, #0]
	list->head = node;
   28ad2:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28ad4:	6843      	ldr	r3, [r0, #4]
   28ad6:	2b00      	cmp	r3, #0
   28ad8:	d1f1      	bne.n	28abe <k_queue_insert+0x18>
		list->tail = list->head;
   28ada:	6042      	str	r2, [r0, #4]
   28adc:	e7ef      	b.n	28abe <k_queue_insert+0x18>
	node->next = NULL;
   28ade:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28ae0:	6843      	ldr	r3, [r0, #4]
   28ae2:	b113      	cbz	r3, 28aea <k_queue_insert+0x44>
		list->tail->next = node;
   28ae4:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28ae6:	6042      	str	r2, [r0, #4]
   28ae8:	e7e9      	b.n	28abe <k_queue_insert+0x18>
		list->tail = node;
   28aea:	6042      	str	r2, [r0, #4]
		list->head = node;
   28aec:	6002      	str	r2, [r0, #0]
   28aee:	e7e6      	b.n	28abe <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28af0:	f000 fa10 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28af4:	4620      	mov	r0, r4
   28af6:	f7fe fd53 	bl	275a0 <__swap>
   28afa:	bd10      	pop	{r4, pc}

00028afc <k_queue_append>:
{
   28afc:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28afe:	460a      	mov	r2, r1
   28b00:	6841      	ldr	r1, [r0, #4]
   28b02:	f7ff ffd0 	bl	28aa6 <k_queue_insert>
   28b06:	bd08      	pop	{r3, pc}

00028b08 <k_queue_prepend>:
{
   28b08:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28b0a:	460a      	mov	r2, r1
   28b0c:	2100      	movs	r1, #0
   28b0e:	f7ff ffca 	bl	28aa6 <k_queue_insert>
   28b12:	bd08      	pop	{r3, pc}

00028b14 <k_queue_append_list>:
{
   28b14:	b510      	push	{r4, lr}
	__asm__ volatile(
   28b16:	f04f 0320 	mov.w	r3, #32
   28b1a:	f3ef 8411 	mrs	r4, BASEPRI
   28b1e:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28b22:	6843      	ldr	r3, [r0, #4]
   28b24:	b14b      	cbz	r3, 28b3a <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28b26:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28b28:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28b2a:	2104      	movs	r1, #4
   28b2c:	3008      	adds	r0, #8
   28b2e:	f7ff ff3b 	bl	289a8 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28b32:	b928      	cbnz	r0, 28b40 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b34:	f384 8811 	msr	BASEPRI, r4
   28b38:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28b3a:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28b3c:	6042      	str	r2, [r0, #4]
   28b3e:	e7f4      	b.n	28b2a <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28b40:	f000 f9e8 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28b44:	4620      	mov	r0, r4
   28b46:	f7fe fd2b 	bl	275a0 <__swap>
   28b4a:	bd10      	pop	{r4, pc}

00028b4c <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28b4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   28b4e:	f04f 0320 	mov.w	r3, #32
   28b52:	f3ef 8211 	mrs	r2, BASEPRI
   28b56:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28b5a:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28b5c:	b153      	cbz	r3, 28b74 <k_queue_get+0x28>
	list->head = node->next;
   28b5e:	6819      	ldr	r1, [r3, #0]
   28b60:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   28b62:	6844      	ldr	r4, [r0, #4]
   28b64:	42a3      	cmp	r3, r4
   28b66:	d003      	beq.n	28b70 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b68:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28b6c:	4618      	mov	r0, r3
   28b6e:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28b70:	6041      	str	r1, [r0, #4]
   28b72:	e7f9      	b.n	28b68 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   28b74:	b121      	cbz	r1, 28b80 <k_queue_get+0x34>
   28b76:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28b7a:	f7ff ff5b 	bl	28a34 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28b7e:	bd10      	pop	{r4, pc}
   28b80:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   28b84:	2000      	movs	r0, #0
   28b86:	bd10      	pop	{r4, pc}

00028b88 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28b88:	3010      	adds	r0, #16
   28b8a:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28b8c:	f000 001f 	and.w	r0, r0, #31
   28b90:	2201      	movs	r2, #1
   28b92:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28b96:	1d9a      	adds	r2, r3, #6
   28b98:	4b03      	ldr	r3, [pc, #12]	; (28ba8 <_set_ready_q_prio_bit+0x20>)
   28b9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28b9e:	685a      	ldr	r2, [r3, #4]
   28ba0:	4302      	orrs	r2, r0
   28ba2:	605a      	str	r2, [r3, #4]
   28ba4:	4770      	bx	lr
   28ba6:	bf00      	nop
   28ba8:	20002780 	.word	0x20002780

00028bac <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28bac:	3010      	adds	r0, #16
   28bae:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28bb0:	f000 001f 	and.w	r0, r0, #31
   28bb4:	2201      	movs	r2, #1
   28bb6:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28bba:	1d9a      	adds	r2, r3, #6
   28bbc:	4b03      	ldr	r3, [pc, #12]	; (28bcc <_clear_ready_q_prio_bit+0x20>)
   28bbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28bc2:	685a      	ldr	r2, [r3, #4]
   28bc4:	ea22 0200 	bic.w	r2, r2, r0
   28bc8:	605a      	str	r2, [r3, #4]
   28bca:	4770      	bx	lr
   28bcc:	20002780 	.word	0x20002780

00028bd0 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28bd0:	4b06      	ldr	r3, [pc, #24]	; (28bec <_get_ready_q_head+0x1c>)
   28bd2:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28bd4:	fa92 f3a2 	rbit	r3, r2
   28bd8:	fab3 f383 	clz	r3, r3
   28bdc:	b90a      	cbnz	r2, 28be2 <_get_ready_q_head+0x12>
   28bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28be2:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28be4:	4a01      	ldr	r2, [pc, #4]	; (28bec <_get_ready_q_head+0x1c>)
   28be6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28bea:	4770      	bx	lr
   28bec:	20002780 	.word	0x20002780

00028bf0 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28bf0:	b570      	push	{r4, r5, r6, lr}
   28bf2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28bf4:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28bf8:	4e0c      	ldr	r6, [pc, #48]	; (28c2c <_add_thread_to_ready_q+0x3c>)
   28bfa:	f100 0514 	add.w	r5, r0, #20
   28bfe:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28c02:	f7ff ffc1 	bl	28b88 <_set_ready_q_prio_bit>
	node->next = list;
   28c06:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28c08:	686b      	ldr	r3, [r5, #4]
   28c0a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28c0c:	686b      	ldr	r3, [r5, #4]
   28c0e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28c10:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28c12:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28c14:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28c18:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28c1c:	4291      	cmp	r1, r2
   28c1e:	dc02      	bgt.n	28c26 <_add_thread_to_ready_q+0x36>
   28c20:	4a02      	ldr	r2, [pc, #8]	; (28c2c <_add_thread_to_ready_q+0x3c>)
   28c22:	6193      	str	r3, [r2, #24]
   28c24:	bd70      	pop	{r4, r5, r6, pc}
   28c26:	4623      	mov	r3, r4
   28c28:	e7fa      	b.n	28c20 <_add_thread_to_ready_q+0x30>
   28c2a:	bf00      	nop
   28c2c:	20002780 	.word	0x20002780

00028c30 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28c30:	b538      	push	{r3, r4, r5, lr}
   28c32:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28c34:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28c38:	4a0e      	ldr	r2, [pc, #56]	; (28c74 <_remove_thread_from_ready_q+0x44>)
   28c3a:	3314      	adds	r3, #20
   28c3c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28c40:	6840      	ldr	r0, [r0, #4]
   28c42:	6825      	ldr	r5, [r4, #0]
   28c44:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   28c46:	6820      	ldr	r0, [r4, #0]
   28c48:	6865      	ldr	r5, [r4, #4]
   28c4a:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28c50:	4299      	cmp	r1, r3
   28c52:	d006      	beq.n	28c62 <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28c54:	4b07      	ldr	r3, [pc, #28]	; (28c74 <_remove_thread_from_ready_q+0x44>)
   28c56:	6998      	ldr	r0, [r3, #24]
   28c58:	4284      	cmp	r4, r0
   28c5a:	d007      	beq.n	28c6c <_remove_thread_from_ready_q+0x3c>
   28c5c:	4b05      	ldr	r3, [pc, #20]	; (28c74 <_remove_thread_from_ready_q+0x44>)
   28c5e:	6198      	str	r0, [r3, #24]
   28c60:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   28c62:	f994 000a 	ldrsb.w	r0, [r4, #10]
   28c66:	f7ff ffa1 	bl	28bac <_clear_ready_q_prio_bit>
   28c6a:	e7f3      	b.n	28c54 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28c6c:	f7ff ffb0 	bl	28bd0 <_get_ready_q_head>
   28c70:	e7f4      	b.n	28c5c <_remove_thread_from_ready_q+0x2c>
   28c72:	bf00      	nop
   28c74:	20002780 	.word	0x20002780

00028c78 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28c78:	b538      	push	{r3, r4, r5, lr}
   28c7a:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28c7c:	4299      	cmp	r1, r3
   28c7e:	d115      	bne.n	28cac <_pend_thread+0x34>
   28c80:	2300      	movs	r3, #0
   28c82:	e013      	b.n	28cac <_pend_thread+0x34>
	if (!insert_point) {
   28c84:	b133      	cbz	r3, 28c94 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   28c86:	685c      	ldr	r4, [r3, #4]
   28c88:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28c8a:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28c8c:	685c      	ldr	r4, [r3, #4]
   28c8e:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28c90:	6058      	str	r0, [r3, #4]
   28c92:	e02b      	b.n	28cec <_pend_thread+0x74>
	node->next = list;
   28c94:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28c96:	684b      	ldr	r3, [r1, #4]
   28c98:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28c9a:	684b      	ldr	r3, [r1, #4]
   28c9c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28c9e:	6048      	str	r0, [r1, #4]
   28ca0:	e024      	b.n	28cec <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ca2:	461d      	mov	r5, r3
   28ca4:	e010      	b.n	28cc8 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28ca6:	2500      	movs	r5, #0
   28ca8:	e00e      	b.n	28cc8 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28caa:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28cac:	b1c3      	cbz	r3, 28ce0 <_pend_thread+0x68>
   28cae:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28cb2:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28cb6:	42a5      	cmp	r5, r4
   28cb8:	dbe4      	blt.n	28c84 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28cba:	461c      	mov	r4, r3
   28cbc:	2b00      	cmp	r3, #0
   28cbe:	d0f0      	beq.n	28ca2 <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28cc0:	684d      	ldr	r5, [r1, #4]
   28cc2:	42ab      	cmp	r3, r5
   28cc4:	d0ef      	beq.n	28ca6 <_pend_thread+0x2e>
   28cc6:	681d      	ldr	r5, [r3, #0]
   28cc8:	b145      	cbz	r5, 28cdc <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28cca:	2c00      	cmp	r4, #0
   28ccc:	d0ed      	beq.n	28caa <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28cce:	684d      	ldr	r5, [r1, #4]
   28cd0:	42ac      	cmp	r4, r5
   28cd2:	d001      	beq.n	28cd8 <_pend_thread+0x60>
   28cd4:	681b      	ldr	r3, [r3, #0]
   28cd6:	e7e9      	b.n	28cac <_pend_thread+0x34>
   28cd8:	2300      	movs	r3, #0
   28cda:	e7e7      	b.n	28cac <_pend_thread+0x34>
   28cdc:	2300      	movs	r3, #0
   28cde:	e7e5      	b.n	28cac <_pend_thread+0x34>
	node->next = list;
   28ce0:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28ce2:	684b      	ldr	r3, [r1, #4]
   28ce4:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28ce6:	684b      	ldr	r3, [r1, #4]
   28ce8:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28cea:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28cec:	7a44      	ldrb	r4, [r0, #9]
   28cee:	f044 0402 	orr.w	r4, r4, #2
   28cf2:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28cf4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28cf8:	f000 8089 	beq.w	28e0e <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28cfc:	f102 0309 	add.w	r3, r2, #9
   28d00:	4a43      	ldr	r2, [pc, #268]	; (28e10 <_pend_thread+0x198>)
   28d02:	fba2 2303 	umull	r2, r3, r2, r3
   28d06:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28d08:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28d0a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28d0e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28d10:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28d12:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28d14:	b133      	cbz	r3, 28d24 <_pend_thread+0xac>
	return list->head == list;
   28d16:	4a3f      	ldr	r2, [pc, #252]	; (28e14 <_pend_thread+0x19c>)
   28d18:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28d1c:	4293      	cmp	r3, r2
   28d1e:	d151      	bne.n	28dc4 <_pend_thread+0x14c>
   28d20:	2300      	movs	r3, #0
   28d22:	e04f      	b.n	28dc4 <_pend_thread+0x14c>
	__asm__ volatile(
   28d24:	f04f 0320 	mov.w	r3, #32
   28d28:	f3ef 8511 	mrs	r5, BASEPRI
   28d2c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d34:	6123      	str	r3, [r4, #16]
	if (thread) {
   28d36:	b320      	cbz	r0, 28d82 <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28d38:	68e3      	ldr	r3, [r4, #12]
   28d3a:	b15b      	cbz	r3, 28d54 <_pend_thread+0xdc>
	node->prev->next = node->next;
   28d3c:	6843      	ldr	r3, [r0, #4]
   28d3e:	6802      	ldr	r2, [r0, #0]
   28d40:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28d42:	6803      	ldr	r3, [r0, #0]
   28d44:	6842      	ldr	r2, [r0, #4]
   28d46:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28d48:	7a43      	ldrb	r3, [r0, #9]
   28d4a:	f023 0302 	bic.w	r3, r3, #2
   28d4e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28d50:	2300      	movs	r3, #0
   28d52:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28d54:	7a43      	ldrb	r3, [r0, #9]
   28d56:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28d5a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28d5c:	f013 0f1b 	tst.w	r3, #27
   28d60:	d107      	bne.n	28d72 <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d62:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28d68:	d001      	beq.n	28d6e <_pend_thread+0xf6>
   28d6a:	2300      	movs	r3, #0
   28d6c:	e002      	b.n	28d74 <_pend_thread+0xfc>
   28d6e:	2301      	movs	r3, #1
   28d70:	e000      	b.n	28d74 <_pend_thread+0xfc>
   28d72:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28d74:	b913      	cbnz	r3, 28d7c <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d76:	f385 8811 	msr	BASEPRI, r5
   28d7a:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28d7c:	f7ff ff38 	bl	28bf0 <_add_thread_to_ready_q>
   28d80:	e7f9      	b.n	28d76 <_pend_thread+0xfe>
   28d82:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   28d86:	6963      	ldr	r3, [r4, #20]
   28d88:	2b00      	cmp	r3, #0
   28d8a:	d040      	beq.n	28e0e <_pend_thread+0x196>
			timeout->func(timeout);
   28d8c:	4620      	mov	r0, r4
   28d8e:	4798      	blx	r3
   28d90:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28d92:	1a8a      	subs	r2, r1, r2
   28d94:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28d96:	b133      	cbz	r3, 28da6 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28d98:	685a      	ldr	r2, [r3, #4]
   28d9a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28d9c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28d9e:	685a      	ldr	r2, [r3, #4]
   28da0:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28da2:	605c      	str	r4, [r3, #4]
   28da4:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28da6:	4b1b      	ldr	r3, [pc, #108]	; (28e14 <_pend_thread+0x19c>)
   28da8:	f103 020c 	add.w	r2, r3, #12
   28dac:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28dae:	691a      	ldr	r2, [r3, #16]
   28db0:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28db2:	691a      	ldr	r2, [r3, #16]
   28db4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28db6:	611c      	str	r4, [r3, #16]
   28db8:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28dba:	4619      	mov	r1, r3
   28dbc:	e011      	b.n	28de2 <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28dbe:	2100      	movs	r1, #0
   28dc0:	e00f      	b.n	28de2 <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28dc2:	2300      	movs	r3, #0
   28dc4:	b1d3      	cbz	r3, 28dfc <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28dc6:	6922      	ldr	r2, [r4, #16]
   28dc8:	6919      	ldr	r1, [r3, #16]
   28dca:	428a      	cmp	r2, r1
   28dcc:	dde1      	ble.n	28d92 <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28dce:	1a52      	subs	r2, r2, r1
   28dd0:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28dd2:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28dd4:	2b00      	cmp	r3, #0
   28dd6:	d0f0      	beq.n	28dba <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28dd8:	490e      	ldr	r1, [pc, #56]	; (28e14 <_pend_thread+0x19c>)
   28dda:	6909      	ldr	r1, [r1, #16]
   28ddc:	428b      	cmp	r3, r1
   28dde:	d0ee      	beq.n	28dbe <_pend_thread+0x146>
   28de0:	6819      	ldr	r1, [r3, #0]
   28de2:	2900      	cmp	r1, #0
   28de4:	d0ed      	beq.n	28dc2 <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28de6:	b12a      	cbz	r2, 28df4 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28de8:	490a      	ldr	r1, [pc, #40]	; (28e14 <_pend_thread+0x19c>)
   28dea:	6909      	ldr	r1, [r1, #16]
   28dec:	428a      	cmp	r2, r1
   28dee:	d003      	beq.n	28df8 <_pend_thread+0x180>
   28df0:	681b      	ldr	r3, [r3, #0]
   28df2:	e7e7      	b.n	28dc4 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28df4:	2300      	movs	r3, #0
   28df6:	e7e5      	b.n	28dc4 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28df8:	2300      	movs	r3, #0
   28dfa:	e7e3      	b.n	28dc4 <_pend_thread+0x14c>
	node->next = list;
   28dfc:	4b05      	ldr	r3, [pc, #20]	; (28e14 <_pend_thread+0x19c>)
   28dfe:	f103 020c 	add.w	r2, r3, #12
   28e02:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28e04:	691a      	ldr	r2, [r3, #16]
   28e06:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28e08:	691a      	ldr	r2, [r3, #16]
   28e0a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28e0c:	611c      	str	r4, [r3, #16]
   28e0e:	bd38      	pop	{r3, r4, r5, pc}
   28e10:	cccccccd 	.word	0xcccccccd
   28e14:	20002780 	.word	0x20002780

00028e18 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28e18:	b570      	push	{r4, r5, r6, lr}
   28e1a:	4605      	mov	r5, r0
   28e1c:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28e1e:	4c05      	ldr	r4, [pc, #20]	; (28e34 <_pend_current_thread+0x1c>)
   28e20:	68a0      	ldr	r0, [r4, #8]
   28e22:	f7ff ff05 	bl	28c30 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   28e26:	4632      	mov	r2, r6
   28e28:	4629      	mov	r1, r5
   28e2a:	68a0      	ldr	r0, [r4, #8]
   28e2c:	f7ff ff24 	bl	28c78 <_pend_thread>
   28e30:	bd70      	pop	{r4, r5, r6, pc}
   28e32:	bf00      	nop
   28e34:	20002780 	.word	0x20002780

00028e38 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28e38:	4b09      	ldr	r3, [pc, #36]	; (28e60 <__must_switch_threads+0x28>)
   28e3a:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28e3c:	fa93 f0a3 	rbit	r0, r3
   28e40:	fab0 f080 	clz	r0, r0
   28e44:	b90b      	cbnz	r3, 28e4a <__must_switch_threads+0x12>
   28e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28e4a:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28e4c:	4b04      	ldr	r3, [pc, #16]	; (28e60 <__must_switch_threads+0x28>)
   28e4e:	689b      	ldr	r3, [r3, #8]
   28e50:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   28e54:	4283      	cmp	r3, r0
   28e56:	bfd4      	ite	le
   28e58:	2000      	movle	r0, #0
   28e5a:	2001      	movgt	r0, #1
   28e5c:	4770      	bx	lr
   28e5e:	bf00      	nop
   28e60:	20002780 	.word	0x20002780

00028e64 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28e64:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28e68:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28e6c:	3214      	adds	r2, #20
   28e6e:	4911      	ldr	r1, [pc, #68]	; (28eb4 <_move_thread_to_end_of_prio_q+0x50>)
   28e70:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   28e74:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   28e76:	4288      	cmp	r0, r1
   28e78:	d01a      	beq.n	28eb0 <_move_thread_to_end_of_prio_q+0x4c>
{
   28e7a:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28e7c:	6841      	ldr	r1, [r0, #4]
   28e7e:	6804      	ldr	r4, [r0, #0]
   28e80:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   28e82:	6801      	ldr	r1, [r0, #0]
   28e84:	6844      	ldr	r4, [r0, #4]
   28e86:	604c      	str	r4, [r1, #4]
	node->next = list;
   28e88:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28e8a:	4a0a      	ldr	r2, [pc, #40]	; (28eb4 <_move_thread_to_end_of_prio_q+0x50>)
   28e8c:	3304      	adds	r3, #4
   28e8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28e92:	6859      	ldr	r1, [r3, #4]
   28e94:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   28e96:	6859      	ldr	r1, [r3, #4]
   28e98:	6008      	str	r0, [r1, #0]
	list->tail = node;
   28e9a:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28e9c:	6993      	ldr	r3, [r2, #24]
   28e9e:	4298      	cmp	r0, r3
   28ea0:	d002      	beq.n	28ea8 <_move_thread_to_end_of_prio_q+0x44>
   28ea2:	4a04      	ldr	r2, [pc, #16]	; (28eb4 <_move_thread_to_end_of_prio_q+0x50>)
   28ea4:	6193      	str	r3, [r2, #24]
   28ea6:	bd10      	pop	{r4, pc}
   28ea8:	f7ff fe92 	bl	28bd0 <_get_ready_q_head>
   28eac:	4603      	mov	r3, r0
   28eae:	e7f8      	b.n	28ea2 <_move_thread_to_end_of_prio_q+0x3e>
   28eb0:	4770      	bx	lr
   28eb2:	bf00      	nop
   28eb4:	20002780 	.word	0x20002780

00028eb8 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28eb8:	4b01      	ldr	r3, [pc, #4]	; (28ec0 <_impl_k_current_get+0x8>)
   28eba:	6898      	ldr	r0, [r3, #8]
   28ebc:	4770      	bx	lr
   28ebe:	bf00      	nop
   28ec0:	20002780 	.word	0x20002780

00028ec4 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   28ec4:	4b0f      	ldr	r3, [pc, #60]	; (28f04 <_is_thread_time_slicing+0x40>)
   28ec6:	681b      	ldr	r3, [r3, #0]
   28ec8:	2b00      	cmp	r3, #0
   28eca:	dd14      	ble.n	28ef6 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   28ecc:	4b0e      	ldr	r3, [pc, #56]	; (28f08 <_is_thread_time_slicing+0x44>)
   28ece:	681b      	ldr	r3, [r3, #0]
   28ed0:	4298      	cmp	r0, r3
   28ed2:	d012      	beq.n	28efa <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   28ed4:	f990 300a 	ldrsb.w	r3, [r0, #10]
   28ed8:	4a0c      	ldr	r2, [pc, #48]	; (28f0c <_is_thread_time_slicing+0x48>)
   28eda:	6812      	ldr	r2, [r2, #0]
   28edc:	4293      	cmp	r3, r2
   28ede:	db0e      	blt.n	28efe <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   28ee0:	4a0b      	ldr	r2, [pc, #44]	; (28f10 <_is_thread_time_slicing+0x4c>)
   28ee2:	3314      	adds	r3, #20
   28ee4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28eec:	685b      	ldr	r3, [r3, #4]
   28eee:	1ac0      	subs	r0, r0, r3
   28ef0:	bf18      	it	ne
   28ef2:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   28ef4:	4770      	bx	lr
		return 0;
   28ef6:	2000      	movs	r0, #0
   28ef8:	4770      	bx	lr
   28efa:	2000      	movs	r0, #0
   28efc:	4770      	bx	lr
   28efe:	2000      	movs	r0, #0
}
   28f00:	4770      	bx	lr
   28f02:	bf00      	nop
   28f04:	200028a0 	.word	0x200028a0
   28f08:	00032a14 	.word	0x00032a14
   28f0c:	200028a4 	.word	0x200028a4
   28f10:	20002780 	.word	0x20002780

00028f14 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   28f14:	2200      	movs	r2, #0
   28f16:	4b01      	ldr	r3, [pc, #4]	; (28f1c <_update_time_slice_before_swap+0x8>)
   28f18:	601a      	str	r2, [r3, #0]
   28f1a:	4770      	bx	lr
   28f1c:	20002b6c 	.word	0x20002b6c

00028f20 <_reschedule_threads>:
{
   28f20:	b510      	push	{r4, lr}
   28f22:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   28f24:	4b0a      	ldr	r3, [pc, #40]	; (28f50 <_reschedule_threads+0x30>)
   28f26:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28f28:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28f2a:	2b7f      	cmp	r3, #127	; 0x7f
   28f2c:	d805      	bhi.n	28f3a <_reschedule_threads+0x1a>
   28f2e:	f7ff ff83 	bl	28e38 <__must_switch_threads>
   28f32:	4603      	mov	r3, r0
   28f34:	b110      	cbz	r0, 28f3c <_reschedule_threads+0x1c>
   28f36:	2301      	movs	r3, #1
   28f38:	e000      	b.n	28f3c <_reschedule_threads+0x1c>
   28f3a:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   28f3c:	b913      	cbnz	r3, 28f44 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f3e:	f384 8811 	msr	BASEPRI, r4
   28f42:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   28f44:	f7ff ffe6 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28f48:	4620      	mov	r0, r4
   28f4a:	f7fe fb29 	bl	275a0 <__swap>
   28f4e:	bd10      	pop	{r4, pc}
   28f50:	20002780 	.word	0x20002780

00028f54 <k_sched_unlock>:
{
   28f54:	b508      	push	{r3, lr}
	__asm__ volatile(
   28f56:	f04f 0320 	mov.w	r3, #32
   28f5a:	f3ef 8011 	mrs	r0, BASEPRI
   28f5e:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   28f62:	4b04      	ldr	r3, [pc, #16]	; (28f74 <k_sched_unlock+0x20>)
   28f64:	689a      	ldr	r2, [r3, #8]
   28f66:	7ad3      	ldrb	r3, [r2, #11]
   28f68:	3301      	adds	r3, #1
   28f6a:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   28f6c:	f7ff ffd8 	bl	28f20 <_reschedule_threads>
   28f70:	bd08      	pop	{r3, pc}
   28f72:	bf00      	nop
   28f74:	20002780 	.word	0x20002780

00028f78 <_impl_k_yield>:
{
   28f78:	b538      	push	{r3, r4, r5, lr}
   28f7a:	f04f 0320 	mov.w	r3, #32
   28f7e:	f3ef 8511 	mrs	r5, BASEPRI
   28f82:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   28f86:	4c08      	ldr	r4, [pc, #32]	; (28fa8 <_impl_k_yield+0x30>)
   28f88:	68a0      	ldr	r0, [r4, #8]
   28f8a:	f7ff ff6b 	bl	28e64 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   28f8e:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28f90:	69a3      	ldr	r3, [r4, #24]
   28f92:	429a      	cmp	r2, r3
   28f94:	d005      	beq.n	28fa2 <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   28f96:	f7ff ffbd 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   28f9a:	4628      	mov	r0, r5
   28f9c:	f7fe fb00 	bl	275a0 <__swap>
   28fa0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28fa2:	f385 8811 	msr	BASEPRI, r5
   28fa6:	bd38      	pop	{r3, r4, r5, pc}
   28fa8:	20002780 	.word	0x20002780

00028fac <_impl_k_sleep>:
{
   28fac:	b570      	push	{r4, r5, r6, lr}
   28fae:	b082      	sub	sp, #8
	if (duration == 0) {
   28fb0:	b308      	cbz	r0, 28ff6 <_impl_k_sleep+0x4a>
   28fb2:	4603      	mov	r3, r0
   28fb4:	3309      	adds	r3, #9
   28fb6:	4a4f      	ldr	r2, [pc, #316]	; (290f4 <_impl_k_sleep+0x148>)
   28fb8:	fba2 2303 	umull	r2, r3, r2, r3
   28fbc:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   28fbe:	3301      	adds	r3, #1
   28fc0:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   28fc2:	f04f 0320 	mov.w	r3, #32
   28fc6:	f3ef 8511 	mrs	r5, BASEPRI
   28fca:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   28fce:	4c4a      	ldr	r4, [pc, #296]	; (290f8 <_impl_k_sleep+0x14c>)
   28fd0:	68a0      	ldr	r0, [r4, #8]
   28fd2:	f7ff fe2d 	bl	28c30 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   28fd6:	68a0      	ldr	r0, [r4, #8]
   28fd8:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28fda:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28fde:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28fe0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28fe2:	2200      	movs	r2, #0
   28fe4:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28fe6:	b14b      	cbz	r3, 28ffc <_impl_k_sleep+0x50>
	return list->head == list;
   28fe8:	4a43      	ldr	r2, [pc, #268]	; (290f8 <_impl_k_sleep+0x14c>)
   28fea:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28fee:	4293      	cmp	r3, r2
   28ff0:	d154      	bne.n	2909c <_impl_k_sleep+0xf0>
   28ff2:	2300      	movs	r3, #0
   28ff4:	e052      	b.n	2909c <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   28ff6:	f7ff ffbf 	bl	28f78 <_impl_k_yield>
   28ffa:	e079      	b.n	290f0 <_impl_k_sleep+0x144>
   28ffc:	f04f 0320 	mov.w	r3, #32
   29000:	f3ef 8611 	mrs	r6, BASEPRI
   29004:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2900c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2900e:	b320      	cbz	r0, 2905a <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   29010:	68e3      	ldr	r3, [r4, #12]
   29012:	b15b      	cbz	r3, 2902c <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   29014:	6843      	ldr	r3, [r0, #4]
   29016:	6802      	ldr	r2, [r0, #0]
   29018:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2901a:	6803      	ldr	r3, [r0, #0]
   2901c:	6842      	ldr	r2, [r0, #4]
   2901e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29020:	7a43      	ldrb	r3, [r0, #9]
   29022:	f023 0302 	bic.w	r3, r3, #2
   29026:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29028:	2300      	movs	r3, #0
   2902a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2902c:	7a43      	ldrb	r3, [r0, #9]
   2902e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29032:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29034:	f013 0f1b 	tst.w	r3, #27
   29038:	d107      	bne.n	2904a <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2903a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2903c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29040:	d001      	beq.n	29046 <_impl_k_sleep+0x9a>
   29042:	2300      	movs	r3, #0
   29044:	e002      	b.n	2904c <_impl_k_sleep+0xa0>
   29046:	2301      	movs	r3, #1
   29048:	e000      	b.n	2904c <_impl_k_sleep+0xa0>
   2904a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2904c:	b913      	cbnz	r3, 29054 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2904e:	f386 8811 	msr	BASEPRI, r6
   29052:	e048      	b.n	290e6 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   29054:	f7ff fdcc 	bl	28bf0 <_add_thread_to_ready_q>
   29058:	e7f9      	b.n	2904e <_impl_k_sleep+0xa2>
   2905a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2905e:	6963      	ldr	r3, [r4, #20]
   29060:	2b00      	cmp	r3, #0
   29062:	d040      	beq.n	290e6 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   29064:	4620      	mov	r0, r4
   29066:	4798      	blx	r3
   29068:	e03d      	b.n	290e6 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   2906a:	1a8a      	subs	r2, r1, r2
   2906c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2906e:	b133      	cbz	r3, 2907e <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   29070:	685a      	ldr	r2, [r3, #4]
   29072:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29074:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   29076:	685a      	ldr	r2, [r3, #4]
   29078:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2907a:	605c      	str	r4, [r3, #4]
   2907c:	e033      	b.n	290e6 <_impl_k_sleep+0x13a>
	node->next = list;
   2907e:	4b1e      	ldr	r3, [pc, #120]	; (290f8 <_impl_k_sleep+0x14c>)
   29080:	f103 020c 	add.w	r2, r3, #12
   29084:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29086:	691a      	ldr	r2, [r3, #16]
   29088:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2908a:	691a      	ldr	r2, [r3, #16]
   2908c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2908e:	611c      	str	r4, [r3, #16]
   29090:	e029      	b.n	290e6 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29092:	4619      	mov	r1, r3
   29094:	e011      	b.n	290ba <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29096:	2100      	movs	r1, #0
   29098:	e00f      	b.n	290ba <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2909a:	2300      	movs	r3, #0
   2909c:	b1d3      	cbz	r3, 290d4 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2909e:	6922      	ldr	r2, [r4, #16]
   290a0:	6919      	ldr	r1, [r3, #16]
   290a2:	428a      	cmp	r2, r1
   290a4:	dde1      	ble.n	2906a <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   290a6:	1a52      	subs	r2, r2, r1
   290a8:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   290aa:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290ac:	2b00      	cmp	r3, #0
   290ae:	d0f0      	beq.n	29092 <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   290b0:	4911      	ldr	r1, [pc, #68]	; (290f8 <_impl_k_sleep+0x14c>)
   290b2:	6909      	ldr	r1, [r1, #16]
   290b4:	428b      	cmp	r3, r1
   290b6:	d0ee      	beq.n	29096 <_impl_k_sleep+0xea>
   290b8:	6819      	ldr	r1, [r3, #0]
   290ba:	2900      	cmp	r1, #0
   290bc:	d0ed      	beq.n	2909a <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290be:	b12a      	cbz	r2, 290cc <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   290c0:	490d      	ldr	r1, [pc, #52]	; (290f8 <_impl_k_sleep+0x14c>)
   290c2:	6909      	ldr	r1, [r1, #16]
   290c4:	428a      	cmp	r2, r1
   290c6:	d003      	beq.n	290d0 <_impl_k_sleep+0x124>
   290c8:	681b      	ldr	r3, [r3, #0]
   290ca:	e7e7      	b.n	2909c <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290cc:	2300      	movs	r3, #0
   290ce:	e7e5      	b.n	2909c <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   290d0:	2300      	movs	r3, #0
   290d2:	e7e3      	b.n	2909c <_impl_k_sleep+0xf0>
	node->next = list;
   290d4:	4b08      	ldr	r3, [pc, #32]	; (290f8 <_impl_k_sleep+0x14c>)
   290d6:	f103 020c 	add.w	r2, r3, #12
   290da:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   290dc:	691a      	ldr	r2, [r3, #16]
   290de:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   290e0:	691a      	ldr	r2, [r3, #16]
   290e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   290e4:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   290e6:	f7ff ff15 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   290ea:	4628      	mov	r0, r5
   290ec:	f7fe fa58 	bl	275a0 <__swap>
}
   290f0:	b002      	add	sp, #8
   290f2:	bd70      	pop	{r4, r5, r6, pc}
   290f4:	cccccccd 	.word	0xcccccccd
   290f8:	20002780 	.word	0x20002780

000290fc <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   290fc:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   290fe:	4b43      	ldr	r3, [pc, #268]	; (2920c <do_sem_give+0x110>)
   29100:	681b      	ldr	r3, [r3, #0]
   29102:	2b00      	cmp	r3, #0
   29104:	d136      	bne.n	29174 <do_sem_give+0x78>
	return list->head == list;
   29106:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29108:	42a0      	cmp	r0, r4
   2910a:	d044      	beq.n	29196 <do_sem_give+0x9a>
	if (thread) {
   2910c:	b14c      	cbz	r4, 29122 <do_sem_give+0x26>
	node->prev->next = node->next;
   2910e:	6863      	ldr	r3, [r4, #4]
   29110:	6822      	ldr	r2, [r4, #0]
   29112:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29114:	6823      	ldr	r3, [r4, #0]
   29116:	6862      	ldr	r2, [r4, #4]
   29118:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2911a:	7a63      	ldrb	r3, [r4, #9]
   2911c:	f023 0302 	bic.w	r3, r3, #2
   29120:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   29122:	2c00      	cmp	r4, #0
   29124:	d039      	beq.n	2919a <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29126:	6a22      	ldr	r2, [r4, #32]
   29128:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2912c:	d013      	beq.n	29156 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2912e:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29132:	4937      	ldr	r1, [pc, #220]	; (29210 <do_sem_give+0x114>)
   29134:	6909      	ldr	r1, [r1, #16]
   29136:	428b      	cmp	r3, r1
   29138:	d004      	beq.n	29144 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2913a:	b103      	cbz	r3, 2913e <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   2913c:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2913e:	6919      	ldr	r1, [r3, #16]
   29140:	440a      	add	r2, r1
   29142:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29144:	6963      	ldr	r3, [r4, #20]
   29146:	6922      	ldr	r2, [r4, #16]
   29148:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2914a:	6923      	ldr	r3, [r4, #16]
   2914c:	6962      	ldr	r2, [r4, #20]
   2914e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29154:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29156:	7a63      	ldrb	r3, [r4, #9]
   29158:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2915c:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2915e:	f013 0f1b 	tst.w	r3, #27
   29162:	d128      	bne.n	291b6 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29164:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2916a:	d022      	beq.n	291b2 <do_sem_give+0xb6>
   2916c:	2300      	movs	r3, #0
   2916e:	e023      	b.n	291b8 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29170:	2400      	movs	r4, #0
   29172:	e003      	b.n	2917c <do_sem_give+0x80>
   29174:	4602      	mov	r2, r0
	return list->head == list;
   29176:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29178:	42a0      	cmp	r0, r4
   2917a:	d0f9      	beq.n	29170 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2917c:	2c00      	cmp	r4, #0
   2917e:	d0c5      	beq.n	2910c <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29180:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   29182:	f113 0f02 	cmn.w	r3, #2
   29186:	d1c1      	bne.n	2910c <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   29188:	6853      	ldr	r3, [r2, #4]
   2918a:	429c      	cmp	r4, r3
   2918c:	d001      	beq.n	29192 <do_sem_give+0x96>
   2918e:	6824      	ldr	r4, [r4, #0]
   29190:	e7f4      	b.n	2917c <do_sem_give+0x80>
   29192:	2400      	movs	r4, #0
   29194:	e7f2      	b.n	2917c <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29196:	2400      	movs	r4, #0
   29198:	e7b8      	b.n	2910c <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   2919a:	6883      	ldr	r3, [r0, #8]
   2919c:	68c2      	ldr	r2, [r0, #12]
   2919e:	4293      	cmp	r3, r2
   291a0:	bf18      	it	ne
   291a2:	3301      	addne	r3, #1
   291a4:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   291a6:	2102      	movs	r1, #2
   291a8:	3010      	adds	r0, #16
   291aa:	f7ff fbfd 	bl	289a8 <_handle_obj_poll_events>
   291ae:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   291b0:	e01c      	b.n	291ec <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   291b2:	2301      	movs	r3, #1
   291b4:	e000      	b.n	291b8 <do_sem_give+0xbc>
   291b6:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   291b8:	b96b      	cbnz	r3, 291d6 <do_sem_give+0xda>
   291ba:	2300      	movs	r3, #0
   291bc:	6663      	str	r3, [r4, #100]	; 0x64
   291be:	f3ef 8305 	mrs	r3, IPSR
   291c2:	2b0d      	cmp	r3, #13
   291c4:	d80b      	bhi.n	291de <do_sem_give+0xe2>
   291c6:	b19b      	cbz	r3, 291f0 <do_sem_give+0xf4>
   291c8:	4b12      	ldr	r3, [pc, #72]	; (29214 <do_sem_give+0x118>)
   291ca:	685b      	ldr	r3, [r3, #4]
   291cc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   291d0:	d010      	beq.n	291f4 <do_sem_give+0xf8>
   291d2:	2300      	movs	r3, #0
   291d4:	e004      	b.n	291e0 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   291d6:	4620      	mov	r0, r4
   291d8:	f7ff fd0a 	bl	28bf0 <_add_thread_to_ready_q>
   291dc:	e7ed      	b.n	291ba <do_sem_give+0xbe>
   291de:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   291e0:	b98b      	cbnz	r3, 29206 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   291e2:	4a0b      	ldr	r2, [pc, #44]	; (29210 <do_sem_give+0x114>)
   291e4:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   291e6:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   291e8:	2a7f      	cmp	r2, #127	; 0x7f
   291ea:	d905      	bls.n	291f8 <do_sem_give+0xfc>
}
   291ec:	4618      	mov	r0, r3
   291ee:	bd10      	pop	{r4, pc}
   291f0:	2300      	movs	r3, #0
   291f2:	e7f5      	b.n	291e0 <do_sem_give+0xe4>
   291f4:	2301      	movs	r3, #1
   291f6:	e7f3      	b.n	291e0 <do_sem_give+0xe4>
   291f8:	f7ff fe1e 	bl	28e38 <__must_switch_threads>
   291fc:	4603      	mov	r3, r0
   291fe:	2800      	cmp	r0, #0
   29200:	d0f4      	beq.n	291ec <do_sem_give+0xf0>
   29202:	2301      	movs	r3, #1
   29204:	e7f2      	b.n	291ec <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   29206:	2300      	movs	r3, #0
   29208:	e7f0      	b.n	291ec <do_sem_give+0xf0>
   2920a:	bf00      	nop
   2920c:	20002b68 	.word	0x20002b68
   29210:	20002780 	.word	0x20002780
   29214:	e000ed00 	.word	0xe000ed00

00029218 <_impl_k_sem_init>:
	sem->count = initial_count;
   29218:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2921a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2921c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2921e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   29220:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   29224:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   29226:	6143      	str	r3, [r0, #20]
   29228:	4770      	bx	lr

0002922a <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2922a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2922c:	f04f 0320 	mov.w	r3, #32
   29230:	f3ef 8411 	mrs	r4, BASEPRI
   29234:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   29238:	f7ff ff60 	bl	290fc <do_sem_give>
   2923c:	b910      	cbnz	r0, 29244 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2923e:	f384 8811 	msr	BASEPRI, r4
   29242:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   29244:	f7ff fe66 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   29248:	4620      	mov	r0, r4
   2924a:	f7fe f9a9 	bl	275a0 <__swap>
   2924e:	bd10      	pop	{r4, pc}

00029250 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   29250:	b510      	push	{r4, lr}
	__asm__ volatile(
   29252:	f04f 0320 	mov.w	r3, #32
   29256:	f3ef 8411 	mrs	r4, BASEPRI
   2925a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   2925e:	6883      	ldr	r3, [r0, #8]
   29260:	b12b      	cbz	r3, 2926e <_impl_k_sem_take+0x1e>
		sem->count--;
   29262:	3b01      	subs	r3, #1
   29264:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29266:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   2926a:	2000      	movs	r0, #0
   2926c:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   2926e:	b139      	cbz	r1, 29280 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   29270:	f7ff fdd2 	bl	28e18 <_pend_current_thread>
	_update_time_slice_before_swap();
   29274:	f7ff fe4e 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   29278:	4620      	mov	r0, r4
   2927a:	f7fe f991 	bl	275a0 <__swap>

	return _Swap(key);
}
   2927e:	bd10      	pop	{r4, pc}
   29280:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   29284:	f06f 000f 	mvn.w	r0, #15
   29288:	bd10      	pop	{r4, pc}
	...

0002928c <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   2928c:	b538      	push	{r3, r4, r5, lr}
   2928e:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   29290:	4b0f      	ldr	r3, [pc, #60]	; (292d0 <handle_time_slicing+0x44>)
   29292:	6898      	ldr	r0, [r3, #8]
   29294:	f7ff fe16 	bl	28ec4 <_is_thread_time_slicing>
   29298:	b150      	cbz	r0, 292b0 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   2929a:	00a2      	lsls	r2, r4, #2
   2929c:	1912      	adds	r2, r2, r4
   2929e:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   292a0:	490c      	ldr	r1, [pc, #48]	; (292d4 <handle_time_slicing+0x48>)
   292a2:	680b      	ldr	r3, [r1, #0]
   292a4:	441a      	add	r2, r3
   292a6:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   292a8:	4b0b      	ldr	r3, [pc, #44]	; (292d8 <handle_time_slicing+0x4c>)
   292aa:	681b      	ldr	r3, [r3, #0]
   292ac:	429a      	cmp	r2, r3
   292ae:	da00      	bge.n	292b2 <handle_time_slicing+0x26>
   292b0:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   292b2:	2200      	movs	r2, #0
   292b4:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   292b6:	f04f 0320 	mov.w	r3, #32
   292ba:	f3ef 8411 	mrs	r4, BASEPRI
   292be:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   292c2:	4b03      	ldr	r3, [pc, #12]	; (292d0 <handle_time_slicing+0x44>)
   292c4:	6898      	ldr	r0, [r3, #8]
   292c6:	f7ff fdcd 	bl	28e64 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   292ca:	f384 8811 	msr	BASEPRI, r4
   292ce:	e7ef      	b.n	292b0 <handle_time_slicing+0x24>
   292d0:	20002780 	.word	0x20002780
   292d4:	20002b6c 	.word	0x20002b6c
   292d8:	200028a0 	.word	0x200028a0

000292dc <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   292dc:	4b01      	ldr	r3, [pc, #4]	; (292e4 <_tick_get_32+0x8>)
   292de:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   292e2:	4770      	bx	lr
   292e4:	20002b70 	.word	0x20002b70

000292e8 <_impl_k_uptime_get_32>:
{
   292e8:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   292ea:	f7ff fff7 	bl	292dc <_tick_get_32>
   292ee:	0082      	lsls	r2, r0, #2
   292f0:	1810      	adds	r0, r2, r0
   292f2:	1800      	adds	r0, r0, r0
}
   292f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000292f8 <_tick_get>:
	__asm__ volatile(
   292f8:	f04f 0220 	mov.w	r2, #32
   292fc:	f3ef 8311 	mrs	r3, BASEPRI
   29300:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   29304:	4a02      	ldr	r2, [pc, #8]	; (29310 <_tick_get+0x18>)
   29306:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2930a:	f383 8811 	msr	BASEPRI, r3
}
   2930e:	4770      	bx	lr
   29310:	20002b70 	.word	0x20002b70

00029314 <_impl_k_uptime_get>:
{
   29314:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   29316:	f7ff ffef 	bl	292f8 <_tick_get>
   2931a:	008c      	lsls	r4, r1, #2
   2931c:	0082      	lsls	r2, r0, #2
   2931e:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   29322:	1880      	adds	r0, r0, r2
   29324:	4159      	adcs	r1, r3
   29326:	1800      	adds	r0, r0, r0
   29328:	4149      	adcs	r1, r1
}
   2932a:	bd10      	pop	{r4, pc}

0002932c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   2932c:	b570      	push	{r4, r5, r6, lr}
   2932e:	b082      	sub	sp, #8
   29330:	4605      	mov	r5, r0
	__asm__ volatile(
   29332:	f04f 0320 	mov.w	r3, #32
   29336:	f3ef 8011 	mrs	r0, BASEPRI
   2933a:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   2933e:	496a      	ldr	r1, [pc, #424]	; (294e8 <_nano_sys_clock_tick_announce+0x1bc>)
   29340:	e9d1 2300 	ldrd	r2, r3, [r1]
   29344:	1952      	adds	r2, r2, r5
   29346:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2934a:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2934e:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   29352:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   29356:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   2935a:	f04f 0320 	mov.w	r3, #32
   2935e:	f3ef 8111 	mrs	r1, BASEPRI
   29362:	f383 8811 	msr	BASEPRI, r3
   29366:	4608      	mov	r0, r1
	return list->head == list;
   29368:	4b60      	ldr	r3, [pc, #384]	; (294ec <_nano_sys_clock_tick_announce+0x1c0>)
   2936a:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2936e:	429a      	cmp	r2, r3
   29370:	d02b      	beq.n	293ca <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   29372:	b362      	cbz	r2, 293ce <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   29374:	6913      	ldr	r3, [r2, #16]
   29376:	1b5b      	subs	r3, r3, r5
   29378:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   2937a:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   2937c:	2101      	movs	r1, #1
   2937e:	4a5c      	ldr	r2, [pc, #368]	; (294f0 <_nano_sys_clock_tick_announce+0x1c4>)
   29380:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   29382:	b33b      	cbz	r3, 293d4 <_nano_sys_clock_tick_announce+0xa8>
   29384:	691a      	ldr	r2, [r3, #16]
   29386:	bb2a      	cbnz	r2, 293d4 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   29388:	685a      	ldr	r2, [r3, #4]
   2938a:	6819      	ldr	r1, [r3, #0]
   2938c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2938e:	681a      	ldr	r2, [r3, #0]
   29390:	6859      	ldr	r1, [r3, #4]
   29392:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   29394:	aa02      	add	r2, sp, #8
   29396:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   2939a:	6019      	str	r1, [r3, #0]
	node->prev = list;
   2939c:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   2939e:	9a00      	ldr	r2, [sp, #0]
   293a0:	6053      	str	r3, [r2, #4]
	list->head = node;
   293a2:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   293a4:	f06f 0201 	mvn.w	r2, #1
   293a8:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293aa:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   293ae:	f04f 0220 	mov.w	r2, #32
   293b2:	f3ef 8311 	mrs	r3, BASEPRI
   293b6:	f382 8811 	msr	BASEPRI, r2
   293ba:	4618      	mov	r0, r3
	return list->head == list;
   293bc:	4a4b      	ldr	r2, [pc, #300]	; (294ec <_nano_sys_clock_tick_announce+0x1c0>)
   293be:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293c2:	4293      	cmp	r3, r2
   293c4:	d1dd      	bne.n	29382 <_nano_sys_clock_tick_announce+0x56>
   293c6:	2300      	movs	r3, #0
   293c8:	e7db      	b.n	29382 <_nano_sys_clock_tick_announce+0x56>
   293ca:	2200      	movs	r2, #0
   293cc:	e7d1      	b.n	29372 <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293ce:	f381 8811 	msr	BASEPRI, r1
   293d2:	e084      	b.n	294de <_nano_sys_clock_tick_announce+0x1b2>
   293d4:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   293d8:	aa02      	add	r2, sp, #8
   293da:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293de:	4293      	cmp	r3, r2
   293e0:	d00d      	beq.n	293fe <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   293e2:	b193      	cbz	r3, 2940a <_nano_sys_clock_tick_announce+0xde>
   293e4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293e6:	b163      	cbz	r3, 29402 <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   293e8:	9901      	ldr	r1, [sp, #4]
   293ea:	428b      	cmp	r3, r1
   293ec:	d00b      	beq.n	29406 <_nano_sys_clock_tick_announce+0xda>
   293ee:	6819      	ldr	r1, [r3, #0]
   293f0:	b169      	cbz	r1, 2940e <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293f2:	b172      	cbz	r2, 29412 <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   293f4:	9901      	ldr	r1, [sp, #4]
   293f6:	428a      	cmp	r2, r1
   293f8:	d00d      	beq.n	29416 <_nano_sys_clock_tick_announce+0xea>
   293fa:	681c      	ldr	r4, [r3, #0]
   293fc:	e027      	b.n	2944e <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293fe:	2300      	movs	r3, #0
   29400:	e7ef      	b.n	293e2 <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29402:	4619      	mov	r1, r3
   29404:	e7f4      	b.n	293f0 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   29406:	2100      	movs	r1, #0
   29408:	e7f2      	b.n	293f0 <_nano_sys_clock_tick_announce+0xc4>
   2940a:	461c      	mov	r4, r3
   2940c:	e01f      	b.n	2944e <_nano_sys_clock_tick_announce+0x122>
   2940e:	2400      	movs	r4, #0
   29410:	e01d      	b.n	2944e <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29412:	2400      	movs	r4, #0
   29414:	e01b      	b.n	2944e <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   29416:	2400      	movs	r4, #0
   29418:	e019      	b.n	2944e <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   2941a:	2301      	movs	r3, #1
   2941c:	e000      	b.n	29420 <_nano_sys_clock_tick_announce+0xf4>
   2941e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29420:	2b00      	cmp	r3, #0
   29422:	d142      	bne.n	294aa <_nano_sys_clock_tick_announce+0x17e>
   29424:	f386 8811 	msr	BASEPRI, r6
   29428:	2c00      	cmp	r4, #0
   2942a:	d04d      	beq.n	294c8 <_nano_sys_clock_tick_announce+0x19c>
   2942c:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2942e:	2c00      	cmp	r4, #0
   29430:	d046      	beq.n	294c0 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   29432:	9a01      	ldr	r2, [sp, #4]
   29434:	4294      	cmp	r4, r2
   29436:	d045      	beq.n	294c4 <_nano_sys_clock_tick_announce+0x198>
   29438:	6822      	ldr	r2, [r4, #0]
   2943a:	2a00      	cmp	r2, #0
   2943c:	d046      	beq.n	294cc <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2943e:	2b00      	cmp	r3, #0
   29440:	d046      	beq.n	294d0 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   29442:	9a01      	ldr	r2, [sp, #4]
   29444:	4293      	cmp	r3, r2
   29446:	d045      	beq.n	294d4 <_nano_sys_clock_tick_announce+0x1a8>
   29448:	6822      	ldr	r2, [r4, #0]
   2944a:	4623      	mov	r3, r4
   2944c:	4614      	mov	r4, r2
   2944e:	2b00      	cmp	r3, #0
   29450:	d042      	beq.n	294d8 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   29452:	685a      	ldr	r2, [r3, #4]
   29454:	6819      	ldr	r1, [r3, #0]
   29456:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29458:	681a      	ldr	r2, [r3, #0]
   2945a:	6859      	ldr	r1, [r3, #4]
   2945c:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   2945e:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   29460:	f04f 0220 	mov.w	r2, #32
   29464:	f3ef 8611 	mrs	r6, BASEPRI
   29468:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2946c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29470:	611a      	str	r2, [r3, #16]
	if (thread) {
   29472:	b1e8      	cbz	r0, 294b0 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   29474:	68db      	ldr	r3, [r3, #12]
   29476:	b15b      	cbz	r3, 29490 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   29478:	6843      	ldr	r3, [r0, #4]
   2947a:	6802      	ldr	r2, [r0, #0]
   2947c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2947e:	6803      	ldr	r3, [r0, #0]
   29480:	6842      	ldr	r2, [r0, #4]
   29482:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29484:	7a43      	ldrb	r3, [r0, #9]
   29486:	f023 0302 	bic.w	r3, r3, #2
   2948a:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2948c:	2300      	movs	r3, #0
   2948e:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29490:	7a43      	ldrb	r3, [r0, #9]
   29492:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29496:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29498:	f013 0f1b 	tst.w	r3, #27
   2949c:	d1bf      	bne.n	2941e <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2949e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   294a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   294a4:	d0b9      	beq.n	2941a <_nano_sys_clock_tick_announce+0xee>
   294a6:	2300      	movs	r3, #0
   294a8:	e7ba      	b.n	29420 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   294aa:	f7ff fba1 	bl	28bf0 <_add_thread_to_ready_q>
   294ae:	e7b9      	b.n	29424 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294b0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   294b4:	695a      	ldr	r2, [r3, #20]
   294b6:	2a00      	cmp	r2, #0
   294b8:	d0b6      	beq.n	29428 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   294ba:	4618      	mov	r0, r3
   294bc:	4790      	blx	r2
   294be:	e7b3      	b.n	29428 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   294c0:	4622      	mov	r2, r4
   294c2:	e7ba      	b.n	2943a <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   294c4:	2200      	movs	r2, #0
   294c6:	e7b8      	b.n	2943a <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   294c8:	4622      	mov	r2, r4
   294ca:	e7be      	b.n	2944a <_nano_sys_clock_tick_announce+0x11e>
   294cc:	2200      	movs	r2, #0
   294ce:	e7bc      	b.n	2944a <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   294d0:	2200      	movs	r2, #0
   294d2:	e7ba      	b.n	2944a <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   294d4:	2200      	movs	r2, #0
   294d6:	e7b8      	b.n	2944a <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   294d8:	2200      	movs	r2, #0
   294da:	4b05      	ldr	r3, [pc, #20]	; (294f0 <_nano_sys_clock_tick_announce+0x1c4>)
   294dc:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   294de:	4628      	mov	r0, r5
   294e0:	f7ff fed4 	bl	2928c <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   294e4:	b002      	add	sp, #8
   294e6:	bd70      	pop	{r4, r5, r6, pc}
   294e8:	20002b70 	.word	0x20002b70
   294ec:	20002780 	.word	0x20002780
   294f0:	20002b68 	.word	0x20002b68

000294f4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   294f4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   294f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   294fe:	4903      	ldr	r1, [pc, #12]	; (2950c <k_sys_work_q_init+0x18>)
   29500:	4803      	ldr	r0, [pc, #12]	; (29510 <k_sys_work_q_init+0x1c>)
   29502:	f000 fc49 	bl	29d98 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   29506:	2000      	movs	r0, #0
   29508:	bd08      	pop	{r3, pc}
   2950a:	bf00      	nop
   2950c:	2000b468 	.word	0x2000b468
   29510:	20002b78 	.word	0x20002b78

00029514 <k_is_in_isr>:
   29514:	f3ef 8305 	mrs	r3, IPSR
   29518:	2b0d      	cmp	r3, #13
   2951a:	d807      	bhi.n	2952c <k_is_in_isr+0x18>
   2951c:	b143      	cbz	r3, 29530 <k_is_in_isr+0x1c>
   2951e:	4b06      	ldr	r3, [pc, #24]	; (29538 <k_is_in_isr+0x24>)
   29520:	685b      	ldr	r3, [r3, #4]
   29522:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29526:	d005      	beq.n	29534 <k_is_in_isr+0x20>
   29528:	2000      	movs	r0, #0
   2952a:	4770      	bx	lr
   2952c:	2001      	movs	r0, #1
   2952e:	4770      	bx	lr
   29530:	2000      	movs	r0, #0
   29532:	4770      	bx	lr
   29534:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   29536:	4770      	bx	lr
   29538:	e000ed00 	.word	0xe000ed00

0002953c <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   2953c:	4b02      	ldr	r3, [pc, #8]	; (29548 <_is_thread_essential+0xc>)
   2953e:	689b      	ldr	r3, [r3, #8]
   29540:	7a18      	ldrb	r0, [r3, #8]
}
   29542:	f000 0001 	and.w	r0, r0, #1
   29546:	4770      	bx	lr
   29548:	20002780 	.word	0x20002780

0002954c <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2954c:	b508      	push	{r3, lr}
   2954e:	4604      	mov	r4, r0
   29550:	4608      	mov	r0, r1
   29552:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   29554:	461a      	mov	r2, r3
   29556:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   29558:	f7ff fcae 	bl	28eb8 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2955c:	f7fe facc 	bl	27af8 <_impl_k_thread_abort>

00029560 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   29560:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29562:	f04f 0320 	mov.w	r3, #32
   29566:	f3ef 8411 	mrs	r4, BASEPRI
   2956a:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   2956e:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   29570:	f013 0f04 	tst.w	r3, #4
   29574:	d00b      	beq.n	2958e <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29576:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2957a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2957c:	f013 0f1b 	tst.w	r3, #27
   29580:	d10a      	bne.n	29598 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29582:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29588:	d004      	beq.n	29594 <_impl_k_thread_start+0x34>
   2958a:	2500      	movs	r5, #0
   2958c:	e005      	b.n	2959a <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2958e:	f384 8811 	msr	BASEPRI, r4
   29592:	bd38      	pop	{r3, r4, r5, pc}
   29594:	2501      	movs	r5, #1
   29596:	e000      	b.n	2959a <_impl_k_thread_start+0x3a>
   29598:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   2959a:	b915      	cbnz	r5, 295a2 <_impl_k_thread_start+0x42>
   2959c:	f384 8811 	msr	BASEPRI, r4
   295a0:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   295a2:	f7ff fb25 	bl	28bf0 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   295a6:	4b0a      	ldr	r3, [pc, #40]	; (295d0 <_impl_k_thread_start+0x70>)
   295a8:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   295aa:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   295ac:	2b7f      	cmp	r3, #127	; 0x7f
   295ae:	d908      	bls.n	295c2 <_impl_k_thread_start+0x62>
   295b0:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   295b2:	2b00      	cmp	r3, #0
   295b4:	d0f2      	beq.n	2959c <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   295b6:	f7ff fcad 	bl	28f14 <_update_time_slice_before_swap>
	return __swap(key);
   295ba:	4620      	mov	r0, r4
   295bc:	f7fd fff0 	bl	275a0 <__swap>
   295c0:	bd38      	pop	{r3, r4, r5, pc}
   295c2:	f7ff fc39 	bl	28e38 <__must_switch_threads>
   295c6:	4603      	mov	r3, r0
   295c8:	2800      	cmp	r0, #0
   295ca:	d0f2      	beq.n	295b2 <_impl_k_thread_start+0x52>
   295cc:	462b      	mov	r3, r5
   295ce:	e7f0      	b.n	295b2 <_impl_k_thread_start+0x52>
   295d0:	20002780 	.word	0x20002780

000295d4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   295d4:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   295d6:	b1d1      	cbz	r1, 2960e <schedule_new_thread+0x3a>
   295d8:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   295da:	3309      	adds	r3, #9
   295dc:	4a47      	ldr	r2, [pc, #284]	; (296fc <schedule_new_thread+0x128>)
   295de:	fba2 2303 	umull	r2, r3, r2, r3
   295e2:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   295e4:	3301      	adds	r3, #1
	__asm__ volatile(
   295e6:	f04f 0220 	mov.w	r2, #32
   295ea:	f3ef 8511 	mrs	r5, BASEPRI
   295ee:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   295f2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   295f6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   295f8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   295fa:	2200      	movs	r2, #0
   295fc:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   295fe:	b14b      	cbz	r3, 29614 <schedule_new_thread+0x40>
	return list->head == list;
   29600:	4a3f      	ldr	r2, [pc, #252]	; (29700 <schedule_new_thread+0x12c>)
   29602:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29606:	4293      	cmp	r3, r2
   29608:	d152      	bne.n	296b0 <schedule_new_thread+0xdc>
   2960a:	2300      	movs	r3, #0
   2960c:	e050      	b.n	296b0 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   2960e:	f7ff ffa7 	bl	29560 <_impl_k_thread_start>
   29612:	bd70      	pop	{r4, r5, r6, pc}
   29614:	f04f 0320 	mov.w	r3, #32
   29618:	f3ef 8611 	mrs	r6, BASEPRI
   2961c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29624:	6123      	str	r3, [r4, #16]
	if (thread) {
   29626:	b320      	cbz	r0, 29672 <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   29628:	68e3      	ldr	r3, [r4, #12]
   2962a:	b15b      	cbz	r3, 29644 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   2962c:	6843      	ldr	r3, [r0, #4]
   2962e:	6802      	ldr	r2, [r0, #0]
   29630:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29632:	6803      	ldr	r3, [r0, #0]
   29634:	6842      	ldr	r2, [r0, #4]
   29636:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29638:	7a43      	ldrb	r3, [r0, #9]
   2963a:	f023 0302 	bic.w	r3, r3, #2
   2963e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29640:	2300      	movs	r3, #0
   29642:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29644:	7a43      	ldrb	r3, [r0, #9]
   29646:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2964a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2964c:	f013 0f1b 	tst.w	r3, #27
   29650:	d107      	bne.n	29662 <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29652:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29658:	d001      	beq.n	2965e <schedule_new_thread+0x8a>
   2965a:	2300      	movs	r3, #0
   2965c:	e002      	b.n	29664 <schedule_new_thread+0x90>
   2965e:	2301      	movs	r3, #1
   29660:	e000      	b.n	29664 <schedule_new_thread+0x90>
   29662:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29664:	b913      	cbnz	r3, 2966c <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29666:	f386 8811 	msr	BASEPRI, r6
   2966a:	e044      	b.n	296f6 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   2966c:	f7ff fac0 	bl	28bf0 <_add_thread_to_ready_q>
   29670:	e7f9      	b.n	29666 <schedule_new_thread+0x92>
   29672:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29676:	6963      	ldr	r3, [r4, #20]
   29678:	2b00      	cmp	r3, #0
   2967a:	d03c      	beq.n	296f6 <schedule_new_thread+0x122>
			timeout->func(timeout);
   2967c:	4620      	mov	r0, r4
   2967e:	4798      	blx	r3
   29680:	e039      	b.n	296f6 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   29682:	1a8a      	subs	r2, r1, r2
   29684:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29686:	b133      	cbz	r3, 29696 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   29688:	685a      	ldr	r2, [r3, #4]
   2968a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2968c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2968e:	685a      	ldr	r2, [r3, #4]
   29690:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29692:	605c      	str	r4, [r3, #4]
   29694:	e02f      	b.n	296f6 <schedule_new_thread+0x122>
	node->next = list;
   29696:	4b1b      	ldr	r3, [pc, #108]	; (29704 <schedule_new_thread+0x130>)
   29698:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2969a:	685a      	ldr	r2, [r3, #4]
   2969c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2969e:	685a      	ldr	r2, [r3, #4]
   296a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   296a2:	605c      	str	r4, [r3, #4]
   296a4:	e027      	b.n	296f6 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296a6:	4619      	mov	r1, r3
   296a8:	e011      	b.n	296ce <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   296aa:	2100      	movs	r1, #0
   296ac:	e00f      	b.n	296ce <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   296ae:	2300      	movs	r3, #0
   296b0:	b1d3      	cbz	r3, 296e8 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   296b2:	6922      	ldr	r2, [r4, #16]
   296b4:	6919      	ldr	r1, [r3, #16]
   296b6:	428a      	cmp	r2, r1
   296b8:	dde3      	ble.n	29682 <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   296ba:	1a52      	subs	r2, r2, r1
   296bc:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   296be:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296c0:	2b00      	cmp	r3, #0
   296c2:	d0f0      	beq.n	296a6 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   296c4:	490e      	ldr	r1, [pc, #56]	; (29700 <schedule_new_thread+0x12c>)
   296c6:	6909      	ldr	r1, [r1, #16]
   296c8:	428b      	cmp	r3, r1
   296ca:	d0ee      	beq.n	296aa <schedule_new_thread+0xd6>
   296cc:	6819      	ldr	r1, [r3, #0]
   296ce:	2900      	cmp	r1, #0
   296d0:	d0ed      	beq.n	296ae <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296d2:	b12a      	cbz	r2, 296e0 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   296d4:	490a      	ldr	r1, [pc, #40]	; (29700 <schedule_new_thread+0x12c>)
   296d6:	6909      	ldr	r1, [r1, #16]
   296d8:	428a      	cmp	r2, r1
   296da:	d003      	beq.n	296e4 <schedule_new_thread+0x110>
   296dc:	681b      	ldr	r3, [r3, #0]
   296de:	e7e7      	b.n	296b0 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296e0:	2300      	movs	r3, #0
   296e2:	e7e5      	b.n	296b0 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   296e4:	2300      	movs	r3, #0
   296e6:	e7e3      	b.n	296b0 <schedule_new_thread+0xdc>
	node->next = list;
   296e8:	4b06      	ldr	r3, [pc, #24]	; (29704 <schedule_new_thread+0x130>)
   296ea:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   296ec:	685a      	ldr	r2, [r3, #4]
   296ee:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   296f0:	685a      	ldr	r2, [r3, #4]
   296f2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   296f4:	605c      	str	r4, [r3, #4]
   296f6:	f385 8811 	msr	BASEPRI, r5
   296fa:	bd70      	pop	{r4, r5, r6, pc}
   296fc:	cccccccd 	.word	0xcccccccd
   29700:	20002780 	.word	0x20002780
   29704:	2000278c 	.word	0x2000278c

00029708 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   29708:	b510      	push	{r4, lr}
   2970a:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2970c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2970e:	9404      	str	r4, [sp, #16]
   29710:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29712:	9403      	str	r4, [sp, #12]
   29714:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   29716:	9402      	str	r4, [sp, #8]
   29718:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2971a:	9401      	str	r4, [sp, #4]
   2971c:	9c08      	ldr	r4, [sp, #32]
   2971e:	9400      	str	r4, [sp, #0]
   29720:	f7fe f940 	bl	279a4 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   29724:	b006      	add	sp, #24
   29726:	bd10      	pop	{r4, pc}

00029728 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   29728:	b570      	push	{r4, r5, r6, lr}
   2972a:	b086      	sub	sp, #24
   2972c:	4604      	mov	r4, r0
   2972e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29730:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   29732:	9604      	str	r6, [sp, #16]
   29734:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   29736:	9603      	str	r6, [sp, #12]
   29738:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2973a:	9602      	str	r6, [sp, #8]
   2973c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2973e:	9601      	str	r6, [sp, #4]
   29740:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   29742:	9600      	str	r6, [sp, #0]
   29744:	f7ff ffe0 	bl	29708 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   29748:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2974c:	d003      	beq.n	29756 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   2974e:	4629      	mov	r1, r5
   29750:	4620      	mov	r0, r4
   29752:	f7ff ff3f 	bl	295d4 <schedule_new_thread>
	}
	return new_thread;
}
   29756:	4620      	mov	r0, r4
   29758:	b006      	add	sp, #24
   2975a:	bd70      	pop	{r4, r5, r6, pc}

0002975c <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   2975c:	b510      	push	{r4, lr}
   2975e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29760:	6d03      	ldr	r3, [r0, #80]	; 0x50
   29762:	b103      	cbz	r3, 29766 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   29764:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   29766:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29768:	f013 0f1f 	tst.w	r3, #31
   2976c:	d107      	bne.n	2977e <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2976e:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29770:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29774:	d001      	beq.n	2977a <_k_thread_single_abort+0x1e>
   29776:	2200      	movs	r2, #0
   29778:	e002      	b.n	29780 <_k_thread_single_abort+0x24>
   2977a:	2201      	movs	r2, #1
   2977c:	e000      	b.n	29780 <_k_thread_single_abort+0x24>
   2977e:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   29780:	bb4a      	cbnz	r2, 297d6 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   29782:	f013 0f02 	tst.w	r3, #2
   29786:	d009      	beq.n	2979c <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   29788:	6863      	ldr	r3, [r4, #4]
   2978a:	6822      	ldr	r2, [r4, #0]
   2978c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2978e:	6823      	ldr	r3, [r4, #0]
   29790:	6862      	ldr	r2, [r4, #4]
   29792:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29794:	7a63      	ldrb	r3, [r4, #9]
   29796:	f023 0302 	bic.w	r3, r3, #2
   2979a:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2979c:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   2979e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   297a2:	d013      	beq.n	297cc <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   297a4:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   297a8:	4a0d      	ldr	r2, [pc, #52]	; (297e0 <_k_thread_single_abort+0x84>)
   297aa:	6912      	ldr	r2, [r2, #16]
   297ac:	4293      	cmp	r3, r2
   297ae:	d004      	beq.n	297ba <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297b0:	b103      	cbz	r3, 297b4 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   297b2:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   297b4:	691a      	ldr	r2, [r3, #16]
   297b6:	440a      	add	r2, r1
   297b8:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   297ba:	6963      	ldr	r3, [r4, #20]
   297bc:	6922      	ldr	r2, [r4, #16]
   297be:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   297c0:	6923      	ldr	r3, [r4, #16]
   297c2:	6962      	ldr	r2, [r4, #20]
   297c4:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   297c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   297ca:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   297cc:	7a63      	ldrb	r3, [r4, #9]
   297ce:	f043 0308 	orr.w	r3, r3, #8
   297d2:	7263      	strb	r3, [r4, #9]
   297d4:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   297d6:	4620      	mov	r0, r4
   297d8:	f7ff fa2a 	bl	28c30 <_remove_thread_from_ready_q>
   297dc:	e7f6      	b.n	297cc <_k_thread_single_abort+0x70>
   297de:	bf00      	nop
   297e0:	20002780 	.word	0x20002780

000297e4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   297e4:	b530      	push	{r4, r5, lr}
   297e6:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   297e8:	4c1b      	ldr	r4, [pc, #108]	; (29858 <_init_static_threads+0x74>)
   297ea:	e012      	b.n	29812 <_init_static_threads+0x2e>
		_setup_new_thread(
   297ec:	6a23      	ldr	r3, [r4, #32]
   297ee:	9304      	str	r3, [sp, #16]
   297f0:	69e3      	ldr	r3, [r4, #28]
   297f2:	9303      	str	r3, [sp, #12]
   297f4:	69a3      	ldr	r3, [r4, #24]
   297f6:	9302      	str	r3, [sp, #8]
   297f8:	6963      	ldr	r3, [r4, #20]
   297fa:	9301      	str	r3, [sp, #4]
   297fc:	6923      	ldr	r3, [r4, #16]
   297fe:	9300      	str	r3, [sp, #0]
   29800:	68e3      	ldr	r3, [r4, #12]
   29802:	68a2      	ldr	r2, [r4, #8]
   29804:	6861      	ldr	r1, [r4, #4]
   29806:	6820      	ldr	r0, [r4, #0]
   29808:	f7ff ff7e 	bl	29708 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   2980c:	6823      	ldr	r3, [r4, #0]
   2980e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   29810:	3430      	adds	r4, #48	; 0x30
   29812:	4b12      	ldr	r3, [pc, #72]	; (2985c <_init_static_threads+0x78>)
   29814:	429c      	cmp	r4, r3
   29816:	d3e9      	bcc.n	297ec <_init_static_threads+0x8>
	--_current->base.sched_locked;
   29818:	4b11      	ldr	r3, [pc, #68]	; (29860 <_init_static_threads+0x7c>)
   2981a:	689a      	ldr	r2, [r3, #8]
   2981c:	7ad3      	ldrb	r3, [r2, #11]
   2981e:	3b01      	subs	r3, #1
   29820:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   29822:	f04f 0320 	mov.w	r3, #32
   29826:	f3ef 8511 	mrs	r5, BASEPRI
   2982a:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   2982e:	4c0a      	ldr	r4, [pc, #40]	; (29858 <_init_static_threads+0x74>)
   29830:	e000      	b.n	29834 <_init_static_threads+0x50>
   29832:	3430      	adds	r4, #48	; 0x30
   29834:	4b09      	ldr	r3, [pc, #36]	; (2985c <_init_static_threads+0x78>)
   29836:	429c      	cmp	r4, r3
   29838:	d207      	bcs.n	2984a <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   2983a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2983c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29840:	d0f7      	beq.n	29832 <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   29842:	6820      	ldr	r0, [r4, #0]
   29844:	f7ff fec6 	bl	295d4 <schedule_new_thread>
   29848:	e7f3      	b.n	29832 <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2984a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   2984e:	f7ff fb81 	bl	28f54 <k_sched_unlock>
}
   29852:	b007      	add	sp, #28
   29854:	bd30      	pop	{r4, r5, pc}
   29856:	bf00      	nop
   29858:	2000cffc 	.word	0x2000cffc
   2985c:	2000cffc 	.word	0x2000cffc
   29860:	20002780 	.word	0x20002780

00029864 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   29864:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   29866:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   29868:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   2986a:	2300      	movs	r3, #0
   2986c:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   2986e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29872:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   29874:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   29876:	6183      	str	r3, [r0, #24]
	t->func = func;
   29878:	6243      	str	r3, [r0, #36]	; 0x24
   2987a:	4770      	bx	lr

0002987c <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2987c:	b570      	push	{r4, r5, r6, lr}
   2987e:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   29880:	6a83      	ldr	r3, [r0, #40]	; 0x28
   29882:	2b00      	cmp	r3, #0
   29884:	f340 8088 	ble.w	29998 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   29888:	f04f 0320 	mov.w	r3, #32
   2988c:	f3ef 8511 	mrs	r5, BASEPRI
   29890:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   29894:	f100 0218 	add.w	r2, r0, #24
   29898:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2989a:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2989c:	2100      	movs	r1, #0
   2989e:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   298a0:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   298a2:	b133      	cbz	r3, 298b2 <_timer_expiration_handler+0x36>
	return list->head == list;
   298a4:	4a59      	ldr	r2, [pc, #356]	; (29a0c <_timer_expiration_handler+0x190>)
   298a6:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   298aa:	4293      	cmp	r3, r2
   298ac:	d14f      	bne.n	2994e <_timer_expiration_handler+0xd2>
   298ae:	2300      	movs	r3, #0
   298b0:	e04d      	b.n	2994e <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   298b2:	4608      	mov	r0, r1
   298b4:	f04f 0320 	mov.w	r3, #32
   298b8:	f3ef 8611 	mrs	r6, BASEPRI
   298bc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   298c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   298c4:	6123      	str	r3, [r4, #16]
	if (thread) {
   298c6:	b319      	cbz	r1, 29910 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   298c8:	68e3      	ldr	r3, [r4, #12]
   298ca:	b153      	cbz	r3, 298e2 <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   298cc:	684b      	ldr	r3, [r1, #4]
   298ce:	680a      	ldr	r2, [r1, #0]
   298d0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   298d2:	680b      	ldr	r3, [r1, #0]
   298d4:	684a      	ldr	r2, [r1, #4]
   298d6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   298d8:	7a4b      	ldrb	r3, [r1, #9]
   298da:	f023 0302 	bic.w	r3, r3, #2
   298de:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   298e0:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   298e2:	7a43      	ldrb	r3, [r0, #9]
   298e4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   298e8:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   298ea:	f013 0f1b 	tst.w	r3, #27
   298ee:	d107      	bne.n	29900 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   298f0:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   298f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   298f6:	d001      	beq.n	298fc <_timer_expiration_handler+0x80>
   298f8:	2300      	movs	r3, #0
   298fa:	e002      	b.n	29902 <_timer_expiration_handler+0x86>
   298fc:	2301      	movs	r3, #1
   298fe:	e000      	b.n	29902 <_timer_expiration_handler+0x86>
   29900:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29902:	b913      	cbnz	r3, 2990a <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29904:	f386 8811 	msr	BASEPRI, r6
   29908:	e044      	b.n	29994 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   2990a:	f7ff f971 	bl	28bf0 <_add_thread_to_ready_q>
   2990e:	e7f9      	b.n	29904 <_timer_expiration_handler+0x88>
   29910:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29914:	6963      	ldr	r3, [r4, #20]
   29916:	2b00      	cmp	r3, #0
   29918:	d03c      	beq.n	29994 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   2991a:	4620      	mov	r0, r4
   2991c:	4798      	blx	r3
   2991e:	e039      	b.n	29994 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   29920:	1a8a      	subs	r2, r1, r2
   29922:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29924:	b133      	cbz	r3, 29934 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   29926:	685a      	ldr	r2, [r3, #4]
   29928:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2992a:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   2992c:	685a      	ldr	r2, [r3, #4]
   2992e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29930:	605c      	str	r4, [r3, #4]
   29932:	e02f      	b.n	29994 <_timer_expiration_handler+0x118>
	node->next = list;
   29934:	4b36      	ldr	r3, [pc, #216]	; (29a10 <_timer_expiration_handler+0x194>)
   29936:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29938:	685a      	ldr	r2, [r3, #4]
   2993a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2993c:	685a      	ldr	r2, [r3, #4]
   2993e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29940:	605c      	str	r4, [r3, #4]
   29942:	e027      	b.n	29994 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29944:	4619      	mov	r1, r3
   29946:	e011      	b.n	2996c <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29948:	2100      	movs	r1, #0
   2994a:	e00f      	b.n	2996c <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2994c:	2300      	movs	r3, #0
   2994e:	b1d3      	cbz	r3, 29986 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29950:	6902      	ldr	r2, [r0, #16]
   29952:	6919      	ldr	r1, [r3, #16]
   29954:	428a      	cmp	r2, r1
   29956:	dde3      	ble.n	29920 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29958:	1a52      	subs	r2, r2, r1
   2995a:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2995c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2995e:	2b00      	cmp	r3, #0
   29960:	d0f0      	beq.n	29944 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   29962:	492a      	ldr	r1, [pc, #168]	; (29a0c <_timer_expiration_handler+0x190>)
   29964:	6909      	ldr	r1, [r1, #16]
   29966:	428b      	cmp	r3, r1
   29968:	d0ee      	beq.n	29948 <_timer_expiration_handler+0xcc>
   2996a:	6819      	ldr	r1, [r3, #0]
   2996c:	2900      	cmp	r1, #0
   2996e:	d0ed      	beq.n	2994c <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29970:	b12a      	cbz	r2, 2997e <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   29972:	4926      	ldr	r1, [pc, #152]	; (29a0c <_timer_expiration_handler+0x190>)
   29974:	6909      	ldr	r1, [r1, #16]
   29976:	428a      	cmp	r2, r1
   29978:	d003      	beq.n	29982 <_timer_expiration_handler+0x106>
   2997a:	681b      	ldr	r3, [r3, #0]
   2997c:	e7e7      	b.n	2994e <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2997e:	2300      	movs	r3, #0
   29980:	e7e5      	b.n	2994e <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29982:	2300      	movs	r3, #0
   29984:	e7e3      	b.n	2994e <_timer_expiration_handler+0xd2>
	node->next = list;
   29986:	4b22      	ldr	r3, [pc, #136]	; (29a10 <_timer_expiration_handler+0x194>)
   29988:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2998a:	685a      	ldr	r2, [r3, #4]
   2998c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2998e:	685a      	ldr	r2, [r3, #4]
   29990:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29992:	605c      	str	r4, [r3, #4]
   29994:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2999a:	3301      	adds	r3, #1
   2999c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2999e:	6a23      	ldr	r3, [r4, #32]
   299a0:	b10b      	cbz	r3, 299a6 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   299a2:	4620      	mov	r0, r4
   299a4:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   299a6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   299aa:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299ac:	42a3      	cmp	r3, r4
   299ae:	d01d      	beq.n	299ec <_timer_expiration_handler+0x170>

	if (!thread) {
   299b0:	b334      	cbz	r4, 29a00 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   299b2:	6863      	ldr	r3, [r4, #4]
   299b4:	6822      	ldr	r2, [r4, #0]
   299b6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   299b8:	6823      	ldr	r3, [r4, #0]
   299ba:	6862      	ldr	r2, [r4, #4]
   299bc:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   299be:	7a63      	ldrb	r3, [r4, #9]
   299c0:	f023 0302 	bic.w	r3, r3, #2
   299c4:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   299c6:	f04f 0320 	mov.w	r3, #32
   299ca:	f3ef 8511 	mrs	r5, BASEPRI
   299ce:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   299d2:	7a63      	ldrb	r3, [r4, #9]
   299d4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   299d8:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   299da:	f013 0f1b 	tst.w	r3, #27
   299de:	d109      	bne.n	299f4 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   299e0:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   299e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   299e6:	d003      	beq.n	299f0 <_timer_expiration_handler+0x174>
   299e8:	2300      	movs	r3, #0
   299ea:	e004      	b.n	299f6 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299ec:	2400      	movs	r4, #0
   299ee:	e7df      	b.n	299b0 <_timer_expiration_handler+0x134>
   299f0:	2301      	movs	r3, #1
   299f2:	e000      	b.n	299f6 <_timer_expiration_handler+0x17a>
   299f4:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   299f6:	b923      	cbnz	r3, 29a02 <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   299f8:	f385 8811 	msr	BASEPRI, r5
   299fc:	2300      	movs	r3, #0
   299fe:	6663      	str	r3, [r4, #100]	; 0x64
   29a00:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   29a02:	4620      	mov	r0, r4
   29a04:	f7ff f8f4 	bl	28bf0 <_add_thread_to_ready_q>
   29a08:	e7f6      	b.n	299f8 <_timer_expiration_handler+0x17c>
   29a0a:	bf00      	nop
   29a0c:	20002780 	.word	0x20002780
   29a10:	2000278c 	.word	0x2000278c

00029a14 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   29a14:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29a16:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   29a18:	2300      	movs	r3, #0
   29a1a:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   29a1c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29a20:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29a22:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   29a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29a28:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   29a2a:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   29a2c:	6083      	str	r3, [r0, #8]
	t->func = func;
   29a2e:	4a02      	ldr	r2, [pc, #8]	; (29a38 <k_timer_init+0x24>)
   29a30:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   29a32:	6303      	str	r3, [r0, #48]	; 0x30
   29a34:	4770      	bx	lr
   29a36:	bf00      	nop
   29a38:	0002987d 	.word	0x0002987d

00029a3c <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   29a3c:	b530      	push	{r4, r5, lr}
   29a3e:	b083      	sub	sp, #12
   29a40:	3209      	adds	r2, #9
   29a42:	4b57      	ldr	r3, [pc, #348]	; (29ba0 <_impl_k_timer_start+0x164>)
   29a44:	fba3 4202 	umull	r4, r2, r3, r2
   29a48:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   29a4a:	9201      	str	r2, [sp, #4]
   29a4c:	3109      	adds	r1, #9
   29a4e:	fba3 3101 	umull	r3, r1, r3, r1
   29a52:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   29a54:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   29a56:	f04f 0320 	mov.w	r3, #32
   29a5a:	f3ef 8411 	mrs	r4, BASEPRI
   29a5e:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   29a62:	6901      	ldr	r1, [r0, #16]
   29a64:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29a68:	d012      	beq.n	29a90 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29a6a:	4603      	mov	r3, r0
	return list->tail == node;
   29a6c:	4a4d      	ldr	r2, [pc, #308]	; (29ba4 <_impl_k_timer_start+0x168>)
   29a6e:	6912      	ldr	r2, [r2, #16]
   29a70:	4290      	cmp	r0, r2
   29a72:	d004      	beq.n	29a7e <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29a74:	b100      	cbz	r0, 29a78 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   29a76:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29a78:	691a      	ldr	r2, [r3, #16]
   29a7a:	440a      	add	r2, r1
   29a7c:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29a7e:	6843      	ldr	r3, [r0, #4]
   29a80:	6802      	ldr	r2, [r0, #0]
   29a82:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29a84:	6803      	ldr	r3, [r0, #0]
   29a86:	6842      	ldr	r2, [r0, #4]
   29a88:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a8e:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29a90:	9b01      	ldr	r3, [sp, #4]
   29a92:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29a94:	2200      	movs	r2, #0
   29a96:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29a98:	4605      	mov	r5, r0
   29a9a:	f100 0118 	add.w	r1, r0, #24
   29a9e:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29aa0:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29aa2:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29aa4:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29aa6:	b133      	cbz	r3, 29ab6 <_impl_k_timer_start+0x7a>
	return list->head == list;
   29aa8:	4a3e      	ldr	r2, [pc, #248]	; (29ba4 <_impl_k_timer_start+0x168>)
   29aaa:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29aae:	4293      	cmp	r3, r2
   29ab0:	d14f      	bne.n	29b52 <_impl_k_timer_start+0x116>
   29ab2:	2300      	movs	r3, #0
   29ab4:	e04d      	b.n	29b52 <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29ab6:	4613      	mov	r3, r2
   29ab8:	f04f 0220 	mov.w	r2, #32
   29abc:	f3ef 8511 	mrs	r5, BASEPRI
   29ac0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ac8:	6102      	str	r2, [r0, #16]
	if (thread) {
   29aca:	b323      	cbz	r3, 29b16 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29acc:	68c2      	ldr	r2, [r0, #12]
   29ace:	b152      	cbz	r2, 29ae6 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29ad0:	685a      	ldr	r2, [r3, #4]
   29ad2:	6819      	ldr	r1, [r3, #0]
   29ad4:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29ad6:	681a      	ldr	r2, [r3, #0]
   29ad8:	6859      	ldr	r1, [r3, #4]
   29ada:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29adc:	7a5a      	ldrb	r2, [r3, #9]
   29ade:	f022 0202 	bic.w	r2, r2, #2
   29ae2:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29ae4:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29ae6:	7a5a      	ldrb	r2, [r3, #9]
   29ae8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29aec:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29aee:	f012 0f1b 	tst.w	r2, #27
   29af2:	d107      	bne.n	29b04 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29af4:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29af6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29afa:	d001      	beq.n	29b00 <_impl_k_timer_start+0xc4>
   29afc:	2200      	movs	r2, #0
   29afe:	e002      	b.n	29b06 <_impl_k_timer_start+0xca>
   29b00:	2201      	movs	r2, #1
   29b02:	e000      	b.n	29b06 <_impl_k_timer_start+0xca>
   29b04:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29b06:	b912      	cbnz	r2, 29b0e <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b08:	f385 8811 	msr	BASEPRI, r5
   29b0c:	e044      	b.n	29b98 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29b0e:	4618      	mov	r0, r3
   29b10:	f7ff f86e 	bl	28bf0 <_add_thread_to_ready_q>
   29b14:	e7f8      	b.n	29b08 <_impl_k_timer_start+0xcc>
   29b16:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29b1a:	6943      	ldr	r3, [r0, #20]
   29b1c:	2b00      	cmp	r3, #0
   29b1e:	d03b      	beq.n	29b98 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29b20:	4798      	blx	r3
   29b22:	e039      	b.n	29b98 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29b24:	1a8a      	subs	r2, r1, r2
   29b26:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29b28:	b133      	cbz	r3, 29b38 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29b2a:	685a      	ldr	r2, [r3, #4]
   29b2c:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29b2e:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29b30:	685a      	ldr	r2, [r3, #4]
   29b32:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   29b34:	6058      	str	r0, [r3, #4]
   29b36:	e02f      	b.n	29b98 <_impl_k_timer_start+0x15c>
	node->next = list;
   29b38:	4b1b      	ldr	r3, [pc, #108]	; (29ba8 <_impl_k_timer_start+0x16c>)
   29b3a:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29b3c:	685a      	ldr	r2, [r3, #4]
   29b3e:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29b40:	685a      	ldr	r2, [r3, #4]
   29b42:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29b44:	6058      	str	r0, [r3, #4]
   29b46:	e027      	b.n	29b98 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b48:	4619      	mov	r1, r3
   29b4a:	e011      	b.n	29b70 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29b4c:	2100      	movs	r1, #0
   29b4e:	e00f      	b.n	29b70 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b50:	2300      	movs	r3, #0
   29b52:	b1d3      	cbz	r3, 29b8a <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29b54:	692a      	ldr	r2, [r5, #16]
   29b56:	6919      	ldr	r1, [r3, #16]
   29b58:	428a      	cmp	r2, r1
   29b5a:	dde3      	ble.n	29b24 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29b5c:	1a52      	subs	r2, r2, r1
   29b5e:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b60:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b62:	2b00      	cmp	r3, #0
   29b64:	d0f0      	beq.n	29b48 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29b66:	490f      	ldr	r1, [pc, #60]	; (29ba4 <_impl_k_timer_start+0x168>)
   29b68:	6909      	ldr	r1, [r1, #16]
   29b6a:	428b      	cmp	r3, r1
   29b6c:	d0ee      	beq.n	29b4c <_impl_k_timer_start+0x110>
   29b6e:	6819      	ldr	r1, [r3, #0]
   29b70:	2900      	cmp	r1, #0
   29b72:	d0ed      	beq.n	29b50 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b74:	b12a      	cbz	r2, 29b82 <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   29b76:	490b      	ldr	r1, [pc, #44]	; (29ba4 <_impl_k_timer_start+0x168>)
   29b78:	6909      	ldr	r1, [r1, #16]
   29b7a:	428a      	cmp	r2, r1
   29b7c:	d003      	beq.n	29b86 <_impl_k_timer_start+0x14a>
   29b7e:	681b      	ldr	r3, [r3, #0]
   29b80:	e7e7      	b.n	29b52 <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b82:	2300      	movs	r3, #0
   29b84:	e7e5      	b.n	29b52 <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   29b86:	2300      	movs	r3, #0
   29b88:	e7e3      	b.n	29b52 <_impl_k_timer_start+0x116>
	node->next = list;
   29b8a:	4b07      	ldr	r3, [pc, #28]	; (29ba8 <_impl_k_timer_start+0x16c>)
   29b8c:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29b8e:	685a      	ldr	r2, [r3, #4]
   29b90:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29b92:	685a      	ldr	r2, [r3, #4]
   29b94:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29b96:	6058      	str	r0, [r3, #4]
   29b98:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29b9c:	b003      	add	sp, #12
   29b9e:	bd30      	pop	{r4, r5, pc}
   29ba0:	cccccccd 	.word	0xcccccccd
   29ba4:	20002780 	.word	0x20002780
   29ba8:	2000278c 	.word	0x2000278c

00029bac <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29bac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29bae:	f04f 0320 	mov.w	r3, #32
   29bb2:	f3ef 8411 	mrs	r4, BASEPRI
   29bb6:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29bba:	6903      	ldr	r3, [r0, #16]
   29bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29bc0:	d042      	beq.n	29c48 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29bc2:	4602      	mov	r2, r0
	return list->tail == node;
   29bc4:	493b      	ldr	r1, [pc, #236]	; (29cb4 <_impl_k_timer_stop+0x108>)
   29bc6:	6909      	ldr	r1, [r1, #16]
   29bc8:	4288      	cmp	r0, r1
   29bca:	d004      	beq.n	29bd6 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29bcc:	b100      	cbz	r0, 29bd0 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29bce:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29bd0:	6911      	ldr	r1, [r2, #16]
   29bd2:	440b      	add	r3, r1
   29bd4:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29bd6:	6843      	ldr	r3, [r0, #4]
   29bd8:	6802      	ldr	r2, [r0, #0]
   29bda:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29bdc:	6803      	ldr	r3, [r0, #0]
   29bde:	6842      	ldr	r2, [r0, #4]
   29be0:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29be6:	6103      	str	r3, [r0, #16]
	return 0;
   29be8:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29bea:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29bee:	2b00      	cmp	r3, #0
   29bf0:	d15f      	bne.n	29cb2 <_impl_k_timer_stop+0x106>
   29bf2:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29bf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29bf6:	b103      	cbz	r3, 29bfa <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29bf8:	4798      	blx	r3
	__asm__ volatile(
   29bfa:	f04f 0320 	mov.w	r3, #32
   29bfe:	f3ef 8511 	mrs	r5, BASEPRI
   29c02:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29c06:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29c0a:	4b2b      	ldr	r3, [pc, #172]	; (29cb8 <_impl_k_timer_stop+0x10c>)
   29c0c:	681b      	ldr	r3, [r3, #0]
   29c0e:	b9f3      	cbnz	r3, 29c4e <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29c10:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c12:	4282      	cmp	r2, r0
   29c14:	d02c      	beq.n	29c70 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29c16:	b148      	cbz	r0, 29c2c <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29c18:	6843      	ldr	r3, [r0, #4]
   29c1a:	6802      	ldr	r2, [r0, #0]
   29c1c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29c1e:	6803      	ldr	r3, [r0, #0]
   29c20:	6842      	ldr	r2, [r0, #4]
   29c22:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29c24:	7a43      	ldrb	r3, [r0, #9]
   29c26:	f023 0302 	bic.w	r3, r3, #2
   29c2a:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29c2c:	b330      	cbz	r0, 29c7c <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29c2e:	7a43      	ldrb	r3, [r0, #9]
   29c30:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29c34:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29c36:	f013 0f1b 	tst.w	r3, #27
   29c3a:	d11d      	bne.n	29c78 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29c3c:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29c42:	d017      	beq.n	29c74 <_impl_k_timer_stop+0xc8>
   29c44:	2300      	movs	r3, #0
   29c46:	e018      	b.n	29c7a <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c4c:	e7cd      	b.n	29bea <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29c4e:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c50:	4282      	cmp	r2, r0
   29c52:	d102      	bne.n	29c5a <_impl_k_timer_stop+0xae>
   29c54:	2000      	movs	r0, #0
   29c56:	e000      	b.n	29c5a <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29c58:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29c5a:	2800      	cmp	r0, #0
   29c5c:	d0db      	beq.n	29c16 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29c5e:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29c60:	f113 0f02 	cmn.w	r3, #2
   29c64:	d1d7      	bne.n	29c16 <_impl_k_timer_stop+0x6a>
   29c66:	6853      	ldr	r3, [r2, #4]
   29c68:	4298      	cmp	r0, r3
   29c6a:	d1f5      	bne.n	29c58 <_impl_k_timer_stop+0xac>
   29c6c:	2000      	movs	r0, #0
   29c6e:	e7f4      	b.n	29c5a <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c70:	2000      	movs	r0, #0
   29c72:	e7d0      	b.n	29c16 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   29c74:	2301      	movs	r3, #1
   29c76:	e000      	b.n	29c7a <_impl_k_timer_stop+0xce>
   29c78:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29c7a:	b95b      	cbnz	r3, 29c94 <_impl_k_timer_stop+0xe8>
   29c7c:	f3ef 8305 	mrs	r3, IPSR
   29c80:	2b0d      	cmp	r3, #13
   29c82:	d80a      	bhi.n	29c9a <_impl_k_timer_stop+0xee>
   29c84:	b173      	cbz	r3, 29ca4 <_impl_k_timer_stop+0xf8>
   29c86:	4b0d      	ldr	r3, [pc, #52]	; (29cbc <_impl_k_timer_stop+0x110>)
   29c88:	685b      	ldr	r3, [r3, #4]
   29c8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29c8e:	d00b      	beq.n	29ca8 <_impl_k_timer_stop+0xfc>
   29c90:	2300      	movs	r3, #0
   29c92:	e003      	b.n	29c9c <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29c94:	f7fe ffac 	bl	28bf0 <_add_thread_to_ready_q>
   29c98:	e7f0      	b.n	29c7c <_impl_k_timer_stop+0xd0>
   29c9a:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29c9c:	b133      	cbz	r3, 29cac <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c9e:	f385 8811 	msr	BASEPRI, r5
   29ca2:	bd38      	pop	{r3, r4, r5, pc}
   29ca4:	2300      	movs	r3, #0
   29ca6:	e7f9      	b.n	29c9c <_impl_k_timer_stop+0xf0>
   29ca8:	2301      	movs	r3, #1
   29caa:	e7f7      	b.n	29c9c <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29cac:	4628      	mov	r0, r5
   29cae:	f7ff f937 	bl	28f20 <_reschedule_threads>
   29cb2:	bd38      	pop	{r3, r4, r5, pc}
   29cb4:	20002780 	.word	0x20002780
   29cb8:	20002b68 	.word	0x20002b68
   29cbc:	e000ed00 	.word	0xe000ed00

00029cc0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29cc0:	b430      	push	{r4, r5}
	__asm__ volatile(
   29cc2:	f04f 0320 	mov.w	r3, #32
   29cc6:	f3ef 8411 	mrs	r4, BASEPRI
   29cca:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29cce:	6903      	ldr	r3, [r0, #16]
   29cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29cd4:	d017      	beq.n	29d06 <_timeout_remaining_get+0x46>
	return list->head == list;
   29cd6:	4a10      	ldr	r2, [pc, #64]	; (29d18 <_timeout_remaining_get+0x58>)
   29cd8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29cdc:	4293      	cmp	r3, r2
   29cde:	d001      	beq.n	29ce4 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29ce0:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29ce2:	e005      	b.n	29cf0 <_timeout_remaining_get+0x30>
   29ce4:	2300      	movs	r3, #0
   29ce6:	e7fb      	b.n	29ce0 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29ce8:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29cea:	6913      	ldr	r3, [r2, #16]
   29cec:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29cee:	4613      	mov	r3, r2
		while (t != timeout) {
   29cf0:	4283      	cmp	r3, r0
   29cf2:	d009      	beq.n	29d08 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29cf4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29cf6:	2b00      	cmp	r3, #0
   29cf8:	d0f7      	beq.n	29cea <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29cfa:	4a07      	ldr	r2, [pc, #28]	; (29d18 <_timeout_remaining_get+0x58>)
   29cfc:	6912      	ldr	r2, [r2, #16]
   29cfe:	4293      	cmp	r3, r2
   29d00:	d0f2      	beq.n	29ce8 <_timeout_remaining_get+0x28>
   29d02:	681a      	ldr	r2, [r3, #0]
   29d04:	e7f1      	b.n	29cea <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29d06:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29d08:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29d0c:	008a      	lsls	r2, r1, #2
   29d0e:	1850      	adds	r0, r2, r1
   29d10:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29d12:	bc30      	pop	{r4, r5}
   29d14:	4770      	bx	lr
   29d16:	bf00      	nop
   29d18:	20002780 	.word	0x20002780

00029d1c <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29d1c:	b538      	push	{r3, r4, r5, lr}
   29d1e:	4604      	mov	r4, r0
   29d20:	e003      	b.n	29d2a <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29d22:	4610      	mov	r0, r2
   29d24:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29d26:	f7ff f927 	bl	28f78 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29d2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29d2e:	4620      	mov	r0, r4
   29d30:	f7fe ff0c 	bl	28b4c <k_queue_get>
		if (!work) {
   29d34:	4602      	mov	r2, r0
   29d36:	2800      	cmp	r0, #0
   29d38:	d0f7      	beq.n	29d2a <work_q_main+0xe>
		handler = work->handler;
   29d3a:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29d3c:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29d40:	f3bf 8f5b 	dmb	ish
   29d44:	e853 1f00 	ldrex	r1, [r3]
   29d48:	f021 0001 	bic.w	r0, r1, #1
   29d4c:	e843 0e00 	strex	lr, r0, [r3]
   29d50:	f1be 0f00 	cmp.w	lr, #0
   29d54:	d1f6      	bne.n	29d44 <work_q_main+0x28>
   29d56:	f3bf 8f5b 	dmb	ish
   29d5a:	f011 0f01 	tst.w	r1, #1
   29d5e:	d0e2      	beq.n	29d26 <work_q_main+0xa>
   29d60:	e7df      	b.n	29d22 <work_q_main+0x6>

00029d62 <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   29d62:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   29d64:	6984      	ldr	r4, [r0, #24]
   29d66:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29d6a:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29d6c:	f3bf 8f5b 	dmb	ish
   29d70:	e853 2f00 	ldrex	r2, [r3]
   29d74:	f042 0001 	orr.w	r0, r2, #1
   29d78:	e843 0e00 	strex	lr, r0, [r3]
   29d7c:	f1be 0f00 	cmp.w	lr, #0
   29d80:	d1f6      	bne.n	29d70 <work_timeout+0xe>
   29d82:	f3bf 8f5b 	dmb	ish
   29d86:	f012 0f01 	tst.w	r2, #1
   29d8a:	d000      	beq.n	29d8e <work_timeout+0x2c>
   29d8c:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29d8e:	4620      	mov	r0, r4
   29d90:	f7fe feb4 	bl	28afc <k_queue_append>
}
   29d94:	e7fa      	b.n	29d8c <work_timeout+0x2a>
	...

00029d98 <k_work_q_start>:
{
   29d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d9a:	b087      	sub	sp, #28
   29d9c:	4604      	mov	r4, r0
   29d9e:	460d      	mov	r5, r1
   29da0:	4616      	mov	r6, r2
   29da2:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29da4:	f7fe fe77 	bl	28a96 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29da8:	2300      	movs	r3, #0
   29daa:	9305      	str	r3, [sp, #20]
   29dac:	9304      	str	r3, [sp, #16]
   29dae:	9703      	str	r7, [sp, #12]
   29db0:	9302      	str	r3, [sp, #8]
   29db2:	9301      	str	r3, [sp, #4]
   29db4:	9400      	str	r4, [sp, #0]
   29db6:	4b04      	ldr	r3, [pc, #16]	; (29dc8 <k_work_q_start+0x30>)
   29db8:	4632      	mov	r2, r6
   29dba:	4629      	mov	r1, r5
   29dbc:	f104 0010 	add.w	r0, r4, #16
   29dc0:	f7ff fcb2 	bl	29728 <_impl_k_thread_create>
}
   29dc4:	b007      	add	sp, #28
   29dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29dc8:	00029d1d 	.word	0x00029d1d

00029dcc <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29dcc:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29dce:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29dd2:	f3bf 8f5b 	dmb	ish
   29dd6:	e853 2f00 	ldrex	r2, [r3]
   29dda:	f022 0201 	bic.w	r2, r2, #1
   29dde:	e843 2e00 	strex	lr, r2, [r3]
   29de2:	f1be 0f00 	cmp.w	lr, #0
   29de6:	d1f6      	bne.n	29dd6 <k_delayed_work_init+0xa>
   29de8:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29dec:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29df2:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29df4:	2300      	movs	r3, #0
   29df6:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29df8:	6143      	str	r3, [r0, #20]
	t->func = func;
   29dfa:	4a02      	ldr	r2, [pc, #8]	; (29e04 <k_delayed_work_init+0x38>)
   29dfc:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29dfe:	6243      	str	r3, [r0, #36]	; 0x24
   29e00:	f85d fb04 	ldr.w	pc, [sp], #4
   29e04:	00029d63 	.word	0x00029d63

00029e08 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29e08:	b430      	push	{r4, r5}
	__asm__ volatile(
   29e0a:	f04f 0320 	mov.w	r3, #32
   29e0e:	f3ef 8411 	mrs	r4, BASEPRI
   29e12:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29e16:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29e18:	b18b      	cbz	r3, 29e3e <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29e1a:	f3bf 8f5b 	dmb	ish
   29e1e:	6883      	ldr	r3, [r0, #8]
   29e20:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   29e24:	f013 0f01 	tst.w	r3, #1
   29e28:	d02d      	beq.n	29e86 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29e2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29e2c:	4601      	mov	r1, r0
	return list->head;
   29e2e:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   29e30:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29e32:	b193      	cbz	r3, 29e5a <k_delayed_work_cancel+0x52>
		if (test == node) {
   29e34:	4299      	cmp	r1, r3
   29e36:	d007      	beq.n	29e48 <k_delayed_work_cancel+0x40>
		prev = test;
   29e38:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29e3a:	681b      	ldr	r3, [r3, #0]
   29e3c:	e7f9      	b.n	29e32 <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29e3e:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   29e42:	f06f 0015 	mvn.w	r0, #21
   29e46:	e00e      	b.n	29e66 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29e48:	b17a      	cbz	r2, 29e6a <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29e4a:	6803      	ldr	r3, [r0, #0]
   29e4c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29e4e:	686b      	ldr	r3, [r5, #4]
   29e50:	4298      	cmp	r0, r3
   29e52:	d011      	beq.n	29e78 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   29e54:	2300      	movs	r3, #0
   29e56:	6003      	str	r3, [r0, #0]
			return true;
   29e58:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29e5a:	b17b      	cbz	r3, 29e7c <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29e5c:	2300      	movs	r3, #0
   29e5e:	6243      	str	r3, [r0, #36]	; 0x24
   29e60:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   29e64:	4618      	mov	r0, r3
}
   29e66:	bc30      	pop	{r4, r5}
   29e68:	4770      	bx	lr
		list->head = node->next;
   29e6a:	6803      	ldr	r3, [r0, #0]
   29e6c:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29e6e:	686a      	ldr	r2, [r5, #4]
   29e70:	4290      	cmp	r0, r2
   29e72:	d1ef      	bne.n	29e54 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   29e74:	606b      	str	r3, [r5, #4]
   29e76:	e7ed      	b.n	29e54 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29e78:	606a      	str	r2, [r5, #4]
   29e7a:	e7eb      	b.n	29e54 <k_delayed_work_cancel+0x4c>
   29e7c:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29e80:	f06f 0015 	mvn.w	r0, #21
   29e84:	e7ef      	b.n	29e66 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29e86:	69c2      	ldr	r2, [r0, #28]
   29e88:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29e8c:	d0e6      	beq.n	29e5c <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29e8e:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   29e92:	4909      	ldr	r1, [pc, #36]	; (29eb8 <k_delayed_work_cancel+0xb0>)
   29e94:	6909      	ldr	r1, [r1, #16]
   29e96:	428b      	cmp	r3, r1
   29e98:	d004      	beq.n	29ea4 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29e9a:	b103      	cbz	r3, 29e9e <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   29e9c:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29e9e:	6919      	ldr	r1, [r3, #16]
   29ea0:	440a      	add	r2, r1
   29ea2:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29ea4:	6903      	ldr	r3, [r0, #16]
   29ea6:	68c2      	ldr	r2, [r0, #12]
   29ea8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29eaa:	68c3      	ldr	r3, [r0, #12]
   29eac:	6902      	ldr	r2, [r0, #16]
   29eae:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29eb4:	61c3      	str	r3, [r0, #28]
   29eb6:	e7d1      	b.n	29e5c <k_delayed_work_cancel+0x54>
   29eb8:	20002780 	.word	0x20002780

00029ebc <k_delayed_work_submit_to_queue>:
{
   29ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29ebe:	f04f 0320 	mov.w	r3, #32
   29ec2:	f3ef 8711 	mrs	r7, BASEPRI
   29ec6:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   29eca:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   29ecc:	b113      	cbz	r3, 29ed4 <k_delayed_work_submit_to_queue+0x18>
   29ece:	4283      	cmp	r3, r0
   29ed0:	f040 80b4 	bne.w	2a03c <k_delayed_work_submit_to_queue+0x180>
   29ed4:	4614      	mov	r4, r2
   29ed6:	460e      	mov	r6, r1
   29ed8:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   29eda:	4283      	cmp	r3, r0
   29edc:	d016      	beq.n	29f0c <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   29ede:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   29ee0:	b1d4      	cbz	r4, 29f18 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   29ee2:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29ee6:	f104 0309 	add.w	r3, r4, #9
   29eea:	4c57      	ldr	r4, [pc, #348]	; (2a048 <k_delayed_work_submit_to_queue+0x18c>)
   29eec:	fba4 2303 	umull	r2, r3, r4, r3
   29ef0:	08db      	lsrs	r3, r3, #3
   29ef2:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29ef4:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   29ef6:	2200      	movs	r2, #0
   29ef8:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29efa:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   29efc:	b32b      	cbz	r3, 29f4a <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   29efe:	4a53      	ldr	r2, [pc, #332]	; (2a04c <k_delayed_work_submit_to_queue+0x190>)
   29f00:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29f04:	4293      	cmp	r3, r2
   29f06:	d172      	bne.n	29fee <k_delayed_work_submit_to_queue+0x132>
   29f08:	2300      	movs	r3, #0
   29f0a:	e070      	b.n	29fee <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   29f0c:	4608      	mov	r0, r1
   29f0e:	f7ff ff7b 	bl	29e08 <k_delayed_work_cancel>
		if (err < 0) {
   29f12:	2800      	cmp	r0, #0
   29f14:	dae3      	bge.n	29ede <k_delayed_work_submit_to_queue+0x22>
   29f16:	e08e      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29f18:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f1c:	f3bf 8f5b 	dmb	ish
   29f20:	e853 2f00 	ldrex	r2, [r3]
   29f24:	f042 0101 	orr.w	r1, r2, #1
   29f28:	e843 1000 	strex	r0, r1, [r3]
   29f2c:	2800      	cmp	r0, #0
   29f2e:	d1f7      	bne.n	29f20 <k_delayed_work_submit_to_queue+0x64>
   29f30:	f3bf 8f5b 	dmb	ish
   29f34:	f012 0f01 	tst.w	r2, #1
   29f38:	d001      	beq.n	29f3e <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   29f3a:	2000      	movs	r0, #0
   29f3c:	e07b      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   29f3e:	4631      	mov	r1, r6
   29f40:	4628      	mov	r0, r5
   29f42:	f7fe fddb 	bl	28afc <k_queue_append>
   29f46:	2000      	movs	r0, #0
   29f48:	e075      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   29f4a:	4610      	mov	r0, r2
   29f4c:	f04f 0320 	mov.w	r3, #32
   29f50:	f3ef 8411 	mrs	r4, BASEPRI
   29f54:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f5c:	612b      	str	r3, [r5, #16]
	if (thread) {
   29f5e:	b322      	cbz	r2, 29faa <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   29f60:	68eb      	ldr	r3, [r5, #12]
   29f62:	b153      	cbz	r3, 29f7a <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   29f64:	6853      	ldr	r3, [r2, #4]
   29f66:	6812      	ldr	r2, [r2, #0]
   29f68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29f6a:	6803      	ldr	r3, [r0, #0]
   29f6c:	6842      	ldr	r2, [r0, #4]
   29f6e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29f70:	7a43      	ldrb	r3, [r0, #9]
   29f72:	f023 0302 	bic.w	r3, r3, #2
   29f76:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29f78:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29f7a:	7a43      	ldrb	r3, [r0, #9]
   29f7c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29f80:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29f82:	f013 0f1b 	tst.w	r3, #27
   29f86:	d107      	bne.n	29f98 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29f88:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29f8e:	d001      	beq.n	29f94 <k_delayed_work_submit_to_queue+0xd8>
   29f90:	2300      	movs	r3, #0
   29f92:	e002      	b.n	29f9a <k_delayed_work_submit_to_queue+0xde>
   29f94:	2301      	movs	r3, #1
   29f96:	e000      	b.n	29f9a <k_delayed_work_submit_to_queue+0xde>
   29f98:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29f9a:	b91b      	cbnz	r3, 29fa4 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29f9c:	f384 8811 	msr	BASEPRI, r4
   29fa0:	2000      	movs	r0, #0
   29fa2:	e048      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   29fa4:	f7fe fe24 	bl	28bf0 <_add_thread_to_ready_q>
   29fa8:	e7f8      	b.n	29f9c <k_delayed_work_submit_to_queue+0xe0>
   29faa:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   29fae:	696b      	ldr	r3, [r5, #20]
   29fb0:	2b00      	cmp	r3, #0
   29fb2:	d046      	beq.n	2a042 <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   29fb4:	4628      	mov	r0, r5
   29fb6:	4798      	blx	r3
   29fb8:	2000      	movs	r0, #0
   29fba:	e03c      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   29fbc:	1aa2      	subs	r2, r4, r2
   29fbe:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29fc0:	b13b      	cbz	r3, 29fd2 <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   29fc2:	685a      	ldr	r2, [r3, #4]
   29fc4:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   29fc6:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   29fc8:	685a      	ldr	r2, [r3, #4]
   29fca:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   29fcc:	605d      	str	r5, [r3, #4]
   29fce:	2000      	movs	r0, #0
   29fd0:	e031      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   29fd2:	4b1f      	ldr	r3, [pc, #124]	; (2a050 <k_delayed_work_submit_to_queue+0x194>)
   29fd4:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   29fd6:	685a      	ldr	r2, [r3, #4]
   29fd8:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   29fda:	685a      	ldr	r2, [r3, #4]
   29fdc:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29fde:	605d      	str	r5, [r3, #4]
   29fe0:	2000      	movs	r0, #0
   29fe2:	e028      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fe4:	4619      	mov	r1, r3
   29fe6:	e011      	b.n	2a00c <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   29fe8:	2100      	movs	r1, #0
   29fea:	e00f      	b.n	2a00c <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29fec:	2300      	movs	r3, #0
   29fee:	b1d3      	cbz	r3, 2a026 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29ff0:	692a      	ldr	r2, [r5, #16]
   29ff2:	691c      	ldr	r4, [r3, #16]
   29ff4:	42a2      	cmp	r2, r4
   29ff6:	dde1      	ble.n	29fbc <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   29ff8:	1b12      	subs	r2, r2, r4
   29ffa:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29ffc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29ffe:	2b00      	cmp	r3, #0
   2a000:	d0f0      	beq.n	29fe4 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2a002:	4912      	ldr	r1, [pc, #72]	; (2a04c <k_delayed_work_submit_to_queue+0x190>)
   2a004:	6909      	ldr	r1, [r1, #16]
   2a006:	428b      	cmp	r3, r1
   2a008:	d0ee      	beq.n	29fe8 <k_delayed_work_submit_to_queue+0x12c>
   2a00a:	6819      	ldr	r1, [r3, #0]
   2a00c:	2900      	cmp	r1, #0
   2a00e:	d0ed      	beq.n	29fec <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a010:	b12a      	cbz	r2, 2a01e <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2a012:	490e      	ldr	r1, [pc, #56]	; (2a04c <k_delayed_work_submit_to_queue+0x190>)
   2a014:	6909      	ldr	r1, [r1, #16]
   2a016:	428a      	cmp	r2, r1
   2a018:	d003      	beq.n	2a022 <k_delayed_work_submit_to_queue+0x166>
   2a01a:	681b      	ldr	r3, [r3, #0]
   2a01c:	e7e7      	b.n	29fee <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a01e:	2300      	movs	r3, #0
   2a020:	e7e5      	b.n	29fee <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2a022:	2300      	movs	r3, #0
   2a024:	e7e3      	b.n	29fee <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2a026:	4b0a      	ldr	r3, [pc, #40]	; (2a050 <k_delayed_work_submit_to_queue+0x194>)
   2a028:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a02a:	685a      	ldr	r2, [r3, #4]
   2a02c:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a02e:	685a      	ldr	r2, [r3, #4]
   2a030:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a032:	605d      	str	r5, [r3, #4]
   2a034:	2000      	movs	r0, #0
   2a036:	f387 8811 	msr	BASEPRI, r7
}
   2a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2a03c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2a040:	e7f9      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2a042:	2000      	movs	r0, #0
   2a044:	e7f7      	b.n	2a036 <k_delayed_work_submit_to_queue+0x17a>
   2a046:	bf00      	nop
   2a048:	cccccccd 	.word	0xcccccccd
   2a04c:	20002780 	.word	0x20002780
   2a050:	2000278c 	.word	0x2000278c

0002a054 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a054:	4770      	bx	lr
	...

0002a058 <__locale_ctype_ptr_l>:
   2a058:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a05c:	4770      	bx	lr
   2a05e:	bf00      	nop

0002a060 <__locale_ctype_ptr>:
   2a060:	4b04      	ldr	r3, [pc, #16]	; (2a074 <__locale_ctype_ptr+0x14>)
   2a062:	4a05      	ldr	r2, [pc, #20]	; (2a078 <__locale_ctype_ptr+0x18>)
   2a064:	681b      	ldr	r3, [r3, #0]
   2a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a068:	2b00      	cmp	r3, #0
   2a06a:	bf08      	it	eq
   2a06c:	4613      	moveq	r3, r2
   2a06e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a072:	4770      	bx	lr
   2a074:	2000c6f0 	.word	0x2000c6f0
   2a078:	2000c584 	.word	0x2000c584

0002a07c <__ascii_mbtowc>:
   2a07c:	b082      	sub	sp, #8
   2a07e:	b149      	cbz	r1, 2a094 <__ascii_mbtowc+0x18>
   2a080:	b15a      	cbz	r2, 2a09a <__ascii_mbtowc+0x1e>
   2a082:	b16b      	cbz	r3, 2a0a0 <__ascii_mbtowc+0x24>
   2a084:	7813      	ldrb	r3, [r2, #0]
   2a086:	600b      	str	r3, [r1, #0]
   2a088:	7812      	ldrb	r2, [r2, #0]
   2a08a:	1c10      	adds	r0, r2, #0
   2a08c:	bf18      	it	ne
   2a08e:	2001      	movne	r0, #1
   2a090:	b002      	add	sp, #8
   2a092:	4770      	bx	lr
   2a094:	a901      	add	r1, sp, #4
   2a096:	2a00      	cmp	r2, #0
   2a098:	d1f3      	bne.n	2a082 <__ascii_mbtowc+0x6>
   2a09a:	4610      	mov	r0, r2
   2a09c:	b002      	add	sp, #8
   2a09e:	4770      	bx	lr
   2a0a0:	f06f 0001 	mvn.w	r0, #1
   2a0a4:	e7f4      	b.n	2a090 <__ascii_mbtowc+0x14>
   2a0a6:	bf00      	nop

0002a0a8 <memcmp>:
   2a0a8:	2a03      	cmp	r2, #3
   2a0aa:	b470      	push	{r4, r5, r6}
   2a0ac:	d922      	bls.n	2a0f4 <memcmp+0x4c>
   2a0ae:	ea40 0301 	orr.w	r3, r0, r1
   2a0b2:	079b      	lsls	r3, r3, #30
   2a0b4:	d011      	beq.n	2a0da <memcmp+0x32>
   2a0b6:	7803      	ldrb	r3, [r0, #0]
   2a0b8:	780c      	ldrb	r4, [r1, #0]
   2a0ba:	42a3      	cmp	r3, r4
   2a0bc:	d11d      	bne.n	2a0fa <memcmp+0x52>
   2a0be:	440a      	add	r2, r1
   2a0c0:	3101      	adds	r1, #1
   2a0c2:	e005      	b.n	2a0d0 <memcmp+0x28>
   2a0c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a0c8:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a0cc:	42a3      	cmp	r3, r4
   2a0ce:	d114      	bne.n	2a0fa <memcmp+0x52>
   2a0d0:	4291      	cmp	r1, r2
   2a0d2:	d1f7      	bne.n	2a0c4 <memcmp+0x1c>
   2a0d4:	2000      	movs	r0, #0
   2a0d6:	bc70      	pop	{r4, r5, r6}
   2a0d8:	4770      	bx	lr
   2a0da:	680d      	ldr	r5, [r1, #0]
   2a0dc:	6806      	ldr	r6, [r0, #0]
   2a0de:	42ae      	cmp	r6, r5
   2a0e0:	460c      	mov	r4, r1
   2a0e2:	4603      	mov	r3, r0
   2a0e4:	f101 0104 	add.w	r1, r1, #4
   2a0e8:	f100 0004 	add.w	r0, r0, #4
   2a0ec:	d108      	bne.n	2a100 <memcmp+0x58>
   2a0ee:	3a04      	subs	r2, #4
   2a0f0:	2a03      	cmp	r2, #3
   2a0f2:	d8f2      	bhi.n	2a0da <memcmp+0x32>
   2a0f4:	2a00      	cmp	r2, #0
   2a0f6:	d1de      	bne.n	2a0b6 <memcmp+0xe>
   2a0f8:	e7ec      	b.n	2a0d4 <memcmp+0x2c>
   2a0fa:	1b18      	subs	r0, r3, r4
   2a0fc:	bc70      	pop	{r4, r5, r6}
   2a0fe:	4770      	bx	lr
   2a100:	4621      	mov	r1, r4
   2a102:	4618      	mov	r0, r3
   2a104:	e7d7      	b.n	2a0b6 <memcmp+0xe>
   2a106:	bf00      	nop

0002a108 <memmove>:
   2a108:	4288      	cmp	r0, r1
   2a10a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a10c:	d90d      	bls.n	2a12a <memmove+0x22>
   2a10e:	188b      	adds	r3, r1, r2
   2a110:	4298      	cmp	r0, r3
   2a112:	d20a      	bcs.n	2a12a <memmove+0x22>
   2a114:	1884      	adds	r4, r0, r2
   2a116:	2a00      	cmp	r2, #0
   2a118:	d051      	beq.n	2a1be <memmove+0xb6>
   2a11a:	4622      	mov	r2, r4
   2a11c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a120:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a124:	4299      	cmp	r1, r3
   2a126:	d1f9      	bne.n	2a11c <memmove+0x14>
   2a128:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a12a:	2a0f      	cmp	r2, #15
   2a12c:	d948      	bls.n	2a1c0 <memmove+0xb8>
   2a12e:	ea41 0300 	orr.w	r3, r1, r0
   2a132:	079b      	lsls	r3, r3, #30
   2a134:	d146      	bne.n	2a1c4 <memmove+0xbc>
   2a136:	f100 0410 	add.w	r4, r0, #16
   2a13a:	f101 0310 	add.w	r3, r1, #16
   2a13e:	4615      	mov	r5, r2
   2a140:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a144:	f844 6c10 	str.w	r6, [r4, #-16]
   2a148:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a14c:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a150:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a154:	f844 6c08 	str.w	r6, [r4, #-8]
   2a158:	3d10      	subs	r5, #16
   2a15a:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a15e:	f844 6c04 	str.w	r6, [r4, #-4]
   2a162:	2d0f      	cmp	r5, #15
   2a164:	f103 0310 	add.w	r3, r3, #16
   2a168:	f104 0410 	add.w	r4, r4, #16
   2a16c:	d8e8      	bhi.n	2a140 <memmove+0x38>
   2a16e:	f1a2 0310 	sub.w	r3, r2, #16
   2a172:	f023 030f 	bic.w	r3, r3, #15
   2a176:	f002 0e0f 	and.w	lr, r2, #15
   2a17a:	3310      	adds	r3, #16
   2a17c:	f1be 0f03 	cmp.w	lr, #3
   2a180:	4419      	add	r1, r3
   2a182:	4403      	add	r3, r0
   2a184:	d921      	bls.n	2a1ca <memmove+0xc2>
   2a186:	1f1e      	subs	r6, r3, #4
   2a188:	460d      	mov	r5, r1
   2a18a:	4674      	mov	r4, lr
   2a18c:	3c04      	subs	r4, #4
   2a18e:	f855 7b04 	ldr.w	r7, [r5], #4
   2a192:	f846 7f04 	str.w	r7, [r6, #4]!
   2a196:	2c03      	cmp	r4, #3
   2a198:	d8f8      	bhi.n	2a18c <memmove+0x84>
   2a19a:	f1ae 0404 	sub.w	r4, lr, #4
   2a19e:	f024 0403 	bic.w	r4, r4, #3
   2a1a2:	3404      	adds	r4, #4
   2a1a4:	4421      	add	r1, r4
   2a1a6:	4423      	add	r3, r4
   2a1a8:	f002 0203 	and.w	r2, r2, #3
   2a1ac:	b162      	cbz	r2, 2a1c8 <memmove+0xc0>
   2a1ae:	3b01      	subs	r3, #1
   2a1b0:	440a      	add	r2, r1
   2a1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a1ba:	428a      	cmp	r2, r1
   2a1bc:	d1f9      	bne.n	2a1b2 <memmove+0xaa>
   2a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a1c0:	4603      	mov	r3, r0
   2a1c2:	e7f3      	b.n	2a1ac <memmove+0xa4>
   2a1c4:	4603      	mov	r3, r0
   2a1c6:	e7f2      	b.n	2a1ae <memmove+0xa6>
   2a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a1ca:	4672      	mov	r2, lr
   2a1cc:	e7ee      	b.n	2a1ac <memmove+0xa4>
   2a1ce:	bf00      	nop

0002a1d0 <memset>:
   2a1d0:	b470      	push	{r4, r5, r6}
   2a1d2:	0786      	lsls	r6, r0, #30
   2a1d4:	d046      	beq.n	2a264 <memset+0x94>
   2a1d6:	1e54      	subs	r4, r2, #1
   2a1d8:	2a00      	cmp	r2, #0
   2a1da:	d041      	beq.n	2a260 <memset+0x90>
   2a1dc:	b2ca      	uxtb	r2, r1
   2a1de:	4603      	mov	r3, r0
   2a1e0:	e002      	b.n	2a1e8 <memset+0x18>
   2a1e2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2a1e6:	d33b      	bcc.n	2a260 <memset+0x90>
   2a1e8:	f803 2b01 	strb.w	r2, [r3], #1
   2a1ec:	079d      	lsls	r5, r3, #30
   2a1ee:	d1f8      	bne.n	2a1e2 <memset+0x12>
   2a1f0:	2c03      	cmp	r4, #3
   2a1f2:	d92e      	bls.n	2a252 <memset+0x82>
   2a1f4:	b2cd      	uxtb	r5, r1
   2a1f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a1fa:	2c0f      	cmp	r4, #15
   2a1fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a200:	d919      	bls.n	2a236 <memset+0x66>
   2a202:	f103 0210 	add.w	r2, r3, #16
   2a206:	4626      	mov	r6, r4
   2a208:	3e10      	subs	r6, #16
   2a20a:	2e0f      	cmp	r6, #15
   2a20c:	f842 5c10 	str.w	r5, [r2, #-16]
   2a210:	f842 5c0c 	str.w	r5, [r2, #-12]
   2a214:	f842 5c08 	str.w	r5, [r2, #-8]
   2a218:	f842 5c04 	str.w	r5, [r2, #-4]
   2a21c:	f102 0210 	add.w	r2, r2, #16
   2a220:	d8f2      	bhi.n	2a208 <memset+0x38>
   2a222:	f1a4 0210 	sub.w	r2, r4, #16
   2a226:	f022 020f 	bic.w	r2, r2, #15
   2a22a:	f004 040f 	and.w	r4, r4, #15
   2a22e:	3210      	adds	r2, #16
   2a230:	2c03      	cmp	r4, #3
   2a232:	4413      	add	r3, r2
   2a234:	d90d      	bls.n	2a252 <memset+0x82>
   2a236:	461e      	mov	r6, r3
   2a238:	4622      	mov	r2, r4
   2a23a:	3a04      	subs	r2, #4
   2a23c:	2a03      	cmp	r2, #3
   2a23e:	f846 5b04 	str.w	r5, [r6], #4
   2a242:	d8fa      	bhi.n	2a23a <memset+0x6a>
   2a244:	1f22      	subs	r2, r4, #4
   2a246:	f022 0203 	bic.w	r2, r2, #3
   2a24a:	3204      	adds	r2, #4
   2a24c:	4413      	add	r3, r2
   2a24e:	f004 0403 	and.w	r4, r4, #3
   2a252:	b12c      	cbz	r4, 2a260 <memset+0x90>
   2a254:	b2c9      	uxtb	r1, r1
   2a256:	441c      	add	r4, r3
   2a258:	f803 1b01 	strb.w	r1, [r3], #1
   2a25c:	429c      	cmp	r4, r3
   2a25e:	d1fb      	bne.n	2a258 <memset+0x88>
   2a260:	bc70      	pop	{r4, r5, r6}
   2a262:	4770      	bx	lr
   2a264:	4614      	mov	r4, r2
   2a266:	4603      	mov	r3, r0
   2a268:	e7c2      	b.n	2a1f0 <memset+0x20>
   2a26a:	bf00      	nop

0002a26c <snprintf>:
   2a26c:	b40c      	push	{r2, r3}
   2a26e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a270:	4b23      	ldr	r3, [pc, #140]	; (2a300 <snprintf+0x94>)
   2a272:	1e0c      	subs	r4, r1, #0
   2a274:	b09d      	sub	sp, #116	; 0x74
   2a276:	681d      	ldr	r5, [r3, #0]
   2a278:	db3d      	blt.n	2a2f6 <snprintf+0x8a>
   2a27a:	f44f 7302 	mov.w	r3, #520	; 0x208
   2a27e:	9002      	str	r0, [sp, #8]
   2a280:	9006      	str	r0, [sp, #24]
   2a282:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a286:	ae23      	add	r6, sp, #140	; 0x8c
   2a288:	d017      	beq.n	2a2ba <snprintf+0x4e>
   2a28a:	3c01      	subs	r4, #1
   2a28c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2a28e:	9404      	str	r4, [sp, #16]
   2a290:	4633      	mov	r3, r6
   2a292:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a296:	a902      	add	r1, sp, #8
   2a298:	4628      	mov	r0, r5
   2a29a:	9407      	str	r4, [sp, #28]
   2a29c:	9601      	str	r6, [sp, #4]
   2a29e:	f8ad 7016 	strh.w	r7, [sp, #22]
   2a2a2:	f000 fd7f 	bl	2ada4 <_svfprintf_r>
   2a2a6:	1c42      	adds	r2, r0, #1
   2a2a8:	db1b      	blt.n	2a2e2 <snprintf+0x76>
   2a2aa:	9b02      	ldr	r3, [sp, #8]
   2a2ac:	2200      	movs	r2, #0
   2a2ae:	701a      	strb	r2, [r3, #0]
   2a2b0:	b01d      	add	sp, #116	; 0x74
   2a2b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a2b6:	b002      	add	sp, #8
   2a2b8:	4770      	bx	lr
   2a2ba:	4633      	mov	r3, r6
   2a2bc:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a2c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2a2c2:	9404      	str	r4, [sp, #16]
   2a2c4:	a902      	add	r1, sp, #8
   2a2c6:	4628      	mov	r0, r5
   2a2c8:	9407      	str	r4, [sp, #28]
   2a2ca:	9601      	str	r6, [sp, #4]
   2a2cc:	f8ad 7016 	strh.w	r7, [sp, #22]
   2a2d0:	f000 fd68 	bl	2ada4 <_svfprintf_r>
   2a2d4:	1c43      	adds	r3, r0, #1
   2a2d6:	db07      	blt.n	2a2e8 <snprintf+0x7c>
   2a2d8:	b01d      	add	sp, #116	; 0x74
   2a2da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a2de:	b002      	add	sp, #8
   2a2e0:	4770      	bx	lr
   2a2e2:	238b      	movs	r3, #139	; 0x8b
   2a2e4:	602b      	str	r3, [r5, #0]
   2a2e6:	e7e0      	b.n	2a2aa <snprintf+0x3e>
   2a2e8:	238b      	movs	r3, #139	; 0x8b
   2a2ea:	602b      	str	r3, [r5, #0]
   2a2ec:	b01d      	add	sp, #116	; 0x74
   2a2ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a2f2:	b002      	add	sp, #8
   2a2f4:	4770      	bx	lr
   2a2f6:	238b      	movs	r3, #139	; 0x8b
   2a2f8:	602b      	str	r3, [r5, #0]
   2a2fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a2fe:	e7eb      	b.n	2a2d8 <snprintf+0x6c>
   2a300:	2000c6f0 	.word	0x2000c6f0

0002a304 <strcat>:
   2a304:	0783      	lsls	r3, r0, #30
   2a306:	b510      	push	{r4, lr}
   2a308:	4604      	mov	r4, r0
   2a30a:	d110      	bne.n	2a32e <strcat+0x2a>
   2a30c:	6802      	ldr	r2, [r0, #0]
   2a30e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2a312:	ea23 0302 	bic.w	r3, r3, r2
   2a316:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2a31a:	d108      	bne.n	2a32e <strcat+0x2a>
   2a31c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2a320:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2a324:	ea23 0302 	bic.w	r3, r3, r2
   2a328:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2a32c:	d0f6      	beq.n	2a31c <strcat+0x18>
   2a32e:	7803      	ldrb	r3, [r0, #0]
   2a330:	b11b      	cbz	r3, 2a33a <strcat+0x36>
   2a332:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a336:	2b00      	cmp	r3, #0
   2a338:	d1fb      	bne.n	2a332 <strcat+0x2e>
   2a33a:	f000 f877 	bl	2a42c <strcpy>
   2a33e:	4620      	mov	r0, r4
   2a340:	bd10      	pop	{r4, pc}
   2a342:	bf00      	nop

0002a344 <strchr>:
   2a344:	b2c9      	uxtb	r1, r1
   2a346:	2900      	cmp	r1, #0
   2a348:	d041      	beq.n	2a3ce <strchr+0x8a>
   2a34a:	0782      	lsls	r2, r0, #30
   2a34c:	b4f0      	push	{r4, r5, r6, r7}
   2a34e:	d067      	beq.n	2a420 <strchr+0xdc>
   2a350:	7803      	ldrb	r3, [r0, #0]
   2a352:	2b00      	cmp	r3, #0
   2a354:	d068      	beq.n	2a428 <strchr+0xe4>
   2a356:	4299      	cmp	r1, r3
   2a358:	d037      	beq.n	2a3ca <strchr+0x86>
   2a35a:	1c43      	adds	r3, r0, #1
   2a35c:	e004      	b.n	2a368 <strchr+0x24>
   2a35e:	f813 0b01 	ldrb.w	r0, [r3], #1
   2a362:	b390      	cbz	r0, 2a3ca <strchr+0x86>
   2a364:	4281      	cmp	r1, r0
   2a366:	d02f      	beq.n	2a3c8 <strchr+0x84>
   2a368:	079a      	lsls	r2, r3, #30
   2a36a:	461c      	mov	r4, r3
   2a36c:	d1f7      	bne.n	2a35e <strchr+0x1a>
   2a36e:	6825      	ldr	r5, [r4, #0]
   2a370:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2a374:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2a378:	ea83 0605 	eor.w	r6, r3, r5
   2a37c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2a380:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2a384:	ea20 0006 	bic.w	r0, r0, r6
   2a388:	ea22 0205 	bic.w	r2, r2, r5
   2a38c:	4302      	orrs	r2, r0
   2a38e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a392:	d111      	bne.n	2a3b8 <strchr+0x74>
   2a394:	4620      	mov	r0, r4
   2a396:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2a39a:	ea83 0706 	eor.w	r7, r3, r6
   2a39e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2a3a2:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2a3a6:	ea25 0507 	bic.w	r5, r5, r7
   2a3aa:	ea22 0206 	bic.w	r2, r2, r6
   2a3ae:	432a      	orrs	r2, r5
   2a3b0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a3b4:	d0ef      	beq.n	2a396 <strchr+0x52>
   2a3b6:	4604      	mov	r4, r0
   2a3b8:	7820      	ldrb	r0, [r4, #0]
   2a3ba:	b918      	cbnz	r0, 2a3c4 <strchr+0x80>
   2a3bc:	e005      	b.n	2a3ca <strchr+0x86>
   2a3be:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2a3c2:	b110      	cbz	r0, 2a3ca <strchr+0x86>
   2a3c4:	4281      	cmp	r1, r0
   2a3c6:	d1fa      	bne.n	2a3be <strchr+0x7a>
   2a3c8:	4620      	mov	r0, r4
   2a3ca:	bcf0      	pop	{r4, r5, r6, r7}
   2a3cc:	4770      	bx	lr
   2a3ce:	0783      	lsls	r3, r0, #30
   2a3d0:	d024      	beq.n	2a41c <strchr+0xd8>
   2a3d2:	7803      	ldrb	r3, [r0, #0]
   2a3d4:	2b00      	cmp	r3, #0
   2a3d6:	d0f9      	beq.n	2a3cc <strchr+0x88>
   2a3d8:	1c43      	adds	r3, r0, #1
   2a3da:	e003      	b.n	2a3e4 <strchr+0xa0>
   2a3dc:	7802      	ldrb	r2, [r0, #0]
   2a3de:	3301      	adds	r3, #1
   2a3e0:	2a00      	cmp	r2, #0
   2a3e2:	d0f3      	beq.n	2a3cc <strchr+0x88>
   2a3e4:	0799      	lsls	r1, r3, #30
   2a3e6:	4618      	mov	r0, r3
   2a3e8:	d1f8      	bne.n	2a3dc <strchr+0x98>
   2a3ea:	6819      	ldr	r1, [r3, #0]
   2a3ec:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2a3f0:	ea22 0201 	bic.w	r2, r2, r1
   2a3f4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a3f8:	d108      	bne.n	2a40c <strchr+0xc8>
   2a3fa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2a3fe:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2a402:	ea22 0201 	bic.w	r2, r2, r1
   2a406:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a40a:	d0f6      	beq.n	2a3fa <strchr+0xb6>
   2a40c:	781a      	ldrb	r2, [r3, #0]
   2a40e:	4618      	mov	r0, r3
   2a410:	b142      	cbz	r2, 2a424 <strchr+0xe0>
   2a412:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a416:	2b00      	cmp	r3, #0
   2a418:	d1fb      	bne.n	2a412 <strchr+0xce>
   2a41a:	4770      	bx	lr
   2a41c:	4603      	mov	r3, r0
   2a41e:	e7e4      	b.n	2a3ea <strchr+0xa6>
   2a420:	4604      	mov	r4, r0
   2a422:	e7a4      	b.n	2a36e <strchr+0x2a>
   2a424:	4618      	mov	r0, r3
   2a426:	4770      	bx	lr
   2a428:	4618      	mov	r0, r3
   2a42a:	e7ce      	b.n	2a3ca <strchr+0x86>

0002a42c <strcpy>:
   2a42c:	ea80 0201 	eor.w	r2, r0, r1
   2a430:	4684      	mov	ip, r0
   2a432:	f012 0f03 	tst.w	r2, #3
   2a436:	d14f      	bne.n	2a4d8 <strcpy+0xac>
   2a438:	f011 0f03 	tst.w	r1, #3
   2a43c:	d132      	bne.n	2a4a4 <strcpy+0x78>
   2a43e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2a442:	f011 0f04 	tst.w	r1, #4
   2a446:	f851 3b04 	ldr.w	r3, [r1], #4
   2a44a:	d00b      	beq.n	2a464 <strcpy+0x38>
   2a44c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2a450:	439a      	bics	r2, r3
   2a452:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a456:	bf04      	itt	eq
   2a458:	f84c 3b04 	streq.w	r3, [ip], #4
   2a45c:	f851 3b04 	ldreq.w	r3, [r1], #4
   2a460:	d116      	bne.n	2a490 <strcpy+0x64>
   2a462:	bf00      	nop
   2a464:	f851 4b04 	ldr.w	r4, [r1], #4
   2a468:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2a46c:	439a      	bics	r2, r3
   2a46e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a472:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2a476:	d10b      	bne.n	2a490 <strcpy+0x64>
   2a478:	f84c 3b04 	str.w	r3, [ip], #4
   2a47c:	43a2      	bics	r2, r4
   2a47e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a482:	bf04      	itt	eq
   2a484:	f851 3b04 	ldreq.w	r3, [r1], #4
   2a488:	f84c 4b04 	streq.w	r4, [ip], #4
   2a48c:	d0ea      	beq.n	2a464 <strcpy+0x38>
   2a48e:	4623      	mov	r3, r4
   2a490:	f80c 3b01 	strb.w	r3, [ip], #1
   2a494:	f013 0fff 	tst.w	r3, #255	; 0xff
   2a498:	ea4f 2333 	mov.w	r3, r3, ror #8
   2a49c:	d1f8      	bne.n	2a490 <strcpy+0x64>
   2a49e:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a4a2:	4770      	bx	lr
   2a4a4:	f011 0f01 	tst.w	r1, #1
   2a4a8:	d006      	beq.n	2a4b8 <strcpy+0x8c>
   2a4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a4ae:	f80c 2b01 	strb.w	r2, [ip], #1
   2a4b2:	2a00      	cmp	r2, #0
   2a4b4:	bf08      	it	eq
   2a4b6:	4770      	bxeq	lr
   2a4b8:	f011 0f02 	tst.w	r1, #2
   2a4bc:	d0bf      	beq.n	2a43e <strcpy+0x12>
   2a4be:	f831 2b02 	ldrh.w	r2, [r1], #2
   2a4c2:	f012 0fff 	tst.w	r2, #255	; 0xff
   2a4c6:	bf16      	itet	ne
   2a4c8:	f82c 2b02 	strhne.w	r2, [ip], #2
   2a4cc:	f88c 2000 	strbeq.w	r2, [ip]
   2a4d0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2a4d4:	d1b3      	bne.n	2a43e <strcpy+0x12>
   2a4d6:	4770      	bx	lr
   2a4d8:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a4dc:	f80c 2b01 	strb.w	r2, [ip], #1
   2a4e0:	2a00      	cmp	r2, #0
   2a4e2:	d1f9      	bne.n	2a4d8 <strcpy+0xac>
   2a4e4:	4770      	bx	lr
   2a4e6:	bf00      	nop

0002a4e8 <strncmp>:
   2a4e8:	2a00      	cmp	r2, #0
   2a4ea:	d041      	beq.n	2a570 <strncmp+0x88>
   2a4ec:	ea40 0301 	orr.w	r3, r0, r1
   2a4f0:	f013 0303 	ands.w	r3, r3, #3
   2a4f4:	b4f0      	push	{r4, r5, r6, r7}
   2a4f6:	d125      	bne.n	2a544 <strncmp+0x5c>
   2a4f8:	2a03      	cmp	r2, #3
   2a4fa:	d923      	bls.n	2a544 <strncmp+0x5c>
   2a4fc:	6804      	ldr	r4, [r0, #0]
   2a4fe:	680d      	ldr	r5, [r1, #0]
   2a500:	42ac      	cmp	r4, r5
   2a502:	d11f      	bne.n	2a544 <strncmp+0x5c>
   2a504:	3a04      	subs	r2, #4
   2a506:	d038      	beq.n	2a57a <strncmp+0x92>
   2a508:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2a50c:	ea25 0404 	bic.w	r4, r5, r4
   2a510:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a514:	d12e      	bne.n	2a574 <strncmp+0x8c>
   2a516:	3004      	adds	r0, #4
   2a518:	3104      	adds	r1, #4
   2a51a:	e00f      	b.n	2a53c <strncmp+0x54>
   2a51c:	f850 3b04 	ldr.w	r3, [r0], #4
   2a520:	680e      	ldr	r6, [r1, #0]
   2a522:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2a526:	42b3      	cmp	r3, r6
   2a528:	ea24 0403 	bic.w	r4, r4, r3
   2a52c:	f101 0104 	add.w	r1, r1, #4
   2a530:	d126      	bne.n	2a580 <strncmp+0x98>
   2a532:	3a04      	subs	r2, #4
   2a534:	d021      	beq.n	2a57a <strncmp+0x92>
   2a536:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a53a:	d11b      	bne.n	2a574 <strncmp+0x8c>
   2a53c:	2a03      	cmp	r2, #3
   2a53e:	4607      	mov	r7, r0
   2a540:	460d      	mov	r5, r1
   2a542:	d8eb      	bhi.n	2a51c <strncmp+0x34>
   2a544:	7805      	ldrb	r5, [r0, #0]
   2a546:	780c      	ldrb	r4, [r1, #0]
   2a548:	42ac      	cmp	r4, r5
   2a54a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2a54e:	d11a      	bne.n	2a586 <strncmp+0x9e>
   2a550:	b183      	cbz	r3, 2a574 <strncmp+0x8c>
   2a552:	b914      	cbnz	r4, 2a55a <strncmp+0x72>
   2a554:	e00e      	b.n	2a574 <strncmp+0x8c>
   2a556:	b16b      	cbz	r3, 2a574 <strncmp+0x8c>
   2a558:	b17a      	cbz	r2, 2a57a <strncmp+0x92>
   2a55a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2a55e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a562:	42a2      	cmp	r2, r4
   2a564:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2a568:	d0f5      	beq.n	2a556 <strncmp+0x6e>
   2a56a:	1b10      	subs	r0, r2, r4
   2a56c:	bcf0      	pop	{r4, r5, r6, r7}
   2a56e:	4770      	bx	lr
   2a570:	4610      	mov	r0, r2
   2a572:	4770      	bx	lr
   2a574:	2000      	movs	r0, #0
   2a576:	bcf0      	pop	{r4, r5, r6, r7}
   2a578:	4770      	bx	lr
   2a57a:	4610      	mov	r0, r2
   2a57c:	bcf0      	pop	{r4, r5, r6, r7}
   2a57e:	4770      	bx	lr
   2a580:	4629      	mov	r1, r5
   2a582:	4638      	mov	r0, r7
   2a584:	e7de      	b.n	2a544 <strncmp+0x5c>
   2a586:	462a      	mov	r2, r5
   2a588:	e7ef      	b.n	2a56a <strncmp+0x82>
   2a58a:	bf00      	nop

0002a58c <strncpy>:
   2a58c:	ea40 0301 	orr.w	r3, r0, r1
   2a590:	f013 0f03 	tst.w	r3, #3
   2a594:	b470      	push	{r4, r5, r6}
   2a596:	4603      	mov	r3, r0
   2a598:	d024      	beq.n	2a5e4 <strncpy+0x58>
   2a59a:	b1a2      	cbz	r2, 2a5c6 <strncpy+0x3a>
   2a59c:	780c      	ldrb	r4, [r1, #0]
   2a59e:	701c      	strb	r4, [r3, #0]
   2a5a0:	3a01      	subs	r2, #1
   2a5a2:	3301      	adds	r3, #1
   2a5a4:	3101      	adds	r1, #1
   2a5a6:	b13c      	cbz	r4, 2a5b8 <strncpy+0x2c>
   2a5a8:	b16a      	cbz	r2, 2a5c6 <strncpy+0x3a>
   2a5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a5ae:	f803 4b01 	strb.w	r4, [r3], #1
   2a5b2:	3a01      	subs	r2, #1
   2a5b4:	2c00      	cmp	r4, #0
   2a5b6:	d1f7      	bne.n	2a5a8 <strncpy+0x1c>
   2a5b8:	b12a      	cbz	r2, 2a5c6 <strncpy+0x3a>
   2a5ba:	441a      	add	r2, r3
   2a5bc:	2100      	movs	r1, #0
   2a5be:	f803 1b01 	strb.w	r1, [r3], #1
   2a5c2:	429a      	cmp	r2, r3
   2a5c4:	d1fb      	bne.n	2a5be <strncpy+0x32>
   2a5c6:	bc70      	pop	{r4, r5, r6}
   2a5c8:	4770      	bx	lr
   2a5ca:	460e      	mov	r6, r1
   2a5cc:	f851 5b04 	ldr.w	r5, [r1], #4
   2a5d0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2a5d4:	ea24 0405 	bic.w	r4, r4, r5
   2a5d8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a5dc:	d105      	bne.n	2a5ea <strncpy+0x5e>
   2a5de:	f843 5b04 	str.w	r5, [r3], #4
   2a5e2:	3a04      	subs	r2, #4
   2a5e4:	2a03      	cmp	r2, #3
   2a5e6:	d8f0      	bhi.n	2a5ca <strncpy+0x3e>
   2a5e8:	e7d7      	b.n	2a59a <strncpy+0xe>
   2a5ea:	4631      	mov	r1, r6
   2a5ec:	e7d6      	b.n	2a59c <strncpy+0x10>
   2a5ee:	bf00      	nop

0002a5f0 <strrchr>:
   2a5f0:	b171      	cbz	r1, 2a610 <strrchr+0x20>
   2a5f2:	b538      	push	{r3, r4, r5, lr}
   2a5f4:	4603      	mov	r3, r0
   2a5f6:	460c      	mov	r4, r1
   2a5f8:	2500      	movs	r5, #0
   2a5fa:	e001      	b.n	2a600 <strrchr+0x10>
   2a5fc:	1c43      	adds	r3, r0, #1
   2a5fe:	4605      	mov	r5, r0
   2a600:	4618      	mov	r0, r3
   2a602:	4621      	mov	r1, r4
   2a604:	f7ff fe9e 	bl	2a344 <strchr>
   2a608:	2800      	cmp	r0, #0
   2a60a:	d1f7      	bne.n	2a5fc <strrchr+0xc>
   2a60c:	4628      	mov	r0, r5
   2a60e:	bd38      	pop	{r3, r4, r5, pc}
   2a610:	f7ff be98 	b.w	2a344 <strchr>

0002a614 <critical_factorization>:
   2a614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a618:	f04f 0e01 	mov.w	lr, #1
   2a61c:	4674      	mov	r4, lr
   2a61e:	2500      	movs	r5, #0
   2a620:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a624:	192b      	adds	r3, r5, r4
   2a626:	428b      	cmp	r3, r1
   2a628:	eb00 0706 	add.w	r7, r0, r6
   2a62c:	d20d      	bcs.n	2a64a <critical_factorization+0x36>
   2a62e:	5d3f      	ldrb	r7, [r7, r4]
   2a630:	f810 c003 	ldrb.w	ip, [r0, r3]
   2a634:	45bc      	cmp	ip, r7
   2a636:	d22d      	bcs.n	2a694 <critical_factorization+0x80>
   2a638:	461d      	mov	r5, r3
   2a63a:	2401      	movs	r4, #1
   2a63c:	eba3 0e06 	sub.w	lr, r3, r6
   2a640:	192b      	adds	r3, r5, r4
   2a642:	428b      	cmp	r3, r1
   2a644:	eb00 0706 	add.w	r7, r0, r6
   2a648:	d3f1      	bcc.n	2a62e <critical_factorization+0x1a>
   2a64a:	f04f 0801 	mov.w	r8, #1
   2a64e:	f8c2 e000 	str.w	lr, [r2]
   2a652:	4644      	mov	r4, r8
   2a654:	2500      	movs	r5, #0
   2a656:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a65a:	192b      	adds	r3, r5, r4
   2a65c:	4299      	cmp	r1, r3
   2a65e:	eb00 0e07 	add.w	lr, r0, r7
   2a662:	d90e      	bls.n	2a682 <critical_factorization+0x6e>
   2a664:	f81e e004 	ldrb.w	lr, [lr, r4]
   2a668:	f810 c003 	ldrb.w	ip, [r0, r3]
   2a66c:	45f4      	cmp	ip, lr
   2a66e:	d918      	bls.n	2a6a2 <critical_factorization+0x8e>
   2a670:	461d      	mov	r5, r3
   2a672:	2401      	movs	r4, #1
   2a674:	eba3 0807 	sub.w	r8, r3, r7
   2a678:	192b      	adds	r3, r5, r4
   2a67a:	4299      	cmp	r1, r3
   2a67c:	eb00 0e07 	add.w	lr, r0, r7
   2a680:	d8f0      	bhi.n	2a664 <critical_factorization+0x50>
   2a682:	3701      	adds	r7, #1
   2a684:	1c70      	adds	r0, r6, #1
   2a686:	4287      	cmp	r7, r0
   2a688:	bf24      	itt	cs
   2a68a:	f8c2 8000 	strcs.w	r8, [r2]
   2a68e:	4638      	movcs	r0, r7
   2a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a694:	d00c      	beq.n	2a6b0 <critical_factorization+0x9c>
   2a696:	f04f 0e01 	mov.w	lr, #1
   2a69a:	462e      	mov	r6, r5
   2a69c:	4674      	mov	r4, lr
   2a69e:	4475      	add	r5, lr
   2a6a0:	e7c0      	b.n	2a624 <critical_factorization+0x10>
   2a6a2:	d00b      	beq.n	2a6bc <critical_factorization+0xa8>
   2a6a4:	f04f 0801 	mov.w	r8, #1
   2a6a8:	462f      	mov	r7, r5
   2a6aa:	4644      	mov	r4, r8
   2a6ac:	4445      	add	r5, r8
   2a6ae:	e7d4      	b.n	2a65a <critical_factorization+0x46>
   2a6b0:	4574      	cmp	r4, lr
   2a6b2:	bf12      	itee	ne
   2a6b4:	3401      	addne	r4, #1
   2a6b6:	461d      	moveq	r5, r3
   2a6b8:	2401      	moveq	r4, #1
   2a6ba:	e7b3      	b.n	2a624 <critical_factorization+0x10>
   2a6bc:	4544      	cmp	r4, r8
   2a6be:	bf12      	itee	ne
   2a6c0:	3401      	addne	r4, #1
   2a6c2:	461d      	moveq	r5, r3
   2a6c4:	2401      	moveq	r4, #1
   2a6c6:	e7c8      	b.n	2a65a <critical_factorization+0x46>

0002a6c8 <two_way_long_needle>:
   2a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6cc:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2a6d0:	4616      	mov	r6, r2
   2a6d2:	4605      	mov	r5, r0
   2a6d4:	468b      	mov	fp, r1
   2a6d6:	4610      	mov	r0, r2
   2a6d8:	4619      	mov	r1, r3
   2a6da:	aa03      	add	r2, sp, #12
   2a6dc:	461c      	mov	r4, r3
   2a6de:	f7ff ff99 	bl	2a614 <critical_factorization>
   2a6e2:	ab03      	add	r3, sp, #12
   2a6e4:	4681      	mov	r9, r0
   2a6e6:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2a6ea:	f843 4f04 	str.w	r4, [r3, #4]!
   2a6ee:	4293      	cmp	r3, r2
   2a6f0:	d1fb      	bne.n	2a6ea <two_way_long_needle+0x22>
   2a6f2:	b14c      	cbz	r4, 2a708 <two_way_long_needle+0x40>
   2a6f4:	1e63      	subs	r3, r4, #1
   2a6f6:	1e72      	subs	r2, r6, #1
   2a6f8:	a804      	add	r0, sp, #16
   2a6fa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2a6fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2a702:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2a706:	d2f8      	bcs.n	2a6fa <two_way_long_needle+0x32>
   2a708:	9903      	ldr	r1, [sp, #12]
   2a70a:	464a      	mov	r2, r9
   2a70c:	4431      	add	r1, r6
   2a70e:	4630      	mov	r0, r6
   2a710:	f7ff fcca 	bl	2a0a8 <memcmp>
   2a714:	2800      	cmp	r0, #0
   2a716:	d16f      	bne.n	2a7f8 <two_way_long_needle+0x130>
   2a718:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2a71c:	9300      	str	r3, [sp, #0]
   2a71e:	18f3      	adds	r3, r6, r3
   2a720:	4682      	mov	sl, r0
   2a722:	9301      	str	r3, [sp, #4]
   2a724:	4623      	mov	r3, r4
   2a726:	4680      	mov	r8, r0
   2a728:	4654      	mov	r4, sl
   2a72a:	4658      	mov	r0, fp
   2a72c:	469a      	mov	sl, r3
   2a72e:	eb08 070a 	add.w	r7, r8, sl
   2a732:	1a3a      	subs	r2, r7, r0
   2a734:	2100      	movs	r1, #0
   2a736:	4428      	add	r0, r5
   2a738:	f7d5 fd72 	bl	220 <memchr>
   2a73c:	2800      	cmp	r0, #0
   2a73e:	d156      	bne.n	2a7ee <two_way_long_needle+0x126>
   2a740:	2f00      	cmp	r7, #0
   2a742:	d054      	beq.n	2a7ee <two_way_long_needle+0x126>
   2a744:	19eb      	adds	r3, r5, r7
   2a746:	aa04      	add	r2, sp, #16
   2a748:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2a750:	b14b      	cbz	r3, 2a766 <two_way_long_needle+0x9e>
   2a752:	b124      	cbz	r4, 2a75e <two_way_long_needle+0x96>
   2a754:	9a03      	ldr	r2, [sp, #12]
   2a756:	4293      	cmp	r3, r2
   2a758:	d201      	bcs.n	2a75e <two_way_long_needle+0x96>
   2a75a:	ebaa 0302 	sub.w	r3, sl, r2
   2a75e:	4498      	add	r8, r3
   2a760:	2400      	movs	r4, #0
   2a762:	4638      	mov	r0, r7
   2a764:	e7e3      	b.n	2a72e <two_way_long_needle+0x66>
   2a766:	454c      	cmp	r4, r9
   2a768:	4623      	mov	r3, r4
   2a76a:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2a76e:	bf38      	it	cc
   2a770:	464b      	movcc	r3, r9
   2a772:	4573      	cmp	r3, lr
   2a774:	d213      	bcs.n	2a79e <two_way_long_needle+0xd6>
   2a776:	eb08 0203 	add.w	r2, r8, r3
   2a77a:	f816 c003 	ldrb.w	ip, [r6, r3]
   2a77e:	5ca8      	ldrb	r0, [r5, r2]
   2a780:	4584      	cmp	ip, r0
   2a782:	442a      	add	r2, r5
   2a784:	eb06 0103 	add.w	r1, r6, r3
   2a788:	d006      	beq.n	2a798 <two_way_long_needle+0xd0>
   2a78a:	e02c      	b.n	2a7e6 <two_way_long_needle+0x11e>
   2a78c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2a790:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2a794:	4584      	cmp	ip, r0
   2a796:	d126      	bne.n	2a7e6 <two_way_long_needle+0x11e>
   2a798:	3301      	adds	r3, #1
   2a79a:	4573      	cmp	r3, lr
   2a79c:	d3f6      	bcc.n	2a78c <two_way_long_needle+0xc4>
   2a79e:	454c      	cmp	r4, r9
   2a7a0:	9900      	ldr	r1, [sp, #0]
   2a7a2:	f080 8089 	bcs.w	2a8b8 <two_way_long_needle+0x1f0>
   2a7a6:	9b00      	ldr	r3, [sp, #0]
   2a7a8:	eb08 0203 	add.w	r2, r8, r3
   2a7ac:	9b01      	ldr	r3, [sp, #4]
   2a7ae:	5ca8      	ldrb	r0, [r5, r2]
   2a7b0:	781b      	ldrb	r3, [r3, #0]
   2a7b2:	4298      	cmp	r0, r3
   2a7b4:	442a      	add	r2, r5
   2a7b6:	d17f      	bne.n	2a8b8 <two_way_long_needle+0x1f0>
   2a7b8:	9801      	ldr	r0, [sp, #4]
   2a7ba:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2a7be:	e006      	b.n	2a7ce <two_way_long_needle+0x106>
   2a7c0:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2a7c4:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2a7c8:	45f4      	cmp	ip, lr
   2a7ca:	d103      	bne.n	2a7d4 <two_way_long_needle+0x10c>
   2a7cc:	4619      	mov	r1, r3
   2a7ce:	1e4b      	subs	r3, r1, #1
   2a7d0:	459b      	cmp	fp, r3
   2a7d2:	d1f5      	bne.n	2a7c0 <two_way_long_needle+0xf8>
   2a7d4:	3401      	adds	r4, #1
   2a7d6:	428c      	cmp	r4, r1
   2a7d8:	d870      	bhi.n	2a8bc <two_way_long_needle+0x1f4>
   2a7da:	9c03      	ldr	r4, [sp, #12]
   2a7dc:	4638      	mov	r0, r7
   2a7de:	44a0      	add	r8, r4
   2a7e0:	ebaa 0404 	sub.w	r4, sl, r4
   2a7e4:	e7a3      	b.n	2a72e <two_way_long_needle+0x66>
   2a7e6:	f1c9 0201 	rsb	r2, r9, #1
   2a7ea:	4490      	add	r8, r2
   2a7ec:	e7b7      	b.n	2a75e <two_way_long_needle+0x96>
   2a7ee:	2000      	movs	r0, #0
   2a7f0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7f8:	eba4 0309 	sub.w	r3, r4, r9
   2a7fc:	454b      	cmp	r3, r9
   2a7fe:	bf38      	it	cc
   2a800:	464b      	movcc	r3, r9
   2a802:	3301      	adds	r3, #1
   2a804:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2a808:	9303      	str	r3, [sp, #12]
   2a80a:	eb06 0308 	add.w	r3, r6, r8
   2a80e:	4658      	mov	r0, fp
   2a810:	f04f 0a00 	mov.w	sl, #0
   2a814:	46cb      	mov	fp, r9
   2a816:	4699      	mov	r9, r3
   2a818:	eb0a 0704 	add.w	r7, sl, r4
   2a81c:	1a3a      	subs	r2, r7, r0
   2a81e:	2100      	movs	r1, #0
   2a820:	4428      	add	r0, r5
   2a822:	f7d5 fcfd 	bl	220 <memchr>
   2a826:	2800      	cmp	r0, #0
   2a828:	d1e1      	bne.n	2a7ee <two_way_long_needle+0x126>
   2a82a:	2f00      	cmp	r7, #0
   2a82c:	d0df      	beq.n	2a7ee <two_way_long_needle+0x126>
   2a82e:	19eb      	adds	r3, r5, r7
   2a830:	aa04      	add	r2, sp, #16
   2a832:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2a83a:	bba3      	cbnz	r3, 2a8a6 <two_way_long_needle+0x1de>
   2a83c:	1e61      	subs	r1, r4, #1
   2a83e:	458b      	cmp	fp, r1
   2a840:	d215      	bcs.n	2a86e <two_way_long_needle+0x1a6>
   2a842:	eb0a 020b 	add.w	r2, sl, fp
   2a846:	f816 300b 	ldrb.w	r3, [r6, fp]
   2a84a:	f815 e002 	ldrb.w	lr, [r5, r2]
   2a84e:	459e      	cmp	lr, r3
   2a850:	442a      	add	r2, r5
   2a852:	eb06 000b 	add.w	r0, r6, fp
   2a856:	465b      	mov	r3, fp
   2a858:	d006      	beq.n	2a868 <two_way_long_needle+0x1a0>
   2a85a:	e027      	b.n	2a8ac <two_way_long_needle+0x1e4>
   2a85c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2a860:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2a864:	45f4      	cmp	ip, lr
   2a866:	d121      	bne.n	2a8ac <two_way_long_needle+0x1e4>
   2a868:	3301      	adds	r3, #1
   2a86a:	428b      	cmp	r3, r1
   2a86c:	d3f6      	bcc.n	2a85c <two_way_long_needle+0x194>
   2a86e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2a872:	d011      	beq.n	2a898 <two_way_long_needle+0x1d0>
   2a874:	eb0a 0208 	add.w	r2, sl, r8
   2a878:	f899 1000 	ldrb.w	r1, [r9]
   2a87c:	5cab      	ldrb	r3, [r5, r2]
   2a87e:	4299      	cmp	r1, r3
   2a880:	442a      	add	r2, r5
   2a882:	d10f      	bne.n	2a8a4 <two_way_long_needle+0x1dc>
   2a884:	464b      	mov	r3, r9
   2a886:	e005      	b.n	2a894 <two_way_long_needle+0x1cc>
   2a888:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2a88c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2a890:	4288      	cmp	r0, r1
   2a892:	d107      	bne.n	2a8a4 <two_way_long_needle+0x1dc>
   2a894:	42b3      	cmp	r3, r6
   2a896:	d1f7      	bne.n	2a888 <two_way_long_needle+0x1c0>
   2a898:	eb05 000a 	add.w	r0, r5, sl
   2a89c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2a8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8a4:	9b03      	ldr	r3, [sp, #12]
   2a8a6:	449a      	add	sl, r3
   2a8a8:	4638      	mov	r0, r7
   2a8aa:	e7b5      	b.n	2a818 <two_way_long_needle+0x150>
   2a8ac:	f1cb 0201 	rsb	r2, fp, #1
   2a8b0:	4492      	add	sl, r2
   2a8b2:	449a      	add	sl, r3
   2a8b4:	4638      	mov	r0, r7
   2a8b6:	e7af      	b.n	2a818 <two_way_long_needle+0x150>
   2a8b8:	4649      	mov	r1, r9
   2a8ba:	e78b      	b.n	2a7d4 <two_way_long_needle+0x10c>
   2a8bc:	eb05 0008 	add.w	r0, r5, r8
   2a8c0:	e796      	b.n	2a7f0 <two_way_long_needle+0x128>
   2a8c2:	bf00      	nop

0002a8c4 <strstr>:
   2a8c4:	7802      	ldrb	r2, [r0, #0]
   2a8c6:	2a00      	cmp	r2, #0
   2a8c8:	f000 8101 	beq.w	2aace <strstr+0x20a>
   2a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8d0:	f891 8000 	ldrb.w	r8, [r1]
   2a8d4:	b085      	sub	sp, #20
   2a8d6:	4644      	mov	r4, r8
   2a8d8:	f1b8 0f00 	cmp.w	r8, #0
   2a8dc:	d016      	beq.n	2a90c <strstr+0x48>
   2a8de:	4686      	mov	lr, r0
   2a8e0:	f101 0c01 	add.w	ip, r1, #1
   2a8e4:	2701      	movs	r7, #1
   2a8e6:	e003      	b.n	2a8f0 <strstr+0x2c>
   2a8e8:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a8ec:	b16c      	cbz	r4, 2a90a <strstr+0x46>
   2a8ee:	469c      	mov	ip, r3
   2a8f0:	42a2      	cmp	r2, r4
   2a8f2:	bf14      	ite	ne
   2a8f4:	2700      	movne	r7, #0
   2a8f6:	f007 0701 	andeq.w	r7, r7, #1
   2a8fa:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2a8fe:	4663      	mov	r3, ip
   2a900:	2a00      	cmp	r2, #0
   2a902:	d1f1      	bne.n	2a8e8 <strstr+0x24>
   2a904:	f89c 3000 	ldrb.w	r3, [ip]
   2a908:	b9fb      	cbnz	r3, 2a94a <strstr+0x86>
   2a90a:	b117      	cbz	r7, 2a912 <strstr+0x4e>
   2a90c:	b005      	add	sp, #20
   2a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a912:	460e      	mov	r6, r1
   2a914:	4605      	mov	r5, r0
   2a916:	4641      	mov	r1, r8
   2a918:	3001      	adds	r0, #1
   2a91a:	ebac 0406 	sub.w	r4, ip, r6
   2a91e:	f7ff fd11 	bl	2a344 <strchr>
   2a922:	4607      	mov	r7, r0
   2a924:	b188      	cbz	r0, 2a94a <strstr+0x86>
   2a926:	2c01      	cmp	r4, #1
   2a928:	d0f0      	beq.n	2a90c <strstr+0x48>
   2a92a:	1928      	adds	r0, r5, r4
   2a92c:	4287      	cmp	r7, r0
   2a92e:	bf94      	ite	ls
   2a930:	1bc1      	subls	r1, r0, r7
   2a932:	2101      	movhi	r1, #1
   2a934:	2c1f      	cmp	r4, #31
   2a936:	468b      	mov	fp, r1
   2a938:	d90b      	bls.n	2a952 <strstr+0x8e>
   2a93a:	4623      	mov	r3, r4
   2a93c:	4632      	mov	r2, r6
   2a93e:	4638      	mov	r0, r7
   2a940:	f7ff fec2 	bl	2a6c8 <two_way_long_needle>
   2a944:	b005      	add	sp, #20
   2a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a94a:	2000      	movs	r0, #0
   2a94c:	b005      	add	sp, #20
   2a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a952:	aa03      	add	r2, sp, #12
   2a954:	4621      	mov	r1, r4
   2a956:	4630      	mov	r0, r6
   2a958:	f7ff fe5c 	bl	2a614 <critical_factorization>
   2a95c:	9903      	ldr	r1, [sp, #12]
   2a95e:	4680      	mov	r8, r0
   2a960:	4602      	mov	r2, r0
   2a962:	4431      	add	r1, r6
   2a964:	4630      	mov	r0, r6
   2a966:	f7ff fb9f 	bl	2a0a8 <memcmp>
   2a96a:	2800      	cmp	r0, #0
   2a96c:	d157      	bne.n	2aa1e <strstr+0x15a>
   2a96e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2a972:	9300      	str	r3, [sp, #0]
   2a974:	18f3      	adds	r3, r6, r3
   2a976:	4681      	mov	r9, r0
   2a978:	4605      	mov	r5, r0
   2a97a:	9301      	str	r3, [sp, #4]
   2a97c:	4658      	mov	r0, fp
   2a97e:	46b2      	mov	sl, r6
   2a980:	1966      	adds	r6, r4, r5
   2a982:	1a32      	subs	r2, r6, r0
   2a984:	2100      	movs	r1, #0
   2a986:	4438      	add	r0, r7
   2a988:	f7d5 fc4a 	bl	220 <memchr>
   2a98c:	2800      	cmp	r0, #0
   2a98e:	d1dc      	bne.n	2a94a <strstr+0x86>
   2a990:	2e00      	cmp	r6, #0
   2a992:	d0da      	beq.n	2a94a <strstr+0x86>
   2a994:	45c8      	cmp	r8, r9
   2a996:	4643      	mov	r3, r8
   2a998:	bf38      	it	cc
   2a99a:	464b      	movcc	r3, r9
   2a99c:	429c      	cmp	r4, r3
   2a99e:	d912      	bls.n	2a9c6 <strstr+0x102>
   2a9a0:	195a      	adds	r2, r3, r5
   2a9a2:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2a9a6:	5cb8      	ldrb	r0, [r7, r2]
   2a9a8:	4281      	cmp	r1, r0
   2a9aa:	443a      	add	r2, r7
   2a9ac:	eb0a 0e03 	add.w	lr, sl, r3
   2a9b0:	d006      	beq.n	2a9c0 <strstr+0xfc>
   2a9b2:	e02c      	b.n	2aa0e <strstr+0x14a>
   2a9b4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2a9b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2a9bc:	4288      	cmp	r0, r1
   2a9be:	d126      	bne.n	2aa0e <strstr+0x14a>
   2a9c0:	3301      	adds	r3, #1
   2a9c2:	429c      	cmp	r4, r3
   2a9c4:	d1f6      	bne.n	2a9b4 <strstr+0xf0>
   2a9c6:	45c8      	cmp	r8, r9
   2a9c8:	9900      	ldr	r1, [sp, #0]
   2a9ca:	f240 8083 	bls.w	2aad4 <strstr+0x210>
   2a9ce:	9b00      	ldr	r3, [sp, #0]
   2a9d0:	18ea      	adds	r2, r5, r3
   2a9d2:	9b01      	ldr	r3, [sp, #4]
   2a9d4:	5cb8      	ldrb	r0, [r7, r2]
   2a9d6:	781b      	ldrb	r3, [r3, #0]
   2a9d8:	4298      	cmp	r0, r3
   2a9da:	443a      	add	r2, r7
   2a9dc:	d17a      	bne.n	2aad4 <strstr+0x210>
   2a9de:	9801      	ldr	r0, [sp, #4]
   2a9e0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2a9e4:	e006      	b.n	2a9f4 <strstr+0x130>
   2a9e6:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2a9ea:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2a9ee:	45f4      	cmp	ip, lr
   2a9f0:	d103      	bne.n	2a9fa <strstr+0x136>
   2a9f2:	4619      	mov	r1, r3
   2a9f4:	1e4b      	subs	r3, r1, #1
   2a9f6:	455b      	cmp	r3, fp
   2a9f8:	d1f5      	bne.n	2a9e6 <strstr+0x122>
   2a9fa:	f109 0901 	add.w	r9, r9, #1
   2a9fe:	4589      	cmp	r9, r1
   2aa00:	d857      	bhi.n	2aab2 <strstr+0x1ee>
   2aa02:	9b03      	ldr	r3, [sp, #12]
   2aa04:	4630      	mov	r0, r6
   2aa06:	441d      	add	r5, r3
   2aa08:	eba4 0903 	sub.w	r9, r4, r3
   2aa0c:	e7b8      	b.n	2a980 <strstr+0xbc>
   2aa0e:	f1c8 0201 	rsb	r2, r8, #1
   2aa12:	4415      	add	r5, r2
   2aa14:	441d      	add	r5, r3
   2aa16:	f04f 0900 	mov.w	r9, #0
   2aa1a:	4630      	mov	r0, r6
   2aa1c:	e7b0      	b.n	2a980 <strstr+0xbc>
   2aa1e:	eba4 0308 	sub.w	r3, r4, r8
   2aa22:	4543      	cmp	r3, r8
   2aa24:	bf38      	it	cc
   2aa26:	4643      	movcc	r3, r8
   2aa28:	3301      	adds	r3, #1
   2aa2a:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2aa2e:	9303      	str	r3, [sp, #12]
   2aa30:	eb06 0309 	add.w	r3, r6, r9
   2aa34:	4658      	mov	r0, fp
   2aa36:	2500      	movs	r5, #0
   2aa38:	46bb      	mov	fp, r7
   2aa3a:	469a      	mov	sl, r3
   2aa3c:	1967      	adds	r7, r4, r5
   2aa3e:	1a3a      	subs	r2, r7, r0
   2aa40:	2100      	movs	r1, #0
   2aa42:	4458      	add	r0, fp
   2aa44:	f7d5 fbec 	bl	220 <memchr>
   2aa48:	2800      	cmp	r0, #0
   2aa4a:	f47f af7e 	bne.w	2a94a <strstr+0x86>
   2aa4e:	2f00      	cmp	r7, #0
   2aa50:	f43f af7b 	beq.w	2a94a <strstr+0x86>
   2aa54:	4544      	cmp	r4, r8
   2aa56:	d915      	bls.n	2aa84 <strstr+0x1c0>
   2aa58:	eb08 0205 	add.w	r2, r8, r5
   2aa5c:	f816 3008 	ldrb.w	r3, [r6, r8]
   2aa60:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2aa64:	4298      	cmp	r0, r3
   2aa66:	445a      	add	r2, fp
   2aa68:	eb06 0108 	add.w	r1, r6, r8
   2aa6c:	4643      	mov	r3, r8
   2aa6e:	d006      	beq.n	2aa7e <strstr+0x1ba>
   2aa70:	e023      	b.n	2aaba <strstr+0x1f6>
   2aa72:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2aa76:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2aa7a:	4586      	cmp	lr, r0
   2aa7c:	d11d      	bne.n	2aaba <strstr+0x1f6>
   2aa7e:	3301      	adds	r3, #1
   2aa80:	429c      	cmp	r4, r3
   2aa82:	d1f6      	bne.n	2aa72 <strstr+0x1ae>
   2aa84:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2aa88:	d012      	beq.n	2aab0 <strstr+0x1ec>
   2aa8a:	eb05 0209 	add.w	r2, r5, r9
   2aa8e:	f89a 3000 	ldrb.w	r3, [sl]
   2aa92:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2aa96:	4299      	cmp	r1, r3
   2aa98:	445a      	add	r2, fp
   2aa9a:	d114      	bne.n	2aac6 <strstr+0x202>
   2aa9c:	4653      	mov	r3, sl
   2aa9e:	e005      	b.n	2aaac <strstr+0x1e8>
   2aaa0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2aaa4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2aaa8:	4288      	cmp	r0, r1
   2aaaa:	d10c      	bne.n	2aac6 <strstr+0x202>
   2aaac:	42b3      	cmp	r3, r6
   2aaae:	d1f7      	bne.n	2aaa0 <strstr+0x1dc>
   2aab0:	465f      	mov	r7, fp
   2aab2:	1978      	adds	r0, r7, r5
   2aab4:	b005      	add	sp, #20
   2aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aaba:	f1c8 0201 	rsb	r2, r8, #1
   2aabe:	4415      	add	r5, r2
   2aac0:	441d      	add	r5, r3
   2aac2:	4638      	mov	r0, r7
   2aac4:	e7ba      	b.n	2aa3c <strstr+0x178>
   2aac6:	9b03      	ldr	r3, [sp, #12]
   2aac8:	4638      	mov	r0, r7
   2aaca:	441d      	add	r5, r3
   2aacc:	e7b6      	b.n	2aa3c <strstr+0x178>
   2aace:	780b      	ldrb	r3, [r1, #0]
   2aad0:	b913      	cbnz	r3, 2aad8 <strstr+0x214>
   2aad2:	4770      	bx	lr
   2aad4:	4641      	mov	r1, r8
   2aad6:	e790      	b.n	2a9fa <strstr+0x136>
   2aad8:	2000      	movs	r0, #0
   2aada:	4770      	bx	lr

0002aadc <_strtol_l.isra.0>:
   2aadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aae0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2aae4:	460f      	mov	r7, r1
   2aae6:	4680      	mov	r8, r0
   2aae8:	4616      	mov	r6, r2
   2aaea:	461d      	mov	r5, r3
   2aaec:	468a      	mov	sl, r1
   2aaee:	e000      	b.n	2aaf2 <_strtol_l.isra.0+0x16>
   2aaf0:	46a2      	mov	sl, r4
   2aaf2:	4654      	mov	r4, sl
   2aaf4:	4648      	mov	r0, r9
   2aaf6:	f814 bb01 	ldrb.w	fp, [r4], #1
   2aafa:	f7ff faad 	bl	2a058 <__locale_ctype_ptr_l>
   2aafe:	4458      	add	r0, fp
   2ab00:	7842      	ldrb	r2, [r0, #1]
   2ab02:	f012 0208 	ands.w	r2, r2, #8
   2ab06:	d1f3      	bne.n	2aaf0 <_strtol_l.isra.0+0x14>
   2ab08:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2ab0c:	d04f      	beq.n	2abae <_strtol_l.isra.0+0xd2>
   2ab0e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2ab12:	bf04      	itt	eq
   2ab14:	f894 b000 	ldrbeq.w	fp, [r4]
   2ab18:	f10a 0402 	addeq.w	r4, sl, #2
   2ab1c:	b11d      	cbz	r5, 2ab26 <_strtol_l.isra.0+0x4a>
   2ab1e:	2d10      	cmp	r5, #16
   2ab20:	d056      	beq.n	2abd0 <_strtol_l.isra.0+0xf4>
   2ab22:	46ac      	mov	ip, r5
   2ab24:	e004      	b.n	2ab30 <_strtol_l.isra.0+0x54>
   2ab26:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2ab2a:	d060      	beq.n	2abee <_strtol_l.isra.0+0x112>
   2ab2c:	250a      	movs	r5, #10
   2ab2e:	46ac      	mov	ip, r5
   2ab30:	2a00      	cmp	r2, #0
   2ab32:	bf0c      	ite	eq
   2ab34:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2ab38:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2ab3c:	2100      	movs	r1, #0
   2ab3e:	fbb9 fefc 	udiv	lr, r9, ip
   2ab42:	4608      	mov	r0, r1
   2ab44:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2ab48:	e005      	b.n	2ab56 <_strtol_l.isra.0+0x7a>
   2ab4a:	d029      	beq.n	2aba0 <_strtol_l.isra.0+0xc4>
   2ab4c:	fb0c 3000 	mla	r0, ip, r0, r3
   2ab50:	2101      	movs	r1, #1
   2ab52:	f814 bb01 	ldrb.w	fp, [r4], #1
   2ab56:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2ab5a:	2b09      	cmp	r3, #9
   2ab5c:	d905      	bls.n	2ab6a <_strtol_l.isra.0+0x8e>
   2ab5e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2ab62:	2b19      	cmp	r3, #25
   2ab64:	d80b      	bhi.n	2ab7e <_strtol_l.isra.0+0xa2>
   2ab66:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2ab6a:	429d      	cmp	r5, r3
   2ab6c:	dd0f      	ble.n	2ab8e <_strtol_l.isra.0+0xb2>
   2ab6e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2ab72:	d0ee      	beq.n	2ab52 <_strtol_l.isra.0+0x76>
   2ab74:	4586      	cmp	lr, r0
   2ab76:	d2e8      	bcs.n	2ab4a <_strtol_l.isra.0+0x6e>
   2ab78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ab7c:	e7e9      	b.n	2ab52 <_strtol_l.isra.0+0x76>
   2ab7e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2ab82:	2b19      	cmp	r3, #25
   2ab84:	d803      	bhi.n	2ab8e <_strtol_l.isra.0+0xb2>
   2ab86:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2ab8a:	429d      	cmp	r5, r3
   2ab8c:	dcef      	bgt.n	2ab6e <_strtol_l.isra.0+0x92>
   2ab8e:	1c4b      	adds	r3, r1, #1
   2ab90:	d013      	beq.n	2abba <_strtol_l.isra.0+0xde>
   2ab92:	b102      	cbz	r2, 2ab96 <_strtol_l.isra.0+0xba>
   2ab94:	4240      	negs	r0, r0
   2ab96:	b146      	cbz	r6, 2abaa <_strtol_l.isra.0+0xce>
   2ab98:	b9c1      	cbnz	r1, 2abcc <_strtol_l.isra.0+0xf0>
   2ab9a:	6037      	str	r7, [r6, #0]
   2ab9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aba0:	459a      	cmp	sl, r3
   2aba2:	dad3      	bge.n	2ab4c <_strtol_l.isra.0+0x70>
   2aba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2aba8:	e7d3      	b.n	2ab52 <_strtol_l.isra.0+0x76>
   2abaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abae:	f894 b000 	ldrb.w	fp, [r4]
   2abb2:	2201      	movs	r2, #1
   2abb4:	f10a 0402 	add.w	r4, sl, #2
   2abb8:	e7b0      	b.n	2ab1c <_strtol_l.isra.0+0x40>
   2abba:	2322      	movs	r3, #34	; 0x22
   2abbc:	f8c8 3000 	str.w	r3, [r8]
   2abc0:	b1ee      	cbz	r6, 2abfe <_strtol_l.isra.0+0x122>
   2abc2:	1e67      	subs	r7, r4, #1
   2abc4:	4648      	mov	r0, r9
   2abc6:	6037      	str	r7, [r6, #0]
   2abc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abcc:	4681      	mov	r9, r0
   2abce:	e7f8      	b.n	2abc2 <_strtol_l.isra.0+0xe6>
   2abd0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2abd4:	d1a5      	bne.n	2ab22 <_strtol_l.isra.0+0x46>
   2abd6:	7823      	ldrb	r3, [r4, #0]
   2abd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2abdc:	2b58      	cmp	r3, #88	; 0x58
   2abde:	d1a0      	bne.n	2ab22 <_strtol_l.isra.0+0x46>
   2abe0:	f04f 0c10 	mov.w	ip, #16
   2abe4:	f894 b001 	ldrb.w	fp, [r4, #1]
   2abe8:	4665      	mov	r5, ip
   2abea:	3402      	adds	r4, #2
   2abec:	e7a0      	b.n	2ab30 <_strtol_l.isra.0+0x54>
   2abee:	7823      	ldrb	r3, [r4, #0]
   2abf0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2abf4:	2b58      	cmp	r3, #88	; 0x58
   2abf6:	d0f3      	beq.n	2abe0 <_strtol_l.isra.0+0x104>
   2abf8:	2508      	movs	r5, #8
   2abfa:	46ac      	mov	ip, r5
   2abfc:	e798      	b.n	2ab30 <_strtol_l.isra.0+0x54>
   2abfe:	4648      	mov	r0, r9
   2ac00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ac04 <strtol>:
   2ac04:	b530      	push	{r4, r5, lr}
   2ac06:	4c08      	ldr	r4, [pc, #32]	; (2ac28 <strtol+0x24>)
   2ac08:	4b08      	ldr	r3, [pc, #32]	; (2ac2c <strtol+0x28>)
   2ac0a:	6825      	ldr	r5, [r4, #0]
   2ac0c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2ac0e:	b083      	sub	sp, #12
   2ac10:	2c00      	cmp	r4, #0
   2ac12:	bf08      	it	eq
   2ac14:	461c      	moveq	r4, r3
   2ac16:	9400      	str	r4, [sp, #0]
   2ac18:	4613      	mov	r3, r2
   2ac1a:	460a      	mov	r2, r1
   2ac1c:	4601      	mov	r1, r0
   2ac1e:	4628      	mov	r0, r5
   2ac20:	f7ff ff5c 	bl	2aadc <_strtol_l.isra.0>
   2ac24:	b003      	add	sp, #12
   2ac26:	bd30      	pop	{r4, r5, pc}
   2ac28:	2000c6f0 	.word	0x2000c6f0
   2ac2c:	2000c584 	.word	0x2000c584

0002ac30 <_strtoul_l.isra.0>:
   2ac30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2ac38:	460e      	mov	r6, r1
   2ac3a:	4607      	mov	r7, r0
   2ac3c:	4615      	mov	r5, r2
   2ac3e:	4698      	mov	r8, r3
   2ac40:	468a      	mov	sl, r1
   2ac42:	e000      	b.n	2ac46 <_strtoul_l.isra.0+0x16>
   2ac44:	46a2      	mov	sl, r4
   2ac46:	4654      	mov	r4, sl
   2ac48:	4648      	mov	r0, r9
   2ac4a:	f814 bb01 	ldrb.w	fp, [r4], #1
   2ac4e:	f7ff fa03 	bl	2a058 <__locale_ctype_ptr_l>
   2ac52:	4458      	add	r0, fp
   2ac54:	7840      	ldrb	r0, [r0, #1]
   2ac56:	f010 0008 	ands.w	r0, r0, #8
   2ac5a:	d1f3      	bne.n	2ac44 <_strtoul_l.isra.0+0x14>
   2ac5c:	4659      	mov	r1, fp
   2ac5e:	292d      	cmp	r1, #45	; 0x2d
   2ac60:	d059      	beq.n	2ad16 <_strtoul_l.isra.0+0xe6>
   2ac62:	292b      	cmp	r1, #43	; 0x2b
   2ac64:	bf04      	itt	eq
   2ac66:	7821      	ldrbeq	r1, [r4, #0]
   2ac68:	f10a 0402 	addeq.w	r4, sl, #2
   2ac6c:	f1b8 0f00 	cmp.w	r8, #0
   2ac70:	d00c      	beq.n	2ac8c <_strtoul_l.isra.0+0x5c>
   2ac72:	f1b8 0f10 	cmp.w	r8, #16
   2ac76:	d053      	beq.n	2ad20 <_strtoul_l.isra.0+0xf0>
   2ac78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2ac7c:	fbbc fcf8 	udiv	ip, ip, r8
   2ac80:	fb08 fa0c 	mul.w	sl, r8, ip
   2ac84:	ea6f 0a0a 	mvn.w	sl, sl
   2ac88:	46c1      	mov	r9, r8
   2ac8a:	e008      	b.n	2ac9e <_strtoul_l.isra.0+0x6e>
   2ac8c:	2930      	cmp	r1, #48	; 0x30
   2ac8e:	d058      	beq.n	2ad42 <_strtoul_l.isra.0+0x112>
   2ac90:	f04f 080a 	mov.w	r8, #10
   2ac94:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2ad74 <_strtoul_l.isra.0+0x144>
   2ac98:	46c1      	mov	r9, r8
   2ac9a:	f04f 0a05 	mov.w	sl, #5
   2ac9e:	2300      	movs	r3, #0
   2aca0:	469e      	mov	lr, r3
   2aca2:	e005      	b.n	2acb0 <_strtoul_l.isra.0+0x80>
   2aca4:	d02a      	beq.n	2acfc <_strtoul_l.isra.0+0xcc>
   2aca6:	fb09 2e0e 	mla	lr, r9, lr, r2
   2acaa:	2301      	movs	r3, #1
   2acac:	f814 1b01 	ldrb.w	r1, [r4], #1
   2acb0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2acb4:	2a09      	cmp	r2, #9
   2acb6:	d905      	bls.n	2acc4 <_strtoul_l.isra.0+0x94>
   2acb8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2acbc:	2a19      	cmp	r2, #25
   2acbe:	d80a      	bhi.n	2acd6 <_strtoul_l.isra.0+0xa6>
   2acc0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2acc4:	4590      	cmp	r8, r2
   2acc6:	dd0e      	ble.n	2ace6 <_strtoul_l.isra.0+0xb6>
   2acc8:	2b00      	cmp	r3, #0
   2acca:	db01      	blt.n	2acd0 <_strtoul_l.isra.0+0xa0>
   2accc:	45e6      	cmp	lr, ip
   2acce:	d9e9      	bls.n	2aca4 <_strtoul_l.isra.0+0x74>
   2acd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2acd4:	e7ea      	b.n	2acac <_strtoul_l.isra.0+0x7c>
   2acd6:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2acda:	2a19      	cmp	r2, #25
   2acdc:	d803      	bhi.n	2ace6 <_strtoul_l.isra.0+0xb6>
   2acde:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2ace2:	4590      	cmp	r8, r2
   2ace4:	dcf0      	bgt.n	2acc8 <_strtoul_l.isra.0+0x98>
   2ace6:	2b00      	cmp	r3, #0
   2ace8:	db0d      	blt.n	2ad06 <_strtoul_l.isra.0+0xd6>
   2acea:	b108      	cbz	r0, 2acf0 <_strtoul_l.isra.0+0xc0>
   2acec:	f1ce 0e00 	rsb	lr, lr, #0
   2acf0:	b10d      	cbz	r5, 2acf6 <_strtoul_l.isra.0+0xc6>
   2acf2:	b973      	cbnz	r3, 2ad12 <_strtoul_l.isra.0+0xe2>
   2acf4:	602e      	str	r6, [r5, #0]
   2acf6:	4670      	mov	r0, lr
   2acf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acfc:	4552      	cmp	r2, sl
   2acfe:	ddd2      	ble.n	2aca6 <_strtoul_l.isra.0+0x76>
   2ad00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ad04:	e7d2      	b.n	2acac <_strtoul_l.isra.0+0x7c>
   2ad06:	2322      	movs	r3, #34	; 0x22
   2ad08:	603b      	str	r3, [r7, #0]
   2ad0a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2ad0e:	2d00      	cmp	r5, #0
   2ad10:	d0f1      	beq.n	2acf6 <_strtoul_l.isra.0+0xc6>
   2ad12:	1e66      	subs	r6, r4, #1
   2ad14:	e7ee      	b.n	2acf4 <_strtoul_l.isra.0+0xc4>
   2ad16:	7821      	ldrb	r1, [r4, #0]
   2ad18:	2001      	movs	r0, #1
   2ad1a:	f10a 0402 	add.w	r4, sl, #2
   2ad1e:	e7a5      	b.n	2ac6c <_strtoul_l.isra.0+0x3c>
   2ad20:	2930      	cmp	r1, #48	; 0x30
   2ad22:	d11b      	bne.n	2ad5c <_strtoul_l.isra.0+0x12c>
   2ad24:	7823      	ldrb	r3, [r4, #0]
   2ad26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2ad2a:	2b58      	cmp	r3, #88	; 0x58
   2ad2c:	d11c      	bne.n	2ad68 <_strtoul_l.isra.0+0x138>
   2ad2e:	f04f 0910 	mov.w	r9, #16
   2ad32:	7861      	ldrb	r1, [r4, #1]
   2ad34:	46c8      	mov	r8, r9
   2ad36:	f04f 0a0f 	mov.w	sl, #15
   2ad3a:	3402      	adds	r4, #2
   2ad3c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2ad40:	e7ad      	b.n	2ac9e <_strtoul_l.isra.0+0x6e>
   2ad42:	7823      	ldrb	r3, [r4, #0]
   2ad44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2ad48:	2b58      	cmp	r3, #88	; 0x58
   2ad4a:	d0f0      	beq.n	2ad2e <_strtoul_l.isra.0+0xfe>
   2ad4c:	f04f 0808 	mov.w	r8, #8
   2ad50:	46c1      	mov	r9, r8
   2ad52:	f04f 0a07 	mov.w	sl, #7
   2ad56:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2ad5a:	e7a0      	b.n	2ac9e <_strtoul_l.isra.0+0x6e>
   2ad5c:	f04f 0a0f 	mov.w	sl, #15
   2ad60:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2ad64:	46c1      	mov	r9, r8
   2ad66:	e79a      	b.n	2ac9e <_strtoul_l.isra.0+0x6e>
   2ad68:	46c1      	mov	r9, r8
   2ad6a:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2ad6e:	f04f 0a0f 	mov.w	sl, #15
   2ad72:	e794      	b.n	2ac9e <_strtoul_l.isra.0+0x6e>
   2ad74:	19999999 	.word	0x19999999

0002ad78 <strtoul>:
   2ad78:	b530      	push	{r4, r5, lr}
   2ad7a:	4c08      	ldr	r4, [pc, #32]	; (2ad9c <strtoul+0x24>)
   2ad7c:	4b08      	ldr	r3, [pc, #32]	; (2ada0 <strtoul+0x28>)
   2ad7e:	6825      	ldr	r5, [r4, #0]
   2ad80:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2ad82:	b083      	sub	sp, #12
   2ad84:	2c00      	cmp	r4, #0
   2ad86:	bf08      	it	eq
   2ad88:	461c      	moveq	r4, r3
   2ad8a:	9400      	str	r4, [sp, #0]
   2ad8c:	4613      	mov	r3, r2
   2ad8e:	460a      	mov	r2, r1
   2ad90:	4601      	mov	r1, r0
   2ad92:	4628      	mov	r0, r5
   2ad94:	f7ff ff4c 	bl	2ac30 <_strtoul_l.isra.0>
   2ad98:	b003      	add	sp, #12
   2ad9a:	bd30      	pop	{r4, r5, pc}
   2ad9c:	2000c6f0 	.word	0x2000c6f0
   2ada0:	2000c584 	.word	0x2000c584

0002ada4 <_svfprintf_r>:
   2ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ada8:	b0c3      	sub	sp, #268	; 0x10c
   2adaa:	460c      	mov	r4, r1
   2adac:	910b      	str	r1, [sp, #44]	; 0x2c
   2adae:	4692      	mov	sl, r2
   2adb0:	930f      	str	r3, [sp, #60]	; 0x3c
   2adb2:	900c      	str	r0, [sp, #48]	; 0x30
   2adb4:	f002 f9f2 	bl	2d19c <_localeconv_r>
   2adb8:	6803      	ldr	r3, [r0, #0]
   2adba:	931a      	str	r3, [sp, #104]	; 0x68
   2adbc:	4618      	mov	r0, r3
   2adbe:	f7d5 fc9f 	bl	700 <strlen>
   2adc2:	89a3      	ldrh	r3, [r4, #12]
   2adc4:	9019      	str	r0, [sp, #100]	; 0x64
   2adc6:	0619      	lsls	r1, r3, #24
   2adc8:	d503      	bpl.n	2add2 <_svfprintf_r+0x2e>
   2adca:	6923      	ldr	r3, [r4, #16]
   2adcc:	2b00      	cmp	r3, #0
   2adce:	f001 8003 	beq.w	2bdd8 <_svfprintf_r+0x1034>
   2add2:	2300      	movs	r3, #0
   2add4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2add8:	9313      	str	r3, [sp, #76]	; 0x4c
   2adda:	9315      	str	r3, [sp, #84]	; 0x54
   2addc:	9314      	str	r3, [sp, #80]	; 0x50
   2adde:	9327      	str	r3, [sp, #156]	; 0x9c
   2ade0:	9326      	str	r3, [sp, #152]	; 0x98
   2ade2:	9318      	str	r3, [sp, #96]	; 0x60
   2ade4:	931b      	str	r3, [sp, #108]	; 0x6c
   2ade6:	9309      	str	r3, [sp, #36]	; 0x24
   2ade8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2adec:	46c8      	mov	r8, r9
   2adee:	9316      	str	r3, [sp, #88]	; 0x58
   2adf0:	9317      	str	r3, [sp, #92]	; 0x5c
   2adf2:	f89a 3000 	ldrb.w	r3, [sl]
   2adf6:	4654      	mov	r4, sl
   2adf8:	b1e3      	cbz	r3, 2ae34 <_svfprintf_r+0x90>
   2adfa:	2b25      	cmp	r3, #37	; 0x25
   2adfc:	d102      	bne.n	2ae04 <_svfprintf_r+0x60>
   2adfe:	e019      	b.n	2ae34 <_svfprintf_r+0x90>
   2ae00:	2b25      	cmp	r3, #37	; 0x25
   2ae02:	d003      	beq.n	2ae0c <_svfprintf_r+0x68>
   2ae04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2ae08:	2b00      	cmp	r3, #0
   2ae0a:	d1f9      	bne.n	2ae00 <_svfprintf_r+0x5c>
   2ae0c:	eba4 050a 	sub.w	r5, r4, sl
   2ae10:	b185      	cbz	r5, 2ae34 <_svfprintf_r+0x90>
   2ae12:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ae14:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2ae16:	f8c8 a000 	str.w	sl, [r8]
   2ae1a:	3301      	adds	r3, #1
   2ae1c:	442a      	add	r2, r5
   2ae1e:	2b07      	cmp	r3, #7
   2ae20:	f8c8 5004 	str.w	r5, [r8, #4]
   2ae24:	9227      	str	r2, [sp, #156]	; 0x9c
   2ae26:	9326      	str	r3, [sp, #152]	; 0x98
   2ae28:	dc7f      	bgt.n	2af2a <_svfprintf_r+0x186>
   2ae2a:	f108 0808 	add.w	r8, r8, #8
   2ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ae30:	442b      	add	r3, r5
   2ae32:	9309      	str	r3, [sp, #36]	; 0x24
   2ae34:	7823      	ldrb	r3, [r4, #0]
   2ae36:	2b00      	cmp	r3, #0
   2ae38:	d07f      	beq.n	2af3a <_svfprintf_r+0x196>
   2ae3a:	2300      	movs	r3, #0
   2ae3c:	461a      	mov	r2, r3
   2ae3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2ae42:	4619      	mov	r1, r3
   2ae44:	930d      	str	r3, [sp, #52]	; 0x34
   2ae46:	469b      	mov	fp, r3
   2ae48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ae4c:	7863      	ldrb	r3, [r4, #1]
   2ae4e:	900a      	str	r0, [sp, #40]	; 0x28
   2ae50:	f104 0a01 	add.w	sl, r4, #1
   2ae54:	f10a 0a01 	add.w	sl, sl, #1
   2ae58:	f1a3 0020 	sub.w	r0, r3, #32
   2ae5c:	2858      	cmp	r0, #88	; 0x58
   2ae5e:	f200 83c1 	bhi.w	2b5e4 <_svfprintf_r+0x840>
   2ae62:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ae66:	0238      	.short	0x0238
   2ae68:	03bf03bf 	.word	0x03bf03bf
   2ae6c:	03bf0240 	.word	0x03bf0240
   2ae70:	03bf03bf 	.word	0x03bf03bf
   2ae74:	03bf03bf 	.word	0x03bf03bf
   2ae78:	024503bf 	.word	0x024503bf
   2ae7c:	03bf0203 	.word	0x03bf0203
   2ae80:	026b005d 	.word	0x026b005d
   2ae84:	028603bf 	.word	0x028603bf
   2ae88:	039d039d 	.word	0x039d039d
   2ae8c:	039d039d 	.word	0x039d039d
   2ae90:	039d039d 	.word	0x039d039d
   2ae94:	039d039d 	.word	0x039d039d
   2ae98:	03bf039d 	.word	0x03bf039d
   2ae9c:	03bf03bf 	.word	0x03bf03bf
   2aea0:	03bf03bf 	.word	0x03bf03bf
   2aea4:	03bf03bf 	.word	0x03bf03bf
   2aea8:	03bf03bf 	.word	0x03bf03bf
   2aeac:	033703bf 	.word	0x033703bf
   2aeb0:	03bf0357 	.word	0x03bf0357
   2aeb4:	03bf0357 	.word	0x03bf0357
   2aeb8:	03bf03bf 	.word	0x03bf03bf
   2aebc:	039803bf 	.word	0x039803bf
   2aec0:	03bf03bf 	.word	0x03bf03bf
   2aec4:	03bf03ad 	.word	0x03bf03ad
   2aec8:	03bf03bf 	.word	0x03bf03bf
   2aecc:	03bf03bf 	.word	0x03bf03bf
   2aed0:	03bf0259 	.word	0x03bf0259
   2aed4:	031e03bf 	.word	0x031e03bf
   2aed8:	03bf03bf 	.word	0x03bf03bf
   2aedc:	03bf03bf 	.word	0x03bf03bf
   2aee0:	03bf03bf 	.word	0x03bf03bf
   2aee4:	03bf03bf 	.word	0x03bf03bf
   2aee8:	03bf03bf 	.word	0x03bf03bf
   2aeec:	02db02c6 	.word	0x02db02c6
   2aef0:	03570357 	.word	0x03570357
   2aef4:	028b0357 	.word	0x028b0357
   2aef8:	03bf02db 	.word	0x03bf02db
   2aefc:	029003bf 	.word	0x029003bf
   2af00:	029d03bf 	.word	0x029d03bf
   2af04:	02b401cc 	.word	0x02b401cc
   2af08:	03bf0208 	.word	0x03bf0208
   2af0c:	03bf01e1 	.word	0x03bf01e1
   2af10:	03bf007e 	.word	0x03bf007e
   2af14:	020d03bf 	.word	0x020d03bf
   2af18:	980d      	ldr	r0, [sp, #52]	; 0x34
   2af1a:	930f      	str	r3, [sp, #60]	; 0x3c
   2af1c:	4240      	negs	r0, r0
   2af1e:	900d      	str	r0, [sp, #52]	; 0x34
   2af20:	f04b 0b04 	orr.w	fp, fp, #4
   2af24:	f89a 3000 	ldrb.w	r3, [sl]
   2af28:	e794      	b.n	2ae54 <_svfprintf_r+0xb0>
   2af2a:	aa25      	add	r2, sp, #148	; 0x94
   2af2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2af2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2af30:	f002 ff0a 	bl	2dd48 <__ssprint_r>
   2af34:	b940      	cbnz	r0, 2af48 <_svfprintf_r+0x1a4>
   2af36:	46c8      	mov	r8, r9
   2af38:	e779      	b.n	2ae2e <_svfprintf_r+0x8a>
   2af3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2af3c:	b123      	cbz	r3, 2af48 <_svfprintf_r+0x1a4>
   2af3e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2af40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2af42:	aa25      	add	r2, sp, #148	; 0x94
   2af44:	f002 ff00 	bl	2dd48 <__ssprint_r>
   2af48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2af4a:	899b      	ldrh	r3, [r3, #12]
   2af4c:	f013 0f40 	tst.w	r3, #64	; 0x40
   2af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2af52:	bf18      	it	ne
   2af54:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2af58:	9309      	str	r3, [sp, #36]	; 0x24
   2af5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2af5c:	b043      	add	sp, #268	; 0x10c
   2af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af62:	f01b 0f20 	tst.w	fp, #32
   2af66:	9311      	str	r3, [sp, #68]	; 0x44
   2af68:	f040 81dd 	bne.w	2b326 <_svfprintf_r+0x582>
   2af6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2af6e:	f01b 0f10 	tst.w	fp, #16
   2af72:	4613      	mov	r3, r2
   2af74:	f040 856e 	bne.w	2ba54 <_svfprintf_r+0xcb0>
   2af78:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2af7c:	f000 856a 	beq.w	2ba54 <_svfprintf_r+0xcb0>
   2af80:	8814      	ldrh	r4, [r2, #0]
   2af82:	3204      	adds	r2, #4
   2af84:	2500      	movs	r5, #0
   2af86:	2301      	movs	r3, #1
   2af88:	920f      	str	r2, [sp, #60]	; 0x3c
   2af8a:	2700      	movs	r7, #0
   2af8c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2af90:	990a      	ldr	r1, [sp, #40]	; 0x28
   2af92:	1c4a      	adds	r2, r1, #1
   2af94:	f000 8265 	beq.w	2b462 <_svfprintf_r+0x6be>
   2af98:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2af9c:	9207      	str	r2, [sp, #28]
   2af9e:	ea54 0205 	orrs.w	r2, r4, r5
   2afa2:	f040 8264 	bne.w	2b46e <_svfprintf_r+0x6ca>
   2afa6:	2900      	cmp	r1, #0
   2afa8:	f040 843c 	bne.w	2b824 <_svfprintf_r+0xa80>
   2afac:	2b00      	cmp	r3, #0
   2afae:	f040 84d7 	bne.w	2b960 <_svfprintf_r+0xbbc>
   2afb2:	f01b 0301 	ands.w	r3, fp, #1
   2afb6:	930e      	str	r3, [sp, #56]	; 0x38
   2afb8:	f000 8604 	beq.w	2bbc4 <_svfprintf_r+0xe20>
   2afbc:	ae42      	add	r6, sp, #264	; 0x108
   2afbe:	2330      	movs	r3, #48	; 0x30
   2afc0:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2afc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2afc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2afc8:	4293      	cmp	r3, r2
   2afca:	bfb8      	it	lt
   2afcc:	4613      	movlt	r3, r2
   2afce:	9308      	str	r3, [sp, #32]
   2afd0:	2300      	movs	r3, #0
   2afd2:	9312      	str	r3, [sp, #72]	; 0x48
   2afd4:	b117      	cbz	r7, 2afdc <_svfprintf_r+0x238>
   2afd6:	9b08      	ldr	r3, [sp, #32]
   2afd8:	3301      	adds	r3, #1
   2afda:	9308      	str	r3, [sp, #32]
   2afdc:	9b07      	ldr	r3, [sp, #28]
   2afde:	f013 0302 	ands.w	r3, r3, #2
   2afe2:	9310      	str	r3, [sp, #64]	; 0x40
   2afe4:	d002      	beq.n	2afec <_svfprintf_r+0x248>
   2afe6:	9b08      	ldr	r3, [sp, #32]
   2afe8:	3302      	adds	r3, #2
   2afea:	9308      	str	r3, [sp, #32]
   2afec:	9b07      	ldr	r3, [sp, #28]
   2afee:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2aff2:	f040 830e 	bne.w	2b612 <_svfprintf_r+0x86e>
   2aff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2aff8:	9a08      	ldr	r2, [sp, #32]
   2affa:	eba3 0b02 	sub.w	fp, r3, r2
   2affe:	f1bb 0f00 	cmp.w	fp, #0
   2b002:	f340 8306 	ble.w	2b612 <_svfprintf_r+0x86e>
   2b006:	f1bb 0f10 	cmp.w	fp, #16
   2b00a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b00c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b00e:	dd29      	ble.n	2b064 <_svfprintf_r+0x2c0>
   2b010:	4643      	mov	r3, r8
   2b012:	4621      	mov	r1, r4
   2b014:	46a8      	mov	r8, r5
   2b016:	2710      	movs	r7, #16
   2b018:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b01a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b01c:	e006      	b.n	2b02c <_svfprintf_r+0x288>
   2b01e:	f1ab 0b10 	sub.w	fp, fp, #16
   2b022:	f1bb 0f10 	cmp.w	fp, #16
   2b026:	f103 0308 	add.w	r3, r3, #8
   2b02a:	dd18      	ble.n	2b05e <_svfprintf_r+0x2ba>
   2b02c:	3201      	adds	r2, #1
   2b02e:	48b7      	ldr	r0, [pc, #732]	; (2b30c <_svfprintf_r+0x568>)
   2b030:	9226      	str	r2, [sp, #152]	; 0x98
   2b032:	3110      	adds	r1, #16
   2b034:	2a07      	cmp	r2, #7
   2b036:	9127      	str	r1, [sp, #156]	; 0x9c
   2b038:	e883 0081 	stmia.w	r3, {r0, r7}
   2b03c:	ddef      	ble.n	2b01e <_svfprintf_r+0x27a>
   2b03e:	aa25      	add	r2, sp, #148	; 0x94
   2b040:	4629      	mov	r1, r5
   2b042:	4620      	mov	r0, r4
   2b044:	f002 fe80 	bl	2dd48 <__ssprint_r>
   2b048:	2800      	cmp	r0, #0
   2b04a:	f47f af7d 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b04e:	f1ab 0b10 	sub.w	fp, fp, #16
   2b052:	f1bb 0f10 	cmp.w	fp, #16
   2b056:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b058:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b05a:	464b      	mov	r3, r9
   2b05c:	dce6      	bgt.n	2b02c <_svfprintf_r+0x288>
   2b05e:	4645      	mov	r5, r8
   2b060:	460c      	mov	r4, r1
   2b062:	4698      	mov	r8, r3
   2b064:	3201      	adds	r2, #1
   2b066:	4ba9      	ldr	r3, [pc, #676]	; (2b30c <_svfprintf_r+0x568>)
   2b068:	9226      	str	r2, [sp, #152]	; 0x98
   2b06a:	445c      	add	r4, fp
   2b06c:	2a07      	cmp	r2, #7
   2b06e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b070:	e888 0808 	stmia.w	r8, {r3, fp}
   2b074:	f300 8498 	bgt.w	2b9a8 <_svfprintf_r+0xc04>
   2b078:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b07c:	f108 0808 	add.w	r8, r8, #8
   2b080:	b177      	cbz	r7, 2b0a0 <_svfprintf_r+0x2fc>
   2b082:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b084:	3301      	adds	r3, #1
   2b086:	3401      	adds	r4, #1
   2b088:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b08c:	2201      	movs	r2, #1
   2b08e:	2b07      	cmp	r3, #7
   2b090:	9427      	str	r4, [sp, #156]	; 0x9c
   2b092:	9326      	str	r3, [sp, #152]	; 0x98
   2b094:	e888 0006 	stmia.w	r8, {r1, r2}
   2b098:	f300 83db 	bgt.w	2b852 <_svfprintf_r+0xaae>
   2b09c:	f108 0808 	add.w	r8, r8, #8
   2b0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b0a2:	b16b      	cbz	r3, 2b0c0 <_svfprintf_r+0x31c>
   2b0a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b0a6:	3301      	adds	r3, #1
   2b0a8:	3402      	adds	r4, #2
   2b0aa:	a91e      	add	r1, sp, #120	; 0x78
   2b0ac:	2202      	movs	r2, #2
   2b0ae:	2b07      	cmp	r3, #7
   2b0b0:	9427      	str	r4, [sp, #156]	; 0x9c
   2b0b2:	9326      	str	r3, [sp, #152]	; 0x98
   2b0b4:	e888 0006 	stmia.w	r8, {r1, r2}
   2b0b8:	f300 83d6 	bgt.w	2b868 <_svfprintf_r+0xac4>
   2b0bc:	f108 0808 	add.w	r8, r8, #8
   2b0c0:	2d80      	cmp	r5, #128	; 0x80
   2b0c2:	f000 8315 	beq.w	2b6f0 <_svfprintf_r+0x94c>
   2b0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b0ca:	1a9f      	subs	r7, r3, r2
   2b0cc:	2f00      	cmp	r7, #0
   2b0ce:	dd36      	ble.n	2b13e <_svfprintf_r+0x39a>
   2b0d0:	2f10      	cmp	r7, #16
   2b0d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b0d4:	4d8e      	ldr	r5, [pc, #568]	; (2b310 <_svfprintf_r+0x56c>)
   2b0d6:	dd27      	ble.n	2b128 <_svfprintf_r+0x384>
   2b0d8:	4642      	mov	r2, r8
   2b0da:	4621      	mov	r1, r4
   2b0dc:	46b0      	mov	r8, r6
   2b0de:	f04f 0b10 	mov.w	fp, #16
   2b0e2:	462e      	mov	r6, r5
   2b0e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b0e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b0e8:	e004      	b.n	2b0f4 <_svfprintf_r+0x350>
   2b0ea:	3f10      	subs	r7, #16
   2b0ec:	2f10      	cmp	r7, #16
   2b0ee:	f102 0208 	add.w	r2, r2, #8
   2b0f2:	dd15      	ble.n	2b120 <_svfprintf_r+0x37c>
   2b0f4:	3301      	adds	r3, #1
   2b0f6:	3110      	adds	r1, #16
   2b0f8:	2b07      	cmp	r3, #7
   2b0fa:	9127      	str	r1, [sp, #156]	; 0x9c
   2b0fc:	9326      	str	r3, [sp, #152]	; 0x98
   2b0fe:	e882 0840 	stmia.w	r2, {r6, fp}
   2b102:	ddf2      	ble.n	2b0ea <_svfprintf_r+0x346>
   2b104:	aa25      	add	r2, sp, #148	; 0x94
   2b106:	4629      	mov	r1, r5
   2b108:	4620      	mov	r0, r4
   2b10a:	f002 fe1d 	bl	2dd48 <__ssprint_r>
   2b10e:	2800      	cmp	r0, #0
   2b110:	f47f af1a 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b114:	3f10      	subs	r7, #16
   2b116:	2f10      	cmp	r7, #16
   2b118:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b11a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b11c:	464a      	mov	r2, r9
   2b11e:	dce9      	bgt.n	2b0f4 <_svfprintf_r+0x350>
   2b120:	4635      	mov	r5, r6
   2b122:	460c      	mov	r4, r1
   2b124:	4646      	mov	r6, r8
   2b126:	4690      	mov	r8, r2
   2b128:	3301      	adds	r3, #1
   2b12a:	443c      	add	r4, r7
   2b12c:	2b07      	cmp	r3, #7
   2b12e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b130:	9326      	str	r3, [sp, #152]	; 0x98
   2b132:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b136:	f300 8381 	bgt.w	2b83c <_svfprintf_r+0xa98>
   2b13a:	f108 0808 	add.w	r8, r8, #8
   2b13e:	9b07      	ldr	r3, [sp, #28]
   2b140:	05df      	lsls	r7, r3, #23
   2b142:	f100 8268 	bmi.w	2b616 <_svfprintf_r+0x872>
   2b146:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b148:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b14a:	f8c8 6000 	str.w	r6, [r8]
   2b14e:	3301      	adds	r3, #1
   2b150:	440c      	add	r4, r1
   2b152:	2b07      	cmp	r3, #7
   2b154:	9427      	str	r4, [sp, #156]	; 0x9c
   2b156:	f8c8 1004 	str.w	r1, [r8, #4]
   2b15a:	9326      	str	r3, [sp, #152]	; 0x98
   2b15c:	f300 834d 	bgt.w	2b7fa <_svfprintf_r+0xa56>
   2b160:	f108 0808 	add.w	r8, r8, #8
   2b164:	9b07      	ldr	r3, [sp, #28]
   2b166:	075b      	lsls	r3, r3, #29
   2b168:	d53a      	bpl.n	2b1e0 <_svfprintf_r+0x43c>
   2b16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b16c:	9a08      	ldr	r2, [sp, #32]
   2b16e:	1a9d      	subs	r5, r3, r2
   2b170:	2d00      	cmp	r5, #0
   2b172:	dd35      	ble.n	2b1e0 <_svfprintf_r+0x43c>
   2b174:	2d10      	cmp	r5, #16
   2b176:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b178:	dd20      	ble.n	2b1bc <_svfprintf_r+0x418>
   2b17a:	2610      	movs	r6, #16
   2b17c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b17e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b182:	e004      	b.n	2b18e <_svfprintf_r+0x3ea>
   2b184:	3d10      	subs	r5, #16
   2b186:	2d10      	cmp	r5, #16
   2b188:	f108 0808 	add.w	r8, r8, #8
   2b18c:	dd16      	ble.n	2b1bc <_svfprintf_r+0x418>
   2b18e:	3301      	adds	r3, #1
   2b190:	4a5e      	ldr	r2, [pc, #376]	; (2b30c <_svfprintf_r+0x568>)
   2b192:	9326      	str	r3, [sp, #152]	; 0x98
   2b194:	3410      	adds	r4, #16
   2b196:	2b07      	cmp	r3, #7
   2b198:	9427      	str	r4, [sp, #156]	; 0x9c
   2b19a:	e888 0044 	stmia.w	r8, {r2, r6}
   2b19e:	ddf1      	ble.n	2b184 <_svfprintf_r+0x3e0>
   2b1a0:	aa25      	add	r2, sp, #148	; 0x94
   2b1a2:	4659      	mov	r1, fp
   2b1a4:	4638      	mov	r0, r7
   2b1a6:	f002 fdcf 	bl	2dd48 <__ssprint_r>
   2b1aa:	2800      	cmp	r0, #0
   2b1ac:	f47f aecc 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b1b0:	3d10      	subs	r5, #16
   2b1b2:	2d10      	cmp	r5, #16
   2b1b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b1b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b1b8:	46c8      	mov	r8, r9
   2b1ba:	dce8      	bgt.n	2b18e <_svfprintf_r+0x3ea>
   2b1bc:	3301      	adds	r3, #1
   2b1be:	4a53      	ldr	r2, [pc, #332]	; (2b30c <_svfprintf_r+0x568>)
   2b1c0:	9326      	str	r3, [sp, #152]	; 0x98
   2b1c2:	442c      	add	r4, r5
   2b1c4:	2b07      	cmp	r3, #7
   2b1c6:	9427      	str	r4, [sp, #156]	; 0x9c
   2b1c8:	e888 0024 	stmia.w	r8, {r2, r5}
   2b1cc:	dd08      	ble.n	2b1e0 <_svfprintf_r+0x43c>
   2b1ce:	aa25      	add	r2, sp, #148	; 0x94
   2b1d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b1d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b1d4:	f002 fdb8 	bl	2dd48 <__ssprint_r>
   2b1d8:	2800      	cmp	r0, #0
   2b1da:	f47f aeb5 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b1de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b1e4:	9908      	ldr	r1, [sp, #32]
   2b1e6:	428a      	cmp	r2, r1
   2b1e8:	bfac      	ite	ge
   2b1ea:	189b      	addge	r3, r3, r2
   2b1ec:	185b      	addlt	r3, r3, r1
   2b1ee:	9309      	str	r3, [sp, #36]	; 0x24
   2b1f0:	2c00      	cmp	r4, #0
   2b1f2:	f040 830d 	bne.w	2b810 <_svfprintf_r+0xa6c>
   2b1f6:	2300      	movs	r3, #0
   2b1f8:	9326      	str	r3, [sp, #152]	; 0x98
   2b1fa:	46c8      	mov	r8, r9
   2b1fc:	e5f9      	b.n	2adf2 <_svfprintf_r+0x4e>
   2b1fe:	9311      	str	r3, [sp, #68]	; 0x44
   2b200:	f01b 0320 	ands.w	r3, fp, #32
   2b204:	f040 81e3 	bne.w	2b5ce <_svfprintf_r+0x82a>
   2b208:	f01b 0210 	ands.w	r2, fp, #16
   2b20c:	f040 842e 	bne.w	2ba6c <_svfprintf_r+0xcc8>
   2b210:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2b214:	f000 842a 	beq.w	2ba6c <_svfprintf_r+0xcc8>
   2b218:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b21a:	4613      	mov	r3, r2
   2b21c:	460a      	mov	r2, r1
   2b21e:	3204      	adds	r2, #4
   2b220:	880c      	ldrh	r4, [r1, #0]
   2b222:	920f      	str	r2, [sp, #60]	; 0x3c
   2b224:	2500      	movs	r5, #0
   2b226:	e6b0      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b22a:	9311      	str	r3, [sp, #68]	; 0x44
   2b22c:	6816      	ldr	r6, [r2, #0]
   2b22e:	2400      	movs	r4, #0
   2b230:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2b234:	1d15      	adds	r5, r2, #4
   2b236:	2e00      	cmp	r6, #0
   2b238:	f000 86a7 	beq.w	2bf8a <_svfprintf_r+0x11e6>
   2b23c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b23e:	1c53      	adds	r3, r2, #1
   2b240:	f000 8609 	beq.w	2be56 <_svfprintf_r+0x10b2>
   2b244:	4621      	mov	r1, r4
   2b246:	4630      	mov	r0, r6
   2b248:	f7d4 ffea 	bl	220 <memchr>
   2b24c:	2800      	cmp	r0, #0
   2b24e:	f000 86e1 	beq.w	2c014 <_svfprintf_r+0x1270>
   2b252:	1b83      	subs	r3, r0, r6
   2b254:	930e      	str	r3, [sp, #56]	; 0x38
   2b256:	940a      	str	r4, [sp, #40]	; 0x28
   2b258:	950f      	str	r5, [sp, #60]	; 0x3c
   2b25a:	f8cd b01c 	str.w	fp, [sp, #28]
   2b25e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b262:	9308      	str	r3, [sp, #32]
   2b264:	9412      	str	r4, [sp, #72]	; 0x48
   2b266:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b26a:	e6b3      	b.n	2afd4 <_svfprintf_r+0x230>
   2b26c:	f89a 3000 	ldrb.w	r3, [sl]
   2b270:	2201      	movs	r2, #1
   2b272:	212b      	movs	r1, #43	; 0x2b
   2b274:	e5ee      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b276:	f04b 0b20 	orr.w	fp, fp, #32
   2b27a:	f89a 3000 	ldrb.w	r3, [sl]
   2b27e:	e5e9      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b280:	9311      	str	r3, [sp, #68]	; 0x44
   2b282:	2a00      	cmp	r2, #0
   2b284:	f040 8795 	bne.w	2c1b2 <_svfprintf_r+0x140e>
   2b288:	4b22      	ldr	r3, [pc, #136]	; (2b314 <_svfprintf_r+0x570>)
   2b28a:	9318      	str	r3, [sp, #96]	; 0x60
   2b28c:	f01b 0f20 	tst.w	fp, #32
   2b290:	f040 8111 	bne.w	2b4b6 <_svfprintf_r+0x712>
   2b294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b296:	f01b 0f10 	tst.w	fp, #16
   2b29a:	4613      	mov	r3, r2
   2b29c:	f040 83e1 	bne.w	2ba62 <_svfprintf_r+0xcbe>
   2b2a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b2a4:	f000 83dd 	beq.w	2ba62 <_svfprintf_r+0xcbe>
   2b2a8:	3304      	adds	r3, #4
   2b2aa:	8814      	ldrh	r4, [r2, #0]
   2b2ac:	930f      	str	r3, [sp, #60]	; 0x3c
   2b2ae:	2500      	movs	r5, #0
   2b2b0:	f01b 0f01 	tst.w	fp, #1
   2b2b4:	f000 810c 	beq.w	2b4d0 <_svfprintf_r+0x72c>
   2b2b8:	ea54 0305 	orrs.w	r3, r4, r5
   2b2bc:	f000 8108 	beq.w	2b4d0 <_svfprintf_r+0x72c>
   2b2c0:	2330      	movs	r3, #48	; 0x30
   2b2c2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2b2c6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2b2ca:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2b2ce:	f04b 0b02 	orr.w	fp, fp, #2
   2b2d2:	2302      	movs	r3, #2
   2b2d4:	e659      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b2d6:	f89a 3000 	ldrb.w	r3, [sl]
   2b2da:	2900      	cmp	r1, #0
   2b2dc:	f47f adba 	bne.w	2ae54 <_svfprintf_r+0xb0>
   2b2e0:	2201      	movs	r2, #1
   2b2e2:	2120      	movs	r1, #32
   2b2e4:	e5b6      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b2e6:	f04b 0b01 	orr.w	fp, fp, #1
   2b2ea:	f89a 3000 	ldrb.w	r3, [sl]
   2b2ee:	e5b1      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b2f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2b2f2:	6823      	ldr	r3, [r4, #0]
   2b2f4:	930d      	str	r3, [sp, #52]	; 0x34
   2b2f6:	4618      	mov	r0, r3
   2b2f8:	2800      	cmp	r0, #0
   2b2fa:	4623      	mov	r3, r4
   2b2fc:	f103 0304 	add.w	r3, r3, #4
   2b300:	f6ff ae0a 	blt.w	2af18 <_svfprintf_r+0x174>
   2b304:	930f      	str	r3, [sp, #60]	; 0x3c
   2b306:	f89a 3000 	ldrb.w	r3, [sl]
   2b30a:	e5a3      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b30c:	00032aa4 	.word	0x00032aa4
   2b310:	00032ab4 	.word	0x00032ab4
   2b314:	00032a88 	.word	0x00032a88
   2b318:	f04b 0b10 	orr.w	fp, fp, #16
   2b31c:	f01b 0f20 	tst.w	fp, #32
   2b320:	9311      	str	r3, [sp, #68]	; 0x44
   2b322:	f43f ae23 	beq.w	2af6c <_svfprintf_r+0x1c8>
   2b326:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b328:	3507      	adds	r5, #7
   2b32a:	f025 0307 	bic.w	r3, r5, #7
   2b32e:	f103 0208 	add.w	r2, r3, #8
   2b332:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b336:	920f      	str	r2, [sp, #60]	; 0x3c
   2b338:	2301      	movs	r3, #1
   2b33a:	e626      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b33c:	f89a 3000 	ldrb.w	r3, [sl]
   2b340:	2b2a      	cmp	r3, #42	; 0x2a
   2b342:	f10a 0401 	add.w	r4, sl, #1
   2b346:	f000 8727 	beq.w	2c198 <_svfprintf_r+0x13f4>
   2b34a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b34e:	2809      	cmp	r0, #9
   2b350:	46a2      	mov	sl, r4
   2b352:	f200 86ad 	bhi.w	2c0b0 <_svfprintf_r+0x130c>
   2b356:	2300      	movs	r3, #0
   2b358:	461c      	mov	r4, r3
   2b35a:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2b35e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2b362:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2b366:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b36a:	2809      	cmp	r0, #9
   2b36c:	d9f5      	bls.n	2b35a <_svfprintf_r+0x5b6>
   2b36e:	940a      	str	r4, [sp, #40]	; 0x28
   2b370:	e572      	b.n	2ae58 <_svfprintf_r+0xb4>
   2b372:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2b376:	f89a 3000 	ldrb.w	r3, [sl]
   2b37a:	e56b      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b37c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2b380:	f89a 3000 	ldrb.w	r3, [sl]
   2b384:	e566      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b386:	f89a 3000 	ldrb.w	r3, [sl]
   2b38a:	2b6c      	cmp	r3, #108	; 0x6c
   2b38c:	bf03      	ittte	eq
   2b38e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2b392:	f04b 0b20 	orreq.w	fp, fp, #32
   2b396:	f10a 0a01 	addeq.w	sl, sl, #1
   2b39a:	f04b 0b10 	orrne.w	fp, fp, #16
   2b39e:	e559      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b3a0:	2a00      	cmp	r2, #0
   2b3a2:	f040 8711 	bne.w	2c1c8 <_svfprintf_r+0x1424>
   2b3a6:	f01b 0f20 	tst.w	fp, #32
   2b3aa:	f040 84f9 	bne.w	2bda0 <_svfprintf_r+0xffc>
   2b3ae:	f01b 0f10 	tst.w	fp, #16
   2b3b2:	f040 84ac 	bne.w	2bd0e <_svfprintf_r+0xf6a>
   2b3b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b3ba:	f000 84a8 	beq.w	2bd0e <_svfprintf_r+0xf6a>
   2b3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b3c0:	6813      	ldr	r3, [r2, #0]
   2b3c2:	3204      	adds	r2, #4
   2b3c4:	920f      	str	r2, [sp, #60]	; 0x3c
   2b3c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2b3ca:	801a      	strh	r2, [r3, #0]
   2b3cc:	e511      	b.n	2adf2 <_svfprintf_r+0x4e>
   2b3ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b3d0:	4bb3      	ldr	r3, [pc, #716]	; (2b6a0 <_svfprintf_r+0x8fc>)
   2b3d2:	680c      	ldr	r4, [r1, #0]
   2b3d4:	9318      	str	r3, [sp, #96]	; 0x60
   2b3d6:	2230      	movs	r2, #48	; 0x30
   2b3d8:	2378      	movs	r3, #120	; 0x78
   2b3da:	3104      	adds	r1, #4
   2b3dc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2b3e0:	9311      	str	r3, [sp, #68]	; 0x44
   2b3e2:	f04b 0b02 	orr.w	fp, fp, #2
   2b3e6:	910f      	str	r1, [sp, #60]	; 0x3c
   2b3e8:	2500      	movs	r5, #0
   2b3ea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2b3ee:	2302      	movs	r3, #2
   2b3f0:	e5cb      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b3f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b3f4:	9311      	str	r3, [sp, #68]	; 0x44
   2b3f6:	680a      	ldr	r2, [r1, #0]
   2b3f8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2b3fc:	2300      	movs	r3, #0
   2b3fe:	460a      	mov	r2, r1
   2b400:	461f      	mov	r7, r3
   2b402:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b406:	3204      	adds	r2, #4
   2b408:	2301      	movs	r3, #1
   2b40a:	9308      	str	r3, [sp, #32]
   2b40c:	f8cd b01c 	str.w	fp, [sp, #28]
   2b410:	970a      	str	r7, [sp, #40]	; 0x28
   2b412:	9712      	str	r7, [sp, #72]	; 0x48
   2b414:	920f      	str	r2, [sp, #60]	; 0x3c
   2b416:	930e      	str	r3, [sp, #56]	; 0x38
   2b418:	ae28      	add	r6, sp, #160	; 0xa0
   2b41a:	e5df      	b.n	2afdc <_svfprintf_r+0x238>
   2b41c:	9311      	str	r3, [sp, #68]	; 0x44
   2b41e:	2a00      	cmp	r2, #0
   2b420:	f040 86ea 	bne.w	2c1f8 <_svfprintf_r+0x1454>
   2b424:	f01b 0f20 	tst.w	fp, #32
   2b428:	d15d      	bne.n	2b4e6 <_svfprintf_r+0x742>
   2b42a:	f01b 0f10 	tst.w	fp, #16
   2b42e:	f040 8308 	bne.w	2ba42 <_svfprintf_r+0xc9e>
   2b432:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b436:	f000 8304 	beq.w	2ba42 <_svfprintf_r+0xc9e>
   2b43a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b43c:	f9b1 4000 	ldrsh.w	r4, [r1]
   2b440:	3104      	adds	r1, #4
   2b442:	17e5      	asrs	r5, r4, #31
   2b444:	4622      	mov	r2, r4
   2b446:	462b      	mov	r3, r5
   2b448:	910f      	str	r1, [sp, #60]	; 0x3c
   2b44a:	2a00      	cmp	r2, #0
   2b44c:	f173 0300 	sbcs.w	r3, r3, #0
   2b450:	db58      	blt.n	2b504 <_svfprintf_r+0x760>
   2b452:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b454:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b458:	1c4a      	adds	r2, r1, #1
   2b45a:	f04f 0301 	mov.w	r3, #1
   2b45e:	f47f ad9b 	bne.w	2af98 <_svfprintf_r+0x1f4>
   2b462:	ea54 0205 	orrs.w	r2, r4, r5
   2b466:	f000 81df 	beq.w	2b828 <_svfprintf_r+0xa84>
   2b46a:	f8cd b01c 	str.w	fp, [sp, #28]
   2b46e:	2b01      	cmp	r3, #1
   2b470:	f000 827b 	beq.w	2b96a <_svfprintf_r+0xbc6>
   2b474:	2b02      	cmp	r3, #2
   2b476:	f040 8206 	bne.w	2b886 <_svfprintf_r+0xae2>
   2b47a:	9818      	ldr	r0, [sp, #96]	; 0x60
   2b47c:	464e      	mov	r6, r9
   2b47e:	0923      	lsrs	r3, r4, #4
   2b480:	f004 010f 	and.w	r1, r4, #15
   2b484:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2b488:	092a      	lsrs	r2, r5, #4
   2b48a:	461c      	mov	r4, r3
   2b48c:	4615      	mov	r5, r2
   2b48e:	5c43      	ldrb	r3, [r0, r1]
   2b490:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2b494:	ea54 0305 	orrs.w	r3, r4, r5
   2b498:	d1f1      	bne.n	2b47e <_svfprintf_r+0x6da>
   2b49a:	eba9 0306 	sub.w	r3, r9, r6
   2b49e:	930e      	str	r3, [sp, #56]	; 0x38
   2b4a0:	e590      	b.n	2afc4 <_svfprintf_r+0x220>
   2b4a2:	9311      	str	r3, [sp, #68]	; 0x44
   2b4a4:	2a00      	cmp	r2, #0
   2b4a6:	f040 86a3 	bne.w	2c1f0 <_svfprintf_r+0x144c>
   2b4aa:	4b7e      	ldr	r3, [pc, #504]	; (2b6a4 <_svfprintf_r+0x900>)
   2b4ac:	9318      	str	r3, [sp, #96]	; 0x60
   2b4ae:	f01b 0f20 	tst.w	fp, #32
   2b4b2:	f43f aeef 	beq.w	2b294 <_svfprintf_r+0x4f0>
   2b4b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b4b8:	3507      	adds	r5, #7
   2b4ba:	f025 0307 	bic.w	r3, r5, #7
   2b4be:	f103 0208 	add.w	r2, r3, #8
   2b4c2:	f01b 0f01 	tst.w	fp, #1
   2b4c6:	920f      	str	r2, [sp, #60]	; 0x3c
   2b4c8:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b4cc:	f47f aef4 	bne.w	2b2b8 <_svfprintf_r+0x514>
   2b4d0:	2302      	movs	r3, #2
   2b4d2:	e55a      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b4d4:	9311      	str	r3, [sp, #68]	; 0x44
   2b4d6:	2a00      	cmp	r2, #0
   2b4d8:	f040 8686 	bne.w	2c1e8 <_svfprintf_r+0x1444>
   2b4dc:	f04b 0b10 	orr.w	fp, fp, #16
   2b4e0:	f01b 0f20 	tst.w	fp, #32
   2b4e4:	d0a1      	beq.n	2b42a <_svfprintf_r+0x686>
   2b4e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b4e8:	3507      	adds	r5, #7
   2b4ea:	f025 0507 	bic.w	r5, r5, #7
   2b4ee:	e9d5 2300 	ldrd	r2, r3, [r5]
   2b4f2:	2a00      	cmp	r2, #0
   2b4f4:	f105 0108 	add.w	r1, r5, #8
   2b4f8:	461d      	mov	r5, r3
   2b4fa:	f173 0300 	sbcs.w	r3, r3, #0
   2b4fe:	910f      	str	r1, [sp, #60]	; 0x3c
   2b500:	4614      	mov	r4, r2
   2b502:	daa6      	bge.n	2b452 <_svfprintf_r+0x6ae>
   2b504:	272d      	movs	r7, #45	; 0x2d
   2b506:	4264      	negs	r4, r4
   2b508:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2b50c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b510:	2301      	movs	r3, #1
   2b512:	e53d      	b.n	2af90 <_svfprintf_r+0x1ec>
   2b514:	9311      	str	r3, [sp, #68]	; 0x44
   2b516:	2a00      	cmp	r2, #0
   2b518:	f040 8662 	bne.w	2c1e0 <_svfprintf_r+0x143c>
   2b51c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b51e:	3507      	adds	r5, #7
   2b520:	f025 0307 	bic.w	r3, r5, #7
   2b524:	f103 0208 	add.w	r2, r3, #8
   2b528:	920f      	str	r2, [sp, #60]	; 0x3c
   2b52a:	681a      	ldr	r2, [r3, #0]
   2b52c:	9215      	str	r2, [sp, #84]	; 0x54
   2b52e:	685b      	ldr	r3, [r3, #4]
   2b530:	9314      	str	r3, [sp, #80]	; 0x50
   2b532:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b534:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2b536:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2b53a:	4628      	mov	r0, r5
   2b53c:	4621      	mov	r1, r4
   2b53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b542:	4b59      	ldr	r3, [pc, #356]	; (2b6a8 <_svfprintf_r+0x904>)
   2b544:	f7d5 fd9c 	bl	1080 <__aeabi_dcmpun>
   2b548:	2800      	cmp	r0, #0
   2b54a:	f040 834a 	bne.w	2bbe2 <_svfprintf_r+0xe3e>
   2b54e:	4628      	mov	r0, r5
   2b550:	4621      	mov	r1, r4
   2b552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b556:	4b54      	ldr	r3, [pc, #336]	; (2b6a8 <_svfprintf_r+0x904>)
   2b558:	f7d5 fd74 	bl	1044 <__aeabi_dcmple>
   2b55c:	2800      	cmp	r0, #0
   2b55e:	f040 8340 	bne.w	2bbe2 <_svfprintf_r+0xe3e>
   2b562:	a815      	add	r0, sp, #84	; 0x54
   2b564:	c80d      	ldmia	r0, {r0, r2, r3}
   2b566:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b568:	f7d5 fd62 	bl	1030 <__aeabi_dcmplt>
   2b56c:	2800      	cmp	r0, #0
   2b56e:	f040 8530 	bne.w	2bfd2 <_svfprintf_r+0x122e>
   2b572:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b576:	4e4d      	ldr	r6, [pc, #308]	; (2b6ac <_svfprintf_r+0x908>)
   2b578:	4b4d      	ldr	r3, [pc, #308]	; (2b6b0 <_svfprintf_r+0x90c>)
   2b57a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2b57e:	9007      	str	r0, [sp, #28]
   2b580:	9811      	ldr	r0, [sp, #68]	; 0x44
   2b582:	2203      	movs	r2, #3
   2b584:	2100      	movs	r1, #0
   2b586:	9208      	str	r2, [sp, #32]
   2b588:	910a      	str	r1, [sp, #40]	; 0x28
   2b58a:	2847      	cmp	r0, #71	; 0x47
   2b58c:	bfd8      	it	le
   2b58e:	461e      	movle	r6, r3
   2b590:	920e      	str	r2, [sp, #56]	; 0x38
   2b592:	9112      	str	r1, [sp, #72]	; 0x48
   2b594:	e51e      	b.n	2afd4 <_svfprintf_r+0x230>
   2b596:	f04b 0b08 	orr.w	fp, fp, #8
   2b59a:	f89a 3000 	ldrb.w	r3, [sl]
   2b59e:	e459      	b.n	2ae54 <_svfprintf_r+0xb0>
   2b5a0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b5a4:	2300      	movs	r3, #0
   2b5a6:	461c      	mov	r4, r3
   2b5a8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2b5ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2b5b0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2b5b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b5b8:	2809      	cmp	r0, #9
   2b5ba:	d9f5      	bls.n	2b5a8 <_svfprintf_r+0x804>
   2b5bc:	940d      	str	r4, [sp, #52]	; 0x34
   2b5be:	e44b      	b.n	2ae58 <_svfprintf_r+0xb4>
   2b5c0:	f04b 0b10 	orr.w	fp, fp, #16
   2b5c4:	9311      	str	r3, [sp, #68]	; 0x44
   2b5c6:	f01b 0320 	ands.w	r3, fp, #32
   2b5ca:	f43f ae1d 	beq.w	2b208 <_svfprintf_r+0x464>
   2b5ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b5d0:	3507      	adds	r5, #7
   2b5d2:	f025 0307 	bic.w	r3, r5, #7
   2b5d6:	f103 0208 	add.w	r2, r3, #8
   2b5da:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b5de:	920f      	str	r2, [sp, #60]	; 0x3c
   2b5e0:	2300      	movs	r3, #0
   2b5e2:	e4d2      	b.n	2af8a <_svfprintf_r+0x1e6>
   2b5e4:	9311      	str	r3, [sp, #68]	; 0x44
   2b5e6:	2a00      	cmp	r2, #0
   2b5e8:	f040 85e7 	bne.w	2c1ba <_svfprintf_r+0x1416>
   2b5ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2b5ee:	2a00      	cmp	r2, #0
   2b5f0:	f43f aca3 	beq.w	2af3a <_svfprintf_r+0x196>
   2b5f4:	2300      	movs	r3, #0
   2b5f6:	2101      	movs	r1, #1
   2b5f8:	461f      	mov	r7, r3
   2b5fa:	9108      	str	r1, [sp, #32]
   2b5fc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2b600:	f8cd b01c 	str.w	fp, [sp, #28]
   2b604:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b608:	930a      	str	r3, [sp, #40]	; 0x28
   2b60a:	9312      	str	r3, [sp, #72]	; 0x48
   2b60c:	910e      	str	r1, [sp, #56]	; 0x38
   2b60e:	ae28      	add	r6, sp, #160	; 0xa0
   2b610:	e4e4      	b.n	2afdc <_svfprintf_r+0x238>
   2b612:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b614:	e534      	b.n	2b080 <_svfprintf_r+0x2dc>
   2b616:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b618:	2b65      	cmp	r3, #101	; 0x65
   2b61a:	f340 80a7 	ble.w	2b76c <_svfprintf_r+0x9c8>
   2b61e:	a815      	add	r0, sp, #84	; 0x54
   2b620:	c80d      	ldmia	r0, {r0, r2, r3}
   2b622:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b624:	f7d5 fcfa 	bl	101c <__aeabi_dcmpeq>
   2b628:	2800      	cmp	r0, #0
   2b62a:	f000 8150 	beq.w	2b8ce <_svfprintf_r+0xb2a>
   2b62e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b630:	4a20      	ldr	r2, [pc, #128]	; (2b6b4 <_svfprintf_r+0x910>)
   2b632:	f8c8 2000 	str.w	r2, [r8]
   2b636:	3301      	adds	r3, #1
   2b638:	3401      	adds	r4, #1
   2b63a:	2201      	movs	r2, #1
   2b63c:	2b07      	cmp	r3, #7
   2b63e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b640:	9326      	str	r3, [sp, #152]	; 0x98
   2b642:	f8c8 2004 	str.w	r2, [r8, #4]
   2b646:	f300 836a 	bgt.w	2bd1e <_svfprintf_r+0xf7a>
   2b64a:	f108 0808 	add.w	r8, r8, #8
   2b64e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b652:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b654:	4293      	cmp	r3, r2
   2b656:	db03      	blt.n	2b660 <_svfprintf_r+0x8bc>
   2b658:	9b07      	ldr	r3, [sp, #28]
   2b65a:	07dd      	lsls	r5, r3, #31
   2b65c:	f57f ad82 	bpl.w	2b164 <_svfprintf_r+0x3c0>
   2b660:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b662:	9919      	ldr	r1, [sp, #100]	; 0x64
   2b664:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b666:	f8c8 2000 	str.w	r2, [r8]
   2b66a:	3301      	adds	r3, #1
   2b66c:	440c      	add	r4, r1
   2b66e:	2b07      	cmp	r3, #7
   2b670:	f8c8 1004 	str.w	r1, [r8, #4]
   2b674:	9427      	str	r4, [sp, #156]	; 0x9c
   2b676:	9326      	str	r3, [sp, #152]	; 0x98
   2b678:	f300 839e 	bgt.w	2bdb8 <_svfprintf_r+0x1014>
   2b67c:	f108 0808 	add.w	r8, r8, #8
   2b680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b682:	1e5e      	subs	r6, r3, #1
   2b684:	2e00      	cmp	r6, #0
   2b686:	f77f ad6d 	ble.w	2b164 <_svfprintf_r+0x3c0>
   2b68a:	2e10      	cmp	r6, #16
   2b68c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b68e:	4d0a      	ldr	r5, [pc, #40]	; (2b6b8 <_svfprintf_r+0x914>)
   2b690:	f340 81f5 	ble.w	2ba7e <_svfprintf_r+0xcda>
   2b694:	4622      	mov	r2, r4
   2b696:	2710      	movs	r7, #16
   2b698:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2b69c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b69e:	e013      	b.n	2b6c8 <_svfprintf_r+0x924>
   2b6a0:	00032a88 	.word	0x00032a88
   2b6a4:	00032a74 	.word	0x00032a74
   2b6a8:	7fefffff 	.word	0x7fefffff
   2b6ac:	00032a68 	.word	0x00032a68
   2b6b0:	00032a64 	.word	0x00032a64
   2b6b4:	000325dc 	.word	0x000325dc
   2b6b8:	00032ab4 	.word	0x00032ab4
   2b6bc:	f108 0808 	add.w	r8, r8, #8
   2b6c0:	3e10      	subs	r6, #16
   2b6c2:	2e10      	cmp	r6, #16
   2b6c4:	f340 81da 	ble.w	2ba7c <_svfprintf_r+0xcd8>
   2b6c8:	3301      	adds	r3, #1
   2b6ca:	3210      	adds	r2, #16
   2b6cc:	2b07      	cmp	r3, #7
   2b6ce:	9227      	str	r2, [sp, #156]	; 0x9c
   2b6d0:	9326      	str	r3, [sp, #152]	; 0x98
   2b6d2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b6d6:	ddf1      	ble.n	2b6bc <_svfprintf_r+0x918>
   2b6d8:	aa25      	add	r2, sp, #148	; 0x94
   2b6da:	4621      	mov	r1, r4
   2b6dc:	4658      	mov	r0, fp
   2b6de:	f002 fb33 	bl	2dd48 <__ssprint_r>
   2b6e2:	2800      	cmp	r0, #0
   2b6e4:	f47f ac30 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b6e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b6ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b6ec:	46c8      	mov	r8, r9
   2b6ee:	e7e7      	b.n	2b6c0 <_svfprintf_r+0x91c>
   2b6f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b6f2:	9a08      	ldr	r2, [sp, #32]
   2b6f4:	1a9f      	subs	r7, r3, r2
   2b6f6:	2f00      	cmp	r7, #0
   2b6f8:	f77f ace5 	ble.w	2b0c6 <_svfprintf_r+0x322>
   2b6fc:	2f10      	cmp	r7, #16
   2b6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b700:	4db6      	ldr	r5, [pc, #728]	; (2b9dc <_svfprintf_r+0xc38>)
   2b702:	dd27      	ble.n	2b754 <_svfprintf_r+0x9b0>
   2b704:	4642      	mov	r2, r8
   2b706:	4621      	mov	r1, r4
   2b708:	46b0      	mov	r8, r6
   2b70a:	f04f 0b10 	mov.w	fp, #16
   2b70e:	462e      	mov	r6, r5
   2b710:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b712:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b714:	e004      	b.n	2b720 <_svfprintf_r+0x97c>
   2b716:	3f10      	subs	r7, #16
   2b718:	2f10      	cmp	r7, #16
   2b71a:	f102 0208 	add.w	r2, r2, #8
   2b71e:	dd15      	ble.n	2b74c <_svfprintf_r+0x9a8>
   2b720:	3301      	adds	r3, #1
   2b722:	3110      	adds	r1, #16
   2b724:	2b07      	cmp	r3, #7
   2b726:	9127      	str	r1, [sp, #156]	; 0x9c
   2b728:	9326      	str	r3, [sp, #152]	; 0x98
   2b72a:	e882 0840 	stmia.w	r2, {r6, fp}
   2b72e:	ddf2      	ble.n	2b716 <_svfprintf_r+0x972>
   2b730:	aa25      	add	r2, sp, #148	; 0x94
   2b732:	4629      	mov	r1, r5
   2b734:	4620      	mov	r0, r4
   2b736:	f002 fb07 	bl	2dd48 <__ssprint_r>
   2b73a:	2800      	cmp	r0, #0
   2b73c:	f47f ac04 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b740:	3f10      	subs	r7, #16
   2b742:	2f10      	cmp	r7, #16
   2b744:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b746:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b748:	464a      	mov	r2, r9
   2b74a:	dce9      	bgt.n	2b720 <_svfprintf_r+0x97c>
   2b74c:	4635      	mov	r5, r6
   2b74e:	460c      	mov	r4, r1
   2b750:	4646      	mov	r6, r8
   2b752:	4690      	mov	r8, r2
   2b754:	3301      	adds	r3, #1
   2b756:	443c      	add	r4, r7
   2b758:	2b07      	cmp	r3, #7
   2b75a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b75c:	9326      	str	r3, [sp, #152]	; 0x98
   2b75e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b762:	f300 8232 	bgt.w	2bbca <_svfprintf_r+0xe26>
   2b766:	f108 0808 	add.w	r8, r8, #8
   2b76a:	e4ac      	b.n	2b0c6 <_svfprintf_r+0x322>
   2b76c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b76e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b770:	2b01      	cmp	r3, #1
   2b772:	f340 81fe 	ble.w	2bb72 <_svfprintf_r+0xdce>
   2b776:	3701      	adds	r7, #1
   2b778:	3401      	adds	r4, #1
   2b77a:	2301      	movs	r3, #1
   2b77c:	2f07      	cmp	r7, #7
   2b77e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b780:	9726      	str	r7, [sp, #152]	; 0x98
   2b782:	f8c8 6000 	str.w	r6, [r8]
   2b786:	f8c8 3004 	str.w	r3, [r8, #4]
   2b78a:	f300 8203 	bgt.w	2bb94 <_svfprintf_r+0xdf0>
   2b78e:	f108 0808 	add.w	r8, r8, #8
   2b792:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b794:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2b796:	f8c8 3000 	str.w	r3, [r8]
   2b79a:	3701      	adds	r7, #1
   2b79c:	4414      	add	r4, r2
   2b79e:	2f07      	cmp	r7, #7
   2b7a0:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7a2:	9726      	str	r7, [sp, #152]	; 0x98
   2b7a4:	f8c8 2004 	str.w	r2, [r8, #4]
   2b7a8:	f300 8200 	bgt.w	2bbac <_svfprintf_r+0xe08>
   2b7ac:	f108 0808 	add.w	r8, r8, #8
   2b7b0:	a815      	add	r0, sp, #84	; 0x54
   2b7b2:	c80d      	ldmia	r0, {r0, r2, r3}
   2b7b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b7b6:	f7d5 fc31 	bl	101c <__aeabi_dcmpeq>
   2b7ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b7bc:	2800      	cmp	r0, #0
   2b7be:	f040 8101 	bne.w	2b9c4 <_svfprintf_r+0xc20>
   2b7c2:	3b01      	subs	r3, #1
   2b7c4:	3701      	adds	r7, #1
   2b7c6:	3601      	adds	r6, #1
   2b7c8:	441c      	add	r4, r3
   2b7ca:	2f07      	cmp	r7, #7
   2b7cc:	9726      	str	r7, [sp, #152]	; 0x98
   2b7ce:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7d0:	f8c8 6000 	str.w	r6, [r8]
   2b7d4:	f8c8 3004 	str.w	r3, [r8, #4]
   2b7d8:	f300 8127 	bgt.w	2ba2a <_svfprintf_r+0xc86>
   2b7dc:	f108 0808 	add.w	r8, r8, #8
   2b7e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b7e2:	f8c8 2004 	str.w	r2, [r8, #4]
   2b7e6:	3701      	adds	r7, #1
   2b7e8:	4414      	add	r4, r2
   2b7ea:	ab21      	add	r3, sp, #132	; 0x84
   2b7ec:	2f07      	cmp	r7, #7
   2b7ee:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7f0:	9726      	str	r7, [sp, #152]	; 0x98
   2b7f2:	f8c8 3000 	str.w	r3, [r8]
   2b7f6:	f77f acb3 	ble.w	2b160 <_svfprintf_r+0x3bc>
   2b7fa:	aa25      	add	r2, sp, #148	; 0x94
   2b7fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b800:	f002 faa2 	bl	2dd48 <__ssprint_r>
   2b804:	2800      	cmp	r0, #0
   2b806:	f47f ab9f 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b80a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b80c:	46c8      	mov	r8, r9
   2b80e:	e4a9      	b.n	2b164 <_svfprintf_r+0x3c0>
   2b810:	aa25      	add	r2, sp, #148	; 0x94
   2b812:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b814:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b816:	f002 fa97 	bl	2dd48 <__ssprint_r>
   2b81a:	2800      	cmp	r0, #0
   2b81c:	f43f aceb 	beq.w	2b1f6 <_svfprintf_r+0x452>
   2b820:	f7ff bb92 	b.w	2af48 <_svfprintf_r+0x1a4>
   2b824:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2b828:	2b01      	cmp	r3, #1
   2b82a:	f000 8134 	beq.w	2ba96 <_svfprintf_r+0xcf2>
   2b82e:	2b02      	cmp	r3, #2
   2b830:	d125      	bne.n	2b87e <_svfprintf_r+0xada>
   2b832:	f8cd b01c 	str.w	fp, [sp, #28]
   2b836:	2400      	movs	r4, #0
   2b838:	2500      	movs	r5, #0
   2b83a:	e61e      	b.n	2b47a <_svfprintf_r+0x6d6>
   2b83c:	aa25      	add	r2, sp, #148	; 0x94
   2b83e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b840:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b842:	f002 fa81 	bl	2dd48 <__ssprint_r>
   2b846:	2800      	cmp	r0, #0
   2b848:	f47f ab7e 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b84c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b84e:	46c8      	mov	r8, r9
   2b850:	e475      	b.n	2b13e <_svfprintf_r+0x39a>
   2b852:	aa25      	add	r2, sp, #148	; 0x94
   2b854:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b856:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b858:	f002 fa76 	bl	2dd48 <__ssprint_r>
   2b85c:	2800      	cmp	r0, #0
   2b85e:	f47f ab73 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b862:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b864:	46c8      	mov	r8, r9
   2b866:	e41b      	b.n	2b0a0 <_svfprintf_r+0x2fc>
   2b868:	aa25      	add	r2, sp, #148	; 0x94
   2b86a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b86c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b86e:	f002 fa6b 	bl	2dd48 <__ssprint_r>
   2b872:	2800      	cmp	r0, #0
   2b874:	f47f ab68 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b878:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b87a:	46c8      	mov	r8, r9
   2b87c:	e420      	b.n	2b0c0 <_svfprintf_r+0x31c>
   2b87e:	f8cd b01c 	str.w	fp, [sp, #28]
   2b882:	2400      	movs	r4, #0
   2b884:	2500      	movs	r5, #0
   2b886:	4649      	mov	r1, r9
   2b888:	e000      	b.n	2b88c <_svfprintf_r+0xae8>
   2b88a:	4631      	mov	r1, r6
   2b88c:	08e2      	lsrs	r2, r4, #3
   2b88e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2b892:	08e8      	lsrs	r0, r5, #3
   2b894:	f004 0307 	and.w	r3, r4, #7
   2b898:	4605      	mov	r5, r0
   2b89a:	4614      	mov	r4, r2
   2b89c:	3330      	adds	r3, #48	; 0x30
   2b89e:	ea54 0205 	orrs.w	r2, r4, r5
   2b8a2:	f801 3c01 	strb.w	r3, [r1, #-1]
   2b8a6:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2b8aa:	d1ee      	bne.n	2b88a <_svfprintf_r+0xae6>
   2b8ac:	9a07      	ldr	r2, [sp, #28]
   2b8ae:	07d2      	lsls	r2, r2, #31
   2b8b0:	f57f adf3 	bpl.w	2b49a <_svfprintf_r+0x6f6>
   2b8b4:	2b30      	cmp	r3, #48	; 0x30
   2b8b6:	f43f adf0 	beq.w	2b49a <_svfprintf_r+0x6f6>
   2b8ba:	3902      	subs	r1, #2
   2b8bc:	2330      	movs	r3, #48	; 0x30
   2b8be:	f806 3c01 	strb.w	r3, [r6, #-1]
   2b8c2:	eba9 0301 	sub.w	r3, r9, r1
   2b8c6:	930e      	str	r3, [sp, #56]	; 0x38
   2b8c8:	460e      	mov	r6, r1
   2b8ca:	f7ff bb7b 	b.w	2afc4 <_svfprintf_r+0x220>
   2b8ce:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2b8d0:	2900      	cmp	r1, #0
   2b8d2:	f340 822e 	ble.w	2bd32 <_svfprintf_r+0xf8e>
   2b8d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b8d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b8da:	4293      	cmp	r3, r2
   2b8dc:	bfa8      	it	ge
   2b8de:	4613      	movge	r3, r2
   2b8e0:	2b00      	cmp	r3, #0
   2b8e2:	461f      	mov	r7, r3
   2b8e4:	dd0d      	ble.n	2b902 <_svfprintf_r+0xb5e>
   2b8e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8e8:	f8c8 6000 	str.w	r6, [r8]
   2b8ec:	3301      	adds	r3, #1
   2b8ee:	443c      	add	r4, r7
   2b8f0:	2b07      	cmp	r3, #7
   2b8f2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8f4:	f8c8 7004 	str.w	r7, [r8, #4]
   2b8f8:	9326      	str	r3, [sp, #152]	; 0x98
   2b8fa:	f300 831f 	bgt.w	2bf3c <_svfprintf_r+0x1198>
   2b8fe:	f108 0808 	add.w	r8, r8, #8
   2b902:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b904:	2f00      	cmp	r7, #0
   2b906:	bfa8      	it	ge
   2b908:	1bdb      	subge	r3, r3, r7
   2b90a:	2b00      	cmp	r3, #0
   2b90c:	461f      	mov	r7, r3
   2b90e:	f340 80d6 	ble.w	2babe <_svfprintf_r+0xd1a>
   2b912:	2f10      	cmp	r7, #16
   2b914:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b916:	4d31      	ldr	r5, [pc, #196]	; (2b9dc <_svfprintf_r+0xc38>)
   2b918:	f340 81ed 	ble.w	2bcf6 <_svfprintf_r+0xf52>
   2b91c:	4642      	mov	r2, r8
   2b91e:	4621      	mov	r1, r4
   2b920:	46b0      	mov	r8, r6
   2b922:	f04f 0b10 	mov.w	fp, #16
   2b926:	462e      	mov	r6, r5
   2b928:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b92a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b92c:	e004      	b.n	2b938 <_svfprintf_r+0xb94>
   2b92e:	3208      	adds	r2, #8
   2b930:	3f10      	subs	r7, #16
   2b932:	2f10      	cmp	r7, #16
   2b934:	f340 81db 	ble.w	2bcee <_svfprintf_r+0xf4a>
   2b938:	3301      	adds	r3, #1
   2b93a:	3110      	adds	r1, #16
   2b93c:	2b07      	cmp	r3, #7
   2b93e:	9127      	str	r1, [sp, #156]	; 0x9c
   2b940:	9326      	str	r3, [sp, #152]	; 0x98
   2b942:	e882 0840 	stmia.w	r2, {r6, fp}
   2b946:	ddf2      	ble.n	2b92e <_svfprintf_r+0xb8a>
   2b948:	aa25      	add	r2, sp, #148	; 0x94
   2b94a:	4629      	mov	r1, r5
   2b94c:	4620      	mov	r0, r4
   2b94e:	f002 f9fb 	bl	2dd48 <__ssprint_r>
   2b952:	2800      	cmp	r0, #0
   2b954:	f47f aaf8 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b958:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b95a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b95c:	464a      	mov	r2, r9
   2b95e:	e7e7      	b.n	2b930 <_svfprintf_r+0xb8c>
   2b960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b962:	930e      	str	r3, [sp, #56]	; 0x38
   2b964:	464e      	mov	r6, r9
   2b966:	f7ff bb2d 	b.w	2afc4 <_svfprintf_r+0x220>
   2b96a:	2d00      	cmp	r5, #0
   2b96c:	bf08      	it	eq
   2b96e:	2c0a      	cmpeq	r4, #10
   2b970:	f0c0 808f 	bcc.w	2ba92 <_svfprintf_r+0xcee>
   2b974:	464e      	mov	r6, r9
   2b976:	4620      	mov	r0, r4
   2b978:	4629      	mov	r1, r5
   2b97a:	220a      	movs	r2, #10
   2b97c:	2300      	movs	r3, #0
   2b97e:	f7d5 fbbd 	bl	10fc <__aeabi_uldivmod>
   2b982:	3230      	adds	r2, #48	; 0x30
   2b984:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2b988:	4620      	mov	r0, r4
   2b98a:	4629      	mov	r1, r5
   2b98c:	2300      	movs	r3, #0
   2b98e:	220a      	movs	r2, #10
   2b990:	f7d5 fbb4 	bl	10fc <__aeabi_uldivmod>
   2b994:	4604      	mov	r4, r0
   2b996:	460d      	mov	r5, r1
   2b998:	ea54 0305 	orrs.w	r3, r4, r5
   2b99c:	d1eb      	bne.n	2b976 <_svfprintf_r+0xbd2>
   2b99e:	eba9 0306 	sub.w	r3, r9, r6
   2b9a2:	930e      	str	r3, [sp, #56]	; 0x38
   2b9a4:	f7ff bb0e 	b.w	2afc4 <_svfprintf_r+0x220>
   2b9a8:	aa25      	add	r2, sp, #148	; 0x94
   2b9aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b9ae:	f002 f9cb 	bl	2dd48 <__ssprint_r>
   2b9b2:	2800      	cmp	r0, #0
   2b9b4:	f47f aac8 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2b9b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b9bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b9be:	46c8      	mov	r8, r9
   2b9c0:	f7ff bb5e 	b.w	2b080 <_svfprintf_r+0x2dc>
   2b9c4:	1e5e      	subs	r6, r3, #1
   2b9c6:	2e00      	cmp	r6, #0
   2b9c8:	f77f af0a 	ble.w	2b7e0 <_svfprintf_r+0xa3c>
   2b9cc:	2e10      	cmp	r6, #16
   2b9ce:	4d03      	ldr	r5, [pc, #12]	; (2b9dc <_svfprintf_r+0xc38>)
   2b9d0:	dd22      	ble.n	2ba18 <_svfprintf_r+0xc74>
   2b9d2:	4622      	mov	r2, r4
   2b9d4:	f04f 0b10 	mov.w	fp, #16
   2b9d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b9da:	e006      	b.n	2b9ea <_svfprintf_r+0xc46>
   2b9dc:	00032ab4 	.word	0x00032ab4
   2b9e0:	3e10      	subs	r6, #16
   2b9e2:	2e10      	cmp	r6, #16
   2b9e4:	f108 0808 	add.w	r8, r8, #8
   2b9e8:	dd15      	ble.n	2ba16 <_svfprintf_r+0xc72>
   2b9ea:	3701      	adds	r7, #1
   2b9ec:	3210      	adds	r2, #16
   2b9ee:	2f07      	cmp	r7, #7
   2b9f0:	9227      	str	r2, [sp, #156]	; 0x9c
   2b9f2:	9726      	str	r7, [sp, #152]	; 0x98
   2b9f4:	e888 0820 	stmia.w	r8, {r5, fp}
   2b9f8:	ddf2      	ble.n	2b9e0 <_svfprintf_r+0xc3c>
   2b9fa:	aa25      	add	r2, sp, #148	; 0x94
   2b9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9fe:	4620      	mov	r0, r4
   2ba00:	f002 f9a2 	bl	2dd48 <__ssprint_r>
   2ba04:	2800      	cmp	r0, #0
   2ba06:	f47f aa9f 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2ba0a:	3e10      	subs	r6, #16
   2ba0c:	2e10      	cmp	r6, #16
   2ba0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2ba10:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2ba12:	46c8      	mov	r8, r9
   2ba14:	dce9      	bgt.n	2b9ea <_svfprintf_r+0xc46>
   2ba16:	4614      	mov	r4, r2
   2ba18:	3701      	adds	r7, #1
   2ba1a:	4434      	add	r4, r6
   2ba1c:	2f07      	cmp	r7, #7
   2ba1e:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba20:	9726      	str	r7, [sp, #152]	; 0x98
   2ba22:	e888 0060 	stmia.w	r8, {r5, r6}
   2ba26:	f77f aed9 	ble.w	2b7dc <_svfprintf_r+0xa38>
   2ba2a:	aa25      	add	r2, sp, #148	; 0x94
   2ba2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ba2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ba30:	f002 f98a 	bl	2dd48 <__ssprint_r>
   2ba34:	2800      	cmp	r0, #0
   2ba36:	f47f aa87 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2ba3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba3c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2ba3e:	46c8      	mov	r8, r9
   2ba40:	e6ce      	b.n	2b7e0 <_svfprintf_r+0xa3c>
   2ba42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ba44:	6814      	ldr	r4, [r2, #0]
   2ba46:	4613      	mov	r3, r2
   2ba48:	3304      	adds	r3, #4
   2ba4a:	17e5      	asrs	r5, r4, #31
   2ba4c:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba4e:	4622      	mov	r2, r4
   2ba50:	462b      	mov	r3, r5
   2ba52:	e4fa      	b.n	2b44a <_svfprintf_r+0x6a6>
   2ba54:	3204      	adds	r2, #4
   2ba56:	681c      	ldr	r4, [r3, #0]
   2ba58:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba5a:	2301      	movs	r3, #1
   2ba5c:	2500      	movs	r5, #0
   2ba5e:	f7ff ba94 	b.w	2af8a <_svfprintf_r+0x1e6>
   2ba62:	681c      	ldr	r4, [r3, #0]
   2ba64:	3304      	adds	r3, #4
   2ba66:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba68:	2500      	movs	r5, #0
   2ba6a:	e421      	b.n	2b2b0 <_svfprintf_r+0x50c>
   2ba6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2ba6e:	460a      	mov	r2, r1
   2ba70:	3204      	adds	r2, #4
   2ba72:	680c      	ldr	r4, [r1, #0]
   2ba74:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba76:	2500      	movs	r5, #0
   2ba78:	f7ff ba87 	b.w	2af8a <_svfprintf_r+0x1e6>
   2ba7c:	4614      	mov	r4, r2
   2ba7e:	3301      	adds	r3, #1
   2ba80:	4434      	add	r4, r6
   2ba82:	2b07      	cmp	r3, #7
   2ba84:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba86:	9326      	str	r3, [sp, #152]	; 0x98
   2ba88:	e888 0060 	stmia.w	r8, {r5, r6}
   2ba8c:	f77f ab68 	ble.w	2b160 <_svfprintf_r+0x3bc>
   2ba90:	e6b3      	b.n	2b7fa <_svfprintf_r+0xa56>
   2ba92:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2ba96:	f8cd b01c 	str.w	fp, [sp, #28]
   2ba9a:	ae42      	add	r6, sp, #264	; 0x108
   2ba9c:	3430      	adds	r4, #48	; 0x30
   2ba9e:	2301      	movs	r3, #1
   2baa0:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2baa4:	930e      	str	r3, [sp, #56]	; 0x38
   2baa6:	f7ff ba8d 	b.w	2afc4 <_svfprintf_r+0x220>
   2baaa:	aa25      	add	r2, sp, #148	; 0x94
   2baac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2baae:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bab0:	f002 f94a 	bl	2dd48 <__ssprint_r>
   2bab4:	2800      	cmp	r0, #0
   2bab6:	f47f aa47 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2baba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2babc:	46c8      	mov	r8, r9
   2babe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2bac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bac2:	429a      	cmp	r2, r3
   2bac4:	db44      	blt.n	2bb50 <_svfprintf_r+0xdac>
   2bac6:	9b07      	ldr	r3, [sp, #28]
   2bac8:	07d9      	lsls	r1, r3, #31
   2baca:	d441      	bmi.n	2bb50 <_svfprintf_r+0xdac>
   2bacc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bace:	9812      	ldr	r0, [sp, #72]	; 0x48
   2bad0:	1a9a      	subs	r2, r3, r2
   2bad2:	1a1d      	subs	r5, r3, r0
   2bad4:	4295      	cmp	r5, r2
   2bad6:	bfa8      	it	ge
   2bad8:	4615      	movge	r5, r2
   2bada:	2d00      	cmp	r5, #0
   2badc:	dd0e      	ble.n	2bafc <_svfprintf_r+0xd58>
   2bade:	9926      	ldr	r1, [sp, #152]	; 0x98
   2bae0:	f8c8 5004 	str.w	r5, [r8, #4]
   2bae4:	3101      	adds	r1, #1
   2bae6:	4406      	add	r6, r0
   2bae8:	442c      	add	r4, r5
   2baea:	2907      	cmp	r1, #7
   2baec:	f8c8 6000 	str.w	r6, [r8]
   2baf0:	9427      	str	r4, [sp, #156]	; 0x9c
   2baf2:	9126      	str	r1, [sp, #152]	; 0x98
   2baf4:	f300 823b 	bgt.w	2bf6e <_svfprintf_r+0x11ca>
   2baf8:	f108 0808 	add.w	r8, r8, #8
   2bafc:	2d00      	cmp	r5, #0
   2bafe:	bfac      	ite	ge
   2bb00:	1b56      	subge	r6, r2, r5
   2bb02:	4616      	movlt	r6, r2
   2bb04:	2e00      	cmp	r6, #0
   2bb06:	f77f ab2d 	ble.w	2b164 <_svfprintf_r+0x3c0>
   2bb0a:	2e10      	cmp	r6, #16
   2bb0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bb0e:	4db0      	ldr	r5, [pc, #704]	; (2bdd0 <_svfprintf_r+0x102c>)
   2bb10:	ddb5      	ble.n	2ba7e <_svfprintf_r+0xcda>
   2bb12:	4622      	mov	r2, r4
   2bb14:	2710      	movs	r7, #16
   2bb16:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2bb1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bb1c:	e004      	b.n	2bb28 <_svfprintf_r+0xd84>
   2bb1e:	f108 0808 	add.w	r8, r8, #8
   2bb22:	3e10      	subs	r6, #16
   2bb24:	2e10      	cmp	r6, #16
   2bb26:	dda9      	ble.n	2ba7c <_svfprintf_r+0xcd8>
   2bb28:	3301      	adds	r3, #1
   2bb2a:	3210      	adds	r2, #16
   2bb2c:	2b07      	cmp	r3, #7
   2bb2e:	9227      	str	r2, [sp, #156]	; 0x9c
   2bb30:	9326      	str	r3, [sp, #152]	; 0x98
   2bb32:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bb36:	ddf2      	ble.n	2bb1e <_svfprintf_r+0xd7a>
   2bb38:	aa25      	add	r2, sp, #148	; 0x94
   2bb3a:	4621      	mov	r1, r4
   2bb3c:	4658      	mov	r0, fp
   2bb3e:	f002 f903 	bl	2dd48 <__ssprint_r>
   2bb42:	2800      	cmp	r0, #0
   2bb44:	f47f aa00 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bb48:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bb4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bb4c:	46c8      	mov	r8, r9
   2bb4e:	e7e8      	b.n	2bb22 <_svfprintf_r+0xd7e>
   2bb50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bb52:	9819      	ldr	r0, [sp, #100]	; 0x64
   2bb54:	991a      	ldr	r1, [sp, #104]	; 0x68
   2bb56:	f8c8 1000 	str.w	r1, [r8]
   2bb5a:	3301      	adds	r3, #1
   2bb5c:	4404      	add	r4, r0
   2bb5e:	2b07      	cmp	r3, #7
   2bb60:	9427      	str	r4, [sp, #156]	; 0x9c
   2bb62:	f8c8 0004 	str.w	r0, [r8, #4]
   2bb66:	9326      	str	r3, [sp, #152]	; 0x98
   2bb68:	f300 81f5 	bgt.w	2bf56 <_svfprintf_r+0x11b2>
   2bb6c:	f108 0808 	add.w	r8, r8, #8
   2bb70:	e7ac      	b.n	2bacc <_svfprintf_r+0xd28>
   2bb72:	9b07      	ldr	r3, [sp, #28]
   2bb74:	07da      	lsls	r2, r3, #31
   2bb76:	f53f adfe 	bmi.w	2b776 <_svfprintf_r+0x9d2>
   2bb7a:	3701      	adds	r7, #1
   2bb7c:	3401      	adds	r4, #1
   2bb7e:	2301      	movs	r3, #1
   2bb80:	2f07      	cmp	r7, #7
   2bb82:	9427      	str	r4, [sp, #156]	; 0x9c
   2bb84:	9726      	str	r7, [sp, #152]	; 0x98
   2bb86:	f8c8 6000 	str.w	r6, [r8]
   2bb8a:	f8c8 3004 	str.w	r3, [r8, #4]
   2bb8e:	f77f ae25 	ble.w	2b7dc <_svfprintf_r+0xa38>
   2bb92:	e74a      	b.n	2ba2a <_svfprintf_r+0xc86>
   2bb94:	aa25      	add	r2, sp, #148	; 0x94
   2bb96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bb98:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bb9a:	f002 f8d5 	bl	2dd48 <__ssprint_r>
   2bb9e:	2800      	cmp	r0, #0
   2bba0:	f47f a9d2 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bba4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bba6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bba8:	46c8      	mov	r8, r9
   2bbaa:	e5f2      	b.n	2b792 <_svfprintf_r+0x9ee>
   2bbac:	aa25      	add	r2, sp, #148	; 0x94
   2bbae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bbb0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bbb2:	f002 f8c9 	bl	2dd48 <__ssprint_r>
   2bbb6:	2800      	cmp	r0, #0
   2bbb8:	f47f a9c6 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bbbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bbbe:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bbc0:	46c8      	mov	r8, r9
   2bbc2:	e5f5      	b.n	2b7b0 <_svfprintf_r+0xa0c>
   2bbc4:	464e      	mov	r6, r9
   2bbc6:	f7ff b9fd 	b.w	2afc4 <_svfprintf_r+0x220>
   2bbca:	aa25      	add	r2, sp, #148	; 0x94
   2bbcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bbce:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bbd0:	f002 f8ba 	bl	2dd48 <__ssprint_r>
   2bbd4:	2800      	cmp	r0, #0
   2bbd6:	f47f a9b7 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bbda:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bbdc:	46c8      	mov	r8, r9
   2bbde:	f7ff ba72 	b.w	2b0c6 <_svfprintf_r+0x322>
   2bbe2:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2bbe4:	4622      	mov	r2, r4
   2bbe6:	4620      	mov	r0, r4
   2bbe8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2bbea:	4623      	mov	r3, r4
   2bbec:	4621      	mov	r1, r4
   2bbee:	f7d5 fa47 	bl	1080 <__aeabi_dcmpun>
   2bbf2:	2800      	cmp	r0, #0
   2bbf4:	f040 8286 	bne.w	2c104 <_svfprintf_r+0x1360>
   2bbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bbfa:	3301      	adds	r3, #1
   2bbfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bbfe:	f023 0320 	bic.w	r3, r3, #32
   2bc02:	930e      	str	r3, [sp, #56]	; 0x38
   2bc04:	f000 81e2 	beq.w	2bfcc <_svfprintf_r+0x1228>
   2bc08:	2b47      	cmp	r3, #71	; 0x47
   2bc0a:	f000 811e 	beq.w	2be4a <_svfprintf_r+0x10a6>
   2bc0e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2bc12:	9307      	str	r3, [sp, #28]
   2bc14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bc16:	1e1f      	subs	r7, r3, #0
   2bc18:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2bc1a:	9308      	str	r3, [sp, #32]
   2bc1c:	bfbb      	ittet	lt
   2bc1e:	463b      	movlt	r3, r7
   2bc20:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2bc24:	2300      	movge	r3, #0
   2bc26:	232d      	movlt	r3, #45	; 0x2d
   2bc28:	9310      	str	r3, [sp, #64]	; 0x40
   2bc2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bc2c:	2b66      	cmp	r3, #102	; 0x66
   2bc2e:	f000 81bb 	beq.w	2bfa8 <_svfprintf_r+0x1204>
   2bc32:	2b46      	cmp	r3, #70	; 0x46
   2bc34:	f000 80df 	beq.w	2bdf6 <_svfprintf_r+0x1052>
   2bc38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bc3a:	9a08      	ldr	r2, [sp, #32]
   2bc3c:	2b45      	cmp	r3, #69	; 0x45
   2bc3e:	bf0c      	ite	eq
   2bc40:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2bc42:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2bc44:	a823      	add	r0, sp, #140	; 0x8c
   2bc46:	a920      	add	r1, sp, #128	; 0x80
   2bc48:	bf08      	it	eq
   2bc4a:	1c5d      	addeq	r5, r3, #1
   2bc4c:	9004      	str	r0, [sp, #16]
   2bc4e:	9103      	str	r1, [sp, #12]
   2bc50:	a81f      	add	r0, sp, #124	; 0x7c
   2bc52:	2102      	movs	r1, #2
   2bc54:	463b      	mov	r3, r7
   2bc56:	9002      	str	r0, [sp, #8]
   2bc58:	9501      	str	r5, [sp, #4]
   2bc5a:	9100      	str	r1, [sp, #0]
   2bc5c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bc5e:	f000 fb73 	bl	2c348 <_dtoa_r>
   2bc62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bc64:	2b67      	cmp	r3, #103	; 0x67
   2bc66:	4606      	mov	r6, r0
   2bc68:	f040 81e0 	bne.w	2c02c <_svfprintf_r+0x1288>
   2bc6c:	f01b 0f01 	tst.w	fp, #1
   2bc70:	f000 8246 	beq.w	2c100 <_svfprintf_r+0x135c>
   2bc74:	1974      	adds	r4, r6, r5
   2bc76:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2bc78:	9808      	ldr	r0, [sp, #32]
   2bc7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2bc7c:	4639      	mov	r1, r7
   2bc7e:	f7d5 f9cd 	bl	101c <__aeabi_dcmpeq>
   2bc82:	2800      	cmp	r0, #0
   2bc84:	f040 8165 	bne.w	2bf52 <_svfprintf_r+0x11ae>
   2bc88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2bc8a:	42a3      	cmp	r3, r4
   2bc8c:	d206      	bcs.n	2bc9c <_svfprintf_r+0xef8>
   2bc8e:	2130      	movs	r1, #48	; 0x30
   2bc90:	1c5a      	adds	r2, r3, #1
   2bc92:	9223      	str	r2, [sp, #140]	; 0x8c
   2bc94:	7019      	strb	r1, [r3, #0]
   2bc96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2bc98:	429c      	cmp	r4, r3
   2bc9a:	d8f9      	bhi.n	2bc90 <_svfprintf_r+0xeec>
   2bc9c:	1b9b      	subs	r3, r3, r6
   2bc9e:	9313      	str	r3, [sp, #76]	; 0x4c
   2bca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bca2:	2b47      	cmp	r3, #71	; 0x47
   2bca4:	f000 80e9 	beq.w	2be7a <_svfprintf_r+0x10d6>
   2bca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bcaa:	2b65      	cmp	r3, #101	; 0x65
   2bcac:	f340 81cd 	ble.w	2c04a <_svfprintf_r+0x12a6>
   2bcb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bcb2:	2b66      	cmp	r3, #102	; 0x66
   2bcb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bcb6:	9312      	str	r3, [sp, #72]	; 0x48
   2bcb8:	f000 819e 	beq.w	2bff8 <_svfprintf_r+0x1254>
   2bcbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bcbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bcc0:	4619      	mov	r1, r3
   2bcc2:	4291      	cmp	r1, r2
   2bcc4:	f300 818a 	bgt.w	2bfdc <_svfprintf_r+0x1238>
   2bcc8:	f01b 0f01 	tst.w	fp, #1
   2bccc:	f040 8213 	bne.w	2c0f6 <_svfprintf_r+0x1352>
   2bcd0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2bcd4:	9308      	str	r3, [sp, #32]
   2bcd6:	2367      	movs	r3, #103	; 0x67
   2bcd8:	920e      	str	r2, [sp, #56]	; 0x38
   2bcda:	9311      	str	r3, [sp, #68]	; 0x44
   2bcdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bcde:	2b00      	cmp	r3, #0
   2bce0:	f040 80c4 	bne.w	2be6c <_svfprintf_r+0x10c8>
   2bce4:	930a      	str	r3, [sp, #40]	; 0x28
   2bce6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bcea:	f7ff b973 	b.w	2afd4 <_svfprintf_r+0x230>
   2bcee:	4635      	mov	r5, r6
   2bcf0:	460c      	mov	r4, r1
   2bcf2:	4646      	mov	r6, r8
   2bcf4:	4690      	mov	r8, r2
   2bcf6:	3301      	adds	r3, #1
   2bcf8:	443c      	add	r4, r7
   2bcfa:	2b07      	cmp	r3, #7
   2bcfc:	9427      	str	r4, [sp, #156]	; 0x9c
   2bcfe:	9326      	str	r3, [sp, #152]	; 0x98
   2bd00:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bd04:	f73f aed1 	bgt.w	2baaa <_svfprintf_r+0xd06>
   2bd08:	f108 0808 	add.w	r8, r8, #8
   2bd0c:	e6d7      	b.n	2babe <_svfprintf_r+0xd1a>
   2bd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bd10:	6813      	ldr	r3, [r2, #0]
   2bd12:	3204      	adds	r2, #4
   2bd14:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2bd18:	601a      	str	r2, [r3, #0]
   2bd1a:	f7ff b86a 	b.w	2adf2 <_svfprintf_r+0x4e>
   2bd1e:	aa25      	add	r2, sp, #148	; 0x94
   2bd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bd22:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bd24:	f002 f810 	bl	2dd48 <__ssprint_r>
   2bd28:	2800      	cmp	r0, #0
   2bd2a:	f47f a90d 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bd2e:	46c8      	mov	r8, r9
   2bd30:	e48d      	b.n	2b64e <_svfprintf_r+0x8aa>
   2bd32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bd34:	4a27      	ldr	r2, [pc, #156]	; (2bdd4 <_svfprintf_r+0x1030>)
   2bd36:	f8c8 2000 	str.w	r2, [r8]
   2bd3a:	3301      	adds	r3, #1
   2bd3c:	3401      	adds	r4, #1
   2bd3e:	2201      	movs	r2, #1
   2bd40:	2b07      	cmp	r3, #7
   2bd42:	9427      	str	r4, [sp, #156]	; 0x9c
   2bd44:	9326      	str	r3, [sp, #152]	; 0x98
   2bd46:	f8c8 2004 	str.w	r2, [r8, #4]
   2bd4a:	dc72      	bgt.n	2be32 <_svfprintf_r+0x108e>
   2bd4c:	f108 0808 	add.w	r8, r8, #8
   2bd50:	b929      	cbnz	r1, 2bd5e <_svfprintf_r+0xfba>
   2bd52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bd54:	b91b      	cbnz	r3, 2bd5e <_svfprintf_r+0xfba>
   2bd56:	9b07      	ldr	r3, [sp, #28]
   2bd58:	07d8      	lsls	r0, r3, #31
   2bd5a:	f57f aa03 	bpl.w	2b164 <_svfprintf_r+0x3c0>
   2bd5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bd60:	9819      	ldr	r0, [sp, #100]	; 0x64
   2bd62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bd64:	f8c8 2000 	str.w	r2, [r8]
   2bd68:	3301      	adds	r3, #1
   2bd6a:	4602      	mov	r2, r0
   2bd6c:	4422      	add	r2, r4
   2bd6e:	2b07      	cmp	r3, #7
   2bd70:	9227      	str	r2, [sp, #156]	; 0x9c
   2bd72:	f8c8 0004 	str.w	r0, [r8, #4]
   2bd76:	9326      	str	r3, [sp, #152]	; 0x98
   2bd78:	f300 818d 	bgt.w	2c096 <_svfprintf_r+0x12f2>
   2bd7c:	f108 0808 	add.w	r8, r8, #8
   2bd80:	2900      	cmp	r1, #0
   2bd82:	f2c0 8165 	blt.w	2c050 <_svfprintf_r+0x12ac>
   2bd86:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2bd88:	f8c8 6000 	str.w	r6, [r8]
   2bd8c:	3301      	adds	r3, #1
   2bd8e:	188c      	adds	r4, r1, r2
   2bd90:	2b07      	cmp	r3, #7
   2bd92:	9427      	str	r4, [sp, #156]	; 0x9c
   2bd94:	9326      	str	r3, [sp, #152]	; 0x98
   2bd96:	f8c8 1004 	str.w	r1, [r8, #4]
   2bd9a:	f77f a9e1 	ble.w	2b160 <_svfprintf_r+0x3bc>
   2bd9e:	e52c      	b.n	2b7fa <_svfprintf_r+0xa56>
   2bda0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bda2:	9909      	ldr	r1, [sp, #36]	; 0x24
   2bda4:	6813      	ldr	r3, [r2, #0]
   2bda6:	17cd      	asrs	r5, r1, #31
   2bda8:	4608      	mov	r0, r1
   2bdaa:	3204      	adds	r2, #4
   2bdac:	4629      	mov	r1, r5
   2bdae:	920f      	str	r2, [sp, #60]	; 0x3c
   2bdb0:	e9c3 0100 	strd	r0, r1, [r3]
   2bdb4:	f7ff b81d 	b.w	2adf2 <_svfprintf_r+0x4e>
   2bdb8:	aa25      	add	r2, sp, #148	; 0x94
   2bdba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bdbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bdbe:	f001 ffc3 	bl	2dd48 <__ssprint_r>
   2bdc2:	2800      	cmp	r0, #0
   2bdc4:	f47f a8c0 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bdc8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bdca:	46c8      	mov	r8, r9
   2bdcc:	e458      	b.n	2b680 <_svfprintf_r+0x8dc>
   2bdce:	bf00      	nop
   2bdd0:	00032ab4 	.word	0x00032ab4
   2bdd4:	000325dc 	.word	0x000325dc
   2bdd8:	2140      	movs	r1, #64	; 0x40
   2bdda:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bddc:	f001 f9ec 	bl	2d1b8 <_malloc_r>
   2bde0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bde2:	6010      	str	r0, [r2, #0]
   2bde4:	6110      	str	r0, [r2, #16]
   2bde6:	2800      	cmp	r0, #0
   2bde8:	f000 81f2 	beq.w	2c1d0 <_svfprintf_r+0x142c>
   2bdec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bdee:	2340      	movs	r3, #64	; 0x40
   2bdf0:	6153      	str	r3, [r2, #20]
   2bdf2:	f7fe bfee 	b.w	2add2 <_svfprintf_r+0x2e>
   2bdf6:	a823      	add	r0, sp, #140	; 0x8c
   2bdf8:	a920      	add	r1, sp, #128	; 0x80
   2bdfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2bdfc:	9004      	str	r0, [sp, #16]
   2bdfe:	9103      	str	r1, [sp, #12]
   2be00:	a81f      	add	r0, sp, #124	; 0x7c
   2be02:	2103      	movs	r1, #3
   2be04:	9002      	str	r0, [sp, #8]
   2be06:	9a08      	ldr	r2, [sp, #32]
   2be08:	9401      	str	r4, [sp, #4]
   2be0a:	463b      	mov	r3, r7
   2be0c:	9100      	str	r1, [sp, #0]
   2be0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2be10:	f000 fa9a 	bl	2c348 <_dtoa_r>
   2be14:	4625      	mov	r5, r4
   2be16:	4606      	mov	r6, r0
   2be18:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2be1a:	2b46      	cmp	r3, #70	; 0x46
   2be1c:	eb06 0405 	add.w	r4, r6, r5
   2be20:	f47f af29 	bne.w	2bc76 <_svfprintf_r+0xed2>
   2be24:	7833      	ldrb	r3, [r6, #0]
   2be26:	2b30      	cmp	r3, #48	; 0x30
   2be28:	f000 8178 	beq.w	2c11c <_svfprintf_r+0x1378>
   2be2c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2be2e:	442c      	add	r4, r5
   2be30:	e721      	b.n	2bc76 <_svfprintf_r+0xed2>
   2be32:	aa25      	add	r2, sp, #148	; 0x94
   2be34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2be36:	980c      	ldr	r0, [sp, #48]	; 0x30
   2be38:	f001 ff86 	bl	2dd48 <__ssprint_r>
   2be3c:	2800      	cmp	r0, #0
   2be3e:	f47f a883 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2be42:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2be44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2be46:	46c8      	mov	r8, r9
   2be48:	e782      	b.n	2bd50 <_svfprintf_r+0xfac>
   2be4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2be4c:	2b00      	cmp	r3, #0
   2be4e:	bf08      	it	eq
   2be50:	2301      	moveq	r3, #1
   2be52:	930a      	str	r3, [sp, #40]	; 0x28
   2be54:	e6db      	b.n	2bc0e <_svfprintf_r+0xe6a>
   2be56:	4630      	mov	r0, r6
   2be58:	940a      	str	r4, [sp, #40]	; 0x28
   2be5a:	f7d4 fc51 	bl	700 <strlen>
   2be5e:	950f      	str	r5, [sp, #60]	; 0x3c
   2be60:	900e      	str	r0, [sp, #56]	; 0x38
   2be62:	f8cd b01c 	str.w	fp, [sp, #28]
   2be66:	4603      	mov	r3, r0
   2be68:	f7ff b9f9 	b.w	2b25e <_svfprintf_r+0x4ba>
   2be6c:	272d      	movs	r7, #45	; 0x2d
   2be6e:	2300      	movs	r3, #0
   2be70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2be74:	930a      	str	r3, [sp, #40]	; 0x28
   2be76:	f7ff b8ae 	b.w	2afd6 <_svfprintf_r+0x232>
   2be7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2be7c:	9312      	str	r3, [sp, #72]	; 0x48
   2be7e:	461a      	mov	r2, r3
   2be80:	3303      	adds	r3, #3
   2be82:	db04      	blt.n	2be8e <_svfprintf_r+0x10ea>
   2be84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2be86:	4619      	mov	r1, r3
   2be88:	4291      	cmp	r1, r2
   2be8a:	f6bf af17 	bge.w	2bcbc <_svfprintf_r+0xf18>
   2be8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2be90:	3b02      	subs	r3, #2
   2be92:	9311      	str	r3, [sp, #68]	; 0x44
   2be94:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2be98:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2be9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2be9e:	3b01      	subs	r3, #1
   2bea0:	2b00      	cmp	r3, #0
   2bea2:	931f      	str	r3, [sp, #124]	; 0x7c
   2bea4:	bfbd      	ittte	lt
   2bea6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2bea8:	f1c3 0301 	rsblt	r3, r3, #1
   2beac:	222d      	movlt	r2, #45	; 0x2d
   2beae:	222b      	movge	r2, #43	; 0x2b
   2beb0:	2b09      	cmp	r3, #9
   2beb2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2beb6:	f340 8116 	ble.w	2c0e6 <_svfprintf_r+0x1342>
   2beba:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2bebe:	4620      	mov	r0, r4
   2bec0:	4dab      	ldr	r5, [pc, #684]	; (2c170 <_svfprintf_r+0x13cc>)
   2bec2:	e000      	b.n	2bec6 <_svfprintf_r+0x1122>
   2bec4:	4610      	mov	r0, r2
   2bec6:	fb85 1203 	smull	r1, r2, r5, r3
   2beca:	17d9      	asrs	r1, r3, #31
   2becc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2bed0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2bed4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2bed8:	3230      	adds	r2, #48	; 0x30
   2beda:	2909      	cmp	r1, #9
   2bedc:	f800 2c01 	strb.w	r2, [r0, #-1]
   2bee0:	460b      	mov	r3, r1
   2bee2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2bee6:	dced      	bgt.n	2bec4 <_svfprintf_r+0x1120>
   2bee8:	3330      	adds	r3, #48	; 0x30
   2beea:	3802      	subs	r0, #2
   2beec:	b2d9      	uxtb	r1, r3
   2beee:	4284      	cmp	r4, r0
   2bef0:	f802 1c01 	strb.w	r1, [r2, #-1]
   2bef4:	f240 8165 	bls.w	2c1c2 <_svfprintf_r+0x141e>
   2bef8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2befc:	4613      	mov	r3, r2
   2befe:	e001      	b.n	2bf04 <_svfprintf_r+0x1160>
   2bf00:	f813 1b01 	ldrb.w	r1, [r3], #1
   2bf04:	f800 1b01 	strb.w	r1, [r0], #1
   2bf08:	42a3      	cmp	r3, r4
   2bf0a:	d1f9      	bne.n	2bf00 <_svfprintf_r+0x115c>
   2bf0c:	3301      	adds	r3, #1
   2bf0e:	1a9b      	subs	r3, r3, r2
   2bf10:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2bf14:	4413      	add	r3, r2
   2bf16:	aa21      	add	r2, sp, #132	; 0x84
   2bf18:	1a9b      	subs	r3, r3, r2
   2bf1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2bf1c:	931b      	str	r3, [sp, #108]	; 0x6c
   2bf1e:	2a01      	cmp	r2, #1
   2bf20:	4413      	add	r3, r2
   2bf22:	930e      	str	r3, [sp, #56]	; 0x38
   2bf24:	f340 8119 	ble.w	2c15a <_svfprintf_r+0x13b6>
   2bf28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bf2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bf2c:	4413      	add	r3, r2
   2bf2e:	930e      	str	r3, [sp, #56]	; 0x38
   2bf30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bf34:	9308      	str	r3, [sp, #32]
   2bf36:	2300      	movs	r3, #0
   2bf38:	9312      	str	r3, [sp, #72]	; 0x48
   2bf3a:	e6cf      	b.n	2bcdc <_svfprintf_r+0xf38>
   2bf3c:	aa25      	add	r2, sp, #148	; 0x94
   2bf3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf40:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf42:	f001 ff01 	bl	2dd48 <__ssprint_r>
   2bf46:	2800      	cmp	r0, #0
   2bf48:	f47e affe 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bf4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf4e:	46c8      	mov	r8, r9
   2bf50:	e4d7      	b.n	2b902 <_svfprintf_r+0xb5e>
   2bf52:	4623      	mov	r3, r4
   2bf54:	e6a2      	b.n	2bc9c <_svfprintf_r+0xef8>
   2bf56:	aa25      	add	r2, sp, #148	; 0x94
   2bf58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf5c:	f001 fef4 	bl	2dd48 <__ssprint_r>
   2bf60:	2800      	cmp	r0, #0
   2bf62:	f47e aff1 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bf66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2bf68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf6a:	46c8      	mov	r8, r9
   2bf6c:	e5ae      	b.n	2bacc <_svfprintf_r+0xd28>
   2bf6e:	aa25      	add	r2, sp, #148	; 0x94
   2bf70:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf72:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf74:	f001 fee8 	bl	2dd48 <__ssprint_r>
   2bf78:	2800      	cmp	r0, #0
   2bf7a:	f47e afe5 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2bf7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2bf80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf84:	1a9a      	subs	r2, r3, r2
   2bf86:	46c8      	mov	r8, r9
   2bf88:	e5b8      	b.n	2bafc <_svfprintf_r+0xd58>
   2bf8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bf8c:	9612      	str	r6, [sp, #72]	; 0x48
   2bf8e:	2b06      	cmp	r3, #6
   2bf90:	bf28      	it	cs
   2bf92:	2306      	movcs	r3, #6
   2bf94:	960a      	str	r6, [sp, #40]	; 0x28
   2bf96:	4637      	mov	r7, r6
   2bf98:	9308      	str	r3, [sp, #32]
   2bf9a:	950f      	str	r5, [sp, #60]	; 0x3c
   2bf9c:	f8cd b01c 	str.w	fp, [sp, #28]
   2bfa0:	930e      	str	r3, [sp, #56]	; 0x38
   2bfa2:	4e74      	ldr	r6, [pc, #464]	; (2c174 <_svfprintf_r+0x13d0>)
   2bfa4:	f7ff b816 	b.w	2afd4 <_svfprintf_r+0x230>
   2bfa8:	a823      	add	r0, sp, #140	; 0x8c
   2bfaa:	a920      	add	r1, sp, #128	; 0x80
   2bfac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2bfae:	9004      	str	r0, [sp, #16]
   2bfb0:	9103      	str	r1, [sp, #12]
   2bfb2:	a81f      	add	r0, sp, #124	; 0x7c
   2bfb4:	2103      	movs	r1, #3
   2bfb6:	9002      	str	r0, [sp, #8]
   2bfb8:	9a08      	ldr	r2, [sp, #32]
   2bfba:	9501      	str	r5, [sp, #4]
   2bfbc:	463b      	mov	r3, r7
   2bfbe:	9100      	str	r1, [sp, #0]
   2bfc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bfc2:	f000 f9c1 	bl	2c348 <_dtoa_r>
   2bfc6:	4606      	mov	r6, r0
   2bfc8:	1944      	adds	r4, r0, r5
   2bfca:	e72b      	b.n	2be24 <_svfprintf_r+0x1080>
   2bfcc:	2306      	movs	r3, #6
   2bfce:	930a      	str	r3, [sp, #40]	; 0x28
   2bfd0:	e61d      	b.n	2bc0e <_svfprintf_r+0xe6a>
   2bfd2:	272d      	movs	r7, #45	; 0x2d
   2bfd4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bfd8:	f7ff bacd 	b.w	2b576 <_svfprintf_r+0x7d2>
   2bfdc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bfde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bfe0:	4413      	add	r3, r2
   2bfe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bfe4:	930e      	str	r3, [sp, #56]	; 0x38
   2bfe6:	2a00      	cmp	r2, #0
   2bfe8:	f340 80b0 	ble.w	2c14c <_svfprintf_r+0x13a8>
   2bfec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bff0:	9308      	str	r3, [sp, #32]
   2bff2:	2367      	movs	r3, #103	; 0x67
   2bff4:	9311      	str	r3, [sp, #68]	; 0x44
   2bff6:	e671      	b.n	2bcdc <_svfprintf_r+0xf38>
   2bff8:	2b00      	cmp	r3, #0
   2bffa:	f340 80c3 	ble.w	2c184 <_svfprintf_r+0x13e0>
   2bffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c000:	2a00      	cmp	r2, #0
   2c002:	f040 8099 	bne.w	2c138 <_svfprintf_r+0x1394>
   2c006:	f01b 0f01 	tst.w	fp, #1
   2c00a:	f040 8095 	bne.w	2c138 <_svfprintf_r+0x1394>
   2c00e:	9308      	str	r3, [sp, #32]
   2c010:	930e      	str	r3, [sp, #56]	; 0x38
   2c012:	e663      	b.n	2bcdc <_svfprintf_r+0xf38>
   2c014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c016:	9308      	str	r3, [sp, #32]
   2c018:	930e      	str	r3, [sp, #56]	; 0x38
   2c01a:	900a      	str	r0, [sp, #40]	; 0x28
   2c01c:	950f      	str	r5, [sp, #60]	; 0x3c
   2c01e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c022:	9012      	str	r0, [sp, #72]	; 0x48
   2c024:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c028:	f7fe bfd4 	b.w	2afd4 <_svfprintf_r+0x230>
   2c02c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c02e:	2b47      	cmp	r3, #71	; 0x47
   2c030:	f47f ae20 	bne.w	2bc74 <_svfprintf_r+0xed0>
   2c034:	f01b 0f01 	tst.w	fp, #1
   2c038:	f47f aeee 	bne.w	2be18 <_svfprintf_r+0x1074>
   2c03c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c03e:	1b9b      	subs	r3, r3, r6
   2c040:	9313      	str	r3, [sp, #76]	; 0x4c
   2c042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c044:	2b47      	cmp	r3, #71	; 0x47
   2c046:	f43f af18 	beq.w	2be7a <_svfprintf_r+0x10d6>
   2c04a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c04c:	9312      	str	r3, [sp, #72]	; 0x48
   2c04e:	e721      	b.n	2be94 <_svfprintf_r+0x10f0>
   2c050:	424f      	negs	r7, r1
   2c052:	3110      	adds	r1, #16
   2c054:	4d48      	ldr	r5, [pc, #288]	; (2c178 <_svfprintf_r+0x13d4>)
   2c056:	da2f      	bge.n	2c0b8 <_svfprintf_r+0x1314>
   2c058:	2410      	movs	r4, #16
   2c05a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c05e:	e004      	b.n	2c06a <_svfprintf_r+0x12c6>
   2c060:	f108 0808 	add.w	r8, r8, #8
   2c064:	3f10      	subs	r7, #16
   2c066:	2f10      	cmp	r7, #16
   2c068:	dd26      	ble.n	2c0b8 <_svfprintf_r+0x1314>
   2c06a:	3301      	adds	r3, #1
   2c06c:	3210      	adds	r2, #16
   2c06e:	2b07      	cmp	r3, #7
   2c070:	9227      	str	r2, [sp, #156]	; 0x9c
   2c072:	9326      	str	r3, [sp, #152]	; 0x98
   2c074:	f8c8 5000 	str.w	r5, [r8]
   2c078:	f8c8 4004 	str.w	r4, [r8, #4]
   2c07c:	ddf0      	ble.n	2c060 <_svfprintf_r+0x12bc>
   2c07e:	aa25      	add	r2, sp, #148	; 0x94
   2c080:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c082:	4658      	mov	r0, fp
   2c084:	f001 fe60 	bl	2dd48 <__ssprint_r>
   2c088:	2800      	cmp	r0, #0
   2c08a:	f47e af5d 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2c08e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c090:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c092:	46c8      	mov	r8, r9
   2c094:	e7e6      	b.n	2c064 <_svfprintf_r+0x12c0>
   2c096:	aa25      	add	r2, sp, #148	; 0x94
   2c098:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c09a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c09c:	f001 fe54 	bl	2dd48 <__ssprint_r>
   2c0a0:	2800      	cmp	r0, #0
   2c0a2:	f47e af51 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2c0a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c0a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c0aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c0ac:	46c8      	mov	r8, r9
   2c0ae:	e667      	b.n	2bd80 <_svfprintf_r+0xfdc>
   2c0b0:	2000      	movs	r0, #0
   2c0b2:	900a      	str	r0, [sp, #40]	; 0x28
   2c0b4:	f7fe bed0 	b.w	2ae58 <_svfprintf_r+0xb4>
   2c0b8:	3301      	adds	r3, #1
   2c0ba:	443a      	add	r2, r7
   2c0bc:	2b07      	cmp	r3, #7
   2c0be:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c0c2:	9227      	str	r2, [sp, #156]	; 0x9c
   2c0c4:	9326      	str	r3, [sp, #152]	; 0x98
   2c0c6:	f108 0808 	add.w	r8, r8, #8
   2c0ca:	f77f ae5c 	ble.w	2bd86 <_svfprintf_r+0xfe2>
   2c0ce:	aa25      	add	r2, sp, #148	; 0x94
   2c0d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0d4:	f001 fe38 	bl	2dd48 <__ssprint_r>
   2c0d8:	2800      	cmp	r0, #0
   2c0da:	f47e af35 	bne.w	2af48 <_svfprintf_r+0x1a4>
   2c0de:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c0e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c0e2:	46c8      	mov	r8, r9
   2c0e4:	e64f      	b.n	2bd86 <_svfprintf_r+0xfe2>
   2c0e6:	3330      	adds	r3, #48	; 0x30
   2c0e8:	2230      	movs	r2, #48	; 0x30
   2c0ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c0ee:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c0f2:	ab22      	add	r3, sp, #136	; 0x88
   2c0f4:	e70f      	b.n	2bf16 <_svfprintf_r+0x1172>
   2c0f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c0fa:	4413      	add	r3, r2
   2c0fc:	930e      	str	r3, [sp, #56]	; 0x38
   2c0fe:	e775      	b.n	2bfec <_svfprintf_r+0x1248>
   2c100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c102:	e5cb      	b.n	2bc9c <_svfprintf_r+0xef8>
   2c104:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c106:	4e1d      	ldr	r6, [pc, #116]	; (2c17c <_svfprintf_r+0x13d8>)
   2c108:	2b00      	cmp	r3, #0
   2c10a:	bfb6      	itet	lt
   2c10c:	272d      	movlt	r7, #45	; 0x2d
   2c10e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c112:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c116:	4b1a      	ldr	r3, [pc, #104]	; (2c180 <_svfprintf_r+0x13dc>)
   2c118:	f7ff ba2f 	b.w	2b57a <_svfprintf_r+0x7d6>
   2c11c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c11e:	9808      	ldr	r0, [sp, #32]
   2c120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c122:	4639      	mov	r1, r7
   2c124:	f7d4 ff7a 	bl	101c <__aeabi_dcmpeq>
   2c128:	2800      	cmp	r0, #0
   2c12a:	f47f ae7f 	bne.w	2be2c <_svfprintf_r+0x1088>
   2c12e:	f1c5 0501 	rsb	r5, r5, #1
   2c132:	951f      	str	r5, [sp, #124]	; 0x7c
   2c134:	442c      	add	r4, r5
   2c136:	e59e      	b.n	2bc76 <_svfprintf_r+0xed2>
   2c138:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c13a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c13c:	4413      	add	r3, r2
   2c13e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c140:	441a      	add	r2, r3
   2c142:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c146:	920e      	str	r2, [sp, #56]	; 0x38
   2c148:	9308      	str	r3, [sp, #32]
   2c14a:	e5c7      	b.n	2bcdc <_svfprintf_r+0xf38>
   2c14c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c14e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c150:	f1c3 0301 	rsb	r3, r3, #1
   2c154:	441a      	add	r2, r3
   2c156:	4613      	mov	r3, r2
   2c158:	e7d0      	b.n	2c0fc <_svfprintf_r+0x1358>
   2c15a:	f01b 0301 	ands.w	r3, fp, #1
   2c15e:	9312      	str	r3, [sp, #72]	; 0x48
   2c160:	f47f aee2 	bne.w	2bf28 <_svfprintf_r+0x1184>
   2c164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c16a:	9308      	str	r3, [sp, #32]
   2c16c:	e5b6      	b.n	2bcdc <_svfprintf_r+0xf38>
   2c16e:	bf00      	nop
   2c170:	66666667 	.word	0x66666667
   2c174:	00032a9c 	.word	0x00032a9c
   2c178:	00032ab4 	.word	0x00032ab4
   2c17c:	00032a70 	.word	0x00032a70
   2c180:	00032a6c 	.word	0x00032a6c
   2c184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c186:	b913      	cbnz	r3, 2c18e <_svfprintf_r+0x13ea>
   2c188:	f01b 0f01 	tst.w	fp, #1
   2c18c:	d002      	beq.n	2c194 <_svfprintf_r+0x13f0>
   2c18e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c190:	3301      	adds	r3, #1
   2c192:	e7d4      	b.n	2c13e <_svfprintf_r+0x139a>
   2c194:	2301      	movs	r3, #1
   2c196:	e73a      	b.n	2c00e <_svfprintf_r+0x126a>
   2c198:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c19a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c19e:	6828      	ldr	r0, [r5, #0]
   2c1a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2c1a4:	900a      	str	r0, [sp, #40]	; 0x28
   2c1a6:	4628      	mov	r0, r5
   2c1a8:	3004      	adds	r0, #4
   2c1aa:	46a2      	mov	sl, r4
   2c1ac:	900f      	str	r0, [sp, #60]	; 0x3c
   2c1ae:	f7fe be51 	b.w	2ae54 <_svfprintf_r+0xb0>
   2c1b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1b6:	f7ff b867 	b.w	2b288 <_svfprintf_r+0x4e4>
   2c1ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1be:	f7ff ba15 	b.w	2b5ec <_svfprintf_r+0x848>
   2c1c2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2c1c6:	e6a6      	b.n	2bf16 <_svfprintf_r+0x1172>
   2c1c8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1cc:	f7ff b8eb 	b.w	2b3a6 <_svfprintf_r+0x602>
   2c1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c1d2:	230c      	movs	r3, #12
   2c1d4:	6013      	str	r3, [r2, #0]
   2c1d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c1da:	9309      	str	r3, [sp, #36]	; 0x24
   2c1dc:	f7fe bebd 	b.w	2af5a <_svfprintf_r+0x1b6>
   2c1e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1e4:	f7ff b99a 	b.w	2b51c <_svfprintf_r+0x778>
   2c1e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1ec:	f7ff b976 	b.w	2b4dc <_svfprintf_r+0x738>
   2c1f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1f4:	f7ff b959 	b.w	2b4aa <_svfprintf_r+0x706>
   2c1f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1fc:	f7ff b912 	b.w	2b424 <_svfprintf_r+0x680>

0002c200 <__ascii_wctomb>:
   2c200:	b121      	cbz	r1, 2c20c <__ascii_wctomb+0xc>
   2c202:	2aff      	cmp	r2, #255	; 0xff
   2c204:	d804      	bhi.n	2c210 <__ascii_wctomb+0x10>
   2c206:	700a      	strb	r2, [r1, #0]
   2c208:	2001      	movs	r0, #1
   2c20a:	4770      	bx	lr
   2c20c:	4608      	mov	r0, r1
   2c20e:	4770      	bx	lr
   2c210:	238a      	movs	r3, #138	; 0x8a
   2c212:	6003      	str	r3, [r0, #0]
   2c214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c218:	4770      	bx	lr
   2c21a:	bf00      	nop

0002c21c <quorem>:
   2c21c:	6902      	ldr	r2, [r0, #16]
   2c21e:	690b      	ldr	r3, [r1, #16]
   2c220:	4293      	cmp	r3, r2
   2c222:	f300 808d 	bgt.w	2c340 <quorem+0x124>
   2c226:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c22a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2c22e:	f101 0714 	add.w	r7, r1, #20
   2c232:	f100 0b14 	add.w	fp, r0, #20
   2c236:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2c23a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2c23e:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2c242:	b083      	sub	sp, #12
   2c244:	3201      	adds	r2, #1
   2c246:	fbb3 f9f2 	udiv	r9, r3, r2
   2c24a:	eb0b 0304 	add.w	r3, fp, r4
   2c24e:	9400      	str	r4, [sp, #0]
   2c250:	eb07 0a04 	add.w	sl, r7, r4
   2c254:	9301      	str	r3, [sp, #4]
   2c256:	f1b9 0f00 	cmp.w	r9, #0
   2c25a:	d039      	beq.n	2c2d0 <quorem+0xb4>
   2c25c:	2500      	movs	r5, #0
   2c25e:	462e      	mov	r6, r5
   2c260:	46bc      	mov	ip, r7
   2c262:	46de      	mov	lr, fp
   2c264:	f85c 4b04 	ldr.w	r4, [ip], #4
   2c268:	f8de 3000 	ldr.w	r3, [lr]
   2c26c:	b2a2      	uxth	r2, r4
   2c26e:	fb09 5502 	mla	r5, r9, r2, r5
   2c272:	0c22      	lsrs	r2, r4, #16
   2c274:	0c2c      	lsrs	r4, r5, #16
   2c276:	fb09 4202 	mla	r2, r9, r2, r4
   2c27a:	b2ad      	uxth	r5, r5
   2c27c:	1b75      	subs	r5, r6, r5
   2c27e:	b296      	uxth	r6, r2
   2c280:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2c284:	fa15 f383 	uxtah	r3, r5, r3
   2c288:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2c28c:	b29b      	uxth	r3, r3
   2c28e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2c292:	45e2      	cmp	sl, ip
   2c294:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2c298:	f84e 3b04 	str.w	r3, [lr], #4
   2c29c:	ea4f 4626 	mov.w	r6, r6, asr #16
   2c2a0:	d2e0      	bcs.n	2c264 <quorem+0x48>
   2c2a2:	9b00      	ldr	r3, [sp, #0]
   2c2a4:	f85b 3003 	ldr.w	r3, [fp, r3]
   2c2a8:	b993      	cbnz	r3, 2c2d0 <quorem+0xb4>
   2c2aa:	9c01      	ldr	r4, [sp, #4]
   2c2ac:	1f23      	subs	r3, r4, #4
   2c2ae:	459b      	cmp	fp, r3
   2c2b0:	d20c      	bcs.n	2c2cc <quorem+0xb0>
   2c2b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c2b6:	b94b      	cbnz	r3, 2c2cc <quorem+0xb0>
   2c2b8:	f1a4 0308 	sub.w	r3, r4, #8
   2c2bc:	e002      	b.n	2c2c4 <quorem+0xa8>
   2c2be:	681a      	ldr	r2, [r3, #0]
   2c2c0:	3b04      	subs	r3, #4
   2c2c2:	b91a      	cbnz	r2, 2c2cc <quorem+0xb0>
   2c2c4:	459b      	cmp	fp, r3
   2c2c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2c2ca:	d3f8      	bcc.n	2c2be <quorem+0xa2>
   2c2cc:	f8c0 8010 	str.w	r8, [r0, #16]
   2c2d0:	4604      	mov	r4, r0
   2c2d2:	f001 fc2b 	bl	2db2c <__mcmp>
   2c2d6:	2800      	cmp	r0, #0
   2c2d8:	db2e      	blt.n	2c338 <quorem+0x11c>
   2c2da:	f109 0901 	add.w	r9, r9, #1
   2c2de:	465d      	mov	r5, fp
   2c2e0:	2300      	movs	r3, #0
   2c2e2:	f857 1b04 	ldr.w	r1, [r7], #4
   2c2e6:	6828      	ldr	r0, [r5, #0]
   2c2e8:	b28a      	uxth	r2, r1
   2c2ea:	1a9a      	subs	r2, r3, r2
   2c2ec:	0c0b      	lsrs	r3, r1, #16
   2c2ee:	fa12 f280 	uxtah	r2, r2, r0
   2c2f2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2c2f6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2c2fa:	b292      	uxth	r2, r2
   2c2fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2c300:	45ba      	cmp	sl, r7
   2c302:	f845 2b04 	str.w	r2, [r5], #4
   2c306:	ea4f 4323 	mov.w	r3, r3, asr #16
   2c30a:	d2ea      	bcs.n	2c2e2 <quorem+0xc6>
   2c30c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2c310:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2c314:	b982      	cbnz	r2, 2c338 <quorem+0x11c>
   2c316:	1f1a      	subs	r2, r3, #4
   2c318:	4593      	cmp	fp, r2
   2c31a:	d20b      	bcs.n	2c334 <quorem+0x118>
   2c31c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2c320:	b942      	cbnz	r2, 2c334 <quorem+0x118>
   2c322:	3b08      	subs	r3, #8
   2c324:	e002      	b.n	2c32c <quorem+0x110>
   2c326:	681a      	ldr	r2, [r3, #0]
   2c328:	3b04      	subs	r3, #4
   2c32a:	b91a      	cbnz	r2, 2c334 <quorem+0x118>
   2c32c:	459b      	cmp	fp, r3
   2c32e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2c332:	d3f8      	bcc.n	2c326 <quorem+0x10a>
   2c334:	f8c4 8010 	str.w	r8, [r4, #16]
   2c338:	4648      	mov	r0, r9
   2c33a:	b003      	add	sp, #12
   2c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c340:	2000      	movs	r0, #0
   2c342:	4770      	bx	lr
   2c344:	0000      	movs	r0, r0
	...

0002c348 <_dtoa_r>:
   2c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c34c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2c34e:	b09b      	sub	sp, #108	; 0x6c
   2c350:	4604      	mov	r4, r0
   2c352:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2c354:	4692      	mov	sl, r2
   2c356:	469b      	mov	fp, r3
   2c358:	b141      	cbz	r1, 2c36c <_dtoa_r+0x24>
   2c35a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2c35c:	604a      	str	r2, [r1, #4]
   2c35e:	2301      	movs	r3, #1
   2c360:	4093      	lsls	r3, r2
   2c362:	608b      	str	r3, [r1, #8]
   2c364:	f001 fa0a 	bl	2d77c <_Bfree>
   2c368:	2300      	movs	r3, #0
   2c36a:	6423      	str	r3, [r4, #64]	; 0x40
   2c36c:	f1bb 0f00 	cmp.w	fp, #0
   2c370:	465d      	mov	r5, fp
   2c372:	db35      	blt.n	2c3e0 <_dtoa_r+0x98>
   2c374:	2300      	movs	r3, #0
   2c376:	6033      	str	r3, [r6, #0]
   2c378:	4b9d      	ldr	r3, [pc, #628]	; (2c5f0 <_dtoa_r+0x2a8>)
   2c37a:	43ab      	bics	r3, r5
   2c37c:	d015      	beq.n	2c3aa <_dtoa_r+0x62>
   2c37e:	4650      	mov	r0, sl
   2c380:	4659      	mov	r1, fp
   2c382:	2200      	movs	r2, #0
   2c384:	2300      	movs	r3, #0
   2c386:	f7d4 fe49 	bl	101c <__aeabi_dcmpeq>
   2c38a:	4680      	mov	r8, r0
   2c38c:	2800      	cmp	r0, #0
   2c38e:	d02d      	beq.n	2c3ec <_dtoa_r+0xa4>
   2c390:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c392:	2301      	movs	r3, #1
   2c394:	6013      	str	r3, [r2, #0]
   2c396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c398:	2b00      	cmp	r3, #0
   2c39a:	f000 80bd 	beq.w	2c518 <_dtoa_r+0x1d0>
   2c39e:	4895      	ldr	r0, [pc, #596]	; (2c5f4 <_dtoa_r+0x2ac>)
   2c3a0:	6018      	str	r0, [r3, #0]
   2c3a2:	3801      	subs	r0, #1
   2c3a4:	b01b      	add	sp, #108	; 0x6c
   2c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c3ac:	f242 730f 	movw	r3, #9999	; 0x270f
   2c3b0:	6013      	str	r3, [r2, #0]
   2c3b2:	f1ba 0f00 	cmp.w	sl, #0
   2c3b6:	d10d      	bne.n	2c3d4 <_dtoa_r+0x8c>
   2c3b8:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2c3bc:	b955      	cbnz	r5, 2c3d4 <_dtoa_r+0x8c>
   2c3be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c3c0:	488d      	ldr	r0, [pc, #564]	; (2c5f8 <_dtoa_r+0x2b0>)
   2c3c2:	2b00      	cmp	r3, #0
   2c3c4:	d0ee      	beq.n	2c3a4 <_dtoa_r+0x5c>
   2c3c6:	f100 0308 	add.w	r3, r0, #8
   2c3ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2c3cc:	6013      	str	r3, [r2, #0]
   2c3ce:	b01b      	add	sp, #108	; 0x6c
   2c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c3d6:	4889      	ldr	r0, [pc, #548]	; (2c5fc <_dtoa_r+0x2b4>)
   2c3d8:	2b00      	cmp	r3, #0
   2c3da:	d0e3      	beq.n	2c3a4 <_dtoa_r+0x5c>
   2c3dc:	1cc3      	adds	r3, r0, #3
   2c3de:	e7f4      	b.n	2c3ca <_dtoa_r+0x82>
   2c3e0:	2301      	movs	r3, #1
   2c3e2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2c3e6:	6033      	str	r3, [r6, #0]
   2c3e8:	46ab      	mov	fp, r5
   2c3ea:	e7c5      	b.n	2c378 <_dtoa_r+0x30>
   2c3ec:	aa18      	add	r2, sp, #96	; 0x60
   2c3ee:	ab19      	add	r3, sp, #100	; 0x64
   2c3f0:	9201      	str	r2, [sp, #4]
   2c3f2:	9300      	str	r3, [sp, #0]
   2c3f4:	4652      	mov	r2, sl
   2c3f6:	465b      	mov	r3, fp
   2c3f8:	4620      	mov	r0, r4
   2c3fa:	f001 fc37 	bl	2dc6c <__d2b>
   2c3fe:	0d2b      	lsrs	r3, r5, #20
   2c400:	4681      	mov	r9, r0
   2c402:	d071      	beq.n	2c4e8 <_dtoa_r+0x1a0>
   2c404:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2c408:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2c40c:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2c40e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2c412:	4650      	mov	r0, sl
   2c414:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2c418:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2c41c:	2200      	movs	r2, #0
   2c41e:	4b78      	ldr	r3, [pc, #480]	; (2c600 <_dtoa_r+0x2b8>)
   2c420:	f7d4 f9e0 	bl	7e4 <__aeabi_dsub>
   2c424:	a36c      	add	r3, pc, #432	; (adr r3, 2c5d8 <_dtoa_r+0x290>)
   2c426:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c42a:	f7d4 fb8f 	bl	b4c <__aeabi_dmul>
   2c42e:	a36c      	add	r3, pc, #432	; (adr r3, 2c5e0 <_dtoa_r+0x298>)
   2c430:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c434:	f7d4 f9d8 	bl	7e8 <__adddf3>
   2c438:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2c43c:	4630      	mov	r0, r6
   2c43e:	f7d4 fb1f 	bl	a80 <__aeabi_i2d>
   2c442:	a369      	add	r3, pc, #420	; (adr r3, 2c5e8 <_dtoa_r+0x2a0>)
   2c444:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c448:	f7d4 fb80 	bl	b4c <__aeabi_dmul>
   2c44c:	4602      	mov	r2, r0
   2c44e:	460b      	mov	r3, r1
   2c450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2c454:	f7d4 f9c8 	bl	7e8 <__adddf3>
   2c458:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2c45c:	f7d4 fe26 	bl	10ac <__aeabi_d2iz>
   2c460:	2200      	movs	r2, #0
   2c462:	9002      	str	r0, [sp, #8]
   2c464:	2300      	movs	r3, #0
   2c466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2c46a:	f7d4 fde1 	bl	1030 <__aeabi_dcmplt>
   2c46e:	2800      	cmp	r0, #0
   2c470:	f040 8173 	bne.w	2c75a <_dtoa_r+0x412>
   2c474:	9d02      	ldr	r5, [sp, #8]
   2c476:	2d16      	cmp	r5, #22
   2c478:	f200 815d 	bhi.w	2c736 <_dtoa_r+0x3ee>
   2c47c:	4b61      	ldr	r3, [pc, #388]	; (2c604 <_dtoa_r+0x2bc>)
   2c47e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2c482:	e9d3 0100 	ldrd	r0, r1, [r3]
   2c486:	4652      	mov	r2, sl
   2c488:	465b      	mov	r3, fp
   2c48a:	f7d4 fdef 	bl	106c <__aeabi_dcmpgt>
   2c48e:	2800      	cmp	r0, #0
   2c490:	f000 81c5 	beq.w	2c81e <_dtoa_r+0x4d6>
   2c494:	1e6b      	subs	r3, r5, #1
   2c496:	9302      	str	r3, [sp, #8]
   2c498:	2300      	movs	r3, #0
   2c49a:	930e      	str	r3, [sp, #56]	; 0x38
   2c49c:	1bbf      	subs	r7, r7, r6
   2c49e:	1e7b      	subs	r3, r7, #1
   2c4a0:	9306      	str	r3, [sp, #24]
   2c4a2:	f100 8154 	bmi.w	2c74e <_dtoa_r+0x406>
   2c4a6:	2300      	movs	r3, #0
   2c4a8:	9308      	str	r3, [sp, #32]
   2c4aa:	9b02      	ldr	r3, [sp, #8]
   2c4ac:	2b00      	cmp	r3, #0
   2c4ae:	f2c0 8145 	blt.w	2c73c <_dtoa_r+0x3f4>
   2c4b2:	9a06      	ldr	r2, [sp, #24]
   2c4b4:	930d      	str	r3, [sp, #52]	; 0x34
   2c4b6:	4611      	mov	r1, r2
   2c4b8:	4419      	add	r1, r3
   2c4ba:	2300      	movs	r3, #0
   2c4bc:	9106      	str	r1, [sp, #24]
   2c4be:	930c      	str	r3, [sp, #48]	; 0x30
   2c4c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c4c2:	2b09      	cmp	r3, #9
   2c4c4:	d82a      	bhi.n	2c51c <_dtoa_r+0x1d4>
   2c4c6:	2b05      	cmp	r3, #5
   2c4c8:	f340 865b 	ble.w	2d182 <_dtoa_r+0xe3a>
   2c4cc:	3b04      	subs	r3, #4
   2c4ce:	9324      	str	r3, [sp, #144]	; 0x90
   2c4d0:	2500      	movs	r5, #0
   2c4d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c4d4:	3b02      	subs	r3, #2
   2c4d6:	2b03      	cmp	r3, #3
   2c4d8:	f200 8642 	bhi.w	2d160 <_dtoa_r+0xe18>
   2c4dc:	e8df f013 	tbh	[pc, r3, lsl #1]
   2c4e0:	02c903d4 	.word	0x02c903d4
   2c4e4:	046103df 	.word	0x046103df
   2c4e8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2c4ea:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2c4ec:	443e      	add	r6, r7
   2c4ee:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2c4f2:	2b20      	cmp	r3, #32
   2c4f4:	f340 818e 	ble.w	2c814 <_dtoa_r+0x4cc>
   2c4f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2c4fc:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2c500:	409d      	lsls	r5, r3
   2c502:	fa2a f000 	lsr.w	r0, sl, r0
   2c506:	4328      	orrs	r0, r5
   2c508:	f7d4 faaa 	bl	a60 <__aeabi_ui2d>
   2c50c:	2301      	movs	r3, #1
   2c50e:	3e01      	subs	r6, #1
   2c510:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2c514:	9314      	str	r3, [sp, #80]	; 0x50
   2c516:	e781      	b.n	2c41c <_dtoa_r+0xd4>
   2c518:	483b      	ldr	r0, [pc, #236]	; (2c608 <_dtoa_r+0x2c0>)
   2c51a:	e743      	b.n	2c3a4 <_dtoa_r+0x5c>
   2c51c:	2100      	movs	r1, #0
   2c51e:	6461      	str	r1, [r4, #68]	; 0x44
   2c520:	4620      	mov	r0, r4
   2c522:	9125      	str	r1, [sp, #148]	; 0x94
   2c524:	f001 f904 	bl	2d730 <_Balloc>
   2c528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c52c:	930a      	str	r3, [sp, #40]	; 0x28
   2c52e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2c530:	930f      	str	r3, [sp, #60]	; 0x3c
   2c532:	2301      	movs	r3, #1
   2c534:	9004      	str	r0, [sp, #16]
   2c536:	6420      	str	r0, [r4, #64]	; 0x40
   2c538:	9224      	str	r2, [sp, #144]	; 0x90
   2c53a:	930b      	str	r3, [sp, #44]	; 0x2c
   2c53c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c53e:	2b00      	cmp	r3, #0
   2c540:	f2c0 80d9 	blt.w	2c6f6 <_dtoa_r+0x3ae>
   2c544:	9a02      	ldr	r2, [sp, #8]
   2c546:	2a0e      	cmp	r2, #14
   2c548:	f300 80d5 	bgt.w	2c6f6 <_dtoa_r+0x3ae>
   2c54c:	4b2d      	ldr	r3, [pc, #180]	; (2c604 <_dtoa_r+0x2bc>)
   2c54e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2c552:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c556:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2c55a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c55c:	2b00      	cmp	r3, #0
   2c55e:	f2c0 83ba 	blt.w	2ccd6 <_dtoa_r+0x98e>
   2c562:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2c566:	4650      	mov	r0, sl
   2c568:	462a      	mov	r2, r5
   2c56a:	4633      	mov	r3, r6
   2c56c:	4659      	mov	r1, fp
   2c56e:	f7d4 fc17 	bl	da0 <__aeabi_ddiv>
   2c572:	f7d4 fd9b 	bl	10ac <__aeabi_d2iz>
   2c576:	4680      	mov	r8, r0
   2c578:	f7d4 fa82 	bl	a80 <__aeabi_i2d>
   2c57c:	462a      	mov	r2, r5
   2c57e:	4633      	mov	r3, r6
   2c580:	f7d4 fae4 	bl	b4c <__aeabi_dmul>
   2c584:	460b      	mov	r3, r1
   2c586:	4602      	mov	r2, r0
   2c588:	4659      	mov	r1, fp
   2c58a:	4650      	mov	r0, sl
   2c58c:	f7d4 f92a 	bl	7e4 <__aeabi_dsub>
   2c590:	9d04      	ldr	r5, [sp, #16]
   2c592:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2c596:	702b      	strb	r3, [r5, #0]
   2c598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c59a:	2b01      	cmp	r3, #1
   2c59c:	4606      	mov	r6, r0
   2c59e:	460f      	mov	r7, r1
   2c5a0:	f105 0501 	add.w	r5, r5, #1
   2c5a4:	d068      	beq.n	2c678 <_dtoa_r+0x330>
   2c5a6:	2200      	movs	r2, #0
   2c5a8:	4b18      	ldr	r3, [pc, #96]	; (2c60c <_dtoa_r+0x2c4>)
   2c5aa:	f7d4 facf 	bl	b4c <__aeabi_dmul>
   2c5ae:	2200      	movs	r2, #0
   2c5b0:	2300      	movs	r3, #0
   2c5b2:	4606      	mov	r6, r0
   2c5b4:	460f      	mov	r7, r1
   2c5b6:	f7d4 fd31 	bl	101c <__aeabi_dcmpeq>
   2c5ba:	2800      	cmp	r0, #0
   2c5bc:	f040 8088 	bne.w	2c6d0 <_dtoa_r+0x388>
   2c5c0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2c5c4:	f04f 0a00 	mov.w	sl, #0
   2c5c8:	f8df b040 	ldr.w	fp, [pc, #64]	; 2c60c <_dtoa_r+0x2c4>
   2c5cc:	940c      	str	r4, [sp, #48]	; 0x30
   2c5ce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2c5d2:	e028      	b.n	2c626 <_dtoa_r+0x2de>
   2c5d4:	f3af 8000 	nop.w
   2c5d8:	636f4361 	.word	0x636f4361
   2c5dc:	3fd287a7 	.word	0x3fd287a7
   2c5e0:	8b60c8b3 	.word	0x8b60c8b3
   2c5e4:	3fc68a28 	.word	0x3fc68a28
   2c5e8:	509f79fb 	.word	0x509f79fb
   2c5ec:	3fd34413 	.word	0x3fd34413
   2c5f0:	7ff00000 	.word	0x7ff00000
   2c5f4:	000325dd 	.word	0x000325dd
   2c5f8:	00032bc8 	.word	0x00032bc8
   2c5fc:	00032bd4 	.word	0x00032bd4
   2c600:	3ff80000 	.word	0x3ff80000
   2c604:	00032c00 	.word	0x00032c00
   2c608:	000325dc 	.word	0x000325dc
   2c60c:	40240000 	.word	0x40240000
   2c610:	f7d4 fa9c 	bl	b4c <__aeabi_dmul>
   2c614:	2200      	movs	r2, #0
   2c616:	2300      	movs	r3, #0
   2c618:	4606      	mov	r6, r0
   2c61a:	460f      	mov	r7, r1
   2c61c:	f7d4 fcfe 	bl	101c <__aeabi_dcmpeq>
   2c620:	2800      	cmp	r0, #0
   2c622:	f040 83c1 	bne.w	2cda8 <_dtoa_r+0xa60>
   2c626:	4642      	mov	r2, r8
   2c628:	464b      	mov	r3, r9
   2c62a:	4630      	mov	r0, r6
   2c62c:	4639      	mov	r1, r7
   2c62e:	f7d4 fbb7 	bl	da0 <__aeabi_ddiv>
   2c632:	f7d4 fd3b 	bl	10ac <__aeabi_d2iz>
   2c636:	4604      	mov	r4, r0
   2c638:	f7d4 fa22 	bl	a80 <__aeabi_i2d>
   2c63c:	4642      	mov	r2, r8
   2c63e:	464b      	mov	r3, r9
   2c640:	f7d4 fa84 	bl	b4c <__aeabi_dmul>
   2c644:	4602      	mov	r2, r0
   2c646:	460b      	mov	r3, r1
   2c648:	4630      	mov	r0, r6
   2c64a:	4639      	mov	r1, r7
   2c64c:	f7d4 f8ca 	bl	7e4 <__aeabi_dsub>
   2c650:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2c654:	9e04      	ldr	r6, [sp, #16]
   2c656:	f805 eb01 	strb.w	lr, [r5], #1
   2c65a:	eba5 0e06 	sub.w	lr, r5, r6
   2c65e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2c660:	45b6      	cmp	lr, r6
   2c662:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2c666:	4652      	mov	r2, sl
   2c668:	465b      	mov	r3, fp
   2c66a:	d1d1      	bne.n	2c610 <_dtoa_r+0x2c8>
   2c66c:	46a0      	mov	r8, r4
   2c66e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2c672:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c674:	4606      	mov	r6, r0
   2c676:	460f      	mov	r7, r1
   2c678:	4632      	mov	r2, r6
   2c67a:	463b      	mov	r3, r7
   2c67c:	4630      	mov	r0, r6
   2c67e:	4639      	mov	r1, r7
   2c680:	f7d4 f8b2 	bl	7e8 <__adddf3>
   2c684:	4606      	mov	r6, r0
   2c686:	460f      	mov	r7, r1
   2c688:	4602      	mov	r2, r0
   2c68a:	460b      	mov	r3, r1
   2c68c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2c690:	f7d4 fcce 	bl	1030 <__aeabi_dcmplt>
   2c694:	b948      	cbnz	r0, 2c6aa <_dtoa_r+0x362>
   2c696:	4632      	mov	r2, r6
   2c698:	463b      	mov	r3, r7
   2c69a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2c69e:	f7d4 fcbd 	bl	101c <__aeabi_dcmpeq>
   2c6a2:	b1a8      	cbz	r0, 2c6d0 <_dtoa_r+0x388>
   2c6a4:	f018 0f01 	tst.w	r8, #1
   2c6a8:	d012      	beq.n	2c6d0 <_dtoa_r+0x388>
   2c6aa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2c6ae:	9a04      	ldr	r2, [sp, #16]
   2c6b0:	1e6b      	subs	r3, r5, #1
   2c6b2:	e004      	b.n	2c6be <_dtoa_r+0x376>
   2c6b4:	429a      	cmp	r2, r3
   2c6b6:	f000 8401 	beq.w	2cebc <_dtoa_r+0xb74>
   2c6ba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2c6be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2c6c2:	f103 0501 	add.w	r5, r3, #1
   2c6c6:	d0f5      	beq.n	2c6b4 <_dtoa_r+0x36c>
   2c6c8:	f108 0801 	add.w	r8, r8, #1
   2c6cc:	f883 8000 	strb.w	r8, [r3]
   2c6d0:	4649      	mov	r1, r9
   2c6d2:	4620      	mov	r0, r4
   2c6d4:	f001 f852 	bl	2d77c <_Bfree>
   2c6d8:	2200      	movs	r2, #0
   2c6da:	9b02      	ldr	r3, [sp, #8]
   2c6dc:	702a      	strb	r2, [r5, #0]
   2c6de:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c6e0:	3301      	adds	r3, #1
   2c6e2:	6013      	str	r3, [r2, #0]
   2c6e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c6e6:	2b00      	cmp	r3, #0
   2c6e8:	f000 839e 	beq.w	2ce28 <_dtoa_r+0xae0>
   2c6ec:	9804      	ldr	r0, [sp, #16]
   2c6ee:	601d      	str	r5, [r3, #0]
   2c6f0:	b01b      	add	sp, #108	; 0x6c
   2c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c6f8:	2a00      	cmp	r2, #0
   2c6fa:	d03e      	beq.n	2c77a <_dtoa_r+0x432>
   2c6fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2c6fe:	2a01      	cmp	r2, #1
   2c700:	f340 8311 	ble.w	2cd26 <_dtoa_r+0x9de>
   2c704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c708:	1e5f      	subs	r7, r3, #1
   2c70a:	42ba      	cmp	r2, r7
   2c70c:	f2c0 838f 	blt.w	2ce2e <_dtoa_r+0xae6>
   2c710:	1bd7      	subs	r7, r2, r7
   2c712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c714:	2b00      	cmp	r3, #0
   2c716:	f2c0 848b 	blt.w	2d030 <_dtoa_r+0xce8>
   2c71a:	9d08      	ldr	r5, [sp, #32]
   2c71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c71e:	9a08      	ldr	r2, [sp, #32]
   2c720:	441a      	add	r2, r3
   2c722:	9208      	str	r2, [sp, #32]
   2c724:	9a06      	ldr	r2, [sp, #24]
   2c726:	2101      	movs	r1, #1
   2c728:	441a      	add	r2, r3
   2c72a:	4620      	mov	r0, r4
   2c72c:	9206      	str	r2, [sp, #24]
   2c72e:	f001 f8bf 	bl	2d8b0 <__i2b>
   2c732:	4606      	mov	r6, r0
   2c734:	e024      	b.n	2c780 <_dtoa_r+0x438>
   2c736:	2301      	movs	r3, #1
   2c738:	930e      	str	r3, [sp, #56]	; 0x38
   2c73a:	e6af      	b.n	2c49c <_dtoa_r+0x154>
   2c73c:	9a08      	ldr	r2, [sp, #32]
   2c73e:	9b02      	ldr	r3, [sp, #8]
   2c740:	1ad2      	subs	r2, r2, r3
   2c742:	425b      	negs	r3, r3
   2c744:	930c      	str	r3, [sp, #48]	; 0x30
   2c746:	2300      	movs	r3, #0
   2c748:	9208      	str	r2, [sp, #32]
   2c74a:	930d      	str	r3, [sp, #52]	; 0x34
   2c74c:	e6b8      	b.n	2c4c0 <_dtoa_r+0x178>
   2c74e:	f1c7 0301 	rsb	r3, r7, #1
   2c752:	9308      	str	r3, [sp, #32]
   2c754:	2300      	movs	r3, #0
   2c756:	9306      	str	r3, [sp, #24]
   2c758:	e6a7      	b.n	2c4aa <_dtoa_r+0x162>
   2c75a:	9d02      	ldr	r5, [sp, #8]
   2c75c:	4628      	mov	r0, r5
   2c75e:	f7d4 f98f 	bl	a80 <__aeabi_i2d>
   2c762:	4602      	mov	r2, r0
   2c764:	460b      	mov	r3, r1
   2c766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2c76a:	f7d4 fc57 	bl	101c <__aeabi_dcmpeq>
   2c76e:	2800      	cmp	r0, #0
   2c770:	f47f ae80 	bne.w	2c474 <_dtoa_r+0x12c>
   2c774:	1e6b      	subs	r3, r5, #1
   2c776:	9302      	str	r3, [sp, #8]
   2c778:	e67c      	b.n	2c474 <_dtoa_r+0x12c>
   2c77a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2c77c:	9d08      	ldr	r5, [sp, #32]
   2c77e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2c780:	2d00      	cmp	r5, #0
   2c782:	dd0c      	ble.n	2c79e <_dtoa_r+0x456>
   2c784:	9906      	ldr	r1, [sp, #24]
   2c786:	2900      	cmp	r1, #0
   2c788:	460b      	mov	r3, r1
   2c78a:	dd08      	ble.n	2c79e <_dtoa_r+0x456>
   2c78c:	42a9      	cmp	r1, r5
   2c78e:	9a08      	ldr	r2, [sp, #32]
   2c790:	bfa8      	it	ge
   2c792:	462b      	movge	r3, r5
   2c794:	1ad2      	subs	r2, r2, r3
   2c796:	1aed      	subs	r5, r5, r3
   2c798:	1acb      	subs	r3, r1, r3
   2c79a:	9208      	str	r2, [sp, #32]
   2c79c:	9306      	str	r3, [sp, #24]
   2c79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c7a0:	b1d3      	cbz	r3, 2c7d8 <_dtoa_r+0x490>
   2c7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c7a4:	2b00      	cmp	r3, #0
   2c7a6:	f000 82b7 	beq.w	2cd18 <_dtoa_r+0x9d0>
   2c7aa:	2f00      	cmp	r7, #0
   2c7ac:	dd10      	ble.n	2c7d0 <_dtoa_r+0x488>
   2c7ae:	4631      	mov	r1, r6
   2c7b0:	463a      	mov	r2, r7
   2c7b2:	4620      	mov	r0, r4
   2c7b4:	f001 f918 	bl	2d9e8 <__pow5mult>
   2c7b8:	464a      	mov	r2, r9
   2c7ba:	4601      	mov	r1, r0
   2c7bc:	4606      	mov	r6, r0
   2c7be:	4620      	mov	r0, r4
   2c7c0:	f001 f880 	bl	2d8c4 <__multiply>
   2c7c4:	4649      	mov	r1, r9
   2c7c6:	4680      	mov	r8, r0
   2c7c8:	4620      	mov	r0, r4
   2c7ca:	f000 ffd7 	bl	2d77c <_Bfree>
   2c7ce:	46c1      	mov	r9, r8
   2c7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c7d2:	1bda      	subs	r2, r3, r7
   2c7d4:	f040 82a1 	bne.w	2cd1a <_dtoa_r+0x9d2>
   2c7d8:	2101      	movs	r1, #1
   2c7da:	4620      	mov	r0, r4
   2c7dc:	f001 f868 	bl	2d8b0 <__i2b>
   2c7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c7e2:	2b00      	cmp	r3, #0
   2c7e4:	4680      	mov	r8, r0
   2c7e6:	dd1c      	ble.n	2c822 <_dtoa_r+0x4da>
   2c7e8:	4601      	mov	r1, r0
   2c7ea:	461a      	mov	r2, r3
   2c7ec:	4620      	mov	r0, r4
   2c7ee:	f001 f8fb 	bl	2d9e8 <__pow5mult>
   2c7f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c7f4:	2b01      	cmp	r3, #1
   2c7f6:	4680      	mov	r8, r0
   2c7f8:	f340 8254 	ble.w	2cca4 <_dtoa_r+0x95c>
   2c7fc:	2300      	movs	r3, #0
   2c7fe:	930c      	str	r3, [sp, #48]	; 0x30
   2c800:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2c804:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2c808:	6918      	ldr	r0, [r3, #16]
   2c80a:	f001 f801 	bl	2d810 <__hi0bits>
   2c80e:	f1c0 0020 	rsb	r0, r0, #32
   2c812:	e010      	b.n	2c836 <_dtoa_r+0x4ee>
   2c814:	f1c3 0520 	rsb	r5, r3, #32
   2c818:	fa0a f005 	lsl.w	r0, sl, r5
   2c81c:	e674      	b.n	2c508 <_dtoa_r+0x1c0>
   2c81e:	900e      	str	r0, [sp, #56]	; 0x38
   2c820:	e63c      	b.n	2c49c <_dtoa_r+0x154>
   2c822:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c824:	2b01      	cmp	r3, #1
   2c826:	f340 8287 	ble.w	2cd38 <_dtoa_r+0x9f0>
   2c82a:	2300      	movs	r3, #0
   2c82c:	930c      	str	r3, [sp, #48]	; 0x30
   2c82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c830:	2001      	movs	r0, #1
   2c832:	2b00      	cmp	r3, #0
   2c834:	d1e4      	bne.n	2c800 <_dtoa_r+0x4b8>
   2c836:	9a06      	ldr	r2, [sp, #24]
   2c838:	4410      	add	r0, r2
   2c83a:	f010 001f 	ands.w	r0, r0, #31
   2c83e:	f000 80a1 	beq.w	2c984 <_dtoa_r+0x63c>
   2c842:	f1c0 0320 	rsb	r3, r0, #32
   2c846:	2b04      	cmp	r3, #4
   2c848:	f340 849e 	ble.w	2d188 <_dtoa_r+0xe40>
   2c84c:	9b08      	ldr	r3, [sp, #32]
   2c84e:	f1c0 001c 	rsb	r0, r0, #28
   2c852:	4403      	add	r3, r0
   2c854:	9308      	str	r3, [sp, #32]
   2c856:	4613      	mov	r3, r2
   2c858:	4403      	add	r3, r0
   2c85a:	4405      	add	r5, r0
   2c85c:	9306      	str	r3, [sp, #24]
   2c85e:	9b08      	ldr	r3, [sp, #32]
   2c860:	2b00      	cmp	r3, #0
   2c862:	dd05      	ble.n	2c870 <_dtoa_r+0x528>
   2c864:	4649      	mov	r1, r9
   2c866:	461a      	mov	r2, r3
   2c868:	4620      	mov	r0, r4
   2c86a:	f001 f90d 	bl	2da88 <__lshift>
   2c86e:	4681      	mov	r9, r0
   2c870:	9b06      	ldr	r3, [sp, #24]
   2c872:	2b00      	cmp	r3, #0
   2c874:	dd05      	ble.n	2c882 <_dtoa_r+0x53a>
   2c876:	4641      	mov	r1, r8
   2c878:	461a      	mov	r2, r3
   2c87a:	4620      	mov	r0, r4
   2c87c:	f001 f904 	bl	2da88 <__lshift>
   2c880:	4680      	mov	r8, r0
   2c882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c884:	2b00      	cmp	r3, #0
   2c886:	f040 8086 	bne.w	2c996 <_dtoa_r+0x64e>
   2c88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c88c:	2b00      	cmp	r3, #0
   2c88e:	f340 8266 	ble.w	2cd5e <_dtoa_r+0xa16>
   2c892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c894:	2b00      	cmp	r3, #0
   2c896:	f000 8098 	beq.w	2c9ca <_dtoa_r+0x682>
   2c89a:	2d00      	cmp	r5, #0
   2c89c:	dd05      	ble.n	2c8aa <_dtoa_r+0x562>
   2c89e:	4631      	mov	r1, r6
   2c8a0:	462a      	mov	r2, r5
   2c8a2:	4620      	mov	r0, r4
   2c8a4:	f001 f8f0 	bl	2da88 <__lshift>
   2c8a8:	4606      	mov	r6, r0
   2c8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c8ac:	2b00      	cmp	r3, #0
   2c8ae:	f040 8337 	bne.w	2cf20 <_dtoa_r+0xbd8>
   2c8b2:	9606      	str	r6, [sp, #24]
   2c8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c8b6:	9a04      	ldr	r2, [sp, #16]
   2c8b8:	f8dd b018 	ldr.w	fp, [sp, #24]
   2c8bc:	3b01      	subs	r3, #1
   2c8be:	18d3      	adds	r3, r2, r3
   2c8c0:	930b      	str	r3, [sp, #44]	; 0x2c
   2c8c2:	f00a 0301 	and.w	r3, sl, #1
   2c8c6:	930c      	str	r3, [sp, #48]	; 0x30
   2c8c8:	4617      	mov	r7, r2
   2c8ca:	46c2      	mov	sl, r8
   2c8cc:	4651      	mov	r1, sl
   2c8ce:	4648      	mov	r0, r9
   2c8d0:	f7ff fca4 	bl	2c21c <quorem>
   2c8d4:	4631      	mov	r1, r6
   2c8d6:	4605      	mov	r5, r0
   2c8d8:	4648      	mov	r0, r9
   2c8da:	f001 f927 	bl	2db2c <__mcmp>
   2c8de:	465a      	mov	r2, fp
   2c8e0:	900a      	str	r0, [sp, #40]	; 0x28
   2c8e2:	4651      	mov	r1, sl
   2c8e4:	4620      	mov	r0, r4
   2c8e6:	f001 f93d 	bl	2db64 <__mdiff>
   2c8ea:	68c2      	ldr	r2, [r0, #12]
   2c8ec:	4680      	mov	r8, r0
   2c8ee:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2c8f2:	2a00      	cmp	r2, #0
   2c8f4:	f040 822b 	bne.w	2cd4e <_dtoa_r+0xa06>
   2c8f8:	4601      	mov	r1, r0
   2c8fa:	4648      	mov	r0, r9
   2c8fc:	9308      	str	r3, [sp, #32]
   2c8fe:	f001 f915 	bl	2db2c <__mcmp>
   2c902:	4641      	mov	r1, r8
   2c904:	9006      	str	r0, [sp, #24]
   2c906:	4620      	mov	r0, r4
   2c908:	f000 ff38 	bl	2d77c <_Bfree>
   2c90c:	9a06      	ldr	r2, [sp, #24]
   2c90e:	9b08      	ldr	r3, [sp, #32]
   2c910:	b932      	cbnz	r2, 2c920 <_dtoa_r+0x5d8>
   2c912:	9924      	ldr	r1, [sp, #144]	; 0x90
   2c914:	b921      	cbnz	r1, 2c920 <_dtoa_r+0x5d8>
   2c916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c918:	2a00      	cmp	r2, #0
   2c91a:	f000 83ef 	beq.w	2d0fc <_dtoa_r+0xdb4>
   2c91e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2c920:	990a      	ldr	r1, [sp, #40]	; 0x28
   2c922:	2900      	cmp	r1, #0
   2c924:	f2c0 829f 	blt.w	2ce66 <_dtoa_r+0xb1e>
   2c928:	d105      	bne.n	2c936 <_dtoa_r+0x5ee>
   2c92a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2c92c:	b919      	cbnz	r1, 2c936 <_dtoa_r+0x5ee>
   2c92e:	990c      	ldr	r1, [sp, #48]	; 0x30
   2c930:	2900      	cmp	r1, #0
   2c932:	f000 8298 	beq.w	2ce66 <_dtoa_r+0xb1e>
   2c936:	2a00      	cmp	r2, #0
   2c938:	f300 8306 	bgt.w	2cf48 <_dtoa_r+0xc00>
   2c93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c93e:	703b      	strb	r3, [r7, #0]
   2c940:	f107 0801 	add.w	r8, r7, #1
   2c944:	4297      	cmp	r7, r2
   2c946:	4645      	mov	r5, r8
   2c948:	f000 830c 	beq.w	2cf64 <_dtoa_r+0xc1c>
   2c94c:	4649      	mov	r1, r9
   2c94e:	2300      	movs	r3, #0
   2c950:	220a      	movs	r2, #10
   2c952:	4620      	mov	r0, r4
   2c954:	f000 ff1c 	bl	2d790 <__multadd>
   2c958:	455e      	cmp	r6, fp
   2c95a:	4681      	mov	r9, r0
   2c95c:	4631      	mov	r1, r6
   2c95e:	f04f 0300 	mov.w	r3, #0
   2c962:	f04f 020a 	mov.w	r2, #10
   2c966:	4620      	mov	r0, r4
   2c968:	f000 81eb 	beq.w	2cd42 <_dtoa_r+0x9fa>
   2c96c:	f000 ff10 	bl	2d790 <__multadd>
   2c970:	4659      	mov	r1, fp
   2c972:	4606      	mov	r6, r0
   2c974:	2300      	movs	r3, #0
   2c976:	220a      	movs	r2, #10
   2c978:	4620      	mov	r0, r4
   2c97a:	f000 ff09 	bl	2d790 <__multadd>
   2c97e:	4647      	mov	r7, r8
   2c980:	4683      	mov	fp, r0
   2c982:	e7a3      	b.n	2c8cc <_dtoa_r+0x584>
   2c984:	201c      	movs	r0, #28
   2c986:	9b08      	ldr	r3, [sp, #32]
   2c988:	4403      	add	r3, r0
   2c98a:	9308      	str	r3, [sp, #32]
   2c98c:	9b06      	ldr	r3, [sp, #24]
   2c98e:	4403      	add	r3, r0
   2c990:	4405      	add	r5, r0
   2c992:	9306      	str	r3, [sp, #24]
   2c994:	e763      	b.n	2c85e <_dtoa_r+0x516>
   2c996:	4641      	mov	r1, r8
   2c998:	4648      	mov	r0, r9
   2c99a:	f001 f8c7 	bl	2db2c <__mcmp>
   2c99e:	2800      	cmp	r0, #0
   2c9a0:	f6bf af73 	bge.w	2c88a <_dtoa_r+0x542>
   2c9a4:	9f02      	ldr	r7, [sp, #8]
   2c9a6:	4649      	mov	r1, r9
   2c9a8:	2300      	movs	r3, #0
   2c9aa:	220a      	movs	r2, #10
   2c9ac:	4620      	mov	r0, r4
   2c9ae:	3f01      	subs	r7, #1
   2c9b0:	9702      	str	r7, [sp, #8]
   2c9b2:	f000 feed 	bl	2d790 <__multadd>
   2c9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c9b8:	4681      	mov	r9, r0
   2c9ba:	2b00      	cmp	r3, #0
   2c9bc:	f040 83b6 	bne.w	2d12c <_dtoa_r+0xde4>
   2c9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c9c2:	2b00      	cmp	r3, #0
   2c9c4:	f340 83bf 	ble.w	2d146 <_dtoa_r+0xdfe>
   2c9c8:	930a      	str	r3, [sp, #40]	; 0x28
   2c9ca:	f8dd b010 	ldr.w	fp, [sp, #16]
   2c9ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2c9d0:	465d      	mov	r5, fp
   2c9d2:	e002      	b.n	2c9da <_dtoa_r+0x692>
   2c9d4:	f000 fedc 	bl	2d790 <__multadd>
   2c9d8:	4681      	mov	r9, r0
   2c9da:	4641      	mov	r1, r8
   2c9dc:	4648      	mov	r0, r9
   2c9de:	f7ff fc1d 	bl	2c21c <quorem>
   2c9e2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2c9e6:	f805 ab01 	strb.w	sl, [r5], #1
   2c9ea:	eba5 030b 	sub.w	r3, r5, fp
   2c9ee:	42bb      	cmp	r3, r7
   2c9f0:	f04f 020a 	mov.w	r2, #10
   2c9f4:	f04f 0300 	mov.w	r3, #0
   2c9f8:	4649      	mov	r1, r9
   2c9fa:	4620      	mov	r0, r4
   2c9fc:	dbea      	blt.n	2c9d4 <_dtoa_r+0x68c>
   2c9fe:	9b04      	ldr	r3, [sp, #16]
   2ca00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ca02:	2a01      	cmp	r2, #1
   2ca04:	bfac      	ite	ge
   2ca06:	189b      	addge	r3, r3, r2
   2ca08:	3301      	addlt	r3, #1
   2ca0a:	461d      	mov	r5, r3
   2ca0c:	f04f 0b00 	mov.w	fp, #0
   2ca10:	4649      	mov	r1, r9
   2ca12:	2201      	movs	r2, #1
   2ca14:	4620      	mov	r0, r4
   2ca16:	f001 f837 	bl	2da88 <__lshift>
   2ca1a:	4641      	mov	r1, r8
   2ca1c:	4681      	mov	r9, r0
   2ca1e:	f001 f885 	bl	2db2c <__mcmp>
   2ca22:	2800      	cmp	r0, #0
   2ca24:	f340 823d 	ble.w	2cea2 <_dtoa_r+0xb5a>
   2ca28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2ca2c:	9904      	ldr	r1, [sp, #16]
   2ca2e:	1e6b      	subs	r3, r5, #1
   2ca30:	e004      	b.n	2ca3c <_dtoa_r+0x6f4>
   2ca32:	428b      	cmp	r3, r1
   2ca34:	f000 81ae 	beq.w	2cd94 <_dtoa_r+0xa4c>
   2ca38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2ca3c:	2a39      	cmp	r2, #57	; 0x39
   2ca3e:	f103 0501 	add.w	r5, r3, #1
   2ca42:	d0f6      	beq.n	2ca32 <_dtoa_r+0x6ea>
   2ca44:	3201      	adds	r2, #1
   2ca46:	701a      	strb	r2, [r3, #0]
   2ca48:	4641      	mov	r1, r8
   2ca4a:	4620      	mov	r0, r4
   2ca4c:	f000 fe96 	bl	2d77c <_Bfree>
   2ca50:	2e00      	cmp	r6, #0
   2ca52:	f43f ae3d 	beq.w	2c6d0 <_dtoa_r+0x388>
   2ca56:	f1bb 0f00 	cmp.w	fp, #0
   2ca5a:	d005      	beq.n	2ca68 <_dtoa_r+0x720>
   2ca5c:	45b3      	cmp	fp, r6
   2ca5e:	d003      	beq.n	2ca68 <_dtoa_r+0x720>
   2ca60:	4659      	mov	r1, fp
   2ca62:	4620      	mov	r0, r4
   2ca64:	f000 fe8a 	bl	2d77c <_Bfree>
   2ca68:	4631      	mov	r1, r6
   2ca6a:	4620      	mov	r0, r4
   2ca6c:	f000 fe86 	bl	2d77c <_Bfree>
   2ca70:	e62e      	b.n	2c6d0 <_dtoa_r+0x388>
   2ca72:	2300      	movs	r3, #0
   2ca74:	930b      	str	r3, [sp, #44]	; 0x2c
   2ca76:	9b02      	ldr	r3, [sp, #8]
   2ca78:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2ca7a:	4413      	add	r3, r2
   2ca7c:	930f      	str	r3, [sp, #60]	; 0x3c
   2ca7e:	3301      	adds	r3, #1
   2ca80:	2b01      	cmp	r3, #1
   2ca82:	461f      	mov	r7, r3
   2ca84:	461e      	mov	r6, r3
   2ca86:	930a      	str	r3, [sp, #40]	; 0x28
   2ca88:	bfb8      	it	lt
   2ca8a:	2701      	movlt	r7, #1
   2ca8c:	2100      	movs	r1, #0
   2ca8e:	2f17      	cmp	r7, #23
   2ca90:	6461      	str	r1, [r4, #68]	; 0x44
   2ca92:	d90a      	bls.n	2caaa <_dtoa_r+0x762>
   2ca94:	2201      	movs	r2, #1
   2ca96:	2304      	movs	r3, #4
   2ca98:	005b      	lsls	r3, r3, #1
   2ca9a:	f103 0014 	add.w	r0, r3, #20
   2ca9e:	4287      	cmp	r7, r0
   2caa0:	4611      	mov	r1, r2
   2caa2:	f102 0201 	add.w	r2, r2, #1
   2caa6:	d2f7      	bcs.n	2ca98 <_dtoa_r+0x750>
   2caa8:	6461      	str	r1, [r4, #68]	; 0x44
   2caaa:	4620      	mov	r0, r4
   2caac:	f000 fe40 	bl	2d730 <_Balloc>
   2cab0:	2e0e      	cmp	r6, #14
   2cab2:	9004      	str	r0, [sp, #16]
   2cab4:	6420      	str	r0, [r4, #64]	; 0x40
   2cab6:	f63f ad41 	bhi.w	2c53c <_dtoa_r+0x1f4>
   2caba:	2d00      	cmp	r5, #0
   2cabc:	f43f ad3e 	beq.w	2c53c <_dtoa_r+0x1f4>
   2cac0:	9902      	ldr	r1, [sp, #8]
   2cac2:	2900      	cmp	r1, #0
   2cac4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2cac8:	f340 8202 	ble.w	2ced0 <_dtoa_r+0xb88>
   2cacc:	4bb8      	ldr	r3, [pc, #736]	; (2cdb0 <_dtoa_r+0xa68>)
   2cace:	f001 020f 	and.w	r2, r1, #15
   2cad2:	110d      	asrs	r5, r1, #4
   2cad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cad8:	06e9      	lsls	r1, r5, #27
   2cada:	e9d3 6700 	ldrd	r6, r7, [r3]
   2cade:	f140 81ae 	bpl.w	2ce3e <_dtoa_r+0xaf6>
   2cae2:	4bb4      	ldr	r3, [pc, #720]	; (2cdb4 <_dtoa_r+0xa6c>)
   2cae4:	4650      	mov	r0, sl
   2cae6:	4659      	mov	r1, fp
   2cae8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2caec:	f7d4 f958 	bl	da0 <__aeabi_ddiv>
   2caf0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2caf4:	f005 050f 	and.w	r5, r5, #15
   2caf8:	f04f 0a03 	mov.w	sl, #3
   2cafc:	b18d      	cbz	r5, 2cb22 <_dtoa_r+0x7da>
   2cafe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2cdb4 <_dtoa_r+0xa6c>
   2cb02:	07ea      	lsls	r2, r5, #31
   2cb04:	d509      	bpl.n	2cb1a <_dtoa_r+0x7d2>
   2cb06:	4630      	mov	r0, r6
   2cb08:	4639      	mov	r1, r7
   2cb0a:	e9d8 2300 	ldrd	r2, r3, [r8]
   2cb0e:	f7d4 f81d 	bl	b4c <__aeabi_dmul>
   2cb12:	f10a 0a01 	add.w	sl, sl, #1
   2cb16:	4606      	mov	r6, r0
   2cb18:	460f      	mov	r7, r1
   2cb1a:	106d      	asrs	r5, r5, #1
   2cb1c:	f108 0808 	add.w	r8, r8, #8
   2cb20:	d1ef      	bne.n	2cb02 <_dtoa_r+0x7ba>
   2cb22:	463b      	mov	r3, r7
   2cb24:	4632      	mov	r2, r6
   2cb26:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2cb2a:	f7d4 f939 	bl	da0 <__aeabi_ddiv>
   2cb2e:	4607      	mov	r7, r0
   2cb30:	4688      	mov	r8, r1
   2cb32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cb34:	b143      	cbz	r3, 2cb48 <_dtoa_r+0x800>
   2cb36:	2200      	movs	r2, #0
   2cb38:	4b9f      	ldr	r3, [pc, #636]	; (2cdb8 <_dtoa_r+0xa70>)
   2cb3a:	4638      	mov	r0, r7
   2cb3c:	4641      	mov	r1, r8
   2cb3e:	f7d4 fa77 	bl	1030 <__aeabi_dcmplt>
   2cb42:	2800      	cmp	r0, #0
   2cb44:	f040 8286 	bne.w	2d054 <_dtoa_r+0xd0c>
   2cb48:	4650      	mov	r0, sl
   2cb4a:	f7d3 ff99 	bl	a80 <__aeabi_i2d>
   2cb4e:	463a      	mov	r2, r7
   2cb50:	4643      	mov	r3, r8
   2cb52:	f7d3 fffb 	bl	b4c <__aeabi_dmul>
   2cb56:	4b99      	ldr	r3, [pc, #612]	; (2cdbc <_dtoa_r+0xa74>)
   2cb58:	2200      	movs	r2, #0
   2cb5a:	f7d3 fe45 	bl	7e8 <__adddf3>
   2cb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cb60:	4605      	mov	r5, r0
   2cb62:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2cb66:	2b00      	cmp	r3, #0
   2cb68:	f000 813e 	beq.w	2cde8 <_dtoa_r+0xaa0>
   2cb6c:	9b02      	ldr	r3, [sp, #8]
   2cb6e:	9315      	str	r3, [sp, #84]	; 0x54
   2cb70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cb72:	9312      	str	r3, [sp, #72]	; 0x48
   2cb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cb76:	2b00      	cmp	r3, #0
   2cb78:	f000 81fa 	beq.w	2cf70 <_dtoa_r+0xc28>
   2cb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2cb7e:	4b8c      	ldr	r3, [pc, #560]	; (2cdb0 <_dtoa_r+0xa68>)
   2cb80:	498f      	ldr	r1, [pc, #572]	; (2cdc0 <_dtoa_r+0xa78>)
   2cb82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cb86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2cb8a:	2000      	movs	r0, #0
   2cb8c:	f7d4 f908 	bl	da0 <__aeabi_ddiv>
   2cb90:	462a      	mov	r2, r5
   2cb92:	4633      	mov	r3, r6
   2cb94:	f7d3 fe26 	bl	7e4 <__aeabi_dsub>
   2cb98:	4682      	mov	sl, r0
   2cb9a:	468b      	mov	fp, r1
   2cb9c:	4638      	mov	r0, r7
   2cb9e:	4641      	mov	r1, r8
   2cba0:	f7d4 fa84 	bl	10ac <__aeabi_d2iz>
   2cba4:	4605      	mov	r5, r0
   2cba6:	f7d3 ff6b 	bl	a80 <__aeabi_i2d>
   2cbaa:	4602      	mov	r2, r0
   2cbac:	460b      	mov	r3, r1
   2cbae:	4638      	mov	r0, r7
   2cbb0:	4641      	mov	r1, r8
   2cbb2:	f7d3 fe17 	bl	7e4 <__aeabi_dsub>
   2cbb6:	3530      	adds	r5, #48	; 0x30
   2cbb8:	fa5f f885 	uxtb.w	r8, r5
   2cbbc:	9d04      	ldr	r5, [sp, #16]
   2cbbe:	4606      	mov	r6, r0
   2cbc0:	460f      	mov	r7, r1
   2cbc2:	f885 8000 	strb.w	r8, [r5]
   2cbc6:	4602      	mov	r2, r0
   2cbc8:	460b      	mov	r3, r1
   2cbca:	4650      	mov	r0, sl
   2cbcc:	4659      	mov	r1, fp
   2cbce:	3501      	adds	r5, #1
   2cbd0:	f7d4 fa4c 	bl	106c <__aeabi_dcmpgt>
   2cbd4:	2800      	cmp	r0, #0
   2cbd6:	d154      	bne.n	2cc82 <_dtoa_r+0x93a>
   2cbd8:	4632      	mov	r2, r6
   2cbda:	463b      	mov	r3, r7
   2cbdc:	2000      	movs	r0, #0
   2cbde:	4976      	ldr	r1, [pc, #472]	; (2cdb8 <_dtoa_r+0xa70>)
   2cbe0:	f7d3 fe00 	bl	7e4 <__aeabi_dsub>
   2cbe4:	4602      	mov	r2, r0
   2cbe6:	460b      	mov	r3, r1
   2cbe8:	4650      	mov	r0, sl
   2cbea:	4659      	mov	r1, fp
   2cbec:	f7d4 fa3e 	bl	106c <__aeabi_dcmpgt>
   2cbf0:	2800      	cmp	r0, #0
   2cbf2:	f040 8270 	bne.w	2d0d6 <_dtoa_r+0xd8e>
   2cbf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2cbf8:	2a01      	cmp	r2, #1
   2cbfa:	f000 8111 	beq.w	2ce20 <_dtoa_r+0xad8>
   2cbfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cc00:	9a04      	ldr	r2, [sp, #16]
   2cc02:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2cc06:	4413      	add	r3, r2
   2cc08:	4699      	mov	r9, r3
   2cc0a:	e00d      	b.n	2cc28 <_dtoa_r+0x8e0>
   2cc0c:	2000      	movs	r0, #0
   2cc0e:	496a      	ldr	r1, [pc, #424]	; (2cdb8 <_dtoa_r+0xa70>)
   2cc10:	f7d3 fde8 	bl	7e4 <__aeabi_dsub>
   2cc14:	4652      	mov	r2, sl
   2cc16:	465b      	mov	r3, fp
   2cc18:	f7d4 fa0a 	bl	1030 <__aeabi_dcmplt>
   2cc1c:	2800      	cmp	r0, #0
   2cc1e:	f040 8258 	bne.w	2d0d2 <_dtoa_r+0xd8a>
   2cc22:	454d      	cmp	r5, r9
   2cc24:	f000 80fa 	beq.w	2ce1c <_dtoa_r+0xad4>
   2cc28:	4650      	mov	r0, sl
   2cc2a:	4659      	mov	r1, fp
   2cc2c:	2200      	movs	r2, #0
   2cc2e:	4b65      	ldr	r3, [pc, #404]	; (2cdc4 <_dtoa_r+0xa7c>)
   2cc30:	f7d3 ff8c 	bl	b4c <__aeabi_dmul>
   2cc34:	2200      	movs	r2, #0
   2cc36:	4b63      	ldr	r3, [pc, #396]	; (2cdc4 <_dtoa_r+0xa7c>)
   2cc38:	4682      	mov	sl, r0
   2cc3a:	468b      	mov	fp, r1
   2cc3c:	4630      	mov	r0, r6
   2cc3e:	4639      	mov	r1, r7
   2cc40:	f7d3 ff84 	bl	b4c <__aeabi_dmul>
   2cc44:	460f      	mov	r7, r1
   2cc46:	4606      	mov	r6, r0
   2cc48:	f7d4 fa30 	bl	10ac <__aeabi_d2iz>
   2cc4c:	4680      	mov	r8, r0
   2cc4e:	f7d3 ff17 	bl	a80 <__aeabi_i2d>
   2cc52:	4602      	mov	r2, r0
   2cc54:	460b      	mov	r3, r1
   2cc56:	4630      	mov	r0, r6
   2cc58:	4639      	mov	r1, r7
   2cc5a:	f7d3 fdc3 	bl	7e4 <__aeabi_dsub>
   2cc5e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2cc62:	fa5f f888 	uxtb.w	r8, r8
   2cc66:	4652      	mov	r2, sl
   2cc68:	465b      	mov	r3, fp
   2cc6a:	f805 8b01 	strb.w	r8, [r5], #1
   2cc6e:	4606      	mov	r6, r0
   2cc70:	460f      	mov	r7, r1
   2cc72:	f7d4 f9dd 	bl	1030 <__aeabi_dcmplt>
   2cc76:	4632      	mov	r2, r6
   2cc78:	463b      	mov	r3, r7
   2cc7a:	2800      	cmp	r0, #0
   2cc7c:	d0c6      	beq.n	2cc0c <_dtoa_r+0x8c4>
   2cc7e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2cc82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2cc84:	9302      	str	r3, [sp, #8]
   2cc86:	e523      	b.n	2c6d0 <_dtoa_r+0x388>
   2cc88:	2300      	movs	r3, #0
   2cc8a:	930b      	str	r3, [sp, #44]	; 0x2c
   2cc8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cc8e:	2b00      	cmp	r3, #0
   2cc90:	f340 80dc 	ble.w	2ce4c <_dtoa_r+0xb04>
   2cc94:	461f      	mov	r7, r3
   2cc96:	461e      	mov	r6, r3
   2cc98:	930f      	str	r3, [sp, #60]	; 0x3c
   2cc9a:	930a      	str	r3, [sp, #40]	; 0x28
   2cc9c:	e6f6      	b.n	2ca8c <_dtoa_r+0x744>
   2cc9e:	2301      	movs	r3, #1
   2cca0:	930b      	str	r3, [sp, #44]	; 0x2c
   2cca2:	e7f3      	b.n	2cc8c <_dtoa_r+0x944>
   2cca4:	f1ba 0f00 	cmp.w	sl, #0
   2cca8:	f47f ada8 	bne.w	2c7fc <_dtoa_r+0x4b4>
   2ccac:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2ccb0:	2b00      	cmp	r3, #0
   2ccb2:	f47f adba 	bne.w	2c82a <_dtoa_r+0x4e2>
   2ccb6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2ccba:	0d3f      	lsrs	r7, r7, #20
   2ccbc:	053f      	lsls	r7, r7, #20
   2ccbe:	2f00      	cmp	r7, #0
   2ccc0:	f000 820d 	beq.w	2d0de <_dtoa_r+0xd96>
   2ccc4:	9b08      	ldr	r3, [sp, #32]
   2ccc6:	3301      	adds	r3, #1
   2ccc8:	9308      	str	r3, [sp, #32]
   2ccca:	9b06      	ldr	r3, [sp, #24]
   2cccc:	3301      	adds	r3, #1
   2ccce:	9306      	str	r3, [sp, #24]
   2ccd0:	2301      	movs	r3, #1
   2ccd2:	930c      	str	r3, [sp, #48]	; 0x30
   2ccd4:	e5ab      	b.n	2c82e <_dtoa_r+0x4e6>
   2ccd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ccd8:	2b00      	cmp	r3, #0
   2ccda:	f73f ac42 	bgt.w	2c562 <_dtoa_r+0x21a>
   2ccde:	f040 8221 	bne.w	2d124 <_dtoa_r+0xddc>
   2cce2:	2200      	movs	r2, #0
   2cce4:	4b38      	ldr	r3, [pc, #224]	; (2cdc8 <_dtoa_r+0xa80>)
   2cce6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2ccea:	f7d3 ff2f 	bl	b4c <__aeabi_dmul>
   2ccee:	4652      	mov	r2, sl
   2ccf0:	465b      	mov	r3, fp
   2ccf2:	f7d4 f9b1 	bl	1058 <__aeabi_dcmpge>
   2ccf6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2ccfa:	4646      	mov	r6, r8
   2ccfc:	2800      	cmp	r0, #0
   2ccfe:	d041      	beq.n	2cd84 <_dtoa_r+0xa3c>
   2cd00:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cd02:	9d04      	ldr	r5, [sp, #16]
   2cd04:	43db      	mvns	r3, r3
   2cd06:	9302      	str	r3, [sp, #8]
   2cd08:	4641      	mov	r1, r8
   2cd0a:	4620      	mov	r0, r4
   2cd0c:	f000 fd36 	bl	2d77c <_Bfree>
   2cd10:	2e00      	cmp	r6, #0
   2cd12:	f43f acdd 	beq.w	2c6d0 <_dtoa_r+0x388>
   2cd16:	e6a7      	b.n	2ca68 <_dtoa_r+0x720>
   2cd18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cd1a:	4649      	mov	r1, r9
   2cd1c:	4620      	mov	r0, r4
   2cd1e:	f000 fe63 	bl	2d9e8 <__pow5mult>
   2cd22:	4681      	mov	r9, r0
   2cd24:	e558      	b.n	2c7d8 <_dtoa_r+0x490>
   2cd26:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2cd28:	2a00      	cmp	r2, #0
   2cd2a:	f000 8187 	beq.w	2d03c <_dtoa_r+0xcf4>
   2cd2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2cd32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cd34:	9d08      	ldr	r5, [sp, #32]
   2cd36:	e4f2      	b.n	2c71e <_dtoa_r+0x3d6>
   2cd38:	f1ba 0f00 	cmp.w	sl, #0
   2cd3c:	f47f ad75 	bne.w	2c82a <_dtoa_r+0x4e2>
   2cd40:	e7b4      	b.n	2ccac <_dtoa_r+0x964>
   2cd42:	f000 fd25 	bl	2d790 <__multadd>
   2cd46:	4647      	mov	r7, r8
   2cd48:	4606      	mov	r6, r0
   2cd4a:	4683      	mov	fp, r0
   2cd4c:	e5be      	b.n	2c8cc <_dtoa_r+0x584>
   2cd4e:	4601      	mov	r1, r0
   2cd50:	4620      	mov	r0, r4
   2cd52:	9306      	str	r3, [sp, #24]
   2cd54:	f000 fd12 	bl	2d77c <_Bfree>
   2cd58:	2201      	movs	r2, #1
   2cd5a:	9b06      	ldr	r3, [sp, #24]
   2cd5c:	e5e0      	b.n	2c920 <_dtoa_r+0x5d8>
   2cd5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd60:	2b02      	cmp	r3, #2
   2cd62:	f77f ad96 	ble.w	2c892 <_dtoa_r+0x54a>
   2cd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cd68:	2b00      	cmp	r3, #0
   2cd6a:	d1c9      	bne.n	2cd00 <_dtoa_r+0x9b8>
   2cd6c:	4641      	mov	r1, r8
   2cd6e:	2205      	movs	r2, #5
   2cd70:	4620      	mov	r0, r4
   2cd72:	f000 fd0d 	bl	2d790 <__multadd>
   2cd76:	4601      	mov	r1, r0
   2cd78:	4680      	mov	r8, r0
   2cd7a:	4648      	mov	r0, r9
   2cd7c:	f000 fed6 	bl	2db2c <__mcmp>
   2cd80:	2800      	cmp	r0, #0
   2cd82:	ddbd      	ble.n	2cd00 <_dtoa_r+0x9b8>
   2cd84:	9a02      	ldr	r2, [sp, #8]
   2cd86:	9904      	ldr	r1, [sp, #16]
   2cd88:	2331      	movs	r3, #49	; 0x31
   2cd8a:	3201      	adds	r2, #1
   2cd8c:	9202      	str	r2, [sp, #8]
   2cd8e:	700b      	strb	r3, [r1, #0]
   2cd90:	1c4d      	adds	r5, r1, #1
   2cd92:	e7b9      	b.n	2cd08 <_dtoa_r+0x9c0>
   2cd94:	9a02      	ldr	r2, [sp, #8]
   2cd96:	3201      	adds	r2, #1
   2cd98:	9202      	str	r2, [sp, #8]
   2cd9a:	9a04      	ldr	r2, [sp, #16]
   2cd9c:	2331      	movs	r3, #49	; 0x31
   2cd9e:	7013      	strb	r3, [r2, #0]
   2cda0:	e652      	b.n	2ca48 <_dtoa_r+0x700>
   2cda2:	2301      	movs	r3, #1
   2cda4:	930b      	str	r3, [sp, #44]	; 0x2c
   2cda6:	e666      	b.n	2ca76 <_dtoa_r+0x72e>
   2cda8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cdac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cdae:	e48f      	b.n	2c6d0 <_dtoa_r+0x388>
   2cdb0:	00032c00 	.word	0x00032c00
   2cdb4:	00032bd8 	.word	0x00032bd8
   2cdb8:	3ff00000 	.word	0x3ff00000
   2cdbc:	401c0000 	.word	0x401c0000
   2cdc0:	3fe00000 	.word	0x3fe00000
   2cdc4:	40240000 	.word	0x40240000
   2cdc8:	40140000 	.word	0x40140000
   2cdcc:	4650      	mov	r0, sl
   2cdce:	f7d3 fe57 	bl	a80 <__aeabi_i2d>
   2cdd2:	463a      	mov	r2, r7
   2cdd4:	4643      	mov	r3, r8
   2cdd6:	f7d3 feb9 	bl	b4c <__aeabi_dmul>
   2cdda:	2200      	movs	r2, #0
   2cddc:	4bc1      	ldr	r3, [pc, #772]	; (2d0e4 <_dtoa_r+0xd9c>)
   2cdde:	f7d3 fd03 	bl	7e8 <__adddf3>
   2cde2:	4605      	mov	r5, r0
   2cde4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2cde8:	4641      	mov	r1, r8
   2cdea:	2200      	movs	r2, #0
   2cdec:	4bbe      	ldr	r3, [pc, #760]	; (2d0e8 <_dtoa_r+0xda0>)
   2cdee:	4638      	mov	r0, r7
   2cdf0:	f7d3 fcf8 	bl	7e4 <__aeabi_dsub>
   2cdf4:	462a      	mov	r2, r5
   2cdf6:	4633      	mov	r3, r6
   2cdf8:	4682      	mov	sl, r0
   2cdfa:	468b      	mov	fp, r1
   2cdfc:	f7d4 f936 	bl	106c <__aeabi_dcmpgt>
   2ce00:	4680      	mov	r8, r0
   2ce02:	2800      	cmp	r0, #0
   2ce04:	f040 8110 	bne.w	2d028 <_dtoa_r+0xce0>
   2ce08:	462a      	mov	r2, r5
   2ce0a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2ce0e:	4650      	mov	r0, sl
   2ce10:	4659      	mov	r1, fp
   2ce12:	f7d4 f90d 	bl	1030 <__aeabi_dcmplt>
   2ce16:	b118      	cbz	r0, 2ce20 <_dtoa_r+0xad8>
   2ce18:	4646      	mov	r6, r8
   2ce1a:	e771      	b.n	2cd00 <_dtoa_r+0x9b8>
   2ce1c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2ce20:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2ce24:	f7ff bb8a 	b.w	2c53c <_dtoa_r+0x1f4>
   2ce28:	9804      	ldr	r0, [sp, #16]
   2ce2a:	f7ff babb 	b.w	2c3a4 <_dtoa_r+0x5c>
   2ce2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ce30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2ce32:	970c      	str	r7, [sp, #48]	; 0x30
   2ce34:	1afb      	subs	r3, r7, r3
   2ce36:	441a      	add	r2, r3
   2ce38:	920d      	str	r2, [sp, #52]	; 0x34
   2ce3a:	2700      	movs	r7, #0
   2ce3c:	e469      	b.n	2c712 <_dtoa_r+0x3ca>
   2ce3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2ce42:	f04f 0a02 	mov.w	sl, #2
   2ce46:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2ce4a:	e657      	b.n	2cafc <_dtoa_r+0x7b4>
   2ce4c:	2100      	movs	r1, #0
   2ce4e:	2301      	movs	r3, #1
   2ce50:	6461      	str	r1, [r4, #68]	; 0x44
   2ce52:	4620      	mov	r0, r4
   2ce54:	9325      	str	r3, [sp, #148]	; 0x94
   2ce56:	f000 fc6b 	bl	2d730 <_Balloc>
   2ce5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ce5c:	9004      	str	r0, [sp, #16]
   2ce5e:	6420      	str	r0, [r4, #64]	; 0x40
   2ce60:	930a      	str	r3, [sp, #40]	; 0x28
   2ce62:	930f      	str	r3, [sp, #60]	; 0x3c
   2ce64:	e629      	b.n	2caba <_dtoa_r+0x772>
   2ce66:	2a00      	cmp	r2, #0
   2ce68:	46d0      	mov	r8, sl
   2ce6a:	f8cd b018 	str.w	fp, [sp, #24]
   2ce6e:	469a      	mov	sl, r3
   2ce70:	dd11      	ble.n	2ce96 <_dtoa_r+0xb4e>
   2ce72:	4649      	mov	r1, r9
   2ce74:	2201      	movs	r2, #1
   2ce76:	4620      	mov	r0, r4
   2ce78:	f000 fe06 	bl	2da88 <__lshift>
   2ce7c:	4641      	mov	r1, r8
   2ce7e:	4681      	mov	r9, r0
   2ce80:	f000 fe54 	bl	2db2c <__mcmp>
   2ce84:	2800      	cmp	r0, #0
   2ce86:	f340 8146 	ble.w	2d116 <_dtoa_r+0xdce>
   2ce8a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2ce8e:	f000 8106 	beq.w	2d09e <_dtoa_r+0xd56>
   2ce92:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2ce96:	46b3      	mov	fp, r6
   2ce98:	f887 a000 	strb.w	sl, [r7]
   2ce9c:	1c7d      	adds	r5, r7, #1
   2ce9e:	9e06      	ldr	r6, [sp, #24]
   2cea0:	e5d2      	b.n	2ca48 <_dtoa_r+0x700>
   2cea2:	d104      	bne.n	2ceae <_dtoa_r+0xb66>
   2cea4:	f01a 0f01 	tst.w	sl, #1
   2cea8:	d001      	beq.n	2ceae <_dtoa_r+0xb66>
   2ceaa:	e5bd      	b.n	2ca28 <_dtoa_r+0x6e0>
   2ceac:	4615      	mov	r5, r2
   2ceae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2ceb2:	2b30      	cmp	r3, #48	; 0x30
   2ceb4:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2ceb8:	d0f8      	beq.n	2ceac <_dtoa_r+0xb64>
   2ceba:	e5c5      	b.n	2ca48 <_dtoa_r+0x700>
   2cebc:	9904      	ldr	r1, [sp, #16]
   2cebe:	2230      	movs	r2, #48	; 0x30
   2cec0:	700a      	strb	r2, [r1, #0]
   2cec2:	9a02      	ldr	r2, [sp, #8]
   2cec4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cec8:	3201      	adds	r2, #1
   2ceca:	9202      	str	r2, [sp, #8]
   2cecc:	f7ff bbfc 	b.w	2c6c8 <_dtoa_r+0x380>
   2ced0:	f000 80bb 	beq.w	2d04a <_dtoa_r+0xd02>
   2ced4:	9b02      	ldr	r3, [sp, #8]
   2ced6:	425d      	negs	r5, r3
   2ced8:	4b84      	ldr	r3, [pc, #528]	; (2d0ec <_dtoa_r+0xda4>)
   2ceda:	f005 020f 	and.w	r2, r5, #15
   2cede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2ceea:	f7d3 fe2f 	bl	b4c <__aeabi_dmul>
   2ceee:	112d      	asrs	r5, r5, #4
   2cef0:	4607      	mov	r7, r0
   2cef2:	4688      	mov	r8, r1
   2cef4:	f000 812c 	beq.w	2d150 <_dtoa_r+0xe08>
   2cef8:	4e7d      	ldr	r6, [pc, #500]	; (2d0f0 <_dtoa_r+0xda8>)
   2cefa:	f04f 0a02 	mov.w	sl, #2
   2cefe:	07eb      	lsls	r3, r5, #31
   2cf00:	d509      	bpl.n	2cf16 <_dtoa_r+0xbce>
   2cf02:	4638      	mov	r0, r7
   2cf04:	4641      	mov	r1, r8
   2cf06:	e9d6 2300 	ldrd	r2, r3, [r6]
   2cf0a:	f7d3 fe1f 	bl	b4c <__aeabi_dmul>
   2cf0e:	f10a 0a01 	add.w	sl, sl, #1
   2cf12:	4607      	mov	r7, r0
   2cf14:	4688      	mov	r8, r1
   2cf16:	106d      	asrs	r5, r5, #1
   2cf18:	f106 0608 	add.w	r6, r6, #8
   2cf1c:	d1ef      	bne.n	2cefe <_dtoa_r+0xbb6>
   2cf1e:	e608      	b.n	2cb32 <_dtoa_r+0x7ea>
   2cf20:	6871      	ldr	r1, [r6, #4]
   2cf22:	4620      	mov	r0, r4
   2cf24:	f000 fc04 	bl	2d730 <_Balloc>
   2cf28:	6933      	ldr	r3, [r6, #16]
   2cf2a:	3302      	adds	r3, #2
   2cf2c:	009a      	lsls	r2, r3, #2
   2cf2e:	4605      	mov	r5, r0
   2cf30:	f106 010c 	add.w	r1, r6, #12
   2cf34:	300c      	adds	r0, #12
   2cf36:	f7d3 f9c3 	bl	2c0 <memcpy>
   2cf3a:	4629      	mov	r1, r5
   2cf3c:	2201      	movs	r2, #1
   2cf3e:	4620      	mov	r0, r4
   2cf40:	f000 fda2 	bl	2da88 <__lshift>
   2cf44:	9006      	str	r0, [sp, #24]
   2cf46:	e4b5      	b.n	2c8b4 <_dtoa_r+0x56c>
   2cf48:	2b39      	cmp	r3, #57	; 0x39
   2cf4a:	f8cd b018 	str.w	fp, [sp, #24]
   2cf4e:	46d0      	mov	r8, sl
   2cf50:	f000 80a5 	beq.w	2d09e <_dtoa_r+0xd56>
   2cf54:	f103 0a01 	add.w	sl, r3, #1
   2cf58:	46b3      	mov	fp, r6
   2cf5a:	f887 a000 	strb.w	sl, [r7]
   2cf5e:	1c7d      	adds	r5, r7, #1
   2cf60:	9e06      	ldr	r6, [sp, #24]
   2cf62:	e571      	b.n	2ca48 <_dtoa_r+0x700>
   2cf64:	465a      	mov	r2, fp
   2cf66:	46d0      	mov	r8, sl
   2cf68:	46b3      	mov	fp, r6
   2cf6a:	469a      	mov	sl, r3
   2cf6c:	4616      	mov	r6, r2
   2cf6e:	e54f      	b.n	2ca10 <_dtoa_r+0x6c8>
   2cf70:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cf72:	495e      	ldr	r1, [pc, #376]	; (2d0ec <_dtoa_r+0xda4>)
   2cf74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2cf78:	462a      	mov	r2, r5
   2cf7a:	4633      	mov	r3, r6
   2cf7c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2cf80:	f7d3 fde4 	bl	b4c <__aeabi_dmul>
   2cf84:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2cf88:	4638      	mov	r0, r7
   2cf8a:	4641      	mov	r1, r8
   2cf8c:	f7d4 f88e 	bl	10ac <__aeabi_d2iz>
   2cf90:	4605      	mov	r5, r0
   2cf92:	f7d3 fd75 	bl	a80 <__aeabi_i2d>
   2cf96:	460b      	mov	r3, r1
   2cf98:	4602      	mov	r2, r0
   2cf9a:	4641      	mov	r1, r8
   2cf9c:	4638      	mov	r0, r7
   2cf9e:	f7d3 fc21 	bl	7e4 <__aeabi_dsub>
   2cfa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cfa4:	460f      	mov	r7, r1
   2cfa6:	9904      	ldr	r1, [sp, #16]
   2cfa8:	3530      	adds	r5, #48	; 0x30
   2cfaa:	2b01      	cmp	r3, #1
   2cfac:	700d      	strb	r5, [r1, #0]
   2cfae:	4606      	mov	r6, r0
   2cfb0:	f101 0501 	add.w	r5, r1, #1
   2cfb4:	d026      	beq.n	2d004 <_dtoa_r+0xcbc>
   2cfb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cfb8:	9a04      	ldr	r2, [sp, #16]
   2cfba:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d0f8 <_dtoa_r+0xdb0>
   2cfbe:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2cfc2:	4413      	add	r3, r2
   2cfc4:	f04f 0a00 	mov.w	sl, #0
   2cfc8:	4699      	mov	r9, r3
   2cfca:	4652      	mov	r2, sl
   2cfcc:	465b      	mov	r3, fp
   2cfce:	4630      	mov	r0, r6
   2cfd0:	4639      	mov	r1, r7
   2cfd2:	f7d3 fdbb 	bl	b4c <__aeabi_dmul>
   2cfd6:	460f      	mov	r7, r1
   2cfd8:	4606      	mov	r6, r0
   2cfda:	f7d4 f867 	bl	10ac <__aeabi_d2iz>
   2cfde:	4680      	mov	r8, r0
   2cfe0:	f7d3 fd4e 	bl	a80 <__aeabi_i2d>
   2cfe4:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2cfe8:	4602      	mov	r2, r0
   2cfea:	460b      	mov	r3, r1
   2cfec:	4630      	mov	r0, r6
   2cfee:	4639      	mov	r1, r7
   2cff0:	f7d3 fbf8 	bl	7e4 <__aeabi_dsub>
   2cff4:	f805 8b01 	strb.w	r8, [r5], #1
   2cff8:	454d      	cmp	r5, r9
   2cffa:	4606      	mov	r6, r0
   2cffc:	460f      	mov	r7, r1
   2cffe:	d1e4      	bne.n	2cfca <_dtoa_r+0xc82>
   2d000:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d004:	4b3b      	ldr	r3, [pc, #236]	; (2d0f4 <_dtoa_r+0xdac>)
   2d006:	2200      	movs	r2, #0
   2d008:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d00c:	f7d3 fbec 	bl	7e8 <__adddf3>
   2d010:	4632      	mov	r2, r6
   2d012:	463b      	mov	r3, r7
   2d014:	f7d4 f80c 	bl	1030 <__aeabi_dcmplt>
   2d018:	2800      	cmp	r0, #0
   2d01a:	d046      	beq.n	2d0aa <_dtoa_r+0xd62>
   2d01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d01e:	9302      	str	r3, [sp, #8]
   2d020:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d024:	f7ff bb43 	b.w	2c6ae <_dtoa_r+0x366>
   2d028:	f04f 0800 	mov.w	r8, #0
   2d02c:	4646      	mov	r6, r8
   2d02e:	e6a9      	b.n	2cd84 <_dtoa_r+0xa3c>
   2d030:	9b08      	ldr	r3, [sp, #32]
   2d032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d034:	1a9d      	subs	r5, r3, r2
   2d036:	2300      	movs	r3, #0
   2d038:	f7ff bb71 	b.w	2c71e <_dtoa_r+0x3d6>
   2d03c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d03e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d040:	9d08      	ldr	r5, [sp, #32]
   2d042:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d046:	f7ff bb6a 	b.w	2c71e <_dtoa_r+0x3d6>
   2d04a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d04e:	f04f 0a02 	mov.w	sl, #2
   2d052:	e56e      	b.n	2cb32 <_dtoa_r+0x7ea>
   2d054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d056:	2b00      	cmp	r3, #0
   2d058:	f43f aeb8 	beq.w	2cdcc <_dtoa_r+0xa84>
   2d05c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d05e:	2b00      	cmp	r3, #0
   2d060:	f77f aede 	ble.w	2ce20 <_dtoa_r+0xad8>
   2d064:	2200      	movs	r2, #0
   2d066:	4b24      	ldr	r3, [pc, #144]	; (2d0f8 <_dtoa_r+0xdb0>)
   2d068:	4638      	mov	r0, r7
   2d06a:	4641      	mov	r1, r8
   2d06c:	f7d3 fd6e 	bl	b4c <__aeabi_dmul>
   2d070:	4607      	mov	r7, r0
   2d072:	4688      	mov	r8, r1
   2d074:	f10a 0001 	add.w	r0, sl, #1
   2d078:	f7d3 fd02 	bl	a80 <__aeabi_i2d>
   2d07c:	463a      	mov	r2, r7
   2d07e:	4643      	mov	r3, r8
   2d080:	f7d3 fd64 	bl	b4c <__aeabi_dmul>
   2d084:	2200      	movs	r2, #0
   2d086:	4b17      	ldr	r3, [pc, #92]	; (2d0e4 <_dtoa_r+0xd9c>)
   2d088:	f7d3 fbae 	bl	7e8 <__adddf3>
   2d08c:	9a02      	ldr	r2, [sp, #8]
   2d08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d090:	9312      	str	r3, [sp, #72]	; 0x48
   2d092:	3a01      	subs	r2, #1
   2d094:	4605      	mov	r5, r0
   2d096:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d09a:	9215      	str	r2, [sp, #84]	; 0x54
   2d09c:	e56a      	b.n	2cb74 <_dtoa_r+0x82c>
   2d09e:	2239      	movs	r2, #57	; 0x39
   2d0a0:	46b3      	mov	fp, r6
   2d0a2:	703a      	strb	r2, [r7, #0]
   2d0a4:	9e06      	ldr	r6, [sp, #24]
   2d0a6:	1c7d      	adds	r5, r7, #1
   2d0a8:	e4c0      	b.n	2ca2c <_dtoa_r+0x6e4>
   2d0aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d0ae:	2000      	movs	r0, #0
   2d0b0:	4910      	ldr	r1, [pc, #64]	; (2d0f4 <_dtoa_r+0xdac>)
   2d0b2:	f7d3 fb97 	bl	7e4 <__aeabi_dsub>
   2d0b6:	4632      	mov	r2, r6
   2d0b8:	463b      	mov	r3, r7
   2d0ba:	f7d3 ffd7 	bl	106c <__aeabi_dcmpgt>
   2d0be:	b908      	cbnz	r0, 2d0c4 <_dtoa_r+0xd7c>
   2d0c0:	e6ae      	b.n	2ce20 <_dtoa_r+0xad8>
   2d0c2:	4615      	mov	r5, r2
   2d0c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d0c8:	2b30      	cmp	r3, #48	; 0x30
   2d0ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d0ce:	d0f8      	beq.n	2d0c2 <_dtoa_r+0xd7a>
   2d0d0:	e5d7      	b.n	2cc82 <_dtoa_r+0x93a>
   2d0d2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d0d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d0d8:	9302      	str	r3, [sp, #8]
   2d0da:	f7ff bae8 	b.w	2c6ae <_dtoa_r+0x366>
   2d0de:	970c      	str	r7, [sp, #48]	; 0x30
   2d0e0:	f7ff bba5 	b.w	2c82e <_dtoa_r+0x4e6>
   2d0e4:	401c0000 	.word	0x401c0000
   2d0e8:	40140000 	.word	0x40140000
   2d0ec:	00032c00 	.word	0x00032c00
   2d0f0:	00032bd8 	.word	0x00032bd8
   2d0f4:	3fe00000 	.word	0x3fe00000
   2d0f8:	40240000 	.word	0x40240000
   2d0fc:	2b39      	cmp	r3, #57	; 0x39
   2d0fe:	f8cd b018 	str.w	fp, [sp, #24]
   2d102:	46d0      	mov	r8, sl
   2d104:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d108:	469a      	mov	sl, r3
   2d10a:	d0c8      	beq.n	2d09e <_dtoa_r+0xd56>
   2d10c:	f1bb 0f00 	cmp.w	fp, #0
   2d110:	f73f aebf 	bgt.w	2ce92 <_dtoa_r+0xb4a>
   2d114:	e6bf      	b.n	2ce96 <_dtoa_r+0xb4e>
   2d116:	f47f aebe 	bne.w	2ce96 <_dtoa_r+0xb4e>
   2d11a:	f01a 0f01 	tst.w	sl, #1
   2d11e:	f43f aeba 	beq.w	2ce96 <_dtoa_r+0xb4e>
   2d122:	e6b2      	b.n	2ce8a <_dtoa_r+0xb42>
   2d124:	f04f 0800 	mov.w	r8, #0
   2d128:	4646      	mov	r6, r8
   2d12a:	e5e9      	b.n	2cd00 <_dtoa_r+0x9b8>
   2d12c:	4631      	mov	r1, r6
   2d12e:	2300      	movs	r3, #0
   2d130:	220a      	movs	r2, #10
   2d132:	4620      	mov	r0, r4
   2d134:	f000 fb2c 	bl	2d790 <__multadd>
   2d138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d13a:	2b00      	cmp	r3, #0
   2d13c:	4606      	mov	r6, r0
   2d13e:	dd0a      	ble.n	2d156 <_dtoa_r+0xe0e>
   2d140:	930a      	str	r3, [sp, #40]	; 0x28
   2d142:	f7ff bbaa 	b.w	2c89a <_dtoa_r+0x552>
   2d146:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d148:	2b02      	cmp	r3, #2
   2d14a:	dc23      	bgt.n	2d194 <_dtoa_r+0xe4c>
   2d14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d14e:	e43b      	b.n	2c9c8 <_dtoa_r+0x680>
   2d150:	f04f 0a02 	mov.w	sl, #2
   2d154:	e4ed      	b.n	2cb32 <_dtoa_r+0x7ea>
   2d156:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d158:	2b02      	cmp	r3, #2
   2d15a:	dc1b      	bgt.n	2d194 <_dtoa_r+0xe4c>
   2d15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d15e:	e7ef      	b.n	2d140 <_dtoa_r+0xdf8>
   2d160:	2500      	movs	r5, #0
   2d162:	6465      	str	r5, [r4, #68]	; 0x44
   2d164:	4629      	mov	r1, r5
   2d166:	4620      	mov	r0, r4
   2d168:	f000 fae2 	bl	2d730 <_Balloc>
   2d16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d170:	930a      	str	r3, [sp, #40]	; 0x28
   2d172:	930f      	str	r3, [sp, #60]	; 0x3c
   2d174:	2301      	movs	r3, #1
   2d176:	9004      	str	r0, [sp, #16]
   2d178:	9525      	str	r5, [sp, #148]	; 0x94
   2d17a:	6420      	str	r0, [r4, #64]	; 0x40
   2d17c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d17e:	f7ff b9dd 	b.w	2c53c <_dtoa_r+0x1f4>
   2d182:	2501      	movs	r5, #1
   2d184:	f7ff b9a5 	b.w	2c4d2 <_dtoa_r+0x18a>
   2d188:	f43f ab69 	beq.w	2c85e <_dtoa_r+0x516>
   2d18c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2d190:	f7ff bbf9 	b.w	2c986 <_dtoa_r+0x63e>
   2d194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d196:	930a      	str	r3, [sp, #40]	; 0x28
   2d198:	e5e5      	b.n	2cd66 <_dtoa_r+0xa1e>
   2d19a:	bf00      	nop

0002d19c <_localeconv_r>:
   2d19c:	4a04      	ldr	r2, [pc, #16]	; (2d1b0 <_localeconv_r+0x14>)
   2d19e:	4b05      	ldr	r3, [pc, #20]	; (2d1b4 <_localeconv_r+0x18>)
   2d1a0:	6812      	ldr	r2, [r2, #0]
   2d1a2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2d1a4:	2800      	cmp	r0, #0
   2d1a6:	bf08      	it	eq
   2d1a8:	4618      	moveq	r0, r3
   2d1aa:	30f0      	adds	r0, #240	; 0xf0
   2d1ac:	4770      	bx	lr
   2d1ae:	bf00      	nop
   2d1b0:	2000c6f0 	.word	0x2000c6f0
   2d1b4:	2000c584 	.word	0x2000c584

0002d1b8 <_malloc_r>:
   2d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d1bc:	f101 060b 	add.w	r6, r1, #11
   2d1c0:	2e16      	cmp	r6, #22
   2d1c2:	b083      	sub	sp, #12
   2d1c4:	4605      	mov	r5, r0
   2d1c6:	f240 809e 	bls.w	2d306 <_malloc_r+0x14e>
   2d1ca:	f036 0607 	bics.w	r6, r6, #7
   2d1ce:	f100 80bd 	bmi.w	2d34c <_malloc_r+0x194>
   2d1d2:	42b1      	cmp	r1, r6
   2d1d4:	f200 80ba 	bhi.w	2d34c <_malloc_r+0x194>
   2d1d8:	f000 fa9e 	bl	2d718 <__malloc_lock>
   2d1dc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2d1e0:	f0c0 8293 	bcc.w	2d70a <_malloc_r+0x552>
   2d1e4:	0a73      	lsrs	r3, r6, #9
   2d1e6:	f000 80b8 	beq.w	2d35a <_malloc_r+0x1a2>
   2d1ea:	2b04      	cmp	r3, #4
   2d1ec:	f200 8179 	bhi.w	2d4e2 <_malloc_r+0x32a>
   2d1f0:	09b3      	lsrs	r3, r6, #6
   2d1f2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2d1f6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2d1fa:	00c3      	lsls	r3, r0, #3
   2d1fc:	4fbf      	ldr	r7, [pc, #764]	; (2d4fc <_malloc_r+0x344>)
   2d1fe:	443b      	add	r3, r7
   2d200:	f1a3 0108 	sub.w	r1, r3, #8
   2d204:	685c      	ldr	r4, [r3, #4]
   2d206:	42a1      	cmp	r1, r4
   2d208:	d106      	bne.n	2d218 <_malloc_r+0x60>
   2d20a:	e00c      	b.n	2d226 <_malloc_r+0x6e>
   2d20c:	2a00      	cmp	r2, #0
   2d20e:	f280 80aa 	bge.w	2d366 <_malloc_r+0x1ae>
   2d212:	68e4      	ldr	r4, [r4, #12]
   2d214:	42a1      	cmp	r1, r4
   2d216:	d006      	beq.n	2d226 <_malloc_r+0x6e>
   2d218:	6863      	ldr	r3, [r4, #4]
   2d21a:	f023 0303 	bic.w	r3, r3, #3
   2d21e:	1b9a      	subs	r2, r3, r6
   2d220:	2a0f      	cmp	r2, #15
   2d222:	ddf3      	ble.n	2d20c <_malloc_r+0x54>
   2d224:	4670      	mov	r0, lr
   2d226:	693c      	ldr	r4, [r7, #16]
   2d228:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2d510 <_malloc_r+0x358>
   2d22c:	4574      	cmp	r4, lr
   2d22e:	f000 81ab 	beq.w	2d588 <_malloc_r+0x3d0>
   2d232:	6863      	ldr	r3, [r4, #4]
   2d234:	f023 0303 	bic.w	r3, r3, #3
   2d238:	1b9a      	subs	r2, r3, r6
   2d23a:	2a0f      	cmp	r2, #15
   2d23c:	f300 8190 	bgt.w	2d560 <_malloc_r+0x3a8>
   2d240:	2a00      	cmp	r2, #0
   2d242:	f8c7 e014 	str.w	lr, [r7, #20]
   2d246:	f8c7 e010 	str.w	lr, [r7, #16]
   2d24a:	f280 809d 	bge.w	2d388 <_malloc_r+0x1d0>
   2d24e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2d252:	f080 8161 	bcs.w	2d518 <_malloc_r+0x360>
   2d256:	08db      	lsrs	r3, r3, #3
   2d258:	f103 0c01 	add.w	ip, r3, #1
   2d25c:	1099      	asrs	r1, r3, #2
   2d25e:	687a      	ldr	r2, [r7, #4]
   2d260:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2d264:	f8c4 8008 	str.w	r8, [r4, #8]
   2d268:	2301      	movs	r3, #1
   2d26a:	408b      	lsls	r3, r1
   2d26c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2d270:	4313      	orrs	r3, r2
   2d272:	3908      	subs	r1, #8
   2d274:	60e1      	str	r1, [r4, #12]
   2d276:	607b      	str	r3, [r7, #4]
   2d278:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2d27c:	f8c8 400c 	str.w	r4, [r8, #12]
   2d280:	1082      	asrs	r2, r0, #2
   2d282:	2401      	movs	r4, #1
   2d284:	4094      	lsls	r4, r2
   2d286:	429c      	cmp	r4, r3
   2d288:	f200 808b 	bhi.w	2d3a2 <_malloc_r+0x1ea>
   2d28c:	421c      	tst	r4, r3
   2d28e:	d106      	bne.n	2d29e <_malloc_r+0xe6>
   2d290:	f020 0003 	bic.w	r0, r0, #3
   2d294:	0064      	lsls	r4, r4, #1
   2d296:	421c      	tst	r4, r3
   2d298:	f100 0004 	add.w	r0, r0, #4
   2d29c:	d0fa      	beq.n	2d294 <_malloc_r+0xdc>
   2d29e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2d2a2:	46cc      	mov	ip, r9
   2d2a4:	4680      	mov	r8, r0
   2d2a6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2d2aa:	459c      	cmp	ip, r3
   2d2ac:	d107      	bne.n	2d2be <_malloc_r+0x106>
   2d2ae:	e16d      	b.n	2d58c <_malloc_r+0x3d4>
   2d2b0:	2a00      	cmp	r2, #0
   2d2b2:	f280 817b 	bge.w	2d5ac <_malloc_r+0x3f4>
   2d2b6:	68db      	ldr	r3, [r3, #12]
   2d2b8:	459c      	cmp	ip, r3
   2d2ba:	f000 8167 	beq.w	2d58c <_malloc_r+0x3d4>
   2d2be:	6859      	ldr	r1, [r3, #4]
   2d2c0:	f021 0103 	bic.w	r1, r1, #3
   2d2c4:	1b8a      	subs	r2, r1, r6
   2d2c6:	2a0f      	cmp	r2, #15
   2d2c8:	ddf2      	ble.n	2d2b0 <_malloc_r+0xf8>
   2d2ca:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2d2ce:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2d2d2:	9300      	str	r3, [sp, #0]
   2d2d4:	199c      	adds	r4, r3, r6
   2d2d6:	4628      	mov	r0, r5
   2d2d8:	f046 0601 	orr.w	r6, r6, #1
   2d2dc:	f042 0501 	orr.w	r5, r2, #1
   2d2e0:	605e      	str	r6, [r3, #4]
   2d2e2:	f8c8 c00c 	str.w	ip, [r8, #12]
   2d2e6:	f8cc 8008 	str.w	r8, [ip, #8]
   2d2ea:	617c      	str	r4, [r7, #20]
   2d2ec:	613c      	str	r4, [r7, #16]
   2d2ee:	f8c4 e00c 	str.w	lr, [r4, #12]
   2d2f2:	f8c4 e008 	str.w	lr, [r4, #8]
   2d2f6:	6065      	str	r5, [r4, #4]
   2d2f8:	505a      	str	r2, [r3, r1]
   2d2fa:	f000 fa13 	bl	2d724 <__malloc_unlock>
   2d2fe:	9b00      	ldr	r3, [sp, #0]
   2d300:	f103 0408 	add.w	r4, r3, #8
   2d304:	e01e      	b.n	2d344 <_malloc_r+0x18c>
   2d306:	2910      	cmp	r1, #16
   2d308:	d820      	bhi.n	2d34c <_malloc_r+0x194>
   2d30a:	f000 fa05 	bl	2d718 <__malloc_lock>
   2d30e:	2610      	movs	r6, #16
   2d310:	2318      	movs	r3, #24
   2d312:	2002      	movs	r0, #2
   2d314:	4f79      	ldr	r7, [pc, #484]	; (2d4fc <_malloc_r+0x344>)
   2d316:	443b      	add	r3, r7
   2d318:	f1a3 0208 	sub.w	r2, r3, #8
   2d31c:	685c      	ldr	r4, [r3, #4]
   2d31e:	4294      	cmp	r4, r2
   2d320:	f000 813d 	beq.w	2d59e <_malloc_r+0x3e6>
   2d324:	6863      	ldr	r3, [r4, #4]
   2d326:	68e1      	ldr	r1, [r4, #12]
   2d328:	68a6      	ldr	r6, [r4, #8]
   2d32a:	f023 0303 	bic.w	r3, r3, #3
   2d32e:	4423      	add	r3, r4
   2d330:	4628      	mov	r0, r5
   2d332:	685a      	ldr	r2, [r3, #4]
   2d334:	60f1      	str	r1, [r6, #12]
   2d336:	f042 0201 	orr.w	r2, r2, #1
   2d33a:	608e      	str	r6, [r1, #8]
   2d33c:	605a      	str	r2, [r3, #4]
   2d33e:	f000 f9f1 	bl	2d724 <__malloc_unlock>
   2d342:	3408      	adds	r4, #8
   2d344:	4620      	mov	r0, r4
   2d346:	b003      	add	sp, #12
   2d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d34c:	2400      	movs	r4, #0
   2d34e:	230c      	movs	r3, #12
   2d350:	4620      	mov	r0, r4
   2d352:	602b      	str	r3, [r5, #0]
   2d354:	b003      	add	sp, #12
   2d356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d35a:	2040      	movs	r0, #64	; 0x40
   2d35c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2d360:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2d364:	e74a      	b.n	2d1fc <_malloc_r+0x44>
   2d366:	4423      	add	r3, r4
   2d368:	68e1      	ldr	r1, [r4, #12]
   2d36a:	685a      	ldr	r2, [r3, #4]
   2d36c:	68a6      	ldr	r6, [r4, #8]
   2d36e:	f042 0201 	orr.w	r2, r2, #1
   2d372:	60f1      	str	r1, [r6, #12]
   2d374:	4628      	mov	r0, r5
   2d376:	608e      	str	r6, [r1, #8]
   2d378:	605a      	str	r2, [r3, #4]
   2d37a:	f000 f9d3 	bl	2d724 <__malloc_unlock>
   2d37e:	3408      	adds	r4, #8
   2d380:	4620      	mov	r0, r4
   2d382:	b003      	add	sp, #12
   2d384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d388:	4423      	add	r3, r4
   2d38a:	4628      	mov	r0, r5
   2d38c:	685a      	ldr	r2, [r3, #4]
   2d38e:	f042 0201 	orr.w	r2, r2, #1
   2d392:	605a      	str	r2, [r3, #4]
   2d394:	f000 f9c6 	bl	2d724 <__malloc_unlock>
   2d398:	3408      	adds	r4, #8
   2d39a:	4620      	mov	r0, r4
   2d39c:	b003      	add	sp, #12
   2d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3a2:	68bc      	ldr	r4, [r7, #8]
   2d3a4:	6863      	ldr	r3, [r4, #4]
   2d3a6:	f023 0803 	bic.w	r8, r3, #3
   2d3aa:	45b0      	cmp	r8, r6
   2d3ac:	d304      	bcc.n	2d3b8 <_malloc_r+0x200>
   2d3ae:	eba8 0306 	sub.w	r3, r8, r6
   2d3b2:	2b0f      	cmp	r3, #15
   2d3b4:	f300 8085 	bgt.w	2d4c2 <_malloc_r+0x30a>
   2d3b8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2d514 <_malloc_r+0x35c>
   2d3bc:	4b50      	ldr	r3, [pc, #320]	; (2d500 <_malloc_r+0x348>)
   2d3be:	f8d9 2000 	ldr.w	r2, [r9]
   2d3c2:	681b      	ldr	r3, [r3, #0]
   2d3c4:	3201      	adds	r2, #1
   2d3c6:	4433      	add	r3, r6
   2d3c8:	eb04 0a08 	add.w	sl, r4, r8
   2d3cc:	f000 8155 	beq.w	2d67a <_malloc_r+0x4c2>
   2d3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2d3d4:	330f      	adds	r3, #15
   2d3d6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2d3da:	f02b 0b0f 	bic.w	fp, fp, #15
   2d3de:	4659      	mov	r1, fp
   2d3e0:	4628      	mov	r0, r5
   2d3e2:	f000 fc9f 	bl	2dd24 <_sbrk_r>
   2d3e6:	1c41      	adds	r1, r0, #1
   2d3e8:	4602      	mov	r2, r0
   2d3ea:	f000 80fc 	beq.w	2d5e6 <_malloc_r+0x42e>
   2d3ee:	4582      	cmp	sl, r0
   2d3f0:	f200 80f7 	bhi.w	2d5e2 <_malloc_r+0x42a>
   2d3f4:	4b43      	ldr	r3, [pc, #268]	; (2d504 <_malloc_r+0x34c>)
   2d3f6:	6819      	ldr	r1, [r3, #0]
   2d3f8:	4459      	add	r1, fp
   2d3fa:	6019      	str	r1, [r3, #0]
   2d3fc:	f000 814d 	beq.w	2d69a <_malloc_r+0x4e2>
   2d400:	f8d9 0000 	ldr.w	r0, [r9]
   2d404:	3001      	adds	r0, #1
   2d406:	bf1b      	ittet	ne
   2d408:	eba2 0a0a 	subne.w	sl, r2, sl
   2d40c:	4451      	addne	r1, sl
   2d40e:	f8c9 2000 	streq.w	r2, [r9]
   2d412:	6019      	strne	r1, [r3, #0]
   2d414:	f012 0107 	ands.w	r1, r2, #7
   2d418:	f000 8115 	beq.w	2d646 <_malloc_r+0x48e>
   2d41c:	f1c1 0008 	rsb	r0, r1, #8
   2d420:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2d424:	4402      	add	r2, r0
   2d426:	3108      	adds	r1, #8
   2d428:	eb02 090b 	add.w	r9, r2, fp
   2d42c:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2d430:	eba1 0909 	sub.w	r9, r1, r9
   2d434:	4649      	mov	r1, r9
   2d436:	4628      	mov	r0, r5
   2d438:	9301      	str	r3, [sp, #4]
   2d43a:	9200      	str	r2, [sp, #0]
   2d43c:	f000 fc72 	bl	2dd24 <_sbrk_r>
   2d440:	1c43      	adds	r3, r0, #1
   2d442:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2d446:	f000 8143 	beq.w	2d6d0 <_malloc_r+0x518>
   2d44a:	1a80      	subs	r0, r0, r2
   2d44c:	4448      	add	r0, r9
   2d44e:	f040 0001 	orr.w	r0, r0, #1
   2d452:	6819      	ldr	r1, [r3, #0]
   2d454:	60ba      	str	r2, [r7, #8]
   2d456:	4449      	add	r1, r9
   2d458:	42bc      	cmp	r4, r7
   2d45a:	6050      	str	r0, [r2, #4]
   2d45c:	6019      	str	r1, [r3, #0]
   2d45e:	d017      	beq.n	2d490 <_malloc_r+0x2d8>
   2d460:	f1b8 0f0f 	cmp.w	r8, #15
   2d464:	f240 80fb 	bls.w	2d65e <_malloc_r+0x4a6>
   2d468:	6860      	ldr	r0, [r4, #4]
   2d46a:	f1a8 020c 	sub.w	r2, r8, #12
   2d46e:	f022 0207 	bic.w	r2, r2, #7
   2d472:	eb04 0e02 	add.w	lr, r4, r2
   2d476:	f000 0001 	and.w	r0, r0, #1
   2d47a:	f04f 0c05 	mov.w	ip, #5
   2d47e:	4310      	orrs	r0, r2
   2d480:	2a0f      	cmp	r2, #15
   2d482:	6060      	str	r0, [r4, #4]
   2d484:	f8ce c004 	str.w	ip, [lr, #4]
   2d488:	f8ce c008 	str.w	ip, [lr, #8]
   2d48c:	f200 8117 	bhi.w	2d6be <_malloc_r+0x506>
   2d490:	4b1d      	ldr	r3, [pc, #116]	; (2d508 <_malloc_r+0x350>)
   2d492:	68bc      	ldr	r4, [r7, #8]
   2d494:	681a      	ldr	r2, [r3, #0]
   2d496:	4291      	cmp	r1, r2
   2d498:	bf88      	it	hi
   2d49a:	6019      	strhi	r1, [r3, #0]
   2d49c:	4b1b      	ldr	r3, [pc, #108]	; (2d50c <_malloc_r+0x354>)
   2d49e:	681a      	ldr	r2, [r3, #0]
   2d4a0:	4291      	cmp	r1, r2
   2d4a2:	6862      	ldr	r2, [r4, #4]
   2d4a4:	bf88      	it	hi
   2d4a6:	6019      	strhi	r1, [r3, #0]
   2d4a8:	f022 0203 	bic.w	r2, r2, #3
   2d4ac:	4296      	cmp	r6, r2
   2d4ae:	eba2 0306 	sub.w	r3, r2, r6
   2d4b2:	d801      	bhi.n	2d4b8 <_malloc_r+0x300>
   2d4b4:	2b0f      	cmp	r3, #15
   2d4b6:	dc04      	bgt.n	2d4c2 <_malloc_r+0x30a>
   2d4b8:	4628      	mov	r0, r5
   2d4ba:	f000 f933 	bl	2d724 <__malloc_unlock>
   2d4be:	2400      	movs	r4, #0
   2d4c0:	e740      	b.n	2d344 <_malloc_r+0x18c>
   2d4c2:	19a2      	adds	r2, r4, r6
   2d4c4:	f043 0301 	orr.w	r3, r3, #1
   2d4c8:	f046 0601 	orr.w	r6, r6, #1
   2d4cc:	6066      	str	r6, [r4, #4]
   2d4ce:	4628      	mov	r0, r5
   2d4d0:	60ba      	str	r2, [r7, #8]
   2d4d2:	6053      	str	r3, [r2, #4]
   2d4d4:	f000 f926 	bl	2d724 <__malloc_unlock>
   2d4d8:	3408      	adds	r4, #8
   2d4da:	4620      	mov	r0, r4
   2d4dc:	b003      	add	sp, #12
   2d4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4e2:	2b14      	cmp	r3, #20
   2d4e4:	d971      	bls.n	2d5ca <_malloc_r+0x412>
   2d4e6:	2b54      	cmp	r3, #84	; 0x54
   2d4e8:	f200 80a3 	bhi.w	2d632 <_malloc_r+0x47a>
   2d4ec:	0b33      	lsrs	r3, r6, #12
   2d4ee:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2d4f2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2d4f6:	00c3      	lsls	r3, r0, #3
   2d4f8:	e680      	b.n	2d1fc <_malloc_r+0x44>
   2d4fa:	bf00      	nop
   2d4fc:	2000cb20 	.word	0x2000cb20
   2d500:	200028d8 	.word	0x200028d8
   2d504:	200028a8 	.word	0x200028a8
   2d508:	200028d0 	.word	0x200028d0
   2d50c:	200028d4 	.word	0x200028d4
   2d510:	2000cb28 	.word	0x2000cb28
   2d514:	2000cf28 	.word	0x2000cf28
   2d518:	0a5a      	lsrs	r2, r3, #9
   2d51a:	2a04      	cmp	r2, #4
   2d51c:	d95b      	bls.n	2d5d6 <_malloc_r+0x41e>
   2d51e:	2a14      	cmp	r2, #20
   2d520:	f200 80ae 	bhi.w	2d680 <_malloc_r+0x4c8>
   2d524:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2d528:	00c9      	lsls	r1, r1, #3
   2d52a:	325b      	adds	r2, #91	; 0x5b
   2d52c:	eb07 0c01 	add.w	ip, r7, r1
   2d530:	5879      	ldr	r1, [r7, r1]
   2d532:	f1ac 0c08 	sub.w	ip, ip, #8
   2d536:	458c      	cmp	ip, r1
   2d538:	f000 8088 	beq.w	2d64c <_malloc_r+0x494>
   2d53c:	684a      	ldr	r2, [r1, #4]
   2d53e:	f022 0203 	bic.w	r2, r2, #3
   2d542:	4293      	cmp	r3, r2
   2d544:	d273      	bcs.n	2d62e <_malloc_r+0x476>
   2d546:	6889      	ldr	r1, [r1, #8]
   2d548:	458c      	cmp	ip, r1
   2d54a:	d1f7      	bne.n	2d53c <_malloc_r+0x384>
   2d54c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2d550:	687b      	ldr	r3, [r7, #4]
   2d552:	60e2      	str	r2, [r4, #12]
   2d554:	f8c4 c008 	str.w	ip, [r4, #8]
   2d558:	6094      	str	r4, [r2, #8]
   2d55a:	f8cc 400c 	str.w	r4, [ip, #12]
   2d55e:	e68f      	b.n	2d280 <_malloc_r+0xc8>
   2d560:	19a1      	adds	r1, r4, r6
   2d562:	f046 0c01 	orr.w	ip, r6, #1
   2d566:	f042 0601 	orr.w	r6, r2, #1
   2d56a:	f8c4 c004 	str.w	ip, [r4, #4]
   2d56e:	4628      	mov	r0, r5
   2d570:	6179      	str	r1, [r7, #20]
   2d572:	6139      	str	r1, [r7, #16]
   2d574:	f8c1 e00c 	str.w	lr, [r1, #12]
   2d578:	f8c1 e008 	str.w	lr, [r1, #8]
   2d57c:	604e      	str	r6, [r1, #4]
   2d57e:	50e2      	str	r2, [r4, r3]
   2d580:	f000 f8d0 	bl	2d724 <__malloc_unlock>
   2d584:	3408      	adds	r4, #8
   2d586:	e6dd      	b.n	2d344 <_malloc_r+0x18c>
   2d588:	687b      	ldr	r3, [r7, #4]
   2d58a:	e679      	b.n	2d280 <_malloc_r+0xc8>
   2d58c:	f108 0801 	add.w	r8, r8, #1
   2d590:	f018 0f03 	tst.w	r8, #3
   2d594:	f10c 0c08 	add.w	ip, ip, #8
   2d598:	f47f ae85 	bne.w	2d2a6 <_malloc_r+0xee>
   2d59c:	e02d      	b.n	2d5fa <_malloc_r+0x442>
   2d59e:	68dc      	ldr	r4, [r3, #12]
   2d5a0:	42a3      	cmp	r3, r4
   2d5a2:	bf08      	it	eq
   2d5a4:	3002      	addeq	r0, #2
   2d5a6:	f43f ae3e 	beq.w	2d226 <_malloc_r+0x6e>
   2d5aa:	e6bb      	b.n	2d324 <_malloc_r+0x16c>
   2d5ac:	4419      	add	r1, r3
   2d5ae:	461c      	mov	r4, r3
   2d5b0:	684a      	ldr	r2, [r1, #4]
   2d5b2:	68db      	ldr	r3, [r3, #12]
   2d5b4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2d5b8:	f042 0201 	orr.w	r2, r2, #1
   2d5bc:	604a      	str	r2, [r1, #4]
   2d5be:	4628      	mov	r0, r5
   2d5c0:	60f3      	str	r3, [r6, #12]
   2d5c2:	609e      	str	r6, [r3, #8]
   2d5c4:	f000 f8ae 	bl	2d724 <__malloc_unlock>
   2d5c8:	e6bc      	b.n	2d344 <_malloc_r+0x18c>
   2d5ca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2d5ce:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2d5d2:	00c3      	lsls	r3, r0, #3
   2d5d4:	e612      	b.n	2d1fc <_malloc_r+0x44>
   2d5d6:	099a      	lsrs	r2, r3, #6
   2d5d8:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2d5dc:	00c9      	lsls	r1, r1, #3
   2d5de:	3238      	adds	r2, #56	; 0x38
   2d5e0:	e7a4      	b.n	2d52c <_malloc_r+0x374>
   2d5e2:	42bc      	cmp	r4, r7
   2d5e4:	d054      	beq.n	2d690 <_malloc_r+0x4d8>
   2d5e6:	68bc      	ldr	r4, [r7, #8]
   2d5e8:	6862      	ldr	r2, [r4, #4]
   2d5ea:	f022 0203 	bic.w	r2, r2, #3
   2d5ee:	e75d      	b.n	2d4ac <_malloc_r+0x2f4>
   2d5f0:	f859 3908 	ldr.w	r3, [r9], #-8
   2d5f4:	4599      	cmp	r9, r3
   2d5f6:	f040 8086 	bne.w	2d706 <_malloc_r+0x54e>
   2d5fa:	f010 0f03 	tst.w	r0, #3
   2d5fe:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2d602:	d1f5      	bne.n	2d5f0 <_malloc_r+0x438>
   2d604:	687b      	ldr	r3, [r7, #4]
   2d606:	ea23 0304 	bic.w	r3, r3, r4
   2d60a:	607b      	str	r3, [r7, #4]
   2d60c:	0064      	lsls	r4, r4, #1
   2d60e:	429c      	cmp	r4, r3
   2d610:	f63f aec7 	bhi.w	2d3a2 <_malloc_r+0x1ea>
   2d614:	2c00      	cmp	r4, #0
   2d616:	f43f aec4 	beq.w	2d3a2 <_malloc_r+0x1ea>
   2d61a:	421c      	tst	r4, r3
   2d61c:	4640      	mov	r0, r8
   2d61e:	f47f ae3e 	bne.w	2d29e <_malloc_r+0xe6>
   2d622:	0064      	lsls	r4, r4, #1
   2d624:	421c      	tst	r4, r3
   2d626:	f100 0004 	add.w	r0, r0, #4
   2d62a:	d0fa      	beq.n	2d622 <_malloc_r+0x46a>
   2d62c:	e637      	b.n	2d29e <_malloc_r+0xe6>
   2d62e:	468c      	mov	ip, r1
   2d630:	e78c      	b.n	2d54c <_malloc_r+0x394>
   2d632:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2d636:	d815      	bhi.n	2d664 <_malloc_r+0x4ac>
   2d638:	0bf3      	lsrs	r3, r6, #15
   2d63a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2d63e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2d642:	00c3      	lsls	r3, r0, #3
   2d644:	e5da      	b.n	2d1fc <_malloc_r+0x44>
   2d646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2d64a:	e6ed      	b.n	2d428 <_malloc_r+0x270>
   2d64c:	687b      	ldr	r3, [r7, #4]
   2d64e:	1092      	asrs	r2, r2, #2
   2d650:	2101      	movs	r1, #1
   2d652:	fa01 f202 	lsl.w	r2, r1, r2
   2d656:	4313      	orrs	r3, r2
   2d658:	607b      	str	r3, [r7, #4]
   2d65a:	4662      	mov	r2, ip
   2d65c:	e779      	b.n	2d552 <_malloc_r+0x39a>
   2d65e:	2301      	movs	r3, #1
   2d660:	6053      	str	r3, [r2, #4]
   2d662:	e729      	b.n	2d4b8 <_malloc_r+0x300>
   2d664:	f240 5254 	movw	r2, #1364	; 0x554
   2d668:	4293      	cmp	r3, r2
   2d66a:	d822      	bhi.n	2d6b2 <_malloc_r+0x4fa>
   2d66c:	0cb3      	lsrs	r3, r6, #18
   2d66e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2d672:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2d676:	00c3      	lsls	r3, r0, #3
   2d678:	e5c0      	b.n	2d1fc <_malloc_r+0x44>
   2d67a:	f103 0b10 	add.w	fp, r3, #16
   2d67e:	e6ae      	b.n	2d3de <_malloc_r+0x226>
   2d680:	2a54      	cmp	r2, #84	; 0x54
   2d682:	d829      	bhi.n	2d6d8 <_malloc_r+0x520>
   2d684:	0b1a      	lsrs	r2, r3, #12
   2d686:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2d68a:	00c9      	lsls	r1, r1, #3
   2d68c:	326e      	adds	r2, #110	; 0x6e
   2d68e:	e74d      	b.n	2d52c <_malloc_r+0x374>
   2d690:	4b20      	ldr	r3, [pc, #128]	; (2d714 <_malloc_r+0x55c>)
   2d692:	6819      	ldr	r1, [r3, #0]
   2d694:	4459      	add	r1, fp
   2d696:	6019      	str	r1, [r3, #0]
   2d698:	e6b2      	b.n	2d400 <_malloc_r+0x248>
   2d69a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2d69e:	2800      	cmp	r0, #0
   2d6a0:	f47f aeae 	bne.w	2d400 <_malloc_r+0x248>
   2d6a4:	eb08 030b 	add.w	r3, r8, fp
   2d6a8:	68ba      	ldr	r2, [r7, #8]
   2d6aa:	f043 0301 	orr.w	r3, r3, #1
   2d6ae:	6053      	str	r3, [r2, #4]
   2d6b0:	e6ee      	b.n	2d490 <_malloc_r+0x2d8>
   2d6b2:	207f      	movs	r0, #127	; 0x7f
   2d6b4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2d6b8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2d6bc:	e59e      	b.n	2d1fc <_malloc_r+0x44>
   2d6be:	f104 0108 	add.w	r1, r4, #8
   2d6c2:	4628      	mov	r0, r5
   2d6c4:	9300      	str	r3, [sp, #0]
   2d6c6:	f000 fc3d 	bl	2df44 <_free_r>
   2d6ca:	9b00      	ldr	r3, [sp, #0]
   2d6cc:	6819      	ldr	r1, [r3, #0]
   2d6ce:	e6df      	b.n	2d490 <_malloc_r+0x2d8>
   2d6d0:	2001      	movs	r0, #1
   2d6d2:	f04f 0900 	mov.w	r9, #0
   2d6d6:	e6bc      	b.n	2d452 <_malloc_r+0x29a>
   2d6d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2d6dc:	d805      	bhi.n	2d6ea <_malloc_r+0x532>
   2d6de:	0bda      	lsrs	r2, r3, #15
   2d6e0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2d6e4:	00c9      	lsls	r1, r1, #3
   2d6e6:	3277      	adds	r2, #119	; 0x77
   2d6e8:	e720      	b.n	2d52c <_malloc_r+0x374>
   2d6ea:	f240 5154 	movw	r1, #1364	; 0x554
   2d6ee:	428a      	cmp	r2, r1
   2d6f0:	d805      	bhi.n	2d6fe <_malloc_r+0x546>
   2d6f2:	0c9a      	lsrs	r2, r3, #18
   2d6f4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2d6f8:	00c9      	lsls	r1, r1, #3
   2d6fa:	327c      	adds	r2, #124	; 0x7c
   2d6fc:	e716      	b.n	2d52c <_malloc_r+0x374>
   2d6fe:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2d702:	227e      	movs	r2, #126	; 0x7e
   2d704:	e712      	b.n	2d52c <_malloc_r+0x374>
   2d706:	687b      	ldr	r3, [r7, #4]
   2d708:	e780      	b.n	2d60c <_malloc_r+0x454>
   2d70a:	08f0      	lsrs	r0, r6, #3
   2d70c:	f106 0308 	add.w	r3, r6, #8
   2d710:	e600      	b.n	2d314 <_malloc_r+0x15c>
   2d712:	bf00      	nop
   2d714:	200028a8 	.word	0x200028a8

0002d718 <__malloc_lock>:
   2d718:	4801      	ldr	r0, [pc, #4]	; (2d720 <__malloc_lock+0x8>)
   2d71a:	f000 bcf9 	b.w	2e110 <__retarget_lock_acquire_recursive>
   2d71e:	bf00      	nop
   2d720:	20002c00 	.word	0x20002c00

0002d724 <__malloc_unlock>:
   2d724:	4801      	ldr	r0, [pc, #4]	; (2d72c <__malloc_unlock+0x8>)
   2d726:	f000 bcf5 	b.w	2e114 <__retarget_lock_release_recursive>
   2d72a:	bf00      	nop
   2d72c:	20002c00 	.word	0x20002c00

0002d730 <_Balloc>:
   2d730:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d732:	b570      	push	{r4, r5, r6, lr}
   2d734:	4605      	mov	r5, r0
   2d736:	460c      	mov	r4, r1
   2d738:	b14b      	cbz	r3, 2d74e <_Balloc+0x1e>
   2d73a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2d73e:	b180      	cbz	r0, 2d762 <_Balloc+0x32>
   2d740:	6802      	ldr	r2, [r0, #0]
   2d742:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2d746:	2300      	movs	r3, #0
   2d748:	6103      	str	r3, [r0, #16]
   2d74a:	60c3      	str	r3, [r0, #12]
   2d74c:	bd70      	pop	{r4, r5, r6, pc}
   2d74e:	2221      	movs	r2, #33	; 0x21
   2d750:	2104      	movs	r1, #4
   2d752:	f000 fb77 	bl	2de44 <_calloc_r>
   2d756:	64e8      	str	r0, [r5, #76]	; 0x4c
   2d758:	4603      	mov	r3, r0
   2d75a:	2800      	cmp	r0, #0
   2d75c:	d1ed      	bne.n	2d73a <_Balloc+0xa>
   2d75e:	2000      	movs	r0, #0
   2d760:	bd70      	pop	{r4, r5, r6, pc}
   2d762:	2101      	movs	r1, #1
   2d764:	fa01 f604 	lsl.w	r6, r1, r4
   2d768:	1d72      	adds	r2, r6, #5
   2d76a:	4628      	mov	r0, r5
   2d76c:	0092      	lsls	r2, r2, #2
   2d76e:	f000 fb69 	bl	2de44 <_calloc_r>
   2d772:	2800      	cmp	r0, #0
   2d774:	d0f3      	beq.n	2d75e <_Balloc+0x2e>
   2d776:	6044      	str	r4, [r0, #4]
   2d778:	6086      	str	r6, [r0, #8]
   2d77a:	e7e4      	b.n	2d746 <_Balloc+0x16>

0002d77c <_Bfree>:
   2d77c:	b131      	cbz	r1, 2d78c <_Bfree+0x10>
   2d77e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d780:	684a      	ldr	r2, [r1, #4]
   2d782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2d786:	6008      	str	r0, [r1, #0]
   2d788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2d78c:	4770      	bx	lr
   2d78e:	bf00      	nop

0002d790 <__multadd>:
   2d790:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d792:	690c      	ldr	r4, [r1, #16]
   2d794:	b083      	sub	sp, #12
   2d796:	460d      	mov	r5, r1
   2d798:	4606      	mov	r6, r0
   2d79a:	f101 0e14 	add.w	lr, r1, #20
   2d79e:	2700      	movs	r7, #0
   2d7a0:	f8de 0000 	ldr.w	r0, [lr]
   2d7a4:	b281      	uxth	r1, r0
   2d7a6:	fb02 3301 	mla	r3, r2, r1, r3
   2d7aa:	0c01      	lsrs	r1, r0, #16
   2d7ac:	0c18      	lsrs	r0, r3, #16
   2d7ae:	fb02 0101 	mla	r1, r2, r1, r0
   2d7b2:	b29b      	uxth	r3, r3
   2d7b4:	3701      	adds	r7, #1
   2d7b6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2d7ba:	42bc      	cmp	r4, r7
   2d7bc:	f84e 3b04 	str.w	r3, [lr], #4
   2d7c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2d7c4:	dcec      	bgt.n	2d7a0 <__multadd+0x10>
   2d7c6:	b13b      	cbz	r3, 2d7d8 <__multadd+0x48>
   2d7c8:	68aa      	ldr	r2, [r5, #8]
   2d7ca:	4294      	cmp	r4, r2
   2d7cc:	da07      	bge.n	2d7de <__multadd+0x4e>
   2d7ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2d7d2:	3401      	adds	r4, #1
   2d7d4:	6153      	str	r3, [r2, #20]
   2d7d6:	612c      	str	r4, [r5, #16]
   2d7d8:	4628      	mov	r0, r5
   2d7da:	b003      	add	sp, #12
   2d7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d7de:	6869      	ldr	r1, [r5, #4]
   2d7e0:	9301      	str	r3, [sp, #4]
   2d7e2:	3101      	adds	r1, #1
   2d7e4:	4630      	mov	r0, r6
   2d7e6:	f7ff ffa3 	bl	2d730 <_Balloc>
   2d7ea:	692a      	ldr	r2, [r5, #16]
   2d7ec:	3202      	adds	r2, #2
   2d7ee:	f105 010c 	add.w	r1, r5, #12
   2d7f2:	4607      	mov	r7, r0
   2d7f4:	0092      	lsls	r2, r2, #2
   2d7f6:	300c      	adds	r0, #12
   2d7f8:	f7d2 fd62 	bl	2c0 <memcpy>
   2d7fc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2d7fe:	6869      	ldr	r1, [r5, #4]
   2d800:	9b01      	ldr	r3, [sp, #4]
   2d802:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2d806:	6028      	str	r0, [r5, #0]
   2d808:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2d80c:	463d      	mov	r5, r7
   2d80e:	e7de      	b.n	2d7ce <__multadd+0x3e>

0002d810 <__hi0bits>:
   2d810:	0c02      	lsrs	r2, r0, #16
   2d812:	0412      	lsls	r2, r2, #16
   2d814:	4603      	mov	r3, r0
   2d816:	b9b2      	cbnz	r2, 2d846 <__hi0bits+0x36>
   2d818:	0403      	lsls	r3, r0, #16
   2d81a:	2010      	movs	r0, #16
   2d81c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2d820:	bf04      	itt	eq
   2d822:	021b      	lsleq	r3, r3, #8
   2d824:	3008      	addeq	r0, #8
   2d826:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2d82a:	bf04      	itt	eq
   2d82c:	011b      	lsleq	r3, r3, #4
   2d82e:	3004      	addeq	r0, #4
   2d830:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2d834:	bf04      	itt	eq
   2d836:	009b      	lsleq	r3, r3, #2
   2d838:	3002      	addeq	r0, #2
   2d83a:	2b00      	cmp	r3, #0
   2d83c:	db02      	blt.n	2d844 <__hi0bits+0x34>
   2d83e:	005b      	lsls	r3, r3, #1
   2d840:	d403      	bmi.n	2d84a <__hi0bits+0x3a>
   2d842:	2020      	movs	r0, #32
   2d844:	4770      	bx	lr
   2d846:	2000      	movs	r0, #0
   2d848:	e7e8      	b.n	2d81c <__hi0bits+0xc>
   2d84a:	3001      	adds	r0, #1
   2d84c:	4770      	bx	lr
   2d84e:	bf00      	nop

0002d850 <__lo0bits>:
   2d850:	6803      	ldr	r3, [r0, #0]
   2d852:	f013 0207 	ands.w	r2, r3, #7
   2d856:	4601      	mov	r1, r0
   2d858:	d007      	beq.n	2d86a <__lo0bits+0x1a>
   2d85a:	07da      	lsls	r2, r3, #31
   2d85c:	d421      	bmi.n	2d8a2 <__lo0bits+0x52>
   2d85e:	0798      	lsls	r0, r3, #30
   2d860:	d421      	bmi.n	2d8a6 <__lo0bits+0x56>
   2d862:	089b      	lsrs	r3, r3, #2
   2d864:	600b      	str	r3, [r1, #0]
   2d866:	2002      	movs	r0, #2
   2d868:	4770      	bx	lr
   2d86a:	b298      	uxth	r0, r3
   2d86c:	b198      	cbz	r0, 2d896 <__lo0bits+0x46>
   2d86e:	4610      	mov	r0, r2
   2d870:	f013 0fff 	tst.w	r3, #255	; 0xff
   2d874:	bf04      	itt	eq
   2d876:	0a1b      	lsreq	r3, r3, #8
   2d878:	3008      	addeq	r0, #8
   2d87a:	071a      	lsls	r2, r3, #28
   2d87c:	bf04      	itt	eq
   2d87e:	091b      	lsreq	r3, r3, #4
   2d880:	3004      	addeq	r0, #4
   2d882:	079a      	lsls	r2, r3, #30
   2d884:	bf04      	itt	eq
   2d886:	089b      	lsreq	r3, r3, #2
   2d888:	3002      	addeq	r0, #2
   2d88a:	07da      	lsls	r2, r3, #31
   2d88c:	d407      	bmi.n	2d89e <__lo0bits+0x4e>
   2d88e:	085b      	lsrs	r3, r3, #1
   2d890:	d104      	bne.n	2d89c <__lo0bits+0x4c>
   2d892:	2020      	movs	r0, #32
   2d894:	4770      	bx	lr
   2d896:	0c1b      	lsrs	r3, r3, #16
   2d898:	2010      	movs	r0, #16
   2d89a:	e7e9      	b.n	2d870 <__lo0bits+0x20>
   2d89c:	3001      	adds	r0, #1
   2d89e:	600b      	str	r3, [r1, #0]
   2d8a0:	4770      	bx	lr
   2d8a2:	2000      	movs	r0, #0
   2d8a4:	4770      	bx	lr
   2d8a6:	085b      	lsrs	r3, r3, #1
   2d8a8:	600b      	str	r3, [r1, #0]
   2d8aa:	2001      	movs	r0, #1
   2d8ac:	4770      	bx	lr
   2d8ae:	bf00      	nop

0002d8b0 <__i2b>:
   2d8b0:	b510      	push	{r4, lr}
   2d8b2:	460c      	mov	r4, r1
   2d8b4:	2101      	movs	r1, #1
   2d8b6:	f7ff ff3b 	bl	2d730 <_Balloc>
   2d8ba:	2201      	movs	r2, #1
   2d8bc:	6144      	str	r4, [r0, #20]
   2d8be:	6102      	str	r2, [r0, #16]
   2d8c0:	bd10      	pop	{r4, pc}
   2d8c2:	bf00      	nop

0002d8c4 <__multiply>:
   2d8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d8c8:	690c      	ldr	r4, [r1, #16]
   2d8ca:	6915      	ldr	r5, [r2, #16]
   2d8cc:	42ac      	cmp	r4, r5
   2d8ce:	b083      	sub	sp, #12
   2d8d0:	468b      	mov	fp, r1
   2d8d2:	4616      	mov	r6, r2
   2d8d4:	da04      	bge.n	2d8e0 <__multiply+0x1c>
   2d8d6:	4622      	mov	r2, r4
   2d8d8:	46b3      	mov	fp, r6
   2d8da:	462c      	mov	r4, r5
   2d8dc:	460e      	mov	r6, r1
   2d8de:	4615      	mov	r5, r2
   2d8e0:	f8db 3008 	ldr.w	r3, [fp, #8]
   2d8e4:	f8db 1004 	ldr.w	r1, [fp, #4]
   2d8e8:	eb04 0805 	add.w	r8, r4, r5
   2d8ec:	4598      	cmp	r8, r3
   2d8ee:	bfc8      	it	gt
   2d8f0:	3101      	addgt	r1, #1
   2d8f2:	f7ff ff1d 	bl	2d730 <_Balloc>
   2d8f6:	f100 0914 	add.w	r9, r0, #20
   2d8fa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2d8fe:	45d1      	cmp	r9, sl
   2d900:	9000      	str	r0, [sp, #0]
   2d902:	d205      	bcs.n	2d910 <__multiply+0x4c>
   2d904:	464b      	mov	r3, r9
   2d906:	2100      	movs	r1, #0
   2d908:	f843 1b04 	str.w	r1, [r3], #4
   2d90c:	459a      	cmp	sl, r3
   2d90e:	d8fb      	bhi.n	2d908 <__multiply+0x44>
   2d910:	f106 0c14 	add.w	ip, r6, #20
   2d914:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2d918:	f10b 0b14 	add.w	fp, fp, #20
   2d91c:	459c      	cmp	ip, r3
   2d91e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2d922:	d24c      	bcs.n	2d9be <__multiply+0xfa>
   2d924:	f8cd a004 	str.w	sl, [sp, #4]
   2d928:	469a      	mov	sl, r3
   2d92a:	f8dc 5000 	ldr.w	r5, [ip]
   2d92e:	b2af      	uxth	r7, r5
   2d930:	b1ef      	cbz	r7, 2d96e <__multiply+0xaa>
   2d932:	2100      	movs	r1, #0
   2d934:	464d      	mov	r5, r9
   2d936:	465e      	mov	r6, fp
   2d938:	460c      	mov	r4, r1
   2d93a:	f856 2b04 	ldr.w	r2, [r6], #4
   2d93e:	6828      	ldr	r0, [r5, #0]
   2d940:	b293      	uxth	r3, r2
   2d942:	b281      	uxth	r1, r0
   2d944:	fb07 1303 	mla	r3, r7, r3, r1
   2d948:	0c12      	lsrs	r2, r2, #16
   2d94a:	0c01      	lsrs	r1, r0, #16
   2d94c:	4423      	add	r3, r4
   2d94e:	fb07 1102 	mla	r1, r7, r2, r1
   2d952:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2d956:	b29b      	uxth	r3, r3
   2d958:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2d95c:	45b6      	cmp	lr, r6
   2d95e:	f845 3b04 	str.w	r3, [r5], #4
   2d962:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2d966:	d8e8      	bhi.n	2d93a <__multiply+0x76>
   2d968:	602c      	str	r4, [r5, #0]
   2d96a:	f8dc 5000 	ldr.w	r5, [ip]
   2d96e:	0c2d      	lsrs	r5, r5, #16
   2d970:	d01d      	beq.n	2d9ae <__multiply+0xea>
   2d972:	f8d9 3000 	ldr.w	r3, [r9]
   2d976:	4648      	mov	r0, r9
   2d978:	461c      	mov	r4, r3
   2d97a:	4659      	mov	r1, fp
   2d97c:	2200      	movs	r2, #0
   2d97e:	880e      	ldrh	r6, [r1, #0]
   2d980:	0c24      	lsrs	r4, r4, #16
   2d982:	fb05 4406 	mla	r4, r5, r6, r4
   2d986:	4422      	add	r2, r4
   2d988:	b29b      	uxth	r3, r3
   2d98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d98e:	f840 3b04 	str.w	r3, [r0], #4
   2d992:	f851 3b04 	ldr.w	r3, [r1], #4
   2d996:	6804      	ldr	r4, [r0, #0]
   2d998:	0c1b      	lsrs	r3, r3, #16
   2d99a:	b2a6      	uxth	r6, r4
   2d99c:	fb05 6303 	mla	r3, r5, r3, r6
   2d9a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2d9a4:	458e      	cmp	lr, r1
   2d9a6:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2d9aa:	d8e8      	bhi.n	2d97e <__multiply+0xba>
   2d9ac:	6003      	str	r3, [r0, #0]
   2d9ae:	f10c 0c04 	add.w	ip, ip, #4
   2d9b2:	45e2      	cmp	sl, ip
   2d9b4:	f109 0904 	add.w	r9, r9, #4
   2d9b8:	d8b7      	bhi.n	2d92a <__multiply+0x66>
   2d9ba:	f8dd a004 	ldr.w	sl, [sp, #4]
   2d9be:	f1b8 0f00 	cmp.w	r8, #0
   2d9c2:	dd0b      	ble.n	2d9dc <__multiply+0x118>
   2d9c4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2d9c8:	f1aa 0a04 	sub.w	sl, sl, #4
   2d9cc:	b11b      	cbz	r3, 2d9d6 <__multiply+0x112>
   2d9ce:	e005      	b.n	2d9dc <__multiply+0x118>
   2d9d0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2d9d4:	b913      	cbnz	r3, 2d9dc <__multiply+0x118>
   2d9d6:	f1b8 0801 	subs.w	r8, r8, #1
   2d9da:	d1f9      	bne.n	2d9d0 <__multiply+0x10c>
   2d9dc:	9800      	ldr	r0, [sp, #0]
   2d9de:	f8c0 8010 	str.w	r8, [r0, #16]
   2d9e2:	b003      	add	sp, #12
   2d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d9e8 <__pow5mult>:
   2d9e8:	f012 0303 	ands.w	r3, r2, #3
   2d9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9f0:	4614      	mov	r4, r2
   2d9f2:	4607      	mov	r7, r0
   2d9f4:	d12e      	bne.n	2da54 <__pow5mult+0x6c>
   2d9f6:	460d      	mov	r5, r1
   2d9f8:	10a4      	asrs	r4, r4, #2
   2d9fa:	d01c      	beq.n	2da36 <__pow5mult+0x4e>
   2d9fc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2d9fe:	b396      	cbz	r6, 2da66 <__pow5mult+0x7e>
   2da00:	07e3      	lsls	r3, r4, #31
   2da02:	f04f 0800 	mov.w	r8, #0
   2da06:	d406      	bmi.n	2da16 <__pow5mult+0x2e>
   2da08:	1064      	asrs	r4, r4, #1
   2da0a:	d014      	beq.n	2da36 <__pow5mult+0x4e>
   2da0c:	6830      	ldr	r0, [r6, #0]
   2da0e:	b1a8      	cbz	r0, 2da3c <__pow5mult+0x54>
   2da10:	4606      	mov	r6, r0
   2da12:	07e3      	lsls	r3, r4, #31
   2da14:	d5f8      	bpl.n	2da08 <__pow5mult+0x20>
   2da16:	4632      	mov	r2, r6
   2da18:	4629      	mov	r1, r5
   2da1a:	4638      	mov	r0, r7
   2da1c:	f7ff ff52 	bl	2d8c4 <__multiply>
   2da20:	b1b5      	cbz	r5, 2da50 <__pow5mult+0x68>
   2da22:	686a      	ldr	r2, [r5, #4]
   2da24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2da26:	1064      	asrs	r4, r4, #1
   2da28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2da2c:	6029      	str	r1, [r5, #0]
   2da2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2da32:	4605      	mov	r5, r0
   2da34:	d1ea      	bne.n	2da0c <__pow5mult+0x24>
   2da36:	4628      	mov	r0, r5
   2da38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2da3c:	4632      	mov	r2, r6
   2da3e:	4631      	mov	r1, r6
   2da40:	4638      	mov	r0, r7
   2da42:	f7ff ff3f 	bl	2d8c4 <__multiply>
   2da46:	6030      	str	r0, [r6, #0]
   2da48:	f8c0 8000 	str.w	r8, [r0]
   2da4c:	4606      	mov	r6, r0
   2da4e:	e7e0      	b.n	2da12 <__pow5mult+0x2a>
   2da50:	4605      	mov	r5, r0
   2da52:	e7d9      	b.n	2da08 <__pow5mult+0x20>
   2da54:	1e5a      	subs	r2, r3, #1
   2da56:	4d0b      	ldr	r5, [pc, #44]	; (2da84 <__pow5mult+0x9c>)
   2da58:	2300      	movs	r3, #0
   2da5a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2da5e:	f7ff fe97 	bl	2d790 <__multadd>
   2da62:	4605      	mov	r5, r0
   2da64:	e7c8      	b.n	2d9f8 <__pow5mult+0x10>
   2da66:	2101      	movs	r1, #1
   2da68:	4638      	mov	r0, r7
   2da6a:	f7ff fe61 	bl	2d730 <_Balloc>
   2da6e:	f240 2171 	movw	r1, #625	; 0x271
   2da72:	2201      	movs	r2, #1
   2da74:	2300      	movs	r3, #0
   2da76:	6141      	str	r1, [r0, #20]
   2da78:	6102      	str	r2, [r0, #16]
   2da7a:	4606      	mov	r6, r0
   2da7c:	64b8      	str	r0, [r7, #72]	; 0x48
   2da7e:	6003      	str	r3, [r0, #0]
   2da80:	e7be      	b.n	2da00 <__pow5mult+0x18>
   2da82:	bf00      	nop
   2da84:	00032cc8 	.word	0x00032cc8

0002da88 <__lshift>:
   2da88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2da8c:	4691      	mov	r9, r2
   2da8e:	690a      	ldr	r2, [r1, #16]
   2da90:	688b      	ldr	r3, [r1, #8]
   2da92:	ea4f 1469 	mov.w	r4, r9, asr #5
   2da96:	eb04 0802 	add.w	r8, r4, r2
   2da9a:	f108 0501 	add.w	r5, r8, #1
   2da9e:	429d      	cmp	r5, r3
   2daa0:	460e      	mov	r6, r1
   2daa2:	4607      	mov	r7, r0
   2daa4:	6849      	ldr	r1, [r1, #4]
   2daa6:	dd04      	ble.n	2dab2 <__lshift+0x2a>
   2daa8:	005b      	lsls	r3, r3, #1
   2daaa:	429d      	cmp	r5, r3
   2daac:	f101 0101 	add.w	r1, r1, #1
   2dab0:	dcfa      	bgt.n	2daa8 <__lshift+0x20>
   2dab2:	4638      	mov	r0, r7
   2dab4:	f7ff fe3c 	bl	2d730 <_Balloc>
   2dab8:	2c00      	cmp	r4, #0
   2daba:	f100 0314 	add.w	r3, r0, #20
   2dabe:	dd06      	ble.n	2dace <__lshift+0x46>
   2dac0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2dac4:	2100      	movs	r1, #0
   2dac6:	f843 1b04 	str.w	r1, [r3], #4
   2daca:	429a      	cmp	r2, r3
   2dacc:	d1fb      	bne.n	2dac6 <__lshift+0x3e>
   2dace:	6934      	ldr	r4, [r6, #16]
   2dad0:	f106 0114 	add.w	r1, r6, #20
   2dad4:	f019 091f 	ands.w	r9, r9, #31
   2dad8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2dadc:	d01d      	beq.n	2db1a <__lshift+0x92>
   2dade:	f1c9 0c20 	rsb	ip, r9, #32
   2dae2:	2200      	movs	r2, #0
   2dae4:	680c      	ldr	r4, [r1, #0]
   2dae6:	fa04 f409 	lsl.w	r4, r4, r9
   2daea:	4314      	orrs	r4, r2
   2daec:	f843 4b04 	str.w	r4, [r3], #4
   2daf0:	f851 2b04 	ldr.w	r2, [r1], #4
   2daf4:	458e      	cmp	lr, r1
   2daf6:	fa22 f20c 	lsr.w	r2, r2, ip
   2dafa:	d8f3      	bhi.n	2dae4 <__lshift+0x5c>
   2dafc:	601a      	str	r2, [r3, #0]
   2dafe:	b10a      	cbz	r2, 2db04 <__lshift+0x7c>
   2db00:	f108 0502 	add.w	r5, r8, #2
   2db04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2db06:	6872      	ldr	r2, [r6, #4]
   2db08:	3d01      	subs	r5, #1
   2db0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2db0e:	6105      	str	r5, [r0, #16]
   2db10:	6031      	str	r1, [r6, #0]
   2db12:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2db1a:	3b04      	subs	r3, #4
   2db1c:	f851 2b04 	ldr.w	r2, [r1], #4
   2db20:	f843 2f04 	str.w	r2, [r3, #4]!
   2db24:	458e      	cmp	lr, r1
   2db26:	d8f9      	bhi.n	2db1c <__lshift+0x94>
   2db28:	e7ec      	b.n	2db04 <__lshift+0x7c>
   2db2a:	bf00      	nop

0002db2c <__mcmp>:
   2db2c:	b430      	push	{r4, r5}
   2db2e:	690b      	ldr	r3, [r1, #16]
   2db30:	4605      	mov	r5, r0
   2db32:	6900      	ldr	r0, [r0, #16]
   2db34:	1ac0      	subs	r0, r0, r3
   2db36:	d10f      	bne.n	2db58 <__mcmp+0x2c>
   2db38:	009b      	lsls	r3, r3, #2
   2db3a:	3514      	adds	r5, #20
   2db3c:	3114      	adds	r1, #20
   2db3e:	4419      	add	r1, r3
   2db40:	442b      	add	r3, r5
   2db42:	e001      	b.n	2db48 <__mcmp+0x1c>
   2db44:	429d      	cmp	r5, r3
   2db46:	d207      	bcs.n	2db58 <__mcmp+0x2c>
   2db48:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2db4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2db50:	4294      	cmp	r4, r2
   2db52:	d0f7      	beq.n	2db44 <__mcmp+0x18>
   2db54:	d302      	bcc.n	2db5c <__mcmp+0x30>
   2db56:	2001      	movs	r0, #1
   2db58:	bc30      	pop	{r4, r5}
   2db5a:	4770      	bx	lr
   2db5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2db60:	e7fa      	b.n	2db58 <__mcmp+0x2c>
   2db62:	bf00      	nop

0002db64 <__mdiff>:
   2db64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db68:	690f      	ldr	r7, [r1, #16]
   2db6a:	460e      	mov	r6, r1
   2db6c:	6911      	ldr	r1, [r2, #16]
   2db6e:	1a7f      	subs	r7, r7, r1
   2db70:	2f00      	cmp	r7, #0
   2db72:	4690      	mov	r8, r2
   2db74:	d117      	bne.n	2dba6 <__mdiff+0x42>
   2db76:	0089      	lsls	r1, r1, #2
   2db78:	f106 0514 	add.w	r5, r6, #20
   2db7c:	f102 0e14 	add.w	lr, r2, #20
   2db80:	186b      	adds	r3, r5, r1
   2db82:	4471      	add	r1, lr
   2db84:	e001      	b.n	2db8a <__mdiff+0x26>
   2db86:	429d      	cmp	r5, r3
   2db88:	d25c      	bcs.n	2dc44 <__mdiff+0xe0>
   2db8a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2db8e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2db92:	42a2      	cmp	r2, r4
   2db94:	d0f7      	beq.n	2db86 <__mdiff+0x22>
   2db96:	d25e      	bcs.n	2dc56 <__mdiff+0xf2>
   2db98:	4633      	mov	r3, r6
   2db9a:	462c      	mov	r4, r5
   2db9c:	4646      	mov	r6, r8
   2db9e:	4675      	mov	r5, lr
   2dba0:	4698      	mov	r8, r3
   2dba2:	2701      	movs	r7, #1
   2dba4:	e005      	b.n	2dbb2 <__mdiff+0x4e>
   2dba6:	db58      	blt.n	2dc5a <__mdiff+0xf6>
   2dba8:	f106 0514 	add.w	r5, r6, #20
   2dbac:	f108 0414 	add.w	r4, r8, #20
   2dbb0:	2700      	movs	r7, #0
   2dbb2:	6871      	ldr	r1, [r6, #4]
   2dbb4:	f7ff fdbc 	bl	2d730 <_Balloc>
   2dbb8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2dbbc:	6936      	ldr	r6, [r6, #16]
   2dbbe:	60c7      	str	r7, [r0, #12]
   2dbc0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2dbc4:	46a6      	mov	lr, r4
   2dbc6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2dbca:	f100 0414 	add.w	r4, r0, #20
   2dbce:	2300      	movs	r3, #0
   2dbd0:	f85e 1b04 	ldr.w	r1, [lr], #4
   2dbd4:	f855 8b04 	ldr.w	r8, [r5], #4
   2dbd8:	b28a      	uxth	r2, r1
   2dbda:	fa13 f388 	uxtah	r3, r3, r8
   2dbde:	0c09      	lsrs	r1, r1, #16
   2dbe0:	1a9a      	subs	r2, r3, r2
   2dbe2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2dbe6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2dbea:	b292      	uxth	r2, r2
   2dbec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2dbf0:	45f4      	cmp	ip, lr
   2dbf2:	f844 2b04 	str.w	r2, [r4], #4
   2dbf6:	ea4f 4323 	mov.w	r3, r3, asr #16
   2dbfa:	d8e9      	bhi.n	2dbd0 <__mdiff+0x6c>
   2dbfc:	42af      	cmp	r7, r5
   2dbfe:	d917      	bls.n	2dc30 <__mdiff+0xcc>
   2dc00:	46a4      	mov	ip, r4
   2dc02:	46ae      	mov	lr, r5
   2dc04:	f85e 2b04 	ldr.w	r2, [lr], #4
   2dc08:	fa13 f382 	uxtah	r3, r3, r2
   2dc0c:	1419      	asrs	r1, r3, #16
   2dc0e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2dc12:	b29b      	uxth	r3, r3
   2dc14:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2dc18:	4577      	cmp	r7, lr
   2dc1a:	f84c 2b04 	str.w	r2, [ip], #4
   2dc1e:	ea4f 4321 	mov.w	r3, r1, asr #16
   2dc22:	d8ef      	bhi.n	2dc04 <__mdiff+0xa0>
   2dc24:	43ed      	mvns	r5, r5
   2dc26:	442f      	add	r7, r5
   2dc28:	f027 0703 	bic.w	r7, r7, #3
   2dc2c:	3704      	adds	r7, #4
   2dc2e:	443c      	add	r4, r7
   2dc30:	3c04      	subs	r4, #4
   2dc32:	b922      	cbnz	r2, 2dc3e <__mdiff+0xda>
   2dc34:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2dc38:	3e01      	subs	r6, #1
   2dc3a:	2b00      	cmp	r3, #0
   2dc3c:	d0fa      	beq.n	2dc34 <__mdiff+0xd0>
   2dc3e:	6106      	str	r6, [r0, #16]
   2dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dc44:	2100      	movs	r1, #0
   2dc46:	f7ff fd73 	bl	2d730 <_Balloc>
   2dc4a:	2201      	movs	r2, #1
   2dc4c:	2300      	movs	r3, #0
   2dc4e:	6102      	str	r2, [r0, #16]
   2dc50:	6143      	str	r3, [r0, #20]
   2dc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dc56:	4674      	mov	r4, lr
   2dc58:	e7ab      	b.n	2dbb2 <__mdiff+0x4e>
   2dc5a:	4633      	mov	r3, r6
   2dc5c:	f106 0414 	add.w	r4, r6, #20
   2dc60:	f102 0514 	add.w	r5, r2, #20
   2dc64:	4616      	mov	r6, r2
   2dc66:	2701      	movs	r7, #1
   2dc68:	4698      	mov	r8, r3
   2dc6a:	e7a2      	b.n	2dbb2 <__mdiff+0x4e>

0002dc6c <__d2b>:
   2dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dc70:	b082      	sub	sp, #8
   2dc72:	2101      	movs	r1, #1
   2dc74:	461c      	mov	r4, r3
   2dc76:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2dc7a:	4615      	mov	r5, r2
   2dc7c:	9e08      	ldr	r6, [sp, #32]
   2dc7e:	f7ff fd57 	bl	2d730 <_Balloc>
   2dc82:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2dc86:	4680      	mov	r8, r0
   2dc88:	b10f      	cbz	r7, 2dc8e <__d2b+0x22>
   2dc8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2dc8e:	9401      	str	r4, [sp, #4]
   2dc90:	b31d      	cbz	r5, 2dcda <__d2b+0x6e>
   2dc92:	a802      	add	r0, sp, #8
   2dc94:	f840 5d08 	str.w	r5, [r0, #-8]!
   2dc98:	f7ff fdda 	bl	2d850 <__lo0bits>
   2dc9c:	2800      	cmp	r0, #0
   2dc9e:	d134      	bne.n	2dd0a <__d2b+0x9e>
   2dca0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2dca4:	f8c8 2014 	str.w	r2, [r8, #20]
   2dca8:	2b00      	cmp	r3, #0
   2dcaa:	bf0c      	ite	eq
   2dcac:	2101      	moveq	r1, #1
   2dcae:	2102      	movne	r1, #2
   2dcb0:	f8c8 3018 	str.w	r3, [r8, #24]
   2dcb4:	f8c8 1010 	str.w	r1, [r8, #16]
   2dcb8:	b9df      	cbnz	r7, 2dcf2 <__d2b+0x86>
   2dcba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2dcbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2dcc2:	6030      	str	r0, [r6, #0]
   2dcc4:	6918      	ldr	r0, [r3, #16]
   2dcc6:	f7ff fda3 	bl	2d810 <__hi0bits>
   2dcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dccc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2dcd0:	6018      	str	r0, [r3, #0]
   2dcd2:	4640      	mov	r0, r8
   2dcd4:	b002      	add	sp, #8
   2dcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dcda:	a801      	add	r0, sp, #4
   2dcdc:	f7ff fdb8 	bl	2d850 <__lo0bits>
   2dce0:	9b01      	ldr	r3, [sp, #4]
   2dce2:	f8c8 3014 	str.w	r3, [r8, #20]
   2dce6:	2101      	movs	r1, #1
   2dce8:	3020      	adds	r0, #32
   2dcea:	f8c8 1010 	str.w	r1, [r8, #16]
   2dcee:	2f00      	cmp	r7, #0
   2dcf0:	d0e3      	beq.n	2dcba <__d2b+0x4e>
   2dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dcf4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2dcf8:	4407      	add	r7, r0
   2dcfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2dcfe:	6037      	str	r7, [r6, #0]
   2dd00:	6018      	str	r0, [r3, #0]
   2dd02:	4640      	mov	r0, r8
   2dd04:	b002      	add	sp, #8
   2dd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dd0a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2dd0e:	f1c0 0220 	rsb	r2, r0, #32
   2dd12:	fa03 f202 	lsl.w	r2, r3, r2
   2dd16:	430a      	orrs	r2, r1
   2dd18:	40c3      	lsrs	r3, r0
   2dd1a:	9301      	str	r3, [sp, #4]
   2dd1c:	f8c8 2014 	str.w	r2, [r8, #20]
   2dd20:	e7c2      	b.n	2dca8 <__d2b+0x3c>
   2dd22:	bf00      	nop

0002dd24 <_sbrk_r>:
   2dd24:	b538      	push	{r3, r4, r5, lr}
   2dd26:	4c07      	ldr	r4, [pc, #28]	; (2dd44 <_sbrk_r+0x20>)
   2dd28:	2300      	movs	r3, #0
   2dd2a:	4605      	mov	r5, r0
   2dd2c:	4608      	mov	r0, r1
   2dd2e:	6023      	str	r3, [r4, #0]
   2dd30:	f7d3 fe48 	bl	19c4 <_sbrk>
   2dd34:	1c43      	adds	r3, r0, #1
   2dd36:	d000      	beq.n	2dd3a <_sbrk_r+0x16>
   2dd38:	bd38      	pop	{r3, r4, r5, pc}
   2dd3a:	6823      	ldr	r3, [r4, #0]
   2dd3c:	2b00      	cmp	r3, #0
   2dd3e:	d0fb      	beq.n	2dd38 <_sbrk_r+0x14>
   2dd40:	602b      	str	r3, [r5, #0]
   2dd42:	bd38      	pop	{r3, r4, r5, pc}
   2dd44:	20002c14 	.word	0x20002c14

0002dd48 <__ssprint_r>:
   2dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd4c:	6893      	ldr	r3, [r2, #8]
   2dd4e:	b083      	sub	sp, #12
   2dd50:	4690      	mov	r8, r2
   2dd52:	2b00      	cmp	r3, #0
   2dd54:	d070      	beq.n	2de38 <__ssprint_r+0xf0>
   2dd56:	4682      	mov	sl, r0
   2dd58:	460c      	mov	r4, r1
   2dd5a:	6817      	ldr	r7, [r2, #0]
   2dd5c:	688d      	ldr	r5, [r1, #8]
   2dd5e:	6808      	ldr	r0, [r1, #0]
   2dd60:	e042      	b.n	2dde8 <__ssprint_r+0xa0>
   2dd62:	89a3      	ldrh	r3, [r4, #12]
   2dd64:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2dd68:	d02e      	beq.n	2ddc8 <__ssprint_r+0x80>
   2dd6a:	6965      	ldr	r5, [r4, #20]
   2dd6c:	6921      	ldr	r1, [r4, #16]
   2dd6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2dd72:	eba0 0b01 	sub.w	fp, r0, r1
   2dd76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2dd7a:	f10b 0001 	add.w	r0, fp, #1
   2dd7e:	106d      	asrs	r5, r5, #1
   2dd80:	4430      	add	r0, r6
   2dd82:	42a8      	cmp	r0, r5
   2dd84:	462a      	mov	r2, r5
   2dd86:	bf84      	itt	hi
   2dd88:	4605      	movhi	r5, r0
   2dd8a:	462a      	movhi	r2, r5
   2dd8c:	055b      	lsls	r3, r3, #21
   2dd8e:	d538      	bpl.n	2de02 <__ssprint_r+0xba>
   2dd90:	4611      	mov	r1, r2
   2dd92:	4650      	mov	r0, sl
   2dd94:	f7ff fa10 	bl	2d1b8 <_malloc_r>
   2dd98:	2800      	cmp	r0, #0
   2dd9a:	d03c      	beq.n	2de16 <__ssprint_r+0xce>
   2dd9c:	465a      	mov	r2, fp
   2dd9e:	6921      	ldr	r1, [r4, #16]
   2dda0:	9001      	str	r0, [sp, #4]
   2dda2:	f7d2 fa8d 	bl	2c0 <memcpy>
   2dda6:	89a2      	ldrh	r2, [r4, #12]
   2dda8:	9b01      	ldr	r3, [sp, #4]
   2ddaa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2ddae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2ddb2:	81a2      	strh	r2, [r4, #12]
   2ddb4:	eba5 020b 	sub.w	r2, r5, fp
   2ddb8:	eb03 000b 	add.w	r0, r3, fp
   2ddbc:	6165      	str	r5, [r4, #20]
   2ddbe:	6123      	str	r3, [r4, #16]
   2ddc0:	6020      	str	r0, [r4, #0]
   2ddc2:	60a2      	str	r2, [r4, #8]
   2ddc4:	4635      	mov	r5, r6
   2ddc6:	46b3      	mov	fp, r6
   2ddc8:	465a      	mov	r2, fp
   2ddca:	4649      	mov	r1, r9
   2ddcc:	f7fc f99c 	bl	2a108 <memmove>
   2ddd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2ddd4:	68a2      	ldr	r2, [r4, #8]
   2ddd6:	6820      	ldr	r0, [r4, #0]
   2ddd8:	1b55      	subs	r5, r2, r5
   2ddda:	4458      	add	r0, fp
   2dddc:	1b9e      	subs	r6, r3, r6
   2ddde:	60a5      	str	r5, [r4, #8]
   2dde0:	6020      	str	r0, [r4, #0]
   2dde2:	f8c8 6008 	str.w	r6, [r8, #8]
   2dde6:	b33e      	cbz	r6, 2de38 <__ssprint_r+0xf0>
   2dde8:	687e      	ldr	r6, [r7, #4]
   2ddea:	463b      	mov	r3, r7
   2ddec:	3708      	adds	r7, #8
   2ddee:	2e00      	cmp	r6, #0
   2ddf0:	d0fa      	beq.n	2dde8 <__ssprint_r+0xa0>
   2ddf2:	42ae      	cmp	r6, r5
   2ddf4:	f8d3 9000 	ldr.w	r9, [r3]
   2ddf8:	46ab      	mov	fp, r5
   2ddfa:	d2b2      	bcs.n	2dd62 <__ssprint_r+0x1a>
   2ddfc:	4635      	mov	r5, r6
   2ddfe:	46b3      	mov	fp, r6
   2de00:	e7e2      	b.n	2ddc8 <__ssprint_r+0x80>
   2de02:	4650      	mov	r0, sl
   2de04:	f000 f988 	bl	2e118 <_realloc_r>
   2de08:	4603      	mov	r3, r0
   2de0a:	2800      	cmp	r0, #0
   2de0c:	d1d2      	bne.n	2ddb4 <__ssprint_r+0x6c>
   2de0e:	6921      	ldr	r1, [r4, #16]
   2de10:	4650      	mov	r0, sl
   2de12:	f000 f897 	bl	2df44 <_free_r>
   2de16:	230c      	movs	r3, #12
   2de18:	f8ca 3000 	str.w	r3, [sl]
   2de1c:	89a3      	ldrh	r3, [r4, #12]
   2de1e:	2200      	movs	r2, #0
   2de20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2de24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2de28:	81a3      	strh	r3, [r4, #12]
   2de2a:	f8c8 2008 	str.w	r2, [r8, #8]
   2de2e:	f8c8 2004 	str.w	r2, [r8, #4]
   2de32:	b003      	add	sp, #12
   2de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de38:	2000      	movs	r0, #0
   2de3a:	f8c8 0004 	str.w	r0, [r8, #4]
   2de3e:	b003      	add	sp, #12
   2de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002de44 <_calloc_r>:
   2de44:	b510      	push	{r4, lr}
   2de46:	fb02 f101 	mul.w	r1, r2, r1
   2de4a:	f7ff f9b5 	bl	2d1b8 <_malloc_r>
   2de4e:	4604      	mov	r4, r0
   2de50:	b1d8      	cbz	r0, 2de8a <_calloc_r+0x46>
   2de52:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2de56:	f022 0203 	bic.w	r2, r2, #3
   2de5a:	3a04      	subs	r2, #4
   2de5c:	2a24      	cmp	r2, #36	; 0x24
   2de5e:	d818      	bhi.n	2de92 <_calloc_r+0x4e>
   2de60:	2a13      	cmp	r2, #19
   2de62:	d914      	bls.n	2de8e <_calloc_r+0x4a>
   2de64:	2300      	movs	r3, #0
   2de66:	2a1b      	cmp	r2, #27
   2de68:	6003      	str	r3, [r0, #0]
   2de6a:	6043      	str	r3, [r0, #4]
   2de6c:	d916      	bls.n	2de9c <_calloc_r+0x58>
   2de6e:	2a24      	cmp	r2, #36	; 0x24
   2de70:	6083      	str	r3, [r0, #8]
   2de72:	60c3      	str	r3, [r0, #12]
   2de74:	bf11      	iteee	ne
   2de76:	f100 0210 	addne.w	r2, r0, #16
   2de7a:	6103      	streq	r3, [r0, #16]
   2de7c:	6143      	streq	r3, [r0, #20]
   2de7e:	f100 0218 	addeq.w	r2, r0, #24
   2de82:	2300      	movs	r3, #0
   2de84:	6013      	str	r3, [r2, #0]
   2de86:	6053      	str	r3, [r2, #4]
   2de88:	6093      	str	r3, [r2, #8]
   2de8a:	4620      	mov	r0, r4
   2de8c:	bd10      	pop	{r4, pc}
   2de8e:	4602      	mov	r2, r0
   2de90:	e7f7      	b.n	2de82 <_calloc_r+0x3e>
   2de92:	2100      	movs	r1, #0
   2de94:	f7fc f99c 	bl	2a1d0 <memset>
   2de98:	4620      	mov	r0, r4
   2de9a:	bd10      	pop	{r4, pc}
   2de9c:	f100 0208 	add.w	r2, r0, #8
   2dea0:	e7ef      	b.n	2de82 <_calloc_r+0x3e>
   2dea2:	bf00      	nop

0002dea4 <_malloc_trim_r>:
   2dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dea6:	4f24      	ldr	r7, [pc, #144]	; (2df38 <_malloc_trim_r+0x94>)
   2dea8:	460c      	mov	r4, r1
   2deaa:	4606      	mov	r6, r0
   2deac:	f7ff fc34 	bl	2d718 <__malloc_lock>
   2deb0:	68bb      	ldr	r3, [r7, #8]
   2deb2:	685d      	ldr	r5, [r3, #4]
   2deb4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2deb8:	310f      	adds	r1, #15
   2deba:	f025 0503 	bic.w	r5, r5, #3
   2debe:	4429      	add	r1, r5
   2dec0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2dec4:	f021 010f 	bic.w	r1, r1, #15
   2dec8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2decc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2ded0:	db07      	blt.n	2dee2 <_malloc_trim_r+0x3e>
   2ded2:	2100      	movs	r1, #0
   2ded4:	4630      	mov	r0, r6
   2ded6:	f7ff ff25 	bl	2dd24 <_sbrk_r>
   2deda:	68bb      	ldr	r3, [r7, #8]
   2dedc:	442b      	add	r3, r5
   2dede:	4298      	cmp	r0, r3
   2dee0:	d004      	beq.n	2deec <_malloc_trim_r+0x48>
   2dee2:	4630      	mov	r0, r6
   2dee4:	f7ff fc1e 	bl	2d724 <__malloc_unlock>
   2dee8:	2000      	movs	r0, #0
   2deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2deec:	4261      	negs	r1, r4
   2deee:	4630      	mov	r0, r6
   2def0:	f7ff ff18 	bl	2dd24 <_sbrk_r>
   2def4:	3001      	adds	r0, #1
   2def6:	d00d      	beq.n	2df14 <_malloc_trim_r+0x70>
   2def8:	4b10      	ldr	r3, [pc, #64]	; (2df3c <_malloc_trim_r+0x98>)
   2defa:	68ba      	ldr	r2, [r7, #8]
   2defc:	6819      	ldr	r1, [r3, #0]
   2defe:	1b2d      	subs	r5, r5, r4
   2df00:	f045 0501 	orr.w	r5, r5, #1
   2df04:	4630      	mov	r0, r6
   2df06:	1b09      	subs	r1, r1, r4
   2df08:	6055      	str	r5, [r2, #4]
   2df0a:	6019      	str	r1, [r3, #0]
   2df0c:	f7ff fc0a 	bl	2d724 <__malloc_unlock>
   2df10:	2001      	movs	r0, #1
   2df12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2df14:	2100      	movs	r1, #0
   2df16:	4630      	mov	r0, r6
   2df18:	f7ff ff04 	bl	2dd24 <_sbrk_r>
   2df1c:	68ba      	ldr	r2, [r7, #8]
   2df1e:	1a83      	subs	r3, r0, r2
   2df20:	2b0f      	cmp	r3, #15
   2df22:	ddde      	ble.n	2dee2 <_malloc_trim_r+0x3e>
   2df24:	4c06      	ldr	r4, [pc, #24]	; (2df40 <_malloc_trim_r+0x9c>)
   2df26:	4905      	ldr	r1, [pc, #20]	; (2df3c <_malloc_trim_r+0x98>)
   2df28:	6824      	ldr	r4, [r4, #0]
   2df2a:	f043 0301 	orr.w	r3, r3, #1
   2df2e:	1b00      	subs	r0, r0, r4
   2df30:	6053      	str	r3, [r2, #4]
   2df32:	6008      	str	r0, [r1, #0]
   2df34:	e7d5      	b.n	2dee2 <_malloc_trim_r+0x3e>
   2df36:	bf00      	nop
   2df38:	2000cb20 	.word	0x2000cb20
   2df3c:	200028a8 	.word	0x200028a8
   2df40:	2000cf28 	.word	0x2000cf28

0002df44 <_free_r>:
   2df44:	2900      	cmp	r1, #0
   2df46:	d044      	beq.n	2dfd2 <_free_r+0x8e>
   2df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df4c:	460d      	mov	r5, r1
   2df4e:	4680      	mov	r8, r0
   2df50:	f7ff fbe2 	bl	2d718 <__malloc_lock>
   2df54:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2df58:	4969      	ldr	r1, [pc, #420]	; (2e100 <_free_r+0x1bc>)
   2df5a:	f027 0301 	bic.w	r3, r7, #1
   2df5e:	f1a5 0408 	sub.w	r4, r5, #8
   2df62:	18e2      	adds	r2, r4, r3
   2df64:	688e      	ldr	r6, [r1, #8]
   2df66:	6850      	ldr	r0, [r2, #4]
   2df68:	42b2      	cmp	r2, r6
   2df6a:	f020 0003 	bic.w	r0, r0, #3
   2df6e:	d05e      	beq.n	2e02e <_free_r+0xea>
   2df70:	07fe      	lsls	r6, r7, #31
   2df72:	6050      	str	r0, [r2, #4]
   2df74:	d40b      	bmi.n	2df8e <_free_r+0x4a>
   2df76:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2df7a:	1be4      	subs	r4, r4, r7
   2df7c:	f101 0e08 	add.w	lr, r1, #8
   2df80:	68a5      	ldr	r5, [r4, #8]
   2df82:	4575      	cmp	r5, lr
   2df84:	443b      	add	r3, r7
   2df86:	d06d      	beq.n	2e064 <_free_r+0x120>
   2df88:	68e7      	ldr	r7, [r4, #12]
   2df8a:	60ef      	str	r7, [r5, #12]
   2df8c:	60bd      	str	r5, [r7, #8]
   2df8e:	1815      	adds	r5, r2, r0
   2df90:	686d      	ldr	r5, [r5, #4]
   2df92:	07ed      	lsls	r5, r5, #31
   2df94:	d53e      	bpl.n	2e014 <_free_r+0xd0>
   2df96:	f043 0201 	orr.w	r2, r3, #1
   2df9a:	6062      	str	r2, [r4, #4]
   2df9c:	50e3      	str	r3, [r4, r3]
   2df9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2dfa2:	d217      	bcs.n	2dfd4 <_free_r+0x90>
   2dfa4:	08db      	lsrs	r3, r3, #3
   2dfa6:	1c58      	adds	r0, r3, #1
   2dfa8:	109a      	asrs	r2, r3, #2
   2dfaa:	684d      	ldr	r5, [r1, #4]
   2dfac:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2dfb0:	60a7      	str	r7, [r4, #8]
   2dfb2:	2301      	movs	r3, #1
   2dfb4:	4093      	lsls	r3, r2
   2dfb6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2dfba:	432b      	orrs	r3, r5
   2dfbc:	3a08      	subs	r2, #8
   2dfbe:	60e2      	str	r2, [r4, #12]
   2dfc0:	604b      	str	r3, [r1, #4]
   2dfc2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2dfc6:	60fc      	str	r4, [r7, #12]
   2dfc8:	4640      	mov	r0, r8
   2dfca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dfce:	f7ff bba9 	b.w	2d724 <__malloc_unlock>
   2dfd2:	4770      	bx	lr
   2dfd4:	0a5a      	lsrs	r2, r3, #9
   2dfd6:	2a04      	cmp	r2, #4
   2dfd8:	d852      	bhi.n	2e080 <_free_r+0x13c>
   2dfda:	099a      	lsrs	r2, r3, #6
   2dfdc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2dfe0:	00ff      	lsls	r7, r7, #3
   2dfe2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2dfe6:	19c8      	adds	r0, r1, r7
   2dfe8:	59ca      	ldr	r2, [r1, r7]
   2dfea:	3808      	subs	r0, #8
   2dfec:	4290      	cmp	r0, r2
   2dfee:	d04f      	beq.n	2e090 <_free_r+0x14c>
   2dff0:	6851      	ldr	r1, [r2, #4]
   2dff2:	f021 0103 	bic.w	r1, r1, #3
   2dff6:	428b      	cmp	r3, r1
   2dff8:	d232      	bcs.n	2e060 <_free_r+0x11c>
   2dffa:	6892      	ldr	r2, [r2, #8]
   2dffc:	4290      	cmp	r0, r2
   2dffe:	d1f7      	bne.n	2dff0 <_free_r+0xac>
   2e000:	68c3      	ldr	r3, [r0, #12]
   2e002:	60a0      	str	r0, [r4, #8]
   2e004:	60e3      	str	r3, [r4, #12]
   2e006:	609c      	str	r4, [r3, #8]
   2e008:	60c4      	str	r4, [r0, #12]
   2e00a:	4640      	mov	r0, r8
   2e00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e010:	f7ff bb88 	b.w	2d724 <__malloc_unlock>
   2e014:	6895      	ldr	r5, [r2, #8]
   2e016:	4f3b      	ldr	r7, [pc, #236]	; (2e104 <_free_r+0x1c0>)
   2e018:	42bd      	cmp	r5, r7
   2e01a:	4403      	add	r3, r0
   2e01c:	d040      	beq.n	2e0a0 <_free_r+0x15c>
   2e01e:	68d0      	ldr	r0, [r2, #12]
   2e020:	60e8      	str	r0, [r5, #12]
   2e022:	f043 0201 	orr.w	r2, r3, #1
   2e026:	6085      	str	r5, [r0, #8]
   2e028:	6062      	str	r2, [r4, #4]
   2e02a:	50e3      	str	r3, [r4, r3]
   2e02c:	e7b7      	b.n	2df9e <_free_r+0x5a>
   2e02e:	07ff      	lsls	r7, r7, #31
   2e030:	4403      	add	r3, r0
   2e032:	d407      	bmi.n	2e044 <_free_r+0x100>
   2e034:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2e038:	1aa4      	subs	r4, r4, r2
   2e03a:	4413      	add	r3, r2
   2e03c:	68a0      	ldr	r0, [r4, #8]
   2e03e:	68e2      	ldr	r2, [r4, #12]
   2e040:	60c2      	str	r2, [r0, #12]
   2e042:	6090      	str	r0, [r2, #8]
   2e044:	4a30      	ldr	r2, [pc, #192]	; (2e108 <_free_r+0x1c4>)
   2e046:	6812      	ldr	r2, [r2, #0]
   2e048:	f043 0001 	orr.w	r0, r3, #1
   2e04c:	4293      	cmp	r3, r2
   2e04e:	6060      	str	r0, [r4, #4]
   2e050:	608c      	str	r4, [r1, #8]
   2e052:	d3b9      	bcc.n	2dfc8 <_free_r+0x84>
   2e054:	4b2d      	ldr	r3, [pc, #180]	; (2e10c <_free_r+0x1c8>)
   2e056:	4640      	mov	r0, r8
   2e058:	6819      	ldr	r1, [r3, #0]
   2e05a:	f7ff ff23 	bl	2dea4 <_malloc_trim_r>
   2e05e:	e7b3      	b.n	2dfc8 <_free_r+0x84>
   2e060:	4610      	mov	r0, r2
   2e062:	e7cd      	b.n	2e000 <_free_r+0xbc>
   2e064:	1811      	adds	r1, r2, r0
   2e066:	6849      	ldr	r1, [r1, #4]
   2e068:	07c9      	lsls	r1, r1, #31
   2e06a:	d444      	bmi.n	2e0f6 <_free_r+0x1b2>
   2e06c:	6891      	ldr	r1, [r2, #8]
   2e06e:	68d2      	ldr	r2, [r2, #12]
   2e070:	60ca      	str	r2, [r1, #12]
   2e072:	4403      	add	r3, r0
   2e074:	f043 0001 	orr.w	r0, r3, #1
   2e078:	6091      	str	r1, [r2, #8]
   2e07a:	6060      	str	r0, [r4, #4]
   2e07c:	50e3      	str	r3, [r4, r3]
   2e07e:	e7a3      	b.n	2dfc8 <_free_r+0x84>
   2e080:	2a14      	cmp	r2, #20
   2e082:	d816      	bhi.n	2e0b2 <_free_r+0x16e>
   2e084:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2e088:	00ff      	lsls	r7, r7, #3
   2e08a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2e08e:	e7aa      	b.n	2dfe6 <_free_r+0xa2>
   2e090:	10aa      	asrs	r2, r5, #2
   2e092:	2301      	movs	r3, #1
   2e094:	684d      	ldr	r5, [r1, #4]
   2e096:	4093      	lsls	r3, r2
   2e098:	432b      	orrs	r3, r5
   2e09a:	604b      	str	r3, [r1, #4]
   2e09c:	4603      	mov	r3, r0
   2e09e:	e7b0      	b.n	2e002 <_free_r+0xbe>
   2e0a0:	f043 0201 	orr.w	r2, r3, #1
   2e0a4:	614c      	str	r4, [r1, #20]
   2e0a6:	610c      	str	r4, [r1, #16]
   2e0a8:	60e5      	str	r5, [r4, #12]
   2e0aa:	60a5      	str	r5, [r4, #8]
   2e0ac:	6062      	str	r2, [r4, #4]
   2e0ae:	50e3      	str	r3, [r4, r3]
   2e0b0:	e78a      	b.n	2dfc8 <_free_r+0x84>
   2e0b2:	2a54      	cmp	r2, #84	; 0x54
   2e0b4:	d806      	bhi.n	2e0c4 <_free_r+0x180>
   2e0b6:	0b1a      	lsrs	r2, r3, #12
   2e0b8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2e0bc:	00ff      	lsls	r7, r7, #3
   2e0be:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2e0c2:	e790      	b.n	2dfe6 <_free_r+0xa2>
   2e0c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2e0c8:	d806      	bhi.n	2e0d8 <_free_r+0x194>
   2e0ca:	0bda      	lsrs	r2, r3, #15
   2e0cc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2e0d0:	00ff      	lsls	r7, r7, #3
   2e0d2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2e0d6:	e786      	b.n	2dfe6 <_free_r+0xa2>
   2e0d8:	f240 5054 	movw	r0, #1364	; 0x554
   2e0dc:	4282      	cmp	r2, r0
   2e0de:	d806      	bhi.n	2e0ee <_free_r+0x1aa>
   2e0e0:	0c9a      	lsrs	r2, r3, #18
   2e0e2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2e0e6:	00ff      	lsls	r7, r7, #3
   2e0e8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2e0ec:	e77b      	b.n	2dfe6 <_free_r+0xa2>
   2e0ee:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2e0f2:	257e      	movs	r5, #126	; 0x7e
   2e0f4:	e777      	b.n	2dfe6 <_free_r+0xa2>
   2e0f6:	f043 0101 	orr.w	r1, r3, #1
   2e0fa:	6061      	str	r1, [r4, #4]
   2e0fc:	6013      	str	r3, [r2, #0]
   2e0fe:	e763      	b.n	2dfc8 <_free_r+0x84>
   2e100:	2000cb20 	.word	0x2000cb20
   2e104:	2000cb28 	.word	0x2000cb28
   2e108:	2000cf2c 	.word	0x2000cf2c
   2e10c:	200028d8 	.word	0x200028d8

0002e110 <__retarget_lock_acquire_recursive>:
   2e110:	4770      	bx	lr
   2e112:	bf00      	nop

0002e114 <__retarget_lock_release_recursive>:
   2e114:	4770      	bx	lr
   2e116:	bf00      	nop

0002e118 <_realloc_r>:
   2e118:	2900      	cmp	r1, #0
   2e11a:	f000 8095 	beq.w	2e248 <_realloc_r+0x130>
   2e11e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e122:	460d      	mov	r5, r1
   2e124:	4616      	mov	r6, r2
   2e126:	b083      	sub	sp, #12
   2e128:	4680      	mov	r8, r0
   2e12a:	f106 070b 	add.w	r7, r6, #11
   2e12e:	f7ff faf3 	bl	2d718 <__malloc_lock>
   2e132:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e136:	2f16      	cmp	r7, #22
   2e138:	f02e 0403 	bic.w	r4, lr, #3
   2e13c:	f1a5 0908 	sub.w	r9, r5, #8
   2e140:	d83c      	bhi.n	2e1bc <_realloc_r+0xa4>
   2e142:	2210      	movs	r2, #16
   2e144:	4617      	mov	r7, r2
   2e146:	42be      	cmp	r6, r7
   2e148:	d83d      	bhi.n	2e1c6 <_realloc_r+0xae>
   2e14a:	4294      	cmp	r4, r2
   2e14c:	da43      	bge.n	2e1d6 <_realloc_r+0xbe>
   2e14e:	4bc4      	ldr	r3, [pc, #784]	; (2e460 <_realloc_r+0x348>)
   2e150:	6899      	ldr	r1, [r3, #8]
   2e152:	eb09 0004 	add.w	r0, r9, r4
   2e156:	4288      	cmp	r0, r1
   2e158:	f000 80b4 	beq.w	2e2c4 <_realloc_r+0x1ac>
   2e15c:	6843      	ldr	r3, [r0, #4]
   2e15e:	f023 0101 	bic.w	r1, r3, #1
   2e162:	4401      	add	r1, r0
   2e164:	6849      	ldr	r1, [r1, #4]
   2e166:	07c9      	lsls	r1, r1, #31
   2e168:	d54c      	bpl.n	2e204 <_realloc_r+0xec>
   2e16a:	f01e 0f01 	tst.w	lr, #1
   2e16e:	f000 809b 	beq.w	2e2a8 <_realloc_r+0x190>
   2e172:	4631      	mov	r1, r6
   2e174:	4640      	mov	r0, r8
   2e176:	f7ff f81f 	bl	2d1b8 <_malloc_r>
   2e17a:	4606      	mov	r6, r0
   2e17c:	2800      	cmp	r0, #0
   2e17e:	d03a      	beq.n	2e1f6 <_realloc_r+0xde>
   2e180:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e184:	f023 0301 	bic.w	r3, r3, #1
   2e188:	444b      	add	r3, r9
   2e18a:	f1a0 0208 	sub.w	r2, r0, #8
   2e18e:	429a      	cmp	r2, r3
   2e190:	f000 8121 	beq.w	2e3d6 <_realloc_r+0x2be>
   2e194:	1f22      	subs	r2, r4, #4
   2e196:	2a24      	cmp	r2, #36	; 0x24
   2e198:	f200 8107 	bhi.w	2e3aa <_realloc_r+0x292>
   2e19c:	2a13      	cmp	r2, #19
   2e19e:	f200 80db 	bhi.w	2e358 <_realloc_r+0x240>
   2e1a2:	4603      	mov	r3, r0
   2e1a4:	462a      	mov	r2, r5
   2e1a6:	6811      	ldr	r1, [r2, #0]
   2e1a8:	6019      	str	r1, [r3, #0]
   2e1aa:	6851      	ldr	r1, [r2, #4]
   2e1ac:	6059      	str	r1, [r3, #4]
   2e1ae:	6892      	ldr	r2, [r2, #8]
   2e1b0:	609a      	str	r2, [r3, #8]
   2e1b2:	4629      	mov	r1, r5
   2e1b4:	4640      	mov	r0, r8
   2e1b6:	f7ff fec5 	bl	2df44 <_free_r>
   2e1ba:	e01c      	b.n	2e1f6 <_realloc_r+0xde>
   2e1bc:	f027 0707 	bic.w	r7, r7, #7
   2e1c0:	2f00      	cmp	r7, #0
   2e1c2:	463a      	mov	r2, r7
   2e1c4:	dabf      	bge.n	2e146 <_realloc_r+0x2e>
   2e1c6:	2600      	movs	r6, #0
   2e1c8:	230c      	movs	r3, #12
   2e1ca:	4630      	mov	r0, r6
   2e1cc:	f8c8 3000 	str.w	r3, [r8]
   2e1d0:	b003      	add	sp, #12
   2e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e1d6:	462e      	mov	r6, r5
   2e1d8:	1be3      	subs	r3, r4, r7
   2e1da:	2b0f      	cmp	r3, #15
   2e1dc:	d81e      	bhi.n	2e21c <_realloc_r+0x104>
   2e1de:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e1e2:	f003 0301 	and.w	r3, r3, #1
   2e1e6:	4323      	orrs	r3, r4
   2e1e8:	444c      	add	r4, r9
   2e1ea:	f8c9 3004 	str.w	r3, [r9, #4]
   2e1ee:	6863      	ldr	r3, [r4, #4]
   2e1f0:	f043 0301 	orr.w	r3, r3, #1
   2e1f4:	6063      	str	r3, [r4, #4]
   2e1f6:	4640      	mov	r0, r8
   2e1f8:	f7ff fa94 	bl	2d724 <__malloc_unlock>
   2e1fc:	4630      	mov	r0, r6
   2e1fe:	b003      	add	sp, #12
   2e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e204:	f023 0303 	bic.w	r3, r3, #3
   2e208:	18e1      	adds	r1, r4, r3
   2e20a:	4291      	cmp	r1, r2
   2e20c:	db1f      	blt.n	2e24e <_realloc_r+0x136>
   2e20e:	68c3      	ldr	r3, [r0, #12]
   2e210:	6882      	ldr	r2, [r0, #8]
   2e212:	462e      	mov	r6, r5
   2e214:	60d3      	str	r3, [r2, #12]
   2e216:	460c      	mov	r4, r1
   2e218:	609a      	str	r2, [r3, #8]
   2e21a:	e7dd      	b.n	2e1d8 <_realloc_r+0xc0>
   2e21c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e220:	eb09 0107 	add.w	r1, r9, r7
   2e224:	f002 0201 	and.w	r2, r2, #1
   2e228:	444c      	add	r4, r9
   2e22a:	f043 0301 	orr.w	r3, r3, #1
   2e22e:	4317      	orrs	r7, r2
   2e230:	f8c9 7004 	str.w	r7, [r9, #4]
   2e234:	604b      	str	r3, [r1, #4]
   2e236:	6863      	ldr	r3, [r4, #4]
   2e238:	f043 0301 	orr.w	r3, r3, #1
   2e23c:	3108      	adds	r1, #8
   2e23e:	6063      	str	r3, [r4, #4]
   2e240:	4640      	mov	r0, r8
   2e242:	f7ff fe7f 	bl	2df44 <_free_r>
   2e246:	e7d6      	b.n	2e1f6 <_realloc_r+0xde>
   2e248:	4611      	mov	r1, r2
   2e24a:	f7fe bfb5 	b.w	2d1b8 <_malloc_r>
   2e24e:	f01e 0f01 	tst.w	lr, #1
   2e252:	d18e      	bne.n	2e172 <_realloc_r+0x5a>
   2e254:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e258:	eba9 0a01 	sub.w	sl, r9, r1
   2e25c:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e260:	f021 0103 	bic.w	r1, r1, #3
   2e264:	440b      	add	r3, r1
   2e266:	4423      	add	r3, r4
   2e268:	4293      	cmp	r3, r2
   2e26a:	db25      	blt.n	2e2b8 <_realloc_r+0x1a0>
   2e26c:	68c2      	ldr	r2, [r0, #12]
   2e26e:	6881      	ldr	r1, [r0, #8]
   2e270:	4656      	mov	r6, sl
   2e272:	60ca      	str	r2, [r1, #12]
   2e274:	6091      	str	r1, [r2, #8]
   2e276:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e27a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e27e:	1f22      	subs	r2, r4, #4
   2e280:	2a24      	cmp	r2, #36	; 0x24
   2e282:	60c1      	str	r1, [r0, #12]
   2e284:	6088      	str	r0, [r1, #8]
   2e286:	f200 8094 	bhi.w	2e3b2 <_realloc_r+0x29a>
   2e28a:	2a13      	cmp	r2, #19
   2e28c:	d96f      	bls.n	2e36e <_realloc_r+0x256>
   2e28e:	6829      	ldr	r1, [r5, #0]
   2e290:	f8ca 1008 	str.w	r1, [sl, #8]
   2e294:	6869      	ldr	r1, [r5, #4]
   2e296:	f8ca 100c 	str.w	r1, [sl, #12]
   2e29a:	2a1b      	cmp	r2, #27
   2e29c:	f200 80a2 	bhi.w	2e3e4 <_realloc_r+0x2cc>
   2e2a0:	3508      	adds	r5, #8
   2e2a2:	f10a 0210 	add.w	r2, sl, #16
   2e2a6:	e063      	b.n	2e370 <_realloc_r+0x258>
   2e2a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2e2ac:	eba9 0a03 	sub.w	sl, r9, r3
   2e2b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e2b4:	f021 0103 	bic.w	r1, r1, #3
   2e2b8:	1863      	adds	r3, r4, r1
   2e2ba:	4293      	cmp	r3, r2
   2e2bc:	f6ff af59 	blt.w	2e172 <_realloc_r+0x5a>
   2e2c0:	4656      	mov	r6, sl
   2e2c2:	e7d8      	b.n	2e276 <_realloc_r+0x15e>
   2e2c4:	6841      	ldr	r1, [r0, #4]
   2e2c6:	f021 0b03 	bic.w	fp, r1, #3
   2e2ca:	44a3      	add	fp, r4
   2e2cc:	f107 0010 	add.w	r0, r7, #16
   2e2d0:	4583      	cmp	fp, r0
   2e2d2:	da56      	bge.n	2e382 <_realloc_r+0x26a>
   2e2d4:	f01e 0f01 	tst.w	lr, #1
   2e2d8:	f47f af4b 	bne.w	2e172 <_realloc_r+0x5a>
   2e2dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e2e0:	eba9 0a01 	sub.w	sl, r9, r1
   2e2e4:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e2e8:	f021 0103 	bic.w	r1, r1, #3
   2e2ec:	448b      	add	fp, r1
   2e2ee:	4558      	cmp	r0, fp
   2e2f0:	dce2      	bgt.n	2e2b8 <_realloc_r+0x1a0>
   2e2f2:	4656      	mov	r6, sl
   2e2f4:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e2f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e2fc:	1f22      	subs	r2, r4, #4
   2e2fe:	2a24      	cmp	r2, #36	; 0x24
   2e300:	60c1      	str	r1, [r0, #12]
   2e302:	6088      	str	r0, [r1, #8]
   2e304:	f200 808f 	bhi.w	2e426 <_realloc_r+0x30e>
   2e308:	2a13      	cmp	r2, #19
   2e30a:	f240 808a 	bls.w	2e422 <_realloc_r+0x30a>
   2e30e:	6829      	ldr	r1, [r5, #0]
   2e310:	f8ca 1008 	str.w	r1, [sl, #8]
   2e314:	6869      	ldr	r1, [r5, #4]
   2e316:	f8ca 100c 	str.w	r1, [sl, #12]
   2e31a:	2a1b      	cmp	r2, #27
   2e31c:	f200 808a 	bhi.w	2e434 <_realloc_r+0x31c>
   2e320:	3508      	adds	r5, #8
   2e322:	f10a 0210 	add.w	r2, sl, #16
   2e326:	6829      	ldr	r1, [r5, #0]
   2e328:	6011      	str	r1, [r2, #0]
   2e32a:	6869      	ldr	r1, [r5, #4]
   2e32c:	6051      	str	r1, [r2, #4]
   2e32e:	68a9      	ldr	r1, [r5, #8]
   2e330:	6091      	str	r1, [r2, #8]
   2e332:	eb0a 0107 	add.w	r1, sl, r7
   2e336:	ebab 0207 	sub.w	r2, fp, r7
   2e33a:	f042 0201 	orr.w	r2, r2, #1
   2e33e:	6099      	str	r1, [r3, #8]
   2e340:	604a      	str	r2, [r1, #4]
   2e342:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e346:	f003 0301 	and.w	r3, r3, #1
   2e34a:	431f      	orrs	r7, r3
   2e34c:	4640      	mov	r0, r8
   2e34e:	f8ca 7004 	str.w	r7, [sl, #4]
   2e352:	f7ff f9e7 	bl	2d724 <__malloc_unlock>
   2e356:	e751      	b.n	2e1fc <_realloc_r+0xe4>
   2e358:	682b      	ldr	r3, [r5, #0]
   2e35a:	6003      	str	r3, [r0, #0]
   2e35c:	686b      	ldr	r3, [r5, #4]
   2e35e:	6043      	str	r3, [r0, #4]
   2e360:	2a1b      	cmp	r2, #27
   2e362:	d82d      	bhi.n	2e3c0 <_realloc_r+0x2a8>
   2e364:	f100 0308 	add.w	r3, r0, #8
   2e368:	f105 0208 	add.w	r2, r5, #8
   2e36c:	e71b      	b.n	2e1a6 <_realloc_r+0x8e>
   2e36e:	4632      	mov	r2, r6
   2e370:	6829      	ldr	r1, [r5, #0]
   2e372:	6011      	str	r1, [r2, #0]
   2e374:	6869      	ldr	r1, [r5, #4]
   2e376:	6051      	str	r1, [r2, #4]
   2e378:	68a9      	ldr	r1, [r5, #8]
   2e37a:	6091      	str	r1, [r2, #8]
   2e37c:	461c      	mov	r4, r3
   2e37e:	46d1      	mov	r9, sl
   2e380:	e72a      	b.n	2e1d8 <_realloc_r+0xc0>
   2e382:	eb09 0107 	add.w	r1, r9, r7
   2e386:	ebab 0b07 	sub.w	fp, fp, r7
   2e38a:	f04b 0201 	orr.w	r2, fp, #1
   2e38e:	6099      	str	r1, [r3, #8]
   2e390:	604a      	str	r2, [r1, #4]
   2e392:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e396:	f003 0301 	and.w	r3, r3, #1
   2e39a:	431f      	orrs	r7, r3
   2e39c:	4640      	mov	r0, r8
   2e39e:	f845 7c04 	str.w	r7, [r5, #-4]
   2e3a2:	f7ff f9bf 	bl	2d724 <__malloc_unlock>
   2e3a6:	462e      	mov	r6, r5
   2e3a8:	e728      	b.n	2e1fc <_realloc_r+0xe4>
   2e3aa:	4629      	mov	r1, r5
   2e3ac:	f7fb feac 	bl	2a108 <memmove>
   2e3b0:	e6ff      	b.n	2e1b2 <_realloc_r+0x9a>
   2e3b2:	4629      	mov	r1, r5
   2e3b4:	4630      	mov	r0, r6
   2e3b6:	461c      	mov	r4, r3
   2e3b8:	46d1      	mov	r9, sl
   2e3ba:	f7fb fea5 	bl	2a108 <memmove>
   2e3be:	e70b      	b.n	2e1d8 <_realloc_r+0xc0>
   2e3c0:	68ab      	ldr	r3, [r5, #8]
   2e3c2:	6083      	str	r3, [r0, #8]
   2e3c4:	68eb      	ldr	r3, [r5, #12]
   2e3c6:	60c3      	str	r3, [r0, #12]
   2e3c8:	2a24      	cmp	r2, #36	; 0x24
   2e3ca:	d017      	beq.n	2e3fc <_realloc_r+0x2e4>
   2e3cc:	f100 0310 	add.w	r3, r0, #16
   2e3d0:	f105 0210 	add.w	r2, r5, #16
   2e3d4:	e6e7      	b.n	2e1a6 <_realloc_r+0x8e>
   2e3d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e3da:	f023 0303 	bic.w	r3, r3, #3
   2e3de:	441c      	add	r4, r3
   2e3e0:	462e      	mov	r6, r5
   2e3e2:	e6f9      	b.n	2e1d8 <_realloc_r+0xc0>
   2e3e4:	68a9      	ldr	r1, [r5, #8]
   2e3e6:	f8ca 1010 	str.w	r1, [sl, #16]
   2e3ea:	68e9      	ldr	r1, [r5, #12]
   2e3ec:	f8ca 1014 	str.w	r1, [sl, #20]
   2e3f0:	2a24      	cmp	r2, #36	; 0x24
   2e3f2:	d00c      	beq.n	2e40e <_realloc_r+0x2f6>
   2e3f4:	3510      	adds	r5, #16
   2e3f6:	f10a 0218 	add.w	r2, sl, #24
   2e3fa:	e7b9      	b.n	2e370 <_realloc_r+0x258>
   2e3fc:	692b      	ldr	r3, [r5, #16]
   2e3fe:	6103      	str	r3, [r0, #16]
   2e400:	696b      	ldr	r3, [r5, #20]
   2e402:	6143      	str	r3, [r0, #20]
   2e404:	f105 0218 	add.w	r2, r5, #24
   2e408:	f100 0318 	add.w	r3, r0, #24
   2e40c:	e6cb      	b.n	2e1a6 <_realloc_r+0x8e>
   2e40e:	692a      	ldr	r2, [r5, #16]
   2e410:	f8ca 2018 	str.w	r2, [sl, #24]
   2e414:	696a      	ldr	r2, [r5, #20]
   2e416:	f8ca 201c 	str.w	r2, [sl, #28]
   2e41a:	3518      	adds	r5, #24
   2e41c:	f10a 0220 	add.w	r2, sl, #32
   2e420:	e7a6      	b.n	2e370 <_realloc_r+0x258>
   2e422:	4632      	mov	r2, r6
   2e424:	e77f      	b.n	2e326 <_realloc_r+0x20e>
   2e426:	4629      	mov	r1, r5
   2e428:	4630      	mov	r0, r6
   2e42a:	9301      	str	r3, [sp, #4]
   2e42c:	f7fb fe6c 	bl	2a108 <memmove>
   2e430:	9b01      	ldr	r3, [sp, #4]
   2e432:	e77e      	b.n	2e332 <_realloc_r+0x21a>
   2e434:	68a9      	ldr	r1, [r5, #8]
   2e436:	f8ca 1010 	str.w	r1, [sl, #16]
   2e43a:	68e9      	ldr	r1, [r5, #12]
   2e43c:	f8ca 1014 	str.w	r1, [sl, #20]
   2e440:	2a24      	cmp	r2, #36	; 0x24
   2e442:	d003      	beq.n	2e44c <_realloc_r+0x334>
   2e444:	3510      	adds	r5, #16
   2e446:	f10a 0218 	add.w	r2, sl, #24
   2e44a:	e76c      	b.n	2e326 <_realloc_r+0x20e>
   2e44c:	692a      	ldr	r2, [r5, #16]
   2e44e:	f8ca 2018 	str.w	r2, [sl, #24]
   2e452:	696a      	ldr	r2, [r5, #20]
   2e454:	f8ca 201c 	str.w	r2, [sl, #28]
   2e458:	3518      	adds	r5, #24
   2e45a:	f10a 0220 	add.w	r2, sl, #32
   2e45e:	e762      	b.n	2e326 <_realloc_r+0x20e>
   2e460:	2000cb20 	.word	0x2000cb20
